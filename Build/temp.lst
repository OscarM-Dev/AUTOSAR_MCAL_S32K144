
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000140f 	.word	0x0000140f
  10:	00001411 	.word	0x00001411
  14:	00001413 	.word	0x00001413
  18:	00001415 	.word	0x00001415
	...
  2c:	00001417 	.word	0x00001417
  30:	00001419 	.word	0x00001419
  34:	00000000 	.word	0x00000000
  38:	0000141b 	.word	0x0000141b
  3c:	0000141d 	.word	0x0000141d
  40:	0000141f 	.word	0x0000141f
  44:	0000141f 	.word	0x0000141f
  48:	0000141f 	.word	0x0000141f
  4c:	0000141f 	.word	0x0000141f
  50:	0000141f 	.word	0x0000141f
  54:	0000141f 	.word	0x0000141f
  58:	0000141f 	.word	0x0000141f
  5c:	0000141f 	.word	0x0000141f
  60:	0000141f 	.word	0x0000141f
  64:	0000141f 	.word	0x0000141f
  68:	0000141f 	.word	0x0000141f
  6c:	0000141f 	.word	0x0000141f
  70:	0000141f 	.word	0x0000141f
  74:	0000141f 	.word	0x0000141f
  78:	0000141f 	.word	0x0000141f
  7c:	0000141f 	.word	0x0000141f
  80:	0000141f 	.word	0x0000141f
  84:	0000141f 	.word	0x0000141f
  88:	0000141f 	.word	0x0000141f
  8c:	0000141f 	.word	0x0000141f
  90:	0000141f 	.word	0x0000141f
  94:	0000141f 	.word	0x0000141f
  98:	0000141f 	.word	0x0000141f
  9c:	0000141f 	.word	0x0000141f
  a0:	0000141f 	.word	0x0000141f
  a4:	0000141f 	.word	0x0000141f
  a8:	0000141f 	.word	0x0000141f
  ac:	0000141f 	.word	0x0000141f
  b0:	0000141f 	.word	0x0000141f
  b4:	0000141f 	.word	0x0000141f
  b8:	0000141f 	.word	0x0000141f
  bc:	0000141f 	.word	0x0000141f
  c0:	0000141f 	.word	0x0000141f
  c4:	0000141f 	.word	0x0000141f
  c8:	0000141f 	.word	0x0000141f
  cc:	0000141f 	.word	0x0000141f
  d0:	0000141f 	.word	0x0000141f
  d4:	0000141f 	.word	0x0000141f
  d8:	0000141f 	.word	0x0000141f
  dc:	0000141f 	.word	0x0000141f
  e0:	0000141f 	.word	0x0000141f
  e4:	0000141f 	.word	0x0000141f
  e8:	0000141f 	.word	0x0000141f
  ec:	0000141f 	.word	0x0000141f
  f0:	0000141f 	.word	0x0000141f
  f4:	0000141f 	.word	0x0000141f
  f8:	0000141f 	.word	0x0000141f
  fc:	0000141f 	.word	0x0000141f
 100:	0000141f 	.word	0x0000141f
 104:	0000141f 	.word	0x0000141f
 108:	0000141f 	.word	0x0000141f
 10c:	0000141f 	.word	0x0000141f
 110:	0000141f 	.word	0x0000141f
 114:	0000141f 	.word	0x0000141f
 118:	0000141f 	.word	0x0000141f
 11c:	0000141f 	.word	0x0000141f
 120:	0000141f 	.word	0x0000141f
 124:	0000141f 	.word	0x0000141f
 128:	0000141f 	.word	0x0000141f
 12c:	0000141f 	.word	0x0000141f
 130:	0000141f 	.word	0x0000141f
 134:	0000141f 	.word	0x0000141f
 138:	0000141f 	.word	0x0000141f
 13c:	0000141f 	.word	0x0000141f
 140:	0000141f 	.word	0x0000141f
 144:	0000141f 	.word	0x0000141f
 148:	0000141f 	.word	0x0000141f
 14c:	0000141f 	.word	0x0000141f
 150:	0000141f 	.word	0x0000141f
 154:	0000141f 	.word	0x0000141f
 158:	0000141f 	.word	0x0000141f
 15c:	0000141f 	.word	0x0000141f
 160:	0000141f 	.word	0x0000141f
 164:	0000141f 	.word	0x0000141f
 168:	0000141f 	.word	0x0000141f
 16c:	0000141f 	.word	0x0000141f
 170:	0000141f 	.word	0x0000141f
 174:	0000141f 	.word	0x0000141f
 178:	0000141f 	.word	0x0000141f
 17c:	0000141f 	.word	0x0000141f
 180:	0000141f 	.word	0x0000141f
 184:	0000141f 	.word	0x0000141f
 188:	0000141f 	.word	0x0000141f
 18c:	0000141f 	.word	0x0000141f
 190:	0000141f 	.word	0x0000141f
 194:	0000141f 	.word	0x0000141f
 198:	0000141f 	.word	0x0000141f
 19c:	0000141f 	.word	0x0000141f
 1a0:	0000141f 	.word	0x0000141f
 1a4:	0000141f 	.word	0x0000141f
 1a8:	0000141f 	.word	0x0000141f
 1ac:	0000141f 	.word	0x0000141f
 1b0:	0000141f 	.word	0x0000141f
 1b4:	0000141f 	.word	0x0000141f
 1b8:	0000141f 	.word	0x0000141f
 1bc:	0000141f 	.word	0x0000141f
 1c0:	0000141f 	.word	0x0000141f
 1c4:	0000141f 	.word	0x0000141f
 1c8:	0000141f 	.word	0x0000141f
 1cc:	0000141f 	.word	0x0000141f
 1d0:	0000141f 	.word	0x0000141f
 1d4:	0000141f 	.word	0x0000141f
 1d8:	0000141f 	.word	0x0000141f
 1dc:	0000141f 	.word	0x0000141f
 1e0:	0000141f 	.word	0x0000141f
 1e4:	0000141f 	.word	0x0000141f
 1e8:	0000141f 	.word	0x0000141f
 1ec:	0000141f 	.word	0x0000141f
 1f0:	0000141f 	.word	0x0000141f
 1f4:	0000141f 	.word	0x0000141f
 1f8:	0000141f 	.word	0x0000141f
 1fc:	0000141f 	.word	0x0000141f
 200:	0000141f 	.word	0x0000141f
 204:	0000141f 	.word	0x0000141f
 208:	0000141f 	.word	0x0000141f
 20c:	0000141f 	.word	0x0000141f
 210:	0000141f 	.word	0x0000141f
 214:	0000141f 	.word	0x0000141f
 218:	0000141f 	.word	0x0000141f
 21c:	0000141f 	.word	0x0000141f
 220:	0000141f 	.word	0x0000141f
 224:	0000141f 	.word	0x0000141f
 228:	0000141f 	.word	0x0000141f
 22c:	0000141f 	.word	0x0000141f
 230:	0000141f 	.word	0x0000141f
 234:	0000141f 	.word	0x0000141f
 238:	0000141f 	.word	0x0000141f
 23c:	0000141f 	.word	0x0000141f
 240:	0000141f 	.word	0x0000141f
 244:	0000141f 	.word	0x0000141f
 248:	0000141f 	.word	0x0000141f
 24c:	0000141f 	.word	0x0000141f
 250:	0000141f 	.word	0x0000141f
 254:	0000141f 	.word	0x0000141f
 258:	0000141f 	.word	0x0000141f
 25c:	0000141f 	.word	0x0000141f
 260:	0000141f 	.word	0x0000141f
 264:	0000141f 	.word	0x0000141f
 268:	0000141f 	.word	0x0000141f
 26c:	0000141f 	.word	0x0000141f
 270:	0000141f 	.word	0x0000141f
 274:	0000141f 	.word	0x0000141f
 278:	0000141f 	.word	0x0000141f
 27c:	0000141f 	.word	0x0000141f
 280:	0000141f 	.word	0x0000141f
 284:	0000141f 	.word	0x0000141f
 288:	0000141f 	.word	0x0000141f
 28c:	0000141f 	.word	0x0000141f
 290:	0000141f 	.word	0x0000141f
 294:	0000141f 	.word	0x0000141f
 298:	0000141f 	.word	0x0000141f
 29c:	0000141f 	.word	0x0000141f
 2a0:	0000141f 	.word	0x0000141f
 2a4:	0000141f 	.word	0x0000141f
 2a8:	0000141f 	.word	0x0000141f
 2ac:	0000141f 	.word	0x0000141f
 2b0:	0000141f 	.word	0x0000141f
 2b4:	0000141f 	.word	0x0000141f
 2b8:	0000141f 	.word	0x0000141f
 2bc:	0000141f 	.word	0x0000141f
 2c0:	0000141f 	.word	0x0000141f
 2c4:	0000141f 	.word	0x0000141f
 2c8:	0000141f 	.word	0x0000141f
 2cc:	0000141f 	.word	0x0000141f
 2d0:	0000141f 	.word	0x0000141f
 2d4:	0000141f 	.word	0x0000141f
 2d8:	0000141f 	.word	0x0000141f
 2dc:	0000141f 	.word	0x0000141f
 2e0:	0000141f 	.word	0x0000141f
 2e4:	0000141f 	.word	0x0000141f
 2e8:	0000141f 	.word	0x0000141f
 2ec:	0000141f 	.word	0x0000141f
 2f0:	0000141f 	.word	0x0000141f
 2f4:	0000141f 	.word	0x0000141f
 2f8:	0000141f 	.word	0x0000141f
 2fc:	0000141f 	.word	0x0000141f
 300:	0000141f 	.word	0x0000141f
 304:	0000141f 	.word	0x0000141f
 308:	0000141f 	.word	0x0000141f
 30c:	0000141f 	.word	0x0000141f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fefb 	bl	127c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 ffba 	bl	1404 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e6c 	.word	0x1fff8e6c

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ff05 	bl	13a8 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}

    EcuM_Init();    //MCU configuration.
     8b2:	f000 fdc3 	bl	143c <EcuM_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8b6:	4803      	ldr	r0, [pc, #12]	; (8c4 <main+0x14>)
     8b8:	f000 f954 	bl	b64 <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8bc:	f000 fa10 	bl	ce0 <Scheduler_MainFunction>
     8c0:	e7fc      	b.n	8bc <main+0xc>
     8c2:	bf00      	nop
     8c4:	1fff8e14 	.word	0x1fff8e14

000008c8 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8c8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ca:	f3ef 8310 	mrs	r3, PRIMASK
     8ce:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d0:	4623      	mov	r3, r4
}
     8d2:	4618      	mov	r0, r3
     8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d8:	4770      	bx	lr

000008da <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8da:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8dc:	f3ef 8310 	mrs	r3, PRIMASK
     8e0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e2:	4623      	mov	r3, r4
}
     8e4:	4618      	mov	r0, r3
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ea:	4770      	bx	lr

000008ec <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     8ec:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ee:	f3ef 8310 	mrs	r3, PRIMASK
     8f2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f4:	4623      	mov	r3, r4
}
     8f6:	4618      	mov	r0, r3
     8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8fc:	4770      	bx	lr

000008fe <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     8fe:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     900:	f000 fb0e 	bl	f20 <HwIoAb_Buttons_MainFunction>
}
     904:	bf00      	nop
     906:	bd08      	pop	{r3, pc}

00000908 <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click toggle only led1 (PTC9), hold click toggle both leds (PTC8-9).
 * @note Button 2, Single click toggle only led2 (PTC10), double click toggle only led3 (PTC11), hold click toggle both leds (PTC10-11).
 * @note Button 3, Single click toggle only led4 (PTC13), double click toggle only led5 (PTC14), hold click toggle both leds (PTC13-14).
 * 
 */
void Task2_callback( void ) {
     908:	b500      	push	{lr}
     90a:	b083      	sub	sp, #12
    //local data.
    uint8 i = 0;
     90c:	2300      	movs	r3, #0
     90e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     912:	2300      	movs	r3, #0
     914:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     918:	2300      	movs	r3, #0
     91a:	f88d 3007 	strb.w	r3, [sp, #7]
     91e:	e074      	b.n	a0a <Task2_callback+0x102>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     920:	f89d 3007 	ldrb.w	r3, [sp, #7]
     924:	3301      	adds	r3, #1
     926:	b2db      	uxtb	r3, r3
     928:	4618      	mov	r0, r3
     92a:	f000 facf 	bl	ecc <HwIoAb_Buttons_GetEvent>
     92e:	4603      	mov	r3, r0
     930:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     934:	f89d 3006 	ldrb.w	r3, [sp, #6]
     938:	2b00      	cmp	r3, #0
     93a:	d05e      	beq.n	9fa <Task2_callback+0xf2>
            switch ( i ) {    
     93c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     940:	2b02      	cmp	r3, #2
     942:	d03e      	beq.n	9c2 <Task2_callback+0xba>
     944:	2b02      	cmp	r3, #2
     946:	dc5a      	bgt.n	9fe <Task2_callback+0xf6>
     948:	2b00      	cmp	r3, #0
     94a:	d002      	beq.n	952 <Task2_callback+0x4a>
     94c:	2b01      	cmp	r3, #1
     94e:	d01c      	beq.n	98a <Task2_callback+0x82>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     950:	e055      	b.n	9fe <Task2_callback+0xf6>
                    switch ( actual_event ) {
     952:	f89d 3006 	ldrb.w	r3, [sp, #6]
     956:	2b03      	cmp	r3, #3
     958:	d00e      	beq.n	978 <Task2_callback+0x70>
     95a:	2b03      	cmp	r3, #3
     95c:	dc13      	bgt.n	986 <Task2_callback+0x7e>
     95e:	2b01      	cmp	r3, #1
     960:	d002      	beq.n	968 <Task2_callback+0x60>
     962:	2b02      	cmp	r3, #2
     964:	d004      	beq.n	970 <Task2_callback+0x68>
                        break;
     966:	e00e      	b.n	986 <Task2_callback+0x7e>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     968:	2000      	movs	r0, #0
     96a:	f000 fc69 	bl	1240 <HwIoAb_Leds_TurnToggle>
                        break;
     96e:	e00b      	b.n	988 <Task2_callback+0x80>
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     970:	2001      	movs	r0, #1
     972:	f000 fc65 	bl	1240 <HwIoAb_Leds_TurnToggle>
                        break;
     976:	e007      	b.n	988 <Task2_callback+0x80>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     978:	2000      	movs	r0, #0
     97a:	f000 fc61 	bl	1240 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     97e:	2001      	movs	r0, #1
     980:	f000 fc5e 	bl	1240 <HwIoAb_Leds_TurnToggle>
                        break;
     984:	e000      	b.n	988 <Task2_callback+0x80>
                        break;
     986:	bf00      	nop
                break;
     988:	e03a      	b.n	a00 <Task2_callback+0xf8>
                    switch ( actual_event ) {
     98a:	f89d 3006 	ldrb.w	r3, [sp, #6]
     98e:	2b03      	cmp	r3, #3
     990:	d00e      	beq.n	9b0 <Task2_callback+0xa8>
     992:	2b03      	cmp	r3, #3
     994:	dc13      	bgt.n	9be <Task2_callback+0xb6>
     996:	2b01      	cmp	r3, #1
     998:	d002      	beq.n	9a0 <Task2_callback+0x98>
     99a:	2b02      	cmp	r3, #2
     99c:	d004      	beq.n	9a8 <Task2_callback+0xa0>
                        break;
     99e:	e00e      	b.n	9be <Task2_callback+0xb6>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     9a0:	2002      	movs	r0, #2
     9a2:	f000 fc4d 	bl	1240 <HwIoAb_Leds_TurnToggle>
                        break;
     9a6:	e00b      	b.n	9c0 <Task2_callback+0xb8>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_3_ID );
     9a8:	2003      	movs	r0, #3
     9aa:	f000 fc49 	bl	1240 <HwIoAb_Leds_TurnToggle>
                        break;
     9ae:	e007      	b.n	9c0 <Task2_callback+0xb8>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     9b0:	2002      	movs	r0, #2
     9b2:	f000 fc45 	bl	1240 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_3_ID );
     9b6:	2003      	movs	r0, #3
     9b8:	f000 fc42 	bl	1240 <HwIoAb_Leds_TurnToggle>
                        break;
     9bc:	e000      	b.n	9c0 <Task2_callback+0xb8>
                        break;
     9be:	bf00      	nop
                break;
     9c0:	e01e      	b.n	a00 <Task2_callback+0xf8>
                        switch ( actual_event ) {
     9c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
     9c6:	2b03      	cmp	r3, #3
     9c8:	d00e      	beq.n	9e8 <Task2_callback+0xe0>
     9ca:	2b03      	cmp	r3, #3
     9cc:	dc13      	bgt.n	9f6 <Task2_callback+0xee>
     9ce:	2b01      	cmp	r3, #1
     9d0:	d002      	beq.n	9d8 <Task2_callback+0xd0>
     9d2:	2b02      	cmp	r3, #2
     9d4:	d004      	beq.n	9e0 <Task2_callback+0xd8>
                            break;
     9d6:	e00e      	b.n	9f6 <Task2_callback+0xee>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_4_ID );
     9d8:	2004      	movs	r0, #4
     9da:	f000 fc31 	bl	1240 <HwIoAb_Leds_TurnToggle>
                            break;
     9de:	e00b      	b.n	9f8 <Task2_callback+0xf0>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_5_ID );
     9e0:	2005      	movs	r0, #5
     9e2:	f000 fc2d 	bl	1240 <HwIoAb_Leds_TurnToggle>
                            break;
     9e6:	e007      	b.n	9f8 <Task2_callback+0xf0>
                               HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_4_ID );
     9e8:	2004      	movs	r0, #4
     9ea:	f000 fc29 	bl	1240 <HwIoAb_Leds_TurnToggle>
                               HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_5_ID );
     9ee:	2005      	movs	r0, #5
     9f0:	f000 fc26 	bl	1240 <HwIoAb_Leds_TurnToggle>
                            break;
     9f4:	e000      	b.n	9f8 <Task2_callback+0xf0>
                            break;
     9f6:	bf00      	nop
                break;
     9f8:	e002      	b.n	a00 <Task2_callback+0xf8>
            }
        }
     9fa:	bf00      	nop
     9fc:	e000      	b.n	a00 <Task2_callback+0xf8>
                break;
     9fe:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a04:	3301      	adds	r3, #1
     a06:	f88d 3007 	strb.w	r3, [sp, #7]
     a0a:	4b06      	ldr	r3, [pc, #24]	; (a24 <Task2_callback+0x11c>)
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	f89d 2007 	ldrb.w	r2, [sp, #7]
     a14:	429a      	cmp	r2, r3
     a16:	d383      	bcc.n	920 <Task2_callback+0x18>
    }
}
     a18:	bf00      	nop
     a1a:	bf00      	nop
     a1c:	b003      	add	sp, #12
     a1e:	f85d fb04 	ldr.w	pc, [sp], #4
     a22:	bf00      	nop
     a24:	1fff8b40 	.word	0x1fff8b40

00000a28 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {    
}
     a28:	bf00      	nop
     a2a:	4770      	bx	lr

00000a2c <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     a2c:	b082      	sub	sp, #8
     a2e:	9001      	str	r0, [sp, #4]
     a30:	460b      	mov	r3, r1
     a32:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     a36:	9b01      	ldr	r3, [sp, #4]
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a3e:	2101      	movs	r1, #1
     a40:	fa01 f202 	lsl.w	r2, r1, r2
     a44:	431a      	orrs	r2, r3
     a46:	9b01      	ldr	r3, [sp, #4]
     a48:	601a      	str	r2, [r3, #0]
}
     a4a:	bf00      	nop
     a4c:	b002      	add	sp, #8
     a4e:	4770      	bx	lr

00000a50 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     a50:	b082      	sub	sp, #8
     a52:	9001      	str	r0, [sp, #4]
     a54:	460b      	mov	r3, r1
     a56:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     a5a:	9b01      	ldr	r3, [sp, #4]
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a62:	2101      	movs	r1, #1
     a64:	fa01 f202 	lsl.w	r2, r1, r2
     a68:	43d2      	mvns	r2, r2
     a6a:	401a      	ands	r2, r3
     a6c:	9b01      	ldr	r3, [sp, #4]
     a6e:	601a      	str	r2, [r3, #0]
}
     a70:	bf00      	nop
     a72:	b002      	add	sp, #8
     a74:	4770      	bx	lr

00000a76 <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     a76:	b084      	sub	sp, #16
     a78:	9001      	str	r0, [sp, #4]
     a7a:	460b      	mov	r3, r1
     a7c:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     a80:	2300      	movs	r3, #0
     a82:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     a86:	f89d 3003 	ldrb.w	r3, [sp, #3]
     a8a:	2201      	movs	r2, #1
     a8c:	fa02 f303 	lsl.w	r3, r2, r3
     a90:	461a      	mov	r2, r3
     a92:	9b01      	ldr	r3, [sp, #4]
     a94:	4013      	ands	r3, r2
     a96:	2b00      	cmp	r3, #0
     a98:	bf14      	ite	ne
     a9a:	2301      	movne	r3, #1
     a9c:	2300      	moveq	r3, #0
     a9e:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     aa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     aa6:	4618      	mov	r0, r3
     aa8:	b004      	add	sp, #16
     aaa:	4770      	bx	lr

00000aac <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     aac:	b082      	sub	sp, #8
     aae:	9001      	str	r0, [sp, #4]
     ab0:	460b      	mov	r3, r1
     ab2:	f88d 3003 	strb.w	r3, [sp, #3]
     ab6:	4613      	mov	r3, r2
     ab8:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     abc:	f89d 3002 	ldrb.w	r3, [sp, #2]
     ac0:	2b00      	cmp	r3, #0
     ac2:	d00a      	beq.n	ada <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     ac4:	9b01      	ldr	r3, [sp, #4]
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     acc:	2101      	movs	r1, #1
     ace:	fa01 f202 	lsl.w	r2, r1, r2
     ad2:	431a      	orrs	r2, r3
     ad4:	9b01      	ldr	r3, [sp, #4]
     ad6:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     ad8:	e00a      	b.n	af0 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     ada:	9b01      	ldr	r3, [sp, #4]
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	f89d 2003 	ldrb.w	r2, [sp, #3]
     ae2:	2101      	movs	r1, #1
     ae4:	fa01 f202 	lsl.w	r2, r1, r2
     ae8:	43d2      	mvns	r2, r2
     aea:	401a      	ands	r2, r3
     aec:	9b01      	ldr	r3, [sp, #4]
     aee:	601a      	str	r2, [r3, #0]
}
     af0:	bf00      	nop
     af2:	b002      	add	sp, #8
     af4:	4770      	bx	lr

00000af6 <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     af6:	b500      	push	{lr}
     af8:	b085      	sub	sp, #20
     afa:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     afc:	2300      	movs	r3, #0
     afe:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     b02:	2300      	movs	r3, #0
     b04:	f88d 300f 	strb.w	r3, [sp, #15]
     b08:	e023      	b.n	b52 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     b0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b0e:	9b01      	ldr	r3, [sp, #4]
     b10:	3208      	adds	r2, #8
     b12:	2100      	movs	r1, #0
     b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     b18:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b1c:	9a01      	ldr	r2, [sp, #4]
     b1e:	3308      	adds	r3, #8
     b20:	009b      	lsls	r3, r3, #2
     b22:	4413      	add	r3, r2
     b24:	2200      	movs	r2, #0
     b26:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     b28:	9b01      	ldr	r3, [sp, #4]
     b2a:	332c      	adds	r3, #44	; 0x2c
     b2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b30:	4611      	mov	r1, r2
     b32:	4618      	mov	r0, r3
     b34:	f7ff ff8c 	bl	a50 <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     b38:	9b01      	ldr	r3, [sp, #4]
     b3a:	3328      	adds	r3, #40	; 0x28
     b3c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b40:	4611      	mov	r1, r2
     b42:	4618      	mov	r0, r3
     b44:	f7ff ff72 	bl	a2c <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     b48:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b4c:	3301      	adds	r3, #1
     b4e:	f88d 300f 	strb.w	r3, [sp, #15]
     b52:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b56:	2b00      	cmp	r3, #0
     b58:	d0d7      	beq.n	b0a <Scheduler_InitQueue+0x14>
    }
}
     b5a:	bf00      	nop
     b5c:	bf00      	nop
     b5e:	b005      	add	sp, #20
     b60:	f85d fb04 	ldr.w	pc, [sp], #4

00000b64 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     b64:	b500      	push	{lr}
     b66:	b085      	sub	sp, #20
     b68:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     b6a:	2301      	movs	r3, #1
     b6c:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     b70:	2300      	movs	r3, #0
     b72:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     b76:	2300      	movs	r3, #0
     b78:	f88d 300f 	strb.w	r3, [sp, #15]
     b7c:	e033      	b.n	be6 <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     b7e:	4b44      	ldr	r3, [pc, #272]	; (c90 <Scheduler_Init+0x12c>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	6899      	ldr	r1, [r3, #8]
     b84:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b88:	4613      	mov	r3, r2
     b8a:	005b      	lsls	r3, r3, #1
     b8c:	4413      	add	r3, r2
     b8e:	009b      	lsls	r3, r3, #2
     b90:	440b      	add	r3, r1
     b92:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b96:	6819      	ldr	r1, [r3, #0]
     b98:	9b01      	ldr	r3, [sp, #4]
     b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     b9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ba2:	9b01      	ldr	r3, [sp, #4]
     ba4:	3202      	adds	r2, #2
     ba6:	2100      	movs	r1, #0
     ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     bac:	9b01      	ldr	r3, [sp, #4]
     bae:	f103 0018 	add.w	r0, r3, #24
     bb2:	4b37      	ldr	r3, [pc, #220]	; (c90 <Scheduler_Init+0x12c>)
     bb4:	681b      	ldr	r3, [r3, #0]
     bb6:	6899      	ldr	r1, [r3, #8]
     bb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     bbc:	4613      	mov	r3, r2
     bbe:	005b      	lsls	r3, r3, #1
     bc0:	4413      	add	r3, r2
     bc2:	009b      	lsls	r3, r3, #2
     bc4:	440b      	add	r3, r1
     bc6:	791b      	ldrb	r3, [r3, #4]
     bc8:	2b00      	cmp	r3, #0
     bca:	bf14      	ite	ne
     bcc:	2301      	movne	r3, #1
     bce:	2300      	moveq	r3, #0
     bd0:	b2da      	uxtb	r2, r3
     bd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bd6:	4619      	mov	r1, r3
     bd8:	f7ff ff68 	bl	aac <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     bdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     be0:	3301      	adds	r3, #1
     be2:	f88d 300f 	strb.w	r3, [sp, #15]
     be6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bea:	2b01      	cmp	r3, #1
     bec:	d9c7      	bls.n	b7e <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     bee:	2300      	movs	r3, #0
     bf0:	f88d 300f 	strb.w	r3, [sp, #15]
     bf4:	e03f      	b.n	c76 <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     bf6:	4b26      	ldr	r3, [pc, #152]	; (c90 <Scheduler_Init+0x12c>)
     bf8:	681b      	ldr	r3, [r3, #0]
     bfa:	6919      	ldr	r1, [r3, #16]
     bfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     c00:	4613      	mov	r3, r2
     c02:	005b      	lsls	r3, r3, #1
     c04:	4413      	add	r3, r2
     c06:	009b      	lsls	r3, r3, #2
     c08:	440b      	add	r3, r1
     c0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     c0e:	6819      	ldr	r1, [r3, #0]
     c10:	9b01      	ldr	r3, [sp, #4]
     c12:	3204      	adds	r2, #4
     c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     c18:	4b1d      	ldr	r3, [pc, #116]	; (c90 <Scheduler_Init+0x12c>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	6919      	ldr	r1, [r3, #16]
     c1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     c22:	4613      	mov	r3, r2
     c24:	005b      	lsls	r3, r3, #1
     c26:	4413      	add	r3, r2
     c28:	009b      	lsls	r3, r3, #2
     c2a:	18ca      	adds	r2, r1, r3
     c2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c30:	6812      	ldr	r2, [r2, #0]
     c32:	9901      	ldr	r1, [sp, #4]
     c34:	3304      	adds	r3, #4
     c36:	009b      	lsls	r3, r3, #2
     c38:	440b      	add	r3, r1
     c3a:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     c3c:	9b01      	ldr	r3, [sp, #4]
     c3e:	f103 001c 	add.w	r0, r3, #28
     c42:	4b13      	ldr	r3, [pc, #76]	; (c90 <Scheduler_Init+0x12c>)
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	6919      	ldr	r1, [r3, #16]
     c48:	f89d 200f 	ldrb.w	r2, [sp, #15]
     c4c:	4613      	mov	r3, r2
     c4e:	005b      	lsls	r3, r3, #1
     c50:	4413      	add	r3, r2
     c52:	009b      	lsls	r3, r3, #2
     c54:	440b      	add	r3, r1
     c56:	791b      	ldrb	r3, [r3, #4]
     c58:	2b00      	cmp	r3, #0
     c5a:	bf14      	ite	ne
     c5c:	2301      	movne	r3, #1
     c5e:	2300      	moveq	r3, #0
     c60:	b2da      	uxtb	r2, r3
     c62:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c66:	4619      	mov	r1, r3
     c68:	f7ff ff20 	bl	aac <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c70:	3301      	adds	r3, #1
     c72:	f88d 300f 	strb.w	r3, [sp, #15]
     c76:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d0bb      	beq.n	bf6 <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     c7e:	9801      	ldr	r0, [sp, #4]
     c80:	f7ff ff39 	bl	af6 <Scheduler_InitQueue>

    return status;
     c84:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     c88:	4618      	mov	r0, r3
     c8a:	b005      	add	sp, #20
     c8c:	f85d fb04 	ldr.w	pc, [sp], #4
     c90:	1fff8b38 	.word	0x1fff8b38

00000c94 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     c94:	b084      	sub	sp, #16
     c96:	4603      	mov	r3, r0
     c98:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     c9c:	2300      	movs	r3, #0
     c9e:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     ca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d011      	beq.n	ccc <Scheduler_GetTimer+0x38>
     ca8:	4b0b      	ldr	r3, [pc, #44]	; (cd8 <Scheduler_GetTimer+0x44>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	7b1b      	ldrb	r3, [r3, #12]
     cae:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cb2:	429a      	cmp	r2, r3
     cb4:	d80a      	bhi.n	ccc <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     cb6:	4b09      	ldr	r3, [pc, #36]	; (cdc <Scheduler_GetTimer+0x48>)
     cb8:	681a      	ldr	r2, [r3, #0]
     cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cbe:	3b01      	subs	r3, #1
     cc0:	3304      	adds	r3, #4
     cc2:	009b      	lsls	r3, r3, #2
     cc4:	4413      	add	r3, r2
     cc6:	685b      	ldr	r3, [r3, #4]
     cc8:	9303      	str	r3, [sp, #12]
     cca:	e001      	b.n	cd0 <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     ccc:	2300      	movs	r3, #0
     cce:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     cd0:	9b03      	ldr	r3, [sp, #12]
}
     cd2:	4618      	mov	r0, r3
     cd4:	b004      	add	sp, #16
     cd6:	4770      	bx	lr
     cd8:	1fff8b38 	.word	0x1fff8b38
     cdc:	1fff8b3c 	.word	0x1fff8b3c

00000ce0 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     ce0:	b500      	push	{lr}
     ce2:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     ce4:	4b5e      	ldr	r3, [pc, #376]	; (e60 <Scheduler_MainFunction+0x180>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     cee:	fb02 f303 	mul.w	r3, r2, r3
     cf2:	2101      	movs	r1, #1
     cf4:	4618      	mov	r0, r3
     cf6:	f000 fc22 	bl	153e <OsIf_MicrosToTicks>
     cfa:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     cfc:	2001      	movs	r0, #1
     cfe:	f000 fbd2 	bl	14a6 <OsIf_GetCounter>
     d02:	4603      	mov	r3, r0
     d04:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     d06:	2300      	movs	r3, #0
     d08:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     d0a:	2300      	movs	r3, #0
     d0c:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d10:	466b      	mov	r3, sp
     d12:	2101      	movs	r1, #1
     d14:	4618      	mov	r0, r3
     d16:	f000 fbdf 	bl	14d8 <OsIf_GetElapsed>
     d1a:	4602      	mov	r2, r0
     d1c:	9b03      	ldr	r3, [sp, #12]
     d1e:	4413      	add	r3, r2
     d20:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     d22:	9a03      	ldr	r2, [sp, #12]
     d24:	9b01      	ldr	r3, [sp, #4]
     d26:	429a      	cmp	r2, r3
     d28:	d3f2      	bcc.n	d10 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d2a:	2300      	movs	r3, #0
     d2c:	f88d 300b 	strb.w	r3, [sp, #11]
     d30:	e03a      	b.n	da8 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     d32:	4b4c      	ldr	r3, [pc, #304]	; (e64 <Scheduler_MainFunction+0x184>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	69db      	ldr	r3, [r3, #28]
     d38:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d3c:	4611      	mov	r1, r2
     d3e:	4618      	mov	r0, r3
     d40:	f7ff fe99 	bl	a76 <Bfx_GetBit_u32u8_u8>
     d44:	4603      	mov	r3, r0
     d46:	2b00      	cmp	r3, #0
     d48:	d029      	beq.n	d9e <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     d4a:	4b46      	ldr	r3, [pc, #280]	; (e64 <Scheduler_MainFunction+0x184>)
     d4c:	681a      	ldr	r2, [r3, #0]
     d4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d52:	3304      	adds	r3, #4
     d54:	009b      	lsls	r3, r3, #2
     d56:	4413      	add	r3, r2
     d58:	6858      	ldr	r0, [r3, #4]
     d5a:	4b41      	ldr	r3, [pc, #260]	; (e60 <Scheduler_MainFunction+0x180>)
     d5c:	681b      	ldr	r3, [r3, #0]
     d5e:	681a      	ldr	r2, [r3, #0]
     d60:	4b40      	ldr	r3, [pc, #256]	; (e64 <Scheduler_MainFunction+0x184>)
     d62:	6819      	ldr	r1, [r3, #0]
     d64:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d68:	1a82      	subs	r2, r0, r2
     d6a:	3304      	adds	r3, #4
     d6c:	009b      	lsls	r3, r3, #2
     d6e:	440b      	add	r3, r1
     d70:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     d72:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d76:	3301      	adds	r3, #1
     d78:	b2db      	uxtb	r3, r3
     d7a:	4618      	mov	r0, r3
     d7c:	f7ff ff8a 	bl	c94 <Scheduler_GetTimer>
     d80:	4603      	mov	r3, r0
     d82:	2b00      	cmp	r3, #0
     d84:	d10b      	bne.n	d9e <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     d86:	4b36      	ldr	r3, [pc, #216]	; (e60 <Scheduler_MainFunction+0x180>)
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	6919      	ldr	r1, [r3, #16]
     d8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d90:	4613      	mov	r3, r2
     d92:	005b      	lsls	r3, r3, #1
     d94:	4413      	add	r3, r2
     d96:	009b      	lsls	r3, r3, #2
     d98:	440b      	add	r3, r1
     d9a:	689b      	ldr	r3, [r3, #8]
     d9c:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     da2:	3301      	adds	r3, #1
     da4:	f88d 300b 	strb.w	r3, [sp, #11]
     da8:	4b2d      	ldr	r3, [pc, #180]	; (e60 <Scheduler_MainFunction+0x180>)
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	7b1b      	ldrb	r3, [r3, #12]
     dae:	f89d 200b 	ldrb.w	r2, [sp, #11]
     db2:	429a      	cmp	r2, r3
     db4:	d3bd      	bcc.n	d32 <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     db6:	2300      	movs	r3, #0
     db8:	f88d 300b 	strb.w	r3, [sp, #11]
     dbc:	e045      	b.n	e4a <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     dbe:	4b29      	ldr	r3, [pc, #164]	; (e64 <Scheduler_MainFunction+0x184>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	699b      	ldr	r3, [r3, #24]
     dc4:	f89d 200b 	ldrb.w	r2, [sp, #11]
     dc8:	4611      	mov	r1, r2
     dca:	4618      	mov	r0, r3
     dcc:	f7ff fe53 	bl	a76 <Bfx_GetBit_u32u8_u8>
     dd0:	4603      	mov	r3, r0
     dd2:	2b00      	cmp	r3, #0
     dd4:	d034      	beq.n	e40 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     dd6:	4b23      	ldr	r3, [pc, #140]	; (e64 <Scheduler_MainFunction+0x184>)
     dd8:	681b      	ldr	r3, [r3, #0]
     dda:	f89d 200b 	ldrb.w	r2, [sp, #11]
     dde:	3202      	adds	r2, #2
     de0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     de4:	4b1e      	ldr	r3, [pc, #120]	; (e60 <Scheduler_MainFunction+0x180>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	6819      	ldr	r1, [r3, #0]
     dea:	4b1e      	ldr	r3, [pc, #120]	; (e64 <Scheduler_MainFunction+0x184>)
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	f89d 200b 	ldrb.w	r2, [sp, #11]
     df2:	4401      	add	r1, r0
     df4:	3202      	adds	r2, #2
     df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     dfa:	4b1a      	ldr	r3, [pc, #104]	; (e64 <Scheduler_MainFunction+0x184>)
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e02:	3202      	adds	r2, #2
     e04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     e08:	4b16      	ldr	r3, [pc, #88]	; (e64 <Scheduler_MainFunction+0x184>)
     e0a:	681b      	ldr	r3, [r3, #0]
     e0c:	f89d 100b 	ldrb.w	r1, [sp, #11]
     e10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     e14:	429a      	cmp	r2, r3
     e16:	d313      	bcc.n	e40 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     e18:	4b11      	ldr	r3, [pc, #68]	; (e60 <Scheduler_MainFunction+0x180>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	6899      	ldr	r1, [r3, #8]
     e1e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e22:	4613      	mov	r3, r2
     e24:	005b      	lsls	r3, r3, #1
     e26:	4413      	add	r3, r2
     e28:	009b      	lsls	r3, r3, #2
     e2a:	440b      	add	r3, r1
     e2c:	689b      	ldr	r3, [r3, #8]
     e2e:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     e30:	4b0c      	ldr	r3, [pc, #48]	; (e64 <Scheduler_MainFunction+0x184>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e38:	3202      	adds	r2, #2
     e3a:	2100      	movs	r1, #0
     e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     e40:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e44:	3301      	adds	r3, #1
     e46:	f88d 300b 	strb.w	r3, [sp, #11]
     e4a:	4b05      	ldr	r3, [pc, #20]	; (e60 <Scheduler_MainFunction+0x180>)
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	791b      	ldrb	r3, [r3, #4]
     e50:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e54:	429a      	cmp	r2, r3
     e56:	d3b2      	bcc.n	dbe <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     e58:	2300      	movs	r3, #0
     e5a:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     e5c:	e758      	b.n	d10 <Scheduler_MainFunction+0x30>
     e5e:	bf00      	nop
     e60:	1fff8b38 	.word	0x1fff8b38
     e64:	1fff8b3c 	.word	0x1fff8b3c

00000e68 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     e68:	b084      	sub	sp, #16
     e6a:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     e6c:	2300      	movs	r3, #0
     e6e:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     e72:	4b15      	ldr	r3, [pc, #84]	; (ec8 <HwIoAb_Buttons_Init+0x60>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	2203      	movs	r2, #3
     e78:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     e7a:	4b13      	ldr	r3, [pc, #76]	; (ec8 <HwIoAb_Buttons_Init+0x60>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	9a01      	ldr	r2, [sp, #4]
     e80:	605a      	str	r2, [r3, #4]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     e82:	2300      	movs	r3, #0
     e84:	f88d 300f 	strb.w	r3, [sp, #15]
     e88:	e012      	b.n	eb0 <HwIoAb_Buttons_Init+0x48>
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e8a:	4b0f      	ldr	r3, [pc, #60]	; (ec8 <HwIoAb_Buttons_Init+0x60>)
     e8c:	681a      	ldr	r2, [r3, #0]
     e8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e92:	4413      	add	r3, r2
     e94:	2200      	movs	r2, #0
     e96:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     e98:	4b0b      	ldr	r3, [pc, #44]	; (ec8 <HwIoAb_Buttons_Init+0x60>)
     e9a:	681a      	ldr	r2, [r3, #0]
     e9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ea0:	4413      	add	r3, r2
     ea2:	2200      	movs	r2, #0
     ea4:	72da      	strb	r2, [r3, #11]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     ea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     eaa:	3301      	adds	r3, #1
     eac:	f88d 300f 	strb.w	r3, [sp, #15]
     eb0:	4b05      	ldr	r3, [pc, #20]	; (ec8 <HwIoAb_Buttons_Init+0x60>)
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     eba:	429a      	cmp	r2, r3
     ebc:	d3e5      	bcc.n	e8a <HwIoAb_Buttons_Init+0x22>
    }
}
     ebe:	bf00      	nop
     ec0:	bf00      	nop
     ec2:	b004      	add	sp, #16
     ec4:	4770      	bx	lr
     ec6:	bf00      	nop
     ec8:	1fff8b40 	.word	0x1fff8b40

00000ecc <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
     ecc:	b084      	sub	sp, #16
     ece:	4603      	mov	r3, r0
     ed0:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
     ed4:	2300      	movs	r3, #0
     ed6:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
     eda:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ede:	2b00      	cmp	r3, #0
     ee0:	d017      	beq.n	f12 <HwIoAb_Buttons_GetEvent+0x46>
     ee2:	4b0e      	ldr	r3, [pc, #56]	; (f1c <HwIoAb_Buttons_GetEvent+0x50>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	f89d 2007 	ldrb.w	r2, [sp, #7]
     eec:	429a      	cmp	r2, r3
     eee:	d810      	bhi.n	f12 <HwIoAb_Buttons_GetEvent+0x46>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
     ef0:	4b0a      	ldr	r3, [pc, #40]	; (f1c <HwIoAb_Buttons_GetEvent+0x50>)
     ef2:	681a      	ldr	r2, [r3, #0]
     ef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef8:	3b01      	subs	r3, #1
     efa:	4413      	add	r3, r2
     efc:	7adb      	ldrb	r3, [r3, #11]
     efe:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
     f02:	4b06      	ldr	r3, [pc, #24]	; (f1c <HwIoAb_Buttons_GetEvent+0x50>)
     f04:	681a      	ldr	r2, [r3, #0]
     f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f0a:	3b01      	subs	r3, #1
     f0c:	4413      	add	r3, r2
     f0e:	2200      	movs	r2, #0
     f10:	72da      	strb	r2, [r3, #11]
    }

    return event;
     f12:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f16:	4618      	mov	r0, r3
     f18:	b004      	add	sp, #16
     f1a:	4770      	bx	lr
     f1c:	1fff8b40 	.word	0x1fff8b40

00000f20 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
     f20:	b500      	push	{lr}
     f22:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
     f24:	2300      	movs	r3, #0
     f26:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
     f2a:	2300      	movs	r3, #0
     f2c:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
     f30:	2300      	movs	r3, #0
     f32:	f88d 3007 	strb.w	r3, [sp, #7]
     f36:	e029      	b.n	f8c <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
     f38:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f3c:	4ab5      	ldr	r2, [pc, #724]	; (1214 <HwIoAb_Buttons_MainFunction+0x2f4>)
     f3e:	5cd3      	ldrb	r3, [r2, r3]
     f40:	2b00      	cmp	r3, #0
     f42:	d01e      	beq.n	f82 <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
     f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f48:	4ab3      	ldr	r2, [pc, #716]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f52:	3232      	adds	r2, #50	; 0x32
     f54:	49b0      	ldr	r1, [pc, #704]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
     f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f5e:	4aae      	ldr	r2, [pc, #696]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f64:	4bad      	ldr	r3, [pc, #692]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	6859      	ldr	r1, [r3, #4]
     f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f6e:	00db      	lsls	r3, r3, #3
     f70:	440b      	add	r3, r1
     f72:	685b      	ldr	r3, [r3, #4]
     f74:	429a      	cmp	r2, r3
     f76:	d104      	bne.n	f82 <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
     f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f7c:	4aa5      	ldr	r2, [pc, #660]	; (1214 <HwIoAb_Buttons_MainFunction+0x2f4>)
     f7e:	2100      	movs	r1, #0
     f80:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
     f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f86:	3301      	adds	r3, #1
     f88:	f88d 3007 	strb.w	r3, [sp, #7]
     f8c:	4ba3      	ldr	r3, [pc, #652]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	781b      	ldrb	r3, [r3, #0]
     f92:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f96:	429a      	cmp	r2, r3
     f98:	d3ce      	bcc.n	f38 <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
     f9a:	2300      	movs	r3, #0
     f9c:	f88d 3007 	strb.w	r3, [sp, #7]
     fa0:	e12b      	b.n	11fa <HwIoAb_Buttons_MainFunction+0x2da>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
     fa2:	4b9e      	ldr	r3, [pc, #632]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	685a      	ldr	r2, [r3, #4]
     fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fac:	00db      	lsls	r3, r3, #3
     fae:	4413      	add	r3, r2
     fb0:	789b      	ldrb	r3, [r3, #2]
     fb2:	2b01      	cmp	r3, #1
     fb4:	d103      	bne.n	fbe <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
     fb6:	2301      	movs	r3, #1
     fb8:	f88d 3006 	strb.w	r3, [sp, #6]
     fbc:	e002      	b.n	fc4 <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
     fbe:	2300      	movs	r3, #0
     fc0:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
     fc4:	4b95      	ldr	r3, [pc, #596]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
     fc6:	681a      	ldr	r2, [r3, #0]
     fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fcc:	4413      	add	r3, r2
     fce:	7a1b      	ldrb	r3, [r3, #8]
     fd0:	2b04      	cmp	r3, #4
     fd2:	f200 8102 	bhi.w	11da <HwIoAb_Buttons_MainFunction+0x2ba>
     fd6:	a201      	add	r2, pc, #4	; (adr r2, fdc <HwIoAb_Buttons_MainFunction+0xbc>)
     fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fdc:	00000ff1 	.word	0x00000ff1
     fe0:	0000103b 	.word	0x0000103b
     fe4:	00001123 	.word	0x00001123
     fe8:	00001195 	.word	0x00001195
     fec:	000010a1 	.word	0x000010a1
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
     ff0:	4b8a      	ldr	r3, [pc, #552]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
     ff2:	681b      	ldr	r3, [r3, #0]
     ff4:	685a      	ldr	r2, [r3, #4]
     ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffa:	00db      	lsls	r3, r3, #3
     ffc:	4413      	add	r3, r2
     ffe:	881b      	ldrh	r3, [r3, #0]
    1000:	4618      	mov	r0, r3
    1002:	f005 f8f3 	bl	61ec <Dio_ReadChannel>
    1006:	4603      	mov	r3, r0
    1008:	461a      	mov	r2, r3
    100a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    100e:	429a      	cmp	r2, r3
    1010:	f040 80e5 	bne.w	11de <HwIoAb_Buttons_MainFunction+0x2be>
                    count_flags[i] = TRUE;  //Starting count.
    1014:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1018:	4a7e      	ldr	r2, [pc, #504]	; (1214 <HwIoAb_Buttons_MainFunction+0x2f4>)
    101a:	2101      	movs	r1, #1
    101c:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    101e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1022:	4a7d      	ldr	r2, [pc, #500]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1024:	2100      	movs	r1, #0
    1026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    102a:	4b7c      	ldr	r3, [pc, #496]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    102c:	681a      	ldr	r2, [r3, #0]
    102e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1032:	4413      	add	r3, r2
    1034:	2201      	movs	r2, #1
    1036:	721a      	strb	r2, [r3, #8]
                }
            break;
    1038:	e0d1      	b.n	11de <HwIoAb_Buttons_MainFunction+0x2be>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    103a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    103e:	4a76      	ldr	r2, [pc, #472]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1044:	4b75      	ldr	r3, [pc, #468]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1046:	681b      	ldr	r3, [r3, #0]
    1048:	6859      	ldr	r1, [r3, #4]
    104a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    104e:	00db      	lsls	r3, r3, #3
    1050:	440b      	add	r3, r1
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	429a      	cmp	r2, r3
    1056:	d106      	bne.n	1066 <HwIoAb_Buttons_MainFunction+0x146>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1058:	4b70      	ldr	r3, [pc, #448]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    105a:	681a      	ldr	r2, [r3, #0]
    105c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1060:	4413      	add	r3, r2
    1062:	2203      	movs	r2, #3
    1064:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1066:	4b6d      	ldr	r3, [pc, #436]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	685a      	ldr	r2, [r3, #4]
    106c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1070:	00db      	lsls	r3, r3, #3
    1072:	4413      	add	r3, r2
    1074:	881b      	ldrh	r3, [r3, #0]
    1076:	4618      	mov	r0, r3
    1078:	f005 f8b8 	bl	61ec <Dio_ReadChannel>
    107c:	4603      	mov	r3, r0
    107e:	461a      	mov	r2, r3
    1080:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1084:	f083 0301 	eor.w	r3, r3, #1
    1088:	b2db      	uxtb	r3, r3
    108a:	429a      	cmp	r2, r3
    108c:	f040 80a9 	bne.w	11e2 <HwIoAb_Buttons_MainFunction+0x2c2>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    1090:	4b62      	ldr	r3, [pc, #392]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1092:	681a      	ldr	r2, [r3, #0]
    1094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1098:	4413      	add	r3, r2
    109a:	2204      	movs	r2, #4
    109c:	721a      	strb	r2, [r3, #8]
                }
            break;
    109e:	e0a0      	b.n	11e2 <HwIoAb_Buttons_MainFunction+0x2c2>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    10a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10a4:	4a5c      	ldr	r2, [pc, #368]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
    10a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10aa:	4b5c      	ldr	r3, [pc, #368]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	6859      	ldr	r1, [r3, #4]
    10b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10b4:	00db      	lsls	r3, r3, #3
    10b6:	440b      	add	r3, r1
    10b8:	685b      	ldr	r3, [r3, #4]
    10ba:	429a      	cmp	r2, r3
    10bc:	d10d      	bne.n	10da <HwIoAb_Buttons_MainFunction+0x1ba>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    10be:	4b57      	ldr	r3, [pc, #348]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    10c0:	681a      	ldr	r2, [r3, #0]
    10c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c6:	4413      	add	r3, r2
    10c8:	2201      	movs	r2, #1
    10ca:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    10cc:	4b53      	ldr	r3, [pc, #332]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    10ce:	681a      	ldr	r2, [r3, #0]
    10d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10d4:	4413      	add	r3, r2
    10d6:	2200      	movs	r2, #0
    10d8:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    10da:	4b50      	ldr	r3, [pc, #320]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	685a      	ldr	r2, [r3, #4]
    10e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e4:	00db      	lsls	r3, r3, #3
    10e6:	4413      	add	r3, r2
    10e8:	881b      	ldrh	r3, [r3, #0]
    10ea:	4618      	mov	r0, r3
    10ec:	f005 f87e 	bl	61ec <Dio_ReadChannel>
    10f0:	4603      	mov	r3, r0
    10f2:	461a      	mov	r2, r3
    10f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    10f8:	429a      	cmp	r2, r3
    10fa:	d174      	bne.n	11e6 <HwIoAb_Buttons_MainFunction+0x2c6>
                    count_flags[i] = TRUE;  //Starting count.
    10fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1100:	4a44      	ldr	r2, [pc, #272]	; (1214 <HwIoAb_Buttons_MainFunction+0x2f4>)
    1102:	2101      	movs	r1, #1
    1104:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1106:	f89d 3007 	ldrb.w	r3, [sp, #7]
    110a:	4a43      	ldr	r2, [pc, #268]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
    110c:	2100      	movs	r1, #0
    110e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    1112:	4b42      	ldr	r3, [pc, #264]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1114:	681a      	ldr	r2, [r3, #0]
    1116:	f89d 3007 	ldrb.w	r3, [sp, #7]
    111a:	4413      	add	r3, r2
    111c:	2202      	movs	r2, #2
    111e:	721a      	strb	r2, [r3, #8]
                }
            break;
    1120:	e061      	b.n	11e6 <HwIoAb_Buttons_MainFunction+0x2c6>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1122:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1126:	4a3c      	ldr	r2, [pc, #240]	; (1218 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    112c:	4b3b      	ldr	r3, [pc, #236]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	6859      	ldr	r1, [r3, #4]
    1132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1136:	00db      	lsls	r3, r3, #3
    1138:	440b      	add	r3, r1
    113a:	685b      	ldr	r3, [r3, #4]
    113c:	429a      	cmp	r2, r3
    113e:	d106      	bne.n	114e <HwIoAb_Buttons_MainFunction+0x22e>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1140:	4b36      	ldr	r3, [pc, #216]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1142:	681a      	ldr	r2, [r3, #0]
    1144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1148:	4413      	add	r3, r2
    114a:	2203      	movs	r2, #3
    114c:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    114e:	4b33      	ldr	r3, [pc, #204]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	685a      	ldr	r2, [r3, #4]
    1154:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1158:	00db      	lsls	r3, r3, #3
    115a:	4413      	add	r3, r2
    115c:	881b      	ldrh	r3, [r3, #0]
    115e:	4618      	mov	r0, r3
    1160:	f005 f844 	bl	61ec <Dio_ReadChannel>
    1164:	4603      	mov	r3, r0
    1166:	461a      	mov	r2, r3
    1168:	f89d 3006 	ldrb.w	r3, [sp, #6]
    116c:	f083 0301 	eor.w	r3, r3, #1
    1170:	b2db      	uxtb	r3, r3
    1172:	429a      	cmp	r2, r3
    1174:	d139      	bne.n	11ea <HwIoAb_Buttons_MainFunction+0x2ca>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    1176:	4b29      	ldr	r3, [pc, #164]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1178:	681a      	ldr	r2, [r3, #0]
    117a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    117e:	4413      	add	r3, r2
    1180:	2202      	movs	r2, #2
    1182:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1184:	4b25      	ldr	r3, [pc, #148]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1186:	681a      	ldr	r2, [r3, #0]
    1188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    118c:	4413      	add	r3, r2
    118e:	2200      	movs	r2, #0
    1190:	721a      	strb	r2, [r3, #8]
                }
            break;
    1192:	e02a      	b.n	11ea <HwIoAb_Buttons_MainFunction+0x2ca>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1194:	4b21      	ldr	r3, [pc, #132]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	685a      	ldr	r2, [r3, #4]
    119a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    119e:	00db      	lsls	r3, r3, #3
    11a0:	4413      	add	r3, r2
    11a2:	881b      	ldrh	r3, [r3, #0]
    11a4:	4618      	mov	r0, r3
    11a6:	f005 f821 	bl	61ec <Dio_ReadChannel>
    11aa:	4603      	mov	r3, r0
    11ac:	461a      	mov	r2, r3
    11ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11b2:	f083 0301 	eor.w	r3, r3, #1
    11b6:	b2db      	uxtb	r3, r3
    11b8:	429a      	cmp	r2, r3
    11ba:	d118      	bne.n	11ee <HwIoAb_Buttons_MainFunction+0x2ce>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    11bc:	4b17      	ldr	r3, [pc, #92]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    11be:	681a      	ldr	r2, [r3, #0]
    11c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c4:	4413      	add	r3, r2
    11c6:	2203      	movs	r2, #3
    11c8:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    11ca:	4b14      	ldr	r3, [pc, #80]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    11cc:	681a      	ldr	r2, [r3, #0]
    11ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11d2:	4413      	add	r3, r2
    11d4:	2200      	movs	r2, #0
    11d6:	721a      	strb	r2, [r3, #8]
                }
            break;
    11d8:	e009      	b.n	11ee <HwIoAb_Buttons_MainFunction+0x2ce>
        
            default :
            break;
    11da:	bf00      	nop
    11dc:	e008      	b.n	11f0 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11de:	bf00      	nop
    11e0:	e006      	b.n	11f0 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11e2:	bf00      	nop
    11e4:	e004      	b.n	11f0 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11e6:	bf00      	nop
    11e8:	e002      	b.n	11f0 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11ea:	bf00      	nop
    11ec:	e000      	b.n	11f0 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11ee:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    11f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11f4:	3301      	adds	r3, #1
    11f6:	f88d 3007 	strb.w	r3, [sp, #7]
    11fa:	4b08      	ldr	r3, [pc, #32]	; (121c <HwIoAb_Buttons_MainFunction+0x2fc>)
    11fc:	681b      	ldr	r3, [r3, #0]
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1204:	429a      	cmp	r2, r3
    1206:	f4ff aecc 	bcc.w	fa2 <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    120a:	bf00      	nop
    120c:	bf00      	nop
    120e:	b003      	add	sp, #12
    1210:	f85d fb04 	ldr.w	pc, [sp], #4
    1214:	1fff8e44 	.word	0x1fff8e44
    1218:	1fff8e48 	.word	0x1fff8e48
    121c:	1fff8b40 	.word	0x1fff8b40

00001220 <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    1220:	b082      	sub	sp, #8
    1222:	9001      	str	r0, [sp, #4]
    //Initializing members.
    LedsControl_Ptr->Leds = HWIOAB_LEDS;
    1224:	4b05      	ldr	r3, [pc, #20]	; (123c <HwIoAb_Leds_Init+0x1c>)
    1226:	681b      	ldr	r3, [r3, #0]
    1228:	2206      	movs	r2, #6
    122a:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    122c:	4b03      	ldr	r3, [pc, #12]	; (123c <HwIoAb_Leds_Init+0x1c>)
    122e:	681b      	ldr	r3, [r3, #0]
    1230:	9a01      	ldr	r2, [sp, #4]
    1232:	605a      	str	r2, [r3, #4]
}
    1234:	bf00      	nop
    1236:	b002      	add	sp, #8
    1238:	4770      	bx	lr
    123a:	bf00      	nop
    123c:	1fff8b44 	.word	0x1fff8b44

00001240 <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    1240:	b500      	push	{lr}
    1242:	b083      	sub	sp, #12
    1244:	4603      	mov	r3, r0
    1246:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    124a:	4b0b      	ldr	r3, [pc, #44]	; (1278 <HwIoAb_Leds_TurnToggle+0x38>)
    124c:	681b      	ldr	r3, [r3, #0]
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1254:	429a      	cmp	r2, r3
    1256:	d20a      	bcs.n	126e <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1258:	4b07      	ldr	r3, [pc, #28]	; (1278 <HwIoAb_Leds_TurnToggle+0x38>)
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	685a      	ldr	r2, [r3, #4]
    125e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1262:	009b      	lsls	r3, r3, #2
    1264:	4413      	add	r3, r2
    1266:	881b      	ldrh	r3, [r3, #0]
    1268:	4618      	mov	r0, r3
    126a:	f004 ffea 	bl	6242 <Dio_FlipChannel>
    }
}
    126e:	bf00      	nop
    1270:	b003      	add	sp, #12
    1272:	f85d fb04 	ldr.w	pc, [sp], #4
    1276:	bf00      	nop
    1278:	1fff8b44 	.word	0x1fff8b44

0000127c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    127c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    127e:	2300      	movs	r3, #0
    1280:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    1282:	2300      	movs	r3, #0
    1284:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    1286:	2300      	movs	r3, #0
    1288:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    128a:	2300      	movs	r3, #0
    128c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    128e:	4b44      	ldr	r3, [pc, #272]	; (13a0 <init_data_bss+0x124>)
    1290:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    1292:	4b44      	ldr	r3, [pc, #272]	; (13a4 <init_data_bss+0x128>)
    1294:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    1296:	9b05      	ldr	r3, [sp, #20]
    1298:	681b      	ldr	r3, [r3, #0]
    129a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    129c:	9b05      	ldr	r3, [sp, #20]
    129e:	3304      	adds	r3, #4
    12a0:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    12a2:	9b05      	ldr	r3, [sp, #20]
    12a4:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    12a6:	2300      	movs	r3, #0
    12a8:	9309      	str	r3, [sp, #36]	; 0x24
    12aa:	e03d      	b.n	1328 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    12ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12ae:	4613      	mov	r3, r2
    12b0:	005b      	lsls	r3, r3, #1
    12b2:	4413      	add	r3, r2
    12b4:	009b      	lsls	r3, r3, #2
    12b6:	461a      	mov	r2, r3
    12b8:	9b03      	ldr	r3, [sp, #12]
    12ba:	4413      	add	r3, r2
    12bc:	685b      	ldr	r3, [r3, #4]
    12be:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    12c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12c2:	4613      	mov	r3, r2
    12c4:	005b      	lsls	r3, r3, #1
    12c6:	4413      	add	r3, r2
    12c8:	009b      	lsls	r3, r3, #2
    12ca:	461a      	mov	r2, r3
    12cc:	9b03      	ldr	r3, [sp, #12]
    12ce:	4413      	add	r3, r2
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    12d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12d6:	4613      	mov	r3, r2
    12d8:	005b      	lsls	r3, r3, #1
    12da:	4413      	add	r3, r2
    12dc:	009b      	lsls	r3, r3, #2
    12de:	461a      	mov	r2, r3
    12e0:	9b03      	ldr	r3, [sp, #12]
    12e2:	4413      	add	r3, r2
    12e4:	689b      	ldr	r3, [r3, #8]
    12e6:	4619      	mov	r1, r3
    12e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12ea:	4613      	mov	r3, r2
    12ec:	005b      	lsls	r3, r3, #1
    12ee:	4413      	add	r3, r2
    12f0:	009b      	lsls	r3, r3, #2
    12f2:	461a      	mov	r2, r3
    12f4:	9b03      	ldr	r3, [sp, #12]
    12f6:	4413      	add	r3, r2
    12f8:	685b      	ldr	r3, [r3, #4]
    12fa:	1acb      	subs	r3, r1, r3
    12fc:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    12fe:	2300      	movs	r3, #0
    1300:	9308      	str	r3, [sp, #32]
    1302:	e00a      	b.n	131a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1304:	9a00      	ldr	r2, [sp, #0]
    1306:	9b08      	ldr	r3, [sp, #32]
    1308:	441a      	add	r2, r3
    130a:	9901      	ldr	r1, [sp, #4]
    130c:	9b08      	ldr	r3, [sp, #32]
    130e:	440b      	add	r3, r1
    1310:	7812      	ldrb	r2, [r2, #0]
    1312:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1314:	9b08      	ldr	r3, [sp, #32]
    1316:	3301      	adds	r3, #1
    1318:	9308      	str	r3, [sp, #32]
    131a:	9a08      	ldr	r2, [sp, #32]
    131c:	9b06      	ldr	r3, [sp, #24]
    131e:	429a      	cmp	r2, r3
    1320:	d3f0      	bcc.n	1304 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1322:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1324:	3301      	adds	r3, #1
    1326:	9309      	str	r3, [sp, #36]	; 0x24
    1328:	9a09      	ldr	r2, [sp, #36]	; 0x24
    132a:	9b07      	ldr	r3, [sp, #28]
    132c:	429a      	cmp	r2, r3
    132e:	d3bd      	bcc.n	12ac <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1330:	9b04      	ldr	r3, [sp, #16]
    1332:	681b      	ldr	r3, [r3, #0]
    1334:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    1336:	9b04      	ldr	r3, [sp, #16]
    1338:	3304      	adds	r3, #4
    133a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    133c:	9b04      	ldr	r3, [sp, #16]
    133e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1340:	2300      	movs	r3, #0
    1342:	9309      	str	r3, [sp, #36]	; 0x24
    1344:	e024      	b.n	1390 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    1346:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1348:	00db      	lsls	r3, r3, #3
    134a:	9a02      	ldr	r2, [sp, #8]
    134c:	4413      	add	r3, r2
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    1352:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1354:	00db      	lsls	r3, r3, #3
    1356:	9a02      	ldr	r2, [sp, #8]
    1358:	4413      	add	r3, r2
    135a:	685b      	ldr	r3, [r3, #4]
    135c:	4619      	mov	r1, r3
    135e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1360:	00db      	lsls	r3, r3, #3
    1362:	9a02      	ldr	r2, [sp, #8]
    1364:	4413      	add	r3, r2
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	1acb      	subs	r3, r1, r3
    136a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    136c:	2300      	movs	r3, #0
    136e:	9308      	str	r3, [sp, #32]
    1370:	e007      	b.n	1382 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    1372:	9a01      	ldr	r2, [sp, #4]
    1374:	9b08      	ldr	r3, [sp, #32]
    1376:	4413      	add	r3, r2
    1378:	2200      	movs	r2, #0
    137a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    137c:	9b08      	ldr	r3, [sp, #32]
    137e:	3301      	adds	r3, #1
    1380:	9308      	str	r3, [sp, #32]
    1382:	9a08      	ldr	r2, [sp, #32]
    1384:	9b06      	ldr	r3, [sp, #24]
    1386:	429a      	cmp	r2, r3
    1388:	d3f3      	bcc.n	1372 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    138a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    138c:	3301      	adds	r3, #1
    138e:	9309      	str	r3, [sp, #36]	; 0x24
    1390:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1392:	9b07      	ldr	r3, [sp, #28]
    1394:	429a      	cmp	r2, r3
    1396:	d3d6      	bcc.n	1346 <init_data_bss+0xca>
        }
    }
}
    1398:	bf00      	nop
    139a:	bf00      	nop
    139c:	b00a      	add	sp, #40	; 0x28
    139e:	4770      	bx	lr
    13a0:	00008a70 	.word	0x00008a70
    13a4:	00008a8c 	.word	0x00008a8c

000013a8 <sys_m4_cache_init>:
{
    13a8:	b084      	sub	sp, #16
    13aa:	4603      	mov	r3, r0
    13ac:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    13b0:	2300      	movs	r3, #0
    13b2:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    13b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d118      	bne.n	13f0 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    13be:	4b10      	ldr	r3, [pc, #64]	; (1400 <sys_m4_cache_init+0x58>)
    13c0:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    13c4:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    13c6:	4b0e      	ldr	r3, [pc, #56]	; (1400 <sys_m4_cache_init+0x58>)
    13c8:	681b      	ldr	r3, [r3, #0]
    13ca:	4a0d      	ldr	r2, [pc, #52]	; (1400 <sys_m4_cache_init+0x58>)
    13cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    13d0:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    13d2:	bf00      	nop
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <sys_m4_cache_init+0x58>)
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    13dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    13e0:	d0f8      	beq.n	13d4 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    13e2:	4b07      	ldr	r3, [pc, #28]	; (1400 <sys_m4_cache_init+0x58>)
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	4a06      	ldr	r2, [pc, #24]	; (1400 <sys_m4_cache_init+0x58>)
    13e8:	f043 0301 	orr.w	r3, r3, #1
    13ec:	6013      	str	r3, [r2, #0]
    13ee:	e002      	b.n	13f6 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    13f0:	2301      	movs	r3, #1
    13f2:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    13f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    13fa:	4618      	mov	r0, r3
    13fc:	b004      	add	sp, #16
    13fe:	4770      	bx	lr
    1400:	e0082000 	.word	0xe0082000

00001404 <startup_go_to_user_mode>:
}
    1404:	bf00      	nop
    1406:	4770      	bx	lr

00001408 <Sys_GetCoreID>:
    return 0U;
    1408:	2300      	movs	r3, #0
}
    140a:	4618      	mov	r0, r3
    140c:	4770      	bx	lr

0000140e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    140e:	e7fe      	b.n	140e <HardFault_Handler>

00001410 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1410:	e7fe      	b.n	1410 <MemManage_Handler>

00001412 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1412:	e7fe      	b.n	1412 <BusFault_Handler>

00001414 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1414:	e7fe      	b.n	1414 <UsageFault_Handler>

00001416 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1416:	e7fe      	b.n	1416 <SVC_Handler>

00001418 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1418:	e7fe      	b.n	1418 <DebugMon_Handler>

0000141a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    141a:	e7fe      	b.n	141a <PendSV_Handler>

0000141c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    141c:	e7fe      	b.n	141c <SysTick_Handler>

0000141e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    141e:	e7fe      	b.n	141e <undefined_handler>

00001420 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->1 Mhz.
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    1420:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    1422:	4805      	ldr	r0, [pc, #20]	; (1438 <MCU_clocks+0x18>)
    1424:	f003 fdcc 	bl	4fc0 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    1428:	2000      	movs	r0, #0
    142a:	f003 fe41 	bl	50b0 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    142e:	2000      	movs	r0, #0
    1430:	f003 fe1a 	bl	5068 <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    1434:	bf00      	nop
    1436:	bd08      	pop	{r3, pc}
    1438:	00008714 	.word	0x00008714

0000143c <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    143c:	b508      	push	{r3, lr}
    MCU_clocks();
    143e:	f7ff ffef 	bl	1420 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    1442:	2000      	movs	r0, #0
    1444:	f000 f826 	bl	1494 <OsIf_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    1448:	4805      	ldr	r0, [pc, #20]	; (1460 <EcuM_Init+0x24>)
    144a:	f004 f9bb 	bl	57c4 <Port_Init>
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    144e:	4805      	ldr	r0, [pc, #20]	; (1464 <EcuM_Init+0x28>)
    1450:	f7ff fd0a 	bl	e68 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init
    1454:	4804      	ldr	r0, [pc, #16]	; (1468 <EcuM_Init+0x2c>)
    1456:	f7ff fee3 	bl	1220 <HwIoAb_Leds_Init>
    145a:	bf00      	nop
    145c:	bd08      	pop	{r3, pc}
    145e:	bf00      	nop
    1460:	00008a24 	.word	0x00008a24
    1464:	000082ec 	.word	0x000082ec
    1468:	00008304 	.word	0x00008304

0000146c <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    146c:	2300      	movs	r3, #0
}
    146e:	4618      	mov	r0, r3
    1470:	4770      	bx	lr

00001472 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1472:	b082      	sub	sp, #8
    1474:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1476:	2301      	movs	r3, #1
}
    1478:	4618      	mov	r0, r3
    147a:	b002      	add	sp, #8
    147c:	4770      	bx	lr

0000147e <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    147e:	b082      	sub	sp, #8
    1480:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1482:	bf00      	nop
    1484:	b002      	add	sp, #8
    1486:	4770      	bx	lr

00001488 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1488:	b082      	sub	sp, #8
    148a:	9001      	str	r0, [sp, #4]
    return Micros;
    148c:	9b01      	ldr	r3, [sp, #4]
}
    148e:	4618      	mov	r0, r3
    1490:	b002      	add	sp, #8
    1492:	4770      	bx	lr

00001494 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1494:	b500      	push	{lr}
    1496:	b083      	sub	sp, #12
    1498:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    149a:	f000 f86d 	bl	1578 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    149e:	bf00      	nop
    14a0:	b003      	add	sp, #12
    14a2:	f85d fb04 	ldr.w	pc, [sp], #4

000014a6 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    14a6:	b500      	push	{lr}
    14a8:	b085      	sub	sp, #20
    14aa:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    14ac:	2300      	movs	r3, #0
    14ae:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    14b0:	9b01      	ldr	r3, [sp, #4]
    14b2:	2b00      	cmp	r3, #0
    14b4:	d003      	beq.n	14be <OsIf_GetCounter+0x18>
    14b6:	9b01      	ldr	r3, [sp, #4]
    14b8:	2b01      	cmp	r3, #1
    14ba:	d004      	beq.n	14c6 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    14bc:	e007      	b.n	14ce <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    14be:	f7ff ffd5 	bl	146c <OsIf_Timer_Dummy_GetCounter>
    14c2:	9003      	str	r0, [sp, #12]
            break;
    14c4:	e003      	b.n	14ce <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    14c6:	f000 f873 	bl	15b0 <OsIf_Timer_System_GetCounter>
    14ca:	9003      	str	r0, [sp, #12]
            break;
    14cc:	bf00      	nop
    }

    return Value;
    14ce:	9b03      	ldr	r3, [sp, #12]
}
    14d0:	4618      	mov	r0, r3
    14d2:	b005      	add	sp, #20
    14d4:	f85d fb04 	ldr.w	pc, [sp], #4

000014d8 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    14d8:	b500      	push	{lr}
    14da:	b085      	sub	sp, #20
    14dc:	9001      	str	r0, [sp, #4]
    14de:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    14e0:	2300      	movs	r3, #0
    14e2:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    14e4:	9b00      	ldr	r3, [sp, #0]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d003      	beq.n	14f2 <OsIf_GetElapsed+0x1a>
    14ea:	9b00      	ldr	r3, [sp, #0]
    14ec:	2b01      	cmp	r3, #1
    14ee:	d005      	beq.n	14fc <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    14f0:	e009      	b.n	1506 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    14f2:	9801      	ldr	r0, [sp, #4]
    14f4:	f7ff ffbd 	bl	1472 <OsIf_Timer_Dummy_GetElapsed>
    14f8:	9003      	str	r0, [sp, #12]
            break;
    14fa:	e004      	b.n	1506 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    14fc:	9801      	ldr	r0, [sp, #4]
    14fe:	f000 f865 	bl	15cc <OsIf_Timer_System_GetElapsed>
    1502:	9003      	str	r0, [sp, #12]
            break;
    1504:	bf00      	nop
    }

    return Value;
    1506:	9b03      	ldr	r3, [sp, #12]
}
    1508:	4618      	mov	r0, r3
    150a:	b005      	add	sp, #20
    150c:	f85d fb04 	ldr.w	pc, [sp], #4

00001510 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1510:	b500      	push	{lr}
    1512:	b083      	sub	sp, #12
    1514:	9001      	str	r0, [sp, #4]
    1516:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1518:	9b00      	ldr	r3, [sp, #0]
    151a:	2b00      	cmp	r3, #0
    151c:	d003      	beq.n	1526 <OsIf_SetTimerFrequency+0x16>
    151e:	9b00      	ldr	r3, [sp, #0]
    1520:	2b01      	cmp	r3, #1
    1522:	d004      	beq.n	152e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1524:	e007      	b.n	1536 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1526:	9801      	ldr	r0, [sp, #4]
    1528:	f7ff ffa9 	bl	147e <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    152c:	e003      	b.n	1536 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    152e:	9801      	ldr	r0, [sp, #4]
    1530:	f000 f85c 	bl	15ec <OsIf_Timer_System_SetTimerFrequency>
            break;
    1534:	bf00      	nop
    }
}
    1536:	bf00      	nop
    1538:	b003      	add	sp, #12
    153a:	f85d fb04 	ldr.w	pc, [sp], #4

0000153e <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    153e:	b500      	push	{lr}
    1540:	b085      	sub	sp, #20
    1542:	9001      	str	r0, [sp, #4]
    1544:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1546:	2300      	movs	r3, #0
    1548:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    154a:	9b00      	ldr	r3, [sp, #0]
    154c:	2b00      	cmp	r3, #0
    154e:	d003      	beq.n	1558 <OsIf_MicrosToTicks+0x1a>
    1550:	9b00      	ldr	r3, [sp, #0]
    1552:	2b01      	cmp	r3, #1
    1554:	d005      	beq.n	1562 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1556:	e009      	b.n	156c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1558:	9801      	ldr	r0, [sp, #4]
    155a:	f7ff ff95 	bl	1488 <OsIf_Timer_Dummy_MicrosToTicks>
    155e:	9003      	str	r0, [sp, #12]
            break;
    1560:	e004      	b.n	156c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1562:	9801      	ldr	r0, [sp, #4]
    1564:	f000 f850 	bl	1608 <OsIf_Timer_System_MicrosToTicks>
    1568:	9003      	str	r0, [sp, #12]
            break;
    156a:	bf00      	nop
    }

    return Value;
    156c:	9b03      	ldr	r3, [sp, #12]
}
    156e:	4618      	mov	r0, r3
    1570:	b005      	add	sp, #20
    1572:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001578 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1578:	b500      	push	{lr}
    157a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    157c:	2300      	movs	r3, #0
    157e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1580:	4a09      	ldr	r2, [pc, #36]	; (15a8 <OsIf_Timer_System_Init+0x30>)
    1582:	9b01      	ldr	r3, [sp, #4]
    1584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1588:	685a      	ldr	r2, [r3, #4]
    158a:	4908      	ldr	r1, [pc, #32]	; (15ac <OsIf_Timer_System_Init+0x34>)
    158c:	9b01      	ldr	r3, [sp, #4]
    158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1592:	4a06      	ldr	r2, [pc, #24]	; (15ac <OsIf_Timer_System_Init+0x34>)
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    159a:	4618      	mov	r0, r3
    159c:	f000 f868 	bl	1670 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    15a0:	bf00      	nop
    15a2:	b003      	add	sp, #12
    15a4:	f85d fb04 	ldr.w	pc, [sp], #4
    15a8:	00008738 	.word	0x00008738
    15ac:	1fff8b54 	.word	0x1fff8b54

000015b0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    15b0:	b500      	push	{lr}
    15b2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    15b4:	2300      	movs	r3, #0
    15b6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    15b8:	2300      	movs	r3, #0
    15ba:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    15bc:	f000 f86c 	bl	1698 <OsIf_Timer_System_Internal_GetCounter>
    15c0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    15c2:	9b01      	ldr	r3, [sp, #4]
}
    15c4:	4618      	mov	r0, r3
    15c6:	b003      	add	sp, #12
    15c8:	f85d fb04 	ldr.w	pc, [sp], #4

000015cc <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    15cc:	b500      	push	{lr}
    15ce:	b085      	sub	sp, #20
    15d0:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    15d2:	2300      	movs	r3, #0
    15d4:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    15d6:	2300      	movs	r3, #0
    15d8:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    15da:	9801      	ldr	r0, [sp, #4]
    15dc:	f000 f864 	bl	16a8 <OsIf_Timer_System_Internal_GetElapsed>
    15e0:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    15e2:	9b03      	ldr	r3, [sp, #12]
}
    15e4:	4618      	mov	r0, r3
    15e6:	b005      	add	sp, #20
    15e8:	f85d fb04 	ldr.w	pc, [sp], #4

000015ec <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    15ec:	b084      	sub	sp, #16
    15ee:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    15f0:	2300      	movs	r3, #0
    15f2:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    15f4:	4903      	ldr	r1, [pc, #12]	; (1604 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    15f6:	9b03      	ldr	r3, [sp, #12]
    15f8:	9a01      	ldr	r2, [sp, #4]
    15fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    15fe:	bf00      	nop
    1600:	b004      	add	sp, #16
    1602:	4770      	bx	lr
    1604:	1fff8b54 	.word	0x1fff8b54

00001608 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1608:	b5f0      	push	{r4, r5, r6, r7, lr}
    160a:	b087      	sub	sp, #28
    160c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    160e:	2100      	movs	r1, #0
    1610:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1612:	2100      	movs	r1, #0
    1614:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1616:	9901      	ldr	r1, [sp, #4]
    1618:	2000      	movs	r0, #0
    161a:	460e      	mov	r6, r1
    161c:	4607      	mov	r7, r0
    161e:	4812      	ldr	r0, [pc, #72]	; (1668 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1620:	9904      	ldr	r1, [sp, #16]
    1622:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1626:	2000      	movs	r0, #0
    1628:	460c      	mov	r4, r1
    162a:	4605      	mov	r5, r0
    162c:	fb04 f007 	mul.w	r0, r4, r7
    1630:	fb06 f105 	mul.w	r1, r6, r5
    1634:	4401      	add	r1, r0
    1636:	fba6 2304 	umull	r2, r3, r6, r4
    163a:	4419      	add	r1, r3
    163c:	460b      	mov	r3, r1
    163e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1642:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    164a:	4a08      	ldr	r2, [pc, #32]	; (166c <OsIf_Timer_System_MicrosToTicks+0x64>)
    164c:	f04f 0300 	mov.w	r3, #0
    1650:	f7fe ffa8 	bl	5a4 <__aeabi_uldivmod>
    1654:	4602      	mov	r2, r0
    1656:	460b      	mov	r3, r1
    1658:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    165c:	9b02      	ldr	r3, [sp, #8]
    165e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1660:	9b05      	ldr	r3, [sp, #20]
}
    1662:	4618      	mov	r0, r3
    1664:	b007      	add	sp, #28
    1666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1668:	1fff8b54 	.word	0x1fff8b54
    166c:	000f4240 	.word	0x000f4240

00001670 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1670:	b082      	sub	sp, #8
    1672:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1674:	4b07      	ldr	r3, [pc, #28]	; (1694 <OsIf_Timer_System_Internal_Init+0x24>)
    1676:	2200      	movs	r2, #0
    1678:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    167a:	4b06      	ldr	r3, [pc, #24]	; (1694 <OsIf_Timer_System_Internal_Init+0x24>)
    167c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1680:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1682:	4b04      	ldr	r3, [pc, #16]	; (1694 <OsIf_Timer_System_Internal_Init+0x24>)
    1684:	2200      	movs	r2, #0
    1686:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1688:	4b02      	ldr	r3, [pc, #8]	; (1694 <OsIf_Timer_System_Internal_Init+0x24>)
    168a:	2205      	movs	r2, #5
    168c:	601a      	str	r2, [r3, #0]
}
    168e:	bf00      	nop
    1690:	b002      	add	sp, #8
    1692:	4770      	bx	lr
    1694:	e000e010 	.word	0xe000e010

00001698 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1698:	4b02      	ldr	r3, [pc, #8]	; (16a4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    169a:	689b      	ldr	r3, [r3, #8]
    169c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    16a0:	4618      	mov	r0, r3
    16a2:	4770      	bx	lr
    16a4:	e000e010 	.word	0xe000e010

000016a8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    16a8:	b084      	sub	sp, #16
    16aa:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    16ac:	4b10      	ldr	r3, [pc, #64]	; (16f0 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    16ae:	689b      	ldr	r3, [r3, #8]
    16b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    16b4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    16b6:	2300      	movs	r3, #0
    16b8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    16ba:	9b01      	ldr	r3, [sp, #4]
    16bc:	681b      	ldr	r3, [r3, #0]
    16be:	9a02      	ldr	r2, [sp, #8]
    16c0:	429a      	cmp	r2, r3
    16c2:	d909      	bls.n	16d8 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    16c4:	9b01      	ldr	r3, [sp, #4]
    16c6:	681a      	ldr	r2, [r3, #0]
    16c8:	9b02      	ldr	r3, [sp, #8]
    16ca:	1ad3      	subs	r3, r2, r3
    16cc:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    16d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    16d4:	9303      	str	r3, [sp, #12]
    16d6:	e004      	b.n	16e2 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    16d8:	9b01      	ldr	r3, [sp, #4]
    16da:	681a      	ldr	r2, [r3, #0]
    16dc:	9b02      	ldr	r3, [sp, #8]
    16de:	1ad3      	subs	r3, r2, r3
    16e0:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    16e2:	9b01      	ldr	r3, [sp, #4]
    16e4:	9a02      	ldr	r2, [sp, #8]
    16e6:	601a      	str	r2, [r3, #0]

    return dif;
    16e8:	9b03      	ldr	r3, [sp, #12]
}
    16ea:	4618      	mov	r0, r3
    16ec:	b004      	add	sp, #16
    16ee:	4770      	bx	lr
    16f0:	e000e010 	.word	0xe000e010

000016f4 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    16f4:	b082      	sub	sp, #8
    16f6:	9001      	str	r0, [sp, #4]
    16f8:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    16fa:	bf00      	nop
    16fc:	b002      	add	sp, #8
    16fe:	4770      	bx	lr

00001700 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1700:	b500      	push	{lr}
    1702:	b085      	sub	sp, #20
    1704:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1706:	4b24      	ldr	r3, [pc, #144]	; (1798 <Clock_Ip_UpdateDriverContext+0x98>)
    1708:	2201      	movs	r2, #1
    170a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    170c:	4b23      	ldr	r3, [pc, #140]	; (179c <Clock_Ip_UpdateDriverContext+0x9c>)
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	2102      	movs	r1, #2
    1712:	4618      	mov	r0, r3
    1714:	f003 fc32 	bl	4f7c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1718:	2300      	movs	r3, #0
    171a:	f88d 300f 	strb.w	r3, [sp, #15]
    171e:	e015      	b.n	174c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1720:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1724:	9a01      	ldr	r2, [sp, #4]
    1726:	334a      	adds	r3, #74	; 0x4a
    1728:	00db      	lsls	r3, r3, #3
    172a:	4413      	add	r3, r2
    172c:	6858      	ldr	r0, [r3, #4]
    172e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1732:	9a01      	ldr	r2, [sp, #4]
    1734:	334a      	adds	r3, #74	; 0x4a
    1736:	00db      	lsls	r3, r3, #3
    1738:	4413      	add	r3, r2
    173a:	689b      	ldr	r3, [r3, #8]
    173c:	4619      	mov	r1, r3
    173e:	f001 fadc 	bl	2cfa <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1742:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1746:	3301      	adds	r3, #1
    1748:	f88d 300f 	strb.w	r3, [sp, #15]
    174c:	9b01      	ldr	r3, [sp, #4]
    174e:	7bdb      	ldrb	r3, [r3, #15]
    1750:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1754:	429a      	cmp	r2, r3
    1756:	d3e3      	bcc.n	1720 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1758:	f000 f824 	bl	17a4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    175c:	2301      	movs	r3, #1
    175e:	f88d 300f 	strb.w	r3, [sp, #15]
    1762:	e00e      	b.n	1782 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1764:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1768:	9b01      	ldr	r3, [sp, #4]
    176a:	327e      	adds	r2, #126	; 0x7e
    176c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1770:	490b      	ldr	r1, [pc, #44]	; (17a0 <Clock_Ip_UpdateDriverContext+0xa0>)
    1772:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1776:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1778:	f89d 300f 	ldrb.w	r3, [sp, #15]
    177c:	3301      	adds	r3, #1
    177e:	f88d 300f 	strb.w	r3, [sp, #15]
    1782:	9b01      	ldr	r3, [sp, #4]
    1784:	7cdb      	ldrb	r3, [r3, #19]
    1786:	f89d 200f 	ldrb.w	r2, [sp, #15]
    178a:	429a      	cmp	r2, r3
    178c:	d3ea      	bcc.n	1764 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    178e:	bf00      	nop
    1790:	bf00      	nop
    1792:	b005      	add	sp, #20
    1794:	f85d fb04 	ldr.w	pc, [sp], #4
    1798:	1fff8b10 	.word	0x1fff8b10
    179c:	1fff8b58 	.word	0x1fff8b58
    17a0:	1fff8b64 	.word	0x1fff8b64

000017a4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    17a4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    17a6:	4b23      	ldr	r3, [pc, #140]	; (1834 <Clock_Ip_CallEmptyCallbacks+0x90>)
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	f083 0301 	eor.w	r3, r3, #1
    17ae:	b2db      	uxtb	r3, r3
    17b0:	2b00      	cmp	r3, #0
    17b2:	d03d      	beq.n	1830 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    17b4:	4b1f      	ldr	r3, [pc, #124]	; (1834 <Clock_Ip_CallEmptyCallbacks+0x90>)
    17b6:	2201      	movs	r2, #1
    17b8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    17ba:	4b1f      	ldr	r3, [pc, #124]	; (1838 <Clock_Ip_CallEmptyCallbacks+0x94>)
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	2100      	movs	r1, #0
    17c0:	2000      	movs	r0, #0
    17c2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    17c4:	4b1c      	ldr	r3, [pc, #112]	; (1838 <Clock_Ip_CallEmptyCallbacks+0x94>)
    17c6:	689b      	ldr	r3, [r3, #8]
    17c8:	2057      	movs	r0, #87	; 0x57
    17ca:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    17cc:	4b1b      	ldr	r3, [pc, #108]	; (183c <Clock_Ip_CallEmptyCallbacks+0x98>)
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	2000      	movs	r0, #0
    17d2:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    17d4:	4b1a      	ldr	r3, [pc, #104]	; (1840 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	2000      	movs	r0, #0
    17da:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    17dc:	4b19      	ldr	r3, [pc, #100]	; (1844 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    17de:	681b      	ldr	r3, [r3, #0]
    17e0:	2000      	movs	r0, #0
    17e2:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    17e4:	4b18      	ldr	r3, [pc, #96]	; (1848 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    17e6:	685b      	ldr	r3, [r3, #4]
    17e8:	2000      	movs	r0, #0
    17ea:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    17ec:	4b16      	ldr	r3, [pc, #88]	; (1848 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    17ee:	689b      	ldr	r3, [r3, #8]
    17f0:	2057      	movs	r0, #87	; 0x57
    17f2:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    17f4:	4b15      	ldr	r3, [pc, #84]	; (184c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	2000      	movs	r0, #0
    17fa:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    17fc:	4b13      	ldr	r3, [pc, #76]	; (184c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    17fe:	685b      	ldr	r3, [r3, #4]
    1800:	2100      	movs	r1, #0
    1802:	2057      	movs	r0, #87	; 0x57
    1804:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1806:	4b12      	ldr	r3, [pc, #72]	; (1850 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	2000      	movs	r0, #0
    180c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    180e:	4b11      	ldr	r3, [pc, #68]	; (1854 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1810:	685b      	ldr	r3, [r3, #4]
    1812:	2000      	movs	r0, #0
    1814:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1816:	4b0f      	ldr	r3, [pc, #60]	; (1854 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1818:	689b      	ldr	r3, [r3, #8]
    181a:	2057      	movs	r0, #87	; 0x57
    181c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    181e:	4b0e      	ldr	r3, [pc, #56]	; (1858 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1820:	685b      	ldr	r3, [r3, #4]
    1822:	2000      	movs	r0, #0
    1824:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1826:	4b0d      	ldr	r3, [pc, #52]	; (185c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	2100      	movs	r1, #0
    182c:	2000      	movs	r0, #0
    182e:	4798      	blx	r3
    }
}
    1830:	bf00      	nop
    1832:	bd08      	pop	{r3, pc}
    1834:	1fff8b5c 	.word	0x1fff8b5c
    1838:	0000818c 	.word	0x0000818c
    183c:	000080a0 	.word	0x000080a0
    1840:	000080dc 	.word	0x000080dc
    1844:	000080e4 	.word	0x000080e4
    1848:	0000810c 	.word	0x0000810c
    184c:	00008118 	.word	0x00008118
    1850:	00008150 	.word	0x00008150
    1854:	0000819c 	.word	0x0000819c
    1858:	000081c8 	.word	0x000081c8
    185c:	000081c4 	.word	0x000081c4

00001860 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1860:	b500      	push	{lr}
    1862:	b085      	sub	sp, #20
    1864:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	7adb      	ldrb	r3, [r3, #11]
    186a:	9303      	str	r3, [sp, #12]
    186c:	e01f      	b.n	18ae <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    186e:	9b03      	ldr	r3, [sp, #12]
    1870:	1e5a      	subs	r2, r3, #1
    1872:	9b01      	ldr	r3, [sp, #4]
    1874:	320d      	adds	r2, #13
    1876:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    187a:	495a      	ldr	r1, [pc, #360]	; (19e4 <Clock_Ip_ResetClockConfiguration+0x184>)
    187c:	4613      	mov	r3, r2
    187e:	00db      	lsls	r3, r3, #3
    1880:	4413      	add	r3, r2
    1882:	440b      	add	r3, r1
    1884:	3301      	adds	r3, #1
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	461a      	mov	r2, r3
    188a:	4b57      	ldr	r3, [pc, #348]	; (19e8 <Clock_Ip_ResetClockConfiguration+0x188>)
    188c:	5c9b      	ldrb	r3, [r3, r2]
    188e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1890:	4a56      	ldr	r2, [pc, #344]	; (19ec <Clock_Ip_ResetClockConfiguration+0x18c>)
    1892:	9b02      	ldr	r3, [sp, #8]
    1894:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1898:	9a03      	ldr	r2, [sp, #12]
    189a:	3a01      	subs	r2, #1
    189c:	320d      	adds	r2, #13
    189e:	00d2      	lsls	r2, r2, #3
    18a0:	9901      	ldr	r1, [sp, #4]
    18a2:	440a      	add	r2, r1
    18a4:	4610      	mov	r0, r2
    18a6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    18a8:	9b03      	ldr	r3, [sp, #12]
    18aa:	3b01      	subs	r3, #1
    18ac:	9303      	str	r3, [sp, #12]
    18ae:	9b03      	ldr	r3, [sp, #12]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d1dc      	bne.n	186e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    18b4:	9b01      	ldr	r3, [sp, #4]
    18b6:	7b9b      	ldrb	r3, [r3, #14]
    18b8:	9303      	str	r3, [sp, #12]
    18ba:	e026      	b.n	190a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    18bc:	9b03      	ldr	r3, [sp, #12]
    18be:	3b01      	subs	r3, #1
    18c0:	9a01      	ldr	r2, [sp, #4]
    18c2:	3324      	adds	r3, #36	; 0x24
    18c4:	011b      	lsls	r3, r3, #4
    18c6:	4413      	add	r3, r2
    18c8:	3304      	adds	r3, #4
    18ca:	681a      	ldr	r2, [r3, #0]
    18cc:	4945      	ldr	r1, [pc, #276]	; (19e4 <Clock_Ip_ResetClockConfiguration+0x184>)
    18ce:	4613      	mov	r3, r2
    18d0:	00db      	lsls	r3, r3, #3
    18d2:	4413      	add	r3, r2
    18d4:	440b      	add	r3, r1
    18d6:	3301      	adds	r3, #1
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	461a      	mov	r2, r3
    18dc:	4b44      	ldr	r3, [pc, #272]	; (19f0 <Clock_Ip_ResetClockConfiguration+0x190>)
    18de:	5c9b      	ldrb	r3, [r3, r2]
    18e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    18e2:	4944      	ldr	r1, [pc, #272]	; (19f4 <Clock_Ip_ResetClockConfiguration+0x194>)
    18e4:	9a02      	ldr	r2, [sp, #8]
    18e6:	4613      	mov	r3, r2
    18e8:	005b      	lsls	r3, r3, #1
    18ea:	4413      	add	r3, r2
    18ec:	009b      	lsls	r3, r3, #2
    18ee:	440b      	add	r3, r1
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	9a03      	ldr	r2, [sp, #12]
    18f4:	3a01      	subs	r2, #1
    18f6:	3224      	adds	r2, #36	; 0x24
    18f8:	0112      	lsls	r2, r2, #4
    18fa:	9901      	ldr	r1, [sp, #4]
    18fc:	440a      	add	r2, r1
    18fe:	3204      	adds	r2, #4
    1900:	4610      	mov	r0, r2
    1902:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1904:	9b03      	ldr	r3, [sp, #12]
    1906:	3b01      	subs	r3, #1
    1908:	9303      	str	r3, [sp, #12]
    190a:	9b03      	ldr	r3, [sp, #12]
    190c:	2b00      	cmp	r3, #0
    190e:	d1d5      	bne.n	18bc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1910:	9b01      	ldr	r3, [sp, #4]
    1912:	7a9b      	ldrb	r3, [r3, #10]
    1914:	9303      	str	r3, [sp, #12]
    1916:	e02a      	b.n	196e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1918:	9b03      	ldr	r3, [sp, #12]
    191a:	1e5a      	subs	r2, r3, #1
    191c:	9901      	ldr	r1, [sp, #4]
    191e:	4613      	mov	r3, r2
    1920:	009b      	lsls	r3, r3, #2
    1922:	4413      	add	r3, r2
    1924:	00db      	lsls	r3, r3, #3
    1926:	440b      	add	r3, r1
    1928:	3340      	adds	r3, #64	; 0x40
    192a:	681a      	ldr	r2, [r3, #0]
    192c:	492d      	ldr	r1, [pc, #180]	; (19e4 <Clock_Ip_ResetClockConfiguration+0x184>)
    192e:	4613      	mov	r3, r2
    1930:	00db      	lsls	r3, r3, #3
    1932:	4413      	add	r3, r2
    1934:	440b      	add	r3, r1
    1936:	3301      	adds	r3, #1
    1938:	781b      	ldrb	r3, [r3, #0]
    193a:	461a      	mov	r2, r3
    193c:	4b2e      	ldr	r3, [pc, #184]	; (19f8 <Clock_Ip_ResetClockConfiguration+0x198>)
    193e:	5c9b      	ldrb	r3, [r3, r2]
    1940:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1942:	492e      	ldr	r1, [pc, #184]	; (19fc <Clock_Ip_ResetClockConfiguration+0x19c>)
    1944:	9a02      	ldr	r2, [sp, #8]
    1946:	4613      	mov	r3, r2
    1948:	009b      	lsls	r3, r3, #2
    194a:	4413      	add	r3, r2
    194c:	009b      	lsls	r3, r3, #2
    194e:	440b      	add	r3, r1
    1950:	6819      	ldr	r1, [r3, #0]
    1952:	9b03      	ldr	r3, [sp, #12]
    1954:	1e5a      	subs	r2, r3, #1
    1956:	4613      	mov	r3, r2
    1958:	009b      	lsls	r3, r3, #2
    195a:	4413      	add	r3, r2
    195c:	00db      	lsls	r3, r3, #3
    195e:	3340      	adds	r3, #64	; 0x40
    1960:	9a01      	ldr	r2, [sp, #4]
    1962:	4413      	add	r3, r2
    1964:	4618      	mov	r0, r3
    1966:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1968:	9b03      	ldr	r3, [sp, #12]
    196a:	3b01      	subs	r3, #1
    196c:	9303      	str	r3, [sp, #12]
    196e:	9b03      	ldr	r3, [sp, #12]
    1970:	2b00      	cmp	r3, #0
    1972:	d1d1      	bne.n	1918 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1974:	9b01      	ldr	r3, [sp, #4]
    1976:	7a5b      	ldrb	r3, [r3, #9]
    1978:	9303      	str	r3, [sp, #12]
    197a:	e02b      	b.n	19d4 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    197c:	9b03      	ldr	r3, [sp, #12]
    197e:	1e5a      	subs	r2, r3, #1
    1980:	9901      	ldr	r1, [sp, #4]
    1982:	4613      	mov	r3, r2
    1984:	009b      	lsls	r3, r3, #2
    1986:	4413      	add	r3, r2
    1988:	009b      	lsls	r3, r3, #2
    198a:	440b      	add	r3, r1
    198c:	332c      	adds	r3, #44	; 0x2c
    198e:	681a      	ldr	r2, [r3, #0]
    1990:	4914      	ldr	r1, [pc, #80]	; (19e4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1992:	4613      	mov	r3, r2
    1994:	00db      	lsls	r3, r3, #3
    1996:	4413      	add	r3, r2
    1998:	440b      	add	r3, r1
    199a:	3301      	adds	r3, #1
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	461a      	mov	r2, r3
    19a0:	4b17      	ldr	r3, [pc, #92]	; (1a00 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    19a2:	5c9b      	ldrb	r3, [r3, r2]
    19a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    19a6:	4917      	ldr	r1, [pc, #92]	; (1a04 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    19a8:	9a02      	ldr	r2, [sp, #8]
    19aa:	4613      	mov	r3, r2
    19ac:	009b      	lsls	r3, r3, #2
    19ae:	4413      	add	r3, r2
    19b0:	009b      	lsls	r3, r3, #2
    19b2:	440b      	add	r3, r1
    19b4:	6819      	ldr	r1, [r3, #0]
    19b6:	9b03      	ldr	r3, [sp, #12]
    19b8:	1e5a      	subs	r2, r3, #1
    19ba:	4613      	mov	r3, r2
    19bc:	009b      	lsls	r3, r3, #2
    19be:	4413      	add	r3, r2
    19c0:	009b      	lsls	r3, r3, #2
    19c2:	3328      	adds	r3, #40	; 0x28
    19c4:	9a01      	ldr	r2, [sp, #4]
    19c6:	4413      	add	r3, r2
    19c8:	3304      	adds	r3, #4
    19ca:	4618      	mov	r0, r3
    19cc:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    19ce:	9b03      	ldr	r3, [sp, #12]
    19d0:	3b01      	subs	r3, #1
    19d2:	9303      	str	r3, [sp, #12]
    19d4:	9b03      	ldr	r3, [sp, #12]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d1d0      	bne.n	197c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    19da:	bf00      	nop
    19dc:	bf00      	nop
    19de:	b005      	add	sp, #20
    19e0:	f85d fb04 	ldr.w	pc, [sp], #4
    19e4:	00007b90 	.word	0x00007b90
    19e8:	00007b60 	.word	0x00007b60
    19ec:	000081c8 	.word	0x000081c8
    19f0:	00007b40 	.word	0x00007b40
    19f4:	0000810c 	.word	0x0000810c
    19f8:	00007b50 	.word	0x00007b50
    19fc:	0000819c 	.word	0x0000819c
    1a00:	00007b10 	.word	0x00007b10
    1a04:	000080e4 	.word	0x000080e4

00001a08 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1a08:	b500      	push	{lr}
    1a0a:	b085      	sub	sp, #20
    1a0c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1a0e:	2301      	movs	r3, #1
    1a10:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1a12:	9801      	ldr	r0, [sp, #4]
    1a14:	f000 f818 	bl	1a48 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1a18:	4b0a      	ldr	r3, [pc, #40]	; (1a44 <Clock_Ip_Init+0x3c>)
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d00a      	beq.n	1a36 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1a20:	f000 fb74 	bl	210c <Clock_Ip_GetPllStatus>
    1a24:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1a26:	9b02      	ldr	r3, [sp, #8]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d106      	bne.n	1a3a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1a2c:	f000 fbf2 	bl	2214 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1a30:	2300      	movs	r3, #0
    1a32:	9303      	str	r3, [sp, #12]
    1a34:	e001      	b.n	1a3a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1a36:	2300      	movs	r3, #0
    1a38:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1a3a:	9b03      	ldr	r3, [sp, #12]
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	b005      	add	sp, #20
    1a40:	f85d fb04 	ldr.w	pc, [sp], #4
    1a44:	1fff8b60 	.word	0x1fff8b60

00001a48 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1a48:	b510      	push	{r4, lr}
    1a4a:	b084      	sub	sp, #16
    1a4c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1a4e:	4a9f      	ldr	r2, [pc, #636]	; (1ccc <Clock_Ip_InitClock+0x284>)
    1a50:	9b01      	ldr	r3, [sp, #4]
    1a52:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1a54:	2101      	movs	r1, #1
    1a56:	9801      	ldr	r0, [sp, #4]
    1a58:	f003 fa90 	bl	4f7c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1a5c:	4b9b      	ldr	r3, [pc, #620]	; (1ccc <Clock_Ip_InitClock+0x284>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d030      	beq.n	1ac6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1a64:	2300      	movs	r3, #0
    1a66:	9303      	str	r3, [sp, #12]
    1a68:	e027      	b.n	1aba <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a6a:	9901      	ldr	r1, [sp, #4]
    1a6c:	9a03      	ldr	r2, [sp, #12]
    1a6e:	4613      	mov	r3, r2
    1a70:	009b      	lsls	r3, r3, #2
    1a72:	4413      	add	r3, r2
    1a74:	009b      	lsls	r3, r3, #2
    1a76:	440b      	add	r3, r1
    1a78:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a7c:	681a      	ldr	r2, [r3, #0]
    1a7e:	4994      	ldr	r1, [pc, #592]	; (1cd0 <Clock_Ip_InitClock+0x288>)
    1a80:	4613      	mov	r3, r2
    1a82:	00db      	lsls	r3, r3, #3
    1a84:	4413      	add	r3, r2
    1a86:	440b      	add	r3, r1
    1a88:	3301      	adds	r3, #1
    1a8a:	781b      	ldrb	r3, [r3, #0]
    1a8c:	461a      	mov	r2, r3
    1a8e:	4b91      	ldr	r3, [pc, #580]	; (1cd4 <Clock_Ip_InitClock+0x28c>)
    1a90:	5c9b      	ldrb	r3, [r3, r2]
    1a92:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1a94:	4a90      	ldr	r2, [pc, #576]	; (1cd8 <Clock_Ip_InitClock+0x290>)
    1a96:	9b02      	ldr	r3, [sp, #8]
    1a98:	011b      	lsls	r3, r3, #4
    1a9a:	4413      	add	r3, r2
    1a9c:	6819      	ldr	r1, [r3, #0]
    1a9e:	9a03      	ldr	r2, [sp, #12]
    1aa0:	4613      	mov	r3, r2
    1aa2:	009b      	lsls	r3, r3, #2
    1aa4:	4413      	add	r3, r2
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1aac:	9a01      	ldr	r2, [sp, #4]
    1aae:	4413      	add	r3, r2
    1ab0:	4618      	mov	r0, r3
    1ab2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1ab4:	9b03      	ldr	r3, [sp, #12]
    1ab6:	3301      	adds	r3, #1
    1ab8:	9303      	str	r3, [sp, #12]
    1aba:	9b01      	ldr	r3, [sp, #4]
    1abc:	7c9b      	ldrb	r3, [r3, #18]
    1abe:	461a      	mov	r2, r3
    1ac0:	9b03      	ldr	r3, [sp, #12]
    1ac2:	4293      	cmp	r3, r2
    1ac4:	d3d1      	bcc.n	1a6a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1ac6:	9801      	ldr	r0, [sp, #4]
    1ac8:	f7ff feca 	bl	1860 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1acc:	2300      	movs	r3, #0
    1ace:	9303      	str	r3, [sp, #12]
    1ad0:	e029      	b.n	1b26 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1ad2:	9901      	ldr	r1, [sp, #4]
    1ad4:	9a03      	ldr	r2, [sp, #12]
    1ad6:	4613      	mov	r3, r2
    1ad8:	005b      	lsls	r3, r3, #1
    1ada:	4413      	add	r3, r2
    1adc:	009b      	lsls	r3, r3, #2
    1ade:	440b      	add	r3, r1
    1ae0:	3314      	adds	r3, #20
    1ae2:	681a      	ldr	r2, [r3, #0]
    1ae4:	497a      	ldr	r1, [pc, #488]	; (1cd0 <Clock_Ip_InitClock+0x288>)
    1ae6:	4613      	mov	r3, r2
    1ae8:	00db      	lsls	r3, r3, #3
    1aea:	4413      	add	r3, r2
    1aec:	440b      	add	r3, r1
    1aee:	3301      	adds	r3, #1
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	461a      	mov	r2, r3
    1af4:	4b79      	ldr	r3, [pc, #484]	; (1cdc <Clock_Ip_InitClock+0x294>)
    1af6:	5c9b      	ldrb	r3, [r3, r2]
    1af8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1afa:	4979      	ldr	r1, [pc, #484]	; (1ce0 <Clock_Ip_InitClock+0x298>)
    1afc:	9a02      	ldr	r2, [sp, #8]
    1afe:	4613      	mov	r3, r2
    1b00:	005b      	lsls	r3, r3, #1
    1b02:	4413      	add	r3, r2
    1b04:	009b      	lsls	r3, r3, #2
    1b06:	440b      	add	r3, r1
    1b08:	6819      	ldr	r1, [r3, #0]
    1b0a:	9a03      	ldr	r2, [sp, #12]
    1b0c:	4613      	mov	r3, r2
    1b0e:	005b      	lsls	r3, r3, #1
    1b10:	4413      	add	r3, r2
    1b12:	009b      	lsls	r3, r3, #2
    1b14:	3310      	adds	r3, #16
    1b16:	9a01      	ldr	r2, [sp, #4]
    1b18:	4413      	add	r3, r2
    1b1a:	3304      	adds	r3, #4
    1b1c:	4618      	mov	r0, r3
    1b1e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1b20:	9b03      	ldr	r3, [sp, #12]
    1b22:	3301      	adds	r3, #1
    1b24:	9303      	str	r3, [sp, #12]
    1b26:	9b01      	ldr	r3, [sp, #4]
    1b28:	7a1b      	ldrb	r3, [r3, #8]
    1b2a:	461a      	mov	r2, r3
    1b2c:	9b03      	ldr	r3, [sp, #12]
    1b2e:	4293      	cmp	r3, r2
    1b30:	d3cf      	bcc.n	1ad2 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1b32:	2300      	movs	r3, #0
    1b34:	9303      	str	r3, [sp, #12]
    1b36:	e02a      	b.n	1b8e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1b38:	9901      	ldr	r1, [sp, #4]
    1b3a:	9a03      	ldr	r2, [sp, #12]
    1b3c:	4613      	mov	r3, r2
    1b3e:	009b      	lsls	r3, r3, #2
    1b40:	4413      	add	r3, r2
    1b42:	009b      	lsls	r3, r3, #2
    1b44:	440b      	add	r3, r1
    1b46:	332c      	adds	r3, #44	; 0x2c
    1b48:	681a      	ldr	r2, [r3, #0]
    1b4a:	4961      	ldr	r1, [pc, #388]	; (1cd0 <Clock_Ip_InitClock+0x288>)
    1b4c:	4613      	mov	r3, r2
    1b4e:	00db      	lsls	r3, r3, #3
    1b50:	4413      	add	r3, r2
    1b52:	440b      	add	r3, r1
    1b54:	3301      	adds	r3, #1
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	461a      	mov	r2, r3
    1b5a:	4b62      	ldr	r3, [pc, #392]	; (1ce4 <Clock_Ip_InitClock+0x29c>)
    1b5c:	5c9b      	ldrb	r3, [r3, r2]
    1b5e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1b60:	4961      	ldr	r1, [pc, #388]	; (1ce8 <Clock_Ip_InitClock+0x2a0>)
    1b62:	9a02      	ldr	r2, [sp, #8]
    1b64:	4613      	mov	r3, r2
    1b66:	009b      	lsls	r3, r3, #2
    1b68:	4413      	add	r3, r2
    1b6a:	009b      	lsls	r3, r3, #2
    1b6c:	440b      	add	r3, r1
    1b6e:	3304      	adds	r3, #4
    1b70:	6819      	ldr	r1, [r3, #0]
    1b72:	9a03      	ldr	r2, [sp, #12]
    1b74:	4613      	mov	r3, r2
    1b76:	009b      	lsls	r3, r3, #2
    1b78:	4413      	add	r3, r2
    1b7a:	009b      	lsls	r3, r3, #2
    1b7c:	3328      	adds	r3, #40	; 0x28
    1b7e:	9a01      	ldr	r2, [sp, #4]
    1b80:	4413      	add	r3, r2
    1b82:	3304      	adds	r3, #4
    1b84:	4618      	mov	r0, r3
    1b86:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1b88:	9b03      	ldr	r3, [sp, #12]
    1b8a:	3301      	adds	r3, #1
    1b8c:	9303      	str	r3, [sp, #12]
    1b8e:	9b01      	ldr	r3, [sp, #4]
    1b90:	7a5b      	ldrb	r3, [r3, #9]
    1b92:	461a      	mov	r2, r3
    1b94:	9b03      	ldr	r3, [sp, #12]
    1b96:	4293      	cmp	r3, r2
    1b98:	d3ce      	bcc.n	1b38 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1b9a:	9801      	ldr	r0, [sp, #4]
    1b9c:	f7ff fdb0 	bl	1700 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1ba0:	2300      	movs	r3, #0
    1ba2:	9303      	str	r3, [sp, #12]
    1ba4:	e028      	b.n	1bf8 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1ba6:	9901      	ldr	r1, [sp, #4]
    1ba8:	9a03      	ldr	r2, [sp, #12]
    1baa:	4613      	mov	r3, r2
    1bac:	009b      	lsls	r3, r3, #2
    1bae:	4413      	add	r3, r2
    1bb0:	009b      	lsls	r3, r3, #2
    1bb2:	440b      	add	r3, r1
    1bb4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1bb8:	681a      	ldr	r2, [r3, #0]
    1bba:	4945      	ldr	r1, [pc, #276]	; (1cd0 <Clock_Ip_InitClock+0x288>)
    1bbc:	4613      	mov	r3, r2
    1bbe:	00db      	lsls	r3, r3, #3
    1bc0:	4413      	add	r3, r2
    1bc2:	440b      	add	r3, r1
    1bc4:	3301      	adds	r3, #1
    1bc6:	781b      	ldrb	r3, [r3, #0]
    1bc8:	461a      	mov	r2, r3
    1bca:	4b48      	ldr	r3, [pc, #288]	; (1cec <Clock_Ip_InitClock+0x2a4>)
    1bcc:	5c9b      	ldrb	r3, [r3, r2]
    1bce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1bd0:	4a47      	ldr	r2, [pc, #284]	; (1cf0 <Clock_Ip_InitClock+0x2a8>)
    1bd2:	9b02      	ldr	r3, [sp, #8]
    1bd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1bd8:	9a03      	ldr	r2, [sp, #12]
    1bda:	4613      	mov	r3, r2
    1bdc:	009b      	lsls	r3, r3, #2
    1bde:	4413      	add	r3, r2
    1be0:	009b      	lsls	r3, r3, #2
    1be2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1be6:	9a01      	ldr	r2, [sp, #4]
    1be8:	4413      	add	r3, r2
    1bea:	3304      	adds	r3, #4
    1bec:	9903      	ldr	r1, [sp, #12]
    1bee:	4618      	mov	r0, r3
    1bf0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1bf2:	9b03      	ldr	r3, [sp, #12]
    1bf4:	3301      	adds	r3, #1
    1bf6:	9303      	str	r3, [sp, #12]
    1bf8:	9b01      	ldr	r3, [sp, #4]
    1bfa:	7c5b      	ldrb	r3, [r3, #17]
    1bfc:	461a      	mov	r2, r3
    1bfe:	9b03      	ldr	r3, [sp, #12]
    1c00:	4293      	cmp	r3, r2
    1c02:	d3d0      	bcc.n	1ba6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1c04:	2300      	movs	r3, #0
    1c06:	9303      	str	r3, [sp, #12]
    1c08:	e026      	b.n	1c58 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1c0a:	9901      	ldr	r1, [sp, #4]
    1c0c:	9a03      	ldr	r2, [sp, #12]
    1c0e:	4613      	mov	r3, r2
    1c10:	005b      	lsls	r3, r3, #1
    1c12:	4413      	add	r3, r2
    1c14:	009b      	lsls	r3, r3, #2
    1c16:	440b      	add	r3, r1
    1c18:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1c1c:	681a      	ldr	r2, [r3, #0]
    1c1e:	492c      	ldr	r1, [pc, #176]	; (1cd0 <Clock_Ip_InitClock+0x288>)
    1c20:	4613      	mov	r3, r2
    1c22:	00db      	lsls	r3, r3, #3
    1c24:	4413      	add	r3, r2
    1c26:	440b      	add	r3, r1
    1c28:	3301      	adds	r3, #1
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	461a      	mov	r2, r3
    1c2e:	4b31      	ldr	r3, [pc, #196]	; (1cf4 <Clock_Ip_InitClock+0x2ac>)
    1c30:	5c9b      	ldrb	r3, [r3, r2]
    1c32:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1c34:	4a30      	ldr	r2, [pc, #192]	; (1cf8 <Clock_Ip_InitClock+0x2b0>)
    1c36:	9b02      	ldr	r3, [sp, #8]
    1c38:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1c3c:	9a03      	ldr	r2, [sp, #12]
    1c3e:	4613      	mov	r3, r2
    1c40:	005b      	lsls	r3, r3, #1
    1c42:	4413      	add	r3, r2
    1c44:	009b      	lsls	r3, r3, #2
    1c46:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1c4a:	9a01      	ldr	r2, [sp, #4]
    1c4c:	4413      	add	r3, r2
    1c4e:	4618      	mov	r0, r3
    1c50:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1c52:	9b03      	ldr	r3, [sp, #12]
    1c54:	3301      	adds	r3, #1
    1c56:	9303      	str	r3, [sp, #12]
    1c58:	9b01      	ldr	r3, [sp, #4]
    1c5a:	7b5b      	ldrb	r3, [r3, #13]
    1c5c:	461a      	mov	r2, r3
    1c5e:	9b03      	ldr	r3, [sp, #12]
    1c60:	4293      	cmp	r3, r2
    1c62:	d3d2      	bcc.n	1c0a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1c64:	2300      	movs	r3, #0
    1c66:	9303      	str	r3, [sp, #12]
    1c68:	e026      	b.n	1cb8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1c6a:	9901      	ldr	r1, [sp, #4]
    1c6c:	9a03      	ldr	r2, [sp, #12]
    1c6e:	4613      	mov	r3, r2
    1c70:	005b      	lsls	r3, r3, #1
    1c72:	4413      	add	r3, r2
    1c74:	009b      	lsls	r3, r3, #2
    1c76:	440b      	add	r3, r1
    1c78:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1c7c:	681a      	ldr	r2, [r3, #0]
    1c7e:	4914      	ldr	r1, [pc, #80]	; (1cd0 <Clock_Ip_InitClock+0x288>)
    1c80:	4613      	mov	r3, r2
    1c82:	00db      	lsls	r3, r3, #3
    1c84:	4413      	add	r3, r2
    1c86:	440b      	add	r3, r1
    1c88:	3301      	adds	r3, #1
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	461a      	mov	r2, r3
    1c8e:	4b1b      	ldr	r3, [pc, #108]	; (1cfc <Clock_Ip_InitClock+0x2b4>)
    1c90:	5c9b      	ldrb	r3, [r3, r2]
    1c92:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1c94:	4a1a      	ldr	r2, [pc, #104]	; (1d00 <Clock_Ip_InitClock+0x2b8>)
    1c96:	9b02      	ldr	r3, [sp, #8]
    1c98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1c9c:	9a03      	ldr	r2, [sp, #12]
    1c9e:	4613      	mov	r3, r2
    1ca0:	005b      	lsls	r3, r3, #1
    1ca2:	4413      	add	r3, r2
    1ca4:	009b      	lsls	r3, r3, #2
    1ca6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1caa:	9a01      	ldr	r2, [sp, #4]
    1cac:	4413      	add	r3, r2
    1cae:	4618      	mov	r0, r3
    1cb0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1cb2:	9b03      	ldr	r3, [sp, #12]
    1cb4:	3301      	adds	r3, #1
    1cb6:	9303      	str	r3, [sp, #12]
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	7b1b      	ldrb	r3, [r3, #12]
    1cbc:	461a      	mov	r2, r3
    1cbe:	9b03      	ldr	r3, [sp, #12]
    1cc0:	4293      	cmp	r3, r2
    1cc2:	d3d2      	bcc.n	1c6a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1cc4:	2300      	movs	r3, #0
    1cc6:	9303      	str	r3, [sp, #12]
    1cc8:	e044      	b.n	1d54 <Clock_Ip_InitClock+0x30c>
    1cca:	bf00      	nop
    1ccc:	1fff8b58 	.word	0x1fff8b58
    1cd0:	00007b90 	.word	0x00007b90
    1cd4:	00007b80 	.word	0x00007b80
    1cd8:	0000818c 	.word	0x0000818c
    1cdc:	00007b20 	.word	0x00007b20
    1ce0:	00008150 	.word	0x00008150
    1ce4:	00007b10 	.word	0x00007b10
    1ce8:	000080e4 	.word	0x000080e4
    1cec:	00007b70 	.word	0x00007b70
    1cf0:	000081c4 	.word	0x000081c4
    1cf4:	00007b00 	.word	0x00007b00
    1cf8:	000080dc 	.word	0x000080dc
    1cfc:	00007af0 	.word	0x00007af0
    1d00:	000080a0 	.word	0x000080a0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1d04:	9901      	ldr	r1, [sp, #4]
    1d06:	9a03      	ldr	r2, [sp, #12]
    1d08:	4613      	mov	r3, r2
    1d0a:	005b      	lsls	r3, r3, #1
    1d0c:	4413      	add	r3, r2
    1d0e:	009b      	lsls	r3, r3, #2
    1d10:	440b      	add	r3, r1
    1d12:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1d16:	681a      	ldr	r2, [r3, #0]
    1d18:	49ac      	ldr	r1, [pc, #688]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1d1a:	4613      	mov	r3, r2
    1d1c:	00db      	lsls	r3, r3, #3
    1d1e:	4413      	add	r3, r2
    1d20:	440b      	add	r3, r1
    1d22:	3301      	adds	r3, #1
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	461a      	mov	r2, r3
    1d28:	4ba9      	ldr	r3, [pc, #676]	; (1fd0 <Clock_Ip_InitClock+0x588>)
    1d2a:	5c9b      	ldrb	r3, [r3, r2]
    1d2c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1d2e:	4aa9      	ldr	r2, [pc, #676]	; (1fd4 <Clock_Ip_InitClock+0x58c>)
    1d30:	9b02      	ldr	r3, [sp, #8]
    1d32:	00db      	lsls	r3, r3, #3
    1d34:	4413      	add	r3, r2
    1d36:	6859      	ldr	r1, [r3, #4]
    1d38:	9a03      	ldr	r2, [sp, #12]
    1d3a:	4613      	mov	r3, r2
    1d3c:	005b      	lsls	r3, r3, #1
    1d3e:	4413      	add	r3, r2
    1d40:	009b      	lsls	r3, r3, #2
    1d42:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1d46:	9a01      	ldr	r2, [sp, #4]
    1d48:	4413      	add	r3, r2
    1d4a:	4618      	mov	r0, r3
    1d4c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1d4e:	9b03      	ldr	r3, [sp, #12]
    1d50:	3301      	adds	r3, #1
    1d52:	9303      	str	r3, [sp, #12]
    1d54:	9b01      	ldr	r3, [sp, #4]
    1d56:	7b5b      	ldrb	r3, [r3, #13]
    1d58:	461a      	mov	r2, r3
    1d5a:	9b03      	ldr	r3, [sp, #12]
    1d5c:	4293      	cmp	r3, r2
    1d5e:	d3d1      	bcc.n	1d04 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1d60:	2300      	movs	r3, #0
    1d62:	9303      	str	r3, [sp, #12]
    1d64:	e029      	b.n	1dba <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1d66:	9901      	ldr	r1, [sp, #4]
    1d68:	9a03      	ldr	r2, [sp, #12]
    1d6a:	4613      	mov	r3, r2
    1d6c:	009b      	lsls	r3, r3, #2
    1d6e:	4413      	add	r3, r2
    1d70:	00db      	lsls	r3, r3, #3
    1d72:	440b      	add	r3, r1
    1d74:	3340      	adds	r3, #64	; 0x40
    1d76:	681a      	ldr	r2, [r3, #0]
    1d78:	4994      	ldr	r1, [pc, #592]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1d7a:	4613      	mov	r3, r2
    1d7c:	00db      	lsls	r3, r3, #3
    1d7e:	4413      	add	r3, r2
    1d80:	440b      	add	r3, r1
    1d82:	3301      	adds	r3, #1
    1d84:	781b      	ldrb	r3, [r3, #0]
    1d86:	461a      	mov	r2, r3
    1d88:	4b93      	ldr	r3, [pc, #588]	; (1fd8 <Clock_Ip_InitClock+0x590>)
    1d8a:	5c9b      	ldrb	r3, [r3, r2]
    1d8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1d8e:	4993      	ldr	r1, [pc, #588]	; (1fdc <Clock_Ip_InitClock+0x594>)
    1d90:	9a02      	ldr	r2, [sp, #8]
    1d92:	4613      	mov	r3, r2
    1d94:	009b      	lsls	r3, r3, #2
    1d96:	4413      	add	r3, r2
    1d98:	009b      	lsls	r3, r3, #2
    1d9a:	440b      	add	r3, r1
    1d9c:	3304      	adds	r3, #4
    1d9e:	6819      	ldr	r1, [r3, #0]
    1da0:	9a03      	ldr	r2, [sp, #12]
    1da2:	4613      	mov	r3, r2
    1da4:	009b      	lsls	r3, r3, #2
    1da6:	4413      	add	r3, r2
    1da8:	00db      	lsls	r3, r3, #3
    1daa:	3340      	adds	r3, #64	; 0x40
    1dac:	9a01      	ldr	r2, [sp, #4]
    1dae:	4413      	add	r3, r2
    1db0:	4618      	mov	r0, r3
    1db2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1db4:	9b03      	ldr	r3, [sp, #12]
    1db6:	3301      	adds	r3, #1
    1db8:	9303      	str	r3, [sp, #12]
    1dba:	9b01      	ldr	r3, [sp, #4]
    1dbc:	7a9b      	ldrb	r3, [r3, #10]
    1dbe:	461a      	mov	r2, r3
    1dc0:	9b03      	ldr	r3, [sp, #12]
    1dc2:	4293      	cmp	r3, r2
    1dc4:	d3cf      	bcc.n	1d66 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1dc6:	2300      	movs	r3, #0
    1dc8:	9303      	str	r3, [sp, #12]
    1dca:	e029      	b.n	1e20 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1dcc:	9901      	ldr	r1, [sp, #4]
    1dce:	9a03      	ldr	r2, [sp, #12]
    1dd0:	4613      	mov	r3, r2
    1dd2:	009b      	lsls	r3, r3, #2
    1dd4:	4413      	add	r3, r2
    1dd6:	009b      	lsls	r3, r3, #2
    1dd8:	440b      	add	r3, r1
    1dda:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1dde:	681a      	ldr	r2, [r3, #0]
    1de0:	497a      	ldr	r1, [pc, #488]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1de2:	4613      	mov	r3, r2
    1de4:	00db      	lsls	r3, r3, #3
    1de6:	4413      	add	r3, r2
    1de8:	440b      	add	r3, r1
    1dea:	3301      	adds	r3, #1
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	461a      	mov	r2, r3
    1df0:	4b7b      	ldr	r3, [pc, #492]	; (1fe0 <Clock_Ip_InitClock+0x598>)
    1df2:	5c9b      	ldrb	r3, [r3, r2]
    1df4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1df6:	4a7b      	ldr	r2, [pc, #492]	; (1fe4 <Clock_Ip_InitClock+0x59c>)
    1df8:	9b02      	ldr	r3, [sp, #8]
    1dfa:	011b      	lsls	r3, r3, #4
    1dfc:	4413      	add	r3, r2
    1dfe:	3304      	adds	r3, #4
    1e00:	681c      	ldr	r4, [r3, #0]
    1e02:	9a03      	ldr	r2, [sp, #12]
    1e04:	4613      	mov	r3, r2
    1e06:	009b      	lsls	r3, r3, #2
    1e08:	4413      	add	r3, r2
    1e0a:	009b      	lsls	r3, r3, #2
    1e0c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1e10:	9a01      	ldr	r2, [sp, #4]
    1e12:	4413      	add	r3, r2
    1e14:	9903      	ldr	r1, [sp, #12]
    1e16:	4618      	mov	r0, r3
    1e18:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1e1a:	9b03      	ldr	r3, [sp, #12]
    1e1c:	3301      	adds	r3, #1
    1e1e:	9303      	str	r3, [sp, #12]
    1e20:	9b01      	ldr	r3, [sp, #4]
    1e22:	7c9b      	ldrb	r3, [r3, #18]
    1e24:	461a      	mov	r2, r3
    1e26:	9b03      	ldr	r3, [sp, #12]
    1e28:	4293      	cmp	r3, r2
    1e2a:	d3cf      	bcc.n	1dcc <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1e2c:	2300      	movs	r3, #0
    1e2e:	9303      	str	r3, [sp, #12]
    1e30:	e02a      	b.n	1e88 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1e32:	9901      	ldr	r1, [sp, #4]
    1e34:	9a03      	ldr	r2, [sp, #12]
    1e36:	4613      	mov	r3, r2
    1e38:	009b      	lsls	r3, r3, #2
    1e3a:	4413      	add	r3, r2
    1e3c:	009b      	lsls	r3, r3, #2
    1e3e:	440b      	add	r3, r1
    1e40:	332c      	adds	r3, #44	; 0x2c
    1e42:	681a      	ldr	r2, [r3, #0]
    1e44:	4961      	ldr	r1, [pc, #388]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1e46:	4613      	mov	r3, r2
    1e48:	00db      	lsls	r3, r3, #3
    1e4a:	4413      	add	r3, r2
    1e4c:	440b      	add	r3, r1
    1e4e:	3301      	adds	r3, #1
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	461a      	mov	r2, r3
    1e54:	4b64      	ldr	r3, [pc, #400]	; (1fe8 <Clock_Ip_InitClock+0x5a0>)
    1e56:	5c9b      	ldrb	r3, [r3, r2]
    1e58:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1e5a:	4964      	ldr	r1, [pc, #400]	; (1fec <Clock_Ip_InitClock+0x5a4>)
    1e5c:	9a02      	ldr	r2, [sp, #8]
    1e5e:	4613      	mov	r3, r2
    1e60:	009b      	lsls	r3, r3, #2
    1e62:	4413      	add	r3, r2
    1e64:	009b      	lsls	r3, r3, #2
    1e66:	440b      	add	r3, r1
    1e68:	3308      	adds	r3, #8
    1e6a:	6819      	ldr	r1, [r3, #0]
    1e6c:	9a03      	ldr	r2, [sp, #12]
    1e6e:	4613      	mov	r3, r2
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	4413      	add	r3, r2
    1e74:	009b      	lsls	r3, r3, #2
    1e76:	3328      	adds	r3, #40	; 0x28
    1e78:	9a01      	ldr	r2, [sp, #4]
    1e7a:	4413      	add	r3, r2
    1e7c:	3304      	adds	r3, #4
    1e7e:	4618      	mov	r0, r3
    1e80:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1e82:	9b03      	ldr	r3, [sp, #12]
    1e84:	3301      	adds	r3, #1
    1e86:	9303      	str	r3, [sp, #12]
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	7a5b      	ldrb	r3, [r3, #9]
    1e8c:	461a      	mov	r2, r3
    1e8e:	9b03      	ldr	r3, [sp, #12]
    1e90:	4293      	cmp	r3, r2
    1e92:	d3ce      	bcc.n	1e32 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1e94:	2300      	movs	r3, #0
    1e96:	9303      	str	r3, [sp, #12]
    1e98:	e029      	b.n	1eee <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1e9a:	9901      	ldr	r1, [sp, #4]
    1e9c:	9a03      	ldr	r2, [sp, #12]
    1e9e:	4613      	mov	r3, r2
    1ea0:	009b      	lsls	r3, r3, #2
    1ea2:	4413      	add	r3, r2
    1ea4:	00db      	lsls	r3, r3, #3
    1ea6:	440b      	add	r3, r1
    1ea8:	3340      	adds	r3, #64	; 0x40
    1eaa:	681a      	ldr	r2, [r3, #0]
    1eac:	4947      	ldr	r1, [pc, #284]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1eae:	4613      	mov	r3, r2
    1eb0:	00db      	lsls	r3, r3, #3
    1eb2:	4413      	add	r3, r2
    1eb4:	440b      	add	r3, r1
    1eb6:	3301      	adds	r3, #1
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	461a      	mov	r2, r3
    1ebc:	4b46      	ldr	r3, [pc, #280]	; (1fd8 <Clock_Ip_InitClock+0x590>)
    1ebe:	5c9b      	ldrb	r3, [r3, r2]
    1ec0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1ec2:	4946      	ldr	r1, [pc, #280]	; (1fdc <Clock_Ip_InitClock+0x594>)
    1ec4:	9a02      	ldr	r2, [sp, #8]
    1ec6:	4613      	mov	r3, r2
    1ec8:	009b      	lsls	r3, r3, #2
    1eca:	4413      	add	r3, r2
    1ecc:	009b      	lsls	r3, r3, #2
    1ece:	440b      	add	r3, r1
    1ed0:	330c      	adds	r3, #12
    1ed2:	6819      	ldr	r1, [r3, #0]
    1ed4:	9a03      	ldr	r2, [sp, #12]
    1ed6:	4613      	mov	r3, r2
    1ed8:	009b      	lsls	r3, r3, #2
    1eda:	4413      	add	r3, r2
    1edc:	00db      	lsls	r3, r3, #3
    1ede:	3340      	adds	r3, #64	; 0x40
    1ee0:	9a01      	ldr	r2, [sp, #4]
    1ee2:	4413      	add	r3, r2
    1ee4:	4618      	mov	r0, r3
    1ee6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1ee8:	9b03      	ldr	r3, [sp, #12]
    1eea:	3301      	adds	r3, #1
    1eec:	9303      	str	r3, [sp, #12]
    1eee:	9b01      	ldr	r3, [sp, #4]
    1ef0:	7a9b      	ldrb	r3, [r3, #10]
    1ef2:	461a      	mov	r2, r3
    1ef4:	9b03      	ldr	r3, [sp, #12]
    1ef6:	4293      	cmp	r3, r2
    1ef8:	d3cf      	bcc.n	1e9a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1efa:	2300      	movs	r3, #0
    1efc:	9303      	str	r3, [sp, #12]
    1efe:	e025      	b.n	1f4c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1f00:	9a01      	ldr	r2, [sp, #4]
    1f02:	9b03      	ldr	r3, [sp, #12]
    1f04:	3324      	adds	r3, #36	; 0x24
    1f06:	011b      	lsls	r3, r3, #4
    1f08:	4413      	add	r3, r2
    1f0a:	3304      	adds	r3, #4
    1f0c:	681a      	ldr	r2, [r3, #0]
    1f0e:	492f      	ldr	r1, [pc, #188]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1f10:	4613      	mov	r3, r2
    1f12:	00db      	lsls	r3, r3, #3
    1f14:	4413      	add	r3, r2
    1f16:	440b      	add	r3, r1
    1f18:	3301      	adds	r3, #1
    1f1a:	781b      	ldrb	r3, [r3, #0]
    1f1c:	461a      	mov	r2, r3
    1f1e:	4b34      	ldr	r3, [pc, #208]	; (1ff0 <Clock_Ip_InitClock+0x5a8>)
    1f20:	5c9b      	ldrb	r3, [r3, r2]
    1f22:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1f24:	4933      	ldr	r1, [pc, #204]	; (1ff4 <Clock_Ip_InitClock+0x5ac>)
    1f26:	9a02      	ldr	r2, [sp, #8]
    1f28:	4613      	mov	r3, r2
    1f2a:	005b      	lsls	r3, r3, #1
    1f2c:	4413      	add	r3, r2
    1f2e:	009b      	lsls	r3, r3, #2
    1f30:	440b      	add	r3, r1
    1f32:	3304      	adds	r3, #4
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	9a03      	ldr	r2, [sp, #12]
    1f38:	3224      	adds	r2, #36	; 0x24
    1f3a:	0112      	lsls	r2, r2, #4
    1f3c:	9901      	ldr	r1, [sp, #4]
    1f3e:	440a      	add	r2, r1
    1f40:	3204      	adds	r2, #4
    1f42:	4610      	mov	r0, r2
    1f44:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1f46:	9b03      	ldr	r3, [sp, #12]
    1f48:	3301      	adds	r3, #1
    1f4a:	9303      	str	r3, [sp, #12]
    1f4c:	9b01      	ldr	r3, [sp, #4]
    1f4e:	7b9b      	ldrb	r3, [r3, #14]
    1f50:	461a      	mov	r2, r3
    1f52:	9b03      	ldr	r3, [sp, #12]
    1f54:	4293      	cmp	r3, r2
    1f56:	d3d3      	bcc.n	1f00 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1f58:	4b27      	ldr	r3, [pc, #156]	; (1ff8 <Clock_Ip_InitClock+0x5b0>)
    1f5a:	2200      	movs	r2, #0
    1f5c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1f5e:	4b26      	ldr	r3, [pc, #152]	; (1ff8 <Clock_Ip_InitClock+0x5b0>)
    1f60:	2200      	movs	r2, #0
    1f62:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1f64:	4b24      	ldr	r3, [pc, #144]	; (1ff8 <Clock_Ip_InitClock+0x5b0>)
    1f66:	2201      	movs	r2, #1
    1f68:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1f6a:	4b23      	ldr	r3, [pc, #140]	; (1ff8 <Clock_Ip_InitClock+0x5b0>)
    1f6c:	2200      	movs	r2, #0
    1f6e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1f70:	f000 fa9c 	bl	24ac <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1f74:	2300      	movs	r3, #0
    1f76:	9303      	str	r3, [sp, #12]
    1f78:	e04c      	b.n	2014 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1f7a:	9a01      	ldr	r2, [sp, #4]
    1f7c:	9b03      	ldr	r3, [sp, #12]
    1f7e:	330d      	adds	r3, #13
    1f80:	00db      	lsls	r3, r3, #3
    1f82:	4413      	add	r3, r2
    1f84:	685b      	ldr	r3, [r3, #4]
    1f86:	4a1d      	ldr	r2, [pc, #116]	; (1ffc <Clock_Ip_InitClock+0x5b4>)
    1f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f8c:	2b03      	cmp	r3, #3
    1f8e:	d03b      	beq.n	2008 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1f90:	9b01      	ldr	r3, [sp, #4]
    1f92:	9a03      	ldr	r2, [sp, #12]
    1f94:	320d      	adds	r2, #13
    1f96:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f9a:	490c      	ldr	r1, [pc, #48]	; (1fcc <Clock_Ip_InitClock+0x584>)
    1f9c:	4613      	mov	r3, r2
    1f9e:	00db      	lsls	r3, r3, #3
    1fa0:	4413      	add	r3, r2
    1fa2:	440b      	add	r3, r1
    1fa4:	3301      	adds	r3, #1
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	461a      	mov	r2, r3
    1faa:	4b15      	ldr	r3, [pc, #84]	; (2000 <Clock_Ip_InitClock+0x5b8>)
    1fac:	5c9b      	ldrb	r3, [r3, r2]
    1fae:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1fb0:	4a14      	ldr	r2, [pc, #80]	; (2004 <Clock_Ip_InitClock+0x5bc>)
    1fb2:	9b02      	ldr	r3, [sp, #8]
    1fb4:	00db      	lsls	r3, r3, #3
    1fb6:	4413      	add	r3, r2
    1fb8:	685b      	ldr	r3, [r3, #4]
    1fba:	9a03      	ldr	r2, [sp, #12]
    1fbc:	320d      	adds	r2, #13
    1fbe:	00d2      	lsls	r2, r2, #3
    1fc0:	9901      	ldr	r1, [sp, #4]
    1fc2:	440a      	add	r2, r1
    1fc4:	4610      	mov	r0, r2
    1fc6:	4798      	blx	r3
    1fc8:	e021      	b.n	200e <Clock_Ip_InitClock+0x5c6>
    1fca:	bf00      	nop
    1fcc:	00007b90 	.word	0x00007b90
    1fd0:	00007b00 	.word	0x00007b00
    1fd4:	000080dc 	.word	0x000080dc
    1fd8:	00007b50 	.word	0x00007b50
    1fdc:	0000819c 	.word	0x0000819c
    1fe0:	00007b80 	.word	0x00007b80
    1fe4:	0000818c 	.word	0x0000818c
    1fe8:	00007b10 	.word	0x00007b10
    1fec:	000080e4 	.word	0x000080e4
    1ff0:	00007b40 	.word	0x00007b40
    1ff4:	0000810c 	.word	0x0000810c
    1ff8:	1fff8b60 	.word	0x1fff8b60
    1ffc:	00007fdc 	.word	0x00007fdc
    2000:	00007b60 	.word	0x00007b60
    2004:	000081c8 	.word	0x000081c8
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2008:	4b3a      	ldr	r3, [pc, #232]	; (20f4 <Clock_Ip_InitClock+0x6ac>)
    200a:	2201      	movs	r2, #1
    200c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    200e:	9b03      	ldr	r3, [sp, #12]
    2010:	3301      	adds	r3, #1
    2012:	9303      	str	r3, [sp, #12]
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	7adb      	ldrb	r3, [r3, #11]
    2018:	461a      	mov	r2, r3
    201a:	9b03      	ldr	r3, [sp, #12]
    201c:	4293      	cmp	r3, r2
    201e:	d3ac      	bcc.n	1f7a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2020:	4b34      	ldr	r3, [pc, #208]	; (20f4 <Clock_Ip_InitClock+0x6ac>)
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	f083 0301 	eor.w	r3, r3, #1
    2028:	b2db      	uxtb	r3, r3
    202a:	2b00      	cmp	r3, #0
    202c:	d05e      	beq.n	20ec <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    202e:	2300      	movs	r3, #0
    2030:	9303      	str	r3, [sp, #12]
    2032:	e01f      	b.n	2074 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2034:	9a01      	ldr	r2, [sp, #4]
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	334e      	adds	r3, #78	; 0x4e
    203a:	00db      	lsls	r3, r3, #3
    203c:	4413      	add	r3, r2
    203e:	685a      	ldr	r2, [r3, #4]
    2040:	492d      	ldr	r1, [pc, #180]	; (20f8 <Clock_Ip_InitClock+0x6b0>)
    2042:	4613      	mov	r3, r2
    2044:	00db      	lsls	r3, r3, #3
    2046:	4413      	add	r3, r2
    2048:	440b      	add	r3, r1
    204a:	3301      	adds	r3, #1
    204c:	781b      	ldrb	r3, [r3, #0]
    204e:	461a      	mov	r2, r3
    2050:	4b2a      	ldr	r3, [pc, #168]	; (20fc <Clock_Ip_InitClock+0x6b4>)
    2052:	5c9b      	ldrb	r3, [r3, r2]
    2054:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2056:	4a2a      	ldr	r2, [pc, #168]	; (2100 <Clock_Ip_InitClock+0x6b8>)
    2058:	9b02      	ldr	r3, [sp, #8]
    205a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    205e:	9a03      	ldr	r2, [sp, #12]
    2060:	324e      	adds	r2, #78	; 0x4e
    2062:	00d2      	lsls	r2, r2, #3
    2064:	9901      	ldr	r1, [sp, #4]
    2066:	440a      	add	r2, r1
    2068:	3204      	adds	r2, #4
    206a:	4610      	mov	r0, r2
    206c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    206e:	9b03      	ldr	r3, [sp, #12]
    2070:	3301      	adds	r3, #1
    2072:	9303      	str	r3, [sp, #12]
    2074:	9b01      	ldr	r3, [sp, #4]
    2076:	7c1b      	ldrb	r3, [r3, #16]
    2078:	461a      	mov	r2, r3
    207a:	9b03      	ldr	r3, [sp, #12]
    207c:	4293      	cmp	r3, r2
    207e:	d3d9      	bcc.n	2034 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2080:	2300      	movs	r3, #0
    2082:	9303      	str	r3, [sp, #12]
    2084:	e028      	b.n	20d8 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2086:	9901      	ldr	r1, [sp, #4]
    2088:	9a03      	ldr	r2, [sp, #12]
    208a:	4613      	mov	r3, r2
    208c:	009b      	lsls	r3, r3, #2
    208e:	4413      	add	r3, r2
    2090:	009b      	lsls	r3, r3, #2
    2092:	440b      	add	r3, r1
    2094:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2098:	681a      	ldr	r2, [r3, #0]
    209a:	4917      	ldr	r1, [pc, #92]	; (20f8 <Clock_Ip_InitClock+0x6b0>)
    209c:	4613      	mov	r3, r2
    209e:	00db      	lsls	r3, r3, #3
    20a0:	4413      	add	r3, r2
    20a2:	440b      	add	r3, r1
    20a4:	3301      	adds	r3, #1
    20a6:	781b      	ldrb	r3, [r3, #0]
    20a8:	461a      	mov	r2, r3
    20aa:	4b16      	ldr	r3, [pc, #88]	; (2104 <Clock_Ip_InitClock+0x6bc>)
    20ac:	5c9b      	ldrb	r3, [r3, r2]
    20ae:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    20b0:	4a15      	ldr	r2, [pc, #84]	; (2108 <Clock_Ip_InitClock+0x6c0>)
    20b2:	9b02      	ldr	r3, [sp, #8]
    20b4:	011b      	lsls	r3, r3, #4
    20b6:	4413      	add	r3, r2
    20b8:	330c      	adds	r3, #12
    20ba:	6819      	ldr	r1, [r3, #0]
    20bc:	9a03      	ldr	r2, [sp, #12]
    20be:	4613      	mov	r3, r2
    20c0:	009b      	lsls	r3, r3, #2
    20c2:	4413      	add	r3, r2
    20c4:	009b      	lsls	r3, r3, #2
    20c6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20ca:	9a01      	ldr	r2, [sp, #4]
    20cc:	4413      	add	r3, r2
    20ce:	4618      	mov	r0, r3
    20d0:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    20d2:	9b03      	ldr	r3, [sp, #12]
    20d4:	3301      	adds	r3, #1
    20d6:	9303      	str	r3, [sp, #12]
    20d8:	9b01      	ldr	r3, [sp, #4]
    20da:	7c9b      	ldrb	r3, [r3, #18]
    20dc:	461a      	mov	r2, r3
    20de:	9b03      	ldr	r3, [sp, #12]
    20e0:	4293      	cmp	r3, r2
    20e2:	d3d0      	bcc.n	2086 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    20e4:	2104      	movs	r1, #4
    20e6:	9801      	ldr	r0, [sp, #4]
    20e8:	f002 ff48 	bl	4f7c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    20ec:	bf00      	nop
    20ee:	b004      	add	sp, #16
    20f0:	bd10      	pop	{r4, pc}
    20f2:	bf00      	nop
    20f4:	1fff8b60 	.word	0x1fff8b60
    20f8:	00007b90 	.word	0x00007b90
    20fc:	00007b30 	.word	0x00007b30
    2100:	00008118 	.word	0x00008118
    2104:	00007b80 	.word	0x00007b80
    2108:	0000818c 	.word	0x0000818c

0000210c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    210c:	b500      	push	{lr}
    210e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2110:	2302      	movs	r3, #2
    2112:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2114:	2300      	movs	r3, #0
    2116:	9304      	str	r3, [sp, #16]
    2118:	e02c      	b.n	2174 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    211a:	4a36      	ldr	r2, [pc, #216]	; (21f4 <Clock_Ip_GetPllStatus+0xe8>)
    211c:	9b04      	ldr	r3, [sp, #16]
    211e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2122:	4935      	ldr	r1, [pc, #212]	; (21f8 <Clock_Ip_GetPllStatus+0xec>)
    2124:	4613      	mov	r3, r2
    2126:	00db      	lsls	r3, r3, #3
    2128:	4413      	add	r3, r2
    212a:	440b      	add	r3, r1
    212c:	3301      	adds	r3, #1
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	461a      	mov	r2, r3
    2132:	4b32      	ldr	r3, [pc, #200]	; (21fc <Clock_Ip_GetPllStatus+0xf0>)
    2134:	5c9b      	ldrb	r3, [r3, r2]
    2136:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2138:	4931      	ldr	r1, [pc, #196]	; (2200 <Clock_Ip_GetPllStatus+0xf4>)
    213a:	9a03      	ldr	r2, [sp, #12]
    213c:	4613      	mov	r3, r2
    213e:	009b      	lsls	r3, r3, #2
    2140:	4413      	add	r3, r2
    2142:	009b      	lsls	r3, r3, #2
    2144:	440b      	add	r3, r1
    2146:	3308      	adds	r3, #8
    2148:	681b      	ldr	r3, [r3, #0]
    214a:	492a      	ldr	r1, [pc, #168]	; (21f4 <Clock_Ip_GetPllStatus+0xe8>)
    214c:	9a04      	ldr	r2, [sp, #16]
    214e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2152:	4610      	mov	r0, r2
    2154:	4798      	blx	r3
    2156:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2158:	9b02      	ldr	r3, [sp, #8]
    215a:	2b01      	cmp	r3, #1
    215c:	d102      	bne.n	2164 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    215e:	2301      	movs	r3, #1
    2160:	9305      	str	r3, [sp, #20]
            break;
    2162:	e00d      	b.n	2180 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2164:	9b02      	ldr	r3, [sp, #8]
    2166:	2b02      	cmp	r3, #2
    2168:	d101      	bne.n	216e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    216a:	2300      	movs	r3, #0
    216c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    216e:	9b04      	ldr	r3, [sp, #16]
    2170:	3301      	adds	r3, #1
    2172:	9304      	str	r3, [sp, #16]
    2174:	4b23      	ldr	r3, [pc, #140]	; (2204 <Clock_Ip_GetPllStatus+0xf8>)
    2176:	789b      	ldrb	r3, [r3, #2]
    2178:	461a      	mov	r2, r3
    217a:	9b04      	ldr	r3, [sp, #16]
    217c:	4293      	cmp	r3, r2
    217e:	d3cc      	bcc.n	211a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2180:	9b05      	ldr	r3, [sp, #20]
    2182:	2b00      	cmp	r3, #0
    2184:	d130      	bne.n	21e8 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2186:	2300      	movs	r3, #0
    2188:	9304      	str	r3, [sp, #16]
    218a:	e027      	b.n	21dc <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    218c:	4a1e      	ldr	r2, [pc, #120]	; (2208 <Clock_Ip_GetPllStatus+0xfc>)
    218e:	9b04      	ldr	r3, [sp, #16]
    2190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2194:	4918      	ldr	r1, [pc, #96]	; (21f8 <Clock_Ip_GetPllStatus+0xec>)
    2196:	4613      	mov	r3, r2
    2198:	00db      	lsls	r3, r3, #3
    219a:	4413      	add	r3, r2
    219c:	440b      	add	r3, r1
    219e:	3301      	adds	r3, #1
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	461a      	mov	r2, r3
    21a4:	4b19      	ldr	r3, [pc, #100]	; (220c <Clock_Ip_GetPllStatus+0x100>)
    21a6:	5c9b      	ldrb	r3, [r3, r2]
    21a8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    21aa:	4919      	ldr	r1, [pc, #100]	; (2210 <Clock_Ip_GetPllStatus+0x104>)
    21ac:	9a03      	ldr	r2, [sp, #12]
    21ae:	4613      	mov	r3, r2
    21b0:	005b      	lsls	r3, r3, #1
    21b2:	4413      	add	r3, r2
    21b4:	009b      	lsls	r3, r3, #2
    21b6:	440b      	add	r3, r1
    21b8:	3308      	adds	r3, #8
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	4912      	ldr	r1, [pc, #72]	; (2208 <Clock_Ip_GetPllStatus+0xfc>)
    21be:	9a04      	ldr	r2, [sp, #16]
    21c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    21c4:	4610      	mov	r0, r2
    21c6:	4798      	blx	r3
    21c8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    21ca:	9b01      	ldr	r3, [sp, #4]
    21cc:	2b01      	cmp	r3, #1
    21ce:	d102      	bne.n	21d6 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    21d0:	2301      	movs	r3, #1
    21d2:	9305      	str	r3, [sp, #20]
                break;
    21d4:	e008      	b.n	21e8 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    21d6:	9b04      	ldr	r3, [sp, #16]
    21d8:	3301      	adds	r3, #1
    21da:	9304      	str	r3, [sp, #16]
    21dc:	4b09      	ldr	r3, [pc, #36]	; (2204 <Clock_Ip_GetPllStatus+0xf8>)
    21de:	78db      	ldrb	r3, [r3, #3]
    21e0:	461a      	mov	r2, r3
    21e2:	9b04      	ldr	r3, [sp, #16]
    21e4:	4293      	cmp	r3, r2
    21e6:	d3d1      	bcc.n	218c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    21e8:	9b05      	ldr	r3, [sp, #20]
}
    21ea:	4618      	mov	r0, r3
    21ec:	b007      	add	sp, #28
    21ee:	f85d fb04 	ldr.w	pc, [sp], #4
    21f2:	bf00      	nop
    21f4:	00008098 	.word	0x00008098
    21f8:	00007b90 	.word	0x00007b90
    21fc:	00007b50 	.word	0x00007b50
    2200:	0000819c 	.word	0x0000819c
    2204:	1fff8b60 	.word	0x1fff8b60
    2208:	0000809c 	.word	0x0000809c
    220c:	00007b40 	.word	0x00007b40
    2210:	0000810c 	.word	0x0000810c

00002214 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2214:	b500      	push	{lr}
    2216:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2218:	4b55      	ldr	r3, [pc, #340]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	2b00      	cmp	r3, #0
    221e:	f000 80a2 	beq.w	2366 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2222:	2300      	movs	r3, #0
    2224:	9301      	str	r3, [sp, #4]
    2226:	e02c      	b.n	2282 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2228:	4b51      	ldr	r3, [pc, #324]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    222a:	681a      	ldr	r2, [r3, #0]
    222c:	9b01      	ldr	r3, [sp, #4]
    222e:	330d      	adds	r3, #13
    2230:	00db      	lsls	r3, r3, #3
    2232:	4413      	add	r3, r2
    2234:	685b      	ldr	r3, [r3, #4]
    2236:	4a4f      	ldr	r2, [pc, #316]	; (2374 <Clock_Ip_DistributePll+0x160>)
    2238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    223c:	2b03      	cmp	r3, #3
    223e:	d11d      	bne.n	227c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2240:	4b4b      	ldr	r3, [pc, #300]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    2242:	681b      	ldr	r3, [r3, #0]
    2244:	9a01      	ldr	r2, [sp, #4]
    2246:	320d      	adds	r2, #13
    2248:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    224c:	494a      	ldr	r1, [pc, #296]	; (2378 <Clock_Ip_DistributePll+0x164>)
    224e:	4613      	mov	r3, r2
    2250:	00db      	lsls	r3, r3, #3
    2252:	4413      	add	r3, r2
    2254:	440b      	add	r3, r1
    2256:	3301      	adds	r3, #1
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	461a      	mov	r2, r3
    225c:	4b47      	ldr	r3, [pc, #284]	; (237c <Clock_Ip_DistributePll+0x168>)
    225e:	5c9b      	ldrb	r3, [r3, r2]
    2260:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2262:	4a47      	ldr	r2, [pc, #284]	; (2380 <Clock_Ip_DistributePll+0x16c>)
    2264:	9b00      	ldr	r3, [sp, #0]
    2266:	00db      	lsls	r3, r3, #3
    2268:	4413      	add	r3, r2
    226a:	685b      	ldr	r3, [r3, #4]
    226c:	4a40      	ldr	r2, [pc, #256]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    226e:	6811      	ldr	r1, [r2, #0]
    2270:	9a01      	ldr	r2, [sp, #4]
    2272:	320d      	adds	r2, #13
    2274:	00d2      	lsls	r2, r2, #3
    2276:	440a      	add	r2, r1
    2278:	4610      	mov	r0, r2
    227a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	3301      	adds	r3, #1
    2280:	9301      	str	r3, [sp, #4]
    2282:	4b3b      	ldr	r3, [pc, #236]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	7adb      	ldrb	r3, [r3, #11]
    2288:	461a      	mov	r2, r3
    228a:	9b01      	ldr	r3, [sp, #4]
    228c:	4293      	cmp	r3, r2
    228e:	d3cb      	bcc.n	2228 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2290:	4b3c      	ldr	r3, [pc, #240]	; (2384 <Clock_Ip_DistributePll+0x170>)
    2292:	781b      	ldrb	r3, [r3, #0]
    2294:	2b00      	cmp	r3, #0
    2296:	d066      	beq.n	2366 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2298:	2300      	movs	r3, #0
    229a:	9301      	str	r3, [sp, #4]
    229c:	e021      	b.n	22e2 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    229e:	4b34      	ldr	r3, [pc, #208]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    22a0:	681a      	ldr	r2, [r3, #0]
    22a2:	9b01      	ldr	r3, [sp, #4]
    22a4:	334e      	adds	r3, #78	; 0x4e
    22a6:	00db      	lsls	r3, r3, #3
    22a8:	4413      	add	r3, r2
    22aa:	685a      	ldr	r2, [r3, #4]
    22ac:	4932      	ldr	r1, [pc, #200]	; (2378 <Clock_Ip_DistributePll+0x164>)
    22ae:	4613      	mov	r3, r2
    22b0:	00db      	lsls	r3, r3, #3
    22b2:	4413      	add	r3, r2
    22b4:	440b      	add	r3, r1
    22b6:	3301      	adds	r3, #1
    22b8:	781b      	ldrb	r3, [r3, #0]
    22ba:	461a      	mov	r2, r3
    22bc:	4b32      	ldr	r3, [pc, #200]	; (2388 <Clock_Ip_DistributePll+0x174>)
    22be:	5c9b      	ldrb	r3, [r3, r2]
    22c0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    22c2:	4a32      	ldr	r2, [pc, #200]	; (238c <Clock_Ip_DistributePll+0x178>)
    22c4:	9b00      	ldr	r3, [sp, #0]
    22c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    22ca:	4a29      	ldr	r2, [pc, #164]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    22cc:	6811      	ldr	r1, [r2, #0]
    22ce:	9a01      	ldr	r2, [sp, #4]
    22d0:	324e      	adds	r2, #78	; 0x4e
    22d2:	00d2      	lsls	r2, r2, #3
    22d4:	440a      	add	r2, r1
    22d6:	3204      	adds	r2, #4
    22d8:	4610      	mov	r0, r2
    22da:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	3301      	adds	r3, #1
    22e0:	9301      	str	r3, [sp, #4]
    22e2:	4b23      	ldr	r3, [pc, #140]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    22e4:	681b      	ldr	r3, [r3, #0]
    22e6:	7c1b      	ldrb	r3, [r3, #16]
    22e8:	461a      	mov	r2, r3
    22ea:	9b01      	ldr	r3, [sp, #4]
    22ec:	4293      	cmp	r3, r2
    22ee:	d3d6      	bcc.n	229e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    22f0:	2300      	movs	r3, #0
    22f2:	9301      	str	r3, [sp, #4]
    22f4:	e02a      	b.n	234c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    22f6:	4b1e      	ldr	r3, [pc, #120]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    22f8:	6819      	ldr	r1, [r3, #0]
    22fa:	9a01      	ldr	r2, [sp, #4]
    22fc:	4613      	mov	r3, r2
    22fe:	009b      	lsls	r3, r3, #2
    2300:	4413      	add	r3, r2
    2302:	009b      	lsls	r3, r3, #2
    2304:	440b      	add	r3, r1
    2306:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    230a:	681a      	ldr	r2, [r3, #0]
    230c:	491a      	ldr	r1, [pc, #104]	; (2378 <Clock_Ip_DistributePll+0x164>)
    230e:	4613      	mov	r3, r2
    2310:	00db      	lsls	r3, r3, #3
    2312:	4413      	add	r3, r2
    2314:	440b      	add	r3, r1
    2316:	3301      	adds	r3, #1
    2318:	781b      	ldrb	r3, [r3, #0]
    231a:	461a      	mov	r2, r3
    231c:	4b1c      	ldr	r3, [pc, #112]	; (2390 <Clock_Ip_DistributePll+0x17c>)
    231e:	5c9b      	ldrb	r3, [r3, r2]
    2320:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2322:	4a1c      	ldr	r2, [pc, #112]	; (2394 <Clock_Ip_DistributePll+0x180>)
    2324:	9b00      	ldr	r3, [sp, #0]
    2326:	011b      	lsls	r3, r3, #4
    2328:	4413      	add	r3, r2
    232a:	330c      	adds	r3, #12
    232c:	6819      	ldr	r1, [r3, #0]
    232e:	4b10      	ldr	r3, [pc, #64]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    2330:	6818      	ldr	r0, [r3, #0]
    2332:	9a01      	ldr	r2, [sp, #4]
    2334:	4613      	mov	r3, r2
    2336:	009b      	lsls	r3, r3, #2
    2338:	4413      	add	r3, r2
    233a:	009b      	lsls	r3, r3, #2
    233c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2340:	4403      	add	r3, r0
    2342:	4618      	mov	r0, r3
    2344:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2346:	9b01      	ldr	r3, [sp, #4]
    2348:	3301      	adds	r3, #1
    234a:	9301      	str	r3, [sp, #4]
    234c:	4b08      	ldr	r3, [pc, #32]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	7c9b      	ldrb	r3, [r3, #18]
    2352:	461a      	mov	r2, r3
    2354:	9b01      	ldr	r3, [sp, #4]
    2356:	4293      	cmp	r3, r2
    2358:	d3cd      	bcc.n	22f6 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    235a:	4b05      	ldr	r3, [pc, #20]	; (2370 <Clock_Ip_DistributePll+0x15c>)
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	2104      	movs	r1, #4
    2360:	4618      	mov	r0, r3
    2362:	f002 fe0b 	bl	4f7c <Clock_Ip_Command>
        }
    }
}
    2366:	bf00      	nop
    2368:	b003      	add	sp, #12
    236a:	f85d fb04 	ldr.w	pc, [sp], #4
    236e:	bf00      	nop
    2370:	1fff8b58 	.word	0x1fff8b58
    2374:	00007fdc 	.word	0x00007fdc
    2378:	00007b90 	.word	0x00007b90
    237c:	00007b60 	.word	0x00007b60
    2380:	000081c8 	.word	0x000081c8
    2384:	1fff8b60 	.word	0x1fff8b60
    2388:	00007b30 	.word	0x00007b30
    238c:	00008118 	.word	0x00008118
    2390:	00007b80 	.word	0x00007b80
    2394:	0000818c 	.word	0x0000818c

00002398 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2398:	b500      	push	{lr}
    239a:	b085      	sub	sp, #20
    239c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    239e:	490c      	ldr	r1, [pc, #48]	; (23d0 <Clock_Ip_DisableClockMonitor+0x38>)
    23a0:	9a01      	ldr	r2, [sp, #4]
    23a2:	4613      	mov	r3, r2
    23a4:	00db      	lsls	r3, r3, #3
    23a6:	4413      	add	r3, r2
    23a8:	440b      	add	r3, r1
    23aa:	3301      	adds	r3, #1
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	461a      	mov	r2, r3
    23b0:	4b08      	ldr	r3, [pc, #32]	; (23d4 <Clock_Ip_DisableClockMonitor+0x3c>)
    23b2:	5c9b      	ldrb	r3, [r3, r2]
    23b4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    23b6:	4a08      	ldr	r2, [pc, #32]	; (23d8 <Clock_Ip_DisableClockMonitor+0x40>)
    23b8:	9b03      	ldr	r3, [sp, #12]
    23ba:	011b      	lsls	r3, r3, #4
    23bc:	4413      	add	r3, r2
    23be:	3308      	adds	r3, #8
    23c0:	681b      	ldr	r3, [r3, #0]
    23c2:	9801      	ldr	r0, [sp, #4]
    23c4:	4798      	blx	r3
}
    23c6:	bf00      	nop
    23c8:	b005      	add	sp, #20
    23ca:	f85d fb04 	ldr.w	pc, [sp], #4
    23ce:	bf00      	nop
    23d0:	00007b90 	.word	0x00007b90
    23d4:	00007b80 	.word	0x00007b80
    23d8:	0000818c 	.word	0x0000818c

000023dc <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    23dc:	b082      	sub	sp, #8
    23de:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    23e0:	4a02      	ldr	r2, [pc, #8]	; (23ec <Clock_Ip_InstallNotificationsCallback+0x10>)
    23e2:	9b01      	ldr	r3, [sp, #4]
    23e4:	6013      	str	r3, [r2, #0]
}
    23e6:	bf00      	nop
    23e8:	b002      	add	sp, #8
    23ea:	4770      	bx	lr
    23ec:	1fff8b14 	.word	0x1fff8b14

000023f0 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    23f0:	b500      	push	{lr}
    23f2:	b085      	sub	sp, #20
    23f4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    23f6:	490c      	ldr	r1, [pc, #48]	; (2428 <Clock_Ip_DisableModuleClock+0x38>)
    23f8:	9a01      	ldr	r2, [sp, #4]
    23fa:	4613      	mov	r3, r2
    23fc:	00db      	lsls	r3, r3, #3
    23fe:	4413      	add	r3, r2
    2400:	440b      	add	r3, r1
    2402:	3301      	adds	r3, #1
    2404:	781b      	ldrb	r3, [r3, #0]
    2406:	461a      	mov	r2, r3
    2408:	4b08      	ldr	r3, [pc, #32]	; (242c <Clock_Ip_DisableModuleClock+0x3c>)
    240a:	5c9b      	ldrb	r3, [r3, r2]
    240c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    240e:	4a08      	ldr	r2, [pc, #32]	; (2430 <Clock_Ip_DisableModuleClock+0x40>)
    2410:	9b03      	ldr	r3, [sp, #12]
    2412:	00db      	lsls	r3, r3, #3
    2414:	4413      	add	r3, r2
    2416:	685b      	ldr	r3, [r3, #4]
    2418:	2101      	movs	r1, #1
    241a:	9801      	ldr	r0, [sp, #4]
    241c:	4798      	blx	r3
}
    241e:	bf00      	nop
    2420:	b005      	add	sp, #20
    2422:	f85d fb04 	ldr.w	pc, [sp], #4
    2426:	bf00      	nop
    2428:	00007b90 	.word	0x00007b90
    242c:	00007b30 	.word	0x00007b30
    2430:	00008118 	.word	0x00008118

00002434 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2434:	b500      	push	{lr}
    2436:	b085      	sub	sp, #20
    2438:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    243a:	490c      	ldr	r1, [pc, #48]	; (246c <Clock_Ip_EnableModuleClock+0x38>)
    243c:	9a01      	ldr	r2, [sp, #4]
    243e:	4613      	mov	r3, r2
    2440:	00db      	lsls	r3, r3, #3
    2442:	4413      	add	r3, r2
    2444:	440b      	add	r3, r1
    2446:	3301      	adds	r3, #1
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	461a      	mov	r2, r3
    244c:	4b08      	ldr	r3, [pc, #32]	; (2470 <Clock_Ip_EnableModuleClock+0x3c>)
    244e:	5c9b      	ldrb	r3, [r3, r2]
    2450:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2452:	4a08      	ldr	r2, [pc, #32]	; (2474 <Clock_Ip_EnableModuleClock+0x40>)
    2454:	9b03      	ldr	r3, [sp, #12]
    2456:	00db      	lsls	r3, r3, #3
    2458:	4413      	add	r3, r2
    245a:	685b      	ldr	r3, [r3, #4]
    245c:	2100      	movs	r1, #0
    245e:	9801      	ldr	r0, [sp, #4]
    2460:	4798      	blx	r3
}
    2462:	bf00      	nop
    2464:	b005      	add	sp, #20
    2466:	f85d fb04 	ldr.w	pc, [sp], #4
    246a:	bf00      	nop
    246c:	00007b90 	.word	0x00007b90
    2470:	00007b30 	.word	0x00007b30
    2474:	00008118 	.word	0x00008118

00002478 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2478:	b500      	push	{lr}
    247a:	b083      	sub	sp, #12
    247c:	9001      	str	r0, [sp, #4]
    247e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2480:	4b08      	ldr	r3, [pc, #32]	; (24a4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2482:	2200      	movs	r2, #0
    2484:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2486:	4b08      	ldr	r3, [pc, #32]	; (24a8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2488:	681b      	ldr	r3, [r3, #0]
    248a:	2102      	movs	r1, #2
    248c:	4618      	mov	r0, r3
    248e:	f002 fd75 	bl	4f7c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2492:	9900      	ldr	r1, [sp, #0]
    2494:	9801      	ldr	r0, [sp, #4]
    2496:	f002 fc51 	bl	4d3c <Clock_Ip_ClockPowerModeChangeNotification>
}
    249a:	bf00      	nop
    249c:	b003      	add	sp, #12
    249e:	f85d fb04 	ldr.w	pc, [sp], #4
    24a2:	bf00      	nop
    24a4:	1fff8b10 	.word	0x1fff8b10
    24a8:	1fff8b58 	.word	0x1fff8b58

000024ac <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    24ac:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    24ae:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    24b2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    24b4:	4b06      	ldr	r3, [pc, #24]	; (24d0 <Clock_Ip_SetWaitStates+0x24>)
    24b6:	785b      	ldrb	r3, [r3, #1]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d005      	beq.n	24c8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    24bc:	9b01      	ldr	r3, [sp, #4]
    24be:	3b01      	subs	r3, #1
    24c0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    24c2:	9b01      	ldr	r3, [sp, #4]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d1f9      	bne.n	24bc <Clock_Ip_SetWaitStates+0x10>
    }
}
    24c8:	bf00      	nop
    24ca:	b002      	add	sp, #8
    24cc:	4770      	bx	lr
    24ce:	bf00      	nop
    24d0:	1fff8b60 	.word	0x1fff8b60

000024d4 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    24d4:	b500      	push	{lr}
    24d6:	b083      	sub	sp, #12
    24d8:	9001      	str	r0, [sp, #4]
    24da:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    24dc:	4b04      	ldr	r3, [pc, #16]	; (24f0 <Clock_Ip_ReportClockErrors+0x1c>)
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	9900      	ldr	r1, [sp, #0]
    24e2:	9801      	ldr	r0, [sp, #4]
    24e4:	4798      	blx	r3
}
    24e6:	bf00      	nop
    24e8:	b003      	add	sp, #12
    24ea:	f85d fb04 	ldr.w	pc, [sp], #4
    24ee:	bf00      	nop
    24f0:	1fff8b14 	.word	0x1fff8b14

000024f4 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    24f4:	b500      	push	{lr}
    24f6:	b085      	sub	sp, #20
    24f8:	9003      	str	r0, [sp, #12]
    24fa:	9102      	str	r1, [sp, #8]
    24fc:	9201      	str	r2, [sp, #4]
    24fe:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2500:	2000      	movs	r0, #0
    2502:	f7fe ffd0 	bl	14a6 <OsIf_GetCounter>
    2506:	4602      	mov	r2, r0
    2508:	9b03      	ldr	r3, [sp, #12]
    250a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    250c:	9b02      	ldr	r3, [sp, #8]
    250e:	2200      	movs	r2, #0
    2510:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2512:	2100      	movs	r1, #0
    2514:	9800      	ldr	r0, [sp, #0]
    2516:	f7ff f812 	bl	153e <OsIf_MicrosToTicks>
    251a:	4602      	mov	r2, r0
    251c:	9b01      	ldr	r3, [sp, #4]
    251e:	601a      	str	r2, [r3, #0]
}
    2520:	bf00      	nop
    2522:	b005      	add	sp, #20
    2524:	f85d fb04 	ldr.w	pc, [sp], #4

00002528 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2528:	b500      	push	{lr}
    252a:	b087      	sub	sp, #28
    252c:	9003      	str	r0, [sp, #12]
    252e:	9102      	str	r1, [sp, #8]
    2530:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2532:	2300      	movs	r3, #0
    2534:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2538:	2100      	movs	r1, #0
    253a:	9803      	ldr	r0, [sp, #12]
    253c:	f7fe ffcc 	bl	14d8 <OsIf_GetElapsed>
    2540:	4602      	mov	r2, r0
    2542:	9b02      	ldr	r3, [sp, #8]
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	441a      	add	r2, r3
    2548:	9b02      	ldr	r3, [sp, #8]
    254a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    254c:	9b02      	ldr	r3, [sp, #8]
    254e:	681b      	ldr	r3, [r3, #0]
    2550:	9a01      	ldr	r2, [sp, #4]
    2552:	429a      	cmp	r2, r3
    2554:	d802      	bhi.n	255c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2556:	2301      	movs	r3, #1
    2558:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    255c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2560:	4618      	mov	r0, r3
    2562:	b007      	add	sp, #28
    2564:	f85d fb04 	ldr.w	pc, [sp], #4

00002568 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2568:	b082      	sub	sp, #8
    256a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    256c:	bf00      	nop
    256e:	b002      	add	sp, #8
    2570:	4770      	bx	lr

00002572 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2572:	b500      	push	{lr}
    2574:	b083      	sub	sp, #12
    2576:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	2b00      	cmp	r3, #0
    257c:	d002      	beq.n	2584 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    257e:	9801      	ldr	r0, [sp, #4]
    2580:	f000 f8ad 	bl	26de <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2584:	bf00      	nop
    2586:	b003      	add	sp, #12
    2588:	f85d fb04 	ldr.w	pc, [sp], #4

0000258c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    258c:	b500      	push	{lr}
    258e:	b083      	sub	sp, #12
    2590:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2592:	9b01      	ldr	r3, [sp, #4]
    2594:	2b00      	cmp	r3, #0
    2596:	d002      	beq.n	259e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2598:	9801      	ldr	r0, [sp, #4]
    259a:	f000 f8cd 	bl	2738 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    259e:	bf00      	nop
    25a0:	b003      	add	sp, #12
    25a2:	f85d fb04 	ldr.w	pc, [sp], #4

000025a6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    25a6:	b500      	push	{lr}
    25a8:	b083      	sub	sp, #12
    25aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    25ac:	9b01      	ldr	r3, [sp, #4]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d002      	beq.n	25b8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    25b2:	9801      	ldr	r0, [sp, #4]
    25b4:	f000 f8ee 	bl	2794 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    25b8:	bf00      	nop
    25ba:	b003      	add	sp, #12
    25bc:	f85d fb04 	ldr.w	pc, [sp], #4

000025c0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    25c0:	b500      	push	{lr}
    25c2:	b083      	sub	sp, #12
    25c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    25c6:	9b01      	ldr	r3, [sp, #4]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d002      	beq.n	25d2 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    25cc:	9801      	ldr	r0, [sp, #4]
    25ce:	f000 f8f9 	bl	27c4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    25d2:	bf00      	nop
    25d4:	b003      	add	sp, #12
    25d6:	f85d fb04 	ldr.w	pc, [sp], #4

000025da <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    25da:	b500      	push	{lr}
    25dc:	b083      	sub	sp, #12
    25de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    25e0:	9b01      	ldr	r3, [sp, #4]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d002      	beq.n	25ec <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    25e6:	9801      	ldr	r0, [sp, #4]
    25e8:	f000 f904 	bl	27f4 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    25ec:	bf00      	nop
    25ee:	b003      	add	sp, #12
    25f0:	f85d fb04 	ldr.w	pc, [sp], #4

000025f4 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    25f4:	b500      	push	{lr}
    25f6:	b083      	sub	sp, #12
    25f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    25fa:	9b01      	ldr	r3, [sp, #4]
    25fc:	2b00      	cmp	r3, #0
    25fe:	d002      	beq.n	2606 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2600:	9801      	ldr	r0, [sp, #4]
    2602:	f000 f90f 	bl	2824 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2606:	bf00      	nop
    2608:	b003      	add	sp, #12
    260a:	f85d fb04 	ldr.w	pc, [sp], #4

0000260e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    260e:	b500      	push	{lr}
    2610:	b083      	sub	sp, #12
    2612:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	2b00      	cmp	r3, #0
    2618:	d002      	beq.n	2620 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    261a:	9801      	ldr	r0, [sp, #4]
    261c:	f000 f91a 	bl	2854 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2620:	bf00      	nop
    2622:	b003      	add	sp, #12
    2624:	f85d fb04 	ldr.w	pc, [sp], #4

00002628 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2628:	b500      	push	{lr}
    262a:	b083      	sub	sp, #12
    262c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    262e:	9b01      	ldr	r3, [sp, #4]
    2630:	2b00      	cmp	r3, #0
    2632:	d002      	beq.n	263a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2634:	9801      	ldr	r0, [sp, #4]
    2636:	f000 f925 	bl	2884 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    263a:	bf00      	nop
    263c:	b003      	add	sp, #12
    263e:	f85d fb04 	ldr.w	pc, [sp], #4

00002642 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2642:	b500      	push	{lr}
    2644:	b083      	sub	sp, #12
    2646:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2648:	9b01      	ldr	r3, [sp, #4]
    264a:	2b00      	cmp	r3, #0
    264c:	d002      	beq.n	2654 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    264e:	9801      	ldr	r0, [sp, #4]
    2650:	f000 f930 	bl	28b4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2654:	bf00      	nop
    2656:	b003      	add	sp, #12
    2658:	f85d fb04 	ldr.w	pc, [sp], #4

0000265c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    265c:	b500      	push	{lr}
    265e:	b083      	sub	sp, #12
    2660:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	2b00      	cmp	r3, #0
    2666:	d002      	beq.n	266e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2668:	9801      	ldr	r0, [sp, #4]
    266a:	f000 f93b 	bl	28e4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    266e:	bf00      	nop
    2670:	b003      	add	sp, #12
    2672:	f85d fb04 	ldr.w	pc, [sp], #4

00002676 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2676:	b500      	push	{lr}
    2678:	b083      	sub	sp, #12
    267a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    267c:	9b01      	ldr	r3, [sp, #4]
    267e:	2b00      	cmp	r3, #0
    2680:	d002      	beq.n	2688 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2682:	9801      	ldr	r0, [sp, #4]
    2684:	f000 f946 	bl	2914 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2688:	bf00      	nop
    268a:	b003      	add	sp, #12
    268c:	f85d fb04 	ldr.w	pc, [sp], #4

00002690 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2690:	b500      	push	{lr}
    2692:	b083      	sub	sp, #12
    2694:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	2b00      	cmp	r3, #0
    269a:	d002      	beq.n	26a2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    269c:	9801      	ldr	r0, [sp, #4]
    269e:	f000 f951 	bl	2944 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26a2:	bf00      	nop
    26a4:	b003      	add	sp, #12
    26a6:	f85d fb04 	ldr.w	pc, [sp], #4

000026aa <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    26aa:	b500      	push	{lr}
    26ac:	b083      	sub	sp, #12
    26ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26b0:	9b01      	ldr	r3, [sp, #4]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d002      	beq.n	26bc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    26b6:	9801      	ldr	r0, [sp, #4]
    26b8:	f000 f95e 	bl	2978 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26bc:	bf00      	nop
    26be:	b003      	add	sp, #12
    26c0:	f85d fb04 	ldr.w	pc, [sp], #4

000026c4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    26c4:	b500      	push	{lr}
    26c6:	b083      	sub	sp, #12
    26c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d002      	beq.n	26d6 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    26d0:	9801      	ldr	r0, [sp, #4]
    26d2:	f000 f98b 	bl	29ec <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26d6:	bf00      	nop
    26d8:	b003      	add	sp, #12
    26da:	f85d fb04 	ldr.w	pc, [sp], #4

000026de <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    26de:	b086      	sub	sp, #24
    26e0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    26e2:	9b01      	ldr	r3, [sp, #4]
    26e4:	681a      	ldr	r2, [r3, #0]
    26e6:	4911      	ldr	r1, [pc, #68]	; (272c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    26e8:	4613      	mov	r3, r2
    26ea:	00db      	lsls	r3, r3, #3
    26ec:	4413      	add	r3, r2
    26ee:	440b      	add	r3, r1
    26f0:	781b      	ldrb	r3, [r3, #0]
    26f2:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    26f4:	9b01      	ldr	r3, [sp, #4]
    26f6:	685b      	ldr	r3, [r3, #4]
    26f8:	4a0d      	ldr	r2, [pc, #52]	; (2730 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    26fa:	5cd3      	ldrb	r3, [r2, r3]
    26fc:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    26fe:	4a0d      	ldr	r2, [pc, #52]	; (2734 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2700:	9b05      	ldr	r3, [sp, #20]
    2702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2706:	681b      	ldr	r3, [r3, #0]
    2708:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    270a:	9b03      	ldr	r3, [sp, #12]
    270c:	f023 0307 	bic.w	r3, r3, #7
    2710:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2712:	9a03      	ldr	r2, [sp, #12]
    2714:	9b04      	ldr	r3, [sp, #16]
    2716:	4313      	orrs	r3, r2
    2718:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    271a:	4a06      	ldr	r2, [pc, #24]	; (2734 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    271c:	9b05      	ldr	r3, [sp, #20]
    271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2722:	9a03      	ldr	r2, [sp, #12]
    2724:	601a      	str	r2, [r3, #0]
}
    2726:	bf00      	nop
    2728:	b006      	add	sp, #24
    272a:	4770      	bx	lr
    272c:	00007b90 	.word	0x00007b90
    2730:	00007f88 	.word	0x00007f88
    2734:	00007fcc 	.word	0x00007fcc

00002738 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2738:	b086      	sub	sp, #24
    273a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	681a      	ldr	r2, [r3, #0]
    2740:	4911      	ldr	r1, [pc, #68]	; (2788 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2742:	4613      	mov	r3, r2
    2744:	00db      	lsls	r3, r3, #3
    2746:	4413      	add	r3, r2
    2748:	440b      	add	r3, r1
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	685b      	ldr	r3, [r3, #4]
    2752:	4a0e      	ldr	r2, [pc, #56]	; (278c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2754:	5cd3      	ldrb	r3, [r2, r3]
    2756:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2758:	4a0d      	ldr	r2, [pc, #52]	; (2790 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    275a:	9b05      	ldr	r3, [sp, #20]
    275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2764:	9b03      	ldr	r3, [sp, #12]
    2766:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    276a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    276c:	9b04      	ldr	r3, [sp, #16]
    276e:	021b      	lsls	r3, r3, #8
    2770:	9a03      	ldr	r2, [sp, #12]
    2772:	4313      	orrs	r3, r2
    2774:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2776:	4a06      	ldr	r2, [pc, #24]	; (2790 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2778:	9b05      	ldr	r3, [sp, #20]
    277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    277e:	9a03      	ldr	r2, [sp, #12]
    2780:	601a      	str	r2, [r3, #0]
}
    2782:	bf00      	nop
    2784:	b006      	add	sp, #24
    2786:	4770      	bx	lr
    2788:	00007b90 	.word	0x00007b90
    278c:	00007f88 	.word	0x00007f88
    2790:	00007fcc 	.word	0x00007fcc

00002794 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2794:	b084      	sub	sp, #16
    2796:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2798:	4b09      	ldr	r3, [pc, #36]	; (27c0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    279a:	695b      	ldr	r3, [r3, #20]
    279c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    279e:	9b03      	ldr	r3, [sp, #12]
    27a0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    27a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    27a6:	9b01      	ldr	r3, [sp, #4]
    27a8:	685b      	ldr	r3, [r3, #4]
    27aa:	3b01      	subs	r3, #1
    27ac:	041b      	lsls	r3, r3, #16
    27ae:	9a03      	ldr	r2, [sp, #12]
    27b0:	4313      	orrs	r3, r2
    27b2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    27b4:	4a02      	ldr	r2, [pc, #8]	; (27c0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    27b6:	9b03      	ldr	r3, [sp, #12]
    27b8:	6153      	str	r3, [r2, #20]
}
    27ba:	bf00      	nop
    27bc:	b004      	add	sp, #16
    27be:	4770      	bx	lr
    27c0:	40064000 	.word	0x40064000

000027c4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    27c4:	b084      	sub	sp, #16
    27c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    27c8:	4b09      	ldr	r3, [pc, #36]	; (27f0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    27ca:	695b      	ldr	r3, [r3, #20]
    27cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    27ce:	9b03      	ldr	r3, [sp, #12]
    27d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    27d4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    27d6:	9b01      	ldr	r3, [sp, #4]
    27d8:	685b      	ldr	r3, [r3, #4]
    27da:	3b01      	subs	r3, #1
    27dc:	011b      	lsls	r3, r3, #4
    27de:	9a03      	ldr	r2, [sp, #12]
    27e0:	4313      	orrs	r3, r2
    27e2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    27e4:	4a02      	ldr	r2, [pc, #8]	; (27f0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    27e6:	9b03      	ldr	r3, [sp, #12]
    27e8:	6153      	str	r3, [r2, #20]
}
    27ea:	bf00      	nop
    27ec:	b004      	add	sp, #16
    27ee:	4770      	bx	lr
    27f0:	40064000 	.word	0x40064000

000027f4 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    27f4:	b084      	sub	sp, #16
    27f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    27f8:	4b09      	ldr	r3, [pc, #36]	; (2820 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    27fa:	695b      	ldr	r3, [r3, #20]
    27fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    27fe:	9b03      	ldr	r3, [sp, #12]
    2800:	f023 030f 	bic.w	r3, r3, #15
    2804:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2806:	9b01      	ldr	r3, [sp, #4]
    2808:	685b      	ldr	r3, [r3, #4]
    280a:	3b01      	subs	r3, #1
    280c:	9a03      	ldr	r2, [sp, #12]
    280e:	4313      	orrs	r3, r2
    2810:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2812:	4a03      	ldr	r2, [pc, #12]	; (2820 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2814:	9b03      	ldr	r3, [sp, #12]
    2816:	6153      	str	r3, [r2, #20]
}
    2818:	bf00      	nop
    281a:	b004      	add	sp, #16
    281c:	4770      	bx	lr
    281e:	bf00      	nop
    2820:	40064000 	.word	0x40064000

00002824 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2824:	b084      	sub	sp, #16
    2826:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2828:	4b09      	ldr	r3, [pc, #36]	; (2850 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    282a:	699b      	ldr	r3, [r3, #24]
    282c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    282e:	9b03      	ldr	r3, [sp, #12]
    2830:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2834:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2836:	9b01      	ldr	r3, [sp, #4]
    2838:	685b      	ldr	r3, [r3, #4]
    283a:	3b01      	subs	r3, #1
    283c:	041b      	lsls	r3, r3, #16
    283e:	9a03      	ldr	r2, [sp, #12]
    2840:	4313      	orrs	r3, r2
    2842:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2844:	4a02      	ldr	r2, [pc, #8]	; (2850 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2846:	9b03      	ldr	r3, [sp, #12]
    2848:	6193      	str	r3, [r2, #24]
}
    284a:	bf00      	nop
    284c:	b004      	add	sp, #16
    284e:	4770      	bx	lr
    2850:	40064000 	.word	0x40064000

00002854 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2854:	b084      	sub	sp, #16
    2856:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2858:	4b09      	ldr	r3, [pc, #36]	; (2880 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    285a:	699b      	ldr	r3, [r3, #24]
    285c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    285e:	9b03      	ldr	r3, [sp, #12]
    2860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2864:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2866:	9b01      	ldr	r3, [sp, #4]
    2868:	685b      	ldr	r3, [r3, #4]
    286a:	3b01      	subs	r3, #1
    286c:	011b      	lsls	r3, r3, #4
    286e:	9a03      	ldr	r2, [sp, #12]
    2870:	4313      	orrs	r3, r2
    2872:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2874:	4a02      	ldr	r2, [pc, #8]	; (2880 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2876:	9b03      	ldr	r3, [sp, #12]
    2878:	6193      	str	r3, [r2, #24]
}
    287a:	bf00      	nop
    287c:	b004      	add	sp, #16
    287e:	4770      	bx	lr
    2880:	40064000 	.word	0x40064000

00002884 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2884:	b084      	sub	sp, #16
    2886:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2888:	4b09      	ldr	r3, [pc, #36]	; (28b0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    288a:	699b      	ldr	r3, [r3, #24]
    288c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    288e:	9b03      	ldr	r3, [sp, #12]
    2890:	f023 030f 	bic.w	r3, r3, #15
    2894:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2896:	9b01      	ldr	r3, [sp, #4]
    2898:	685b      	ldr	r3, [r3, #4]
    289a:	3b01      	subs	r3, #1
    289c:	9a03      	ldr	r2, [sp, #12]
    289e:	4313      	orrs	r3, r2
    28a0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    28a2:	4a03      	ldr	r2, [pc, #12]	; (28b0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    28a4:	9b03      	ldr	r3, [sp, #12]
    28a6:	6193      	str	r3, [r2, #24]
}
    28a8:	bf00      	nop
    28aa:	b004      	add	sp, #16
    28ac:	4770      	bx	lr
    28ae:	bf00      	nop
    28b0:	40064000 	.word	0x40064000

000028b4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    28b4:	b084      	sub	sp, #16
    28b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    28b8:	4b09      	ldr	r3, [pc, #36]	; (28e0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    28ba:	69db      	ldr	r3, [r3, #28]
    28bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    28be:	9b03      	ldr	r3, [sp, #12]
    28c0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    28c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    28c6:	9b01      	ldr	r3, [sp, #4]
    28c8:	685b      	ldr	r3, [r3, #4]
    28ca:	3b01      	subs	r3, #1
    28cc:	041b      	lsls	r3, r3, #16
    28ce:	9a03      	ldr	r2, [sp, #12]
    28d0:	4313      	orrs	r3, r2
    28d2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    28d4:	4a02      	ldr	r2, [pc, #8]	; (28e0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    28d6:	9b03      	ldr	r3, [sp, #12]
    28d8:	61d3      	str	r3, [r2, #28]
}
    28da:	bf00      	nop
    28dc:	b004      	add	sp, #16
    28de:	4770      	bx	lr
    28e0:	40064000 	.word	0x40064000

000028e4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    28e4:	b084      	sub	sp, #16
    28e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    28e8:	4b09      	ldr	r3, [pc, #36]	; (2910 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    28ea:	69db      	ldr	r3, [r3, #28]
    28ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    28ee:	9b03      	ldr	r3, [sp, #12]
    28f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    28f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    28f6:	9b01      	ldr	r3, [sp, #4]
    28f8:	685b      	ldr	r3, [r3, #4]
    28fa:	3b01      	subs	r3, #1
    28fc:	011b      	lsls	r3, r3, #4
    28fe:	9a03      	ldr	r2, [sp, #12]
    2900:	4313      	orrs	r3, r2
    2902:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2904:	4a02      	ldr	r2, [pc, #8]	; (2910 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2906:	9b03      	ldr	r3, [sp, #12]
    2908:	61d3      	str	r3, [r2, #28]
}
    290a:	bf00      	nop
    290c:	b004      	add	sp, #16
    290e:	4770      	bx	lr
    2910:	40064000 	.word	0x40064000

00002914 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2914:	b084      	sub	sp, #16
    2916:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2918:	4b09      	ldr	r3, [pc, #36]	; (2940 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    291a:	69db      	ldr	r3, [r3, #28]
    291c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    291e:	9b03      	ldr	r3, [sp, #12]
    2920:	f023 030f 	bic.w	r3, r3, #15
    2924:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2926:	9b01      	ldr	r3, [sp, #4]
    2928:	685b      	ldr	r3, [r3, #4]
    292a:	3b01      	subs	r3, #1
    292c:	9a03      	ldr	r2, [sp, #12]
    292e:	4313      	orrs	r3, r2
    2930:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2932:	4a03      	ldr	r2, [pc, #12]	; (2940 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2934:	9b03      	ldr	r3, [sp, #12]
    2936:	61d3      	str	r3, [r2, #28]
}
    2938:	bf00      	nop
    293a:	b004      	add	sp, #16
    293c:	4770      	bx	lr
    293e:	bf00      	nop
    2940:	40064000 	.word	0x40064000

00002944 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2944:	b084      	sub	sp, #16
    2946:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2948:	4b0a      	ldr	r3, [pc, #40]	; (2974 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    294a:	685b      	ldr	r3, [r3, #4]
    294c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    294e:	9b03      	ldr	r3, [sp, #12]
    2950:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2954:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2956:	9b01      	ldr	r3, [sp, #4]
    2958:	685b      	ldr	r3, [r3, #4]
    295a:	3b01      	subs	r3, #1
    295c:	021b      	lsls	r3, r3, #8
    295e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2962:	9a03      	ldr	r2, [sp, #12]
    2964:	4313      	orrs	r3, r2
    2966:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2968:	4a02      	ldr	r2, [pc, #8]	; (2974 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    296a:	9b03      	ldr	r3, [sp, #12]
    296c:	6053      	str	r3, [r2, #4]
}
    296e:	bf00      	nop
    2970:	b004      	add	sp, #16
    2972:	4770      	bx	lr
    2974:	40048000 	.word	0x40048000

00002978 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2978:	b084      	sub	sp, #16
    297a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    297c:	4919      	ldr	r1, [pc, #100]	; (29e4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    297e:	9b01      	ldr	r3, [sp, #4]
    2980:	681a      	ldr	r2, [r3, #0]
    2982:	4819      	ldr	r0, [pc, #100]	; (29e8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2984:	4613      	mov	r3, r2
    2986:	00db      	lsls	r3, r3, #3
    2988:	4413      	add	r3, r2
    298a:	4403      	add	r3, r0
    298c:	3305      	adds	r3, #5
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2994:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2996:	9b03      	ldr	r3, [sp, #12]
    2998:	f023 030f 	bic.w	r3, r3, #15
    299c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    299e:	9b01      	ldr	r3, [sp, #4]
    29a0:	685b      	ldr	r3, [r3, #4]
    29a2:	3b01      	subs	r3, #1
    29a4:	f003 0307 	and.w	r3, r3, #7
    29a8:	9a03      	ldr	r2, [sp, #12]
    29aa:	4313      	orrs	r3, r2
    29ac:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    29ae:	9b01      	ldr	r3, [sp, #4]
    29b0:	7a1b      	ldrb	r3, [r3, #8]
    29b2:	3b01      	subs	r3, #1
    29b4:	00db      	lsls	r3, r3, #3
    29b6:	f003 0308 	and.w	r3, r3, #8
    29ba:	9a03      	ldr	r2, [sp, #12]
    29bc:	4313      	orrs	r3, r2
    29be:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    29c0:	4908      	ldr	r1, [pc, #32]	; (29e4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    29c2:	9b01      	ldr	r3, [sp, #4]
    29c4:	681a      	ldr	r2, [r3, #0]
    29c6:	4808      	ldr	r0, [pc, #32]	; (29e8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    29c8:	4613      	mov	r3, r2
    29ca:	00db      	lsls	r3, r3, #3
    29cc:	4413      	add	r3, r2
    29ce:	4403      	add	r3, r0
    29d0:	3305      	adds	r3, #5
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	461a      	mov	r2, r3
    29d6:	9b03      	ldr	r3, [sp, #12]
    29d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    29dc:	bf00      	nop
    29de:	b004      	add	sp, #16
    29e0:	4770      	bx	lr
    29e2:	bf00      	nop
    29e4:	40065000 	.word	0x40065000
    29e8:	00007b90 	.word	0x00007b90

000029ec <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    29ec:	b084      	sub	sp, #16
    29ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    29f0:	4b10      	ldr	r3, [pc, #64]	; (2a34 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    29f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    29f4:	4a0f      	ldr	r2, [pc, #60]	; (2a34 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    29f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    29fa:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    29fc:	4b0d      	ldr	r3, [pc, #52]	; (2a34 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    29fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2a00:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2a02:	9b03      	ldr	r3, [sp, #12]
    2a04:	f023 030f 	bic.w	r3, r3, #15
    2a08:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2a0a:	9b01      	ldr	r3, [sp, #4]
    2a0c:	685b      	ldr	r3, [r3, #4]
    2a0e:	3b01      	subs	r3, #1
    2a10:	005b      	lsls	r3, r3, #1
    2a12:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2a16:	9b01      	ldr	r3, [sp, #4]
    2a18:	7a1b      	ldrb	r3, [r3, #8]
    2a1a:	3b01      	subs	r3, #1
    2a1c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2a20:	4313      	orrs	r3, r2
    2a22:	9a03      	ldr	r2, [sp, #12]
    2a24:	4313      	orrs	r3, r2
    2a26:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2a28:	4a02      	ldr	r2, [pc, #8]	; (2a34 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2a2a:	9b03      	ldr	r3, [sp, #12]
    2a2c:	6693      	str	r3, [r2, #104]	; 0x68
}
    2a2e:	bf00      	nop
    2a30:	b004      	add	sp, #16
    2a32:	4770      	bx	lr
    2a34:	40048000 	.word	0x40048000

00002a38 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2a38:	b082      	sub	sp, #8
    2a3a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a3c:	bf00      	nop
    2a3e:	b002      	add	sp, #8
    2a40:	4770      	bx	lr
	...

00002a44 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2a44:	b082      	sub	sp, #8
    2a46:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a48:	bf00      	nop
    2a4a:	b002      	add	sp, #8
    2a4c:	4770      	bx	lr

00002a4e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2a4e:	b082      	sub	sp, #8
    2a50:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2a52:	bf00      	nop
    2a54:	b002      	add	sp, #8
    2a56:	4770      	bx	lr

00002a58 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2a58:	b500      	push	{lr}
    2a5a:	b083      	sub	sp, #12
    2a5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a5e:	9b01      	ldr	r3, [sp, #4]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d002      	beq.n	2a6a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2a64:	9801      	ldr	r0, [sp, #4]
    2a66:	f000 f86a 	bl	2b3e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a6a:	bf00      	nop
    2a6c:	b003      	add	sp, #12
    2a6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a72 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2a72:	b500      	push	{lr}
    2a74:	b083      	sub	sp, #12
    2a76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a78:	9b01      	ldr	r3, [sp, #4]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d002      	beq.n	2a84 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    2a7e:	9801      	ldr	r0, [sp, #4]
    2a80:	f000 f884 	bl	2b8c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2a84:	bf00      	nop
    2a86:	b003      	add	sp, #12
    2a88:	f85d fb04 	ldr.w	pc, [sp], #4

00002a8c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2a8c:	b500      	push	{lr}
    2a8e:	b089      	sub	sp, #36	; 0x24
    2a90:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2a92:	2300      	movs	r3, #0
    2a94:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2a98:	9b01      	ldr	r3, [sp, #4]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d031      	beq.n	2b02 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    2a9e:	4b1b      	ldr	r3, [pc, #108]	; (2b0c <Clock_Ip_CompleteSOSC+0x80>)
    2aa0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2aa4:	f003 0301 	and.w	r3, r3, #1
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d02a      	beq.n	2b02 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2aac:	aa03      	add	r2, sp, #12
    2aae:	a904      	add	r1, sp, #16
    2ab0:	a805      	add	r0, sp, #20
    2ab2:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ab6:	f7ff fd1d 	bl	24f4 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2aba:	4b14      	ldr	r3, [pc, #80]	; (2b0c <Clock_Ip_CompleteSOSC+0x80>)
    2abc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2ac0:	0e1b      	lsrs	r3, r3, #24
    2ac2:	f003 0301 	and.w	r3, r3, #1
    2ac6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ac8:	9a03      	ldr	r2, [sp, #12]
    2aca:	a904      	add	r1, sp, #16
    2acc:	ab05      	add	r3, sp, #20
    2ace:	4618      	mov	r0, r3
    2ad0:	f7ff fd2a 	bl	2528 <Clock_Ip_TimeoutExpired>
    2ad4:	4603      	mov	r3, r0
    2ad6:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2ada:	9b06      	ldr	r3, [sp, #24]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d106      	bne.n	2aee <Clock_Ip_CompleteSOSC+0x62>
    2ae0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ae4:	f083 0301 	eor.w	r3, r3, #1
    2ae8:	b2db      	uxtb	r3, r3
    2aea:	2b00      	cmp	r3, #0
    2aec:	d1e5      	bne.n	2aba <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2aee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d005      	beq.n	2b02 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2af6:	9b01      	ldr	r3, [sp, #4]
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	4619      	mov	r1, r3
    2afc:	2001      	movs	r0, #1
    2afe:	f7ff fce9 	bl	24d4 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2b02:	bf00      	nop
    2b04:	b009      	add	sp, #36	; 0x24
    2b06:	f85d fb04 	ldr.w	pc, [sp], #4
    2b0a:	bf00      	nop
    2b0c:	40064000 	.word	0x40064000

00002b10 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2b10:	b500      	push	{lr}
    2b12:	b083      	sub	sp, #12
    2b14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2b16:	9801      	ldr	r0, [sp, #4]
    2b18:	f000 f8c0 	bl	2c9c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2b1c:	bf00      	nop
    2b1e:	b003      	add	sp, #12
    2b20:	f85d fb04 	ldr.w	pc, [sp], #4

00002b24 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2b24:	b500      	push	{lr}
    2b26:	b083      	sub	sp, #12
    2b28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b2a:	9b01      	ldr	r3, [sp, #4]
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d002      	beq.n	2b36 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2b30:	9801      	ldr	r0, [sp, #4]
    2b32:	f000 f8c3 	bl	2cbc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b36:	bf00      	nop
    2b38:	b003      	add	sp, #12
    2b3a:	f85d fb04 	ldr.w	pc, [sp], #4

00002b3e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2b3e:	b082      	sub	sp, #8
    2b40:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2b42:	4b11      	ldr	r3, [pc, #68]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b48:	4a0f      	ldr	r2, [pc, #60]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b4e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2b52:	4b0d      	ldr	r3, [pc, #52]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b58:	4a0b      	ldr	r2, [pc, #44]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2b5e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2b62:	4b09      	ldr	r3, [pc, #36]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b68:	4a07      	ldr	r2, [pc, #28]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2b6e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2b72:	4b05      	ldr	r3, [pc, #20]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b78:	4a03      	ldr	r2, [pc, #12]	; (2b88 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2b7a:	f023 0301 	bic.w	r3, r3, #1
    2b7e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2b82:	bf00      	nop
    2b84:	b002      	add	sp, #8
    2b86:	4770      	bx	lr
    2b88:	40064000 	.word	0x40064000

00002b8c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2b8c:	b082      	sub	sp, #8
    2b8e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2b90:	9b01      	ldr	r3, [sp, #4]
    2b92:	891b      	ldrh	r3, [r3, #8]
    2b94:	2b01      	cmp	r3, #1
    2b96:	d174      	bne.n	2c82 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2b98:	9b01      	ldr	r3, [sp, #4]
    2b9a:	7bdb      	ldrb	r3, [r3, #15]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d002      	beq.n	2ba6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2ba0:	2b01      	cmp	r3, #1
    2ba2:	d009      	beq.n	2bb8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2ba4:	e011      	b.n	2bca <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2ba6:	4b39      	ldr	r3, [pc, #228]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2ba8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2bac:	4a37      	ldr	r2, [pc, #220]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bae:	f023 0308 	bic.w	r3, r3, #8
    2bb2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2bb6:	e008      	b.n	2bca <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2bb8:	4b34      	ldr	r3, [pc, #208]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2bbe:	4a33      	ldr	r2, [pc, #204]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bc0:	f043 0308 	orr.w	r3, r3, #8
    2bc4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2bc8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2bca:	4b30      	ldr	r3, [pc, #192]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2bd0:	4a2e      	ldr	r2, [pc, #184]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2bd6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2bda:	9b01      	ldr	r3, [sp, #4]
    2bdc:	685b      	ldr	r3, [r3, #4]
    2bde:	4a2c      	ldr	r2, [pc, #176]	; (2c90 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2be0:	4293      	cmp	r3, r2
    2be2:	d90d      	bls.n	2c00 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	685b      	ldr	r3, [r3, #4]
    2be8:	4a2a      	ldr	r2, [pc, #168]	; (2c94 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2bea:	4293      	cmp	r3, r2
    2bec:	d208      	bcs.n	2c00 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2bee:	4b27      	ldr	r3, [pc, #156]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2bf4:	4a25      	ldr	r2, [pc, #148]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2bf6:	f043 0320 	orr.w	r3, r3, #32
    2bfa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2bfe:	e007      	b.n	2c10 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2c00:	4b22      	ldr	r3, [pc, #136]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2c06:	4a21      	ldr	r2, [pc, #132]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c08:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2c0c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2c10:	9b01      	ldr	r3, [sp, #4]
    2c12:	7b1b      	ldrb	r3, [r3, #12]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d108      	bne.n	2c2a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2c18:	4b1c      	ldr	r3, [pc, #112]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2c1e:	4a1b      	ldr	r2, [pc, #108]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c20:	f043 0304 	orr.w	r3, r3, #4
    2c24:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2c28:	e007      	b.n	2c3a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2c2a:	4b18      	ldr	r3, [pc, #96]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2c30:	4a16      	ldr	r2, [pc, #88]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c32:	f023 0304 	bic.w	r3, r3, #4
    2c36:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2c3a:	9b01      	ldr	r3, [sp, #4]
    2c3c:	7c1b      	ldrb	r3, [r3, #16]
    2c3e:	2b02      	cmp	r3, #2
    2c40:	d011      	beq.n	2c66 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2c42:	2b02      	cmp	r3, #2
    2c44:	dc14      	bgt.n	2c70 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2c46:	2b00      	cmp	r3, #0
    2c48:	d002      	beq.n	2c50 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2c4a:	2b01      	cmp	r3, #1
    2c4c:	d005      	beq.n	2c5a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    2c4e:	e00f      	b.n	2c70 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2c50:	4b0e      	ldr	r3, [pc, #56]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c52:	2201      	movs	r2, #1
    2c54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2c58:	e014      	b.n	2c84 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2c5a:	4b0c      	ldr	r3, [pc, #48]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c5c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2c60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2c64:	e00e      	b.n	2c84 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2c66:	4b09      	ldr	r3, [pc, #36]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c68:	4a0b      	ldr	r2, [pc, #44]	; (2c98 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2c6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    2c6e:	e009      	b.n	2c84 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2c70:	4b06      	ldr	r3, [pc, #24]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c76:	4a05      	ldr	r2, [pc, #20]	; (2c8c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c78:	f043 0301 	orr.w	r3, r3, #1
    2c7c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2c80:	e000      	b.n	2c84 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2c82:	bf00      	nop
}
    2c84:	bf00      	nop
    2c86:	b002      	add	sp, #8
    2c88:	4770      	bx	lr
    2c8a:	bf00      	nop
    2c8c:	40064000 	.word	0x40064000
    2c90:	003d08ff 	.word	0x003d08ff
    2c94:	007a1200 	.word	0x007a1200
    2c98:	00030001 	.word	0x00030001

00002c9c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2c9c:	b082      	sub	sp, #8
    2c9e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2ca0:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2ca2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2ca6:	4a04      	ldr	r2, [pc, #16]	; (2cb8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2ca8:	f023 0301 	bic.w	r3, r3, #1
    2cac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2cb0:	bf00      	nop
    2cb2:	b002      	add	sp, #8
    2cb4:	4770      	bx	lr
    2cb6:	bf00      	nop
    2cb8:	40064000 	.word	0x40064000

00002cbc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2cbc:	b082      	sub	sp, #8
    2cbe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2cc0:	9b01      	ldr	r3, [sp, #4]
    2cc2:	891b      	ldrh	r3, [r3, #8]
    2cc4:	2b01      	cmp	r3, #1
    2cc6:	d107      	bne.n	2cd8 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2cc8:	4b05      	ldr	r3, [pc, #20]	; (2ce0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2cca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2cce:	4a04      	ldr	r2, [pc, #16]	; (2ce0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2cd0:	f043 0301 	orr.w	r3, r3, #1
    2cd4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2cd8:	bf00      	nop
    2cda:	b002      	add	sp, #8
    2cdc:	4770      	bx	lr
    2cde:	bf00      	nop
    2ce0:	40064000 	.word	0x40064000

00002ce4 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2ce4:	b082      	sub	sp, #8
    2ce6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ce8:	bf00      	nop
    2cea:	b002      	add	sp, #8
    2cec:	4770      	bx	lr

00002cee <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2cee:	b082      	sub	sp, #8
    2cf0:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2cf2:	2300      	movs	r3, #0
}
    2cf4:	4618      	mov	r0, r3
    2cf6:	b002      	add	sp, #8
    2cf8:	4770      	bx	lr

00002cfa <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2cfa:	b082      	sub	sp, #8
    2cfc:	9001      	str	r0, [sp, #4]
    2cfe:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2d00:	bf00      	nop
    2d02:	b002      	add	sp, #8
    2d04:	4770      	bx	lr
	...

00002d08 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2d08:	b082      	sub	sp, #8
    2d0a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2d0c:	bf00      	nop
    2d0e:	b002      	add	sp, #8
    2d10:	4770      	bx	lr

00002d12 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2d12:	b082      	sub	sp, #8
    2d14:	9001      	str	r0, [sp, #4]
    2d16:	460b      	mov	r3, r1
    2d18:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2d1c:	bf00      	nop
    2d1e:	b002      	add	sp, #8
    2d20:	4770      	bx	lr

00002d22 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2d22:	b500      	push	{lr}
    2d24:	b083      	sub	sp, #12
    2d26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d28:	9b01      	ldr	r3, [sp, #4]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d002      	beq.n	2d34 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2d2e:	9801      	ldr	r0, [sp, #4]
    2d30:	f000 f8e7 	bl	2f02 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d34:	bf00      	nop
    2d36:	b003      	add	sp, #12
    2d38:	f85d fb04 	ldr.w	pc, [sp], #4

00002d3c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2d3c:	b500      	push	{lr}
    2d3e:	b085      	sub	sp, #20
    2d40:	9001      	str	r0, [sp, #4]
    2d42:	460b      	mov	r3, r1
    2d44:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2d4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d003      	beq.n	2d5c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2d54:	2300      	movs	r3, #0
    2d56:	f8ad 300c 	strh.w	r3, [sp, #12]
    2d5a:	e002      	b.n	2d62 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2d5c:	2301      	movs	r3, #1
    2d5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2d62:	ab02      	add	r3, sp, #8
    2d64:	4618      	mov	r0, r3
    2d66:	f7ff ffdc 	bl	2d22 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2d6a:	bf00      	nop
    2d6c:	b005      	add	sp, #20
    2d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d72 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2d72:	b500      	push	{lr}
    2d74:	b083      	sub	sp, #12
    2d76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d78:	9b01      	ldr	r3, [sp, #4]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d002      	beq.n	2d84 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2d7e:	9801      	ldr	r0, [sp, #4]
    2d80:	f000 f8d6 	bl	2f30 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d84:	bf00      	nop
    2d86:	b003      	add	sp, #12
    2d88:	f85d fb04 	ldr.w	pc, [sp], #4

00002d8c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2d8c:	b500      	push	{lr}
    2d8e:	b085      	sub	sp, #20
    2d90:	9001      	str	r0, [sp, #4]
    2d92:	460b      	mov	r3, r1
    2d94:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2d9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d003      	beq.n	2dac <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2da4:	2300      	movs	r3, #0
    2da6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2daa:	e002      	b.n	2db2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2dac:	2301      	movs	r3, #1
    2dae:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2db2:	ab02      	add	r3, sp, #8
    2db4:	4618      	mov	r0, r3
    2db6:	f7ff ffdc 	bl	2d72 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2dba:	bf00      	nop
    2dbc:	b005      	add	sp, #20
    2dbe:	f85d fb04 	ldr.w	pc, [sp], #4

00002dc2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2dc2:	b500      	push	{lr}
    2dc4:	b083      	sub	sp, #12
    2dc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dc8:	9b01      	ldr	r3, [sp, #4]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d002      	beq.n	2dd4 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2dce:	9801      	ldr	r0, [sp, #4]
    2dd0:	f000 f8c6 	bl	2f60 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dd4:	bf00      	nop
    2dd6:	b003      	add	sp, #12
    2dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ddc <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ddc:	b500      	push	{lr}
    2dde:	b085      	sub	sp, #20
    2de0:	9001      	str	r0, [sp, #4]
    2de2:	460b      	mov	r3, r1
    2de4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2de8:	9b01      	ldr	r3, [sp, #4]
    2dea:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2dec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d003      	beq.n	2dfc <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2df4:	2300      	movs	r3, #0
    2df6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2dfa:	e002      	b.n	2e02 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2dfc:	2301      	movs	r3, #1
    2dfe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2e02:	ab02      	add	r3, sp, #8
    2e04:	4618      	mov	r0, r3
    2e06:	f7ff ffdc 	bl	2dc2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2e0a:	bf00      	nop
    2e0c:	b005      	add	sp, #20
    2e0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002e12 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2e12:	b500      	push	{lr}
    2e14:	b083      	sub	sp, #12
    2e16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e18:	9b01      	ldr	r3, [sp, #4]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d002      	beq.n	2e24 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2e1e:	9801      	ldr	r0, [sp, #4]
    2e20:	f000 f8b6 	bl	2f90 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e24:	bf00      	nop
    2e26:	b003      	add	sp, #12
    2e28:	f85d fb04 	ldr.w	pc, [sp], #4

00002e2c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2e2c:	b500      	push	{lr}
    2e2e:	b085      	sub	sp, #20
    2e30:	9001      	str	r0, [sp, #4]
    2e32:	460b      	mov	r3, r1
    2e34:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2e38:	9b01      	ldr	r3, [sp, #4]
    2e3a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2e3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d003      	beq.n	2e4c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2e44:	2300      	movs	r3, #0
    2e46:	f8ad 300c 	strh.w	r3, [sp, #12]
    2e4a:	e002      	b.n	2e52 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2e4c:	2301      	movs	r3, #1
    2e4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2e52:	ab02      	add	r3, sp, #8
    2e54:	4618      	mov	r0, r3
    2e56:	f7ff ffdc 	bl	2e12 <Clock_Ip_ClockSetPccCgcEnable>
}
    2e5a:	bf00      	nop
    2e5c:	b005      	add	sp, #20
    2e5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002e62 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2e62:	b500      	push	{lr}
    2e64:	b083      	sub	sp, #12
    2e66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e68:	9b01      	ldr	r3, [sp, #4]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d002      	beq.n	2e74 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2e6e:	9801      	ldr	r0, [sp, #4]
    2e70:	f000 f8bc 	bl	2fec <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e74:	bf00      	nop
    2e76:	b003      	add	sp, #12
    2e78:	f85d fb04 	ldr.w	pc, [sp], #4

00002e7c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2e7c:	b500      	push	{lr}
    2e7e:	b085      	sub	sp, #20
    2e80:	9001      	str	r0, [sp, #4]
    2e82:	460b      	mov	r3, r1
    2e84:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2e88:	9b01      	ldr	r3, [sp, #4]
    2e8a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2e8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d003      	beq.n	2e9c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2e94:	2300      	movs	r3, #0
    2e96:	f8ad 300c 	strh.w	r3, [sp, #12]
    2e9a:	e002      	b.n	2ea2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2e9c:	2301      	movs	r3, #1
    2e9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2ea2:	ab02      	add	r3, sp, #8
    2ea4:	4618      	mov	r0, r3
    2ea6:	f7ff ffdc 	bl	2e62 <Clock_Ip_ClockSetSimGate>
}
    2eaa:	bf00      	nop
    2eac:	b005      	add	sp, #20
    2eae:	f85d fb04 	ldr.w	pc, [sp], #4

00002eb2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2eb2:	b500      	push	{lr}
    2eb4:	b083      	sub	sp, #12
    2eb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d002      	beq.n	2ec4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2ebe:	9801      	ldr	r0, [sp, #4]
    2ec0:	f000 f8c0 	bl	3044 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ec4:	bf00      	nop
    2ec6:	b003      	add	sp, #12
    2ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ecc <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ecc:	b500      	push	{lr}
    2ece:	b085      	sub	sp, #20
    2ed0:	9001      	str	r0, [sp, #4]
    2ed2:	460b      	mov	r3, r1
    2ed4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ed8:	9b01      	ldr	r3, [sp, #4]
    2eda:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2edc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d003      	beq.n	2eec <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2ee4:	2300      	movs	r3, #0
    2ee6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2eea:	e002      	b.n	2ef2 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2eec:	2301      	movs	r3, #1
    2eee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2ef2:	ab02      	add	r3, sp, #8
    2ef4:	4618      	mov	r0, r3
    2ef6:	f7ff ffdc 	bl	2eb2 <Clock_Ip_ClockSetSimTraceEnable>
}
    2efa:	bf00      	nop
    2efc:	b005      	add	sp, #20
    2efe:	f85d fb04 	ldr.w	pc, [sp], #4

00002f02 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2f02:	b084      	sub	sp, #16
    2f04:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2f06:	4b09      	ldr	r3, [pc, #36]	; (2f2c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2f08:	691b      	ldr	r3, [r3, #16]
    2f0a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2f0c:	9b03      	ldr	r3, [sp, #12]
    2f0e:	f023 0301 	bic.w	r3, r3, #1
    2f12:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2f14:	9b01      	ldr	r3, [sp, #4]
    2f16:	889b      	ldrh	r3, [r3, #4]
    2f18:	461a      	mov	r2, r3
    2f1a:	9b03      	ldr	r3, [sp, #12]
    2f1c:	4313      	orrs	r3, r2
    2f1e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2f20:	4a02      	ldr	r2, [pc, #8]	; (2f2c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2f22:	9b03      	ldr	r3, [sp, #12]
    2f24:	6113      	str	r3, [r2, #16]
}
    2f26:	bf00      	nop
    2f28:	b004      	add	sp, #16
    2f2a:	4770      	bx	lr
    2f2c:	40048000 	.word	0x40048000

00002f30 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2f30:	b084      	sub	sp, #16
    2f32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2f34:	4b09      	ldr	r3, [pc, #36]	; (2f5c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2f36:	691b      	ldr	r3, [r3, #16]
    2f38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	f023 0302 	bic.w	r3, r3, #2
    2f40:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2f42:	9b01      	ldr	r3, [sp, #4]
    2f44:	889b      	ldrh	r3, [r3, #4]
    2f46:	005b      	lsls	r3, r3, #1
    2f48:	9a03      	ldr	r2, [sp, #12]
    2f4a:	4313      	orrs	r3, r2
    2f4c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2f4e:	4a03      	ldr	r2, [pc, #12]	; (2f5c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2f50:	9b03      	ldr	r3, [sp, #12]
    2f52:	6113      	str	r3, [r2, #16]
}
    2f54:	bf00      	nop
    2f56:	b004      	add	sp, #16
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop
    2f5c:	40048000 	.word	0x40048000

00002f60 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2f60:	b084      	sub	sp, #16
    2f62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2f64:	4b09      	ldr	r3, [pc, #36]	; (2f8c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2f66:	685b      	ldr	r3, [r3, #4]
    2f68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2f6a:	9b03      	ldr	r3, [sp, #12]
    2f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2f70:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2f72:	9b01      	ldr	r3, [sp, #4]
    2f74:	889b      	ldrh	r3, [r3, #4]
    2f76:	02db      	lsls	r3, r3, #11
    2f78:	9a03      	ldr	r2, [sp, #12]
    2f7a:	4313      	orrs	r3, r2
    2f7c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2f7e:	4a03      	ldr	r2, [pc, #12]	; (2f8c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2f80:	9b03      	ldr	r3, [sp, #12]
    2f82:	6053      	str	r3, [r2, #4]
}
    2f84:	bf00      	nop
    2f86:	b004      	add	sp, #16
    2f88:	4770      	bx	lr
    2f8a:	bf00      	nop
    2f8c:	40048000 	.word	0x40048000

00002f90 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2f90:	b084      	sub	sp, #16
    2f92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2f94:	4913      	ldr	r1, [pc, #76]	; (2fe4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2f96:	9b01      	ldr	r3, [sp, #4]
    2f98:	681a      	ldr	r2, [r3, #0]
    2f9a:	4813      	ldr	r0, [pc, #76]	; (2fe8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2f9c:	4613      	mov	r3, r2
    2f9e:	00db      	lsls	r3, r3, #3
    2fa0:	4413      	add	r3, r2
    2fa2:	4403      	add	r3, r0
    2fa4:	3306      	adds	r3, #6
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2fac:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2fae:	9b03      	ldr	r3, [sp, #12]
    2fb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2fb4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	889b      	ldrh	r3, [r3, #4]
    2fba:	079b      	lsls	r3, r3, #30
    2fbc:	9a03      	ldr	r2, [sp, #12]
    2fbe:	4313      	orrs	r3, r2
    2fc0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2fc2:	4908      	ldr	r1, [pc, #32]	; (2fe4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2fc4:	9b01      	ldr	r3, [sp, #4]
    2fc6:	681a      	ldr	r2, [r3, #0]
    2fc8:	4807      	ldr	r0, [pc, #28]	; (2fe8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2fca:	4613      	mov	r3, r2
    2fcc:	00db      	lsls	r3, r3, #3
    2fce:	4413      	add	r3, r2
    2fd0:	4403      	add	r3, r0
    2fd2:	3306      	adds	r3, #6
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	461a      	mov	r2, r3
    2fd8:	9b03      	ldr	r3, [sp, #12]
    2fda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2fde:	bf00      	nop
    2fe0:	b004      	add	sp, #16
    2fe2:	4770      	bx	lr
    2fe4:	40065000 	.word	0x40065000
    2fe8:	00007b90 	.word	0x00007b90

00002fec <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2fec:	b086      	sub	sp, #24
    2fee:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2ff0:	9b01      	ldr	r3, [sp, #4]
    2ff2:	889b      	ldrh	r3, [r3, #4]
    2ff4:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2ff6:	9b01      	ldr	r3, [sp, #4]
    2ff8:	681a      	ldr	r2, [r3, #0]
    2ffa:	4910      	ldr	r1, [pc, #64]	; (303c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2ffc:	4613      	mov	r3, r2
    2ffe:	00db      	lsls	r3, r3, #3
    3000:	4413      	add	r3, r2
    3002:	440b      	add	r3, r1
    3004:	3306      	adds	r3, #6
    3006:	781b      	ldrb	r3, [r3, #0]
    3008:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    300a:	4b0d      	ldr	r3, [pc, #52]	; (3040 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    300e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3010:	2201      	movs	r2, #1
    3012:	9b04      	ldr	r3, [sp, #16]
    3014:	fa02 f303 	lsl.w	r3, r2, r3
    3018:	43db      	mvns	r3, r3
    301a:	9a03      	ldr	r2, [sp, #12]
    301c:	4013      	ands	r3, r2
    301e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3020:	9a05      	ldr	r2, [sp, #20]
    3022:	9b04      	ldr	r3, [sp, #16]
    3024:	fa02 f303 	lsl.w	r3, r2, r3
    3028:	9a03      	ldr	r2, [sp, #12]
    302a:	4313      	orrs	r3, r2
    302c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    302e:	4a04      	ldr	r2, [pc, #16]	; (3040 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3030:	9b03      	ldr	r3, [sp, #12]
    3032:	6413      	str	r3, [r2, #64]	; 0x40
}
    3034:	bf00      	nop
    3036:	b006      	add	sp, #24
    3038:	4770      	bx	lr
    303a:	bf00      	nop
    303c:	00007b90 	.word	0x00007b90
    3040:	40048000 	.word	0x40048000

00003044 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3044:	b084      	sub	sp, #16
    3046:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3048:	4b0a      	ldr	r3, [pc, #40]	; (3074 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    304a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    304c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    304e:	9b01      	ldr	r3, [sp, #4]
    3050:	889b      	ldrh	r3, [r3, #4]
    3052:	2b01      	cmp	r3, #1
    3054:	d104      	bne.n	3060 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3056:	9b03      	ldr	r3, [sp, #12]
    3058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    305c:	9303      	str	r3, [sp, #12]
    305e:	e003      	b.n	3068 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3060:	9b03      	ldr	r3, [sp, #12]
    3062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3066:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3068:	4a02      	ldr	r2, [pc, #8]	; (3074 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    306a:	9b03      	ldr	r3, [sp, #12]
    306c:	6693      	str	r3, [r2, #104]	; 0x68
}
    306e:	bf00      	nop
    3070:	b004      	add	sp, #16
    3072:	4770      	bx	lr
    3074:	40048000 	.word	0x40048000

00003078 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3078:	b082      	sub	sp, #8
    307a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    307c:	bf00      	nop
    307e:	b002      	add	sp, #8
    3080:	4770      	bx	lr

00003082 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3082:	b082      	sub	sp, #8
    3084:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3086:	bf00      	nop
    3088:	b002      	add	sp, #8
    308a:	4770      	bx	lr

0000308c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    308c:	b500      	push	{lr}
    308e:	b083      	sub	sp, #12
    3090:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3092:	9b01      	ldr	r3, [sp, #4]
    3094:	2b00      	cmp	r3, #0
    3096:	d002      	beq.n	309e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3098:	9801      	ldr	r0, [sp, #4]
    309a:	f000 f8d1 	bl	3240 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    309e:	bf00      	nop
    30a0:	b003      	add	sp, #12
    30a2:	f85d fb04 	ldr.w	pc, [sp], #4

000030a6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    30a6:	b500      	push	{lr}
    30a8:	b083      	sub	sp, #12
    30aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30ac:	9b01      	ldr	r3, [sp, #4]
    30ae:	2b00      	cmp	r3, #0
    30b0:	d002      	beq.n	30b8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    30b2:	9801      	ldr	r0, [sp, #4]
    30b4:	f000 f950 	bl	3358 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30b8:	bf00      	nop
    30ba:	b003      	add	sp, #12
    30bc:	f85d fb04 	ldr.w	pc, [sp], #4

000030c0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    30c0:	b500      	push	{lr}
    30c2:	b083      	sub	sp, #12
    30c4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    30c6:	9801      	ldr	r0, [sp, #4]
    30c8:	f000 f98e 	bl	33e8 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    30cc:	bf00      	nop
    30ce:	b003      	add	sp, #12
    30d0:	f85d fb04 	ldr.w	pc, [sp], #4

000030d4 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    30d4:	b500      	push	{lr}
    30d6:	b083      	sub	sp, #12
    30d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30da:	9b01      	ldr	r3, [sp, #4]
    30dc:	2b00      	cmp	r3, #0
    30de:	d002      	beq.n	30e6 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    30e0:	9801      	ldr	r0, [sp, #4]
    30e2:	f000 f999 	bl	3418 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30e6:	bf00      	nop
    30e8:	b003      	add	sp, #12
    30ea:	f85d fb04 	ldr.w	pc, [sp], #4

000030ee <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    30ee:	b500      	push	{lr}
    30f0:	b083      	sub	sp, #12
    30f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30f4:	9b01      	ldr	r3, [sp, #4]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d002      	beq.n	3100 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    30fa:	9801      	ldr	r0, [sp, #4]
    30fc:	f000 f9b0 	bl	3460 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3100:	bf00      	nop
    3102:	b003      	add	sp, #12
    3104:	f85d fb04 	ldr.w	pc, [sp], #4

00003108 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3108:	b500      	push	{lr}
    310a:	b083      	sub	sp, #12
    310c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    310e:	9801      	ldr	r0, [sp, #4]
    3110:	f000 f9ba 	bl	3488 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3114:	bf00      	nop
    3116:	b003      	add	sp, #12
    3118:	f85d fb04 	ldr.w	pc, [sp], #4

0000311c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    311c:	b500      	push	{lr}
    311e:	b083      	sub	sp, #12
    3120:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	2b00      	cmp	r3, #0
    3126:	d002      	beq.n	312e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3128:	9801      	ldr	r0, [sp, #4]
    312a:	f000 f9bd 	bl	34a8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    312e:	bf00      	nop
    3130:	b003      	add	sp, #12
    3132:	f85d fb04 	ldr.w	pc, [sp], #4

00003136 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3136:	b500      	push	{lr}
    3138:	b083      	sub	sp, #12
    313a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    313c:	9b01      	ldr	r3, [sp, #4]
    313e:	2b00      	cmp	r3, #0
    3140:	d002      	beq.n	3148 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3142:	9801      	ldr	r0, [sp, #4]
    3144:	f000 f9d4 	bl	34f0 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3148:	bf00      	nop
    314a:	b003      	add	sp, #12
    314c:	f85d fb04 	ldr.w	pc, [sp], #4

00003150 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3150:	b500      	push	{lr}
    3152:	b083      	sub	sp, #12
    3154:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3156:	9801      	ldr	r0, [sp, #4]
    3158:	f000 f9de 	bl	3518 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    315c:	bf00      	nop
    315e:	b003      	add	sp, #12
    3160:	f85d fb04 	ldr.w	pc, [sp], #4

00003164 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3164:	b500      	push	{lr}
    3166:	b089      	sub	sp, #36	; 0x24
    3168:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    316a:	2300      	movs	r3, #0
    316c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3170:	4b20      	ldr	r3, [pc, #128]	; (31f4 <SetInputSouceSytemClock+0x90>)
    3172:	695b      	ldr	r3, [r3, #20]
    3174:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3176:	9b06      	ldr	r3, [sp, #24]
    3178:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    317c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    317e:	9b01      	ldr	r3, [sp, #4]
    3180:	061b      	lsls	r3, r3, #24
    3182:	9a06      	ldr	r2, [sp, #24]
    3184:	4313      	orrs	r3, r2
    3186:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3188:	4a1a      	ldr	r2, [pc, #104]	; (31f4 <SetInputSouceSytemClock+0x90>)
    318a:	9b06      	ldr	r3, [sp, #24]
    318c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    318e:	aa02      	add	r2, sp, #8
    3190:	a903      	add	r1, sp, #12
    3192:	a804      	add	r0, sp, #16
    3194:	f24c 3350 	movw	r3, #50000	; 0xc350
    3198:	f7ff f9ac 	bl	24f4 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    319c:	4b15      	ldr	r3, [pc, #84]	; (31f4 <SetInputSouceSytemClock+0x90>)
    319e:	691b      	ldr	r3, [r3, #16]
    31a0:	0e1b      	lsrs	r3, r3, #24
    31a2:	f003 030f 	and.w	r3, r3, #15
    31a6:	9a01      	ldr	r2, [sp, #4]
    31a8:	429a      	cmp	r2, r3
    31aa:	bf0c      	ite	eq
    31ac:	2301      	moveq	r3, #1
    31ae:	2300      	movne	r3, #0
    31b0:	b2db      	uxtb	r3, r3
    31b2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31b4:	9a02      	ldr	r2, [sp, #8]
    31b6:	a903      	add	r1, sp, #12
    31b8:	ab04      	add	r3, sp, #16
    31ba:	4618      	mov	r0, r3
    31bc:	f7ff f9b4 	bl	2528 <Clock_Ip_TimeoutExpired>
    31c0:	4603      	mov	r3, r0
    31c2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    31c6:	9b05      	ldr	r3, [sp, #20]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d106      	bne.n	31da <SetInputSouceSytemClock+0x76>
    31cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31d0:	f083 0301 	eor.w	r3, r3, #1
    31d4:	b2db      	uxtb	r3, r3
    31d6:	2b00      	cmp	r3, #0
    31d8:	d1e0      	bne.n	319c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    31da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31de:	2b00      	cmp	r3, #0
    31e0:	d003      	beq.n	31ea <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    31e2:	2105      	movs	r1, #5
    31e4:	2001      	movs	r0, #1
    31e6:	f7ff f975 	bl	24d4 <Clock_Ip_ReportClockErrors>
    }
}
    31ea:	bf00      	nop
    31ec:	b009      	add	sp, #36	; 0x24
    31ee:	f85d fb04 	ldr.w	pc, [sp], #4
    31f2:	bf00      	nop
    31f4:	40064000 	.word	0x40064000

000031f8 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    31f8:	b500      	push	{lr}
    31fa:	b083      	sub	sp, #12
    31fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	2b00      	cmp	r3, #0
    3202:	d002      	beq.n	320a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3204:	9801      	ldr	r0, [sp, #4]
    3206:	f000 f997 	bl	3538 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    320a:	bf00      	nop
    320c:	b003      	add	sp, #12
    320e:	f85d fb04 	ldr.w	pc, [sp], #4

00003212 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3212:	b500      	push	{lr}
    3214:	b083      	sub	sp, #12
    3216:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3218:	9b01      	ldr	r3, [sp, #4]
    321a:	2b00      	cmp	r3, #0
    321c:	d002      	beq.n	3224 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    321e:	9801      	ldr	r0, [sp, #4]
    3220:	f000 fa7e 	bl	3720 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3224:	bf00      	nop
    3226:	b003      	add	sp, #12
    3228:	f85d fb04 	ldr.w	pc, [sp], #4

0000322c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    322c:	b500      	push	{lr}
    322e:	b083      	sub	sp, #12
    3230:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3232:	9801      	ldr	r0, [sp, #4]
    3234:	f000 fab8 	bl	37a8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3238:	bf00      	nop
    323a:	b003      	add	sp, #12
    323c:	f85d fb04 	ldr.w	pc, [sp], #4

00003240 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3240:	b500      	push	{lr}
    3242:	b08b      	sub	sp, #44	; 0x2c
    3244:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3246:	2300      	movs	r3, #0
    3248:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    324c:	9b01      	ldr	r3, [sp, #4]
    324e:	2b00      	cmp	r3, #0
    3250:	d10b      	bne.n	326a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3252:	2305      	movs	r3, #5
    3254:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3256:	2301      	movs	r3, #1
    3258:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    325c:	2301      	movs	r3, #1
    325e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3262:	2301      	movs	r3, #1
    3264:	f88d 3010 	strb.w	r3, [sp, #16]
    3268:	e00e      	b.n	3288 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3270:	9b01      	ldr	r3, [sp, #4]
    3272:	79db      	ldrb	r3, [r3, #7]
    3274:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	889b      	ldrh	r3, [r3, #4]
    327c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3280:	9b01      	ldr	r3, [sp, #4]
    3282:	7a1b      	ldrb	r3, [r3, #8]
    3284:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3288:	4b32      	ldr	r3, [pc, #200]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    328a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    328e:	4a31      	ldr	r2, [pc, #196]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3290:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3294:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3298:	4b2e      	ldr	r3, [pc, #184]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    329a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    329e:	4a2d      	ldr	r2, [pc, #180]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32a0:	f023 0301 	bic.w	r3, r3, #1
    32a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    32a8:	4b2a      	ldr	r3, [pc, #168]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    32ae:	4a29      	ldr	r2, [pc, #164]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32b0:	f023 0304 	bic.w	r3, r3, #4
    32b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    32b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    32bc:	2b01      	cmp	r3, #1
    32be:	d144      	bne.n	334a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    32c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    32c4:	4a23      	ldr	r2, [pc, #140]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32c6:	f003 0301 	and.w	r3, r3, #1
    32ca:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    32ce:	4b21      	ldr	r3, [pc, #132]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    32d4:	4a1f      	ldr	r2, [pc, #124]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32d6:	f043 0301 	orr.w	r3, r3, #1
    32da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    32de:	4b1d      	ldr	r3, [pc, #116]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    32e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    32e8:	009b      	lsls	r3, r3, #2
    32ea:	f003 0304 	and.w	r3, r3, #4
    32ee:	4919      	ldr	r1, [pc, #100]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    32f0:	4313      	orrs	r3, r2
    32f2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    32f6:	aa05      	add	r2, sp, #20
    32f8:	a906      	add	r1, sp, #24
    32fa:	a807      	add	r0, sp, #28
    32fc:	f24c 3350 	movw	r3, #50000	; 0xc350
    3300:	f7ff f8f8 	bl	24f4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3304:	4b13      	ldr	r3, [pc, #76]	; (3354 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    330a:	0e1b      	lsrs	r3, r3, #24
    330c:	f003 0301 	and.w	r3, r3, #1
    3310:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3312:	9a05      	ldr	r2, [sp, #20]
    3314:	a906      	add	r1, sp, #24
    3316:	ab07      	add	r3, sp, #28
    3318:	4618      	mov	r0, r3
    331a:	f7ff f905 	bl	2528 <Clock_Ip_TimeoutExpired>
    331e:	4603      	mov	r3, r0
    3320:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3324:	9b08      	ldr	r3, [sp, #32]
    3326:	2b00      	cmp	r3, #0
    3328:	d106      	bne.n	3338 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    332a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    332e:	f083 0301 	eor.w	r3, r3, #1
    3332:	b2db      	uxtb	r3, r3
    3334:	2b00      	cmp	r3, #0
    3336:	d1e5      	bne.n	3304 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3338:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    333c:	2b00      	cmp	r3, #0
    333e:	d004      	beq.n	334a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3340:	9b02      	ldr	r3, [sp, #8]
    3342:	4619      	mov	r1, r3
    3344:	2001      	movs	r0, #1
    3346:	f7ff f8c5 	bl	24d4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    334a:	bf00      	nop
    334c:	b00b      	add	sp, #44	; 0x2c
    334e:	f85d fb04 	ldr.w	pc, [sp], #4
    3352:	bf00      	nop
    3354:	40064000 	.word	0x40064000

00003358 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3358:	b500      	push	{lr}
    335a:	b089      	sub	sp, #36	; 0x24
    335c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    335e:	2300      	movs	r3, #0
    3360:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3364:	4b1f      	ldr	r3, [pc, #124]	; (33e4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    336a:	4a1e      	ldr	r2, [pc, #120]	; (33e4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    336c:	f043 0301 	orr.w	r3, r3, #1
    3370:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3374:	4b1b      	ldr	r3, [pc, #108]	; (33e4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3376:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    337a:	4a1a      	ldr	r2, [pc, #104]	; (33e4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    337c:	f043 0304 	orr.w	r3, r3, #4
    3380:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3384:	aa03      	add	r2, sp, #12
    3386:	a904      	add	r1, sp, #16
    3388:	a805      	add	r0, sp, #20
    338a:	f24c 3350 	movw	r3, #50000	; 0xc350
    338e:	f7ff f8b1 	bl	24f4 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3392:	4b14      	ldr	r3, [pc, #80]	; (33e4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3394:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3398:	0e1b      	lsrs	r3, r3, #24
    339a:	f003 0301 	and.w	r3, r3, #1
    339e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33a0:	9a03      	ldr	r2, [sp, #12]
    33a2:	a904      	add	r1, sp, #16
    33a4:	ab05      	add	r3, sp, #20
    33a6:	4618      	mov	r0, r3
    33a8:	f7ff f8be 	bl	2528 <Clock_Ip_TimeoutExpired>
    33ac:	4603      	mov	r3, r0
    33ae:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33b2:	9b06      	ldr	r3, [sp, #24]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d106      	bne.n	33c6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    33b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33bc:	f083 0301 	eor.w	r3, r3, #1
    33c0:	b2db      	uxtb	r3, r3
    33c2:	2b00      	cmp	r3, #0
    33c4:	d1e5      	bne.n	3392 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    33c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d005      	beq.n	33da <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33ce:	9b01      	ldr	r3, [sp, #4]
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	4619      	mov	r1, r3
    33d4:	2001      	movs	r0, #1
    33d6:	f7ff f87d 	bl	24d4 <Clock_Ip_ReportClockErrors>
    }
}
    33da:	bf00      	nop
    33dc:	b009      	add	sp, #36	; 0x24
    33de:	f85d fb04 	ldr.w	pc, [sp], #4
    33e2:	bf00      	nop
    33e4:	40064000 	.word	0x40064000

000033e8 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    33e8:	b082      	sub	sp, #8
    33ea:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    33ec:	4b09      	ldr	r3, [pc, #36]	; (3414 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    33ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    33f2:	4a08      	ldr	r2, [pc, #32]	; (3414 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    33f4:	f023 0301 	bic.w	r3, r3, #1
    33f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    33fc:	4b05      	ldr	r3, [pc, #20]	; (3414 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    33fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3402:	4a04      	ldr	r2, [pc, #16]	; (3414 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3404:	f023 0304 	bic.w	r3, r3, #4
    3408:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    340c:	bf00      	nop
    340e:	b002      	add	sp, #8
    3410:	4770      	bx	lr
    3412:	bf00      	nop
    3414:	40064000 	.word	0x40064000

00003418 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3418:	b082      	sub	sp, #8
    341a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    341c:	4b0f      	ldr	r3, [pc, #60]	; (345c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    341e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3422:	4a0e      	ldr	r2, [pc, #56]	; (345c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3424:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3428:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    342c:	4b0b      	ldr	r3, [pc, #44]	; (345c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    342e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3432:	4a0a      	ldr	r2, [pc, #40]	; (345c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3434:	f023 0304 	bic.w	r3, r3, #4
    3438:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    343c:	4b07      	ldr	r3, [pc, #28]	; (345c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    343e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3442:	9b01      	ldr	r3, [sp, #4]
    3444:	7a1b      	ldrb	r3, [r3, #8]
    3446:	009b      	lsls	r3, r3, #2
    3448:	f003 0304 	and.w	r3, r3, #4
    344c:	4903      	ldr	r1, [pc, #12]	; (345c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    344e:	4313      	orrs	r3, r2
    3450:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3454:	bf00      	nop
    3456:	b002      	add	sp, #8
    3458:	4770      	bx	lr
    345a:	bf00      	nop
    345c:	40064000 	.word	0x40064000

00003460 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3460:	b082      	sub	sp, #8
    3462:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3464:	9b01      	ldr	r3, [sp, #4]
    3466:	889b      	ldrh	r3, [r3, #4]
    3468:	2b01      	cmp	r3, #1
    346a:	d107      	bne.n	347c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    346c:	4b05      	ldr	r3, [pc, #20]	; (3484 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    346e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3472:	4a04      	ldr	r2, [pc, #16]	; (3484 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3474:	f043 0304 	orr.w	r3, r3, #4
    3478:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    347c:	bf00      	nop
    347e:	b002      	add	sp, #8
    3480:	4770      	bx	lr
    3482:	bf00      	nop
    3484:	40064000 	.word	0x40064000

00003488 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3488:	b082      	sub	sp, #8
    348a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    348c:	4b05      	ldr	r3, [pc, #20]	; (34a4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    348e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3492:	4a04      	ldr	r2, [pc, #16]	; (34a4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3494:	f023 0304 	bic.w	r3, r3, #4
    3498:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    349c:	bf00      	nop
    349e:	b002      	add	sp, #8
    34a0:	4770      	bx	lr
    34a2:	bf00      	nop
    34a4:	40064000 	.word	0x40064000

000034a8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    34a8:	b082      	sub	sp, #8
    34aa:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    34ac:	4b0f      	ldr	r3, [pc, #60]	; (34ec <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    34ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34b2:	4a0e      	ldr	r2, [pc, #56]	; (34ec <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    34b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    34b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    34bc:	4b0b      	ldr	r3, [pc, #44]	; (34ec <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    34be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34c2:	4a0a      	ldr	r2, [pc, #40]	; (34ec <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    34c4:	f023 0302 	bic.w	r3, r3, #2
    34c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    34cc:	4b07      	ldr	r3, [pc, #28]	; (34ec <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    34ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    34d2:	9b01      	ldr	r3, [sp, #4]
    34d4:	7a5b      	ldrb	r3, [r3, #9]
    34d6:	005b      	lsls	r3, r3, #1
    34d8:	f003 0302 	and.w	r3, r3, #2
    34dc:	4903      	ldr	r1, [pc, #12]	; (34ec <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    34de:	4313      	orrs	r3, r2
    34e0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    34e4:	bf00      	nop
    34e6:	b002      	add	sp, #8
    34e8:	4770      	bx	lr
    34ea:	bf00      	nop
    34ec:	40064000 	.word	0x40064000

000034f0 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    34f0:	b082      	sub	sp, #8
    34f2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    34f4:	9b01      	ldr	r3, [sp, #4]
    34f6:	889b      	ldrh	r3, [r3, #4]
    34f8:	2b01      	cmp	r3, #1
    34fa:	d107      	bne.n	350c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    34fc:	4b05      	ldr	r3, [pc, #20]	; (3514 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    34fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3502:	4a04      	ldr	r2, [pc, #16]	; (3514 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3504:	f043 0302 	orr.w	r3, r3, #2
    3508:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    350c:	bf00      	nop
    350e:	b002      	add	sp, #8
    3510:	4770      	bx	lr
    3512:	bf00      	nop
    3514:	40064000 	.word	0x40064000

00003518 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3518:	b082      	sub	sp, #8
    351a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    351c:	4b05      	ldr	r3, [pc, #20]	; (3534 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    351e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3522:	4a04      	ldr	r2, [pc, #16]	; (3534 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3524:	f023 0302 	bic.w	r3, r3, #2
    3528:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    352c:	bf00      	nop
    352e:	b002      	add	sp, #8
    3530:	4770      	bx	lr
    3532:	bf00      	nop
    3534:	40064000 	.word	0x40064000

00003538 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3538:	b500      	push	{lr}
    353a:	b08b      	sub	sp, #44	; 0x2c
    353c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    353e:	9b01      	ldr	r3, [sp, #4]
    3540:	681a      	ldr	r2, [r3, #0]
    3542:	4975      	ldr	r1, [pc, #468]	; (3718 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3544:	4613      	mov	r3, r2
    3546:	00db      	lsls	r3, r3, #3
    3548:	4413      	add	r3, r2
    354a:	440b      	add	r3, r1
    354c:	781b      	ldrb	r3, [r3, #0]
    354e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3550:	2300      	movs	r3, #0
    3552:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3556:	2300      	movs	r3, #0
    3558:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    355c:	4b6f      	ldr	r3, [pc, #444]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    355e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3562:	4a6e      	ldr	r2, [pc, #440]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3564:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3568:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    356c:	4b6b      	ldr	r3, [pc, #428]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    356e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3576:	2b00      	cmp	r3, #0
    3578:	d07d      	beq.n	3676 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    357a:	9b01      	ldr	r3, [sp, #4]
    357c:	79db      	ldrb	r3, [r3, #7]
    357e:	461a      	mov	r2, r3
    3580:	4b66      	ldr	r3, [pc, #408]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3582:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3586:	f003 0303 	and.w	r3, r3, #3
    358a:	429a      	cmp	r2, r3
    358c:	d10b      	bne.n	35a6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    358e:	9b01      	ldr	r3, [sp, #4]
    3590:	799b      	ldrb	r3, [r3, #6]
    3592:	461a      	mov	r2, r3
    3594:	4b61      	ldr	r3, [pc, #388]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    359a:	08db      	lsrs	r3, r3, #3
    359c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    35a0:	429a      	cmp	r2, r3
    35a2:	f000 80b4 	beq.w	370e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    35a6:	4b5d      	ldr	r3, [pc, #372]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    35a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35ac:	f003 0301 	and.w	r3, r3, #1
    35b0:	2b00      	cmp	r3, #0
    35b2:	d105      	bne.n	35c0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    35b4:	2301      	movs	r3, #1
    35b6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    35ba:	2000      	movs	r0, #0
    35bc:	f7ff fd66 	bl	308c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    35c0:	2002      	movs	r0, #2
    35c2:	f7ff fdcf 	bl	3164 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    35c6:	4b55      	ldr	r3, [pc, #340]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    35c8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    35cc:	4a53      	ldr	r2, [pc, #332]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    35ce:	f023 0301 	bic.w	r3, r3, #1
    35d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	889b      	ldrh	r3, [r3, #4]
    35da:	2b01      	cmp	r3, #1
    35dc:	f040 8097 	bne.w	370e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    35e0:	9b01      	ldr	r3, [sp, #4]
    35e2:	79db      	ldrb	r3, [r3, #7]
    35e4:	4a4d      	ldr	r2, [pc, #308]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    35e6:	f003 0303 	and.w	r3, r3, #3
    35ea:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    35ee:	4b4b      	ldr	r3, [pc, #300]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    35f0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    35f4:	9b01      	ldr	r3, [sp, #4]
    35f6:	799b      	ldrb	r3, [r3, #6]
    35f8:	00db      	lsls	r3, r3, #3
    35fa:	f003 0308 	and.w	r3, r3, #8
    35fe:	4313      	orrs	r3, r2
    3600:	4a46      	ldr	r2, [pc, #280]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3602:	f043 0301 	orr.w	r3, r3, #1
    3606:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    360a:	aa03      	add	r2, sp, #12
    360c:	a904      	add	r1, sp, #16
    360e:	a805      	add	r0, sp, #20
    3610:	f24c 3350 	movw	r3, #50000	; 0xc350
    3614:	f7fe ff6e 	bl	24f4 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3618:	4b40      	ldr	r3, [pc, #256]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    361a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    361e:	0e1b      	lsrs	r3, r3, #24
    3620:	f003 0301 	and.w	r3, r3, #1
    3624:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3626:	9a03      	ldr	r2, [sp, #12]
    3628:	a904      	add	r1, sp, #16
    362a:	ab05      	add	r3, sp, #20
    362c:	4618      	mov	r0, r3
    362e:	f7fe ff7b 	bl	2528 <Clock_Ip_TimeoutExpired>
    3632:	4603      	mov	r3, r0
    3634:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3638:	9b06      	ldr	r3, [sp, #24]
    363a:	2b00      	cmp	r3, #0
    363c:	d106      	bne.n	364c <Clock_Ip_SetFirc_TrustedCall+0x114>
    363e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3642:	f083 0301 	eor.w	r3, r3, #1
    3646:	b2db      	uxtb	r3, r3
    3648:	2b00      	cmp	r3, #0
    364a:	d1e5      	bne.n	3618 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    364c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3650:	2b00      	cmp	r3, #0
    3652:	d005      	beq.n	3660 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3654:	9b01      	ldr	r3, [sp, #4]
    3656:	681b      	ldr	r3, [r3, #0]
    3658:	4619      	mov	r1, r3
    365a:	2001      	movs	r0, #1
    365c:	f7fe ff3a 	bl	24d4 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3660:	2003      	movs	r0, #3
    3662:	f7ff fd7f 	bl	3164 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3666:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    366a:	2b00      	cmp	r3, #0
    366c:	d04f      	beq.n	370e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    366e:	2002      	movs	r0, #2
    3670:	f7ff fd26 	bl	30c0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3674:	e04b      	b.n	370e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3676:	4b29      	ldr	r3, [pc, #164]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3678:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    367c:	4a27      	ldr	r2, [pc, #156]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    367e:	f023 0301 	bic.w	r3, r3, #1
    3682:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	889b      	ldrh	r3, [r3, #4]
    368a:	2b01      	cmp	r3, #1
    368c:	d13f      	bne.n	370e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    368e:	9b01      	ldr	r3, [sp, #4]
    3690:	79db      	ldrb	r3, [r3, #7]
    3692:	4a22      	ldr	r2, [pc, #136]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3694:	f003 0303 	and.w	r3, r3, #3
    3698:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    369c:	4b1f      	ldr	r3, [pc, #124]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    369e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	799b      	ldrb	r3, [r3, #6]
    36a6:	00db      	lsls	r3, r3, #3
    36a8:	f003 0308 	and.w	r3, r3, #8
    36ac:	4313      	orrs	r3, r2
    36ae:	4a1b      	ldr	r2, [pc, #108]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    36b0:	f043 0301 	orr.w	r3, r3, #1
    36b4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    36b8:	aa03      	add	r2, sp, #12
    36ba:	a904      	add	r1, sp, #16
    36bc:	a805      	add	r0, sp, #20
    36be:	f24c 3350 	movw	r3, #50000	; 0xc350
    36c2:	f7fe ff17 	bl	24f4 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    36c6:	4b15      	ldr	r3, [pc, #84]	; (371c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    36c8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    36cc:	0e1b      	lsrs	r3, r3, #24
    36ce:	f003 0301 	and.w	r3, r3, #1
    36d2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    36d4:	9a03      	ldr	r2, [sp, #12]
    36d6:	a904      	add	r1, sp, #16
    36d8:	ab05      	add	r3, sp, #20
    36da:	4618      	mov	r0, r3
    36dc:	f7fe ff24 	bl	2528 <Clock_Ip_TimeoutExpired>
    36e0:	4603      	mov	r3, r0
    36e2:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    36e6:	9b06      	ldr	r3, [sp, #24]
    36e8:	2b00      	cmp	r3, #0
    36ea:	d106      	bne.n	36fa <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    36ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    36f0:	f083 0301 	eor.w	r3, r3, #1
    36f4:	b2db      	uxtb	r3, r3
    36f6:	2b00      	cmp	r3, #0
    36f8:	d1e5      	bne.n	36c6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    36fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    36fe:	2b00      	cmp	r3, #0
    3700:	d005      	beq.n	370e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3702:	9b01      	ldr	r3, [sp, #4]
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	4619      	mov	r1, r3
    3708:	2001      	movs	r0, #1
    370a:	f7fe fee3 	bl	24d4 <Clock_Ip_ReportClockErrors>
}
    370e:	bf00      	nop
    3710:	b00b      	add	sp, #44	; 0x2c
    3712:	f85d fb04 	ldr.w	pc, [sp], #4
    3716:	bf00      	nop
    3718:	00007b90 	.word	0x00007b90
    371c:	40064000 	.word	0x40064000

00003720 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3720:	b500      	push	{lr}
    3722:	b089      	sub	sp, #36	; 0x24
    3724:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3726:	2300      	movs	r3, #0
    3728:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    372c:	9b01      	ldr	r3, [sp, #4]
    372e:	889b      	ldrh	r3, [r3, #4]
    3730:	2b01      	cmp	r3, #1
    3732:	d132      	bne.n	379a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3734:	4b1b      	ldr	r3, [pc, #108]	; (37a4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3736:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    373a:	4a1a      	ldr	r2, [pc, #104]	; (37a4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    373c:	f043 0301 	orr.w	r3, r3, #1
    3740:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3744:	aa03      	add	r2, sp, #12
    3746:	a904      	add	r1, sp, #16
    3748:	a805      	add	r0, sp, #20
    374a:	f24c 3350 	movw	r3, #50000	; 0xc350
    374e:	f7fe fed1 	bl	24f4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3752:	4b14      	ldr	r3, [pc, #80]	; (37a4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3754:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3758:	0e1b      	lsrs	r3, r3, #24
    375a:	f003 0301 	and.w	r3, r3, #1
    375e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3760:	9a03      	ldr	r2, [sp, #12]
    3762:	a904      	add	r1, sp, #16
    3764:	ab05      	add	r3, sp, #20
    3766:	4618      	mov	r0, r3
    3768:	f7fe fede 	bl	2528 <Clock_Ip_TimeoutExpired>
    376c:	4603      	mov	r3, r0
    376e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3772:	9b06      	ldr	r3, [sp, #24]
    3774:	2b00      	cmp	r3, #0
    3776:	d106      	bne.n	3786 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3778:	f89d 301f 	ldrb.w	r3, [sp, #31]
    377c:	f083 0301 	eor.w	r3, r3, #1
    3780:	b2db      	uxtb	r3, r3
    3782:	2b00      	cmp	r3, #0
    3784:	d1e5      	bne.n	3752 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3786:	f89d 301f 	ldrb.w	r3, [sp, #31]
    378a:	2b00      	cmp	r3, #0
    378c:	d005      	beq.n	379a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    378e:	9b01      	ldr	r3, [sp, #4]
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	4619      	mov	r1, r3
    3794:	2001      	movs	r0, #1
    3796:	f7fe fe9d 	bl	24d4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    379a:	bf00      	nop
    379c:	b009      	add	sp, #36	; 0x24
    379e:	f85d fb04 	ldr.w	pc, [sp], #4
    37a2:	bf00      	nop
    37a4:	40064000 	.word	0x40064000

000037a8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    37a8:	b082      	sub	sp, #8
    37aa:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    37ac:	4b05      	ldr	r3, [pc, #20]	; (37c4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    37ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    37b2:	4a04      	ldr	r2, [pc, #16]	; (37c4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    37b4:	f023 0301 	bic.w	r3, r3, #1
    37b8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    37bc:	bf00      	nop
    37be:	b002      	add	sp, #8
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop
    37c4:	40064000 	.word	0x40064000

000037c8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    37c8:	b082      	sub	sp, #8
    37ca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37cc:	bf00      	nop
    37ce:	b002      	add	sp, #8
    37d0:	4770      	bx	lr

000037d2 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    37d2:	b082      	sub	sp, #8
    37d4:	9001      	str	r0, [sp, #4]
    37d6:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    37d8:	bf00      	nop
    37da:	b002      	add	sp, #8
    37dc:	4770      	bx	lr

000037de <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    37de:	b082      	sub	sp, #8
    37e0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    37e2:	bf00      	nop
    37e4:	b002      	add	sp, #8
    37e6:	4770      	bx	lr

000037e8 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    37e8:	b082      	sub	sp, #8
    37ea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37ec:	bf00      	nop
    37ee:	b002      	add	sp, #8
    37f0:	4770      	bx	lr

000037f2 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    37f2:	b082      	sub	sp, #8
    37f4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    37f6:	2302      	movs	r3, #2
}
    37f8:	4618      	mov	r0, r3
    37fa:	b002      	add	sp, #8
    37fc:	4770      	bx	lr

000037fe <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    37fe:	b082      	sub	sp, #8
    3800:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3802:	bf00      	nop
    3804:	b002      	add	sp, #8
    3806:	4770      	bx	lr

00003808 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3808:	b500      	push	{lr}
    380a:	b083      	sub	sp, #12
    380c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    380e:	9b01      	ldr	r3, [sp, #4]
    3810:	2b00      	cmp	r3, #0
    3812:	d002      	beq.n	381a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3814:	9801      	ldr	r0, [sp, #4]
    3816:	f000 f870 	bl	38fa <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    381a:	bf00      	nop
    381c:	b003      	add	sp, #12
    381e:	f85d fb04 	ldr.w	pc, [sp], #4

00003822 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3822:	b500      	push	{lr}
    3824:	b083      	sub	sp, #12
    3826:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	2b00      	cmp	r3, #0
    382c:	d002      	beq.n	3834 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    382e:	9801      	ldr	r0, [sp, #4]
    3830:	f000 f89a 	bl	3968 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3834:	bf00      	nop
    3836:	b003      	add	sp, #12
    3838:	f85d fb04 	ldr.w	pc, [sp], #4

0000383c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    383c:	b500      	push	{lr}
    383e:	b089      	sub	sp, #36	; 0x24
    3840:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3842:	2301      	movs	r3, #1
    3844:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3846:	2300      	movs	r3, #0
    3848:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    384c:	4b1e      	ldr	r3, [pc, #120]	; (38c8 <Clock_Ip_CompleteSpll+0x8c>)
    384e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3852:	f003 0301 	and.w	r3, r3, #1
    3856:	2b00      	cmp	r3, #0
    3858:	d02f      	beq.n	38ba <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    385a:	aa02      	add	r2, sp, #8
    385c:	a903      	add	r1, sp, #12
    385e:	a804      	add	r0, sp, #16
    3860:	f24c 3350 	movw	r3, #50000	; 0xc350
    3864:	f7fe fe46 	bl	24f4 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3868:	4b17      	ldr	r3, [pc, #92]	; (38c8 <Clock_Ip_CompleteSpll+0x8c>)
    386a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    386e:	0e1b      	lsrs	r3, r3, #24
    3870:	f003 0301 	and.w	r3, r3, #1
    3874:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3876:	9a02      	ldr	r2, [sp, #8]
    3878:	a903      	add	r1, sp, #12
    387a:	ab04      	add	r3, sp, #16
    387c:	4618      	mov	r0, r3
    387e:	f7fe fe53 	bl	2528 <Clock_Ip_TimeoutExpired>
    3882:	4603      	mov	r3, r0
    3884:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3888:	9b05      	ldr	r3, [sp, #20]
    388a:	2b00      	cmp	r3, #0
    388c:	d106      	bne.n	389c <Clock_Ip_CompleteSpll+0x60>
    388e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3892:	f083 0301 	eor.w	r3, r3, #1
    3896:	b2db      	uxtb	r3, r3
    3898:	2b00      	cmp	r3, #0
    389a:	d1e5      	bne.n	3868 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    389c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    38a0:	f083 0301 	eor.w	r3, r3, #1
    38a4:	b2db      	uxtb	r3, r3
    38a6:	2b00      	cmp	r3, #0
    38a8:	d002      	beq.n	38b0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    38aa:	2302      	movs	r3, #2
    38ac:	9307      	str	r3, [sp, #28]
    38ae:	e006      	b.n	38be <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    38b0:	9901      	ldr	r1, [sp, #4]
    38b2:	2001      	movs	r0, #1
    38b4:	f7fe fe0e 	bl	24d4 <Clock_Ip_ReportClockErrors>
    38b8:	e001      	b.n	38be <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    38ba:	2300      	movs	r3, #0
    38bc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    38be:	9b07      	ldr	r3, [sp, #28]
}
    38c0:	4618      	mov	r0, r3
    38c2:	b009      	add	sp, #36	; 0x24
    38c4:	f85d fb04 	ldr.w	pc, [sp], #4
    38c8:	40064000 	.word	0x40064000

000038cc <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    38cc:	b500      	push	{lr}
    38ce:	b083      	sub	sp, #12
    38d0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    38d2:	9801      	ldr	r0, [sp, #4]
    38d4:	f000 f886 	bl	39e4 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    38d8:	bf00      	nop
    38da:	b003      	add	sp, #12
    38dc:	f85d fb04 	ldr.w	pc, [sp], #4

000038e0 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    38e0:	b500      	push	{lr}
    38e2:	b083      	sub	sp, #12
    38e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38e6:	9b01      	ldr	r3, [sp, #4]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d002      	beq.n	38f2 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    38ec:	9801      	ldr	r0, [sp, #4]
    38ee:	f000 f891 	bl	3a14 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38f2:	bf00      	nop
    38f4:	b003      	add	sp, #12
    38f6:	f85d fb04 	ldr.w	pc, [sp], #4

000038fa <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    38fa:	b082      	sub	sp, #8
    38fc:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    38fe:	4b19      	ldr	r3, [pc, #100]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3900:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3904:	4a17      	ldr	r2, [pc, #92]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    390a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    390e:	4b15      	ldr	r3, [pc, #84]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3910:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3914:	4a13      	ldr	r2, [pc, #76]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    391a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    391e:	4b11      	ldr	r3, [pc, #68]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3920:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3924:	4a0f      	ldr	r2, [pc, #60]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3926:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    392a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    392e:	4b0d      	ldr	r3, [pc, #52]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3930:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3934:	4a0b      	ldr	r2, [pc, #44]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3936:	f023 0301 	bic.w	r3, r3, #1
    393a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    393e:	4b09      	ldr	r3, [pc, #36]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3940:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3944:	4a07      	ldr	r2, [pc, #28]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3946:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    394a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    394e:	4b05      	ldr	r3, [pc, #20]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3950:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3954:	4a03      	ldr	r2, [pc, #12]	; (3964 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3956:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    395a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    395e:	bf00      	nop
    3960:	b002      	add	sp, #8
    3962:	4770      	bx	lr
    3964:	40064000 	.word	0x40064000

00003968 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3968:	b082      	sub	sp, #8
    396a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	889b      	ldrh	r3, [r3, #4]
    3970:	2b01      	cmp	r3, #1
    3972:	d12f      	bne.n	39d4 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3974:	4b1a      	ldr	r3, [pc, #104]	; (39e0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3976:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    397a:	9b01      	ldr	r3, [sp, #4]
    397c:	7b5b      	ldrb	r3, [r3, #13]
    397e:	3b01      	subs	r3, #1
    3980:	021b      	lsls	r3, r3, #8
    3982:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3986:	9b01      	ldr	r3, [sp, #4]
    3988:	7d1b      	ldrb	r3, [r3, #20]
    398a:	3b10      	subs	r3, #16
    398c:	041b      	lsls	r3, r3, #16
    398e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3992:	430b      	orrs	r3, r1
    3994:	4912      	ldr	r1, [pc, #72]	; (39e0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3996:	4313      	orrs	r3, r2
    3998:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    399c:	9b01      	ldr	r3, [sp, #4]
    399e:	7fdb      	ldrb	r3, [r3, #31]
    39a0:	2b02      	cmp	r3, #2
    39a2:	d011      	beq.n	39c8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    39a4:	2b02      	cmp	r3, #2
    39a6:	dc17      	bgt.n	39d8 <Clock_Ip_SetSpll_TrustedCall+0x70>
    39a8:	2b00      	cmp	r3, #0
    39aa:	d002      	beq.n	39b2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    39ac:	2b01      	cmp	r3, #1
    39ae:	d005      	beq.n	39bc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    39b0:	e012      	b.n	39d8 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    39b2:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    39b4:	2200      	movs	r2, #0
    39b6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    39ba:	e00e      	b.n	39da <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    39bc:	4b08      	ldr	r3, [pc, #32]	; (39e0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    39be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    39c2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    39c6:	e008      	b.n	39da <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    39c8:	4b05      	ldr	r3, [pc, #20]	; (39e0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    39ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    39ce:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    39d2:	e002      	b.n	39da <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    39d4:	bf00      	nop
    39d6:	e000      	b.n	39da <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    39d8:	bf00      	nop
}
    39da:	bf00      	nop
    39dc:	b002      	add	sp, #8
    39de:	4770      	bx	lr
    39e0:	40064000 	.word	0x40064000

000039e4 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    39e4:	b082      	sub	sp, #8
    39e6:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    39e8:	4b09      	ldr	r3, [pc, #36]	; (3a10 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    39ea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    39ee:	4a08      	ldr	r2, [pc, #32]	; (3a10 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    39f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39f4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    39f8:	4b05      	ldr	r3, [pc, #20]	; (3a10 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    39fa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    39fe:	4a04      	ldr	r2, [pc, #16]	; (3a10 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3a00:	f023 0301 	bic.w	r3, r3, #1
    3a04:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3a08:	bf00      	nop
    3a0a:	b002      	add	sp, #8
    3a0c:	4770      	bx	lr
    3a0e:	bf00      	nop
    3a10:	40064000 	.word	0x40064000

00003a14 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3a14:	b082      	sub	sp, #8
    3a16:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3a18:	9b01      	ldr	r3, [sp, #4]
    3a1a:	889b      	ldrh	r3, [r3, #4]
    3a1c:	2b01      	cmp	r3, #1
    3a1e:	d107      	bne.n	3a30 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3a20:	4b05      	ldr	r3, [pc, #20]	; (3a38 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3a22:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3a26:	4a04      	ldr	r2, [pc, #16]	; (3a38 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3a28:	f043 0301 	orr.w	r3, r3, #1
    3a2c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3a30:	bf00      	nop
    3a32:	b002      	add	sp, #8
    3a34:	4770      	bx	lr
    3a36:	bf00      	nop
    3a38:	40064000 	.word	0x40064000

00003a3c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3a3c:	b082      	sub	sp, #8
    3a3e:	9001      	str	r0, [sp, #4]
    3a40:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3a42:	bf00      	nop
    3a44:	b002      	add	sp, #8
    3a46:	4770      	bx	lr

00003a48 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3a48:	b082      	sub	sp, #8
    3a4a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a4c:	bf00      	nop
    3a4e:	b002      	add	sp, #8
    3a50:	4770      	bx	lr

00003a52 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3a52:	b500      	push	{lr}
    3a54:	b083      	sub	sp, #12
    3a56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a58:	9b01      	ldr	r3, [sp, #4]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d002      	beq.n	3a64 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    3a5e:	9801      	ldr	r0, [sp, #4]
    3a60:	f000 f8ee 	bl	3c40 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a64:	bf00      	nop
    3a66:	b003      	add	sp, #12
    3a68:	f85d fb04 	ldr.w	pc, [sp], #4

00003a6c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3a6c:	b500      	push	{lr}
    3a6e:	b083      	sub	sp, #12
    3a70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a72:	9b01      	ldr	r3, [sp, #4]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d002      	beq.n	3a7e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3a78:	9801      	ldr	r0, [sp, #4]
    3a7a:	f000 f8ff 	bl	3c7c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a7e:	bf00      	nop
    3a80:	b003      	add	sp, #12
    3a82:	f85d fb04 	ldr.w	pc, [sp], #4

00003a86 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3a86:	b500      	push	{lr}
    3a88:	b083      	sub	sp, #12
    3a8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a8c:	9b01      	ldr	r3, [sp, #4]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d002      	beq.n	3a98 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3a92:	9801      	ldr	r0, [sp, #4]
    3a94:	f000 f912 	bl	3cbc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a98:	bf00      	nop
    3a9a:	b003      	add	sp, #12
    3a9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003aa0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3aa0:	b500      	push	{lr}
    3aa2:	b083      	sub	sp, #12
    3aa4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3aa6:	9b01      	ldr	r3, [sp, #4]
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	d002      	beq.n	3ab2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3aac:	9801      	ldr	r0, [sp, #4]
    3aae:	f000 f925 	bl	3cfc <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ab2:	bf00      	nop
    3ab4:	b003      	add	sp, #12
    3ab6:	f85d fb04 	ldr.w	pc, [sp], #4

00003aba <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3aba:	b500      	push	{lr}
    3abc:	b083      	sub	sp, #12
    3abe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ac0:	9b01      	ldr	r3, [sp, #4]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d002      	beq.n	3acc <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3ac6:	9801      	ldr	r0, [sp, #4]
    3ac8:	f000 f936 	bl	3d38 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3acc:	bf00      	nop
    3ace:	b003      	add	sp, #12
    3ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ad4 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ad4:	b500      	push	{lr}
    3ad6:	b083      	sub	sp, #12
    3ad8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ada:	9b01      	ldr	r3, [sp, #4]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d002      	beq.n	3ae6 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3ae0:	9801      	ldr	r0, [sp, #4]
    3ae2:	f000 f949 	bl	3d78 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ae6:	bf00      	nop
    3ae8:	b003      	add	sp, #12
    3aea:	f85d fb04 	ldr.w	pc, [sp], #4

00003aee <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3aee:	b500      	push	{lr}
    3af0:	b083      	sub	sp, #12
    3af2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3af4:	9b01      	ldr	r3, [sp, #4]
    3af6:	2b00      	cmp	r3, #0
    3af8:	d002      	beq.n	3b00 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3afa:	9801      	ldr	r0, [sp, #4]
    3afc:	f000 f958 	bl	3db0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b00:	bf00      	nop
    3b02:	b003      	add	sp, #12
    3b04:	f85d fb04 	ldr.w	pc, [sp], #4

00003b08 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b08:	b500      	push	{lr}
    3b0a:	b083      	sub	sp, #12
    3b0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b0e:	9b01      	ldr	r3, [sp, #4]
    3b10:	2b00      	cmp	r3, #0
    3b12:	d002      	beq.n	3b1a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3b14:	9801      	ldr	r0, [sp, #4]
    3b16:	f000 f969 	bl	3dec <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b1a:	bf00      	nop
    3b1c:	b003      	add	sp, #12
    3b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00003b22 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b22:	b500      	push	{lr}
    3b24:	b083      	sub	sp, #12
    3b26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b28:	9b01      	ldr	r3, [sp, #4]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d002      	beq.n	3b34 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3b2e:	9801      	ldr	r0, [sp, #4]
    3b30:	f000 f978 	bl	3e24 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b34:	bf00      	nop
    3b36:	b003      	add	sp, #12
    3b38:	f85d fb04 	ldr.w	pc, [sp], #4

00003b3c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b3c:	b500      	push	{lr}
    3b3e:	b083      	sub	sp, #12
    3b40:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b42:	9b01      	ldr	r3, [sp, #4]
    3b44:	2b00      	cmp	r3, #0
    3b46:	d002      	beq.n	3b4e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3b48:	9801      	ldr	r0, [sp, #4]
    3b4a:	f000 f989 	bl	3e60 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b4e:	bf00      	nop
    3b50:	b003      	add	sp, #12
    3b52:	f85d fb04 	ldr.w	pc, [sp], #4

00003b56 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b56:	b500      	push	{lr}
    3b58:	b083      	sub	sp, #12
    3b5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d002      	beq.n	3b68 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3b62:	9801      	ldr	r0, [sp, #4]
    3b64:	f000 f998 	bl	3e98 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b68:	bf00      	nop
    3b6a:	b003      	add	sp, #12
    3b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b70 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b70:	b500      	push	{lr}
    3b72:	b083      	sub	sp, #12
    3b74:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b76:	9b01      	ldr	r3, [sp, #4]
    3b78:	2b00      	cmp	r3, #0
    3b7a:	d002      	beq.n	3b82 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3b7c:	9801      	ldr	r0, [sp, #4]
    3b7e:	f000 f9a9 	bl	3ed4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b82:	bf00      	nop
    3b84:	b003      	add	sp, #12
    3b86:	f85d fb04 	ldr.w	pc, [sp], #4

00003b8a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b8a:	b500      	push	{lr}
    3b8c:	b083      	sub	sp, #12
    3b8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b90:	9b01      	ldr	r3, [sp, #4]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d002      	beq.n	3b9c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3b96:	9801      	ldr	r0, [sp, #4]
    3b98:	f000 f9e6 	bl	3f68 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b9c:	bf00      	nop
    3b9e:	b003      	add	sp, #12
    3ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ba4:	b500      	push	{lr}
    3ba6:	b083      	sub	sp, #12
    3ba8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3baa:	9b01      	ldr	r3, [sp, #4]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d002      	beq.n	3bb6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3bb0:	9801      	ldr	r0, [sp, #4]
    3bb2:	f000 fa25 	bl	4000 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bb6:	bf00      	nop
    3bb8:	b003      	add	sp, #12
    3bba:	f85d fb04 	ldr.w	pc, [sp], #4

00003bbe <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3bbe:	b500      	push	{lr}
    3bc0:	b083      	sub	sp, #12
    3bc2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bc4:	9b01      	ldr	r3, [sp, #4]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d002      	beq.n	3bd0 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3bca:	9801      	ldr	r0, [sp, #4]
    3bcc:	f000 fa2a 	bl	4024 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bd0:	bf00      	nop
    3bd2:	b003      	add	sp, #12
    3bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00003bd8 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3bd8:	b500      	push	{lr}
    3bda:	b083      	sub	sp, #12
    3bdc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bde:	9b01      	ldr	r3, [sp, #4]
    3be0:	2b00      	cmp	r3, #0
    3be2:	d002      	beq.n	3bea <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3be4:	9801      	ldr	r0, [sp, #4]
    3be6:	f000 fa3b 	bl	4060 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bea:	bf00      	nop
    3bec:	b003      	add	sp, #12
    3bee:	f85d fb04 	ldr.w	pc, [sp], #4

00003bf2 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3bf2:	b500      	push	{lr}
    3bf4:	b083      	sub	sp, #12
    3bf6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bf8:	9b01      	ldr	r3, [sp, #4]
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d002      	beq.n	3c04 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3bfe:	9801      	ldr	r0, [sp, #4]
    3c00:	f000 fa56 	bl	40b0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c04:	bf00      	nop
    3c06:	b003      	add	sp, #12
    3c08:	f85d fb04 	ldr.w	pc, [sp], #4

00003c0c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c0c:	b500      	push	{lr}
    3c0e:	b083      	sub	sp, #12
    3c10:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c12:	9b01      	ldr	r3, [sp, #4]
    3c14:	2b00      	cmp	r3, #0
    3c16:	d002      	beq.n	3c1e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3c18:	9801      	ldr	r0, [sp, #4]
    3c1a:	f000 fa79 	bl	4110 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c1e:	bf00      	nop
    3c20:	b003      	add	sp, #12
    3c22:	f85d fb04 	ldr.w	pc, [sp], #4

00003c26 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c26:	b500      	push	{lr}
    3c28:	b083      	sub	sp, #12
    3c2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c2c:	9b01      	ldr	r3, [sp, #4]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d002      	beq.n	3c38 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3c32:	9801      	ldr	r0, [sp, #4]
    3c34:	f000 fa8a 	bl	414c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c38:	bf00      	nop
    3c3a:	b003      	add	sp, #12
    3c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00003c40 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c40:	b084      	sub	sp, #16
    3c42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c44:	4b0b      	ldr	r3, [pc, #44]	; (3c74 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3c46:	795b      	ldrb	r3, [r3, #5]
    3c48:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3c4a:	4b0b      	ldr	r3, [pc, #44]	; (3c78 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3c4c:	695b      	ldr	r3, [r3, #20]
    3c4e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3c50:	9b02      	ldr	r3, [sp, #8]
    3c52:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3c56:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3c58:	9b03      	ldr	r3, [sp, #12]
    3c5a:	061b      	lsls	r3, r3, #24
    3c5c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3c60:	9a02      	ldr	r2, [sp, #8]
    3c62:	4313      	orrs	r3, r2
    3c64:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3c66:	4a04      	ldr	r2, [pc, #16]	; (3c78 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3c68:	9b02      	ldr	r3, [sp, #8]
    3c6a:	6153      	str	r3, [r2, #20]
}
    3c6c:	bf00      	nop
    3c6e:	b004      	add	sp, #16
    3c70:	4770      	bx	lr
    3c72:	bf00      	nop
    3c74:	00007ef8 	.word	0x00007ef8
    3c78:	40064000 	.word	0x40064000

00003c7c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c7c:	b084      	sub	sp, #16
    3c7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c80:	9b01      	ldr	r3, [sp, #4]
    3c82:	685b      	ldr	r3, [r3, #4]
    3c84:	4a0b      	ldr	r2, [pc, #44]	; (3cb4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3c86:	5cd3      	ldrb	r3, [r2, r3]
    3c88:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3c8a:	4b0b      	ldr	r3, [pc, #44]	; (3cb8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3c8c:	695b      	ldr	r3, [r3, #20]
    3c8e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3c90:	9b02      	ldr	r3, [sp, #8]
    3c92:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3c96:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3c98:	9b03      	ldr	r3, [sp, #12]
    3c9a:	061b      	lsls	r3, r3, #24
    3c9c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3ca0:	9a02      	ldr	r2, [sp, #8]
    3ca2:	4313      	orrs	r3, r2
    3ca4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3ca6:	4a04      	ldr	r2, [pc, #16]	; (3cb8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3ca8:	9b02      	ldr	r3, [sp, #8]
    3caa:	6153      	str	r3, [r2, #20]
}
    3cac:	bf00      	nop
    3cae:	b004      	add	sp, #16
    3cb0:	4770      	bx	lr
    3cb2:	bf00      	nop
    3cb4:	00007ef8 	.word	0x00007ef8
    3cb8:	40064000 	.word	0x40064000

00003cbc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cbc:	b084      	sub	sp, #16
    3cbe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3cc0:	9b01      	ldr	r3, [sp, #4]
    3cc2:	685b      	ldr	r3, [r3, #4]
    3cc4:	4a0b      	ldr	r2, [pc, #44]	; (3cf4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3cc6:	5cd3      	ldrb	r3, [r2, r3]
    3cc8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3cca:	4b0b      	ldr	r3, [pc, #44]	; (3cf8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3ccc:	699b      	ldr	r3, [r3, #24]
    3cce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3cd0:	9b02      	ldr	r3, [sp, #8]
    3cd2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3cd6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3cd8:	9b03      	ldr	r3, [sp, #12]
    3cda:	061b      	lsls	r3, r3, #24
    3cdc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3ce0:	9a02      	ldr	r2, [sp, #8]
    3ce2:	4313      	orrs	r3, r2
    3ce4:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3ce6:	4a04      	ldr	r2, [pc, #16]	; (3cf8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3ce8:	9b02      	ldr	r3, [sp, #8]
    3cea:	6193      	str	r3, [r2, #24]
}
    3cec:	bf00      	nop
    3cee:	b004      	add	sp, #16
    3cf0:	4770      	bx	lr
    3cf2:	bf00      	nop
    3cf4:	00007ef8 	.word	0x00007ef8
    3cf8:	40064000 	.word	0x40064000

00003cfc <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cfc:	b084      	sub	sp, #16
    3cfe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d00:	4b0b      	ldr	r3, [pc, #44]	; (3d30 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3d02:	795b      	ldrb	r3, [r3, #5]
    3d04:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3d06:	4b0b      	ldr	r3, [pc, #44]	; (3d34 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3d08:	69db      	ldr	r3, [r3, #28]
    3d0a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3d0c:	9b02      	ldr	r3, [sp, #8]
    3d0e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3d12:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3d14:	9b03      	ldr	r3, [sp, #12]
    3d16:	061b      	lsls	r3, r3, #24
    3d18:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3d1c:	9a02      	ldr	r2, [sp, #8]
    3d1e:	4313      	orrs	r3, r2
    3d20:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3d22:	4a04      	ldr	r2, [pc, #16]	; (3d34 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3d24:	9b02      	ldr	r3, [sp, #8]
    3d26:	61d3      	str	r3, [r2, #28]
}
    3d28:	bf00      	nop
    3d2a:	b004      	add	sp, #16
    3d2c:	4770      	bx	lr
    3d2e:	bf00      	nop
    3d30:	00007ef8 	.word	0x00007ef8
    3d34:	40064000 	.word	0x40064000

00003d38 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d38:	b084      	sub	sp, #16
    3d3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d3c:	9b01      	ldr	r3, [sp, #4]
    3d3e:	685b      	ldr	r3, [r3, #4]
    3d40:	4a0b      	ldr	r2, [pc, #44]	; (3d70 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3d42:	5cd3      	ldrb	r3, [r2, r3]
    3d44:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3d46:	4b0b      	ldr	r3, [pc, #44]	; (3d74 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3d48:	69db      	ldr	r3, [r3, #28]
    3d4a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3d4c:	9b02      	ldr	r3, [sp, #8]
    3d4e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3d52:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3d54:	9b03      	ldr	r3, [sp, #12]
    3d56:	061b      	lsls	r3, r3, #24
    3d58:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3d5c:	9a02      	ldr	r2, [sp, #8]
    3d5e:	4313      	orrs	r3, r2
    3d60:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3d62:	4a04      	ldr	r2, [pc, #16]	; (3d74 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3d64:	9b02      	ldr	r3, [sp, #8]
    3d66:	61d3      	str	r3, [r2, #28]
}
    3d68:	bf00      	nop
    3d6a:	b004      	add	sp, #16
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	00007ef8 	.word	0x00007ef8
    3d74:	40064000 	.word	0x40064000

00003d78 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d78:	b084      	sub	sp, #16
    3d7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d7c:	4b0a      	ldr	r3, [pc, #40]	; (3da8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3d7e:	7b9b      	ldrb	r3, [r3, #14]
    3d80:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3d82:	4b0a      	ldr	r3, [pc, #40]	; (3dac <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3d84:	691b      	ldr	r3, [r3, #16]
    3d86:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3d88:	9b02      	ldr	r3, [sp, #8]
    3d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3d8e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3d90:	9b03      	ldr	r3, [sp, #12]
    3d92:	011b      	lsls	r3, r3, #4
    3d94:	9a02      	ldr	r2, [sp, #8]
    3d96:	4313      	orrs	r3, r2
    3d98:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3d9a:	4a04      	ldr	r2, [pc, #16]	; (3dac <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3d9c:	9b02      	ldr	r3, [sp, #8]
    3d9e:	6113      	str	r3, [r2, #16]
}
    3da0:	bf00      	nop
    3da2:	b004      	add	sp, #16
    3da4:	4770      	bx	lr
    3da6:	bf00      	nop
    3da8:	00007ea0 	.word	0x00007ea0
    3dac:	40048000 	.word	0x40048000

00003db0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3db0:	b084      	sub	sp, #16
    3db2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3db4:	9b01      	ldr	r3, [sp, #4]
    3db6:	685b      	ldr	r3, [r3, #4]
    3db8:	4a0a      	ldr	r2, [pc, #40]	; (3de4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3dba:	5cd3      	ldrb	r3, [r2, r3]
    3dbc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3dbe:	4b0a      	ldr	r3, [pc, #40]	; (3de8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3dc0:	691b      	ldr	r3, [r3, #16]
    3dc2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3dc4:	9b02      	ldr	r3, [sp, #8]
    3dc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3dca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3dcc:	9b03      	ldr	r3, [sp, #12]
    3dce:	011b      	lsls	r3, r3, #4
    3dd0:	9a02      	ldr	r2, [sp, #8]
    3dd2:	4313      	orrs	r3, r2
    3dd4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3dd6:	4a04      	ldr	r2, [pc, #16]	; (3de8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3dd8:	9b02      	ldr	r3, [sp, #8]
    3dda:	6113      	str	r3, [r2, #16]
}
    3ddc:	bf00      	nop
    3dde:	b004      	add	sp, #16
    3de0:	4770      	bx	lr
    3de2:	bf00      	nop
    3de4:	00007ea0 	.word	0x00007ea0
    3de8:	40048000 	.word	0x40048000

00003dec <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3dec:	b084      	sub	sp, #16
    3dee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3df0:	4b0a      	ldr	r3, [pc, #40]	; (3e1c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3df2:	785b      	ldrb	r3, [r3, #1]
    3df4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3df6:	4b0a      	ldr	r3, [pc, #40]	; (3e20 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3df8:	691b      	ldr	r3, [r3, #16]
    3dfa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3dfc:	9b02      	ldr	r3, [sp, #8]
    3dfe:	f023 030c 	bic.w	r3, r3, #12
    3e02:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3e04:	9b03      	ldr	r3, [sp, #12]
    3e06:	009b      	lsls	r3, r3, #2
    3e08:	9a02      	ldr	r2, [sp, #8]
    3e0a:	4313      	orrs	r3, r2
    3e0c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3e0e:	4a04      	ldr	r2, [pc, #16]	; (3e20 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3e10:	9b02      	ldr	r3, [sp, #8]
    3e12:	6113      	str	r3, [r2, #16]
}
    3e14:	bf00      	nop
    3e16:	b004      	add	sp, #16
    3e18:	4770      	bx	lr
    3e1a:	bf00      	nop
    3e1c:	00007f58 	.word	0x00007f58
    3e20:	40048000 	.word	0x40048000

00003e24 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e24:	b084      	sub	sp, #16
    3e26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e28:	9b01      	ldr	r3, [sp, #4]
    3e2a:	685b      	ldr	r3, [r3, #4]
    3e2c:	4a0a      	ldr	r2, [pc, #40]	; (3e58 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3e2e:	5cd3      	ldrb	r3, [r2, r3]
    3e30:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3e32:	4b0a      	ldr	r3, [pc, #40]	; (3e5c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3e34:	691b      	ldr	r3, [r3, #16]
    3e36:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3e38:	9b02      	ldr	r3, [sp, #8]
    3e3a:	f023 030c 	bic.w	r3, r3, #12
    3e3e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3e40:	9b03      	ldr	r3, [sp, #12]
    3e42:	009b      	lsls	r3, r3, #2
    3e44:	9a02      	ldr	r2, [sp, #8]
    3e46:	4313      	orrs	r3, r2
    3e48:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3e4a:	4a04      	ldr	r2, [pc, #16]	; (3e5c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3e4c:	9b02      	ldr	r3, [sp, #8]
    3e4e:	6113      	str	r3, [r2, #16]
}
    3e50:	bf00      	nop
    3e52:	b004      	add	sp, #16
    3e54:	4770      	bx	lr
    3e56:	bf00      	nop
    3e58:	00007f58 	.word	0x00007f58
    3e5c:	40048000 	.word	0x40048000

00003e60 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e60:	b084      	sub	sp, #16
    3e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e64:	4b0a      	ldr	r3, [pc, #40]	; (3e90 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3e66:	795b      	ldrb	r3, [r3, #5]
    3e68:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3e6a:	4b0a      	ldr	r3, [pc, #40]	; (3e94 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3e6c:	6a1b      	ldr	r3, [r3, #32]
    3e6e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3e70:	9b02      	ldr	r3, [sp, #8]
    3e72:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3e76:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3e78:	9b03      	ldr	r3, [sp, #12]
    3e7a:	061b      	lsls	r3, r3, #24
    3e7c:	9a02      	ldr	r2, [sp, #8]
    3e7e:	4313      	orrs	r3, r2
    3e80:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3e82:	4a04      	ldr	r2, [pc, #16]	; (3e94 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3e84:	9b02      	ldr	r3, [sp, #8]
    3e86:	6213      	str	r3, [r2, #32]
}
    3e88:	bf00      	nop
    3e8a:	b004      	add	sp, #16
    3e8c:	4770      	bx	lr
    3e8e:	bf00      	nop
    3e90:	00007ef8 	.word	0x00007ef8
    3e94:	40064000 	.word	0x40064000

00003e98 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e98:	b084      	sub	sp, #16
    3e9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e9c:	9b01      	ldr	r3, [sp, #4]
    3e9e:	685b      	ldr	r3, [r3, #4]
    3ea0:	4a0a      	ldr	r2, [pc, #40]	; (3ecc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3ea2:	5cd3      	ldrb	r3, [r2, r3]
    3ea4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3ea6:	4b0a      	ldr	r3, [pc, #40]	; (3ed0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3ea8:	6a1b      	ldr	r3, [r3, #32]
    3eaa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3eac:	9b02      	ldr	r3, [sp, #8]
    3eae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3eb2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3eb4:	9b03      	ldr	r3, [sp, #12]
    3eb6:	061b      	lsls	r3, r3, #24
    3eb8:	9a02      	ldr	r2, [sp, #8]
    3eba:	4313      	orrs	r3, r2
    3ebc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3ebe:	4a04      	ldr	r2, [pc, #16]	; (3ed0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3ec0:	9b02      	ldr	r3, [sp, #8]
    3ec2:	6213      	str	r3, [r2, #32]
}
    3ec4:	bf00      	nop
    3ec6:	b004      	add	sp, #16
    3ec8:	4770      	bx	lr
    3eca:	bf00      	nop
    3ecc:	00007ef8 	.word	0x00007ef8
    3ed0:	40064000 	.word	0x40064000

00003ed4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ed4:	b086      	sub	sp, #24
    3ed6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ed8:	4b20      	ldr	r3, [pc, #128]	; (3f5c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3eda:	795b      	ldrb	r3, [r3, #5]
    3edc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3ede:	9b01      	ldr	r3, [sp, #4]
    3ee0:	681a      	ldr	r2, [r3, #0]
    3ee2:	491f      	ldr	r1, [pc, #124]	; (3f60 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3ee4:	4613      	mov	r3, r2
    3ee6:	00db      	lsls	r3, r3, #3
    3ee8:	4413      	add	r3, r2
    3eea:	440b      	add	r3, r1
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3ef0:	4b1c      	ldr	r3, [pc, #112]	; (3f64 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3ef2:	68db      	ldr	r3, [r3, #12]
    3ef4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3ef6:	9b03      	ldr	r3, [sp, #12]
    3ef8:	2b03      	cmp	r3, #3
    3efa:	d813      	bhi.n	3f24 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3efc:	9b03      	ldr	r3, [sp, #12]
    3efe:	005b      	lsls	r3, r3, #1
    3f00:	3318      	adds	r3, #24
    3f02:	2203      	movs	r2, #3
    3f04:	fa02 f303 	lsl.w	r3, r2, r3
    3f08:	43db      	mvns	r3, r3
    3f0a:	9a05      	ldr	r2, [sp, #20]
    3f0c:	4013      	ands	r3, r2
    3f0e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3f10:	9b03      	ldr	r3, [sp, #12]
    3f12:	005b      	lsls	r3, r3, #1
    3f14:	3318      	adds	r3, #24
    3f16:	9a04      	ldr	r2, [sp, #16]
    3f18:	fa02 f303 	lsl.w	r3, r2, r3
    3f1c:	9a05      	ldr	r2, [sp, #20]
    3f1e:	4313      	orrs	r3, r2
    3f20:	9305      	str	r3, [sp, #20]
    3f22:	e014      	b.n	3f4e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3f24:	9b03      	ldr	r3, [sp, #12]
    3f26:	3b04      	subs	r3, #4
    3f28:	005b      	lsls	r3, r3, #1
    3f2a:	3310      	adds	r3, #16
    3f2c:	2203      	movs	r2, #3
    3f2e:	fa02 f303 	lsl.w	r3, r2, r3
    3f32:	43db      	mvns	r3, r3
    3f34:	9a05      	ldr	r2, [sp, #20]
    3f36:	4013      	ands	r3, r2
    3f38:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3f3a:	9b03      	ldr	r3, [sp, #12]
    3f3c:	3b04      	subs	r3, #4
    3f3e:	005b      	lsls	r3, r3, #1
    3f40:	3310      	adds	r3, #16
    3f42:	9a04      	ldr	r2, [sp, #16]
    3f44:	fa02 f303 	lsl.w	r3, r2, r3
    3f48:	9a05      	ldr	r2, [sp, #20]
    3f4a:	4313      	orrs	r3, r2
    3f4c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3f4e:	4a05      	ldr	r2, [pc, #20]	; (3f64 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3f50:	9b05      	ldr	r3, [sp, #20]
    3f52:	60d3      	str	r3, [r2, #12]
}
    3f54:	bf00      	nop
    3f56:	b006      	add	sp, #24
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	00007ea0 	.word	0x00007ea0
    3f60:	00007b90 	.word	0x00007b90
    3f64:	40048000 	.word	0x40048000

00003f68 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3f68:	b086      	sub	sp, #24
    3f6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3f6c:	9b01      	ldr	r3, [sp, #4]
    3f6e:	685b      	ldr	r3, [r3, #4]
    3f70:	4a20      	ldr	r2, [pc, #128]	; (3ff4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3f72:	5cd3      	ldrb	r3, [r2, r3]
    3f74:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3f76:	9b01      	ldr	r3, [sp, #4]
    3f78:	681a      	ldr	r2, [r3, #0]
    3f7a:	491f      	ldr	r1, [pc, #124]	; (3ff8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3f7c:	4613      	mov	r3, r2
    3f7e:	00db      	lsls	r3, r3, #3
    3f80:	4413      	add	r3, r2
    3f82:	440b      	add	r3, r1
    3f84:	781b      	ldrb	r3, [r3, #0]
    3f86:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3f88:	4b1c      	ldr	r3, [pc, #112]	; (3ffc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3f8a:	68db      	ldr	r3, [r3, #12]
    3f8c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3f8e:	9b03      	ldr	r3, [sp, #12]
    3f90:	2b03      	cmp	r3, #3
    3f92:	d813      	bhi.n	3fbc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3f94:	9b03      	ldr	r3, [sp, #12]
    3f96:	005b      	lsls	r3, r3, #1
    3f98:	3318      	adds	r3, #24
    3f9a:	2203      	movs	r2, #3
    3f9c:	fa02 f303 	lsl.w	r3, r2, r3
    3fa0:	43db      	mvns	r3, r3
    3fa2:	9a05      	ldr	r2, [sp, #20]
    3fa4:	4013      	ands	r3, r2
    3fa6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3fa8:	9b03      	ldr	r3, [sp, #12]
    3faa:	005b      	lsls	r3, r3, #1
    3fac:	3318      	adds	r3, #24
    3fae:	9a04      	ldr	r2, [sp, #16]
    3fb0:	fa02 f303 	lsl.w	r3, r2, r3
    3fb4:	9a05      	ldr	r2, [sp, #20]
    3fb6:	4313      	orrs	r3, r2
    3fb8:	9305      	str	r3, [sp, #20]
    3fba:	e014      	b.n	3fe6 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3fbc:	9b03      	ldr	r3, [sp, #12]
    3fbe:	3b04      	subs	r3, #4
    3fc0:	005b      	lsls	r3, r3, #1
    3fc2:	3310      	adds	r3, #16
    3fc4:	2203      	movs	r2, #3
    3fc6:	fa02 f303 	lsl.w	r3, r2, r3
    3fca:	43db      	mvns	r3, r3
    3fcc:	9a05      	ldr	r2, [sp, #20]
    3fce:	4013      	ands	r3, r2
    3fd0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3fd2:	9b03      	ldr	r3, [sp, #12]
    3fd4:	3b04      	subs	r3, #4
    3fd6:	005b      	lsls	r3, r3, #1
    3fd8:	3310      	adds	r3, #16
    3fda:	9a04      	ldr	r2, [sp, #16]
    3fdc:	fa02 f303 	lsl.w	r3, r2, r3
    3fe0:	9a05      	ldr	r2, [sp, #20]
    3fe2:	4313      	orrs	r3, r2
    3fe4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3fe6:	4a05      	ldr	r2, [pc, #20]	; (3ffc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3fe8:	9b05      	ldr	r3, [sp, #20]
    3fea:	60d3      	str	r3, [r2, #12]
}
    3fec:	bf00      	nop
    3fee:	b006      	add	sp, #24
    3ff0:	4770      	bx	lr
    3ff2:	bf00      	nop
    3ff4:	00007ea0 	.word	0x00007ea0
    3ff8:	00007b90 	.word	0x00007b90
    3ffc:	40048000 	.word	0x40048000

00004000 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4000:	b084      	sub	sp, #16
    4002:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4004:	4b06      	ldr	r3, [pc, #24]	; (4020 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4006:	685b      	ldr	r3, [r3, #4]
    4008:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    400a:	9b03      	ldr	r3, [sp, #12]
    400c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4010:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4012:	4a03      	ldr	r2, [pc, #12]	; (4020 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4014:	9b03      	ldr	r3, [sp, #12]
    4016:	6053      	str	r3, [r2, #4]
}
    4018:	bf00      	nop
    401a:	b004      	add	sp, #16
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	40048000 	.word	0x40048000

00004024 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4024:	b084      	sub	sp, #16
    4026:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4028:	9b01      	ldr	r3, [sp, #4]
    402a:	685b      	ldr	r3, [r3, #4]
    402c:	4a0a      	ldr	r2, [pc, #40]	; (4058 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    402e:	5cd3      	ldrb	r3, [r2, r3]
    4030:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4032:	4b0a      	ldr	r3, [pc, #40]	; (405c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4034:	685b      	ldr	r3, [r3, #4]
    4036:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4038:	9b02      	ldr	r3, [sp, #8]
    403a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    403e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4040:	9b03      	ldr	r3, [sp, #12]
    4042:	011b      	lsls	r3, r3, #4
    4044:	9a02      	ldr	r2, [sp, #8]
    4046:	4313      	orrs	r3, r2
    4048:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    404a:	4a04      	ldr	r2, [pc, #16]	; (405c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    404c:	9b02      	ldr	r3, [sp, #8]
    404e:	6053      	str	r3, [r2, #4]
}
    4050:	bf00      	nop
    4052:	b004      	add	sp, #16
    4054:	4770      	bx	lr
    4056:	bf00      	nop
    4058:	00007ea0 	.word	0x00007ea0
    405c:	40048000 	.word	0x40048000

00004060 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4060:	b084      	sub	sp, #16
    4062:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4064:	9b01      	ldr	r3, [sp, #4]
    4066:	681a      	ldr	r2, [r3, #0]
    4068:	490f      	ldr	r1, [pc, #60]	; (40a8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    406a:	4613      	mov	r3, r2
    406c:	00db      	lsls	r3, r3, #3
    406e:	4413      	add	r3, r2
    4070:	440b      	add	r3, r1
    4072:	3304      	adds	r3, #4
    4074:	781b      	ldrb	r3, [r3, #0]
    4076:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4078:	4a0c      	ldr	r2, [pc, #48]	; (40ac <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    407a:	9b03      	ldr	r3, [sp, #12]
    407c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4080:	490a      	ldr	r1, [pc, #40]	; (40ac <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4082:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4086:	9b03      	ldr	r3, [sp, #12]
    4088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    408c:	4a07      	ldr	r2, [pc, #28]	; (40ac <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    408e:	9b03      	ldr	r3, [sp, #12]
    4090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4094:	4905      	ldr	r1, [pc, #20]	; (40ac <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4096:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    409a:	9b03      	ldr	r3, [sp, #12]
    409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40a0:	bf00      	nop
    40a2:	b004      	add	sp, #16
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop
    40a8:	00007b90 	.word	0x00007b90
    40ac:	40065000 	.word	0x40065000

000040b0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    40b0:	b086      	sub	sp, #24
    40b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    40b4:	9b01      	ldr	r3, [sp, #4]
    40b6:	681a      	ldr	r2, [r3, #0]
    40b8:	4912      	ldr	r1, [pc, #72]	; (4104 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    40ba:	4613      	mov	r3, r2
    40bc:	00db      	lsls	r3, r3, #3
    40be:	4413      	add	r3, r2
    40c0:	440b      	add	r3, r1
    40c2:	3304      	adds	r3, #4
    40c4:	781b      	ldrb	r3, [r3, #0]
    40c6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    40c8:	9b01      	ldr	r3, [sp, #4]
    40ca:	685b      	ldr	r3, [r3, #4]
    40cc:	4a0e      	ldr	r2, [pc, #56]	; (4108 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    40ce:	5cd3      	ldrb	r3, [r2, r3]
    40d0:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    40d2:	4a0e      	ldr	r2, [pc, #56]	; (410c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    40d4:	9b05      	ldr	r3, [sp, #20]
    40d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    40da:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    40dc:	9b03      	ldr	r3, [sp, #12]
    40de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    40e2:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    40e4:	9b04      	ldr	r3, [sp, #16]
    40e6:	061b      	lsls	r3, r3, #24
    40e8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    40ec:	9a03      	ldr	r2, [sp, #12]
    40ee:	4313      	orrs	r3, r2
    40f0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    40f2:	4906      	ldr	r1, [pc, #24]	; (410c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    40f4:	9b05      	ldr	r3, [sp, #20]
    40f6:	9a03      	ldr	r2, [sp, #12]
    40f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40fc:	bf00      	nop
    40fe:	b006      	add	sp, #24
    4100:	4770      	bx	lr
    4102:	bf00      	nop
    4104:	00007b90 	.word	0x00007b90
    4108:	00007f28 	.word	0x00007f28
    410c:	40065000 	.word	0x40065000

00004110 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4110:	b084      	sub	sp, #16
    4112:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4114:	4b0b      	ldr	r3, [pc, #44]	; (4144 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4116:	7f1b      	ldrb	r3, [r3, #28]
    4118:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    411a:	4b0b      	ldr	r3, [pc, #44]	; (4148 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    411c:	685b      	ldr	r3, [r3, #4]
    411e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4120:	9b02      	ldr	r3, [sp, #8]
    4122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4126:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4128:	9b03      	ldr	r3, [sp, #12]
    412a:	031b      	lsls	r3, r3, #12
    412c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4130:	9a02      	ldr	r2, [sp, #8]
    4132:	4313      	orrs	r3, r2
    4134:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4136:	4a04      	ldr	r2, [pc, #16]	; (4148 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4138:	9b02      	ldr	r3, [sp, #8]
    413a:	6053      	str	r3, [r2, #4]
}
    413c:	bf00      	nop
    413e:	b004      	add	sp, #16
    4140:	4770      	bx	lr
    4142:	bf00      	nop
    4144:	00007ea0 	.word	0x00007ea0
    4148:	40048000 	.word	0x40048000

0000414c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    414c:	b084      	sub	sp, #16
    414e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4150:	9b01      	ldr	r3, [sp, #4]
    4152:	685b      	ldr	r3, [r3, #4]
    4154:	4a0b      	ldr	r2, [pc, #44]	; (4184 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4156:	5cd3      	ldrb	r3, [r2, r3]
    4158:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    415a:	4b0b      	ldr	r3, [pc, #44]	; (4188 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    415c:	685b      	ldr	r3, [r3, #4]
    415e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4160:	9b02      	ldr	r3, [sp, #8]
    4162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4166:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4168:	9b03      	ldr	r3, [sp, #12]
    416a:	031b      	lsls	r3, r3, #12
    416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4170:	9a02      	ldr	r2, [sp, #8]
    4172:	4313      	orrs	r3, r2
    4174:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4176:	4a04      	ldr	r2, [pc, #16]	; (4188 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4178:	9b02      	ldr	r3, [sp, #8]
    417a:	6053      	str	r3, [r2, #4]
}
    417c:	bf00      	nop
    417e:	b004      	add	sp, #16
    4180:	4770      	bx	lr
    4182:	bf00      	nop
    4184:	00007ea0 	.word	0x00007ea0
    4188:	40048000 	.word	0x40048000

0000418c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    418c:	b500      	push	{lr}
    418e:	b085      	sub	sp, #20
    4190:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4192:	2300      	movs	r3, #0
    4194:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4198:	9b01      	ldr	r3, [sp, #4]
    419a:	2b00      	cmp	r3, #0
    419c:	d037      	beq.n	420e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    419e:	2300      	movs	r3, #0
    41a0:	9303      	str	r3, [sp, #12]
    41a2:	e02b      	b.n	41fc <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    41a4:	4b29      	ldr	r3, [pc, #164]	; (424c <DisableSafeClock+0xc0>)
    41a6:	6819      	ldr	r1, [r3, #0]
    41a8:	9a03      	ldr	r2, [sp, #12]
    41aa:	4613      	mov	r3, r2
    41ac:	005b      	lsls	r3, r3, #1
    41ae:	4413      	add	r3, r2
    41b0:	009b      	lsls	r3, r3, #2
    41b2:	440b      	add	r3, r1
    41b4:	3314      	adds	r3, #20
    41b6:	681b      	ldr	r3, [r3, #0]
    41b8:	2b05      	cmp	r3, #5
    41ba:	d11c      	bne.n	41f6 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    41bc:	2301      	movs	r3, #1
    41be:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    41c2:	4b22      	ldr	r3, [pc, #136]	; (424c <DisableSafeClock+0xc0>)
    41c4:	6819      	ldr	r1, [r3, #0]
    41c6:	9a03      	ldr	r2, [sp, #12]
    41c8:	4613      	mov	r3, r2
    41ca:	005b      	lsls	r3, r3, #1
    41cc:	4413      	add	r3, r2
    41ce:	009b      	lsls	r3, r3, #2
    41d0:	440b      	add	r3, r1
    41d2:	3318      	adds	r3, #24
    41d4:	881b      	ldrh	r3, [r3, #0]
    41d6:	2b00      	cmp	r3, #0
    41d8:	d118      	bne.n	420c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    41da:	4b1d      	ldr	r3, [pc, #116]	; (4250 <DisableSafeClock+0xc4>)
    41dc:	791b      	ldrb	r3, [r3, #4]
    41de:	4619      	mov	r1, r3
    41e0:	4a1c      	ldr	r2, [pc, #112]	; (4254 <DisableSafeClock+0xc8>)
    41e2:	460b      	mov	r3, r1
    41e4:	005b      	lsls	r3, r3, #1
    41e6:	440b      	add	r3, r1
    41e8:	009b      	lsls	r3, r3, #2
    41ea:	4413      	add	r3, r2
    41ec:	3308      	adds	r3, #8
    41ee:	681b      	ldr	r3, [r3, #0]
    41f0:	2005      	movs	r0, #5
    41f2:	4798      	blx	r3
                }
                break;
    41f4:	e00a      	b.n	420c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    41f6:	9b03      	ldr	r3, [sp, #12]
    41f8:	3301      	adds	r3, #1
    41fa:	9303      	str	r3, [sp, #12]
    41fc:	4b13      	ldr	r3, [pc, #76]	; (424c <DisableSafeClock+0xc0>)
    41fe:	681b      	ldr	r3, [r3, #0]
    4200:	7a1b      	ldrb	r3, [r3, #8]
    4202:	461a      	mov	r2, r3
    4204:	9b03      	ldr	r3, [sp, #12]
    4206:	4293      	cmp	r3, r2
    4208:	d3cc      	bcc.n	41a4 <DisableSafeClock+0x18>
    420a:	e000      	b.n	420e <DisableSafeClock+0x82>
                break;
    420c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    420e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4212:	f083 0301 	eor.w	r3, r3, #1
    4216:	b2db      	uxtb	r3, r3
    4218:	2b00      	cmp	r3, #0
    421a:	d013      	beq.n	4244 <DisableSafeClock+0xb8>
    421c:	4b0e      	ldr	r3, [pc, #56]	; (4258 <DisableSafeClock+0xcc>)
    421e:	781b      	ldrb	r3, [r3, #0]
    4220:	f083 0301 	eor.w	r3, r3, #1
    4224:	b2db      	uxtb	r3, r3
    4226:	2b00      	cmp	r3, #0
    4228:	d00c      	beq.n	4244 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    422a:	4b09      	ldr	r3, [pc, #36]	; (4250 <DisableSafeClock+0xc4>)
    422c:	791b      	ldrb	r3, [r3, #4]
    422e:	4619      	mov	r1, r3
    4230:	4a08      	ldr	r2, [pc, #32]	; (4254 <DisableSafeClock+0xc8>)
    4232:	460b      	mov	r3, r1
    4234:	005b      	lsls	r3, r3, #1
    4236:	440b      	add	r3, r1
    4238:	009b      	lsls	r3, r3, #2
    423a:	4413      	add	r3, r2
    423c:	3308      	adds	r3, #8
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	2005      	movs	r0, #5
    4242:	4798      	blx	r3
    }
}
    4244:	bf00      	nop
    4246:	b005      	add	sp, #20
    4248:	f85d fb04 	ldr.w	pc, [sp], #4
    424c:	1fff8bbc 	.word	0x1fff8bbc
    4250:	00007b20 	.word	0x00007b20
    4254:	00008150 	.word	0x00008150
    4258:	1fff8b18 	.word	0x1fff8b18

0000425c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    425c:	4b06      	ldr	r3, [pc, #24]	; (4278 <SetFircToResetValue_TrustedCall+0x1c>)
    425e:	2200      	movs	r2, #0
    4260:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4264:	4b04      	ldr	r3, [pc, #16]	; (4278 <SetFircToResetValue_TrustedCall+0x1c>)
    4266:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    426a:	4a03      	ldr	r2, [pc, #12]	; (4278 <SetFircToResetValue_TrustedCall+0x1c>)
    426c:	f043 0301 	orr.w	r3, r3, #1
    4270:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4274:	bf00      	nop
    4276:	4770      	bx	lr
    4278:	40064000 	.word	0x40064000

0000427c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    427c:	b084      	sub	sp, #16
    427e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4280:	2303      	movs	r3, #3
    4282:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4284:	2300      	movs	r3, #0
    4286:	9302      	str	r3, [sp, #8]
    4288:	e028      	b.n	42dc <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    428a:	9b01      	ldr	r3, [sp, #4]
    428c:	9a02      	ldr	r2, [sp, #8]
    428e:	320d      	adds	r2, #13
    4290:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4294:	2b28      	cmp	r3, #40	; 0x28
    4296:	d10b      	bne.n	42b0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4298:	9a01      	ldr	r2, [sp, #4]
    429a:	9b02      	ldr	r3, [sp, #8]
    429c:	330d      	adds	r3, #13
    429e:	00db      	lsls	r3, r3, #3
    42a0:	4413      	add	r3, r2
    42a2:	685b      	ldr	r3, [r3, #4]
    42a4:	4a2b      	ldr	r2, [pc, #172]	; (4354 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    42a6:	5cd3      	ldrb	r3, [r2, r3]
    42a8:	011b      	lsls	r3, r3, #4
    42aa:	9a03      	ldr	r2, [sp, #12]
    42ac:	4313      	orrs	r3, r2
    42ae:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    42b0:	9b01      	ldr	r3, [sp, #4]
    42b2:	9a02      	ldr	r2, [sp, #8]
    42b4:	320d      	adds	r2, #13
    42b6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42ba:	2b29      	cmp	r3, #41	; 0x29
    42bc:	d10b      	bne.n	42d6 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    42be:	9a01      	ldr	r2, [sp, #4]
    42c0:	9b02      	ldr	r3, [sp, #8]
    42c2:	330d      	adds	r3, #13
    42c4:	00db      	lsls	r3, r3, #3
    42c6:	4413      	add	r3, r2
    42c8:	685b      	ldr	r3, [r3, #4]
    42ca:	4a23      	ldr	r2, [pc, #140]	; (4358 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    42cc:	5cd3      	ldrb	r3, [r2, r3]
    42ce:	009b      	lsls	r3, r3, #2
    42d0:	9a03      	ldr	r2, [sp, #12]
    42d2:	4313      	orrs	r3, r2
    42d4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    42d6:	9b02      	ldr	r3, [sp, #8]
    42d8:	3301      	adds	r3, #1
    42da:	9302      	str	r3, [sp, #8]
    42dc:	9b01      	ldr	r3, [sp, #4]
    42de:	7adb      	ldrb	r3, [r3, #11]
    42e0:	461a      	mov	r2, r3
    42e2:	9b02      	ldr	r3, [sp, #8]
    42e4:	4293      	cmp	r3, r2
    42e6:	d3d0      	bcc.n	428a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    42e8:	2300      	movs	r3, #0
    42ea:	9302      	str	r3, [sp, #8]
    42ec:	e026      	b.n	433c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    42ee:	9a01      	ldr	r2, [sp, #4]
    42f0:	9b02      	ldr	r3, [sp, #8]
    42f2:	334e      	adds	r3, #78	; 0x4e
    42f4:	00db      	lsls	r3, r3, #3
    42f6:	4413      	add	r3, r2
    42f8:	685b      	ldr	r3, [r3, #4]
    42fa:	2b12      	cmp	r3, #18
    42fc:	d109      	bne.n	4312 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    42fe:	9a01      	ldr	r2, [sp, #4]
    4300:	9b02      	ldr	r3, [sp, #8]
    4302:	334e      	adds	r3, #78	; 0x4e
    4304:	00db      	lsls	r3, r3, #3
    4306:	4413      	add	r3, r2
    4308:	891b      	ldrh	r3, [r3, #8]
    430a:	005b      	lsls	r3, r3, #1
    430c:	9a03      	ldr	r2, [sp, #12]
    430e:	4313      	orrs	r3, r2
    4310:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4312:	9a01      	ldr	r2, [sp, #4]
    4314:	9b02      	ldr	r3, [sp, #8]
    4316:	334e      	adds	r3, #78	; 0x4e
    4318:	00db      	lsls	r3, r3, #3
    431a:	4413      	add	r3, r2
    431c:	685b      	ldr	r3, [r3, #4]
    431e:	2b13      	cmp	r3, #19
    4320:	d109      	bne.n	4336 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4322:	9a01      	ldr	r2, [sp, #4]
    4324:	9b02      	ldr	r3, [sp, #8]
    4326:	334e      	adds	r3, #78	; 0x4e
    4328:	00db      	lsls	r3, r3, #3
    432a:	4413      	add	r3, r2
    432c:	891b      	ldrh	r3, [r3, #8]
    432e:	461a      	mov	r2, r3
    4330:	9b03      	ldr	r3, [sp, #12]
    4332:	4313      	orrs	r3, r2
    4334:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4336:	9b02      	ldr	r3, [sp, #8]
    4338:	3301      	adds	r3, #1
    433a:	9302      	str	r3, [sp, #8]
    433c:	9b01      	ldr	r3, [sp, #4]
    433e:	7c1b      	ldrb	r3, [r3, #16]
    4340:	461a      	mov	r2, r3
    4342:	9b02      	ldr	r3, [sp, #8]
    4344:	4293      	cmp	r3, r2
    4346:	d3d2      	bcc.n	42ee <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4348:	4a04      	ldr	r2, [pc, #16]	; (435c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    434a:	9b03      	ldr	r3, [sp, #12]
    434c:	6113      	str	r3, [r2, #16]
}
    434e:	bf00      	nop
    4350:	b004      	add	sp, #16
    4352:	4770      	bx	lr
    4354:	00007ea0 	.word	0x00007ea0
    4358:	00007f58 	.word	0x00007f58
    435c:	40048000 	.word	0x40048000

00004360 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4360:	b500      	push	{lr}
    4362:	b089      	sub	sp, #36	; 0x24
    4364:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4366:	2300      	movs	r3, #0
    4368:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    436c:	4a21      	ldr	r2, [pc, #132]	; (43f4 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4372:	4b21      	ldr	r3, [pc, #132]	; (43f8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4374:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4378:	f003 0301 	and.w	r3, r3, #1
    437c:	2b00      	cmp	r3, #0
    437e:	d12e      	bne.n	43de <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4380:	4b1e      	ldr	r3, [pc, #120]	; (43fc <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4382:	2200      	movs	r2, #0
    4384:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4386:	f7ff ff69 	bl	425c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    438a:	aa03      	add	r2, sp, #12
    438c:	a904      	add	r1, sp, #16
    438e:	a805      	add	r0, sp, #20
    4390:	f24c 3350 	movw	r3, #50000	; 0xc350
    4394:	f7fe f8ae 	bl	24f4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4398:	4b17      	ldr	r3, [pc, #92]	; (43f8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    439a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    439e:	0e1b      	lsrs	r3, r3, #24
    43a0:	f003 0301 	and.w	r3, r3, #1
    43a4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    43a6:	9a03      	ldr	r2, [sp, #12]
    43a8:	a904      	add	r1, sp, #16
    43aa:	ab05      	add	r3, sp, #20
    43ac:	4618      	mov	r0, r3
    43ae:	f7fe f8bb 	bl	2528 <Clock_Ip_TimeoutExpired>
    43b2:	4603      	mov	r3, r0
    43b4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    43b8:	9b06      	ldr	r3, [sp, #24]
    43ba:	2b00      	cmp	r3, #0
    43bc:	d106      	bne.n	43cc <Clock_Ip_SpecificPlatformInitClock+0x6c>
    43be:	f89d 301f 	ldrb.w	r3, [sp, #31]
    43c2:	f083 0301 	eor.w	r3, r3, #1
    43c6:	b2db      	uxtb	r3, r3
    43c8:	2b00      	cmp	r3, #0
    43ca:	d1e5      	bne.n	4398 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    43cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d007      	beq.n	43e4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    43d4:	2105      	movs	r1, #5
    43d6:	2001      	movs	r0, #1
    43d8:	f7fe f87c 	bl	24d4 <Clock_Ip_ReportClockErrors>
    43dc:	e002      	b.n	43e4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    43de:	4b07      	ldr	r3, [pc, #28]	; (43fc <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    43e0:	2201      	movs	r2, #1
    43e2:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    43e4:	9801      	ldr	r0, [sp, #4]
    43e6:	f7ff ff49 	bl	427c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    43ea:	bf00      	nop
    43ec:	b009      	add	sp, #36	; 0x24
    43ee:	f85d fb04 	ldr.w	pc, [sp], #4
    43f2:	bf00      	nop
    43f4:	1fff8bbc 	.word	0x1fff8bbc
    43f8:	40064000 	.word	0x40064000
    43fc:	1fff8b18 	.word	0x1fff8b18

00004400 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4400:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4402:	2300      	movs	r3, #0
    4404:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4406:	4b29      	ldr	r3, [pc, #164]	; (44ac <getFircConfig+0xac>)
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	2b00      	cmp	r3, #0
    440c:	d024      	beq.n	4458 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    440e:	2300      	movs	r3, #0
    4410:	9301      	str	r3, [sp, #4]
    4412:	e01a      	b.n	444a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4414:	4b25      	ldr	r3, [pc, #148]	; (44ac <getFircConfig+0xac>)
    4416:	6819      	ldr	r1, [r3, #0]
    4418:	9a01      	ldr	r2, [sp, #4]
    441a:	4613      	mov	r3, r2
    441c:	005b      	lsls	r3, r3, #1
    441e:	4413      	add	r3, r2
    4420:	009b      	lsls	r3, r3, #2
    4422:	440b      	add	r3, r1
    4424:	3314      	adds	r3, #20
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	2b05      	cmp	r3, #5
    442a:	d10b      	bne.n	4444 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    442c:	4b1f      	ldr	r3, [pc, #124]	; (44ac <getFircConfig+0xac>)
    442e:	6819      	ldr	r1, [r3, #0]
    4430:	9a01      	ldr	r2, [sp, #4]
    4432:	4613      	mov	r3, r2
    4434:	005b      	lsls	r3, r3, #1
    4436:	4413      	add	r3, r2
    4438:	009b      	lsls	r3, r3, #2
    443a:	3310      	adds	r3, #16
    443c:	440b      	add	r3, r1
    443e:	3304      	adds	r3, #4
    4440:	9300      	str	r3, [sp, #0]
                break;
    4442:	e009      	b.n	4458 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4444:	9b01      	ldr	r3, [sp, #4]
    4446:	3301      	adds	r3, #1
    4448:	9301      	str	r3, [sp, #4]
    444a:	4b18      	ldr	r3, [pc, #96]	; (44ac <getFircConfig+0xac>)
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	7a1b      	ldrb	r3, [r3, #8]
    4450:	461a      	mov	r2, r3
    4452:	9b01      	ldr	r3, [sp, #4]
    4454:	4293      	cmp	r3, r2
    4456:	d3dd      	bcc.n	4414 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4458:	9b00      	ldr	r3, [sp, #0]
    445a:	2b00      	cmp	r3, #0
    445c:	d121      	bne.n	44a2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    445e:	4b14      	ldr	r3, [pc, #80]	; (44b0 <getFircConfig+0xb0>)
    4460:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4462:	4b13      	ldr	r3, [pc, #76]	; (44b0 <getFircConfig+0xb0>)
    4464:	2205      	movs	r2, #5
    4466:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4468:	4b12      	ldr	r3, [pc, #72]	; (44b4 <getFircConfig+0xb4>)
    446a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    446e:	b29b      	uxth	r3, r3
    4470:	f003 0301 	and.w	r3, r3, #1
    4474:	b29a      	uxth	r2, r3
    4476:	4b0e      	ldr	r3, [pc, #56]	; (44b0 <getFircConfig+0xb0>)
    4478:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    447a:	4b0e      	ldr	r3, [pc, #56]	; (44b4 <getFircConfig+0xb4>)
    447c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4480:	b2db      	uxtb	r3, r3
    4482:	f003 0303 	and.w	r3, r3, #3
    4486:	b2da      	uxtb	r2, r3
    4488:	4b09      	ldr	r3, [pc, #36]	; (44b0 <getFircConfig+0xb0>)
    448a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    448c:	4b09      	ldr	r3, [pc, #36]	; (44b4 <getFircConfig+0xb4>)
    448e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4492:	b2db      	uxtb	r3, r3
    4494:	10db      	asrs	r3, r3, #3
    4496:	b2db      	uxtb	r3, r3
    4498:	f003 0301 	and.w	r3, r3, #1
    449c:	b2da      	uxtb	r2, r3
    449e:	4b04      	ldr	r3, [pc, #16]	; (44b0 <getFircConfig+0xb0>)
    44a0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    44a2:	9b00      	ldr	r3, [sp, #0]
}
    44a4:	4618      	mov	r0, r3
    44a6:	b002      	add	sp, #8
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	1fff8bbc 	.word	0x1fff8bbc
    44b0:	1fff8c28 	.word	0x1fff8c28
    44b4:	40064000 	.word	0x40064000

000044b8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    44b8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    44ba:	2300      	movs	r3, #0
    44bc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    44be:	4b20      	ldr	r3, [pc, #128]	; (4540 <getSoscConfig+0x88>)
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	2b00      	cmp	r3, #0
    44c4:	d024      	beq.n	4510 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    44c6:	2300      	movs	r3, #0
    44c8:	9301      	str	r3, [sp, #4]
    44ca:	e01a      	b.n	4502 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    44cc:	4b1c      	ldr	r3, [pc, #112]	; (4540 <getSoscConfig+0x88>)
    44ce:	6819      	ldr	r1, [r3, #0]
    44d0:	9a01      	ldr	r2, [sp, #4]
    44d2:	4613      	mov	r3, r2
    44d4:	009b      	lsls	r3, r3, #2
    44d6:	4413      	add	r3, r2
    44d8:	009b      	lsls	r3, r3, #2
    44da:	440b      	add	r3, r1
    44dc:	332c      	adds	r3, #44	; 0x2c
    44de:	681b      	ldr	r3, [r3, #0]
    44e0:	2b08      	cmp	r3, #8
    44e2:	d10b      	bne.n	44fc <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    44e4:	4b16      	ldr	r3, [pc, #88]	; (4540 <getSoscConfig+0x88>)
    44e6:	6819      	ldr	r1, [r3, #0]
    44e8:	9a01      	ldr	r2, [sp, #4]
    44ea:	4613      	mov	r3, r2
    44ec:	009b      	lsls	r3, r3, #2
    44ee:	4413      	add	r3, r2
    44f0:	009b      	lsls	r3, r3, #2
    44f2:	3328      	adds	r3, #40	; 0x28
    44f4:	440b      	add	r3, r1
    44f6:	3304      	adds	r3, #4
    44f8:	9300      	str	r3, [sp, #0]
                break;
    44fa:	e009      	b.n	4510 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    44fc:	9b01      	ldr	r3, [sp, #4]
    44fe:	3301      	adds	r3, #1
    4500:	9301      	str	r3, [sp, #4]
    4502:	4b0f      	ldr	r3, [pc, #60]	; (4540 <getSoscConfig+0x88>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	7a5b      	ldrb	r3, [r3, #9]
    4508:	461a      	mov	r2, r3
    450a:	9b01      	ldr	r3, [sp, #4]
    450c:	4293      	cmp	r3, r2
    450e:	d3dd      	bcc.n	44cc <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4510:	9b00      	ldr	r3, [sp, #0]
    4512:	2b00      	cmp	r3, #0
    4514:	d110      	bne.n	4538 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4516:	4b0b      	ldr	r3, [pc, #44]	; (4544 <getSoscConfig+0x8c>)
    4518:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    451a:	4b0a      	ldr	r3, [pc, #40]	; (4544 <getSoscConfig+0x8c>)
    451c:	2208      	movs	r2, #8
    451e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4520:	4b09      	ldr	r3, [pc, #36]	; (4548 <getSoscConfig+0x90>)
    4522:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4526:	b29b      	uxth	r3, r3
    4528:	f003 0301 	and.w	r3, r3, #1
    452c:	b29a      	uxth	r2, r3
    452e:	4b05      	ldr	r3, [pc, #20]	; (4544 <getSoscConfig+0x8c>)
    4530:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4532:	4b04      	ldr	r3, [pc, #16]	; (4544 <getSoscConfig+0x8c>)
    4534:	4a05      	ldr	r2, [pc, #20]	; (454c <getSoscConfig+0x94>)
    4536:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4538:	9b00      	ldr	r3, [sp, #0]
}
    453a:	4618      	mov	r0, r3
    453c:	b002      	add	sp, #8
    453e:	4770      	bx	lr
    4540:	1fff8bbc 	.word	0x1fff8bbc
    4544:	1fff8c34 	.word	0x1fff8c34
    4548:	40064000 	.word	0x40064000
    454c:	02625a00 	.word	0x02625a00

00004550 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4550:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4552:	2300      	movs	r3, #0
    4554:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4556:	4b28      	ldr	r3, [pc, #160]	; (45f8 <getSpllConfig+0xa8>)
    4558:	681b      	ldr	r3, [r3, #0]
    455a:	2b00      	cmp	r3, #0
    455c:	d023      	beq.n	45a6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    455e:	2300      	movs	r3, #0
    4560:	9301      	str	r3, [sp, #4]
    4562:	e019      	b.n	4598 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4564:	4b24      	ldr	r3, [pc, #144]	; (45f8 <getSpllConfig+0xa8>)
    4566:	6819      	ldr	r1, [r3, #0]
    4568:	9a01      	ldr	r2, [sp, #4]
    456a:	4613      	mov	r3, r2
    456c:	009b      	lsls	r3, r3, #2
    456e:	4413      	add	r3, r2
    4570:	00db      	lsls	r3, r3, #3
    4572:	440b      	add	r3, r1
    4574:	3340      	adds	r3, #64	; 0x40
    4576:	681b      	ldr	r3, [r3, #0]
    4578:	2b09      	cmp	r3, #9
    457a:	d10a      	bne.n	4592 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    457c:	4b1e      	ldr	r3, [pc, #120]	; (45f8 <getSpllConfig+0xa8>)
    457e:	6819      	ldr	r1, [r3, #0]
    4580:	9a01      	ldr	r2, [sp, #4]
    4582:	4613      	mov	r3, r2
    4584:	009b      	lsls	r3, r3, #2
    4586:	4413      	add	r3, r2
    4588:	00db      	lsls	r3, r3, #3
    458a:	3340      	adds	r3, #64	; 0x40
    458c:	440b      	add	r3, r1
    458e:	9300      	str	r3, [sp, #0]
                break;
    4590:	e009      	b.n	45a6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4592:	9b01      	ldr	r3, [sp, #4]
    4594:	3301      	adds	r3, #1
    4596:	9301      	str	r3, [sp, #4]
    4598:	4b17      	ldr	r3, [pc, #92]	; (45f8 <getSpllConfig+0xa8>)
    459a:	681b      	ldr	r3, [r3, #0]
    459c:	7a9b      	ldrb	r3, [r3, #10]
    459e:	461a      	mov	r2, r3
    45a0:	9b01      	ldr	r3, [sp, #4]
    45a2:	4293      	cmp	r3, r2
    45a4:	d3de      	bcc.n	4564 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    45a6:	9b00      	ldr	r3, [sp, #0]
    45a8:	2b00      	cmp	r3, #0
    45aa:	d121      	bne.n	45f0 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    45ac:	4b13      	ldr	r3, [pc, #76]	; (45fc <getSpllConfig+0xac>)
    45ae:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    45b0:	4b12      	ldr	r3, [pc, #72]	; (45fc <getSpllConfig+0xac>)
    45b2:	2209      	movs	r2, #9
    45b4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    45b6:	4b12      	ldr	r3, [pc, #72]	; (4600 <getSpllConfig+0xb0>)
    45b8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    45bc:	b29b      	uxth	r3, r3
    45be:	f003 0301 	and.w	r3, r3, #1
    45c2:	b29a      	uxth	r2, r3
    45c4:	4b0d      	ldr	r3, [pc, #52]	; (45fc <getSpllConfig+0xac>)
    45c6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    45c8:	4b0d      	ldr	r3, [pc, #52]	; (4600 <getSpllConfig+0xb0>)
    45ca:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    45ce:	0a1b      	lsrs	r3, r3, #8
    45d0:	b2db      	uxtb	r3, r3
    45d2:	f003 0307 	and.w	r3, r3, #7
    45d6:	b2da      	uxtb	r2, r3
    45d8:	4b08      	ldr	r3, [pc, #32]	; (45fc <getSpllConfig+0xac>)
    45da:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    45dc:	4b08      	ldr	r3, [pc, #32]	; (4600 <getSpllConfig+0xb0>)
    45de:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    45e2:	0c1b      	lsrs	r3, r3, #16
    45e4:	b2db      	uxtb	r3, r3
    45e6:	f003 031f 	and.w	r3, r3, #31
    45ea:	b2da      	uxtb	r2, r3
    45ec:	4b03      	ldr	r3, [pc, #12]	; (45fc <getSpllConfig+0xac>)
    45ee:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    45f0:	9b00      	ldr	r3, [sp, #0]
}
    45f2:	4618      	mov	r0, r3
    45f4:	b002      	add	sp, #8
    45f6:	4770      	bx	lr
    45f8:	1fff8bbc 	.word	0x1fff8bbc
    45fc:	1fff8c48 	.word	0x1fff8c48
    4600:	40064000 	.word	0x40064000

00004604 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4604:	b086      	sub	sp, #24
    4606:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4608:	2300      	movs	r3, #0
    460a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    460c:	9b01      	ldr	r3, [sp, #4]
    460e:	2b1b      	cmp	r3, #27
    4610:	d00f      	beq.n	4632 <getSelectorConfig+0x2e>
    4612:	9b01      	ldr	r3, [sp, #4]
    4614:	2b1b      	cmp	r3, #27
    4616:	d80f      	bhi.n	4638 <getSelectorConfig+0x34>
    4618:	9b01      	ldr	r3, [sp, #4]
    461a:	2b19      	cmp	r3, #25
    461c:	d003      	beq.n	4626 <getSelectorConfig+0x22>
    461e:	9b01      	ldr	r3, [sp, #4]
    4620:	2b1a      	cmp	r3, #26
    4622:	d003      	beq.n	462c <getSelectorConfig+0x28>
    4624:	e008      	b.n	4638 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4626:	2300      	movs	r3, #0
    4628:	9304      	str	r3, [sp, #16]
            break;
    462a:	e008      	b.n	463e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    462c:	2301      	movs	r3, #1
    462e:	9304      	str	r3, [sp, #16]
            break;
    4630:	e005      	b.n	463e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4632:	2302      	movs	r3, #2
    4634:	9304      	str	r3, [sp, #16]
            break;
    4636:	e002      	b.n	463e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4638:	2300      	movs	r3, #0
    463a:	9304      	str	r3, [sp, #16]
            break;
    463c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    463e:	4b36      	ldr	r3, [pc, #216]	; (4718 <getSelectorConfig+0x114>)
    4640:	681b      	ldr	r3, [r3, #0]
    4642:	2b00      	cmp	r3, #0
    4644:	d01d      	beq.n	4682 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4646:	2300      	movs	r3, #0
    4648:	9303      	str	r3, [sp, #12]
    464a:	e013      	b.n	4674 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    464c:	4b32      	ldr	r3, [pc, #200]	; (4718 <getSelectorConfig+0x114>)
    464e:	681b      	ldr	r3, [r3, #0]
    4650:	9a03      	ldr	r2, [sp, #12]
    4652:	320d      	adds	r2, #13
    4654:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4658:	9a01      	ldr	r2, [sp, #4]
    465a:	429a      	cmp	r2, r3
    465c:	d107      	bne.n	466e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    465e:	4b2e      	ldr	r3, [pc, #184]	; (4718 <getSelectorConfig+0x114>)
    4660:	681a      	ldr	r2, [r3, #0]
    4662:	9b03      	ldr	r3, [sp, #12]
    4664:	330d      	adds	r3, #13
    4666:	00db      	lsls	r3, r3, #3
    4668:	4413      	add	r3, r2
    466a:	9305      	str	r3, [sp, #20]
                break;
    466c:	e009      	b.n	4682 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    466e:	9b03      	ldr	r3, [sp, #12]
    4670:	3301      	adds	r3, #1
    4672:	9303      	str	r3, [sp, #12]
    4674:	4b28      	ldr	r3, [pc, #160]	; (4718 <getSelectorConfig+0x114>)
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	7adb      	ldrb	r3, [r3, #11]
    467a:	461a      	mov	r2, r3
    467c:	9b03      	ldr	r3, [sp, #12]
    467e:	4293      	cmp	r3, r2
    4680:	d3e4      	bcc.n	464c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4682:	9b05      	ldr	r3, [sp, #20]
    4684:	2b00      	cmp	r3, #0
    4686:	d140      	bne.n	470a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4688:	9b04      	ldr	r3, [sp, #16]
    468a:	00db      	lsls	r3, r3, #3
    468c:	4a23      	ldr	r2, [pc, #140]	; (471c <getSelectorConfig+0x118>)
    468e:	4413      	add	r3, r2
    4690:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4692:	4922      	ldr	r1, [pc, #136]	; (471c <getSelectorConfig+0x118>)
    4694:	9b04      	ldr	r3, [sp, #16]
    4696:	9a01      	ldr	r2, [sp, #4]
    4698:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    469c:	9b01      	ldr	r3, [sp, #4]
    469e:	2b1b      	cmp	r3, #27
    46a0:	d025      	beq.n	46ee <getSelectorConfig+0xea>
    46a2:	9b01      	ldr	r3, [sp, #4]
    46a4:	2b1b      	cmp	r3, #27
    46a6:	d832      	bhi.n	470e <getSelectorConfig+0x10a>
    46a8:	9b01      	ldr	r3, [sp, #4]
    46aa:	2b19      	cmp	r3, #25
    46ac:	d003      	beq.n	46b6 <getSelectorConfig+0xb2>
    46ae:	9b01      	ldr	r3, [sp, #4]
    46b0:	2b1a      	cmp	r3, #26
    46b2:	d00e      	beq.n	46d2 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46b4:	e02b      	b.n	470e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    46b6:	4b1a      	ldr	r3, [pc, #104]	; (4720 <getSelectorConfig+0x11c>)
    46b8:	695b      	ldr	r3, [r3, #20]
    46ba:	0e1b      	lsrs	r3, r3, #24
    46bc:	f003 030f 	and.w	r3, r3, #15
    46c0:	4a18      	ldr	r2, [pc, #96]	; (4724 <getSelectorConfig+0x120>)
    46c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    46c6:	4915      	ldr	r1, [pc, #84]	; (471c <getSelectorConfig+0x118>)
    46c8:	9b04      	ldr	r3, [sp, #16]
    46ca:	00db      	lsls	r3, r3, #3
    46cc:	440b      	add	r3, r1
    46ce:	605a      	str	r2, [r3, #4]
                break;
    46d0:	e01e      	b.n	4710 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    46d2:	4b13      	ldr	r3, [pc, #76]	; (4720 <getSelectorConfig+0x11c>)
    46d4:	699b      	ldr	r3, [r3, #24]
    46d6:	0e1b      	lsrs	r3, r3, #24
    46d8:	f003 030f 	and.w	r3, r3, #15
    46dc:	4a11      	ldr	r2, [pc, #68]	; (4724 <getSelectorConfig+0x120>)
    46de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    46e2:	490e      	ldr	r1, [pc, #56]	; (471c <getSelectorConfig+0x118>)
    46e4:	9b04      	ldr	r3, [sp, #16]
    46e6:	00db      	lsls	r3, r3, #3
    46e8:	440b      	add	r3, r1
    46ea:	605a      	str	r2, [r3, #4]
                break;
    46ec:	e010      	b.n	4710 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    46ee:	4b0c      	ldr	r3, [pc, #48]	; (4720 <getSelectorConfig+0x11c>)
    46f0:	69db      	ldr	r3, [r3, #28]
    46f2:	0e1b      	lsrs	r3, r3, #24
    46f4:	f003 030f 	and.w	r3, r3, #15
    46f8:	4a0a      	ldr	r2, [pc, #40]	; (4724 <getSelectorConfig+0x120>)
    46fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    46fe:	4907      	ldr	r1, [pc, #28]	; (471c <getSelectorConfig+0x118>)
    4700:	9b04      	ldr	r3, [sp, #16]
    4702:	00db      	lsls	r3, r3, #3
    4704:	440b      	add	r3, r1
    4706:	605a      	str	r2, [r3, #4]
                break;
    4708:	e002      	b.n	4710 <getSelectorConfig+0x10c>
        }
    }
    470a:	bf00      	nop
    470c:	e000      	b.n	4710 <getSelectorConfig+0x10c>
                break;
    470e:	bf00      	nop

    return ReturnValue;
    4710:	9b05      	ldr	r3, [sp, #20]
}
    4712:	4618      	mov	r0, r3
    4714:	b006      	add	sp, #24
    4716:	4770      	bx	lr
    4718:	1fff8bbc 	.word	0x1fff8bbc
    471c:	1fff8c70 	.word	0x1fff8c70
    4720:	40064000 	.word	0x40064000
    4724:	00008220 	.word	0x00008220

00004728 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4728:	b086      	sub	sp, #24
    472a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    472c:	2300      	movs	r3, #0
    472e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4730:	2300      	movs	r3, #0
    4732:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4734:	9b01      	ldr	r3, [sp, #4]
    4736:	2b1f      	cmp	r3, #31
    4738:	d00f      	beq.n	475a <getCoreDividerConfig+0x32>
    473a:	9b01      	ldr	r3, [sp, #4]
    473c:	2b1f      	cmp	r3, #31
    473e:	d80f      	bhi.n	4760 <getCoreDividerConfig+0x38>
    4740:	9b01      	ldr	r3, [sp, #4]
    4742:	2b1d      	cmp	r3, #29
    4744:	d003      	beq.n	474e <getCoreDividerConfig+0x26>
    4746:	9b01      	ldr	r3, [sp, #4]
    4748:	2b1e      	cmp	r3, #30
    474a:	d003      	beq.n	4754 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    474c:	e008      	b.n	4760 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    474e:	2300      	movs	r3, #0
    4750:	9304      	str	r3, [sp, #16]
            break;
    4752:	e006      	b.n	4762 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4754:	2301      	movs	r3, #1
    4756:	9304      	str	r3, [sp, #16]
            break;
    4758:	e003      	b.n	4762 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    475a:	2302      	movs	r3, #2
    475c:	9304      	str	r3, [sp, #16]
            break;
    475e:	e000      	b.n	4762 <getCoreDividerConfig+0x3a>
                break;
    4760:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4762:	4b41      	ldr	r3, [pc, #260]	; (4868 <getCoreDividerConfig+0x140>)
    4764:	681b      	ldr	r3, [r3, #0]
    4766:	2b00      	cmp	r3, #0
    4768:	d026      	beq.n	47b8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    476a:	2300      	movs	r3, #0
    476c:	9303      	str	r3, [sp, #12]
    476e:	e01c      	b.n	47aa <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4770:	4b3d      	ldr	r3, [pc, #244]	; (4868 <getCoreDividerConfig+0x140>)
    4772:	6819      	ldr	r1, [r3, #0]
    4774:	9a03      	ldr	r2, [sp, #12]
    4776:	4613      	mov	r3, r2
    4778:	005b      	lsls	r3, r3, #1
    477a:	4413      	add	r3, r2
    477c:	009b      	lsls	r3, r3, #2
    477e:	440b      	add	r3, r1
    4780:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4784:	681b      	ldr	r3, [r3, #0]
    4786:	9a01      	ldr	r2, [sp, #4]
    4788:	429a      	cmp	r2, r3
    478a:	d10b      	bne.n	47a4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    478c:	4b36      	ldr	r3, [pc, #216]	; (4868 <getCoreDividerConfig+0x140>)
    478e:	6819      	ldr	r1, [r3, #0]
    4790:	9a03      	ldr	r2, [sp, #12]
    4792:	4613      	mov	r3, r2
    4794:	005b      	lsls	r3, r3, #1
    4796:	4413      	add	r3, r2
    4798:	009b      	lsls	r3, r3, #2
    479a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    479e:	440b      	add	r3, r1
    47a0:	9305      	str	r3, [sp, #20]
                break;
    47a2:	e009      	b.n	47b8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    47a4:	9b03      	ldr	r3, [sp, #12]
    47a6:	3301      	adds	r3, #1
    47a8:	9303      	str	r3, [sp, #12]
    47aa:	4b2f      	ldr	r3, [pc, #188]	; (4868 <getCoreDividerConfig+0x140>)
    47ac:	681b      	ldr	r3, [r3, #0]
    47ae:	7b1b      	ldrb	r3, [r3, #12]
    47b0:	461a      	mov	r2, r3
    47b2:	9b03      	ldr	r3, [sp, #12]
    47b4:	4293      	cmp	r3, r2
    47b6:	d3db      	bcc.n	4770 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    47b8:	9b05      	ldr	r3, [sp, #20]
    47ba:	2b00      	cmp	r3, #0
    47bc:	d14d      	bne.n	485a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    47be:	9a04      	ldr	r2, [sp, #16]
    47c0:	4613      	mov	r3, r2
    47c2:	005b      	lsls	r3, r3, #1
    47c4:	4413      	add	r3, r2
    47c6:	009b      	lsls	r3, r3, #2
    47c8:	4a28      	ldr	r2, [pc, #160]	; (486c <getCoreDividerConfig+0x144>)
    47ca:	4413      	add	r3, r2
    47cc:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    47ce:	4927      	ldr	r1, [pc, #156]	; (486c <getCoreDividerConfig+0x144>)
    47d0:	9a04      	ldr	r2, [sp, #16]
    47d2:	4613      	mov	r3, r2
    47d4:	005b      	lsls	r3, r3, #1
    47d6:	4413      	add	r3, r2
    47d8:	009b      	lsls	r3, r3, #2
    47da:	440b      	add	r3, r1
    47dc:	9a01      	ldr	r2, [sp, #4]
    47de:	601a      	str	r2, [r3, #0]
        switch(Name)
    47e0:	9b01      	ldr	r3, [sp, #4]
    47e2:	2b1f      	cmp	r3, #31
    47e4:	d029      	beq.n	483a <getCoreDividerConfig+0x112>
    47e6:	9b01      	ldr	r3, [sp, #4]
    47e8:	2b1f      	cmp	r3, #31
    47ea:	d838      	bhi.n	485e <getCoreDividerConfig+0x136>
    47ec:	9b01      	ldr	r3, [sp, #4]
    47ee:	2b1d      	cmp	r3, #29
    47f0:	d003      	beq.n	47fa <getCoreDividerConfig+0xd2>
    47f2:	9b01      	ldr	r3, [sp, #4]
    47f4:	2b1e      	cmp	r3, #30
    47f6:	d010      	beq.n	481a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    47f8:	e031      	b.n	485e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    47fa:	4b1d      	ldr	r3, [pc, #116]	; (4870 <getCoreDividerConfig+0x148>)
    47fc:	695b      	ldr	r3, [r3, #20]
    47fe:	0c1b      	lsrs	r3, r3, #16
    4800:	f003 030f 	and.w	r3, r3, #15
    4804:	1c59      	adds	r1, r3, #1
    4806:	4819      	ldr	r0, [pc, #100]	; (486c <getCoreDividerConfig+0x144>)
    4808:	9a04      	ldr	r2, [sp, #16]
    480a:	4613      	mov	r3, r2
    480c:	005b      	lsls	r3, r3, #1
    480e:	4413      	add	r3, r2
    4810:	009b      	lsls	r3, r3, #2
    4812:	4403      	add	r3, r0
    4814:	3304      	adds	r3, #4
    4816:	6019      	str	r1, [r3, #0]
                break;
    4818:	e022      	b.n	4860 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    481a:	4b15      	ldr	r3, [pc, #84]	; (4870 <getCoreDividerConfig+0x148>)
    481c:	699b      	ldr	r3, [r3, #24]
    481e:	0c1b      	lsrs	r3, r3, #16
    4820:	f003 030f 	and.w	r3, r3, #15
    4824:	1c59      	adds	r1, r3, #1
    4826:	4811      	ldr	r0, [pc, #68]	; (486c <getCoreDividerConfig+0x144>)
    4828:	9a04      	ldr	r2, [sp, #16]
    482a:	4613      	mov	r3, r2
    482c:	005b      	lsls	r3, r3, #1
    482e:	4413      	add	r3, r2
    4830:	009b      	lsls	r3, r3, #2
    4832:	4403      	add	r3, r0
    4834:	3304      	adds	r3, #4
    4836:	6019      	str	r1, [r3, #0]
                break;
    4838:	e012      	b.n	4860 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    483a:	4b0d      	ldr	r3, [pc, #52]	; (4870 <getCoreDividerConfig+0x148>)
    483c:	69db      	ldr	r3, [r3, #28]
    483e:	0c1b      	lsrs	r3, r3, #16
    4840:	f003 030f 	and.w	r3, r3, #15
    4844:	1c59      	adds	r1, r3, #1
    4846:	4809      	ldr	r0, [pc, #36]	; (486c <getCoreDividerConfig+0x144>)
    4848:	9a04      	ldr	r2, [sp, #16]
    484a:	4613      	mov	r3, r2
    484c:	005b      	lsls	r3, r3, #1
    484e:	4413      	add	r3, r2
    4850:	009b      	lsls	r3, r3, #2
    4852:	4403      	add	r3, r0
    4854:	3304      	adds	r3, #4
    4856:	6019      	str	r1, [r3, #0]
                break;
    4858:	e002      	b.n	4860 <getCoreDividerConfig+0x138>
        }
    }
    485a:	bf00      	nop
    485c:	e000      	b.n	4860 <getCoreDividerConfig+0x138>
                break;
    485e:	bf00      	nop

    return ReturnValue;
    4860:	9b05      	ldr	r3, [sp, #20]
}
    4862:	4618      	mov	r0, r3
    4864:	b006      	add	sp, #24
    4866:	4770      	bx	lr
    4868:	1fff8bbc 	.word	0x1fff8bbc
    486c:	1fff8c88 	.word	0x1fff8c88
    4870:	40064000 	.word	0x40064000

00004874 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4874:	b086      	sub	sp, #24
    4876:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4878:	2300      	movs	r3, #0
    487a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    487c:	2300      	movs	r3, #0
    487e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4880:	9b01      	ldr	r3, [sp, #4]
    4882:	2b23      	cmp	r3, #35	; 0x23
    4884:	d00f      	beq.n	48a6 <getBusDividerConfig+0x32>
    4886:	9b01      	ldr	r3, [sp, #4]
    4888:	2b23      	cmp	r3, #35	; 0x23
    488a:	d80f      	bhi.n	48ac <getBusDividerConfig+0x38>
    488c:	9b01      	ldr	r3, [sp, #4]
    488e:	2b21      	cmp	r3, #33	; 0x21
    4890:	d003      	beq.n	489a <getBusDividerConfig+0x26>
    4892:	9b01      	ldr	r3, [sp, #4]
    4894:	2b22      	cmp	r3, #34	; 0x22
    4896:	d003      	beq.n	48a0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4898:	e008      	b.n	48ac <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    489a:	2300      	movs	r3, #0
    489c:	9304      	str	r3, [sp, #16]
            break;
    489e:	e006      	b.n	48ae <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    48a0:	2301      	movs	r3, #1
    48a2:	9304      	str	r3, [sp, #16]
            break;
    48a4:	e003      	b.n	48ae <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    48a6:	2302      	movs	r3, #2
    48a8:	9304      	str	r3, [sp, #16]
            break;
    48aa:	e000      	b.n	48ae <getBusDividerConfig+0x3a>
                break;
    48ac:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    48ae:	4b41      	ldr	r3, [pc, #260]	; (49b4 <getBusDividerConfig+0x140>)
    48b0:	681b      	ldr	r3, [r3, #0]
    48b2:	2b00      	cmp	r3, #0
    48b4:	d026      	beq.n	4904 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    48b6:	2300      	movs	r3, #0
    48b8:	9303      	str	r3, [sp, #12]
    48ba:	e01c      	b.n	48f6 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    48bc:	4b3d      	ldr	r3, [pc, #244]	; (49b4 <getBusDividerConfig+0x140>)
    48be:	6819      	ldr	r1, [r3, #0]
    48c0:	9a03      	ldr	r2, [sp, #12]
    48c2:	4613      	mov	r3, r2
    48c4:	005b      	lsls	r3, r3, #1
    48c6:	4413      	add	r3, r2
    48c8:	009b      	lsls	r3, r3, #2
    48ca:	440b      	add	r3, r1
    48cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	9a01      	ldr	r2, [sp, #4]
    48d4:	429a      	cmp	r2, r3
    48d6:	d10b      	bne.n	48f0 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    48d8:	4b36      	ldr	r3, [pc, #216]	; (49b4 <getBusDividerConfig+0x140>)
    48da:	6819      	ldr	r1, [r3, #0]
    48dc:	9a03      	ldr	r2, [sp, #12]
    48de:	4613      	mov	r3, r2
    48e0:	005b      	lsls	r3, r3, #1
    48e2:	4413      	add	r3, r2
    48e4:	009b      	lsls	r3, r3, #2
    48e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    48ea:	440b      	add	r3, r1
    48ec:	9305      	str	r3, [sp, #20]
                break;
    48ee:	e009      	b.n	4904 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    48f0:	9b03      	ldr	r3, [sp, #12]
    48f2:	3301      	adds	r3, #1
    48f4:	9303      	str	r3, [sp, #12]
    48f6:	4b2f      	ldr	r3, [pc, #188]	; (49b4 <getBusDividerConfig+0x140>)
    48f8:	681b      	ldr	r3, [r3, #0]
    48fa:	7b1b      	ldrb	r3, [r3, #12]
    48fc:	461a      	mov	r2, r3
    48fe:	9b03      	ldr	r3, [sp, #12]
    4900:	4293      	cmp	r3, r2
    4902:	d3db      	bcc.n	48bc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4904:	9b05      	ldr	r3, [sp, #20]
    4906:	2b00      	cmp	r3, #0
    4908:	d14d      	bne.n	49a6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    490a:	9a04      	ldr	r2, [sp, #16]
    490c:	4613      	mov	r3, r2
    490e:	005b      	lsls	r3, r3, #1
    4910:	4413      	add	r3, r2
    4912:	009b      	lsls	r3, r3, #2
    4914:	4a28      	ldr	r2, [pc, #160]	; (49b8 <getBusDividerConfig+0x144>)
    4916:	4413      	add	r3, r2
    4918:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    491a:	4927      	ldr	r1, [pc, #156]	; (49b8 <getBusDividerConfig+0x144>)
    491c:	9a04      	ldr	r2, [sp, #16]
    491e:	4613      	mov	r3, r2
    4920:	005b      	lsls	r3, r3, #1
    4922:	4413      	add	r3, r2
    4924:	009b      	lsls	r3, r3, #2
    4926:	440b      	add	r3, r1
    4928:	9a01      	ldr	r2, [sp, #4]
    492a:	601a      	str	r2, [r3, #0]
        switch(Name)
    492c:	9b01      	ldr	r3, [sp, #4]
    492e:	2b23      	cmp	r3, #35	; 0x23
    4930:	d029      	beq.n	4986 <getBusDividerConfig+0x112>
    4932:	9b01      	ldr	r3, [sp, #4]
    4934:	2b23      	cmp	r3, #35	; 0x23
    4936:	d838      	bhi.n	49aa <getBusDividerConfig+0x136>
    4938:	9b01      	ldr	r3, [sp, #4]
    493a:	2b21      	cmp	r3, #33	; 0x21
    493c:	d003      	beq.n	4946 <getBusDividerConfig+0xd2>
    493e:	9b01      	ldr	r3, [sp, #4]
    4940:	2b22      	cmp	r3, #34	; 0x22
    4942:	d010      	beq.n	4966 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4944:	e031      	b.n	49aa <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4946:	4b1d      	ldr	r3, [pc, #116]	; (49bc <getBusDividerConfig+0x148>)
    4948:	695b      	ldr	r3, [r3, #20]
    494a:	091b      	lsrs	r3, r3, #4
    494c:	f003 030f 	and.w	r3, r3, #15
    4950:	1c59      	adds	r1, r3, #1
    4952:	4819      	ldr	r0, [pc, #100]	; (49b8 <getBusDividerConfig+0x144>)
    4954:	9a04      	ldr	r2, [sp, #16]
    4956:	4613      	mov	r3, r2
    4958:	005b      	lsls	r3, r3, #1
    495a:	4413      	add	r3, r2
    495c:	009b      	lsls	r3, r3, #2
    495e:	4403      	add	r3, r0
    4960:	3304      	adds	r3, #4
    4962:	6019      	str	r1, [r3, #0]
                break;
    4964:	e022      	b.n	49ac <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4966:	4b15      	ldr	r3, [pc, #84]	; (49bc <getBusDividerConfig+0x148>)
    4968:	699b      	ldr	r3, [r3, #24]
    496a:	091b      	lsrs	r3, r3, #4
    496c:	f003 030f 	and.w	r3, r3, #15
    4970:	1c59      	adds	r1, r3, #1
    4972:	4811      	ldr	r0, [pc, #68]	; (49b8 <getBusDividerConfig+0x144>)
    4974:	9a04      	ldr	r2, [sp, #16]
    4976:	4613      	mov	r3, r2
    4978:	005b      	lsls	r3, r3, #1
    497a:	4413      	add	r3, r2
    497c:	009b      	lsls	r3, r3, #2
    497e:	4403      	add	r3, r0
    4980:	3304      	adds	r3, #4
    4982:	6019      	str	r1, [r3, #0]
                break;
    4984:	e012      	b.n	49ac <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4986:	4b0d      	ldr	r3, [pc, #52]	; (49bc <getBusDividerConfig+0x148>)
    4988:	69db      	ldr	r3, [r3, #28]
    498a:	091b      	lsrs	r3, r3, #4
    498c:	f003 030f 	and.w	r3, r3, #15
    4990:	1c59      	adds	r1, r3, #1
    4992:	4809      	ldr	r0, [pc, #36]	; (49b8 <getBusDividerConfig+0x144>)
    4994:	9a04      	ldr	r2, [sp, #16]
    4996:	4613      	mov	r3, r2
    4998:	005b      	lsls	r3, r3, #1
    499a:	4413      	add	r3, r2
    499c:	009b      	lsls	r3, r3, #2
    499e:	4403      	add	r3, r0
    49a0:	3304      	adds	r3, #4
    49a2:	6019      	str	r1, [r3, #0]
                break;
    49a4:	e002      	b.n	49ac <getBusDividerConfig+0x138>
        }
    }
    49a6:	bf00      	nop
    49a8:	e000      	b.n	49ac <getBusDividerConfig+0x138>
                break;
    49aa:	bf00      	nop

    return ReturnValue;
    49ac:	9b05      	ldr	r3, [sp, #20]
}
    49ae:	4618      	mov	r0, r3
    49b0:	b006      	add	sp, #24
    49b2:	4770      	bx	lr
    49b4:	1fff8bbc 	.word	0x1fff8bbc
    49b8:	1fff8cac 	.word	0x1fff8cac
    49bc:	40064000 	.word	0x40064000

000049c0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    49c0:	b086      	sub	sp, #24
    49c2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    49c4:	2300      	movs	r3, #0
    49c6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    49c8:	2300      	movs	r3, #0
    49ca:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    49cc:	9b01      	ldr	r3, [sp, #4]
    49ce:	2b27      	cmp	r3, #39	; 0x27
    49d0:	d00f      	beq.n	49f2 <getSlowDividerConfig+0x32>
    49d2:	9b01      	ldr	r3, [sp, #4]
    49d4:	2b27      	cmp	r3, #39	; 0x27
    49d6:	d80f      	bhi.n	49f8 <getSlowDividerConfig+0x38>
    49d8:	9b01      	ldr	r3, [sp, #4]
    49da:	2b25      	cmp	r3, #37	; 0x25
    49dc:	d003      	beq.n	49e6 <getSlowDividerConfig+0x26>
    49de:	9b01      	ldr	r3, [sp, #4]
    49e0:	2b26      	cmp	r3, #38	; 0x26
    49e2:	d003      	beq.n	49ec <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    49e4:	e008      	b.n	49f8 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    49e6:	2300      	movs	r3, #0
    49e8:	9304      	str	r3, [sp, #16]
            break;
    49ea:	e006      	b.n	49fa <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    49ec:	2301      	movs	r3, #1
    49ee:	9304      	str	r3, [sp, #16]
            break;
    49f0:	e003      	b.n	49fa <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    49f2:	2302      	movs	r3, #2
    49f4:	9304      	str	r3, [sp, #16]
            break;
    49f6:	e000      	b.n	49fa <getSlowDividerConfig+0x3a>
                break;
    49f8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    49fa:	4b40      	ldr	r3, [pc, #256]	; (4afc <getSlowDividerConfig+0x13c>)
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	2b00      	cmp	r3, #0
    4a00:	d026      	beq.n	4a50 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4a02:	2300      	movs	r3, #0
    4a04:	9303      	str	r3, [sp, #12]
    4a06:	e01c      	b.n	4a42 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4a08:	4b3c      	ldr	r3, [pc, #240]	; (4afc <getSlowDividerConfig+0x13c>)
    4a0a:	6819      	ldr	r1, [r3, #0]
    4a0c:	9a03      	ldr	r2, [sp, #12]
    4a0e:	4613      	mov	r3, r2
    4a10:	005b      	lsls	r3, r3, #1
    4a12:	4413      	add	r3, r2
    4a14:	009b      	lsls	r3, r3, #2
    4a16:	440b      	add	r3, r1
    4a18:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4a1c:	681b      	ldr	r3, [r3, #0]
    4a1e:	9a01      	ldr	r2, [sp, #4]
    4a20:	429a      	cmp	r2, r3
    4a22:	d10b      	bne.n	4a3c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4a24:	4b35      	ldr	r3, [pc, #212]	; (4afc <getSlowDividerConfig+0x13c>)
    4a26:	6819      	ldr	r1, [r3, #0]
    4a28:	9a03      	ldr	r2, [sp, #12]
    4a2a:	4613      	mov	r3, r2
    4a2c:	005b      	lsls	r3, r3, #1
    4a2e:	4413      	add	r3, r2
    4a30:	009b      	lsls	r3, r3, #2
    4a32:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4a36:	440b      	add	r3, r1
    4a38:	9305      	str	r3, [sp, #20]
                break;
    4a3a:	e009      	b.n	4a50 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4a3c:	9b03      	ldr	r3, [sp, #12]
    4a3e:	3301      	adds	r3, #1
    4a40:	9303      	str	r3, [sp, #12]
    4a42:	4b2e      	ldr	r3, [pc, #184]	; (4afc <getSlowDividerConfig+0x13c>)
    4a44:	681b      	ldr	r3, [r3, #0]
    4a46:	7b1b      	ldrb	r3, [r3, #12]
    4a48:	461a      	mov	r2, r3
    4a4a:	9b03      	ldr	r3, [sp, #12]
    4a4c:	4293      	cmp	r3, r2
    4a4e:	d3db      	bcc.n	4a08 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4a50:	9b05      	ldr	r3, [sp, #20]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d14a      	bne.n	4aec <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4a56:	9a04      	ldr	r2, [sp, #16]
    4a58:	4613      	mov	r3, r2
    4a5a:	005b      	lsls	r3, r3, #1
    4a5c:	4413      	add	r3, r2
    4a5e:	009b      	lsls	r3, r3, #2
    4a60:	4a27      	ldr	r2, [pc, #156]	; (4b00 <getSlowDividerConfig+0x140>)
    4a62:	4413      	add	r3, r2
    4a64:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4a66:	4926      	ldr	r1, [pc, #152]	; (4b00 <getSlowDividerConfig+0x140>)
    4a68:	9a04      	ldr	r2, [sp, #16]
    4a6a:	4613      	mov	r3, r2
    4a6c:	005b      	lsls	r3, r3, #1
    4a6e:	4413      	add	r3, r2
    4a70:	009b      	lsls	r3, r3, #2
    4a72:	440b      	add	r3, r1
    4a74:	9a01      	ldr	r2, [sp, #4]
    4a76:	601a      	str	r2, [r3, #0]
        switch(Name)
    4a78:	9b01      	ldr	r3, [sp, #4]
    4a7a:	2b27      	cmp	r3, #39	; 0x27
    4a7c:	d027      	beq.n	4ace <getSlowDividerConfig+0x10e>
    4a7e:	9b01      	ldr	r3, [sp, #4]
    4a80:	2b27      	cmp	r3, #39	; 0x27
    4a82:	d835      	bhi.n	4af0 <getSlowDividerConfig+0x130>
    4a84:	9b01      	ldr	r3, [sp, #4]
    4a86:	2b25      	cmp	r3, #37	; 0x25
    4a88:	d003      	beq.n	4a92 <getSlowDividerConfig+0xd2>
    4a8a:	9b01      	ldr	r3, [sp, #4]
    4a8c:	2b26      	cmp	r3, #38	; 0x26
    4a8e:	d00f      	beq.n	4ab0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4a90:	e02e      	b.n	4af0 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4a92:	4b1c      	ldr	r3, [pc, #112]	; (4b04 <getSlowDividerConfig+0x144>)
    4a94:	695b      	ldr	r3, [r3, #20]
    4a96:	f003 030f 	and.w	r3, r3, #15
    4a9a:	1c59      	adds	r1, r3, #1
    4a9c:	4818      	ldr	r0, [pc, #96]	; (4b00 <getSlowDividerConfig+0x140>)
    4a9e:	9a04      	ldr	r2, [sp, #16]
    4aa0:	4613      	mov	r3, r2
    4aa2:	005b      	lsls	r3, r3, #1
    4aa4:	4413      	add	r3, r2
    4aa6:	009b      	lsls	r3, r3, #2
    4aa8:	4403      	add	r3, r0
    4aaa:	3304      	adds	r3, #4
    4aac:	6019      	str	r1, [r3, #0]
                break;
    4aae:	e020      	b.n	4af2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4ab0:	4b14      	ldr	r3, [pc, #80]	; (4b04 <getSlowDividerConfig+0x144>)
    4ab2:	699b      	ldr	r3, [r3, #24]
    4ab4:	f003 030f 	and.w	r3, r3, #15
    4ab8:	1c59      	adds	r1, r3, #1
    4aba:	4811      	ldr	r0, [pc, #68]	; (4b00 <getSlowDividerConfig+0x140>)
    4abc:	9a04      	ldr	r2, [sp, #16]
    4abe:	4613      	mov	r3, r2
    4ac0:	005b      	lsls	r3, r3, #1
    4ac2:	4413      	add	r3, r2
    4ac4:	009b      	lsls	r3, r3, #2
    4ac6:	4403      	add	r3, r0
    4ac8:	3304      	adds	r3, #4
    4aca:	6019      	str	r1, [r3, #0]
                break;
    4acc:	e011      	b.n	4af2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4ace:	4b0d      	ldr	r3, [pc, #52]	; (4b04 <getSlowDividerConfig+0x144>)
    4ad0:	69db      	ldr	r3, [r3, #28]
    4ad2:	f003 030f 	and.w	r3, r3, #15
    4ad6:	1c59      	adds	r1, r3, #1
    4ad8:	4809      	ldr	r0, [pc, #36]	; (4b00 <getSlowDividerConfig+0x140>)
    4ada:	9a04      	ldr	r2, [sp, #16]
    4adc:	4613      	mov	r3, r2
    4ade:	005b      	lsls	r3, r3, #1
    4ae0:	4413      	add	r3, r2
    4ae2:	009b      	lsls	r3, r3, #2
    4ae4:	4403      	add	r3, r0
    4ae6:	3304      	adds	r3, #4
    4ae8:	6019      	str	r1, [r3, #0]
                break;
    4aea:	e002      	b.n	4af2 <getSlowDividerConfig+0x132>
        }
    }
    4aec:	bf00      	nop
    4aee:	e000      	b.n	4af2 <getSlowDividerConfig+0x132>
                break;
    4af0:	bf00      	nop

    return ReturnValue;
    4af2:	9b05      	ldr	r3, [sp, #20]
}
    4af4:	4618      	mov	r0, r3
    4af6:	b006      	add	sp, #24
    4af8:	4770      	bx	lr
    4afa:	bf00      	nop
    4afc:	1fff8bbc 	.word	0x1fff8bbc
    4b00:	1fff8cd0 	.word	0x1fff8cd0
    4b04:	40064000 	.word	0x40064000

00004b08 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4b08:	b500      	push	{lr}
    4b0a:	b083      	sub	sp, #12
    4b0c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4b0e:	4b64      	ldr	r3, [pc, #400]	; (4ca0 <Clock_Ip_ClockInitializeObjects+0x198>)
    4b10:	781b      	ldrb	r3, [r3, #0]
    4b12:	f083 0301 	eor.w	r3, r3, #1
    4b16:	b2db      	uxtb	r3, r3
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d05b      	beq.n	4bd4 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4b1c:	4b60      	ldr	r3, [pc, #384]	; (4ca0 <Clock_Ip_ClockInitializeObjects+0x198>)
    4b1e:	2201      	movs	r2, #1
    4b20:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4b22:	4b60      	ldr	r3, [pc, #384]	; (4ca4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4b24:	785b      	ldrb	r3, [r3, #1]
    4b26:	461a      	mov	r2, r3
    4b28:	4613      	mov	r3, r2
    4b2a:	009b      	lsls	r3, r3, #2
    4b2c:	4413      	add	r3, r2
    4b2e:	009b      	lsls	r3, r3, #2
    4b30:	4a5d      	ldr	r2, [pc, #372]	; (4ca8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4b32:	4413      	add	r3, r2
    4b34:	4a5d      	ldr	r2, [pc, #372]	; (4cac <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4b36:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4b38:	4b5d      	ldr	r3, [pc, #372]	; (4cb0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4b3a:	785b      	ldrb	r3, [r3, #1]
    4b3c:	461a      	mov	r2, r3
    4b3e:	4613      	mov	r3, r2
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	4413      	add	r3, r2
    4b44:	009b      	lsls	r3, r3, #2
    4b46:	4a5b      	ldr	r2, [pc, #364]	; (4cb4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4b48:	4413      	add	r3, r2
    4b4a:	4a5b      	ldr	r2, [pc, #364]	; (4cb8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4b4c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    4b4e:	4b5b      	ldr	r3, [pc, #364]	; (4cbc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4b50:	791b      	ldrb	r3, [r3, #4]
    4b52:	461a      	mov	r2, r3
    4b54:	4613      	mov	r3, r2
    4b56:	005b      	lsls	r3, r3, #1
    4b58:	4413      	add	r3, r2
    4b5a:	009b      	lsls	r3, r3, #2
    4b5c:	4a58      	ldr	r2, [pc, #352]	; (4cc0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    4b5e:	4413      	add	r3, r2
    4b60:	4a58      	ldr	r2, [pc, #352]	; (4cc4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4b62:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4b64:	4b58      	ldr	r3, [pc, #352]	; (4cc8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4b66:	795b      	ldrb	r3, [r3, #5]
    4b68:	00db      	lsls	r3, r3, #3
    4b6a:	4a58      	ldr	r2, [pc, #352]	; (4ccc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4b6c:	4413      	add	r3, r2
    4b6e:	4a58      	ldr	r2, [pc, #352]	; (4cd0 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4b70:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4b72:	4b55      	ldr	r3, [pc, #340]	; (4cc8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4b74:	79db      	ldrb	r3, [r3, #7]
    4b76:	00db      	lsls	r3, r3, #3
    4b78:	4a54      	ldr	r2, [pc, #336]	; (4ccc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4b7a:	4413      	add	r3, r2
    4b7c:	4a55      	ldr	r2, [pc, #340]	; (4cd4 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    4b7e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4b80:	4b55      	ldr	r3, [pc, #340]	; (4cd8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4b82:	799b      	ldrb	r3, [r3, #6]
    4b84:	009b      	lsls	r3, r3, #2
    4b86:	4a55      	ldr	r2, [pc, #340]	; (4cdc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4b88:	4413      	add	r3, r2
    4b8a:	4a55      	ldr	r2, [pc, #340]	; (4ce0 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4b8c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    4b8e:	4b52      	ldr	r3, [pc, #328]	; (4cd8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4b90:	7a1b      	ldrb	r3, [r3, #8]
    4b92:	009b      	lsls	r3, r3, #2
    4b94:	4a51      	ldr	r2, [pc, #324]	; (4cdc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4b96:	4413      	add	r3, r2
    4b98:	4a52      	ldr	r2, [pc, #328]	; (4ce4 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4b9a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4b9c:	4b4e      	ldr	r3, [pc, #312]	; (4cd8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4b9e:	7a5b      	ldrb	r3, [r3, #9]
    4ba0:	009b      	lsls	r3, r3, #2
    4ba2:	4a4e      	ldr	r2, [pc, #312]	; (4cdc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4ba4:	4413      	add	r3, r2
    4ba6:	4a50      	ldr	r2, [pc, #320]	; (4ce8 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4ba8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4baa:	4b4b      	ldr	r3, [pc, #300]	; (4cd8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4bac:	7adb      	ldrb	r3, [r3, #11]
    4bae:	009b      	lsls	r3, r3, #2
    4bb0:	4a4a      	ldr	r2, [pc, #296]	; (4cdc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4bb2:	4413      	add	r3, r2
    4bb4:	4a4d      	ldr	r2, [pc, #308]	; (4cec <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4bb6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4bb8:	4b47      	ldr	r3, [pc, #284]	; (4cd8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4bba:	7b1b      	ldrb	r3, [r3, #12]
    4bbc:	009b      	lsls	r3, r3, #2
    4bbe:	4a47      	ldr	r2, [pc, #284]	; (4cdc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4bc0:	4413      	add	r3, r2
    4bc2:	4a4b      	ldr	r2, [pc, #300]	; (4cf0 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4bc4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4bc6:	4b44      	ldr	r3, [pc, #272]	; (4cd8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4bc8:	7b9b      	ldrb	r3, [r3, #14]
    4bca:	009b      	lsls	r3, r3, #2
    4bcc:	4a43      	ldr	r2, [pc, #268]	; (4cdc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4bce:	4413      	add	r3, r2
    4bd0:	4a48      	ldr	r2, [pc, #288]	; (4cf4 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4bd2:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4bd4:	4b48      	ldr	r3, [pc, #288]	; (4cf8 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4bd6:	781b      	ldrb	r3, [r3, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d002      	beq.n	4be2 <Clock_Ip_ClockInitializeObjects+0xda>
    4bdc:	9b01      	ldr	r3, [sp, #4]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d003      	beq.n	4bea <Clock_Ip_ClockInitializeObjects+0xe2>
    4be2:	4b46      	ldr	r3, [pc, #280]	; (4cfc <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4be4:	781b      	ldrb	r3, [r3, #0]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d056      	beq.n	4c98 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4bea:	f7ff fc09 	bl	4400 <getFircConfig>
    4bee:	4603      	mov	r3, r0
    4bf0:	4a43      	ldr	r2, [pc, #268]	; (4d00 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4bf2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4bf4:	f7ff fc60 	bl	44b8 <getSoscConfig>
    4bf8:	4603      	mov	r3, r0
    4bfa:	4a42      	ldr	r2, [pc, #264]	; (4d04 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4bfc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4bfe:	f7ff fca7 	bl	4550 <getSpllConfig>
    4c02:	4603      	mov	r3, r0
    4c04:	4a40      	ldr	r2, [pc, #256]	; (4d08 <Clock_Ip_ClockInitializeObjects+0x200>)
    4c06:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4c08:	2019      	movs	r0, #25
    4c0a:	f7ff fcfb 	bl	4604 <getSelectorConfig>
    4c0e:	4603      	mov	r3, r0
    4c10:	4a3e      	ldr	r2, [pc, #248]	; (4d0c <Clock_Ip_ClockInitializeObjects+0x204>)
    4c12:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4c14:	201a      	movs	r0, #26
    4c16:	f7ff fcf5 	bl	4604 <getSelectorConfig>
    4c1a:	4603      	mov	r3, r0
    4c1c:	4a3c      	ldr	r2, [pc, #240]	; (4d10 <Clock_Ip_ClockInitializeObjects+0x208>)
    4c1e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4c20:	201b      	movs	r0, #27
    4c22:	f7ff fcef 	bl	4604 <getSelectorConfig>
    4c26:	4603      	mov	r3, r0
    4c28:	4a3a      	ldr	r2, [pc, #232]	; (4d14 <Clock_Ip_ClockInitializeObjects+0x20c>)
    4c2a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4c2c:	201d      	movs	r0, #29
    4c2e:	f7ff fd7b 	bl	4728 <getCoreDividerConfig>
    4c32:	4603      	mov	r3, r0
    4c34:	4a38      	ldr	r2, [pc, #224]	; (4d18 <Clock_Ip_ClockInitializeObjects+0x210>)
    4c36:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4c38:	201e      	movs	r0, #30
    4c3a:	f7ff fd75 	bl	4728 <getCoreDividerConfig>
    4c3e:	4603      	mov	r3, r0
    4c40:	4a36      	ldr	r2, [pc, #216]	; (4d1c <Clock_Ip_ClockInitializeObjects+0x214>)
    4c42:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4c44:	201f      	movs	r0, #31
    4c46:	f7ff fd6f 	bl	4728 <getCoreDividerConfig>
    4c4a:	4603      	mov	r3, r0
    4c4c:	4a34      	ldr	r2, [pc, #208]	; (4d20 <Clock_Ip_ClockInitializeObjects+0x218>)
    4c4e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4c50:	2021      	movs	r0, #33	; 0x21
    4c52:	f7ff fe0f 	bl	4874 <getBusDividerConfig>
    4c56:	4603      	mov	r3, r0
    4c58:	4a32      	ldr	r2, [pc, #200]	; (4d24 <Clock_Ip_ClockInitializeObjects+0x21c>)
    4c5a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4c5c:	2022      	movs	r0, #34	; 0x22
    4c5e:	f7ff fe09 	bl	4874 <getBusDividerConfig>
    4c62:	4603      	mov	r3, r0
    4c64:	4a30      	ldr	r2, [pc, #192]	; (4d28 <Clock_Ip_ClockInitializeObjects+0x220>)
    4c66:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4c68:	2023      	movs	r0, #35	; 0x23
    4c6a:	f7ff fe03 	bl	4874 <getBusDividerConfig>
    4c6e:	4603      	mov	r3, r0
    4c70:	4a2e      	ldr	r2, [pc, #184]	; (4d2c <Clock_Ip_ClockInitializeObjects+0x224>)
    4c72:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4c74:	2025      	movs	r0, #37	; 0x25
    4c76:	f7ff fea3 	bl	49c0 <getSlowDividerConfig>
    4c7a:	4603      	mov	r3, r0
    4c7c:	4a2c      	ldr	r2, [pc, #176]	; (4d30 <Clock_Ip_ClockInitializeObjects+0x228>)
    4c7e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4c80:	2026      	movs	r0, #38	; 0x26
    4c82:	f7ff fe9d 	bl	49c0 <getSlowDividerConfig>
    4c86:	4603      	mov	r3, r0
    4c88:	4a2a      	ldr	r2, [pc, #168]	; (4d34 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4c8a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4c8c:	2027      	movs	r0, #39	; 0x27
    4c8e:	f7ff fe97 	bl	49c0 <getSlowDividerConfig>
    4c92:	4603      	mov	r3, r0
    4c94:	4a28      	ldr	r2, [pc, #160]	; (4d38 <Clock_Ip_ClockInitializeObjects+0x230>)
    4c96:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4c98:	bf00      	nop
    4c9a:	b003      	add	sp, #12
    4c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    4ca0:	1fff8cf4 	.word	0x1fff8cf4
    4ca4:	00007b50 	.word	0x00007b50
    4ca8:	0000819c 	.word	0x0000819c
    4cac:	1fff8bc0 	.word	0x1fff8bc0
    4cb0:	00007b10 	.word	0x00007b10
    4cb4:	000080e4 	.word	0x000080e4
    4cb8:	1fff8bc4 	.word	0x1fff8bc4
    4cbc:	00007b20 	.word	0x00007b20
    4cc0:	00008150 	.word	0x00008150
    4cc4:	1fff8bc8 	.word	0x1fff8bc8
    4cc8:	00007b60 	.word	0x00007b60
    4ccc:	000081c8 	.word	0x000081c8
    4cd0:	1fff8bcc 	.word	0x1fff8bcc
    4cd4:	1fff8c08 	.word	0x1fff8c08
    4cd8:	00007af0 	.word	0x00007af0
    4cdc:	000080a0 	.word	0x000080a0
    4ce0:	1fff8bd0 	.word	0x1fff8bd0
    4ce4:	1fff8c0c 	.word	0x1fff8c0c
    4ce8:	1fff8bd4 	.word	0x1fff8bd4
    4cec:	1fff8c10 	.word	0x1fff8c10
    4cf0:	1fff8bd8 	.word	0x1fff8bd8
    4cf4:	1fff8c14 	.word	0x1fff8c14
    4cf8:	1fff8b19 	.word	0x1fff8b19
    4cfc:	1fff8b10 	.word	0x1fff8b10
    4d00:	1fff8bdc 	.word	0x1fff8bdc
    4d04:	1fff8be0 	.word	0x1fff8be0
    4d08:	1fff8be4 	.word	0x1fff8be4
    4d0c:	1fff8be8 	.word	0x1fff8be8
    4d10:	1fff8bec 	.word	0x1fff8bec
    4d14:	1fff8c18 	.word	0x1fff8c18
    4d18:	1fff8bf0 	.word	0x1fff8bf0
    4d1c:	1fff8bf4 	.word	0x1fff8bf4
    4d20:	1fff8c1c 	.word	0x1fff8c1c
    4d24:	1fff8bf8 	.word	0x1fff8bf8
    4d28:	1fff8bfc 	.word	0x1fff8bfc
    4d2c:	1fff8c20 	.word	0x1fff8c20
    4d30:	1fff8c00 	.word	0x1fff8c00
    4d34:	1fff8c04 	.word	0x1fff8c04
    4d38:	1fff8c24 	.word	0x1fff8c24

00004d3c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4d3c:	b500      	push	{lr}
    4d3e:	b083      	sub	sp, #12
    4d40:	9001      	str	r0, [sp, #4]
    4d42:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4d44:	9b01      	ldr	r3, [sp, #4]
    4d46:	2b03      	cmp	r3, #3
    4d48:	f000 8090 	beq.w	4e6c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4d4c:	9b01      	ldr	r3, [sp, #4]
    4d4e:	2b03      	cmp	r3, #3
    4d50:	f200 80d3 	bhi.w	4efa <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4d54:	9b01      	ldr	r3, [sp, #4]
    4d56:	2b00      	cmp	r3, #0
    4d58:	d040      	beq.n	4ddc <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4d5a:	9b01      	ldr	r3, [sp, #4]
    4d5c:	3b01      	subs	r3, #1
    4d5e:	2b01      	cmp	r3, #1
    4d60:	f200 80cb 	bhi.w	4efa <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4d64:	9b00      	ldr	r3, [sp, #0]
    4d66:	2b00      	cmp	r3, #0
    4d68:	f040 80c9 	bne.w	4efe <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4d6c:	4b68      	ldr	r3, [pc, #416]	; (4f10 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4d6e:	2200      	movs	r2, #0
    4d70:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4d72:	4b68      	ldr	r3, [pc, #416]	; (4f14 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	685b      	ldr	r3, [r3, #4]
    4d78:	4a67      	ldr	r2, [pc, #412]	; (4f18 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4d7a:	6812      	ldr	r2, [r2, #0]
    4d7c:	4610      	mov	r0, r2
    4d7e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4d80:	4b66      	ldr	r3, [pc, #408]	; (4f1c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	681b      	ldr	r3, [r3, #0]
    4d86:	4a66      	ldr	r2, [pc, #408]	; (4f20 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4d88:	6812      	ldr	r2, [r2, #0]
    4d8a:	4610      	mov	r0, r2
    4d8c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4d8e:	4b65      	ldr	r3, [pc, #404]	; (4f24 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	4a64      	ldr	r2, [pc, #400]	; (4f28 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4d96:	6812      	ldr	r2, [r2, #0]
    4d98:	4610      	mov	r0, r2
    4d9a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4d9c:	4b63      	ldr	r3, [pc, #396]	; (4f2c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4d9e:	681b      	ldr	r3, [r3, #0]
    4da0:	681b      	ldr	r3, [r3, #0]
    4da2:	4a63      	ldr	r2, [pc, #396]	; (4f30 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4da4:	6812      	ldr	r2, [r2, #0]
    4da6:	4610      	mov	r0, r2
    4da8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4daa:	4b62      	ldr	r3, [pc, #392]	; (4f34 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4dac:	681b      	ldr	r3, [r3, #0]
    4dae:	691b      	ldr	r3, [r3, #16]
    4db0:	4a61      	ldr	r2, [pc, #388]	; (4f38 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4db2:	6812      	ldr	r2, [r2, #0]
    4db4:	6812      	ldr	r2, [r2, #0]
    4db6:	4610      	mov	r0, r2
    4db8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4dba:	4b60      	ldr	r3, [pc, #384]	; (4f3c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	68db      	ldr	r3, [r3, #12]
    4dc0:	4a5f      	ldr	r2, [pc, #380]	; (4f40 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4dc2:	6812      	ldr	r2, [r2, #0]
    4dc4:	6812      	ldr	r2, [r2, #0]
    4dc6:	4610      	mov	r0, r2
    4dc8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4dca:	4b5e      	ldr	r3, [pc, #376]	; (4f44 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	689b      	ldr	r3, [r3, #8]
    4dd0:	4a5d      	ldr	r2, [pc, #372]	; (4f48 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4dd2:	6812      	ldr	r2, [r2, #0]
    4dd4:	6812      	ldr	r2, [r2, #0]
    4dd6:	4610      	mov	r0, r2
    4dd8:	4798      	blx	r3
            }
        }
        break;
    4dda:	e090      	b.n	4efe <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4ddc:	9b00      	ldr	r3, [sp, #0]
    4dde:	2b02      	cmp	r3, #2
    4de0:	f040 808f 	bne.w	4f02 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4de4:	4b4a      	ldr	r3, [pc, #296]	; (4f10 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4de6:	2201      	movs	r2, #1
    4de8:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4dea:	4b56      	ldr	r3, [pc, #344]	; (4f44 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	685b      	ldr	r3, [r3, #4]
    4df0:	4a55      	ldr	r2, [pc, #340]	; (4f48 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4df2:	6812      	ldr	r2, [r2, #0]
    4df4:	4610      	mov	r0, r2
    4df6:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4df8:	4b50      	ldr	r3, [pc, #320]	; (4f3c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4dfa:	681b      	ldr	r3, [r3, #0]
    4dfc:	691b      	ldr	r3, [r3, #16]
    4dfe:	4a50      	ldr	r2, [pc, #320]	; (4f40 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4e00:	6812      	ldr	r2, [r2, #0]
    4e02:	4610      	mov	r0, r2
    4e04:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4e06:	4b4d      	ldr	r3, [pc, #308]	; (4f3c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	689b      	ldr	r3, [r3, #8]
    4e0c:	4a4c      	ldr	r2, [pc, #304]	; (4f40 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4e0e:	6812      	ldr	r2, [r2, #0]
    4e10:	4610      	mov	r0, r2
    4e12:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4e14:	4b47      	ldr	r3, [pc, #284]	; (4f34 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	68db      	ldr	r3, [r3, #12]
    4e1a:	4a47      	ldr	r2, [pc, #284]	; (4f38 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4e1c:	6812      	ldr	r2, [r2, #0]
    4e1e:	4610      	mov	r0, r2
    4e20:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4e22:	4b44      	ldr	r3, [pc, #272]	; (4f34 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4e24:	681b      	ldr	r3, [r3, #0]
    4e26:	689b      	ldr	r3, [r3, #8]
    4e28:	4a43      	ldr	r2, [pc, #268]	; (4f38 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4e2a:	6812      	ldr	r2, [r2, #0]
    4e2c:	6812      	ldr	r2, [r2, #0]
    4e2e:	4610      	mov	r0, r2
    4e30:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4e32:	4b38      	ldr	r3, [pc, #224]	; (4f14 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4e34:	681b      	ldr	r3, [r3, #0]
    4e36:	685b      	ldr	r3, [r3, #4]
    4e38:	4a44      	ldr	r2, [pc, #272]	; (4f4c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4e3a:	6812      	ldr	r2, [r2, #0]
    4e3c:	4610      	mov	r0, r2
    4e3e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4e40:	4b36      	ldr	r3, [pc, #216]	; (4f1c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	681b      	ldr	r3, [r3, #0]
    4e46:	4a42      	ldr	r2, [pc, #264]	; (4f50 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4e48:	6812      	ldr	r2, [r2, #0]
    4e4a:	4610      	mov	r0, r2
    4e4c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4e4e:	4b35      	ldr	r3, [pc, #212]	; (4f24 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4e50:	681b      	ldr	r3, [r3, #0]
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	4a3f      	ldr	r2, [pc, #252]	; (4f54 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4e56:	6812      	ldr	r2, [r2, #0]
    4e58:	4610      	mov	r0, r2
    4e5a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4e5c:	4b33      	ldr	r3, [pc, #204]	; (4f2c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4e5e:	681b      	ldr	r3, [r3, #0]
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	4a3d      	ldr	r2, [pc, #244]	; (4f58 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4e64:	6812      	ldr	r2, [r2, #0]
    4e66:	4610      	mov	r0, r2
    4e68:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4e6a:	e04a      	b.n	4f02 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4e6c:	9b00      	ldr	r3, [sp, #0]
    4e6e:	2b02      	cmp	r3, #2
    4e70:	d149      	bne.n	4f06 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4e72:	4b27      	ldr	r3, [pc, #156]	; (4f10 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4e74:	2201      	movs	r2, #1
    4e76:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4e78:	4b32      	ldr	r3, [pc, #200]	; (4f44 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	685b      	ldr	r3, [r3, #4]
    4e7e:	4a32      	ldr	r2, [pc, #200]	; (4f48 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4e80:	6812      	ldr	r2, [r2, #0]
    4e82:	4610      	mov	r0, r2
    4e84:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4e86:	4b2d      	ldr	r3, [pc, #180]	; (4f3c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	691b      	ldr	r3, [r3, #16]
    4e8c:	4a2c      	ldr	r2, [pc, #176]	; (4f40 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4e8e:	6812      	ldr	r2, [r2, #0]
    4e90:	4610      	mov	r0, r2
    4e92:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4e94:	4b29      	ldr	r3, [pc, #164]	; (4f3c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4e96:	681b      	ldr	r3, [r3, #0]
    4e98:	689b      	ldr	r3, [r3, #8]
    4e9a:	4a29      	ldr	r2, [pc, #164]	; (4f40 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4e9c:	6812      	ldr	r2, [r2, #0]
    4e9e:	4610      	mov	r0, r2
    4ea0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4ea2:	4b24      	ldr	r3, [pc, #144]	; (4f34 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	68db      	ldr	r3, [r3, #12]
    4ea8:	4a23      	ldr	r2, [pc, #140]	; (4f38 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4eaa:	6812      	ldr	r2, [r2, #0]
    4eac:	4610      	mov	r0, r2
    4eae:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4eb0:	4b20      	ldr	r3, [pc, #128]	; (4f34 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4eb2:	681b      	ldr	r3, [r3, #0]
    4eb4:	689b      	ldr	r3, [r3, #8]
    4eb6:	4a20      	ldr	r2, [pc, #128]	; (4f38 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4eb8:	6812      	ldr	r2, [r2, #0]
    4eba:	6812      	ldr	r2, [r2, #0]
    4ebc:	4610      	mov	r0, r2
    4ebe:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4ec0:	4b26      	ldr	r3, [pc, #152]	; (4f5c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4ec2:	681b      	ldr	r3, [r3, #0]
    4ec4:	685b      	ldr	r3, [r3, #4]
    4ec6:	4a26      	ldr	r2, [pc, #152]	; (4f60 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4ec8:	6812      	ldr	r2, [r2, #0]
    4eca:	4610      	mov	r0, r2
    4ecc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4ece:	4b25      	ldr	r3, [pc, #148]	; (4f64 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4ed0:	681b      	ldr	r3, [r3, #0]
    4ed2:	681b      	ldr	r3, [r3, #0]
    4ed4:	4a24      	ldr	r2, [pc, #144]	; (4f68 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4ed6:	6812      	ldr	r2, [r2, #0]
    4ed8:	4610      	mov	r0, r2
    4eda:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4edc:	4b23      	ldr	r3, [pc, #140]	; (4f6c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	681b      	ldr	r3, [r3, #0]
    4ee2:	4a23      	ldr	r2, [pc, #140]	; (4f70 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4ee4:	6812      	ldr	r2, [r2, #0]
    4ee6:	4610      	mov	r0, r2
    4ee8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4eea:	4b22      	ldr	r3, [pc, #136]	; (4f74 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	4a21      	ldr	r2, [pc, #132]	; (4f78 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4ef2:	6812      	ldr	r2, [r2, #0]
    4ef4:	4610      	mov	r0, r2
    4ef6:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4ef8:	e005      	b.n	4f06 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4efa:	bf00      	nop
    4efc:	e004      	b.n	4f08 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4efe:	bf00      	nop
    4f00:	e002      	b.n	4f08 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4f02:	bf00      	nop
    4f04:	e000      	b.n	4f08 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4f06:	bf00      	nop
    }

}
    4f08:	bf00      	nop
    4f0a:	b003      	add	sp, #12
    4f0c:	f85d fb04 	ldr.w	pc, [sp], #4
    4f10:	1fff8b19 	.word	0x1fff8b19
    4f14:	1fff8bcc 	.word	0x1fff8bcc
    4f18:	1fff8bec 	.word	0x1fff8bec
    4f1c:	1fff8bd0 	.word	0x1fff8bd0
    4f20:	1fff8bf4 	.word	0x1fff8bf4
    4f24:	1fff8bd4 	.word	0x1fff8bd4
    4f28:	1fff8bfc 	.word	0x1fff8bfc
    4f2c:	1fff8bd8 	.word	0x1fff8bd8
    4f30:	1fff8c04 	.word	0x1fff8c04
    4f34:	1fff8bc0 	.word	0x1fff8bc0
    4f38:	1fff8be4 	.word	0x1fff8be4
    4f3c:	1fff8bc4 	.word	0x1fff8bc4
    4f40:	1fff8be0 	.word	0x1fff8be0
    4f44:	1fff8bc8 	.word	0x1fff8bc8
    4f48:	1fff8bdc 	.word	0x1fff8bdc
    4f4c:	1fff8be8 	.word	0x1fff8be8
    4f50:	1fff8bf0 	.word	0x1fff8bf0
    4f54:	1fff8bf8 	.word	0x1fff8bf8
    4f58:	1fff8c00 	.word	0x1fff8c00
    4f5c:	1fff8c08 	.word	0x1fff8c08
    4f60:	1fff8c18 	.word	0x1fff8c18
    4f64:	1fff8c0c 	.word	0x1fff8c0c
    4f68:	1fff8c1c 	.word	0x1fff8c1c
    4f6c:	1fff8c10 	.word	0x1fff8c10
    4f70:	1fff8c20 	.word	0x1fff8c20
    4f74:	1fff8c14 	.word	0x1fff8c14
    4f78:	1fff8c24 	.word	0x1fff8c24

00004f7c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4f7c:	b500      	push	{lr}
    4f7e:	b083      	sub	sp, #12
    4f80:	9001      	str	r0, [sp, #4]
    4f82:	9100      	str	r1, [sp, #0]
    switch(Command)
    4f84:	9b00      	ldr	r3, [sp, #0]
    4f86:	2b04      	cmp	r3, #4
    4f88:	d010      	beq.n	4fac <Clock_Ip_Command+0x30>
    4f8a:	9b00      	ldr	r3, [sp, #0]
    4f8c:	2b04      	cmp	r3, #4
    4f8e:	d811      	bhi.n	4fb4 <Clock_Ip_Command+0x38>
    4f90:	9b00      	ldr	r3, [sp, #0]
    4f92:	2b01      	cmp	r3, #1
    4f94:	d006      	beq.n	4fa4 <Clock_Ip_Command+0x28>
    4f96:	9b00      	ldr	r3, [sp, #0]
    4f98:	2b02      	cmp	r3, #2
    4f9a:	d10b      	bne.n	4fb4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4f9c:	9801      	ldr	r0, [sp, #4]
    4f9e:	f7ff fdb3 	bl	4b08 <Clock_Ip_ClockInitializeObjects>
            break;
    4fa2:	e008      	b.n	4fb6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4fa4:	9801      	ldr	r0, [sp, #4]
    4fa6:	f7ff f9db 	bl	4360 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4faa:	e004      	b.n	4fb6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4fac:	9801      	ldr	r0, [sp, #4]
    4fae:	f7ff f8ed 	bl	418c <DisableSafeClock>
            break;
    4fb2:	e000      	b.n	4fb6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4fb4:	bf00      	nop
    }
}
    4fb6:	bf00      	nop
    4fb8:	b003      	add	sp, #12
    4fba:	f85d fb04 	ldr.w	pc, [sp], #4
    4fbe:	bf00      	nop

00004fc0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4fc0:	b500      	push	{lr}
    4fc2:	b085      	sub	sp, #20
    4fc4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4fc6:	4a20      	ldr	r2, [pc, #128]	; (5048 <Mcu_Init+0x88>)
    4fc8:	9b01      	ldr	r3, [sp, #4]
    4fca:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4fcc:	2300      	movs	r3, #0
    4fce:	9303      	str	r3, [sp, #12]
    4fd0:	e010      	b.n	4ff4 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4fd2:	4b1d      	ldr	r3, [pc, #116]	; (5048 <Mcu_Init+0x88>)
    4fd4:	681b      	ldr	r3, [r3, #0]
    4fd6:	6919      	ldr	r1, [r3, #16]
    4fd8:	9a03      	ldr	r2, [sp, #12]
    4fda:	4613      	mov	r3, r2
    4fdc:	005b      	lsls	r3, r3, #1
    4fde:	4413      	add	r3, r2
    4fe0:	009b      	lsls	r3, r3, #2
    4fe2:	440b      	add	r3, r1
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	9a03      	ldr	r2, [sp, #12]
    4fe8:	b2d1      	uxtb	r1, r2
    4fea:	4a18      	ldr	r2, [pc, #96]	; (504c <Mcu_Init+0x8c>)
    4fec:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4fee:	9b03      	ldr	r3, [sp, #12]
    4ff0:	3301      	adds	r3, #1
    4ff2:	9303      	str	r3, [sp, #12]
    4ff4:	4b14      	ldr	r3, [pc, #80]	; (5048 <Mcu_Init+0x88>)
    4ff6:	681b      	ldr	r3, [r3, #0]
    4ff8:	689b      	ldr	r3, [r3, #8]
    4ffa:	9a03      	ldr	r2, [sp, #12]
    4ffc:	429a      	cmp	r2, r3
    4ffe:	d3e8      	bcc.n	4fd2 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5000:	2300      	movs	r3, #0
    5002:	9303      	str	r3, [sp, #12]
    5004:	e010      	b.n	5028 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5006:	4b10      	ldr	r3, [pc, #64]	; (5048 <Mcu_Init+0x88>)
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	6959      	ldr	r1, [r3, #20]
    500c:	9a03      	ldr	r2, [sp, #12]
    500e:	4613      	mov	r3, r2
    5010:	01db      	lsls	r3, r3, #7
    5012:	1a9b      	subs	r3, r3, r2
    5014:	00db      	lsls	r3, r3, #3
    5016:	440b      	add	r3, r1
    5018:	681b      	ldr	r3, [r3, #0]
    501a:	9a03      	ldr	r2, [sp, #12]
    501c:	b2d1      	uxtb	r1, r2
    501e:	4a0c      	ldr	r2, [pc, #48]	; (5050 <Mcu_Init+0x90>)
    5020:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5022:	9b03      	ldr	r3, [sp, #12]
    5024:	3301      	adds	r3, #1
    5026:	9303      	str	r3, [sp, #12]
    5028:	4b07      	ldr	r3, [pc, #28]	; (5048 <Mcu_Init+0x88>)
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	68db      	ldr	r3, [r3, #12]
    502e:	9a03      	ldr	r2, [sp, #12]
    5030:	429a      	cmp	r2, r3
    5032:	d3e8      	bcc.n	5006 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5034:	4b04      	ldr	r3, [pc, #16]	; (5048 <Mcu_Init+0x88>)
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	699b      	ldr	r3, [r3, #24]
    503a:	4618      	mov	r0, r3
    503c:	f000 f88a 	bl	5154 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5040:	bf00      	nop
    5042:	b005      	add	sp, #20
    5044:	f85d fb04 	ldr.w	pc, [sp], #4
    5048:	1fff8d00 	.word	0x1fff8d00
    504c:	1fff8cfc 	.word	0x1fff8cfc
    5050:	1fff8cf8 	.word	0x1fff8cf8

00005054 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5054:	b084      	sub	sp, #16
    5056:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5058:	2301      	movs	r3, #1
    505a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    505e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5062:	4618      	mov	r0, r3
    5064:	b004      	add	sp, #16
    5066:	4770      	bx	lr

00005068 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5068:	b500      	push	{lr}
    506a:	b085      	sub	sp, #20
    506c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    506e:	4a0e      	ldr	r2, [pc, #56]	; (50a8 <Mcu_InitClock+0x40>)
    5070:	9b01      	ldr	r3, [sp, #4]
    5072:	4413      	add	r3, r2
    5074:	781b      	ldrb	r3, [r3, #0]
    5076:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    507a:	4b0c      	ldr	r3, [pc, #48]	; (50ac <Mcu_InitClock+0x44>)
    507c:	681b      	ldr	r3, [r3, #0]
    507e:	6959      	ldr	r1, [r3, #20]
    5080:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5084:	4613      	mov	r3, r2
    5086:	01db      	lsls	r3, r3, #7
    5088:	1a9b      	subs	r3, r3, r2
    508a:	00db      	lsls	r3, r3, #3
    508c:	440b      	add	r3, r1
    508e:	4618      	mov	r0, r3
    5090:	f000 f86a 	bl	5168 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5094:	2300      	movs	r3, #0
    5096:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    509a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    509e:	4618      	mov	r0, r3
    50a0:	b005      	add	sp, #20
    50a2:	f85d fb04 	ldr.w	pc, [sp], #4
    50a6:	bf00      	nop
    50a8:	1fff8cf8 	.word	0x1fff8cf8
    50ac:	1fff8d00 	.word	0x1fff8d00

000050b0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    50b0:	b500      	push	{lr}
    50b2:	b085      	sub	sp, #20
    50b4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    50b6:	4a0d      	ldr	r2, [pc, #52]	; (50ec <Mcu_SetMode+0x3c>)
    50b8:	9b01      	ldr	r3, [sp, #4]
    50ba:	4413      	add	r3, r2
    50bc:	781b      	ldrb	r3, [r3, #0]
    50be:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    50c2:	f001 fb27 	bl	6714 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    50c6:	4b0a      	ldr	r3, [pc, #40]	; (50f0 <Mcu_SetMode+0x40>)
    50c8:	681b      	ldr	r3, [r3, #0]
    50ca:	6919      	ldr	r1, [r3, #16]
    50cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    50d0:	4613      	mov	r3, r2
    50d2:	005b      	lsls	r3, r3, #1
    50d4:	4413      	add	r3, r2
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	440b      	add	r3, r1
    50da:	4618      	mov	r0, r3
    50dc:	f000 f84e 	bl	517c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    50e0:	f001 fb44 	bl	676c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    50e4:	bf00      	nop
    50e6:	b005      	add	sp, #20
    50e8:	f85d fb04 	ldr.w	pc, [sp], #4
    50ec:	1fff8cfc 	.word	0x1fff8cfc
    50f0:	1fff8d00 	.word	0x1fff8d00

000050f4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    50f4:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    50f6:	2302      	movs	r3, #2
    50f8:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    50fa:	9b01      	ldr	r3, [sp, #4]
}
    50fc:	4618      	mov	r0, r3
    50fe:	b002      	add	sp, #8
    5100:	4770      	bx	lr

00005102 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5102:	b500      	push	{lr}
    5104:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5106:	f000 f843 	bl	5190 <Mcu_Ipw_GetResetReason>
    510a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    510c:	9b01      	ldr	r3, [sp, #4]
}
    510e:	4618      	mov	r0, r3
    5110:	b003      	add	sp, #12
    5112:	f85d fb04 	ldr.w	pc, [sp], #4

00005116 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5116:	b500      	push	{lr}
    5118:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    511a:	f000 f83f 	bl	519c <Mcu_Ipw_GetResetRawValue>
    511e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5120:	9b01      	ldr	r3, [sp, #4]
}
    5122:	4618      	mov	r0, r3
    5124:	b003      	add	sp, #12
    5126:	f85d fb04 	ldr.w	pc, [sp], #4

0000512a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    512a:	b500      	push	{lr}
    512c:	b083      	sub	sp, #12
    512e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5130:	9801      	ldr	r0, [sp, #4]
    5132:	f000 f839 	bl	51a8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5136:	bf00      	nop
    5138:	b003      	add	sp, #12
    513a:	f85d fb04 	ldr.w	pc, [sp], #4

0000513e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    513e:	b082      	sub	sp, #8
    5140:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5142:	4b03      	ldr	r3, [pc, #12]	; (5150 <Mcu_ClkSrcFailureNotification+0x12>)
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5148:	bf00      	nop
    514a:	b002      	add	sp, #8
    514c:	4770      	bx	lr
    514e:	bf00      	nop
    5150:	1fff8d00 	.word	0x1fff8d00

00005154 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5154:	b500      	push	{lr}
    5156:	b083      	sub	sp, #12
    5158:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    515a:	9801      	ldr	r0, [sp, #4]
    515c:	f000 f882 	bl	5264 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5160:	bf00      	nop
    5162:	b003      	add	sp, #12
    5164:	f85d fb04 	ldr.w	pc, [sp], #4

00005168 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5168:	b500      	push	{lr}
    516a:	b083      	sub	sp, #12
    516c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    516e:	9801      	ldr	r0, [sp, #4]
    5170:	f7fc fc6a 	bl	1a48 <Clock_Ip_InitClock>
}
    5174:	bf00      	nop
    5176:	b003      	add	sp, #12
    5178:	f85d fb04 	ldr.w	pc, [sp], #4

0000517c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    517c:	b500      	push	{lr}
    517e:	b083      	sub	sp, #12
    5180:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5182:	9801      	ldr	r0, [sp, #4]
    5184:	f000 f820 	bl	51c8 <Power_Ip_SetMode>
}
    5188:	bf00      	nop
    518a:	b003      	add	sp, #12
    518c:	f85d fb04 	ldr.w	pc, [sp], #4

00005190 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5190:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5192:	f000 f84f 	bl	5234 <Power_Ip_GetResetReason>
    5196:	4603      	mov	r3, r0
}
    5198:	4618      	mov	r0, r3
    519a:	bd08      	pop	{r3, pc}

0000519c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    519c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    519e:	f000 f857 	bl	5250 <Power_Ip_GetResetRawValue>
    51a2:	4603      	mov	r3, r0
}
    51a4:	4618      	mov	r0, r3
    51a6:	bd08      	pop	{r3, pc}

000051a8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    51a8:	b500      	push	{lr}
    51aa:	b083      	sub	sp, #12
    51ac:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    51ae:	9b01      	ldr	r3, [sp, #4]
    51b0:	2b00      	cmp	r3, #0
    51b2:	d102      	bne.n	51ba <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    51b4:	f000 f86c 	bl	5290 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    51b8:	e001      	b.n	51be <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    51ba:	f000 f86e 	bl	529a <Power_Ip_EnableSleepOnExit>
}
    51be:	bf00      	nop
    51c0:	b003      	add	sp, #12
    51c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000051c8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    51c8:	b500      	push	{lr}
    51ca:	b085      	sub	sp, #20
    51cc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    51ce:	9b01      	ldr	r3, [sp, #4]
    51d0:	685b      	ldr	r3, [r3, #4]
    51d2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    51d4:	9802      	ldr	r0, [sp, #8]
    51d6:	f000 f9f5 	bl	55c4 <Power_Ip_SMC_ModeCheckEntry>
    51da:	4603      	mov	r3, r0
    51dc:	2b00      	cmp	r3, #0
    51de:	d002      	beq.n	51e6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    51e0:	2301      	movs	r3, #1
    51e2:	9303      	str	r3, [sp, #12]
    51e4:	e003      	b.n	51ee <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    51e6:	9801      	ldr	r0, [sp, #4]
    51e8:	f000 fa1e 	bl	5628 <Power_Ip_SMC_ModeConfig>
    51ec:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    51ee:	9b03      	ldr	r3, [sp, #12]
    51f0:	2b01      	cmp	r3, #1
    51f2:	d103      	bne.n	51fc <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    51f4:	21ff      	movs	r1, #255	; 0xff
    51f6:	2003      	movs	r0, #3
    51f8:	f000 f8f4 	bl	53e4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    51fc:	bf00      	nop
    51fe:	b005      	add	sp, #20
    5200:	f85d fb04 	ldr.w	pc, [sp], #4

00005204 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5204:	b084      	sub	sp, #16
    5206:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5208:	230c      	movs	r3, #12
    520a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    520c:	4a08      	ldr	r2, [pc, #32]	; (5230 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    520e:	9b01      	ldr	r3, [sp, #4]
    5210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5214:	2b0e      	cmp	r3, #14
    5216:	d805      	bhi.n	5224 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5218:	4a05      	ldr	r2, [pc, #20]	; (5230 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    521a:	9b01      	ldr	r3, [sp, #4]
    521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5220:	9303      	str	r3, [sp, #12]
    5222:	e001      	b.n	5228 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5224:	230c      	movs	r3, #12
    5226:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5228:	9b03      	ldr	r3, [sp, #12]
}
    522a:	4618      	mov	r0, r3
    522c:	b004      	add	sp, #16
    522e:	4770      	bx	lr
    5230:	0000823c 	.word	0x0000823c

00005234 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5234:	b500      	push	{lr}
    5236:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5238:	f000 f940 	bl	54bc <Power_Ip_RCM_GetResetReason>
    523c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    523e:	9801      	ldr	r0, [sp, #4]
    5240:	f7ff ffe0 	bl	5204 <Power_Ip_ConvertIntergeToResetType>
    5244:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5246:	9b00      	ldr	r3, [sp, #0]
}
    5248:	4618      	mov	r0, r3
    524a:	b003      	add	sp, #12
    524c:	f85d fb04 	ldr.w	pc, [sp], #4

00005250 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5250:	b500      	push	{lr}
    5252:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5254:	f000 f98a 	bl	556c <Power_Ip_RCM_GetResetRawValue>
    5258:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    525a:	9b01      	ldr	r3, [sp, #4]
}
    525c:	4618      	mov	r0, r3
    525e:	b003      	add	sp, #12
    5260:	f85d fb04 	ldr.w	pc, [sp], #4

00005264 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5264:	b500      	push	{lr}
    5266:	b083      	sub	sp, #12
    5268:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    526a:	9b01      	ldr	r3, [sp, #4]
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	4618      	mov	r0, r3
    5270:	f000 f90e 	bl	5490 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5274:	9b01      	ldr	r3, [sp, #4]
    5276:	685b      	ldr	r3, [r3, #4]
    5278:	4618      	mov	r0, r3
    527a:	f000 f86d 	bl	5358 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    527e:	9b01      	ldr	r3, [sp, #4]
    5280:	689b      	ldr	r3, [r3, #8]
    5282:	4618      	mov	r0, r3
    5284:	f000 f990 	bl	55a8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5288:	bf00      	nop
    528a:	b003      	add	sp, #12
    528c:	f85d fb04 	ldr.w	pc, [sp], #4

00005290 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5290:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5292:	f000 f811 	bl	52b8 <Power_Ip_CM4_DisableSleepOnExit>
}
    5296:	bf00      	nop
    5298:	bd08      	pop	{r3, pc}

0000529a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    529a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    529c:	f000 f820 	bl	52e0 <Power_Ip_CM4_EnableSleepOnExit>
}
    52a0:	bf00      	nop
    52a2:	bd08      	pop	{r3, pc}

000052a4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    52a4:	b082      	sub	sp, #8
    52a6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    52a8:	4a02      	ldr	r2, [pc, #8]	; (52b4 <Power_Ip_InstallNotificationsCallback+0x10>)
    52aa:	9b01      	ldr	r3, [sp, #4]
    52ac:	6013      	str	r3, [r2, #0]
}
    52ae:	bf00      	nop
    52b0:	b002      	add	sp, #8
    52b2:	4770      	bx	lr
    52b4:	1fff8b1c 	.word	0x1fff8b1c

000052b8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    52b8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    52ba:	2300      	movs	r3, #0
    52bc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    52be:	4b07      	ldr	r3, [pc, #28]	; (52dc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    52c0:	681b      	ldr	r3, [r3, #0]
    52c2:	685b      	ldr	r3, [r3, #4]
    52c4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    52c6:	9b01      	ldr	r3, [sp, #4]
    52c8:	f023 0302 	bic.w	r3, r3, #2
    52cc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    52ce:	4b03      	ldr	r3, [pc, #12]	; (52dc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	9a01      	ldr	r2, [sp, #4]
    52d4:	605a      	str	r2, [r3, #4]
}
    52d6:	bf00      	nop
    52d8:	b002      	add	sp, #8
    52da:	4770      	bx	lr
    52dc:	1fff8b20 	.word	0x1fff8b20

000052e0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    52e0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    52e2:	2300      	movs	r3, #0
    52e4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    52e6:	4b07      	ldr	r3, [pc, #28]	; (5304 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    52e8:	681b      	ldr	r3, [r3, #0]
    52ea:	685b      	ldr	r3, [r3, #4]
    52ec:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    52ee:	9b01      	ldr	r3, [sp, #4]
    52f0:	f043 0302 	orr.w	r3, r3, #2
    52f4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    52f6:	4b03      	ldr	r3, [pc, #12]	; (5304 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	9a01      	ldr	r2, [sp, #4]
    52fc:	605a      	str	r2, [r3, #4]
}
    52fe:	bf00      	nop
    5300:	b002      	add	sp, #8
    5302:	4770      	bx	lr
    5304:	1fff8b20 	.word	0x1fff8b20

00005308 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5308:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    530a:	2300      	movs	r3, #0
    530c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    530e:	4b07      	ldr	r3, [pc, #28]	; (532c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5310:	681b      	ldr	r3, [r3, #0]
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5316:	9b01      	ldr	r3, [sp, #4]
    5318:	f043 0304 	orr.w	r3, r3, #4
    531c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    531e:	4b03      	ldr	r3, [pc, #12]	; (532c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5320:	681b      	ldr	r3, [r3, #0]
    5322:	9a01      	ldr	r2, [sp, #4]
    5324:	605a      	str	r2, [r3, #4]
}
    5326:	bf00      	nop
    5328:	b002      	add	sp, #8
    532a:	4770      	bx	lr
    532c:	1fff8b20 	.word	0x1fff8b20

00005330 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5330:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5332:	2300      	movs	r3, #0
    5334:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5336:	4b07      	ldr	r3, [pc, #28]	; (5354 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	685b      	ldr	r3, [r3, #4]
    533c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    533e:	9b01      	ldr	r3, [sp, #4]
    5340:	f023 0304 	bic.w	r3, r3, #4
    5344:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5346:	4b03      	ldr	r3, [pc, #12]	; (5354 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5348:	681b      	ldr	r3, [r3, #0]
    534a:	9a01      	ldr	r2, [sp, #4]
    534c:	605a      	str	r2, [r3, #4]
}
    534e:	bf00      	nop
    5350:	b002      	add	sp, #8
    5352:	4770      	bx	lr
    5354:	1fff8b20 	.word	0x1fff8b20

00005358 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5358:	b084      	sub	sp, #16
    535a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    535c:	4b20      	ldr	r3, [pc, #128]	; (53e0 <Power_Ip_PMC_PowerInit+0x88>)
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5364:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5368:	f003 030f 	and.w	r3, r3, #15
    536c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5370:	9b01      	ldr	r3, [sp, #4]
    5372:	781a      	ldrb	r2, [r3, #0]
    5374:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5378:	4313      	orrs	r3, r2
    537a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    537e:	4a18      	ldr	r2, [pc, #96]	; (53e0 <Power_Ip_PMC_PowerInit+0x88>)
    5380:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5384:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5386:	4b16      	ldr	r3, [pc, #88]	; (53e0 <Power_Ip_PMC_PowerInit+0x88>)
    5388:	785b      	ldrb	r3, [r3, #1]
    538a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    538e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5392:	f003 031f 	and.w	r3, r3, #31
    5396:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    539a:	9b01      	ldr	r3, [sp, #4]
    539c:	785a      	ldrb	r2, [r3, #1]
    539e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    53a2:	4313      	orrs	r3, r2
    53a4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    53a8:	4a0d      	ldr	r2, [pc, #52]	; (53e0 <Power_Ip_PMC_PowerInit+0x88>)
    53aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    53ae:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    53b0:	4b0b      	ldr	r3, [pc, #44]	; (53e0 <Power_Ip_PMC_PowerInit+0x88>)
    53b2:	789b      	ldrb	r3, [r3, #2]
    53b4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    53b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    53bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    53c0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    53c4:	9b01      	ldr	r3, [sp, #4]
    53c6:	789a      	ldrb	r2, [r3, #2]
    53c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    53cc:	4313      	orrs	r3, r2
    53ce:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    53d2:	4a03      	ldr	r2, [pc, #12]	; (53e0 <Power_Ip_PMC_PowerInit+0x88>)
    53d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    53d8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    53da:	bf00      	nop
    53dc:	b004      	add	sp, #16
    53de:	4770      	bx	lr
    53e0:	4007d000 	.word	0x4007d000

000053e4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    53e4:	b500      	push	{lr}
    53e6:	b083      	sub	sp, #12
    53e8:	9001      	str	r0, [sp, #4]
    53ea:	460b      	mov	r3, r1
    53ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    53f0:	4b05      	ldr	r3, [pc, #20]	; (5408 <Power_Ip_ReportPowerErrors+0x24>)
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    53f8:	4611      	mov	r1, r2
    53fa:	9801      	ldr	r0, [sp, #4]
    53fc:	4798      	blx	r3
}
    53fe:	bf00      	nop
    5400:	b003      	add	sp, #12
    5402:	f85d fb04 	ldr.w	pc, [sp], #4
    5406:	bf00      	nop
    5408:	1fff8b1c 	.word	0x1fff8b1c

0000540c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    540c:	b082      	sub	sp, #8
    540e:	9001      	str	r0, [sp, #4]
    5410:	460b      	mov	r3, r1
    5412:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5416:	bf00      	nop
    5418:	b002      	add	sp, #8
    541a:	4770      	bx	lr

0000541c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    541c:	b500      	push	{lr}
    541e:	b085      	sub	sp, #20
    5420:	9003      	str	r0, [sp, #12]
    5422:	9102      	str	r1, [sp, #8]
    5424:	9201      	str	r2, [sp, #4]
    5426:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5428:	2000      	movs	r0, #0
    542a:	f7fc f83c 	bl	14a6 <OsIf_GetCounter>
    542e:	4602      	mov	r2, r0
    5430:	9b03      	ldr	r3, [sp, #12]
    5432:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5434:	9b02      	ldr	r3, [sp, #8]
    5436:	2200      	movs	r2, #0
    5438:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    543a:	2100      	movs	r1, #0
    543c:	9800      	ldr	r0, [sp, #0]
    543e:	f7fc f87e 	bl	153e <OsIf_MicrosToTicks>
    5442:	4602      	mov	r2, r0
    5444:	9b01      	ldr	r3, [sp, #4]
    5446:	601a      	str	r2, [r3, #0]
}
    5448:	bf00      	nop
    544a:	b005      	add	sp, #20
    544c:	f85d fb04 	ldr.w	pc, [sp], #4

00005450 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5450:	b500      	push	{lr}
    5452:	b087      	sub	sp, #28
    5454:	9003      	str	r0, [sp, #12]
    5456:	9102      	str	r1, [sp, #8]
    5458:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    545a:	2300      	movs	r3, #0
    545c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5460:	2100      	movs	r1, #0
    5462:	9803      	ldr	r0, [sp, #12]
    5464:	f7fc f838 	bl	14d8 <OsIf_GetElapsed>
    5468:	4602      	mov	r2, r0
    546a:	9b02      	ldr	r3, [sp, #8]
    546c:	681b      	ldr	r3, [r3, #0]
    546e:	441a      	add	r2, r3
    5470:	9b02      	ldr	r3, [sp, #8]
    5472:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5474:	9b02      	ldr	r3, [sp, #8]
    5476:	681b      	ldr	r3, [r3, #0]
    5478:	9a01      	ldr	r2, [sp, #4]
    547a:	429a      	cmp	r2, r3
    547c:	d802      	bhi.n	5484 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    547e:	2301      	movs	r3, #1
    5480:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5484:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5488:	4618      	mov	r0, r3
    548a:	b007      	add	sp, #28
    548c:	f85d fb04 	ldr.w	pc, [sp], #4

00005490 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5490:	b082      	sub	sp, #8
    5492:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5494:	9b01      	ldr	r3, [sp, #4]
    5496:	681a      	ldr	r2, [r3, #0]
    5498:	4907      	ldr	r1, [pc, #28]	; (54b8 <Power_Ip_RCM_ResetInit+0x28>)
    549a:	f641 7307 	movw	r3, #7943	; 0x1f07
    549e:	4013      	ands	r3, r2
    54a0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    54a2:	9b01      	ldr	r3, [sp, #4]
    54a4:	685a      	ldr	r2, [r3, #4]
    54a6:	4904      	ldr	r1, [pc, #16]	; (54b8 <Power_Ip_RCM_ResetInit+0x28>)
    54a8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    54ac:	4013      	ands	r3, r2
    54ae:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    54b0:	bf00      	nop
    54b2:	b002      	add	sp, #8
    54b4:	4770      	bx	lr
    54b6:	bf00      	nop
    54b8:	4007f000 	.word	0x4007f000

000054bc <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    54bc:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    54be:	230c      	movs	r3, #12
    54c0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    54c2:	2300      	movs	r3, #0
    54c4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    54c6:	2300      	movs	r3, #0
    54c8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    54ca:	2300      	movs	r3, #0
    54cc:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    54ce:	4b25      	ldr	r3, [pc, #148]	; (5564 <Power_Ip_RCM_GetResetReason+0xa8>)
    54d0:	699a      	ldr	r2, [r3, #24]
    54d2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    54d6:	4013      	ands	r3, r2
    54d8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    54da:	9b03      	ldr	r3, [sp, #12]
    54dc:	2b00      	cmp	r3, #0
    54de:	d008      	beq.n	54f2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    54e0:	4920      	ldr	r1, [pc, #128]	; (5564 <Power_Ip_RCM_GetResetReason+0xa8>)
    54e2:	9a03      	ldr	r2, [sp, #12]
    54e4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    54e8:	4013      	ands	r3, r2
    54ea:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    54ec:	4a1e      	ldr	r2, [pc, #120]	; (5568 <Power_Ip_RCM_GetResetReason+0xac>)
    54ee:	9b03      	ldr	r3, [sp, #12]
    54f0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    54f2:	4b1d      	ldr	r3, [pc, #116]	; (5568 <Power_Ip_RCM_GetResetReason+0xac>)
    54f4:	681b      	ldr	r3, [r3, #0]
    54f6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    54f8:	9a02      	ldr	r2, [sp, #8]
    54fa:	f642 73ee 	movw	r3, #12270	; 0x2fee
    54fe:	4013      	ands	r3, r2
    5500:	2b82      	cmp	r3, #130	; 0x82
    5502:	d102      	bne.n	550a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5504:	2305      	movs	r3, #5
    5506:	9307      	str	r3, [sp, #28]
    5508:	e027      	b.n	555a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    550a:	2300      	movs	r3, #0
    550c:	9306      	str	r3, [sp, #24]
    550e:	e021      	b.n	5554 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5510:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5514:	9b06      	ldr	r3, [sp, #24]
    5516:	fa22 f303 	lsr.w	r3, r2, r3
    551a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    551c:	9a01      	ldr	r2, [sp, #4]
    551e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5522:	4013      	ands	r3, r2
    5524:	2b00      	cmp	r3, #0
    5526:	d012      	beq.n	554e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5528:	9a01      	ldr	r2, [sp, #4]
    552a:	9b02      	ldr	r3, [sp, #8]
    552c:	4013      	ands	r3, r2
    552e:	2b00      	cmp	r3, #0
    5530:	d00a      	beq.n	5548 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5532:	9b05      	ldr	r3, [sp, #20]
    5534:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5536:	9b04      	ldr	r3, [sp, #16]
    5538:	3301      	adds	r3, #1
    553a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    553c:	9b04      	ldr	r3, [sp, #16]
    553e:	2b01      	cmp	r3, #1
    5540:	d902      	bls.n	5548 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5542:	230d      	movs	r3, #13
    5544:	9307      	str	r3, [sp, #28]
                        break;
    5546:	e008      	b.n	555a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5548:	9b05      	ldr	r3, [sp, #20]
    554a:	3301      	adds	r3, #1
    554c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    554e:	9b06      	ldr	r3, [sp, #24]
    5550:	3301      	adds	r3, #1
    5552:	9306      	str	r3, [sp, #24]
    5554:	9b06      	ldr	r3, [sp, #24]
    5556:	2b1f      	cmp	r3, #31
    5558:	d9da      	bls.n	5510 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    555a:	9b07      	ldr	r3, [sp, #28]
}
    555c:	4618      	mov	r0, r3
    555e:	b008      	add	sp, #32
    5560:	4770      	bx	lr
    5562:	bf00      	nop
    5564:	4007f000 	.word	0x4007f000
    5568:	1fff8d04 	.word	0x1fff8d04

0000556c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    556c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    556e:	4b0c      	ldr	r3, [pc, #48]	; (55a0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5570:	699a      	ldr	r2, [r3, #24]
    5572:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5576:	4013      	ands	r3, r2
    5578:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    557a:	9b01      	ldr	r3, [sp, #4]
    557c:	2b00      	cmp	r3, #0
    557e:	d008      	beq.n	5592 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5580:	4907      	ldr	r1, [pc, #28]	; (55a0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5582:	9a01      	ldr	r2, [sp, #4]
    5584:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5588:	4013      	ands	r3, r2
    558a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    558c:	4a05      	ldr	r2, [pc, #20]	; (55a4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    558e:	9b01      	ldr	r3, [sp, #4]
    5590:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5592:	4b04      	ldr	r3, [pc, #16]	; (55a4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5598:	9b00      	ldr	r3, [sp, #0]
}
    559a:	4618      	mov	r0, r3
    559c:	b002      	add	sp, #8
    559e:	4770      	bx	lr
    55a0:	4007f000 	.word	0x4007f000
    55a4:	1fff8d04 	.word	0x1fff8d04

000055a8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    55a8:	b082      	sub	sp, #8
    55aa:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    55ac:	9b01      	ldr	r3, [sp, #4]
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	4a03      	ldr	r2, [pc, #12]	; (55c0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    55b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    55b6:	6093      	str	r3, [r2, #8]
}
    55b8:	bf00      	nop
    55ba:	b002      	add	sp, #8
    55bc:	4770      	bx	lr
    55be:	bf00      	nop
    55c0:	4007e000 	.word	0x4007e000

000055c4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    55c4:	b084      	sub	sp, #16
    55c6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    55c8:	2301      	movs	r3, #1
    55ca:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    55cc:	4b15      	ldr	r3, [pc, #84]	; (5624 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    55ce:	695b      	ldr	r3, [r3, #20]
    55d0:	b2db      	uxtb	r3, r3
    55d2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    55d4:	9b01      	ldr	r3, [sp, #4]
    55d6:	2b02      	cmp	r3, #2
    55d8:	d012      	beq.n	5600 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	2b02      	cmp	r3, #2
    55de:	d818      	bhi.n	5612 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    55e0:	9b01      	ldr	r3, [sp, #4]
    55e2:	2b00      	cmp	r3, #0
    55e4:	d003      	beq.n	55ee <Power_Ip_SMC_ModeCheckEntry+0x2a>
    55e6:	9b01      	ldr	r3, [sp, #4]
    55e8:	2b01      	cmp	r3, #1
    55ea:	d003      	beq.n	55f4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    55ec:	e011      	b.n	5612 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    55ee:	2300      	movs	r3, #0
    55f0:	9303      	str	r3, [sp, #12]
            break;
    55f2:	e013      	b.n	561c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    55f4:	9b02      	ldr	r3, [sp, #8]
    55f6:	2b01      	cmp	r3, #1
    55f8:	d10d      	bne.n	5616 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    55fa:	2300      	movs	r3, #0
    55fc:	9303      	str	r3, [sp, #12]
            break;
    55fe:	e00a      	b.n	5616 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5600:	9b02      	ldr	r3, [sp, #8]
    5602:	2b01      	cmp	r3, #1
    5604:	d002      	beq.n	560c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5606:	9b02      	ldr	r3, [sp, #8]
    5608:	2b10      	cmp	r3, #16
    560a:	d106      	bne.n	561a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    560c:	2300      	movs	r3, #0
    560e:	9303      	str	r3, [sp, #12]
            break;
    5610:	e003      	b.n	561a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5612:	bf00      	nop
    5614:	e002      	b.n	561c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5616:	bf00      	nop
    5618:	e000      	b.n	561c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    561a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    561c:	9b03      	ldr	r3, [sp, #12]
}
    561e:	4618      	mov	r0, r3
    5620:	b004      	add	sp, #16
    5622:	4770      	bx	lr
    5624:	4007e000 	.word	0x4007e000

00005628 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5628:	b500      	push	{lr}
    562a:	b08b      	sub	sp, #44	; 0x2c
    562c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    562e:	2300      	movs	r3, #0
    5630:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5632:	2300      	movs	r3, #0
    5634:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5636:	2300      	movs	r3, #0
    5638:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    563c:	9b01      	ldr	r3, [sp, #4]
    563e:	685b      	ldr	r3, [r3, #4]
    5640:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5642:	9b08      	ldr	r3, [sp, #32]
    5644:	2b02      	cmp	r3, #2
    5646:	d076      	beq.n	5736 <Power_Ip_SMC_ModeConfig+0x10e>
    5648:	9b08      	ldr	r3, [sp, #32]
    564a:	2b02      	cmp	r3, #2
    564c:	f200 80ab 	bhi.w	57a6 <Power_Ip_SMC_ModeConfig+0x17e>
    5650:	9b08      	ldr	r3, [sp, #32]
    5652:	2b00      	cmp	r3, #0
    5654:	d003      	beq.n	565e <Power_Ip_SMC_ModeConfig+0x36>
    5656:	9b08      	ldr	r3, [sp, #32]
    5658:	2b01      	cmp	r3, #1
    565a:	d034      	beq.n	56c6 <Power_Ip_SMC_ModeConfig+0x9e>
    565c:	e0a3      	b.n	57a6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    565e:	4b58      	ldr	r3, [pc, #352]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    5660:	68db      	ldr	r3, [r3, #12]
    5662:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5664:	9b06      	ldr	r3, [sp, #24]
    5666:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    566a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    566c:	4a54      	ldr	r2, [pc, #336]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    566e:	9b06      	ldr	r3, [sp, #24]
    5670:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5672:	aa02      	add	r2, sp, #8
    5674:	a903      	add	r1, sp, #12
    5676:	a804      	add	r0, sp, #16
    5678:	f24c 3350 	movw	r3, #50000	; 0xc350
    567c:	f7ff fece 	bl	541c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5680:	9a02      	ldr	r2, [sp, #8]
    5682:	a903      	add	r1, sp, #12
    5684:	ab04      	add	r3, sp, #16
    5686:	4618      	mov	r0, r3
    5688:	f7ff fee2 	bl	5450 <Power_Ip_TimeoutExpired>
    568c:	4603      	mov	r3, r0
    568e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5692:	4b4b      	ldr	r3, [pc, #300]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    5694:	695b      	ldr	r3, [r3, #20]
    5696:	f003 0301 	and.w	r3, r3, #1
    569a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    569c:	9b05      	ldr	r3, [sp, #20]
    569e:	2b01      	cmp	r3, #1
    56a0:	d006      	beq.n	56b0 <Power_Ip_SMC_ModeConfig+0x88>
    56a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56a6:	f083 0301 	eor.w	r3, r3, #1
    56aa:	b2db      	uxtb	r3, r3
    56ac:	2b00      	cmp	r3, #0
    56ae:	d1e7      	bne.n	5680 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    56b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56b4:	2b00      	cmp	r3, #0
    56b6:	d079      	beq.n	57ac <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    56b8:	2301      	movs	r3, #1
    56ba:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    56bc:	21ff      	movs	r1, #255	; 0xff
    56be:	2000      	movs	r0, #0
    56c0:	f7ff fe90 	bl	53e4 <Power_Ip_ReportPowerErrors>
            }

            break;
    56c4:	e072      	b.n	57ac <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    56c6:	4b3e      	ldr	r3, [pc, #248]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    56c8:	68db      	ldr	r3, [r3, #12]
    56ca:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    56cc:	9b06      	ldr	r3, [sp, #24]
    56ce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    56d2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    56d4:	9b06      	ldr	r3, [sp, #24]
    56d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    56da:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    56dc:	4a38      	ldr	r2, [pc, #224]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    56de:	9b06      	ldr	r3, [sp, #24]
    56e0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    56e2:	aa02      	add	r2, sp, #8
    56e4:	a903      	add	r1, sp, #12
    56e6:	a804      	add	r0, sp, #16
    56e8:	f24c 3350 	movw	r3, #50000	; 0xc350
    56ec:	f7ff fe96 	bl	541c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    56f0:	9a02      	ldr	r2, [sp, #8]
    56f2:	a903      	add	r1, sp, #12
    56f4:	ab04      	add	r3, sp, #16
    56f6:	4618      	mov	r0, r3
    56f8:	f7ff feaa 	bl	5450 <Power_Ip_TimeoutExpired>
    56fc:	4603      	mov	r3, r0
    56fe:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5702:	4b2f      	ldr	r3, [pc, #188]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    5704:	695b      	ldr	r3, [r3, #20]
    5706:	f003 0380 	and.w	r3, r3, #128	; 0x80
    570a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    570c:	9b05      	ldr	r3, [sp, #20]
    570e:	2b80      	cmp	r3, #128	; 0x80
    5710:	d006      	beq.n	5720 <Power_Ip_SMC_ModeConfig+0xf8>
    5712:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5716:	f083 0301 	eor.w	r3, r3, #1
    571a:	b2db      	uxtb	r3, r3
    571c:	2b00      	cmp	r3, #0
    571e:	d1e7      	bne.n	56f0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5720:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5724:	2b00      	cmp	r3, #0
    5726:	d043      	beq.n	57b0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5728:	2301      	movs	r3, #1
    572a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    572c:	21ff      	movs	r1, #255	; 0xff
    572e:	2000      	movs	r0, #0
    5730:	f7ff fe58 	bl	53e4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5734:	e03c      	b.n	57b0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5736:	4b22      	ldr	r3, [pc, #136]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    5738:	68db      	ldr	r3, [r3, #12]
    573a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    573c:	9b06      	ldr	r3, [sp, #24]
    573e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5742:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5744:	9b06      	ldr	r3, [sp, #24]
    5746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    574a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    574c:	4a1c      	ldr	r2, [pc, #112]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    574e:	9b06      	ldr	r3, [sp, #24]
    5750:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5752:	aa02      	add	r2, sp, #8
    5754:	a903      	add	r1, sp, #12
    5756:	a804      	add	r0, sp, #16
    5758:	f24c 3350 	movw	r3, #50000	; 0xc350
    575c:	f7ff fe5e 	bl	541c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5760:	9a02      	ldr	r2, [sp, #8]
    5762:	a903      	add	r1, sp, #12
    5764:	ab04      	add	r3, sp, #16
    5766:	4618      	mov	r0, r3
    5768:	f7ff fe72 	bl	5450 <Power_Ip_TimeoutExpired>
    576c:	4603      	mov	r3, r0
    576e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5772:	4b13      	ldr	r3, [pc, #76]	; (57c0 <Power_Ip_SMC_ModeConfig+0x198>)
    5774:	695b      	ldr	r3, [r3, #20]
    5776:	f003 0304 	and.w	r3, r3, #4
    577a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    577c:	9b05      	ldr	r3, [sp, #20]
    577e:	2b04      	cmp	r3, #4
    5780:	d006      	beq.n	5790 <Power_Ip_SMC_ModeConfig+0x168>
    5782:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5786:	f083 0301 	eor.w	r3, r3, #1
    578a:	b2db      	uxtb	r3, r3
    578c:	2b00      	cmp	r3, #0
    578e:	d1e7      	bne.n	5760 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5790:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5794:	2b00      	cmp	r3, #0
    5796:	d00d      	beq.n	57b4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5798:	2301      	movs	r3, #1
    579a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    579c:	21ff      	movs	r1, #255	; 0xff
    579e:	2000      	movs	r0, #0
    57a0:	f7ff fe20 	bl	53e4 <Power_Ip_ReportPowerErrors>
            }

            break;
    57a4:	e006      	b.n	57b4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    57a6:	2301      	movs	r3, #1
    57a8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    57aa:	e004      	b.n	57b6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    57ac:	bf00      	nop
    57ae:	e002      	b.n	57b6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    57b0:	bf00      	nop
    57b2:	e000      	b.n	57b6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    57b4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    57b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    57b8:	4618      	mov	r0, r3
    57ba:	b00b      	add	sp, #44	; 0x2c
    57bc:	f85d fb04 	ldr.w	pc, [sp], #4
    57c0:	4007e000 	.word	0x4007e000

000057c4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    57c4:	b500      	push	{lr}
    57c6:	b085      	sub	sp, #20
    57c8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    57ca:	9b01      	ldr	r3, [sp, #4]
    57cc:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    57ce:	9803      	ldr	r0, [sp, #12]
    57d0:	f000 fbc8 	bl	5f64 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    57d4:	4a03      	ldr	r2, [pc, #12]	; (57e4 <Port_Init+0x20>)
    57d6:	9b03      	ldr	r3, [sp, #12]
    57d8:	6013      	str	r3, [r2, #0]
        }
    }
}
    57da:	bf00      	nop
    57dc:	b005      	add	sp, #20
    57de:	f85d fb04 	ldr.w	pc, [sp], #4
    57e2:	bf00      	nop
    57e4:	1fff8d08 	.word	0x1fff8d08

000057e8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    57e8:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    57ea:	4b03      	ldr	r3, [pc, #12]	; (57f8 <Port_RefreshPortDirection+0x10>)
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	4618      	mov	r0, r3
    57f0:	f000 fc10 	bl	6014 <Port_Ipw_RefreshPortDirection>
    }
}
    57f4:	bf00      	nop
    57f6:	bd08      	pop	{r3, pc}
    57f8:	1fff8d08 	.word	0x1fff8d08

000057fc <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    57fc:	b086      	sub	sp, #24
    57fe:	9003      	str	r0, [sp, #12]
    5800:	9102      	str	r1, [sp, #8]
    5802:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5804:	23ff      	movs	r3, #255	; 0xff
    5806:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5808:	9b03      	ldr	r3, [sp, #12]
    580a:	4a39      	ldr	r2, [pc, #228]	; (58f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    580c:	4293      	cmp	r3, r2
    580e:	d151      	bne.n	58b4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5810:	9b02      	ldr	r3, [sp, #8]
    5812:	2b10      	cmp	r3, #16
    5814:	d867      	bhi.n	58e6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5816:	a201      	add	r2, pc, #4	; (adr r2, 581c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    581c:	00005861 	.word	0x00005861
    5820:	0000586f 	.word	0x0000586f
    5824:	000058e7 	.word	0x000058e7
    5828:	000058e7 	.word	0x000058e7
    582c:	000058e7 	.word	0x000058e7
    5830:	000058e7 	.word	0x000058e7
    5834:	000058e7 	.word	0x000058e7
    5838:	000058e7 	.word	0x000058e7
    583c:	000058e7 	.word	0x000058e7
    5840:	000058e7 	.word	0x000058e7
    5844:	000058e7 	.word	0x000058e7
    5848:	000058e7 	.word	0x000058e7
    584c:	000058e7 	.word	0x000058e7
    5850:	0000587d 	.word	0x0000587d
    5854:	0000588b 	.word	0x0000588b
    5858:	00005899 	.word	0x00005899
    585c:	000058a7 	.word	0x000058a7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5860:	2301      	movs	r3, #1
    5862:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5864:	9a05      	ldr	r2, [sp, #20]
    5866:	9b01      	ldr	r3, [sp, #4]
    5868:	4313      	orrs	r3, r2
    586a:	9305      	str	r3, [sp, #20]
                break;
    586c:	e03c      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    586e:	2302      	movs	r3, #2
    5870:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5872:	9a05      	ldr	r2, [sp, #20]
    5874:	9b01      	ldr	r3, [sp, #4]
    5876:	4313      	orrs	r3, r2
    5878:	9305      	str	r3, [sp, #20]
                break;
    587a:	e035      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    587c:	2304      	movs	r3, #4
    587e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5880:	9a05      	ldr	r2, [sp, #20]
    5882:	9b01      	ldr	r3, [sp, #4]
    5884:	4313      	orrs	r3, r2
    5886:	9305      	str	r3, [sp, #20]
                break;
    5888:	e02e      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    588a:	2308      	movs	r3, #8
    588c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    588e:	9a05      	ldr	r2, [sp, #20]
    5890:	9b01      	ldr	r3, [sp, #4]
    5892:	4313      	orrs	r3, r2
    5894:	9305      	str	r3, [sp, #20]
                break;
    5896:	e027      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5898:	230e      	movs	r3, #14
    589a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    589c:	9a05      	ldr	r2, [sp, #20]
    589e:	9b01      	ldr	r3, [sp, #4]
    58a0:	4013      	ands	r3, r2
    58a2:	9305      	str	r3, [sp, #20]
                break;
    58a4:	e020      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    58a6:	230d      	movs	r3, #13
    58a8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    58aa:	9a05      	ldr	r2, [sp, #20]
    58ac:	9b01      	ldr	r3, [sp, #4]
    58ae:	4013      	ands	r3, r2
    58b0:	9305      	str	r3, [sp, #20]
                break;
    58b2:	e019      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    58b4:	9b03      	ldr	r3, [sp, #12]
    58b6:	4a0f      	ldr	r2, [pc, #60]	; (58f4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    58b8:	4293      	cmp	r3, r2
    58ba:	d115      	bne.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    58bc:	9b02      	ldr	r3, [sp, #8]
    58be:	2b00      	cmp	r3, #0
    58c0:	d003      	beq.n	58ca <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    58c2:	9b02      	ldr	r3, [sp, #8]
    58c4:	2b01      	cmp	r3, #1
    58c6:	d007      	beq.n	58d8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    58c8:	e00e      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    58ca:	230b      	movs	r3, #11
    58cc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    58ce:	9a05      	ldr	r2, [sp, #20]
    58d0:	9b01      	ldr	r3, [sp, #4]
    58d2:	4013      	ands	r3, r2
    58d4:	9305      	str	r3, [sp, #20]
                break;
    58d6:	e007      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    58d8:	2307      	movs	r3, #7
    58da:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    58dc:	9a05      	ldr	r2, [sp, #20]
    58de:	9b01      	ldr	r3, [sp, #4]
    58e0:	4013      	ands	r3, r2
    58e2:	9305      	str	r3, [sp, #20]
                break;
    58e4:	e000      	b.n	58e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    58e6:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    58e8:	9b05      	ldr	r3, [sp, #20]
}
    58ea:	4618      	mov	r0, r3
    58ec:	b006      	add	sp, #24
    58ee:	4770      	bx	lr
    58f0:	4004a000 	.word	0x4004a000
    58f4:	4004b000 	.word	0x4004b000

000058f8 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    58f8:	b500      	push	{lr}
    58fa:	b089      	sub	sp, #36	; 0x24
    58fc:	9003      	str	r0, [sp, #12]
    58fe:	9102      	str	r1, [sp, #8]
    5900:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5902:	9b01      	ldr	r3, [sp, #4]
    5904:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5906:	9b01      	ldr	r3, [sp, #4]
    5908:	2b08      	cmp	r3, #8
    590a:	d121      	bne.n	5950 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    590c:	4b13      	ldr	r3, [pc, #76]	; (595c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    590e:	685b      	ldr	r3, [r3, #4]
    5910:	f003 030f 	and.w	r3, r3, #15
    5914:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5916:	9a06      	ldr	r2, [sp, #24]
    5918:	9902      	ldr	r1, [sp, #8]
    591a:	9803      	ldr	r0, [sp, #12]
    591c:	f7ff ff6e 	bl	57fc <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5920:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5922:	9b05      	ldr	r3, [sp, #20]
    5924:	2bff      	cmp	r3, #255	; 0xff
    5926:	d011      	beq.n	594c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5928:	f001 f984 	bl	6c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    592c:	4b0b      	ldr	r3, [pc, #44]	; (595c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    592e:	685b      	ldr	r3, [r3, #4]
    5930:	4a0a      	ldr	r2, [pc, #40]	; (595c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5932:	f023 030f 	bic.w	r3, r3, #15
    5936:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5938:	4b08      	ldr	r3, [pc, #32]	; (595c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    593a:	685a      	ldr	r2, [r3, #4]
    593c:	9b05      	ldr	r3, [sp, #20]
    593e:	f003 030f 	and.w	r3, r3, #15
    5942:	4906      	ldr	r1, [pc, #24]	; (595c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5944:	4313      	orrs	r3, r2
    5946:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5948:	f001 f9a0 	bl	6c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    594c:	2300      	movs	r3, #0
    594e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5950:	9b07      	ldr	r3, [sp, #28]
}
    5952:	4618      	mov	r0, r3
    5954:	b009      	add	sp, #36	; 0x24
    5956:	f85d fb04 	ldr.w	pc, [sp], #4
    595a:	bf00      	nop
    595c:	40048000 	.word	0x40048000

00005960 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5960:	b500      	push	{lr}
    5962:	b087      	sub	sp, #28
    5964:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5966:	2300      	movs	r3, #0
    5968:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    596a:	2300      	movs	r3, #0
    596c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    596e:	2300      	movs	r3, #0
    5970:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5972:	9b01      	ldr	r3, [sp, #4]
    5974:	68db      	ldr	r3, [r3, #12]
    5976:	2b02      	cmp	r3, #2
    5978:	d00a      	beq.n	5990 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    597a:	9b05      	ldr	r3, [sp, #20]
    597c:	f043 0302 	orr.w	r3, r3, #2
    5980:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5982:	9b01      	ldr	r3, [sp, #4]
    5984:	68db      	ldr	r3, [r3, #12]
    5986:	f003 0301 	and.w	r3, r3, #1
    598a:	9a05      	ldr	r2, [sp, #20]
    598c:	4313      	orrs	r3, r2
    598e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	699b      	ldr	r3, [r3, #24]
    5994:	019b      	lsls	r3, r3, #6
    5996:	f003 0340 	and.w	r3, r3, #64	; 0x40
    599a:	9a05      	ldr	r2, [sp, #20]
    599c:	4313      	orrs	r3, r2
    599e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    59a0:	9b01      	ldr	r3, [sp, #4]
    59a2:	6a1b      	ldr	r3, [r3, #32]
    59a4:	03db      	lsls	r3, r3, #15
    59a6:	b29b      	uxth	r3, r3
    59a8:	9a05      	ldr	r2, [sp, #20]
    59aa:	4313      	orrs	r3, r2
    59ac:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    59ae:	9b01      	ldr	r3, [sp, #4]
    59b0:	7f1b      	ldrb	r3, [r3, #28]
    59b2:	2b00      	cmp	r3, #0
    59b4:	d001      	beq.n	59ba <Port_Ci_Port_Ip_PinInit+0x5a>
    59b6:	2310      	movs	r3, #16
    59b8:	e000      	b.n	59bc <Port_Ci_Port_Ip_PinInit+0x5c>
    59ba:	2300      	movs	r3, #0
    59bc:	9a05      	ldr	r2, [sp, #20]
    59be:	4313      	orrs	r3, r2
    59c0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    59c2:	9b01      	ldr	r3, [sp, #4]
    59c4:	691b      	ldr	r3, [r3, #16]
    59c6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    59c8:	9b01      	ldr	r3, [sp, #4]
    59ca:	6818      	ldr	r0, [r3, #0]
    59cc:	9b01      	ldr	r3, [sp, #4]
    59ce:	689b      	ldr	r3, [r3, #8]
    59d0:	9a04      	ldr	r2, [sp, #16]
    59d2:	4619      	mov	r1, r3
    59d4:	f7ff ff90 	bl	58f8 <Port_Ci_Port_Ip_ConfigureInterleave>
    59d8:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    59da:	9b03      	ldr	r3, [sp, #12]
    59dc:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    59de:	9b04      	ldr	r3, [sp, #16]
    59e0:	021b      	lsls	r3, r3, #8
    59e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    59e6:	9a05      	ldr	r2, [sp, #20]
    59e8:	4313      	orrs	r3, r2
    59ea:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    59ec:	f000 ff88 	bl	6900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    59f0:	9b01      	ldr	r3, [sp, #4]
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    59f8:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    59fa:	9b01      	ldr	r3, [sp, #4]
    59fc:	689b      	ldr	r3, [r3, #8]
    59fe:	2201      	movs	r2, #1
    5a00:	fa02 f303 	lsl.w	r3, r2, r3
    5a04:	43db      	mvns	r3, r3
    5a06:	9a02      	ldr	r2, [sp, #8]
    5a08:	4013      	ands	r3, r2
    5a0a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5a0c:	9b01      	ldr	r3, [sp, #4]
    5a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5a12:	2b00      	cmp	r3, #0
    5a14:	d001      	beq.n	5a1a <Port_Ci_Port_Ip_PinInit+0xba>
    5a16:	2201      	movs	r2, #1
    5a18:	e000      	b.n	5a1c <Port_Ci_Port_Ip_PinInit+0xbc>
    5a1a:	2200      	movs	r2, #0
    5a1c:	9b01      	ldr	r3, [sp, #4]
    5a1e:	689b      	ldr	r3, [r3, #8]
    5a20:	fa02 f303 	lsl.w	r3, r2, r3
    5a24:	9a02      	ldr	r2, [sp, #8]
    5a26:	4313      	orrs	r3, r2
    5a28:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5a2a:	9b01      	ldr	r3, [sp, #4]
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	9a02      	ldr	r2, [sp, #8]
    5a30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5a34:	f000 ff90 	bl	6958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5a38:	9b04      	ldr	r3, [sp, #16]
    5a3a:	2b01      	cmp	r3, #1
    5a3c:	d16d      	bne.n	5b1a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5a3e:	9b01      	ldr	r3, [sp, #4]
    5a40:	695b      	ldr	r3, [r3, #20]
    5a42:	2b02      	cmp	r3, #2
    5a44:	d138      	bne.n	5ab8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5a46:	9b01      	ldr	r3, [sp, #4]
    5a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5a4c:	2b01      	cmp	r3, #1
    5a4e:	d10f      	bne.n	5a70 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5a50:	f000 ffa8 	bl	69a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5a54:	9b01      	ldr	r3, [sp, #4]
    5a56:	685b      	ldr	r3, [r3, #4]
    5a58:	6859      	ldr	r1, [r3, #4]
    5a5a:	9b01      	ldr	r3, [sp, #4]
    5a5c:	689b      	ldr	r3, [r3, #8]
    5a5e:	2201      	movs	r2, #1
    5a60:	409a      	lsls	r2, r3
    5a62:	9b01      	ldr	r3, [sp, #4]
    5a64:	685b      	ldr	r3, [r3, #4]
    5a66:	430a      	orrs	r2, r1
    5a68:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5a6a:	f000 ffc7 	bl	69fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5a6e:	e013      	b.n	5a98 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5a70:	9b01      	ldr	r3, [sp, #4]
    5a72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5a76:	2b00      	cmp	r3, #0
    5a78:	d10e      	bne.n	5a98 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5a7a:	f000 ffe5 	bl	6a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5a7e:	9b01      	ldr	r3, [sp, #4]
    5a80:	685b      	ldr	r3, [r3, #4]
    5a82:	6899      	ldr	r1, [r3, #8]
    5a84:	9b01      	ldr	r3, [sp, #4]
    5a86:	689b      	ldr	r3, [r3, #8]
    5a88:	2201      	movs	r2, #1
    5a8a:	409a      	lsls	r2, r3
    5a8c:	9b01      	ldr	r3, [sp, #4]
    5a8e:	685b      	ldr	r3, [r3, #4]
    5a90:	430a      	orrs	r2, r1
    5a92:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5a94:	f001 f804 	bl	6aa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5a98:	f001 f828 	bl	6aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5a9c:	9b01      	ldr	r3, [sp, #4]
    5a9e:	685b      	ldr	r3, [r3, #4]
    5aa0:	6959      	ldr	r1, [r3, #20]
    5aa2:	9b01      	ldr	r3, [sp, #4]
    5aa4:	689b      	ldr	r3, [r3, #8]
    5aa6:	2201      	movs	r2, #1
    5aa8:	409a      	lsls	r2, r3
    5aaa:	9b01      	ldr	r3, [sp, #4]
    5aac:	685b      	ldr	r3, [r3, #4]
    5aae:	430a      	orrs	r2, r1
    5ab0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5ab2:	f001 f847 	bl	6b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5ab6:	e030      	b.n	5b1a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5ab8:	f001 f818 	bl	6aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5abc:	9b01      	ldr	r3, [sp, #4]
    5abe:	685b      	ldr	r3, [r3, #4]
    5ac0:	6959      	ldr	r1, [r3, #20]
    5ac2:	9b01      	ldr	r3, [sp, #4]
    5ac4:	689b      	ldr	r3, [r3, #8]
    5ac6:	2201      	movs	r2, #1
    5ac8:	fa02 f303 	lsl.w	r3, r2, r3
    5acc:	43da      	mvns	r2, r3
    5ace:	9b01      	ldr	r3, [sp, #4]
    5ad0:	685b      	ldr	r3, [r3, #4]
    5ad2:	400a      	ands	r2, r1
    5ad4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5ad6:	f001 f835 	bl	6b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5ada:	f001 f859 	bl	6b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5ade:	9b01      	ldr	r3, [sp, #4]
    5ae0:	685b      	ldr	r3, [r3, #4]
    5ae2:	6999      	ldr	r1, [r3, #24]
    5ae4:	9b01      	ldr	r3, [sp, #4]
    5ae6:	689b      	ldr	r3, [r3, #8]
    5ae8:	2201      	movs	r2, #1
    5aea:	fa02 f303 	lsl.w	r3, r2, r3
    5aee:	43da      	mvns	r2, r3
    5af0:	9b01      	ldr	r3, [sp, #4]
    5af2:	685b      	ldr	r3, [r3, #4]
    5af4:	400a      	ands	r2, r1
    5af6:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5af8:	9b01      	ldr	r3, [sp, #4]
    5afa:	695b      	ldr	r3, [r3, #20]
    5afc:	2b03      	cmp	r3, #3
    5afe:	d10a      	bne.n	5b16 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5b00:	9b01      	ldr	r3, [sp, #4]
    5b02:	685b      	ldr	r3, [r3, #4]
    5b04:	6999      	ldr	r1, [r3, #24]
    5b06:	9b01      	ldr	r3, [sp, #4]
    5b08:	689b      	ldr	r3, [r3, #8]
    5b0a:	2201      	movs	r2, #1
    5b0c:	409a      	lsls	r2, r3
    5b0e:	9b01      	ldr	r3, [sp, #4]
    5b10:	685b      	ldr	r3, [r3, #4]
    5b12:	430a      	orrs	r2, r1
    5b14:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5b16:	f001 f867 	bl	6be8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5b1a:	9b01      	ldr	r3, [sp, #4]
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	9a01      	ldr	r2, [sp, #4]
    5b20:	6892      	ldr	r2, [r2, #8]
    5b22:	9905      	ldr	r1, [sp, #20]
    5b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5b28:	bf00      	nop
    5b2a:	b007      	add	sp, #28
    5b2c:	f85d fb04 	ldr.w	pc, [sp], #4

00005b30 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5b30:	b500      	push	{lr}
    5b32:	b085      	sub	sp, #20
    5b34:	9001      	str	r0, [sp, #4]
    5b36:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5b38:	2300      	movs	r3, #0
    5b3a:	9303      	str	r3, [sp, #12]
    5b3c:	e00d      	b.n	5b5a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    5b3e:	9a03      	ldr	r2, [sp, #12]
    5b40:	4613      	mov	r3, r2
    5b42:	009b      	lsls	r3, r3, #2
    5b44:	4413      	add	r3, r2
    5b46:	00db      	lsls	r3, r3, #3
    5b48:	461a      	mov	r2, r3
    5b4a:	9b00      	ldr	r3, [sp, #0]
    5b4c:	4413      	add	r3, r2
    5b4e:	4618      	mov	r0, r3
    5b50:	f7ff ff06 	bl	5960 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5b54:	9b03      	ldr	r3, [sp, #12]
    5b56:	3301      	adds	r3, #1
    5b58:	9303      	str	r3, [sp, #12]
    5b5a:	9a03      	ldr	r2, [sp, #12]
    5b5c:	9b01      	ldr	r3, [sp, #4]
    5b5e:	429a      	cmp	r2, r3
    5b60:	d3ed      	bcc.n	5b3e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5b62:	2300      	movs	r3, #0
}
    5b64:	4618      	mov	r0, r3
    5b66:	b005      	add	sp, #20
    5b68:	f85d fb04 	ldr.w	pc, [sp], #4

00005b6c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5b6c:	b500      	push	{lr}
    5b6e:	b087      	sub	sp, #28
    5b70:	9003      	str	r0, [sp, #12]
    5b72:	9102      	str	r1, [sp, #8]
    5b74:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5b76:	9a01      	ldr	r2, [sp, #4]
    5b78:	9902      	ldr	r1, [sp, #8]
    5b7a:	9803      	ldr	r0, [sp, #12]
    5b7c:	f7ff febc 	bl	58f8 <Port_Ci_Port_Ip_ConfigureInterleave>
    5b80:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5b82:	f001 f8a9 	bl	6cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5b86:	9b03      	ldr	r3, [sp, #12]
    5b88:	9a02      	ldr	r2, [sp, #8]
    5b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b8e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5b90:	9b04      	ldr	r3, [sp, #16]
    5b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5b96:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5b98:	9b05      	ldr	r3, [sp, #20]
    5b9a:	021b      	lsls	r3, r3, #8
    5b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5ba0:	9a04      	ldr	r2, [sp, #16]
    5ba2:	4313      	orrs	r3, r2
    5ba4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5ba6:	9b03      	ldr	r3, [sp, #12]
    5ba8:	9a02      	ldr	r2, [sp, #8]
    5baa:	9904      	ldr	r1, [sp, #16]
    5bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5bb0:	f001 f8be 	bl	6d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5bb4:	bf00      	nop
    5bb6:	b007      	add	sp, #28
    5bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00005bbc <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5bbc:	b500      	push	{lr}
    5bbe:	b083      	sub	sp, #12
    5bc0:	9001      	str	r0, [sp, #4]
    5bc2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5bc4:	f001 f8da 	bl	6d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5bce:	2101      	movs	r1, #1
    5bd0:	9b00      	ldr	r3, [sp, #0]
    5bd2:	fa01 f303 	lsl.w	r3, r1, r3
    5bd6:	431a      	orrs	r2, r3
    5bd8:	9b01      	ldr	r3, [sp, #4]
    5bda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5bde:	f001 f8f9 	bl	6dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5be2:	bf00      	nop
    5be4:	b003      	add	sp, #12
    5be6:	f85d fb04 	ldr.w	pc, [sp], #4

00005bea <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5bea:	b500      	push	{lr}
    5bec:	b083      	sub	sp, #12
    5bee:	9001      	str	r0, [sp, #4]
    5bf0:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5bf2:	f001 f915 	bl	6e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5bf6:	9b01      	ldr	r3, [sp, #4]
    5bf8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5bfc:	2101      	movs	r1, #1
    5bfe:	9b00      	ldr	r3, [sp, #0]
    5c00:	fa01 f303 	lsl.w	r3, r1, r3
    5c04:	43db      	mvns	r3, r3
    5c06:	401a      	ands	r2, r3
    5c08:	9b01      	ldr	r3, [sp, #4]
    5c0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    5c0e:	f001 f933 	bl	6e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5c12:	bf00      	nop
    5c14:	b003      	add	sp, #12
    5c16:	f85d fb04 	ldr.w	pc, [sp], #4

00005c1a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5c1a:	b082      	sub	sp, #8
    5c1c:	9001      	str	r0, [sp, #4]
    5c1e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5c20:	9b00      	ldr	r3, [sp, #0]
    5c22:	785b      	ldrb	r3, [r3, #1]
    5c24:	f003 0201 	and.w	r2, r3, #1
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    5c2e:	9b00      	ldr	r3, [sp, #0]
    5c30:	789b      	ldrb	r3, [r3, #2]
    5c32:	f003 021f 	and.w	r2, r3, #31
    5c36:	9b01      	ldr	r3, [sp, #4]
    5c38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5c3c:	bf00      	nop
    5c3e:	b002      	add	sp, #8
    5c40:	4770      	bx	lr

00005c42 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5c42:	b086      	sub	sp, #24
    5c44:	9003      	str	r0, [sp, #12]
    5c46:	9301      	str	r3, [sp, #4]
    5c48:	460b      	mov	r3, r1
    5c4a:	f8ad 300a 	strh.w	r3, [sp, #10]
    5c4e:	4613      	mov	r3, r2
    5c50:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5c54:	2300      	movs	r3, #0
    5c56:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    5c5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c5e:	f043 0301 	orr.w	r3, r3, #1
    5c62:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5c66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c6a:	f043 0302 	orr.w	r3, r3, #2
    5c6e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5c72:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c76:	f043 0310 	orr.w	r3, r3, #16
    5c7a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    5c7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5c86:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5c8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5c92:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5c96:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    5c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5ca2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5ca6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5caa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5cae:	4013      	ands	r3, r2
    5cb0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d003      	beq.n	5cc2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5cba:	9b01      	ldr	r3, [sp, #4]
    5cbc:	2b01      	cmp	r3, #1
    5cbe:	d00a      	beq.n	5cd6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5cc0:	e013      	b.n	5cea <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5cc2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cc6:	041a      	lsls	r2, r3, #16
    5cc8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ccc:	431a      	orrs	r2, r3
    5cce:	9b03      	ldr	r3, [sp, #12]
    5cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5cd4:	e009      	b.n	5cea <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5cd6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cda:	041a      	lsls	r2, r3, #16
    5cdc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ce0:	431a      	orrs	r2, r3
    5ce2:	9b03      	ldr	r3, [sp, #12]
    5ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5ce8:	bf00      	nop
    }
}
    5cea:	bf00      	nop
    5cec:	b006      	add	sp, #24
    5cee:	4770      	bx	lr

00005cf0 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5cf0:	b500      	push	{lr}
    5cf2:	b087      	sub	sp, #28
    5cf4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5cf6:	9b01      	ldr	r3, [sp, #4]
    5cf8:	885b      	ldrh	r3, [r3, #2]
    5cfa:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5cfe:	9b01      	ldr	r3, [sp, #4]
    5d00:	689b      	ldr	r3, [r3, #8]
    5d02:	7a1b      	ldrb	r3, [r3, #8]
    5d04:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5d08:	9b01      	ldr	r3, [sp, #4]
    5d0a:	689b      	ldr	r3, [r3, #8]
    5d0c:	681b      	ldr	r3, [r3, #0]
    5d0e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5d10:	9b01      	ldr	r3, [sp, #4]
    5d12:	689b      	ldr	r3, [r3, #8]
    5d14:	685b      	ldr	r3, [r3, #4]
    5d16:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5d18:	2300      	movs	r3, #0
    5d1a:	f8ad 3016 	strh.w	r3, [sp, #22]
    5d1e:	e111      	b.n	5f44 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5d20:	9b02      	ldr	r3, [sp, #8]
    5d22:	2b02      	cmp	r3, #2
    5d24:	d169      	bne.n	5dfa <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5d26:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5d2a:	2b01      	cmp	r3, #1
    5d2c:	d11a      	bne.n	5d64 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5d2e:	9b01      	ldr	r3, [sp, #4]
    5d30:	685a      	ldr	r2, [r3, #4]
    5d32:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d36:	005b      	lsls	r3, r3, #1
    5d38:	4413      	add	r3, r2
    5d3a:	881b      	ldrh	r3, [r3, #0]
    5d3c:	f003 021f 	and.w	r2, r3, #31
    5d40:	9b01      	ldr	r3, [sp, #4]
    5d42:	6859      	ldr	r1, [r3, #4]
    5d44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d48:	005b      	lsls	r3, r3, #1
    5d4a:	440b      	add	r3, r1
    5d4c:	881b      	ldrh	r3, [r3, #0]
    5d4e:	095b      	lsrs	r3, r3, #5
    5d50:	b29b      	uxth	r3, r3
    5d52:	4619      	mov	r1, r3
    5d54:	4b81      	ldr	r3, [pc, #516]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5d56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5d5a:	2101      	movs	r1, #1
    5d5c:	fa01 f202 	lsl.w	r2, r1, r2
    5d60:	605a      	str	r2, [r3, #4]
    5d62:	e01d      	b.n	5da0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5d64:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d119      	bne.n	5da0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5d6c:	9b01      	ldr	r3, [sp, #4]
    5d6e:	685a      	ldr	r2, [r3, #4]
    5d70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d74:	005b      	lsls	r3, r3, #1
    5d76:	4413      	add	r3, r2
    5d78:	881b      	ldrh	r3, [r3, #0]
    5d7a:	f003 021f 	and.w	r2, r3, #31
    5d7e:	9b01      	ldr	r3, [sp, #4]
    5d80:	6859      	ldr	r1, [r3, #4]
    5d82:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d86:	005b      	lsls	r3, r3, #1
    5d88:	440b      	add	r3, r1
    5d8a:	881b      	ldrh	r3, [r3, #0]
    5d8c:	095b      	lsrs	r3, r3, #5
    5d8e:	b29b      	uxth	r3, r3
    5d90:	4619      	mov	r1, r3
    5d92:	4b72      	ldr	r3, [pc, #456]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5d94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5d98:	2101      	movs	r1, #1
    5d9a:	fa01 f202 	lsl.w	r2, r1, r2
    5d9e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5da0:	f001 f890 	bl	6ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5da4:	9b01      	ldr	r3, [sp, #4]
    5da6:	685a      	ldr	r2, [r3, #4]
    5da8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5dac:	005b      	lsls	r3, r3, #1
    5dae:	4413      	add	r3, r2
    5db0:	881b      	ldrh	r3, [r3, #0]
    5db2:	095b      	lsrs	r3, r3, #5
    5db4:	b29b      	uxth	r3, r3
    5db6:	461a      	mov	r2, r3
    5db8:	4b68      	ldr	r3, [pc, #416]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5dbe:	6959      	ldr	r1, [r3, #20]
    5dc0:	9b01      	ldr	r3, [sp, #4]
    5dc2:	685a      	ldr	r2, [r3, #4]
    5dc4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5dc8:	005b      	lsls	r3, r3, #1
    5dca:	4413      	add	r3, r2
    5dcc:	881b      	ldrh	r3, [r3, #0]
    5dce:	f003 031f 	and.w	r3, r3, #31
    5dd2:	2201      	movs	r2, #1
    5dd4:	409a      	lsls	r2, r3
    5dd6:	9b01      	ldr	r3, [sp, #4]
    5dd8:	6858      	ldr	r0, [r3, #4]
    5dda:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5dde:	005b      	lsls	r3, r3, #1
    5de0:	4403      	add	r3, r0
    5de2:	881b      	ldrh	r3, [r3, #0]
    5de4:	095b      	lsrs	r3, r3, #5
    5de6:	b29b      	uxth	r3, r3
    5de8:	4618      	mov	r0, r3
    5dea:	4b5c      	ldr	r3, [pc, #368]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5dec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5df0:	430a      	orrs	r2, r1
    5df2:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5df4:	f001 f892 	bl	6f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5df8:	e086      	b.n	5f08 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5dfa:	f001 f863 	bl	6ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5dfe:	9b01      	ldr	r3, [sp, #4]
    5e00:	685a      	ldr	r2, [r3, #4]
    5e02:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e06:	005b      	lsls	r3, r3, #1
    5e08:	4413      	add	r3, r2
    5e0a:	881b      	ldrh	r3, [r3, #0]
    5e0c:	095b      	lsrs	r3, r3, #5
    5e0e:	b29b      	uxth	r3, r3
    5e10:	461a      	mov	r2, r3
    5e12:	4b52      	ldr	r3, [pc, #328]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e18:	6959      	ldr	r1, [r3, #20]
    5e1a:	9b01      	ldr	r3, [sp, #4]
    5e1c:	685a      	ldr	r2, [r3, #4]
    5e1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e22:	005b      	lsls	r3, r3, #1
    5e24:	4413      	add	r3, r2
    5e26:	881b      	ldrh	r3, [r3, #0]
    5e28:	f003 031f 	and.w	r3, r3, #31
    5e2c:	2201      	movs	r2, #1
    5e2e:	fa02 f303 	lsl.w	r3, r2, r3
    5e32:	43da      	mvns	r2, r3
    5e34:	9b01      	ldr	r3, [sp, #4]
    5e36:	6858      	ldr	r0, [r3, #4]
    5e38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e3c:	005b      	lsls	r3, r3, #1
    5e3e:	4403      	add	r3, r0
    5e40:	881b      	ldrh	r3, [r3, #0]
    5e42:	095b      	lsrs	r3, r3, #5
    5e44:	b29b      	uxth	r3, r3
    5e46:	4618      	mov	r0, r3
    5e48:	4b44      	ldr	r3, [pc, #272]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5e4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e4e:	400a      	ands	r2, r1
    5e50:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5e52:	f001 f863 	bl	6f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5e56:	f001 f887 	bl	6f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5e5a:	9b01      	ldr	r3, [sp, #4]
    5e5c:	685a      	ldr	r2, [r3, #4]
    5e5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e62:	005b      	lsls	r3, r3, #1
    5e64:	4413      	add	r3, r2
    5e66:	881b      	ldrh	r3, [r3, #0]
    5e68:	095b      	lsrs	r3, r3, #5
    5e6a:	b29b      	uxth	r3, r3
    5e6c:	461a      	mov	r2, r3
    5e6e:	4b3b      	ldr	r3, [pc, #236]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e74:	6999      	ldr	r1, [r3, #24]
    5e76:	9b01      	ldr	r3, [sp, #4]
    5e78:	685a      	ldr	r2, [r3, #4]
    5e7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e7e:	005b      	lsls	r3, r3, #1
    5e80:	4413      	add	r3, r2
    5e82:	881b      	ldrh	r3, [r3, #0]
    5e84:	f003 031f 	and.w	r3, r3, #31
    5e88:	2201      	movs	r2, #1
    5e8a:	fa02 f303 	lsl.w	r3, r2, r3
    5e8e:	43da      	mvns	r2, r3
    5e90:	9b01      	ldr	r3, [sp, #4]
    5e92:	6858      	ldr	r0, [r3, #4]
    5e94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e98:	005b      	lsls	r3, r3, #1
    5e9a:	4403      	add	r3, r0
    5e9c:	881b      	ldrh	r3, [r3, #0]
    5e9e:	095b      	lsrs	r3, r3, #5
    5ea0:	b29b      	uxth	r3, r3
    5ea2:	4618      	mov	r0, r3
    5ea4:	4b2d      	ldr	r3, [pc, #180]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5ea6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5eaa:	400a      	ands	r2, r1
    5eac:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5eae:	9b02      	ldr	r3, [sp, #8]
    5eb0:	2b03      	cmp	r3, #3
    5eb2:	d127      	bne.n	5f04 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5eb4:	9b01      	ldr	r3, [sp, #4]
    5eb6:	685a      	ldr	r2, [r3, #4]
    5eb8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ebc:	005b      	lsls	r3, r3, #1
    5ebe:	4413      	add	r3, r2
    5ec0:	881b      	ldrh	r3, [r3, #0]
    5ec2:	095b      	lsrs	r3, r3, #5
    5ec4:	b29b      	uxth	r3, r3
    5ec6:	461a      	mov	r2, r3
    5ec8:	4b24      	ldr	r3, [pc, #144]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ece:	6999      	ldr	r1, [r3, #24]
    5ed0:	9b01      	ldr	r3, [sp, #4]
    5ed2:	685a      	ldr	r2, [r3, #4]
    5ed4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ed8:	005b      	lsls	r3, r3, #1
    5eda:	4413      	add	r3, r2
    5edc:	881b      	ldrh	r3, [r3, #0]
    5ede:	f003 031f 	and.w	r3, r3, #31
    5ee2:	2201      	movs	r2, #1
    5ee4:	409a      	lsls	r2, r3
    5ee6:	9b01      	ldr	r3, [sp, #4]
    5ee8:	6858      	ldr	r0, [r3, #4]
    5eea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5eee:	005b      	lsls	r3, r3, #1
    5ef0:	4403      	add	r3, r0
    5ef2:	881b      	ldrh	r3, [r3, #0]
    5ef4:	095b      	lsrs	r3, r3, #5
    5ef6:	b29b      	uxth	r3, r3
    5ef8:	4618      	mov	r0, r3
    5efa:	4b18      	ldr	r3, [pc, #96]	; (5f5c <Port_Ipw_Init_UnusedPins+0x26c>)
    5efc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5f00:	430a      	orrs	r2, r1
    5f02:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5f04:	f001 f85c 	bl	6fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5f08:	9b01      	ldr	r3, [sp, #4]
    5f0a:	685a      	ldr	r2, [r3, #4]
    5f0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f10:	005b      	lsls	r3, r3, #1
    5f12:	4413      	add	r3, r2
    5f14:	881b      	ldrh	r3, [r3, #0]
    5f16:	095b      	lsrs	r3, r3, #5
    5f18:	b29b      	uxth	r3, r3
    5f1a:	461a      	mov	r2, r3
    5f1c:	4b10      	ldr	r3, [pc, #64]	; (5f60 <Port_Ipw_Init_UnusedPins+0x270>)
    5f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f22:	9a01      	ldr	r2, [sp, #4]
    5f24:	6851      	ldr	r1, [r2, #4]
    5f26:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5f2a:	0052      	lsls	r2, r2, #1
    5f2c:	440a      	add	r2, r1
    5f2e:	8812      	ldrh	r2, [r2, #0]
    5f30:	f002 021f 	and.w	r2, r2, #31
    5f34:	9903      	ldr	r1, [sp, #12]
    5f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5f3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f3e:	3301      	adds	r3, #1
    5f40:	f8ad 3016 	strh.w	r3, [sp, #22]
    5f44:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5f48:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5f4c:	429a      	cmp	r2, r3
    5f4e:	f4ff aee7 	bcc.w	5d20 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5f52:	bf00      	nop
    5f54:	bf00      	nop
    5f56:	b007      	add	sp, #28
    5f58:	f85d fb04 	ldr.w	pc, [sp], #4
    5f5c:	0000828c 	.word	0x0000828c
    5f60:	00008278 	.word	0x00008278

00005f64 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5f64:	b500      	push	{lr}
    5f66:	b085      	sub	sp, #20
    5f68:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5f6a:	9b01      	ldr	r3, [sp, #4]
    5f6c:	7c1b      	ldrb	r3, [r3, #16]
    5f6e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5f72:	2300      	movs	r3, #0
    5f74:	f8ad 300e 	strh.w	r3, [sp, #14]
    5f78:	e035      	b.n	5fe6 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5f7a:	9b01      	ldr	r3, [sp, #4]
    5f7c:	695a      	ldr	r2, [r3, #20]
    5f7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f82:	00db      	lsls	r3, r3, #3
    5f84:	4413      	add	r3, r2
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5f8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5f90:	4a1f      	ldr	r2, [pc, #124]	; (6010 <Port_Ipw_Init+0xac>)
    5f92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5f96:	9b01      	ldr	r3, [sp, #4]
    5f98:	695a      	ldr	r2, [r3, #20]
    5f9a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f9e:	00db      	lsls	r3, r3, #3
    5fa0:	4413      	add	r3, r2
    5fa2:	4619      	mov	r1, r3
    5fa4:	f7ff fe39 	bl	5c1a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5fa8:	f001 f978 	bl	729c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5fac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5fb0:	4a17      	ldr	r2, [pc, #92]	; (6010 <Port_Ipw_Init+0xac>)
    5fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fb6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	695a      	ldr	r2, [r3, #20]
    5fbe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5fc2:	00db      	lsls	r3, r3, #3
    5fc4:	4413      	add	r3, r2
    5fc6:	685a      	ldr	r2, [r3, #4]
    5fc8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5fcc:	4810      	ldr	r0, [pc, #64]	; (6010 <Port_Ipw_Init+0xac>)
    5fce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5fd2:	430a      	orrs	r2, r1
    5fd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5fd8:	f001 f98c 	bl	72f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5fdc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5fe0:	3301      	adds	r3, #1
    5fe2:	f8ad 300e 	strh.w	r3, [sp, #14]
    5fe6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5fea:	b29b      	uxth	r3, r3
    5fec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ff0:	429a      	cmp	r2, r3
    5ff2:	d3c2      	bcc.n	5f7a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5ff4:	9b01      	ldr	r3, [sp, #4]
    5ff6:	6a1b      	ldr	r3, [r3, #32]
    5ff8:	4619      	mov	r1, r3
    5ffa:	2009      	movs	r0, #9
    5ffc:	f7ff fd98 	bl	5b30 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6000:	9801      	ldr	r0, [sp, #4]
    6002:	f7ff fe75 	bl	5cf0 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6006:	bf00      	nop
    6008:	b005      	add	sp, #20
    600a:	f85d fb04 	ldr.w	pc, [sp], #4
    600e:	bf00      	nop
    6010:	00008278 	.word	0x00008278

00006014 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6014:	b500      	push	{lr}
    6016:	b085      	sub	sp, #20
    6018:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    601a:	9b01      	ldr	r3, [sp, #4]
    601c:	881b      	ldrh	r3, [r3, #0]
    601e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6022:	2300      	movs	r3, #0
    6024:	f8ad 300e 	strh.w	r3, [sp, #14]
    6028:	e0d2      	b.n	61d0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	68d9      	ldr	r1, [r3, #12]
    602e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6032:	4613      	mov	r3, r2
    6034:	009b      	lsls	r3, r3, #2
    6036:	4413      	add	r3, r2
    6038:	009b      	lsls	r3, r3, #2
    603a:	440b      	add	r3, r1
    603c:	7c5b      	ldrb	r3, [r3, #17]
    603e:	f083 0301 	eor.w	r3, r3, #1
    6042:	b2db      	uxtb	r3, r3
    6044:	2b00      	cmp	r3, #0
    6046:	f000 80be 	beq.w	61c6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	68d9      	ldr	r1, [r3, #12]
    604e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6052:	4613      	mov	r3, r2
    6054:	009b      	lsls	r3, r3, #2
    6056:	4413      	add	r3, r2
    6058:	009b      	lsls	r3, r3, #2
    605a:	440b      	add	r3, r1
    605c:	7c1b      	ldrb	r3, [r3, #16]
    605e:	2b00      	cmp	r3, #0
    6060:	f000 80b1 	beq.w	61c6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6064:	9b01      	ldr	r3, [sp, #4]
    6066:	68d9      	ldr	r1, [r3, #12]
    6068:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    606c:	4613      	mov	r3, r2
    606e:	009b      	lsls	r3, r3, #2
    6070:	4413      	add	r3, r2
    6072:	009b      	lsls	r3, r3, #2
    6074:	440b      	add	r3, r1
    6076:	881b      	ldrh	r3, [r3, #0]
    6078:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	68d9      	ldr	r1, [r3, #12]
    6080:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6084:	4613      	mov	r3, r2
    6086:	009b      	lsls	r3, r3, #2
    6088:	4413      	add	r3, r2
    608a:	009b      	lsls	r3, r3, #2
    608c:	440b      	add	r3, r1
    608e:	68db      	ldr	r3, [r3, #12]
    6090:	2b02      	cmp	r3, #2
    6092:	d11d      	bne.n	60d0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6094:	f001 fa4a 	bl	752c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6098:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    609c:	095b      	lsrs	r3, r3, #5
    609e:	b29b      	uxth	r3, r3
    60a0:	461a      	mov	r2, r3
    60a2:	4b51      	ldr	r3, [pc, #324]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    60a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60a8:	6959      	ldr	r1, [r3, #20]
    60aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    60ae:	f003 031f 	and.w	r3, r3, #31
    60b2:	2201      	movs	r2, #1
    60b4:	409a      	lsls	r2, r3
    60b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    60ba:	095b      	lsrs	r3, r3, #5
    60bc:	b29b      	uxth	r3, r3
    60be:	4618      	mov	r0, r3
    60c0:	4b49      	ldr	r3, [pc, #292]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    60c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    60c6:	430a      	orrs	r2, r1
    60c8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    60ca:	f001 fa5b 	bl	7584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    60ce:	e07a      	b.n	61c6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    60d0:	9b01      	ldr	r3, [sp, #4]
    60d2:	68d9      	ldr	r1, [r3, #12]
    60d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    60d8:	4613      	mov	r3, r2
    60da:	009b      	lsls	r3, r3, #2
    60dc:	4413      	add	r3, r2
    60de:	009b      	lsls	r3, r3, #2
    60e0:	440b      	add	r3, r1
    60e2:	68db      	ldr	r3, [r3, #12]
    60e4:	2b01      	cmp	r3, #1
    60e6:	d00b      	beq.n	6100 <Port_Ipw_RefreshPortDirection+0xec>
    60e8:	9b01      	ldr	r3, [sp, #4]
    60ea:	68d9      	ldr	r1, [r3, #12]
    60ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    60f0:	4613      	mov	r3, r2
    60f2:	009b      	lsls	r3, r3, #2
    60f4:	4413      	add	r3, r2
    60f6:	009b      	lsls	r3, r3, #2
    60f8:	440b      	add	r3, r1
    60fa:	68db      	ldr	r3, [r3, #12]
    60fc:	2b03      	cmp	r3, #3
    60fe:	d162      	bne.n	61c6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6100:	f001 fa14 	bl	752c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6104:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6108:	095b      	lsrs	r3, r3, #5
    610a:	b29b      	uxth	r3, r3
    610c:	461a      	mov	r2, r3
    610e:	4b36      	ldr	r3, [pc, #216]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6114:	6959      	ldr	r1, [r3, #20]
    6116:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    611a:	f003 031f 	and.w	r3, r3, #31
    611e:	2201      	movs	r2, #1
    6120:	fa02 f303 	lsl.w	r3, r2, r3
    6124:	43da      	mvns	r2, r3
    6126:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    612a:	095b      	lsrs	r3, r3, #5
    612c:	b29b      	uxth	r3, r3
    612e:	4618      	mov	r0, r3
    6130:	4b2d      	ldr	r3, [pc, #180]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6132:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6136:	400a      	ands	r2, r1
    6138:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    613a:	f001 fa23 	bl	7584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    613e:	f001 fa47 	bl	75d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6142:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6146:	095b      	lsrs	r3, r3, #5
    6148:	b29b      	uxth	r3, r3
    614a:	461a      	mov	r2, r3
    614c:	4b26      	ldr	r3, [pc, #152]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6152:	6999      	ldr	r1, [r3, #24]
    6154:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6158:	f003 031f 	and.w	r3, r3, #31
    615c:	2201      	movs	r2, #1
    615e:	fa02 f303 	lsl.w	r3, r2, r3
    6162:	43da      	mvns	r2, r3
    6164:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6168:	095b      	lsrs	r3, r3, #5
    616a:	b29b      	uxth	r3, r3
    616c:	4618      	mov	r0, r3
    616e:	4b1e      	ldr	r3, [pc, #120]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6170:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6174:	400a      	ands	r2, r1
    6176:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	68d9      	ldr	r1, [r3, #12]
    617c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6180:	4613      	mov	r3, r2
    6182:	009b      	lsls	r3, r3, #2
    6184:	4413      	add	r3, r2
    6186:	009b      	lsls	r3, r3, #2
    6188:	440b      	add	r3, r1
    618a:	68db      	ldr	r3, [r3, #12]
    618c:	2b03      	cmp	r3, #3
    618e:	d118      	bne.n	61c2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6190:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6194:	095b      	lsrs	r3, r3, #5
    6196:	b29b      	uxth	r3, r3
    6198:	461a      	mov	r2, r3
    619a:	4b13      	ldr	r3, [pc, #76]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61a0:	6999      	ldr	r1, [r3, #24]
    61a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    61a6:	f003 031f 	and.w	r3, r3, #31
    61aa:	2201      	movs	r2, #1
    61ac:	409a      	lsls	r2, r3
    61ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    61b2:	095b      	lsrs	r3, r3, #5
    61b4:	b29b      	uxth	r3, r3
    61b6:	4618      	mov	r0, r3
    61b8:	4b0b      	ldr	r3, [pc, #44]	; (61e8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    61ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    61be:	430a      	orrs	r2, r1
    61c0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    61c2:	f001 fa31 	bl	7628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    61c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    61ca:	3301      	adds	r3, #1
    61cc:	f8ad 300e 	strh.w	r3, [sp, #14]
    61d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    61d8:	429a      	cmp	r2, r3
    61da:	f4ff af26 	bcc.w	602a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    61de:	bf00      	nop
    61e0:	bf00      	nop
    61e2:	b005      	add	sp, #20
    61e4:	f85d fb04 	ldr.w	pc, [sp], #4
    61e8:	0000828c 	.word	0x0000828c

000061ec <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    61ec:	b500      	push	{lr}
    61ee:	b085      	sub	sp, #20
    61f0:	4603      	mov	r3, r0
    61f2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    61f6:	2300      	movs	r3, #0
    61f8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    61fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6200:	4618      	mov	r0, r3
    6202:	f000 f871 	bl	62e8 <Dio_Ipw_ReadChannel>
    6206:	4603      	mov	r3, r0
    6208:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    620c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6210:	4618      	mov	r0, r3
    6212:	b005      	add	sp, #20
    6214:	f85d fb04 	ldr.w	pc, [sp], #4

00006218 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6218:	b500      	push	{lr}
    621a:	b083      	sub	sp, #12
    621c:	4603      	mov	r3, r0
    621e:	460a      	mov	r2, r1
    6220:	f8ad 3006 	strh.w	r3, [sp, #6]
    6224:	4613      	mov	r3, r2
    6226:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    622a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    622e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6232:	4611      	mov	r1, r2
    6234:	4618      	mov	r0, r3
    6236:	f000 f87d 	bl	6334 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    623a:	bf00      	nop
    623c:	b003      	add	sp, #12
    623e:	f85d fb04 	ldr.w	pc, [sp], #4

00006242 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6242:	b500      	push	{lr}
    6244:	b085      	sub	sp, #20
    6246:	4603      	mov	r3, r0
    6248:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    624c:	2300      	movs	r3, #0
    624e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6252:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6256:	4618      	mov	r0, r3
    6258:	f000 f892 	bl	6380 <Dio_Ipw_FlipChannel>
    625c:	4603      	mov	r3, r0
    625e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6262:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6266:	4618      	mov	r0, r3
    6268:	b005      	add	sp, #20
    626a:	f85d fb04 	ldr.w	pc, [sp], #4

0000626e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    626e:	b500      	push	{lr}
    6270:	b085      	sub	sp, #20
    6272:	4603      	mov	r3, r0
    6274:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6278:	2300      	movs	r3, #0
    627a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    627c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6280:	4618      	mov	r0, r3
    6282:	f000 f8b3 	bl	63ec <Dio_Ipw_ReadPort>
    6286:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6288:	9b03      	ldr	r3, [sp, #12]
}
    628a:	4618      	mov	r0, r3
    628c:	b005      	add	sp, #20
    628e:	f85d fb04 	ldr.w	pc, [sp], #4

00006292 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6292:	b500      	push	{lr}
    6294:	b083      	sub	sp, #12
    6296:	4603      	mov	r3, r0
    6298:	9100      	str	r1, [sp, #0]
    629a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    629e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62a2:	9900      	ldr	r1, [sp, #0]
    62a4:	4618      	mov	r0, r3
    62a6:	f000 f8b9 	bl	641c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    62aa:	bf00      	nop
    62ac:	b003      	add	sp, #12
    62ae:	f85d fb04 	ldr.w	pc, [sp], #4

000062b2 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    62b2:	b500      	push	{lr}
    62b4:	b085      	sub	sp, #20
    62b6:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    62b8:	2300      	movs	r3, #0
    62ba:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    62bc:	9801      	ldr	r0, [sp, #4]
    62be:	f000 f8c5 	bl	644c <Dio_Ipw_ReadChannelGroup>
    62c2:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    62c4:	9b03      	ldr	r3, [sp, #12]
}
    62c6:	4618      	mov	r0, r3
    62c8:	b005      	add	sp, #20
    62ca:	f85d fb04 	ldr.w	pc, [sp], #4

000062ce <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    62ce:	b500      	push	{lr}
    62d0:	b083      	sub	sp, #12
    62d2:	9001      	str	r0, [sp, #4]
    62d4:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    62d6:	9900      	ldr	r1, [sp, #0]
    62d8:	9801      	ldr	r0, [sp, #4]
    62da:	f000 f8d7 	bl	648c <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    62de:	bf00      	nop
    62e0:	b003      	add	sp, #12
    62e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000062e8 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    62e8:	b500      	push	{lr}
    62ea:	b087      	sub	sp, #28
    62ec:	4603      	mov	r3, r0
    62ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    62f2:	2300      	movs	r3, #0
    62f4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    62f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    62fc:	095b      	lsrs	r3, r3, #5
    62fe:	b29b      	uxth	r3, r3
    6300:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6302:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6306:	f003 031f 	and.w	r3, r3, #31
    630a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    630c:	4a08      	ldr	r2, [pc, #32]	; (6330 <Dio_Ipw_ReadChannel+0x48>)
    630e:	9b04      	ldr	r3, [sp, #16]
    6310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6314:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6316:	9903      	ldr	r1, [sp, #12]
    6318:	9802      	ldr	r0, [sp, #8]
    631a:	f000 f940 	bl	659e <Gpio_Dio_Ip_ReadPin>
    631e:	4603      	mov	r3, r0
    6320:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6324:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6328:	4618      	mov	r0, r3
    632a:	b007      	add	sp, #28
    632c:	f85d fb04 	ldr.w	pc, [sp], #4
    6330:	1fff8b24 	.word	0x1fff8b24

00006334 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6334:	b500      	push	{lr}
    6336:	b087      	sub	sp, #28
    6338:	4603      	mov	r3, r0
    633a:	460a      	mov	r2, r1
    633c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6340:	4613      	mov	r3, r2
    6342:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6346:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    634a:	095b      	lsrs	r3, r3, #5
    634c:	b29b      	uxth	r3, r3
    634e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6350:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6354:	f003 031f 	and.w	r3, r3, #31
    6358:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    635a:	4a08      	ldr	r2, [pc, #32]	; (637c <Dio_Ipw_WriteChannel+0x48>)
    635c:	9b05      	ldr	r3, [sp, #20]
    635e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6362:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6364:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6368:	461a      	mov	r2, r3
    636a:	9904      	ldr	r1, [sp, #16]
    636c:	9803      	ldr	r0, [sp, #12]
    636e:	f000 f8b7 	bl	64e0 <Gpio_Dio_Ip_WritePin>
}
    6372:	bf00      	nop
    6374:	b007      	add	sp, #28
    6376:	f85d fb04 	ldr.w	pc, [sp], #4
    637a:	bf00      	nop
    637c:	1fff8b24 	.word	0x1fff8b24

00006380 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6380:	b500      	push	{lr}
    6382:	b089      	sub	sp, #36	; 0x24
    6384:	4603      	mov	r3, r0
    6386:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    638a:	2300      	movs	r3, #0
    638c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6390:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6394:	095b      	lsrs	r3, r3, #5
    6396:	b29b      	uxth	r3, r3
    6398:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    639a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    639e:	f003 031f 	and.w	r3, r3, #31
    63a2:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    63a4:	4a10      	ldr	r2, [pc, #64]	; (63e8 <Dio_Ipw_FlipChannel+0x68>)
    63a6:	9b06      	ldr	r3, [sp, #24]
    63a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63ac:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    63ae:	2201      	movs	r2, #1
    63b0:	9b05      	ldr	r3, [sp, #20]
    63b2:	fa02 f303 	lsl.w	r3, r2, r3
    63b6:	4619      	mov	r1, r3
    63b8:	9804      	ldr	r0, [sp, #16]
    63ba:	f000 f8dc 	bl	6576 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    63be:	9804      	ldr	r0, [sp, #16]
    63c0:	f000 f8bc 	bl	653c <Gpio_Dio_Ip_GetPinsOutput>
    63c4:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    63c6:	2201      	movs	r2, #1
    63c8:	9b05      	ldr	r3, [sp, #20]
    63ca:	409a      	lsls	r2, r3
    63cc:	9b03      	ldr	r3, [sp, #12]
    63ce:	401a      	ands	r2, r3
    63d0:	9b05      	ldr	r3, [sp, #20]
    63d2:	fa22 f303 	lsr.w	r3, r2, r3
    63d6:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    63da:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    63de:	4618      	mov	r0, r3
    63e0:	b009      	add	sp, #36	; 0x24
    63e2:	f85d fb04 	ldr.w	pc, [sp], #4
    63e6:	bf00      	nop
    63e8:	1fff8b24 	.word	0x1fff8b24

000063ec <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    63ec:	b500      	push	{lr}
    63ee:	b085      	sub	sp, #20
    63f0:	4603      	mov	r3, r0
    63f2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    63f6:	2300      	movs	r3, #0
    63f8:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    63fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63fe:	4a06      	ldr	r2, [pc, #24]	; (6418 <Dio_Ipw_ReadPort+0x2c>)
    6400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6404:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6406:	9802      	ldr	r0, [sp, #8]
    6408:	f000 f8be 	bl	6588 <Gpio_Dio_Ip_ReadPins>
    640c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    640e:	9b03      	ldr	r3, [sp, #12]
}
    6410:	4618      	mov	r0, r3
    6412:	b005      	add	sp, #20
    6414:	f85d fb04 	ldr.w	pc, [sp], #4
    6418:	1fff8b24 	.word	0x1fff8b24

0000641c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    641c:	b500      	push	{lr}
    641e:	b085      	sub	sp, #20
    6420:	4603      	mov	r3, r0
    6422:	9100      	str	r1, [sp, #0]
    6424:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6428:	9b00      	ldr	r3, [sp, #0]
    642a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    642c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6430:	4a05      	ldr	r2, [pc, #20]	; (6448 <Dio_Ipw_WritePort+0x2c>)
    6432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6436:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6438:	9903      	ldr	r1, [sp, #12]
    643a:	9802      	ldr	r0, [sp, #8]
    643c:	f000 f875 	bl	652a <Gpio_Dio_Ip_WritePins>
}
    6440:	bf00      	nop
    6442:	b005      	add	sp, #20
    6444:	f85d fb04 	ldr.w	pc, [sp], #4
    6448:	1fff8b24 	.word	0x1fff8b24

0000644c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    644c:	b500      	push	{lr}
    644e:	b087      	sub	sp, #28
    6450:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6452:	2300      	movs	r3, #0
    6454:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6456:	9b01      	ldr	r3, [sp, #4]
    6458:	781b      	ldrb	r3, [r3, #0]
    645a:	461a      	mov	r2, r3
    645c:	4b0a      	ldr	r3, [pc, #40]	; (6488 <Dio_Ipw_ReadChannelGroup+0x3c>)
    645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6462:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6464:	9804      	ldr	r0, [sp, #16]
    6466:	f000 f88f 	bl	6588 <Gpio_Dio_Ip_ReadPins>
    646a:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    646c:	9b01      	ldr	r3, [sp, #4]
    646e:	685a      	ldr	r2, [r3, #4]
    6470:	9b03      	ldr	r3, [sp, #12]
    6472:	4013      	ands	r3, r2
    6474:	9a01      	ldr	r2, [sp, #4]
    6476:	7852      	ldrb	r2, [r2, #1]
    6478:	40d3      	lsrs	r3, r2
    647a:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    647c:	9b05      	ldr	r3, [sp, #20]
}
    647e:	4618      	mov	r0, r3
    6480:	b007      	add	sp, #28
    6482:	f85d fb04 	ldr.w	pc, [sp], #4
    6486:	bf00      	nop
    6488:	1fff8b24 	.word	0x1fff8b24

0000648c <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    648c:	b500      	push	{lr}
    648e:	b087      	sub	sp, #28
    6490:	9001      	str	r0, [sp, #4]
    6492:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6494:	9b01      	ldr	r3, [sp, #4]
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	461a      	mov	r2, r3
    649a:	4b10      	ldr	r3, [pc, #64]	; (64dc <Dio_Ipw_WriteChannelGroup+0x50>)
    649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64a0:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    64a2:	9b01      	ldr	r3, [sp, #4]
    64a4:	785b      	ldrb	r3, [r3, #1]
    64a6:	461a      	mov	r2, r3
    64a8:	9b00      	ldr	r3, [sp, #0]
    64aa:	fa03 f202 	lsl.w	r2, r3, r2
    64ae:	9b01      	ldr	r3, [sp, #4]
    64b0:	685b      	ldr	r3, [r3, #4]
    64b2:	4013      	ands	r3, r2
    64b4:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    64b6:	9904      	ldr	r1, [sp, #16]
    64b8:	9805      	ldr	r0, [sp, #20]
    64ba:	f000 f84a 	bl	6552 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    64be:	9b04      	ldr	r3, [sp, #16]
    64c0:	43da      	mvns	r2, r3
    64c2:	9b01      	ldr	r3, [sp, #4]
    64c4:	685b      	ldr	r3, [r3, #4]
    64c6:	4013      	ands	r3, r2
    64c8:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    64ca:	9903      	ldr	r1, [sp, #12]
    64cc:	9805      	ldr	r0, [sp, #20]
    64ce:	f000 f849 	bl	6564 <Gpio_Dio_Ip_ClearPins>

}
    64d2:	bf00      	nop
    64d4:	b007      	add	sp, #28
    64d6:	f85d fb04 	ldr.w	pc, [sp], #4
    64da:	bf00      	nop
    64dc:	1fff8b24 	.word	0x1fff8b24

000064e0 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    64e0:	b500      	push	{lr}
    64e2:	b087      	sub	sp, #28
    64e4:	9003      	str	r0, [sp, #12]
    64e6:	9102      	str	r1, [sp, #8]
    64e8:	4613      	mov	r3, r2
    64ea:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    64ee:	f000 f86d 	bl	65cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    64f2:	9b03      	ldr	r3, [sp, #12]
    64f4:	681b      	ldr	r3, [r3, #0]
    64f6:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    64f8:	2201      	movs	r2, #1
    64fa:	9b02      	ldr	r3, [sp, #8]
    64fc:	fa02 f303 	lsl.w	r3, r2, r3
    6500:	43db      	mvns	r3, r3
    6502:	9a05      	ldr	r2, [sp, #20]
    6504:	4013      	ands	r3, r2
    6506:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6508:	f89d 2007 	ldrb.w	r2, [sp, #7]
    650c:	9b02      	ldr	r3, [sp, #8]
    650e:	fa02 f303 	lsl.w	r3, r2, r3
    6512:	9a05      	ldr	r2, [sp, #20]
    6514:	4313      	orrs	r3, r2
    6516:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6518:	9b03      	ldr	r3, [sp, #12]
    651a:	9a05      	ldr	r2, [sp, #20]
    651c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    651e:	f000 f881 	bl	6624 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6522:	bf00      	nop
    6524:	b007      	add	sp, #28
    6526:	f85d fb04 	ldr.w	pc, [sp], #4

0000652a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    652a:	b082      	sub	sp, #8
    652c:	9001      	str	r0, [sp, #4]
    652e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6530:	9b01      	ldr	r3, [sp, #4]
    6532:	9a00      	ldr	r2, [sp, #0]
    6534:	601a      	str	r2, [r3, #0]
}
    6536:	bf00      	nop
    6538:	b002      	add	sp, #8
    653a:	4770      	bx	lr

0000653c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    653c:	b084      	sub	sp, #16
    653e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6540:	2300      	movs	r3, #0
    6542:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6544:	9b01      	ldr	r3, [sp, #4]
    6546:	681b      	ldr	r3, [r3, #0]
    6548:	9303      	str	r3, [sp, #12]
    return returnValue;
    654a:	9b03      	ldr	r3, [sp, #12]
}
    654c:	4618      	mov	r0, r3
    654e:	b004      	add	sp, #16
    6550:	4770      	bx	lr

00006552 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6552:	b082      	sub	sp, #8
    6554:	9001      	str	r0, [sp, #4]
    6556:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6558:	9b01      	ldr	r3, [sp, #4]
    655a:	9a00      	ldr	r2, [sp, #0]
    655c:	605a      	str	r2, [r3, #4]
}
    655e:	bf00      	nop
    6560:	b002      	add	sp, #8
    6562:	4770      	bx	lr

00006564 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6564:	b082      	sub	sp, #8
    6566:	9001      	str	r0, [sp, #4]
    6568:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	9a00      	ldr	r2, [sp, #0]
    656e:	609a      	str	r2, [r3, #8]
}
    6570:	bf00      	nop
    6572:	b002      	add	sp, #8
    6574:	4770      	bx	lr

00006576 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6576:	b082      	sub	sp, #8
    6578:	9001      	str	r0, [sp, #4]
    657a:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	9a00      	ldr	r2, [sp, #0]
    6580:	60da      	str	r2, [r3, #12]
}
    6582:	bf00      	nop
    6584:	b002      	add	sp, #8
    6586:	4770      	bx	lr

00006588 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6588:	b084      	sub	sp, #16
    658a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    658c:	2300      	movs	r3, #0
    658e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	691b      	ldr	r3, [r3, #16]
    6594:	9303      	str	r3, [sp, #12]
    return returnValue;
    6596:	9b03      	ldr	r3, [sp, #12]
}
    6598:	4618      	mov	r0, r3
    659a:	b004      	add	sp, #16
    659c:	4770      	bx	lr

0000659e <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    659e:	b084      	sub	sp, #16
    65a0:	9001      	str	r0, [sp, #4]
    65a2:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    65a4:	2300      	movs	r3, #0
    65a6:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	691a      	ldr	r2, [r3, #16]
    65ae:	2101      	movs	r1, #1
    65b0:	9b00      	ldr	r3, [sp, #0]
    65b2:	fa01 f303 	lsl.w	r3, r1, r3
    65b6:	401a      	ands	r2, r3
    65b8:	9b00      	ldr	r3, [sp, #0]
    65ba:	fa22 f303 	lsr.w	r3, r2, r3
    65be:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    65c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    65c6:	4618      	mov	r0, r3
    65c8:	b004      	add	sp, #16
    65ca:	4770      	bx	lr

000065cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    65cc:	b500      	push	{lr}
    65ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65d0:	f7fa ff1a 	bl	1408 <Sys_GetCoreID>
    65d4:	4603      	mov	r3, r0
    65d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    65d8:	4a10      	ldr	r2, [pc, #64]	; (661c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    65da:	9b01      	ldr	r3, [sp, #4]
    65dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d10d      	bne.n	6600 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    65e4:	f7fa f970 	bl	8c8 <Dio_schm_read_msr>
    65e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    65ea:	9b00      	ldr	r3, [sp, #0]
    65ec:	f003 0301 	and.w	r3, r3, #1
    65f0:	2b00      	cmp	r3, #0
    65f2:	d100      	bne.n	65f6 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    65f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    65f6:	490a      	ldr	r1, [pc, #40]	; (6620 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	9a00      	ldr	r2, [sp, #0]
    65fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    6600:	4a06      	ldr	r2, [pc, #24]	; (661c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6602:	9b01      	ldr	r3, [sp, #4]
    6604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6608:	1c5a      	adds	r2, r3, #1
    660a:	4904      	ldr	r1, [pc, #16]	; (661c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    660c:	9b01      	ldr	r3, [sp, #4]
    660e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6612:	bf00      	nop
    6614:	b003      	add	sp, #12
    6616:	f85d fb04 	ldr.w	pc, [sp], #4
    661a:	bf00      	nop
    661c:	1fff8d10 	.word	0x1fff8d10
    6620:	1fff8d0c 	.word	0x1fff8d0c

00006624 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6624:	b500      	push	{lr}
    6626:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6628:	f7fa feee 	bl	1408 <Sys_GetCoreID>
    662c:	4603      	mov	r3, r0
    662e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    6630:	4a0d      	ldr	r2, [pc, #52]	; (6668 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6632:	9b01      	ldr	r3, [sp, #4]
    6634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6638:	1e5a      	subs	r2, r3, #1
    663a:	490b      	ldr	r1, [pc, #44]	; (6668 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    663c:	9b01      	ldr	r3, [sp, #4]
    663e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6642:	4a0a      	ldr	r2, [pc, #40]	; (666c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    6644:	9b01      	ldr	r3, [sp, #4]
    6646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    664a:	f003 0301 	and.w	r3, r3, #1
    664e:	2b00      	cmp	r3, #0
    6650:	d106      	bne.n	6660 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6652:	4a05      	ldr	r2, [pc, #20]	; (6668 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6654:	9b01      	ldr	r3, [sp, #4]
    6656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    665a:	2b00      	cmp	r3, #0
    665c:	d100      	bne.n	6660 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    665e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6660:	bf00      	nop
    6662:	b003      	add	sp, #12
    6664:	f85d fb04 	ldr.w	pc, [sp], #4
    6668:	1fff8d10 	.word	0x1fff8d10
    666c:	1fff8d0c 	.word	0x1fff8d0c

00006670 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6670:	b500      	push	{lr}
    6672:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6674:	f7fa fec8 	bl	1408 <Sys_GetCoreID>
    6678:	4603      	mov	r3, r0
    667a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    667c:	4a10      	ldr	r2, [pc, #64]	; (66c0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    667e:	9b01      	ldr	r3, [sp, #4]
    6680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6684:	2b00      	cmp	r3, #0
    6686:	d10d      	bne.n	66a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6688:	f7fa f91e 	bl	8c8 <Dio_schm_read_msr>
    668c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    668e:	9b00      	ldr	r3, [sp, #0]
    6690:	f003 0301 	and.w	r3, r3, #1
    6694:	2b00      	cmp	r3, #0
    6696:	d100      	bne.n	669a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6698:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    669a:	490a      	ldr	r1, [pc, #40]	; (66c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    669c:	9b01      	ldr	r3, [sp, #4]
    669e:	9a00      	ldr	r2, [sp, #0]
    66a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    66a4:	4a06      	ldr	r2, [pc, #24]	; (66c0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ac:	1c5a      	adds	r2, r3, #1
    66ae:	4904      	ldr	r1, [pc, #16]	; (66c0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    66b0:	9b01      	ldr	r3, [sp, #4]
    66b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66b6:	bf00      	nop
    66b8:	b003      	add	sp, #12
    66ba:	f85d fb04 	ldr.w	pc, [sp], #4
    66be:	bf00      	nop
    66c0:	1fff8d18 	.word	0x1fff8d18
    66c4:	1fff8d14 	.word	0x1fff8d14

000066c8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    66c8:	b500      	push	{lr}
    66ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66cc:	f7fa fe9c 	bl	1408 <Sys_GetCoreID>
    66d0:	4603      	mov	r3, r0
    66d2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    66d4:	4a0d      	ldr	r2, [pc, #52]	; (670c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    66d6:	9b01      	ldr	r3, [sp, #4]
    66d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66dc:	1e5a      	subs	r2, r3, #1
    66de:	490b      	ldr	r1, [pc, #44]	; (670c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    66e0:	9b01      	ldr	r3, [sp, #4]
    66e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    66e6:	4a0a      	ldr	r2, [pc, #40]	; (6710 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    66e8:	9b01      	ldr	r3, [sp, #4]
    66ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ee:	f003 0301 	and.w	r3, r3, #1
    66f2:	2b00      	cmp	r3, #0
    66f4:	d106      	bne.n	6704 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    66f6:	4a05      	ldr	r2, [pc, #20]	; (670c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    66f8:	9b01      	ldr	r3, [sp, #4]
    66fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66fe:	2b00      	cmp	r3, #0
    6700:	d100      	bne.n	6704 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6702:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6704:	bf00      	nop
    6706:	b003      	add	sp, #12
    6708:	f85d fb04 	ldr.w	pc, [sp], #4
    670c:	1fff8d18 	.word	0x1fff8d18
    6710:	1fff8d14 	.word	0x1fff8d14

00006714 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6714:	b500      	push	{lr}
    6716:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6718:	f7fa fe76 	bl	1408 <Sys_GetCoreID>
    671c:	4603      	mov	r3, r0
    671e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    6720:	4a10      	ldr	r2, [pc, #64]	; (6764 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6728:	2b00      	cmp	r3, #0
    672a:	d10d      	bne.n	6748 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    672c:	f7fa f8d5 	bl	8da <Mcu_schm_read_msr>
    6730:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6732:	9b00      	ldr	r3, [sp, #0]
    6734:	f003 0301 	and.w	r3, r3, #1
    6738:	2b00      	cmp	r3, #0
    673a:	d100      	bne.n	673e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    673c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    673e:	490a      	ldr	r1, [pc, #40]	; (6768 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	9a00      	ldr	r2, [sp, #0]
    6744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6748:	4a06      	ldr	r2, [pc, #24]	; (6764 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    674a:	9b01      	ldr	r3, [sp, #4]
    674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6750:	1c5a      	adds	r2, r3, #1
    6752:	4904      	ldr	r1, [pc, #16]	; (6764 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6754:	9b01      	ldr	r3, [sp, #4]
    6756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    675a:	bf00      	nop
    675c:	b003      	add	sp, #12
    675e:	f85d fb04 	ldr.w	pc, [sp], #4
    6762:	bf00      	nop
    6764:	1fff8d20 	.word	0x1fff8d20
    6768:	1fff8d1c 	.word	0x1fff8d1c

0000676c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    676c:	b500      	push	{lr}
    676e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6770:	f7fa fe4a 	bl	1408 <Sys_GetCoreID>
    6774:	4603      	mov	r3, r0
    6776:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6778:	4a0d      	ldr	r2, [pc, #52]	; (67b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    677a:	9b01      	ldr	r3, [sp, #4]
    677c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6780:	1e5a      	subs	r2, r3, #1
    6782:	490b      	ldr	r1, [pc, #44]	; (67b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6784:	9b01      	ldr	r3, [sp, #4]
    6786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    678a:	4a0a      	ldr	r2, [pc, #40]	; (67b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    678c:	9b01      	ldr	r3, [sp, #4]
    678e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6792:	f003 0301 	and.w	r3, r3, #1
    6796:	2b00      	cmp	r3, #0
    6798:	d106      	bne.n	67a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    679a:	4a05      	ldr	r2, [pc, #20]	; (67b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    679c:	9b01      	ldr	r3, [sp, #4]
    679e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67a2:	2b00      	cmp	r3, #0
    67a4:	d100      	bne.n	67a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67a8:	bf00      	nop
    67aa:	b003      	add	sp, #12
    67ac:	f85d fb04 	ldr.w	pc, [sp], #4
    67b0:	1fff8d20 	.word	0x1fff8d20
    67b4:	1fff8d1c 	.word	0x1fff8d1c

000067b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    67b8:	b500      	push	{lr}
    67ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67bc:	f7fa fe24 	bl	1408 <Sys_GetCoreID>
    67c0:	4603      	mov	r3, r0
    67c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    67c4:	4a10      	ldr	r2, [pc, #64]	; (6808 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    67c6:	9b01      	ldr	r3, [sp, #4]
    67c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67cc:	2b00      	cmp	r3, #0
    67ce:	d10d      	bne.n	67ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67d0:	f7fa f883 	bl	8da <Mcu_schm_read_msr>
    67d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67d6:	9b00      	ldr	r3, [sp, #0]
    67d8:	f003 0301 	and.w	r3, r3, #1
    67dc:	2b00      	cmp	r3, #0
    67de:	d100      	bne.n	67e2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    67e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    67e2:	490a      	ldr	r1, [pc, #40]	; (680c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    67e4:	9b01      	ldr	r3, [sp, #4]
    67e6:	9a00      	ldr	r2, [sp, #0]
    67e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    67ec:	4a06      	ldr	r2, [pc, #24]	; (6808 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f4:	1c5a      	adds	r2, r3, #1
    67f6:	4904      	ldr	r1, [pc, #16]	; (6808 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67fe:	bf00      	nop
    6800:	b003      	add	sp, #12
    6802:	f85d fb04 	ldr.w	pc, [sp], #4
    6806:	bf00      	nop
    6808:	1fff8d28 	.word	0x1fff8d28
    680c:	1fff8d24 	.word	0x1fff8d24

00006810 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6810:	b500      	push	{lr}
    6812:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6814:	f7fa fdf8 	bl	1408 <Sys_GetCoreID>
    6818:	4603      	mov	r3, r0
    681a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    681c:	4a0d      	ldr	r2, [pc, #52]	; (6854 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    681e:	9b01      	ldr	r3, [sp, #4]
    6820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6824:	1e5a      	subs	r2, r3, #1
    6826:	490b      	ldr	r1, [pc, #44]	; (6854 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6828:	9b01      	ldr	r3, [sp, #4]
    682a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    682e:	4a0a      	ldr	r2, [pc, #40]	; (6858 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    6830:	9b01      	ldr	r3, [sp, #4]
    6832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6836:	f003 0301 	and.w	r3, r3, #1
    683a:	2b00      	cmp	r3, #0
    683c:	d106      	bne.n	684c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    683e:	4a05      	ldr	r2, [pc, #20]	; (6854 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6840:	9b01      	ldr	r3, [sp, #4]
    6842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6846:	2b00      	cmp	r3, #0
    6848:	d100      	bne.n	684c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    684a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    684c:	bf00      	nop
    684e:	b003      	add	sp, #12
    6850:	f85d fb04 	ldr.w	pc, [sp], #4
    6854:	1fff8d28 	.word	0x1fff8d28
    6858:	1fff8d24 	.word	0x1fff8d24

0000685c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    685c:	b500      	push	{lr}
    685e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6860:	f7fa fdd2 	bl	1408 <Sys_GetCoreID>
    6864:	4603      	mov	r3, r0
    6866:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6868:	4a10      	ldr	r2, [pc, #64]	; (68ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    686a:	9b01      	ldr	r3, [sp, #4]
    686c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6870:	2b00      	cmp	r3, #0
    6872:	d10d      	bne.n	6890 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6874:	f7fa f831 	bl	8da <Mcu_schm_read_msr>
    6878:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    687a:	9b00      	ldr	r3, [sp, #0]
    687c:	f003 0301 	and.w	r3, r3, #1
    6880:	2b00      	cmp	r3, #0
    6882:	d100      	bne.n	6886 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6884:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6886:	490a      	ldr	r1, [pc, #40]	; (68b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6888:	9b01      	ldr	r3, [sp, #4]
    688a:	9a00      	ldr	r2, [sp, #0]
    688c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6890:	4a06      	ldr	r2, [pc, #24]	; (68ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6892:	9b01      	ldr	r3, [sp, #4]
    6894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6898:	1c5a      	adds	r2, r3, #1
    689a:	4904      	ldr	r1, [pc, #16]	; (68ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68a2:	bf00      	nop
    68a4:	b003      	add	sp, #12
    68a6:	f85d fb04 	ldr.w	pc, [sp], #4
    68aa:	bf00      	nop
    68ac:	1fff8d30 	.word	0x1fff8d30
    68b0:	1fff8d2c 	.word	0x1fff8d2c

000068b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    68b4:	b500      	push	{lr}
    68b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68b8:	f7fa fda6 	bl	1408 <Sys_GetCoreID>
    68bc:	4603      	mov	r3, r0
    68be:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    68c0:	4a0d      	ldr	r2, [pc, #52]	; (68f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    68c2:	9b01      	ldr	r3, [sp, #4]
    68c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68c8:	1e5a      	subs	r2, r3, #1
    68ca:	490b      	ldr	r1, [pc, #44]	; (68f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    68cc:	9b01      	ldr	r3, [sp, #4]
    68ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    68d2:	4a0a      	ldr	r2, [pc, #40]	; (68fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    68d4:	9b01      	ldr	r3, [sp, #4]
    68d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68da:	f003 0301 	and.w	r3, r3, #1
    68de:	2b00      	cmp	r3, #0
    68e0:	d106      	bne.n	68f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    68e2:	4a05      	ldr	r2, [pc, #20]	; (68f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    68e4:	9b01      	ldr	r3, [sp, #4]
    68e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68ea:	2b00      	cmp	r3, #0
    68ec:	d100      	bne.n	68f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    68ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    68f0:	bf00      	nop
    68f2:	b003      	add	sp, #12
    68f4:	f85d fb04 	ldr.w	pc, [sp], #4
    68f8:	1fff8d30 	.word	0x1fff8d30
    68fc:	1fff8d2c 	.word	0x1fff8d2c

00006900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6900:	b500      	push	{lr}
    6902:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6904:	f7fa fd80 	bl	1408 <Sys_GetCoreID>
    6908:	4603      	mov	r3, r0
    690a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    690c:	4a10      	ldr	r2, [pc, #64]	; (6950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    690e:	9b01      	ldr	r3, [sp, #4]
    6910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6914:	2b00      	cmp	r3, #0
    6916:	d10d      	bne.n	6934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6918:	f7f9 ffe8 	bl	8ec <Port_schm_read_msr>
    691c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    691e:	9b00      	ldr	r3, [sp, #0]
    6920:	f003 0301 	and.w	r3, r3, #1
    6924:	2b00      	cmp	r3, #0
    6926:	d100      	bne.n	692a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6928:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    692a:	490a      	ldr	r1, [pc, #40]	; (6954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    692c:	9b01      	ldr	r3, [sp, #4]
    692e:	9a00      	ldr	r2, [sp, #0]
    6930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    6934:	4a06      	ldr	r2, [pc, #24]	; (6950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6936:	9b01      	ldr	r3, [sp, #4]
    6938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    693c:	1c5a      	adds	r2, r3, #1
    693e:	4904      	ldr	r1, [pc, #16]	; (6950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6946:	bf00      	nop
    6948:	b003      	add	sp, #12
    694a:	f85d fb04 	ldr.w	pc, [sp], #4
    694e:	bf00      	nop
    6950:	1fff8d38 	.word	0x1fff8d38
    6954:	1fff8d34 	.word	0x1fff8d34

00006958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6958:	b500      	push	{lr}
    695a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    695c:	f7fa fd54 	bl	1408 <Sys_GetCoreID>
    6960:	4603      	mov	r3, r0
    6962:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6964:	4a0d      	ldr	r2, [pc, #52]	; (699c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6966:	9b01      	ldr	r3, [sp, #4]
    6968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    696c:	1e5a      	subs	r2, r3, #1
    696e:	490b      	ldr	r1, [pc, #44]	; (699c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6970:	9b01      	ldr	r3, [sp, #4]
    6972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6976:	4a0a      	ldr	r2, [pc, #40]	; (69a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6978:	9b01      	ldr	r3, [sp, #4]
    697a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    697e:	f003 0301 	and.w	r3, r3, #1
    6982:	2b00      	cmp	r3, #0
    6984:	d106      	bne.n	6994 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    6986:	4a05      	ldr	r2, [pc, #20]	; (699c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6988:	9b01      	ldr	r3, [sp, #4]
    698a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    698e:	2b00      	cmp	r3, #0
    6990:	d100      	bne.n	6994 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6992:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6994:	bf00      	nop
    6996:	b003      	add	sp, #12
    6998:	f85d fb04 	ldr.w	pc, [sp], #4
    699c:	1fff8d38 	.word	0x1fff8d38
    69a0:	1fff8d34 	.word	0x1fff8d34

000069a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    69a4:	b500      	push	{lr}
    69a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69a8:	f7fa fd2e 	bl	1408 <Sys_GetCoreID>
    69ac:	4603      	mov	r3, r0
    69ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    69b0:	4a10      	ldr	r2, [pc, #64]	; (69f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    69b2:	9b01      	ldr	r3, [sp, #4]
    69b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b8:	2b00      	cmp	r3, #0
    69ba:	d10d      	bne.n	69d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69bc:	f7f9 ff96 	bl	8ec <Port_schm_read_msr>
    69c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    69c2:	9b00      	ldr	r3, [sp, #0]
    69c4:	f003 0301 	and.w	r3, r3, #1
    69c8:	2b00      	cmp	r3, #0
    69ca:	d100      	bne.n	69ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    69cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    69ce:	490a      	ldr	r1, [pc, #40]	; (69f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    69d0:	9b01      	ldr	r3, [sp, #4]
    69d2:	9a00      	ldr	r2, [sp, #0]
    69d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    69d8:	4a06      	ldr	r2, [pc, #24]	; (69f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    69da:	9b01      	ldr	r3, [sp, #4]
    69dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e0:	1c5a      	adds	r2, r3, #1
    69e2:	4904      	ldr	r1, [pc, #16]	; (69f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    69e4:	9b01      	ldr	r3, [sp, #4]
    69e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69ea:	bf00      	nop
    69ec:	b003      	add	sp, #12
    69ee:	f85d fb04 	ldr.w	pc, [sp], #4
    69f2:	bf00      	nop
    69f4:	1fff8d40 	.word	0x1fff8d40
    69f8:	1fff8d3c 	.word	0x1fff8d3c

000069fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    69fc:	b500      	push	{lr}
    69fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a00:	f7fa fd02 	bl	1408 <Sys_GetCoreID>
    6a04:	4603      	mov	r3, r0
    6a06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    6a08:	4a0d      	ldr	r2, [pc, #52]	; (6a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6a0a:	9b01      	ldr	r3, [sp, #4]
    6a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a10:	1e5a      	subs	r2, r3, #1
    6a12:	490b      	ldr	r1, [pc, #44]	; (6a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6a14:	9b01      	ldr	r3, [sp, #4]
    6a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6a1a:	4a0a      	ldr	r2, [pc, #40]	; (6a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    6a1c:	9b01      	ldr	r3, [sp, #4]
    6a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a22:	f003 0301 	and.w	r3, r3, #1
    6a26:	2b00      	cmp	r3, #0
    6a28:	d106      	bne.n	6a38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    6a2a:	4a05      	ldr	r2, [pc, #20]	; (6a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6a2c:	9b01      	ldr	r3, [sp, #4]
    6a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a32:	2b00      	cmp	r3, #0
    6a34:	d100      	bne.n	6a38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a38:	bf00      	nop
    6a3a:	b003      	add	sp, #12
    6a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a40:	1fff8d40 	.word	0x1fff8d40
    6a44:	1fff8d3c 	.word	0x1fff8d3c

00006a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6a48:	b500      	push	{lr}
    6a4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a4c:	f7fa fcdc 	bl	1408 <Sys_GetCoreID>
    6a50:	4603      	mov	r3, r0
    6a52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6a54:	4a10      	ldr	r2, [pc, #64]	; (6a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6a56:	9b01      	ldr	r3, [sp, #4]
    6a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d10d      	bne.n	6a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a60:	f7f9 ff44 	bl	8ec <Port_schm_read_msr>
    6a64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a66:	9b00      	ldr	r3, [sp, #0]
    6a68:	f003 0301 	and.w	r3, r3, #1
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d100      	bne.n	6a72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6a72:	490a      	ldr	r1, [pc, #40]	; (6a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    6a74:	9b01      	ldr	r3, [sp, #4]
    6a76:	9a00      	ldr	r2, [sp, #0]
    6a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    6a7c:	4a06      	ldr	r2, [pc, #24]	; (6a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6a7e:	9b01      	ldr	r3, [sp, #4]
    6a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a84:	1c5a      	adds	r2, r3, #1
    6a86:	4904      	ldr	r1, [pc, #16]	; (6a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6a88:	9b01      	ldr	r3, [sp, #4]
    6a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a8e:	bf00      	nop
    6a90:	b003      	add	sp, #12
    6a92:	f85d fb04 	ldr.w	pc, [sp], #4
    6a96:	bf00      	nop
    6a98:	1fff8d48 	.word	0x1fff8d48
    6a9c:	1fff8d44 	.word	0x1fff8d44

00006aa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6aa0:	b500      	push	{lr}
    6aa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6aa4:	f7fa fcb0 	bl	1408 <Sys_GetCoreID>
    6aa8:	4603      	mov	r3, r0
    6aaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    6aac:	4a0d      	ldr	r2, [pc, #52]	; (6ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6aae:	9b01      	ldr	r3, [sp, #4]
    6ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ab4:	1e5a      	subs	r2, r3, #1
    6ab6:	490b      	ldr	r1, [pc, #44]	; (6ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6ab8:	9b01      	ldr	r3, [sp, #4]
    6aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6abe:	4a0a      	ldr	r2, [pc, #40]	; (6ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6ac0:	9b01      	ldr	r3, [sp, #4]
    6ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ac6:	f003 0301 	and.w	r3, r3, #1
    6aca:	2b00      	cmp	r3, #0
    6acc:	d106      	bne.n	6adc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    6ace:	4a05      	ldr	r2, [pc, #20]	; (6ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6ad0:	9b01      	ldr	r3, [sp, #4]
    6ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d100      	bne.n	6adc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ada:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6adc:	bf00      	nop
    6ade:	b003      	add	sp, #12
    6ae0:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae4:	1fff8d48 	.word	0x1fff8d48
    6ae8:	1fff8d44 	.word	0x1fff8d44

00006aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6aec:	b500      	push	{lr}
    6aee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6af0:	f7fa fc8a 	bl	1408 <Sys_GetCoreID>
    6af4:	4603      	mov	r3, r0
    6af6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6af8:	4a10      	ldr	r2, [pc, #64]	; (6b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6afa:	9b01      	ldr	r3, [sp, #4]
    6afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b00:	2b00      	cmp	r3, #0
    6b02:	d10d      	bne.n	6b20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b04:	f7f9 fef2 	bl	8ec <Port_schm_read_msr>
    6b08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b0a:	9b00      	ldr	r3, [sp, #0]
    6b0c:	f003 0301 	and.w	r3, r3, #1
    6b10:	2b00      	cmp	r3, #0
    6b12:	d100      	bne.n	6b16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    6b16:	490a      	ldr	r1, [pc, #40]	; (6b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    6b18:	9b01      	ldr	r3, [sp, #4]
    6b1a:	9a00      	ldr	r2, [sp, #0]
    6b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6b20:	4a06      	ldr	r2, [pc, #24]	; (6b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b28:	1c5a      	adds	r2, r3, #1
    6b2a:	4904      	ldr	r1, [pc, #16]	; (6b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b32:	bf00      	nop
    6b34:	b003      	add	sp, #12
    6b36:	f85d fb04 	ldr.w	pc, [sp], #4
    6b3a:	bf00      	nop
    6b3c:	1fff8d50 	.word	0x1fff8d50
    6b40:	1fff8d4c 	.word	0x1fff8d4c

00006b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6b44:	b500      	push	{lr}
    6b46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b48:	f7fa fc5e 	bl	1408 <Sys_GetCoreID>
    6b4c:	4603      	mov	r3, r0
    6b4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6b50:	4a0d      	ldr	r2, [pc, #52]	; (6b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6b52:	9b01      	ldr	r3, [sp, #4]
    6b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b58:	1e5a      	subs	r2, r3, #1
    6b5a:	490b      	ldr	r1, [pc, #44]	; (6b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6b5c:	9b01      	ldr	r3, [sp, #4]
    6b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    6b62:	4a0a      	ldr	r2, [pc, #40]	; (6b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6b64:	9b01      	ldr	r3, [sp, #4]
    6b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b6a:	f003 0301 	and.w	r3, r3, #1
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d106      	bne.n	6b80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    6b72:	4a05      	ldr	r2, [pc, #20]	; (6b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6b74:	9b01      	ldr	r3, [sp, #4]
    6b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d100      	bne.n	6b80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b80:	bf00      	nop
    6b82:	b003      	add	sp, #12
    6b84:	f85d fb04 	ldr.w	pc, [sp], #4
    6b88:	1fff8d50 	.word	0x1fff8d50
    6b8c:	1fff8d4c 	.word	0x1fff8d4c

00006b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6b90:	b500      	push	{lr}
    6b92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b94:	f7fa fc38 	bl	1408 <Sys_GetCoreID>
    6b98:	4603      	mov	r3, r0
    6b9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    6b9c:	4a10      	ldr	r2, [pc, #64]	; (6be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6b9e:	9b01      	ldr	r3, [sp, #4]
    6ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d10d      	bne.n	6bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ba8:	f7f9 fea0 	bl	8ec <Port_schm_read_msr>
    6bac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6bae:	9b00      	ldr	r3, [sp, #0]
    6bb0:	f003 0301 	and.w	r3, r3, #1
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d100      	bne.n	6bba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6bb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    6bba:	490a      	ldr	r1, [pc, #40]	; (6be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    6bbc:	9b01      	ldr	r3, [sp, #4]
    6bbe:	9a00      	ldr	r2, [sp, #0]
    6bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    6bc4:	4a06      	ldr	r2, [pc, #24]	; (6be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bcc:	1c5a      	adds	r2, r3, #1
    6bce:	4904      	ldr	r1, [pc, #16]	; (6be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bd6:	bf00      	nop
    6bd8:	b003      	add	sp, #12
    6bda:	f85d fb04 	ldr.w	pc, [sp], #4
    6bde:	bf00      	nop
    6be0:	1fff8d58 	.word	0x1fff8d58
    6be4:	1fff8d54 	.word	0x1fff8d54

00006be8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6be8:	b500      	push	{lr}
    6bea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bec:	f7fa fc0c 	bl	1408 <Sys_GetCoreID>
    6bf0:	4603      	mov	r3, r0
    6bf2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    6bf4:	4a0d      	ldr	r2, [pc, #52]	; (6c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6bf6:	9b01      	ldr	r3, [sp, #4]
    6bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bfc:	1e5a      	subs	r2, r3, #1
    6bfe:	490b      	ldr	r1, [pc, #44]	; (6c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6c00:	9b01      	ldr	r3, [sp, #4]
    6c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    6c06:	4a0a      	ldr	r2, [pc, #40]	; (6c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    6c08:	9b01      	ldr	r3, [sp, #4]
    6c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c0e:	f003 0301 	and.w	r3, r3, #1
    6c12:	2b00      	cmp	r3, #0
    6c14:	d106      	bne.n	6c24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    6c16:	4a05      	ldr	r2, [pc, #20]	; (6c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6c18:	9b01      	ldr	r3, [sp, #4]
    6c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d100      	bne.n	6c24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c24:	bf00      	nop
    6c26:	b003      	add	sp, #12
    6c28:	f85d fb04 	ldr.w	pc, [sp], #4
    6c2c:	1fff8d58 	.word	0x1fff8d58
    6c30:	1fff8d54 	.word	0x1fff8d54

00006c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6c34:	b500      	push	{lr}
    6c36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c38:	f7fa fbe6 	bl	1408 <Sys_GetCoreID>
    6c3c:	4603      	mov	r3, r0
    6c3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    6c40:	4a10      	ldr	r2, [pc, #64]	; (6c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6c42:	9b01      	ldr	r3, [sp, #4]
    6c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d10d      	bne.n	6c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c4c:	f7f9 fe4e 	bl	8ec <Port_schm_read_msr>
    6c50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c52:	9b00      	ldr	r3, [sp, #0]
    6c54:	f003 0301 	and.w	r3, r3, #1
    6c58:	2b00      	cmp	r3, #0
    6c5a:	d100      	bne.n	6c5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    6c5e:	490a      	ldr	r1, [pc, #40]	; (6c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    6c60:	9b01      	ldr	r3, [sp, #4]
    6c62:	9a00      	ldr	r2, [sp, #0]
    6c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    6c68:	4a06      	ldr	r2, [pc, #24]	; (6c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c70:	1c5a      	adds	r2, r3, #1
    6c72:	4904      	ldr	r1, [pc, #16]	; (6c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c7a:	bf00      	nop
    6c7c:	b003      	add	sp, #12
    6c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c82:	bf00      	nop
    6c84:	1fff8d60 	.word	0x1fff8d60
    6c88:	1fff8d5c 	.word	0x1fff8d5c

00006c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6c8c:	b500      	push	{lr}
    6c8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c90:	f7fa fbba 	bl	1408 <Sys_GetCoreID>
    6c94:	4603      	mov	r3, r0
    6c96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6c98:	4a0d      	ldr	r2, [pc, #52]	; (6cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6c9a:	9b01      	ldr	r3, [sp, #4]
    6c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ca0:	1e5a      	subs	r2, r3, #1
    6ca2:	490b      	ldr	r1, [pc, #44]	; (6cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6ca4:	9b01      	ldr	r3, [sp, #4]
    6ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    6caa:	4a0a      	ldr	r2, [pc, #40]	; (6cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    6cac:	9b01      	ldr	r3, [sp, #4]
    6cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cb2:	f003 0301 	and.w	r3, r3, #1
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d106      	bne.n	6cc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    6cba:	4a05      	ldr	r2, [pc, #20]	; (6cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6cbc:	9b01      	ldr	r3, [sp, #4]
    6cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d100      	bne.n	6cc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6cc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6cc8:	bf00      	nop
    6cca:	b003      	add	sp, #12
    6ccc:	f85d fb04 	ldr.w	pc, [sp], #4
    6cd0:	1fff8d60 	.word	0x1fff8d60
    6cd4:	1fff8d5c 	.word	0x1fff8d5c

00006cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6cd8:	b500      	push	{lr}
    6cda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cdc:	f7fa fb94 	bl	1408 <Sys_GetCoreID>
    6ce0:	4603      	mov	r3, r0
    6ce2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6ce4:	4a10      	ldr	r2, [pc, #64]	; (6d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6ce6:	9b01      	ldr	r3, [sp, #4]
    6ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cec:	2b00      	cmp	r3, #0
    6cee:	d10d      	bne.n	6d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cf0:	f7f9 fdfc 	bl	8ec <Port_schm_read_msr>
    6cf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cf6:	9b00      	ldr	r3, [sp, #0]
    6cf8:	f003 0301 	and.w	r3, r3, #1
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d100      	bne.n	6d02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6d02:	490a      	ldr	r1, [pc, #40]	; (6d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6d04:	9b01      	ldr	r3, [sp, #4]
    6d06:	9a00      	ldr	r2, [sp, #0]
    6d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    6d0c:	4a06      	ldr	r2, [pc, #24]	; (6d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6d0e:	9b01      	ldr	r3, [sp, #4]
    6d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d14:	1c5a      	adds	r2, r3, #1
    6d16:	4904      	ldr	r1, [pc, #16]	; (6d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6d18:	9b01      	ldr	r3, [sp, #4]
    6d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d1e:	bf00      	nop
    6d20:	b003      	add	sp, #12
    6d22:	f85d fb04 	ldr.w	pc, [sp], #4
    6d26:	bf00      	nop
    6d28:	1fff8d68 	.word	0x1fff8d68
    6d2c:	1fff8d64 	.word	0x1fff8d64

00006d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6d30:	b500      	push	{lr}
    6d32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d34:	f7fa fb68 	bl	1408 <Sys_GetCoreID>
    6d38:	4603      	mov	r3, r0
    6d3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6d3c:	4a0d      	ldr	r2, [pc, #52]	; (6d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6d3e:	9b01      	ldr	r3, [sp, #4]
    6d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d44:	1e5a      	subs	r2, r3, #1
    6d46:	490b      	ldr	r1, [pc, #44]	; (6d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6d48:	9b01      	ldr	r3, [sp, #4]
    6d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    6d4e:	4a0a      	ldr	r2, [pc, #40]	; (6d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    6d50:	9b01      	ldr	r3, [sp, #4]
    6d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d56:	f003 0301 	and.w	r3, r3, #1
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d106      	bne.n	6d6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    6d5e:	4a05      	ldr	r2, [pc, #20]	; (6d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6d60:	9b01      	ldr	r3, [sp, #4]
    6d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d66:	2b00      	cmp	r3, #0
    6d68:	d100      	bne.n	6d6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d6c:	bf00      	nop
    6d6e:	b003      	add	sp, #12
    6d70:	f85d fb04 	ldr.w	pc, [sp], #4
    6d74:	1fff8d68 	.word	0x1fff8d68
    6d78:	1fff8d64 	.word	0x1fff8d64

00006d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6d7c:	b500      	push	{lr}
    6d7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d80:	f7fa fb42 	bl	1408 <Sys_GetCoreID>
    6d84:	4603      	mov	r3, r0
    6d86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6d88:	4a10      	ldr	r2, [pc, #64]	; (6dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6d8a:	9b01      	ldr	r3, [sp, #4]
    6d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d90:	2b00      	cmp	r3, #0
    6d92:	d10d      	bne.n	6db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d94:	f7f9 fdaa 	bl	8ec <Port_schm_read_msr>
    6d98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d9a:	9b00      	ldr	r3, [sp, #0]
    6d9c:	f003 0301 	and.w	r3, r3, #1
    6da0:	2b00      	cmp	r3, #0
    6da2:	d100      	bne.n	6da6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6da4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6da6:	490a      	ldr	r1, [pc, #40]	; (6dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6da8:	9b01      	ldr	r3, [sp, #4]
    6daa:	9a00      	ldr	r2, [sp, #0]
    6dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6db0:	4a06      	ldr	r2, [pc, #24]	; (6dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6db2:	9b01      	ldr	r3, [sp, #4]
    6db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db8:	1c5a      	adds	r2, r3, #1
    6dba:	4904      	ldr	r1, [pc, #16]	; (6dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dc2:	bf00      	nop
    6dc4:	b003      	add	sp, #12
    6dc6:	f85d fb04 	ldr.w	pc, [sp], #4
    6dca:	bf00      	nop
    6dcc:	1fff8d70 	.word	0x1fff8d70
    6dd0:	1fff8d6c 	.word	0x1fff8d6c

00006dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6dd4:	b500      	push	{lr}
    6dd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6dd8:	f7fa fb16 	bl	1408 <Sys_GetCoreID>
    6ddc:	4603      	mov	r3, r0
    6dde:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6de0:	4a0d      	ldr	r2, [pc, #52]	; (6e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6de2:	9b01      	ldr	r3, [sp, #4]
    6de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6de8:	1e5a      	subs	r2, r3, #1
    6dea:	490b      	ldr	r1, [pc, #44]	; (6e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6dec:	9b01      	ldr	r3, [sp, #4]
    6dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6df2:	4a0a      	ldr	r2, [pc, #40]	; (6e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6df4:	9b01      	ldr	r3, [sp, #4]
    6df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dfa:	f003 0301 	and.w	r3, r3, #1
    6dfe:	2b00      	cmp	r3, #0
    6e00:	d106      	bne.n	6e10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6e02:	4a05      	ldr	r2, [pc, #20]	; (6e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6e04:	9b01      	ldr	r3, [sp, #4]
    6e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d100      	bne.n	6e10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e10:	bf00      	nop
    6e12:	b003      	add	sp, #12
    6e14:	f85d fb04 	ldr.w	pc, [sp], #4
    6e18:	1fff8d70 	.word	0x1fff8d70
    6e1c:	1fff8d6c 	.word	0x1fff8d6c

00006e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6e20:	b500      	push	{lr}
    6e22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e24:	f7fa faf0 	bl	1408 <Sys_GetCoreID>
    6e28:	4603      	mov	r3, r0
    6e2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6e2c:	4a10      	ldr	r2, [pc, #64]	; (6e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6e2e:	9b01      	ldr	r3, [sp, #4]
    6e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d10d      	bne.n	6e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e38:	f7f9 fd58 	bl	8ec <Port_schm_read_msr>
    6e3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e3e:	9b00      	ldr	r3, [sp, #0]
    6e40:	f003 0301 	and.w	r3, r3, #1
    6e44:	2b00      	cmp	r3, #0
    6e46:	d100      	bne.n	6e4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    6e4a:	490a      	ldr	r1, [pc, #40]	; (6e74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    6e4c:	9b01      	ldr	r3, [sp, #4]
    6e4e:	9a00      	ldr	r2, [sp, #0]
    6e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    6e54:	4a06      	ldr	r2, [pc, #24]	; (6e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6e56:	9b01      	ldr	r3, [sp, #4]
    6e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e5c:	1c5a      	adds	r2, r3, #1
    6e5e:	4904      	ldr	r1, [pc, #16]	; (6e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6e60:	9b01      	ldr	r3, [sp, #4]
    6e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e66:	bf00      	nop
    6e68:	b003      	add	sp, #12
    6e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e6e:	bf00      	nop
    6e70:	1fff8d78 	.word	0x1fff8d78
    6e74:	1fff8d74 	.word	0x1fff8d74

00006e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6e78:	b500      	push	{lr}
    6e7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e7c:	f7fa fac4 	bl	1408 <Sys_GetCoreID>
    6e80:	4603      	mov	r3, r0
    6e82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    6e84:	4a0d      	ldr	r2, [pc, #52]	; (6ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6e86:	9b01      	ldr	r3, [sp, #4]
    6e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e8c:	1e5a      	subs	r2, r3, #1
    6e8e:	490b      	ldr	r1, [pc, #44]	; (6ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6e90:	9b01      	ldr	r3, [sp, #4]
    6e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6e96:	4a0a      	ldr	r2, [pc, #40]	; (6ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e9e:	f003 0301 	and.w	r3, r3, #1
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d106      	bne.n	6eb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6ea6:	4a05      	ldr	r2, [pc, #20]	; (6ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6ea8:	9b01      	ldr	r3, [sp, #4]
    6eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d100      	bne.n	6eb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6eb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6eb4:	bf00      	nop
    6eb6:	b003      	add	sp, #12
    6eb8:	f85d fb04 	ldr.w	pc, [sp], #4
    6ebc:	1fff8d78 	.word	0x1fff8d78
    6ec0:	1fff8d74 	.word	0x1fff8d74

00006ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6ec4:	b500      	push	{lr}
    6ec6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ec8:	f7fa fa9e 	bl	1408 <Sys_GetCoreID>
    6ecc:	4603      	mov	r3, r0
    6ece:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6ed0:	4a10      	ldr	r2, [pc, #64]	; (6f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6ed2:	9b01      	ldr	r3, [sp, #4]
    6ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d10d      	bne.n	6ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6edc:	f7f9 fd06 	bl	8ec <Port_schm_read_msr>
    6ee0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ee2:	9b00      	ldr	r3, [sp, #0]
    6ee4:	f003 0301 	and.w	r3, r3, #1
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d100      	bne.n	6eee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6eec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    6eee:	490a      	ldr	r1, [pc, #40]	; (6f18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6ef0:	9b01      	ldr	r3, [sp, #4]
    6ef2:	9a00      	ldr	r2, [sp, #0]
    6ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6ef8:	4a06      	ldr	r2, [pc, #24]	; (6f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6efa:	9b01      	ldr	r3, [sp, #4]
    6efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f00:	1c5a      	adds	r2, r3, #1
    6f02:	4904      	ldr	r1, [pc, #16]	; (6f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6f04:	9b01      	ldr	r3, [sp, #4]
    6f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f0a:	bf00      	nop
    6f0c:	b003      	add	sp, #12
    6f0e:	f85d fb04 	ldr.w	pc, [sp], #4
    6f12:	bf00      	nop
    6f14:	1fff8d80 	.word	0x1fff8d80
    6f18:	1fff8d7c 	.word	0x1fff8d7c

00006f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6f1c:	b500      	push	{lr}
    6f1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f20:	f7fa fa72 	bl	1408 <Sys_GetCoreID>
    6f24:	4603      	mov	r3, r0
    6f26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6f28:	4a0d      	ldr	r2, [pc, #52]	; (6f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6f2a:	9b01      	ldr	r3, [sp, #4]
    6f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f30:	1e5a      	subs	r2, r3, #1
    6f32:	490b      	ldr	r1, [pc, #44]	; (6f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6f34:	9b01      	ldr	r3, [sp, #4]
    6f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    6f3a:	4a0a      	ldr	r2, [pc, #40]	; (6f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    6f3c:	9b01      	ldr	r3, [sp, #4]
    6f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f42:	f003 0301 	and.w	r3, r3, #1
    6f46:	2b00      	cmp	r3, #0
    6f48:	d106      	bne.n	6f58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    6f4a:	4a05      	ldr	r2, [pc, #20]	; (6f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6f4c:	9b01      	ldr	r3, [sp, #4]
    6f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f52:	2b00      	cmp	r3, #0
    6f54:	d100      	bne.n	6f58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f58:	bf00      	nop
    6f5a:	b003      	add	sp, #12
    6f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    6f60:	1fff8d80 	.word	0x1fff8d80
    6f64:	1fff8d7c 	.word	0x1fff8d7c

00006f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6f68:	b500      	push	{lr}
    6f6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f6c:	f7fa fa4c 	bl	1408 <Sys_GetCoreID>
    6f70:	4603      	mov	r3, r0
    6f72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    6f74:	4a10      	ldr	r2, [pc, #64]	; (6fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6f76:	9b01      	ldr	r3, [sp, #4]
    6f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d10d      	bne.n	6f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f80:	f7f9 fcb4 	bl	8ec <Port_schm_read_msr>
    6f84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f86:	9b00      	ldr	r3, [sp, #0]
    6f88:	f003 0301 	and.w	r3, r3, #1
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d100      	bne.n	6f92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    6f92:	490a      	ldr	r1, [pc, #40]	; (6fbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    6f94:	9b01      	ldr	r3, [sp, #4]
    6f96:	9a00      	ldr	r2, [sp, #0]
    6f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    6f9c:	4a06      	ldr	r2, [pc, #24]	; (6fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6f9e:	9b01      	ldr	r3, [sp, #4]
    6fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa4:	1c5a      	adds	r2, r3, #1
    6fa6:	4904      	ldr	r1, [pc, #16]	; (6fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6fa8:	9b01      	ldr	r3, [sp, #4]
    6faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fae:	bf00      	nop
    6fb0:	b003      	add	sp, #12
    6fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    6fb6:	bf00      	nop
    6fb8:	1fff8d88 	.word	0x1fff8d88
    6fbc:	1fff8d84 	.word	0x1fff8d84

00006fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6fc0:	b500      	push	{lr}
    6fc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fc4:	f7fa fa20 	bl	1408 <Sys_GetCoreID>
    6fc8:	4603      	mov	r3, r0
    6fca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6fcc:	4a0d      	ldr	r2, [pc, #52]	; (7004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6fce:	9b01      	ldr	r3, [sp, #4]
    6fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fd4:	1e5a      	subs	r2, r3, #1
    6fd6:	490b      	ldr	r1, [pc, #44]	; (7004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6fd8:	9b01      	ldr	r3, [sp, #4]
    6fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    6fde:	4a0a      	ldr	r2, [pc, #40]	; (7008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6fe0:	9b01      	ldr	r3, [sp, #4]
    6fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fe6:	f003 0301 	and.w	r3, r3, #1
    6fea:	2b00      	cmp	r3, #0
    6fec:	d106      	bne.n	6ffc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    6fee:	4a05      	ldr	r2, [pc, #20]	; (7004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6ff0:	9b01      	ldr	r3, [sp, #4]
    6ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d100      	bne.n	6ffc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ffa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ffc:	bf00      	nop
    6ffe:	b003      	add	sp, #12
    7000:	f85d fb04 	ldr.w	pc, [sp], #4
    7004:	1fff8d88 	.word	0x1fff8d88
    7008:	1fff8d84 	.word	0x1fff8d84

0000700c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    700c:	b500      	push	{lr}
    700e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7010:	f7fa f9fa 	bl	1408 <Sys_GetCoreID>
    7014:	4603      	mov	r3, r0
    7016:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    7018:	4a10      	ldr	r2, [pc, #64]	; (705c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    701a:	9b01      	ldr	r3, [sp, #4]
    701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7020:	2b00      	cmp	r3, #0
    7022:	d10d      	bne.n	7040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7024:	f7f9 fc62 	bl	8ec <Port_schm_read_msr>
    7028:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    702a:	9b00      	ldr	r3, [sp, #0]
    702c:	f003 0301 	and.w	r3, r3, #1
    7030:	2b00      	cmp	r3, #0
    7032:	d100      	bne.n	7036 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7034:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    7036:	490a      	ldr	r1, [pc, #40]	; (7060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    7038:	9b01      	ldr	r3, [sp, #4]
    703a:	9a00      	ldr	r2, [sp, #0]
    703c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7040:	4a06      	ldr	r2, [pc, #24]	; (705c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7042:	9b01      	ldr	r3, [sp, #4]
    7044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7048:	1c5a      	adds	r2, r3, #1
    704a:	4904      	ldr	r1, [pc, #16]	; (705c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7052:	bf00      	nop
    7054:	b003      	add	sp, #12
    7056:	f85d fb04 	ldr.w	pc, [sp], #4
    705a:	bf00      	nop
    705c:	1fff8d90 	.word	0x1fff8d90
    7060:	1fff8d8c 	.word	0x1fff8d8c

00007064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7064:	b500      	push	{lr}
    7066:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7068:	f7fa f9ce 	bl	1408 <Sys_GetCoreID>
    706c:	4603      	mov	r3, r0
    706e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7070:	4a0d      	ldr	r2, [pc, #52]	; (70a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7072:	9b01      	ldr	r3, [sp, #4]
    7074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7078:	1e5a      	subs	r2, r3, #1
    707a:	490b      	ldr	r1, [pc, #44]	; (70a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    707c:	9b01      	ldr	r3, [sp, #4]
    707e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7082:	4a0a      	ldr	r2, [pc, #40]	; (70ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    7084:	9b01      	ldr	r3, [sp, #4]
    7086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    708a:	f003 0301 	and.w	r3, r3, #1
    708e:	2b00      	cmp	r3, #0
    7090:	d106      	bne.n	70a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    7092:	4a05      	ldr	r2, [pc, #20]	; (70a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7094:	9b01      	ldr	r3, [sp, #4]
    7096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709a:	2b00      	cmp	r3, #0
    709c:	d100      	bne.n	70a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    709e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70a0:	bf00      	nop
    70a2:	b003      	add	sp, #12
    70a4:	f85d fb04 	ldr.w	pc, [sp], #4
    70a8:	1fff8d90 	.word	0x1fff8d90
    70ac:	1fff8d8c 	.word	0x1fff8d8c

000070b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    70b0:	b500      	push	{lr}
    70b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70b4:	f7fa f9a8 	bl	1408 <Sys_GetCoreID>
    70b8:	4603      	mov	r3, r0
    70ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    70bc:	4a10      	ldr	r2, [pc, #64]	; (7100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    70be:	9b01      	ldr	r3, [sp, #4]
    70c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70c4:	2b00      	cmp	r3, #0
    70c6:	d10d      	bne.n	70e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70c8:	f7f9 fc10 	bl	8ec <Port_schm_read_msr>
    70cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70ce:	9b00      	ldr	r3, [sp, #0]
    70d0:	f003 0301 	and.w	r3, r3, #1
    70d4:	2b00      	cmp	r3, #0
    70d6:	d100      	bne.n	70da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    70da:	490a      	ldr	r1, [pc, #40]	; (7104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    70dc:	9b01      	ldr	r3, [sp, #4]
    70de:	9a00      	ldr	r2, [sp, #0]
    70e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    70e4:	4a06      	ldr	r2, [pc, #24]	; (7100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    70e6:	9b01      	ldr	r3, [sp, #4]
    70e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ec:	1c5a      	adds	r2, r3, #1
    70ee:	4904      	ldr	r1, [pc, #16]	; (7100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70f6:	bf00      	nop
    70f8:	b003      	add	sp, #12
    70fa:	f85d fb04 	ldr.w	pc, [sp], #4
    70fe:	bf00      	nop
    7100:	1fff8d98 	.word	0x1fff8d98
    7104:	1fff8d94 	.word	0x1fff8d94

00007108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7108:	b500      	push	{lr}
    710a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    710c:	f7fa f97c 	bl	1408 <Sys_GetCoreID>
    7110:	4603      	mov	r3, r0
    7112:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    7114:	4a0d      	ldr	r2, [pc, #52]	; (714c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7116:	9b01      	ldr	r3, [sp, #4]
    7118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    711c:	1e5a      	subs	r2, r3, #1
    711e:	490b      	ldr	r1, [pc, #44]	; (714c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7120:	9b01      	ldr	r3, [sp, #4]
    7122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    7126:	4a0a      	ldr	r2, [pc, #40]	; (7150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    7128:	9b01      	ldr	r3, [sp, #4]
    712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    712e:	f003 0301 	and.w	r3, r3, #1
    7132:	2b00      	cmp	r3, #0
    7134:	d106      	bne.n	7144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    7136:	4a05      	ldr	r2, [pc, #20]	; (714c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7138:	9b01      	ldr	r3, [sp, #4]
    713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713e:	2b00      	cmp	r3, #0
    7140:	d100      	bne.n	7144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7144:	bf00      	nop
    7146:	b003      	add	sp, #12
    7148:	f85d fb04 	ldr.w	pc, [sp], #4
    714c:	1fff8d98 	.word	0x1fff8d98
    7150:	1fff8d94 	.word	0x1fff8d94

00007154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7154:	b500      	push	{lr}
    7156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7158:	f7fa f956 	bl	1408 <Sys_GetCoreID>
    715c:	4603      	mov	r3, r0
    715e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    7160:	4a10      	ldr	r2, [pc, #64]	; (71a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7162:	9b01      	ldr	r3, [sp, #4]
    7164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7168:	2b00      	cmp	r3, #0
    716a:	d10d      	bne.n	7188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    716c:	f7f9 fbbe 	bl	8ec <Port_schm_read_msr>
    7170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7172:	9b00      	ldr	r3, [sp, #0]
    7174:	f003 0301 	and.w	r3, r3, #1
    7178:	2b00      	cmp	r3, #0
    717a:	d100      	bne.n	717e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    717c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    717e:	490a      	ldr	r1, [pc, #40]	; (71a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7180:	9b01      	ldr	r3, [sp, #4]
    7182:	9a00      	ldr	r2, [sp, #0]
    7184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    7188:	4a06      	ldr	r2, [pc, #24]	; (71a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    718a:	9b01      	ldr	r3, [sp, #4]
    718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7190:	1c5a      	adds	r2, r3, #1
    7192:	4904      	ldr	r1, [pc, #16]	; (71a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7194:	9b01      	ldr	r3, [sp, #4]
    7196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    719a:	bf00      	nop
    719c:	b003      	add	sp, #12
    719e:	f85d fb04 	ldr.w	pc, [sp], #4
    71a2:	bf00      	nop
    71a4:	1fff8da0 	.word	0x1fff8da0
    71a8:	1fff8d9c 	.word	0x1fff8d9c

000071ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    71ac:	b500      	push	{lr}
    71ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71b0:	f7fa f92a 	bl	1408 <Sys_GetCoreID>
    71b4:	4603      	mov	r3, r0
    71b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    71b8:	4a0d      	ldr	r2, [pc, #52]	; (71f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    71ba:	9b01      	ldr	r3, [sp, #4]
    71bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71c0:	1e5a      	subs	r2, r3, #1
    71c2:	490b      	ldr	r1, [pc, #44]	; (71f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    71c4:	9b01      	ldr	r3, [sp, #4]
    71c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    71ca:	4a0a      	ldr	r2, [pc, #40]	; (71f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    71cc:	9b01      	ldr	r3, [sp, #4]
    71ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d2:	f003 0301 	and.w	r3, r3, #1
    71d6:	2b00      	cmp	r3, #0
    71d8:	d106      	bne.n	71e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    71da:	4a05      	ldr	r2, [pc, #20]	; (71f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    71dc:	9b01      	ldr	r3, [sp, #4]
    71de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d100      	bne.n	71e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71e8:	bf00      	nop
    71ea:	b003      	add	sp, #12
    71ec:	f85d fb04 	ldr.w	pc, [sp], #4
    71f0:	1fff8da0 	.word	0x1fff8da0
    71f4:	1fff8d9c 	.word	0x1fff8d9c

000071f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    71f8:	b500      	push	{lr}
    71fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71fc:	f7fa f904 	bl	1408 <Sys_GetCoreID>
    7200:	4603      	mov	r3, r0
    7202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    7204:	4a10      	ldr	r2, [pc, #64]	; (7248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7206:	9b01      	ldr	r3, [sp, #4]
    7208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    720c:	2b00      	cmp	r3, #0
    720e:	d10d      	bne.n	722c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7210:	f7f9 fb6c 	bl	8ec <Port_schm_read_msr>
    7214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7216:	9b00      	ldr	r3, [sp, #0]
    7218:	f003 0301 	and.w	r3, r3, #1
    721c:	2b00      	cmp	r3, #0
    721e:	d100      	bne.n	7222 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    7222:	490a      	ldr	r1, [pc, #40]	; (724c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	9a00      	ldr	r2, [sp, #0]
    7228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    722c:	4a06      	ldr	r2, [pc, #24]	; (7248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7234:	1c5a      	adds	r2, r3, #1
    7236:	4904      	ldr	r1, [pc, #16]	; (7248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7238:	9b01      	ldr	r3, [sp, #4]
    723a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    723e:	bf00      	nop
    7240:	b003      	add	sp, #12
    7242:	f85d fb04 	ldr.w	pc, [sp], #4
    7246:	bf00      	nop
    7248:	1fff8da8 	.word	0x1fff8da8
    724c:	1fff8da4 	.word	0x1fff8da4

00007250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7250:	b500      	push	{lr}
    7252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7254:	f7fa f8d8 	bl	1408 <Sys_GetCoreID>
    7258:	4603      	mov	r3, r0
    725a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    725c:	4a0d      	ldr	r2, [pc, #52]	; (7294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    725e:	9b01      	ldr	r3, [sp, #4]
    7260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7264:	1e5a      	subs	r2, r3, #1
    7266:	490b      	ldr	r1, [pc, #44]	; (7294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7268:	9b01      	ldr	r3, [sp, #4]
    726a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    726e:	4a0a      	ldr	r2, [pc, #40]	; (7298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7270:	9b01      	ldr	r3, [sp, #4]
    7272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7276:	f003 0301 	and.w	r3, r3, #1
    727a:	2b00      	cmp	r3, #0
    727c:	d106      	bne.n	728c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    727e:	4a05      	ldr	r2, [pc, #20]	; (7294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7280:	9b01      	ldr	r3, [sp, #4]
    7282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7286:	2b00      	cmp	r3, #0
    7288:	d100      	bne.n	728c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    728a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    728c:	bf00      	nop
    728e:	b003      	add	sp, #12
    7290:	f85d fb04 	ldr.w	pc, [sp], #4
    7294:	1fff8da8 	.word	0x1fff8da8
    7298:	1fff8da4 	.word	0x1fff8da4

0000729c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    729c:	b500      	push	{lr}
    729e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72a0:	f7fa f8b2 	bl	1408 <Sys_GetCoreID>
    72a4:	4603      	mov	r3, r0
    72a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    72a8:	4a10      	ldr	r2, [pc, #64]	; (72ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72b0:	2b00      	cmp	r3, #0
    72b2:	d10d      	bne.n	72d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72b4:	f7f9 fb1a 	bl	8ec <Port_schm_read_msr>
    72b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72ba:	9b00      	ldr	r3, [sp, #0]
    72bc:	f003 0301 	and.w	r3, r3, #1
    72c0:	2b00      	cmp	r3, #0
    72c2:	d100      	bne.n	72c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    72c6:	490a      	ldr	r1, [pc, #40]	; (72f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    72c8:	9b01      	ldr	r3, [sp, #4]
    72ca:	9a00      	ldr	r2, [sp, #0]
    72cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    72d0:	4a06      	ldr	r2, [pc, #24]	; (72ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    72d2:	9b01      	ldr	r3, [sp, #4]
    72d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d8:	1c5a      	adds	r2, r3, #1
    72da:	4904      	ldr	r1, [pc, #16]	; (72ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    72dc:	9b01      	ldr	r3, [sp, #4]
    72de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72e2:	bf00      	nop
    72e4:	b003      	add	sp, #12
    72e6:	f85d fb04 	ldr.w	pc, [sp], #4
    72ea:	bf00      	nop
    72ec:	1fff8db0 	.word	0x1fff8db0
    72f0:	1fff8dac 	.word	0x1fff8dac

000072f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    72f4:	b500      	push	{lr}
    72f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72f8:	f7fa f886 	bl	1408 <Sys_GetCoreID>
    72fc:	4603      	mov	r3, r0
    72fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7300:	4a0d      	ldr	r2, [pc, #52]	; (7338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7302:	9b01      	ldr	r3, [sp, #4]
    7304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7308:	1e5a      	subs	r2, r3, #1
    730a:	490b      	ldr	r1, [pc, #44]	; (7338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    730c:	9b01      	ldr	r3, [sp, #4]
    730e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7312:	4a0a      	ldr	r2, [pc, #40]	; (733c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7314:	9b01      	ldr	r3, [sp, #4]
    7316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    731a:	f003 0301 	and.w	r3, r3, #1
    731e:	2b00      	cmp	r3, #0
    7320:	d106      	bne.n	7330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    7322:	4a05      	ldr	r2, [pc, #20]	; (7338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7324:	9b01      	ldr	r3, [sp, #4]
    7326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    732a:	2b00      	cmp	r3, #0
    732c:	d100      	bne.n	7330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    732e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7330:	bf00      	nop
    7332:	b003      	add	sp, #12
    7334:	f85d fb04 	ldr.w	pc, [sp], #4
    7338:	1fff8db0 	.word	0x1fff8db0
    733c:	1fff8dac 	.word	0x1fff8dac

00007340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7340:	b500      	push	{lr}
    7342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7344:	f7fa f860 	bl	1408 <Sys_GetCoreID>
    7348:	4603      	mov	r3, r0
    734a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    734c:	4a10      	ldr	r2, [pc, #64]	; (7390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    734e:	9b01      	ldr	r3, [sp, #4]
    7350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7354:	2b00      	cmp	r3, #0
    7356:	d10d      	bne.n	7374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7358:	f7f9 fac8 	bl	8ec <Port_schm_read_msr>
    735c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    735e:	9b00      	ldr	r3, [sp, #0]
    7360:	f003 0301 	and.w	r3, r3, #1
    7364:	2b00      	cmp	r3, #0
    7366:	d100      	bne.n	736a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    736a:	490a      	ldr	r1, [pc, #40]	; (7394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    736c:	9b01      	ldr	r3, [sp, #4]
    736e:	9a00      	ldr	r2, [sp, #0]
    7370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    7374:	4a06      	ldr	r2, [pc, #24]	; (7390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7376:	9b01      	ldr	r3, [sp, #4]
    7378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    737c:	1c5a      	adds	r2, r3, #1
    737e:	4904      	ldr	r1, [pc, #16]	; (7390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7380:	9b01      	ldr	r3, [sp, #4]
    7382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7386:	bf00      	nop
    7388:	b003      	add	sp, #12
    738a:	f85d fb04 	ldr.w	pc, [sp], #4
    738e:	bf00      	nop
    7390:	1fff8db8 	.word	0x1fff8db8
    7394:	1fff8db4 	.word	0x1fff8db4

00007398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7398:	b500      	push	{lr}
    739a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    739c:	f7fa f834 	bl	1408 <Sys_GetCoreID>
    73a0:	4603      	mov	r3, r0
    73a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    73a4:	4a0d      	ldr	r2, [pc, #52]	; (73dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    73a6:	9b01      	ldr	r3, [sp, #4]
    73a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ac:	1e5a      	subs	r2, r3, #1
    73ae:	490b      	ldr	r1, [pc, #44]	; (73dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    73b0:	9b01      	ldr	r3, [sp, #4]
    73b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    73b6:	4a0a      	ldr	r2, [pc, #40]	; (73e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    73b8:	9b01      	ldr	r3, [sp, #4]
    73ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73be:	f003 0301 	and.w	r3, r3, #1
    73c2:	2b00      	cmp	r3, #0
    73c4:	d106      	bne.n	73d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    73c6:	4a05      	ldr	r2, [pc, #20]	; (73dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    73c8:	9b01      	ldr	r3, [sp, #4]
    73ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ce:	2b00      	cmp	r3, #0
    73d0:	d100      	bne.n	73d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73d4:	bf00      	nop
    73d6:	b003      	add	sp, #12
    73d8:	f85d fb04 	ldr.w	pc, [sp], #4
    73dc:	1fff8db8 	.word	0x1fff8db8
    73e0:	1fff8db4 	.word	0x1fff8db4

000073e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    73e4:	b500      	push	{lr}
    73e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73e8:	f7fa f80e 	bl	1408 <Sys_GetCoreID>
    73ec:	4603      	mov	r3, r0
    73ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    73f0:	4a10      	ldr	r2, [pc, #64]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    73f2:	9b01      	ldr	r3, [sp, #4]
    73f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f8:	2b00      	cmp	r3, #0
    73fa:	d10d      	bne.n	7418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    73fc:	f7f9 fa76 	bl	8ec <Port_schm_read_msr>
    7400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7402:	9b00      	ldr	r3, [sp, #0]
    7404:	f003 0301 	and.w	r3, r3, #1
    7408:	2b00      	cmp	r3, #0
    740a:	d100      	bne.n	740e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    740c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    740e:	490a      	ldr	r1, [pc, #40]	; (7438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7410:	9b01      	ldr	r3, [sp, #4]
    7412:	9a00      	ldr	r2, [sp, #0]
    7414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7418:	4a06      	ldr	r2, [pc, #24]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    741a:	9b01      	ldr	r3, [sp, #4]
    741c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7420:	1c5a      	adds	r2, r3, #1
    7422:	4904      	ldr	r1, [pc, #16]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7424:	9b01      	ldr	r3, [sp, #4]
    7426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    742a:	bf00      	nop
    742c:	b003      	add	sp, #12
    742e:	f85d fb04 	ldr.w	pc, [sp], #4
    7432:	bf00      	nop
    7434:	1fff8dc0 	.word	0x1fff8dc0
    7438:	1fff8dbc 	.word	0x1fff8dbc

0000743c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    743c:	b500      	push	{lr}
    743e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7440:	f7f9 ffe2 	bl	1408 <Sys_GetCoreID>
    7444:	4603      	mov	r3, r0
    7446:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7448:	4a0d      	ldr	r2, [pc, #52]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    744a:	9b01      	ldr	r3, [sp, #4]
    744c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7450:	1e5a      	subs	r2, r3, #1
    7452:	490b      	ldr	r1, [pc, #44]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7454:	9b01      	ldr	r3, [sp, #4]
    7456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    745a:	4a0a      	ldr	r2, [pc, #40]	; (7484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    745c:	9b01      	ldr	r3, [sp, #4]
    745e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7462:	f003 0301 	and.w	r3, r3, #1
    7466:	2b00      	cmp	r3, #0
    7468:	d106      	bne.n	7478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    746a:	4a05      	ldr	r2, [pc, #20]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    746c:	9b01      	ldr	r3, [sp, #4]
    746e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7472:	2b00      	cmp	r3, #0
    7474:	d100      	bne.n	7478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7478:	bf00      	nop
    747a:	b003      	add	sp, #12
    747c:	f85d fb04 	ldr.w	pc, [sp], #4
    7480:	1fff8dc0 	.word	0x1fff8dc0
    7484:	1fff8dbc 	.word	0x1fff8dbc

00007488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7488:	b500      	push	{lr}
    748a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    748c:	f7f9 ffbc 	bl	1408 <Sys_GetCoreID>
    7490:	4603      	mov	r3, r0
    7492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7494:	4a10      	ldr	r2, [pc, #64]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7496:	9b01      	ldr	r3, [sp, #4]
    7498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    749c:	2b00      	cmp	r3, #0
    749e:	d10d      	bne.n	74bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74a0:	f7f9 fa24 	bl	8ec <Port_schm_read_msr>
    74a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74a6:	9b00      	ldr	r3, [sp, #0]
    74a8:	f003 0301 	and.w	r3, r3, #1
    74ac:	2b00      	cmp	r3, #0
    74ae:	d100      	bne.n	74b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    74b2:	490a      	ldr	r1, [pc, #40]	; (74dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    74b4:	9b01      	ldr	r3, [sp, #4]
    74b6:	9a00      	ldr	r2, [sp, #0]
    74b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    74bc:	4a06      	ldr	r2, [pc, #24]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    74be:	9b01      	ldr	r3, [sp, #4]
    74c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c4:	1c5a      	adds	r2, r3, #1
    74c6:	4904      	ldr	r1, [pc, #16]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    74c8:	9b01      	ldr	r3, [sp, #4]
    74ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74ce:	bf00      	nop
    74d0:	b003      	add	sp, #12
    74d2:	f85d fb04 	ldr.w	pc, [sp], #4
    74d6:	bf00      	nop
    74d8:	1fff8dc8 	.word	0x1fff8dc8
    74dc:	1fff8dc4 	.word	0x1fff8dc4

000074e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    74e0:	b500      	push	{lr}
    74e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74e4:	f7f9 ff90 	bl	1408 <Sys_GetCoreID>
    74e8:	4603      	mov	r3, r0
    74ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    74ec:	4a0d      	ldr	r2, [pc, #52]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    74ee:	9b01      	ldr	r3, [sp, #4]
    74f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f4:	1e5a      	subs	r2, r3, #1
    74f6:	490b      	ldr	r1, [pc, #44]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    74f8:	9b01      	ldr	r3, [sp, #4]
    74fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    74fe:	4a0a      	ldr	r2, [pc, #40]	; (7528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7500:	9b01      	ldr	r3, [sp, #4]
    7502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7506:	f003 0301 	and.w	r3, r3, #1
    750a:	2b00      	cmp	r3, #0
    750c:	d106      	bne.n	751c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    750e:	4a05      	ldr	r2, [pc, #20]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7510:	9b01      	ldr	r3, [sp, #4]
    7512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7516:	2b00      	cmp	r3, #0
    7518:	d100      	bne.n	751c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    751a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    751c:	bf00      	nop
    751e:	b003      	add	sp, #12
    7520:	f85d fb04 	ldr.w	pc, [sp], #4
    7524:	1fff8dc8 	.word	0x1fff8dc8
    7528:	1fff8dc4 	.word	0x1fff8dc4

0000752c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    752c:	b500      	push	{lr}
    752e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7530:	f7f9 ff6a 	bl	1408 <Sys_GetCoreID>
    7534:	4603      	mov	r3, r0
    7536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7538:	4a10      	ldr	r2, [pc, #64]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    753a:	9b01      	ldr	r3, [sp, #4]
    753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7540:	2b00      	cmp	r3, #0
    7542:	d10d      	bne.n	7560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7544:	f7f9 f9d2 	bl	8ec <Port_schm_read_msr>
    7548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    754a:	9b00      	ldr	r3, [sp, #0]
    754c:	f003 0301 	and.w	r3, r3, #1
    7550:	2b00      	cmp	r3, #0
    7552:	d100      	bne.n	7556 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7556:	490a      	ldr	r1, [pc, #40]	; (7580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7558:	9b01      	ldr	r3, [sp, #4]
    755a:	9a00      	ldr	r2, [sp, #0]
    755c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7560:	4a06      	ldr	r2, [pc, #24]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7562:	9b01      	ldr	r3, [sp, #4]
    7564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7568:	1c5a      	adds	r2, r3, #1
    756a:	4904      	ldr	r1, [pc, #16]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    756c:	9b01      	ldr	r3, [sp, #4]
    756e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7572:	bf00      	nop
    7574:	b003      	add	sp, #12
    7576:	f85d fb04 	ldr.w	pc, [sp], #4
    757a:	bf00      	nop
    757c:	1fff8dd0 	.word	0x1fff8dd0
    7580:	1fff8dcc 	.word	0x1fff8dcc

00007584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7584:	b500      	push	{lr}
    7586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7588:	f7f9 ff3e 	bl	1408 <Sys_GetCoreID>
    758c:	4603      	mov	r3, r0
    758e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7590:	4a0d      	ldr	r2, [pc, #52]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7592:	9b01      	ldr	r3, [sp, #4]
    7594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7598:	1e5a      	subs	r2, r3, #1
    759a:	490b      	ldr	r1, [pc, #44]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    759c:	9b01      	ldr	r3, [sp, #4]
    759e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    75a2:	4a0a      	ldr	r2, [pc, #40]	; (75cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    75a4:	9b01      	ldr	r3, [sp, #4]
    75a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75aa:	f003 0301 	and.w	r3, r3, #1
    75ae:	2b00      	cmp	r3, #0
    75b0:	d106      	bne.n	75c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    75b2:	4a05      	ldr	r2, [pc, #20]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    75b4:	9b01      	ldr	r3, [sp, #4]
    75b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ba:	2b00      	cmp	r3, #0
    75bc:	d100      	bne.n	75c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75c0:	bf00      	nop
    75c2:	b003      	add	sp, #12
    75c4:	f85d fb04 	ldr.w	pc, [sp], #4
    75c8:	1fff8dd0 	.word	0x1fff8dd0
    75cc:	1fff8dcc 	.word	0x1fff8dcc

000075d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    75d0:	b500      	push	{lr}
    75d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75d4:	f7f9 ff18 	bl	1408 <Sys_GetCoreID>
    75d8:	4603      	mov	r3, r0
    75da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    75dc:	4a10      	ldr	r2, [pc, #64]	; (7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    75de:	9b01      	ldr	r3, [sp, #4]
    75e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e4:	2b00      	cmp	r3, #0
    75e6:	d10d      	bne.n	7604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    75e8:	f7f9 f980 	bl	8ec <Port_schm_read_msr>
    75ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    75ee:	9b00      	ldr	r3, [sp, #0]
    75f0:	f003 0301 	and.w	r3, r3, #1
    75f4:	2b00      	cmp	r3, #0
    75f6:	d100      	bne.n	75fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    75f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    75fa:	490a      	ldr	r1, [pc, #40]	; (7624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    75fc:	9b01      	ldr	r3, [sp, #4]
    75fe:	9a00      	ldr	r2, [sp, #0]
    7600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    7604:	4a06      	ldr	r2, [pc, #24]	; (7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7606:	9b01      	ldr	r3, [sp, #4]
    7608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    760c:	1c5a      	adds	r2, r3, #1
    760e:	4904      	ldr	r1, [pc, #16]	; (7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7610:	9b01      	ldr	r3, [sp, #4]
    7612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7616:	bf00      	nop
    7618:	b003      	add	sp, #12
    761a:	f85d fb04 	ldr.w	pc, [sp], #4
    761e:	bf00      	nop
    7620:	1fff8dd8 	.word	0x1fff8dd8
    7624:	1fff8dd4 	.word	0x1fff8dd4

00007628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7628:	b500      	push	{lr}
    762a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    762c:	f7f9 feec 	bl	1408 <Sys_GetCoreID>
    7630:	4603      	mov	r3, r0
    7632:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    7634:	4a0d      	ldr	r2, [pc, #52]	; (766c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7636:	9b01      	ldr	r3, [sp, #4]
    7638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    763c:	1e5a      	subs	r2, r3, #1
    763e:	490b      	ldr	r1, [pc, #44]	; (766c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7640:	9b01      	ldr	r3, [sp, #4]
    7642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    7646:	4a0a      	ldr	r2, [pc, #40]	; (7670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7648:	9b01      	ldr	r3, [sp, #4]
    764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764e:	f003 0301 	and.w	r3, r3, #1
    7652:	2b00      	cmp	r3, #0
    7654:	d106      	bne.n	7664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7656:	4a05      	ldr	r2, [pc, #20]	; (766c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7658:	9b01      	ldr	r3, [sp, #4]
    765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    765e:	2b00      	cmp	r3, #0
    7660:	d100      	bne.n	7664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7664:	bf00      	nop
    7666:	b003      	add	sp, #12
    7668:	f85d fb04 	ldr.w	pc, [sp], #4
    766c:	1fff8dd8 	.word	0x1fff8dd8
    7670:	1fff8dd4 	.word	0x1fff8dd4

00007674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7674:	b500      	push	{lr}
    7676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7678:	f7f9 fec6 	bl	1408 <Sys_GetCoreID>
    767c:	4603      	mov	r3, r0
    767e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7680:	4a10      	ldr	r2, [pc, #64]	; (76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7682:	9b01      	ldr	r3, [sp, #4]
    7684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7688:	2b00      	cmp	r3, #0
    768a:	d10d      	bne.n	76a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    768c:	f7f9 f92e 	bl	8ec <Port_schm_read_msr>
    7690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7692:	9b00      	ldr	r3, [sp, #0]
    7694:	f003 0301 	and.w	r3, r3, #1
    7698:	2b00      	cmp	r3, #0
    769a:	d100      	bne.n	769e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    769c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    769e:	490a      	ldr	r1, [pc, #40]	; (76c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    76a0:	9b01      	ldr	r3, [sp, #4]
    76a2:	9a00      	ldr	r2, [sp, #0]
    76a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    76a8:	4a06      	ldr	r2, [pc, #24]	; (76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    76aa:	9b01      	ldr	r3, [sp, #4]
    76ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b0:	1c5a      	adds	r2, r3, #1
    76b2:	4904      	ldr	r1, [pc, #16]	; (76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    76b4:	9b01      	ldr	r3, [sp, #4]
    76b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76ba:	bf00      	nop
    76bc:	b003      	add	sp, #12
    76be:	f85d fb04 	ldr.w	pc, [sp], #4
    76c2:	bf00      	nop
    76c4:	1fff8de0 	.word	0x1fff8de0
    76c8:	1fff8ddc 	.word	0x1fff8ddc

000076cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    76cc:	b500      	push	{lr}
    76ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76d0:	f7f9 fe9a 	bl	1408 <Sys_GetCoreID>
    76d4:	4603      	mov	r3, r0
    76d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    76d8:	4a0d      	ldr	r2, [pc, #52]	; (7710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    76da:	9b01      	ldr	r3, [sp, #4]
    76dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e0:	1e5a      	subs	r2, r3, #1
    76e2:	490b      	ldr	r1, [pc, #44]	; (7710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    76e4:	9b01      	ldr	r3, [sp, #4]
    76e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    76ea:	4a0a      	ldr	r2, [pc, #40]	; (7714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    76ec:	9b01      	ldr	r3, [sp, #4]
    76ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f2:	f003 0301 	and.w	r3, r3, #1
    76f6:	2b00      	cmp	r3, #0
    76f8:	d106      	bne.n	7708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    76fa:	4a05      	ldr	r2, [pc, #20]	; (7710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    76fc:	9b01      	ldr	r3, [sp, #4]
    76fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7702:	2b00      	cmp	r3, #0
    7704:	d100      	bne.n	7708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7708:	bf00      	nop
    770a:	b003      	add	sp, #12
    770c:	f85d fb04 	ldr.w	pc, [sp], #4
    7710:	1fff8de0 	.word	0x1fff8de0
    7714:	1fff8ddc 	.word	0x1fff8ddc

00007718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7718:	b500      	push	{lr}
    771a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    771c:	f7f9 fe74 	bl	1408 <Sys_GetCoreID>
    7720:	4603      	mov	r3, r0
    7722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    7724:	4a10      	ldr	r2, [pc, #64]	; (7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7726:	9b01      	ldr	r3, [sp, #4]
    7728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    772c:	2b00      	cmp	r3, #0
    772e:	d10d      	bne.n	774c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7730:	f7f9 f8dc 	bl	8ec <Port_schm_read_msr>
    7734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7736:	9b00      	ldr	r3, [sp, #0]
    7738:	f003 0301 	and.w	r3, r3, #1
    773c:	2b00      	cmp	r3, #0
    773e:	d100      	bne.n	7742 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    7742:	490a      	ldr	r1, [pc, #40]	; (776c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    7744:	9b01      	ldr	r3, [sp, #4]
    7746:	9a00      	ldr	r2, [sp, #0]
    7748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    774c:	4a06      	ldr	r2, [pc, #24]	; (7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    774e:	9b01      	ldr	r3, [sp, #4]
    7750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7754:	1c5a      	adds	r2, r3, #1
    7756:	4904      	ldr	r1, [pc, #16]	; (7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7758:	9b01      	ldr	r3, [sp, #4]
    775a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    775e:	bf00      	nop
    7760:	b003      	add	sp, #12
    7762:	f85d fb04 	ldr.w	pc, [sp], #4
    7766:	bf00      	nop
    7768:	1fff8de8 	.word	0x1fff8de8
    776c:	1fff8de4 	.word	0x1fff8de4

00007770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7770:	b500      	push	{lr}
    7772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7774:	f7f9 fe48 	bl	1408 <Sys_GetCoreID>
    7778:	4603      	mov	r3, r0
    777a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    777c:	4a0d      	ldr	r2, [pc, #52]	; (77b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    777e:	9b01      	ldr	r3, [sp, #4]
    7780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7784:	1e5a      	subs	r2, r3, #1
    7786:	490b      	ldr	r1, [pc, #44]	; (77b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7788:	9b01      	ldr	r3, [sp, #4]
    778a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    778e:	4a0a      	ldr	r2, [pc, #40]	; (77b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7790:	9b01      	ldr	r3, [sp, #4]
    7792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7796:	f003 0301 	and.w	r3, r3, #1
    779a:	2b00      	cmp	r3, #0
    779c:	d106      	bne.n	77ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    779e:	4a05      	ldr	r2, [pc, #20]	; (77b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a6:	2b00      	cmp	r3, #0
    77a8:	d100      	bne.n	77ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77ac:	bf00      	nop
    77ae:	b003      	add	sp, #12
    77b0:	f85d fb04 	ldr.w	pc, [sp], #4
    77b4:	1fff8de8 	.word	0x1fff8de8
    77b8:	1fff8de4 	.word	0x1fff8de4

000077bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    77bc:	b500      	push	{lr}
    77be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77c0:	f7f9 fe22 	bl	1408 <Sys_GetCoreID>
    77c4:	4603      	mov	r3, r0
    77c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    77c8:	4a10      	ldr	r2, [pc, #64]	; (780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    77ca:	9b01      	ldr	r3, [sp, #4]
    77cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77d0:	2b00      	cmp	r3, #0
    77d2:	d10d      	bne.n	77f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77d4:	f7f9 f88a 	bl	8ec <Port_schm_read_msr>
    77d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77da:	9b00      	ldr	r3, [sp, #0]
    77dc:	f003 0301 	and.w	r3, r3, #1
    77e0:	2b00      	cmp	r3, #0
    77e2:	d100      	bne.n	77e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    77e6:	490a      	ldr	r1, [pc, #40]	; (7810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    77e8:	9b01      	ldr	r3, [sp, #4]
    77ea:	9a00      	ldr	r2, [sp, #0]
    77ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    77f0:	4a06      	ldr	r2, [pc, #24]	; (780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    77f2:	9b01      	ldr	r3, [sp, #4]
    77f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f8:	1c5a      	adds	r2, r3, #1
    77fa:	4904      	ldr	r1, [pc, #16]	; (780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    77fc:	9b01      	ldr	r3, [sp, #4]
    77fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7802:	bf00      	nop
    7804:	b003      	add	sp, #12
    7806:	f85d fb04 	ldr.w	pc, [sp], #4
    780a:	bf00      	nop
    780c:	1fff8df0 	.word	0x1fff8df0
    7810:	1fff8dec 	.word	0x1fff8dec

00007814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7814:	b500      	push	{lr}
    7816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7818:	f7f9 fdf6 	bl	1408 <Sys_GetCoreID>
    781c:	4603      	mov	r3, r0
    781e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    7820:	4a0d      	ldr	r2, [pc, #52]	; (7858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7828:	1e5a      	subs	r2, r3, #1
    782a:	490b      	ldr	r1, [pc, #44]	; (7858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    7832:	4a0a      	ldr	r2, [pc, #40]	; (785c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    7834:	9b01      	ldr	r3, [sp, #4]
    7836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783a:	f003 0301 	and.w	r3, r3, #1
    783e:	2b00      	cmp	r3, #0
    7840:	d106      	bne.n	7850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    7842:	4a05      	ldr	r2, [pc, #20]	; (7858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7844:	9b01      	ldr	r3, [sp, #4]
    7846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    784a:	2b00      	cmp	r3, #0
    784c:	d100      	bne.n	7850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    784e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7850:	bf00      	nop
    7852:	b003      	add	sp, #12
    7854:	f85d fb04 	ldr.w	pc, [sp], #4
    7858:	1fff8df0 	.word	0x1fff8df0
    785c:	1fff8dec 	.word	0x1fff8dec

00007860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7860:	b500      	push	{lr}
    7862:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7864:	f7f9 fdd0 	bl	1408 <Sys_GetCoreID>
    7868:	4603      	mov	r3, r0
    786a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    786c:	4a10      	ldr	r2, [pc, #64]	; (78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    786e:	9b01      	ldr	r3, [sp, #4]
    7870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7874:	2b00      	cmp	r3, #0
    7876:	d10d      	bne.n	7894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7878:	f7f9 f838 	bl	8ec <Port_schm_read_msr>
    787c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    787e:	9b00      	ldr	r3, [sp, #0]
    7880:	f003 0301 	and.w	r3, r3, #1
    7884:	2b00      	cmp	r3, #0
    7886:	d100      	bne.n	788a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7888:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    788a:	490a      	ldr	r1, [pc, #40]	; (78b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    788c:	9b01      	ldr	r3, [sp, #4]
    788e:	9a00      	ldr	r2, [sp, #0]
    7890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7894:	4a06      	ldr	r2, [pc, #24]	; (78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7896:	9b01      	ldr	r3, [sp, #4]
    7898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    789c:	1c5a      	adds	r2, r3, #1
    789e:	4904      	ldr	r1, [pc, #16]	; (78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    78a0:	9b01      	ldr	r3, [sp, #4]
    78a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78a6:	bf00      	nop
    78a8:	b003      	add	sp, #12
    78aa:	f85d fb04 	ldr.w	pc, [sp], #4
    78ae:	bf00      	nop
    78b0:	1fff8df8 	.word	0x1fff8df8
    78b4:	1fff8df4 	.word	0x1fff8df4

000078b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    78b8:	b500      	push	{lr}
    78ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78bc:	f7f9 fda4 	bl	1408 <Sys_GetCoreID>
    78c0:	4603      	mov	r3, r0
    78c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    78c4:	4a0d      	ldr	r2, [pc, #52]	; (78fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    78c6:	9b01      	ldr	r3, [sp, #4]
    78c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78cc:	1e5a      	subs	r2, r3, #1
    78ce:	490b      	ldr	r1, [pc, #44]	; (78fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    78d0:	9b01      	ldr	r3, [sp, #4]
    78d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    78d6:	4a0a      	ldr	r2, [pc, #40]	; (7900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    78d8:	9b01      	ldr	r3, [sp, #4]
    78da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78de:	f003 0301 	and.w	r3, r3, #1
    78e2:	2b00      	cmp	r3, #0
    78e4:	d106      	bne.n	78f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    78e6:	4a05      	ldr	r2, [pc, #20]	; (78fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    78e8:	9b01      	ldr	r3, [sp, #4]
    78ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d100      	bne.n	78f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    78f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    78f4:	bf00      	nop
    78f6:	b003      	add	sp, #12
    78f8:	f85d fb04 	ldr.w	pc, [sp], #4
    78fc:	1fff8df8 	.word	0x1fff8df8
    7900:	1fff8df4 	.word	0x1fff8df4

00007904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7904:	b500      	push	{lr}
    7906:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7908:	f7f9 fd7e 	bl	1408 <Sys_GetCoreID>
    790c:	4603      	mov	r3, r0
    790e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    7910:	4a10      	ldr	r2, [pc, #64]	; (7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7912:	9b01      	ldr	r3, [sp, #4]
    7914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7918:	2b00      	cmp	r3, #0
    791a:	d10d      	bne.n	7938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    791c:	f7f8 ffe6 	bl	8ec <Port_schm_read_msr>
    7920:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7922:	9b00      	ldr	r3, [sp, #0]
    7924:	f003 0301 	and.w	r3, r3, #1
    7928:	2b00      	cmp	r3, #0
    792a:	d100      	bne.n	792e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    792c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    792e:	490a      	ldr	r1, [pc, #40]	; (7958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    7930:	9b01      	ldr	r3, [sp, #4]
    7932:	9a00      	ldr	r2, [sp, #0]
    7934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7938:	4a06      	ldr	r2, [pc, #24]	; (7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    793a:	9b01      	ldr	r3, [sp, #4]
    793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7940:	1c5a      	adds	r2, r3, #1
    7942:	4904      	ldr	r1, [pc, #16]	; (7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7944:	9b01      	ldr	r3, [sp, #4]
    7946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    794a:	bf00      	nop
    794c:	b003      	add	sp, #12
    794e:	f85d fb04 	ldr.w	pc, [sp], #4
    7952:	bf00      	nop
    7954:	1fff8e00 	.word	0x1fff8e00
    7958:	1fff8dfc 	.word	0x1fff8dfc

0000795c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    795c:	b500      	push	{lr}
    795e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7960:	f7f9 fd52 	bl	1408 <Sys_GetCoreID>
    7964:	4603      	mov	r3, r0
    7966:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7968:	4a0d      	ldr	r2, [pc, #52]	; (79a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    796a:	9b01      	ldr	r3, [sp, #4]
    796c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7970:	1e5a      	subs	r2, r3, #1
    7972:	490b      	ldr	r1, [pc, #44]	; (79a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7974:	9b01      	ldr	r3, [sp, #4]
    7976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    797a:	4a0a      	ldr	r2, [pc, #40]	; (79a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    797c:	9b01      	ldr	r3, [sp, #4]
    797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7982:	f003 0301 	and.w	r3, r3, #1
    7986:	2b00      	cmp	r3, #0
    7988:	d106      	bne.n	7998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    798a:	4a05      	ldr	r2, [pc, #20]	; (79a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    798c:	9b01      	ldr	r3, [sp, #4]
    798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7992:	2b00      	cmp	r3, #0
    7994:	d100      	bne.n	7998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7996:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7998:	bf00      	nop
    799a:	b003      	add	sp, #12
    799c:	f85d fb04 	ldr.w	pc, [sp], #4
    79a0:	1fff8e00 	.word	0x1fff8e00
    79a4:	1fff8dfc 	.word	0x1fff8dfc

000079a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    79a8:	b500      	push	{lr}
    79aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79ac:	f7f9 fd2c 	bl	1408 <Sys_GetCoreID>
    79b0:	4603      	mov	r3, r0
    79b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    79b4:	4a10      	ldr	r2, [pc, #64]	; (79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    79b6:	9b01      	ldr	r3, [sp, #4]
    79b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79bc:	2b00      	cmp	r3, #0
    79be:	d10d      	bne.n	79dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79c0:	f7f8 ff94 	bl	8ec <Port_schm_read_msr>
    79c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79c6:	9b00      	ldr	r3, [sp, #0]
    79c8:	f003 0301 	and.w	r3, r3, #1
    79cc:	2b00      	cmp	r3, #0
    79ce:	d100      	bne.n	79d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    79d2:	490a      	ldr	r1, [pc, #40]	; (79fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    79d4:	9b01      	ldr	r3, [sp, #4]
    79d6:	9a00      	ldr	r2, [sp, #0]
    79d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    79dc:	4a06      	ldr	r2, [pc, #24]	; (79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    79de:	9b01      	ldr	r3, [sp, #4]
    79e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79e4:	1c5a      	adds	r2, r3, #1
    79e6:	4904      	ldr	r1, [pc, #16]	; (79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    79e8:	9b01      	ldr	r3, [sp, #4]
    79ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79ee:	bf00      	nop
    79f0:	b003      	add	sp, #12
    79f2:	f85d fb04 	ldr.w	pc, [sp], #4
    79f6:	bf00      	nop
    79f8:	1fff8e08 	.word	0x1fff8e08
    79fc:	1fff8e04 	.word	0x1fff8e04

00007a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7a00:	b500      	push	{lr}
    7a02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a04:	f7f9 fd00 	bl	1408 <Sys_GetCoreID>
    7a08:	4603      	mov	r3, r0
    7a0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    7a0c:	4a0d      	ldr	r2, [pc, #52]	; (7a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7a0e:	9b01      	ldr	r3, [sp, #4]
    7a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a14:	1e5a      	subs	r2, r3, #1
    7a16:	490b      	ldr	r1, [pc, #44]	; (7a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7a18:	9b01      	ldr	r3, [sp, #4]
    7a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    7a1e:	4a0a      	ldr	r2, [pc, #40]	; (7a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7a20:	9b01      	ldr	r3, [sp, #4]
    7a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a26:	f003 0301 	and.w	r3, r3, #1
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	d106      	bne.n	7a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    7a2e:	4a05      	ldr	r2, [pc, #20]	; (7a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7a30:	9b01      	ldr	r3, [sp, #4]
    7a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a36:	2b00      	cmp	r3, #0
    7a38:	d100      	bne.n	7a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a3c:	bf00      	nop
    7a3e:	b003      	add	sp, #12
    7a40:	f85d fb04 	ldr.w	pc, [sp], #4
    7a44:	1fff8e08 	.word	0x1fff8e08
    7a48:	1fff8e04 	.word	0x1fff8e04

00007a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7a4c:	b500      	push	{lr}
    7a4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a50:	f7f9 fcda 	bl	1408 <Sys_GetCoreID>
    7a54:	4603      	mov	r3, r0
    7a56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7a58:	4a10      	ldr	r2, [pc, #64]	; (7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7a5a:	9b01      	ldr	r3, [sp, #4]
    7a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a60:	2b00      	cmp	r3, #0
    7a62:	d10d      	bne.n	7a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a64:	f7f8 ff42 	bl	8ec <Port_schm_read_msr>
    7a68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a6a:	9b00      	ldr	r3, [sp, #0]
    7a6c:	f003 0301 	and.w	r3, r3, #1
    7a70:	2b00      	cmp	r3, #0
    7a72:	d100      	bne.n	7a76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    7a76:	490a      	ldr	r1, [pc, #40]	; (7aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7a78:	9b01      	ldr	r3, [sp, #4]
    7a7a:	9a00      	ldr	r2, [sp, #0]
    7a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    7a80:	4a06      	ldr	r2, [pc, #24]	; (7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7a82:	9b01      	ldr	r3, [sp, #4]
    7a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a88:	1c5a      	adds	r2, r3, #1
    7a8a:	4904      	ldr	r1, [pc, #16]	; (7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7a8c:	9b01      	ldr	r3, [sp, #4]
    7a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a92:	bf00      	nop
    7a94:	b003      	add	sp, #12
    7a96:	f85d fb04 	ldr.w	pc, [sp], #4
    7a9a:	bf00      	nop
    7a9c:	1fff8e10 	.word	0x1fff8e10
    7aa0:	1fff8e0c 	.word	0x1fff8e0c

00007aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7aa4:	b500      	push	{lr}
    7aa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7aa8:	f7f9 fcae 	bl	1408 <Sys_GetCoreID>
    7aac:	4603      	mov	r3, r0
    7aae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7ab0:	4a0d      	ldr	r2, [pc, #52]	; (7ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7ab2:	9b01      	ldr	r3, [sp, #4]
    7ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ab8:	1e5a      	subs	r2, r3, #1
    7aba:	490b      	ldr	r1, [pc, #44]	; (7ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7abc:	9b01      	ldr	r3, [sp, #4]
    7abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7ac2:	4a0a      	ldr	r2, [pc, #40]	; (7aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7ac4:	9b01      	ldr	r3, [sp, #4]
    7ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aca:	f003 0301 	and.w	r3, r3, #1
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d106      	bne.n	7ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7ad2:	4a05      	ldr	r2, [pc, #20]	; (7ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7ad4:	9b01      	ldr	r3, [sp, #4]
    7ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ada:	2b00      	cmp	r3, #0
    7adc:	d100      	bne.n	7ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ade:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ae0:	bf00      	nop
    7ae2:	b003      	add	sp, #12
    7ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae8:	1fff8e10 	.word	0x1fff8e10
    7aec:	1fff8e0c 	.word	0x1fff8e0c

00007af0 <Clock_Ip_au8DividerCallbackIndex>:
    7af0:	0e0d0c00 06030201 0a070409 000b0805     ................

00007b00 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007b10 <Clock_Ip_au8XoscCallbackIndex>:
    7b10:	00000100 00000000 00000000 00000000     ................

00007b20 <Clock_Ip_au8IrcoscCallbackIndex>:
    7b20:	03020100 00000004 00000000 00000000     ................

00007b30 <Clock_Ip_au8GateCallbackIndex>:
    7b30:	06010200 01040301 00000500 00000000     ................

00007b40 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007b50 <Clock_Ip_au8PllCallbackIndex>:
    7b50:	00000100 00000000 00000000 00000000     ................

00007b60 <Clock_Ip_au8SelectorCallbackIndex>:
    7b60:	0a090800 03020109 07060504 00000000     ................

00007b70 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00007b80 <Clock_Ip_au8CmuCallbackIndex>:
	...

00007b90 <Clock_Ip_au8ClockFeatures>:
	...
    7ba0:	01000000 00000000 00000000 00000002     ................
    7bb0:	00000000 00000300 00000000 00040000     ................
    7bc0:	00000000 05000000 00000000 00000000     ................
    7bd0:	00000006 00000000 00000100 00000000     ................
    7be0:	00010000 00000000 04000000 00000000     ................
    7bf0:	00000000 00000005 00000001 00000401     ................
    7c00:	00000200 00050100 00030000 04020000     ................
    7c10:	04000000 02000000 00000005 00000005     ................
    7c20:	00000403 00000600 00050300 00070000     ................
    7c30:	05000000 00000000 00000000 00000006     ................
	...
    7c70:	00050000 00000000 06000000 00000100     ................
    7c80:	00000000 00030007 00000000 00000000     ................
    7c90:	00000000 00060000 00000000 07000000     ................
    7ca0:	00000100 00000000 00030008 00000000     ................
	...
    7cb8:	00090000 00000000 0a000000 00000100     ................
    7cc8:	00000000 0003000b 00000000 00000000     ................
    7cd8:	00000000 000c0000 00000000 0d000000     ................
    7ce8:	00000100 00000000 0003000e 00000000     ................
    7cf8:	00000800 00000000 00090000 00000000     ................
    7d08:	0a000000 00000000 00000000 0000000b     ................
    7d18:	00000000 00000b01 00000000 000b0200     ................
    7d28:	00000000 0b030000 00000000 00000000     ................
	...
    7d40:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    7d50:	01000000 00000000 00000000 00000007     ................
    7d60:	00007300 00000700 00320000 00090000     .s........2.....
    7d70:	02000000 07000000 00000000 00000021     ............!...
    7d80:	00000009 00000400 00000900 00030000     ................
    7d90:	00070000 61000000 07000000 00000000     .......a........
    7da0:	00000024 00000007 00002500 00000700     $........%......
    7db0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7dc0:	00000000 00000020 38000004 00003800     .... ......8.8..
    7dd0:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7de0:	04000000 00260000 00000026 66000004     ......&.&......f
    7df0:	00006600 00000400 00370037 00040000     .f......7.7.....
    7e00:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7e10:	2e000004 00002e00 00000200 00404040     ............@@@.
    7e20:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    7e30:	0000006b 6c000004 00006c00 00000900     k......l.l......
    7e40:	00010000 00090000 00000000 07000000     ................
    7e50:	00000000 00000036 00000007 00003100     ....6........1..
    7e60:	00000700 00490000 00070000 4a000000     ......I........J
    7e70:	07000000 00000000 0000004b 00000007     ........K.......
    7e80:	00004c00 00000700 004d0000 00070000     .L........M.....
    7e90:	3d000000 03000000 00000000 00000000     ...=............

00007ea0 <Clock_Ip_au16SelectorEntryHardwareValue>:
    7ea0:	01010a03 01010001 04040002 02000603     ................
    7eb0:	00010810 02020100 00000000 00000007     ................
    7ec0:	00000009 00000000 00000c0e 00000000     ................
	...

00007ef8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7ef8:	00020000 00000300 00000601 00000000     ................
	...

00007f28 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    7f28:	00000700 00000000 02020000 01010303     ................
    7f38:	03020606 00000000 00000000 00000000     ................
	...

00007f58 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    7f58:	00000001 00000000 02020000 01010303     ................
    7f68:	03020606 00000000 00000000 00000000     ................
	...

00007f88 <Clock_Ip_au8DividerValueHardwareValue>:
    7f88:	00020100 00000003 00000004 00000000     ................
    7f98:	00000005 00000000 00000000 00000000     ................
    7fa8:	00000006 00000000 00000000 00000000     ................
	...
    7fc8:	00000007                                ....

00007fcc <Clock_Ip_apxScgPeriphAsyncDivs>:
    7fcc:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007fdc <Clock_Ip_aeSourceTypeClockName>:
    7fdc:	00000000 00000001 00000001 00000001     ................
    7fec:	00000001 00000001 00000001 00000001     ................
    7ffc:	00000002 00000003 00000001 00000001     ................
    800c:	00000001 00000001 00000002 00000002     ................
    801c:	00000003 00000003 00000001 00000001     ................
    802c:	00000004 00000004 00000004 00000004     ................
	...

00008098 <Clock_Ip_aeHwPllName>:
    8098:	00000009                                ....

0000809c <Clock_Ip_aeHwDfsName>:
    809c:	00000057                                W...

000080a0 <Clock_Ip_axDividerCallbacks>:
    80a0:	00002569 00002573 0000258d 000025a7     i%..s%...%...%..
    80b0:	000025c1 000025db 000025f5 0000260f     .%...%...%...&..
    80c0:	00002629 00002643 0000265d 00002677     )&..C&..]&..w&..
    80d0:	00002691 000026ab 000026c5              .&...&...&..

000080dc <Clock_Ip_axDividerTriggerCallbacks>:
    80dc:	00002a39 00002a39                       9*..9*..

000080e4 <Clock_Ip_axExtOscCallbacks>:
    80e4:	00002a45 00002a45 00002a45 00002a4f     E*..E*..E*..O*..
    80f4:	00002a45 00002a59 00002a73 00002a8d     E*..Y*..s*...*..
    8104:	00002b11 00002b25                       .+..%+..

0000810c <Clock_Ip_axFracDivCallbacks>:
    810c:	00002ce5 00002ce5 00002cef              .,...,...,..

00008118 <Clock_Ip_axGateCallbacks>:
    8118:	00002d09 00002d13 00002e13 00002e2d     .-...-......-...
    8128:	00002dc3 00002ddd 00002d73 00002d8d     .-...-..s-...-..
    8138:	00002d23 00002d3d 00002e63 00002e7d     #-..=-..c...}...
    8148:	00002eb3 00002ecd                       ........

00008150 <Clock_Ip_axIntOscCallbacks>:
    8150:	00003079 00003079 00003083 0000308d     y0..y0...0...0..
    8160:	000030a7 000030c1 000030d5 000030ef     .0...0...0...0..
    8170:	00003109 0000311d 00003137 00003151     .1...1..71..Q1..
    8180:	000031f9 00003213 0000322d              .1...2..-2..

0000818c <Clock_Ip_axCmuCallbacks>:
    818c:	000037c9 000037d3 000037df 000037c9     .7...7...7...7..

0000819c <Clock_Ip_axPllCallbacks>:
    819c:	000037e9 000037e9 000037f3 000037e9     .7...7...7...7..
    81ac:	000037ff 00003809 00003823 0000383d     .7...8..#8..=8..
    81bc:	000038e1 000038cd                       .8...8..

000081c4 <Clock_Ip_axPcfsCallbacks>:
    81c4:	00003a3d                                =:..

000081c8 <Clock_Ip_axSelectorCallbacks>:
    81c8:	00003a49 00003a49 00003a53 00003a6d     I:..I:..S:..m:..
    81d8:	00003a49 00003a87 00003aa1 00003abb     I:...:...:...:..
    81e8:	00003ad5 00003aef 00003b09 00003b23     .:...:...;..#;..
    81f8:	00003b3d 00003b57 00003b71 00003b8b     =;..W;..q;...;..
    8208:	00003ba5 00003bbf 00003bd9 00003bf3     .;...;...;...;..
    8218:	00003c0d 00003c27                       .<..'<..

00008220 <ClockSource>:
    8220:	00000000 00000008 00000002 00000005     ................
	...
    8238:	00000009                                ....

0000823c <ResetReasonArray>:
    823c:	00000000 00000001 00000002 00000003     ................
    824c:	00000004 00000005 00000006 00000007     ................
    825c:	00000008 00000009 0000000a 0000000b     ................
    826c:	0000000c 0000000d 0000000e              ............

00008278 <Port_au32PortCiPortBaseAddr>:
    8278:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8288:	4004d000                                ...@

0000828c <Port_au32PortCiGpioBaseAddr>:
    828c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    829c:	400ff100                                ...@

000082a0 <Queue_Config>:
    82a0:	00000002 00000001 1fff8b50              ........P...

000082ac <Task_Config>:
    82ac:	00000032 00000001 000008ff 00000064     2...........d...
    82bc:	00000001 00000909                       ........

000082c4 <Timer_Config>:
    82c4:	0000012c 00000000 00000a29              ,.......)...

000082d0 <Scheduler_Config>:
    82d0:	0000000a 00000002 000082ac 00000001     ................
    82e0:	000082c4 00000001 000082a0              ............

000082ec <ButtonsCfg>:
    82ec:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    82fc:	0000000c 0000012c                       ....,...

00008304 <LedsCfg>:
    8304:	00010048 00010049 0001004a 0001004b     H...I...J...K...
    8314:	0001004d 0001004e                       M...N...

0000831c <Mcu_aClockConfigPB>:
	...
    8324:	14000002 0400000e 01000020 00000002     ........ .......
    8334:	01000001 00000001 00000005 00000001     ................
    8344:	00000000 00000057 00000000 00000000     ....W...........
	...
    835c:	00000057 00000000 00000057 00000000     W.......W.......
	...
    8384:	00000019 00000005 0000001a 00000002     ................
    8394:	0000001b 00000005 0000002a 00000002     ........*.......
    83a4:	0000003f 0000000a 00000040 00000000     ?.......@.......
    83b4:	00000041 00000000 00000042 00000000     A.......B.......
    83c4:	00000031 00000000 00000045 00000000     1.......E.......
    83d4:	00000046 00000000 00000047 00000000     F.......G.......
    83e4:	00000044 00000000 00000030 00000000     D.......0.......
    83f4:	0000003d 00000000 00000043 00000000     =.......C.......
    8404:	00000049 00000000 0000004a 00000000     I.......J.......
    8414:	0000004b 00000000 00000048 00000000     K.......H.......
    8424:	00000057 00000057 00000057 00000057     W...W...W...W...
    8434:	00000057 00000057 00000057 00000057     W...W...W...W...
    8444:	00000057 00000057 00000057 00000057     W...W...W...W...
    8454:	00000057 00000057 00000057 00000057     W...W...W...W...
    8464:	0000000a 00000008 00000000 0000000b     ................
    8474:	00000001 00000000 0000000c 00000001     ................
    8484:	00000000 0000000d 00000001 00000000     ................
    8494:	0000001d 00000001 00000000 0000001e     ................
    84a4:	00000002 00000000 0000001f 00000001     ................
    84b4:	00000000 00000021 00000001 00000000     ....!...........
    84c4:	00000022 00000002 00000000 00000023     "...........#...
    84d4:	00000001 00000000 00000025 00000002     ........%.......
    84e4:	00000000 00000026 00000004 00000000     ....&...........
    84f4:	00000027 00000002 00000000 00000048     '...........H...
    8504:	00000001 00000001 00000057 00000000     ........W.......
    8514:	00000000 00000057 00000000 00000000     ....W...........
    8524:	00000057 00000000 00000000 00000057     W...........W...
	...
    853c:	00000057 00000000 00000000 00000057     W...........W...
	...
    8554:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    8570:	00000014 00007d00 00000015 00007d00     .....}.......}..
    8580:	00000016 00007d00 00000017 00008000     .....}..........
    8590:	00000030 00000000 00000031 00000000     0.......1.......
    85a0:	00000033 00000000 00000034 00000000     3.......4.......
    85b0:	00000036 00000000 00000039 00000000     6.......9.......
    85c0:	0000003a 00000000 0000003b 00000000     :.......;.......
    85d0:	0000003c 00000000 0000003d 00000000     <.......=.......
    85e0:	0000003e 00000000 0000003f 00000000     >.......?.......
    85f0:	00000040 00000000 00000041 00000000     @.......A.......
    8600:	00000042 00000000 00000043 00000000     B.......C.......
    8610:	00000044 00000000 00000045 00000000     D.......E.......
    8620:	00000046 00000000 00000047 00000000     F.......G.......
    8630:	00000048 00000000 00000049 00000000     H.......I.......
    8640:	0000004a 00000000 0000004b 00000000     J.......K.......
    8650:	0000004e 00000000 0000004f 00000000     N.......O.......
    8660:	00000050 00000001 00000051 00000001     P.......Q.......
    8670:	00000052 00000001 00000053 00000001     R.......S.......
    8680:	00000054 00000001 00000055 00000000     T.......U.......
    8690:	00000057 00000000 00000057 00000000     W.......W.......
    86a0:	00000057 00000000 00000057 00000000     W.......W.......
    86b0:	00000057 00000000 00000057 00000000     W.......W.......
    86c0:	00000057 00000000 00000057 00000000     W.......W.......
    86d0:	00000057 00000000 00000057 00000000     W.......W.......
    86e0:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00008714 <Mcu_Config>:
    8714:	0000005a 00000000 00000001 00000001     Z...............
    8724:	00008a58 0000831c 00008a64              X.......d...

00008730 <OsIf_xPredefinedConfig>:
    8730:	00000000 02dc6c00                       .....l..

00008738 <OsIf_apxPredefinedConfig>:
    8738:	00008730                                0...

0000873c <g_pin_mux_InitConfigArr>:
    873c:	4004b000 400ff080 00000008 00000002     ...@...@........
    874c:	00000001 00000002 00000000 00000000     ................
	...
    8764:	4004b000 400ff080 00000009 00000002     ...@...@........
    8774:	00000001 00000002 00000000 00000000     ................
	...
    878c:	4004b000 400ff080 0000000a 00000002     ...@...@........
    879c:	00000001 00000002 00000000 00000000     ................
	...
    87b4:	4004b000 400ff080 0000000b 00000002     ...@...@........
    87c4:	00000001 00000002 00000000 00000000     ................
	...
    87dc:	4004b000 400ff080 0000000d 00000002     ...@...@........
    87ec:	00000001 00000002 00000000 00000000     ................
	...
    8804:	4004b000 400ff080 0000000e 00000002     ...@...@........
    8814:	00000001 00000002 00000000 00000000     ................
	...
    882c:	4004d000 400ff100 0000000c 00000002     ...@...@........
    883c:	00000001 00000001 00000000 00000000     ................
	...
    8854:	4004c000 400ff0c0 00000011 00000002     ...@...@........
    8864:	00000001 00000001 00000000 00000000     ................
	...
    887c:	40049000 400ff000 0000000c 00000002     ...@...@........
    888c:	00000001 00000001 00000000 00000000     ................
	...

000088a4 <au8Port_PartitionList>:
    88a4:	00000001                                ....

000088a8 <au32Port_PinToPartitionMap>:
    88a8:	00000001 00000001 00000001 00000001     ................
    88b8:	00000001 00000001 00000001 00000001     ................
    88c8:	00000001                                ....

000088cc <Port_au16NoUnUsedPadsArrayDefault>:
    88cc:	00010000 00030002 00070006 00090008     ................
    88dc:	000d000b 000f000e 00110010 00210020     ............ .!.
    88ec:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    88fc:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    890c:	00410040 00430042 00470046 004f004c     @.A.B.C.F.G.L.O.
    891c:	00510050 00610060 00630062 00650064     P.Q.`.a.b.c.d.e.
    892c:	00670066 00690068 006b006a 006d006c     f.g.h.i.j.k.l.m.
    893c:	006f006e 00800070 00820081 00840083     n.o.p...........
    894c:	00860085 00880087 008a0089 008d008b     ................
    895c:	008f008e 00000090                       ........

00008964 <Port_UnUsedPin>:
    8964:	00000000 00000001 00000000              ............

00008970 <Port_aPinConfigDefault>:
    8970:	00000048 00000100 00000000 00000002     H...............
    8980:	00010001 00000049 00000100 00000000     ....I...........
    8990:	00000002 00010101 0000004a 00000100     ........J.......
    89a0:	00000000 00000002 00010101 0000008c     ................
    89b0:	00000100 00000000 00000001 00010101     ................
    89c0:	0000004b 00000100 00000000 00000002     K...............
    89d0:	00010101 0000004d 00000100 00000000     ....M...........
    89e0:	00000002 00010101 0000004e 00000100     ........N.......
    89f0:	00000000 00000002 00010101 00000071     ............q...
    8a00:	00000100 00000000 00000001 00010101     ................
    8a10:	0000000c 00000100 00000000 00000001     ................
    8a20:	00010101                                ....

00008a24 <Port_Config>:
    8a24:	004b0009 000088cc 00008964 00008970     ..K.....d...p...
	...
    8a3c:	000088a8 000088a4 0000873c              ........<...

00008a48 <Power_Ip_RCM_ConfigPB>:
	...

00008a50 <Power_Ip_PMC_ConfigPB>:
    8a50:	00000000                                ....

00008a54 <Power_Ip_SMC_ConfigPB>:
    8a54:	00000000                                ....

00008a58 <Power_Ip_aModeConfigPB>:
	...

00008a64 <Power_Ip_HwIPsConfigPB>:
    8a64:	00008a48 00008a50 00008a54              H...P...T...

00008a70 <__INIT_TABLE>:
    8a70:	00000002 	.word	0x00000002
    8a74:	1fff8b10 	.word	0x1fff8b10
    8a78:	00008a98 	.word	0x00008a98
    8a7c:	00008ad0 	.word	0x00008ad0
    8a80:	1fff8800 	.word	0x1fff8800
    8a84:	00000000 	.word	0x00000000
    8a88:	00000310 	.word	0x00000310

00008a8c <__ZERO_TABLE>:
    8a8c:	00000001 	.word	0x00000001
    8a90:	1fff8b50 	.word	0x1fff8b50
    8a94:	1fff8e70 	.word	0x1fff8e70
