
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000015d7 	.word	0x000015d7
  10:	000015d9 	.word	0x000015d9
  14:	000015db 	.word	0x000015db
  18:	000015dd 	.word	0x000015dd
	...
  2c:	000015df 	.word	0x000015df
  30:	000015e1 	.word	0x000015e1
  34:	00000000 	.word	0x00000000
  38:	000015e3 	.word	0x000015e3
  3c:	000015e5 	.word	0x000015e5
  40:	000015e7 	.word	0x000015e7
  44:	000015e7 	.word	0x000015e7
  48:	000015e7 	.word	0x000015e7
  4c:	000015e7 	.word	0x000015e7
  50:	000015e7 	.word	0x000015e7
  54:	000015e7 	.word	0x000015e7
  58:	000015e7 	.word	0x000015e7
  5c:	000015e7 	.word	0x000015e7
  60:	000015e7 	.word	0x000015e7
  64:	000015e7 	.word	0x000015e7
  68:	000015e7 	.word	0x000015e7
  6c:	000015e7 	.word	0x000015e7
  70:	000015e7 	.word	0x000015e7
  74:	000015e7 	.word	0x000015e7
  78:	000015e7 	.word	0x000015e7
  7c:	000015e7 	.word	0x000015e7
  80:	000015e7 	.word	0x000015e7
  84:	000015e7 	.word	0x000015e7
  88:	000015e7 	.word	0x000015e7
  8c:	000015e7 	.word	0x000015e7
  90:	000015e7 	.word	0x000015e7
  94:	000015e7 	.word	0x000015e7
  98:	000015e7 	.word	0x000015e7
  9c:	000015e7 	.word	0x000015e7
  a0:	000015e7 	.word	0x000015e7
  a4:	000015e7 	.word	0x000015e7
  a8:	000015e7 	.word	0x000015e7
  ac:	000015e7 	.word	0x000015e7
  b0:	000015e7 	.word	0x000015e7
  b4:	000015e7 	.word	0x000015e7
  b8:	000015e7 	.word	0x000015e7
  bc:	000015e7 	.word	0x000015e7
  c0:	000015e7 	.word	0x000015e7
  c4:	000015e7 	.word	0x000015e7
  c8:	000015e7 	.word	0x000015e7
  cc:	000015e7 	.word	0x000015e7
  d0:	000015e7 	.word	0x000015e7
  d4:	000015e7 	.word	0x000015e7
  d8:	000015e7 	.word	0x000015e7
  dc:	000015e7 	.word	0x000015e7
  e0:	000015e7 	.word	0x000015e7
  e4:	000015e7 	.word	0x000015e7
  e8:	000015e7 	.word	0x000015e7
  ec:	000015e7 	.word	0x000015e7
  f0:	000015e7 	.word	0x000015e7
  f4:	000015e7 	.word	0x000015e7
  f8:	000015e7 	.word	0x000015e7
  fc:	000015e7 	.word	0x000015e7
 100:	000015e7 	.word	0x000015e7
 104:	000015e7 	.word	0x000015e7
 108:	000015e7 	.word	0x000015e7
 10c:	000015e7 	.word	0x000015e7
 110:	000015e7 	.word	0x000015e7
 114:	000015e7 	.word	0x000015e7
 118:	000015e7 	.word	0x000015e7
 11c:	000015e7 	.word	0x000015e7
 120:	000015e7 	.word	0x000015e7
 124:	000015e7 	.word	0x000015e7
 128:	000015e7 	.word	0x000015e7
 12c:	000015e7 	.word	0x000015e7
 130:	000015e7 	.word	0x000015e7
 134:	000015e7 	.word	0x000015e7
 138:	000015e7 	.word	0x000015e7
 13c:	000015e7 	.word	0x000015e7
 140:	000015e7 	.word	0x000015e7
 144:	000015e7 	.word	0x000015e7
 148:	000015e7 	.word	0x000015e7
 14c:	000015e7 	.word	0x000015e7
 150:	000015e7 	.word	0x000015e7
 154:	000015e7 	.word	0x000015e7
 158:	000015e7 	.word	0x000015e7
 15c:	000015e7 	.word	0x000015e7
 160:	000015e7 	.word	0x000015e7
 164:	000015e7 	.word	0x000015e7
 168:	000015e7 	.word	0x000015e7
 16c:	000015e7 	.word	0x000015e7
 170:	000015e7 	.word	0x000015e7
 174:	000015e7 	.word	0x000015e7
 178:	000015e7 	.word	0x000015e7
 17c:	000015e7 	.word	0x000015e7
 180:	000015e7 	.word	0x000015e7
 184:	000015e7 	.word	0x000015e7
 188:	000015e7 	.word	0x000015e7
 18c:	000015e7 	.word	0x000015e7
 190:	000015e7 	.word	0x000015e7
 194:	000015e7 	.word	0x000015e7
 198:	000015e7 	.word	0x000015e7
 19c:	000015e7 	.word	0x000015e7
 1a0:	000015e7 	.word	0x000015e7
 1a4:	000015e7 	.word	0x000015e7
 1a8:	000015e7 	.word	0x000015e7
 1ac:	000015e7 	.word	0x000015e7
 1b0:	000015e7 	.word	0x000015e7
 1b4:	000015e7 	.word	0x000015e7
 1b8:	000015e7 	.word	0x000015e7
 1bc:	000015e7 	.word	0x000015e7
 1c0:	000015e7 	.word	0x000015e7
 1c4:	000015e7 	.word	0x000015e7
 1c8:	000015e7 	.word	0x000015e7
 1cc:	000015e7 	.word	0x000015e7
 1d0:	000015e7 	.word	0x000015e7
 1d4:	000015e7 	.word	0x000015e7
 1d8:	000015e7 	.word	0x000015e7
 1dc:	000015e7 	.word	0x000015e7
 1e0:	000015e7 	.word	0x000015e7
 1e4:	000015e7 	.word	0x000015e7
 1e8:	000015e7 	.word	0x000015e7
 1ec:	000015e7 	.word	0x000015e7
 1f0:	000015e7 	.word	0x000015e7
 1f4:	000015e7 	.word	0x000015e7
 1f8:	000015e7 	.word	0x000015e7
 1fc:	000015e7 	.word	0x000015e7
 200:	000015e7 	.word	0x000015e7
 204:	000015e7 	.word	0x000015e7
 208:	000015e7 	.word	0x000015e7
 20c:	000015e7 	.word	0x000015e7
 210:	000015e7 	.word	0x000015e7
 214:	000015e7 	.word	0x000015e7
 218:	000015e7 	.word	0x000015e7
 21c:	000015e7 	.word	0x000015e7
 220:	000015e7 	.word	0x000015e7
 224:	000015e7 	.word	0x000015e7
 228:	000015e7 	.word	0x000015e7
 22c:	000015e7 	.word	0x000015e7
 230:	000015e7 	.word	0x000015e7
 234:	000015e7 	.word	0x000015e7
 238:	000015e7 	.word	0x000015e7
 23c:	000015e7 	.word	0x000015e7
 240:	000015e7 	.word	0x000015e7
 244:	000015e7 	.word	0x000015e7
 248:	000015e7 	.word	0x000015e7
 24c:	000015e7 	.word	0x000015e7
 250:	000015e7 	.word	0x000015e7
 254:	000015e7 	.word	0x000015e7
 258:	000015e7 	.word	0x000015e7
 25c:	000015e7 	.word	0x000015e7
 260:	000015e7 	.word	0x000015e7
 264:	000015e7 	.word	0x000015e7
 268:	000015e7 	.word	0x000015e7
 26c:	000015e7 	.word	0x000015e7
 270:	000015e7 	.word	0x000015e7
 274:	000015e7 	.word	0x000015e7
 278:	000015e7 	.word	0x000015e7
 27c:	000015e7 	.word	0x000015e7
 280:	000015e7 	.word	0x000015e7
 284:	000015e7 	.word	0x000015e7
 288:	000015e7 	.word	0x000015e7
 28c:	000015e7 	.word	0x000015e7
 290:	000015e7 	.word	0x000015e7
 294:	000015e7 	.word	0x000015e7
 298:	000015e7 	.word	0x000015e7
 29c:	000015e7 	.word	0x000015e7
 2a0:	000015e7 	.word	0x000015e7
 2a4:	000015e7 	.word	0x000015e7
 2a8:	000015e7 	.word	0x000015e7
 2ac:	000015e7 	.word	0x000015e7
 2b0:	000015e7 	.word	0x000015e7
 2b4:	000015e7 	.word	0x000015e7
 2b8:	000015e7 	.word	0x000015e7
 2bc:	000015e7 	.word	0x000015e7
 2c0:	000015e7 	.word	0x000015e7
 2c4:	000015e7 	.word	0x000015e7
 2c8:	000015e7 	.word	0x000015e7
 2cc:	000015e7 	.word	0x000015e7
 2d0:	000015e7 	.word	0x000015e7
 2d4:	000015e7 	.word	0x000015e7
 2d8:	000015e7 	.word	0x000015e7
 2dc:	000015e7 	.word	0x000015e7
 2e0:	000015e7 	.word	0x000015e7
 2e4:	000015e7 	.word	0x000015e7
 2e8:	000015e7 	.word	0x000015e7
 2ec:	000015e7 	.word	0x000015e7
 2f0:	000015e7 	.word	0x000015e7
 2f4:	000015e7 	.word	0x000015e7
 2f8:	000015e7 	.word	0x000015e7
 2fc:	000015e7 	.word	0x000015e7
 300:	000015e7 	.word	0x000015e7
 304:	000015e7 	.word	0x000015e7
 308:	000015e7 	.word	0x000015e7
 30c:	000015e7 	.word	0x000015e7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ffdf 	bl	1444 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f89e 	bl	15cc <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8f30 	.word	0x1fff8f30

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ffe9 	bl	1570 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b093      	sub	sp, #76	; 0x4c
    //local data.
    Sched_Task tasks[ n_tasks_h ];//Task buffer.
    Sched_Timer timers[ n_timers_h ];//Timer buffer.

    EcuM_Init();//MCU configuration.
     8b4:	f000 fea6 	bl	1604 <EcuM_Init>
    
    //Scheduler configuration.
    //Initializing scheduler.
    Sched_initScheduler( &Sche, n_tasks_c, n_tasks_h, TICK, tasks, n_timers_c, n_timers_h, timers );
     8b8:	ab04      	add	r3, sp, #16
     8ba:	9303      	str	r3, [sp, #12]
     8bc:	2302      	movs	r3, #2
     8be:	9302      	str	r3, [sp, #8]
     8c0:	2320      	movs	r3, #32
     8c2:	9301      	str	r3, [sp, #4]
     8c4:	ab0a      	add	r3, sp, #40	; 0x28
     8c6:	9300      	str	r3, [sp, #0]
     8c8:	230a      	movs	r3, #10
     8ca:	2202      	movs	r2, #2
     8cc:	2120      	movs	r1, #32
     8ce:	4817      	ldr	r0, [pc, #92]	; (92c <main+0x7c>)
     8d0:	f000 f8be 	bl	a50 <Sched_initScheduler>

    //Registering and activating tasks.
    Sched_registerTask( &Sche, Task1_init , Task1_callback, 100 );//Task 1.
     8d4:	2364      	movs	r3, #100	; 0x64
     8d6:	4a16      	ldr	r2, [pc, #88]	; (930 <main+0x80>)
     8d8:	4916      	ldr	r1, [pc, #88]	; (934 <main+0x84>)
     8da:	4814      	ldr	r0, [pc, #80]	; (92c <main+0x7c>)
     8dc:	f000 f9ae 	bl	c3c <Sched_registerTask>
    Sched_registerTask( &Sche, Task2_init, Task2_callback, 200 );//Task 2.
     8e0:	23c8      	movs	r3, #200	; 0xc8
     8e2:	4a15      	ldr	r2, [pc, #84]	; (938 <main+0x88>)
     8e4:	4915      	ldr	r1, [pc, #84]	; (93c <main+0x8c>)
     8e6:	4811      	ldr	r0, [pc, #68]	; (92c <main+0x7c>)
     8e8:	f000 f9a8 	bl	c3c <Sched_registerTask>
    Sched_startTask( &Sche, 1 );
     8ec:	2101      	movs	r1, #1
     8ee:	480f      	ldr	r0, [pc, #60]	; (92c <main+0x7c>)
     8f0:	f000 fa4e 	bl	d90 <Sched_startTask>
    Sched_startTask( &Sche, 2 );
     8f4:	2102      	movs	r1, #2
     8f6:	480d      	ldr	r0, [pc, #52]	; (92c <main+0x7c>)
     8f8:	f000 fa4a 	bl	d90 <Sched_startTask>

    //Registering and activating timers.
    Sched_registerTimer( &Sche, 300, Timer1_callback );//Timer 1.
     8fc:	4a10      	ldr	r2, [pc, #64]	; (940 <main+0x90>)
     8fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
     902:	480a      	ldr	r0, [pc, #40]	; (92c <main+0x7c>)
     904:	f000 fb36 	bl	f74 <Sched_registerTimer>
    Sched_registerTimer( &Sche, 400, Timer2_callback );//Timer 2.
     908:	4a0e      	ldr	r2, [pc, #56]	; (944 <main+0x94>)
     90a:	f44f 71c8 	mov.w	r1, #400	; 0x190
     90e:	4807      	ldr	r0, [pc, #28]	; (92c <main+0x7c>)
     910:	f000 fb30 	bl	f74 <Sched_registerTimer>
    Sched_startTimer( &Sche, 1 );
     914:	2101      	movs	r1, #1
     916:	4805      	ldr	r0, [pc, #20]	; (92c <main+0x7c>)
     918:	f000 fbde 	bl	10d8 <Sched_startTimer>
    Sched_startTimer( &Sche, 2 );
     91c:	2102      	movs	r1, #2
     91e:	4803      	ldr	r0, [pc, #12]	; (92c <main+0x7c>)
     920:	f000 fbda 	bl	10d8 <Sched_startTimer>

    while( 1u )
    {
        Sched_startScheduler( &Sche );//Starting scheduler.
     924:	4801      	ldr	r0, [pc, #4]	; (92c <main+0x7c>)
     926:	f000 fc64 	bl	11f2 <Sched_startScheduler>
     92a:	e7fb      	b.n	924 <main+0x74>
     92c:	1fff8b40 	.word	0x1fff8b40
     930:	00000987 	.word	0x00000987
     934:	0000097f 	.word	0x0000097f
     938:	00000993 	.word	0x00000993
     93c:	00000983 	.word	0x00000983
     940:	000009a1 	.word	0x000009a1
     944:	000009b9 	.word	0x000009b9

00000948 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     948:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     94a:	f3ef 8310 	mrs	r3, PRIMASK
     94e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     950:	4623      	mov	r3, r4
}
     952:	4618      	mov	r0, r3
     954:	f85d 4b04 	ldr.w	r4, [sp], #4
     958:	4770      	bx	lr

0000095a <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     95a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     95c:	f3ef 8310 	mrs	r3, PRIMASK
     960:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     962:	4623      	mov	r3, r4
}
     964:	4618      	mov	r0, r3
     966:	f85d 4b04 	ldr.w	r4, [sp], #4
     96a:	4770      	bx	lr

0000096c <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     96c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     96e:	f3ef 8310 	mrs	r3, PRIMASK
     972:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     974:	4623      	mov	r3, r4
}
     976:	4618      	mov	r0, r3
     978:	f85d 4b04 	ldr.w	r4, [sp], #4
     97c:	4770      	bx	lr

0000097e <Task1_init>:
/**
 * @brief This function initialices the task 1.
 */
void Task1_init( void ) {
    
}
     97e:	bf00      	nop
     980:	4770      	bx	lr

00000982 <Task2_init>:
/**
 * @brief This function initialices the task 2.
 */
void Task2_init( void ) {

}
     982:	bf00      	nop
     984:	4770      	bx	lr

00000986 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function toggles a led every 100ms.
 */
void Task1_callback( void ) {
     986:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     988:	2048      	movs	r0, #72	; 0x48
     98a:	f005 fd34 	bl	63f6 <Dio_FlipChannel>
}
     98e:	bf00      	nop
     990:	bd08      	pop	{r3, pc}

00000992 <Task2_callback>:
/**
 * @brief This is the callback function for the task 2.
 *
 * This function toggles a led every 200ms.
 */
void Task2_callback( void ) {
     992:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     994:	2049      	movs	r0, #73	; 0x49
     996:	f005 fd2e 	bl	63f6 <Dio_FlipChannel>
}
     99a:	bf00      	nop
     99c:	bd08      	pop	{r3, pc}
	...

000009a0 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 * This function toggles a led every 300ms.
 */
void Timer1_callback( void ) {
     9a0:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     9a2:	204a      	movs	r0, #74	; 0x4a
     9a4:	f005 fd27 	bl	63f6 <Dio_FlipChannel>
    Sched_startTimer( &Sche, 1 );//Restarting timer.
     9a8:	2101      	movs	r1, #1
     9aa:	4802      	ldr	r0, [pc, #8]	; (9b4 <Timer1_callback+0x14>)
     9ac:	f000 fb94 	bl	10d8 <Sched_startTimer>
}
     9b0:	bf00      	nop
     9b2:	bd08      	pop	{r3, pc}
     9b4:	1fff8b40 	.word	0x1fff8b40

000009b8 <Timer2_callback>:
/**
 * @brief This is the callback function for the timer 2. 
 *
 * This function toggles a led every 400ms.
 */
void Timer2_callback( void ) {
     9b8:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC11 );
     9ba:	204b      	movs	r0, #75	; 0x4b
     9bc:	f005 fd1b 	bl	63f6 <Dio_FlipChannel>
    Sched_startTimer( &Sche, 2 );//Restarting timer.
     9c0:	2102      	movs	r1, #2
     9c2:	4802      	ldr	r0, [pc, #8]	; (9cc <Timer2_callback+0x14>)
     9c4:	f000 fb88 	bl	10d8 <Sched_startTimer>
     9c8:	bf00      	nop
     9ca:	bd08      	pop	{r3, pc}
     9cc:	1fff8b40 	.word	0x1fff8b40

000009d0 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     9d0:	b082      	sub	sp, #8
     9d2:	9001      	str	r0, [sp, #4]
     9d4:	460b      	mov	r3, r1
     9d6:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     9da:	9b01      	ldr	r3, [sp, #4]
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9e2:	2101      	movs	r1, #1
     9e4:	fa01 f202 	lsl.w	r2, r1, r2
     9e8:	431a      	orrs	r2, r3
     9ea:	9b01      	ldr	r3, [sp, #4]
     9ec:	601a      	str	r2, [r3, #0]
}
     9ee:	bf00      	nop
     9f0:	b002      	add	sp, #8
     9f2:	4770      	bx	lr

000009f4 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     9f4:	b082      	sub	sp, #8
     9f6:	9001      	str	r0, [sp, #4]
     9f8:	460b      	mov	r3, r1
     9fa:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     9fe:	9b01      	ldr	r3, [sp, #4]
     a00:	681b      	ldr	r3, [r3, #0]
     a02:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a06:	2101      	movs	r1, #1
     a08:	fa01 f202 	lsl.w	r2, r1, r2
     a0c:	43d2      	mvns	r2, r2
     a0e:	401a      	ands	r2, r3
     a10:	9b01      	ldr	r3, [sp, #4]
     a12:	601a      	str	r2, [r3, #0]
}
     a14:	bf00      	nop
     a16:	b002      	add	sp, #8
     a18:	4770      	bx	lr

00000a1a <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     a1a:	b084      	sub	sp, #16
     a1c:	9001      	str	r0, [sp, #4]
     a1e:	460b      	mov	r3, r1
     a20:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     a24:	2300      	movs	r3, #0
     a26:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     a2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
     a2e:	2201      	movs	r2, #1
     a30:	fa02 f303 	lsl.w	r3, r2, r3
     a34:	461a      	mov	r2, r3
     a36:	9b01      	ldr	r3, [sp, #4]
     a38:	4013      	ands	r3, r2
     a3a:	2b00      	cmp	r3, #0
     a3c:	bf14      	ite	ne
     a3e:	2301      	movne	r3, #1
     a40:	2300      	moveq	r3, #0
     a42:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     a4a:	4618      	mov	r0, r3
     a4c:	b004      	add	sp, #16
     a4e:	4770      	bx	lr

00000a50 <Sched_initScheduler>:
 *
 * @retval status Status of the operation, successfull 1 or not 0.
 *
 * @note The number of timers or tasks to handle must be <= that the number of tasks or timers created.
 */
uint8_t Sched_initScheduler( Sched_Scheduler *scheduler, uint8_t n_tasks_c, uint8_t n_tasks_h, uint32_t tick, Sched_Task *buffer_ta, uint8_t n_timers_c, uint8_t n_timers_h, Sched_Timer *buffer_ti ) {
     a50:	b086      	sub	sp, #24
     a52:	9003      	str	r0, [sp, #12]
     a54:	9301      	str	r3, [sp, #4]
     a56:	460b      	mov	r3, r1
     a58:	f88d 300b 	strb.w	r3, [sp, #11]
     a5c:	4613      	mov	r3, r2
     a5e:	f88d 300a 	strb.w	r3, [sp, #10]
    //local data 
    uint8_t status = true;
     a62:	2301      	movs	r3, #1
     a64:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t i = 0;
     a68:	2300      	movs	r3, #0
     a6a:	f88d 3016 	strb.w	r3, [sp, #22]
    
    //Initializing.
    scheduler->tasksCount = n_tasks_c;
     a6e:	9b03      	ldr	r3, [sp, #12]
     a70:	f89d 200b 	ldrb.w	r2, [sp, #11]
     a74:	701a      	strb	r2, [r3, #0]
    scheduler->tick = tick;
     a76:	9b03      	ldr	r3, [sp, #12]
     a78:	9a01      	ldr	r2, [sp, #4]
     a7a:	605a      	str	r2, [r3, #4]
    scheduler->taskPtr = buffer_ta;
     a7c:	9b03      	ldr	r3, [sp, #12]
     a7e:	9a06      	ldr	r2, [sp, #24]
     a80:	609a      	str	r2, [r3, #8]

    //Verifying if number of tasks to handle is correct.
    if ( n_tasks_h <= scheduler->tasksCount ) {//valid number.
     a82:	9b03      	ldr	r3, [sp, #12]
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	f89d 200a 	ldrb.w	r2, [sp, #10]
     a8a:	429a      	cmp	r2, r3
     a8c:	d80d      	bhi.n	aaa <Sched_initScheduler+0x5a>
        scheduler->tasks = n_tasks_h;
     a8e:	9b03      	ldr	r3, [sp, #12]
     a90:	f89d 200a 	ldrb.w	r2, [sp, #10]
     a94:	705a      	strb	r2, [r3, #1]
        status  = status && true;
     a96:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a9a:	2b00      	cmp	r3, #0
     a9c:	bf14      	ite	ne
     a9e:	2301      	movne	r3, #1
     aa0:	2300      	moveq	r3, #0
     aa2:	b2db      	uxtb	r3, r3
     aa4:	f88d 3017 	strb.w	r3, [sp, #23]
     aa8:	e002      	b.n	ab0 <Sched_initScheduler+0x60>
    }

    else {//invalid number.
        status = status && false;
     aaa:	2300      	movs	r3, #0
     aac:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    
    scheduler->timersCount = n_timers_c;
     ab0:	9b03      	ldr	r3, [sp, #12]
     ab2:	f89d 201c 	ldrb.w	r2, [sp, #28]
     ab6:	741a      	strb	r2, [r3, #16]
    scheduler->timerPtr = buffer_ti;
     ab8:	9b03      	ldr	r3, [sp, #12]
     aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
     abc:	615a      	str	r2, [r3, #20]

    //Verifying if number of timers to handle is correct.
    if ( n_timers_h <= scheduler->timersCount ) {//valid number.
     abe:	9b03      	ldr	r3, [sp, #12]
     ac0:	7c1b      	ldrb	r3, [r3, #16]
     ac2:	f89d 2020 	ldrb.w	r2, [sp, #32]
     ac6:	429a      	cmp	r2, r3
     ac8:	d80d      	bhi.n	ae6 <Sched_initScheduler+0x96>
        scheduler->timers = n_timers_h;
     aca:	9b03      	ldr	r3, [sp, #12]
     acc:	f89d 2020 	ldrb.w	r2, [sp, #32]
     ad0:	745a      	strb	r2, [r3, #17]
        status  = status && true;
     ad2:	f89d 3017 	ldrb.w	r3, [sp, #23]
     ad6:	2b00      	cmp	r3, #0
     ad8:	bf14      	ite	ne
     ada:	2301      	movne	r3, #1
     adc:	2300      	moveq	r3, #0
     ade:	b2db      	uxtb	r3, r3
     ae0:	f88d 3017 	strb.w	r3, [sp, #23]
     ae4:	e002      	b.n	aec <Sched_initScheduler+0x9c>
    }

    else {//invalid number.
        status = status && false;
     ae6:	2300      	movs	r3, #0
     ae8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    
    //Initializing start flags for tasks and timers.
    scheduler->tasks_startFlags = 0;
     aec:	9b03      	ldr	r3, [sp, #12]
     aee:	2200      	movs	r2, #0
     af0:	60da      	str	r2, [r3, #12]
    scheduler->timers_startFlags = 0;
     af2:	9b03      	ldr	r3, [sp, #12]
     af4:	2200      	movs	r2, #0
     af6:	619a      	str	r2, [r3, #24]

    return status;
     af8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     afc:	4618      	mov	r0, r3
     afe:	b006      	add	sp, #24
     b00:	4770      	bx	lr

00000b02 <Sched_initBuffer>:
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note This function can be used when a new buffer is declared and register task
 * or register timer function has already been used.
 */
uint8_t Sched_initBuffer( Sched_Scheduler *scheduler, uint8_t buffer ) {
     b02:	b084      	sub	sp, #16
     b04:	9001      	str	r0, [sp, #4]
     b06:	460b      	mov	r3, r1
     b08:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    uint8_t status = 0;
     b0c:	2300      	movs	r3, #0
     b0e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t i = 0;
     b12:	2300      	movs	r3, #0
     b14:	f88d 300e 	strb.w	r3, [sp, #14]

    //Verifying which buffer to initialice.
    switch ( buffer ) {
     b18:	f89d 3003 	ldrb.w	r3, [sp, #3]
     b1c:	2b01      	cmp	r3, #1
     b1e:	d002      	beq.n	b26 <Sched_initBuffer+0x24>
     b20:	2b02      	cmp	r3, #2
     b22:	d01e      	beq.n	b62 <Sched_initBuffer+0x60>
     b24:	e038      	b.n	b98 <Sched_initBuffer+0x96>
        case 1://Timer buffer.
             for ( i = 0;  i < scheduler->timers; i++ ) {
     b26:	2300      	movs	r3, #0
     b28:	f88d 300e 	strb.w	r3, [sp, #14]
     b2c:	e00f      	b.n	b4e <Sched_initBuffer+0x4c>
                scheduler->timerPtr[i].callbackPtr = NULL;
     b2e:	9b01      	ldr	r3, [sp, #4]
     b30:	6959      	ldr	r1, [r3, #20]
     b32:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b36:	4613      	mov	r3, r2
     b38:	005b      	lsls	r3, r3, #1
     b3a:	4413      	add	r3, r2
     b3c:	009b      	lsls	r3, r3, #2
     b3e:	440b      	add	r3, r1
     b40:	2200      	movs	r2, #0
     b42:	609a      	str	r2, [r3, #8]
             for ( i = 0;  i < scheduler->timers; i++ ) {
     b44:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b48:	3301      	adds	r3, #1
     b4a:	f88d 300e 	strb.w	r3, [sp, #14]
     b4e:	9b01      	ldr	r3, [sp, #4]
     b50:	7c5b      	ldrb	r3, [r3, #17]
     b52:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b56:	429a      	cmp	r2, r3
     b58:	d3e9      	bcc.n	b2e <Sched_initBuffer+0x2c>
            }
            status = 1;       
     b5a:	2301      	movs	r3, #1
     b5c:	f88d 300f 	strb.w	r3, [sp, #15]
        break;
     b60:	e01e      	b.n	ba0 <Sched_initBuffer+0x9e>
        case 2://Task buffer. 
            for ( i = 0;  i < scheduler->tasks; i++ ) {
     b62:	2300      	movs	r3, #0
     b64:	f88d 300e 	strb.w	r3, [sp, #14]
     b68:	e00c      	b.n	b84 <Sched_initBuffer+0x82>
                scheduler->taskPtr[i].taskFunc = NULL;
     b6a:	9b01      	ldr	r3, [sp, #4]
     b6c:	689a      	ldr	r2, [r3, #8]
     b6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b72:	011b      	lsls	r3, r3, #4
     b74:	4413      	add	r3, r2
     b76:	2200      	movs	r2, #0
     b78:	60da      	str	r2, [r3, #12]
            for ( i = 0;  i < scheduler->tasks; i++ ) {
     b7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b7e:	3301      	adds	r3, #1
     b80:	f88d 300e 	strb.w	r3, [sp, #14]
     b84:	9b01      	ldr	r3, [sp, #4]
     b86:	785b      	ldrb	r3, [r3, #1]
     b88:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b8c:	429a      	cmp	r2, r3
     b8e:	d3ec      	bcc.n	b6a <Sched_initBuffer+0x68>
            }
            status = 1;
     b90:	2301      	movs	r3, #1
     b92:	f88d 300f 	strb.w	r3, [sp, #15]
        break;
     b96:	e003      	b.n	ba0 <Sched_initBuffer+0x9e>
        default: status = 0; break;
     b98:	2300      	movs	r3, #0
     b9a:	f88d 300f 	strb.w	r3, [sp, #15]
     b9e:	bf00      	nop
    }

    return status;
     ba0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     ba4:	4618      	mov	r0, r3
     ba6:	b004      	add	sp, #16
     ba8:	4770      	bx	lr
	...

00000bac <Sched_confirmTask_register>:
 * @param[in] task Task ID.
 *
 * @retval status Status of the operation, if operation == 0 successfull 1 or not 0, if operation == 1 ID not register 0
 * or ID already registered 1.
 */
uint8_t Sched_confirmTask_register( uint8_t operation, uint8_t task ) {
     bac:	b084      	sub	sp, #16
     bae:	4603      	mov	r3, r0
     bb0:	460a      	mov	r2, r1
     bb2:	f88d 3007 	strb.w	r3, [sp, #7]
     bb6:	4613      	mov	r3, r2
     bb8:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data
    static uint8_t registered_IDs [n_tasks_h];//array of registered task´s IDs.
    static uint8_t index = 0;
    uint8_t status = false;
     bbc:	2300      	movs	r3, #0
     bbe:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying operation to do
    switch ( operation ) {
     bc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d002      	beq.n	bd0 <Sched_confirmTask_register+0x24>
     bca:	2b01      	cmp	r3, #1
     bcc:	d011      	beq.n	bf2 <Sched_confirmTask_register+0x46>
     bce:	e021      	b.n	c14 <Sched_confirmTask_register+0x68>
        case 0://register ID 
            registered_IDs[index] = task;
     bd0:	4b18      	ldr	r3, [pc, #96]	; (c34 <Sched_confirmTask_register+0x88>)
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	4619      	mov	r1, r3
     bd6:	4a18      	ldr	r2, [pc, #96]	; (c38 <Sched_confirmTask_register+0x8c>)
     bd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
     bdc:	5453      	strb	r3, [r2, r1]
            index++;
     bde:	4b15      	ldr	r3, [pc, #84]	; (c34 <Sched_confirmTask_register+0x88>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	3301      	adds	r3, #1
     be4:	b2da      	uxtb	r2, r3
     be6:	4b13      	ldr	r3, [pc, #76]	; (c34 <Sched_confirmTask_register+0x88>)
     be8:	701a      	strb	r2, [r3, #0]
            status = true;
     bea:	2301      	movs	r3, #1
     bec:	f88d 300f 	strb.w	r3, [sp, #15]
        break;
     bf0:	e014      	b.n	c1c <Sched_confirmTask_register+0x70>
        case 1://verify ID
            //Verifying if the ID is already registered. 
            if ( task != registered_IDs[task - 1] ) {//ID not yet registered.
     bf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
     bf6:	3b01      	subs	r3, #1
     bf8:	4a0f      	ldr	r2, [pc, #60]	; (c38 <Sched_confirmTask_register+0x8c>)
     bfa:	5cd3      	ldrb	r3, [r2, r3]
     bfc:	f89d 2006 	ldrb.w	r2, [sp, #6]
     c00:	429a      	cmp	r2, r3
     c02:	d003      	beq.n	c0c <Sched_confirmTask_register+0x60>
                status = false;
     c04:	2300      	movs	r3, #0
     c06:	f88d 300f 	strb.w	r3, [sp, #15]
            }

            else {//ID already registered.
                status = true; 
            }          
        break;
     c0a:	e007      	b.n	c1c <Sched_confirmTask_register+0x70>
                status = true; 
     c0c:	2301      	movs	r3, #1
     c0e:	f88d 300f 	strb.w	r3, [sp, #15]
        break;
     c12:	e003      	b.n	c1c <Sched_confirmTask_register+0x70>
        default: status = false; break; 
     c14:	2300      	movs	r3, #0
     c16:	f88d 300f 	strb.w	r3, [sp, #15]
     c1a:	bf00      	nop
    }

    if ( index > n_tasks_h - 1 ) {
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <Sched_confirmTask_register+0x88>)
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2b01      	cmp	r3, #1
     c22:	d902      	bls.n	c2a <Sched_confirmTask_register+0x7e>
        index = 0;//reseting.
     c24:	4b03      	ldr	r3, [pc, #12]	; (c34 <Sched_confirmTask_register+0x88>)
     c26:	2200      	movs	r2, #0
     c28:	701a      	strb	r2, [r3, #0]
    } 
    
    return status;
     c2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c2e:	4618      	mov	r0, r3
     c30:	b004      	add	sp, #16
     c32:	4770      	bx	lr
     c34:	1fff8e1c 	.word	0x1fff8e1c
     c38:	1fff8e20 	.word	0x1fff8e20

00000c3c <Sched_registerTask>:
 * @retval task_id ID of the registered task, operation success ID == n, otherwise 0.
 *
 * @note The periodicity value must be >= tick and a multiple of tick.
 * @note The task must be a new task, repeated tasks are not allowed!
 */
uint8_t Sched_registerTask( Sched_Scheduler *scheduler, void (*initPtr)(void), void (*taskPtr)(void), uint32_t period ) {
     c3c:	b500      	push	{lr}
     c3e:	b087      	sub	sp, #28
     c40:	9003      	str	r0, [sp, #12]
     c42:	9102      	str	r1, [sp, #8]
     c44:	9201      	str	r2, [sp, #4]
     c46:	9300      	str	r3, [sp, #0]
    //local data 
    static uint8_t index = 0;//index for registering tasks in the buffer.
    static uint8_t first_call = true;
    uint8_t task_id  = 0;
     c48:	2300      	movs	r3, #0
     c4a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t i = 0;
     c4e:	2300      	movs	r3, #0
     c50:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t new_task = true;
     c54:	2301      	movs	r3, #1
     c56:	f88d 3015 	strb.w	r3, [sp, #21]

    //Verifying if periodicity value is valid according to tick value. Period >= tick, period must be multiple of tick.
    if ( ( period >= scheduler->tick ) && ( period % scheduler->tick == 0 ) ) {//valid periodicity.
     c5a:	9b03      	ldr	r3, [sp, #12]
     c5c:	685b      	ldr	r3, [r3, #4]
     c5e:	9a00      	ldr	r2, [sp, #0]
     c60:	429a      	cmp	r2, r3
     c62:	f0c0 8086 	bcc.w	d72 <Sched_registerTask+0x136>
     c66:	9b03      	ldr	r3, [sp, #12]
     c68:	685a      	ldr	r2, [r3, #4]
     c6a:	9b00      	ldr	r3, [sp, #0]
     c6c:	fbb3 f1f2 	udiv	r1, r3, r2
     c70:	fb01 f202 	mul.w	r2, r1, r2
     c74:	1a9b      	subs	r3, r3, r2
     c76:	2b00      	cmp	r3, #0
     c78:	d17b      	bne.n	d72 <Sched_registerTask+0x136>
        //If it´s the first call of the function all task function adresses initialice to 0.
        if ( first_call ) {
     c7a:	4b43      	ldr	r3, [pc, #268]	; (d88 <Sched_registerTask+0x14c>)
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	2b00      	cmp	r3, #0
     c80:	d006      	beq.n	c90 <Sched_registerTask+0x54>
            Sched_initBuffer( scheduler, 2 );
     c82:	2102      	movs	r1, #2
     c84:	9803      	ldr	r0, [sp, #12]
     c86:	f7ff ff3c 	bl	b02 <Sched_initBuffer>
            first_call = false;
     c8a:	4b3f      	ldr	r3, [pc, #252]	; (d88 <Sched_registerTask+0x14c>)
     c8c:	2200      	movs	r2, #0
     c8e:	701a      	strb	r2, [r3, #0]
        } 

        //Verifying if the task to register is new. 
        for ( i = 0; i < scheduler->tasks; i++ ) {
     c90:	2300      	movs	r3, #0
     c92:	f88d 3016 	strb.w	r3, [sp, #22]
     c96:	e01f      	b.n	cd8 <Sched_registerTask+0x9c>
            if ( taskPtr != scheduler->taskPtr[i].taskFunc ) {
     c98:	9b03      	ldr	r3, [sp, #12]
     c9a:	689a      	ldr	r2, [r3, #8]
     c9c:	f89d 3016 	ldrb.w	r3, [sp, #22]
     ca0:	011b      	lsls	r3, r3, #4
     ca2:	4413      	add	r3, r2
     ca4:	68db      	ldr	r3, [r3, #12]
     ca6:	9a01      	ldr	r2, [sp, #4]
     ca8:	429a      	cmp	r2, r3
     caa:	d009      	beq.n	cc0 <Sched_registerTask+0x84>
            new_task = new_task && true;
     cac:	f89d 3015 	ldrb.w	r3, [sp, #21]
     cb0:	2b00      	cmp	r3, #0
     cb2:	bf14      	ite	ne
     cb4:	2301      	movne	r3, #1
     cb6:	2300      	moveq	r3, #0
     cb8:	b2db      	uxtb	r3, r3
     cba:	f88d 3015 	strb.w	r3, [sp, #21]
     cbe:	e006      	b.n	cce <Sched_registerTask+0x92>
            }
            
            else {
              new_task = new_task && false;
     cc0:	2300      	movs	r3, #0
     cc2:	f88d 3015 	strb.w	r3, [sp, #21]
              task_id = 0;//task already registered.
     cc6:	2300      	movs	r3, #0
     cc8:	f88d 3017 	strb.w	r3, [sp, #23]
              break;  
     ccc:	e00a      	b.n	ce4 <Sched_registerTask+0xa8>
        for ( i = 0; i < scheduler->tasks; i++ ) {
     cce:	f89d 3016 	ldrb.w	r3, [sp, #22]
     cd2:	3301      	adds	r3, #1
     cd4:	f88d 3016 	strb.w	r3, [sp, #22]
     cd8:	9b03      	ldr	r3, [sp, #12]
     cda:	785b      	ldrb	r3, [r3, #1]
     cdc:	f89d 2016 	ldrb.w	r2, [sp, #22]
     ce0:	429a      	cmp	r2, r3
     ce2:	d3d9      	bcc.n	c98 <Sched_registerTask+0x5c>
            } 
        }
        
        if ( new_task ) {
     ce4:	f89d 3015 	ldrb.w	r3, [sp, #21]
     ce8:	2b00      	cmp	r3, #0
     cea:	d046      	beq.n	d7a <Sched_registerTask+0x13e>
            //Registering task.
            scheduler->taskPtr[index].period = period;
     cec:	9b03      	ldr	r3, [sp, #12]
     cee:	689a      	ldr	r2, [r3, #8]
     cf0:	4b26      	ldr	r3, [pc, #152]	; (d8c <Sched_registerTask+0x150>)
     cf2:	781b      	ldrb	r3, [r3, #0]
     cf4:	011b      	lsls	r3, r3, #4
     cf6:	4413      	add	r3, r2
     cf8:	9a00      	ldr	r2, [sp, #0]
     cfa:	601a      	str	r2, [r3, #0]
            scheduler->taskPtr[index].elapsed = 0;
     cfc:	9b03      	ldr	r3, [sp, #12]
     cfe:	689a      	ldr	r2, [r3, #8]
     d00:	4b22      	ldr	r3, [pc, #136]	; (d8c <Sched_registerTask+0x150>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	011b      	lsls	r3, r3, #4
     d06:	4413      	add	r3, r2
     d08:	2200      	movs	r2, #0
     d0a:	605a      	str	r2, [r3, #4]
            scheduler->taskPtr[index].initFunc = initPtr;
     d0c:	9b03      	ldr	r3, [sp, #12]
     d0e:	689a      	ldr	r2, [r3, #8]
     d10:	4b1e      	ldr	r3, [pc, #120]	; (d8c <Sched_registerTask+0x150>)
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	011b      	lsls	r3, r3, #4
     d16:	4413      	add	r3, r2
     d18:	9a02      	ldr	r2, [sp, #8]
     d1a:	609a      	str	r2, [r3, #8]
            scheduler->taskPtr[index].taskFunc = taskPtr;
     d1c:	9b03      	ldr	r3, [sp, #12]
     d1e:	689a      	ldr	r2, [r3, #8]
     d20:	4b1a      	ldr	r3, [pc, #104]	; (d8c <Sched_registerTask+0x150>)
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	011b      	lsls	r3, r3, #4
     d26:	4413      	add	r3, r2
     d28:	9a01      	ldr	r2, [sp, #4]
     d2a:	60da      	str	r2, [r3, #12]
            Bfx_ClrBit_u32u8( &scheduler->tasks_startFlags, index );//Flag disabled.
     d2c:	9b03      	ldr	r3, [sp, #12]
     d2e:	330c      	adds	r3, #12
     d30:	4a16      	ldr	r2, [pc, #88]	; (d8c <Sched_registerTask+0x150>)
     d32:	7812      	ldrb	r2, [r2, #0]
     d34:	4611      	mov	r1, r2
     d36:	4618      	mov	r0, r3
     d38:	f7ff fe5c 	bl	9f4 <Bfx_ClrBit_u32u8>
            task_id = index + 1;
     d3c:	4b13      	ldr	r3, [pc, #76]	; (d8c <Sched_registerTask+0x150>)
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	3301      	adds	r3, #1
     d42:	f88d 3017 	strb.w	r3, [sp, #23]
            Sched_confirmTask_register( 0, task_id );//Confirming task register.
     d46:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d4a:	4619      	mov	r1, r3
     d4c:	2000      	movs	r0, #0
     d4e:	f7ff ff2d 	bl	bac <Sched_confirmTask_register>

            index++;//index update.
     d52:	4b0e      	ldr	r3, [pc, #56]	; (d8c <Sched_registerTask+0x150>)
     d54:	781b      	ldrb	r3, [r3, #0]
     d56:	3301      	adds	r3, #1
     d58:	b2da      	uxtb	r2, r3
     d5a:	4b0c      	ldr	r3, [pc, #48]	; (d8c <Sched_registerTask+0x150>)
     d5c:	701a      	strb	r2, [r3, #0]

            if ( index > scheduler->tasks - 1 ) {
     d5e:	9b03      	ldr	r3, [sp, #12]
     d60:	785a      	ldrb	r2, [r3, #1]
     d62:	4b0a      	ldr	r3, [pc, #40]	; (d8c <Sched_registerTask+0x150>)
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	429a      	cmp	r2, r3
     d68:	d807      	bhi.n	d7a <Sched_registerTask+0x13e>
                index = 0;//reseting.
     d6a:	4b08      	ldr	r3, [pc, #32]	; (d8c <Sched_registerTask+0x150>)
     d6c:	2200      	movs	r2, #0
     d6e:	701a      	strb	r2, [r3, #0]
        if ( new_task ) {
     d70:	e003      	b.n	d7a <Sched_registerTask+0x13e>
            }   
        }
    }

    else {
        task_id = 0; //invalid periodicity.
     d72:	2300      	movs	r3, #0
     d74:	f88d 3017 	strb.w	r3, [sp, #23]
     d78:	e000      	b.n	d7c <Sched_registerTask+0x140>
        if ( new_task ) {
     d7a:	bf00      	nop
    }

    return task_id;
     d7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     d80:	4618      	mov	r0, r3
     d82:	b007      	add	sp, #28
     d84:	f85d fb04 	ldr.w	pc, [sp], #4
     d88:	1fff8b38 	.word	0x1fff8b38
     d8c:	1fff8e22 	.word	0x1fff8e22

00000d90 <Sched_startTask>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The task ID must be valid and also the task must be registered.
 */
uint8_t Sched_startTask( Sched_Scheduler *scheduler, uint8_t task ) {
     d90:	b500      	push	{lr}
     d92:	b085      	sub	sp, #20
     d94:	9001      	str	r0, [sp, #4]
     d96:	460b      	mov	r3, r1
     d98:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data
    uint8_t status = false;
     d9c:	2300      	movs	r3, #0
     d9e:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the task ID is valid.
    if ( ( task != 0 ) && ( task <= scheduler->tasks ) ) {//valid ID
     da2:	f89d 3003 	ldrb.w	r3, [sp, #3]
     da6:	2b00      	cmp	r3, #0
     da8:	d021      	beq.n	dee <Sched_startTask+0x5e>
     daa:	9b01      	ldr	r3, [sp, #4]
     dac:	785b      	ldrb	r3, [r3, #1]
     dae:	f89d 2003 	ldrb.w	r2, [sp, #3]
     db2:	429a      	cmp	r2, r3
     db4:	d81b      	bhi.n	dee <Sched_startTask+0x5e>
        //Verifying if the task ID has been registered.
        if ( Sched_confirmTask_register( 1, task ) ) {//task ID already registered.
     db6:	f89d 3003 	ldrb.w	r3, [sp, #3]
     dba:	4619      	mov	r1, r3
     dbc:	2001      	movs	r0, #1
     dbe:	f7ff fef5 	bl	bac <Sched_confirmTask_register>
     dc2:	4603      	mov	r3, r0
     dc4:	2b00      	cmp	r3, #0
     dc6:	d00e      	beq.n	de6 <Sched_startTask+0x56>
            Bfx_SetBit_u32u8( &scheduler->tasks_startFlags, task - 1 );
     dc8:	9b01      	ldr	r3, [sp, #4]
     dca:	f103 020c 	add.w	r2, r3, #12
     dce:	f89d 3003 	ldrb.w	r3, [sp, #3]
     dd2:	3b01      	subs	r3, #1
     dd4:	b2db      	uxtb	r3, r3
     dd6:	4619      	mov	r1, r3
     dd8:	4610      	mov	r0, r2
     dda:	f7ff fdf9 	bl	9d0 <Bfx_SetBit_u32u8>
            status = true;
     dde:	2301      	movs	r3, #1
     de0:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( Sched_confirmTask_register( 1, task ) ) {//task ID already registered.
     de4:	e006      	b.n	df4 <Sched_startTask+0x64>
        }

        else {
            status = false;//Task ID is not registered.
     de6:	2300      	movs	r3, #0
     de8:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( Sched_confirmTask_register( 1, task ) ) {//task ID already registered.
     dec:	e002      	b.n	df4 <Sched_startTask+0x64>
        }
    }

    else {
        status = false;//invalid ID.
     dee:	2300      	movs	r3, #0
     df0:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    
    return status;
     df4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     df8:	4618      	mov	r0, r3
     dfa:	b005      	add	sp, #20
     dfc:	f85d fb04 	ldr.w	pc, [sp], #4

00000e00 <Sched_verifyTask_firstexe>:
 * @param[in] scheduler Ptr to control structure instance, it allows the obtainment of the task function memory address.
 * @param[in] task ID of the task to verify.
 *
 * @retval status If it´s the first time the task is going to be executed it returns true, else returns false.
 */
uint8_t Sched_verifyTask_firstexe( Sched_Scheduler *scheduler, uint8_t task ) {
     e00:	b430      	push	{r4, r5}
     e02:	b084      	sub	sp, #16
     e04:	9001      	str	r0, [sp, #4]
     e06:	f88d 1003 	strb.w	r1, [sp, #3]
    //local data
    static uint64_t tasks_func_add[n_tasks_c];//array of memory addresses of the tasks functions that have been executed.
    static uint8_t index = 0;
    uint8_t i  = 0;
     e0a:	2100      	movs	r1, #0
     e0c:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t status = true;
     e10:	2101      	movs	r1, #1
     e12:	f88d 100e 	strb.w	r1, [sp, #14]

    //Verifying if task to execute is new
    for ( i = 0; i < index + 1; i++ ) {
     e16:	2100      	movs	r1, #0
     e18:	f88d 100f 	strb.w	r1, [sp, #15]
     e1c:	e02b      	b.n	e76 <Sched_verifyTask_firstexe+0x76>
        if ( (unsigned long)scheduler->taskPtr[task - 1].taskFunc != tasks_func_add[i] ) {
     e1e:	9901      	ldr	r1, [sp, #4]
     e20:	6888      	ldr	r0, [r1, #8]
     e22:	f89d 1003 	ldrb.w	r1, [sp, #3]
     e26:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
     e2a:	3901      	subs	r1, #1
     e2c:	0109      	lsls	r1, r1, #4
     e2e:	4401      	add	r1, r0
     e30:	68c9      	ldr	r1, [r1, #12]
     e32:	4608      	mov	r0, r1
     e34:	2100      	movs	r1, #0
     e36:	4602      	mov	r2, r0
     e38:	460b      	mov	r3, r1
     e3a:	f89d 100f 	ldrb.w	r1, [sp, #15]
     e3e:	4827      	ldr	r0, [pc, #156]	; (edc <Sched_verifyTask_firstexe+0xdc>)
     e40:	00c9      	lsls	r1, r1, #3
     e42:	4401      	add	r1, r0
     e44:	e9d1 0100 	ldrd	r0, r1, [r1]
     e48:	428b      	cmp	r3, r1
     e4a:	bf08      	it	eq
     e4c:	4282      	cmpeq	r2, r0
     e4e:	d009      	beq.n	e64 <Sched_verifyTask_firstexe+0x64>
            status = status && true;//task has never been executed.
     e50:	f89d 100e 	ldrb.w	r1, [sp, #14]
     e54:	2900      	cmp	r1, #0
     e56:	bf14      	ite	ne
     e58:	2101      	movne	r1, #1
     e5a:	2100      	moveq	r1, #0
     e5c:	b2c9      	uxtb	r1, r1
     e5e:	f88d 100e 	strb.w	r1, [sp, #14]
     e62:	e003      	b.n	e6c <Sched_verifyTask_firstexe+0x6c>
        }

        else {//task has already been executed.
        status = status && false;
     e64:	2300      	movs	r3, #0
     e66:	f88d 300e 	strb.w	r3, [sp, #14]
        break;
     e6a:	e00a      	b.n	e82 <Sched_verifyTask_firstexe+0x82>
    for ( i = 0; i < index + 1; i++ ) {
     e6c:	f89d 100f 	ldrb.w	r1, [sp, #15]
     e70:	3101      	adds	r1, #1
     e72:	f88d 100f 	strb.w	r1, [sp, #15]
     e76:	491a      	ldr	r1, [pc, #104]	; (ee0 <Sched_verifyTask_firstexe+0xe0>)
     e78:	7809      	ldrb	r1, [r1, #0]
     e7a:	f89d 000f 	ldrb.w	r0, [sp, #15]
     e7e:	4288      	cmp	r0, r1
     e80:	d9cd      	bls.n	e1e <Sched_verifyTask_firstexe+0x1e>
        }
    }

    //registering task function address.
    if ( status ) {
     e82:	f89d 300e 	ldrb.w	r3, [sp, #14]
     e86:	2b00      	cmp	r3, #0
     e88:	d021      	beq.n	ece <Sched_verifyTask_firstexe+0xce>
        tasks_func_add[index] = (unsigned long)scheduler->taskPtr[task - 1].taskFunc;
     e8a:	9b01      	ldr	r3, [sp, #4]
     e8c:	689a      	ldr	r2, [r3, #8]
     e8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e92:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
     e96:	3b01      	subs	r3, #1
     e98:	011b      	lsls	r3, r3, #4
     e9a:	4413      	add	r3, r2
     e9c:	68db      	ldr	r3, [r3, #12]
     e9e:	4619      	mov	r1, r3
     ea0:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <Sched_verifyTask_firstexe+0xe0>)
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	2200      	movs	r2, #0
     ea6:	460c      	mov	r4, r1
     ea8:	4615      	mov	r5, r2
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <Sched_verifyTask_firstexe+0xdc>)
     eac:	00db      	lsls	r3, r3, #3
     eae:	4413      	add	r3, r2
     eb0:	e9c3 4500 	strd	r4, r5, [r3]
        index++;
     eb4:	4b0a      	ldr	r3, [pc, #40]	; (ee0 <Sched_verifyTask_firstexe+0xe0>)
     eb6:	781b      	ldrb	r3, [r3, #0]
     eb8:	3301      	adds	r3, #1
     eba:	b2da      	uxtb	r2, r3
     ebc:	4b08      	ldr	r3, [pc, #32]	; (ee0 <Sched_verifyTask_firstexe+0xe0>)
     ebe:	701a      	strb	r2, [r3, #0]
        if (index > n_tasks_c - 1) {
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <Sched_verifyTask_firstexe+0xe0>)
     ec2:	781b      	ldrb	r3, [r3, #0]
     ec4:	2b1f      	cmp	r3, #31
     ec6:	d902      	bls.n	ece <Sched_verifyTask_firstexe+0xce>
            index = n_tasks_c - 1;
     ec8:	4b05      	ldr	r3, [pc, #20]	; (ee0 <Sched_verifyTask_firstexe+0xe0>)
     eca:	221f      	movs	r2, #31
     ecc:	701a      	strb	r2, [r3, #0]
        }
    }

    return status;
     ece:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     ed2:	4618      	mov	r0, r3
     ed4:	b004      	add	sp, #16
     ed6:	bc30      	pop	{r4, r5}
     ed8:	4770      	bx	lr
     eda:	bf00      	nop
     edc:	1fff8e28 	.word	0x1fff8e28
     ee0:	1fff8f28 	.word	0x1fff8f28

00000ee4 <Sched_confirmTimer_register>:
 * @param[in] timer Timer ID.
 *
 * @retval status Status of the operation, if operation == 0 successfull 1 or not 0, if operation == 1 ID not register 0
 * or ID already registered 1.
 */
uint8_t Sched_confirmTimer_register( uint8_t operation, uint8_t timer ) {
     ee4:	b084      	sub	sp, #16
     ee6:	4603      	mov	r3, r0
     ee8:	460a      	mov	r2, r1
     eea:	f88d 3007 	strb.w	r3, [sp, #7]
     eee:	4613      	mov	r3, r2
     ef0:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data
    static uint8_t registered_IDs [n_timers_h];//array of registered timers´s IDs.
    static uint8_t index = 0;
    uint8_t status = false;
     ef4:	2300      	movs	r3, #0
     ef6:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying operation to do
    switch ( operation ) {
     efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     efe:	2b00      	cmp	r3, #0
     f00:	d002      	beq.n	f08 <Sched_confirmTimer_register+0x24>
     f02:	2b01      	cmp	r3, #1
     f04:	d011      	beq.n	f2a <Sched_confirmTimer_register+0x46>
     f06:	e021      	b.n	f4c <Sched_confirmTimer_register+0x68>
        case 0://register ID 
            registered_IDs[index] = timer;
     f08:	4b18      	ldr	r3, [pc, #96]	; (f6c <Sched_confirmTimer_register+0x88>)
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	4619      	mov	r1, r3
     f0e:	4a18      	ldr	r2, [pc, #96]	; (f70 <Sched_confirmTimer_register+0x8c>)
     f10:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f14:	5453      	strb	r3, [r2, r1]
            index++;
     f16:	4b15      	ldr	r3, [pc, #84]	; (f6c <Sched_confirmTimer_register+0x88>)
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	3301      	adds	r3, #1
     f1c:	b2da      	uxtb	r2, r3
     f1e:	4b13      	ldr	r3, [pc, #76]	; (f6c <Sched_confirmTimer_register+0x88>)
     f20:	701a      	strb	r2, [r3, #0]
            status = true;
     f22:	2301      	movs	r3, #1
     f24:	f88d 300f 	strb.w	r3, [sp, #15]
        break;
     f28:	e014      	b.n	f54 <Sched_confirmTimer_register+0x70>
        case 1://verify ID
            //Verifying if the ID is already registered. 
            if ( timer != registered_IDs[timer - 1] ) {//ID not yet registered.
     f2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f2e:	3b01      	subs	r3, #1
     f30:	4a0f      	ldr	r2, [pc, #60]	; (f70 <Sched_confirmTimer_register+0x8c>)
     f32:	5cd3      	ldrb	r3, [r2, r3]
     f34:	f89d 2006 	ldrb.w	r2, [sp, #6]
     f38:	429a      	cmp	r2, r3
     f3a:	d003      	beq.n	f44 <Sched_confirmTimer_register+0x60>
                status = false;
     f3c:	2300      	movs	r3, #0
     f3e:	f88d 300f 	strb.w	r3, [sp, #15]
            }

            else {//ID already registered.
                status = true; 
            }          
        break;
     f42:	e007      	b.n	f54 <Sched_confirmTimer_register+0x70>
                status = true; 
     f44:	2301      	movs	r3, #1
     f46:	f88d 300f 	strb.w	r3, [sp, #15]
        break;
     f4a:	e003      	b.n	f54 <Sched_confirmTimer_register+0x70>
        default: status = false; break; //invalid operation 
     f4c:	2300      	movs	r3, #0
     f4e:	f88d 300f 	strb.w	r3, [sp, #15]
     f52:	bf00      	nop
    }

    if ( index > n_timers_h - 1 ) {
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <Sched_confirmTimer_register+0x88>)
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	2b01      	cmp	r3, #1
     f5a:	d902      	bls.n	f62 <Sched_confirmTimer_register+0x7e>
        index = 0;//reseting.
     f5c:	4b03      	ldr	r3, [pc, #12]	; (f6c <Sched_confirmTimer_register+0x88>)
     f5e:	2200      	movs	r2, #0
     f60:	701a      	strb	r2, [r3, #0]
    } 
    
    return status;
     f62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f66:	4618      	mov	r0, r3
     f68:	b004      	add	sp, #16
     f6a:	4770      	bx	lr
     f6c:	1fff8f29 	.word	0x1fff8f29
     f70:	1fff8f2c 	.word	0x1fff8f2c

00000f74 <Sched_registerTimer>:
 * @retval timer_id ID of the registered timer, operation success ID == n, otherwise 0.
 *
 * @note The timeout value must be >= tick and a multiple of tick.
 * @note The timer must be a new timer, repeated timers are not allowed!
 */
uint8_t Sched_registerTimer( Sched_Scheduler *scheduler, uint32_t timeout, void (*callbackPtr)(void) ) {
     f74:	b500      	push	{lr}
     f76:	b087      	sub	sp, #28
     f78:	9003      	str	r0, [sp, #12]
     f7a:	9102      	str	r1, [sp, #8]
     f7c:	9201      	str	r2, [sp, #4]
    //local data 
    static uint8_t index = 0;//index for registering timers in the buffer.
    static uint8_t first_call = true;
    uint8_t timer_id  = 0;
     f7e:	2300      	movs	r3, #0
     f80:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t i = 0;
     f84:	2300      	movs	r3, #0
     f86:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t new_timer = true;
     f8a:	2301      	movs	r3, #1
     f8c:	f88d 3015 	strb.w	r3, [sp, #21]

    //Verifying if timeout value is valid according to tick value. timeout >= tick, timeout must be multiple of tick.
    if ( ( timeout >= scheduler->tick ) && ( timeout % scheduler->tick == 0 ) ) {//valid timeout.
     f90:	9b03      	ldr	r3, [sp, #12]
     f92:	685b      	ldr	r3, [r3, #4]
     f94:	9a02      	ldr	r2, [sp, #8]
     f96:	429a      	cmp	r2, r3
     f98:	f0c0 808e 	bcc.w	10b8 <Sched_registerTimer+0x144>
     f9c:	9b03      	ldr	r3, [sp, #12]
     f9e:	685a      	ldr	r2, [r3, #4]
     fa0:	9b02      	ldr	r3, [sp, #8]
     fa2:	fbb3 f1f2 	udiv	r1, r3, r2
     fa6:	fb01 f202 	mul.w	r2, r1, r2
     faa:	1a9b      	subs	r3, r3, r2
     fac:	2b00      	cmp	r3, #0
     fae:	f040 8083 	bne.w	10b8 <Sched_registerTimer+0x144>
        //If it´s the first call of the function all timers callback function adresses initialice to 0.
        if ( first_call ) {
     fb2:	4b47      	ldr	r3, [pc, #284]	; (10d0 <Sched_registerTimer+0x15c>)
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d006      	beq.n	fc8 <Sched_registerTimer+0x54>
            Sched_initBuffer( scheduler, 1 );
     fba:	2101      	movs	r1, #1
     fbc:	9803      	ldr	r0, [sp, #12]
     fbe:	f7ff fda0 	bl	b02 <Sched_initBuffer>
            first_call = false;
     fc2:	4b43      	ldr	r3, [pc, #268]	; (10d0 <Sched_registerTimer+0x15c>)
     fc4:	2200      	movs	r2, #0
     fc6:	701a      	strb	r2, [r3, #0]
        } 

        //Verifying if the timer to register is new. 
        for ( i = 0; i < scheduler->timers; i++ ) {
     fc8:	2300      	movs	r3, #0
     fca:	f88d 3016 	strb.w	r3, [sp, #22]
     fce:	e022      	b.n	1016 <Sched_registerTimer+0xa2>
            if ( callbackPtr != scheduler->timerPtr[i].callbackPtr ) {
     fd0:	9b03      	ldr	r3, [sp, #12]
     fd2:	6959      	ldr	r1, [r3, #20]
     fd4:	f89d 2016 	ldrb.w	r2, [sp, #22]
     fd8:	4613      	mov	r3, r2
     fda:	005b      	lsls	r3, r3, #1
     fdc:	4413      	add	r3, r2
     fde:	009b      	lsls	r3, r3, #2
     fe0:	440b      	add	r3, r1
     fe2:	689b      	ldr	r3, [r3, #8]
     fe4:	9a01      	ldr	r2, [sp, #4]
     fe6:	429a      	cmp	r2, r3
     fe8:	d009      	beq.n	ffe <Sched_registerTimer+0x8a>
            new_timer = new_timer && true;
     fea:	f89d 3015 	ldrb.w	r3, [sp, #21]
     fee:	2b00      	cmp	r3, #0
     ff0:	bf14      	ite	ne
     ff2:	2301      	movne	r3, #1
     ff4:	2300      	moveq	r3, #0
     ff6:	b2db      	uxtb	r3, r3
     ff8:	f88d 3015 	strb.w	r3, [sp, #21]
     ffc:	e006      	b.n	100c <Sched_registerTimer+0x98>
            }
            
            else {
              new_timer = new_timer && false;
     ffe:	2300      	movs	r3, #0
    1000:	f88d 3015 	strb.w	r3, [sp, #21]
              timer_id = 0;//timer already registered.
    1004:	2300      	movs	r3, #0
    1006:	f88d 3017 	strb.w	r3, [sp, #23]
              break;  
    100a:	e00a      	b.n	1022 <Sched_registerTimer+0xae>
        for ( i = 0; i < scheduler->timers; i++ ) {
    100c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    1010:	3301      	adds	r3, #1
    1012:	f88d 3016 	strb.w	r3, [sp, #22]
    1016:	9b03      	ldr	r3, [sp, #12]
    1018:	7c5b      	ldrb	r3, [r3, #17]
    101a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    101e:	429a      	cmp	r2, r3
    1020:	d3d6      	bcc.n	fd0 <Sched_registerTimer+0x5c>
            } 
        }
        
        if ( new_timer ) {
    1022:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1026:	2b00      	cmp	r3, #0
    1028:	d04a      	beq.n	10c0 <Sched_registerTimer+0x14c>
            //Registering timer.
            scheduler->timerPtr[index].timeout = timeout;
    102a:	9b03      	ldr	r3, [sp, #12]
    102c:	695a      	ldr	r2, [r3, #20]
    102e:	4b29      	ldr	r3, [pc, #164]	; (10d4 <Sched_registerTimer+0x160>)
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	4619      	mov	r1, r3
    1034:	460b      	mov	r3, r1
    1036:	005b      	lsls	r3, r3, #1
    1038:	440b      	add	r3, r1
    103a:	009b      	lsls	r3, r3, #2
    103c:	4413      	add	r3, r2
    103e:	9a02      	ldr	r2, [sp, #8]
    1040:	601a      	str	r2, [r3, #0]
            scheduler->timerPtr[index].count = timeout;
    1042:	9b03      	ldr	r3, [sp, #12]
    1044:	695a      	ldr	r2, [r3, #20]
    1046:	4b23      	ldr	r3, [pc, #140]	; (10d4 <Sched_registerTimer+0x160>)
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	4619      	mov	r1, r3
    104c:	460b      	mov	r3, r1
    104e:	005b      	lsls	r3, r3, #1
    1050:	440b      	add	r3, r1
    1052:	009b      	lsls	r3, r3, #2
    1054:	4413      	add	r3, r2
    1056:	9a02      	ldr	r2, [sp, #8]
    1058:	605a      	str	r2, [r3, #4]
            scheduler->timerPtr[index].callbackPtr = callbackPtr;
    105a:	9b03      	ldr	r3, [sp, #12]
    105c:	695a      	ldr	r2, [r3, #20]
    105e:	4b1d      	ldr	r3, [pc, #116]	; (10d4 <Sched_registerTimer+0x160>)
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	4619      	mov	r1, r3
    1064:	460b      	mov	r3, r1
    1066:	005b      	lsls	r3, r3, #1
    1068:	440b      	add	r3, r1
    106a:	009b      	lsls	r3, r3, #2
    106c:	4413      	add	r3, r2
    106e:	9a01      	ldr	r2, [sp, #4]
    1070:	609a      	str	r2, [r3, #8]
            Bfx_ClrBit_u32u8( &scheduler->timers_startFlags, index );//Flag disabled.
    1072:	9b03      	ldr	r3, [sp, #12]
    1074:	3318      	adds	r3, #24
    1076:	4a17      	ldr	r2, [pc, #92]	; (10d4 <Sched_registerTimer+0x160>)
    1078:	7812      	ldrb	r2, [r2, #0]
    107a:	4611      	mov	r1, r2
    107c:	4618      	mov	r0, r3
    107e:	f7ff fcb9 	bl	9f4 <Bfx_ClrBit_u32u8>
            timer_id = index + 1;
    1082:	4b14      	ldr	r3, [pc, #80]	; (10d4 <Sched_registerTimer+0x160>)
    1084:	781b      	ldrb	r3, [r3, #0]
    1086:	3301      	adds	r3, #1
    1088:	f88d 3017 	strb.w	r3, [sp, #23]
            Sched_confirmTimer_register( 0, timer_id );//Confirming timer register.
    108c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1090:	4619      	mov	r1, r3
    1092:	2000      	movs	r0, #0
    1094:	f7ff ff26 	bl	ee4 <Sched_confirmTimer_register>

            index++;//index update.
    1098:	4b0e      	ldr	r3, [pc, #56]	; (10d4 <Sched_registerTimer+0x160>)
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	3301      	adds	r3, #1
    109e:	b2da      	uxtb	r2, r3
    10a0:	4b0c      	ldr	r3, [pc, #48]	; (10d4 <Sched_registerTimer+0x160>)
    10a2:	701a      	strb	r2, [r3, #0]

            if ( index > scheduler->timers - 1 ) {
    10a4:	9b03      	ldr	r3, [sp, #12]
    10a6:	7c5a      	ldrb	r2, [r3, #17]
    10a8:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <Sched_registerTimer+0x160>)
    10aa:	781b      	ldrb	r3, [r3, #0]
    10ac:	429a      	cmp	r2, r3
    10ae:	d807      	bhi.n	10c0 <Sched_registerTimer+0x14c>
                index = 0;//reseting.
    10b0:	4b08      	ldr	r3, [pc, #32]	; (10d4 <Sched_registerTimer+0x160>)
    10b2:	2200      	movs	r2, #0
    10b4:	701a      	strb	r2, [r3, #0]
        if ( new_timer ) {
    10b6:	e003      	b.n	10c0 <Sched_registerTimer+0x14c>
            }   
        }
    }

    else {
        timer_id = 0; //invalid timeout.
    10b8:	2300      	movs	r3, #0
    10ba:	f88d 3017 	strb.w	r3, [sp, #23]
    10be:	e000      	b.n	10c2 <Sched_registerTimer+0x14e>
        if ( new_timer ) {
    10c0:	bf00      	nop
    }

    return timer_id; 
    10c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    10c6:	4618      	mov	r0, r3
    10c8:	b007      	add	sp, #28
    10ca:	f85d fb04 	ldr.w	pc, [sp], #4
    10ce:	bf00      	nop
    10d0:	1fff8b39 	.word	0x1fff8b39
    10d4:	1fff8f2e 	.word	0x1fff8f2e

000010d8 <Sched_startTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid and also the timer must be registered.
 */
uint8_t Sched_startTimer( Sched_Scheduler *scheduler, uint8_t timer ) {
    10d8:	b500      	push	{lr}
    10da:	b085      	sub	sp, #20
    10dc:	9001      	str	r0, [sp, #4]
    10de:	460b      	mov	r3, r1
    10e0:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data
    uint8_t status = false;
    10e4:	2300      	movs	r3, #0
    10e6:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( timer != 0 ) && ( timer <= scheduler->timers ) ) {//valid ID
    10ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d044      	beq.n	117c <Sched_startTimer+0xa4>
    10f2:	9b01      	ldr	r3, [sp, #4]
    10f4:	7c5b      	ldrb	r3, [r3, #17]
    10f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    10fa:	429a      	cmp	r2, r3
    10fc:	d83e      	bhi.n	117c <Sched_startTimer+0xa4>
        //Verifying if the timer ID has been registered.
        if ( Sched_confirmTimer_register( 1, timer ) ) {//timer ID already registered.
    10fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1102:	4619      	mov	r1, r3
    1104:	2001      	movs	r0, #1
    1106:	f7ff feed 	bl	ee4 <Sched_confirmTimer_register>
    110a:	4603      	mov	r3, r0
    110c:	2b00      	cmp	r3, #0
    110e:	d031      	beq.n	1174 <Sched_startTimer+0x9c>
            Bfx_SetBit_u32u8( &scheduler->timers_startFlags, timer - 1 );
    1110:	9b01      	ldr	r3, [sp, #4]
    1112:	f103 0218 	add.w	r2, r3, #24
    1116:	f89d 3003 	ldrb.w	r3, [sp, #3]
    111a:	3b01      	subs	r3, #1
    111c:	b2db      	uxtb	r3, r3
    111e:	4619      	mov	r1, r3
    1120:	4610      	mov	r0, r2
    1122:	f7ff fc55 	bl	9d0 <Bfx_SetBit_u32u8>

            //Verifying if timer has reach 0.
            if ( scheduler->timerPtr[timer - 1].count == 0 ) {
    1126:	9b01      	ldr	r3, [sp, #4]
    1128:	6959      	ldr	r1, [r3, #20]
    112a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    112e:	4613      	mov	r3, r2
    1130:	005b      	lsls	r3, r3, #1
    1132:	4413      	add	r3, r2
    1134:	009b      	lsls	r3, r3, #2
    1136:	3b0c      	subs	r3, #12
    1138:	440b      	add	r3, r1
    113a:	685b      	ldr	r3, [r3, #4]
    113c:	2b00      	cmp	r3, #0
    113e:	d115      	bne.n	116c <Sched_startTimer+0x94>
                scheduler->timerPtr[timer - 1].count = scheduler->timerPtr[timer - 1].timeout;//restarting timer.
    1140:	9b01      	ldr	r3, [sp, #4]
    1142:	6959      	ldr	r1, [r3, #20]
    1144:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1148:	4613      	mov	r3, r2
    114a:	005b      	lsls	r3, r3, #1
    114c:	4413      	add	r3, r2
    114e:	009b      	lsls	r3, r3, #2
    1150:	3b0c      	subs	r3, #12
    1152:	4419      	add	r1, r3
    1154:	9b01      	ldr	r3, [sp, #4]
    1156:	6958      	ldr	r0, [r3, #20]
    1158:	f89d 2003 	ldrb.w	r2, [sp, #3]
    115c:	4613      	mov	r3, r2
    115e:	005b      	lsls	r3, r3, #1
    1160:	4413      	add	r3, r2
    1162:	009b      	lsls	r3, r3, #2
    1164:	3b0c      	subs	r3, #12
    1166:	4403      	add	r3, r0
    1168:	680a      	ldr	r2, [r1, #0]
    116a:	605a      	str	r2, [r3, #4]
            }

            status = true;
    116c:	2301      	movs	r3, #1
    116e:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( Sched_confirmTimer_register( 1, timer ) ) {//timer ID already registered.
    1172:	e006      	b.n	1182 <Sched_startTimer+0xaa>
        }

        else {
            status = false;//Timer ID is not registered.
    1174:	2300      	movs	r3, #0
    1176:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( Sched_confirmTimer_register( 1, timer ) ) {//timer ID already registered.
    117a:	e002      	b.n	1182 <Sched_startTimer+0xaa>
        }
    }

    else {
        status = false;//invalid ID.
    117c:	2300      	movs	r3, #0
    117e:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
    1182:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1186:	4618      	mov	r0, r3
    1188:	b005      	add	sp, #20
    118a:	f85d fb04 	ldr.w	pc, [sp], #4

0000118e <Sched_getTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid and also the timer must be registered.
 */
uint32_t Sched_getTimer( Sched_Scheduler *scheduler, uint8_t timer ) {
    118e:	b500      	push	{lr}
    1190:	b085      	sub	sp, #20
    1192:	9001      	str	r0, [sp, #4]
    1194:	460b      	mov	r3, r1
    1196:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data
    uint32_t counter_value = 0;
    119a:	2300      	movs	r3, #0
    119c:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( timer != 0 ) && ( timer <= scheduler->timers ) ) {//valid ID
    119e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    11a2:	2b00      	cmp	r3, #0
    11a4:	d01e      	beq.n	11e4 <Sched_getTimer+0x56>
    11a6:	9b01      	ldr	r3, [sp, #4]
    11a8:	7c5b      	ldrb	r3, [r3, #17]
    11aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    11ae:	429a      	cmp	r2, r3
    11b0:	d818      	bhi.n	11e4 <Sched_getTimer+0x56>
        //Verifying if the timer ID has been registered.
        if ( Sched_confirmTimer_register( 1, timer ) ) {//timer ID already registered.
    11b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    11b6:	4619      	mov	r1, r3
    11b8:	2001      	movs	r0, #1
    11ba:	f7ff fe93 	bl	ee4 <Sched_confirmTimer_register>
    11be:	4603      	mov	r3, r0
    11c0:	2b00      	cmp	r3, #0
    11c2:	d00c      	beq.n	11de <Sched_getTimer+0x50>
            counter_value = scheduler->timerPtr[timer - 1].count;
    11c4:	9b01      	ldr	r3, [sp, #4]
    11c6:	6959      	ldr	r1, [r3, #20]
    11c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    11cc:	4613      	mov	r3, r2
    11ce:	005b      	lsls	r3, r3, #1
    11d0:	4413      	add	r3, r2
    11d2:	009b      	lsls	r3, r3, #2
    11d4:	3b0c      	subs	r3, #12
    11d6:	440b      	add	r3, r1
    11d8:	685b      	ldr	r3, [r3, #4]
    11da:	9303      	str	r3, [sp, #12]
        if ( Sched_confirmTimer_register( 1, timer ) ) {//timer ID already registered.
    11dc:	e004      	b.n	11e8 <Sched_getTimer+0x5a>
        }

        else {
            counter_value = false;//Timer ID is not registered.
    11de:	2300      	movs	r3, #0
    11e0:	9303      	str	r3, [sp, #12]
        if ( Sched_confirmTimer_register( 1, timer ) ) {//timer ID already registered.
    11e2:	e001      	b.n	11e8 <Sched_getTimer+0x5a>
        }
    }

    else {
        counter_value = false;//invalid ID.
    11e4:	2300      	movs	r3, #0
    11e6:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
    11e8:	9b03      	ldr	r3, [sp, #12]
}
    11ea:	4618      	mov	r0, r3
    11ec:	b005      	add	sp, #20
    11ee:	f85d fb04 	ldr.w	pc, [sp], #4

000011f2 <Sched_startScheduler>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Sched_startScheduler( Sched_Scheduler *scheduler ) {
    11f2:	b510      	push	{r4, lr}
    11f4:	b088      	sub	sp, #32
    11f6:	9001      	str	r0, [sp, #4]
    //local data
    uint32_t tick_value = OsIf_MicrosToTicks( scheduler->tick * 1000, OSIF_COUNTER_SYSTEM );//Translating tick value from us to counter increments.
    11f8:	9b01      	ldr	r3, [sp, #4]
    11fa:	685b      	ldr	r3, [r3, #4]
    11fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1200:	fb02 f303 	mul.w	r3, r2, r3
    1204:	2101      	movs	r1, #1
    1206:	4618      	mov	r0, r3
    1208:	f000 fa73 	bl	16f2 <OsIf_MicrosToTicks>
    120c:	9005      	str	r0, [sp, #20]
    uint32_t count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );//First counter value capture.
    120e:	2001      	movs	r0, #1
    1210:	f000 fa23 	bl	165a <OsIf_GetCounter>
    1214:	4603      	mov	r3, r0
    1216:	9303      	str	r3, [sp, #12]
    uint32_t elapsed_time = 0;//Time follow up for tick (timer increments).
    1218:	2300      	movs	r3, #0
    121a:	9307      	str	r3, [sp, #28]
    uint8_t i = 0;
    121c:	2300      	movs	r3, #0
    121e:	f88d 301b 	strb.w	r3, [sp, #27]
    uint8_t new_task = false;
    1222:	2300      	movs	r3, #0
    1224:	f88d 3013 	strb.w	r3, [sp, #19]

    //Initializing time follow-up for each task.
    for ( i = 0; i < scheduler->tasks; i++ ) {
    1228:	2300      	movs	r3, #0
    122a:	f88d 301b 	strb.w	r3, [sp, #27]
    122e:	e00c      	b.n	124a <Sched_startScheduler+0x58>
        scheduler->taskPtr[i].elapsed = 0;
    1230:	9b01      	ldr	r3, [sp, #4]
    1232:	689a      	ldr	r2, [r3, #8]
    1234:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1238:	011b      	lsls	r3, r3, #4
    123a:	4413      	add	r3, r2
    123c:	2200      	movs	r2, #0
    123e:	605a      	str	r2, [r3, #4]
    for ( i = 0; i < scheduler->tasks; i++ ) {
    1240:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1244:	3301      	adds	r3, #1
    1246:	f88d 301b 	strb.w	r3, [sp, #27]
    124a:	9b01      	ldr	r3, [sp, #4]
    124c:	785b      	ldrb	r3, [r3, #1]
    124e:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1252:	429a      	cmp	r2, r3
    1254:	d3ec      	bcc.n	1230 <Sched_startScheduler+0x3e>
    }

    //Initializing counter values of all timers --> reseting all timers to their timeouts.
    for ( i = 0; i <scheduler->timers; i++ ) {
    1256:	2300      	movs	r3, #0
    1258:	f88d 301b 	strb.w	r3, [sp, #27]
    125c:	e018      	b.n	1290 <Sched_startScheduler+0x9e>
        scheduler->timerPtr[i].count = scheduler->timerPtr[i].timeout;
    125e:	9b01      	ldr	r3, [sp, #4]
    1260:	6959      	ldr	r1, [r3, #20]
    1262:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1266:	4613      	mov	r3, r2
    1268:	005b      	lsls	r3, r3, #1
    126a:	4413      	add	r3, r2
    126c:	009b      	lsls	r3, r3, #2
    126e:	4419      	add	r1, r3
    1270:	9b01      	ldr	r3, [sp, #4]
    1272:	6958      	ldr	r0, [r3, #20]
    1274:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1278:	4613      	mov	r3, r2
    127a:	005b      	lsls	r3, r3, #1
    127c:	4413      	add	r3, r2
    127e:	009b      	lsls	r3, r3, #2
    1280:	4403      	add	r3, r0
    1282:	680a      	ldr	r2, [r1, #0]
    1284:	605a      	str	r2, [r3, #4]
    for ( i = 0; i <scheduler->timers; i++ ) {
    1286:	f89d 301b 	ldrb.w	r3, [sp, #27]
    128a:	3301      	adds	r3, #1
    128c:	f88d 301b 	strb.w	r3, [sp, #27]
    1290:	9b01      	ldr	r3, [sp, #4]
    1292:	7c5b      	ldrb	r3, [r3, #17]
    1294:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1298:	429a      	cmp	r2, r3
    129a:	d3e0      	bcc.n	125e <Sched_startScheduler+0x6c>
    }

    //Verifying which tasks registered are new.
    for ( i = 0; i < scheduler->tasks; i++ ) {
    129c:	2300      	movs	r3, #0
    129e:	f88d 301b 	strb.w	r3, [sp, #27]
    12a2:	e026      	b.n	12f2 <Sched_startScheduler+0x100>
        if ( Bfx_GetBit_u32u8_u8( scheduler->tasks_startFlags, i ) ) {
    12a4:	9b01      	ldr	r3, [sp, #4]
    12a6:	68db      	ldr	r3, [r3, #12]
    12a8:	f89d 201b 	ldrb.w	r2, [sp, #27]
    12ac:	4611      	mov	r1, r2
    12ae:	4618      	mov	r0, r3
    12b0:	f7ff fbb3 	bl	a1a <Bfx_GetBit_u32u8_u8>
    12b4:	4603      	mov	r3, r0
    12b6:	2b00      	cmp	r3, #0
    12b8:	d016      	beq.n	12e8 <Sched_startScheduler+0xf6>
            //Verifying if task is a new task.
            new_task = Sched_verifyTask_firstexe( scheduler, i + 1 );
    12ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
    12be:	3301      	adds	r3, #1
    12c0:	b2db      	uxtb	r3, r3
    12c2:	4619      	mov	r1, r3
    12c4:	9801      	ldr	r0, [sp, #4]
    12c6:	f7ff fd9b 	bl	e00 <Sched_verifyTask_firstexe>
    12ca:	4603      	mov	r3, r0
    12cc:	f88d 3013 	strb.w	r3, [sp, #19]
            if ( new_task ) {
    12d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d007      	beq.n	12e8 <Sched_startScheduler+0xf6>
                scheduler->taskPtr[i].initFunc();//Executing init function.
    12d8:	9b01      	ldr	r3, [sp, #4]
    12da:	689a      	ldr	r2, [r3, #8]
    12dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    12e0:	011b      	lsls	r3, r3, #4
    12e2:	4413      	add	r3, r2
    12e4:	689b      	ldr	r3, [r3, #8]
    12e6:	4798      	blx	r3
    for ( i = 0; i < scheduler->tasks; i++ ) {
    12e8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    12ec:	3301      	adds	r3, #1
    12ee:	f88d 301b 	strb.w	r3, [sp, #27]
    12f2:	9b01      	ldr	r3, [sp, #4]
    12f4:	785b      	ldrb	r3, [r3, #1]
    12f6:	f89d 201b 	ldrb.w	r2, [sp, #27]
    12fa:	429a      	cmp	r2, r3
    12fc:	d3d2      	bcc.n	12a4 <Sched_startScheduler+0xb2>
        }
    }

    while( 1 ) {//tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );//time capture update
    12fe:	ab03      	add	r3, sp, #12
    1300:	2101      	movs	r1, #1
    1302:	4618      	mov	r0, r3
    1304:	f000 f9c2 	bl	168c <OsIf_GetElapsed>
    1308:	4602      	mov	r2, r0
    130a:	9b07      	ldr	r3, [sp, #28]
    130c:	4413      	add	r3, r2
    130e:	9307      	str	r3, [sp, #28]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
    1310:	9a07      	ldr	r2, [sp, #28]
    1312:	9b05      	ldr	r3, [sp, #20]
    1314:	429a      	cmp	r2, r3
    1316:	d3f2      	bcc.n	12fe <Sched_startScheduler+0x10c>
            //Executing timers
            for ( i = 0; i < scheduler->timers; i++ ) {
    1318:	2300      	movs	r3, #0
    131a:	f88d 301b 	strb.w	r3, [sp, #27]
    131e:	e03c      	b.n	139a <Sched_startScheduler+0x1a8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( scheduler->timers_startFlags, i ) ) {//timer activated
    1320:	9b01      	ldr	r3, [sp, #4]
    1322:	699b      	ldr	r3, [r3, #24]
    1324:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1328:	4611      	mov	r1, r2
    132a:	4618      	mov	r0, r3
    132c:	f7ff fb75 	bl	a1a <Bfx_GetBit_u32u8_u8>
    1330:	4603      	mov	r3, r0
    1332:	2b00      	cmp	r3, #0
    1334:	d02c      	beq.n	1390 <Sched_startScheduler+0x19e>
                    scheduler->timerPtr[i].count -= scheduler->tick;//decrement
    1336:	9b01      	ldr	r3, [sp, #4]
    1338:	6959      	ldr	r1, [r3, #20]
    133a:	f89d 201b 	ldrb.w	r2, [sp, #27]
    133e:	4613      	mov	r3, r2
    1340:	005b      	lsls	r3, r3, #1
    1342:	4413      	add	r3, r2
    1344:	009b      	lsls	r3, r3, #2
    1346:	440b      	add	r3, r1
    1348:	6858      	ldr	r0, [r3, #4]
    134a:	9b01      	ldr	r3, [sp, #4]
    134c:	6859      	ldr	r1, [r3, #4]
    134e:	9b01      	ldr	r3, [sp, #4]
    1350:	695c      	ldr	r4, [r3, #20]
    1352:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1356:	4613      	mov	r3, r2
    1358:	005b      	lsls	r3, r3, #1
    135a:	4413      	add	r3, r2
    135c:	009b      	lsls	r3, r3, #2
    135e:	4423      	add	r3, r4
    1360:	1a42      	subs	r2, r0, r1
    1362:	605a      	str	r2, [r3, #4]
                    //Verifying execution of callback i
                    if ( Sched_getTimer(scheduler, i + 1) == 0 ) {
    1364:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1368:	3301      	adds	r3, #1
    136a:	b2db      	uxtb	r3, r3
    136c:	4619      	mov	r1, r3
    136e:	9801      	ldr	r0, [sp, #4]
    1370:	f7ff ff0d 	bl	118e <Sched_getTimer>
    1374:	4603      	mov	r3, r0
    1376:	2b00      	cmp	r3, #0
    1378:	d10a      	bne.n	1390 <Sched_startScheduler+0x19e>
                        scheduler->timerPtr[i].callbackPtr();
    137a:	9b01      	ldr	r3, [sp, #4]
    137c:	6959      	ldr	r1, [r3, #20]
    137e:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1382:	4613      	mov	r3, r2
    1384:	005b      	lsls	r3, r3, #1
    1386:	4413      	add	r3, r2
    1388:	009b      	lsls	r3, r3, #2
    138a:	440b      	add	r3, r1
    138c:	689b      	ldr	r3, [r3, #8]
    138e:	4798      	blx	r3
            for ( i = 0; i < scheduler->timers; i++ ) {
    1390:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1394:	3301      	adds	r3, #1
    1396:	f88d 301b 	strb.w	r3, [sp, #27]
    139a:	9b01      	ldr	r3, [sp, #4]
    139c:	7c5b      	ldrb	r3, [r3, #17]
    139e:	f89d 201b 	ldrb.w	r2, [sp, #27]
    13a2:	429a      	cmp	r2, r3
    13a4:	d3bc      	bcc.n	1320 <Sched_startScheduler+0x12e>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < scheduler->tasks; i++ ) {
    13a6:	2300      	movs	r3, #0
    13a8:	f88d 301b 	strb.w	r3, [sp, #27]
    13ac:	e040      	b.n	1430 <Sched_startScheduler+0x23e>
                //Time follow-up update for task i.
                scheduler->taskPtr[i].elapsed += scheduler->tick;
    13ae:	9b01      	ldr	r3, [sp, #4]
    13b0:	689a      	ldr	r2, [r3, #8]
    13b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    13b6:	011b      	lsls	r3, r3, #4
    13b8:	4413      	add	r3, r2
    13ba:	6859      	ldr	r1, [r3, #4]
    13bc:	9b01      	ldr	r3, [sp, #4]
    13be:	685a      	ldr	r2, [r3, #4]
    13c0:	9b01      	ldr	r3, [sp, #4]
    13c2:	6898      	ldr	r0, [r3, #8]
    13c4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    13c8:	011b      	lsls	r3, r3, #4
    13ca:	4403      	add	r3, r0
    13cc:	440a      	add	r2, r1
    13ce:	605a      	str	r2, [r3, #4]
                
                //Verifying execution of task i
                if ( ( scheduler->taskPtr[i].elapsed >= scheduler->taskPtr[i].period ) && ( Bfx_GetBit_u32u8_u8( scheduler->tasks_startFlags, i ) ) ) {//periodicity achieved.
    13d0:	9b01      	ldr	r3, [sp, #4]
    13d2:	689a      	ldr	r2, [r3, #8]
    13d4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    13d8:	011b      	lsls	r3, r3, #4
    13da:	4413      	add	r3, r2
    13dc:	685a      	ldr	r2, [r3, #4]
    13de:	9b01      	ldr	r3, [sp, #4]
    13e0:	6899      	ldr	r1, [r3, #8]
    13e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    13e6:	011b      	lsls	r3, r3, #4
    13e8:	440b      	add	r3, r1
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	429a      	cmp	r2, r3
    13ee:	d31a      	bcc.n	1426 <Sched_startScheduler+0x234>
    13f0:	9b01      	ldr	r3, [sp, #4]
    13f2:	68db      	ldr	r3, [r3, #12]
    13f4:	f89d 201b 	ldrb.w	r2, [sp, #27]
    13f8:	4611      	mov	r1, r2
    13fa:	4618      	mov	r0, r3
    13fc:	f7ff fb0d 	bl	a1a <Bfx_GetBit_u32u8_u8>
    1400:	4603      	mov	r3, r0
    1402:	2b00      	cmp	r3, #0
    1404:	d00f      	beq.n	1426 <Sched_startScheduler+0x234>
                    //Executing task function.
                    scheduler->taskPtr[i].taskFunc();
    1406:	9b01      	ldr	r3, [sp, #4]
    1408:	689a      	ldr	r2, [r3, #8]
    140a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    140e:	011b      	lsls	r3, r3, #4
    1410:	4413      	add	r3, r2
    1412:	68db      	ldr	r3, [r3, #12]
    1414:	4798      	blx	r3

                    //Time follow-up reset for task i.
                    scheduler->taskPtr[i].elapsed = 0;                
    1416:	9b01      	ldr	r3, [sp, #4]
    1418:	689a      	ldr	r2, [r3, #8]
    141a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    141e:	011b      	lsls	r3, r3, #4
    1420:	4413      	add	r3, r2
    1422:	2200      	movs	r2, #0
    1424:	605a      	str	r2, [r3, #4]
            for ( i = 0; i < scheduler->tasks; i++ ) {
    1426:	f89d 301b 	ldrb.w	r3, [sp, #27]
    142a:	3301      	adds	r3, #1
    142c:	f88d 301b 	strb.w	r3, [sp, #27]
    1430:	9b01      	ldr	r3, [sp, #4]
    1432:	785b      	ldrb	r3, [r3, #1]
    1434:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1438:	429a      	cmp	r2, r3
    143a:	d3b8      	bcc.n	13ae <Sched_startScheduler+0x1bc>
                }  
            }

            elapsed_time = 0;//Reset time follow up for tick.
    143c:	2300      	movs	r3, #0
    143e:	9307      	str	r3, [sp, #28]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );//time capture update
    1440:	e75d      	b.n	12fe <Sched_startScheduler+0x10c>
	...

00001444 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1444:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1446:	2300      	movs	r3, #0
    1448:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    144a:	2300      	movs	r3, #0
    144c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    144e:	2300      	movs	r3, #0
    1450:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    1452:	2300      	movs	r3, #0
    1454:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1456:	4b44      	ldr	r3, [pc, #272]	; (1568 <init_data_bss+0x124>)
    1458:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    145a:	4b44      	ldr	r3, [pc, #272]	; (156c <init_data_bss+0x128>)
    145c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    145e:	9b05      	ldr	r3, [sp, #20]
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1464:	9b05      	ldr	r3, [sp, #20]
    1466:	3304      	adds	r3, #4
    1468:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    146a:	9b05      	ldr	r3, [sp, #20]
    146c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    146e:	2300      	movs	r3, #0
    1470:	9309      	str	r3, [sp, #36]	; 0x24
    1472:	e03d      	b.n	14f0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1474:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1476:	4613      	mov	r3, r2
    1478:	005b      	lsls	r3, r3, #1
    147a:	4413      	add	r3, r2
    147c:	009b      	lsls	r3, r3, #2
    147e:	461a      	mov	r2, r3
    1480:	9b03      	ldr	r3, [sp, #12]
    1482:	4413      	add	r3, r2
    1484:	685b      	ldr	r3, [r3, #4]
    1486:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1488:	9a09      	ldr	r2, [sp, #36]	; 0x24
    148a:	4613      	mov	r3, r2
    148c:	005b      	lsls	r3, r3, #1
    148e:	4413      	add	r3, r2
    1490:	009b      	lsls	r3, r3, #2
    1492:	461a      	mov	r2, r3
    1494:	9b03      	ldr	r3, [sp, #12]
    1496:	4413      	add	r3, r2
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    149c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    149e:	4613      	mov	r3, r2
    14a0:	005b      	lsls	r3, r3, #1
    14a2:	4413      	add	r3, r2
    14a4:	009b      	lsls	r3, r3, #2
    14a6:	461a      	mov	r2, r3
    14a8:	9b03      	ldr	r3, [sp, #12]
    14aa:	4413      	add	r3, r2
    14ac:	689b      	ldr	r3, [r3, #8]
    14ae:	4619      	mov	r1, r3
    14b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14b2:	4613      	mov	r3, r2
    14b4:	005b      	lsls	r3, r3, #1
    14b6:	4413      	add	r3, r2
    14b8:	009b      	lsls	r3, r3, #2
    14ba:	461a      	mov	r2, r3
    14bc:	9b03      	ldr	r3, [sp, #12]
    14be:	4413      	add	r3, r2
    14c0:	685b      	ldr	r3, [r3, #4]
    14c2:	1acb      	subs	r3, r1, r3
    14c4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    14c6:	2300      	movs	r3, #0
    14c8:	9308      	str	r3, [sp, #32]
    14ca:	e00a      	b.n	14e2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    14cc:	9a00      	ldr	r2, [sp, #0]
    14ce:	9b08      	ldr	r3, [sp, #32]
    14d0:	441a      	add	r2, r3
    14d2:	9901      	ldr	r1, [sp, #4]
    14d4:	9b08      	ldr	r3, [sp, #32]
    14d6:	440b      	add	r3, r1
    14d8:	7812      	ldrb	r2, [r2, #0]
    14da:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    14dc:	9b08      	ldr	r3, [sp, #32]
    14de:	3301      	adds	r3, #1
    14e0:	9308      	str	r3, [sp, #32]
    14e2:	9a08      	ldr	r2, [sp, #32]
    14e4:	9b06      	ldr	r3, [sp, #24]
    14e6:	429a      	cmp	r2, r3
    14e8:	d3f0      	bcc.n	14cc <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    14ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14ec:	3301      	adds	r3, #1
    14ee:	9309      	str	r3, [sp, #36]	; 0x24
    14f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14f2:	9b07      	ldr	r3, [sp, #28]
    14f4:	429a      	cmp	r2, r3
    14f6:	d3bd      	bcc.n	1474 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    14f8:	9b04      	ldr	r3, [sp, #16]
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    14fe:	9b04      	ldr	r3, [sp, #16]
    1500:	3304      	adds	r3, #4
    1502:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1504:	9b04      	ldr	r3, [sp, #16]
    1506:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1508:	2300      	movs	r3, #0
    150a:	9309      	str	r3, [sp, #36]	; 0x24
    150c:	e024      	b.n	1558 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    150e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1510:	00db      	lsls	r3, r3, #3
    1512:	9a02      	ldr	r2, [sp, #8]
    1514:	4413      	add	r3, r2
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    151a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    151c:	00db      	lsls	r3, r3, #3
    151e:	9a02      	ldr	r2, [sp, #8]
    1520:	4413      	add	r3, r2
    1522:	685b      	ldr	r3, [r3, #4]
    1524:	4619      	mov	r1, r3
    1526:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1528:	00db      	lsls	r3, r3, #3
    152a:	9a02      	ldr	r2, [sp, #8]
    152c:	4413      	add	r3, r2
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	1acb      	subs	r3, r1, r3
    1532:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1534:	2300      	movs	r3, #0
    1536:	9308      	str	r3, [sp, #32]
    1538:	e007      	b.n	154a <init_data_bss+0x106>
        {
            ram[j] = 0U;
    153a:	9a01      	ldr	r2, [sp, #4]
    153c:	9b08      	ldr	r3, [sp, #32]
    153e:	4413      	add	r3, r2
    1540:	2200      	movs	r2, #0
    1542:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1544:	9b08      	ldr	r3, [sp, #32]
    1546:	3301      	adds	r3, #1
    1548:	9308      	str	r3, [sp, #32]
    154a:	9a08      	ldr	r2, [sp, #32]
    154c:	9b06      	ldr	r3, [sp, #24]
    154e:	429a      	cmp	r2, r3
    1550:	d3f3      	bcc.n	153a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1552:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1554:	3301      	adds	r3, #1
    1556:	9309      	str	r3, [sp, #36]	; 0x24
    1558:	9a09      	ldr	r2, [sp, #36]	; 0x24
    155a:	9b07      	ldr	r3, [sp, #28]
    155c:	429a      	cmp	r2, r3
    155e:	d3d6      	bcc.n	150e <init_data_bss+0xca>
        }
    }
}
    1560:	bf00      	nop
    1562:	bf00      	nop
    1564:	b00a      	add	sp, #40	; 0x28
    1566:	4770      	bx	lr
    1568:	00008a70 	.word	0x00008a70
    156c:	00008a8c 	.word	0x00008a8c

00001570 <sys_m4_cache_init>:
{
    1570:	b084      	sub	sp, #16
    1572:	4603      	mov	r3, r0
    1574:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1578:	2300      	movs	r3, #0
    157a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    157e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1582:	2b00      	cmp	r3, #0
    1584:	d118      	bne.n	15b8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1586:	4b10      	ldr	r3, [pc, #64]	; (15c8 <sys_m4_cache_init+0x58>)
    1588:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    158c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    158e:	4b0e      	ldr	r3, [pc, #56]	; (15c8 <sys_m4_cache_init+0x58>)
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	4a0d      	ldr	r2, [pc, #52]	; (15c8 <sys_m4_cache_init+0x58>)
    1594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1598:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    159a:	bf00      	nop
    159c:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <sys_m4_cache_init+0x58>)
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    15a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    15a8:	d0f8      	beq.n	159c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    15aa:	4b07      	ldr	r3, [pc, #28]	; (15c8 <sys_m4_cache_init+0x58>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	4a06      	ldr	r2, [pc, #24]	; (15c8 <sys_m4_cache_init+0x58>)
    15b0:	f043 0301 	orr.w	r3, r3, #1
    15b4:	6013      	str	r3, [r2, #0]
    15b6:	e002      	b.n	15be <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    15b8:	2301      	movs	r3, #1
    15ba:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    15be:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    15c2:	4618      	mov	r0, r3
    15c4:	b004      	add	sp, #16
    15c6:	4770      	bx	lr
    15c8:	e0082000 	.word	0xe0082000

000015cc <startup_go_to_user_mode>:
}
    15cc:	bf00      	nop
    15ce:	4770      	bx	lr

000015d0 <Sys_GetCoreID>:
    return 0U;
    15d0:	2300      	movs	r3, #0
}
    15d2:	4618      	mov	r0, r3
    15d4:	4770      	bx	lr

000015d6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    15d6:	e7fe      	b.n	15d6 <HardFault_Handler>

000015d8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    15d8:	e7fe      	b.n	15d8 <MemManage_Handler>

000015da <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    15da:	e7fe      	b.n	15da <BusFault_Handler>

000015dc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    15dc:	e7fe      	b.n	15dc <UsageFault_Handler>

000015de <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    15de:	e7fe      	b.n	15de <SVC_Handler>

000015e0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    15e0:	e7fe      	b.n	15e0 <DebugMon_Handler>

000015e2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    15e2:	e7fe      	b.n	15e2 <PendSV_Handler>

000015e4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    15e4:	e7fe      	b.n	15e4 <SysTick_Handler>

000015e6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    15e6:	e7fe      	b.n	15e6 <undefined_handler>

000015e8 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->Disabled
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    15e8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    15ea:	4805      	ldr	r0, [pc, #20]	; (1600 <MCU_clocks+0x18>)
    15ec:	f003 fdc2 	bl	5174 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    15f0:	2000      	movs	r0, #0
    15f2:	f003 fe37 	bl	5264 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    15f6:	2000      	movs	r0, #0
    15f8:	f003 fe10 	bl	521c <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    15fc:	bf00      	nop
    15fe:	bd08      	pop	{r3, pc}
    1600:	0000884c 	.word	0x0000884c

00001604 <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    1604:	b508      	push	{r3, lr}
    MCU_clocks();
    1606:	f7ff ffef 	bl	15e8 <MCU_clocks>
    OsIf_Init( NULL_PTR );//Init Osif timer.
    160a:	2000      	movs	r0, #0
    160c:	f000 f81c 	bl	1648 <OsIf_Init>
    Port_Init( &Port_Config );//Init port driver and configuration.
    1610:	4802      	ldr	r0, [pc, #8]	; (161c <EcuM_Init+0x18>)
    1612:	f004 f9b1 	bl	5978 <Port_Init>
    1616:	bf00      	nop
    1618:	bd08      	pop	{r3, pc}
    161a:	bf00      	nop
    161c:	00008a24 	.word	0x00008a24

00001620 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1620:	2300      	movs	r3, #0
}
    1622:	4618      	mov	r0, r3
    1624:	4770      	bx	lr

00001626 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1626:	b082      	sub	sp, #8
    1628:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    162a:	2301      	movs	r3, #1
}
    162c:	4618      	mov	r0, r3
    162e:	b002      	add	sp, #8
    1630:	4770      	bx	lr

00001632 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1632:	b082      	sub	sp, #8
    1634:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1636:	bf00      	nop
    1638:	b002      	add	sp, #8
    163a:	4770      	bx	lr

0000163c <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    163c:	b082      	sub	sp, #8
    163e:	9001      	str	r0, [sp, #4]
    return Micros;
    1640:	9b01      	ldr	r3, [sp, #4]
}
    1642:	4618      	mov	r0, r3
    1644:	b002      	add	sp, #8
    1646:	4770      	bx	lr

00001648 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1648:	b500      	push	{lr}
    164a:	b083      	sub	sp, #12
    164c:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    164e:	f000 f86d 	bl	172c <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1652:	bf00      	nop
    1654:	b003      	add	sp, #12
    1656:	f85d fb04 	ldr.w	pc, [sp], #4

0000165a <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    165a:	b500      	push	{lr}
    165c:	b085      	sub	sp, #20
    165e:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1660:	2300      	movs	r3, #0
    1662:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1664:	9b01      	ldr	r3, [sp, #4]
    1666:	2b00      	cmp	r3, #0
    1668:	d003      	beq.n	1672 <OsIf_GetCounter+0x18>
    166a:	9b01      	ldr	r3, [sp, #4]
    166c:	2b01      	cmp	r3, #1
    166e:	d004      	beq.n	167a <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1670:	e007      	b.n	1682 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1672:	f7ff ffd5 	bl	1620 <OsIf_Timer_Dummy_GetCounter>
    1676:	9003      	str	r0, [sp, #12]
            break;
    1678:	e003      	b.n	1682 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    167a:	f000 f873 	bl	1764 <OsIf_Timer_System_GetCounter>
    167e:	9003      	str	r0, [sp, #12]
            break;
    1680:	bf00      	nop
    }

    return Value;
    1682:	9b03      	ldr	r3, [sp, #12]
}
    1684:	4618      	mov	r0, r3
    1686:	b005      	add	sp, #20
    1688:	f85d fb04 	ldr.w	pc, [sp], #4

0000168c <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    168c:	b500      	push	{lr}
    168e:	b085      	sub	sp, #20
    1690:	9001      	str	r0, [sp, #4]
    1692:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1694:	2300      	movs	r3, #0
    1696:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1698:	9b00      	ldr	r3, [sp, #0]
    169a:	2b00      	cmp	r3, #0
    169c:	d003      	beq.n	16a6 <OsIf_GetElapsed+0x1a>
    169e:	9b00      	ldr	r3, [sp, #0]
    16a0:	2b01      	cmp	r3, #1
    16a2:	d005      	beq.n	16b0 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    16a4:	e009      	b.n	16ba <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    16a6:	9801      	ldr	r0, [sp, #4]
    16a8:	f7ff ffbd 	bl	1626 <OsIf_Timer_Dummy_GetElapsed>
    16ac:	9003      	str	r0, [sp, #12]
            break;
    16ae:	e004      	b.n	16ba <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    16b0:	9801      	ldr	r0, [sp, #4]
    16b2:	f000 f865 	bl	1780 <OsIf_Timer_System_GetElapsed>
    16b6:	9003      	str	r0, [sp, #12]
            break;
    16b8:	bf00      	nop
    }

    return Value;
    16ba:	9b03      	ldr	r3, [sp, #12]
}
    16bc:	4618      	mov	r0, r3
    16be:	b005      	add	sp, #20
    16c0:	f85d fb04 	ldr.w	pc, [sp], #4

000016c4 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    16c4:	b500      	push	{lr}
    16c6:	b083      	sub	sp, #12
    16c8:	9001      	str	r0, [sp, #4]
    16ca:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    16cc:	9b00      	ldr	r3, [sp, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d003      	beq.n	16da <OsIf_SetTimerFrequency+0x16>
    16d2:	9b00      	ldr	r3, [sp, #0]
    16d4:	2b01      	cmp	r3, #1
    16d6:	d004      	beq.n	16e2 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    16d8:	e007      	b.n	16ea <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    16da:	9801      	ldr	r0, [sp, #4]
    16dc:	f7ff ffa9 	bl	1632 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    16e0:	e003      	b.n	16ea <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    16e2:	9801      	ldr	r0, [sp, #4]
    16e4:	f000 f85c 	bl	17a0 <OsIf_Timer_System_SetTimerFrequency>
            break;
    16e8:	bf00      	nop
    }
}
    16ea:	bf00      	nop
    16ec:	b003      	add	sp, #12
    16ee:	f85d fb04 	ldr.w	pc, [sp], #4

000016f2 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    16f2:	b500      	push	{lr}
    16f4:	b085      	sub	sp, #20
    16f6:	9001      	str	r0, [sp, #4]
    16f8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    16fa:	2300      	movs	r3, #0
    16fc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    16fe:	9b00      	ldr	r3, [sp, #0]
    1700:	2b00      	cmp	r3, #0
    1702:	d003      	beq.n	170c <OsIf_MicrosToTicks+0x1a>
    1704:	9b00      	ldr	r3, [sp, #0]
    1706:	2b01      	cmp	r3, #1
    1708:	d005      	beq.n	1716 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    170a:	e009      	b.n	1720 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    170c:	9801      	ldr	r0, [sp, #4]
    170e:	f7ff ff95 	bl	163c <OsIf_Timer_Dummy_MicrosToTicks>
    1712:	9003      	str	r0, [sp, #12]
            break;
    1714:	e004      	b.n	1720 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1716:	9801      	ldr	r0, [sp, #4]
    1718:	f000 f850 	bl	17bc <OsIf_Timer_System_MicrosToTicks>
    171c:	9003      	str	r0, [sp, #12]
            break;
    171e:	bf00      	nop
    }

    return Value;
    1720:	9b03      	ldr	r3, [sp, #12]
}
    1722:	4618      	mov	r0, r3
    1724:	b005      	add	sp, #20
    1726:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000172c <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    172c:	b500      	push	{lr}
    172e:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1730:	2300      	movs	r3, #0
    1732:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1734:	4a09      	ldr	r2, [pc, #36]	; (175c <OsIf_Timer_System_Init+0x30>)
    1736:	9b01      	ldr	r3, [sp, #4]
    1738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    173c:	685a      	ldr	r2, [r3, #4]
    173e:	4908      	ldr	r1, [pc, #32]	; (1760 <OsIf_Timer_System_Init+0x34>)
    1740:	9b01      	ldr	r3, [sp, #4]
    1742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1746:	4a06      	ldr	r2, [pc, #24]	; (1760 <OsIf_Timer_System_Init+0x34>)
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    174e:	4618      	mov	r0, r3
    1750:	f000 f868 	bl	1824 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1754:	bf00      	nop
    1756:	b003      	add	sp, #12
    1758:	f85d fb04 	ldr.w	pc, [sp], #4
    175c:	00008870 	.word	0x00008870
    1760:	1fff8b5c 	.word	0x1fff8b5c

00001764 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1764:	b500      	push	{lr}
    1766:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1768:	2300      	movs	r3, #0
    176a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    176c:	2300      	movs	r3, #0
    176e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1770:	f000 f86c 	bl	184c <OsIf_Timer_System_Internal_GetCounter>
    1774:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1776:	9b01      	ldr	r3, [sp, #4]
}
    1778:	4618      	mov	r0, r3
    177a:	b003      	add	sp, #12
    177c:	f85d fb04 	ldr.w	pc, [sp], #4

00001780 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1780:	b500      	push	{lr}
    1782:	b085      	sub	sp, #20
    1784:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1786:	2300      	movs	r3, #0
    1788:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    178a:	2300      	movs	r3, #0
    178c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    178e:	9801      	ldr	r0, [sp, #4]
    1790:	f000 f864 	bl	185c <OsIf_Timer_System_Internal_GetElapsed>
    1794:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1796:	9b03      	ldr	r3, [sp, #12]
}
    1798:	4618      	mov	r0, r3
    179a:	b005      	add	sp, #20
    179c:	f85d fb04 	ldr.w	pc, [sp], #4

000017a0 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    17a0:	b084      	sub	sp, #16
    17a2:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    17a4:	2300      	movs	r3, #0
    17a6:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    17a8:	4903      	ldr	r1, [pc, #12]	; (17b8 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    17aa:	9b03      	ldr	r3, [sp, #12]
    17ac:	9a01      	ldr	r2, [sp, #4]
    17ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    17b2:	bf00      	nop
    17b4:	b004      	add	sp, #16
    17b6:	4770      	bx	lr
    17b8:	1fff8b5c 	.word	0x1fff8b5c

000017bc <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	b087      	sub	sp, #28
    17c0:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    17c2:	2100      	movs	r1, #0
    17c4:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    17c6:	2100      	movs	r1, #0
    17c8:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    17ca:	9901      	ldr	r1, [sp, #4]
    17cc:	2000      	movs	r0, #0
    17ce:	460e      	mov	r6, r1
    17d0:	4607      	mov	r7, r0
    17d2:	4812      	ldr	r0, [pc, #72]	; (181c <OsIf_Timer_System_MicrosToTicks+0x60>)
    17d4:	9904      	ldr	r1, [sp, #16]
    17d6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    17da:	2000      	movs	r0, #0
    17dc:	460c      	mov	r4, r1
    17de:	4605      	mov	r5, r0
    17e0:	fb04 f007 	mul.w	r0, r4, r7
    17e4:	fb06 f105 	mul.w	r1, r6, r5
    17e8:	4401      	add	r1, r0
    17ea:	fba6 2304 	umull	r2, r3, r6, r4
    17ee:	4419      	add	r1, r3
    17f0:	460b      	mov	r3, r1
    17f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    17f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    17fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    17fe:	4a08      	ldr	r2, [pc, #32]	; (1820 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1800:	f04f 0300 	mov.w	r3, #0
    1804:	f7fe fece 	bl	5a4 <__aeabi_uldivmod>
    1808:	4602      	mov	r2, r0
    180a:	460b      	mov	r3, r1
    180c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1810:	9b02      	ldr	r3, [sp, #8]
    1812:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1814:	9b05      	ldr	r3, [sp, #20]
}
    1816:	4618      	mov	r0, r3
    1818:	b007      	add	sp, #28
    181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    181c:	1fff8b5c 	.word	0x1fff8b5c
    1820:	000f4240 	.word	0x000f4240

00001824 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1824:	b082      	sub	sp, #8
    1826:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1828:	4b07      	ldr	r3, [pc, #28]	; (1848 <OsIf_Timer_System_Internal_Init+0x24>)
    182a:	2200      	movs	r2, #0
    182c:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    182e:	4b06      	ldr	r3, [pc, #24]	; (1848 <OsIf_Timer_System_Internal_Init+0x24>)
    1830:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1834:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1836:	4b04      	ldr	r3, [pc, #16]	; (1848 <OsIf_Timer_System_Internal_Init+0x24>)
    1838:	2200      	movs	r2, #0
    183a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    183c:	4b02      	ldr	r3, [pc, #8]	; (1848 <OsIf_Timer_System_Internal_Init+0x24>)
    183e:	2205      	movs	r2, #5
    1840:	601a      	str	r2, [r3, #0]
}
    1842:	bf00      	nop
    1844:	b002      	add	sp, #8
    1846:	4770      	bx	lr
    1848:	e000e010 	.word	0xe000e010

0000184c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    184c:	4b02      	ldr	r3, [pc, #8]	; (1858 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    184e:	689b      	ldr	r3, [r3, #8]
    1850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1854:	4618      	mov	r0, r3
    1856:	4770      	bx	lr
    1858:	e000e010 	.word	0xe000e010

0000185c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    185c:	b084      	sub	sp, #16
    185e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1860:	4b10      	ldr	r3, [pc, #64]	; (18a4 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1862:	689b      	ldr	r3, [r3, #8]
    1864:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1868:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    186a:	2300      	movs	r3, #0
    186c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    186e:	9b01      	ldr	r3, [sp, #4]
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	9a02      	ldr	r2, [sp, #8]
    1874:	429a      	cmp	r2, r3
    1876:	d909      	bls.n	188c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1878:	9b01      	ldr	r3, [sp, #4]
    187a:	681a      	ldr	r2, [r3, #0]
    187c:	9b02      	ldr	r3, [sp, #8]
    187e:	1ad3      	subs	r3, r2, r3
    1880:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1884:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1888:	9303      	str	r3, [sp, #12]
    188a:	e004      	b.n	1896 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    188c:	9b01      	ldr	r3, [sp, #4]
    188e:	681a      	ldr	r2, [r3, #0]
    1890:	9b02      	ldr	r3, [sp, #8]
    1892:	1ad3      	subs	r3, r2, r3
    1894:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1896:	9b01      	ldr	r3, [sp, #4]
    1898:	9a02      	ldr	r2, [sp, #8]
    189a:	601a      	str	r2, [r3, #0]

    return dif;
    189c:	9b03      	ldr	r3, [sp, #12]
}
    189e:	4618      	mov	r0, r3
    18a0:	b004      	add	sp, #16
    18a2:	4770      	bx	lr
    18a4:	e000e010 	.word	0xe000e010

000018a8 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    18a8:	b082      	sub	sp, #8
    18aa:	9001      	str	r0, [sp, #4]
    18ac:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    18ae:	bf00      	nop
    18b0:	b002      	add	sp, #8
    18b2:	4770      	bx	lr

000018b4 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    18b4:	b500      	push	{lr}
    18b6:	b085      	sub	sp, #20
    18b8:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    18ba:	4b24      	ldr	r3, [pc, #144]	; (194c <Clock_Ip_UpdateDriverContext+0x98>)
    18bc:	2201      	movs	r2, #1
    18be:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    18c0:	4b23      	ldr	r3, [pc, #140]	; (1950 <Clock_Ip_UpdateDriverContext+0x9c>)
    18c2:	681b      	ldr	r3, [r3, #0]
    18c4:	2102      	movs	r1, #2
    18c6:	4618      	mov	r0, r3
    18c8:	f003 fc32 	bl	5130 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    18cc:	2300      	movs	r3, #0
    18ce:	f88d 300f 	strb.w	r3, [sp, #15]
    18d2:	e015      	b.n	1900 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    18d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18d8:	9a01      	ldr	r2, [sp, #4]
    18da:	334a      	adds	r3, #74	; 0x4a
    18dc:	00db      	lsls	r3, r3, #3
    18de:	4413      	add	r3, r2
    18e0:	6858      	ldr	r0, [r3, #4]
    18e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18e6:	9a01      	ldr	r2, [sp, #4]
    18e8:	334a      	adds	r3, #74	; 0x4a
    18ea:	00db      	lsls	r3, r3, #3
    18ec:	4413      	add	r3, r2
    18ee:	689b      	ldr	r3, [r3, #8]
    18f0:	4619      	mov	r1, r3
    18f2:	f001 fadc 	bl	2eae <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    18f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18fa:	3301      	adds	r3, #1
    18fc:	f88d 300f 	strb.w	r3, [sp, #15]
    1900:	9b01      	ldr	r3, [sp, #4]
    1902:	7bdb      	ldrb	r3, [r3, #15]
    1904:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1908:	429a      	cmp	r2, r3
    190a:	d3e3      	bcc.n	18d4 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    190c:	f000 f824 	bl	1958 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1910:	2301      	movs	r3, #1
    1912:	f88d 300f 	strb.w	r3, [sp, #15]
    1916:	e00e      	b.n	1936 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1918:	f89d 200f 	ldrb.w	r2, [sp, #15]
    191c:	9b01      	ldr	r3, [sp, #4]
    191e:	327e      	adds	r2, #126	; 0x7e
    1920:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1924:	490b      	ldr	r1, [pc, #44]	; (1954 <Clock_Ip_UpdateDriverContext+0xa0>)
    1926:	f89d 200f 	ldrb.w	r2, [sp, #15]
    192a:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    192c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1930:	3301      	adds	r3, #1
    1932:	f88d 300f 	strb.w	r3, [sp, #15]
    1936:	9b01      	ldr	r3, [sp, #4]
    1938:	7cdb      	ldrb	r3, [r3, #19]
    193a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    193e:	429a      	cmp	r2, r3
    1940:	d3ea      	bcc.n	1918 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1942:	bf00      	nop
    1944:	bf00      	nop
    1946:	b005      	add	sp, #20
    1948:	f85d fb04 	ldr.w	pc, [sp], #4
    194c:	1fff8b10 	.word	0x1fff8b10
    1950:	1fff8b60 	.word	0x1fff8b60
    1954:	1fff8b6c 	.word	0x1fff8b6c

00001958 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1958:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    195a:	4b23      	ldr	r3, [pc, #140]	; (19e8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    195c:	781b      	ldrb	r3, [r3, #0]
    195e:	f083 0301 	eor.w	r3, r3, #1
    1962:	b2db      	uxtb	r3, r3
    1964:	2b00      	cmp	r3, #0
    1966:	d03d      	beq.n	19e4 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1968:	4b1f      	ldr	r3, [pc, #124]	; (19e8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    196a:	2201      	movs	r2, #1
    196c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    196e:	4b1f      	ldr	r3, [pc, #124]	; (19ec <Clock_Ip_CallEmptyCallbacks+0x94>)
    1970:	685b      	ldr	r3, [r3, #4]
    1972:	2100      	movs	r1, #0
    1974:	2000      	movs	r0, #0
    1976:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1978:	4b1c      	ldr	r3, [pc, #112]	; (19ec <Clock_Ip_CallEmptyCallbacks+0x94>)
    197a:	689b      	ldr	r3, [r3, #8]
    197c:	2057      	movs	r0, #87	; 0x57
    197e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1980:	4b1b      	ldr	r3, [pc, #108]	; (19f0 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	2000      	movs	r0, #0
    1986:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1988:	4b1a      	ldr	r3, [pc, #104]	; (19f4 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	2000      	movs	r0, #0
    198e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1990:	4b19      	ldr	r3, [pc, #100]	; (19f8 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	2000      	movs	r0, #0
    1996:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1998:	4b18      	ldr	r3, [pc, #96]	; (19fc <Clock_Ip_CallEmptyCallbacks+0xa4>)
    199a:	685b      	ldr	r3, [r3, #4]
    199c:	2000      	movs	r0, #0
    199e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    19a0:	4b16      	ldr	r3, [pc, #88]	; (19fc <Clock_Ip_CallEmptyCallbacks+0xa4>)
    19a2:	689b      	ldr	r3, [r3, #8]
    19a4:	2057      	movs	r0, #87	; 0x57
    19a6:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    19a8:	4b15      	ldr	r3, [pc, #84]	; (1a00 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    19aa:	681b      	ldr	r3, [r3, #0]
    19ac:	2000      	movs	r0, #0
    19ae:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    19b0:	4b13      	ldr	r3, [pc, #76]	; (1a00 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    19b2:	685b      	ldr	r3, [r3, #4]
    19b4:	2100      	movs	r1, #0
    19b6:	2057      	movs	r0, #87	; 0x57
    19b8:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    19ba:	4b12      	ldr	r3, [pc, #72]	; (1a04 <Clock_Ip_CallEmptyCallbacks+0xac>)
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	2000      	movs	r0, #0
    19c0:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    19c2:	4b11      	ldr	r3, [pc, #68]	; (1a08 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    19c4:	685b      	ldr	r3, [r3, #4]
    19c6:	2000      	movs	r0, #0
    19c8:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    19ca:	4b0f      	ldr	r3, [pc, #60]	; (1a08 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    19cc:	689b      	ldr	r3, [r3, #8]
    19ce:	2057      	movs	r0, #87	; 0x57
    19d0:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    19d2:	4b0e      	ldr	r3, [pc, #56]	; (1a0c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    19d4:	685b      	ldr	r3, [r3, #4]
    19d6:	2000      	movs	r0, #0
    19d8:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    19da:	4b0d      	ldr	r3, [pc, #52]	; (1a10 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    19dc:	681b      	ldr	r3, [r3, #0]
    19de:	2100      	movs	r1, #0
    19e0:	2000      	movs	r0, #0
    19e2:	4798      	blx	r3
    }
}
    19e4:	bf00      	nop
    19e6:	bd08      	pop	{r3, pc}
    19e8:	1fff8b64 	.word	0x1fff8b64
    19ec:	00008340 	.word	0x00008340
    19f0:	00008254 	.word	0x00008254
    19f4:	00008290 	.word	0x00008290
    19f8:	00008298 	.word	0x00008298
    19fc:	000082c0 	.word	0x000082c0
    1a00:	000082cc 	.word	0x000082cc
    1a04:	00008304 	.word	0x00008304
    1a08:	00008350 	.word	0x00008350
    1a0c:	0000837c 	.word	0x0000837c
    1a10:	00008378 	.word	0x00008378

00001a14 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1a14:	b500      	push	{lr}
    1a16:	b085      	sub	sp, #20
    1a18:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1a1a:	9b01      	ldr	r3, [sp, #4]
    1a1c:	7adb      	ldrb	r3, [r3, #11]
    1a1e:	9303      	str	r3, [sp, #12]
    1a20:	e01f      	b.n	1a62 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1a22:	9b03      	ldr	r3, [sp, #12]
    1a24:	1e5a      	subs	r2, r3, #1
    1a26:	9b01      	ldr	r3, [sp, #4]
    1a28:	320d      	adds	r2, #13
    1a2a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1a2e:	495a      	ldr	r1, [pc, #360]	; (1b98 <Clock_Ip_ResetClockConfiguration+0x184>)
    1a30:	4613      	mov	r3, r2
    1a32:	00db      	lsls	r3, r3, #3
    1a34:	4413      	add	r3, r2
    1a36:	440b      	add	r3, r1
    1a38:	3301      	adds	r3, #1
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	461a      	mov	r2, r3
    1a3e:	4b57      	ldr	r3, [pc, #348]	; (1b9c <Clock_Ip_ResetClockConfiguration+0x188>)
    1a40:	5c9b      	ldrb	r3, [r3, r2]
    1a42:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1a44:	4a56      	ldr	r2, [pc, #344]	; (1ba0 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1a46:	9b02      	ldr	r3, [sp, #8]
    1a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1a4c:	9a03      	ldr	r2, [sp, #12]
    1a4e:	3a01      	subs	r2, #1
    1a50:	320d      	adds	r2, #13
    1a52:	00d2      	lsls	r2, r2, #3
    1a54:	9901      	ldr	r1, [sp, #4]
    1a56:	440a      	add	r2, r1
    1a58:	4610      	mov	r0, r2
    1a5a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1a5c:	9b03      	ldr	r3, [sp, #12]
    1a5e:	3b01      	subs	r3, #1
    1a60:	9303      	str	r3, [sp, #12]
    1a62:	9b03      	ldr	r3, [sp, #12]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d1dc      	bne.n	1a22 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1a68:	9b01      	ldr	r3, [sp, #4]
    1a6a:	7b9b      	ldrb	r3, [r3, #14]
    1a6c:	9303      	str	r3, [sp, #12]
    1a6e:	e026      	b.n	1abe <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1a70:	9b03      	ldr	r3, [sp, #12]
    1a72:	3b01      	subs	r3, #1
    1a74:	9a01      	ldr	r2, [sp, #4]
    1a76:	3324      	adds	r3, #36	; 0x24
    1a78:	011b      	lsls	r3, r3, #4
    1a7a:	4413      	add	r3, r2
    1a7c:	3304      	adds	r3, #4
    1a7e:	681a      	ldr	r2, [r3, #0]
    1a80:	4945      	ldr	r1, [pc, #276]	; (1b98 <Clock_Ip_ResetClockConfiguration+0x184>)
    1a82:	4613      	mov	r3, r2
    1a84:	00db      	lsls	r3, r3, #3
    1a86:	4413      	add	r3, r2
    1a88:	440b      	add	r3, r1
    1a8a:	3301      	adds	r3, #1
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	461a      	mov	r2, r3
    1a90:	4b44      	ldr	r3, [pc, #272]	; (1ba4 <Clock_Ip_ResetClockConfiguration+0x190>)
    1a92:	5c9b      	ldrb	r3, [r3, r2]
    1a94:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1a96:	4944      	ldr	r1, [pc, #272]	; (1ba8 <Clock_Ip_ResetClockConfiguration+0x194>)
    1a98:	9a02      	ldr	r2, [sp, #8]
    1a9a:	4613      	mov	r3, r2
    1a9c:	005b      	lsls	r3, r3, #1
    1a9e:	4413      	add	r3, r2
    1aa0:	009b      	lsls	r3, r3, #2
    1aa2:	440b      	add	r3, r1
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	9a03      	ldr	r2, [sp, #12]
    1aa8:	3a01      	subs	r2, #1
    1aaa:	3224      	adds	r2, #36	; 0x24
    1aac:	0112      	lsls	r2, r2, #4
    1aae:	9901      	ldr	r1, [sp, #4]
    1ab0:	440a      	add	r2, r1
    1ab2:	3204      	adds	r2, #4
    1ab4:	4610      	mov	r0, r2
    1ab6:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1ab8:	9b03      	ldr	r3, [sp, #12]
    1aba:	3b01      	subs	r3, #1
    1abc:	9303      	str	r3, [sp, #12]
    1abe:	9b03      	ldr	r3, [sp, #12]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d1d5      	bne.n	1a70 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1ac4:	9b01      	ldr	r3, [sp, #4]
    1ac6:	7a9b      	ldrb	r3, [r3, #10]
    1ac8:	9303      	str	r3, [sp, #12]
    1aca:	e02a      	b.n	1b22 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1acc:	9b03      	ldr	r3, [sp, #12]
    1ace:	1e5a      	subs	r2, r3, #1
    1ad0:	9901      	ldr	r1, [sp, #4]
    1ad2:	4613      	mov	r3, r2
    1ad4:	009b      	lsls	r3, r3, #2
    1ad6:	4413      	add	r3, r2
    1ad8:	00db      	lsls	r3, r3, #3
    1ada:	440b      	add	r3, r1
    1adc:	3340      	adds	r3, #64	; 0x40
    1ade:	681a      	ldr	r2, [r3, #0]
    1ae0:	492d      	ldr	r1, [pc, #180]	; (1b98 <Clock_Ip_ResetClockConfiguration+0x184>)
    1ae2:	4613      	mov	r3, r2
    1ae4:	00db      	lsls	r3, r3, #3
    1ae6:	4413      	add	r3, r2
    1ae8:	440b      	add	r3, r1
    1aea:	3301      	adds	r3, #1
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	461a      	mov	r2, r3
    1af0:	4b2e      	ldr	r3, [pc, #184]	; (1bac <Clock_Ip_ResetClockConfiguration+0x198>)
    1af2:	5c9b      	ldrb	r3, [r3, r2]
    1af4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1af6:	492e      	ldr	r1, [pc, #184]	; (1bb0 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1af8:	9a02      	ldr	r2, [sp, #8]
    1afa:	4613      	mov	r3, r2
    1afc:	009b      	lsls	r3, r3, #2
    1afe:	4413      	add	r3, r2
    1b00:	009b      	lsls	r3, r3, #2
    1b02:	440b      	add	r3, r1
    1b04:	6819      	ldr	r1, [r3, #0]
    1b06:	9b03      	ldr	r3, [sp, #12]
    1b08:	1e5a      	subs	r2, r3, #1
    1b0a:	4613      	mov	r3, r2
    1b0c:	009b      	lsls	r3, r3, #2
    1b0e:	4413      	add	r3, r2
    1b10:	00db      	lsls	r3, r3, #3
    1b12:	3340      	adds	r3, #64	; 0x40
    1b14:	9a01      	ldr	r2, [sp, #4]
    1b16:	4413      	add	r3, r2
    1b18:	4618      	mov	r0, r3
    1b1a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1b1c:	9b03      	ldr	r3, [sp, #12]
    1b1e:	3b01      	subs	r3, #1
    1b20:	9303      	str	r3, [sp, #12]
    1b22:	9b03      	ldr	r3, [sp, #12]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d1d1      	bne.n	1acc <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1b28:	9b01      	ldr	r3, [sp, #4]
    1b2a:	7a5b      	ldrb	r3, [r3, #9]
    1b2c:	9303      	str	r3, [sp, #12]
    1b2e:	e02b      	b.n	1b88 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1b30:	9b03      	ldr	r3, [sp, #12]
    1b32:	1e5a      	subs	r2, r3, #1
    1b34:	9901      	ldr	r1, [sp, #4]
    1b36:	4613      	mov	r3, r2
    1b38:	009b      	lsls	r3, r3, #2
    1b3a:	4413      	add	r3, r2
    1b3c:	009b      	lsls	r3, r3, #2
    1b3e:	440b      	add	r3, r1
    1b40:	332c      	adds	r3, #44	; 0x2c
    1b42:	681a      	ldr	r2, [r3, #0]
    1b44:	4914      	ldr	r1, [pc, #80]	; (1b98 <Clock_Ip_ResetClockConfiguration+0x184>)
    1b46:	4613      	mov	r3, r2
    1b48:	00db      	lsls	r3, r3, #3
    1b4a:	4413      	add	r3, r2
    1b4c:	440b      	add	r3, r1
    1b4e:	3301      	adds	r3, #1
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	461a      	mov	r2, r3
    1b54:	4b17      	ldr	r3, [pc, #92]	; (1bb4 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1b56:	5c9b      	ldrb	r3, [r3, r2]
    1b58:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1b5a:	4917      	ldr	r1, [pc, #92]	; (1bb8 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1b5c:	9a02      	ldr	r2, [sp, #8]
    1b5e:	4613      	mov	r3, r2
    1b60:	009b      	lsls	r3, r3, #2
    1b62:	4413      	add	r3, r2
    1b64:	009b      	lsls	r3, r3, #2
    1b66:	440b      	add	r3, r1
    1b68:	6819      	ldr	r1, [r3, #0]
    1b6a:	9b03      	ldr	r3, [sp, #12]
    1b6c:	1e5a      	subs	r2, r3, #1
    1b6e:	4613      	mov	r3, r2
    1b70:	009b      	lsls	r3, r3, #2
    1b72:	4413      	add	r3, r2
    1b74:	009b      	lsls	r3, r3, #2
    1b76:	3328      	adds	r3, #40	; 0x28
    1b78:	9a01      	ldr	r2, [sp, #4]
    1b7a:	4413      	add	r3, r2
    1b7c:	3304      	adds	r3, #4
    1b7e:	4618      	mov	r0, r3
    1b80:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1b82:	9b03      	ldr	r3, [sp, #12]
    1b84:	3b01      	subs	r3, #1
    1b86:	9303      	str	r3, [sp, #12]
    1b88:	9b03      	ldr	r3, [sp, #12]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d1d0      	bne.n	1b30 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1b8e:	bf00      	nop
    1b90:	bf00      	nop
    1b92:	b005      	add	sp, #20
    1b94:	f85d fb04 	ldr.w	pc, [sp], #4
    1b98:	00007d44 	.word	0x00007d44
    1b9c:	00007d14 	.word	0x00007d14
    1ba0:	0000837c 	.word	0x0000837c
    1ba4:	00007cf4 	.word	0x00007cf4
    1ba8:	000082c0 	.word	0x000082c0
    1bac:	00007d04 	.word	0x00007d04
    1bb0:	00008350 	.word	0x00008350
    1bb4:	00007cc4 	.word	0x00007cc4
    1bb8:	00008298 	.word	0x00008298

00001bbc <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1bbc:	b500      	push	{lr}
    1bbe:	b085      	sub	sp, #20
    1bc0:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1bc2:	2301      	movs	r3, #1
    1bc4:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1bc6:	9801      	ldr	r0, [sp, #4]
    1bc8:	f000 f818 	bl	1bfc <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1bcc:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <Clock_Ip_Init+0x3c>)
    1bce:	781b      	ldrb	r3, [r3, #0]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d00a      	beq.n	1bea <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1bd4:	f000 fb74 	bl	22c0 <Clock_Ip_GetPllStatus>
    1bd8:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1bda:	9b02      	ldr	r3, [sp, #8]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d106      	bne.n	1bee <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1be0:	f000 fbf2 	bl	23c8 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1be4:	2300      	movs	r3, #0
    1be6:	9303      	str	r3, [sp, #12]
    1be8:	e001      	b.n	1bee <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1bea:	2300      	movs	r3, #0
    1bec:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1bee:	9b03      	ldr	r3, [sp, #12]
}
    1bf0:	4618      	mov	r0, r3
    1bf2:	b005      	add	sp, #20
    1bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    1bf8:	1fff8b68 	.word	0x1fff8b68

00001bfc <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1bfc:	b510      	push	{r4, lr}
    1bfe:	b084      	sub	sp, #16
    1c00:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1c02:	4a9f      	ldr	r2, [pc, #636]	; (1e80 <Clock_Ip_InitClock+0x284>)
    1c04:	9b01      	ldr	r3, [sp, #4]
    1c06:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1c08:	2101      	movs	r1, #1
    1c0a:	9801      	ldr	r0, [sp, #4]
    1c0c:	f003 fa90 	bl	5130 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1c10:	4b9b      	ldr	r3, [pc, #620]	; (1e80 <Clock_Ip_InitClock+0x284>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d030      	beq.n	1c7a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1c18:	2300      	movs	r3, #0
    1c1a:	9303      	str	r3, [sp, #12]
    1c1c:	e027      	b.n	1c6e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1c1e:	9901      	ldr	r1, [sp, #4]
    1c20:	9a03      	ldr	r2, [sp, #12]
    1c22:	4613      	mov	r3, r2
    1c24:	009b      	lsls	r3, r3, #2
    1c26:	4413      	add	r3, r2
    1c28:	009b      	lsls	r3, r3, #2
    1c2a:	440b      	add	r3, r1
    1c2c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1c30:	681a      	ldr	r2, [r3, #0]
    1c32:	4994      	ldr	r1, [pc, #592]	; (1e84 <Clock_Ip_InitClock+0x288>)
    1c34:	4613      	mov	r3, r2
    1c36:	00db      	lsls	r3, r3, #3
    1c38:	4413      	add	r3, r2
    1c3a:	440b      	add	r3, r1
    1c3c:	3301      	adds	r3, #1
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	461a      	mov	r2, r3
    1c42:	4b91      	ldr	r3, [pc, #580]	; (1e88 <Clock_Ip_InitClock+0x28c>)
    1c44:	5c9b      	ldrb	r3, [r3, r2]
    1c46:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1c48:	4a90      	ldr	r2, [pc, #576]	; (1e8c <Clock_Ip_InitClock+0x290>)
    1c4a:	9b02      	ldr	r3, [sp, #8]
    1c4c:	011b      	lsls	r3, r3, #4
    1c4e:	4413      	add	r3, r2
    1c50:	6819      	ldr	r1, [r3, #0]
    1c52:	9a03      	ldr	r2, [sp, #12]
    1c54:	4613      	mov	r3, r2
    1c56:	009b      	lsls	r3, r3, #2
    1c58:	4413      	add	r3, r2
    1c5a:	009b      	lsls	r3, r3, #2
    1c5c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1c60:	9a01      	ldr	r2, [sp, #4]
    1c62:	4413      	add	r3, r2
    1c64:	4618      	mov	r0, r3
    1c66:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1c68:	9b03      	ldr	r3, [sp, #12]
    1c6a:	3301      	adds	r3, #1
    1c6c:	9303      	str	r3, [sp, #12]
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	7c9b      	ldrb	r3, [r3, #18]
    1c72:	461a      	mov	r2, r3
    1c74:	9b03      	ldr	r3, [sp, #12]
    1c76:	4293      	cmp	r3, r2
    1c78:	d3d1      	bcc.n	1c1e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1c7a:	9801      	ldr	r0, [sp, #4]
    1c7c:	f7ff feca 	bl	1a14 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1c80:	2300      	movs	r3, #0
    1c82:	9303      	str	r3, [sp, #12]
    1c84:	e029      	b.n	1cda <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1c86:	9901      	ldr	r1, [sp, #4]
    1c88:	9a03      	ldr	r2, [sp, #12]
    1c8a:	4613      	mov	r3, r2
    1c8c:	005b      	lsls	r3, r3, #1
    1c8e:	4413      	add	r3, r2
    1c90:	009b      	lsls	r3, r3, #2
    1c92:	440b      	add	r3, r1
    1c94:	3314      	adds	r3, #20
    1c96:	681a      	ldr	r2, [r3, #0]
    1c98:	497a      	ldr	r1, [pc, #488]	; (1e84 <Clock_Ip_InitClock+0x288>)
    1c9a:	4613      	mov	r3, r2
    1c9c:	00db      	lsls	r3, r3, #3
    1c9e:	4413      	add	r3, r2
    1ca0:	440b      	add	r3, r1
    1ca2:	3301      	adds	r3, #1
    1ca4:	781b      	ldrb	r3, [r3, #0]
    1ca6:	461a      	mov	r2, r3
    1ca8:	4b79      	ldr	r3, [pc, #484]	; (1e90 <Clock_Ip_InitClock+0x294>)
    1caa:	5c9b      	ldrb	r3, [r3, r2]
    1cac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1cae:	4979      	ldr	r1, [pc, #484]	; (1e94 <Clock_Ip_InitClock+0x298>)
    1cb0:	9a02      	ldr	r2, [sp, #8]
    1cb2:	4613      	mov	r3, r2
    1cb4:	005b      	lsls	r3, r3, #1
    1cb6:	4413      	add	r3, r2
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	440b      	add	r3, r1
    1cbc:	6819      	ldr	r1, [r3, #0]
    1cbe:	9a03      	ldr	r2, [sp, #12]
    1cc0:	4613      	mov	r3, r2
    1cc2:	005b      	lsls	r3, r3, #1
    1cc4:	4413      	add	r3, r2
    1cc6:	009b      	lsls	r3, r3, #2
    1cc8:	3310      	adds	r3, #16
    1cca:	9a01      	ldr	r2, [sp, #4]
    1ccc:	4413      	add	r3, r2
    1cce:	3304      	adds	r3, #4
    1cd0:	4618      	mov	r0, r3
    1cd2:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1cd4:	9b03      	ldr	r3, [sp, #12]
    1cd6:	3301      	adds	r3, #1
    1cd8:	9303      	str	r3, [sp, #12]
    1cda:	9b01      	ldr	r3, [sp, #4]
    1cdc:	7a1b      	ldrb	r3, [r3, #8]
    1cde:	461a      	mov	r2, r3
    1ce0:	9b03      	ldr	r3, [sp, #12]
    1ce2:	4293      	cmp	r3, r2
    1ce4:	d3cf      	bcc.n	1c86 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1ce6:	2300      	movs	r3, #0
    1ce8:	9303      	str	r3, [sp, #12]
    1cea:	e02a      	b.n	1d42 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1cec:	9901      	ldr	r1, [sp, #4]
    1cee:	9a03      	ldr	r2, [sp, #12]
    1cf0:	4613      	mov	r3, r2
    1cf2:	009b      	lsls	r3, r3, #2
    1cf4:	4413      	add	r3, r2
    1cf6:	009b      	lsls	r3, r3, #2
    1cf8:	440b      	add	r3, r1
    1cfa:	332c      	adds	r3, #44	; 0x2c
    1cfc:	681a      	ldr	r2, [r3, #0]
    1cfe:	4961      	ldr	r1, [pc, #388]	; (1e84 <Clock_Ip_InitClock+0x288>)
    1d00:	4613      	mov	r3, r2
    1d02:	00db      	lsls	r3, r3, #3
    1d04:	4413      	add	r3, r2
    1d06:	440b      	add	r3, r1
    1d08:	3301      	adds	r3, #1
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	461a      	mov	r2, r3
    1d0e:	4b62      	ldr	r3, [pc, #392]	; (1e98 <Clock_Ip_InitClock+0x29c>)
    1d10:	5c9b      	ldrb	r3, [r3, r2]
    1d12:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1d14:	4961      	ldr	r1, [pc, #388]	; (1e9c <Clock_Ip_InitClock+0x2a0>)
    1d16:	9a02      	ldr	r2, [sp, #8]
    1d18:	4613      	mov	r3, r2
    1d1a:	009b      	lsls	r3, r3, #2
    1d1c:	4413      	add	r3, r2
    1d1e:	009b      	lsls	r3, r3, #2
    1d20:	440b      	add	r3, r1
    1d22:	3304      	adds	r3, #4
    1d24:	6819      	ldr	r1, [r3, #0]
    1d26:	9a03      	ldr	r2, [sp, #12]
    1d28:	4613      	mov	r3, r2
    1d2a:	009b      	lsls	r3, r3, #2
    1d2c:	4413      	add	r3, r2
    1d2e:	009b      	lsls	r3, r3, #2
    1d30:	3328      	adds	r3, #40	; 0x28
    1d32:	9a01      	ldr	r2, [sp, #4]
    1d34:	4413      	add	r3, r2
    1d36:	3304      	adds	r3, #4
    1d38:	4618      	mov	r0, r3
    1d3a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1d3c:	9b03      	ldr	r3, [sp, #12]
    1d3e:	3301      	adds	r3, #1
    1d40:	9303      	str	r3, [sp, #12]
    1d42:	9b01      	ldr	r3, [sp, #4]
    1d44:	7a5b      	ldrb	r3, [r3, #9]
    1d46:	461a      	mov	r2, r3
    1d48:	9b03      	ldr	r3, [sp, #12]
    1d4a:	4293      	cmp	r3, r2
    1d4c:	d3ce      	bcc.n	1cec <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1d4e:	9801      	ldr	r0, [sp, #4]
    1d50:	f7ff fdb0 	bl	18b4 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1d54:	2300      	movs	r3, #0
    1d56:	9303      	str	r3, [sp, #12]
    1d58:	e028      	b.n	1dac <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1d5a:	9901      	ldr	r1, [sp, #4]
    1d5c:	9a03      	ldr	r2, [sp, #12]
    1d5e:	4613      	mov	r3, r2
    1d60:	009b      	lsls	r3, r3, #2
    1d62:	4413      	add	r3, r2
    1d64:	009b      	lsls	r3, r3, #2
    1d66:	440b      	add	r3, r1
    1d68:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1d6c:	681a      	ldr	r2, [r3, #0]
    1d6e:	4945      	ldr	r1, [pc, #276]	; (1e84 <Clock_Ip_InitClock+0x288>)
    1d70:	4613      	mov	r3, r2
    1d72:	00db      	lsls	r3, r3, #3
    1d74:	4413      	add	r3, r2
    1d76:	440b      	add	r3, r1
    1d78:	3301      	adds	r3, #1
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	461a      	mov	r2, r3
    1d7e:	4b48      	ldr	r3, [pc, #288]	; (1ea0 <Clock_Ip_InitClock+0x2a4>)
    1d80:	5c9b      	ldrb	r3, [r3, r2]
    1d82:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1d84:	4a47      	ldr	r2, [pc, #284]	; (1ea4 <Clock_Ip_InitClock+0x2a8>)
    1d86:	9b02      	ldr	r3, [sp, #8]
    1d88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1d8c:	9a03      	ldr	r2, [sp, #12]
    1d8e:	4613      	mov	r3, r2
    1d90:	009b      	lsls	r3, r3, #2
    1d92:	4413      	add	r3, r2
    1d94:	009b      	lsls	r3, r3, #2
    1d96:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1d9a:	9a01      	ldr	r2, [sp, #4]
    1d9c:	4413      	add	r3, r2
    1d9e:	3304      	adds	r3, #4
    1da0:	9903      	ldr	r1, [sp, #12]
    1da2:	4618      	mov	r0, r3
    1da4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1da6:	9b03      	ldr	r3, [sp, #12]
    1da8:	3301      	adds	r3, #1
    1daa:	9303      	str	r3, [sp, #12]
    1dac:	9b01      	ldr	r3, [sp, #4]
    1dae:	7c5b      	ldrb	r3, [r3, #17]
    1db0:	461a      	mov	r2, r3
    1db2:	9b03      	ldr	r3, [sp, #12]
    1db4:	4293      	cmp	r3, r2
    1db6:	d3d0      	bcc.n	1d5a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1db8:	2300      	movs	r3, #0
    1dba:	9303      	str	r3, [sp, #12]
    1dbc:	e026      	b.n	1e0c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1dbe:	9901      	ldr	r1, [sp, #4]
    1dc0:	9a03      	ldr	r2, [sp, #12]
    1dc2:	4613      	mov	r3, r2
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	4413      	add	r3, r2
    1dc8:	009b      	lsls	r3, r3, #2
    1dca:	440b      	add	r3, r1
    1dcc:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1dd0:	681a      	ldr	r2, [r3, #0]
    1dd2:	492c      	ldr	r1, [pc, #176]	; (1e84 <Clock_Ip_InitClock+0x288>)
    1dd4:	4613      	mov	r3, r2
    1dd6:	00db      	lsls	r3, r3, #3
    1dd8:	4413      	add	r3, r2
    1dda:	440b      	add	r3, r1
    1ddc:	3301      	adds	r3, #1
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	461a      	mov	r2, r3
    1de2:	4b31      	ldr	r3, [pc, #196]	; (1ea8 <Clock_Ip_InitClock+0x2ac>)
    1de4:	5c9b      	ldrb	r3, [r3, r2]
    1de6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1de8:	4a30      	ldr	r2, [pc, #192]	; (1eac <Clock_Ip_InitClock+0x2b0>)
    1dea:	9b02      	ldr	r3, [sp, #8]
    1dec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1df0:	9a03      	ldr	r2, [sp, #12]
    1df2:	4613      	mov	r3, r2
    1df4:	005b      	lsls	r3, r3, #1
    1df6:	4413      	add	r3, r2
    1df8:	009b      	lsls	r3, r3, #2
    1dfa:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1dfe:	9a01      	ldr	r2, [sp, #4]
    1e00:	4413      	add	r3, r2
    1e02:	4618      	mov	r0, r3
    1e04:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1e06:	9b03      	ldr	r3, [sp, #12]
    1e08:	3301      	adds	r3, #1
    1e0a:	9303      	str	r3, [sp, #12]
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	7b5b      	ldrb	r3, [r3, #13]
    1e10:	461a      	mov	r2, r3
    1e12:	9b03      	ldr	r3, [sp, #12]
    1e14:	4293      	cmp	r3, r2
    1e16:	d3d2      	bcc.n	1dbe <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1e18:	2300      	movs	r3, #0
    1e1a:	9303      	str	r3, [sp, #12]
    1e1c:	e026      	b.n	1e6c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1e1e:	9901      	ldr	r1, [sp, #4]
    1e20:	9a03      	ldr	r2, [sp, #12]
    1e22:	4613      	mov	r3, r2
    1e24:	005b      	lsls	r3, r3, #1
    1e26:	4413      	add	r3, r2
    1e28:	009b      	lsls	r3, r3, #2
    1e2a:	440b      	add	r3, r1
    1e2c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1e30:	681a      	ldr	r2, [r3, #0]
    1e32:	4914      	ldr	r1, [pc, #80]	; (1e84 <Clock_Ip_InitClock+0x288>)
    1e34:	4613      	mov	r3, r2
    1e36:	00db      	lsls	r3, r3, #3
    1e38:	4413      	add	r3, r2
    1e3a:	440b      	add	r3, r1
    1e3c:	3301      	adds	r3, #1
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	461a      	mov	r2, r3
    1e42:	4b1b      	ldr	r3, [pc, #108]	; (1eb0 <Clock_Ip_InitClock+0x2b4>)
    1e44:	5c9b      	ldrb	r3, [r3, r2]
    1e46:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1e48:	4a1a      	ldr	r2, [pc, #104]	; (1eb4 <Clock_Ip_InitClock+0x2b8>)
    1e4a:	9b02      	ldr	r3, [sp, #8]
    1e4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1e50:	9a03      	ldr	r2, [sp, #12]
    1e52:	4613      	mov	r3, r2
    1e54:	005b      	lsls	r3, r3, #1
    1e56:	4413      	add	r3, r2
    1e58:	009b      	lsls	r3, r3, #2
    1e5a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1e5e:	9a01      	ldr	r2, [sp, #4]
    1e60:	4413      	add	r3, r2
    1e62:	4618      	mov	r0, r3
    1e64:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1e66:	9b03      	ldr	r3, [sp, #12]
    1e68:	3301      	adds	r3, #1
    1e6a:	9303      	str	r3, [sp, #12]
    1e6c:	9b01      	ldr	r3, [sp, #4]
    1e6e:	7b1b      	ldrb	r3, [r3, #12]
    1e70:	461a      	mov	r2, r3
    1e72:	9b03      	ldr	r3, [sp, #12]
    1e74:	4293      	cmp	r3, r2
    1e76:	d3d2      	bcc.n	1e1e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1e78:	2300      	movs	r3, #0
    1e7a:	9303      	str	r3, [sp, #12]
    1e7c:	e044      	b.n	1f08 <Clock_Ip_InitClock+0x30c>
    1e7e:	bf00      	nop
    1e80:	1fff8b60 	.word	0x1fff8b60
    1e84:	00007d44 	.word	0x00007d44
    1e88:	00007d34 	.word	0x00007d34
    1e8c:	00008340 	.word	0x00008340
    1e90:	00007cd4 	.word	0x00007cd4
    1e94:	00008304 	.word	0x00008304
    1e98:	00007cc4 	.word	0x00007cc4
    1e9c:	00008298 	.word	0x00008298
    1ea0:	00007d24 	.word	0x00007d24
    1ea4:	00008378 	.word	0x00008378
    1ea8:	00007cb4 	.word	0x00007cb4
    1eac:	00008290 	.word	0x00008290
    1eb0:	00007ca4 	.word	0x00007ca4
    1eb4:	00008254 	.word	0x00008254
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1eb8:	9901      	ldr	r1, [sp, #4]
    1eba:	9a03      	ldr	r2, [sp, #12]
    1ebc:	4613      	mov	r3, r2
    1ebe:	005b      	lsls	r3, r3, #1
    1ec0:	4413      	add	r3, r2
    1ec2:	009b      	lsls	r3, r3, #2
    1ec4:	440b      	add	r3, r1
    1ec6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1eca:	681a      	ldr	r2, [r3, #0]
    1ecc:	49ac      	ldr	r1, [pc, #688]	; (2180 <Clock_Ip_InitClock+0x584>)
    1ece:	4613      	mov	r3, r2
    1ed0:	00db      	lsls	r3, r3, #3
    1ed2:	4413      	add	r3, r2
    1ed4:	440b      	add	r3, r1
    1ed6:	3301      	adds	r3, #1
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	461a      	mov	r2, r3
    1edc:	4ba9      	ldr	r3, [pc, #676]	; (2184 <Clock_Ip_InitClock+0x588>)
    1ede:	5c9b      	ldrb	r3, [r3, r2]
    1ee0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1ee2:	4aa9      	ldr	r2, [pc, #676]	; (2188 <Clock_Ip_InitClock+0x58c>)
    1ee4:	9b02      	ldr	r3, [sp, #8]
    1ee6:	00db      	lsls	r3, r3, #3
    1ee8:	4413      	add	r3, r2
    1eea:	6859      	ldr	r1, [r3, #4]
    1eec:	9a03      	ldr	r2, [sp, #12]
    1eee:	4613      	mov	r3, r2
    1ef0:	005b      	lsls	r3, r3, #1
    1ef2:	4413      	add	r3, r2
    1ef4:	009b      	lsls	r3, r3, #2
    1ef6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1efa:	9a01      	ldr	r2, [sp, #4]
    1efc:	4413      	add	r3, r2
    1efe:	4618      	mov	r0, r3
    1f00:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1f02:	9b03      	ldr	r3, [sp, #12]
    1f04:	3301      	adds	r3, #1
    1f06:	9303      	str	r3, [sp, #12]
    1f08:	9b01      	ldr	r3, [sp, #4]
    1f0a:	7b5b      	ldrb	r3, [r3, #13]
    1f0c:	461a      	mov	r2, r3
    1f0e:	9b03      	ldr	r3, [sp, #12]
    1f10:	4293      	cmp	r3, r2
    1f12:	d3d1      	bcc.n	1eb8 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1f14:	2300      	movs	r3, #0
    1f16:	9303      	str	r3, [sp, #12]
    1f18:	e029      	b.n	1f6e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1f1a:	9901      	ldr	r1, [sp, #4]
    1f1c:	9a03      	ldr	r2, [sp, #12]
    1f1e:	4613      	mov	r3, r2
    1f20:	009b      	lsls	r3, r3, #2
    1f22:	4413      	add	r3, r2
    1f24:	00db      	lsls	r3, r3, #3
    1f26:	440b      	add	r3, r1
    1f28:	3340      	adds	r3, #64	; 0x40
    1f2a:	681a      	ldr	r2, [r3, #0]
    1f2c:	4994      	ldr	r1, [pc, #592]	; (2180 <Clock_Ip_InitClock+0x584>)
    1f2e:	4613      	mov	r3, r2
    1f30:	00db      	lsls	r3, r3, #3
    1f32:	4413      	add	r3, r2
    1f34:	440b      	add	r3, r1
    1f36:	3301      	adds	r3, #1
    1f38:	781b      	ldrb	r3, [r3, #0]
    1f3a:	461a      	mov	r2, r3
    1f3c:	4b93      	ldr	r3, [pc, #588]	; (218c <Clock_Ip_InitClock+0x590>)
    1f3e:	5c9b      	ldrb	r3, [r3, r2]
    1f40:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1f42:	4993      	ldr	r1, [pc, #588]	; (2190 <Clock_Ip_InitClock+0x594>)
    1f44:	9a02      	ldr	r2, [sp, #8]
    1f46:	4613      	mov	r3, r2
    1f48:	009b      	lsls	r3, r3, #2
    1f4a:	4413      	add	r3, r2
    1f4c:	009b      	lsls	r3, r3, #2
    1f4e:	440b      	add	r3, r1
    1f50:	3304      	adds	r3, #4
    1f52:	6819      	ldr	r1, [r3, #0]
    1f54:	9a03      	ldr	r2, [sp, #12]
    1f56:	4613      	mov	r3, r2
    1f58:	009b      	lsls	r3, r3, #2
    1f5a:	4413      	add	r3, r2
    1f5c:	00db      	lsls	r3, r3, #3
    1f5e:	3340      	adds	r3, #64	; 0x40
    1f60:	9a01      	ldr	r2, [sp, #4]
    1f62:	4413      	add	r3, r2
    1f64:	4618      	mov	r0, r3
    1f66:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1f68:	9b03      	ldr	r3, [sp, #12]
    1f6a:	3301      	adds	r3, #1
    1f6c:	9303      	str	r3, [sp, #12]
    1f6e:	9b01      	ldr	r3, [sp, #4]
    1f70:	7a9b      	ldrb	r3, [r3, #10]
    1f72:	461a      	mov	r2, r3
    1f74:	9b03      	ldr	r3, [sp, #12]
    1f76:	4293      	cmp	r3, r2
    1f78:	d3cf      	bcc.n	1f1a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1f7a:	2300      	movs	r3, #0
    1f7c:	9303      	str	r3, [sp, #12]
    1f7e:	e029      	b.n	1fd4 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f80:	9901      	ldr	r1, [sp, #4]
    1f82:	9a03      	ldr	r2, [sp, #12]
    1f84:	4613      	mov	r3, r2
    1f86:	009b      	lsls	r3, r3, #2
    1f88:	4413      	add	r3, r2
    1f8a:	009b      	lsls	r3, r3, #2
    1f8c:	440b      	add	r3, r1
    1f8e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f92:	681a      	ldr	r2, [r3, #0]
    1f94:	497a      	ldr	r1, [pc, #488]	; (2180 <Clock_Ip_InitClock+0x584>)
    1f96:	4613      	mov	r3, r2
    1f98:	00db      	lsls	r3, r3, #3
    1f9a:	4413      	add	r3, r2
    1f9c:	440b      	add	r3, r1
    1f9e:	3301      	adds	r3, #1
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	461a      	mov	r2, r3
    1fa4:	4b7b      	ldr	r3, [pc, #492]	; (2194 <Clock_Ip_InitClock+0x598>)
    1fa6:	5c9b      	ldrb	r3, [r3, r2]
    1fa8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1faa:	4a7b      	ldr	r2, [pc, #492]	; (2198 <Clock_Ip_InitClock+0x59c>)
    1fac:	9b02      	ldr	r3, [sp, #8]
    1fae:	011b      	lsls	r3, r3, #4
    1fb0:	4413      	add	r3, r2
    1fb2:	3304      	adds	r3, #4
    1fb4:	681c      	ldr	r4, [r3, #0]
    1fb6:	9a03      	ldr	r2, [sp, #12]
    1fb8:	4613      	mov	r3, r2
    1fba:	009b      	lsls	r3, r3, #2
    1fbc:	4413      	add	r3, r2
    1fbe:	009b      	lsls	r3, r3, #2
    1fc0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1fc4:	9a01      	ldr	r2, [sp, #4]
    1fc6:	4413      	add	r3, r2
    1fc8:	9903      	ldr	r1, [sp, #12]
    1fca:	4618      	mov	r0, r3
    1fcc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1fce:	9b03      	ldr	r3, [sp, #12]
    1fd0:	3301      	adds	r3, #1
    1fd2:	9303      	str	r3, [sp, #12]
    1fd4:	9b01      	ldr	r3, [sp, #4]
    1fd6:	7c9b      	ldrb	r3, [r3, #18]
    1fd8:	461a      	mov	r2, r3
    1fda:	9b03      	ldr	r3, [sp, #12]
    1fdc:	4293      	cmp	r3, r2
    1fde:	d3cf      	bcc.n	1f80 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1fe0:	2300      	movs	r3, #0
    1fe2:	9303      	str	r3, [sp, #12]
    1fe4:	e02a      	b.n	203c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1fe6:	9901      	ldr	r1, [sp, #4]
    1fe8:	9a03      	ldr	r2, [sp, #12]
    1fea:	4613      	mov	r3, r2
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	4413      	add	r3, r2
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	440b      	add	r3, r1
    1ff4:	332c      	adds	r3, #44	; 0x2c
    1ff6:	681a      	ldr	r2, [r3, #0]
    1ff8:	4961      	ldr	r1, [pc, #388]	; (2180 <Clock_Ip_InitClock+0x584>)
    1ffa:	4613      	mov	r3, r2
    1ffc:	00db      	lsls	r3, r3, #3
    1ffe:	4413      	add	r3, r2
    2000:	440b      	add	r3, r1
    2002:	3301      	adds	r3, #1
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	461a      	mov	r2, r3
    2008:	4b64      	ldr	r3, [pc, #400]	; (219c <Clock_Ip_InitClock+0x5a0>)
    200a:	5c9b      	ldrb	r3, [r3, r2]
    200c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    200e:	4964      	ldr	r1, [pc, #400]	; (21a0 <Clock_Ip_InitClock+0x5a4>)
    2010:	9a02      	ldr	r2, [sp, #8]
    2012:	4613      	mov	r3, r2
    2014:	009b      	lsls	r3, r3, #2
    2016:	4413      	add	r3, r2
    2018:	009b      	lsls	r3, r3, #2
    201a:	440b      	add	r3, r1
    201c:	3308      	adds	r3, #8
    201e:	6819      	ldr	r1, [r3, #0]
    2020:	9a03      	ldr	r2, [sp, #12]
    2022:	4613      	mov	r3, r2
    2024:	009b      	lsls	r3, r3, #2
    2026:	4413      	add	r3, r2
    2028:	009b      	lsls	r3, r3, #2
    202a:	3328      	adds	r3, #40	; 0x28
    202c:	9a01      	ldr	r2, [sp, #4]
    202e:	4413      	add	r3, r2
    2030:	3304      	adds	r3, #4
    2032:	4618      	mov	r0, r3
    2034:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	3301      	adds	r3, #1
    203a:	9303      	str	r3, [sp, #12]
    203c:	9b01      	ldr	r3, [sp, #4]
    203e:	7a5b      	ldrb	r3, [r3, #9]
    2040:	461a      	mov	r2, r3
    2042:	9b03      	ldr	r3, [sp, #12]
    2044:	4293      	cmp	r3, r2
    2046:	d3ce      	bcc.n	1fe6 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2048:	2300      	movs	r3, #0
    204a:	9303      	str	r3, [sp, #12]
    204c:	e029      	b.n	20a2 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    204e:	9901      	ldr	r1, [sp, #4]
    2050:	9a03      	ldr	r2, [sp, #12]
    2052:	4613      	mov	r3, r2
    2054:	009b      	lsls	r3, r3, #2
    2056:	4413      	add	r3, r2
    2058:	00db      	lsls	r3, r3, #3
    205a:	440b      	add	r3, r1
    205c:	3340      	adds	r3, #64	; 0x40
    205e:	681a      	ldr	r2, [r3, #0]
    2060:	4947      	ldr	r1, [pc, #284]	; (2180 <Clock_Ip_InitClock+0x584>)
    2062:	4613      	mov	r3, r2
    2064:	00db      	lsls	r3, r3, #3
    2066:	4413      	add	r3, r2
    2068:	440b      	add	r3, r1
    206a:	3301      	adds	r3, #1
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	461a      	mov	r2, r3
    2070:	4b46      	ldr	r3, [pc, #280]	; (218c <Clock_Ip_InitClock+0x590>)
    2072:	5c9b      	ldrb	r3, [r3, r2]
    2074:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2076:	4946      	ldr	r1, [pc, #280]	; (2190 <Clock_Ip_InitClock+0x594>)
    2078:	9a02      	ldr	r2, [sp, #8]
    207a:	4613      	mov	r3, r2
    207c:	009b      	lsls	r3, r3, #2
    207e:	4413      	add	r3, r2
    2080:	009b      	lsls	r3, r3, #2
    2082:	440b      	add	r3, r1
    2084:	330c      	adds	r3, #12
    2086:	6819      	ldr	r1, [r3, #0]
    2088:	9a03      	ldr	r2, [sp, #12]
    208a:	4613      	mov	r3, r2
    208c:	009b      	lsls	r3, r3, #2
    208e:	4413      	add	r3, r2
    2090:	00db      	lsls	r3, r3, #3
    2092:	3340      	adds	r3, #64	; 0x40
    2094:	9a01      	ldr	r2, [sp, #4]
    2096:	4413      	add	r3, r2
    2098:	4618      	mov	r0, r3
    209a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    209c:	9b03      	ldr	r3, [sp, #12]
    209e:	3301      	adds	r3, #1
    20a0:	9303      	str	r3, [sp, #12]
    20a2:	9b01      	ldr	r3, [sp, #4]
    20a4:	7a9b      	ldrb	r3, [r3, #10]
    20a6:	461a      	mov	r2, r3
    20a8:	9b03      	ldr	r3, [sp, #12]
    20aa:	4293      	cmp	r3, r2
    20ac:	d3cf      	bcc.n	204e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    20ae:	2300      	movs	r3, #0
    20b0:	9303      	str	r3, [sp, #12]
    20b2:	e025      	b.n	2100 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    20b4:	9a01      	ldr	r2, [sp, #4]
    20b6:	9b03      	ldr	r3, [sp, #12]
    20b8:	3324      	adds	r3, #36	; 0x24
    20ba:	011b      	lsls	r3, r3, #4
    20bc:	4413      	add	r3, r2
    20be:	3304      	adds	r3, #4
    20c0:	681a      	ldr	r2, [r3, #0]
    20c2:	492f      	ldr	r1, [pc, #188]	; (2180 <Clock_Ip_InitClock+0x584>)
    20c4:	4613      	mov	r3, r2
    20c6:	00db      	lsls	r3, r3, #3
    20c8:	4413      	add	r3, r2
    20ca:	440b      	add	r3, r1
    20cc:	3301      	adds	r3, #1
    20ce:	781b      	ldrb	r3, [r3, #0]
    20d0:	461a      	mov	r2, r3
    20d2:	4b34      	ldr	r3, [pc, #208]	; (21a4 <Clock_Ip_InitClock+0x5a8>)
    20d4:	5c9b      	ldrb	r3, [r3, r2]
    20d6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    20d8:	4933      	ldr	r1, [pc, #204]	; (21a8 <Clock_Ip_InitClock+0x5ac>)
    20da:	9a02      	ldr	r2, [sp, #8]
    20dc:	4613      	mov	r3, r2
    20de:	005b      	lsls	r3, r3, #1
    20e0:	4413      	add	r3, r2
    20e2:	009b      	lsls	r3, r3, #2
    20e4:	440b      	add	r3, r1
    20e6:	3304      	adds	r3, #4
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	9a03      	ldr	r2, [sp, #12]
    20ec:	3224      	adds	r2, #36	; 0x24
    20ee:	0112      	lsls	r2, r2, #4
    20f0:	9901      	ldr	r1, [sp, #4]
    20f2:	440a      	add	r2, r1
    20f4:	3204      	adds	r2, #4
    20f6:	4610      	mov	r0, r2
    20f8:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    20fa:	9b03      	ldr	r3, [sp, #12]
    20fc:	3301      	adds	r3, #1
    20fe:	9303      	str	r3, [sp, #12]
    2100:	9b01      	ldr	r3, [sp, #4]
    2102:	7b9b      	ldrb	r3, [r3, #14]
    2104:	461a      	mov	r2, r3
    2106:	9b03      	ldr	r3, [sp, #12]
    2108:	4293      	cmp	r3, r2
    210a:	d3d3      	bcc.n	20b4 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    210c:	4b27      	ldr	r3, [pc, #156]	; (21ac <Clock_Ip_InitClock+0x5b0>)
    210e:	2200      	movs	r2, #0
    2110:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2112:	4b26      	ldr	r3, [pc, #152]	; (21ac <Clock_Ip_InitClock+0x5b0>)
    2114:	2200      	movs	r2, #0
    2116:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2118:	4b24      	ldr	r3, [pc, #144]	; (21ac <Clock_Ip_InitClock+0x5b0>)
    211a:	2201      	movs	r2, #1
    211c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    211e:	4b23      	ldr	r3, [pc, #140]	; (21ac <Clock_Ip_InitClock+0x5b0>)
    2120:	2200      	movs	r2, #0
    2122:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2124:	f000 fa9c 	bl	2660 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2128:	2300      	movs	r3, #0
    212a:	9303      	str	r3, [sp, #12]
    212c:	e04c      	b.n	21c8 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    212e:	9a01      	ldr	r2, [sp, #4]
    2130:	9b03      	ldr	r3, [sp, #12]
    2132:	330d      	adds	r3, #13
    2134:	00db      	lsls	r3, r3, #3
    2136:	4413      	add	r3, r2
    2138:	685b      	ldr	r3, [r3, #4]
    213a:	4a1d      	ldr	r2, [pc, #116]	; (21b0 <Clock_Ip_InitClock+0x5b4>)
    213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2140:	2b03      	cmp	r3, #3
    2142:	d03b      	beq.n	21bc <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2144:	9b01      	ldr	r3, [sp, #4]
    2146:	9a03      	ldr	r2, [sp, #12]
    2148:	320d      	adds	r2, #13
    214a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    214e:	490c      	ldr	r1, [pc, #48]	; (2180 <Clock_Ip_InitClock+0x584>)
    2150:	4613      	mov	r3, r2
    2152:	00db      	lsls	r3, r3, #3
    2154:	4413      	add	r3, r2
    2156:	440b      	add	r3, r1
    2158:	3301      	adds	r3, #1
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	461a      	mov	r2, r3
    215e:	4b15      	ldr	r3, [pc, #84]	; (21b4 <Clock_Ip_InitClock+0x5b8>)
    2160:	5c9b      	ldrb	r3, [r3, r2]
    2162:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2164:	4a14      	ldr	r2, [pc, #80]	; (21b8 <Clock_Ip_InitClock+0x5bc>)
    2166:	9b02      	ldr	r3, [sp, #8]
    2168:	00db      	lsls	r3, r3, #3
    216a:	4413      	add	r3, r2
    216c:	685b      	ldr	r3, [r3, #4]
    216e:	9a03      	ldr	r2, [sp, #12]
    2170:	320d      	adds	r2, #13
    2172:	00d2      	lsls	r2, r2, #3
    2174:	9901      	ldr	r1, [sp, #4]
    2176:	440a      	add	r2, r1
    2178:	4610      	mov	r0, r2
    217a:	4798      	blx	r3
    217c:	e021      	b.n	21c2 <Clock_Ip_InitClock+0x5c6>
    217e:	bf00      	nop
    2180:	00007d44 	.word	0x00007d44
    2184:	00007cb4 	.word	0x00007cb4
    2188:	00008290 	.word	0x00008290
    218c:	00007d04 	.word	0x00007d04
    2190:	00008350 	.word	0x00008350
    2194:	00007d34 	.word	0x00007d34
    2198:	00008340 	.word	0x00008340
    219c:	00007cc4 	.word	0x00007cc4
    21a0:	00008298 	.word	0x00008298
    21a4:	00007cf4 	.word	0x00007cf4
    21a8:	000082c0 	.word	0x000082c0
    21ac:	1fff8b68 	.word	0x1fff8b68
    21b0:	00008190 	.word	0x00008190
    21b4:	00007d14 	.word	0x00007d14
    21b8:	0000837c 	.word	0x0000837c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    21bc:	4b3a      	ldr	r3, [pc, #232]	; (22a8 <Clock_Ip_InitClock+0x6ac>)
    21be:	2201      	movs	r2, #1
    21c0:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    21c2:	9b03      	ldr	r3, [sp, #12]
    21c4:	3301      	adds	r3, #1
    21c6:	9303      	str	r3, [sp, #12]
    21c8:	9b01      	ldr	r3, [sp, #4]
    21ca:	7adb      	ldrb	r3, [r3, #11]
    21cc:	461a      	mov	r2, r3
    21ce:	9b03      	ldr	r3, [sp, #12]
    21d0:	4293      	cmp	r3, r2
    21d2:	d3ac      	bcc.n	212e <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    21d4:	4b34      	ldr	r3, [pc, #208]	; (22a8 <Clock_Ip_InitClock+0x6ac>)
    21d6:	781b      	ldrb	r3, [r3, #0]
    21d8:	f083 0301 	eor.w	r3, r3, #1
    21dc:	b2db      	uxtb	r3, r3
    21de:	2b00      	cmp	r3, #0
    21e0:	d05e      	beq.n	22a0 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    21e2:	2300      	movs	r3, #0
    21e4:	9303      	str	r3, [sp, #12]
    21e6:	e01f      	b.n	2228 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    21e8:	9a01      	ldr	r2, [sp, #4]
    21ea:	9b03      	ldr	r3, [sp, #12]
    21ec:	334e      	adds	r3, #78	; 0x4e
    21ee:	00db      	lsls	r3, r3, #3
    21f0:	4413      	add	r3, r2
    21f2:	685a      	ldr	r2, [r3, #4]
    21f4:	492d      	ldr	r1, [pc, #180]	; (22ac <Clock_Ip_InitClock+0x6b0>)
    21f6:	4613      	mov	r3, r2
    21f8:	00db      	lsls	r3, r3, #3
    21fa:	4413      	add	r3, r2
    21fc:	440b      	add	r3, r1
    21fe:	3301      	adds	r3, #1
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	461a      	mov	r2, r3
    2204:	4b2a      	ldr	r3, [pc, #168]	; (22b0 <Clock_Ip_InitClock+0x6b4>)
    2206:	5c9b      	ldrb	r3, [r3, r2]
    2208:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    220a:	4a2a      	ldr	r2, [pc, #168]	; (22b4 <Clock_Ip_InitClock+0x6b8>)
    220c:	9b02      	ldr	r3, [sp, #8]
    220e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2212:	9a03      	ldr	r2, [sp, #12]
    2214:	324e      	adds	r2, #78	; 0x4e
    2216:	00d2      	lsls	r2, r2, #3
    2218:	9901      	ldr	r1, [sp, #4]
    221a:	440a      	add	r2, r1
    221c:	3204      	adds	r2, #4
    221e:	4610      	mov	r0, r2
    2220:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2222:	9b03      	ldr	r3, [sp, #12]
    2224:	3301      	adds	r3, #1
    2226:	9303      	str	r3, [sp, #12]
    2228:	9b01      	ldr	r3, [sp, #4]
    222a:	7c1b      	ldrb	r3, [r3, #16]
    222c:	461a      	mov	r2, r3
    222e:	9b03      	ldr	r3, [sp, #12]
    2230:	4293      	cmp	r3, r2
    2232:	d3d9      	bcc.n	21e8 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2234:	2300      	movs	r3, #0
    2236:	9303      	str	r3, [sp, #12]
    2238:	e028      	b.n	228c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    223a:	9901      	ldr	r1, [sp, #4]
    223c:	9a03      	ldr	r2, [sp, #12]
    223e:	4613      	mov	r3, r2
    2240:	009b      	lsls	r3, r3, #2
    2242:	4413      	add	r3, r2
    2244:	009b      	lsls	r3, r3, #2
    2246:	440b      	add	r3, r1
    2248:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    224c:	681a      	ldr	r2, [r3, #0]
    224e:	4917      	ldr	r1, [pc, #92]	; (22ac <Clock_Ip_InitClock+0x6b0>)
    2250:	4613      	mov	r3, r2
    2252:	00db      	lsls	r3, r3, #3
    2254:	4413      	add	r3, r2
    2256:	440b      	add	r3, r1
    2258:	3301      	adds	r3, #1
    225a:	781b      	ldrb	r3, [r3, #0]
    225c:	461a      	mov	r2, r3
    225e:	4b16      	ldr	r3, [pc, #88]	; (22b8 <Clock_Ip_InitClock+0x6bc>)
    2260:	5c9b      	ldrb	r3, [r3, r2]
    2262:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2264:	4a15      	ldr	r2, [pc, #84]	; (22bc <Clock_Ip_InitClock+0x6c0>)
    2266:	9b02      	ldr	r3, [sp, #8]
    2268:	011b      	lsls	r3, r3, #4
    226a:	4413      	add	r3, r2
    226c:	330c      	adds	r3, #12
    226e:	6819      	ldr	r1, [r3, #0]
    2270:	9a03      	ldr	r2, [sp, #12]
    2272:	4613      	mov	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	4413      	add	r3, r2
    2278:	009b      	lsls	r3, r3, #2
    227a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    227e:	9a01      	ldr	r2, [sp, #4]
    2280:	4413      	add	r3, r2
    2282:	4618      	mov	r0, r3
    2284:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2286:	9b03      	ldr	r3, [sp, #12]
    2288:	3301      	adds	r3, #1
    228a:	9303      	str	r3, [sp, #12]
    228c:	9b01      	ldr	r3, [sp, #4]
    228e:	7c9b      	ldrb	r3, [r3, #18]
    2290:	461a      	mov	r2, r3
    2292:	9b03      	ldr	r3, [sp, #12]
    2294:	4293      	cmp	r3, r2
    2296:	d3d0      	bcc.n	223a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2298:	2104      	movs	r1, #4
    229a:	9801      	ldr	r0, [sp, #4]
    229c:	f002 ff48 	bl	5130 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    22a0:	bf00      	nop
    22a2:	b004      	add	sp, #16
    22a4:	bd10      	pop	{r4, pc}
    22a6:	bf00      	nop
    22a8:	1fff8b68 	.word	0x1fff8b68
    22ac:	00007d44 	.word	0x00007d44
    22b0:	00007ce4 	.word	0x00007ce4
    22b4:	000082cc 	.word	0x000082cc
    22b8:	00007d34 	.word	0x00007d34
    22bc:	00008340 	.word	0x00008340

000022c0 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    22c0:	b500      	push	{lr}
    22c2:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    22c4:	2302      	movs	r3, #2
    22c6:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    22c8:	2300      	movs	r3, #0
    22ca:	9304      	str	r3, [sp, #16]
    22cc:	e02c      	b.n	2328 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    22ce:	4a36      	ldr	r2, [pc, #216]	; (23a8 <Clock_Ip_GetPllStatus+0xe8>)
    22d0:	9b04      	ldr	r3, [sp, #16]
    22d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    22d6:	4935      	ldr	r1, [pc, #212]	; (23ac <Clock_Ip_GetPllStatus+0xec>)
    22d8:	4613      	mov	r3, r2
    22da:	00db      	lsls	r3, r3, #3
    22dc:	4413      	add	r3, r2
    22de:	440b      	add	r3, r1
    22e0:	3301      	adds	r3, #1
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	461a      	mov	r2, r3
    22e6:	4b32      	ldr	r3, [pc, #200]	; (23b0 <Clock_Ip_GetPllStatus+0xf0>)
    22e8:	5c9b      	ldrb	r3, [r3, r2]
    22ea:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    22ec:	4931      	ldr	r1, [pc, #196]	; (23b4 <Clock_Ip_GetPllStatus+0xf4>)
    22ee:	9a03      	ldr	r2, [sp, #12]
    22f0:	4613      	mov	r3, r2
    22f2:	009b      	lsls	r3, r3, #2
    22f4:	4413      	add	r3, r2
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	440b      	add	r3, r1
    22fa:	3308      	adds	r3, #8
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	492a      	ldr	r1, [pc, #168]	; (23a8 <Clock_Ip_GetPllStatus+0xe8>)
    2300:	9a04      	ldr	r2, [sp, #16]
    2302:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2306:	4610      	mov	r0, r2
    2308:	4798      	blx	r3
    230a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    230c:	9b02      	ldr	r3, [sp, #8]
    230e:	2b01      	cmp	r3, #1
    2310:	d102      	bne.n	2318 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2312:	2301      	movs	r3, #1
    2314:	9305      	str	r3, [sp, #20]
            break;
    2316:	e00d      	b.n	2334 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2318:	9b02      	ldr	r3, [sp, #8]
    231a:	2b02      	cmp	r3, #2
    231c:	d101      	bne.n	2322 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    231e:	2300      	movs	r3, #0
    2320:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2322:	9b04      	ldr	r3, [sp, #16]
    2324:	3301      	adds	r3, #1
    2326:	9304      	str	r3, [sp, #16]
    2328:	4b23      	ldr	r3, [pc, #140]	; (23b8 <Clock_Ip_GetPllStatus+0xf8>)
    232a:	789b      	ldrb	r3, [r3, #2]
    232c:	461a      	mov	r2, r3
    232e:	9b04      	ldr	r3, [sp, #16]
    2330:	4293      	cmp	r3, r2
    2332:	d3cc      	bcc.n	22ce <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2334:	9b05      	ldr	r3, [sp, #20]
    2336:	2b00      	cmp	r3, #0
    2338:	d130      	bne.n	239c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    233a:	2300      	movs	r3, #0
    233c:	9304      	str	r3, [sp, #16]
    233e:	e027      	b.n	2390 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2340:	4a1e      	ldr	r2, [pc, #120]	; (23bc <Clock_Ip_GetPllStatus+0xfc>)
    2342:	9b04      	ldr	r3, [sp, #16]
    2344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2348:	4918      	ldr	r1, [pc, #96]	; (23ac <Clock_Ip_GetPllStatus+0xec>)
    234a:	4613      	mov	r3, r2
    234c:	00db      	lsls	r3, r3, #3
    234e:	4413      	add	r3, r2
    2350:	440b      	add	r3, r1
    2352:	3301      	adds	r3, #1
    2354:	781b      	ldrb	r3, [r3, #0]
    2356:	461a      	mov	r2, r3
    2358:	4b19      	ldr	r3, [pc, #100]	; (23c0 <Clock_Ip_GetPllStatus+0x100>)
    235a:	5c9b      	ldrb	r3, [r3, r2]
    235c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    235e:	4919      	ldr	r1, [pc, #100]	; (23c4 <Clock_Ip_GetPllStatus+0x104>)
    2360:	9a03      	ldr	r2, [sp, #12]
    2362:	4613      	mov	r3, r2
    2364:	005b      	lsls	r3, r3, #1
    2366:	4413      	add	r3, r2
    2368:	009b      	lsls	r3, r3, #2
    236a:	440b      	add	r3, r1
    236c:	3308      	adds	r3, #8
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	4912      	ldr	r1, [pc, #72]	; (23bc <Clock_Ip_GetPllStatus+0xfc>)
    2372:	9a04      	ldr	r2, [sp, #16]
    2374:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2378:	4610      	mov	r0, r2
    237a:	4798      	blx	r3
    237c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    237e:	9b01      	ldr	r3, [sp, #4]
    2380:	2b01      	cmp	r3, #1
    2382:	d102      	bne.n	238a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2384:	2301      	movs	r3, #1
    2386:	9305      	str	r3, [sp, #20]
                break;
    2388:	e008      	b.n	239c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    238a:	9b04      	ldr	r3, [sp, #16]
    238c:	3301      	adds	r3, #1
    238e:	9304      	str	r3, [sp, #16]
    2390:	4b09      	ldr	r3, [pc, #36]	; (23b8 <Clock_Ip_GetPllStatus+0xf8>)
    2392:	78db      	ldrb	r3, [r3, #3]
    2394:	461a      	mov	r2, r3
    2396:	9b04      	ldr	r3, [sp, #16]
    2398:	4293      	cmp	r3, r2
    239a:	d3d1      	bcc.n	2340 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    239c:	9b05      	ldr	r3, [sp, #20]
}
    239e:	4618      	mov	r0, r3
    23a0:	b007      	add	sp, #28
    23a2:	f85d fb04 	ldr.w	pc, [sp], #4
    23a6:	bf00      	nop
    23a8:	0000824c 	.word	0x0000824c
    23ac:	00007d44 	.word	0x00007d44
    23b0:	00007d04 	.word	0x00007d04
    23b4:	00008350 	.word	0x00008350
    23b8:	1fff8b68 	.word	0x1fff8b68
    23bc:	00008250 	.word	0x00008250
    23c0:	00007cf4 	.word	0x00007cf4
    23c4:	000082c0 	.word	0x000082c0

000023c8 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    23c8:	b500      	push	{lr}
    23ca:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    23cc:	4b55      	ldr	r3, [pc, #340]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    23ce:	681b      	ldr	r3, [r3, #0]
    23d0:	2b00      	cmp	r3, #0
    23d2:	f000 80a2 	beq.w	251a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    23d6:	2300      	movs	r3, #0
    23d8:	9301      	str	r3, [sp, #4]
    23da:	e02c      	b.n	2436 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    23dc:	4b51      	ldr	r3, [pc, #324]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    23de:	681a      	ldr	r2, [r3, #0]
    23e0:	9b01      	ldr	r3, [sp, #4]
    23e2:	330d      	adds	r3, #13
    23e4:	00db      	lsls	r3, r3, #3
    23e6:	4413      	add	r3, r2
    23e8:	685b      	ldr	r3, [r3, #4]
    23ea:	4a4f      	ldr	r2, [pc, #316]	; (2528 <Clock_Ip_DistributePll+0x160>)
    23ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23f0:	2b03      	cmp	r3, #3
    23f2:	d11d      	bne.n	2430 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    23f4:	4b4b      	ldr	r3, [pc, #300]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    23f6:	681b      	ldr	r3, [r3, #0]
    23f8:	9a01      	ldr	r2, [sp, #4]
    23fa:	320d      	adds	r2, #13
    23fc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2400:	494a      	ldr	r1, [pc, #296]	; (252c <Clock_Ip_DistributePll+0x164>)
    2402:	4613      	mov	r3, r2
    2404:	00db      	lsls	r3, r3, #3
    2406:	4413      	add	r3, r2
    2408:	440b      	add	r3, r1
    240a:	3301      	adds	r3, #1
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	461a      	mov	r2, r3
    2410:	4b47      	ldr	r3, [pc, #284]	; (2530 <Clock_Ip_DistributePll+0x168>)
    2412:	5c9b      	ldrb	r3, [r3, r2]
    2414:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2416:	4a47      	ldr	r2, [pc, #284]	; (2534 <Clock_Ip_DistributePll+0x16c>)
    2418:	9b00      	ldr	r3, [sp, #0]
    241a:	00db      	lsls	r3, r3, #3
    241c:	4413      	add	r3, r2
    241e:	685b      	ldr	r3, [r3, #4]
    2420:	4a40      	ldr	r2, [pc, #256]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2422:	6811      	ldr	r1, [r2, #0]
    2424:	9a01      	ldr	r2, [sp, #4]
    2426:	320d      	adds	r2, #13
    2428:	00d2      	lsls	r2, r2, #3
    242a:	440a      	add	r2, r1
    242c:	4610      	mov	r0, r2
    242e:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2430:	9b01      	ldr	r3, [sp, #4]
    2432:	3301      	adds	r3, #1
    2434:	9301      	str	r3, [sp, #4]
    2436:	4b3b      	ldr	r3, [pc, #236]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2438:	681b      	ldr	r3, [r3, #0]
    243a:	7adb      	ldrb	r3, [r3, #11]
    243c:	461a      	mov	r2, r3
    243e:	9b01      	ldr	r3, [sp, #4]
    2440:	4293      	cmp	r3, r2
    2442:	d3cb      	bcc.n	23dc <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2444:	4b3c      	ldr	r3, [pc, #240]	; (2538 <Clock_Ip_DistributePll+0x170>)
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	2b00      	cmp	r3, #0
    244a:	d066      	beq.n	251a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    244c:	2300      	movs	r3, #0
    244e:	9301      	str	r3, [sp, #4]
    2450:	e021      	b.n	2496 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2452:	4b34      	ldr	r3, [pc, #208]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2454:	681a      	ldr	r2, [r3, #0]
    2456:	9b01      	ldr	r3, [sp, #4]
    2458:	334e      	adds	r3, #78	; 0x4e
    245a:	00db      	lsls	r3, r3, #3
    245c:	4413      	add	r3, r2
    245e:	685a      	ldr	r2, [r3, #4]
    2460:	4932      	ldr	r1, [pc, #200]	; (252c <Clock_Ip_DistributePll+0x164>)
    2462:	4613      	mov	r3, r2
    2464:	00db      	lsls	r3, r3, #3
    2466:	4413      	add	r3, r2
    2468:	440b      	add	r3, r1
    246a:	3301      	adds	r3, #1
    246c:	781b      	ldrb	r3, [r3, #0]
    246e:	461a      	mov	r2, r3
    2470:	4b32      	ldr	r3, [pc, #200]	; (253c <Clock_Ip_DistributePll+0x174>)
    2472:	5c9b      	ldrb	r3, [r3, r2]
    2474:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2476:	4a32      	ldr	r2, [pc, #200]	; (2540 <Clock_Ip_DistributePll+0x178>)
    2478:	9b00      	ldr	r3, [sp, #0]
    247a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    247e:	4a29      	ldr	r2, [pc, #164]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2480:	6811      	ldr	r1, [r2, #0]
    2482:	9a01      	ldr	r2, [sp, #4]
    2484:	324e      	adds	r2, #78	; 0x4e
    2486:	00d2      	lsls	r2, r2, #3
    2488:	440a      	add	r2, r1
    248a:	3204      	adds	r2, #4
    248c:	4610      	mov	r0, r2
    248e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	3301      	adds	r3, #1
    2494:	9301      	str	r3, [sp, #4]
    2496:	4b23      	ldr	r3, [pc, #140]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2498:	681b      	ldr	r3, [r3, #0]
    249a:	7c1b      	ldrb	r3, [r3, #16]
    249c:	461a      	mov	r2, r3
    249e:	9b01      	ldr	r3, [sp, #4]
    24a0:	4293      	cmp	r3, r2
    24a2:	d3d6      	bcc.n	2452 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    24a4:	2300      	movs	r3, #0
    24a6:	9301      	str	r3, [sp, #4]
    24a8:	e02a      	b.n	2500 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24aa:	4b1e      	ldr	r3, [pc, #120]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    24ac:	6819      	ldr	r1, [r3, #0]
    24ae:	9a01      	ldr	r2, [sp, #4]
    24b0:	4613      	mov	r3, r2
    24b2:	009b      	lsls	r3, r3, #2
    24b4:	4413      	add	r3, r2
    24b6:	009b      	lsls	r3, r3, #2
    24b8:	440b      	add	r3, r1
    24ba:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24be:	681a      	ldr	r2, [r3, #0]
    24c0:	491a      	ldr	r1, [pc, #104]	; (252c <Clock_Ip_DistributePll+0x164>)
    24c2:	4613      	mov	r3, r2
    24c4:	00db      	lsls	r3, r3, #3
    24c6:	4413      	add	r3, r2
    24c8:	440b      	add	r3, r1
    24ca:	3301      	adds	r3, #1
    24cc:	781b      	ldrb	r3, [r3, #0]
    24ce:	461a      	mov	r2, r3
    24d0:	4b1c      	ldr	r3, [pc, #112]	; (2544 <Clock_Ip_DistributePll+0x17c>)
    24d2:	5c9b      	ldrb	r3, [r3, r2]
    24d4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    24d6:	4a1c      	ldr	r2, [pc, #112]	; (2548 <Clock_Ip_DistributePll+0x180>)
    24d8:	9b00      	ldr	r3, [sp, #0]
    24da:	011b      	lsls	r3, r3, #4
    24dc:	4413      	add	r3, r2
    24de:	330c      	adds	r3, #12
    24e0:	6819      	ldr	r1, [r3, #0]
    24e2:	4b10      	ldr	r3, [pc, #64]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    24e4:	6818      	ldr	r0, [r3, #0]
    24e6:	9a01      	ldr	r2, [sp, #4]
    24e8:	4613      	mov	r3, r2
    24ea:	009b      	lsls	r3, r3, #2
    24ec:	4413      	add	r3, r2
    24ee:	009b      	lsls	r3, r3, #2
    24f0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24f4:	4403      	add	r3, r0
    24f6:	4618      	mov	r0, r3
    24f8:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    24fa:	9b01      	ldr	r3, [sp, #4]
    24fc:	3301      	adds	r3, #1
    24fe:	9301      	str	r3, [sp, #4]
    2500:	4b08      	ldr	r3, [pc, #32]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	7c9b      	ldrb	r3, [r3, #18]
    2506:	461a      	mov	r2, r3
    2508:	9b01      	ldr	r3, [sp, #4]
    250a:	4293      	cmp	r3, r2
    250c:	d3cd      	bcc.n	24aa <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    250e:	4b05      	ldr	r3, [pc, #20]	; (2524 <Clock_Ip_DistributePll+0x15c>)
    2510:	681b      	ldr	r3, [r3, #0]
    2512:	2104      	movs	r1, #4
    2514:	4618      	mov	r0, r3
    2516:	f002 fe0b 	bl	5130 <Clock_Ip_Command>
        }
    }
}
    251a:	bf00      	nop
    251c:	b003      	add	sp, #12
    251e:	f85d fb04 	ldr.w	pc, [sp], #4
    2522:	bf00      	nop
    2524:	1fff8b60 	.word	0x1fff8b60
    2528:	00008190 	.word	0x00008190
    252c:	00007d44 	.word	0x00007d44
    2530:	00007d14 	.word	0x00007d14
    2534:	0000837c 	.word	0x0000837c
    2538:	1fff8b68 	.word	0x1fff8b68
    253c:	00007ce4 	.word	0x00007ce4
    2540:	000082cc 	.word	0x000082cc
    2544:	00007d34 	.word	0x00007d34
    2548:	00008340 	.word	0x00008340

0000254c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    254c:	b500      	push	{lr}
    254e:	b085      	sub	sp, #20
    2550:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2552:	490c      	ldr	r1, [pc, #48]	; (2584 <Clock_Ip_DisableClockMonitor+0x38>)
    2554:	9a01      	ldr	r2, [sp, #4]
    2556:	4613      	mov	r3, r2
    2558:	00db      	lsls	r3, r3, #3
    255a:	4413      	add	r3, r2
    255c:	440b      	add	r3, r1
    255e:	3301      	adds	r3, #1
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	461a      	mov	r2, r3
    2564:	4b08      	ldr	r3, [pc, #32]	; (2588 <Clock_Ip_DisableClockMonitor+0x3c>)
    2566:	5c9b      	ldrb	r3, [r3, r2]
    2568:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    256a:	4a08      	ldr	r2, [pc, #32]	; (258c <Clock_Ip_DisableClockMonitor+0x40>)
    256c:	9b03      	ldr	r3, [sp, #12]
    256e:	011b      	lsls	r3, r3, #4
    2570:	4413      	add	r3, r2
    2572:	3308      	adds	r3, #8
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	9801      	ldr	r0, [sp, #4]
    2578:	4798      	blx	r3
}
    257a:	bf00      	nop
    257c:	b005      	add	sp, #20
    257e:	f85d fb04 	ldr.w	pc, [sp], #4
    2582:	bf00      	nop
    2584:	00007d44 	.word	0x00007d44
    2588:	00007d34 	.word	0x00007d34
    258c:	00008340 	.word	0x00008340

00002590 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2590:	b082      	sub	sp, #8
    2592:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2594:	4a02      	ldr	r2, [pc, #8]	; (25a0 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2596:	9b01      	ldr	r3, [sp, #4]
    2598:	6013      	str	r3, [r2, #0]
}
    259a:	bf00      	nop
    259c:	b002      	add	sp, #8
    259e:	4770      	bx	lr
    25a0:	1fff8b14 	.word	0x1fff8b14

000025a4 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    25a4:	b500      	push	{lr}
    25a6:	b085      	sub	sp, #20
    25a8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    25aa:	490c      	ldr	r1, [pc, #48]	; (25dc <Clock_Ip_DisableModuleClock+0x38>)
    25ac:	9a01      	ldr	r2, [sp, #4]
    25ae:	4613      	mov	r3, r2
    25b0:	00db      	lsls	r3, r3, #3
    25b2:	4413      	add	r3, r2
    25b4:	440b      	add	r3, r1
    25b6:	3301      	adds	r3, #1
    25b8:	781b      	ldrb	r3, [r3, #0]
    25ba:	461a      	mov	r2, r3
    25bc:	4b08      	ldr	r3, [pc, #32]	; (25e0 <Clock_Ip_DisableModuleClock+0x3c>)
    25be:	5c9b      	ldrb	r3, [r3, r2]
    25c0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    25c2:	4a08      	ldr	r2, [pc, #32]	; (25e4 <Clock_Ip_DisableModuleClock+0x40>)
    25c4:	9b03      	ldr	r3, [sp, #12]
    25c6:	00db      	lsls	r3, r3, #3
    25c8:	4413      	add	r3, r2
    25ca:	685b      	ldr	r3, [r3, #4]
    25cc:	2101      	movs	r1, #1
    25ce:	9801      	ldr	r0, [sp, #4]
    25d0:	4798      	blx	r3
}
    25d2:	bf00      	nop
    25d4:	b005      	add	sp, #20
    25d6:	f85d fb04 	ldr.w	pc, [sp], #4
    25da:	bf00      	nop
    25dc:	00007d44 	.word	0x00007d44
    25e0:	00007ce4 	.word	0x00007ce4
    25e4:	000082cc 	.word	0x000082cc

000025e8 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    25e8:	b500      	push	{lr}
    25ea:	b085      	sub	sp, #20
    25ec:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    25ee:	490c      	ldr	r1, [pc, #48]	; (2620 <Clock_Ip_EnableModuleClock+0x38>)
    25f0:	9a01      	ldr	r2, [sp, #4]
    25f2:	4613      	mov	r3, r2
    25f4:	00db      	lsls	r3, r3, #3
    25f6:	4413      	add	r3, r2
    25f8:	440b      	add	r3, r1
    25fa:	3301      	adds	r3, #1
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	461a      	mov	r2, r3
    2600:	4b08      	ldr	r3, [pc, #32]	; (2624 <Clock_Ip_EnableModuleClock+0x3c>)
    2602:	5c9b      	ldrb	r3, [r3, r2]
    2604:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2606:	4a08      	ldr	r2, [pc, #32]	; (2628 <Clock_Ip_EnableModuleClock+0x40>)
    2608:	9b03      	ldr	r3, [sp, #12]
    260a:	00db      	lsls	r3, r3, #3
    260c:	4413      	add	r3, r2
    260e:	685b      	ldr	r3, [r3, #4]
    2610:	2100      	movs	r1, #0
    2612:	9801      	ldr	r0, [sp, #4]
    2614:	4798      	blx	r3
}
    2616:	bf00      	nop
    2618:	b005      	add	sp, #20
    261a:	f85d fb04 	ldr.w	pc, [sp], #4
    261e:	bf00      	nop
    2620:	00007d44 	.word	0x00007d44
    2624:	00007ce4 	.word	0x00007ce4
    2628:	000082cc 	.word	0x000082cc

0000262c <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    262c:	b500      	push	{lr}
    262e:	b083      	sub	sp, #12
    2630:	9001      	str	r0, [sp, #4]
    2632:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2634:	4b08      	ldr	r3, [pc, #32]	; (2658 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2636:	2200      	movs	r2, #0
    2638:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    263a:	4b08      	ldr	r3, [pc, #32]	; (265c <Clock_Ip_PowerModeChangeNotification+0x30>)
    263c:	681b      	ldr	r3, [r3, #0]
    263e:	2102      	movs	r1, #2
    2640:	4618      	mov	r0, r3
    2642:	f002 fd75 	bl	5130 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2646:	9900      	ldr	r1, [sp, #0]
    2648:	9801      	ldr	r0, [sp, #4]
    264a:	f002 fc51 	bl	4ef0 <Clock_Ip_ClockPowerModeChangeNotification>
}
    264e:	bf00      	nop
    2650:	b003      	add	sp, #12
    2652:	f85d fb04 	ldr.w	pc, [sp], #4
    2656:	bf00      	nop
    2658:	1fff8b10 	.word	0x1fff8b10
    265c:	1fff8b60 	.word	0x1fff8b60

00002660 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2660:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2662:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2666:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2668:	4b06      	ldr	r3, [pc, #24]	; (2684 <Clock_Ip_SetWaitStates+0x24>)
    266a:	785b      	ldrb	r3, [r3, #1]
    266c:	2b00      	cmp	r3, #0
    266e:	d005      	beq.n	267c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2670:	9b01      	ldr	r3, [sp, #4]
    2672:	3b01      	subs	r3, #1
    2674:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2676:	9b01      	ldr	r3, [sp, #4]
    2678:	2b00      	cmp	r3, #0
    267a:	d1f9      	bne.n	2670 <Clock_Ip_SetWaitStates+0x10>
    }
}
    267c:	bf00      	nop
    267e:	b002      	add	sp, #8
    2680:	4770      	bx	lr
    2682:	bf00      	nop
    2684:	1fff8b68 	.word	0x1fff8b68

00002688 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2688:	b500      	push	{lr}
    268a:	b083      	sub	sp, #12
    268c:	9001      	str	r0, [sp, #4]
    268e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2690:	4b04      	ldr	r3, [pc, #16]	; (26a4 <Clock_Ip_ReportClockErrors+0x1c>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	9900      	ldr	r1, [sp, #0]
    2696:	9801      	ldr	r0, [sp, #4]
    2698:	4798      	blx	r3
}
    269a:	bf00      	nop
    269c:	b003      	add	sp, #12
    269e:	f85d fb04 	ldr.w	pc, [sp], #4
    26a2:	bf00      	nop
    26a4:	1fff8b14 	.word	0x1fff8b14

000026a8 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    26a8:	b500      	push	{lr}
    26aa:	b085      	sub	sp, #20
    26ac:	9003      	str	r0, [sp, #12]
    26ae:	9102      	str	r1, [sp, #8]
    26b0:	9201      	str	r2, [sp, #4]
    26b2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    26b4:	2000      	movs	r0, #0
    26b6:	f7fe ffd0 	bl	165a <OsIf_GetCounter>
    26ba:	4602      	mov	r2, r0
    26bc:	9b03      	ldr	r3, [sp, #12]
    26be:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    26c0:	9b02      	ldr	r3, [sp, #8]
    26c2:	2200      	movs	r2, #0
    26c4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    26c6:	2100      	movs	r1, #0
    26c8:	9800      	ldr	r0, [sp, #0]
    26ca:	f7ff f812 	bl	16f2 <OsIf_MicrosToTicks>
    26ce:	4602      	mov	r2, r0
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	601a      	str	r2, [r3, #0]
}
    26d4:	bf00      	nop
    26d6:	b005      	add	sp, #20
    26d8:	f85d fb04 	ldr.w	pc, [sp], #4

000026dc <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    26dc:	b500      	push	{lr}
    26de:	b087      	sub	sp, #28
    26e0:	9003      	str	r0, [sp, #12]
    26e2:	9102      	str	r1, [sp, #8]
    26e4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    26e6:	2300      	movs	r3, #0
    26e8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    26ec:	2100      	movs	r1, #0
    26ee:	9803      	ldr	r0, [sp, #12]
    26f0:	f7fe ffcc 	bl	168c <OsIf_GetElapsed>
    26f4:	4602      	mov	r2, r0
    26f6:	9b02      	ldr	r3, [sp, #8]
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	441a      	add	r2, r3
    26fc:	9b02      	ldr	r3, [sp, #8]
    26fe:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2700:	9b02      	ldr	r3, [sp, #8]
    2702:	681b      	ldr	r3, [r3, #0]
    2704:	9a01      	ldr	r2, [sp, #4]
    2706:	429a      	cmp	r2, r3
    2708:	d802      	bhi.n	2710 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    270a:	2301      	movs	r3, #1
    270c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2710:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2714:	4618      	mov	r0, r3
    2716:	b007      	add	sp, #28
    2718:	f85d fb04 	ldr.w	pc, [sp], #4

0000271c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    271c:	b082      	sub	sp, #8
    271e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2720:	bf00      	nop
    2722:	b002      	add	sp, #8
    2724:	4770      	bx	lr

00002726 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2726:	b500      	push	{lr}
    2728:	b083      	sub	sp, #12
    272a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    272c:	9b01      	ldr	r3, [sp, #4]
    272e:	2b00      	cmp	r3, #0
    2730:	d002      	beq.n	2738 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2732:	9801      	ldr	r0, [sp, #4]
    2734:	f000 f8ad 	bl	2892 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2738:	bf00      	nop
    273a:	b003      	add	sp, #12
    273c:	f85d fb04 	ldr.w	pc, [sp], #4

00002740 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2740:	b500      	push	{lr}
    2742:	b083      	sub	sp, #12
    2744:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2746:	9b01      	ldr	r3, [sp, #4]
    2748:	2b00      	cmp	r3, #0
    274a:	d002      	beq.n	2752 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    274c:	9801      	ldr	r0, [sp, #4]
    274e:	f000 f8cd 	bl	28ec <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2752:	bf00      	nop
    2754:	b003      	add	sp, #12
    2756:	f85d fb04 	ldr.w	pc, [sp], #4

0000275a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    275a:	b500      	push	{lr}
    275c:	b083      	sub	sp, #12
    275e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	2b00      	cmp	r3, #0
    2764:	d002      	beq.n	276c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2766:	9801      	ldr	r0, [sp, #4]
    2768:	f000 f8ee 	bl	2948 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    276c:	bf00      	nop
    276e:	b003      	add	sp, #12
    2770:	f85d fb04 	ldr.w	pc, [sp], #4

00002774 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2774:	b500      	push	{lr}
    2776:	b083      	sub	sp, #12
    2778:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    277a:	9b01      	ldr	r3, [sp, #4]
    277c:	2b00      	cmp	r3, #0
    277e:	d002      	beq.n	2786 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2780:	9801      	ldr	r0, [sp, #4]
    2782:	f000 f8f9 	bl	2978 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2786:	bf00      	nop
    2788:	b003      	add	sp, #12
    278a:	f85d fb04 	ldr.w	pc, [sp], #4

0000278e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    278e:	b500      	push	{lr}
    2790:	b083      	sub	sp, #12
    2792:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2794:	9b01      	ldr	r3, [sp, #4]
    2796:	2b00      	cmp	r3, #0
    2798:	d002      	beq.n	27a0 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    279a:	9801      	ldr	r0, [sp, #4]
    279c:	f000 f904 	bl	29a8 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27a0:	bf00      	nop
    27a2:	b003      	add	sp, #12
    27a4:	f85d fb04 	ldr.w	pc, [sp], #4

000027a8 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    27a8:	b500      	push	{lr}
    27aa:	b083      	sub	sp, #12
    27ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ae:	9b01      	ldr	r3, [sp, #4]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d002      	beq.n	27ba <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    27b4:	9801      	ldr	r0, [sp, #4]
    27b6:	f000 f90f 	bl	29d8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27ba:	bf00      	nop
    27bc:	b003      	add	sp, #12
    27be:	f85d fb04 	ldr.w	pc, [sp], #4

000027c2 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    27c2:	b500      	push	{lr}
    27c4:	b083      	sub	sp, #12
    27c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27c8:	9b01      	ldr	r3, [sp, #4]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d002      	beq.n	27d4 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    27ce:	9801      	ldr	r0, [sp, #4]
    27d0:	f000 f91a 	bl	2a08 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27d4:	bf00      	nop
    27d6:	b003      	add	sp, #12
    27d8:	f85d fb04 	ldr.w	pc, [sp], #4

000027dc <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    27dc:	b500      	push	{lr}
    27de:	b083      	sub	sp, #12
    27e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27e2:	9b01      	ldr	r3, [sp, #4]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d002      	beq.n	27ee <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    27e8:	9801      	ldr	r0, [sp, #4]
    27ea:	f000 f925 	bl	2a38 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27ee:	bf00      	nop
    27f0:	b003      	add	sp, #12
    27f2:	f85d fb04 	ldr.w	pc, [sp], #4

000027f6 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    27f6:	b500      	push	{lr}
    27f8:	b083      	sub	sp, #12
    27fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27fc:	9b01      	ldr	r3, [sp, #4]
    27fe:	2b00      	cmp	r3, #0
    2800:	d002      	beq.n	2808 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2802:	9801      	ldr	r0, [sp, #4]
    2804:	f000 f930 	bl	2a68 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2808:	bf00      	nop
    280a:	b003      	add	sp, #12
    280c:	f85d fb04 	ldr.w	pc, [sp], #4

00002810 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2810:	b500      	push	{lr}
    2812:	b083      	sub	sp, #12
    2814:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2816:	9b01      	ldr	r3, [sp, #4]
    2818:	2b00      	cmp	r3, #0
    281a:	d002      	beq.n	2822 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    281c:	9801      	ldr	r0, [sp, #4]
    281e:	f000 f93b 	bl	2a98 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2822:	bf00      	nop
    2824:	b003      	add	sp, #12
    2826:	f85d fb04 	ldr.w	pc, [sp], #4

0000282a <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    282a:	b500      	push	{lr}
    282c:	b083      	sub	sp, #12
    282e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2830:	9b01      	ldr	r3, [sp, #4]
    2832:	2b00      	cmp	r3, #0
    2834:	d002      	beq.n	283c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2836:	9801      	ldr	r0, [sp, #4]
    2838:	f000 f946 	bl	2ac8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    283c:	bf00      	nop
    283e:	b003      	add	sp, #12
    2840:	f85d fb04 	ldr.w	pc, [sp], #4

00002844 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2844:	b500      	push	{lr}
    2846:	b083      	sub	sp, #12
    2848:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    284a:	9b01      	ldr	r3, [sp, #4]
    284c:	2b00      	cmp	r3, #0
    284e:	d002      	beq.n	2856 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2850:	9801      	ldr	r0, [sp, #4]
    2852:	f000 f951 	bl	2af8 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2856:	bf00      	nop
    2858:	b003      	add	sp, #12
    285a:	f85d fb04 	ldr.w	pc, [sp], #4

0000285e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    285e:	b500      	push	{lr}
    2860:	b083      	sub	sp, #12
    2862:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2864:	9b01      	ldr	r3, [sp, #4]
    2866:	2b00      	cmp	r3, #0
    2868:	d002      	beq.n	2870 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    286a:	9801      	ldr	r0, [sp, #4]
    286c:	f000 f95e 	bl	2b2c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2870:	bf00      	nop
    2872:	b003      	add	sp, #12
    2874:	f85d fb04 	ldr.w	pc, [sp], #4

00002878 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2878:	b500      	push	{lr}
    287a:	b083      	sub	sp, #12
    287c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    287e:	9b01      	ldr	r3, [sp, #4]
    2880:	2b00      	cmp	r3, #0
    2882:	d002      	beq.n	288a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2884:	9801      	ldr	r0, [sp, #4]
    2886:	f000 f98b 	bl	2ba0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    288a:	bf00      	nop
    288c:	b003      	add	sp, #12
    288e:	f85d fb04 	ldr.w	pc, [sp], #4

00002892 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2892:	b086      	sub	sp, #24
    2894:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2896:	9b01      	ldr	r3, [sp, #4]
    2898:	681a      	ldr	r2, [r3, #0]
    289a:	4911      	ldr	r1, [pc, #68]	; (28e0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    289c:	4613      	mov	r3, r2
    289e:	00db      	lsls	r3, r3, #3
    28a0:	4413      	add	r3, r2
    28a2:	440b      	add	r3, r1
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    28a8:	9b01      	ldr	r3, [sp, #4]
    28aa:	685b      	ldr	r3, [r3, #4]
    28ac:	4a0d      	ldr	r2, [pc, #52]	; (28e4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    28ae:	5cd3      	ldrb	r3, [r2, r3]
    28b0:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    28b2:	4a0d      	ldr	r2, [pc, #52]	; (28e8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    28b4:	9b05      	ldr	r3, [sp, #20]
    28b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    28be:	9b03      	ldr	r3, [sp, #12]
    28c0:	f023 0307 	bic.w	r3, r3, #7
    28c4:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    28c6:	9a03      	ldr	r2, [sp, #12]
    28c8:	9b04      	ldr	r3, [sp, #16]
    28ca:	4313      	orrs	r3, r2
    28cc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    28ce:	4a06      	ldr	r2, [pc, #24]	; (28e8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    28d0:	9b05      	ldr	r3, [sp, #20]
    28d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28d6:	9a03      	ldr	r2, [sp, #12]
    28d8:	601a      	str	r2, [r3, #0]
}
    28da:	bf00      	nop
    28dc:	b006      	add	sp, #24
    28de:	4770      	bx	lr
    28e0:	00007d44 	.word	0x00007d44
    28e4:	0000813c 	.word	0x0000813c
    28e8:	00008180 	.word	0x00008180

000028ec <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    28ec:	b086      	sub	sp, #24
    28ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    28f0:	9b01      	ldr	r3, [sp, #4]
    28f2:	681a      	ldr	r2, [r3, #0]
    28f4:	4911      	ldr	r1, [pc, #68]	; (293c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    28f6:	4613      	mov	r3, r2
    28f8:	00db      	lsls	r3, r3, #3
    28fa:	4413      	add	r3, r2
    28fc:	440b      	add	r3, r1
    28fe:	781b      	ldrb	r3, [r3, #0]
    2900:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2902:	9b01      	ldr	r3, [sp, #4]
    2904:	685b      	ldr	r3, [r3, #4]
    2906:	4a0e      	ldr	r2, [pc, #56]	; (2940 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2908:	5cd3      	ldrb	r3, [r2, r3]
    290a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    290c:	4a0d      	ldr	r2, [pc, #52]	; (2944 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    290e:	9b05      	ldr	r3, [sp, #20]
    2910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2918:	9b03      	ldr	r3, [sp, #12]
    291a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    291e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2920:	9b04      	ldr	r3, [sp, #16]
    2922:	021b      	lsls	r3, r3, #8
    2924:	9a03      	ldr	r2, [sp, #12]
    2926:	4313      	orrs	r3, r2
    2928:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    292a:	4a06      	ldr	r2, [pc, #24]	; (2944 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    292c:	9b05      	ldr	r3, [sp, #20]
    292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2932:	9a03      	ldr	r2, [sp, #12]
    2934:	601a      	str	r2, [r3, #0]
}
    2936:	bf00      	nop
    2938:	b006      	add	sp, #24
    293a:	4770      	bx	lr
    293c:	00007d44 	.word	0x00007d44
    2940:	0000813c 	.word	0x0000813c
    2944:	00008180 	.word	0x00008180

00002948 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2948:	b084      	sub	sp, #16
    294a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    294c:	4b09      	ldr	r3, [pc, #36]	; (2974 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    294e:	695b      	ldr	r3, [r3, #20]
    2950:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2952:	9b03      	ldr	r3, [sp, #12]
    2954:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2958:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    295a:	9b01      	ldr	r3, [sp, #4]
    295c:	685b      	ldr	r3, [r3, #4]
    295e:	3b01      	subs	r3, #1
    2960:	041b      	lsls	r3, r3, #16
    2962:	9a03      	ldr	r2, [sp, #12]
    2964:	4313      	orrs	r3, r2
    2966:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2968:	4a02      	ldr	r2, [pc, #8]	; (2974 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    296a:	9b03      	ldr	r3, [sp, #12]
    296c:	6153      	str	r3, [r2, #20]
}
    296e:	bf00      	nop
    2970:	b004      	add	sp, #16
    2972:	4770      	bx	lr
    2974:	40064000 	.word	0x40064000

00002978 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2978:	b084      	sub	sp, #16
    297a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    297c:	4b09      	ldr	r3, [pc, #36]	; (29a4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    297e:	695b      	ldr	r3, [r3, #20]
    2980:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2982:	9b03      	ldr	r3, [sp, #12]
    2984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2988:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    298a:	9b01      	ldr	r3, [sp, #4]
    298c:	685b      	ldr	r3, [r3, #4]
    298e:	3b01      	subs	r3, #1
    2990:	011b      	lsls	r3, r3, #4
    2992:	9a03      	ldr	r2, [sp, #12]
    2994:	4313      	orrs	r3, r2
    2996:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2998:	4a02      	ldr	r2, [pc, #8]	; (29a4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    299a:	9b03      	ldr	r3, [sp, #12]
    299c:	6153      	str	r3, [r2, #20]
}
    299e:	bf00      	nop
    29a0:	b004      	add	sp, #16
    29a2:	4770      	bx	lr
    29a4:	40064000 	.word	0x40064000

000029a8 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    29a8:	b084      	sub	sp, #16
    29aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    29ac:	4b09      	ldr	r3, [pc, #36]	; (29d4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    29ae:	695b      	ldr	r3, [r3, #20]
    29b0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    29b2:	9b03      	ldr	r3, [sp, #12]
    29b4:	f023 030f 	bic.w	r3, r3, #15
    29b8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    29ba:	9b01      	ldr	r3, [sp, #4]
    29bc:	685b      	ldr	r3, [r3, #4]
    29be:	3b01      	subs	r3, #1
    29c0:	9a03      	ldr	r2, [sp, #12]
    29c2:	4313      	orrs	r3, r2
    29c4:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    29c6:	4a03      	ldr	r2, [pc, #12]	; (29d4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    29c8:	9b03      	ldr	r3, [sp, #12]
    29ca:	6153      	str	r3, [r2, #20]
}
    29cc:	bf00      	nop
    29ce:	b004      	add	sp, #16
    29d0:	4770      	bx	lr
    29d2:	bf00      	nop
    29d4:	40064000 	.word	0x40064000

000029d8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    29d8:	b084      	sub	sp, #16
    29da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    29dc:	4b09      	ldr	r3, [pc, #36]	; (2a04 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    29de:	699b      	ldr	r3, [r3, #24]
    29e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    29e2:	9b03      	ldr	r3, [sp, #12]
    29e4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    29e8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    29ea:	9b01      	ldr	r3, [sp, #4]
    29ec:	685b      	ldr	r3, [r3, #4]
    29ee:	3b01      	subs	r3, #1
    29f0:	041b      	lsls	r3, r3, #16
    29f2:	9a03      	ldr	r2, [sp, #12]
    29f4:	4313      	orrs	r3, r2
    29f6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    29f8:	4a02      	ldr	r2, [pc, #8]	; (2a04 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    29fa:	9b03      	ldr	r3, [sp, #12]
    29fc:	6193      	str	r3, [r2, #24]
}
    29fe:	bf00      	nop
    2a00:	b004      	add	sp, #16
    2a02:	4770      	bx	lr
    2a04:	40064000 	.word	0x40064000

00002a08 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2a08:	b084      	sub	sp, #16
    2a0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2a0c:	4b09      	ldr	r3, [pc, #36]	; (2a34 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2a0e:	699b      	ldr	r3, [r3, #24]
    2a10:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2a12:	9b03      	ldr	r3, [sp, #12]
    2a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2a18:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2a1a:	9b01      	ldr	r3, [sp, #4]
    2a1c:	685b      	ldr	r3, [r3, #4]
    2a1e:	3b01      	subs	r3, #1
    2a20:	011b      	lsls	r3, r3, #4
    2a22:	9a03      	ldr	r2, [sp, #12]
    2a24:	4313      	orrs	r3, r2
    2a26:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2a28:	4a02      	ldr	r2, [pc, #8]	; (2a34 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2a2a:	9b03      	ldr	r3, [sp, #12]
    2a2c:	6193      	str	r3, [r2, #24]
}
    2a2e:	bf00      	nop
    2a30:	b004      	add	sp, #16
    2a32:	4770      	bx	lr
    2a34:	40064000 	.word	0x40064000

00002a38 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2a38:	b084      	sub	sp, #16
    2a3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2a3c:	4b09      	ldr	r3, [pc, #36]	; (2a64 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2a3e:	699b      	ldr	r3, [r3, #24]
    2a40:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2a42:	9b03      	ldr	r3, [sp, #12]
    2a44:	f023 030f 	bic.w	r3, r3, #15
    2a48:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2a4a:	9b01      	ldr	r3, [sp, #4]
    2a4c:	685b      	ldr	r3, [r3, #4]
    2a4e:	3b01      	subs	r3, #1
    2a50:	9a03      	ldr	r2, [sp, #12]
    2a52:	4313      	orrs	r3, r2
    2a54:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2a56:	4a03      	ldr	r2, [pc, #12]	; (2a64 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2a58:	9b03      	ldr	r3, [sp, #12]
    2a5a:	6193      	str	r3, [r2, #24]
}
    2a5c:	bf00      	nop
    2a5e:	b004      	add	sp, #16
    2a60:	4770      	bx	lr
    2a62:	bf00      	nop
    2a64:	40064000 	.word	0x40064000

00002a68 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2a68:	b084      	sub	sp, #16
    2a6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2a6c:	4b09      	ldr	r3, [pc, #36]	; (2a94 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2a6e:	69db      	ldr	r3, [r3, #28]
    2a70:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2a72:	9b03      	ldr	r3, [sp, #12]
    2a74:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2a78:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2a7a:	9b01      	ldr	r3, [sp, #4]
    2a7c:	685b      	ldr	r3, [r3, #4]
    2a7e:	3b01      	subs	r3, #1
    2a80:	041b      	lsls	r3, r3, #16
    2a82:	9a03      	ldr	r2, [sp, #12]
    2a84:	4313      	orrs	r3, r2
    2a86:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2a88:	4a02      	ldr	r2, [pc, #8]	; (2a94 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2a8a:	9b03      	ldr	r3, [sp, #12]
    2a8c:	61d3      	str	r3, [r2, #28]
}
    2a8e:	bf00      	nop
    2a90:	b004      	add	sp, #16
    2a92:	4770      	bx	lr
    2a94:	40064000 	.word	0x40064000

00002a98 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2a98:	b084      	sub	sp, #16
    2a9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2a9c:	4b09      	ldr	r3, [pc, #36]	; (2ac4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2a9e:	69db      	ldr	r3, [r3, #28]
    2aa0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2aa2:	9b03      	ldr	r3, [sp, #12]
    2aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2aa8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2aaa:	9b01      	ldr	r3, [sp, #4]
    2aac:	685b      	ldr	r3, [r3, #4]
    2aae:	3b01      	subs	r3, #1
    2ab0:	011b      	lsls	r3, r3, #4
    2ab2:	9a03      	ldr	r2, [sp, #12]
    2ab4:	4313      	orrs	r3, r2
    2ab6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ab8:	4a02      	ldr	r2, [pc, #8]	; (2ac4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2aba:	9b03      	ldr	r3, [sp, #12]
    2abc:	61d3      	str	r3, [r2, #28]
}
    2abe:	bf00      	nop
    2ac0:	b004      	add	sp, #16
    2ac2:	4770      	bx	lr
    2ac4:	40064000 	.word	0x40064000

00002ac8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ac8:	b084      	sub	sp, #16
    2aca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2acc:	4b09      	ldr	r3, [pc, #36]	; (2af4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ace:	69db      	ldr	r3, [r3, #28]
    2ad0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2ad2:	9b03      	ldr	r3, [sp, #12]
    2ad4:	f023 030f 	bic.w	r3, r3, #15
    2ad8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2ada:	9b01      	ldr	r3, [sp, #4]
    2adc:	685b      	ldr	r3, [r3, #4]
    2ade:	3b01      	subs	r3, #1
    2ae0:	9a03      	ldr	r2, [sp, #12]
    2ae2:	4313      	orrs	r3, r2
    2ae4:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ae6:	4a03      	ldr	r2, [pc, #12]	; (2af4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ae8:	9b03      	ldr	r3, [sp, #12]
    2aea:	61d3      	str	r3, [r2, #28]
}
    2aec:	bf00      	nop
    2aee:	b004      	add	sp, #16
    2af0:	4770      	bx	lr
    2af2:	bf00      	nop
    2af4:	40064000 	.word	0x40064000

00002af8 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2af8:	b084      	sub	sp, #16
    2afa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2afc:	4b0a      	ldr	r3, [pc, #40]	; (2b28 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2afe:	685b      	ldr	r3, [r3, #4]
    2b00:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2b02:	9b03      	ldr	r3, [sp, #12]
    2b04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2b08:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2b0a:	9b01      	ldr	r3, [sp, #4]
    2b0c:	685b      	ldr	r3, [r3, #4]
    2b0e:	3b01      	subs	r3, #1
    2b10:	021b      	lsls	r3, r3, #8
    2b12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2b16:	9a03      	ldr	r2, [sp, #12]
    2b18:	4313      	orrs	r3, r2
    2b1a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2b1c:	4a02      	ldr	r2, [pc, #8]	; (2b28 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2b1e:	9b03      	ldr	r3, [sp, #12]
    2b20:	6053      	str	r3, [r2, #4]
}
    2b22:	bf00      	nop
    2b24:	b004      	add	sp, #16
    2b26:	4770      	bx	lr
    2b28:	40048000 	.word	0x40048000

00002b2c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2b2c:	b084      	sub	sp, #16
    2b2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2b30:	4919      	ldr	r1, [pc, #100]	; (2b98 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2b32:	9b01      	ldr	r3, [sp, #4]
    2b34:	681a      	ldr	r2, [r3, #0]
    2b36:	4819      	ldr	r0, [pc, #100]	; (2b9c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2b38:	4613      	mov	r3, r2
    2b3a:	00db      	lsls	r3, r3, #3
    2b3c:	4413      	add	r3, r2
    2b3e:	4403      	add	r3, r0
    2b40:	3305      	adds	r3, #5
    2b42:	781b      	ldrb	r3, [r3, #0]
    2b44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2b48:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2b4a:	9b03      	ldr	r3, [sp, #12]
    2b4c:	f023 030f 	bic.w	r3, r3, #15
    2b50:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2b52:	9b01      	ldr	r3, [sp, #4]
    2b54:	685b      	ldr	r3, [r3, #4]
    2b56:	3b01      	subs	r3, #1
    2b58:	f003 0307 	and.w	r3, r3, #7
    2b5c:	9a03      	ldr	r2, [sp, #12]
    2b5e:	4313      	orrs	r3, r2
    2b60:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2b62:	9b01      	ldr	r3, [sp, #4]
    2b64:	7a1b      	ldrb	r3, [r3, #8]
    2b66:	3b01      	subs	r3, #1
    2b68:	00db      	lsls	r3, r3, #3
    2b6a:	f003 0308 	and.w	r3, r3, #8
    2b6e:	9a03      	ldr	r2, [sp, #12]
    2b70:	4313      	orrs	r3, r2
    2b72:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2b74:	4908      	ldr	r1, [pc, #32]	; (2b98 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2b76:	9b01      	ldr	r3, [sp, #4]
    2b78:	681a      	ldr	r2, [r3, #0]
    2b7a:	4808      	ldr	r0, [pc, #32]	; (2b9c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2b7c:	4613      	mov	r3, r2
    2b7e:	00db      	lsls	r3, r3, #3
    2b80:	4413      	add	r3, r2
    2b82:	4403      	add	r3, r0
    2b84:	3305      	adds	r3, #5
    2b86:	781b      	ldrb	r3, [r3, #0]
    2b88:	461a      	mov	r2, r3
    2b8a:	9b03      	ldr	r3, [sp, #12]
    2b8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2b90:	bf00      	nop
    2b92:	b004      	add	sp, #16
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop
    2b98:	40065000 	.word	0x40065000
    2b9c:	00007d44 	.word	0x00007d44

00002ba0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ba0:	b084      	sub	sp, #16
    2ba2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2ba4:	4b10      	ldr	r3, [pc, #64]	; (2be8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ba8:	4a0f      	ldr	r2, [pc, #60]	; (2be8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2bae:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2bb0:	4b0d      	ldr	r3, [pc, #52]	; (2be8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2bb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2bb6:	9b03      	ldr	r3, [sp, #12]
    2bb8:	f023 030f 	bic.w	r3, r3, #15
    2bbc:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2bbe:	9b01      	ldr	r3, [sp, #4]
    2bc0:	685b      	ldr	r3, [r3, #4]
    2bc2:	3b01      	subs	r3, #1
    2bc4:	005b      	lsls	r3, r3, #1
    2bc6:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	7a1b      	ldrb	r3, [r3, #8]
    2bce:	3b01      	subs	r3, #1
    2bd0:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2bd4:	4313      	orrs	r3, r2
    2bd6:	9a03      	ldr	r2, [sp, #12]
    2bd8:	4313      	orrs	r3, r2
    2bda:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2bdc:	4a02      	ldr	r2, [pc, #8]	; (2be8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2bde:	9b03      	ldr	r3, [sp, #12]
    2be0:	6693      	str	r3, [r2, #104]	; 0x68
}
    2be2:	bf00      	nop
    2be4:	b004      	add	sp, #16
    2be6:	4770      	bx	lr
    2be8:	40048000 	.word	0x40048000

00002bec <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2bec:	b082      	sub	sp, #8
    2bee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2bf0:	bf00      	nop
    2bf2:	b002      	add	sp, #8
    2bf4:	4770      	bx	lr
	...

00002bf8 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2bf8:	b082      	sub	sp, #8
    2bfa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2bfc:	bf00      	nop
    2bfe:	b002      	add	sp, #8
    2c00:	4770      	bx	lr

00002c02 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2c02:	b082      	sub	sp, #8
    2c04:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2c06:	bf00      	nop
    2c08:	b002      	add	sp, #8
    2c0a:	4770      	bx	lr

00002c0c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2c0c:	b500      	push	{lr}
    2c0e:	b083      	sub	sp, #12
    2c10:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c12:	9b01      	ldr	r3, [sp, #4]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d002      	beq.n	2c1e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2c18:	9801      	ldr	r0, [sp, #4]
    2c1a:	f000 f86a 	bl	2cf2 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c1e:	bf00      	nop
    2c20:	b003      	add	sp, #12
    2c22:	f85d fb04 	ldr.w	pc, [sp], #4

00002c26 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2c26:	b500      	push	{lr}
    2c28:	b083      	sub	sp, #12
    2c2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c2c:	9b01      	ldr	r3, [sp, #4]
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d002      	beq.n	2c38 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    2c32:	9801      	ldr	r0, [sp, #4]
    2c34:	f000 f884 	bl	2d40 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2c38:	bf00      	nop
    2c3a:	b003      	add	sp, #12
    2c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c40 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2c40:	b500      	push	{lr}
    2c42:	b089      	sub	sp, #36	; 0x24
    2c44:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2c46:	2300      	movs	r3, #0
    2c48:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2c4c:	9b01      	ldr	r3, [sp, #4]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d031      	beq.n	2cb6 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    2c52:	4b1b      	ldr	r3, [pc, #108]	; (2cc0 <Clock_Ip_CompleteSOSC+0x80>)
    2c54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c58:	f003 0301 	and.w	r3, r3, #1
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d02a      	beq.n	2cb6 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2c60:	aa03      	add	r2, sp, #12
    2c62:	a904      	add	r1, sp, #16
    2c64:	a805      	add	r0, sp, #20
    2c66:	f24c 3350 	movw	r3, #50000	; 0xc350
    2c6a:	f7ff fd1d 	bl	26a8 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2c6e:	4b14      	ldr	r3, [pc, #80]	; (2cc0 <Clock_Ip_CompleteSOSC+0x80>)
    2c70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c74:	0e1b      	lsrs	r3, r3, #24
    2c76:	f003 0301 	and.w	r3, r3, #1
    2c7a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2c7c:	9a03      	ldr	r2, [sp, #12]
    2c7e:	a904      	add	r1, sp, #16
    2c80:	ab05      	add	r3, sp, #20
    2c82:	4618      	mov	r0, r3
    2c84:	f7ff fd2a 	bl	26dc <Clock_Ip_TimeoutExpired>
    2c88:	4603      	mov	r3, r0
    2c8a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2c8e:	9b06      	ldr	r3, [sp, #24]
    2c90:	2b00      	cmp	r3, #0
    2c92:	d106      	bne.n	2ca2 <Clock_Ip_CompleteSOSC+0x62>
    2c94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2c98:	f083 0301 	eor.w	r3, r3, #1
    2c9c:	b2db      	uxtb	r3, r3
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d1e5      	bne.n	2c6e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2ca2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d005      	beq.n	2cb6 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2caa:	9b01      	ldr	r3, [sp, #4]
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	4619      	mov	r1, r3
    2cb0:	2001      	movs	r0, #1
    2cb2:	f7ff fce9 	bl	2688 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2cb6:	bf00      	nop
    2cb8:	b009      	add	sp, #36	; 0x24
    2cba:	f85d fb04 	ldr.w	pc, [sp], #4
    2cbe:	bf00      	nop
    2cc0:	40064000 	.word	0x40064000

00002cc4 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2cc4:	b500      	push	{lr}
    2cc6:	b083      	sub	sp, #12
    2cc8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2cca:	9801      	ldr	r0, [sp, #4]
    2ccc:	f000 f8c0 	bl	2e50 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2cd0:	bf00      	nop
    2cd2:	b003      	add	sp, #12
    2cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd8 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2cd8:	b500      	push	{lr}
    2cda:	b083      	sub	sp, #12
    2cdc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cde:	9b01      	ldr	r3, [sp, #4]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d002      	beq.n	2cea <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2ce4:	9801      	ldr	r0, [sp, #4]
    2ce6:	f000 f8c3 	bl	2e70 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cea:	bf00      	nop
    2cec:	b003      	add	sp, #12
    2cee:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf2 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2cf2:	b082      	sub	sp, #8
    2cf4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2cf6:	4b11      	ldr	r3, [pc, #68]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2cf8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2cfc:	4a0f      	ldr	r2, [pc, #60]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2cfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2d02:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2d06:	4b0d      	ldr	r3, [pc, #52]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2d08:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2d0c:	4a0b      	ldr	r2, [pc, #44]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2d12:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2d16:	4b09      	ldr	r3, [pc, #36]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2d18:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2d1c:	4a07      	ldr	r2, [pc, #28]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2d1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2d22:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2d26:	4b05      	ldr	r3, [pc, #20]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2d28:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2d2c:	4a03      	ldr	r2, [pc, #12]	; (2d3c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2d2e:	f023 0301 	bic.w	r3, r3, #1
    2d32:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2d36:	bf00      	nop
    2d38:	b002      	add	sp, #8
    2d3a:	4770      	bx	lr
    2d3c:	40064000 	.word	0x40064000

00002d40 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2d40:	b082      	sub	sp, #8
    2d42:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2d44:	9b01      	ldr	r3, [sp, #4]
    2d46:	891b      	ldrh	r3, [r3, #8]
    2d48:	2b01      	cmp	r3, #1
    2d4a:	d174      	bne.n	2e36 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2d4c:	9b01      	ldr	r3, [sp, #4]
    2d4e:	7bdb      	ldrb	r3, [r3, #15]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d002      	beq.n	2d5a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2d54:	2b01      	cmp	r3, #1
    2d56:	d009      	beq.n	2d6c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2d58:	e011      	b.n	2d7e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2d5a:	4b39      	ldr	r3, [pc, #228]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2d60:	4a37      	ldr	r2, [pc, #220]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d62:	f023 0308 	bic.w	r3, r3, #8
    2d66:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2d6a:	e008      	b.n	2d7e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2d6c:	4b34      	ldr	r3, [pc, #208]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2d72:	4a33      	ldr	r2, [pc, #204]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d74:	f043 0308 	orr.w	r3, r3, #8
    2d78:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2d7c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2d7e:	4b30      	ldr	r3, [pc, #192]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2d84:	4a2e      	ldr	r2, [pc, #184]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2d8a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	4a2c      	ldr	r2, [pc, #176]	; (2e44 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2d94:	4293      	cmp	r3, r2
    2d96:	d90d      	bls.n	2db4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	685b      	ldr	r3, [r3, #4]
    2d9c:	4a2a      	ldr	r2, [pc, #168]	; (2e48 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2d9e:	4293      	cmp	r3, r2
    2da0:	d208      	bcs.n	2db4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2da2:	4b27      	ldr	r3, [pc, #156]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2da4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2da8:	4a25      	ldr	r2, [pc, #148]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2daa:	f043 0320 	orr.w	r3, r3, #32
    2dae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2db2:	e007      	b.n	2dc4 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2db4:	4b22      	ldr	r3, [pc, #136]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2db6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2dba:	4a21      	ldr	r2, [pc, #132]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2dbc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2dc0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2dc4:	9b01      	ldr	r3, [sp, #4]
    2dc6:	7b1b      	ldrb	r3, [r3, #12]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d108      	bne.n	2dde <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2dcc:	4b1c      	ldr	r3, [pc, #112]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2dce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2dd2:	4a1b      	ldr	r2, [pc, #108]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2dd4:	f043 0304 	orr.w	r3, r3, #4
    2dd8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2ddc:	e007      	b.n	2dee <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2dde:	4b18      	ldr	r3, [pc, #96]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2de0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2de4:	4a16      	ldr	r2, [pc, #88]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2de6:	f023 0304 	bic.w	r3, r3, #4
    2dea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2dee:	9b01      	ldr	r3, [sp, #4]
    2df0:	7c1b      	ldrb	r3, [r3, #16]
    2df2:	2b02      	cmp	r3, #2
    2df4:	d011      	beq.n	2e1a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2df6:	2b02      	cmp	r3, #2
    2df8:	dc14      	bgt.n	2e24 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d002      	beq.n	2e04 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2dfe:	2b01      	cmp	r3, #1
    2e00:	d005      	beq.n	2e0e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    2e02:	e00f      	b.n	2e24 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2e04:	4b0e      	ldr	r3, [pc, #56]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2e06:	2201      	movs	r2, #1
    2e08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2e0c:	e014      	b.n	2e38 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2e0e:	4b0c      	ldr	r3, [pc, #48]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2e10:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2e14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2e18:	e00e      	b.n	2e38 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2e1a:	4b09      	ldr	r3, [pc, #36]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2e1c:	4a0b      	ldr	r2, [pc, #44]	; (2e4c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2e1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    2e22:	e009      	b.n	2e38 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2e24:	4b06      	ldr	r3, [pc, #24]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2e26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2e2a:	4a05      	ldr	r2, [pc, #20]	; (2e40 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2e2c:	f043 0301 	orr.w	r3, r3, #1
    2e30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2e34:	e000      	b.n	2e38 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2e36:	bf00      	nop
}
    2e38:	bf00      	nop
    2e3a:	b002      	add	sp, #8
    2e3c:	4770      	bx	lr
    2e3e:	bf00      	nop
    2e40:	40064000 	.word	0x40064000
    2e44:	003d08ff 	.word	0x003d08ff
    2e48:	007a1200 	.word	0x007a1200
    2e4c:	00030001 	.word	0x00030001

00002e50 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2e50:	b082      	sub	sp, #8
    2e52:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2e54:	4b05      	ldr	r3, [pc, #20]	; (2e6c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2e56:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2e5a:	4a04      	ldr	r2, [pc, #16]	; (2e6c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2e5c:	f023 0301 	bic.w	r3, r3, #1
    2e60:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2e64:	bf00      	nop
    2e66:	b002      	add	sp, #8
    2e68:	4770      	bx	lr
    2e6a:	bf00      	nop
    2e6c:	40064000 	.word	0x40064000

00002e70 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2e70:	b082      	sub	sp, #8
    2e72:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2e74:	9b01      	ldr	r3, [sp, #4]
    2e76:	891b      	ldrh	r3, [r3, #8]
    2e78:	2b01      	cmp	r3, #1
    2e7a:	d107      	bne.n	2e8c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2e7c:	4b05      	ldr	r3, [pc, #20]	; (2e94 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2e7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2e82:	4a04      	ldr	r2, [pc, #16]	; (2e94 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2e84:	f043 0301 	orr.w	r3, r3, #1
    2e88:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2e8c:	bf00      	nop
    2e8e:	b002      	add	sp, #8
    2e90:	4770      	bx	lr
    2e92:	bf00      	nop
    2e94:	40064000 	.word	0x40064000

00002e98 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2e98:	b082      	sub	sp, #8
    2e9a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e9c:	bf00      	nop
    2e9e:	b002      	add	sp, #8
    2ea0:	4770      	bx	lr

00002ea2 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2ea2:	b082      	sub	sp, #8
    2ea4:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2ea6:	2300      	movs	r3, #0
}
    2ea8:	4618      	mov	r0, r3
    2eaa:	b002      	add	sp, #8
    2eac:	4770      	bx	lr

00002eae <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2eae:	b082      	sub	sp, #8
    2eb0:	9001      	str	r0, [sp, #4]
    2eb2:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2eb4:	bf00      	nop
    2eb6:	b002      	add	sp, #8
    2eb8:	4770      	bx	lr
	...

00002ebc <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2ebc:	b082      	sub	sp, #8
    2ebe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ec0:	bf00      	nop
    2ec2:	b002      	add	sp, #8
    2ec4:	4770      	bx	lr

00002ec6 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ec6:	b082      	sub	sp, #8
    2ec8:	9001      	str	r0, [sp, #4]
    2eca:	460b      	mov	r3, r1
    2ecc:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2ed0:	bf00      	nop
    2ed2:	b002      	add	sp, #8
    2ed4:	4770      	bx	lr

00002ed6 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2ed6:	b500      	push	{lr}
    2ed8:	b083      	sub	sp, #12
    2eda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2edc:	9b01      	ldr	r3, [sp, #4]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d002      	beq.n	2ee8 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2ee2:	9801      	ldr	r0, [sp, #4]
    2ee4:	f000 f8e7 	bl	30b6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ee8:	bf00      	nop
    2eea:	b003      	add	sp, #12
    2eec:	f85d fb04 	ldr.w	pc, [sp], #4

00002ef0 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ef0:	b500      	push	{lr}
    2ef2:	b085      	sub	sp, #20
    2ef4:	9001      	str	r0, [sp, #4]
    2ef6:	460b      	mov	r3, r1
    2ef8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2efc:	9b01      	ldr	r3, [sp, #4]
    2efe:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2f00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d003      	beq.n	2f10 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2f08:	2300      	movs	r3, #0
    2f0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    2f0e:	e002      	b.n	2f16 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2f10:	2301      	movs	r3, #1
    2f12:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2f16:	ab02      	add	r3, sp, #8
    2f18:	4618      	mov	r0, r3
    2f1a:	f7ff ffdc 	bl	2ed6 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2f1e:	bf00      	nop
    2f20:	b005      	add	sp, #20
    2f22:	f85d fb04 	ldr.w	pc, [sp], #4

00002f26 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2f26:	b500      	push	{lr}
    2f28:	b083      	sub	sp, #12
    2f2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f2c:	9b01      	ldr	r3, [sp, #4]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d002      	beq.n	2f38 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2f32:	9801      	ldr	r0, [sp, #4]
    2f34:	f000 f8d6 	bl	30e4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f38:	bf00      	nop
    2f3a:	b003      	add	sp, #12
    2f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f40 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2f40:	b500      	push	{lr}
    2f42:	b085      	sub	sp, #20
    2f44:	9001      	str	r0, [sp, #4]
    2f46:	460b      	mov	r3, r1
    2f48:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2f4c:	9b01      	ldr	r3, [sp, #4]
    2f4e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2f50:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f54:	2b00      	cmp	r3, #0
    2f56:	d003      	beq.n	2f60 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2f58:	2300      	movs	r3, #0
    2f5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    2f5e:	e002      	b.n	2f66 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2f60:	2301      	movs	r3, #1
    2f62:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2f66:	ab02      	add	r3, sp, #8
    2f68:	4618      	mov	r0, r3
    2f6a:	f7ff ffdc 	bl	2f26 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2f6e:	bf00      	nop
    2f70:	b005      	add	sp, #20
    2f72:	f85d fb04 	ldr.w	pc, [sp], #4

00002f76 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2f76:	b500      	push	{lr}
    2f78:	b083      	sub	sp, #12
    2f7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f7c:	9b01      	ldr	r3, [sp, #4]
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d002      	beq.n	2f88 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2f82:	9801      	ldr	r0, [sp, #4]
    2f84:	f000 f8c6 	bl	3114 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f88:	bf00      	nop
    2f8a:	b003      	add	sp, #12
    2f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f90 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2f90:	b500      	push	{lr}
    2f92:	b085      	sub	sp, #20
    2f94:	9001      	str	r0, [sp, #4]
    2f96:	460b      	mov	r3, r1
    2f98:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2f9c:	9b01      	ldr	r3, [sp, #4]
    2f9e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2fa0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d003      	beq.n	2fb0 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2fa8:	2300      	movs	r3, #0
    2faa:	f8ad 300c 	strh.w	r3, [sp, #12]
    2fae:	e002      	b.n	2fb6 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2fb0:	2301      	movs	r3, #1
    2fb2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2fb6:	ab02      	add	r3, sp, #8
    2fb8:	4618      	mov	r0, r3
    2fba:	f7ff ffdc 	bl	2f76 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2fbe:	bf00      	nop
    2fc0:	b005      	add	sp, #20
    2fc2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fc6 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2fc6:	b500      	push	{lr}
    2fc8:	b083      	sub	sp, #12
    2fca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fcc:	9b01      	ldr	r3, [sp, #4]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d002      	beq.n	2fd8 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2fd2:	9801      	ldr	r0, [sp, #4]
    2fd4:	f000 f8b6 	bl	3144 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fd8:	bf00      	nop
    2fda:	b003      	add	sp, #12
    2fdc:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe0 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2fe0:	b500      	push	{lr}
    2fe2:	b085      	sub	sp, #20
    2fe4:	9001      	str	r0, [sp, #4]
    2fe6:	460b      	mov	r3, r1
    2fe8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2fec:	9b01      	ldr	r3, [sp, #4]
    2fee:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2ff0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d003      	beq.n	3000 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2ff8:	2300      	movs	r3, #0
    2ffa:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ffe:	e002      	b.n	3006 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3000:	2301      	movs	r3, #1
    3002:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3006:	ab02      	add	r3, sp, #8
    3008:	4618      	mov	r0, r3
    300a:	f7ff ffdc 	bl	2fc6 <Clock_Ip_ClockSetPccCgcEnable>
}
    300e:	bf00      	nop
    3010:	b005      	add	sp, #20
    3012:	f85d fb04 	ldr.w	pc, [sp], #4

00003016 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3016:	b500      	push	{lr}
    3018:	b083      	sub	sp, #12
    301a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    301c:	9b01      	ldr	r3, [sp, #4]
    301e:	2b00      	cmp	r3, #0
    3020:	d002      	beq.n	3028 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3022:	9801      	ldr	r0, [sp, #4]
    3024:	f000 f8bc 	bl	31a0 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3028:	bf00      	nop
    302a:	b003      	add	sp, #12
    302c:	f85d fb04 	ldr.w	pc, [sp], #4

00003030 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3030:	b500      	push	{lr}
    3032:	b085      	sub	sp, #20
    3034:	9001      	str	r0, [sp, #4]
    3036:	460b      	mov	r3, r1
    3038:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    303c:	9b01      	ldr	r3, [sp, #4]
    303e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3040:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3044:	2b00      	cmp	r3, #0
    3046:	d003      	beq.n	3050 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3048:	2300      	movs	r3, #0
    304a:	f8ad 300c 	strh.w	r3, [sp, #12]
    304e:	e002      	b.n	3056 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3050:	2301      	movs	r3, #1
    3052:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3056:	ab02      	add	r3, sp, #8
    3058:	4618      	mov	r0, r3
    305a:	f7ff ffdc 	bl	3016 <Clock_Ip_ClockSetSimGate>
}
    305e:	bf00      	nop
    3060:	b005      	add	sp, #20
    3062:	f85d fb04 	ldr.w	pc, [sp], #4

00003066 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3066:	b500      	push	{lr}
    3068:	b083      	sub	sp, #12
    306a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    306c:	9b01      	ldr	r3, [sp, #4]
    306e:	2b00      	cmp	r3, #0
    3070:	d002      	beq.n	3078 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3072:	9801      	ldr	r0, [sp, #4]
    3074:	f000 f8c0 	bl	31f8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3078:	bf00      	nop
    307a:	b003      	add	sp, #12
    307c:	f85d fb04 	ldr.w	pc, [sp], #4

00003080 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3080:	b500      	push	{lr}
    3082:	b085      	sub	sp, #20
    3084:	9001      	str	r0, [sp, #4]
    3086:	460b      	mov	r3, r1
    3088:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    308c:	9b01      	ldr	r3, [sp, #4]
    308e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3090:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3094:	2b00      	cmp	r3, #0
    3096:	d003      	beq.n	30a0 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3098:	2300      	movs	r3, #0
    309a:	f8ad 300c 	strh.w	r3, [sp, #12]
    309e:	e002      	b.n	30a6 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    30a0:	2301      	movs	r3, #1
    30a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    30a6:	ab02      	add	r3, sp, #8
    30a8:	4618      	mov	r0, r3
    30aa:	f7ff ffdc 	bl	3066 <Clock_Ip_ClockSetSimTraceEnable>
}
    30ae:	bf00      	nop
    30b0:	b005      	add	sp, #20
    30b2:	f85d fb04 	ldr.w	pc, [sp], #4

000030b6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    30b6:	b084      	sub	sp, #16
    30b8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    30ba:	4b09      	ldr	r3, [pc, #36]	; (30e0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    30bc:	691b      	ldr	r3, [r3, #16]
    30be:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    30c0:	9b03      	ldr	r3, [sp, #12]
    30c2:	f023 0301 	bic.w	r3, r3, #1
    30c6:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	889b      	ldrh	r3, [r3, #4]
    30cc:	461a      	mov	r2, r3
    30ce:	9b03      	ldr	r3, [sp, #12]
    30d0:	4313      	orrs	r3, r2
    30d2:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    30d4:	4a02      	ldr	r2, [pc, #8]	; (30e0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    30d6:	9b03      	ldr	r3, [sp, #12]
    30d8:	6113      	str	r3, [r2, #16]
}
    30da:	bf00      	nop
    30dc:	b004      	add	sp, #16
    30de:	4770      	bx	lr
    30e0:	40048000 	.word	0x40048000

000030e4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    30e4:	b084      	sub	sp, #16
    30e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    30e8:	4b09      	ldr	r3, [pc, #36]	; (3110 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    30ea:	691b      	ldr	r3, [r3, #16]
    30ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    30ee:	9b03      	ldr	r3, [sp, #12]
    30f0:	f023 0302 	bic.w	r3, r3, #2
    30f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    30f6:	9b01      	ldr	r3, [sp, #4]
    30f8:	889b      	ldrh	r3, [r3, #4]
    30fa:	005b      	lsls	r3, r3, #1
    30fc:	9a03      	ldr	r2, [sp, #12]
    30fe:	4313      	orrs	r3, r2
    3100:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3102:	4a03      	ldr	r2, [pc, #12]	; (3110 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3104:	9b03      	ldr	r3, [sp, #12]
    3106:	6113      	str	r3, [r2, #16]
}
    3108:	bf00      	nop
    310a:	b004      	add	sp, #16
    310c:	4770      	bx	lr
    310e:	bf00      	nop
    3110:	40048000 	.word	0x40048000

00003114 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3114:	b084      	sub	sp, #16
    3116:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3118:	4b09      	ldr	r3, [pc, #36]	; (3140 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    311a:	685b      	ldr	r3, [r3, #4]
    311c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    311e:	9b03      	ldr	r3, [sp, #12]
    3120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3124:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3126:	9b01      	ldr	r3, [sp, #4]
    3128:	889b      	ldrh	r3, [r3, #4]
    312a:	02db      	lsls	r3, r3, #11
    312c:	9a03      	ldr	r2, [sp, #12]
    312e:	4313      	orrs	r3, r2
    3130:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3132:	4a03      	ldr	r2, [pc, #12]	; (3140 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3134:	9b03      	ldr	r3, [sp, #12]
    3136:	6053      	str	r3, [r2, #4]
}
    3138:	bf00      	nop
    313a:	b004      	add	sp, #16
    313c:	4770      	bx	lr
    313e:	bf00      	nop
    3140:	40048000 	.word	0x40048000

00003144 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3144:	b084      	sub	sp, #16
    3146:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3148:	4913      	ldr	r1, [pc, #76]	; (3198 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	681a      	ldr	r2, [r3, #0]
    314e:	4813      	ldr	r0, [pc, #76]	; (319c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3150:	4613      	mov	r3, r2
    3152:	00db      	lsls	r3, r3, #3
    3154:	4413      	add	r3, r2
    3156:	4403      	add	r3, r0
    3158:	3306      	adds	r3, #6
    315a:	781b      	ldrb	r3, [r3, #0]
    315c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3160:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3162:	9b03      	ldr	r3, [sp, #12]
    3164:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3168:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    316a:	9b01      	ldr	r3, [sp, #4]
    316c:	889b      	ldrh	r3, [r3, #4]
    316e:	079b      	lsls	r3, r3, #30
    3170:	9a03      	ldr	r2, [sp, #12]
    3172:	4313      	orrs	r3, r2
    3174:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3176:	4908      	ldr	r1, [pc, #32]	; (3198 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3178:	9b01      	ldr	r3, [sp, #4]
    317a:	681a      	ldr	r2, [r3, #0]
    317c:	4807      	ldr	r0, [pc, #28]	; (319c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    317e:	4613      	mov	r3, r2
    3180:	00db      	lsls	r3, r3, #3
    3182:	4413      	add	r3, r2
    3184:	4403      	add	r3, r0
    3186:	3306      	adds	r3, #6
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	461a      	mov	r2, r3
    318c:	9b03      	ldr	r3, [sp, #12]
    318e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3192:	bf00      	nop
    3194:	b004      	add	sp, #16
    3196:	4770      	bx	lr
    3198:	40065000 	.word	0x40065000
    319c:	00007d44 	.word	0x00007d44

000031a0 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    31a0:	b086      	sub	sp, #24
    31a2:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    31a4:	9b01      	ldr	r3, [sp, #4]
    31a6:	889b      	ldrh	r3, [r3, #4]
    31a8:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    31aa:	9b01      	ldr	r3, [sp, #4]
    31ac:	681a      	ldr	r2, [r3, #0]
    31ae:	4910      	ldr	r1, [pc, #64]	; (31f0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    31b0:	4613      	mov	r3, r2
    31b2:	00db      	lsls	r3, r3, #3
    31b4:	4413      	add	r3, r2
    31b6:	440b      	add	r3, r1
    31b8:	3306      	adds	r3, #6
    31ba:	781b      	ldrb	r3, [r3, #0]
    31bc:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    31be:	4b0d      	ldr	r3, [pc, #52]	; (31f4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    31c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31c2:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    31c4:	2201      	movs	r2, #1
    31c6:	9b04      	ldr	r3, [sp, #16]
    31c8:	fa02 f303 	lsl.w	r3, r2, r3
    31cc:	43db      	mvns	r3, r3
    31ce:	9a03      	ldr	r2, [sp, #12]
    31d0:	4013      	ands	r3, r2
    31d2:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    31d4:	9a05      	ldr	r2, [sp, #20]
    31d6:	9b04      	ldr	r3, [sp, #16]
    31d8:	fa02 f303 	lsl.w	r3, r2, r3
    31dc:	9a03      	ldr	r2, [sp, #12]
    31de:	4313      	orrs	r3, r2
    31e0:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    31e2:	4a04      	ldr	r2, [pc, #16]	; (31f4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    31e4:	9b03      	ldr	r3, [sp, #12]
    31e6:	6413      	str	r3, [r2, #64]	; 0x40
}
    31e8:	bf00      	nop
    31ea:	b006      	add	sp, #24
    31ec:	4770      	bx	lr
    31ee:	bf00      	nop
    31f0:	00007d44 	.word	0x00007d44
    31f4:	40048000 	.word	0x40048000

000031f8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    31f8:	b084      	sub	sp, #16
    31fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    31fc:	4b0a      	ldr	r3, [pc, #40]	; (3228 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    31fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3200:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3202:	9b01      	ldr	r3, [sp, #4]
    3204:	889b      	ldrh	r3, [r3, #4]
    3206:	2b01      	cmp	r3, #1
    3208:	d104      	bne.n	3214 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    320a:	9b03      	ldr	r3, [sp, #12]
    320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3210:	9303      	str	r3, [sp, #12]
    3212:	e003      	b.n	321c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3214:	9b03      	ldr	r3, [sp, #12]
    3216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    321a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    321c:	4a02      	ldr	r2, [pc, #8]	; (3228 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    321e:	9b03      	ldr	r3, [sp, #12]
    3220:	6693      	str	r3, [r2, #104]	; 0x68
}
    3222:	bf00      	nop
    3224:	b004      	add	sp, #16
    3226:	4770      	bx	lr
    3228:	40048000 	.word	0x40048000

0000322c <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    322c:	b082      	sub	sp, #8
    322e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3230:	bf00      	nop
    3232:	b002      	add	sp, #8
    3234:	4770      	bx	lr

00003236 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3236:	b082      	sub	sp, #8
    3238:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    323a:	bf00      	nop
    323c:	b002      	add	sp, #8
    323e:	4770      	bx	lr

00003240 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3240:	b500      	push	{lr}
    3242:	b083      	sub	sp, #12
    3244:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	2b00      	cmp	r3, #0
    324a:	d002      	beq.n	3252 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    324c:	9801      	ldr	r0, [sp, #4]
    324e:	f000 f8d1 	bl	33f4 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3252:	bf00      	nop
    3254:	b003      	add	sp, #12
    3256:	f85d fb04 	ldr.w	pc, [sp], #4

0000325a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    325a:	b500      	push	{lr}
    325c:	b083      	sub	sp, #12
    325e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3260:	9b01      	ldr	r3, [sp, #4]
    3262:	2b00      	cmp	r3, #0
    3264:	d002      	beq.n	326c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3266:	9801      	ldr	r0, [sp, #4]
    3268:	f000 f950 	bl	350c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    326c:	bf00      	nop
    326e:	b003      	add	sp, #12
    3270:	f85d fb04 	ldr.w	pc, [sp], #4

00003274 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3274:	b500      	push	{lr}
    3276:	b083      	sub	sp, #12
    3278:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    327a:	9801      	ldr	r0, [sp, #4]
    327c:	f000 f98e 	bl	359c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3280:	bf00      	nop
    3282:	b003      	add	sp, #12
    3284:	f85d fb04 	ldr.w	pc, [sp], #4

00003288 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3288:	b500      	push	{lr}
    328a:	b083      	sub	sp, #12
    328c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    328e:	9b01      	ldr	r3, [sp, #4]
    3290:	2b00      	cmp	r3, #0
    3292:	d002      	beq.n	329a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3294:	9801      	ldr	r0, [sp, #4]
    3296:	f000 f999 	bl	35cc <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    329a:	bf00      	nop
    329c:	b003      	add	sp, #12
    329e:	f85d fb04 	ldr.w	pc, [sp], #4

000032a2 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    32a2:	b500      	push	{lr}
    32a4:	b083      	sub	sp, #12
    32a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32a8:	9b01      	ldr	r3, [sp, #4]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d002      	beq.n	32b4 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    32ae:	9801      	ldr	r0, [sp, #4]
    32b0:	f000 f9b0 	bl	3614 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32b4:	bf00      	nop
    32b6:	b003      	add	sp, #12
    32b8:	f85d fb04 	ldr.w	pc, [sp], #4

000032bc <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    32bc:	b500      	push	{lr}
    32be:	b083      	sub	sp, #12
    32c0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    32c2:	9801      	ldr	r0, [sp, #4]
    32c4:	f000 f9ba 	bl	363c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    32c8:	bf00      	nop
    32ca:	b003      	add	sp, #12
    32cc:	f85d fb04 	ldr.w	pc, [sp], #4

000032d0 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    32d0:	b500      	push	{lr}
    32d2:	b083      	sub	sp, #12
    32d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32d6:	9b01      	ldr	r3, [sp, #4]
    32d8:	2b00      	cmp	r3, #0
    32da:	d002      	beq.n	32e2 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    32dc:	9801      	ldr	r0, [sp, #4]
    32de:	f000 f9bd 	bl	365c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32e2:	bf00      	nop
    32e4:	b003      	add	sp, #12
    32e6:	f85d fb04 	ldr.w	pc, [sp], #4

000032ea <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    32ea:	b500      	push	{lr}
    32ec:	b083      	sub	sp, #12
    32ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32f0:	9b01      	ldr	r3, [sp, #4]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d002      	beq.n	32fc <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    32f6:	9801      	ldr	r0, [sp, #4]
    32f8:	f000 f9d4 	bl	36a4 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32fc:	bf00      	nop
    32fe:	b003      	add	sp, #12
    3300:	f85d fb04 	ldr.w	pc, [sp], #4

00003304 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3304:	b500      	push	{lr}
    3306:	b083      	sub	sp, #12
    3308:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    330a:	9801      	ldr	r0, [sp, #4]
    330c:	f000 f9de 	bl	36cc <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3310:	bf00      	nop
    3312:	b003      	add	sp, #12
    3314:	f85d fb04 	ldr.w	pc, [sp], #4

00003318 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3318:	b500      	push	{lr}
    331a:	b089      	sub	sp, #36	; 0x24
    331c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    331e:	2300      	movs	r3, #0
    3320:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3324:	4b20      	ldr	r3, [pc, #128]	; (33a8 <SetInputSouceSytemClock+0x90>)
    3326:	695b      	ldr	r3, [r3, #20]
    3328:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    332a:	9b06      	ldr	r3, [sp, #24]
    332c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3330:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	061b      	lsls	r3, r3, #24
    3336:	9a06      	ldr	r2, [sp, #24]
    3338:	4313      	orrs	r3, r2
    333a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    333c:	4a1a      	ldr	r2, [pc, #104]	; (33a8 <SetInputSouceSytemClock+0x90>)
    333e:	9b06      	ldr	r3, [sp, #24]
    3340:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3342:	aa02      	add	r2, sp, #8
    3344:	a903      	add	r1, sp, #12
    3346:	a804      	add	r0, sp, #16
    3348:	f24c 3350 	movw	r3, #50000	; 0xc350
    334c:	f7ff f9ac 	bl	26a8 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3350:	4b15      	ldr	r3, [pc, #84]	; (33a8 <SetInputSouceSytemClock+0x90>)
    3352:	691b      	ldr	r3, [r3, #16]
    3354:	0e1b      	lsrs	r3, r3, #24
    3356:	f003 030f 	and.w	r3, r3, #15
    335a:	9a01      	ldr	r2, [sp, #4]
    335c:	429a      	cmp	r2, r3
    335e:	bf0c      	ite	eq
    3360:	2301      	moveq	r3, #1
    3362:	2300      	movne	r3, #0
    3364:	b2db      	uxtb	r3, r3
    3366:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3368:	9a02      	ldr	r2, [sp, #8]
    336a:	a903      	add	r1, sp, #12
    336c:	ab04      	add	r3, sp, #16
    336e:	4618      	mov	r0, r3
    3370:	f7ff f9b4 	bl	26dc <Clock_Ip_TimeoutExpired>
    3374:	4603      	mov	r3, r0
    3376:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    337a:	9b05      	ldr	r3, [sp, #20]
    337c:	2b00      	cmp	r3, #0
    337e:	d106      	bne.n	338e <SetInputSouceSytemClock+0x76>
    3380:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3384:	f083 0301 	eor.w	r3, r3, #1
    3388:	b2db      	uxtb	r3, r3
    338a:	2b00      	cmp	r3, #0
    338c:	d1e0      	bne.n	3350 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    338e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3392:	2b00      	cmp	r3, #0
    3394:	d003      	beq.n	339e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3396:	2105      	movs	r1, #5
    3398:	2001      	movs	r0, #1
    339a:	f7ff f975 	bl	2688 <Clock_Ip_ReportClockErrors>
    }
}
    339e:	bf00      	nop
    33a0:	b009      	add	sp, #36	; 0x24
    33a2:	f85d fb04 	ldr.w	pc, [sp], #4
    33a6:	bf00      	nop
    33a8:	40064000 	.word	0x40064000

000033ac <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    33ac:	b500      	push	{lr}
    33ae:	b083      	sub	sp, #12
    33b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33b2:	9b01      	ldr	r3, [sp, #4]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d002      	beq.n	33be <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    33b8:	9801      	ldr	r0, [sp, #4]
    33ba:	f000 f997 	bl	36ec <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33be:	bf00      	nop
    33c0:	b003      	add	sp, #12
    33c2:	f85d fb04 	ldr.w	pc, [sp], #4

000033c6 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    33c6:	b500      	push	{lr}
    33c8:	b083      	sub	sp, #12
    33ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33cc:	9b01      	ldr	r3, [sp, #4]
    33ce:	2b00      	cmp	r3, #0
    33d0:	d002      	beq.n	33d8 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    33d2:	9801      	ldr	r0, [sp, #4]
    33d4:	f000 fa7e 	bl	38d4 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33d8:	bf00      	nop
    33da:	b003      	add	sp, #12
    33dc:	f85d fb04 	ldr.w	pc, [sp], #4

000033e0 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    33e0:	b500      	push	{lr}
    33e2:	b083      	sub	sp, #12
    33e4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    33e6:	9801      	ldr	r0, [sp, #4]
    33e8:	f000 fab8 	bl	395c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    33ec:	bf00      	nop
    33ee:	b003      	add	sp, #12
    33f0:	f85d fb04 	ldr.w	pc, [sp], #4

000033f4 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    33f4:	b500      	push	{lr}
    33f6:	b08b      	sub	sp, #44	; 0x2c
    33f8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    33fa:	2300      	movs	r3, #0
    33fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3400:	9b01      	ldr	r3, [sp, #4]
    3402:	2b00      	cmp	r3, #0
    3404:	d10b      	bne.n	341e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3406:	2305      	movs	r3, #5
    3408:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    340a:	2301      	movs	r3, #1
    340c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3410:	2301      	movs	r3, #1
    3412:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3416:	2301      	movs	r3, #1
    3418:	f88d 3010 	strb.w	r3, [sp, #16]
    341c:	e00e      	b.n	343c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    341e:	9b01      	ldr	r3, [sp, #4]
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3424:	9b01      	ldr	r3, [sp, #4]
    3426:	79db      	ldrb	r3, [r3, #7]
    3428:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    342c:	9b01      	ldr	r3, [sp, #4]
    342e:	889b      	ldrh	r3, [r3, #4]
    3430:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	7a1b      	ldrb	r3, [r3, #8]
    3438:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    343c:	4b32      	ldr	r3, [pc, #200]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    343e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3442:	4a31      	ldr	r2, [pc, #196]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3444:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3448:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    344c:	4b2e      	ldr	r3, [pc, #184]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    344e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3452:	4a2d      	ldr	r2, [pc, #180]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3454:	f023 0301 	bic.w	r3, r3, #1
    3458:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    345c:	4b2a      	ldr	r3, [pc, #168]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    345e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3462:	4a29      	ldr	r2, [pc, #164]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3464:	f023 0304 	bic.w	r3, r3, #4
    3468:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    346c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3470:	2b01      	cmp	r3, #1
    3472:	d144      	bne.n	34fe <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3474:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3478:	4a23      	ldr	r2, [pc, #140]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    347a:	f003 0301 	and.w	r3, r3, #1
    347e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3482:	4b21      	ldr	r3, [pc, #132]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3488:	4a1f      	ldr	r2, [pc, #124]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    348a:	f043 0301 	orr.w	r3, r3, #1
    348e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3492:	4b1d      	ldr	r3, [pc, #116]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3498:	f89d 3010 	ldrb.w	r3, [sp, #16]
    349c:	009b      	lsls	r3, r3, #2
    349e:	f003 0304 	and.w	r3, r3, #4
    34a2:	4919      	ldr	r1, [pc, #100]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    34a4:	4313      	orrs	r3, r2
    34a6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34aa:	aa05      	add	r2, sp, #20
    34ac:	a906      	add	r1, sp, #24
    34ae:	a807      	add	r0, sp, #28
    34b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    34b4:	f7ff f8f8 	bl	26a8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    34b8:	4b13      	ldr	r3, [pc, #76]	; (3508 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    34ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34be:	0e1b      	lsrs	r3, r3, #24
    34c0:	f003 0301 	and.w	r3, r3, #1
    34c4:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34c6:	9a05      	ldr	r2, [sp, #20]
    34c8:	a906      	add	r1, sp, #24
    34ca:	ab07      	add	r3, sp, #28
    34cc:	4618      	mov	r0, r3
    34ce:	f7ff f905 	bl	26dc <Clock_Ip_TimeoutExpired>
    34d2:	4603      	mov	r3, r0
    34d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    34d8:	9b08      	ldr	r3, [sp, #32]
    34da:	2b00      	cmp	r3, #0
    34dc:	d106      	bne.n	34ec <Clock_Ip_SetSirc_TrustedCall+0xf8>
    34de:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    34e2:	f083 0301 	eor.w	r3, r3, #1
    34e6:	b2db      	uxtb	r3, r3
    34e8:	2b00      	cmp	r3, #0
    34ea:	d1e5      	bne.n	34b8 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    34ec:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    34f0:	2b00      	cmp	r3, #0
    34f2:	d004      	beq.n	34fe <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    34f4:	9b02      	ldr	r3, [sp, #8]
    34f6:	4619      	mov	r1, r3
    34f8:	2001      	movs	r0, #1
    34fa:	f7ff f8c5 	bl	2688 <Clock_Ip_ReportClockErrors>
        }
    }
}
    34fe:	bf00      	nop
    3500:	b00b      	add	sp, #44	; 0x2c
    3502:	f85d fb04 	ldr.w	pc, [sp], #4
    3506:	bf00      	nop
    3508:	40064000 	.word	0x40064000

0000350c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    350c:	b500      	push	{lr}
    350e:	b089      	sub	sp, #36	; 0x24
    3510:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3512:	2300      	movs	r3, #0
    3514:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3518:	4b1f      	ldr	r3, [pc, #124]	; (3598 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    351a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    351e:	4a1e      	ldr	r2, [pc, #120]	; (3598 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3520:	f043 0301 	orr.w	r3, r3, #1
    3524:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3528:	4b1b      	ldr	r3, [pc, #108]	; (3598 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    352a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    352e:	4a1a      	ldr	r2, [pc, #104]	; (3598 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3530:	f043 0304 	orr.w	r3, r3, #4
    3534:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3538:	aa03      	add	r2, sp, #12
    353a:	a904      	add	r1, sp, #16
    353c:	a805      	add	r0, sp, #20
    353e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3542:	f7ff f8b1 	bl	26a8 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3546:	4b14      	ldr	r3, [pc, #80]	; (3598 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3548:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    354c:	0e1b      	lsrs	r3, r3, #24
    354e:	f003 0301 	and.w	r3, r3, #1
    3552:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3554:	9a03      	ldr	r2, [sp, #12]
    3556:	a904      	add	r1, sp, #16
    3558:	ab05      	add	r3, sp, #20
    355a:	4618      	mov	r0, r3
    355c:	f7ff f8be 	bl	26dc <Clock_Ip_TimeoutExpired>
    3560:	4603      	mov	r3, r0
    3562:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3566:	9b06      	ldr	r3, [sp, #24]
    3568:	2b00      	cmp	r3, #0
    356a:	d106      	bne.n	357a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    356c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3570:	f083 0301 	eor.w	r3, r3, #1
    3574:	b2db      	uxtb	r3, r3
    3576:	2b00      	cmp	r3, #0
    3578:	d1e5      	bne.n	3546 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    357a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    357e:	2b00      	cmp	r3, #0
    3580:	d005      	beq.n	358e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	4619      	mov	r1, r3
    3588:	2001      	movs	r0, #1
    358a:	f7ff f87d 	bl	2688 <Clock_Ip_ReportClockErrors>
    }
}
    358e:	bf00      	nop
    3590:	b009      	add	sp, #36	; 0x24
    3592:	f85d fb04 	ldr.w	pc, [sp], #4
    3596:	bf00      	nop
    3598:	40064000 	.word	0x40064000

0000359c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    359c:	b082      	sub	sp, #8
    359e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    35a0:	4b09      	ldr	r3, [pc, #36]	; (35c8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    35a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35a6:	4a08      	ldr	r2, [pc, #32]	; (35c8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    35a8:	f023 0301 	bic.w	r3, r3, #1
    35ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    35b0:	4b05      	ldr	r3, [pc, #20]	; (35c8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    35b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35b6:	4a04      	ldr	r2, [pc, #16]	; (35c8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    35b8:	f023 0304 	bic.w	r3, r3, #4
    35bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    35c0:	bf00      	nop
    35c2:	b002      	add	sp, #8
    35c4:	4770      	bx	lr
    35c6:	bf00      	nop
    35c8:	40064000 	.word	0x40064000

000035cc <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    35cc:	b082      	sub	sp, #8
    35ce:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    35d0:	4b0f      	ldr	r3, [pc, #60]	; (3610 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    35d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35d6:	4a0e      	ldr	r2, [pc, #56]	; (3610 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    35d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    35dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    35e0:	4b0b      	ldr	r3, [pc, #44]	; (3610 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    35e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35e6:	4a0a      	ldr	r2, [pc, #40]	; (3610 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    35e8:	f023 0304 	bic.w	r3, r3, #4
    35ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    35f0:	4b07      	ldr	r3, [pc, #28]	; (3610 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    35f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    35f6:	9b01      	ldr	r3, [sp, #4]
    35f8:	7a1b      	ldrb	r3, [r3, #8]
    35fa:	009b      	lsls	r3, r3, #2
    35fc:	f003 0304 	and.w	r3, r3, #4
    3600:	4903      	ldr	r1, [pc, #12]	; (3610 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3602:	4313      	orrs	r3, r2
    3604:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3608:	bf00      	nop
    360a:	b002      	add	sp, #8
    360c:	4770      	bx	lr
    360e:	bf00      	nop
    3610:	40064000 	.word	0x40064000

00003614 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3614:	b082      	sub	sp, #8
    3616:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3618:	9b01      	ldr	r3, [sp, #4]
    361a:	889b      	ldrh	r3, [r3, #4]
    361c:	2b01      	cmp	r3, #1
    361e:	d107      	bne.n	3630 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3620:	4b05      	ldr	r3, [pc, #20]	; (3638 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3626:	4a04      	ldr	r2, [pc, #16]	; (3638 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3628:	f043 0304 	orr.w	r3, r3, #4
    362c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3630:	bf00      	nop
    3632:	b002      	add	sp, #8
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	40064000 	.word	0x40064000

0000363c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    363c:	b082      	sub	sp, #8
    363e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3646:	4a04      	ldr	r2, [pc, #16]	; (3658 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3648:	f023 0304 	bic.w	r3, r3, #4
    364c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3650:	bf00      	nop
    3652:	b002      	add	sp, #8
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	40064000 	.word	0x40064000

0000365c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    365c:	b082      	sub	sp, #8
    365e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3660:	4b0f      	ldr	r3, [pc, #60]	; (36a0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3666:	4a0e      	ldr	r2, [pc, #56]	; (36a0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3668:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    366c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3670:	4b0b      	ldr	r3, [pc, #44]	; (36a0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3672:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3676:	4a0a      	ldr	r2, [pc, #40]	; (36a0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3678:	f023 0302 	bic.w	r3, r3, #2
    367c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3680:	4b07      	ldr	r3, [pc, #28]	; (36a0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3682:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	7a5b      	ldrb	r3, [r3, #9]
    368a:	005b      	lsls	r3, r3, #1
    368c:	f003 0302 	and.w	r3, r3, #2
    3690:	4903      	ldr	r1, [pc, #12]	; (36a0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3692:	4313      	orrs	r3, r2
    3694:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3698:	bf00      	nop
    369a:	b002      	add	sp, #8
    369c:	4770      	bx	lr
    369e:	bf00      	nop
    36a0:	40064000 	.word	0x40064000

000036a4 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    36a4:	b082      	sub	sp, #8
    36a6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	889b      	ldrh	r3, [r3, #4]
    36ac:	2b01      	cmp	r3, #1
    36ae:	d107      	bne.n	36c0 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    36b0:	4b05      	ldr	r3, [pc, #20]	; (36c8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    36b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    36b6:	4a04      	ldr	r2, [pc, #16]	; (36c8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    36b8:	f043 0302 	orr.w	r3, r3, #2
    36bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    36c0:	bf00      	nop
    36c2:	b002      	add	sp, #8
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	40064000 	.word	0x40064000

000036cc <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    36cc:	b082      	sub	sp, #8
    36ce:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    36d0:	4b05      	ldr	r3, [pc, #20]	; (36e8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    36d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    36d6:	4a04      	ldr	r2, [pc, #16]	; (36e8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    36d8:	f023 0302 	bic.w	r3, r3, #2
    36dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    36e0:	bf00      	nop
    36e2:	b002      	add	sp, #8
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop
    36e8:	40064000 	.word	0x40064000

000036ec <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    36ec:	b500      	push	{lr}
    36ee:	b08b      	sub	sp, #44	; 0x2c
    36f0:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    36f2:	9b01      	ldr	r3, [sp, #4]
    36f4:	681a      	ldr	r2, [r3, #0]
    36f6:	4975      	ldr	r1, [pc, #468]	; (38cc <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    36f8:	4613      	mov	r3, r2
    36fa:	00db      	lsls	r3, r3, #3
    36fc:	4413      	add	r3, r2
    36fe:	440b      	add	r3, r1
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3704:	2300      	movs	r3, #0
    3706:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    370a:	2300      	movs	r3, #0
    370c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3710:	4b6f      	ldr	r3, [pc, #444]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3712:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3716:	4a6e      	ldr	r2, [pc, #440]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    371c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3720:	4b6b      	ldr	r3, [pc, #428]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3722:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    372a:	2b00      	cmp	r3, #0
    372c:	d07d      	beq.n	382a <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    372e:	9b01      	ldr	r3, [sp, #4]
    3730:	79db      	ldrb	r3, [r3, #7]
    3732:	461a      	mov	r2, r3
    3734:	4b66      	ldr	r3, [pc, #408]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3736:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    373a:	f003 0303 	and.w	r3, r3, #3
    373e:	429a      	cmp	r2, r3
    3740:	d10b      	bne.n	375a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3742:	9b01      	ldr	r3, [sp, #4]
    3744:	799b      	ldrb	r3, [r3, #6]
    3746:	461a      	mov	r2, r3
    3748:	4b61      	ldr	r3, [pc, #388]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    374a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    374e:	08db      	lsrs	r3, r3, #3
    3750:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3754:	429a      	cmp	r2, r3
    3756:	f000 80b4 	beq.w	38c2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    375a:	4b5d      	ldr	r3, [pc, #372]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    375c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3760:	f003 0301 	and.w	r3, r3, #1
    3764:	2b00      	cmp	r3, #0
    3766:	d105      	bne.n	3774 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3768:	2301      	movs	r3, #1
    376a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    376e:	2000      	movs	r0, #0
    3770:	f7ff fd66 	bl	3240 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3774:	2002      	movs	r0, #2
    3776:	f7ff fdcf 	bl	3318 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    377a:	4b55      	ldr	r3, [pc, #340]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    377c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3780:	4a53      	ldr	r2, [pc, #332]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3782:	f023 0301 	bic.w	r3, r3, #1
    3786:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    378a:	9b01      	ldr	r3, [sp, #4]
    378c:	889b      	ldrh	r3, [r3, #4]
    378e:	2b01      	cmp	r3, #1
    3790:	f040 8097 	bne.w	38c2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3794:	9b01      	ldr	r3, [sp, #4]
    3796:	79db      	ldrb	r3, [r3, #7]
    3798:	4a4d      	ldr	r2, [pc, #308]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    379a:	f003 0303 	and.w	r3, r3, #3
    379e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    37a2:	4b4b      	ldr	r3, [pc, #300]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    37a4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    37a8:	9b01      	ldr	r3, [sp, #4]
    37aa:	799b      	ldrb	r3, [r3, #6]
    37ac:	00db      	lsls	r3, r3, #3
    37ae:	f003 0308 	and.w	r3, r3, #8
    37b2:	4313      	orrs	r3, r2
    37b4:	4a46      	ldr	r2, [pc, #280]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    37b6:	f043 0301 	orr.w	r3, r3, #1
    37ba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37be:	aa03      	add	r2, sp, #12
    37c0:	a904      	add	r1, sp, #16
    37c2:	a805      	add	r0, sp, #20
    37c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    37c8:	f7fe ff6e 	bl	26a8 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    37cc:	4b40      	ldr	r3, [pc, #256]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    37ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    37d2:	0e1b      	lsrs	r3, r3, #24
    37d4:	f003 0301 	and.w	r3, r3, #1
    37d8:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    37da:	9a03      	ldr	r2, [sp, #12]
    37dc:	a904      	add	r1, sp, #16
    37de:	ab05      	add	r3, sp, #20
    37e0:	4618      	mov	r0, r3
    37e2:	f7fe ff7b 	bl	26dc <Clock_Ip_TimeoutExpired>
    37e6:	4603      	mov	r3, r0
    37e8:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    37ec:	9b06      	ldr	r3, [sp, #24]
    37ee:	2b00      	cmp	r3, #0
    37f0:	d106      	bne.n	3800 <Clock_Ip_SetFirc_TrustedCall+0x114>
    37f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37f6:	f083 0301 	eor.w	r3, r3, #1
    37fa:	b2db      	uxtb	r3, r3
    37fc:	2b00      	cmp	r3, #0
    37fe:	d1e5      	bne.n	37cc <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3800:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3804:	2b00      	cmp	r3, #0
    3806:	d005      	beq.n	3814 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3808:	9b01      	ldr	r3, [sp, #4]
    380a:	681b      	ldr	r3, [r3, #0]
    380c:	4619      	mov	r1, r3
    380e:	2001      	movs	r0, #1
    3810:	f7fe ff3a 	bl	2688 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3814:	2003      	movs	r0, #3
    3816:	f7ff fd7f 	bl	3318 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    381a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    381e:	2b00      	cmp	r3, #0
    3820:	d04f      	beq.n	38c2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3822:	2002      	movs	r0, #2
    3824:	f7ff fd26 	bl	3274 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3828:	e04b      	b.n	38c2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    382a:	4b29      	ldr	r3, [pc, #164]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    382c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3830:	4a27      	ldr	r2, [pc, #156]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3832:	f023 0301 	bic.w	r3, r3, #1
    3836:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    383a:	9b01      	ldr	r3, [sp, #4]
    383c:	889b      	ldrh	r3, [r3, #4]
    383e:	2b01      	cmp	r3, #1
    3840:	d13f      	bne.n	38c2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3842:	9b01      	ldr	r3, [sp, #4]
    3844:	79db      	ldrb	r3, [r3, #7]
    3846:	4a22      	ldr	r2, [pc, #136]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3848:	f003 0303 	and.w	r3, r3, #3
    384c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3850:	4b1f      	ldr	r3, [pc, #124]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3852:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3856:	9b01      	ldr	r3, [sp, #4]
    3858:	799b      	ldrb	r3, [r3, #6]
    385a:	00db      	lsls	r3, r3, #3
    385c:	f003 0308 	and.w	r3, r3, #8
    3860:	4313      	orrs	r3, r2
    3862:	4a1b      	ldr	r2, [pc, #108]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3864:	f043 0301 	orr.w	r3, r3, #1
    3868:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    386c:	aa03      	add	r2, sp, #12
    386e:	a904      	add	r1, sp, #16
    3870:	a805      	add	r0, sp, #20
    3872:	f24c 3350 	movw	r3, #50000	; 0xc350
    3876:	f7fe ff17 	bl	26a8 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    387a:	4b15      	ldr	r3, [pc, #84]	; (38d0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    387c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3880:	0e1b      	lsrs	r3, r3, #24
    3882:	f003 0301 	and.w	r3, r3, #1
    3886:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3888:	9a03      	ldr	r2, [sp, #12]
    388a:	a904      	add	r1, sp, #16
    388c:	ab05      	add	r3, sp, #20
    388e:	4618      	mov	r0, r3
    3890:	f7fe ff24 	bl	26dc <Clock_Ip_TimeoutExpired>
    3894:	4603      	mov	r3, r0
    3896:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    389a:	9b06      	ldr	r3, [sp, #24]
    389c:	2b00      	cmp	r3, #0
    389e:	d106      	bne.n	38ae <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    38a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38a4:	f083 0301 	eor.w	r3, r3, #1
    38a8:	b2db      	uxtb	r3, r3
    38aa:	2b00      	cmp	r3, #0
    38ac:	d1e5      	bne.n	387a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    38ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d005      	beq.n	38c2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    38b6:	9b01      	ldr	r3, [sp, #4]
    38b8:	681b      	ldr	r3, [r3, #0]
    38ba:	4619      	mov	r1, r3
    38bc:	2001      	movs	r0, #1
    38be:	f7fe fee3 	bl	2688 <Clock_Ip_ReportClockErrors>
}
    38c2:	bf00      	nop
    38c4:	b00b      	add	sp, #44	; 0x2c
    38c6:	f85d fb04 	ldr.w	pc, [sp], #4
    38ca:	bf00      	nop
    38cc:	00007d44 	.word	0x00007d44
    38d0:	40064000 	.word	0x40064000

000038d4 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    38d4:	b500      	push	{lr}
    38d6:	b089      	sub	sp, #36	; 0x24
    38d8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    38da:	2300      	movs	r3, #0
    38dc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    38e0:	9b01      	ldr	r3, [sp, #4]
    38e2:	889b      	ldrh	r3, [r3, #4]
    38e4:	2b01      	cmp	r3, #1
    38e6:	d132      	bne.n	394e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    38e8:	4b1b      	ldr	r3, [pc, #108]	; (3958 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    38ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    38ee:	4a1a      	ldr	r2, [pc, #104]	; (3958 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    38f0:	f043 0301 	orr.w	r3, r3, #1
    38f4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    38f8:	aa03      	add	r2, sp, #12
    38fa:	a904      	add	r1, sp, #16
    38fc:	a805      	add	r0, sp, #20
    38fe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3902:	f7fe fed1 	bl	26a8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3906:	4b14      	ldr	r3, [pc, #80]	; (3958 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3908:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    390c:	0e1b      	lsrs	r3, r3, #24
    390e:	f003 0301 	and.w	r3, r3, #1
    3912:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3914:	9a03      	ldr	r2, [sp, #12]
    3916:	a904      	add	r1, sp, #16
    3918:	ab05      	add	r3, sp, #20
    391a:	4618      	mov	r0, r3
    391c:	f7fe fede 	bl	26dc <Clock_Ip_TimeoutExpired>
    3920:	4603      	mov	r3, r0
    3922:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3926:	9b06      	ldr	r3, [sp, #24]
    3928:	2b00      	cmp	r3, #0
    392a:	d106      	bne.n	393a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    392c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3930:	f083 0301 	eor.w	r3, r3, #1
    3934:	b2db      	uxtb	r3, r3
    3936:	2b00      	cmp	r3, #0
    3938:	d1e5      	bne.n	3906 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    393a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    393e:	2b00      	cmp	r3, #0
    3940:	d005      	beq.n	394e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3942:	9b01      	ldr	r3, [sp, #4]
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	4619      	mov	r1, r3
    3948:	2001      	movs	r0, #1
    394a:	f7fe fe9d 	bl	2688 <Clock_Ip_ReportClockErrors>
        }
    }
}
    394e:	bf00      	nop
    3950:	b009      	add	sp, #36	; 0x24
    3952:	f85d fb04 	ldr.w	pc, [sp], #4
    3956:	bf00      	nop
    3958:	40064000 	.word	0x40064000

0000395c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    395c:	b082      	sub	sp, #8
    395e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3960:	4b05      	ldr	r3, [pc, #20]	; (3978 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3962:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3966:	4a04      	ldr	r2, [pc, #16]	; (3978 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3968:	f023 0301 	bic.w	r3, r3, #1
    396c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3970:	bf00      	nop
    3972:	b002      	add	sp, #8
    3974:	4770      	bx	lr
    3976:	bf00      	nop
    3978:	40064000 	.word	0x40064000

0000397c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    397c:	b082      	sub	sp, #8
    397e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3980:	bf00      	nop
    3982:	b002      	add	sp, #8
    3984:	4770      	bx	lr

00003986 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3986:	b082      	sub	sp, #8
    3988:	9001      	str	r0, [sp, #4]
    398a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    398c:	bf00      	nop
    398e:	b002      	add	sp, #8
    3990:	4770      	bx	lr

00003992 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3992:	b082      	sub	sp, #8
    3994:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3996:	bf00      	nop
    3998:	b002      	add	sp, #8
    399a:	4770      	bx	lr

0000399c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    399c:	b082      	sub	sp, #8
    399e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    39a0:	bf00      	nop
    39a2:	b002      	add	sp, #8
    39a4:	4770      	bx	lr

000039a6 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    39a6:	b082      	sub	sp, #8
    39a8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    39aa:	2302      	movs	r3, #2
}
    39ac:	4618      	mov	r0, r3
    39ae:	b002      	add	sp, #8
    39b0:	4770      	bx	lr

000039b2 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    39b2:	b082      	sub	sp, #8
    39b4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    39b6:	bf00      	nop
    39b8:	b002      	add	sp, #8
    39ba:	4770      	bx	lr

000039bc <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    39bc:	b500      	push	{lr}
    39be:	b083      	sub	sp, #12
    39c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39c2:	9b01      	ldr	r3, [sp, #4]
    39c4:	2b00      	cmp	r3, #0
    39c6:	d002      	beq.n	39ce <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    39c8:	9801      	ldr	r0, [sp, #4]
    39ca:	f000 f870 	bl	3aae <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39ce:	bf00      	nop
    39d0:	b003      	add	sp, #12
    39d2:	f85d fb04 	ldr.w	pc, [sp], #4

000039d6 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    39d6:	b500      	push	{lr}
    39d8:	b083      	sub	sp, #12
    39da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39dc:	9b01      	ldr	r3, [sp, #4]
    39de:	2b00      	cmp	r3, #0
    39e0:	d002      	beq.n	39e8 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    39e2:	9801      	ldr	r0, [sp, #4]
    39e4:	f000 f89a 	bl	3b1c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39e8:	bf00      	nop
    39ea:	b003      	add	sp, #12
    39ec:	f85d fb04 	ldr.w	pc, [sp], #4

000039f0 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    39f0:	b500      	push	{lr}
    39f2:	b089      	sub	sp, #36	; 0x24
    39f4:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    39f6:	2301      	movs	r3, #1
    39f8:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    39fa:	2300      	movs	r3, #0
    39fc:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3a00:	4b1e      	ldr	r3, [pc, #120]	; (3a7c <Clock_Ip_CompleteSpll+0x8c>)
    3a02:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3a06:	f003 0301 	and.w	r3, r3, #1
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d02f      	beq.n	3a6e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a0e:	aa02      	add	r2, sp, #8
    3a10:	a903      	add	r1, sp, #12
    3a12:	a804      	add	r0, sp, #16
    3a14:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a18:	f7fe fe46 	bl	26a8 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3a1c:	4b17      	ldr	r3, [pc, #92]	; (3a7c <Clock_Ip_CompleteSpll+0x8c>)
    3a1e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3a22:	0e1b      	lsrs	r3, r3, #24
    3a24:	f003 0301 	and.w	r3, r3, #1
    3a28:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a2a:	9a02      	ldr	r2, [sp, #8]
    3a2c:	a903      	add	r1, sp, #12
    3a2e:	ab04      	add	r3, sp, #16
    3a30:	4618      	mov	r0, r3
    3a32:	f7fe fe53 	bl	26dc <Clock_Ip_TimeoutExpired>
    3a36:	4603      	mov	r3, r0
    3a38:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3a3c:	9b05      	ldr	r3, [sp, #20]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d106      	bne.n	3a50 <Clock_Ip_CompleteSpll+0x60>
    3a42:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3a46:	f083 0301 	eor.w	r3, r3, #1
    3a4a:	b2db      	uxtb	r3, r3
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d1e5      	bne.n	3a1c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3a50:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3a54:	f083 0301 	eor.w	r3, r3, #1
    3a58:	b2db      	uxtb	r3, r3
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d002      	beq.n	3a64 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3a5e:	2302      	movs	r3, #2
    3a60:	9307      	str	r3, [sp, #28]
    3a62:	e006      	b.n	3a72 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3a64:	9901      	ldr	r1, [sp, #4]
    3a66:	2001      	movs	r0, #1
    3a68:	f7fe fe0e 	bl	2688 <Clock_Ip_ReportClockErrors>
    3a6c:	e001      	b.n	3a72 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3a6e:	2300      	movs	r3, #0
    3a70:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3a72:	9b07      	ldr	r3, [sp, #28]
}
    3a74:	4618      	mov	r0, r3
    3a76:	b009      	add	sp, #36	; 0x24
    3a78:	f85d fb04 	ldr.w	pc, [sp], #4
    3a7c:	40064000 	.word	0x40064000

00003a80 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3a80:	b500      	push	{lr}
    3a82:	b083      	sub	sp, #12
    3a84:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3a86:	9801      	ldr	r0, [sp, #4]
    3a88:	f000 f886 	bl	3b98 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a8c:	bf00      	nop
    3a8e:	b003      	add	sp, #12
    3a90:	f85d fb04 	ldr.w	pc, [sp], #4

00003a94 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3a94:	b500      	push	{lr}
    3a96:	b083      	sub	sp, #12
    3a98:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a9a:	9b01      	ldr	r3, [sp, #4]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d002      	beq.n	3aa6 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3aa0:	9801      	ldr	r0, [sp, #4]
    3aa2:	f000 f891 	bl	3bc8 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aa6:	bf00      	nop
    3aa8:	b003      	add	sp, #12
    3aaa:	f85d fb04 	ldr.w	pc, [sp], #4

00003aae <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3aae:	b082      	sub	sp, #8
    3ab0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3ab2:	4b19      	ldr	r3, [pc, #100]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ab4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ab8:	4a17      	ldr	r2, [pc, #92]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3aba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3abe:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3ac2:	4b15      	ldr	r3, [pc, #84]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ac4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ac8:	4a13      	ldr	r2, [pc, #76]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3ace:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3ad2:	4b11      	ldr	r3, [pc, #68]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ad4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ad8:	4a0f      	ldr	r2, [pc, #60]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ada:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3ade:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3ae2:	4b0d      	ldr	r3, [pc, #52]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ae4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ae8:	4a0b      	ldr	r2, [pc, #44]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3aea:	f023 0301 	bic.w	r3, r3, #1
    3aee:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3af2:	4b09      	ldr	r3, [pc, #36]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3af4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3af8:	4a07      	ldr	r2, [pc, #28]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3afa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3afe:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3b02:	4b05      	ldr	r3, [pc, #20]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3b04:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3b08:	4a03      	ldr	r2, [pc, #12]	; (3b18 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3b0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3b0e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3b12:	bf00      	nop
    3b14:	b002      	add	sp, #8
    3b16:	4770      	bx	lr
    3b18:	40064000 	.word	0x40064000

00003b1c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3b1c:	b082      	sub	sp, #8
    3b1e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3b20:	9b01      	ldr	r3, [sp, #4]
    3b22:	889b      	ldrh	r3, [r3, #4]
    3b24:	2b01      	cmp	r3, #1
    3b26:	d12f      	bne.n	3b88 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3b28:	4b1a      	ldr	r3, [pc, #104]	; (3b94 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3b2a:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3b2e:	9b01      	ldr	r3, [sp, #4]
    3b30:	7b5b      	ldrb	r3, [r3, #13]
    3b32:	3b01      	subs	r3, #1
    3b34:	021b      	lsls	r3, r3, #8
    3b36:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3b3a:	9b01      	ldr	r3, [sp, #4]
    3b3c:	7d1b      	ldrb	r3, [r3, #20]
    3b3e:	3b10      	subs	r3, #16
    3b40:	041b      	lsls	r3, r3, #16
    3b42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3b46:	430b      	orrs	r3, r1
    3b48:	4912      	ldr	r1, [pc, #72]	; (3b94 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3b4a:	4313      	orrs	r3, r2
    3b4c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3b50:	9b01      	ldr	r3, [sp, #4]
    3b52:	7fdb      	ldrb	r3, [r3, #31]
    3b54:	2b02      	cmp	r3, #2
    3b56:	d011      	beq.n	3b7c <Clock_Ip_SetSpll_TrustedCall+0x60>
    3b58:	2b02      	cmp	r3, #2
    3b5a:	dc17      	bgt.n	3b8c <Clock_Ip_SetSpll_TrustedCall+0x70>
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d002      	beq.n	3b66 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3b60:	2b01      	cmp	r3, #1
    3b62:	d005      	beq.n	3b70 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3b64:	e012      	b.n	3b8c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3b66:	4b0b      	ldr	r3, [pc, #44]	; (3b94 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3b68:	2200      	movs	r2, #0
    3b6a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3b6e:	e00e      	b.n	3b8e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3b70:	4b08      	ldr	r3, [pc, #32]	; (3b94 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b76:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3b7a:	e008      	b.n	3b8e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3b7c:	4b05      	ldr	r3, [pc, #20]	; (3b94 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3b7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3b82:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3b86:	e002      	b.n	3b8e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3b88:	bf00      	nop
    3b8a:	e000      	b.n	3b8e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3b8c:	bf00      	nop
}
    3b8e:	bf00      	nop
    3b90:	b002      	add	sp, #8
    3b92:	4770      	bx	lr
    3b94:	40064000 	.word	0x40064000

00003b98 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3b98:	b082      	sub	sp, #8
    3b9a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3b9c:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3b9e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ba2:	4a08      	ldr	r2, [pc, #32]	; (3bc4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ba8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3bac:	4b05      	ldr	r3, [pc, #20]	; (3bc4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3bae:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3bb2:	4a04      	ldr	r2, [pc, #16]	; (3bc4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3bb4:	f023 0301 	bic.w	r3, r3, #1
    3bb8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3bbc:	bf00      	nop
    3bbe:	b002      	add	sp, #8
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop
    3bc4:	40064000 	.word	0x40064000

00003bc8 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3bc8:	b082      	sub	sp, #8
    3bca:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3bcc:	9b01      	ldr	r3, [sp, #4]
    3bce:	889b      	ldrh	r3, [r3, #4]
    3bd0:	2b01      	cmp	r3, #1
    3bd2:	d107      	bne.n	3be4 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3bd4:	4b05      	ldr	r3, [pc, #20]	; (3bec <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3bd6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3bda:	4a04      	ldr	r2, [pc, #16]	; (3bec <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3bdc:	f043 0301 	orr.w	r3, r3, #1
    3be0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3be4:	bf00      	nop
    3be6:	b002      	add	sp, #8
    3be8:	4770      	bx	lr
    3bea:	bf00      	nop
    3bec:	40064000 	.word	0x40064000

00003bf0 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3bf0:	b082      	sub	sp, #8
    3bf2:	9001      	str	r0, [sp, #4]
    3bf4:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3bf6:	bf00      	nop
    3bf8:	b002      	add	sp, #8
    3bfa:	4770      	bx	lr

00003bfc <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3bfc:	b082      	sub	sp, #8
    3bfe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3c00:	bf00      	nop
    3c02:	b002      	add	sp, #8
    3c04:	4770      	bx	lr

00003c06 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c06:	b500      	push	{lr}
    3c08:	b083      	sub	sp, #12
    3c0a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c0c:	9b01      	ldr	r3, [sp, #4]
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d002      	beq.n	3c18 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    3c12:	9801      	ldr	r0, [sp, #4]
    3c14:	f000 f8ee 	bl	3df4 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c18:	bf00      	nop
    3c1a:	b003      	add	sp, #12
    3c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00003c20 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c20:	b500      	push	{lr}
    3c22:	b083      	sub	sp, #12
    3c24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c26:	9b01      	ldr	r3, [sp, #4]
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d002      	beq.n	3c32 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3c2c:	9801      	ldr	r0, [sp, #4]
    3c2e:	f000 f8ff 	bl	3e30 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c32:	bf00      	nop
    3c34:	b003      	add	sp, #12
    3c36:	f85d fb04 	ldr.w	pc, [sp], #4

00003c3a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c3a:	b500      	push	{lr}
    3c3c:	b083      	sub	sp, #12
    3c3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c40:	9b01      	ldr	r3, [sp, #4]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d002      	beq.n	3c4c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3c46:	9801      	ldr	r0, [sp, #4]
    3c48:	f000 f912 	bl	3e70 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c4c:	bf00      	nop
    3c4e:	b003      	add	sp, #12
    3c50:	f85d fb04 	ldr.w	pc, [sp], #4

00003c54 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c54:	b500      	push	{lr}
    3c56:	b083      	sub	sp, #12
    3c58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c5a:	9b01      	ldr	r3, [sp, #4]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d002      	beq.n	3c66 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3c60:	9801      	ldr	r0, [sp, #4]
    3c62:	f000 f925 	bl	3eb0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c66:	bf00      	nop
    3c68:	b003      	add	sp, #12
    3c6a:	f85d fb04 	ldr.w	pc, [sp], #4

00003c6e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c6e:	b500      	push	{lr}
    3c70:	b083      	sub	sp, #12
    3c72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c74:	9b01      	ldr	r3, [sp, #4]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d002      	beq.n	3c80 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3c7a:	9801      	ldr	r0, [sp, #4]
    3c7c:	f000 f936 	bl	3eec <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c80:	bf00      	nop
    3c82:	b003      	add	sp, #12
    3c84:	f85d fb04 	ldr.w	pc, [sp], #4

00003c88 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c88:	b500      	push	{lr}
    3c8a:	b083      	sub	sp, #12
    3c8c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c8e:	9b01      	ldr	r3, [sp, #4]
    3c90:	2b00      	cmp	r3, #0
    3c92:	d002      	beq.n	3c9a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3c94:	9801      	ldr	r0, [sp, #4]
    3c96:	f000 f949 	bl	3f2c <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c9a:	bf00      	nop
    3c9c:	b003      	add	sp, #12
    3c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00003ca2 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ca2:	b500      	push	{lr}
    3ca4:	b083      	sub	sp, #12
    3ca6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ca8:	9b01      	ldr	r3, [sp, #4]
    3caa:	2b00      	cmp	r3, #0
    3cac:	d002      	beq.n	3cb4 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3cae:	9801      	ldr	r0, [sp, #4]
    3cb0:	f000 f958 	bl	3f64 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3cb4:	bf00      	nop
    3cb6:	b003      	add	sp, #12
    3cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00003cbc <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3cbc:	b500      	push	{lr}
    3cbe:	b083      	sub	sp, #12
    3cc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cc2:	9b01      	ldr	r3, [sp, #4]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d002      	beq.n	3cce <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3cc8:	9801      	ldr	r0, [sp, #4]
    3cca:	f000 f969 	bl	3fa0 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3cce:	bf00      	nop
    3cd0:	b003      	add	sp, #12
    3cd2:	f85d fb04 	ldr.w	pc, [sp], #4

00003cd6 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3cd6:	b500      	push	{lr}
    3cd8:	b083      	sub	sp, #12
    3cda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cdc:	9b01      	ldr	r3, [sp, #4]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d002      	beq.n	3ce8 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3ce2:	9801      	ldr	r0, [sp, #4]
    3ce4:	f000 f978 	bl	3fd8 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ce8:	bf00      	nop
    3cea:	b003      	add	sp, #12
    3cec:	f85d fb04 	ldr.w	pc, [sp], #4

00003cf0 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3cf0:	b500      	push	{lr}
    3cf2:	b083      	sub	sp, #12
    3cf4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cf6:	9b01      	ldr	r3, [sp, #4]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d002      	beq.n	3d02 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3cfc:	9801      	ldr	r0, [sp, #4]
    3cfe:	f000 f989 	bl	4014 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d02:	bf00      	nop
    3d04:	b003      	add	sp, #12
    3d06:	f85d fb04 	ldr.w	pc, [sp], #4

00003d0a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3d0a:	b500      	push	{lr}
    3d0c:	b083      	sub	sp, #12
    3d0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d002      	beq.n	3d1c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3d16:	9801      	ldr	r0, [sp, #4]
    3d18:	f000 f998 	bl	404c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d1c:	bf00      	nop
    3d1e:	b003      	add	sp, #12
    3d20:	f85d fb04 	ldr.w	pc, [sp], #4

00003d24 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3d24:	b500      	push	{lr}
    3d26:	b083      	sub	sp, #12
    3d28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d2a:	9b01      	ldr	r3, [sp, #4]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d002      	beq.n	3d36 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3d30:	9801      	ldr	r0, [sp, #4]
    3d32:	f000 f9a9 	bl	4088 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d36:	bf00      	nop
    3d38:	b003      	add	sp, #12
    3d3a:	f85d fb04 	ldr.w	pc, [sp], #4

00003d3e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3d3e:	b500      	push	{lr}
    3d40:	b083      	sub	sp, #12
    3d42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d44:	9b01      	ldr	r3, [sp, #4]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d002      	beq.n	3d50 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3d4a:	9801      	ldr	r0, [sp, #4]
    3d4c:	f000 f9e6 	bl	411c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d50:	bf00      	nop
    3d52:	b003      	add	sp, #12
    3d54:	f85d fb04 	ldr.w	pc, [sp], #4

00003d58 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3d58:	b500      	push	{lr}
    3d5a:	b083      	sub	sp, #12
    3d5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d5e:	9b01      	ldr	r3, [sp, #4]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d002      	beq.n	3d6a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3d64:	9801      	ldr	r0, [sp, #4]
    3d66:	f000 fa25 	bl	41b4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d6a:	bf00      	nop
    3d6c:	b003      	add	sp, #12
    3d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00003d72 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3d72:	b500      	push	{lr}
    3d74:	b083      	sub	sp, #12
    3d76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d78:	9b01      	ldr	r3, [sp, #4]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d002      	beq.n	3d84 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3d7e:	9801      	ldr	r0, [sp, #4]
    3d80:	f000 fa2a 	bl	41d8 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d84:	bf00      	nop
    3d86:	b003      	add	sp, #12
    3d88:	f85d fb04 	ldr.w	pc, [sp], #4

00003d8c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3d8c:	b500      	push	{lr}
    3d8e:	b083      	sub	sp, #12
    3d90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d92:	9b01      	ldr	r3, [sp, #4]
    3d94:	2b00      	cmp	r3, #0
    3d96:	d002      	beq.n	3d9e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3d98:	9801      	ldr	r0, [sp, #4]
    3d9a:	f000 fa3b 	bl	4214 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d9e:	bf00      	nop
    3da0:	b003      	add	sp, #12
    3da2:	f85d fb04 	ldr.w	pc, [sp], #4

00003da6 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3da6:	b500      	push	{lr}
    3da8:	b083      	sub	sp, #12
    3daa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dac:	9b01      	ldr	r3, [sp, #4]
    3dae:	2b00      	cmp	r3, #0
    3db0:	d002      	beq.n	3db8 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3db2:	9801      	ldr	r0, [sp, #4]
    3db4:	f000 fa56 	bl	4264 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3db8:	bf00      	nop
    3dba:	b003      	add	sp, #12
    3dbc:	f85d fb04 	ldr.w	pc, [sp], #4

00003dc0 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3dc0:	b500      	push	{lr}
    3dc2:	b083      	sub	sp, #12
    3dc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d002      	beq.n	3dd2 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3dcc:	9801      	ldr	r0, [sp, #4]
    3dce:	f000 fa79 	bl	42c4 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dd2:	bf00      	nop
    3dd4:	b003      	add	sp, #12
    3dd6:	f85d fb04 	ldr.w	pc, [sp], #4

00003dda <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3dda:	b500      	push	{lr}
    3ddc:	b083      	sub	sp, #12
    3dde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3de0:	9b01      	ldr	r3, [sp, #4]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d002      	beq.n	3dec <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3de6:	9801      	ldr	r0, [sp, #4]
    3de8:	f000 fa8a 	bl	4300 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dec:	bf00      	nop
    3dee:	b003      	add	sp, #12
    3df0:	f85d fb04 	ldr.w	pc, [sp], #4

00003df4 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3df4:	b084      	sub	sp, #16
    3df6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3df8:	4b0b      	ldr	r3, [pc, #44]	; (3e28 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3dfa:	795b      	ldrb	r3, [r3, #5]
    3dfc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3dfe:	4b0b      	ldr	r3, [pc, #44]	; (3e2c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3e00:	695b      	ldr	r3, [r3, #20]
    3e02:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3e04:	9b02      	ldr	r3, [sp, #8]
    3e06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3e0a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3e0c:	9b03      	ldr	r3, [sp, #12]
    3e0e:	061b      	lsls	r3, r3, #24
    3e10:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3e14:	9a02      	ldr	r2, [sp, #8]
    3e16:	4313      	orrs	r3, r2
    3e18:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3e1a:	4a04      	ldr	r2, [pc, #16]	; (3e2c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3e1c:	9b02      	ldr	r3, [sp, #8]
    3e1e:	6153      	str	r3, [r2, #20]
}
    3e20:	bf00      	nop
    3e22:	b004      	add	sp, #16
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop
    3e28:	000080ac 	.word	0x000080ac
    3e2c:	40064000 	.word	0x40064000

00003e30 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e30:	b084      	sub	sp, #16
    3e32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e34:	9b01      	ldr	r3, [sp, #4]
    3e36:	685b      	ldr	r3, [r3, #4]
    3e38:	4a0b      	ldr	r2, [pc, #44]	; (3e68 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3e3a:	5cd3      	ldrb	r3, [r2, r3]
    3e3c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3e3e:	4b0b      	ldr	r3, [pc, #44]	; (3e6c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3e40:	695b      	ldr	r3, [r3, #20]
    3e42:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3e44:	9b02      	ldr	r3, [sp, #8]
    3e46:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3e4a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3e4c:	9b03      	ldr	r3, [sp, #12]
    3e4e:	061b      	lsls	r3, r3, #24
    3e50:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3e54:	9a02      	ldr	r2, [sp, #8]
    3e56:	4313      	orrs	r3, r2
    3e58:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3e5a:	4a04      	ldr	r2, [pc, #16]	; (3e6c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3e5c:	9b02      	ldr	r3, [sp, #8]
    3e5e:	6153      	str	r3, [r2, #20]
}
    3e60:	bf00      	nop
    3e62:	b004      	add	sp, #16
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop
    3e68:	000080ac 	.word	0x000080ac
    3e6c:	40064000 	.word	0x40064000

00003e70 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e70:	b084      	sub	sp, #16
    3e72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e74:	9b01      	ldr	r3, [sp, #4]
    3e76:	685b      	ldr	r3, [r3, #4]
    3e78:	4a0b      	ldr	r2, [pc, #44]	; (3ea8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3e7a:	5cd3      	ldrb	r3, [r2, r3]
    3e7c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3e7e:	4b0b      	ldr	r3, [pc, #44]	; (3eac <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3e80:	699b      	ldr	r3, [r3, #24]
    3e82:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3e84:	9b02      	ldr	r3, [sp, #8]
    3e86:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3e8a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3e8c:	9b03      	ldr	r3, [sp, #12]
    3e8e:	061b      	lsls	r3, r3, #24
    3e90:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3e94:	9a02      	ldr	r2, [sp, #8]
    3e96:	4313      	orrs	r3, r2
    3e98:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3e9a:	4a04      	ldr	r2, [pc, #16]	; (3eac <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3e9c:	9b02      	ldr	r3, [sp, #8]
    3e9e:	6193      	str	r3, [r2, #24]
}
    3ea0:	bf00      	nop
    3ea2:	b004      	add	sp, #16
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	000080ac 	.word	0x000080ac
    3eac:	40064000 	.word	0x40064000

00003eb0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3eb0:	b084      	sub	sp, #16
    3eb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3eb4:	4b0b      	ldr	r3, [pc, #44]	; (3ee4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3eb6:	795b      	ldrb	r3, [r3, #5]
    3eb8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3eba:	4b0b      	ldr	r3, [pc, #44]	; (3ee8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3ebc:	69db      	ldr	r3, [r3, #28]
    3ebe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3ec0:	9b02      	ldr	r3, [sp, #8]
    3ec2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ec6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3ec8:	9b03      	ldr	r3, [sp, #12]
    3eca:	061b      	lsls	r3, r3, #24
    3ecc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3ed0:	9a02      	ldr	r2, [sp, #8]
    3ed2:	4313      	orrs	r3, r2
    3ed4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3ed6:	4a04      	ldr	r2, [pc, #16]	; (3ee8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3ed8:	9b02      	ldr	r3, [sp, #8]
    3eda:	61d3      	str	r3, [r2, #28]
}
    3edc:	bf00      	nop
    3ede:	b004      	add	sp, #16
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop
    3ee4:	000080ac 	.word	0x000080ac
    3ee8:	40064000 	.word	0x40064000

00003eec <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3eec:	b084      	sub	sp, #16
    3eee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ef0:	9b01      	ldr	r3, [sp, #4]
    3ef2:	685b      	ldr	r3, [r3, #4]
    3ef4:	4a0b      	ldr	r2, [pc, #44]	; (3f24 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3ef6:	5cd3      	ldrb	r3, [r2, r3]
    3ef8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3efa:	4b0b      	ldr	r3, [pc, #44]	; (3f28 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3efc:	69db      	ldr	r3, [r3, #28]
    3efe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3f00:	9b02      	ldr	r3, [sp, #8]
    3f02:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3f06:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3f08:	9b03      	ldr	r3, [sp, #12]
    3f0a:	061b      	lsls	r3, r3, #24
    3f0c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3f10:	9a02      	ldr	r2, [sp, #8]
    3f12:	4313      	orrs	r3, r2
    3f14:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3f16:	4a04      	ldr	r2, [pc, #16]	; (3f28 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3f18:	9b02      	ldr	r3, [sp, #8]
    3f1a:	61d3      	str	r3, [r2, #28]
}
    3f1c:	bf00      	nop
    3f1e:	b004      	add	sp, #16
    3f20:	4770      	bx	lr
    3f22:	bf00      	nop
    3f24:	000080ac 	.word	0x000080ac
    3f28:	40064000 	.word	0x40064000

00003f2c <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3f2c:	b084      	sub	sp, #16
    3f2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3f30:	4b0a      	ldr	r3, [pc, #40]	; (3f5c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3f32:	7b9b      	ldrb	r3, [r3, #14]
    3f34:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3f36:	4b0a      	ldr	r3, [pc, #40]	; (3f60 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3f38:	691b      	ldr	r3, [r3, #16]
    3f3a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3f3c:	9b02      	ldr	r3, [sp, #8]
    3f3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3f42:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3f44:	9b03      	ldr	r3, [sp, #12]
    3f46:	011b      	lsls	r3, r3, #4
    3f48:	9a02      	ldr	r2, [sp, #8]
    3f4a:	4313      	orrs	r3, r2
    3f4c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3f4e:	4a04      	ldr	r2, [pc, #16]	; (3f60 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3f50:	9b02      	ldr	r3, [sp, #8]
    3f52:	6113      	str	r3, [r2, #16]
}
    3f54:	bf00      	nop
    3f56:	b004      	add	sp, #16
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	00008054 	.word	0x00008054
    3f60:	40048000 	.word	0x40048000

00003f64 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3f64:	b084      	sub	sp, #16
    3f66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3f68:	9b01      	ldr	r3, [sp, #4]
    3f6a:	685b      	ldr	r3, [r3, #4]
    3f6c:	4a0a      	ldr	r2, [pc, #40]	; (3f98 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3f6e:	5cd3      	ldrb	r3, [r2, r3]
    3f70:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3f72:	4b0a      	ldr	r3, [pc, #40]	; (3f9c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3f74:	691b      	ldr	r3, [r3, #16]
    3f76:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3f78:	9b02      	ldr	r3, [sp, #8]
    3f7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3f7e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3f80:	9b03      	ldr	r3, [sp, #12]
    3f82:	011b      	lsls	r3, r3, #4
    3f84:	9a02      	ldr	r2, [sp, #8]
    3f86:	4313      	orrs	r3, r2
    3f88:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3f8a:	4a04      	ldr	r2, [pc, #16]	; (3f9c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3f8c:	9b02      	ldr	r3, [sp, #8]
    3f8e:	6113      	str	r3, [r2, #16]
}
    3f90:	bf00      	nop
    3f92:	b004      	add	sp, #16
    3f94:	4770      	bx	lr
    3f96:	bf00      	nop
    3f98:	00008054 	.word	0x00008054
    3f9c:	40048000 	.word	0x40048000

00003fa0 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3fa0:	b084      	sub	sp, #16
    3fa2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3fa4:	4b0a      	ldr	r3, [pc, #40]	; (3fd0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3fa6:	785b      	ldrb	r3, [r3, #1]
    3fa8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3faa:	4b0a      	ldr	r3, [pc, #40]	; (3fd4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3fac:	691b      	ldr	r3, [r3, #16]
    3fae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3fb0:	9b02      	ldr	r3, [sp, #8]
    3fb2:	f023 030c 	bic.w	r3, r3, #12
    3fb6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3fb8:	9b03      	ldr	r3, [sp, #12]
    3fba:	009b      	lsls	r3, r3, #2
    3fbc:	9a02      	ldr	r2, [sp, #8]
    3fbe:	4313      	orrs	r3, r2
    3fc0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3fc2:	4a04      	ldr	r2, [pc, #16]	; (3fd4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3fc4:	9b02      	ldr	r3, [sp, #8]
    3fc6:	6113      	str	r3, [r2, #16]
}
    3fc8:	bf00      	nop
    3fca:	b004      	add	sp, #16
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	0000810c 	.word	0x0000810c
    3fd4:	40048000 	.word	0x40048000

00003fd8 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3fd8:	b084      	sub	sp, #16
    3fda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3fdc:	9b01      	ldr	r3, [sp, #4]
    3fde:	685b      	ldr	r3, [r3, #4]
    3fe0:	4a0a      	ldr	r2, [pc, #40]	; (400c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3fe2:	5cd3      	ldrb	r3, [r2, r3]
    3fe4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3fe6:	4b0a      	ldr	r3, [pc, #40]	; (4010 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3fe8:	691b      	ldr	r3, [r3, #16]
    3fea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3fec:	9b02      	ldr	r3, [sp, #8]
    3fee:	f023 030c 	bic.w	r3, r3, #12
    3ff2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3ff4:	9b03      	ldr	r3, [sp, #12]
    3ff6:	009b      	lsls	r3, r3, #2
    3ff8:	9a02      	ldr	r2, [sp, #8]
    3ffa:	4313      	orrs	r3, r2
    3ffc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3ffe:	4a04      	ldr	r2, [pc, #16]	; (4010 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4000:	9b02      	ldr	r3, [sp, #8]
    4002:	6113      	str	r3, [r2, #16]
}
    4004:	bf00      	nop
    4006:	b004      	add	sp, #16
    4008:	4770      	bx	lr
    400a:	bf00      	nop
    400c:	0000810c 	.word	0x0000810c
    4010:	40048000 	.word	0x40048000

00004014 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4014:	b084      	sub	sp, #16
    4016:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4018:	4b0a      	ldr	r3, [pc, #40]	; (4044 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    401a:	795b      	ldrb	r3, [r3, #5]
    401c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    401e:	4b0a      	ldr	r3, [pc, #40]	; (4048 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4020:	6a1b      	ldr	r3, [r3, #32]
    4022:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4024:	9b02      	ldr	r3, [sp, #8]
    4026:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    402a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    402c:	9b03      	ldr	r3, [sp, #12]
    402e:	061b      	lsls	r3, r3, #24
    4030:	9a02      	ldr	r2, [sp, #8]
    4032:	4313      	orrs	r3, r2
    4034:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4036:	4a04      	ldr	r2, [pc, #16]	; (4048 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4038:	9b02      	ldr	r3, [sp, #8]
    403a:	6213      	str	r3, [r2, #32]
}
    403c:	bf00      	nop
    403e:	b004      	add	sp, #16
    4040:	4770      	bx	lr
    4042:	bf00      	nop
    4044:	000080ac 	.word	0x000080ac
    4048:	40064000 	.word	0x40064000

0000404c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    404c:	b084      	sub	sp, #16
    404e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4050:	9b01      	ldr	r3, [sp, #4]
    4052:	685b      	ldr	r3, [r3, #4]
    4054:	4a0a      	ldr	r2, [pc, #40]	; (4080 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4056:	5cd3      	ldrb	r3, [r2, r3]
    4058:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    405a:	4b0a      	ldr	r3, [pc, #40]	; (4084 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    405c:	6a1b      	ldr	r3, [r3, #32]
    405e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4060:	9b02      	ldr	r3, [sp, #8]
    4062:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4066:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4068:	9b03      	ldr	r3, [sp, #12]
    406a:	061b      	lsls	r3, r3, #24
    406c:	9a02      	ldr	r2, [sp, #8]
    406e:	4313      	orrs	r3, r2
    4070:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4072:	4a04      	ldr	r2, [pc, #16]	; (4084 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4074:	9b02      	ldr	r3, [sp, #8]
    4076:	6213      	str	r3, [r2, #32]
}
    4078:	bf00      	nop
    407a:	b004      	add	sp, #16
    407c:	4770      	bx	lr
    407e:	bf00      	nop
    4080:	000080ac 	.word	0x000080ac
    4084:	40064000 	.word	0x40064000

00004088 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4088:	b086      	sub	sp, #24
    408a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    408c:	4b20      	ldr	r3, [pc, #128]	; (4110 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    408e:	795b      	ldrb	r3, [r3, #5]
    4090:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4092:	9b01      	ldr	r3, [sp, #4]
    4094:	681a      	ldr	r2, [r3, #0]
    4096:	491f      	ldr	r1, [pc, #124]	; (4114 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4098:	4613      	mov	r3, r2
    409a:	00db      	lsls	r3, r3, #3
    409c:	4413      	add	r3, r2
    409e:	440b      	add	r3, r1
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    40a4:	4b1c      	ldr	r3, [pc, #112]	; (4118 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    40a6:	68db      	ldr	r3, [r3, #12]
    40a8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    40aa:	9b03      	ldr	r3, [sp, #12]
    40ac:	2b03      	cmp	r3, #3
    40ae:	d813      	bhi.n	40d8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    40b0:	9b03      	ldr	r3, [sp, #12]
    40b2:	005b      	lsls	r3, r3, #1
    40b4:	3318      	adds	r3, #24
    40b6:	2203      	movs	r2, #3
    40b8:	fa02 f303 	lsl.w	r3, r2, r3
    40bc:	43db      	mvns	r3, r3
    40be:	9a05      	ldr	r2, [sp, #20]
    40c0:	4013      	ands	r3, r2
    40c2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    40c4:	9b03      	ldr	r3, [sp, #12]
    40c6:	005b      	lsls	r3, r3, #1
    40c8:	3318      	adds	r3, #24
    40ca:	9a04      	ldr	r2, [sp, #16]
    40cc:	fa02 f303 	lsl.w	r3, r2, r3
    40d0:	9a05      	ldr	r2, [sp, #20]
    40d2:	4313      	orrs	r3, r2
    40d4:	9305      	str	r3, [sp, #20]
    40d6:	e014      	b.n	4102 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    40d8:	9b03      	ldr	r3, [sp, #12]
    40da:	3b04      	subs	r3, #4
    40dc:	005b      	lsls	r3, r3, #1
    40de:	3310      	adds	r3, #16
    40e0:	2203      	movs	r2, #3
    40e2:	fa02 f303 	lsl.w	r3, r2, r3
    40e6:	43db      	mvns	r3, r3
    40e8:	9a05      	ldr	r2, [sp, #20]
    40ea:	4013      	ands	r3, r2
    40ec:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    40ee:	9b03      	ldr	r3, [sp, #12]
    40f0:	3b04      	subs	r3, #4
    40f2:	005b      	lsls	r3, r3, #1
    40f4:	3310      	adds	r3, #16
    40f6:	9a04      	ldr	r2, [sp, #16]
    40f8:	fa02 f303 	lsl.w	r3, r2, r3
    40fc:	9a05      	ldr	r2, [sp, #20]
    40fe:	4313      	orrs	r3, r2
    4100:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4102:	4a05      	ldr	r2, [pc, #20]	; (4118 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4104:	9b05      	ldr	r3, [sp, #20]
    4106:	60d3      	str	r3, [r2, #12]
}
    4108:	bf00      	nop
    410a:	b006      	add	sp, #24
    410c:	4770      	bx	lr
    410e:	bf00      	nop
    4110:	00008054 	.word	0x00008054
    4114:	00007d44 	.word	0x00007d44
    4118:	40048000 	.word	0x40048000

0000411c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    411c:	b086      	sub	sp, #24
    411e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4120:	9b01      	ldr	r3, [sp, #4]
    4122:	685b      	ldr	r3, [r3, #4]
    4124:	4a20      	ldr	r2, [pc, #128]	; (41a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4126:	5cd3      	ldrb	r3, [r2, r3]
    4128:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    412a:	9b01      	ldr	r3, [sp, #4]
    412c:	681a      	ldr	r2, [r3, #0]
    412e:	491f      	ldr	r1, [pc, #124]	; (41ac <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4130:	4613      	mov	r3, r2
    4132:	00db      	lsls	r3, r3, #3
    4134:	4413      	add	r3, r2
    4136:	440b      	add	r3, r1
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    413c:	4b1c      	ldr	r3, [pc, #112]	; (41b0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    413e:	68db      	ldr	r3, [r3, #12]
    4140:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4142:	9b03      	ldr	r3, [sp, #12]
    4144:	2b03      	cmp	r3, #3
    4146:	d813      	bhi.n	4170 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4148:	9b03      	ldr	r3, [sp, #12]
    414a:	005b      	lsls	r3, r3, #1
    414c:	3318      	adds	r3, #24
    414e:	2203      	movs	r2, #3
    4150:	fa02 f303 	lsl.w	r3, r2, r3
    4154:	43db      	mvns	r3, r3
    4156:	9a05      	ldr	r2, [sp, #20]
    4158:	4013      	ands	r3, r2
    415a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    415c:	9b03      	ldr	r3, [sp, #12]
    415e:	005b      	lsls	r3, r3, #1
    4160:	3318      	adds	r3, #24
    4162:	9a04      	ldr	r2, [sp, #16]
    4164:	fa02 f303 	lsl.w	r3, r2, r3
    4168:	9a05      	ldr	r2, [sp, #20]
    416a:	4313      	orrs	r3, r2
    416c:	9305      	str	r3, [sp, #20]
    416e:	e014      	b.n	419a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4170:	9b03      	ldr	r3, [sp, #12]
    4172:	3b04      	subs	r3, #4
    4174:	005b      	lsls	r3, r3, #1
    4176:	3310      	adds	r3, #16
    4178:	2203      	movs	r2, #3
    417a:	fa02 f303 	lsl.w	r3, r2, r3
    417e:	43db      	mvns	r3, r3
    4180:	9a05      	ldr	r2, [sp, #20]
    4182:	4013      	ands	r3, r2
    4184:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4186:	9b03      	ldr	r3, [sp, #12]
    4188:	3b04      	subs	r3, #4
    418a:	005b      	lsls	r3, r3, #1
    418c:	3310      	adds	r3, #16
    418e:	9a04      	ldr	r2, [sp, #16]
    4190:	fa02 f303 	lsl.w	r3, r2, r3
    4194:	9a05      	ldr	r2, [sp, #20]
    4196:	4313      	orrs	r3, r2
    4198:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    419a:	4a05      	ldr	r2, [pc, #20]	; (41b0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    419c:	9b05      	ldr	r3, [sp, #20]
    419e:	60d3      	str	r3, [r2, #12]
}
    41a0:	bf00      	nop
    41a2:	b006      	add	sp, #24
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop
    41a8:	00008054 	.word	0x00008054
    41ac:	00007d44 	.word	0x00007d44
    41b0:	40048000 	.word	0x40048000

000041b4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41b4:	b084      	sub	sp, #16
    41b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    41b8:	4b06      	ldr	r3, [pc, #24]	; (41d4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    41ba:	685b      	ldr	r3, [r3, #4]
    41bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    41be:	9b03      	ldr	r3, [sp, #12]
    41c0:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    41c4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    41c6:	4a03      	ldr	r2, [pc, #12]	; (41d4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    41c8:	9b03      	ldr	r3, [sp, #12]
    41ca:	6053      	str	r3, [r2, #4]
}
    41cc:	bf00      	nop
    41ce:	b004      	add	sp, #16
    41d0:	4770      	bx	lr
    41d2:	bf00      	nop
    41d4:	40048000 	.word	0x40048000

000041d8 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41d8:	b084      	sub	sp, #16
    41da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41dc:	9b01      	ldr	r3, [sp, #4]
    41de:	685b      	ldr	r3, [r3, #4]
    41e0:	4a0a      	ldr	r2, [pc, #40]	; (420c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    41e2:	5cd3      	ldrb	r3, [r2, r3]
    41e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    41e6:	4b0a      	ldr	r3, [pc, #40]	; (4210 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    41e8:	685b      	ldr	r3, [r3, #4]
    41ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    41ec:	9b02      	ldr	r3, [sp, #8]
    41ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    41f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    41f4:	9b03      	ldr	r3, [sp, #12]
    41f6:	011b      	lsls	r3, r3, #4
    41f8:	9a02      	ldr	r2, [sp, #8]
    41fa:	4313      	orrs	r3, r2
    41fc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    41fe:	4a04      	ldr	r2, [pc, #16]	; (4210 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4200:	9b02      	ldr	r3, [sp, #8]
    4202:	6053      	str	r3, [r2, #4]
}
    4204:	bf00      	nop
    4206:	b004      	add	sp, #16
    4208:	4770      	bx	lr
    420a:	bf00      	nop
    420c:	00008054 	.word	0x00008054
    4210:	40048000 	.word	0x40048000

00004214 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4214:	b084      	sub	sp, #16
    4216:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4218:	9b01      	ldr	r3, [sp, #4]
    421a:	681a      	ldr	r2, [r3, #0]
    421c:	490f      	ldr	r1, [pc, #60]	; (425c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    421e:	4613      	mov	r3, r2
    4220:	00db      	lsls	r3, r3, #3
    4222:	4413      	add	r3, r2
    4224:	440b      	add	r3, r1
    4226:	3304      	adds	r3, #4
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    422c:	4a0c      	ldr	r2, [pc, #48]	; (4260 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    422e:	9b03      	ldr	r3, [sp, #12]
    4230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4234:	490a      	ldr	r1, [pc, #40]	; (4260 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4236:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    423a:	9b03      	ldr	r3, [sp, #12]
    423c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4240:	4a07      	ldr	r2, [pc, #28]	; (4260 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4242:	9b03      	ldr	r3, [sp, #12]
    4244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4248:	4905      	ldr	r1, [pc, #20]	; (4260 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    424a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    424e:	9b03      	ldr	r3, [sp, #12]
    4250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4254:	bf00      	nop
    4256:	b004      	add	sp, #16
    4258:	4770      	bx	lr
    425a:	bf00      	nop
    425c:	00007d44 	.word	0x00007d44
    4260:	40065000 	.word	0x40065000

00004264 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4264:	b086      	sub	sp, #24
    4266:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	681a      	ldr	r2, [r3, #0]
    426c:	4912      	ldr	r1, [pc, #72]	; (42b8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    426e:	4613      	mov	r3, r2
    4270:	00db      	lsls	r3, r3, #3
    4272:	4413      	add	r3, r2
    4274:	440b      	add	r3, r1
    4276:	3304      	adds	r3, #4
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    427c:	9b01      	ldr	r3, [sp, #4]
    427e:	685b      	ldr	r3, [r3, #4]
    4280:	4a0e      	ldr	r2, [pc, #56]	; (42bc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4282:	5cd3      	ldrb	r3, [r2, r3]
    4284:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4286:	4a0e      	ldr	r2, [pc, #56]	; (42c0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4288:	9b05      	ldr	r3, [sp, #20]
    428a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    428e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4290:	9b03      	ldr	r3, [sp, #12]
    4292:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4296:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4298:	9b04      	ldr	r3, [sp, #16]
    429a:	061b      	lsls	r3, r3, #24
    429c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    42a0:	9a03      	ldr	r2, [sp, #12]
    42a2:	4313      	orrs	r3, r2
    42a4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    42a6:	4906      	ldr	r1, [pc, #24]	; (42c0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    42a8:	9b05      	ldr	r3, [sp, #20]
    42aa:	9a03      	ldr	r2, [sp, #12]
    42ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    42b0:	bf00      	nop
    42b2:	b006      	add	sp, #24
    42b4:	4770      	bx	lr
    42b6:	bf00      	nop
    42b8:	00007d44 	.word	0x00007d44
    42bc:	000080dc 	.word	0x000080dc
    42c0:	40065000 	.word	0x40065000

000042c4 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42c4:	b084      	sub	sp, #16
    42c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42c8:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    42ca:	7f1b      	ldrb	r3, [r3, #28]
    42cc:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    42ce:	4b0b      	ldr	r3, [pc, #44]	; (42fc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    42d0:	685b      	ldr	r3, [r3, #4]
    42d2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    42d4:	9b02      	ldr	r3, [sp, #8]
    42d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    42da:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    42dc:	9b03      	ldr	r3, [sp, #12]
    42de:	031b      	lsls	r3, r3, #12
    42e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    42e4:	9a02      	ldr	r2, [sp, #8]
    42e6:	4313      	orrs	r3, r2
    42e8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    42ea:	4a04      	ldr	r2, [pc, #16]	; (42fc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    42ec:	9b02      	ldr	r3, [sp, #8]
    42ee:	6053      	str	r3, [r2, #4]
}
    42f0:	bf00      	nop
    42f2:	b004      	add	sp, #16
    42f4:	4770      	bx	lr
    42f6:	bf00      	nop
    42f8:	00008054 	.word	0x00008054
    42fc:	40048000 	.word	0x40048000

00004300 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4300:	b084      	sub	sp, #16
    4302:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4304:	9b01      	ldr	r3, [sp, #4]
    4306:	685b      	ldr	r3, [r3, #4]
    4308:	4a0b      	ldr	r2, [pc, #44]	; (4338 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    430a:	5cd3      	ldrb	r3, [r2, r3]
    430c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    430e:	4b0b      	ldr	r3, [pc, #44]	; (433c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4310:	685b      	ldr	r3, [r3, #4]
    4312:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4314:	9b02      	ldr	r3, [sp, #8]
    4316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    431a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	031b      	lsls	r3, r3, #12
    4320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4324:	9a02      	ldr	r2, [sp, #8]
    4326:	4313      	orrs	r3, r2
    4328:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    432a:	4a04      	ldr	r2, [pc, #16]	; (433c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    432c:	9b02      	ldr	r3, [sp, #8]
    432e:	6053      	str	r3, [r2, #4]
}
    4330:	bf00      	nop
    4332:	b004      	add	sp, #16
    4334:	4770      	bx	lr
    4336:	bf00      	nop
    4338:	00008054 	.word	0x00008054
    433c:	40048000 	.word	0x40048000

00004340 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4340:	b500      	push	{lr}
    4342:	b085      	sub	sp, #20
    4344:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4346:	2300      	movs	r3, #0
    4348:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    434c:	9b01      	ldr	r3, [sp, #4]
    434e:	2b00      	cmp	r3, #0
    4350:	d037      	beq.n	43c2 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4352:	2300      	movs	r3, #0
    4354:	9303      	str	r3, [sp, #12]
    4356:	e02b      	b.n	43b0 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4358:	4b29      	ldr	r3, [pc, #164]	; (4400 <DisableSafeClock+0xc0>)
    435a:	6819      	ldr	r1, [r3, #0]
    435c:	9a03      	ldr	r2, [sp, #12]
    435e:	4613      	mov	r3, r2
    4360:	005b      	lsls	r3, r3, #1
    4362:	4413      	add	r3, r2
    4364:	009b      	lsls	r3, r3, #2
    4366:	440b      	add	r3, r1
    4368:	3314      	adds	r3, #20
    436a:	681b      	ldr	r3, [r3, #0]
    436c:	2b05      	cmp	r3, #5
    436e:	d11c      	bne.n	43aa <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4370:	2301      	movs	r3, #1
    4372:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4376:	4b22      	ldr	r3, [pc, #136]	; (4400 <DisableSafeClock+0xc0>)
    4378:	6819      	ldr	r1, [r3, #0]
    437a:	9a03      	ldr	r2, [sp, #12]
    437c:	4613      	mov	r3, r2
    437e:	005b      	lsls	r3, r3, #1
    4380:	4413      	add	r3, r2
    4382:	009b      	lsls	r3, r3, #2
    4384:	440b      	add	r3, r1
    4386:	3318      	adds	r3, #24
    4388:	881b      	ldrh	r3, [r3, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d118      	bne.n	43c0 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    438e:	4b1d      	ldr	r3, [pc, #116]	; (4404 <DisableSafeClock+0xc4>)
    4390:	791b      	ldrb	r3, [r3, #4]
    4392:	4619      	mov	r1, r3
    4394:	4a1c      	ldr	r2, [pc, #112]	; (4408 <DisableSafeClock+0xc8>)
    4396:	460b      	mov	r3, r1
    4398:	005b      	lsls	r3, r3, #1
    439a:	440b      	add	r3, r1
    439c:	009b      	lsls	r3, r3, #2
    439e:	4413      	add	r3, r2
    43a0:	3308      	adds	r3, #8
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	2005      	movs	r0, #5
    43a6:	4798      	blx	r3
                }
                break;
    43a8:	e00a      	b.n	43c0 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    43aa:	9b03      	ldr	r3, [sp, #12]
    43ac:	3301      	adds	r3, #1
    43ae:	9303      	str	r3, [sp, #12]
    43b0:	4b13      	ldr	r3, [pc, #76]	; (4400 <DisableSafeClock+0xc0>)
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	7a1b      	ldrb	r3, [r3, #8]
    43b6:	461a      	mov	r2, r3
    43b8:	9b03      	ldr	r3, [sp, #12]
    43ba:	4293      	cmp	r3, r2
    43bc:	d3cc      	bcc.n	4358 <DisableSafeClock+0x18>
    43be:	e000      	b.n	43c2 <DisableSafeClock+0x82>
                break;
    43c0:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    43c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    43c6:	f083 0301 	eor.w	r3, r3, #1
    43ca:	b2db      	uxtb	r3, r3
    43cc:	2b00      	cmp	r3, #0
    43ce:	d013      	beq.n	43f8 <DisableSafeClock+0xb8>
    43d0:	4b0e      	ldr	r3, [pc, #56]	; (440c <DisableSafeClock+0xcc>)
    43d2:	781b      	ldrb	r3, [r3, #0]
    43d4:	f083 0301 	eor.w	r3, r3, #1
    43d8:	b2db      	uxtb	r3, r3
    43da:	2b00      	cmp	r3, #0
    43dc:	d00c      	beq.n	43f8 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    43de:	4b09      	ldr	r3, [pc, #36]	; (4404 <DisableSafeClock+0xc4>)
    43e0:	791b      	ldrb	r3, [r3, #4]
    43e2:	4619      	mov	r1, r3
    43e4:	4a08      	ldr	r2, [pc, #32]	; (4408 <DisableSafeClock+0xc8>)
    43e6:	460b      	mov	r3, r1
    43e8:	005b      	lsls	r3, r3, #1
    43ea:	440b      	add	r3, r1
    43ec:	009b      	lsls	r3, r3, #2
    43ee:	4413      	add	r3, r2
    43f0:	3308      	adds	r3, #8
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	2005      	movs	r0, #5
    43f6:	4798      	blx	r3
    }
}
    43f8:	bf00      	nop
    43fa:	b005      	add	sp, #20
    43fc:	f85d fb04 	ldr.w	pc, [sp], #4
    4400:	1fff8bc4 	.word	0x1fff8bc4
    4404:	00007cd4 	.word	0x00007cd4
    4408:	00008304 	.word	0x00008304
    440c:	1fff8b18 	.word	0x1fff8b18

00004410 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4410:	4b06      	ldr	r3, [pc, #24]	; (442c <SetFircToResetValue_TrustedCall+0x1c>)
    4412:	2200      	movs	r2, #0
    4414:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4418:	4b04      	ldr	r3, [pc, #16]	; (442c <SetFircToResetValue_TrustedCall+0x1c>)
    441a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    441e:	4a03      	ldr	r2, [pc, #12]	; (442c <SetFircToResetValue_TrustedCall+0x1c>)
    4420:	f043 0301 	orr.w	r3, r3, #1
    4424:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4428:	bf00      	nop
    442a:	4770      	bx	lr
    442c:	40064000 	.word	0x40064000

00004430 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4430:	b084      	sub	sp, #16
    4432:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4434:	2303      	movs	r3, #3
    4436:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4438:	2300      	movs	r3, #0
    443a:	9302      	str	r3, [sp, #8]
    443c:	e028      	b.n	4490 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    443e:	9b01      	ldr	r3, [sp, #4]
    4440:	9a02      	ldr	r2, [sp, #8]
    4442:	320d      	adds	r2, #13
    4444:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4448:	2b28      	cmp	r3, #40	; 0x28
    444a:	d10b      	bne.n	4464 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    444c:	9a01      	ldr	r2, [sp, #4]
    444e:	9b02      	ldr	r3, [sp, #8]
    4450:	330d      	adds	r3, #13
    4452:	00db      	lsls	r3, r3, #3
    4454:	4413      	add	r3, r2
    4456:	685b      	ldr	r3, [r3, #4]
    4458:	4a2b      	ldr	r2, [pc, #172]	; (4508 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    445a:	5cd3      	ldrb	r3, [r2, r3]
    445c:	011b      	lsls	r3, r3, #4
    445e:	9a03      	ldr	r2, [sp, #12]
    4460:	4313      	orrs	r3, r2
    4462:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4464:	9b01      	ldr	r3, [sp, #4]
    4466:	9a02      	ldr	r2, [sp, #8]
    4468:	320d      	adds	r2, #13
    446a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    446e:	2b29      	cmp	r3, #41	; 0x29
    4470:	d10b      	bne.n	448a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4472:	9a01      	ldr	r2, [sp, #4]
    4474:	9b02      	ldr	r3, [sp, #8]
    4476:	330d      	adds	r3, #13
    4478:	00db      	lsls	r3, r3, #3
    447a:	4413      	add	r3, r2
    447c:	685b      	ldr	r3, [r3, #4]
    447e:	4a23      	ldr	r2, [pc, #140]	; (450c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4480:	5cd3      	ldrb	r3, [r2, r3]
    4482:	009b      	lsls	r3, r3, #2
    4484:	9a03      	ldr	r2, [sp, #12]
    4486:	4313      	orrs	r3, r2
    4488:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    448a:	9b02      	ldr	r3, [sp, #8]
    448c:	3301      	adds	r3, #1
    448e:	9302      	str	r3, [sp, #8]
    4490:	9b01      	ldr	r3, [sp, #4]
    4492:	7adb      	ldrb	r3, [r3, #11]
    4494:	461a      	mov	r2, r3
    4496:	9b02      	ldr	r3, [sp, #8]
    4498:	4293      	cmp	r3, r2
    449a:	d3d0      	bcc.n	443e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    449c:	2300      	movs	r3, #0
    449e:	9302      	str	r3, [sp, #8]
    44a0:	e026      	b.n	44f0 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    44a2:	9a01      	ldr	r2, [sp, #4]
    44a4:	9b02      	ldr	r3, [sp, #8]
    44a6:	334e      	adds	r3, #78	; 0x4e
    44a8:	00db      	lsls	r3, r3, #3
    44aa:	4413      	add	r3, r2
    44ac:	685b      	ldr	r3, [r3, #4]
    44ae:	2b12      	cmp	r3, #18
    44b0:	d109      	bne.n	44c6 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    44b2:	9a01      	ldr	r2, [sp, #4]
    44b4:	9b02      	ldr	r3, [sp, #8]
    44b6:	334e      	adds	r3, #78	; 0x4e
    44b8:	00db      	lsls	r3, r3, #3
    44ba:	4413      	add	r3, r2
    44bc:	891b      	ldrh	r3, [r3, #8]
    44be:	005b      	lsls	r3, r3, #1
    44c0:	9a03      	ldr	r2, [sp, #12]
    44c2:	4313      	orrs	r3, r2
    44c4:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    44c6:	9a01      	ldr	r2, [sp, #4]
    44c8:	9b02      	ldr	r3, [sp, #8]
    44ca:	334e      	adds	r3, #78	; 0x4e
    44cc:	00db      	lsls	r3, r3, #3
    44ce:	4413      	add	r3, r2
    44d0:	685b      	ldr	r3, [r3, #4]
    44d2:	2b13      	cmp	r3, #19
    44d4:	d109      	bne.n	44ea <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    44d6:	9a01      	ldr	r2, [sp, #4]
    44d8:	9b02      	ldr	r3, [sp, #8]
    44da:	334e      	adds	r3, #78	; 0x4e
    44dc:	00db      	lsls	r3, r3, #3
    44de:	4413      	add	r3, r2
    44e0:	891b      	ldrh	r3, [r3, #8]
    44e2:	461a      	mov	r2, r3
    44e4:	9b03      	ldr	r3, [sp, #12]
    44e6:	4313      	orrs	r3, r2
    44e8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    44ea:	9b02      	ldr	r3, [sp, #8]
    44ec:	3301      	adds	r3, #1
    44ee:	9302      	str	r3, [sp, #8]
    44f0:	9b01      	ldr	r3, [sp, #4]
    44f2:	7c1b      	ldrb	r3, [r3, #16]
    44f4:	461a      	mov	r2, r3
    44f6:	9b02      	ldr	r3, [sp, #8]
    44f8:	4293      	cmp	r3, r2
    44fa:	d3d2      	bcc.n	44a2 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    44fc:	4a04      	ldr	r2, [pc, #16]	; (4510 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    44fe:	9b03      	ldr	r3, [sp, #12]
    4500:	6113      	str	r3, [r2, #16]
}
    4502:	bf00      	nop
    4504:	b004      	add	sp, #16
    4506:	4770      	bx	lr
    4508:	00008054 	.word	0x00008054
    450c:	0000810c 	.word	0x0000810c
    4510:	40048000 	.word	0x40048000

00004514 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4514:	b500      	push	{lr}
    4516:	b089      	sub	sp, #36	; 0x24
    4518:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    451a:	2300      	movs	r3, #0
    451c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4520:	4a21      	ldr	r2, [pc, #132]	; (45a8 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4522:	9b01      	ldr	r3, [sp, #4]
    4524:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4526:	4b21      	ldr	r3, [pc, #132]	; (45ac <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4528:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    452c:	f003 0301 	and.w	r3, r3, #1
    4530:	2b00      	cmp	r3, #0
    4532:	d12e      	bne.n	4592 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4534:	4b1e      	ldr	r3, [pc, #120]	; (45b0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4536:	2200      	movs	r2, #0
    4538:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    453a:	f7ff ff69 	bl	4410 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    453e:	aa03      	add	r2, sp, #12
    4540:	a904      	add	r1, sp, #16
    4542:	a805      	add	r0, sp, #20
    4544:	f24c 3350 	movw	r3, #50000	; 0xc350
    4548:	f7fe f8ae 	bl	26a8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    454c:	4b17      	ldr	r3, [pc, #92]	; (45ac <Clock_Ip_SpecificPlatformInitClock+0x98>)
    454e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4552:	0e1b      	lsrs	r3, r3, #24
    4554:	f003 0301 	and.w	r3, r3, #1
    4558:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    455a:	9a03      	ldr	r2, [sp, #12]
    455c:	a904      	add	r1, sp, #16
    455e:	ab05      	add	r3, sp, #20
    4560:	4618      	mov	r0, r3
    4562:	f7fe f8bb 	bl	26dc <Clock_Ip_TimeoutExpired>
    4566:	4603      	mov	r3, r0
    4568:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    456c:	9b06      	ldr	r3, [sp, #24]
    456e:	2b00      	cmp	r3, #0
    4570:	d106      	bne.n	4580 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4572:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4576:	f083 0301 	eor.w	r3, r3, #1
    457a:	b2db      	uxtb	r3, r3
    457c:	2b00      	cmp	r3, #0
    457e:	d1e5      	bne.n	454c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4580:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4584:	2b00      	cmp	r3, #0
    4586:	d007      	beq.n	4598 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4588:	2105      	movs	r1, #5
    458a:	2001      	movs	r0, #1
    458c:	f7fe f87c 	bl	2688 <Clock_Ip_ReportClockErrors>
    4590:	e002      	b.n	4598 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4592:	4b07      	ldr	r3, [pc, #28]	; (45b0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4594:	2201      	movs	r2, #1
    4596:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4598:	9801      	ldr	r0, [sp, #4]
    459a:	f7ff ff49 	bl	4430 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    459e:	bf00      	nop
    45a0:	b009      	add	sp, #36	; 0x24
    45a2:	f85d fb04 	ldr.w	pc, [sp], #4
    45a6:	bf00      	nop
    45a8:	1fff8bc4 	.word	0x1fff8bc4
    45ac:	40064000 	.word	0x40064000
    45b0:	1fff8b18 	.word	0x1fff8b18

000045b4 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    45b4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    45b6:	2300      	movs	r3, #0
    45b8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    45ba:	4b29      	ldr	r3, [pc, #164]	; (4660 <getFircConfig+0xac>)
    45bc:	681b      	ldr	r3, [r3, #0]
    45be:	2b00      	cmp	r3, #0
    45c0:	d024      	beq.n	460c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    45c2:	2300      	movs	r3, #0
    45c4:	9301      	str	r3, [sp, #4]
    45c6:	e01a      	b.n	45fe <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    45c8:	4b25      	ldr	r3, [pc, #148]	; (4660 <getFircConfig+0xac>)
    45ca:	6819      	ldr	r1, [r3, #0]
    45cc:	9a01      	ldr	r2, [sp, #4]
    45ce:	4613      	mov	r3, r2
    45d0:	005b      	lsls	r3, r3, #1
    45d2:	4413      	add	r3, r2
    45d4:	009b      	lsls	r3, r3, #2
    45d6:	440b      	add	r3, r1
    45d8:	3314      	adds	r3, #20
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	2b05      	cmp	r3, #5
    45de:	d10b      	bne.n	45f8 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    45e0:	4b1f      	ldr	r3, [pc, #124]	; (4660 <getFircConfig+0xac>)
    45e2:	6819      	ldr	r1, [r3, #0]
    45e4:	9a01      	ldr	r2, [sp, #4]
    45e6:	4613      	mov	r3, r2
    45e8:	005b      	lsls	r3, r3, #1
    45ea:	4413      	add	r3, r2
    45ec:	009b      	lsls	r3, r3, #2
    45ee:	3310      	adds	r3, #16
    45f0:	440b      	add	r3, r1
    45f2:	3304      	adds	r3, #4
    45f4:	9300      	str	r3, [sp, #0]
                break;
    45f6:	e009      	b.n	460c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    45f8:	9b01      	ldr	r3, [sp, #4]
    45fa:	3301      	adds	r3, #1
    45fc:	9301      	str	r3, [sp, #4]
    45fe:	4b18      	ldr	r3, [pc, #96]	; (4660 <getFircConfig+0xac>)
    4600:	681b      	ldr	r3, [r3, #0]
    4602:	7a1b      	ldrb	r3, [r3, #8]
    4604:	461a      	mov	r2, r3
    4606:	9b01      	ldr	r3, [sp, #4]
    4608:	4293      	cmp	r3, r2
    460a:	d3dd      	bcc.n	45c8 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    460c:	9b00      	ldr	r3, [sp, #0]
    460e:	2b00      	cmp	r3, #0
    4610:	d121      	bne.n	4656 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4612:	4b14      	ldr	r3, [pc, #80]	; (4664 <getFircConfig+0xb0>)
    4614:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4616:	4b13      	ldr	r3, [pc, #76]	; (4664 <getFircConfig+0xb0>)
    4618:	2205      	movs	r2, #5
    461a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    461c:	4b12      	ldr	r3, [pc, #72]	; (4668 <getFircConfig+0xb4>)
    461e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4622:	b29b      	uxth	r3, r3
    4624:	f003 0301 	and.w	r3, r3, #1
    4628:	b29a      	uxth	r2, r3
    462a:	4b0e      	ldr	r3, [pc, #56]	; (4664 <getFircConfig+0xb0>)
    462c:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    462e:	4b0e      	ldr	r3, [pc, #56]	; (4668 <getFircConfig+0xb4>)
    4630:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4634:	b2db      	uxtb	r3, r3
    4636:	f003 0303 	and.w	r3, r3, #3
    463a:	b2da      	uxtb	r2, r3
    463c:	4b09      	ldr	r3, [pc, #36]	; (4664 <getFircConfig+0xb0>)
    463e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4640:	4b09      	ldr	r3, [pc, #36]	; (4668 <getFircConfig+0xb4>)
    4642:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4646:	b2db      	uxtb	r3, r3
    4648:	10db      	asrs	r3, r3, #3
    464a:	b2db      	uxtb	r3, r3
    464c:	f003 0301 	and.w	r3, r3, #1
    4650:	b2da      	uxtb	r2, r3
    4652:	4b04      	ldr	r3, [pc, #16]	; (4664 <getFircConfig+0xb0>)
    4654:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4656:	9b00      	ldr	r3, [sp, #0]
}
    4658:	4618      	mov	r0, r3
    465a:	b002      	add	sp, #8
    465c:	4770      	bx	lr
    465e:	bf00      	nop
    4660:	1fff8bc4 	.word	0x1fff8bc4
    4664:	1fff8c30 	.word	0x1fff8c30
    4668:	40064000 	.word	0x40064000

0000466c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    466c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    466e:	2300      	movs	r3, #0
    4670:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4672:	4b20      	ldr	r3, [pc, #128]	; (46f4 <getSoscConfig+0x88>)
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	2b00      	cmp	r3, #0
    4678:	d024      	beq.n	46c4 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    467a:	2300      	movs	r3, #0
    467c:	9301      	str	r3, [sp, #4]
    467e:	e01a      	b.n	46b6 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4680:	4b1c      	ldr	r3, [pc, #112]	; (46f4 <getSoscConfig+0x88>)
    4682:	6819      	ldr	r1, [r3, #0]
    4684:	9a01      	ldr	r2, [sp, #4]
    4686:	4613      	mov	r3, r2
    4688:	009b      	lsls	r3, r3, #2
    468a:	4413      	add	r3, r2
    468c:	009b      	lsls	r3, r3, #2
    468e:	440b      	add	r3, r1
    4690:	332c      	adds	r3, #44	; 0x2c
    4692:	681b      	ldr	r3, [r3, #0]
    4694:	2b08      	cmp	r3, #8
    4696:	d10b      	bne.n	46b0 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4698:	4b16      	ldr	r3, [pc, #88]	; (46f4 <getSoscConfig+0x88>)
    469a:	6819      	ldr	r1, [r3, #0]
    469c:	9a01      	ldr	r2, [sp, #4]
    469e:	4613      	mov	r3, r2
    46a0:	009b      	lsls	r3, r3, #2
    46a2:	4413      	add	r3, r2
    46a4:	009b      	lsls	r3, r3, #2
    46a6:	3328      	adds	r3, #40	; 0x28
    46a8:	440b      	add	r3, r1
    46aa:	3304      	adds	r3, #4
    46ac:	9300      	str	r3, [sp, #0]
                break;
    46ae:	e009      	b.n	46c4 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    46b0:	9b01      	ldr	r3, [sp, #4]
    46b2:	3301      	adds	r3, #1
    46b4:	9301      	str	r3, [sp, #4]
    46b6:	4b0f      	ldr	r3, [pc, #60]	; (46f4 <getSoscConfig+0x88>)
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	7a5b      	ldrb	r3, [r3, #9]
    46bc:	461a      	mov	r2, r3
    46be:	9b01      	ldr	r3, [sp, #4]
    46c0:	4293      	cmp	r3, r2
    46c2:	d3dd      	bcc.n	4680 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46c4:	9b00      	ldr	r3, [sp, #0]
    46c6:	2b00      	cmp	r3, #0
    46c8:	d110      	bne.n	46ec <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    46ca:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <getSoscConfig+0x8c>)
    46cc:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    46ce:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <getSoscConfig+0x8c>)
    46d0:	2208      	movs	r2, #8
    46d2:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    46d4:	4b09      	ldr	r3, [pc, #36]	; (46fc <getSoscConfig+0x90>)
    46d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    46da:	b29b      	uxth	r3, r3
    46dc:	f003 0301 	and.w	r3, r3, #1
    46e0:	b29a      	uxth	r2, r3
    46e2:	4b05      	ldr	r3, [pc, #20]	; (46f8 <getSoscConfig+0x8c>)
    46e4:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    46e6:	4b04      	ldr	r3, [pc, #16]	; (46f8 <getSoscConfig+0x8c>)
    46e8:	4a05      	ldr	r2, [pc, #20]	; (4700 <getSoscConfig+0x94>)
    46ea:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    46ec:	9b00      	ldr	r3, [sp, #0]
}
    46ee:	4618      	mov	r0, r3
    46f0:	b002      	add	sp, #8
    46f2:	4770      	bx	lr
    46f4:	1fff8bc4 	.word	0x1fff8bc4
    46f8:	1fff8c3c 	.word	0x1fff8c3c
    46fc:	40064000 	.word	0x40064000
    4700:	02625a00 	.word	0x02625a00

00004704 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4704:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4706:	2300      	movs	r3, #0
    4708:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    470a:	4b28      	ldr	r3, [pc, #160]	; (47ac <getSpllConfig+0xa8>)
    470c:	681b      	ldr	r3, [r3, #0]
    470e:	2b00      	cmp	r3, #0
    4710:	d023      	beq.n	475a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4712:	2300      	movs	r3, #0
    4714:	9301      	str	r3, [sp, #4]
    4716:	e019      	b.n	474c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4718:	4b24      	ldr	r3, [pc, #144]	; (47ac <getSpllConfig+0xa8>)
    471a:	6819      	ldr	r1, [r3, #0]
    471c:	9a01      	ldr	r2, [sp, #4]
    471e:	4613      	mov	r3, r2
    4720:	009b      	lsls	r3, r3, #2
    4722:	4413      	add	r3, r2
    4724:	00db      	lsls	r3, r3, #3
    4726:	440b      	add	r3, r1
    4728:	3340      	adds	r3, #64	; 0x40
    472a:	681b      	ldr	r3, [r3, #0]
    472c:	2b09      	cmp	r3, #9
    472e:	d10a      	bne.n	4746 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4730:	4b1e      	ldr	r3, [pc, #120]	; (47ac <getSpllConfig+0xa8>)
    4732:	6819      	ldr	r1, [r3, #0]
    4734:	9a01      	ldr	r2, [sp, #4]
    4736:	4613      	mov	r3, r2
    4738:	009b      	lsls	r3, r3, #2
    473a:	4413      	add	r3, r2
    473c:	00db      	lsls	r3, r3, #3
    473e:	3340      	adds	r3, #64	; 0x40
    4740:	440b      	add	r3, r1
    4742:	9300      	str	r3, [sp, #0]
                break;
    4744:	e009      	b.n	475a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4746:	9b01      	ldr	r3, [sp, #4]
    4748:	3301      	adds	r3, #1
    474a:	9301      	str	r3, [sp, #4]
    474c:	4b17      	ldr	r3, [pc, #92]	; (47ac <getSpllConfig+0xa8>)
    474e:	681b      	ldr	r3, [r3, #0]
    4750:	7a9b      	ldrb	r3, [r3, #10]
    4752:	461a      	mov	r2, r3
    4754:	9b01      	ldr	r3, [sp, #4]
    4756:	4293      	cmp	r3, r2
    4758:	d3de      	bcc.n	4718 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    475a:	9b00      	ldr	r3, [sp, #0]
    475c:	2b00      	cmp	r3, #0
    475e:	d121      	bne.n	47a4 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4760:	4b13      	ldr	r3, [pc, #76]	; (47b0 <getSpllConfig+0xac>)
    4762:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4764:	4b12      	ldr	r3, [pc, #72]	; (47b0 <getSpllConfig+0xac>)
    4766:	2209      	movs	r2, #9
    4768:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    476a:	4b12      	ldr	r3, [pc, #72]	; (47b4 <getSpllConfig+0xb0>)
    476c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4770:	b29b      	uxth	r3, r3
    4772:	f003 0301 	and.w	r3, r3, #1
    4776:	b29a      	uxth	r2, r3
    4778:	4b0d      	ldr	r3, [pc, #52]	; (47b0 <getSpllConfig+0xac>)
    477a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    477c:	4b0d      	ldr	r3, [pc, #52]	; (47b4 <getSpllConfig+0xb0>)
    477e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4782:	0a1b      	lsrs	r3, r3, #8
    4784:	b2db      	uxtb	r3, r3
    4786:	f003 0307 	and.w	r3, r3, #7
    478a:	b2da      	uxtb	r2, r3
    478c:	4b08      	ldr	r3, [pc, #32]	; (47b0 <getSpllConfig+0xac>)
    478e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4790:	4b08      	ldr	r3, [pc, #32]	; (47b4 <getSpllConfig+0xb0>)
    4792:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4796:	0c1b      	lsrs	r3, r3, #16
    4798:	b2db      	uxtb	r3, r3
    479a:	f003 031f 	and.w	r3, r3, #31
    479e:	b2da      	uxtb	r2, r3
    47a0:	4b03      	ldr	r3, [pc, #12]	; (47b0 <getSpllConfig+0xac>)
    47a2:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    47a4:	9b00      	ldr	r3, [sp, #0]
}
    47a6:	4618      	mov	r0, r3
    47a8:	b002      	add	sp, #8
    47aa:	4770      	bx	lr
    47ac:	1fff8bc4 	.word	0x1fff8bc4
    47b0:	1fff8c50 	.word	0x1fff8c50
    47b4:	40064000 	.word	0x40064000

000047b8 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    47b8:	b086      	sub	sp, #24
    47ba:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    47bc:	2300      	movs	r3, #0
    47be:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    47c0:	9b01      	ldr	r3, [sp, #4]
    47c2:	2b1b      	cmp	r3, #27
    47c4:	d00f      	beq.n	47e6 <getSelectorConfig+0x2e>
    47c6:	9b01      	ldr	r3, [sp, #4]
    47c8:	2b1b      	cmp	r3, #27
    47ca:	d80f      	bhi.n	47ec <getSelectorConfig+0x34>
    47cc:	9b01      	ldr	r3, [sp, #4]
    47ce:	2b19      	cmp	r3, #25
    47d0:	d003      	beq.n	47da <getSelectorConfig+0x22>
    47d2:	9b01      	ldr	r3, [sp, #4]
    47d4:	2b1a      	cmp	r3, #26
    47d6:	d003      	beq.n	47e0 <getSelectorConfig+0x28>
    47d8:	e008      	b.n	47ec <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    47da:	2300      	movs	r3, #0
    47dc:	9304      	str	r3, [sp, #16]
            break;
    47de:	e008      	b.n	47f2 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    47e0:	2301      	movs	r3, #1
    47e2:	9304      	str	r3, [sp, #16]
            break;
    47e4:	e005      	b.n	47f2 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    47e6:	2302      	movs	r3, #2
    47e8:	9304      	str	r3, [sp, #16]
            break;
    47ea:	e002      	b.n	47f2 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    47ec:	2300      	movs	r3, #0
    47ee:	9304      	str	r3, [sp, #16]
            break;
    47f0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    47f2:	4b36      	ldr	r3, [pc, #216]	; (48cc <getSelectorConfig+0x114>)
    47f4:	681b      	ldr	r3, [r3, #0]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d01d      	beq.n	4836 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    47fa:	2300      	movs	r3, #0
    47fc:	9303      	str	r3, [sp, #12]
    47fe:	e013      	b.n	4828 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4800:	4b32      	ldr	r3, [pc, #200]	; (48cc <getSelectorConfig+0x114>)
    4802:	681b      	ldr	r3, [r3, #0]
    4804:	9a03      	ldr	r2, [sp, #12]
    4806:	320d      	adds	r2, #13
    4808:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    480c:	9a01      	ldr	r2, [sp, #4]
    480e:	429a      	cmp	r2, r3
    4810:	d107      	bne.n	4822 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4812:	4b2e      	ldr	r3, [pc, #184]	; (48cc <getSelectorConfig+0x114>)
    4814:	681a      	ldr	r2, [r3, #0]
    4816:	9b03      	ldr	r3, [sp, #12]
    4818:	330d      	adds	r3, #13
    481a:	00db      	lsls	r3, r3, #3
    481c:	4413      	add	r3, r2
    481e:	9305      	str	r3, [sp, #20]
                break;
    4820:	e009      	b.n	4836 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4822:	9b03      	ldr	r3, [sp, #12]
    4824:	3301      	adds	r3, #1
    4826:	9303      	str	r3, [sp, #12]
    4828:	4b28      	ldr	r3, [pc, #160]	; (48cc <getSelectorConfig+0x114>)
    482a:	681b      	ldr	r3, [r3, #0]
    482c:	7adb      	ldrb	r3, [r3, #11]
    482e:	461a      	mov	r2, r3
    4830:	9b03      	ldr	r3, [sp, #12]
    4832:	4293      	cmp	r3, r2
    4834:	d3e4      	bcc.n	4800 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4836:	9b05      	ldr	r3, [sp, #20]
    4838:	2b00      	cmp	r3, #0
    483a:	d140      	bne.n	48be <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    483c:	9b04      	ldr	r3, [sp, #16]
    483e:	00db      	lsls	r3, r3, #3
    4840:	4a23      	ldr	r2, [pc, #140]	; (48d0 <getSelectorConfig+0x118>)
    4842:	4413      	add	r3, r2
    4844:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4846:	4922      	ldr	r1, [pc, #136]	; (48d0 <getSelectorConfig+0x118>)
    4848:	9b04      	ldr	r3, [sp, #16]
    484a:	9a01      	ldr	r2, [sp, #4]
    484c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4850:	9b01      	ldr	r3, [sp, #4]
    4852:	2b1b      	cmp	r3, #27
    4854:	d025      	beq.n	48a2 <getSelectorConfig+0xea>
    4856:	9b01      	ldr	r3, [sp, #4]
    4858:	2b1b      	cmp	r3, #27
    485a:	d832      	bhi.n	48c2 <getSelectorConfig+0x10a>
    485c:	9b01      	ldr	r3, [sp, #4]
    485e:	2b19      	cmp	r3, #25
    4860:	d003      	beq.n	486a <getSelectorConfig+0xb2>
    4862:	9b01      	ldr	r3, [sp, #4]
    4864:	2b1a      	cmp	r3, #26
    4866:	d00e      	beq.n	4886 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4868:	e02b      	b.n	48c2 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    486a:	4b1a      	ldr	r3, [pc, #104]	; (48d4 <getSelectorConfig+0x11c>)
    486c:	695b      	ldr	r3, [r3, #20]
    486e:	0e1b      	lsrs	r3, r3, #24
    4870:	f003 030f 	and.w	r3, r3, #15
    4874:	4a18      	ldr	r2, [pc, #96]	; (48d8 <getSelectorConfig+0x120>)
    4876:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    487a:	4915      	ldr	r1, [pc, #84]	; (48d0 <getSelectorConfig+0x118>)
    487c:	9b04      	ldr	r3, [sp, #16]
    487e:	00db      	lsls	r3, r3, #3
    4880:	440b      	add	r3, r1
    4882:	605a      	str	r2, [r3, #4]
                break;
    4884:	e01e      	b.n	48c4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4886:	4b13      	ldr	r3, [pc, #76]	; (48d4 <getSelectorConfig+0x11c>)
    4888:	699b      	ldr	r3, [r3, #24]
    488a:	0e1b      	lsrs	r3, r3, #24
    488c:	f003 030f 	and.w	r3, r3, #15
    4890:	4a11      	ldr	r2, [pc, #68]	; (48d8 <getSelectorConfig+0x120>)
    4892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4896:	490e      	ldr	r1, [pc, #56]	; (48d0 <getSelectorConfig+0x118>)
    4898:	9b04      	ldr	r3, [sp, #16]
    489a:	00db      	lsls	r3, r3, #3
    489c:	440b      	add	r3, r1
    489e:	605a      	str	r2, [r3, #4]
                break;
    48a0:	e010      	b.n	48c4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    48a2:	4b0c      	ldr	r3, [pc, #48]	; (48d4 <getSelectorConfig+0x11c>)
    48a4:	69db      	ldr	r3, [r3, #28]
    48a6:	0e1b      	lsrs	r3, r3, #24
    48a8:	f003 030f 	and.w	r3, r3, #15
    48ac:	4a0a      	ldr	r2, [pc, #40]	; (48d8 <getSelectorConfig+0x120>)
    48ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    48b2:	4907      	ldr	r1, [pc, #28]	; (48d0 <getSelectorConfig+0x118>)
    48b4:	9b04      	ldr	r3, [sp, #16]
    48b6:	00db      	lsls	r3, r3, #3
    48b8:	440b      	add	r3, r1
    48ba:	605a      	str	r2, [r3, #4]
                break;
    48bc:	e002      	b.n	48c4 <getSelectorConfig+0x10c>
        }
    }
    48be:	bf00      	nop
    48c0:	e000      	b.n	48c4 <getSelectorConfig+0x10c>
                break;
    48c2:	bf00      	nop

    return ReturnValue;
    48c4:	9b05      	ldr	r3, [sp, #20]
}
    48c6:	4618      	mov	r0, r3
    48c8:	b006      	add	sp, #24
    48ca:	4770      	bx	lr
    48cc:	1fff8bc4 	.word	0x1fff8bc4
    48d0:	1fff8c78 	.word	0x1fff8c78
    48d4:	40064000 	.word	0x40064000
    48d8:	000083d4 	.word	0x000083d4

000048dc <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    48dc:	b086      	sub	sp, #24
    48de:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    48e0:	2300      	movs	r3, #0
    48e2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    48e4:	2300      	movs	r3, #0
    48e6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    48e8:	9b01      	ldr	r3, [sp, #4]
    48ea:	2b1f      	cmp	r3, #31
    48ec:	d00f      	beq.n	490e <getCoreDividerConfig+0x32>
    48ee:	9b01      	ldr	r3, [sp, #4]
    48f0:	2b1f      	cmp	r3, #31
    48f2:	d80f      	bhi.n	4914 <getCoreDividerConfig+0x38>
    48f4:	9b01      	ldr	r3, [sp, #4]
    48f6:	2b1d      	cmp	r3, #29
    48f8:	d003      	beq.n	4902 <getCoreDividerConfig+0x26>
    48fa:	9b01      	ldr	r3, [sp, #4]
    48fc:	2b1e      	cmp	r3, #30
    48fe:	d003      	beq.n	4908 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4900:	e008      	b.n	4914 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4902:	2300      	movs	r3, #0
    4904:	9304      	str	r3, [sp, #16]
            break;
    4906:	e006      	b.n	4916 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4908:	2301      	movs	r3, #1
    490a:	9304      	str	r3, [sp, #16]
            break;
    490c:	e003      	b.n	4916 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    490e:	2302      	movs	r3, #2
    4910:	9304      	str	r3, [sp, #16]
            break;
    4912:	e000      	b.n	4916 <getCoreDividerConfig+0x3a>
                break;
    4914:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4916:	4b41      	ldr	r3, [pc, #260]	; (4a1c <getCoreDividerConfig+0x140>)
    4918:	681b      	ldr	r3, [r3, #0]
    491a:	2b00      	cmp	r3, #0
    491c:	d026      	beq.n	496c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    491e:	2300      	movs	r3, #0
    4920:	9303      	str	r3, [sp, #12]
    4922:	e01c      	b.n	495e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4924:	4b3d      	ldr	r3, [pc, #244]	; (4a1c <getCoreDividerConfig+0x140>)
    4926:	6819      	ldr	r1, [r3, #0]
    4928:	9a03      	ldr	r2, [sp, #12]
    492a:	4613      	mov	r3, r2
    492c:	005b      	lsls	r3, r3, #1
    492e:	4413      	add	r3, r2
    4930:	009b      	lsls	r3, r3, #2
    4932:	440b      	add	r3, r1
    4934:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	9a01      	ldr	r2, [sp, #4]
    493c:	429a      	cmp	r2, r3
    493e:	d10b      	bne.n	4958 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4940:	4b36      	ldr	r3, [pc, #216]	; (4a1c <getCoreDividerConfig+0x140>)
    4942:	6819      	ldr	r1, [r3, #0]
    4944:	9a03      	ldr	r2, [sp, #12]
    4946:	4613      	mov	r3, r2
    4948:	005b      	lsls	r3, r3, #1
    494a:	4413      	add	r3, r2
    494c:	009b      	lsls	r3, r3, #2
    494e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4952:	440b      	add	r3, r1
    4954:	9305      	str	r3, [sp, #20]
                break;
    4956:	e009      	b.n	496c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4958:	9b03      	ldr	r3, [sp, #12]
    495a:	3301      	adds	r3, #1
    495c:	9303      	str	r3, [sp, #12]
    495e:	4b2f      	ldr	r3, [pc, #188]	; (4a1c <getCoreDividerConfig+0x140>)
    4960:	681b      	ldr	r3, [r3, #0]
    4962:	7b1b      	ldrb	r3, [r3, #12]
    4964:	461a      	mov	r2, r3
    4966:	9b03      	ldr	r3, [sp, #12]
    4968:	4293      	cmp	r3, r2
    496a:	d3db      	bcc.n	4924 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    496c:	9b05      	ldr	r3, [sp, #20]
    496e:	2b00      	cmp	r3, #0
    4970:	d14d      	bne.n	4a0e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4972:	9a04      	ldr	r2, [sp, #16]
    4974:	4613      	mov	r3, r2
    4976:	005b      	lsls	r3, r3, #1
    4978:	4413      	add	r3, r2
    497a:	009b      	lsls	r3, r3, #2
    497c:	4a28      	ldr	r2, [pc, #160]	; (4a20 <getCoreDividerConfig+0x144>)
    497e:	4413      	add	r3, r2
    4980:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4982:	4927      	ldr	r1, [pc, #156]	; (4a20 <getCoreDividerConfig+0x144>)
    4984:	9a04      	ldr	r2, [sp, #16]
    4986:	4613      	mov	r3, r2
    4988:	005b      	lsls	r3, r3, #1
    498a:	4413      	add	r3, r2
    498c:	009b      	lsls	r3, r3, #2
    498e:	440b      	add	r3, r1
    4990:	9a01      	ldr	r2, [sp, #4]
    4992:	601a      	str	r2, [r3, #0]
        switch(Name)
    4994:	9b01      	ldr	r3, [sp, #4]
    4996:	2b1f      	cmp	r3, #31
    4998:	d029      	beq.n	49ee <getCoreDividerConfig+0x112>
    499a:	9b01      	ldr	r3, [sp, #4]
    499c:	2b1f      	cmp	r3, #31
    499e:	d838      	bhi.n	4a12 <getCoreDividerConfig+0x136>
    49a0:	9b01      	ldr	r3, [sp, #4]
    49a2:	2b1d      	cmp	r3, #29
    49a4:	d003      	beq.n	49ae <getCoreDividerConfig+0xd2>
    49a6:	9b01      	ldr	r3, [sp, #4]
    49a8:	2b1e      	cmp	r3, #30
    49aa:	d010      	beq.n	49ce <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    49ac:	e031      	b.n	4a12 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    49ae:	4b1d      	ldr	r3, [pc, #116]	; (4a24 <getCoreDividerConfig+0x148>)
    49b0:	695b      	ldr	r3, [r3, #20]
    49b2:	0c1b      	lsrs	r3, r3, #16
    49b4:	f003 030f 	and.w	r3, r3, #15
    49b8:	1c59      	adds	r1, r3, #1
    49ba:	4819      	ldr	r0, [pc, #100]	; (4a20 <getCoreDividerConfig+0x144>)
    49bc:	9a04      	ldr	r2, [sp, #16]
    49be:	4613      	mov	r3, r2
    49c0:	005b      	lsls	r3, r3, #1
    49c2:	4413      	add	r3, r2
    49c4:	009b      	lsls	r3, r3, #2
    49c6:	4403      	add	r3, r0
    49c8:	3304      	adds	r3, #4
    49ca:	6019      	str	r1, [r3, #0]
                break;
    49cc:	e022      	b.n	4a14 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    49ce:	4b15      	ldr	r3, [pc, #84]	; (4a24 <getCoreDividerConfig+0x148>)
    49d0:	699b      	ldr	r3, [r3, #24]
    49d2:	0c1b      	lsrs	r3, r3, #16
    49d4:	f003 030f 	and.w	r3, r3, #15
    49d8:	1c59      	adds	r1, r3, #1
    49da:	4811      	ldr	r0, [pc, #68]	; (4a20 <getCoreDividerConfig+0x144>)
    49dc:	9a04      	ldr	r2, [sp, #16]
    49de:	4613      	mov	r3, r2
    49e0:	005b      	lsls	r3, r3, #1
    49e2:	4413      	add	r3, r2
    49e4:	009b      	lsls	r3, r3, #2
    49e6:	4403      	add	r3, r0
    49e8:	3304      	adds	r3, #4
    49ea:	6019      	str	r1, [r3, #0]
                break;
    49ec:	e012      	b.n	4a14 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    49ee:	4b0d      	ldr	r3, [pc, #52]	; (4a24 <getCoreDividerConfig+0x148>)
    49f0:	69db      	ldr	r3, [r3, #28]
    49f2:	0c1b      	lsrs	r3, r3, #16
    49f4:	f003 030f 	and.w	r3, r3, #15
    49f8:	1c59      	adds	r1, r3, #1
    49fa:	4809      	ldr	r0, [pc, #36]	; (4a20 <getCoreDividerConfig+0x144>)
    49fc:	9a04      	ldr	r2, [sp, #16]
    49fe:	4613      	mov	r3, r2
    4a00:	005b      	lsls	r3, r3, #1
    4a02:	4413      	add	r3, r2
    4a04:	009b      	lsls	r3, r3, #2
    4a06:	4403      	add	r3, r0
    4a08:	3304      	adds	r3, #4
    4a0a:	6019      	str	r1, [r3, #0]
                break;
    4a0c:	e002      	b.n	4a14 <getCoreDividerConfig+0x138>
        }
    }
    4a0e:	bf00      	nop
    4a10:	e000      	b.n	4a14 <getCoreDividerConfig+0x138>
                break;
    4a12:	bf00      	nop

    return ReturnValue;
    4a14:	9b05      	ldr	r3, [sp, #20]
}
    4a16:	4618      	mov	r0, r3
    4a18:	b006      	add	sp, #24
    4a1a:	4770      	bx	lr
    4a1c:	1fff8bc4 	.word	0x1fff8bc4
    4a20:	1fff8c90 	.word	0x1fff8c90
    4a24:	40064000 	.word	0x40064000

00004a28 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4a28:	b086      	sub	sp, #24
    4a2a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4a2c:	2300      	movs	r3, #0
    4a2e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4a30:	2300      	movs	r3, #0
    4a32:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4a34:	9b01      	ldr	r3, [sp, #4]
    4a36:	2b23      	cmp	r3, #35	; 0x23
    4a38:	d00f      	beq.n	4a5a <getBusDividerConfig+0x32>
    4a3a:	9b01      	ldr	r3, [sp, #4]
    4a3c:	2b23      	cmp	r3, #35	; 0x23
    4a3e:	d80f      	bhi.n	4a60 <getBusDividerConfig+0x38>
    4a40:	9b01      	ldr	r3, [sp, #4]
    4a42:	2b21      	cmp	r3, #33	; 0x21
    4a44:	d003      	beq.n	4a4e <getBusDividerConfig+0x26>
    4a46:	9b01      	ldr	r3, [sp, #4]
    4a48:	2b22      	cmp	r3, #34	; 0x22
    4a4a:	d003      	beq.n	4a54 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4a4c:	e008      	b.n	4a60 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4a4e:	2300      	movs	r3, #0
    4a50:	9304      	str	r3, [sp, #16]
            break;
    4a52:	e006      	b.n	4a62 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4a54:	2301      	movs	r3, #1
    4a56:	9304      	str	r3, [sp, #16]
            break;
    4a58:	e003      	b.n	4a62 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4a5a:	2302      	movs	r3, #2
    4a5c:	9304      	str	r3, [sp, #16]
            break;
    4a5e:	e000      	b.n	4a62 <getBusDividerConfig+0x3a>
                break;
    4a60:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4a62:	4b41      	ldr	r3, [pc, #260]	; (4b68 <getBusDividerConfig+0x140>)
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d026      	beq.n	4ab8 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4a6a:	2300      	movs	r3, #0
    4a6c:	9303      	str	r3, [sp, #12]
    4a6e:	e01c      	b.n	4aaa <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4a70:	4b3d      	ldr	r3, [pc, #244]	; (4b68 <getBusDividerConfig+0x140>)
    4a72:	6819      	ldr	r1, [r3, #0]
    4a74:	9a03      	ldr	r2, [sp, #12]
    4a76:	4613      	mov	r3, r2
    4a78:	005b      	lsls	r3, r3, #1
    4a7a:	4413      	add	r3, r2
    4a7c:	009b      	lsls	r3, r3, #2
    4a7e:	440b      	add	r3, r1
    4a80:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	9a01      	ldr	r2, [sp, #4]
    4a88:	429a      	cmp	r2, r3
    4a8a:	d10b      	bne.n	4aa4 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4a8c:	4b36      	ldr	r3, [pc, #216]	; (4b68 <getBusDividerConfig+0x140>)
    4a8e:	6819      	ldr	r1, [r3, #0]
    4a90:	9a03      	ldr	r2, [sp, #12]
    4a92:	4613      	mov	r3, r2
    4a94:	005b      	lsls	r3, r3, #1
    4a96:	4413      	add	r3, r2
    4a98:	009b      	lsls	r3, r3, #2
    4a9a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4a9e:	440b      	add	r3, r1
    4aa0:	9305      	str	r3, [sp, #20]
                break;
    4aa2:	e009      	b.n	4ab8 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4aa4:	9b03      	ldr	r3, [sp, #12]
    4aa6:	3301      	adds	r3, #1
    4aa8:	9303      	str	r3, [sp, #12]
    4aaa:	4b2f      	ldr	r3, [pc, #188]	; (4b68 <getBusDividerConfig+0x140>)
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	7b1b      	ldrb	r3, [r3, #12]
    4ab0:	461a      	mov	r2, r3
    4ab2:	9b03      	ldr	r3, [sp, #12]
    4ab4:	4293      	cmp	r3, r2
    4ab6:	d3db      	bcc.n	4a70 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ab8:	9b05      	ldr	r3, [sp, #20]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d14d      	bne.n	4b5a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4abe:	9a04      	ldr	r2, [sp, #16]
    4ac0:	4613      	mov	r3, r2
    4ac2:	005b      	lsls	r3, r3, #1
    4ac4:	4413      	add	r3, r2
    4ac6:	009b      	lsls	r3, r3, #2
    4ac8:	4a28      	ldr	r2, [pc, #160]	; (4b6c <getBusDividerConfig+0x144>)
    4aca:	4413      	add	r3, r2
    4acc:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4ace:	4927      	ldr	r1, [pc, #156]	; (4b6c <getBusDividerConfig+0x144>)
    4ad0:	9a04      	ldr	r2, [sp, #16]
    4ad2:	4613      	mov	r3, r2
    4ad4:	005b      	lsls	r3, r3, #1
    4ad6:	4413      	add	r3, r2
    4ad8:	009b      	lsls	r3, r3, #2
    4ada:	440b      	add	r3, r1
    4adc:	9a01      	ldr	r2, [sp, #4]
    4ade:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ae0:	9b01      	ldr	r3, [sp, #4]
    4ae2:	2b23      	cmp	r3, #35	; 0x23
    4ae4:	d029      	beq.n	4b3a <getBusDividerConfig+0x112>
    4ae6:	9b01      	ldr	r3, [sp, #4]
    4ae8:	2b23      	cmp	r3, #35	; 0x23
    4aea:	d838      	bhi.n	4b5e <getBusDividerConfig+0x136>
    4aec:	9b01      	ldr	r3, [sp, #4]
    4aee:	2b21      	cmp	r3, #33	; 0x21
    4af0:	d003      	beq.n	4afa <getBusDividerConfig+0xd2>
    4af2:	9b01      	ldr	r3, [sp, #4]
    4af4:	2b22      	cmp	r3, #34	; 0x22
    4af6:	d010      	beq.n	4b1a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4af8:	e031      	b.n	4b5e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4afa:	4b1d      	ldr	r3, [pc, #116]	; (4b70 <getBusDividerConfig+0x148>)
    4afc:	695b      	ldr	r3, [r3, #20]
    4afe:	091b      	lsrs	r3, r3, #4
    4b00:	f003 030f 	and.w	r3, r3, #15
    4b04:	1c59      	adds	r1, r3, #1
    4b06:	4819      	ldr	r0, [pc, #100]	; (4b6c <getBusDividerConfig+0x144>)
    4b08:	9a04      	ldr	r2, [sp, #16]
    4b0a:	4613      	mov	r3, r2
    4b0c:	005b      	lsls	r3, r3, #1
    4b0e:	4413      	add	r3, r2
    4b10:	009b      	lsls	r3, r3, #2
    4b12:	4403      	add	r3, r0
    4b14:	3304      	adds	r3, #4
    4b16:	6019      	str	r1, [r3, #0]
                break;
    4b18:	e022      	b.n	4b60 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4b1a:	4b15      	ldr	r3, [pc, #84]	; (4b70 <getBusDividerConfig+0x148>)
    4b1c:	699b      	ldr	r3, [r3, #24]
    4b1e:	091b      	lsrs	r3, r3, #4
    4b20:	f003 030f 	and.w	r3, r3, #15
    4b24:	1c59      	adds	r1, r3, #1
    4b26:	4811      	ldr	r0, [pc, #68]	; (4b6c <getBusDividerConfig+0x144>)
    4b28:	9a04      	ldr	r2, [sp, #16]
    4b2a:	4613      	mov	r3, r2
    4b2c:	005b      	lsls	r3, r3, #1
    4b2e:	4413      	add	r3, r2
    4b30:	009b      	lsls	r3, r3, #2
    4b32:	4403      	add	r3, r0
    4b34:	3304      	adds	r3, #4
    4b36:	6019      	str	r1, [r3, #0]
                break;
    4b38:	e012      	b.n	4b60 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4b3a:	4b0d      	ldr	r3, [pc, #52]	; (4b70 <getBusDividerConfig+0x148>)
    4b3c:	69db      	ldr	r3, [r3, #28]
    4b3e:	091b      	lsrs	r3, r3, #4
    4b40:	f003 030f 	and.w	r3, r3, #15
    4b44:	1c59      	adds	r1, r3, #1
    4b46:	4809      	ldr	r0, [pc, #36]	; (4b6c <getBusDividerConfig+0x144>)
    4b48:	9a04      	ldr	r2, [sp, #16]
    4b4a:	4613      	mov	r3, r2
    4b4c:	005b      	lsls	r3, r3, #1
    4b4e:	4413      	add	r3, r2
    4b50:	009b      	lsls	r3, r3, #2
    4b52:	4403      	add	r3, r0
    4b54:	3304      	adds	r3, #4
    4b56:	6019      	str	r1, [r3, #0]
                break;
    4b58:	e002      	b.n	4b60 <getBusDividerConfig+0x138>
        }
    }
    4b5a:	bf00      	nop
    4b5c:	e000      	b.n	4b60 <getBusDividerConfig+0x138>
                break;
    4b5e:	bf00      	nop

    return ReturnValue;
    4b60:	9b05      	ldr	r3, [sp, #20]
}
    4b62:	4618      	mov	r0, r3
    4b64:	b006      	add	sp, #24
    4b66:	4770      	bx	lr
    4b68:	1fff8bc4 	.word	0x1fff8bc4
    4b6c:	1fff8cb4 	.word	0x1fff8cb4
    4b70:	40064000 	.word	0x40064000

00004b74 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4b74:	b086      	sub	sp, #24
    4b76:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4b78:	2300      	movs	r3, #0
    4b7a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4b7c:	2300      	movs	r3, #0
    4b7e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4b80:	9b01      	ldr	r3, [sp, #4]
    4b82:	2b27      	cmp	r3, #39	; 0x27
    4b84:	d00f      	beq.n	4ba6 <getSlowDividerConfig+0x32>
    4b86:	9b01      	ldr	r3, [sp, #4]
    4b88:	2b27      	cmp	r3, #39	; 0x27
    4b8a:	d80f      	bhi.n	4bac <getSlowDividerConfig+0x38>
    4b8c:	9b01      	ldr	r3, [sp, #4]
    4b8e:	2b25      	cmp	r3, #37	; 0x25
    4b90:	d003      	beq.n	4b9a <getSlowDividerConfig+0x26>
    4b92:	9b01      	ldr	r3, [sp, #4]
    4b94:	2b26      	cmp	r3, #38	; 0x26
    4b96:	d003      	beq.n	4ba0 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4b98:	e008      	b.n	4bac <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4b9a:	2300      	movs	r3, #0
    4b9c:	9304      	str	r3, [sp, #16]
            break;
    4b9e:	e006      	b.n	4bae <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ba0:	2301      	movs	r3, #1
    4ba2:	9304      	str	r3, [sp, #16]
            break;
    4ba4:	e003      	b.n	4bae <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4ba6:	2302      	movs	r3, #2
    4ba8:	9304      	str	r3, [sp, #16]
            break;
    4baa:	e000      	b.n	4bae <getSlowDividerConfig+0x3a>
                break;
    4bac:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4bae:	4b40      	ldr	r3, [pc, #256]	; (4cb0 <getSlowDividerConfig+0x13c>)
    4bb0:	681b      	ldr	r3, [r3, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d026      	beq.n	4c04 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4bb6:	2300      	movs	r3, #0
    4bb8:	9303      	str	r3, [sp, #12]
    4bba:	e01c      	b.n	4bf6 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4bbc:	4b3c      	ldr	r3, [pc, #240]	; (4cb0 <getSlowDividerConfig+0x13c>)
    4bbe:	6819      	ldr	r1, [r3, #0]
    4bc0:	9a03      	ldr	r2, [sp, #12]
    4bc2:	4613      	mov	r3, r2
    4bc4:	005b      	lsls	r3, r3, #1
    4bc6:	4413      	add	r3, r2
    4bc8:	009b      	lsls	r3, r3, #2
    4bca:	440b      	add	r3, r1
    4bcc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	9a01      	ldr	r2, [sp, #4]
    4bd4:	429a      	cmp	r2, r3
    4bd6:	d10b      	bne.n	4bf0 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4bd8:	4b35      	ldr	r3, [pc, #212]	; (4cb0 <getSlowDividerConfig+0x13c>)
    4bda:	6819      	ldr	r1, [r3, #0]
    4bdc:	9a03      	ldr	r2, [sp, #12]
    4bde:	4613      	mov	r3, r2
    4be0:	005b      	lsls	r3, r3, #1
    4be2:	4413      	add	r3, r2
    4be4:	009b      	lsls	r3, r3, #2
    4be6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4bea:	440b      	add	r3, r1
    4bec:	9305      	str	r3, [sp, #20]
                break;
    4bee:	e009      	b.n	4c04 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4bf0:	9b03      	ldr	r3, [sp, #12]
    4bf2:	3301      	adds	r3, #1
    4bf4:	9303      	str	r3, [sp, #12]
    4bf6:	4b2e      	ldr	r3, [pc, #184]	; (4cb0 <getSlowDividerConfig+0x13c>)
    4bf8:	681b      	ldr	r3, [r3, #0]
    4bfa:	7b1b      	ldrb	r3, [r3, #12]
    4bfc:	461a      	mov	r2, r3
    4bfe:	9b03      	ldr	r3, [sp, #12]
    4c00:	4293      	cmp	r3, r2
    4c02:	d3db      	bcc.n	4bbc <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c04:	9b05      	ldr	r3, [sp, #20]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d14a      	bne.n	4ca0 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4c0a:	9a04      	ldr	r2, [sp, #16]
    4c0c:	4613      	mov	r3, r2
    4c0e:	005b      	lsls	r3, r3, #1
    4c10:	4413      	add	r3, r2
    4c12:	009b      	lsls	r3, r3, #2
    4c14:	4a27      	ldr	r2, [pc, #156]	; (4cb4 <getSlowDividerConfig+0x140>)
    4c16:	4413      	add	r3, r2
    4c18:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4c1a:	4926      	ldr	r1, [pc, #152]	; (4cb4 <getSlowDividerConfig+0x140>)
    4c1c:	9a04      	ldr	r2, [sp, #16]
    4c1e:	4613      	mov	r3, r2
    4c20:	005b      	lsls	r3, r3, #1
    4c22:	4413      	add	r3, r2
    4c24:	009b      	lsls	r3, r3, #2
    4c26:	440b      	add	r3, r1
    4c28:	9a01      	ldr	r2, [sp, #4]
    4c2a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4c2c:	9b01      	ldr	r3, [sp, #4]
    4c2e:	2b27      	cmp	r3, #39	; 0x27
    4c30:	d027      	beq.n	4c82 <getSlowDividerConfig+0x10e>
    4c32:	9b01      	ldr	r3, [sp, #4]
    4c34:	2b27      	cmp	r3, #39	; 0x27
    4c36:	d835      	bhi.n	4ca4 <getSlowDividerConfig+0x130>
    4c38:	9b01      	ldr	r3, [sp, #4]
    4c3a:	2b25      	cmp	r3, #37	; 0x25
    4c3c:	d003      	beq.n	4c46 <getSlowDividerConfig+0xd2>
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	2b26      	cmp	r3, #38	; 0x26
    4c42:	d00f      	beq.n	4c64 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4c44:	e02e      	b.n	4ca4 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4c46:	4b1c      	ldr	r3, [pc, #112]	; (4cb8 <getSlowDividerConfig+0x144>)
    4c48:	695b      	ldr	r3, [r3, #20]
    4c4a:	f003 030f 	and.w	r3, r3, #15
    4c4e:	1c59      	adds	r1, r3, #1
    4c50:	4818      	ldr	r0, [pc, #96]	; (4cb4 <getSlowDividerConfig+0x140>)
    4c52:	9a04      	ldr	r2, [sp, #16]
    4c54:	4613      	mov	r3, r2
    4c56:	005b      	lsls	r3, r3, #1
    4c58:	4413      	add	r3, r2
    4c5a:	009b      	lsls	r3, r3, #2
    4c5c:	4403      	add	r3, r0
    4c5e:	3304      	adds	r3, #4
    4c60:	6019      	str	r1, [r3, #0]
                break;
    4c62:	e020      	b.n	4ca6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4c64:	4b14      	ldr	r3, [pc, #80]	; (4cb8 <getSlowDividerConfig+0x144>)
    4c66:	699b      	ldr	r3, [r3, #24]
    4c68:	f003 030f 	and.w	r3, r3, #15
    4c6c:	1c59      	adds	r1, r3, #1
    4c6e:	4811      	ldr	r0, [pc, #68]	; (4cb4 <getSlowDividerConfig+0x140>)
    4c70:	9a04      	ldr	r2, [sp, #16]
    4c72:	4613      	mov	r3, r2
    4c74:	005b      	lsls	r3, r3, #1
    4c76:	4413      	add	r3, r2
    4c78:	009b      	lsls	r3, r3, #2
    4c7a:	4403      	add	r3, r0
    4c7c:	3304      	adds	r3, #4
    4c7e:	6019      	str	r1, [r3, #0]
                break;
    4c80:	e011      	b.n	4ca6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4c82:	4b0d      	ldr	r3, [pc, #52]	; (4cb8 <getSlowDividerConfig+0x144>)
    4c84:	69db      	ldr	r3, [r3, #28]
    4c86:	f003 030f 	and.w	r3, r3, #15
    4c8a:	1c59      	adds	r1, r3, #1
    4c8c:	4809      	ldr	r0, [pc, #36]	; (4cb4 <getSlowDividerConfig+0x140>)
    4c8e:	9a04      	ldr	r2, [sp, #16]
    4c90:	4613      	mov	r3, r2
    4c92:	005b      	lsls	r3, r3, #1
    4c94:	4413      	add	r3, r2
    4c96:	009b      	lsls	r3, r3, #2
    4c98:	4403      	add	r3, r0
    4c9a:	3304      	adds	r3, #4
    4c9c:	6019      	str	r1, [r3, #0]
                break;
    4c9e:	e002      	b.n	4ca6 <getSlowDividerConfig+0x132>
        }
    }
    4ca0:	bf00      	nop
    4ca2:	e000      	b.n	4ca6 <getSlowDividerConfig+0x132>
                break;
    4ca4:	bf00      	nop

    return ReturnValue;
    4ca6:	9b05      	ldr	r3, [sp, #20]
}
    4ca8:	4618      	mov	r0, r3
    4caa:	b006      	add	sp, #24
    4cac:	4770      	bx	lr
    4cae:	bf00      	nop
    4cb0:	1fff8bc4 	.word	0x1fff8bc4
    4cb4:	1fff8cd8 	.word	0x1fff8cd8
    4cb8:	40064000 	.word	0x40064000

00004cbc <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4cbc:	b500      	push	{lr}
    4cbe:	b083      	sub	sp, #12
    4cc0:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4cc2:	4b64      	ldr	r3, [pc, #400]	; (4e54 <Clock_Ip_ClockInitializeObjects+0x198>)
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	f083 0301 	eor.w	r3, r3, #1
    4cca:	b2db      	uxtb	r3, r3
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d05b      	beq.n	4d88 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4cd0:	4b60      	ldr	r3, [pc, #384]	; (4e54 <Clock_Ip_ClockInitializeObjects+0x198>)
    4cd2:	2201      	movs	r2, #1
    4cd4:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4cd6:	4b60      	ldr	r3, [pc, #384]	; (4e58 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4cd8:	785b      	ldrb	r3, [r3, #1]
    4cda:	461a      	mov	r2, r3
    4cdc:	4613      	mov	r3, r2
    4cde:	009b      	lsls	r3, r3, #2
    4ce0:	4413      	add	r3, r2
    4ce2:	009b      	lsls	r3, r3, #2
    4ce4:	4a5d      	ldr	r2, [pc, #372]	; (4e5c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4ce6:	4413      	add	r3, r2
    4ce8:	4a5d      	ldr	r2, [pc, #372]	; (4e60 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4cea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4cec:	4b5d      	ldr	r3, [pc, #372]	; (4e64 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4cee:	785b      	ldrb	r3, [r3, #1]
    4cf0:	461a      	mov	r2, r3
    4cf2:	4613      	mov	r3, r2
    4cf4:	009b      	lsls	r3, r3, #2
    4cf6:	4413      	add	r3, r2
    4cf8:	009b      	lsls	r3, r3, #2
    4cfa:	4a5b      	ldr	r2, [pc, #364]	; (4e68 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4cfc:	4413      	add	r3, r2
    4cfe:	4a5b      	ldr	r2, [pc, #364]	; (4e6c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4d00:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    4d02:	4b5b      	ldr	r3, [pc, #364]	; (4e70 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4d04:	791b      	ldrb	r3, [r3, #4]
    4d06:	461a      	mov	r2, r3
    4d08:	4613      	mov	r3, r2
    4d0a:	005b      	lsls	r3, r3, #1
    4d0c:	4413      	add	r3, r2
    4d0e:	009b      	lsls	r3, r3, #2
    4d10:	4a58      	ldr	r2, [pc, #352]	; (4e74 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    4d12:	4413      	add	r3, r2
    4d14:	4a58      	ldr	r2, [pc, #352]	; (4e78 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4d16:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4d18:	4b58      	ldr	r3, [pc, #352]	; (4e7c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4d1a:	795b      	ldrb	r3, [r3, #5]
    4d1c:	00db      	lsls	r3, r3, #3
    4d1e:	4a58      	ldr	r2, [pc, #352]	; (4e80 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4d20:	4413      	add	r3, r2
    4d22:	4a58      	ldr	r2, [pc, #352]	; (4e84 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4d24:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4d26:	4b55      	ldr	r3, [pc, #340]	; (4e7c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4d28:	79db      	ldrb	r3, [r3, #7]
    4d2a:	00db      	lsls	r3, r3, #3
    4d2c:	4a54      	ldr	r2, [pc, #336]	; (4e80 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4d2e:	4413      	add	r3, r2
    4d30:	4a55      	ldr	r2, [pc, #340]	; (4e88 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    4d32:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4d34:	4b55      	ldr	r3, [pc, #340]	; (4e8c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4d36:	799b      	ldrb	r3, [r3, #6]
    4d38:	009b      	lsls	r3, r3, #2
    4d3a:	4a55      	ldr	r2, [pc, #340]	; (4e90 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4d3c:	4413      	add	r3, r2
    4d3e:	4a55      	ldr	r2, [pc, #340]	; (4e94 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4d40:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    4d42:	4b52      	ldr	r3, [pc, #328]	; (4e8c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4d44:	7a1b      	ldrb	r3, [r3, #8]
    4d46:	009b      	lsls	r3, r3, #2
    4d48:	4a51      	ldr	r2, [pc, #324]	; (4e90 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4d4a:	4413      	add	r3, r2
    4d4c:	4a52      	ldr	r2, [pc, #328]	; (4e98 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4d4e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4d50:	4b4e      	ldr	r3, [pc, #312]	; (4e8c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4d52:	7a5b      	ldrb	r3, [r3, #9]
    4d54:	009b      	lsls	r3, r3, #2
    4d56:	4a4e      	ldr	r2, [pc, #312]	; (4e90 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4d58:	4413      	add	r3, r2
    4d5a:	4a50      	ldr	r2, [pc, #320]	; (4e9c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4d5c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4d5e:	4b4b      	ldr	r3, [pc, #300]	; (4e8c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4d60:	7adb      	ldrb	r3, [r3, #11]
    4d62:	009b      	lsls	r3, r3, #2
    4d64:	4a4a      	ldr	r2, [pc, #296]	; (4e90 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4d66:	4413      	add	r3, r2
    4d68:	4a4d      	ldr	r2, [pc, #308]	; (4ea0 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4d6a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4d6c:	4b47      	ldr	r3, [pc, #284]	; (4e8c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4d6e:	7b1b      	ldrb	r3, [r3, #12]
    4d70:	009b      	lsls	r3, r3, #2
    4d72:	4a47      	ldr	r2, [pc, #284]	; (4e90 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4d74:	4413      	add	r3, r2
    4d76:	4a4b      	ldr	r2, [pc, #300]	; (4ea4 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4d78:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4d7a:	4b44      	ldr	r3, [pc, #272]	; (4e8c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4d7c:	7b9b      	ldrb	r3, [r3, #14]
    4d7e:	009b      	lsls	r3, r3, #2
    4d80:	4a43      	ldr	r2, [pc, #268]	; (4e90 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4d82:	4413      	add	r3, r2
    4d84:	4a48      	ldr	r2, [pc, #288]	; (4ea8 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4d86:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4d88:	4b48      	ldr	r3, [pc, #288]	; (4eac <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4d8a:	781b      	ldrb	r3, [r3, #0]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d002      	beq.n	4d96 <Clock_Ip_ClockInitializeObjects+0xda>
    4d90:	9b01      	ldr	r3, [sp, #4]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d003      	beq.n	4d9e <Clock_Ip_ClockInitializeObjects+0xe2>
    4d96:	4b46      	ldr	r3, [pc, #280]	; (4eb0 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d056      	beq.n	4e4c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4d9e:	f7ff fc09 	bl	45b4 <getFircConfig>
    4da2:	4603      	mov	r3, r0
    4da4:	4a43      	ldr	r2, [pc, #268]	; (4eb4 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4da6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4da8:	f7ff fc60 	bl	466c <getSoscConfig>
    4dac:	4603      	mov	r3, r0
    4dae:	4a42      	ldr	r2, [pc, #264]	; (4eb8 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4db0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4db2:	f7ff fca7 	bl	4704 <getSpllConfig>
    4db6:	4603      	mov	r3, r0
    4db8:	4a40      	ldr	r2, [pc, #256]	; (4ebc <Clock_Ip_ClockInitializeObjects+0x200>)
    4dba:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4dbc:	2019      	movs	r0, #25
    4dbe:	f7ff fcfb 	bl	47b8 <getSelectorConfig>
    4dc2:	4603      	mov	r3, r0
    4dc4:	4a3e      	ldr	r2, [pc, #248]	; (4ec0 <Clock_Ip_ClockInitializeObjects+0x204>)
    4dc6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4dc8:	201a      	movs	r0, #26
    4dca:	f7ff fcf5 	bl	47b8 <getSelectorConfig>
    4dce:	4603      	mov	r3, r0
    4dd0:	4a3c      	ldr	r2, [pc, #240]	; (4ec4 <Clock_Ip_ClockInitializeObjects+0x208>)
    4dd2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4dd4:	201b      	movs	r0, #27
    4dd6:	f7ff fcef 	bl	47b8 <getSelectorConfig>
    4dda:	4603      	mov	r3, r0
    4ddc:	4a3a      	ldr	r2, [pc, #232]	; (4ec8 <Clock_Ip_ClockInitializeObjects+0x20c>)
    4dde:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4de0:	201d      	movs	r0, #29
    4de2:	f7ff fd7b 	bl	48dc <getCoreDividerConfig>
    4de6:	4603      	mov	r3, r0
    4de8:	4a38      	ldr	r2, [pc, #224]	; (4ecc <Clock_Ip_ClockInitializeObjects+0x210>)
    4dea:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4dec:	201e      	movs	r0, #30
    4dee:	f7ff fd75 	bl	48dc <getCoreDividerConfig>
    4df2:	4603      	mov	r3, r0
    4df4:	4a36      	ldr	r2, [pc, #216]	; (4ed0 <Clock_Ip_ClockInitializeObjects+0x214>)
    4df6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4df8:	201f      	movs	r0, #31
    4dfa:	f7ff fd6f 	bl	48dc <getCoreDividerConfig>
    4dfe:	4603      	mov	r3, r0
    4e00:	4a34      	ldr	r2, [pc, #208]	; (4ed4 <Clock_Ip_ClockInitializeObjects+0x218>)
    4e02:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4e04:	2021      	movs	r0, #33	; 0x21
    4e06:	f7ff fe0f 	bl	4a28 <getBusDividerConfig>
    4e0a:	4603      	mov	r3, r0
    4e0c:	4a32      	ldr	r2, [pc, #200]	; (4ed8 <Clock_Ip_ClockInitializeObjects+0x21c>)
    4e0e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4e10:	2022      	movs	r0, #34	; 0x22
    4e12:	f7ff fe09 	bl	4a28 <getBusDividerConfig>
    4e16:	4603      	mov	r3, r0
    4e18:	4a30      	ldr	r2, [pc, #192]	; (4edc <Clock_Ip_ClockInitializeObjects+0x220>)
    4e1a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4e1c:	2023      	movs	r0, #35	; 0x23
    4e1e:	f7ff fe03 	bl	4a28 <getBusDividerConfig>
    4e22:	4603      	mov	r3, r0
    4e24:	4a2e      	ldr	r2, [pc, #184]	; (4ee0 <Clock_Ip_ClockInitializeObjects+0x224>)
    4e26:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4e28:	2025      	movs	r0, #37	; 0x25
    4e2a:	f7ff fea3 	bl	4b74 <getSlowDividerConfig>
    4e2e:	4603      	mov	r3, r0
    4e30:	4a2c      	ldr	r2, [pc, #176]	; (4ee4 <Clock_Ip_ClockInitializeObjects+0x228>)
    4e32:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4e34:	2026      	movs	r0, #38	; 0x26
    4e36:	f7ff fe9d 	bl	4b74 <getSlowDividerConfig>
    4e3a:	4603      	mov	r3, r0
    4e3c:	4a2a      	ldr	r2, [pc, #168]	; (4ee8 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4e3e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4e40:	2027      	movs	r0, #39	; 0x27
    4e42:	f7ff fe97 	bl	4b74 <getSlowDividerConfig>
    4e46:	4603      	mov	r3, r0
    4e48:	4a28      	ldr	r2, [pc, #160]	; (4eec <Clock_Ip_ClockInitializeObjects+0x230>)
    4e4a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4e4c:	bf00      	nop
    4e4e:	b003      	add	sp, #12
    4e50:	f85d fb04 	ldr.w	pc, [sp], #4
    4e54:	1fff8cfc 	.word	0x1fff8cfc
    4e58:	00007d04 	.word	0x00007d04
    4e5c:	00008350 	.word	0x00008350
    4e60:	1fff8bc8 	.word	0x1fff8bc8
    4e64:	00007cc4 	.word	0x00007cc4
    4e68:	00008298 	.word	0x00008298
    4e6c:	1fff8bcc 	.word	0x1fff8bcc
    4e70:	00007cd4 	.word	0x00007cd4
    4e74:	00008304 	.word	0x00008304
    4e78:	1fff8bd0 	.word	0x1fff8bd0
    4e7c:	00007d14 	.word	0x00007d14
    4e80:	0000837c 	.word	0x0000837c
    4e84:	1fff8bd4 	.word	0x1fff8bd4
    4e88:	1fff8c10 	.word	0x1fff8c10
    4e8c:	00007ca4 	.word	0x00007ca4
    4e90:	00008254 	.word	0x00008254
    4e94:	1fff8bd8 	.word	0x1fff8bd8
    4e98:	1fff8c14 	.word	0x1fff8c14
    4e9c:	1fff8bdc 	.word	0x1fff8bdc
    4ea0:	1fff8c18 	.word	0x1fff8c18
    4ea4:	1fff8be0 	.word	0x1fff8be0
    4ea8:	1fff8c1c 	.word	0x1fff8c1c
    4eac:	1fff8b19 	.word	0x1fff8b19
    4eb0:	1fff8b10 	.word	0x1fff8b10
    4eb4:	1fff8be4 	.word	0x1fff8be4
    4eb8:	1fff8be8 	.word	0x1fff8be8
    4ebc:	1fff8bec 	.word	0x1fff8bec
    4ec0:	1fff8bf0 	.word	0x1fff8bf0
    4ec4:	1fff8bf4 	.word	0x1fff8bf4
    4ec8:	1fff8c20 	.word	0x1fff8c20
    4ecc:	1fff8bf8 	.word	0x1fff8bf8
    4ed0:	1fff8bfc 	.word	0x1fff8bfc
    4ed4:	1fff8c24 	.word	0x1fff8c24
    4ed8:	1fff8c00 	.word	0x1fff8c00
    4edc:	1fff8c04 	.word	0x1fff8c04
    4ee0:	1fff8c28 	.word	0x1fff8c28
    4ee4:	1fff8c08 	.word	0x1fff8c08
    4ee8:	1fff8c0c 	.word	0x1fff8c0c
    4eec:	1fff8c2c 	.word	0x1fff8c2c

00004ef0 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4ef0:	b500      	push	{lr}
    4ef2:	b083      	sub	sp, #12
    4ef4:	9001      	str	r0, [sp, #4]
    4ef6:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4ef8:	9b01      	ldr	r3, [sp, #4]
    4efa:	2b03      	cmp	r3, #3
    4efc:	f000 8090 	beq.w	5020 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4f00:	9b01      	ldr	r3, [sp, #4]
    4f02:	2b03      	cmp	r3, #3
    4f04:	f200 80d3 	bhi.w	50ae <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4f08:	9b01      	ldr	r3, [sp, #4]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d040      	beq.n	4f90 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	3b01      	subs	r3, #1
    4f12:	2b01      	cmp	r3, #1
    4f14:	f200 80cb 	bhi.w	50ae <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4f18:	9b00      	ldr	r3, [sp, #0]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	f040 80c9 	bne.w	50b2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4f20:	4b68      	ldr	r3, [pc, #416]	; (50c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4f22:	2200      	movs	r2, #0
    4f24:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4f26:	4b68      	ldr	r3, [pc, #416]	; (50c8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	685b      	ldr	r3, [r3, #4]
    4f2c:	4a67      	ldr	r2, [pc, #412]	; (50cc <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4f2e:	6812      	ldr	r2, [r2, #0]
    4f30:	4610      	mov	r0, r2
    4f32:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4f34:	4b66      	ldr	r3, [pc, #408]	; (50d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4f36:	681b      	ldr	r3, [r3, #0]
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	4a66      	ldr	r2, [pc, #408]	; (50d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4f3c:	6812      	ldr	r2, [r2, #0]
    4f3e:	4610      	mov	r0, r2
    4f40:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4f42:	4b65      	ldr	r3, [pc, #404]	; (50d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	681b      	ldr	r3, [r3, #0]
    4f48:	4a64      	ldr	r2, [pc, #400]	; (50dc <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4f4a:	6812      	ldr	r2, [r2, #0]
    4f4c:	4610      	mov	r0, r2
    4f4e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4f50:	4b63      	ldr	r3, [pc, #396]	; (50e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	4a63      	ldr	r2, [pc, #396]	; (50e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4f58:	6812      	ldr	r2, [r2, #0]
    4f5a:	4610      	mov	r0, r2
    4f5c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4f5e:	4b62      	ldr	r3, [pc, #392]	; (50e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4f60:	681b      	ldr	r3, [r3, #0]
    4f62:	691b      	ldr	r3, [r3, #16]
    4f64:	4a61      	ldr	r2, [pc, #388]	; (50ec <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4f66:	6812      	ldr	r2, [r2, #0]
    4f68:	6812      	ldr	r2, [r2, #0]
    4f6a:	4610      	mov	r0, r2
    4f6c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4f6e:	4b60      	ldr	r3, [pc, #384]	; (50f0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4f70:	681b      	ldr	r3, [r3, #0]
    4f72:	68db      	ldr	r3, [r3, #12]
    4f74:	4a5f      	ldr	r2, [pc, #380]	; (50f4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4f76:	6812      	ldr	r2, [r2, #0]
    4f78:	6812      	ldr	r2, [r2, #0]
    4f7a:	4610      	mov	r0, r2
    4f7c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4f7e:	4b5e      	ldr	r3, [pc, #376]	; (50f8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	689b      	ldr	r3, [r3, #8]
    4f84:	4a5d      	ldr	r2, [pc, #372]	; (50fc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4f86:	6812      	ldr	r2, [r2, #0]
    4f88:	6812      	ldr	r2, [r2, #0]
    4f8a:	4610      	mov	r0, r2
    4f8c:	4798      	blx	r3
            }
        }
        break;
    4f8e:	e090      	b.n	50b2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4f90:	9b00      	ldr	r3, [sp, #0]
    4f92:	2b02      	cmp	r3, #2
    4f94:	f040 808f 	bne.w	50b6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4f98:	4b4a      	ldr	r3, [pc, #296]	; (50c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4f9a:	2201      	movs	r2, #1
    4f9c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4f9e:	4b56      	ldr	r3, [pc, #344]	; (50f8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	4a55      	ldr	r2, [pc, #340]	; (50fc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4fa6:	6812      	ldr	r2, [r2, #0]
    4fa8:	4610      	mov	r0, r2
    4faa:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4fac:	4b50      	ldr	r3, [pc, #320]	; (50f0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4fae:	681b      	ldr	r3, [r3, #0]
    4fb0:	691b      	ldr	r3, [r3, #16]
    4fb2:	4a50      	ldr	r2, [pc, #320]	; (50f4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4fb4:	6812      	ldr	r2, [r2, #0]
    4fb6:	4610      	mov	r0, r2
    4fb8:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4fba:	4b4d      	ldr	r3, [pc, #308]	; (50f0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	689b      	ldr	r3, [r3, #8]
    4fc0:	4a4c      	ldr	r2, [pc, #304]	; (50f4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4fc2:	6812      	ldr	r2, [r2, #0]
    4fc4:	4610      	mov	r0, r2
    4fc6:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4fc8:	4b47      	ldr	r3, [pc, #284]	; (50e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	68db      	ldr	r3, [r3, #12]
    4fce:	4a47      	ldr	r2, [pc, #284]	; (50ec <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4fd0:	6812      	ldr	r2, [r2, #0]
    4fd2:	4610      	mov	r0, r2
    4fd4:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4fd6:	4b44      	ldr	r3, [pc, #272]	; (50e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	689b      	ldr	r3, [r3, #8]
    4fdc:	4a43      	ldr	r2, [pc, #268]	; (50ec <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4fde:	6812      	ldr	r2, [r2, #0]
    4fe0:	6812      	ldr	r2, [r2, #0]
    4fe2:	4610      	mov	r0, r2
    4fe4:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4fe6:	4b38      	ldr	r3, [pc, #224]	; (50c8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4fe8:	681b      	ldr	r3, [r3, #0]
    4fea:	685b      	ldr	r3, [r3, #4]
    4fec:	4a44      	ldr	r2, [pc, #272]	; (5100 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4fee:	6812      	ldr	r2, [r2, #0]
    4ff0:	4610      	mov	r0, r2
    4ff2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4ff4:	4b36      	ldr	r3, [pc, #216]	; (50d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4ff6:	681b      	ldr	r3, [r3, #0]
    4ff8:	681b      	ldr	r3, [r3, #0]
    4ffa:	4a42      	ldr	r2, [pc, #264]	; (5104 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4ffc:	6812      	ldr	r2, [r2, #0]
    4ffe:	4610      	mov	r0, r2
    5000:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5002:	4b35      	ldr	r3, [pc, #212]	; (50d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	681b      	ldr	r3, [r3, #0]
    5008:	4a3f      	ldr	r2, [pc, #252]	; (5108 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    500a:	6812      	ldr	r2, [r2, #0]
    500c:	4610      	mov	r0, r2
    500e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5010:	4b33      	ldr	r3, [pc, #204]	; (50e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	681b      	ldr	r3, [r3, #0]
    5016:	4a3d      	ldr	r2, [pc, #244]	; (510c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5018:	6812      	ldr	r2, [r2, #0]
    501a:	4610      	mov	r0, r2
    501c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    501e:	e04a      	b.n	50b6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5020:	9b00      	ldr	r3, [sp, #0]
    5022:	2b02      	cmp	r3, #2
    5024:	d149      	bne.n	50ba <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5026:	4b27      	ldr	r3, [pc, #156]	; (50c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5028:	2201      	movs	r2, #1
    502a:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    502c:	4b32      	ldr	r3, [pc, #200]	; (50f8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    502e:	681b      	ldr	r3, [r3, #0]
    5030:	685b      	ldr	r3, [r3, #4]
    5032:	4a32      	ldr	r2, [pc, #200]	; (50fc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5034:	6812      	ldr	r2, [r2, #0]
    5036:	4610      	mov	r0, r2
    5038:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    503a:	4b2d      	ldr	r3, [pc, #180]	; (50f0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    503c:	681b      	ldr	r3, [r3, #0]
    503e:	691b      	ldr	r3, [r3, #16]
    5040:	4a2c      	ldr	r2, [pc, #176]	; (50f4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5042:	6812      	ldr	r2, [r2, #0]
    5044:	4610      	mov	r0, r2
    5046:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5048:	4b29      	ldr	r3, [pc, #164]	; (50f0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	689b      	ldr	r3, [r3, #8]
    504e:	4a29      	ldr	r2, [pc, #164]	; (50f4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5050:	6812      	ldr	r2, [r2, #0]
    5052:	4610      	mov	r0, r2
    5054:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5056:	4b24      	ldr	r3, [pc, #144]	; (50e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5058:	681b      	ldr	r3, [r3, #0]
    505a:	68db      	ldr	r3, [r3, #12]
    505c:	4a23      	ldr	r2, [pc, #140]	; (50ec <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    505e:	6812      	ldr	r2, [r2, #0]
    5060:	4610      	mov	r0, r2
    5062:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5064:	4b20      	ldr	r3, [pc, #128]	; (50e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	689b      	ldr	r3, [r3, #8]
    506a:	4a20      	ldr	r2, [pc, #128]	; (50ec <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    506c:	6812      	ldr	r2, [r2, #0]
    506e:	6812      	ldr	r2, [r2, #0]
    5070:	4610      	mov	r0, r2
    5072:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5074:	4b26      	ldr	r3, [pc, #152]	; (5110 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5076:	681b      	ldr	r3, [r3, #0]
    5078:	685b      	ldr	r3, [r3, #4]
    507a:	4a26      	ldr	r2, [pc, #152]	; (5114 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    507c:	6812      	ldr	r2, [r2, #0]
    507e:	4610      	mov	r0, r2
    5080:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5082:	4b25      	ldr	r3, [pc, #148]	; (5118 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	681b      	ldr	r3, [r3, #0]
    5088:	4a24      	ldr	r2, [pc, #144]	; (511c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    508a:	6812      	ldr	r2, [r2, #0]
    508c:	4610      	mov	r0, r2
    508e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5090:	4b23      	ldr	r3, [pc, #140]	; (5120 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	4a23      	ldr	r2, [pc, #140]	; (5124 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5098:	6812      	ldr	r2, [r2, #0]
    509a:	4610      	mov	r0, r2
    509c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    509e:	4b22      	ldr	r3, [pc, #136]	; (5128 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	681b      	ldr	r3, [r3, #0]
    50a4:	4a21      	ldr	r2, [pc, #132]	; (512c <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    50a6:	6812      	ldr	r2, [r2, #0]
    50a8:	4610      	mov	r0, r2
    50aa:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    50ac:	e005      	b.n	50ba <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    50ae:	bf00      	nop
    50b0:	e004      	b.n	50bc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    50b2:	bf00      	nop
    50b4:	e002      	b.n	50bc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    50b6:	bf00      	nop
    50b8:	e000      	b.n	50bc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    50ba:	bf00      	nop
    }

}
    50bc:	bf00      	nop
    50be:	b003      	add	sp, #12
    50c0:	f85d fb04 	ldr.w	pc, [sp], #4
    50c4:	1fff8b19 	.word	0x1fff8b19
    50c8:	1fff8bd4 	.word	0x1fff8bd4
    50cc:	1fff8bf4 	.word	0x1fff8bf4
    50d0:	1fff8bd8 	.word	0x1fff8bd8
    50d4:	1fff8bfc 	.word	0x1fff8bfc
    50d8:	1fff8bdc 	.word	0x1fff8bdc
    50dc:	1fff8c04 	.word	0x1fff8c04
    50e0:	1fff8be0 	.word	0x1fff8be0
    50e4:	1fff8c0c 	.word	0x1fff8c0c
    50e8:	1fff8bc8 	.word	0x1fff8bc8
    50ec:	1fff8bec 	.word	0x1fff8bec
    50f0:	1fff8bcc 	.word	0x1fff8bcc
    50f4:	1fff8be8 	.word	0x1fff8be8
    50f8:	1fff8bd0 	.word	0x1fff8bd0
    50fc:	1fff8be4 	.word	0x1fff8be4
    5100:	1fff8bf0 	.word	0x1fff8bf0
    5104:	1fff8bf8 	.word	0x1fff8bf8
    5108:	1fff8c00 	.word	0x1fff8c00
    510c:	1fff8c08 	.word	0x1fff8c08
    5110:	1fff8c10 	.word	0x1fff8c10
    5114:	1fff8c20 	.word	0x1fff8c20
    5118:	1fff8c14 	.word	0x1fff8c14
    511c:	1fff8c24 	.word	0x1fff8c24
    5120:	1fff8c18 	.word	0x1fff8c18
    5124:	1fff8c28 	.word	0x1fff8c28
    5128:	1fff8c1c 	.word	0x1fff8c1c
    512c:	1fff8c2c 	.word	0x1fff8c2c

00005130 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5130:	b500      	push	{lr}
    5132:	b083      	sub	sp, #12
    5134:	9001      	str	r0, [sp, #4]
    5136:	9100      	str	r1, [sp, #0]
    switch(Command)
    5138:	9b00      	ldr	r3, [sp, #0]
    513a:	2b04      	cmp	r3, #4
    513c:	d010      	beq.n	5160 <Clock_Ip_Command+0x30>
    513e:	9b00      	ldr	r3, [sp, #0]
    5140:	2b04      	cmp	r3, #4
    5142:	d811      	bhi.n	5168 <Clock_Ip_Command+0x38>
    5144:	9b00      	ldr	r3, [sp, #0]
    5146:	2b01      	cmp	r3, #1
    5148:	d006      	beq.n	5158 <Clock_Ip_Command+0x28>
    514a:	9b00      	ldr	r3, [sp, #0]
    514c:	2b02      	cmp	r3, #2
    514e:	d10b      	bne.n	5168 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5150:	9801      	ldr	r0, [sp, #4]
    5152:	f7ff fdb3 	bl	4cbc <Clock_Ip_ClockInitializeObjects>
            break;
    5156:	e008      	b.n	516a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5158:	9801      	ldr	r0, [sp, #4]
    515a:	f7ff f9db 	bl	4514 <Clock_Ip_SpecificPlatformInitClock>
            break;
    515e:	e004      	b.n	516a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5160:	9801      	ldr	r0, [sp, #4]
    5162:	f7ff f8ed 	bl	4340 <DisableSafeClock>
            break;
    5166:	e000      	b.n	516a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5168:	bf00      	nop
    }
}
    516a:	bf00      	nop
    516c:	b003      	add	sp, #12
    516e:	f85d fb04 	ldr.w	pc, [sp], #4
    5172:	bf00      	nop

00005174 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5174:	b500      	push	{lr}
    5176:	b085      	sub	sp, #20
    5178:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    517a:	4a20      	ldr	r2, [pc, #128]	; (51fc <Mcu_Init+0x88>)
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5180:	2300      	movs	r3, #0
    5182:	9303      	str	r3, [sp, #12]
    5184:	e010      	b.n	51a8 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5186:	4b1d      	ldr	r3, [pc, #116]	; (51fc <Mcu_Init+0x88>)
    5188:	681b      	ldr	r3, [r3, #0]
    518a:	6919      	ldr	r1, [r3, #16]
    518c:	9a03      	ldr	r2, [sp, #12]
    518e:	4613      	mov	r3, r2
    5190:	005b      	lsls	r3, r3, #1
    5192:	4413      	add	r3, r2
    5194:	009b      	lsls	r3, r3, #2
    5196:	440b      	add	r3, r1
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	9a03      	ldr	r2, [sp, #12]
    519c:	b2d1      	uxtb	r1, r2
    519e:	4a18      	ldr	r2, [pc, #96]	; (5200 <Mcu_Init+0x8c>)
    51a0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    51a2:	9b03      	ldr	r3, [sp, #12]
    51a4:	3301      	adds	r3, #1
    51a6:	9303      	str	r3, [sp, #12]
    51a8:	4b14      	ldr	r3, [pc, #80]	; (51fc <Mcu_Init+0x88>)
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	689b      	ldr	r3, [r3, #8]
    51ae:	9a03      	ldr	r2, [sp, #12]
    51b0:	429a      	cmp	r2, r3
    51b2:	d3e8      	bcc.n	5186 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    51b4:	2300      	movs	r3, #0
    51b6:	9303      	str	r3, [sp, #12]
    51b8:	e010      	b.n	51dc <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    51ba:	4b10      	ldr	r3, [pc, #64]	; (51fc <Mcu_Init+0x88>)
    51bc:	681b      	ldr	r3, [r3, #0]
    51be:	6959      	ldr	r1, [r3, #20]
    51c0:	9a03      	ldr	r2, [sp, #12]
    51c2:	4613      	mov	r3, r2
    51c4:	01db      	lsls	r3, r3, #7
    51c6:	1a9b      	subs	r3, r3, r2
    51c8:	00db      	lsls	r3, r3, #3
    51ca:	440b      	add	r3, r1
    51cc:	681b      	ldr	r3, [r3, #0]
    51ce:	9a03      	ldr	r2, [sp, #12]
    51d0:	b2d1      	uxtb	r1, r2
    51d2:	4a0c      	ldr	r2, [pc, #48]	; (5204 <Mcu_Init+0x90>)
    51d4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    51d6:	9b03      	ldr	r3, [sp, #12]
    51d8:	3301      	adds	r3, #1
    51da:	9303      	str	r3, [sp, #12]
    51dc:	4b07      	ldr	r3, [pc, #28]	; (51fc <Mcu_Init+0x88>)
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	68db      	ldr	r3, [r3, #12]
    51e2:	9a03      	ldr	r2, [sp, #12]
    51e4:	429a      	cmp	r2, r3
    51e6:	d3e8      	bcc.n	51ba <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    51e8:	4b04      	ldr	r3, [pc, #16]	; (51fc <Mcu_Init+0x88>)
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	699b      	ldr	r3, [r3, #24]
    51ee:	4618      	mov	r0, r3
    51f0:	f000 f88a 	bl	5308 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    51f4:	bf00      	nop
    51f6:	b005      	add	sp, #20
    51f8:	f85d fb04 	ldr.w	pc, [sp], #4
    51fc:	1fff8d08 	.word	0x1fff8d08
    5200:	1fff8d04 	.word	0x1fff8d04
    5204:	1fff8d00 	.word	0x1fff8d00

00005208 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5208:	b084      	sub	sp, #16
    520a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    520c:	2301      	movs	r3, #1
    520e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5212:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5216:	4618      	mov	r0, r3
    5218:	b004      	add	sp, #16
    521a:	4770      	bx	lr

0000521c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    521c:	b500      	push	{lr}
    521e:	b085      	sub	sp, #20
    5220:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5222:	4a0e      	ldr	r2, [pc, #56]	; (525c <Mcu_InitClock+0x40>)
    5224:	9b01      	ldr	r3, [sp, #4]
    5226:	4413      	add	r3, r2
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    522e:	4b0c      	ldr	r3, [pc, #48]	; (5260 <Mcu_InitClock+0x44>)
    5230:	681b      	ldr	r3, [r3, #0]
    5232:	6959      	ldr	r1, [r3, #20]
    5234:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5238:	4613      	mov	r3, r2
    523a:	01db      	lsls	r3, r3, #7
    523c:	1a9b      	subs	r3, r3, r2
    523e:	00db      	lsls	r3, r3, #3
    5240:	440b      	add	r3, r1
    5242:	4618      	mov	r0, r3
    5244:	f000 f86a 	bl	531c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5248:	2300      	movs	r3, #0
    524a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    524e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5252:	4618      	mov	r0, r3
    5254:	b005      	add	sp, #20
    5256:	f85d fb04 	ldr.w	pc, [sp], #4
    525a:	bf00      	nop
    525c:	1fff8d00 	.word	0x1fff8d00
    5260:	1fff8d08 	.word	0x1fff8d08

00005264 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5264:	b500      	push	{lr}
    5266:	b085      	sub	sp, #20
    5268:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    526a:	4a0d      	ldr	r2, [pc, #52]	; (52a0 <Mcu_SetMode+0x3c>)
    526c:	9b01      	ldr	r3, [sp, #4]
    526e:	4413      	add	r3, r2
    5270:	781b      	ldrb	r3, [r3, #0]
    5272:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5276:	f001 fb27 	bl	68c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    527a:	4b0a      	ldr	r3, [pc, #40]	; (52a4 <Mcu_SetMode+0x40>)
    527c:	681b      	ldr	r3, [r3, #0]
    527e:	6919      	ldr	r1, [r3, #16]
    5280:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5284:	4613      	mov	r3, r2
    5286:	005b      	lsls	r3, r3, #1
    5288:	4413      	add	r3, r2
    528a:	009b      	lsls	r3, r3, #2
    528c:	440b      	add	r3, r1
    528e:	4618      	mov	r0, r3
    5290:	f000 f84e 	bl	5330 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5294:	f001 fb44 	bl	6920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5298:	bf00      	nop
    529a:	b005      	add	sp, #20
    529c:	f85d fb04 	ldr.w	pc, [sp], #4
    52a0:	1fff8d04 	.word	0x1fff8d04
    52a4:	1fff8d08 	.word	0x1fff8d08

000052a8 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    52a8:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    52aa:	2302      	movs	r3, #2
    52ac:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    52ae:	9b01      	ldr	r3, [sp, #4]
}
    52b0:	4618      	mov	r0, r3
    52b2:	b002      	add	sp, #8
    52b4:	4770      	bx	lr

000052b6 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    52b6:	b500      	push	{lr}
    52b8:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    52ba:	f000 f843 	bl	5344 <Mcu_Ipw_GetResetReason>
    52be:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    52c0:	9b01      	ldr	r3, [sp, #4]
}
    52c2:	4618      	mov	r0, r3
    52c4:	b003      	add	sp, #12
    52c6:	f85d fb04 	ldr.w	pc, [sp], #4

000052ca <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    52ca:	b500      	push	{lr}
    52cc:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    52ce:	f000 f83f 	bl	5350 <Mcu_Ipw_GetResetRawValue>
    52d2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    52d4:	9b01      	ldr	r3, [sp, #4]
}
    52d6:	4618      	mov	r0, r3
    52d8:	b003      	add	sp, #12
    52da:	f85d fb04 	ldr.w	pc, [sp], #4

000052de <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    52de:	b500      	push	{lr}
    52e0:	b083      	sub	sp, #12
    52e2:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    52e4:	9801      	ldr	r0, [sp, #4]
    52e6:	f000 f839 	bl	535c <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    52ea:	bf00      	nop
    52ec:	b003      	add	sp, #12
    52ee:	f85d fb04 	ldr.w	pc, [sp], #4

000052f2 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    52f2:	b082      	sub	sp, #8
    52f4:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    52f6:	4b03      	ldr	r3, [pc, #12]	; (5304 <Mcu_ClkSrcFailureNotification+0x12>)
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    52fc:	bf00      	nop
    52fe:	b002      	add	sp, #8
    5300:	4770      	bx	lr
    5302:	bf00      	nop
    5304:	1fff8d08 	.word	0x1fff8d08

00005308 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5308:	b500      	push	{lr}
    530a:	b083      	sub	sp, #12
    530c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    530e:	9801      	ldr	r0, [sp, #4]
    5310:	f000 f882 	bl	5418 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5314:	bf00      	nop
    5316:	b003      	add	sp, #12
    5318:	f85d fb04 	ldr.w	pc, [sp], #4

0000531c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    531c:	b500      	push	{lr}
    531e:	b083      	sub	sp, #12
    5320:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5322:	9801      	ldr	r0, [sp, #4]
    5324:	f7fc fc6a 	bl	1bfc <Clock_Ip_InitClock>
}
    5328:	bf00      	nop
    532a:	b003      	add	sp, #12
    532c:	f85d fb04 	ldr.w	pc, [sp], #4

00005330 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5330:	b500      	push	{lr}
    5332:	b083      	sub	sp, #12
    5334:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5336:	9801      	ldr	r0, [sp, #4]
    5338:	f000 f820 	bl	537c <Power_Ip_SetMode>
}
    533c:	bf00      	nop
    533e:	b003      	add	sp, #12
    5340:	f85d fb04 	ldr.w	pc, [sp], #4

00005344 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5344:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5346:	f000 f84f 	bl	53e8 <Power_Ip_GetResetReason>
    534a:	4603      	mov	r3, r0
}
    534c:	4618      	mov	r0, r3
    534e:	bd08      	pop	{r3, pc}

00005350 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5350:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5352:	f000 f857 	bl	5404 <Power_Ip_GetResetRawValue>
    5356:	4603      	mov	r3, r0
}
    5358:	4618      	mov	r0, r3
    535a:	bd08      	pop	{r3, pc}

0000535c <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    535c:	b500      	push	{lr}
    535e:	b083      	sub	sp, #12
    5360:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5362:	9b01      	ldr	r3, [sp, #4]
    5364:	2b00      	cmp	r3, #0
    5366:	d102      	bne.n	536e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5368:	f000 f86c 	bl	5444 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    536c:	e001      	b.n	5372 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    536e:	f000 f86e 	bl	544e <Power_Ip_EnableSleepOnExit>
}
    5372:	bf00      	nop
    5374:	b003      	add	sp, #12
    5376:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000537c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    537c:	b500      	push	{lr}
    537e:	b085      	sub	sp, #20
    5380:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5382:	9b01      	ldr	r3, [sp, #4]
    5384:	685b      	ldr	r3, [r3, #4]
    5386:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5388:	9802      	ldr	r0, [sp, #8]
    538a:	f000 f9f5 	bl	5778 <Power_Ip_SMC_ModeCheckEntry>
    538e:	4603      	mov	r3, r0
    5390:	2b00      	cmp	r3, #0
    5392:	d002      	beq.n	539a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5394:	2301      	movs	r3, #1
    5396:	9303      	str	r3, [sp, #12]
    5398:	e003      	b.n	53a2 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    539a:	9801      	ldr	r0, [sp, #4]
    539c:	f000 fa1e 	bl	57dc <Power_Ip_SMC_ModeConfig>
    53a0:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    53a2:	9b03      	ldr	r3, [sp, #12]
    53a4:	2b01      	cmp	r3, #1
    53a6:	d103      	bne.n	53b0 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53a8:	21ff      	movs	r1, #255	; 0xff
    53aa:	2003      	movs	r0, #3
    53ac:	f000 f8f4 	bl	5598 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    53b0:	bf00      	nop
    53b2:	b005      	add	sp, #20
    53b4:	f85d fb04 	ldr.w	pc, [sp], #4

000053b8 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    53b8:	b084      	sub	sp, #16
    53ba:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    53bc:	230c      	movs	r3, #12
    53be:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    53c0:	4a08      	ldr	r2, [pc, #32]	; (53e4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    53c2:	9b01      	ldr	r3, [sp, #4]
    53c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53c8:	2b0e      	cmp	r3, #14
    53ca:	d805      	bhi.n	53d8 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    53cc:	4a05      	ldr	r2, [pc, #20]	; (53e4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    53ce:	9b01      	ldr	r3, [sp, #4]
    53d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53d4:	9303      	str	r3, [sp, #12]
    53d6:	e001      	b.n	53dc <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    53d8:	230c      	movs	r3, #12
    53da:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    53dc:	9b03      	ldr	r3, [sp, #12]
}
    53de:	4618      	mov	r0, r3
    53e0:	b004      	add	sp, #16
    53e2:	4770      	bx	lr
    53e4:	000083f0 	.word	0x000083f0

000053e8 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    53e8:	b500      	push	{lr}
    53ea:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    53ec:	f000 f940 	bl	5670 <Power_Ip_RCM_GetResetReason>
    53f0:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    53f2:	9801      	ldr	r0, [sp, #4]
    53f4:	f7ff ffe0 	bl	53b8 <Power_Ip_ConvertIntergeToResetType>
    53f8:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    53fa:	9b00      	ldr	r3, [sp, #0]
}
    53fc:	4618      	mov	r0, r3
    53fe:	b003      	add	sp, #12
    5400:	f85d fb04 	ldr.w	pc, [sp], #4

00005404 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5404:	b500      	push	{lr}
    5406:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5408:	f000 f98a 	bl	5720 <Power_Ip_RCM_GetResetRawValue>
    540c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    540e:	9b01      	ldr	r3, [sp, #4]
}
    5410:	4618      	mov	r0, r3
    5412:	b003      	add	sp, #12
    5414:	f85d fb04 	ldr.w	pc, [sp], #4

00005418 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5418:	b500      	push	{lr}
    541a:	b083      	sub	sp, #12
    541c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    541e:	9b01      	ldr	r3, [sp, #4]
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	4618      	mov	r0, r3
    5424:	f000 f90e 	bl	5644 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5428:	9b01      	ldr	r3, [sp, #4]
    542a:	685b      	ldr	r3, [r3, #4]
    542c:	4618      	mov	r0, r3
    542e:	f000 f86d 	bl	550c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5432:	9b01      	ldr	r3, [sp, #4]
    5434:	689b      	ldr	r3, [r3, #8]
    5436:	4618      	mov	r0, r3
    5438:	f000 f990 	bl	575c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    543c:	bf00      	nop
    543e:	b003      	add	sp, #12
    5440:	f85d fb04 	ldr.w	pc, [sp], #4

00005444 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5444:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5446:	f000 f811 	bl	546c <Power_Ip_CM4_DisableSleepOnExit>
}
    544a:	bf00      	nop
    544c:	bd08      	pop	{r3, pc}

0000544e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    544e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5450:	f000 f820 	bl	5494 <Power_Ip_CM4_EnableSleepOnExit>
}
    5454:	bf00      	nop
    5456:	bd08      	pop	{r3, pc}

00005458 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5458:	b082      	sub	sp, #8
    545a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    545c:	4a02      	ldr	r2, [pc, #8]	; (5468 <Power_Ip_InstallNotificationsCallback+0x10>)
    545e:	9b01      	ldr	r3, [sp, #4]
    5460:	6013      	str	r3, [r2, #0]
}
    5462:	bf00      	nop
    5464:	b002      	add	sp, #8
    5466:	4770      	bx	lr
    5468:	1fff8b1c 	.word	0x1fff8b1c

0000546c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    546c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    546e:	2300      	movs	r3, #0
    5470:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5472:	4b07      	ldr	r3, [pc, #28]	; (5490 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	685b      	ldr	r3, [r3, #4]
    5478:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    547a:	9b01      	ldr	r3, [sp, #4]
    547c:	f023 0302 	bic.w	r3, r3, #2
    5480:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5482:	4b03      	ldr	r3, [pc, #12]	; (5490 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	9a01      	ldr	r2, [sp, #4]
    5488:	605a      	str	r2, [r3, #4]
}
    548a:	bf00      	nop
    548c:	b002      	add	sp, #8
    548e:	4770      	bx	lr
    5490:	1fff8b20 	.word	0x1fff8b20

00005494 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5494:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5496:	2300      	movs	r3, #0
    5498:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    549a:	4b07      	ldr	r3, [pc, #28]	; (54b8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    549c:	681b      	ldr	r3, [r3, #0]
    549e:	685b      	ldr	r3, [r3, #4]
    54a0:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    54a2:	9b01      	ldr	r3, [sp, #4]
    54a4:	f043 0302 	orr.w	r3, r3, #2
    54a8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    54aa:	4b03      	ldr	r3, [pc, #12]	; (54b8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	9a01      	ldr	r2, [sp, #4]
    54b0:	605a      	str	r2, [r3, #4]
}
    54b2:	bf00      	nop
    54b4:	b002      	add	sp, #8
    54b6:	4770      	bx	lr
    54b8:	1fff8b20 	.word	0x1fff8b20

000054bc <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    54bc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    54be:	2300      	movs	r3, #0
    54c0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    54c2:	4b07      	ldr	r3, [pc, #28]	; (54e0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	685b      	ldr	r3, [r3, #4]
    54c8:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    54ca:	9b01      	ldr	r3, [sp, #4]
    54cc:	f043 0304 	orr.w	r3, r3, #4
    54d0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    54d2:	4b03      	ldr	r3, [pc, #12]	; (54e0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	9a01      	ldr	r2, [sp, #4]
    54d8:	605a      	str	r2, [r3, #4]
}
    54da:	bf00      	nop
    54dc:	b002      	add	sp, #8
    54de:	4770      	bx	lr
    54e0:	1fff8b20 	.word	0x1fff8b20

000054e4 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    54e4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    54e6:	2300      	movs	r3, #0
    54e8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    54ea:	4b07      	ldr	r3, [pc, #28]	; (5508 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	685b      	ldr	r3, [r3, #4]
    54f0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    54f2:	9b01      	ldr	r3, [sp, #4]
    54f4:	f023 0304 	bic.w	r3, r3, #4
    54f8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    54fa:	4b03      	ldr	r3, [pc, #12]	; (5508 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	9a01      	ldr	r2, [sp, #4]
    5500:	605a      	str	r2, [r3, #4]
}
    5502:	bf00      	nop
    5504:	b002      	add	sp, #8
    5506:	4770      	bx	lr
    5508:	1fff8b20 	.word	0x1fff8b20

0000550c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    550c:	b084      	sub	sp, #16
    550e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5510:	4b20      	ldr	r3, [pc, #128]	; (5594 <Power_Ip_PMC_PowerInit+0x88>)
    5512:	781b      	ldrb	r3, [r3, #0]
    5514:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5518:	f89d 300f 	ldrb.w	r3, [sp, #15]
    551c:	f003 030f 	and.w	r3, r3, #15
    5520:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5524:	9b01      	ldr	r3, [sp, #4]
    5526:	781a      	ldrb	r2, [r3, #0]
    5528:	f89d 300f 	ldrb.w	r3, [sp, #15]
    552c:	4313      	orrs	r3, r2
    552e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5532:	4a18      	ldr	r2, [pc, #96]	; (5594 <Power_Ip_PMC_PowerInit+0x88>)
    5534:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5538:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    553a:	4b16      	ldr	r3, [pc, #88]	; (5594 <Power_Ip_PMC_PowerInit+0x88>)
    553c:	785b      	ldrb	r3, [r3, #1]
    553e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5542:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5546:	f003 031f 	and.w	r3, r3, #31
    554a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    554e:	9b01      	ldr	r3, [sp, #4]
    5550:	785a      	ldrb	r2, [r3, #1]
    5552:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5556:	4313      	orrs	r3, r2
    5558:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    555c:	4a0d      	ldr	r2, [pc, #52]	; (5594 <Power_Ip_PMC_PowerInit+0x88>)
    555e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5562:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5564:	4b0b      	ldr	r3, [pc, #44]	; (5594 <Power_Ip_PMC_PowerInit+0x88>)
    5566:	789b      	ldrb	r3, [r3, #2]
    5568:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    556c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5570:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5574:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5578:	9b01      	ldr	r3, [sp, #4]
    557a:	789a      	ldrb	r2, [r3, #2]
    557c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5580:	4313      	orrs	r3, r2
    5582:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5586:	4a03      	ldr	r2, [pc, #12]	; (5594 <Power_Ip_PMC_PowerInit+0x88>)
    5588:	f89d 300f 	ldrb.w	r3, [sp, #15]
    558c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    558e:	bf00      	nop
    5590:	b004      	add	sp, #16
    5592:	4770      	bx	lr
    5594:	4007d000 	.word	0x4007d000

00005598 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5598:	b500      	push	{lr}
    559a:	b083      	sub	sp, #12
    559c:	9001      	str	r0, [sp, #4]
    559e:	460b      	mov	r3, r1
    55a0:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    55a4:	4b05      	ldr	r3, [pc, #20]	; (55bc <Power_Ip_ReportPowerErrors+0x24>)
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    55ac:	4611      	mov	r1, r2
    55ae:	9801      	ldr	r0, [sp, #4]
    55b0:	4798      	blx	r3
}
    55b2:	bf00      	nop
    55b4:	b003      	add	sp, #12
    55b6:	f85d fb04 	ldr.w	pc, [sp], #4
    55ba:	bf00      	nop
    55bc:	1fff8b1c 	.word	0x1fff8b1c

000055c0 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    55c0:	b082      	sub	sp, #8
    55c2:	9001      	str	r0, [sp, #4]
    55c4:	460b      	mov	r3, r1
    55c6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    55ca:	bf00      	nop
    55cc:	b002      	add	sp, #8
    55ce:	4770      	bx	lr

000055d0 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    55d0:	b500      	push	{lr}
    55d2:	b085      	sub	sp, #20
    55d4:	9003      	str	r0, [sp, #12]
    55d6:	9102      	str	r1, [sp, #8]
    55d8:	9201      	str	r2, [sp, #4]
    55da:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    55dc:	2000      	movs	r0, #0
    55de:	f7fc f83c 	bl	165a <OsIf_GetCounter>
    55e2:	4602      	mov	r2, r0
    55e4:	9b03      	ldr	r3, [sp, #12]
    55e6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    55e8:	9b02      	ldr	r3, [sp, #8]
    55ea:	2200      	movs	r2, #0
    55ec:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    55ee:	2100      	movs	r1, #0
    55f0:	9800      	ldr	r0, [sp, #0]
    55f2:	f7fc f87e 	bl	16f2 <OsIf_MicrosToTicks>
    55f6:	4602      	mov	r2, r0
    55f8:	9b01      	ldr	r3, [sp, #4]
    55fa:	601a      	str	r2, [r3, #0]
}
    55fc:	bf00      	nop
    55fe:	b005      	add	sp, #20
    5600:	f85d fb04 	ldr.w	pc, [sp], #4

00005604 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5604:	b500      	push	{lr}
    5606:	b087      	sub	sp, #28
    5608:	9003      	str	r0, [sp, #12]
    560a:	9102      	str	r1, [sp, #8]
    560c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    560e:	2300      	movs	r3, #0
    5610:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5614:	2100      	movs	r1, #0
    5616:	9803      	ldr	r0, [sp, #12]
    5618:	f7fc f838 	bl	168c <OsIf_GetElapsed>
    561c:	4602      	mov	r2, r0
    561e:	9b02      	ldr	r3, [sp, #8]
    5620:	681b      	ldr	r3, [r3, #0]
    5622:	441a      	add	r2, r3
    5624:	9b02      	ldr	r3, [sp, #8]
    5626:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5628:	9b02      	ldr	r3, [sp, #8]
    562a:	681b      	ldr	r3, [r3, #0]
    562c:	9a01      	ldr	r2, [sp, #4]
    562e:	429a      	cmp	r2, r3
    5630:	d802      	bhi.n	5638 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5632:	2301      	movs	r3, #1
    5634:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5638:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    563c:	4618      	mov	r0, r3
    563e:	b007      	add	sp, #28
    5640:	f85d fb04 	ldr.w	pc, [sp], #4

00005644 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5644:	b082      	sub	sp, #8
    5646:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5648:	9b01      	ldr	r3, [sp, #4]
    564a:	681a      	ldr	r2, [r3, #0]
    564c:	4907      	ldr	r1, [pc, #28]	; (566c <Power_Ip_RCM_ResetInit+0x28>)
    564e:	f641 7307 	movw	r3, #7943	; 0x1f07
    5652:	4013      	ands	r3, r2
    5654:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	685a      	ldr	r2, [r3, #4]
    565a:	4904      	ldr	r1, [pc, #16]	; (566c <Power_Ip_RCM_ResetInit+0x28>)
    565c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5660:	4013      	ands	r3, r2
    5662:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5664:	bf00      	nop
    5666:	b002      	add	sp, #8
    5668:	4770      	bx	lr
    566a:	bf00      	nop
    566c:	4007f000 	.word	0x4007f000

00005670 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5670:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5672:	230c      	movs	r3, #12
    5674:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5676:	2300      	movs	r3, #0
    5678:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    567a:	2300      	movs	r3, #0
    567c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    567e:	2300      	movs	r3, #0
    5680:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5682:	4b25      	ldr	r3, [pc, #148]	; (5718 <Power_Ip_RCM_GetResetReason+0xa8>)
    5684:	699a      	ldr	r2, [r3, #24]
    5686:	f642 73ee 	movw	r3, #12270	; 0x2fee
    568a:	4013      	ands	r3, r2
    568c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    568e:	9b03      	ldr	r3, [sp, #12]
    5690:	2b00      	cmp	r3, #0
    5692:	d008      	beq.n	56a6 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5694:	4920      	ldr	r1, [pc, #128]	; (5718 <Power_Ip_RCM_GetResetReason+0xa8>)
    5696:	9a03      	ldr	r2, [sp, #12]
    5698:	f642 73ee 	movw	r3, #12270	; 0x2fee
    569c:	4013      	ands	r3, r2
    569e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    56a0:	4a1e      	ldr	r2, [pc, #120]	; (571c <Power_Ip_RCM_GetResetReason+0xac>)
    56a2:	9b03      	ldr	r3, [sp, #12]
    56a4:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    56a6:	4b1d      	ldr	r3, [pc, #116]	; (571c <Power_Ip_RCM_GetResetReason+0xac>)
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    56ac:	9a02      	ldr	r2, [sp, #8]
    56ae:	f642 73ee 	movw	r3, #12270	; 0x2fee
    56b2:	4013      	ands	r3, r2
    56b4:	2b82      	cmp	r3, #130	; 0x82
    56b6:	d102      	bne.n	56be <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    56b8:	2305      	movs	r3, #5
    56ba:	9307      	str	r3, [sp, #28]
    56bc:	e027      	b.n	570e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    56be:	2300      	movs	r3, #0
    56c0:	9306      	str	r3, [sp, #24]
    56c2:	e021      	b.n	5708 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    56c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    56c8:	9b06      	ldr	r3, [sp, #24]
    56ca:	fa22 f303 	lsr.w	r3, r2, r3
    56ce:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    56d0:	9a01      	ldr	r2, [sp, #4]
    56d2:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    56d6:	4013      	ands	r3, r2
    56d8:	2b00      	cmp	r3, #0
    56da:	d012      	beq.n	5702 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    56dc:	9a01      	ldr	r2, [sp, #4]
    56de:	9b02      	ldr	r3, [sp, #8]
    56e0:	4013      	ands	r3, r2
    56e2:	2b00      	cmp	r3, #0
    56e4:	d00a      	beq.n	56fc <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    56e6:	9b05      	ldr	r3, [sp, #20]
    56e8:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    56ea:	9b04      	ldr	r3, [sp, #16]
    56ec:	3301      	adds	r3, #1
    56ee:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    56f0:	9b04      	ldr	r3, [sp, #16]
    56f2:	2b01      	cmp	r3, #1
    56f4:	d902      	bls.n	56fc <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    56f6:	230d      	movs	r3, #13
    56f8:	9307      	str	r3, [sp, #28]
                        break;
    56fa:	e008      	b.n	570e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    56fc:	9b05      	ldr	r3, [sp, #20]
    56fe:	3301      	adds	r3, #1
    5700:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5702:	9b06      	ldr	r3, [sp, #24]
    5704:	3301      	adds	r3, #1
    5706:	9306      	str	r3, [sp, #24]
    5708:	9b06      	ldr	r3, [sp, #24]
    570a:	2b1f      	cmp	r3, #31
    570c:	d9da      	bls.n	56c4 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    570e:	9b07      	ldr	r3, [sp, #28]
}
    5710:	4618      	mov	r0, r3
    5712:	b008      	add	sp, #32
    5714:	4770      	bx	lr
    5716:	bf00      	nop
    5718:	4007f000 	.word	0x4007f000
    571c:	1fff8d0c 	.word	0x1fff8d0c

00005720 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5720:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5722:	4b0c      	ldr	r3, [pc, #48]	; (5754 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5724:	699a      	ldr	r2, [r3, #24]
    5726:	f642 73ee 	movw	r3, #12270	; 0x2fee
    572a:	4013      	ands	r3, r2
    572c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	2b00      	cmp	r3, #0
    5732:	d008      	beq.n	5746 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5734:	4907      	ldr	r1, [pc, #28]	; (5754 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5736:	9a01      	ldr	r2, [sp, #4]
    5738:	f642 73ee 	movw	r3, #12270	; 0x2fee
    573c:	4013      	ands	r3, r2
    573e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5740:	4a05      	ldr	r2, [pc, #20]	; (5758 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5742:	9b01      	ldr	r3, [sp, #4]
    5744:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5746:	4b04      	ldr	r3, [pc, #16]	; (5758 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5748:	681b      	ldr	r3, [r3, #0]
    574a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    574c:	9b00      	ldr	r3, [sp, #0]
}
    574e:	4618      	mov	r0, r3
    5750:	b002      	add	sp, #8
    5752:	4770      	bx	lr
    5754:	4007f000 	.word	0x4007f000
    5758:	1fff8d0c 	.word	0x1fff8d0c

0000575c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    575c:	b082      	sub	sp, #8
    575e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5760:	9b01      	ldr	r3, [sp, #4]
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	4a03      	ldr	r2, [pc, #12]	; (5774 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5766:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    576a:	6093      	str	r3, [r2, #8]
}
    576c:	bf00      	nop
    576e:	b002      	add	sp, #8
    5770:	4770      	bx	lr
    5772:	bf00      	nop
    5774:	4007e000 	.word	0x4007e000

00005778 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5778:	b084      	sub	sp, #16
    577a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    577c:	2301      	movs	r3, #1
    577e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5780:	4b15      	ldr	r3, [pc, #84]	; (57d8 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5782:	695b      	ldr	r3, [r3, #20]
    5784:	b2db      	uxtb	r3, r3
    5786:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5788:	9b01      	ldr	r3, [sp, #4]
    578a:	2b02      	cmp	r3, #2
    578c:	d012      	beq.n	57b4 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    578e:	9b01      	ldr	r3, [sp, #4]
    5790:	2b02      	cmp	r3, #2
    5792:	d818      	bhi.n	57c6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5794:	9b01      	ldr	r3, [sp, #4]
    5796:	2b00      	cmp	r3, #0
    5798:	d003      	beq.n	57a2 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    579a:	9b01      	ldr	r3, [sp, #4]
    579c:	2b01      	cmp	r3, #1
    579e:	d003      	beq.n	57a8 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    57a0:	e011      	b.n	57c6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    57a2:	2300      	movs	r3, #0
    57a4:	9303      	str	r3, [sp, #12]
            break;
    57a6:	e013      	b.n	57d0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    57a8:	9b02      	ldr	r3, [sp, #8]
    57aa:	2b01      	cmp	r3, #1
    57ac:	d10d      	bne.n	57ca <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    57ae:	2300      	movs	r3, #0
    57b0:	9303      	str	r3, [sp, #12]
            break;
    57b2:	e00a      	b.n	57ca <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    57b4:	9b02      	ldr	r3, [sp, #8]
    57b6:	2b01      	cmp	r3, #1
    57b8:	d002      	beq.n	57c0 <Power_Ip_SMC_ModeCheckEntry+0x48>
    57ba:	9b02      	ldr	r3, [sp, #8]
    57bc:	2b10      	cmp	r3, #16
    57be:	d106      	bne.n	57ce <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    57c0:	2300      	movs	r3, #0
    57c2:	9303      	str	r3, [sp, #12]
            break;
    57c4:	e003      	b.n	57ce <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    57c6:	bf00      	nop
    57c8:	e002      	b.n	57d0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    57ca:	bf00      	nop
    57cc:	e000      	b.n	57d0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    57ce:	bf00      	nop
        }
    }

    return PowerModeCheck;
    57d0:	9b03      	ldr	r3, [sp, #12]
}
    57d2:	4618      	mov	r0, r3
    57d4:	b004      	add	sp, #16
    57d6:	4770      	bx	lr
    57d8:	4007e000 	.word	0x4007e000

000057dc <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    57dc:	b500      	push	{lr}
    57de:	b08b      	sub	sp, #44	; 0x2c
    57e0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    57e2:	2300      	movs	r3, #0
    57e4:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    57e6:	2300      	movs	r3, #0
    57e8:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    57ea:	2300      	movs	r3, #0
    57ec:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    57f0:	9b01      	ldr	r3, [sp, #4]
    57f2:	685b      	ldr	r3, [r3, #4]
    57f4:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    57f6:	9b08      	ldr	r3, [sp, #32]
    57f8:	2b02      	cmp	r3, #2
    57fa:	d076      	beq.n	58ea <Power_Ip_SMC_ModeConfig+0x10e>
    57fc:	9b08      	ldr	r3, [sp, #32]
    57fe:	2b02      	cmp	r3, #2
    5800:	f200 80ab 	bhi.w	595a <Power_Ip_SMC_ModeConfig+0x17e>
    5804:	9b08      	ldr	r3, [sp, #32]
    5806:	2b00      	cmp	r3, #0
    5808:	d003      	beq.n	5812 <Power_Ip_SMC_ModeConfig+0x36>
    580a:	9b08      	ldr	r3, [sp, #32]
    580c:	2b01      	cmp	r3, #1
    580e:	d034      	beq.n	587a <Power_Ip_SMC_ModeConfig+0x9e>
    5810:	e0a3      	b.n	595a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5812:	4b58      	ldr	r3, [pc, #352]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    5814:	68db      	ldr	r3, [r3, #12]
    5816:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5818:	9b06      	ldr	r3, [sp, #24]
    581a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    581e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5820:	4a54      	ldr	r2, [pc, #336]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    5822:	9b06      	ldr	r3, [sp, #24]
    5824:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5826:	aa02      	add	r2, sp, #8
    5828:	a903      	add	r1, sp, #12
    582a:	a804      	add	r0, sp, #16
    582c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5830:	f7ff fece 	bl	55d0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5834:	9a02      	ldr	r2, [sp, #8]
    5836:	a903      	add	r1, sp, #12
    5838:	ab04      	add	r3, sp, #16
    583a:	4618      	mov	r0, r3
    583c:	f7ff fee2 	bl	5604 <Power_Ip_TimeoutExpired>
    5840:	4603      	mov	r3, r0
    5842:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5846:	4b4b      	ldr	r3, [pc, #300]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    5848:	695b      	ldr	r3, [r3, #20]
    584a:	f003 0301 	and.w	r3, r3, #1
    584e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5850:	9b05      	ldr	r3, [sp, #20]
    5852:	2b01      	cmp	r3, #1
    5854:	d006      	beq.n	5864 <Power_Ip_SMC_ModeConfig+0x88>
    5856:	f89d 301f 	ldrb.w	r3, [sp, #31]
    585a:	f083 0301 	eor.w	r3, r3, #1
    585e:	b2db      	uxtb	r3, r3
    5860:	2b00      	cmp	r3, #0
    5862:	d1e7      	bne.n	5834 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5864:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5868:	2b00      	cmp	r3, #0
    586a:	d079      	beq.n	5960 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    586c:	2301      	movs	r3, #1
    586e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5870:	21ff      	movs	r1, #255	; 0xff
    5872:	2000      	movs	r0, #0
    5874:	f7ff fe90 	bl	5598 <Power_Ip_ReportPowerErrors>
            }

            break;
    5878:	e072      	b.n	5960 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    587a:	4b3e      	ldr	r3, [pc, #248]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    587c:	68db      	ldr	r3, [r3, #12]
    587e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5880:	9b06      	ldr	r3, [sp, #24]
    5882:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5886:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5888:	9b06      	ldr	r3, [sp, #24]
    588a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    588e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5890:	4a38      	ldr	r2, [pc, #224]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    5892:	9b06      	ldr	r3, [sp, #24]
    5894:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5896:	aa02      	add	r2, sp, #8
    5898:	a903      	add	r1, sp, #12
    589a:	a804      	add	r0, sp, #16
    589c:	f24c 3350 	movw	r3, #50000	; 0xc350
    58a0:	f7ff fe96 	bl	55d0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    58a4:	9a02      	ldr	r2, [sp, #8]
    58a6:	a903      	add	r1, sp, #12
    58a8:	ab04      	add	r3, sp, #16
    58aa:	4618      	mov	r0, r3
    58ac:	f7ff feaa 	bl	5604 <Power_Ip_TimeoutExpired>
    58b0:	4603      	mov	r3, r0
    58b2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    58b6:	4b2f      	ldr	r3, [pc, #188]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    58b8:	695b      	ldr	r3, [r3, #20]
    58ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    58be:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    58c0:	9b05      	ldr	r3, [sp, #20]
    58c2:	2b80      	cmp	r3, #128	; 0x80
    58c4:	d006      	beq.n	58d4 <Power_Ip_SMC_ModeConfig+0xf8>
    58c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    58ca:	f083 0301 	eor.w	r3, r3, #1
    58ce:	b2db      	uxtb	r3, r3
    58d0:	2b00      	cmp	r3, #0
    58d2:	d1e7      	bne.n	58a4 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    58d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    58d8:	2b00      	cmp	r3, #0
    58da:	d043      	beq.n	5964 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58dc:	2301      	movs	r3, #1
    58de:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58e0:	21ff      	movs	r1, #255	; 0xff
    58e2:	2000      	movs	r0, #0
    58e4:	f7ff fe58 	bl	5598 <Power_Ip_ReportPowerErrors>
            }

            break;
    58e8:	e03c      	b.n	5964 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    58ea:	4b22      	ldr	r3, [pc, #136]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    58ec:	68db      	ldr	r3, [r3, #12]
    58ee:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    58f0:	9b06      	ldr	r3, [sp, #24]
    58f2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    58f6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    58f8:	9b06      	ldr	r3, [sp, #24]
    58fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58fe:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5900:	4a1c      	ldr	r2, [pc, #112]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    5902:	9b06      	ldr	r3, [sp, #24]
    5904:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5906:	aa02      	add	r2, sp, #8
    5908:	a903      	add	r1, sp, #12
    590a:	a804      	add	r0, sp, #16
    590c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5910:	f7ff fe5e 	bl	55d0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5914:	9a02      	ldr	r2, [sp, #8]
    5916:	a903      	add	r1, sp, #12
    5918:	ab04      	add	r3, sp, #16
    591a:	4618      	mov	r0, r3
    591c:	f7ff fe72 	bl	5604 <Power_Ip_TimeoutExpired>
    5920:	4603      	mov	r3, r0
    5922:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5926:	4b13      	ldr	r3, [pc, #76]	; (5974 <Power_Ip_SMC_ModeConfig+0x198>)
    5928:	695b      	ldr	r3, [r3, #20]
    592a:	f003 0304 	and.w	r3, r3, #4
    592e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5930:	9b05      	ldr	r3, [sp, #20]
    5932:	2b04      	cmp	r3, #4
    5934:	d006      	beq.n	5944 <Power_Ip_SMC_ModeConfig+0x168>
    5936:	f89d 301f 	ldrb.w	r3, [sp, #31]
    593a:	f083 0301 	eor.w	r3, r3, #1
    593e:	b2db      	uxtb	r3, r3
    5940:	2b00      	cmp	r3, #0
    5942:	d1e7      	bne.n	5914 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5944:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5948:	2b00      	cmp	r3, #0
    594a:	d00d      	beq.n	5968 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    594c:	2301      	movs	r3, #1
    594e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5950:	21ff      	movs	r1, #255	; 0xff
    5952:	2000      	movs	r0, #0
    5954:	f7ff fe20 	bl	5598 <Power_Ip_ReportPowerErrors>
            }

            break;
    5958:	e006      	b.n	5968 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    595a:	2301      	movs	r3, #1
    595c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    595e:	e004      	b.n	596a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5960:	bf00      	nop
    5962:	e002      	b.n	596a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5964:	bf00      	nop
    5966:	e000      	b.n	596a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5968:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    596c:	4618      	mov	r0, r3
    596e:	b00b      	add	sp, #44	; 0x2c
    5970:	f85d fb04 	ldr.w	pc, [sp], #4
    5974:	4007e000 	.word	0x4007e000

00005978 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5978:	b500      	push	{lr}
    597a:	b085      	sub	sp, #20
    597c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    597e:	9b01      	ldr	r3, [sp, #4]
    5980:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5982:	9803      	ldr	r0, [sp, #12]
    5984:	f000 fbc8 	bl	6118 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5988:	4a03      	ldr	r2, [pc, #12]	; (5998 <Port_Init+0x20>)
    598a:	9b03      	ldr	r3, [sp, #12]
    598c:	6013      	str	r3, [r2, #0]
        }
    }
}
    598e:	bf00      	nop
    5990:	b005      	add	sp, #20
    5992:	f85d fb04 	ldr.w	pc, [sp], #4
    5996:	bf00      	nop
    5998:	1fff8d10 	.word	0x1fff8d10

0000599c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    599c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    599e:	4b03      	ldr	r3, [pc, #12]	; (59ac <Port_RefreshPortDirection+0x10>)
    59a0:	681b      	ldr	r3, [r3, #0]
    59a2:	4618      	mov	r0, r3
    59a4:	f000 fc10 	bl	61c8 <Port_Ipw_RefreshPortDirection>
    }
}
    59a8:	bf00      	nop
    59aa:	bd08      	pop	{r3, pc}
    59ac:	1fff8d10 	.word	0x1fff8d10

000059b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    59b0:	b086      	sub	sp, #24
    59b2:	9003      	str	r0, [sp, #12]
    59b4:	9102      	str	r1, [sp, #8]
    59b6:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    59b8:	23ff      	movs	r3, #255	; 0xff
    59ba:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    59bc:	9b03      	ldr	r3, [sp, #12]
    59be:	4a39      	ldr	r2, [pc, #228]	; (5aa4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    59c0:	4293      	cmp	r3, r2
    59c2:	d151      	bne.n	5a68 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    59c4:	9b02      	ldr	r3, [sp, #8]
    59c6:	2b10      	cmp	r3, #16
    59c8:	d867      	bhi.n	5a9a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    59ca:	a201      	add	r2, pc, #4	; (adr r2, 59d0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    59cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59d0:	00005a15 	.word	0x00005a15
    59d4:	00005a23 	.word	0x00005a23
    59d8:	00005a9b 	.word	0x00005a9b
    59dc:	00005a9b 	.word	0x00005a9b
    59e0:	00005a9b 	.word	0x00005a9b
    59e4:	00005a9b 	.word	0x00005a9b
    59e8:	00005a9b 	.word	0x00005a9b
    59ec:	00005a9b 	.word	0x00005a9b
    59f0:	00005a9b 	.word	0x00005a9b
    59f4:	00005a9b 	.word	0x00005a9b
    59f8:	00005a9b 	.word	0x00005a9b
    59fc:	00005a9b 	.word	0x00005a9b
    5a00:	00005a9b 	.word	0x00005a9b
    5a04:	00005a31 	.word	0x00005a31
    5a08:	00005a3f 	.word	0x00005a3f
    5a0c:	00005a4d 	.word	0x00005a4d
    5a10:	00005a5b 	.word	0x00005a5b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5a14:	2301      	movs	r3, #1
    5a16:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5a18:	9a05      	ldr	r2, [sp, #20]
    5a1a:	9b01      	ldr	r3, [sp, #4]
    5a1c:	4313      	orrs	r3, r2
    5a1e:	9305      	str	r3, [sp, #20]
                break;
    5a20:	e03c      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5a22:	2302      	movs	r3, #2
    5a24:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5a26:	9a05      	ldr	r2, [sp, #20]
    5a28:	9b01      	ldr	r3, [sp, #4]
    5a2a:	4313      	orrs	r3, r2
    5a2c:	9305      	str	r3, [sp, #20]
                break;
    5a2e:	e035      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5a30:	2304      	movs	r3, #4
    5a32:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5a34:	9a05      	ldr	r2, [sp, #20]
    5a36:	9b01      	ldr	r3, [sp, #4]
    5a38:	4313      	orrs	r3, r2
    5a3a:	9305      	str	r3, [sp, #20]
                break;
    5a3c:	e02e      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5a3e:	2308      	movs	r3, #8
    5a40:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5a42:	9a05      	ldr	r2, [sp, #20]
    5a44:	9b01      	ldr	r3, [sp, #4]
    5a46:	4313      	orrs	r3, r2
    5a48:	9305      	str	r3, [sp, #20]
                break;
    5a4a:	e027      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5a4c:	230e      	movs	r3, #14
    5a4e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5a50:	9a05      	ldr	r2, [sp, #20]
    5a52:	9b01      	ldr	r3, [sp, #4]
    5a54:	4013      	ands	r3, r2
    5a56:	9305      	str	r3, [sp, #20]
                break;
    5a58:	e020      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5a5a:	230d      	movs	r3, #13
    5a5c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5a5e:	9a05      	ldr	r2, [sp, #20]
    5a60:	9b01      	ldr	r3, [sp, #4]
    5a62:	4013      	ands	r3, r2
    5a64:	9305      	str	r3, [sp, #20]
                break;
    5a66:	e019      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5a68:	9b03      	ldr	r3, [sp, #12]
    5a6a:	4a0f      	ldr	r2, [pc, #60]	; (5aa8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5a6c:	4293      	cmp	r3, r2
    5a6e:	d115      	bne.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5a70:	9b02      	ldr	r3, [sp, #8]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d003      	beq.n	5a7e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5a76:	9b02      	ldr	r3, [sp, #8]
    5a78:	2b01      	cmp	r3, #1
    5a7a:	d007      	beq.n	5a8c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5a7c:	e00e      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5a7e:	230b      	movs	r3, #11
    5a80:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5a82:	9a05      	ldr	r2, [sp, #20]
    5a84:	9b01      	ldr	r3, [sp, #4]
    5a86:	4013      	ands	r3, r2
    5a88:	9305      	str	r3, [sp, #20]
                break;
    5a8a:	e007      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5a8c:	2307      	movs	r3, #7
    5a8e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5a90:	9a05      	ldr	r2, [sp, #20]
    5a92:	9b01      	ldr	r3, [sp, #4]
    5a94:	4013      	ands	r3, r2
    5a96:	9305      	str	r3, [sp, #20]
                break;
    5a98:	e000      	b.n	5a9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5a9a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5a9c:	9b05      	ldr	r3, [sp, #20]
}
    5a9e:	4618      	mov	r0, r3
    5aa0:	b006      	add	sp, #24
    5aa2:	4770      	bx	lr
    5aa4:	4004a000 	.word	0x4004a000
    5aa8:	4004b000 	.word	0x4004b000

00005aac <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5aac:	b500      	push	{lr}
    5aae:	b089      	sub	sp, #36	; 0x24
    5ab0:	9003      	str	r0, [sp, #12]
    5ab2:	9102      	str	r1, [sp, #8]
    5ab4:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5ab6:	9b01      	ldr	r3, [sp, #4]
    5ab8:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5aba:	9b01      	ldr	r3, [sp, #4]
    5abc:	2b08      	cmp	r3, #8
    5abe:	d121      	bne.n	5b04 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5ac0:	4b13      	ldr	r3, [pc, #76]	; (5b10 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ac2:	685b      	ldr	r3, [r3, #4]
    5ac4:	f003 030f 	and.w	r3, r3, #15
    5ac8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5aca:	9a06      	ldr	r2, [sp, #24]
    5acc:	9902      	ldr	r1, [sp, #8]
    5ace:	9803      	ldr	r0, [sp, #12]
    5ad0:	f7ff ff6e 	bl	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5ad4:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5ad6:	9b05      	ldr	r3, [sp, #20]
    5ad8:	2bff      	cmp	r3, #255	; 0xff
    5ada:	d011      	beq.n	5b00 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5adc:	f001 f984 	bl	6de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5ae0:	4b0b      	ldr	r3, [pc, #44]	; (5b10 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ae2:	685b      	ldr	r3, [r3, #4]
    5ae4:	4a0a      	ldr	r2, [pc, #40]	; (5b10 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ae6:	f023 030f 	bic.w	r3, r3, #15
    5aea:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5aec:	4b08      	ldr	r3, [pc, #32]	; (5b10 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5aee:	685a      	ldr	r2, [r3, #4]
    5af0:	9b05      	ldr	r3, [sp, #20]
    5af2:	f003 030f 	and.w	r3, r3, #15
    5af6:	4906      	ldr	r1, [pc, #24]	; (5b10 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5af8:	4313      	orrs	r3, r2
    5afa:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5afc:	f001 f9a0 	bl	6e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5b00:	2300      	movs	r3, #0
    5b02:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5b04:	9b07      	ldr	r3, [sp, #28]
}
    5b06:	4618      	mov	r0, r3
    5b08:	b009      	add	sp, #36	; 0x24
    5b0a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b0e:	bf00      	nop
    5b10:	40048000 	.word	0x40048000

00005b14 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5b14:	b500      	push	{lr}
    5b16:	b087      	sub	sp, #28
    5b18:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5b1a:	2300      	movs	r3, #0
    5b1c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5b1e:	2300      	movs	r3, #0
    5b20:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5b22:	2300      	movs	r3, #0
    5b24:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5b26:	9b01      	ldr	r3, [sp, #4]
    5b28:	68db      	ldr	r3, [r3, #12]
    5b2a:	2b02      	cmp	r3, #2
    5b2c:	d00a      	beq.n	5b44 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5b2e:	9b05      	ldr	r3, [sp, #20]
    5b30:	f043 0302 	orr.w	r3, r3, #2
    5b34:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5b36:	9b01      	ldr	r3, [sp, #4]
    5b38:	68db      	ldr	r3, [r3, #12]
    5b3a:	f003 0301 	and.w	r3, r3, #1
    5b3e:	9a05      	ldr	r2, [sp, #20]
    5b40:	4313      	orrs	r3, r2
    5b42:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5b44:	9b01      	ldr	r3, [sp, #4]
    5b46:	699b      	ldr	r3, [r3, #24]
    5b48:	019b      	lsls	r3, r3, #6
    5b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5b4e:	9a05      	ldr	r2, [sp, #20]
    5b50:	4313      	orrs	r3, r2
    5b52:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	6a1b      	ldr	r3, [r3, #32]
    5b58:	03db      	lsls	r3, r3, #15
    5b5a:	b29b      	uxth	r3, r3
    5b5c:	9a05      	ldr	r2, [sp, #20]
    5b5e:	4313      	orrs	r3, r2
    5b60:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5b62:	9b01      	ldr	r3, [sp, #4]
    5b64:	7f1b      	ldrb	r3, [r3, #28]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d001      	beq.n	5b6e <Port_Ci_Port_Ip_PinInit+0x5a>
    5b6a:	2310      	movs	r3, #16
    5b6c:	e000      	b.n	5b70 <Port_Ci_Port_Ip_PinInit+0x5c>
    5b6e:	2300      	movs	r3, #0
    5b70:	9a05      	ldr	r2, [sp, #20]
    5b72:	4313      	orrs	r3, r2
    5b74:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5b76:	9b01      	ldr	r3, [sp, #4]
    5b78:	691b      	ldr	r3, [r3, #16]
    5b7a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5b7c:	9b01      	ldr	r3, [sp, #4]
    5b7e:	6818      	ldr	r0, [r3, #0]
    5b80:	9b01      	ldr	r3, [sp, #4]
    5b82:	689b      	ldr	r3, [r3, #8]
    5b84:	9a04      	ldr	r2, [sp, #16]
    5b86:	4619      	mov	r1, r3
    5b88:	f7ff ff90 	bl	5aac <Port_Ci_Port_Ip_ConfigureInterleave>
    5b8c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5b8e:	9b03      	ldr	r3, [sp, #12]
    5b90:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5b92:	9b04      	ldr	r3, [sp, #16]
    5b94:	021b      	lsls	r3, r3, #8
    5b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5b9a:	9a05      	ldr	r2, [sp, #20]
    5b9c:	4313      	orrs	r3, r2
    5b9e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5ba0:	f000 ff88 	bl	6ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5ba4:	9b01      	ldr	r3, [sp, #4]
    5ba6:	681b      	ldr	r3, [r3, #0]
    5ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5bac:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5bae:	9b01      	ldr	r3, [sp, #4]
    5bb0:	689b      	ldr	r3, [r3, #8]
    5bb2:	2201      	movs	r2, #1
    5bb4:	fa02 f303 	lsl.w	r3, r2, r3
    5bb8:	43db      	mvns	r3, r3
    5bba:	9a02      	ldr	r2, [sp, #8]
    5bbc:	4013      	ands	r3, r2
    5bbe:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5bc0:	9b01      	ldr	r3, [sp, #4]
    5bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d001      	beq.n	5bce <Port_Ci_Port_Ip_PinInit+0xba>
    5bca:	2201      	movs	r2, #1
    5bcc:	e000      	b.n	5bd0 <Port_Ci_Port_Ip_PinInit+0xbc>
    5bce:	2200      	movs	r2, #0
    5bd0:	9b01      	ldr	r3, [sp, #4]
    5bd2:	689b      	ldr	r3, [r3, #8]
    5bd4:	fa02 f303 	lsl.w	r3, r2, r3
    5bd8:	9a02      	ldr	r2, [sp, #8]
    5bda:	4313      	orrs	r3, r2
    5bdc:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5bde:	9b01      	ldr	r3, [sp, #4]
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	9a02      	ldr	r2, [sp, #8]
    5be4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5be8:	f000 ff90 	bl	6b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5bec:	9b04      	ldr	r3, [sp, #16]
    5bee:	2b01      	cmp	r3, #1
    5bf0:	d16d      	bne.n	5cce <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5bf2:	9b01      	ldr	r3, [sp, #4]
    5bf4:	695b      	ldr	r3, [r3, #20]
    5bf6:	2b02      	cmp	r3, #2
    5bf8:	d138      	bne.n	5c6c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5bfa:	9b01      	ldr	r3, [sp, #4]
    5bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5c00:	2b01      	cmp	r3, #1
    5c02:	d10f      	bne.n	5c24 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5c04:	f000 ffa8 	bl	6b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5c08:	9b01      	ldr	r3, [sp, #4]
    5c0a:	685b      	ldr	r3, [r3, #4]
    5c0c:	6859      	ldr	r1, [r3, #4]
    5c0e:	9b01      	ldr	r3, [sp, #4]
    5c10:	689b      	ldr	r3, [r3, #8]
    5c12:	2201      	movs	r2, #1
    5c14:	409a      	lsls	r2, r3
    5c16:	9b01      	ldr	r3, [sp, #4]
    5c18:	685b      	ldr	r3, [r3, #4]
    5c1a:	430a      	orrs	r2, r1
    5c1c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5c1e:	f000 ffc7 	bl	6bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5c22:	e013      	b.n	5c4c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5c24:	9b01      	ldr	r3, [sp, #4]
    5c26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d10e      	bne.n	5c4c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5c2e:	f000 ffe5 	bl	6bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5c32:	9b01      	ldr	r3, [sp, #4]
    5c34:	685b      	ldr	r3, [r3, #4]
    5c36:	6899      	ldr	r1, [r3, #8]
    5c38:	9b01      	ldr	r3, [sp, #4]
    5c3a:	689b      	ldr	r3, [r3, #8]
    5c3c:	2201      	movs	r2, #1
    5c3e:	409a      	lsls	r2, r3
    5c40:	9b01      	ldr	r3, [sp, #4]
    5c42:	685b      	ldr	r3, [r3, #4]
    5c44:	430a      	orrs	r2, r1
    5c46:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5c48:	f001 f804 	bl	6c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5c4c:	f001 f828 	bl	6ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5c50:	9b01      	ldr	r3, [sp, #4]
    5c52:	685b      	ldr	r3, [r3, #4]
    5c54:	6959      	ldr	r1, [r3, #20]
    5c56:	9b01      	ldr	r3, [sp, #4]
    5c58:	689b      	ldr	r3, [r3, #8]
    5c5a:	2201      	movs	r2, #1
    5c5c:	409a      	lsls	r2, r3
    5c5e:	9b01      	ldr	r3, [sp, #4]
    5c60:	685b      	ldr	r3, [r3, #4]
    5c62:	430a      	orrs	r2, r1
    5c64:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5c66:	f001 f847 	bl	6cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5c6a:	e030      	b.n	5cce <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5c6c:	f001 f818 	bl	6ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5c70:	9b01      	ldr	r3, [sp, #4]
    5c72:	685b      	ldr	r3, [r3, #4]
    5c74:	6959      	ldr	r1, [r3, #20]
    5c76:	9b01      	ldr	r3, [sp, #4]
    5c78:	689b      	ldr	r3, [r3, #8]
    5c7a:	2201      	movs	r2, #1
    5c7c:	fa02 f303 	lsl.w	r3, r2, r3
    5c80:	43da      	mvns	r2, r3
    5c82:	9b01      	ldr	r3, [sp, #4]
    5c84:	685b      	ldr	r3, [r3, #4]
    5c86:	400a      	ands	r2, r1
    5c88:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5c8a:	f001 f835 	bl	6cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5c8e:	f001 f859 	bl	6d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5c92:	9b01      	ldr	r3, [sp, #4]
    5c94:	685b      	ldr	r3, [r3, #4]
    5c96:	6999      	ldr	r1, [r3, #24]
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	689b      	ldr	r3, [r3, #8]
    5c9c:	2201      	movs	r2, #1
    5c9e:	fa02 f303 	lsl.w	r3, r2, r3
    5ca2:	43da      	mvns	r2, r3
    5ca4:	9b01      	ldr	r3, [sp, #4]
    5ca6:	685b      	ldr	r3, [r3, #4]
    5ca8:	400a      	ands	r2, r1
    5caa:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5cac:	9b01      	ldr	r3, [sp, #4]
    5cae:	695b      	ldr	r3, [r3, #20]
    5cb0:	2b03      	cmp	r3, #3
    5cb2:	d10a      	bne.n	5cca <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	685b      	ldr	r3, [r3, #4]
    5cb8:	6999      	ldr	r1, [r3, #24]
    5cba:	9b01      	ldr	r3, [sp, #4]
    5cbc:	689b      	ldr	r3, [r3, #8]
    5cbe:	2201      	movs	r2, #1
    5cc0:	409a      	lsls	r2, r3
    5cc2:	9b01      	ldr	r3, [sp, #4]
    5cc4:	685b      	ldr	r3, [r3, #4]
    5cc6:	430a      	orrs	r2, r1
    5cc8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5cca:	f001 f867 	bl	6d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5cce:	9b01      	ldr	r3, [sp, #4]
    5cd0:	681b      	ldr	r3, [r3, #0]
    5cd2:	9a01      	ldr	r2, [sp, #4]
    5cd4:	6892      	ldr	r2, [r2, #8]
    5cd6:	9905      	ldr	r1, [sp, #20]
    5cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5cdc:	bf00      	nop
    5cde:	b007      	add	sp, #28
    5ce0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ce4 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5ce4:	b500      	push	{lr}
    5ce6:	b085      	sub	sp, #20
    5ce8:	9001      	str	r0, [sp, #4]
    5cea:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5cec:	2300      	movs	r3, #0
    5cee:	9303      	str	r3, [sp, #12]
    5cf0:	e00d      	b.n	5d0e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    5cf2:	9a03      	ldr	r2, [sp, #12]
    5cf4:	4613      	mov	r3, r2
    5cf6:	009b      	lsls	r3, r3, #2
    5cf8:	4413      	add	r3, r2
    5cfa:	00db      	lsls	r3, r3, #3
    5cfc:	461a      	mov	r2, r3
    5cfe:	9b00      	ldr	r3, [sp, #0]
    5d00:	4413      	add	r3, r2
    5d02:	4618      	mov	r0, r3
    5d04:	f7ff ff06 	bl	5b14 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5d08:	9b03      	ldr	r3, [sp, #12]
    5d0a:	3301      	adds	r3, #1
    5d0c:	9303      	str	r3, [sp, #12]
    5d0e:	9a03      	ldr	r2, [sp, #12]
    5d10:	9b01      	ldr	r3, [sp, #4]
    5d12:	429a      	cmp	r2, r3
    5d14:	d3ed      	bcc.n	5cf2 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5d16:	2300      	movs	r3, #0
}
    5d18:	4618      	mov	r0, r3
    5d1a:	b005      	add	sp, #20
    5d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00005d20 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5d20:	b500      	push	{lr}
    5d22:	b087      	sub	sp, #28
    5d24:	9003      	str	r0, [sp, #12]
    5d26:	9102      	str	r1, [sp, #8]
    5d28:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5d2a:	9a01      	ldr	r2, [sp, #4]
    5d2c:	9902      	ldr	r1, [sp, #8]
    5d2e:	9803      	ldr	r0, [sp, #12]
    5d30:	f7ff febc 	bl	5aac <Port_Ci_Port_Ip_ConfigureInterleave>
    5d34:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5d36:	f001 f8a9 	bl	6e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5d3a:	9b03      	ldr	r3, [sp, #12]
    5d3c:	9a02      	ldr	r2, [sp, #8]
    5d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d42:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5d44:	9b04      	ldr	r3, [sp, #16]
    5d46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5d4a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5d4c:	9b05      	ldr	r3, [sp, #20]
    5d4e:	021b      	lsls	r3, r3, #8
    5d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5d54:	9a04      	ldr	r2, [sp, #16]
    5d56:	4313      	orrs	r3, r2
    5d58:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5d5a:	9b03      	ldr	r3, [sp, #12]
    5d5c:	9a02      	ldr	r2, [sp, #8]
    5d5e:	9904      	ldr	r1, [sp, #16]
    5d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5d64:	f001 f8be 	bl	6ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5d68:	bf00      	nop
    5d6a:	b007      	add	sp, #28
    5d6c:	f85d fb04 	ldr.w	pc, [sp], #4

00005d70 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5d70:	b500      	push	{lr}
    5d72:	b083      	sub	sp, #12
    5d74:	9001      	str	r0, [sp, #4]
    5d76:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5d78:	f001 f8da 	bl	6f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5d7c:	9b01      	ldr	r3, [sp, #4]
    5d7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5d82:	2101      	movs	r1, #1
    5d84:	9b00      	ldr	r3, [sp, #0]
    5d86:	fa01 f303 	lsl.w	r3, r1, r3
    5d8a:	431a      	orrs	r2, r3
    5d8c:	9b01      	ldr	r3, [sp, #4]
    5d8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5d92:	f001 f8f9 	bl	6f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5d96:	bf00      	nop
    5d98:	b003      	add	sp, #12
    5d9a:	f85d fb04 	ldr.w	pc, [sp], #4

00005d9e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5d9e:	b500      	push	{lr}
    5da0:	b083      	sub	sp, #12
    5da2:	9001      	str	r0, [sp, #4]
    5da4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5da6:	f001 f915 	bl	6fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5daa:	9b01      	ldr	r3, [sp, #4]
    5dac:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5db0:	2101      	movs	r1, #1
    5db2:	9b00      	ldr	r3, [sp, #0]
    5db4:	fa01 f303 	lsl.w	r3, r1, r3
    5db8:	43db      	mvns	r3, r3
    5dba:	401a      	ands	r2, r3
    5dbc:	9b01      	ldr	r3, [sp, #4]
    5dbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    5dc2:	f001 f933 	bl	702c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5dc6:	bf00      	nop
    5dc8:	b003      	add	sp, #12
    5dca:	f85d fb04 	ldr.w	pc, [sp], #4

00005dce <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5dce:	b082      	sub	sp, #8
    5dd0:	9001      	str	r0, [sp, #4]
    5dd2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5dd4:	9b00      	ldr	r3, [sp, #0]
    5dd6:	785b      	ldrb	r3, [r3, #1]
    5dd8:	f003 0201 	and.w	r2, r3, #1
    5ddc:	9b01      	ldr	r3, [sp, #4]
    5dde:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    5de2:	9b00      	ldr	r3, [sp, #0]
    5de4:	789b      	ldrb	r3, [r3, #2]
    5de6:	f003 021f 	and.w	r2, r3, #31
    5dea:	9b01      	ldr	r3, [sp, #4]
    5dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5df0:	bf00      	nop
    5df2:	b002      	add	sp, #8
    5df4:	4770      	bx	lr

00005df6 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5df6:	b086      	sub	sp, #24
    5df8:	9003      	str	r0, [sp, #12]
    5dfa:	9301      	str	r3, [sp, #4]
    5dfc:	460b      	mov	r3, r1
    5dfe:	f8ad 300a 	strh.w	r3, [sp, #10]
    5e02:	4613      	mov	r3, r2
    5e04:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5e08:	2300      	movs	r3, #0
    5e0a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    5e0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e12:	f043 0301 	orr.w	r3, r3, #1
    5e16:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5e1a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e1e:	f043 0302 	orr.w	r3, r3, #2
    5e22:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5e26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e2a:	f043 0310 	orr.w	r3, r3, #16
    5e2e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    5e32:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e3a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5e3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5e46:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5e4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    5e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5e56:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5e5a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5e5e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5e62:	4013      	ands	r3, r2
    5e64:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5e68:	9b01      	ldr	r3, [sp, #4]
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d003      	beq.n	5e76 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5e6e:	9b01      	ldr	r3, [sp, #4]
    5e70:	2b01      	cmp	r3, #1
    5e72:	d00a      	beq.n	5e8a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5e74:	e013      	b.n	5e9e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5e76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e7a:	041a      	lsls	r2, r3, #16
    5e7c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e80:	431a      	orrs	r2, r3
    5e82:	9b03      	ldr	r3, [sp, #12]
    5e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5e88:	e009      	b.n	5e9e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5e8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e8e:	041a      	lsls	r2, r3, #16
    5e90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e94:	431a      	orrs	r2, r3
    5e96:	9b03      	ldr	r3, [sp, #12]
    5e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5e9c:	bf00      	nop
    }
}
    5e9e:	bf00      	nop
    5ea0:	b006      	add	sp, #24
    5ea2:	4770      	bx	lr

00005ea4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5ea4:	b500      	push	{lr}
    5ea6:	b087      	sub	sp, #28
    5ea8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5eaa:	9b01      	ldr	r3, [sp, #4]
    5eac:	885b      	ldrh	r3, [r3, #2]
    5eae:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	689b      	ldr	r3, [r3, #8]
    5eb6:	7a1b      	ldrb	r3, [r3, #8]
    5eb8:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5ebc:	9b01      	ldr	r3, [sp, #4]
    5ebe:	689b      	ldr	r3, [r3, #8]
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5ec4:	9b01      	ldr	r3, [sp, #4]
    5ec6:	689b      	ldr	r3, [r3, #8]
    5ec8:	685b      	ldr	r3, [r3, #4]
    5eca:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5ecc:	2300      	movs	r3, #0
    5ece:	f8ad 3016 	strh.w	r3, [sp, #22]
    5ed2:	e111      	b.n	60f8 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5ed4:	9b02      	ldr	r3, [sp, #8]
    5ed6:	2b02      	cmp	r3, #2
    5ed8:	d169      	bne.n	5fae <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5eda:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5ede:	2b01      	cmp	r3, #1
    5ee0:	d11a      	bne.n	5f18 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ee2:	9b01      	ldr	r3, [sp, #4]
    5ee4:	685a      	ldr	r2, [r3, #4]
    5ee6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5eea:	005b      	lsls	r3, r3, #1
    5eec:	4413      	add	r3, r2
    5eee:	881b      	ldrh	r3, [r3, #0]
    5ef0:	f003 021f 	and.w	r2, r3, #31
    5ef4:	9b01      	ldr	r3, [sp, #4]
    5ef6:	6859      	ldr	r1, [r3, #4]
    5ef8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5efc:	005b      	lsls	r3, r3, #1
    5efe:	440b      	add	r3, r1
    5f00:	881b      	ldrh	r3, [r3, #0]
    5f02:	095b      	lsrs	r3, r3, #5
    5f04:	b29b      	uxth	r3, r3
    5f06:	4619      	mov	r1, r3
    5f08:	4b81      	ldr	r3, [pc, #516]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5f0e:	2101      	movs	r1, #1
    5f10:	fa01 f202 	lsl.w	r2, r1, r2
    5f14:	605a      	str	r2, [r3, #4]
    5f16:	e01d      	b.n	5f54 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5f18:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d119      	bne.n	5f54 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5f20:	9b01      	ldr	r3, [sp, #4]
    5f22:	685a      	ldr	r2, [r3, #4]
    5f24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f28:	005b      	lsls	r3, r3, #1
    5f2a:	4413      	add	r3, r2
    5f2c:	881b      	ldrh	r3, [r3, #0]
    5f2e:	f003 021f 	and.w	r2, r3, #31
    5f32:	9b01      	ldr	r3, [sp, #4]
    5f34:	6859      	ldr	r1, [r3, #4]
    5f36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f3a:	005b      	lsls	r3, r3, #1
    5f3c:	440b      	add	r3, r1
    5f3e:	881b      	ldrh	r3, [r3, #0]
    5f40:	095b      	lsrs	r3, r3, #5
    5f42:	b29b      	uxth	r3, r3
    5f44:	4619      	mov	r1, r3
    5f46:	4b72      	ldr	r3, [pc, #456]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5f4c:	2101      	movs	r1, #1
    5f4e:	fa01 f202 	lsl.w	r2, r1, r2
    5f52:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5f54:	f001 f890 	bl	7078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	685a      	ldr	r2, [r3, #4]
    5f5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f60:	005b      	lsls	r3, r3, #1
    5f62:	4413      	add	r3, r2
    5f64:	881b      	ldrh	r3, [r3, #0]
    5f66:	095b      	lsrs	r3, r3, #5
    5f68:	b29b      	uxth	r3, r3
    5f6a:	461a      	mov	r2, r3
    5f6c:	4b68      	ldr	r3, [pc, #416]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f72:	6959      	ldr	r1, [r3, #20]
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	685a      	ldr	r2, [r3, #4]
    5f78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f7c:	005b      	lsls	r3, r3, #1
    5f7e:	4413      	add	r3, r2
    5f80:	881b      	ldrh	r3, [r3, #0]
    5f82:	f003 031f 	and.w	r3, r3, #31
    5f86:	2201      	movs	r2, #1
    5f88:	409a      	lsls	r2, r3
    5f8a:	9b01      	ldr	r3, [sp, #4]
    5f8c:	6858      	ldr	r0, [r3, #4]
    5f8e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f92:	005b      	lsls	r3, r3, #1
    5f94:	4403      	add	r3, r0
    5f96:	881b      	ldrh	r3, [r3, #0]
    5f98:	095b      	lsrs	r3, r3, #5
    5f9a:	b29b      	uxth	r3, r3
    5f9c:	4618      	mov	r0, r3
    5f9e:	4b5c      	ldr	r3, [pc, #368]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    5fa0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5fa4:	430a      	orrs	r2, r1
    5fa6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5fa8:	f001 f892 	bl	70d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5fac:	e086      	b.n	60bc <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5fae:	f001 f863 	bl	7078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	685a      	ldr	r2, [r3, #4]
    5fb6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5fba:	005b      	lsls	r3, r3, #1
    5fbc:	4413      	add	r3, r2
    5fbe:	881b      	ldrh	r3, [r3, #0]
    5fc0:	095b      	lsrs	r3, r3, #5
    5fc2:	b29b      	uxth	r3, r3
    5fc4:	461a      	mov	r2, r3
    5fc6:	4b52      	ldr	r3, [pc, #328]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    5fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5fcc:	6959      	ldr	r1, [r3, #20]
    5fce:	9b01      	ldr	r3, [sp, #4]
    5fd0:	685a      	ldr	r2, [r3, #4]
    5fd2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5fd6:	005b      	lsls	r3, r3, #1
    5fd8:	4413      	add	r3, r2
    5fda:	881b      	ldrh	r3, [r3, #0]
    5fdc:	f003 031f 	and.w	r3, r3, #31
    5fe0:	2201      	movs	r2, #1
    5fe2:	fa02 f303 	lsl.w	r3, r2, r3
    5fe6:	43da      	mvns	r2, r3
    5fe8:	9b01      	ldr	r3, [sp, #4]
    5fea:	6858      	ldr	r0, [r3, #4]
    5fec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ff0:	005b      	lsls	r3, r3, #1
    5ff2:	4403      	add	r3, r0
    5ff4:	881b      	ldrh	r3, [r3, #0]
    5ff6:	095b      	lsrs	r3, r3, #5
    5ff8:	b29b      	uxth	r3, r3
    5ffa:	4618      	mov	r0, r3
    5ffc:	4b44      	ldr	r3, [pc, #272]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    5ffe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6002:	400a      	ands	r2, r1
    6004:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6006:	f001 f863 	bl	70d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    600a:	f001 f887 	bl	711c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    600e:	9b01      	ldr	r3, [sp, #4]
    6010:	685a      	ldr	r2, [r3, #4]
    6012:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6016:	005b      	lsls	r3, r3, #1
    6018:	4413      	add	r3, r2
    601a:	881b      	ldrh	r3, [r3, #0]
    601c:	095b      	lsrs	r3, r3, #5
    601e:	b29b      	uxth	r3, r3
    6020:	461a      	mov	r2, r3
    6022:	4b3b      	ldr	r3, [pc, #236]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    6024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6028:	6999      	ldr	r1, [r3, #24]
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	685a      	ldr	r2, [r3, #4]
    602e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6032:	005b      	lsls	r3, r3, #1
    6034:	4413      	add	r3, r2
    6036:	881b      	ldrh	r3, [r3, #0]
    6038:	f003 031f 	and.w	r3, r3, #31
    603c:	2201      	movs	r2, #1
    603e:	fa02 f303 	lsl.w	r3, r2, r3
    6042:	43da      	mvns	r2, r3
    6044:	9b01      	ldr	r3, [sp, #4]
    6046:	6858      	ldr	r0, [r3, #4]
    6048:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    604c:	005b      	lsls	r3, r3, #1
    604e:	4403      	add	r3, r0
    6050:	881b      	ldrh	r3, [r3, #0]
    6052:	095b      	lsrs	r3, r3, #5
    6054:	b29b      	uxth	r3, r3
    6056:	4618      	mov	r0, r3
    6058:	4b2d      	ldr	r3, [pc, #180]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    605a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    605e:	400a      	ands	r2, r1
    6060:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6062:	9b02      	ldr	r3, [sp, #8]
    6064:	2b03      	cmp	r3, #3
    6066:	d127      	bne.n	60b8 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	685a      	ldr	r2, [r3, #4]
    606c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6070:	005b      	lsls	r3, r3, #1
    6072:	4413      	add	r3, r2
    6074:	881b      	ldrh	r3, [r3, #0]
    6076:	095b      	lsrs	r3, r3, #5
    6078:	b29b      	uxth	r3, r3
    607a:	461a      	mov	r2, r3
    607c:	4b24      	ldr	r3, [pc, #144]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    607e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6082:	6999      	ldr	r1, [r3, #24]
    6084:	9b01      	ldr	r3, [sp, #4]
    6086:	685a      	ldr	r2, [r3, #4]
    6088:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    608c:	005b      	lsls	r3, r3, #1
    608e:	4413      	add	r3, r2
    6090:	881b      	ldrh	r3, [r3, #0]
    6092:	f003 031f 	and.w	r3, r3, #31
    6096:	2201      	movs	r2, #1
    6098:	409a      	lsls	r2, r3
    609a:	9b01      	ldr	r3, [sp, #4]
    609c:	6858      	ldr	r0, [r3, #4]
    609e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60a2:	005b      	lsls	r3, r3, #1
    60a4:	4403      	add	r3, r0
    60a6:	881b      	ldrh	r3, [r3, #0]
    60a8:	095b      	lsrs	r3, r3, #5
    60aa:	b29b      	uxth	r3, r3
    60ac:	4618      	mov	r0, r3
    60ae:	4b18      	ldr	r3, [pc, #96]	; (6110 <Port_Ipw_Init_UnusedPins+0x26c>)
    60b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    60b4:	430a      	orrs	r2, r1
    60b6:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    60b8:	f001 f85c 	bl	7174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	685a      	ldr	r2, [r3, #4]
    60c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60c4:	005b      	lsls	r3, r3, #1
    60c6:	4413      	add	r3, r2
    60c8:	881b      	ldrh	r3, [r3, #0]
    60ca:	095b      	lsrs	r3, r3, #5
    60cc:	b29b      	uxth	r3, r3
    60ce:	461a      	mov	r2, r3
    60d0:	4b10      	ldr	r3, [pc, #64]	; (6114 <Port_Ipw_Init_UnusedPins+0x270>)
    60d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60d6:	9a01      	ldr	r2, [sp, #4]
    60d8:	6851      	ldr	r1, [r2, #4]
    60da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    60de:	0052      	lsls	r2, r2, #1
    60e0:	440a      	add	r2, r1
    60e2:	8812      	ldrh	r2, [r2, #0]
    60e4:	f002 021f 	and.w	r2, r2, #31
    60e8:	9903      	ldr	r1, [sp, #12]
    60ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    60ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60f2:	3301      	adds	r3, #1
    60f4:	f8ad 3016 	strh.w	r3, [sp, #22]
    60f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    60fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6100:	429a      	cmp	r2, r3
    6102:	f4ff aee7 	bcc.w	5ed4 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6106:	bf00      	nop
    6108:	bf00      	nop
    610a:	b007      	add	sp, #28
    610c:	f85d fb04 	ldr.w	pc, [sp], #4
    6110:	00008440 	.word	0x00008440
    6114:	0000842c 	.word	0x0000842c

00006118 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6118:	b500      	push	{lr}
    611a:	b085      	sub	sp, #20
    611c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    611e:	9b01      	ldr	r3, [sp, #4]
    6120:	7c1b      	ldrb	r3, [r3, #16]
    6122:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6126:	2300      	movs	r3, #0
    6128:	f8ad 300e 	strh.w	r3, [sp, #14]
    612c:	e035      	b.n	619a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	695a      	ldr	r2, [r3, #20]
    6132:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6136:	00db      	lsls	r3, r3, #3
    6138:	4413      	add	r3, r2
    613a:	781b      	ldrb	r3, [r3, #0]
    613c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6140:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6144:	4a1f      	ldr	r2, [pc, #124]	; (61c4 <Port_Ipw_Init+0xac>)
    6146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	695a      	ldr	r2, [r3, #20]
    614e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6152:	00db      	lsls	r3, r3, #3
    6154:	4413      	add	r3, r2
    6156:	4619      	mov	r1, r3
    6158:	f7ff fe39 	bl	5dce <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    615c:	f001 f978 	bl	7450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6160:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6164:	4a17      	ldr	r2, [pc, #92]	; (61c4 <Port_Ipw_Init+0xac>)
    6166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    616a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	695a      	ldr	r2, [r3, #20]
    6172:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6176:	00db      	lsls	r3, r3, #3
    6178:	4413      	add	r3, r2
    617a:	685a      	ldr	r2, [r3, #4]
    617c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6180:	4810      	ldr	r0, [pc, #64]	; (61c4 <Port_Ipw_Init+0xac>)
    6182:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6186:	430a      	orrs	r2, r1
    6188:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    618c:	f001 f98c 	bl	74a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6190:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6194:	3301      	adds	r3, #1
    6196:	f8ad 300e 	strh.w	r3, [sp, #14]
    619a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    619e:	b29b      	uxth	r3, r3
    61a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61a4:	429a      	cmp	r2, r3
    61a6:	d3c2      	bcc.n	612e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	6a1b      	ldr	r3, [r3, #32]
    61ac:	4619      	mov	r1, r3
    61ae:	2004      	movs	r0, #4
    61b0:	f7ff fd98 	bl	5ce4 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    61b4:	9801      	ldr	r0, [sp, #4]
    61b6:	f7ff fe75 	bl	5ea4 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    61ba:	bf00      	nop
    61bc:	b005      	add	sp, #20
    61be:	f85d fb04 	ldr.w	pc, [sp], #4
    61c2:	bf00      	nop
    61c4:	0000842c 	.word	0x0000842c

000061c8 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    61c8:	b500      	push	{lr}
    61ca:	b085      	sub	sp, #20
    61cc:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    61ce:	9b01      	ldr	r3, [sp, #4]
    61d0:	881b      	ldrh	r3, [r3, #0]
    61d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    61d6:	2300      	movs	r3, #0
    61d8:	f8ad 300e 	strh.w	r3, [sp, #14]
    61dc:	e0d2      	b.n	6384 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	68d9      	ldr	r1, [r3, #12]
    61e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61e6:	4613      	mov	r3, r2
    61e8:	009b      	lsls	r3, r3, #2
    61ea:	4413      	add	r3, r2
    61ec:	009b      	lsls	r3, r3, #2
    61ee:	440b      	add	r3, r1
    61f0:	7c5b      	ldrb	r3, [r3, #17]
    61f2:	f083 0301 	eor.w	r3, r3, #1
    61f6:	b2db      	uxtb	r3, r3
    61f8:	2b00      	cmp	r3, #0
    61fa:	f000 80be 	beq.w	637a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    61fe:	9b01      	ldr	r3, [sp, #4]
    6200:	68d9      	ldr	r1, [r3, #12]
    6202:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6206:	4613      	mov	r3, r2
    6208:	009b      	lsls	r3, r3, #2
    620a:	4413      	add	r3, r2
    620c:	009b      	lsls	r3, r3, #2
    620e:	440b      	add	r3, r1
    6210:	7c1b      	ldrb	r3, [r3, #16]
    6212:	2b00      	cmp	r3, #0
    6214:	f000 80b1 	beq.w	637a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6218:	9b01      	ldr	r3, [sp, #4]
    621a:	68d9      	ldr	r1, [r3, #12]
    621c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6220:	4613      	mov	r3, r2
    6222:	009b      	lsls	r3, r3, #2
    6224:	4413      	add	r3, r2
    6226:	009b      	lsls	r3, r3, #2
    6228:	440b      	add	r3, r1
    622a:	881b      	ldrh	r3, [r3, #0]
    622c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6230:	9b01      	ldr	r3, [sp, #4]
    6232:	68d9      	ldr	r1, [r3, #12]
    6234:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6238:	4613      	mov	r3, r2
    623a:	009b      	lsls	r3, r3, #2
    623c:	4413      	add	r3, r2
    623e:	009b      	lsls	r3, r3, #2
    6240:	440b      	add	r3, r1
    6242:	68db      	ldr	r3, [r3, #12]
    6244:	2b02      	cmp	r3, #2
    6246:	d11d      	bne.n	6284 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6248:	f001 fa4a 	bl	76e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    624c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6250:	095b      	lsrs	r3, r3, #5
    6252:	b29b      	uxth	r3, r3
    6254:	461a      	mov	r2, r3
    6256:	4b51      	ldr	r3, [pc, #324]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    625c:	6959      	ldr	r1, [r3, #20]
    625e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6262:	f003 031f 	and.w	r3, r3, #31
    6266:	2201      	movs	r2, #1
    6268:	409a      	lsls	r2, r3
    626a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    626e:	095b      	lsrs	r3, r3, #5
    6270:	b29b      	uxth	r3, r3
    6272:	4618      	mov	r0, r3
    6274:	4b49      	ldr	r3, [pc, #292]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6276:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    627a:	430a      	orrs	r2, r1
    627c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    627e:	f001 fa5b 	bl	7738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6282:	e07a      	b.n	637a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6284:	9b01      	ldr	r3, [sp, #4]
    6286:	68d9      	ldr	r1, [r3, #12]
    6288:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    628c:	4613      	mov	r3, r2
    628e:	009b      	lsls	r3, r3, #2
    6290:	4413      	add	r3, r2
    6292:	009b      	lsls	r3, r3, #2
    6294:	440b      	add	r3, r1
    6296:	68db      	ldr	r3, [r3, #12]
    6298:	2b01      	cmp	r3, #1
    629a:	d00b      	beq.n	62b4 <Port_Ipw_RefreshPortDirection+0xec>
    629c:	9b01      	ldr	r3, [sp, #4]
    629e:	68d9      	ldr	r1, [r3, #12]
    62a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    62a4:	4613      	mov	r3, r2
    62a6:	009b      	lsls	r3, r3, #2
    62a8:	4413      	add	r3, r2
    62aa:	009b      	lsls	r3, r3, #2
    62ac:	440b      	add	r3, r1
    62ae:	68db      	ldr	r3, [r3, #12]
    62b0:	2b03      	cmp	r3, #3
    62b2:	d162      	bne.n	637a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    62b4:	f001 fa14 	bl	76e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    62b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    62bc:	095b      	lsrs	r3, r3, #5
    62be:	b29b      	uxth	r3, r3
    62c0:	461a      	mov	r2, r3
    62c2:	4b36      	ldr	r3, [pc, #216]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    62c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62c8:	6959      	ldr	r1, [r3, #20]
    62ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    62ce:	f003 031f 	and.w	r3, r3, #31
    62d2:	2201      	movs	r2, #1
    62d4:	fa02 f303 	lsl.w	r3, r2, r3
    62d8:	43da      	mvns	r2, r3
    62da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    62de:	095b      	lsrs	r3, r3, #5
    62e0:	b29b      	uxth	r3, r3
    62e2:	4618      	mov	r0, r3
    62e4:	4b2d      	ldr	r3, [pc, #180]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    62e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    62ea:	400a      	ands	r2, r1
    62ec:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    62ee:	f001 fa23 	bl	7738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    62f2:	f001 fa47 	bl	7784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    62f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    62fa:	095b      	lsrs	r3, r3, #5
    62fc:	b29b      	uxth	r3, r3
    62fe:	461a      	mov	r2, r3
    6300:	4b26      	ldr	r3, [pc, #152]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6306:	6999      	ldr	r1, [r3, #24]
    6308:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    630c:	f003 031f 	and.w	r3, r3, #31
    6310:	2201      	movs	r2, #1
    6312:	fa02 f303 	lsl.w	r3, r2, r3
    6316:	43da      	mvns	r2, r3
    6318:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    631c:	095b      	lsrs	r3, r3, #5
    631e:	b29b      	uxth	r3, r3
    6320:	4618      	mov	r0, r3
    6322:	4b1e      	ldr	r3, [pc, #120]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6324:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6328:	400a      	ands	r2, r1
    632a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    632c:	9b01      	ldr	r3, [sp, #4]
    632e:	68d9      	ldr	r1, [r3, #12]
    6330:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6334:	4613      	mov	r3, r2
    6336:	009b      	lsls	r3, r3, #2
    6338:	4413      	add	r3, r2
    633a:	009b      	lsls	r3, r3, #2
    633c:	440b      	add	r3, r1
    633e:	68db      	ldr	r3, [r3, #12]
    6340:	2b03      	cmp	r3, #3
    6342:	d118      	bne.n	6376 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6344:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6348:	095b      	lsrs	r3, r3, #5
    634a:	b29b      	uxth	r3, r3
    634c:	461a      	mov	r2, r3
    634e:	4b13      	ldr	r3, [pc, #76]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6354:	6999      	ldr	r1, [r3, #24]
    6356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    635a:	f003 031f 	and.w	r3, r3, #31
    635e:	2201      	movs	r2, #1
    6360:	409a      	lsls	r2, r3
    6362:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6366:	095b      	lsrs	r3, r3, #5
    6368:	b29b      	uxth	r3, r3
    636a:	4618      	mov	r0, r3
    636c:	4b0b      	ldr	r3, [pc, #44]	; (639c <Port_Ipw_RefreshPortDirection+0x1d4>)
    636e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6372:	430a      	orrs	r2, r1
    6374:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6376:	f001 fa31 	bl	77dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    637a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    637e:	3301      	adds	r3, #1
    6380:	f8ad 300e 	strh.w	r3, [sp, #14]
    6384:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6388:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    638c:	429a      	cmp	r2, r3
    638e:	f4ff af26 	bcc.w	61de <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6392:	bf00      	nop
    6394:	bf00      	nop
    6396:	b005      	add	sp, #20
    6398:	f85d fb04 	ldr.w	pc, [sp], #4
    639c:	00008440 	.word	0x00008440

000063a0 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    63a0:	b500      	push	{lr}
    63a2:	b085      	sub	sp, #20
    63a4:	4603      	mov	r3, r0
    63a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    63aa:	2300      	movs	r3, #0
    63ac:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    63b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    63b4:	4618      	mov	r0, r3
    63b6:	f000 f871 	bl	649c <Dio_Ipw_ReadChannel>
    63ba:	4603      	mov	r3, r0
    63bc:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    63c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    63c4:	4618      	mov	r0, r3
    63c6:	b005      	add	sp, #20
    63c8:	f85d fb04 	ldr.w	pc, [sp], #4

000063cc <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    63cc:	b500      	push	{lr}
    63ce:	b083      	sub	sp, #12
    63d0:	4603      	mov	r3, r0
    63d2:	460a      	mov	r2, r1
    63d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    63d8:	4613      	mov	r3, r2
    63da:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    63de:	f89d 2005 	ldrb.w	r2, [sp, #5]
    63e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    63e6:	4611      	mov	r1, r2
    63e8:	4618      	mov	r0, r3
    63ea:	f000 f87d 	bl	64e8 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    63ee:	bf00      	nop
    63f0:	b003      	add	sp, #12
    63f2:	f85d fb04 	ldr.w	pc, [sp], #4

000063f6 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    63f6:	b500      	push	{lr}
    63f8:	b085      	sub	sp, #20
    63fa:	4603      	mov	r3, r0
    63fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6400:	2300      	movs	r3, #0
    6402:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6406:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    640a:	4618      	mov	r0, r3
    640c:	f000 f892 	bl	6534 <Dio_Ipw_FlipChannel>
    6410:	4603      	mov	r3, r0
    6412:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6416:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    641a:	4618      	mov	r0, r3
    641c:	b005      	add	sp, #20
    641e:	f85d fb04 	ldr.w	pc, [sp], #4

00006422 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6422:	b500      	push	{lr}
    6424:	b085      	sub	sp, #20
    6426:	4603      	mov	r3, r0
    6428:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    642c:	2300      	movs	r3, #0
    642e:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6430:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6434:	4618      	mov	r0, r3
    6436:	f000 f8b3 	bl	65a0 <Dio_Ipw_ReadPort>
    643a:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    643c:	9b03      	ldr	r3, [sp, #12]
}
    643e:	4618      	mov	r0, r3
    6440:	b005      	add	sp, #20
    6442:	f85d fb04 	ldr.w	pc, [sp], #4

00006446 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6446:	b500      	push	{lr}
    6448:	b083      	sub	sp, #12
    644a:	4603      	mov	r3, r0
    644c:	9100      	str	r1, [sp, #0]
    644e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6452:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6456:	9900      	ldr	r1, [sp, #0]
    6458:	4618      	mov	r0, r3
    645a:	f000 f8b9 	bl	65d0 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    645e:	bf00      	nop
    6460:	b003      	add	sp, #12
    6462:	f85d fb04 	ldr.w	pc, [sp], #4

00006466 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6466:	b500      	push	{lr}
    6468:	b085      	sub	sp, #20
    646a:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    646c:	2300      	movs	r3, #0
    646e:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6470:	9801      	ldr	r0, [sp, #4]
    6472:	f000 f8c5 	bl	6600 <Dio_Ipw_ReadChannelGroup>
    6476:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6478:	9b03      	ldr	r3, [sp, #12]
}
    647a:	4618      	mov	r0, r3
    647c:	b005      	add	sp, #20
    647e:	f85d fb04 	ldr.w	pc, [sp], #4

00006482 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6482:	b500      	push	{lr}
    6484:	b083      	sub	sp, #12
    6486:	9001      	str	r0, [sp, #4]
    6488:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    648a:	9900      	ldr	r1, [sp, #0]
    648c:	9801      	ldr	r0, [sp, #4]
    648e:	f000 f8d7 	bl	6640 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6492:	bf00      	nop
    6494:	b003      	add	sp, #12
    6496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000649c <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    649c:	b500      	push	{lr}
    649e:	b087      	sub	sp, #28
    64a0:	4603      	mov	r3, r0
    64a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    64a6:	2300      	movs	r3, #0
    64a8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    64ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    64b0:	095b      	lsrs	r3, r3, #5
    64b2:	b29b      	uxth	r3, r3
    64b4:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    64b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    64ba:	f003 031f 	and.w	r3, r3, #31
    64be:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    64c0:	4a08      	ldr	r2, [pc, #32]	; (64e4 <Dio_Ipw_ReadChannel+0x48>)
    64c2:	9b04      	ldr	r3, [sp, #16]
    64c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64c8:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    64ca:	9903      	ldr	r1, [sp, #12]
    64cc:	9802      	ldr	r0, [sp, #8]
    64ce:	f000 f940 	bl	6752 <Gpio_Dio_Ip_ReadPin>
    64d2:	4603      	mov	r3, r0
    64d4:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    64d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    64dc:	4618      	mov	r0, r3
    64de:	b007      	add	sp, #28
    64e0:	f85d fb04 	ldr.w	pc, [sp], #4
    64e4:	1fff8b24 	.word	0x1fff8b24

000064e8 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    64e8:	b500      	push	{lr}
    64ea:	b087      	sub	sp, #28
    64ec:	4603      	mov	r3, r0
    64ee:	460a      	mov	r2, r1
    64f0:	f8ad 3006 	strh.w	r3, [sp, #6]
    64f4:	4613      	mov	r3, r2
    64f6:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    64fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    64fe:	095b      	lsrs	r3, r3, #5
    6500:	b29b      	uxth	r3, r3
    6502:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6504:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6508:	f003 031f 	and.w	r3, r3, #31
    650c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    650e:	4a08      	ldr	r2, [pc, #32]	; (6530 <Dio_Ipw_WriteChannel+0x48>)
    6510:	9b05      	ldr	r3, [sp, #20]
    6512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6516:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6518:	f89d 3005 	ldrb.w	r3, [sp, #5]
    651c:	461a      	mov	r2, r3
    651e:	9904      	ldr	r1, [sp, #16]
    6520:	9803      	ldr	r0, [sp, #12]
    6522:	f000 f8b7 	bl	6694 <Gpio_Dio_Ip_WritePin>
}
    6526:	bf00      	nop
    6528:	b007      	add	sp, #28
    652a:	f85d fb04 	ldr.w	pc, [sp], #4
    652e:	bf00      	nop
    6530:	1fff8b24 	.word	0x1fff8b24

00006534 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6534:	b500      	push	{lr}
    6536:	b089      	sub	sp, #36	; 0x24
    6538:	4603      	mov	r3, r0
    653a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    653e:	2300      	movs	r3, #0
    6540:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6544:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6548:	095b      	lsrs	r3, r3, #5
    654a:	b29b      	uxth	r3, r3
    654c:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    654e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6552:	f003 031f 	and.w	r3, r3, #31
    6556:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6558:	4a10      	ldr	r2, [pc, #64]	; (659c <Dio_Ipw_FlipChannel+0x68>)
    655a:	9b06      	ldr	r3, [sp, #24]
    655c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6560:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6562:	2201      	movs	r2, #1
    6564:	9b05      	ldr	r3, [sp, #20]
    6566:	fa02 f303 	lsl.w	r3, r2, r3
    656a:	4619      	mov	r1, r3
    656c:	9804      	ldr	r0, [sp, #16]
    656e:	f000 f8dc 	bl	672a <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6572:	9804      	ldr	r0, [sp, #16]
    6574:	f000 f8bc 	bl	66f0 <Gpio_Dio_Ip_GetPinsOutput>
    6578:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    657a:	2201      	movs	r2, #1
    657c:	9b05      	ldr	r3, [sp, #20]
    657e:	409a      	lsls	r2, r3
    6580:	9b03      	ldr	r3, [sp, #12]
    6582:	401a      	ands	r2, r3
    6584:	9b05      	ldr	r3, [sp, #20]
    6586:	fa22 f303 	lsr.w	r3, r2, r3
    658a:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    658e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6592:	4618      	mov	r0, r3
    6594:	b009      	add	sp, #36	; 0x24
    6596:	f85d fb04 	ldr.w	pc, [sp], #4
    659a:	bf00      	nop
    659c:	1fff8b24 	.word	0x1fff8b24

000065a0 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    65a0:	b500      	push	{lr}
    65a2:	b085      	sub	sp, #20
    65a4:	4603      	mov	r3, r0
    65a6:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    65aa:	2300      	movs	r3, #0
    65ac:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    65ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65b2:	4a06      	ldr	r2, [pc, #24]	; (65cc <Dio_Ipw_ReadPort+0x2c>)
    65b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b8:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    65ba:	9802      	ldr	r0, [sp, #8]
    65bc:	f000 f8be 	bl	673c <Gpio_Dio_Ip_ReadPins>
    65c0:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    65c2:	9b03      	ldr	r3, [sp, #12]
}
    65c4:	4618      	mov	r0, r3
    65c6:	b005      	add	sp, #20
    65c8:	f85d fb04 	ldr.w	pc, [sp], #4
    65cc:	1fff8b24 	.word	0x1fff8b24

000065d0 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    65d0:	b500      	push	{lr}
    65d2:	b085      	sub	sp, #20
    65d4:	4603      	mov	r3, r0
    65d6:	9100      	str	r1, [sp, #0]
    65d8:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    65dc:	9b00      	ldr	r3, [sp, #0]
    65de:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    65e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65e4:	4a05      	ldr	r2, [pc, #20]	; (65fc <Dio_Ipw_WritePort+0x2c>)
    65e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65ea:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    65ec:	9903      	ldr	r1, [sp, #12]
    65ee:	9802      	ldr	r0, [sp, #8]
    65f0:	f000 f875 	bl	66de <Gpio_Dio_Ip_WritePins>
}
    65f4:	bf00      	nop
    65f6:	b005      	add	sp, #20
    65f8:	f85d fb04 	ldr.w	pc, [sp], #4
    65fc:	1fff8b24 	.word	0x1fff8b24

00006600 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6600:	b500      	push	{lr}
    6602:	b087      	sub	sp, #28
    6604:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6606:	2300      	movs	r3, #0
    6608:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    660a:	9b01      	ldr	r3, [sp, #4]
    660c:	781b      	ldrb	r3, [r3, #0]
    660e:	461a      	mov	r2, r3
    6610:	4b0a      	ldr	r3, [pc, #40]	; (663c <Dio_Ipw_ReadChannelGroup+0x3c>)
    6612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6616:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6618:	9804      	ldr	r0, [sp, #16]
    661a:	f000 f88f 	bl	673c <Gpio_Dio_Ip_ReadPins>
    661e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	685a      	ldr	r2, [r3, #4]
    6624:	9b03      	ldr	r3, [sp, #12]
    6626:	4013      	ands	r3, r2
    6628:	9a01      	ldr	r2, [sp, #4]
    662a:	7852      	ldrb	r2, [r2, #1]
    662c:	40d3      	lsrs	r3, r2
    662e:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6630:	9b05      	ldr	r3, [sp, #20]
}
    6632:	4618      	mov	r0, r3
    6634:	b007      	add	sp, #28
    6636:	f85d fb04 	ldr.w	pc, [sp], #4
    663a:	bf00      	nop
    663c:	1fff8b24 	.word	0x1fff8b24

00006640 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6640:	b500      	push	{lr}
    6642:	b087      	sub	sp, #28
    6644:	9001      	str	r0, [sp, #4]
    6646:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6648:	9b01      	ldr	r3, [sp, #4]
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	461a      	mov	r2, r3
    664e:	4b10      	ldr	r3, [pc, #64]	; (6690 <Dio_Ipw_WriteChannelGroup+0x50>)
    6650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6654:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6656:	9b01      	ldr	r3, [sp, #4]
    6658:	785b      	ldrb	r3, [r3, #1]
    665a:	461a      	mov	r2, r3
    665c:	9b00      	ldr	r3, [sp, #0]
    665e:	fa03 f202 	lsl.w	r2, r3, r2
    6662:	9b01      	ldr	r3, [sp, #4]
    6664:	685b      	ldr	r3, [r3, #4]
    6666:	4013      	ands	r3, r2
    6668:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    666a:	9904      	ldr	r1, [sp, #16]
    666c:	9805      	ldr	r0, [sp, #20]
    666e:	f000 f84a 	bl	6706 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6672:	9b04      	ldr	r3, [sp, #16]
    6674:	43da      	mvns	r2, r3
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	685b      	ldr	r3, [r3, #4]
    667a:	4013      	ands	r3, r2
    667c:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    667e:	9903      	ldr	r1, [sp, #12]
    6680:	9805      	ldr	r0, [sp, #20]
    6682:	f000 f849 	bl	6718 <Gpio_Dio_Ip_ClearPins>

}
    6686:	bf00      	nop
    6688:	b007      	add	sp, #28
    668a:	f85d fb04 	ldr.w	pc, [sp], #4
    668e:	bf00      	nop
    6690:	1fff8b24 	.word	0x1fff8b24

00006694 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6694:	b500      	push	{lr}
    6696:	b087      	sub	sp, #28
    6698:	9003      	str	r0, [sp, #12]
    669a:	9102      	str	r1, [sp, #8]
    669c:	4613      	mov	r3, r2
    669e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    66a2:	f000 f86d 	bl	6780 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    66a6:	9b03      	ldr	r3, [sp, #12]
    66a8:	681b      	ldr	r3, [r3, #0]
    66aa:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    66ac:	2201      	movs	r2, #1
    66ae:	9b02      	ldr	r3, [sp, #8]
    66b0:	fa02 f303 	lsl.w	r3, r2, r3
    66b4:	43db      	mvns	r3, r3
    66b6:	9a05      	ldr	r2, [sp, #20]
    66b8:	4013      	ands	r3, r2
    66ba:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    66bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    66c0:	9b02      	ldr	r3, [sp, #8]
    66c2:	fa02 f303 	lsl.w	r3, r2, r3
    66c6:	9a05      	ldr	r2, [sp, #20]
    66c8:	4313      	orrs	r3, r2
    66ca:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    66cc:	9b03      	ldr	r3, [sp, #12]
    66ce:	9a05      	ldr	r2, [sp, #20]
    66d0:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    66d2:	f000 f881 	bl	67d8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    66d6:	bf00      	nop
    66d8:	b007      	add	sp, #28
    66da:	f85d fb04 	ldr.w	pc, [sp], #4

000066de <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    66de:	b082      	sub	sp, #8
    66e0:	9001      	str	r0, [sp, #4]
    66e2:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	9a00      	ldr	r2, [sp, #0]
    66e8:	601a      	str	r2, [r3, #0]
}
    66ea:	bf00      	nop
    66ec:	b002      	add	sp, #8
    66ee:	4770      	bx	lr

000066f0 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    66f0:	b084      	sub	sp, #16
    66f2:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    66f4:	2300      	movs	r3, #0
    66f6:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    66f8:	9b01      	ldr	r3, [sp, #4]
    66fa:	681b      	ldr	r3, [r3, #0]
    66fc:	9303      	str	r3, [sp, #12]
    return returnValue;
    66fe:	9b03      	ldr	r3, [sp, #12]
}
    6700:	4618      	mov	r0, r3
    6702:	b004      	add	sp, #16
    6704:	4770      	bx	lr

00006706 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6706:	b082      	sub	sp, #8
    6708:	9001      	str	r0, [sp, #4]
    670a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    670c:	9b01      	ldr	r3, [sp, #4]
    670e:	9a00      	ldr	r2, [sp, #0]
    6710:	605a      	str	r2, [r3, #4]
}
    6712:	bf00      	nop
    6714:	b002      	add	sp, #8
    6716:	4770      	bx	lr

00006718 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6718:	b082      	sub	sp, #8
    671a:	9001      	str	r0, [sp, #4]
    671c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    671e:	9b01      	ldr	r3, [sp, #4]
    6720:	9a00      	ldr	r2, [sp, #0]
    6722:	609a      	str	r2, [r3, #8]
}
    6724:	bf00      	nop
    6726:	b002      	add	sp, #8
    6728:	4770      	bx	lr

0000672a <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    672a:	b082      	sub	sp, #8
    672c:	9001      	str	r0, [sp, #4]
    672e:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6730:	9b01      	ldr	r3, [sp, #4]
    6732:	9a00      	ldr	r2, [sp, #0]
    6734:	60da      	str	r2, [r3, #12]
}
    6736:	bf00      	nop
    6738:	b002      	add	sp, #8
    673a:	4770      	bx	lr

0000673c <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    673c:	b084      	sub	sp, #16
    673e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6740:	2300      	movs	r3, #0
    6742:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6744:	9b01      	ldr	r3, [sp, #4]
    6746:	691b      	ldr	r3, [r3, #16]
    6748:	9303      	str	r3, [sp, #12]
    return returnValue;
    674a:	9b03      	ldr	r3, [sp, #12]
}
    674c:	4618      	mov	r0, r3
    674e:	b004      	add	sp, #16
    6750:	4770      	bx	lr

00006752 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6752:	b084      	sub	sp, #16
    6754:	9001      	str	r0, [sp, #4]
    6756:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6758:	2300      	movs	r3, #0
    675a:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    675e:	9b01      	ldr	r3, [sp, #4]
    6760:	691a      	ldr	r2, [r3, #16]
    6762:	2101      	movs	r1, #1
    6764:	9b00      	ldr	r3, [sp, #0]
    6766:	fa01 f303 	lsl.w	r3, r1, r3
    676a:	401a      	ands	r2, r3
    676c:	9b00      	ldr	r3, [sp, #0]
    676e:	fa22 f303 	lsr.w	r3, r2, r3
    6772:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6776:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    677a:	4618      	mov	r0, r3
    677c:	b004      	add	sp, #16
    677e:	4770      	bx	lr

00006780 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6780:	b500      	push	{lr}
    6782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6784:	f7fa ff24 	bl	15d0 <Sys_GetCoreID>
    6788:	4603      	mov	r3, r0
    678a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    678c:	4a10      	ldr	r2, [pc, #64]	; (67d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    678e:	9b01      	ldr	r3, [sp, #4]
    6790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6794:	2b00      	cmp	r3, #0
    6796:	d10d      	bne.n	67b4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6798:	f7fa f8d6 	bl	948 <Dio_schm_read_msr>
    679c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    679e:	9b00      	ldr	r3, [sp, #0]
    67a0:	f003 0301 	and.w	r3, r3, #1
    67a4:	2b00      	cmp	r3, #0
    67a6:	d100      	bne.n	67aa <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    67a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    67aa:	490a      	ldr	r1, [pc, #40]	; (67d4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	9a00      	ldr	r2, [sp, #0]
    67b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    67b4:	4a06      	ldr	r2, [pc, #24]	; (67d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    67b6:	9b01      	ldr	r3, [sp, #4]
    67b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67bc:	1c5a      	adds	r2, r3, #1
    67be:	4904      	ldr	r1, [pc, #16]	; (67d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67c6:	bf00      	nop
    67c8:	b003      	add	sp, #12
    67ca:	f85d fb04 	ldr.w	pc, [sp], #4
    67ce:	bf00      	nop
    67d0:	1fff8d18 	.word	0x1fff8d18
    67d4:	1fff8d14 	.word	0x1fff8d14

000067d8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    67d8:	b500      	push	{lr}
    67da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67dc:	f7fa fef8 	bl	15d0 <Sys_GetCoreID>
    67e0:	4603      	mov	r3, r0
    67e2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    67e4:	4a0d      	ldr	r2, [pc, #52]	; (681c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    67e6:	9b01      	ldr	r3, [sp, #4]
    67e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67ec:	1e5a      	subs	r2, r3, #1
    67ee:	490b      	ldr	r1, [pc, #44]	; (681c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    67f0:	9b01      	ldr	r3, [sp, #4]
    67f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    67f6:	4a0a      	ldr	r2, [pc, #40]	; (6820 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67fe:	f003 0301 	and.w	r3, r3, #1
    6802:	2b00      	cmp	r3, #0
    6804:	d106      	bne.n	6814 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6806:	4a05      	ldr	r2, [pc, #20]	; (681c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6808:	9b01      	ldr	r3, [sp, #4]
    680a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    680e:	2b00      	cmp	r3, #0
    6810:	d100      	bne.n	6814 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6814:	bf00      	nop
    6816:	b003      	add	sp, #12
    6818:	f85d fb04 	ldr.w	pc, [sp], #4
    681c:	1fff8d18 	.word	0x1fff8d18
    6820:	1fff8d14 	.word	0x1fff8d14

00006824 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6824:	b500      	push	{lr}
    6826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6828:	f7fa fed2 	bl	15d0 <Sys_GetCoreID>
    682c:	4603      	mov	r3, r0
    682e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    6830:	4a10      	ldr	r2, [pc, #64]	; (6874 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6832:	9b01      	ldr	r3, [sp, #4]
    6834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6838:	2b00      	cmp	r3, #0
    683a:	d10d      	bne.n	6858 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    683c:	f7fa f884 	bl	948 <Dio_schm_read_msr>
    6840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6842:	9b00      	ldr	r3, [sp, #0]
    6844:	f003 0301 	and.w	r3, r3, #1
    6848:	2b00      	cmp	r3, #0
    684a:	d100      	bne.n	684e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    684c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    684e:	490a      	ldr	r1, [pc, #40]	; (6878 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	9a00      	ldr	r2, [sp, #0]
    6854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    6858:	4a06      	ldr	r2, [pc, #24]	; (6874 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6860:	1c5a      	adds	r2, r3, #1
    6862:	4904      	ldr	r1, [pc, #16]	; (6874 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    686a:	bf00      	nop
    686c:	b003      	add	sp, #12
    686e:	f85d fb04 	ldr.w	pc, [sp], #4
    6872:	bf00      	nop
    6874:	1fff8d20 	.word	0x1fff8d20
    6878:	1fff8d1c 	.word	0x1fff8d1c

0000687c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    687c:	b500      	push	{lr}
    687e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6880:	f7fa fea6 	bl	15d0 <Sys_GetCoreID>
    6884:	4603      	mov	r3, r0
    6886:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    6888:	4a0d      	ldr	r2, [pc, #52]	; (68c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    688a:	9b01      	ldr	r3, [sp, #4]
    688c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6890:	1e5a      	subs	r2, r3, #1
    6892:	490b      	ldr	r1, [pc, #44]	; (68c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6894:	9b01      	ldr	r3, [sp, #4]
    6896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    689a:	4a0a      	ldr	r2, [pc, #40]	; (68c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68a2:	f003 0301 	and.w	r3, r3, #1
    68a6:	2b00      	cmp	r3, #0
    68a8:	d106      	bne.n	68b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    68aa:	4a05      	ldr	r2, [pc, #20]	; (68c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    68ac:	9b01      	ldr	r3, [sp, #4]
    68ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68b2:	2b00      	cmp	r3, #0
    68b4:	d100      	bne.n	68b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    68b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    68b8:	bf00      	nop
    68ba:	b003      	add	sp, #12
    68bc:	f85d fb04 	ldr.w	pc, [sp], #4
    68c0:	1fff8d20 	.word	0x1fff8d20
    68c4:	1fff8d1c 	.word	0x1fff8d1c

000068c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    68c8:	b500      	push	{lr}
    68ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68cc:	f7fa fe80 	bl	15d0 <Sys_GetCoreID>
    68d0:	4603      	mov	r3, r0
    68d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    68d4:	4a10      	ldr	r2, [pc, #64]	; (6918 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    68d6:	9b01      	ldr	r3, [sp, #4]
    68d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68dc:	2b00      	cmp	r3, #0
    68de:	d10d      	bne.n	68fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    68e0:	f7fa f83b 	bl	95a <Mcu_schm_read_msr>
    68e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    68e6:	9b00      	ldr	r3, [sp, #0]
    68e8:	f003 0301 	and.w	r3, r3, #1
    68ec:	2b00      	cmp	r3, #0
    68ee:	d100      	bne.n	68f2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    68f2:	490a      	ldr	r1, [pc, #40]	; (691c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    68f4:	9b01      	ldr	r3, [sp, #4]
    68f6:	9a00      	ldr	r2, [sp, #0]
    68f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    68fc:	4a06      	ldr	r2, [pc, #24]	; (6918 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    68fe:	9b01      	ldr	r3, [sp, #4]
    6900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6904:	1c5a      	adds	r2, r3, #1
    6906:	4904      	ldr	r1, [pc, #16]	; (6918 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6908:	9b01      	ldr	r3, [sp, #4]
    690a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    690e:	bf00      	nop
    6910:	b003      	add	sp, #12
    6912:	f85d fb04 	ldr.w	pc, [sp], #4
    6916:	bf00      	nop
    6918:	1fff8d28 	.word	0x1fff8d28
    691c:	1fff8d24 	.word	0x1fff8d24

00006920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6920:	b500      	push	{lr}
    6922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6924:	f7fa fe54 	bl	15d0 <Sys_GetCoreID>
    6928:	4603      	mov	r3, r0
    692a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    692c:	4a0d      	ldr	r2, [pc, #52]	; (6964 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    692e:	9b01      	ldr	r3, [sp, #4]
    6930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6934:	1e5a      	subs	r2, r3, #1
    6936:	490b      	ldr	r1, [pc, #44]	; (6964 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6938:	9b01      	ldr	r3, [sp, #4]
    693a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    693e:	4a0a      	ldr	r2, [pc, #40]	; (6968 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6946:	f003 0301 	and.w	r3, r3, #1
    694a:	2b00      	cmp	r3, #0
    694c:	d106      	bne.n	695c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    694e:	4a05      	ldr	r2, [pc, #20]	; (6964 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6950:	9b01      	ldr	r3, [sp, #4]
    6952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6956:	2b00      	cmp	r3, #0
    6958:	d100      	bne.n	695c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    695a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    695c:	bf00      	nop
    695e:	b003      	add	sp, #12
    6960:	f85d fb04 	ldr.w	pc, [sp], #4
    6964:	1fff8d28 	.word	0x1fff8d28
    6968:	1fff8d24 	.word	0x1fff8d24

0000696c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    696c:	b500      	push	{lr}
    696e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6970:	f7fa fe2e 	bl	15d0 <Sys_GetCoreID>
    6974:	4603      	mov	r3, r0
    6976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    6978:	4a10      	ldr	r2, [pc, #64]	; (69bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    697a:	9b01      	ldr	r3, [sp, #4]
    697c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6980:	2b00      	cmp	r3, #0
    6982:	d10d      	bne.n	69a0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6984:	f7f9 ffe9 	bl	95a <Mcu_schm_read_msr>
    6988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    698a:	9b00      	ldr	r3, [sp, #0]
    698c:	f003 0301 	and.w	r3, r3, #1
    6990:	2b00      	cmp	r3, #0
    6992:	d100      	bne.n	6996 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6996:	490a      	ldr	r1, [pc, #40]	; (69c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	9a00      	ldr	r2, [sp, #0]
    699c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    69a0:	4a06      	ldr	r2, [pc, #24]	; (69bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    69a2:	9b01      	ldr	r3, [sp, #4]
    69a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69a8:	1c5a      	adds	r2, r3, #1
    69aa:	4904      	ldr	r1, [pc, #16]	; (69bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    69ac:	9b01      	ldr	r3, [sp, #4]
    69ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69b2:	bf00      	nop
    69b4:	b003      	add	sp, #12
    69b6:	f85d fb04 	ldr.w	pc, [sp], #4
    69ba:	bf00      	nop
    69bc:	1fff8d30 	.word	0x1fff8d30
    69c0:	1fff8d2c 	.word	0x1fff8d2c

000069c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    69c4:	b500      	push	{lr}
    69c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69c8:	f7fa fe02 	bl	15d0 <Sys_GetCoreID>
    69cc:	4603      	mov	r3, r0
    69ce:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    69d0:	4a0d      	ldr	r2, [pc, #52]	; (6a08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    69d2:	9b01      	ldr	r3, [sp, #4]
    69d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69d8:	1e5a      	subs	r2, r3, #1
    69da:	490b      	ldr	r1, [pc, #44]	; (6a08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    69dc:	9b01      	ldr	r3, [sp, #4]
    69de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    69e2:	4a0a      	ldr	r2, [pc, #40]	; (6a0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    69e4:	9b01      	ldr	r3, [sp, #4]
    69e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ea:	f003 0301 	and.w	r3, r3, #1
    69ee:	2b00      	cmp	r3, #0
    69f0:	d106      	bne.n	6a00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    69f2:	4a05      	ldr	r2, [pc, #20]	; (6a08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    69f4:	9b01      	ldr	r3, [sp, #4]
    69f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69fa:	2b00      	cmp	r3, #0
    69fc:	d100      	bne.n	6a00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    69fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a00:	bf00      	nop
    6a02:	b003      	add	sp, #12
    6a04:	f85d fb04 	ldr.w	pc, [sp], #4
    6a08:	1fff8d30 	.word	0x1fff8d30
    6a0c:	1fff8d2c 	.word	0x1fff8d2c

00006a10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6a10:	b500      	push	{lr}
    6a12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a14:	f7fa fddc 	bl	15d0 <Sys_GetCoreID>
    6a18:	4603      	mov	r3, r0
    6a1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6a1c:	4a10      	ldr	r2, [pc, #64]	; (6a60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6a1e:	9b01      	ldr	r3, [sp, #4]
    6a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a24:	2b00      	cmp	r3, #0
    6a26:	d10d      	bne.n	6a44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a28:	f7f9 ff97 	bl	95a <Mcu_schm_read_msr>
    6a2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a2e:	9b00      	ldr	r3, [sp, #0]
    6a30:	f003 0301 	and.w	r3, r3, #1
    6a34:	2b00      	cmp	r3, #0
    6a36:	d100      	bne.n	6a3a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6a3a:	490a      	ldr	r1, [pc, #40]	; (6a64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6a3c:	9b01      	ldr	r3, [sp, #4]
    6a3e:	9a00      	ldr	r2, [sp, #0]
    6a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6a44:	4a06      	ldr	r2, [pc, #24]	; (6a60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6a46:	9b01      	ldr	r3, [sp, #4]
    6a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a4c:	1c5a      	adds	r2, r3, #1
    6a4e:	4904      	ldr	r1, [pc, #16]	; (6a60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6a50:	9b01      	ldr	r3, [sp, #4]
    6a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a56:	bf00      	nop
    6a58:	b003      	add	sp, #12
    6a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6a5e:	bf00      	nop
    6a60:	1fff8d38 	.word	0x1fff8d38
    6a64:	1fff8d34 	.word	0x1fff8d34

00006a68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6a68:	b500      	push	{lr}
    6a6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a6c:	f7fa fdb0 	bl	15d0 <Sys_GetCoreID>
    6a70:	4603      	mov	r3, r0
    6a72:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6a74:	4a0d      	ldr	r2, [pc, #52]	; (6aac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6a76:	9b01      	ldr	r3, [sp, #4]
    6a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a7c:	1e5a      	subs	r2, r3, #1
    6a7e:	490b      	ldr	r1, [pc, #44]	; (6aac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6a80:	9b01      	ldr	r3, [sp, #4]
    6a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6a86:	4a0a      	ldr	r2, [pc, #40]	; (6ab0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    6a88:	9b01      	ldr	r3, [sp, #4]
    6a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a8e:	f003 0301 	and.w	r3, r3, #1
    6a92:	2b00      	cmp	r3, #0
    6a94:	d106      	bne.n	6aa4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    6a96:	4a05      	ldr	r2, [pc, #20]	; (6aac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6a98:	9b01      	ldr	r3, [sp, #4]
    6a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d100      	bne.n	6aa4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6aa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6aa4:	bf00      	nop
    6aa6:	b003      	add	sp, #12
    6aa8:	f85d fb04 	ldr.w	pc, [sp], #4
    6aac:	1fff8d38 	.word	0x1fff8d38
    6ab0:	1fff8d34 	.word	0x1fff8d34

00006ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6ab4:	b500      	push	{lr}
    6ab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ab8:	f7fa fd8a 	bl	15d0 <Sys_GetCoreID>
    6abc:	4603      	mov	r3, r0
    6abe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    6ac0:	4a10      	ldr	r2, [pc, #64]	; (6b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6ac2:	9b01      	ldr	r3, [sp, #4]
    6ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d10d      	bne.n	6ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6acc:	f7f9 ff4e 	bl	96c <Port_schm_read_msr>
    6ad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ad2:	9b00      	ldr	r3, [sp, #0]
    6ad4:	f003 0301 	and.w	r3, r3, #1
    6ad8:	2b00      	cmp	r3, #0
    6ada:	d100      	bne.n	6ade <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6adc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6ade:	490a      	ldr	r1, [pc, #40]	; (6b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    6ae0:	9b01      	ldr	r3, [sp, #4]
    6ae2:	9a00      	ldr	r2, [sp, #0]
    6ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    6ae8:	4a06      	ldr	r2, [pc, #24]	; (6b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6aea:	9b01      	ldr	r3, [sp, #4]
    6aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af0:	1c5a      	adds	r2, r3, #1
    6af2:	4904      	ldr	r1, [pc, #16]	; (6b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6af4:	9b01      	ldr	r3, [sp, #4]
    6af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6afa:	bf00      	nop
    6afc:	b003      	add	sp, #12
    6afe:	f85d fb04 	ldr.w	pc, [sp], #4
    6b02:	bf00      	nop
    6b04:	1fff8d40 	.word	0x1fff8d40
    6b08:	1fff8d3c 	.word	0x1fff8d3c

00006b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6b0c:	b500      	push	{lr}
    6b0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b10:	f7fa fd5e 	bl	15d0 <Sys_GetCoreID>
    6b14:	4603      	mov	r3, r0
    6b16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6b18:	4a0d      	ldr	r2, [pc, #52]	; (6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6b1a:	9b01      	ldr	r3, [sp, #4]
    6b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b20:	1e5a      	subs	r2, r3, #1
    6b22:	490b      	ldr	r1, [pc, #44]	; (6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6b24:	9b01      	ldr	r3, [sp, #4]
    6b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6b2a:	4a0a      	ldr	r2, [pc, #40]	; (6b54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b32:	f003 0301 	and.w	r3, r3, #1
    6b36:	2b00      	cmp	r3, #0
    6b38:	d106      	bne.n	6b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    6b3a:	4a05      	ldr	r2, [pc, #20]	; (6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6b3c:	9b01      	ldr	r3, [sp, #4]
    6b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b42:	2b00      	cmp	r3, #0
    6b44:	d100      	bne.n	6b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b48:	bf00      	nop
    6b4a:	b003      	add	sp, #12
    6b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    6b50:	1fff8d40 	.word	0x1fff8d40
    6b54:	1fff8d3c 	.word	0x1fff8d3c

00006b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6b58:	b500      	push	{lr}
    6b5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b5c:	f7fa fd38 	bl	15d0 <Sys_GetCoreID>
    6b60:	4603      	mov	r3, r0
    6b62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    6b64:	4a10      	ldr	r2, [pc, #64]	; (6ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6b66:	9b01      	ldr	r3, [sp, #4]
    6b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d10d      	bne.n	6b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b70:	f7f9 fefc 	bl	96c <Port_schm_read_msr>
    6b74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b76:	9b00      	ldr	r3, [sp, #0]
    6b78:	f003 0301 	and.w	r3, r3, #1
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d100      	bne.n	6b82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6b82:	490a      	ldr	r1, [pc, #40]	; (6bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6b84:	9b01      	ldr	r3, [sp, #4]
    6b86:	9a00      	ldr	r2, [sp, #0]
    6b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6b8c:	4a06      	ldr	r2, [pc, #24]	; (6ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6b8e:	9b01      	ldr	r3, [sp, #4]
    6b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b94:	1c5a      	adds	r2, r3, #1
    6b96:	4904      	ldr	r1, [pc, #16]	; (6ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6b98:	9b01      	ldr	r3, [sp, #4]
    6b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b9e:	bf00      	nop
    6ba0:	b003      	add	sp, #12
    6ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ba6:	bf00      	nop
    6ba8:	1fff8d48 	.word	0x1fff8d48
    6bac:	1fff8d44 	.word	0x1fff8d44

00006bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6bb0:	b500      	push	{lr}
    6bb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bb4:	f7fa fd0c 	bl	15d0 <Sys_GetCoreID>
    6bb8:	4603      	mov	r3, r0
    6bba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    6bbc:	4a0d      	ldr	r2, [pc, #52]	; (6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6bbe:	9b01      	ldr	r3, [sp, #4]
    6bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc4:	1e5a      	subs	r2, r3, #1
    6bc6:	490b      	ldr	r1, [pc, #44]	; (6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6bce:	4a0a      	ldr	r2, [pc, #40]	; (6bf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bd6:	f003 0301 	and.w	r3, r3, #1
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d106      	bne.n	6bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    6bde:	4a05      	ldr	r2, [pc, #20]	; (6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6be0:	9b01      	ldr	r3, [sp, #4]
    6be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6be6:	2b00      	cmp	r3, #0
    6be8:	d100      	bne.n	6bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6bea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6bec:	bf00      	nop
    6bee:	b003      	add	sp, #12
    6bf0:	f85d fb04 	ldr.w	pc, [sp], #4
    6bf4:	1fff8d48 	.word	0x1fff8d48
    6bf8:	1fff8d44 	.word	0x1fff8d44

00006bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6bfc:	b500      	push	{lr}
    6bfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c00:	f7fa fce6 	bl	15d0 <Sys_GetCoreID>
    6c04:	4603      	mov	r3, r0
    6c06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6c08:	4a10      	ldr	r2, [pc, #64]	; (6c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6c0a:	9b01      	ldr	r3, [sp, #4]
    6c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c10:	2b00      	cmp	r3, #0
    6c12:	d10d      	bne.n	6c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c14:	f7f9 feaa 	bl	96c <Port_schm_read_msr>
    6c18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c1a:	9b00      	ldr	r3, [sp, #0]
    6c1c:	f003 0301 	and.w	r3, r3, #1
    6c20:	2b00      	cmp	r3, #0
    6c22:	d100      	bne.n	6c26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6c26:	490a      	ldr	r1, [pc, #40]	; (6c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    6c28:	9b01      	ldr	r3, [sp, #4]
    6c2a:	9a00      	ldr	r2, [sp, #0]
    6c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    6c30:	4a06      	ldr	r2, [pc, #24]	; (6c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6c32:	9b01      	ldr	r3, [sp, #4]
    6c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c38:	1c5a      	adds	r2, r3, #1
    6c3a:	4904      	ldr	r1, [pc, #16]	; (6c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c42:	bf00      	nop
    6c44:	b003      	add	sp, #12
    6c46:	f85d fb04 	ldr.w	pc, [sp], #4
    6c4a:	bf00      	nop
    6c4c:	1fff8d50 	.word	0x1fff8d50
    6c50:	1fff8d4c 	.word	0x1fff8d4c

00006c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6c54:	b500      	push	{lr}
    6c56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c58:	f7fa fcba 	bl	15d0 <Sys_GetCoreID>
    6c5c:	4603      	mov	r3, r0
    6c5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    6c60:	4a0d      	ldr	r2, [pc, #52]	; (6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6c62:	9b01      	ldr	r3, [sp, #4]
    6c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c68:	1e5a      	subs	r2, r3, #1
    6c6a:	490b      	ldr	r1, [pc, #44]	; (6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6c6c:	9b01      	ldr	r3, [sp, #4]
    6c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6c72:	4a0a      	ldr	r2, [pc, #40]	; (6c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c7a:	f003 0301 	and.w	r3, r3, #1
    6c7e:	2b00      	cmp	r3, #0
    6c80:	d106      	bne.n	6c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    6c82:	4a05      	ldr	r2, [pc, #20]	; (6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6c84:	9b01      	ldr	r3, [sp, #4]
    6c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d100      	bne.n	6c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c90:	bf00      	nop
    6c92:	b003      	add	sp, #12
    6c94:	f85d fb04 	ldr.w	pc, [sp], #4
    6c98:	1fff8d50 	.word	0x1fff8d50
    6c9c:	1fff8d4c 	.word	0x1fff8d4c

00006ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6ca0:	b500      	push	{lr}
    6ca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ca4:	f7fa fc94 	bl	15d0 <Sys_GetCoreID>
    6ca8:	4603      	mov	r3, r0
    6caa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6cac:	4a10      	ldr	r2, [pc, #64]	; (6cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6cae:	9b01      	ldr	r3, [sp, #4]
    6cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d10d      	bne.n	6cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cb8:	f7f9 fe58 	bl	96c <Port_schm_read_msr>
    6cbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cbe:	9b00      	ldr	r3, [sp, #0]
    6cc0:	f003 0301 	and.w	r3, r3, #1
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	d100      	bne.n	6cca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6cc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    6cca:	490a      	ldr	r1, [pc, #40]	; (6cf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    6ccc:	9b01      	ldr	r3, [sp, #4]
    6cce:	9a00      	ldr	r2, [sp, #0]
    6cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6cd4:	4a06      	ldr	r2, [pc, #24]	; (6cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6cd6:	9b01      	ldr	r3, [sp, #4]
    6cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cdc:	1c5a      	adds	r2, r3, #1
    6cde:	4904      	ldr	r1, [pc, #16]	; (6cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6ce0:	9b01      	ldr	r3, [sp, #4]
    6ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ce6:	bf00      	nop
    6ce8:	b003      	add	sp, #12
    6cea:	f85d fb04 	ldr.w	pc, [sp], #4
    6cee:	bf00      	nop
    6cf0:	1fff8d58 	.word	0x1fff8d58
    6cf4:	1fff8d54 	.word	0x1fff8d54

00006cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6cf8:	b500      	push	{lr}
    6cfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cfc:	f7fa fc68 	bl	15d0 <Sys_GetCoreID>
    6d00:	4603      	mov	r3, r0
    6d02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6d04:	4a0d      	ldr	r2, [pc, #52]	; (6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6d06:	9b01      	ldr	r3, [sp, #4]
    6d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d0c:	1e5a      	subs	r2, r3, #1
    6d0e:	490b      	ldr	r1, [pc, #44]	; (6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6d10:	9b01      	ldr	r3, [sp, #4]
    6d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    6d16:	4a0a      	ldr	r2, [pc, #40]	; (6d40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6d18:	9b01      	ldr	r3, [sp, #4]
    6d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d1e:	f003 0301 	and.w	r3, r3, #1
    6d22:	2b00      	cmp	r3, #0
    6d24:	d106      	bne.n	6d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    6d26:	4a05      	ldr	r2, [pc, #20]	; (6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6d28:	9b01      	ldr	r3, [sp, #4]
    6d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d100      	bne.n	6d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d34:	bf00      	nop
    6d36:	b003      	add	sp, #12
    6d38:	f85d fb04 	ldr.w	pc, [sp], #4
    6d3c:	1fff8d58 	.word	0x1fff8d58
    6d40:	1fff8d54 	.word	0x1fff8d54

00006d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6d44:	b500      	push	{lr}
    6d46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d48:	f7fa fc42 	bl	15d0 <Sys_GetCoreID>
    6d4c:	4603      	mov	r3, r0
    6d4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    6d50:	4a10      	ldr	r2, [pc, #64]	; (6d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6d52:	9b01      	ldr	r3, [sp, #4]
    6d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d10d      	bne.n	6d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d5c:	f7f9 fe06 	bl	96c <Port_schm_read_msr>
    6d60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d62:	9b00      	ldr	r3, [sp, #0]
    6d64:	f003 0301 	and.w	r3, r3, #1
    6d68:	2b00      	cmp	r3, #0
    6d6a:	d100      	bne.n	6d6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    6d6e:	490a      	ldr	r1, [pc, #40]	; (6d98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    6d70:	9b01      	ldr	r3, [sp, #4]
    6d72:	9a00      	ldr	r2, [sp, #0]
    6d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    6d78:	4a06      	ldr	r2, [pc, #24]	; (6d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6d7a:	9b01      	ldr	r3, [sp, #4]
    6d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d80:	1c5a      	adds	r2, r3, #1
    6d82:	4904      	ldr	r1, [pc, #16]	; (6d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6d84:	9b01      	ldr	r3, [sp, #4]
    6d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d8a:	bf00      	nop
    6d8c:	b003      	add	sp, #12
    6d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d92:	bf00      	nop
    6d94:	1fff8d60 	.word	0x1fff8d60
    6d98:	1fff8d5c 	.word	0x1fff8d5c

00006d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6d9c:	b500      	push	{lr}
    6d9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6da0:	f7fa fc16 	bl	15d0 <Sys_GetCoreID>
    6da4:	4603      	mov	r3, r0
    6da6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    6da8:	4a0d      	ldr	r2, [pc, #52]	; (6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6daa:	9b01      	ldr	r3, [sp, #4]
    6dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db0:	1e5a      	subs	r2, r3, #1
    6db2:	490b      	ldr	r1, [pc, #44]	; (6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6db4:	9b01      	ldr	r3, [sp, #4]
    6db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    6dba:	4a0a      	ldr	r2, [pc, #40]	; (6de4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dc2:	f003 0301 	and.w	r3, r3, #1
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d106      	bne.n	6dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    6dca:	4a05      	ldr	r2, [pc, #20]	; (6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6dcc:	9b01      	ldr	r3, [sp, #4]
    6dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d100      	bne.n	6dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6dd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6dd8:	bf00      	nop
    6dda:	b003      	add	sp, #12
    6ddc:	f85d fb04 	ldr.w	pc, [sp], #4
    6de0:	1fff8d60 	.word	0x1fff8d60
    6de4:	1fff8d5c 	.word	0x1fff8d5c

00006de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6de8:	b500      	push	{lr}
    6dea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6dec:	f7fa fbf0 	bl	15d0 <Sys_GetCoreID>
    6df0:	4603      	mov	r3, r0
    6df2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    6df4:	4a10      	ldr	r2, [pc, #64]	; (6e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6df6:	9b01      	ldr	r3, [sp, #4]
    6df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d10d      	bne.n	6e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e00:	f7f9 fdb4 	bl	96c <Port_schm_read_msr>
    6e04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e06:	9b00      	ldr	r3, [sp, #0]
    6e08:	f003 0301 	and.w	r3, r3, #1
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d100      	bne.n	6e12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    6e12:	490a      	ldr	r1, [pc, #40]	; (6e3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    6e14:	9b01      	ldr	r3, [sp, #4]
    6e16:	9a00      	ldr	r2, [sp, #0]
    6e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    6e1c:	4a06      	ldr	r2, [pc, #24]	; (6e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6e1e:	9b01      	ldr	r3, [sp, #4]
    6e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e24:	1c5a      	adds	r2, r3, #1
    6e26:	4904      	ldr	r1, [pc, #16]	; (6e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6e28:	9b01      	ldr	r3, [sp, #4]
    6e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e2e:	bf00      	nop
    6e30:	b003      	add	sp, #12
    6e32:	f85d fb04 	ldr.w	pc, [sp], #4
    6e36:	bf00      	nop
    6e38:	1fff8d68 	.word	0x1fff8d68
    6e3c:	1fff8d64 	.word	0x1fff8d64

00006e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6e40:	b500      	push	{lr}
    6e42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e44:	f7fa fbc4 	bl	15d0 <Sys_GetCoreID>
    6e48:	4603      	mov	r3, r0
    6e4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6e4c:	4a0d      	ldr	r2, [pc, #52]	; (6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6e4e:	9b01      	ldr	r3, [sp, #4]
    6e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e54:	1e5a      	subs	r2, r3, #1
    6e56:	490b      	ldr	r1, [pc, #44]	; (6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6e58:	9b01      	ldr	r3, [sp, #4]
    6e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    6e5e:	4a0a      	ldr	r2, [pc, #40]	; (6e88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    6e60:	9b01      	ldr	r3, [sp, #4]
    6e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e66:	f003 0301 	and.w	r3, r3, #1
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d106      	bne.n	6e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    6e6e:	4a05      	ldr	r2, [pc, #20]	; (6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6e70:	9b01      	ldr	r3, [sp, #4]
    6e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d100      	bne.n	6e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e7c:	bf00      	nop
    6e7e:	b003      	add	sp, #12
    6e80:	f85d fb04 	ldr.w	pc, [sp], #4
    6e84:	1fff8d68 	.word	0x1fff8d68
    6e88:	1fff8d64 	.word	0x1fff8d64

00006e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6e8c:	b500      	push	{lr}
    6e8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e90:	f7fa fb9e 	bl	15d0 <Sys_GetCoreID>
    6e94:	4603      	mov	r3, r0
    6e96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6e98:	4a10      	ldr	r2, [pc, #64]	; (6edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6e9a:	9b01      	ldr	r3, [sp, #4]
    6e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d10d      	bne.n	6ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ea4:	f7f9 fd62 	bl	96c <Port_schm_read_msr>
    6ea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6eaa:	9b00      	ldr	r3, [sp, #0]
    6eac:	f003 0301 	and.w	r3, r3, #1
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d100      	bne.n	6eb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6eb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6eb6:	490a      	ldr	r1, [pc, #40]	; (6ee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6eb8:	9b01      	ldr	r3, [sp, #4]
    6eba:	9a00      	ldr	r2, [sp, #0]
    6ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    6ec0:	4a06      	ldr	r2, [pc, #24]	; (6edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6ec2:	9b01      	ldr	r3, [sp, #4]
    6ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ec8:	1c5a      	adds	r2, r3, #1
    6eca:	4904      	ldr	r1, [pc, #16]	; (6edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6ecc:	9b01      	ldr	r3, [sp, #4]
    6ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ed2:	bf00      	nop
    6ed4:	b003      	add	sp, #12
    6ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    6eda:	bf00      	nop
    6edc:	1fff8d70 	.word	0x1fff8d70
    6ee0:	1fff8d6c 	.word	0x1fff8d6c

00006ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6ee4:	b500      	push	{lr}
    6ee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ee8:	f7fa fb72 	bl	15d0 <Sys_GetCoreID>
    6eec:	4603      	mov	r3, r0
    6eee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6ef0:	4a0d      	ldr	r2, [pc, #52]	; (6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6ef2:	9b01      	ldr	r3, [sp, #4]
    6ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ef8:	1e5a      	subs	r2, r3, #1
    6efa:	490b      	ldr	r1, [pc, #44]	; (6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6efc:	9b01      	ldr	r3, [sp, #4]
    6efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    6f02:	4a0a      	ldr	r2, [pc, #40]	; (6f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    6f04:	9b01      	ldr	r3, [sp, #4]
    6f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f0a:	f003 0301 	and.w	r3, r3, #1
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d106      	bne.n	6f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    6f12:	4a05      	ldr	r2, [pc, #20]	; (6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6f14:	9b01      	ldr	r3, [sp, #4]
    6f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d100      	bne.n	6f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f20:	bf00      	nop
    6f22:	b003      	add	sp, #12
    6f24:	f85d fb04 	ldr.w	pc, [sp], #4
    6f28:	1fff8d70 	.word	0x1fff8d70
    6f2c:	1fff8d6c 	.word	0x1fff8d6c

00006f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6f30:	b500      	push	{lr}
    6f32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f34:	f7fa fb4c 	bl	15d0 <Sys_GetCoreID>
    6f38:	4603      	mov	r3, r0
    6f3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6f3c:	4a10      	ldr	r2, [pc, #64]	; (6f80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6f3e:	9b01      	ldr	r3, [sp, #4]
    6f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f44:	2b00      	cmp	r3, #0
    6f46:	d10d      	bne.n	6f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f48:	f7f9 fd10 	bl	96c <Port_schm_read_msr>
    6f4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f4e:	9b00      	ldr	r3, [sp, #0]
    6f50:	f003 0301 	and.w	r3, r3, #1
    6f54:	2b00      	cmp	r3, #0
    6f56:	d100      	bne.n	6f5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6f5a:	490a      	ldr	r1, [pc, #40]	; (6f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6f5c:	9b01      	ldr	r3, [sp, #4]
    6f5e:	9a00      	ldr	r2, [sp, #0]
    6f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6f64:	4a06      	ldr	r2, [pc, #24]	; (6f80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6f66:	9b01      	ldr	r3, [sp, #4]
    6f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f6c:	1c5a      	adds	r2, r3, #1
    6f6e:	4904      	ldr	r1, [pc, #16]	; (6f80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6f70:	9b01      	ldr	r3, [sp, #4]
    6f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f76:	bf00      	nop
    6f78:	b003      	add	sp, #12
    6f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f7e:	bf00      	nop
    6f80:	1fff8d78 	.word	0x1fff8d78
    6f84:	1fff8d74 	.word	0x1fff8d74

00006f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6f88:	b500      	push	{lr}
    6f8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f8c:	f7fa fb20 	bl	15d0 <Sys_GetCoreID>
    6f90:	4603      	mov	r3, r0
    6f92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6f94:	4a0d      	ldr	r2, [pc, #52]	; (6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6f96:	9b01      	ldr	r3, [sp, #4]
    6f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f9c:	1e5a      	subs	r2, r3, #1
    6f9e:	490b      	ldr	r1, [pc, #44]	; (6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6fa0:	9b01      	ldr	r3, [sp, #4]
    6fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6fa6:	4a0a      	ldr	r2, [pc, #40]	; (6fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6fa8:	9b01      	ldr	r3, [sp, #4]
    6faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fae:	f003 0301 	and.w	r3, r3, #1
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d106      	bne.n	6fc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6fb6:	4a05      	ldr	r2, [pc, #20]	; (6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6fb8:	9b01      	ldr	r3, [sp, #4]
    6fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d100      	bne.n	6fc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6fc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6fc4:	bf00      	nop
    6fc6:	b003      	add	sp, #12
    6fc8:	f85d fb04 	ldr.w	pc, [sp], #4
    6fcc:	1fff8d78 	.word	0x1fff8d78
    6fd0:	1fff8d74 	.word	0x1fff8d74

00006fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6fd4:	b500      	push	{lr}
    6fd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fd8:	f7fa fafa 	bl	15d0 <Sys_GetCoreID>
    6fdc:	4603      	mov	r3, r0
    6fde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6fe0:	4a10      	ldr	r2, [pc, #64]	; (7024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6fe2:	9b01      	ldr	r3, [sp, #4]
    6fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d10d      	bne.n	7008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6fec:	f7f9 fcbe 	bl	96c <Port_schm_read_msr>
    6ff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ff2:	9b00      	ldr	r3, [sp, #0]
    6ff4:	f003 0301 	and.w	r3, r3, #1
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d100      	bne.n	6ffe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ffc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    6ffe:	490a      	ldr	r1, [pc, #40]	; (7028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    7000:	9b01      	ldr	r3, [sp, #4]
    7002:	9a00      	ldr	r2, [sp, #0]
    7004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    7008:	4a06      	ldr	r2, [pc, #24]	; (7024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    700a:	9b01      	ldr	r3, [sp, #4]
    700c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7010:	1c5a      	adds	r2, r3, #1
    7012:	4904      	ldr	r1, [pc, #16]	; (7024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7014:	9b01      	ldr	r3, [sp, #4]
    7016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    701a:	bf00      	nop
    701c:	b003      	add	sp, #12
    701e:	f85d fb04 	ldr.w	pc, [sp], #4
    7022:	bf00      	nop
    7024:	1fff8d80 	.word	0x1fff8d80
    7028:	1fff8d7c 	.word	0x1fff8d7c

0000702c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    702c:	b500      	push	{lr}
    702e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7030:	f7fa face 	bl	15d0 <Sys_GetCoreID>
    7034:	4603      	mov	r3, r0
    7036:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    7038:	4a0d      	ldr	r2, [pc, #52]	; (7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    703a:	9b01      	ldr	r3, [sp, #4]
    703c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7040:	1e5a      	subs	r2, r3, #1
    7042:	490b      	ldr	r1, [pc, #44]	; (7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    7044:	9b01      	ldr	r3, [sp, #4]
    7046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    704a:	4a0a      	ldr	r2, [pc, #40]	; (7074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7052:	f003 0301 	and.w	r3, r3, #1
    7056:	2b00      	cmp	r3, #0
    7058:	d106      	bne.n	7068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    705a:	4a05      	ldr	r2, [pc, #20]	; (7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7062:	2b00      	cmp	r3, #0
    7064:	d100      	bne.n	7068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7068:	bf00      	nop
    706a:	b003      	add	sp, #12
    706c:	f85d fb04 	ldr.w	pc, [sp], #4
    7070:	1fff8d80 	.word	0x1fff8d80
    7074:	1fff8d7c 	.word	0x1fff8d7c

00007078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    7078:	b500      	push	{lr}
    707a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    707c:	f7fa faa8 	bl	15d0 <Sys_GetCoreID>
    7080:	4603      	mov	r3, r0
    7082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    7084:	4a10      	ldr	r2, [pc, #64]	; (70c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7086:	9b01      	ldr	r3, [sp, #4]
    7088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    708c:	2b00      	cmp	r3, #0
    708e:	d10d      	bne.n	70ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7090:	f7f9 fc6c 	bl	96c <Port_schm_read_msr>
    7094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7096:	9b00      	ldr	r3, [sp, #0]
    7098:	f003 0301 	and.w	r3, r3, #1
    709c:	2b00      	cmp	r3, #0
    709e:	d100      	bne.n	70a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    70a2:	490a      	ldr	r1, [pc, #40]	; (70cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    70a4:	9b01      	ldr	r3, [sp, #4]
    70a6:	9a00      	ldr	r2, [sp, #0]
    70a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    70ac:	4a06      	ldr	r2, [pc, #24]	; (70c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    70ae:	9b01      	ldr	r3, [sp, #4]
    70b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b4:	1c5a      	adds	r2, r3, #1
    70b6:	4904      	ldr	r1, [pc, #16]	; (70c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    70b8:	9b01      	ldr	r3, [sp, #4]
    70ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70be:	bf00      	nop
    70c0:	b003      	add	sp, #12
    70c2:	f85d fb04 	ldr.w	pc, [sp], #4
    70c6:	bf00      	nop
    70c8:	1fff8d88 	.word	0x1fff8d88
    70cc:	1fff8d84 	.word	0x1fff8d84

000070d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    70d0:	b500      	push	{lr}
    70d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70d4:	f7fa fa7c 	bl	15d0 <Sys_GetCoreID>
    70d8:	4603      	mov	r3, r0
    70da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    70dc:	4a0d      	ldr	r2, [pc, #52]	; (7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    70de:	9b01      	ldr	r3, [sp, #4]
    70e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e4:	1e5a      	subs	r2, r3, #1
    70e6:	490b      	ldr	r1, [pc, #44]	; (7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    70e8:	9b01      	ldr	r3, [sp, #4]
    70ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    70ee:	4a0a      	ldr	r2, [pc, #40]	; (7118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f6:	f003 0301 	and.w	r3, r3, #1
    70fa:	2b00      	cmp	r3, #0
    70fc:	d106      	bne.n	710c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    70fe:	4a05      	ldr	r2, [pc, #20]	; (7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7100:	9b01      	ldr	r3, [sp, #4]
    7102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7106:	2b00      	cmp	r3, #0
    7108:	d100      	bne.n	710c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    710a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    710c:	bf00      	nop
    710e:	b003      	add	sp, #12
    7110:	f85d fb04 	ldr.w	pc, [sp], #4
    7114:	1fff8d88 	.word	0x1fff8d88
    7118:	1fff8d84 	.word	0x1fff8d84

0000711c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    711c:	b500      	push	{lr}
    711e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7120:	f7fa fa56 	bl	15d0 <Sys_GetCoreID>
    7124:	4603      	mov	r3, r0
    7126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    7128:	4a10      	ldr	r2, [pc, #64]	; (716c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    712a:	9b01      	ldr	r3, [sp, #4]
    712c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7130:	2b00      	cmp	r3, #0
    7132:	d10d      	bne.n	7150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7134:	f7f9 fc1a 	bl	96c <Port_schm_read_msr>
    7138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    713a:	9b00      	ldr	r3, [sp, #0]
    713c:	f003 0301 	and.w	r3, r3, #1
    7140:	2b00      	cmp	r3, #0
    7142:	d100      	bne.n	7146 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    7146:	490a      	ldr	r1, [pc, #40]	; (7170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    7148:	9b01      	ldr	r3, [sp, #4]
    714a:	9a00      	ldr	r2, [sp, #0]
    714c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    7150:	4a06      	ldr	r2, [pc, #24]	; (716c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7152:	9b01      	ldr	r3, [sp, #4]
    7154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7158:	1c5a      	adds	r2, r3, #1
    715a:	4904      	ldr	r1, [pc, #16]	; (716c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    715c:	9b01      	ldr	r3, [sp, #4]
    715e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7162:	bf00      	nop
    7164:	b003      	add	sp, #12
    7166:	f85d fb04 	ldr.w	pc, [sp], #4
    716a:	bf00      	nop
    716c:	1fff8d90 	.word	0x1fff8d90
    7170:	1fff8d8c 	.word	0x1fff8d8c

00007174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7174:	b500      	push	{lr}
    7176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7178:	f7fa fa2a 	bl	15d0 <Sys_GetCoreID>
    717c:	4603      	mov	r3, r0
    717e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    7180:	4a0d      	ldr	r2, [pc, #52]	; (71b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7182:	9b01      	ldr	r3, [sp, #4]
    7184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7188:	1e5a      	subs	r2, r3, #1
    718a:	490b      	ldr	r1, [pc, #44]	; (71b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    718c:	9b01      	ldr	r3, [sp, #4]
    718e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    7192:	4a0a      	ldr	r2, [pc, #40]	; (71bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    7194:	9b01      	ldr	r3, [sp, #4]
    7196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    719a:	f003 0301 	and.w	r3, r3, #1
    719e:	2b00      	cmp	r3, #0
    71a0:	d106      	bne.n	71b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    71a2:	4a05      	ldr	r2, [pc, #20]	; (71b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    71a4:	9b01      	ldr	r3, [sp, #4]
    71a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d100      	bne.n	71b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71b0:	bf00      	nop
    71b2:	b003      	add	sp, #12
    71b4:	f85d fb04 	ldr.w	pc, [sp], #4
    71b8:	1fff8d90 	.word	0x1fff8d90
    71bc:	1fff8d8c 	.word	0x1fff8d8c

000071c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    71c0:	b500      	push	{lr}
    71c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71c4:	f7fa fa04 	bl	15d0 <Sys_GetCoreID>
    71c8:	4603      	mov	r3, r0
    71ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    71cc:	4a10      	ldr	r2, [pc, #64]	; (7210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    71ce:	9b01      	ldr	r3, [sp, #4]
    71d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d4:	2b00      	cmp	r3, #0
    71d6:	d10d      	bne.n	71f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    71d8:	f7f9 fbc8 	bl	96c <Port_schm_read_msr>
    71dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    71de:	9b00      	ldr	r3, [sp, #0]
    71e0:	f003 0301 	and.w	r3, r3, #1
    71e4:	2b00      	cmp	r3, #0
    71e6:	d100      	bne.n	71ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    71e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    71ea:	490a      	ldr	r1, [pc, #40]	; (7214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    71ec:	9b01      	ldr	r3, [sp, #4]
    71ee:	9a00      	ldr	r2, [sp, #0]
    71f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    71f4:	4a06      	ldr	r2, [pc, #24]	; (7210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    71f6:	9b01      	ldr	r3, [sp, #4]
    71f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71fc:	1c5a      	adds	r2, r3, #1
    71fe:	4904      	ldr	r1, [pc, #16]	; (7210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7200:	9b01      	ldr	r3, [sp, #4]
    7202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7206:	bf00      	nop
    7208:	b003      	add	sp, #12
    720a:	f85d fb04 	ldr.w	pc, [sp], #4
    720e:	bf00      	nop
    7210:	1fff8d98 	.word	0x1fff8d98
    7214:	1fff8d94 	.word	0x1fff8d94

00007218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7218:	b500      	push	{lr}
    721a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    721c:	f7fa f9d8 	bl	15d0 <Sys_GetCoreID>
    7220:	4603      	mov	r3, r0
    7222:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7224:	4a0d      	ldr	r2, [pc, #52]	; (725c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7226:	9b01      	ldr	r3, [sp, #4]
    7228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    722c:	1e5a      	subs	r2, r3, #1
    722e:	490b      	ldr	r1, [pc, #44]	; (725c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7230:	9b01      	ldr	r3, [sp, #4]
    7232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7236:	4a0a      	ldr	r2, [pc, #40]	; (7260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    7238:	9b01      	ldr	r3, [sp, #4]
    723a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    723e:	f003 0301 	and.w	r3, r3, #1
    7242:	2b00      	cmp	r3, #0
    7244:	d106      	bne.n	7254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    7246:	4a05      	ldr	r2, [pc, #20]	; (725c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7248:	9b01      	ldr	r3, [sp, #4]
    724a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    724e:	2b00      	cmp	r3, #0
    7250:	d100      	bne.n	7254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7254:	bf00      	nop
    7256:	b003      	add	sp, #12
    7258:	f85d fb04 	ldr.w	pc, [sp], #4
    725c:	1fff8d98 	.word	0x1fff8d98
    7260:	1fff8d94 	.word	0x1fff8d94

00007264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7264:	b500      	push	{lr}
    7266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7268:	f7fa f9b2 	bl	15d0 <Sys_GetCoreID>
    726c:	4603      	mov	r3, r0
    726e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    7270:	4a10      	ldr	r2, [pc, #64]	; (72b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7272:	9b01      	ldr	r3, [sp, #4]
    7274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7278:	2b00      	cmp	r3, #0
    727a:	d10d      	bne.n	7298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    727c:	f7f9 fb76 	bl	96c <Port_schm_read_msr>
    7280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7282:	9b00      	ldr	r3, [sp, #0]
    7284:	f003 0301 	and.w	r3, r3, #1
    7288:	2b00      	cmp	r3, #0
    728a:	d100      	bne.n	728e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    728c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    728e:	490a      	ldr	r1, [pc, #40]	; (72b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    7290:	9b01      	ldr	r3, [sp, #4]
    7292:	9a00      	ldr	r2, [sp, #0]
    7294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    7298:	4a06      	ldr	r2, [pc, #24]	; (72b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    729a:	9b01      	ldr	r3, [sp, #4]
    729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a0:	1c5a      	adds	r2, r3, #1
    72a2:	4904      	ldr	r1, [pc, #16]	; (72b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    72a4:	9b01      	ldr	r3, [sp, #4]
    72a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72aa:	bf00      	nop
    72ac:	b003      	add	sp, #12
    72ae:	f85d fb04 	ldr.w	pc, [sp], #4
    72b2:	bf00      	nop
    72b4:	1fff8da0 	.word	0x1fff8da0
    72b8:	1fff8d9c 	.word	0x1fff8d9c

000072bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    72bc:	b500      	push	{lr}
    72be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72c0:	f7fa f986 	bl	15d0 <Sys_GetCoreID>
    72c4:	4603      	mov	r3, r0
    72c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    72c8:	4a0d      	ldr	r2, [pc, #52]	; (7300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    72ca:	9b01      	ldr	r3, [sp, #4]
    72cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d0:	1e5a      	subs	r2, r3, #1
    72d2:	490b      	ldr	r1, [pc, #44]	; (7300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    72d4:	9b01      	ldr	r3, [sp, #4]
    72d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    72da:	4a0a      	ldr	r2, [pc, #40]	; (7304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    72dc:	9b01      	ldr	r3, [sp, #4]
    72de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72e2:	f003 0301 	and.w	r3, r3, #1
    72e6:	2b00      	cmp	r3, #0
    72e8:	d106      	bne.n	72f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    72ea:	4a05      	ldr	r2, [pc, #20]	; (7300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    72ec:	9b01      	ldr	r3, [sp, #4]
    72ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f2:	2b00      	cmp	r3, #0
    72f4:	d100      	bne.n	72f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    72f8:	bf00      	nop
    72fa:	b003      	add	sp, #12
    72fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7300:	1fff8da0 	.word	0x1fff8da0
    7304:	1fff8d9c 	.word	0x1fff8d9c

00007308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7308:	b500      	push	{lr}
    730a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    730c:	f7fa f960 	bl	15d0 <Sys_GetCoreID>
    7310:	4603      	mov	r3, r0
    7312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    7314:	4a10      	ldr	r2, [pc, #64]	; (7358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7316:	9b01      	ldr	r3, [sp, #4]
    7318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    731c:	2b00      	cmp	r3, #0
    731e:	d10d      	bne.n	733c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7320:	f7f9 fb24 	bl	96c <Port_schm_read_msr>
    7324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7326:	9b00      	ldr	r3, [sp, #0]
    7328:	f003 0301 	and.w	r3, r3, #1
    732c:	2b00      	cmp	r3, #0
    732e:	d100      	bne.n	7332 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    7332:	490a      	ldr	r1, [pc, #40]	; (735c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7334:	9b01      	ldr	r3, [sp, #4]
    7336:	9a00      	ldr	r2, [sp, #0]
    7338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    733c:	4a06      	ldr	r2, [pc, #24]	; (7358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    733e:	9b01      	ldr	r3, [sp, #4]
    7340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7344:	1c5a      	adds	r2, r3, #1
    7346:	4904      	ldr	r1, [pc, #16]	; (7358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7348:	9b01      	ldr	r3, [sp, #4]
    734a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    734e:	bf00      	nop
    7350:	b003      	add	sp, #12
    7352:	f85d fb04 	ldr.w	pc, [sp], #4
    7356:	bf00      	nop
    7358:	1fff8da8 	.word	0x1fff8da8
    735c:	1fff8da4 	.word	0x1fff8da4

00007360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7360:	b500      	push	{lr}
    7362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7364:	f7fa f934 	bl	15d0 <Sys_GetCoreID>
    7368:	4603      	mov	r3, r0
    736a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    736c:	4a0d      	ldr	r2, [pc, #52]	; (73a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    736e:	9b01      	ldr	r3, [sp, #4]
    7370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7374:	1e5a      	subs	r2, r3, #1
    7376:	490b      	ldr	r1, [pc, #44]	; (73a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7378:	9b01      	ldr	r3, [sp, #4]
    737a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    737e:	4a0a      	ldr	r2, [pc, #40]	; (73a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    7380:	9b01      	ldr	r3, [sp, #4]
    7382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7386:	f003 0301 	and.w	r3, r3, #1
    738a:	2b00      	cmp	r3, #0
    738c:	d106      	bne.n	739c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    738e:	4a05      	ldr	r2, [pc, #20]	; (73a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7390:	9b01      	ldr	r3, [sp, #4]
    7392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7396:	2b00      	cmp	r3, #0
    7398:	d100      	bne.n	739c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    739a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    739c:	bf00      	nop
    739e:	b003      	add	sp, #12
    73a0:	f85d fb04 	ldr.w	pc, [sp], #4
    73a4:	1fff8da8 	.word	0x1fff8da8
    73a8:	1fff8da4 	.word	0x1fff8da4

000073ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    73ac:	b500      	push	{lr}
    73ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73b0:	f7fa f90e 	bl	15d0 <Sys_GetCoreID>
    73b4:	4603      	mov	r3, r0
    73b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    73b8:	4a10      	ldr	r2, [pc, #64]	; (73fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    73ba:	9b01      	ldr	r3, [sp, #4]
    73bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c0:	2b00      	cmp	r3, #0
    73c2:	d10d      	bne.n	73e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    73c4:	f7f9 fad2 	bl	96c <Port_schm_read_msr>
    73c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    73ca:	9b00      	ldr	r3, [sp, #0]
    73cc:	f003 0301 	and.w	r3, r3, #1
    73d0:	2b00      	cmp	r3, #0
    73d2:	d100      	bne.n	73d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    73d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    73d6:	490a      	ldr	r1, [pc, #40]	; (7400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    73d8:	9b01      	ldr	r3, [sp, #4]
    73da:	9a00      	ldr	r2, [sp, #0]
    73dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    73e0:	4a06      	ldr	r2, [pc, #24]	; (73fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    73e2:	9b01      	ldr	r3, [sp, #4]
    73e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e8:	1c5a      	adds	r2, r3, #1
    73ea:	4904      	ldr	r1, [pc, #16]	; (73fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    73ec:	9b01      	ldr	r3, [sp, #4]
    73ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73f2:	bf00      	nop
    73f4:	b003      	add	sp, #12
    73f6:	f85d fb04 	ldr.w	pc, [sp], #4
    73fa:	bf00      	nop
    73fc:	1fff8db0 	.word	0x1fff8db0
    7400:	1fff8dac 	.word	0x1fff8dac

00007404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7404:	b500      	push	{lr}
    7406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7408:	f7fa f8e2 	bl	15d0 <Sys_GetCoreID>
    740c:	4603      	mov	r3, r0
    740e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    7410:	4a0d      	ldr	r2, [pc, #52]	; (7448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7412:	9b01      	ldr	r3, [sp, #4]
    7414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7418:	1e5a      	subs	r2, r3, #1
    741a:	490b      	ldr	r1, [pc, #44]	; (7448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    741c:	9b01      	ldr	r3, [sp, #4]
    741e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    7422:	4a0a      	ldr	r2, [pc, #40]	; (744c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7424:	9b01      	ldr	r3, [sp, #4]
    7426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    742a:	f003 0301 	and.w	r3, r3, #1
    742e:	2b00      	cmp	r3, #0
    7430:	d106      	bne.n	7440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    7432:	4a05      	ldr	r2, [pc, #20]	; (7448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7434:	9b01      	ldr	r3, [sp, #4]
    7436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    743a:	2b00      	cmp	r3, #0
    743c:	d100      	bne.n	7440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    743e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7440:	bf00      	nop
    7442:	b003      	add	sp, #12
    7444:	f85d fb04 	ldr.w	pc, [sp], #4
    7448:	1fff8db0 	.word	0x1fff8db0
    744c:	1fff8dac 	.word	0x1fff8dac

00007450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7450:	b500      	push	{lr}
    7452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7454:	f7fa f8bc 	bl	15d0 <Sys_GetCoreID>
    7458:	4603      	mov	r3, r0
    745a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    745c:	4a10      	ldr	r2, [pc, #64]	; (74a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    745e:	9b01      	ldr	r3, [sp, #4]
    7460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7464:	2b00      	cmp	r3, #0
    7466:	d10d      	bne.n	7484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7468:	f7f9 fa80 	bl	96c <Port_schm_read_msr>
    746c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    746e:	9b00      	ldr	r3, [sp, #0]
    7470:	f003 0301 	and.w	r3, r3, #1
    7474:	2b00      	cmp	r3, #0
    7476:	d100      	bne.n	747a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    747a:	490a      	ldr	r1, [pc, #40]	; (74a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    747c:	9b01      	ldr	r3, [sp, #4]
    747e:	9a00      	ldr	r2, [sp, #0]
    7480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7484:	4a06      	ldr	r2, [pc, #24]	; (74a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7486:	9b01      	ldr	r3, [sp, #4]
    7488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    748c:	1c5a      	adds	r2, r3, #1
    748e:	4904      	ldr	r1, [pc, #16]	; (74a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7490:	9b01      	ldr	r3, [sp, #4]
    7492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7496:	bf00      	nop
    7498:	b003      	add	sp, #12
    749a:	f85d fb04 	ldr.w	pc, [sp], #4
    749e:	bf00      	nop
    74a0:	1fff8db8 	.word	0x1fff8db8
    74a4:	1fff8db4 	.word	0x1fff8db4

000074a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    74a8:	b500      	push	{lr}
    74aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74ac:	f7fa f890 	bl	15d0 <Sys_GetCoreID>
    74b0:	4603      	mov	r3, r0
    74b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    74b4:	4a0d      	ldr	r2, [pc, #52]	; (74ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    74b6:	9b01      	ldr	r3, [sp, #4]
    74b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74bc:	1e5a      	subs	r2, r3, #1
    74be:	490b      	ldr	r1, [pc, #44]	; (74ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    74c0:	9b01      	ldr	r3, [sp, #4]
    74c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    74c6:	4a0a      	ldr	r2, [pc, #40]	; (74f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    74c8:	9b01      	ldr	r3, [sp, #4]
    74ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ce:	f003 0301 	and.w	r3, r3, #1
    74d2:	2b00      	cmp	r3, #0
    74d4:	d106      	bne.n	74e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    74d6:	4a05      	ldr	r2, [pc, #20]	; (74ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    74d8:	9b01      	ldr	r3, [sp, #4]
    74da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74de:	2b00      	cmp	r3, #0
    74e0:	d100      	bne.n	74e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    74e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    74e4:	bf00      	nop
    74e6:	b003      	add	sp, #12
    74e8:	f85d fb04 	ldr.w	pc, [sp], #4
    74ec:	1fff8db8 	.word	0x1fff8db8
    74f0:	1fff8db4 	.word	0x1fff8db4

000074f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    74f4:	b500      	push	{lr}
    74f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74f8:	f7fa f86a 	bl	15d0 <Sys_GetCoreID>
    74fc:	4603      	mov	r3, r0
    74fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    7500:	4a10      	ldr	r2, [pc, #64]	; (7544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7502:	9b01      	ldr	r3, [sp, #4]
    7504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7508:	2b00      	cmp	r3, #0
    750a:	d10d      	bne.n	7528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    750c:	f7f9 fa2e 	bl	96c <Port_schm_read_msr>
    7510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7512:	9b00      	ldr	r3, [sp, #0]
    7514:	f003 0301 	and.w	r3, r3, #1
    7518:	2b00      	cmp	r3, #0
    751a:	d100      	bne.n	751e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    751c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    751e:	490a      	ldr	r1, [pc, #40]	; (7548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    7520:	9b01      	ldr	r3, [sp, #4]
    7522:	9a00      	ldr	r2, [sp, #0]
    7524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    7528:	4a06      	ldr	r2, [pc, #24]	; (7544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    752a:	9b01      	ldr	r3, [sp, #4]
    752c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7530:	1c5a      	adds	r2, r3, #1
    7532:	4904      	ldr	r1, [pc, #16]	; (7544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7534:	9b01      	ldr	r3, [sp, #4]
    7536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    753a:	bf00      	nop
    753c:	b003      	add	sp, #12
    753e:	f85d fb04 	ldr.w	pc, [sp], #4
    7542:	bf00      	nop
    7544:	1fff8dc0 	.word	0x1fff8dc0
    7548:	1fff8dbc 	.word	0x1fff8dbc

0000754c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    754c:	b500      	push	{lr}
    754e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7550:	f7fa f83e 	bl	15d0 <Sys_GetCoreID>
    7554:	4603      	mov	r3, r0
    7556:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    7558:	4a0d      	ldr	r2, [pc, #52]	; (7590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    755a:	9b01      	ldr	r3, [sp, #4]
    755c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7560:	1e5a      	subs	r2, r3, #1
    7562:	490b      	ldr	r1, [pc, #44]	; (7590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7564:	9b01      	ldr	r3, [sp, #4]
    7566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    756a:	4a0a      	ldr	r2, [pc, #40]	; (7594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    756c:	9b01      	ldr	r3, [sp, #4]
    756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7572:	f003 0301 	and.w	r3, r3, #1
    7576:	2b00      	cmp	r3, #0
    7578:	d106      	bne.n	7588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    757a:	4a05      	ldr	r2, [pc, #20]	; (7590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    757c:	9b01      	ldr	r3, [sp, #4]
    757e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7582:	2b00      	cmp	r3, #0
    7584:	d100      	bne.n	7588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7588:	bf00      	nop
    758a:	b003      	add	sp, #12
    758c:	f85d fb04 	ldr.w	pc, [sp], #4
    7590:	1fff8dc0 	.word	0x1fff8dc0
    7594:	1fff8dbc 	.word	0x1fff8dbc

00007598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7598:	b500      	push	{lr}
    759a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    759c:	f7fa f818 	bl	15d0 <Sys_GetCoreID>
    75a0:	4603      	mov	r3, r0
    75a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    75a4:	4a10      	ldr	r2, [pc, #64]	; (75e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    75a6:	9b01      	ldr	r3, [sp, #4]
    75a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ac:	2b00      	cmp	r3, #0
    75ae:	d10d      	bne.n	75cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    75b0:	f7f9 f9dc 	bl	96c <Port_schm_read_msr>
    75b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    75b6:	9b00      	ldr	r3, [sp, #0]
    75b8:	f003 0301 	and.w	r3, r3, #1
    75bc:	2b00      	cmp	r3, #0
    75be:	d100      	bne.n	75c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    75c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    75c2:	490a      	ldr	r1, [pc, #40]	; (75ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    75c4:	9b01      	ldr	r3, [sp, #4]
    75c6:	9a00      	ldr	r2, [sp, #0]
    75c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    75cc:	4a06      	ldr	r2, [pc, #24]	; (75e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    75ce:	9b01      	ldr	r3, [sp, #4]
    75d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d4:	1c5a      	adds	r2, r3, #1
    75d6:	4904      	ldr	r1, [pc, #16]	; (75e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    75d8:	9b01      	ldr	r3, [sp, #4]
    75da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    75de:	bf00      	nop
    75e0:	b003      	add	sp, #12
    75e2:	f85d fb04 	ldr.w	pc, [sp], #4
    75e6:	bf00      	nop
    75e8:	1fff8dc8 	.word	0x1fff8dc8
    75ec:	1fff8dc4 	.word	0x1fff8dc4

000075f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    75f0:	b500      	push	{lr}
    75f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75f4:	f7f9 ffec 	bl	15d0 <Sys_GetCoreID>
    75f8:	4603      	mov	r3, r0
    75fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    75fc:	4a0d      	ldr	r2, [pc, #52]	; (7634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    75fe:	9b01      	ldr	r3, [sp, #4]
    7600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7604:	1e5a      	subs	r2, r3, #1
    7606:	490b      	ldr	r1, [pc, #44]	; (7634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7608:	9b01      	ldr	r3, [sp, #4]
    760a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    760e:	4a0a      	ldr	r2, [pc, #40]	; (7638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    7610:	9b01      	ldr	r3, [sp, #4]
    7612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7616:	f003 0301 	and.w	r3, r3, #1
    761a:	2b00      	cmp	r3, #0
    761c:	d106      	bne.n	762c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    761e:	4a05      	ldr	r2, [pc, #20]	; (7634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7620:	9b01      	ldr	r3, [sp, #4]
    7622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7626:	2b00      	cmp	r3, #0
    7628:	d100      	bne.n	762c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    762a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    762c:	bf00      	nop
    762e:	b003      	add	sp, #12
    7630:	f85d fb04 	ldr.w	pc, [sp], #4
    7634:	1fff8dc8 	.word	0x1fff8dc8
    7638:	1fff8dc4 	.word	0x1fff8dc4

0000763c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    763c:	b500      	push	{lr}
    763e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7640:	f7f9 ffc6 	bl	15d0 <Sys_GetCoreID>
    7644:	4603      	mov	r3, r0
    7646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7648:	4a10      	ldr	r2, [pc, #64]	; (768c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    764a:	9b01      	ldr	r3, [sp, #4]
    764c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7650:	2b00      	cmp	r3, #0
    7652:	d10d      	bne.n	7670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7654:	f7f9 f98a 	bl	96c <Port_schm_read_msr>
    7658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    765a:	9b00      	ldr	r3, [sp, #0]
    765c:	f003 0301 	and.w	r3, r3, #1
    7660:	2b00      	cmp	r3, #0
    7662:	d100      	bne.n	7666 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    7666:	490a      	ldr	r1, [pc, #40]	; (7690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    7668:	9b01      	ldr	r3, [sp, #4]
    766a:	9a00      	ldr	r2, [sp, #0]
    766c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    7670:	4a06      	ldr	r2, [pc, #24]	; (768c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7672:	9b01      	ldr	r3, [sp, #4]
    7674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7678:	1c5a      	adds	r2, r3, #1
    767a:	4904      	ldr	r1, [pc, #16]	; (768c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    767c:	9b01      	ldr	r3, [sp, #4]
    767e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7682:	bf00      	nop
    7684:	b003      	add	sp, #12
    7686:	f85d fb04 	ldr.w	pc, [sp], #4
    768a:	bf00      	nop
    768c:	1fff8dd0 	.word	0x1fff8dd0
    7690:	1fff8dcc 	.word	0x1fff8dcc

00007694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7694:	b500      	push	{lr}
    7696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7698:	f7f9 ff9a 	bl	15d0 <Sys_GetCoreID>
    769c:	4603      	mov	r3, r0
    769e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    76a0:	4a0d      	ldr	r2, [pc, #52]	; (76d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    76a2:	9b01      	ldr	r3, [sp, #4]
    76a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a8:	1e5a      	subs	r2, r3, #1
    76aa:	490b      	ldr	r1, [pc, #44]	; (76d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    76ac:	9b01      	ldr	r3, [sp, #4]
    76ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    76b2:	4a0a      	ldr	r2, [pc, #40]	; (76dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    76b4:	9b01      	ldr	r3, [sp, #4]
    76b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ba:	f003 0301 	and.w	r3, r3, #1
    76be:	2b00      	cmp	r3, #0
    76c0:	d106      	bne.n	76d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    76c2:	4a05      	ldr	r2, [pc, #20]	; (76d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    76c4:	9b01      	ldr	r3, [sp, #4]
    76c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d100      	bne.n	76d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    76ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    76d0:	bf00      	nop
    76d2:	b003      	add	sp, #12
    76d4:	f85d fb04 	ldr.w	pc, [sp], #4
    76d8:	1fff8dd0 	.word	0x1fff8dd0
    76dc:	1fff8dcc 	.word	0x1fff8dcc

000076e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    76e0:	b500      	push	{lr}
    76e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76e4:	f7f9 ff74 	bl	15d0 <Sys_GetCoreID>
    76e8:	4603      	mov	r3, r0
    76ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    76ec:	4a10      	ldr	r2, [pc, #64]	; (7730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    76ee:	9b01      	ldr	r3, [sp, #4]
    76f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f4:	2b00      	cmp	r3, #0
    76f6:	d10d      	bne.n	7714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    76f8:	f7f9 f938 	bl	96c <Port_schm_read_msr>
    76fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    76fe:	9b00      	ldr	r3, [sp, #0]
    7700:	f003 0301 	and.w	r3, r3, #1
    7704:	2b00      	cmp	r3, #0
    7706:	d100      	bne.n	770a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    770a:	490a      	ldr	r1, [pc, #40]	; (7734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    770c:	9b01      	ldr	r3, [sp, #4]
    770e:	9a00      	ldr	r2, [sp, #0]
    7710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7714:	4a06      	ldr	r2, [pc, #24]	; (7730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7716:	9b01      	ldr	r3, [sp, #4]
    7718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    771c:	1c5a      	adds	r2, r3, #1
    771e:	4904      	ldr	r1, [pc, #16]	; (7730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7726:	bf00      	nop
    7728:	b003      	add	sp, #12
    772a:	f85d fb04 	ldr.w	pc, [sp], #4
    772e:	bf00      	nop
    7730:	1fff8dd8 	.word	0x1fff8dd8
    7734:	1fff8dd4 	.word	0x1fff8dd4

00007738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7738:	b500      	push	{lr}
    773a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    773c:	f7f9 ff48 	bl	15d0 <Sys_GetCoreID>
    7740:	4603      	mov	r3, r0
    7742:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7744:	4a0d      	ldr	r2, [pc, #52]	; (777c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7746:	9b01      	ldr	r3, [sp, #4]
    7748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    774c:	1e5a      	subs	r2, r3, #1
    774e:	490b      	ldr	r1, [pc, #44]	; (777c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7750:	9b01      	ldr	r3, [sp, #4]
    7752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    7756:	4a0a      	ldr	r2, [pc, #40]	; (7780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    7758:	9b01      	ldr	r3, [sp, #4]
    775a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    775e:	f003 0301 	and.w	r3, r3, #1
    7762:	2b00      	cmp	r3, #0
    7764:	d106      	bne.n	7774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    7766:	4a05      	ldr	r2, [pc, #20]	; (777c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7768:	9b01      	ldr	r3, [sp, #4]
    776a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    776e:	2b00      	cmp	r3, #0
    7770:	d100      	bne.n	7774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7774:	bf00      	nop
    7776:	b003      	add	sp, #12
    7778:	f85d fb04 	ldr.w	pc, [sp], #4
    777c:	1fff8dd8 	.word	0x1fff8dd8
    7780:	1fff8dd4 	.word	0x1fff8dd4

00007784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7784:	b500      	push	{lr}
    7786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7788:	f7f9 ff22 	bl	15d0 <Sys_GetCoreID>
    778c:	4603      	mov	r3, r0
    778e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    7790:	4a10      	ldr	r2, [pc, #64]	; (77d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7792:	9b01      	ldr	r3, [sp, #4]
    7794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7798:	2b00      	cmp	r3, #0
    779a:	d10d      	bne.n	77b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    779c:	f7f9 f8e6 	bl	96c <Port_schm_read_msr>
    77a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77a2:	9b00      	ldr	r3, [sp, #0]
    77a4:	f003 0301 	and.w	r3, r3, #1
    77a8:	2b00      	cmp	r3, #0
    77aa:	d100      	bne.n	77ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    77ae:	490a      	ldr	r1, [pc, #40]	; (77d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    77b0:	9b01      	ldr	r3, [sp, #4]
    77b2:	9a00      	ldr	r2, [sp, #0]
    77b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    77b8:	4a06      	ldr	r2, [pc, #24]	; (77d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    77ba:	9b01      	ldr	r3, [sp, #4]
    77bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c0:	1c5a      	adds	r2, r3, #1
    77c2:	4904      	ldr	r1, [pc, #16]	; (77d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    77c4:	9b01      	ldr	r3, [sp, #4]
    77c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77ca:	bf00      	nop
    77cc:	b003      	add	sp, #12
    77ce:	f85d fb04 	ldr.w	pc, [sp], #4
    77d2:	bf00      	nop
    77d4:	1fff8de0 	.word	0x1fff8de0
    77d8:	1fff8ddc 	.word	0x1fff8ddc

000077dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    77dc:	b500      	push	{lr}
    77de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77e0:	f7f9 fef6 	bl	15d0 <Sys_GetCoreID>
    77e4:	4603      	mov	r3, r0
    77e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    77e8:	4a0d      	ldr	r2, [pc, #52]	; (7820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    77ea:	9b01      	ldr	r3, [sp, #4]
    77ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f0:	1e5a      	subs	r2, r3, #1
    77f2:	490b      	ldr	r1, [pc, #44]	; (7820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    77f4:	9b01      	ldr	r3, [sp, #4]
    77f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    77fa:	4a0a      	ldr	r2, [pc, #40]	; (7824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    77fc:	9b01      	ldr	r3, [sp, #4]
    77fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7802:	f003 0301 	and.w	r3, r3, #1
    7806:	2b00      	cmp	r3, #0
    7808:	d106      	bne.n	7818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    780a:	4a05      	ldr	r2, [pc, #20]	; (7820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    780c:	9b01      	ldr	r3, [sp, #4]
    780e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7812:	2b00      	cmp	r3, #0
    7814:	d100      	bne.n	7818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7818:	bf00      	nop
    781a:	b003      	add	sp, #12
    781c:	f85d fb04 	ldr.w	pc, [sp], #4
    7820:	1fff8de0 	.word	0x1fff8de0
    7824:	1fff8ddc 	.word	0x1fff8ddc

00007828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7828:	b500      	push	{lr}
    782a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    782c:	f7f9 fed0 	bl	15d0 <Sys_GetCoreID>
    7830:	4603      	mov	r3, r0
    7832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7834:	4a10      	ldr	r2, [pc, #64]	; (7878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7836:	9b01      	ldr	r3, [sp, #4]
    7838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783c:	2b00      	cmp	r3, #0
    783e:	d10d      	bne.n	785c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7840:	f7f9 f894 	bl	96c <Port_schm_read_msr>
    7844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7846:	9b00      	ldr	r3, [sp, #0]
    7848:	f003 0301 	and.w	r3, r3, #1
    784c:	2b00      	cmp	r3, #0
    784e:	d100      	bne.n	7852 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    7852:	490a      	ldr	r1, [pc, #40]	; (787c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    7854:	9b01      	ldr	r3, [sp, #4]
    7856:	9a00      	ldr	r2, [sp, #0]
    7858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    785c:	4a06      	ldr	r2, [pc, #24]	; (7878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    785e:	9b01      	ldr	r3, [sp, #4]
    7860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7864:	1c5a      	adds	r2, r3, #1
    7866:	4904      	ldr	r1, [pc, #16]	; (7878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7868:	9b01      	ldr	r3, [sp, #4]
    786a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    786e:	bf00      	nop
    7870:	b003      	add	sp, #12
    7872:	f85d fb04 	ldr.w	pc, [sp], #4
    7876:	bf00      	nop
    7878:	1fff8de8 	.word	0x1fff8de8
    787c:	1fff8de4 	.word	0x1fff8de4

00007880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7880:	b500      	push	{lr}
    7882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7884:	f7f9 fea4 	bl	15d0 <Sys_GetCoreID>
    7888:	4603      	mov	r3, r0
    788a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    788c:	4a0d      	ldr	r2, [pc, #52]	; (78c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    788e:	9b01      	ldr	r3, [sp, #4]
    7890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7894:	1e5a      	subs	r2, r3, #1
    7896:	490b      	ldr	r1, [pc, #44]	; (78c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7898:	9b01      	ldr	r3, [sp, #4]
    789a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    789e:	4a0a      	ldr	r2, [pc, #40]	; (78c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    78a0:	9b01      	ldr	r3, [sp, #4]
    78a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78a6:	f003 0301 	and.w	r3, r3, #1
    78aa:	2b00      	cmp	r3, #0
    78ac:	d106      	bne.n	78bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    78ae:	4a05      	ldr	r2, [pc, #20]	; (78c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    78b0:	9b01      	ldr	r3, [sp, #4]
    78b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78b6:	2b00      	cmp	r3, #0
    78b8:	d100      	bne.n	78bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    78ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    78bc:	bf00      	nop
    78be:	b003      	add	sp, #12
    78c0:	f85d fb04 	ldr.w	pc, [sp], #4
    78c4:	1fff8de8 	.word	0x1fff8de8
    78c8:	1fff8de4 	.word	0x1fff8de4

000078cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    78cc:	b500      	push	{lr}
    78ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78d0:	f7f9 fe7e 	bl	15d0 <Sys_GetCoreID>
    78d4:	4603      	mov	r3, r0
    78d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    78d8:	4a10      	ldr	r2, [pc, #64]	; (791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    78da:	9b01      	ldr	r3, [sp, #4]
    78dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e0:	2b00      	cmp	r3, #0
    78e2:	d10d      	bne.n	7900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    78e4:	f7f9 f842 	bl	96c <Port_schm_read_msr>
    78e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    78ea:	9b00      	ldr	r3, [sp, #0]
    78ec:	f003 0301 	and.w	r3, r3, #1
    78f0:	2b00      	cmp	r3, #0
    78f2:	d100      	bne.n	78f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    78f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    78f6:	490a      	ldr	r1, [pc, #40]	; (7920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    78f8:	9b01      	ldr	r3, [sp, #4]
    78fa:	9a00      	ldr	r2, [sp, #0]
    78fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    7900:	4a06      	ldr	r2, [pc, #24]	; (791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7902:	9b01      	ldr	r3, [sp, #4]
    7904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7908:	1c5a      	adds	r2, r3, #1
    790a:	4904      	ldr	r1, [pc, #16]	; (791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    790c:	9b01      	ldr	r3, [sp, #4]
    790e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7912:	bf00      	nop
    7914:	b003      	add	sp, #12
    7916:	f85d fb04 	ldr.w	pc, [sp], #4
    791a:	bf00      	nop
    791c:	1fff8df0 	.word	0x1fff8df0
    7920:	1fff8dec 	.word	0x1fff8dec

00007924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7924:	b500      	push	{lr}
    7926:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7928:	f7f9 fe52 	bl	15d0 <Sys_GetCoreID>
    792c:	4603      	mov	r3, r0
    792e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    7930:	4a0d      	ldr	r2, [pc, #52]	; (7968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7932:	9b01      	ldr	r3, [sp, #4]
    7934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7938:	1e5a      	subs	r2, r3, #1
    793a:	490b      	ldr	r1, [pc, #44]	; (7968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    793c:	9b01      	ldr	r3, [sp, #4]
    793e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    7942:	4a0a      	ldr	r2, [pc, #40]	; (796c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7944:	9b01      	ldr	r3, [sp, #4]
    7946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    794a:	f003 0301 	and.w	r3, r3, #1
    794e:	2b00      	cmp	r3, #0
    7950:	d106      	bne.n	7960 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    7952:	4a05      	ldr	r2, [pc, #20]	; (7968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7954:	9b01      	ldr	r3, [sp, #4]
    7956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    795a:	2b00      	cmp	r3, #0
    795c:	d100      	bne.n	7960 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    795e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7960:	bf00      	nop
    7962:	b003      	add	sp, #12
    7964:	f85d fb04 	ldr.w	pc, [sp], #4
    7968:	1fff8df0 	.word	0x1fff8df0
    796c:	1fff8dec 	.word	0x1fff8dec

00007970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7970:	b500      	push	{lr}
    7972:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7974:	f7f9 fe2c 	bl	15d0 <Sys_GetCoreID>
    7978:	4603      	mov	r3, r0
    797a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    797c:	4a10      	ldr	r2, [pc, #64]	; (79c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    797e:	9b01      	ldr	r3, [sp, #4]
    7980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7984:	2b00      	cmp	r3, #0
    7986:	d10d      	bne.n	79a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7988:	f7f8 fff0 	bl	96c <Port_schm_read_msr>
    798c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    798e:	9b00      	ldr	r3, [sp, #0]
    7990:	f003 0301 	and.w	r3, r3, #1
    7994:	2b00      	cmp	r3, #0
    7996:	d100      	bne.n	799a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7998:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    799a:	490a      	ldr	r1, [pc, #40]	; (79c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    799c:	9b01      	ldr	r3, [sp, #4]
    799e:	9a00      	ldr	r2, [sp, #0]
    79a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    79a4:	4a06      	ldr	r2, [pc, #24]	; (79c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    79a6:	9b01      	ldr	r3, [sp, #4]
    79a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ac:	1c5a      	adds	r2, r3, #1
    79ae:	4904      	ldr	r1, [pc, #16]	; (79c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    79b0:	9b01      	ldr	r3, [sp, #4]
    79b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79b6:	bf00      	nop
    79b8:	b003      	add	sp, #12
    79ba:	f85d fb04 	ldr.w	pc, [sp], #4
    79be:	bf00      	nop
    79c0:	1fff8df8 	.word	0x1fff8df8
    79c4:	1fff8df4 	.word	0x1fff8df4

000079c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    79c8:	b500      	push	{lr}
    79ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79cc:	f7f9 fe00 	bl	15d0 <Sys_GetCoreID>
    79d0:	4603      	mov	r3, r0
    79d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    79d4:	4a0d      	ldr	r2, [pc, #52]	; (7a0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    79d6:	9b01      	ldr	r3, [sp, #4]
    79d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79dc:	1e5a      	subs	r2, r3, #1
    79de:	490b      	ldr	r1, [pc, #44]	; (7a0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    79e0:	9b01      	ldr	r3, [sp, #4]
    79e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    79e6:	4a0a      	ldr	r2, [pc, #40]	; (7a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    79e8:	9b01      	ldr	r3, [sp, #4]
    79ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ee:	f003 0301 	and.w	r3, r3, #1
    79f2:	2b00      	cmp	r3, #0
    79f4:	d106      	bne.n	7a04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    79f6:	4a05      	ldr	r2, [pc, #20]	; (7a0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    79f8:	9b01      	ldr	r3, [sp, #4]
    79fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79fe:	2b00      	cmp	r3, #0
    7a00:	d100      	bne.n	7a04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a04:	bf00      	nop
    7a06:	b003      	add	sp, #12
    7a08:	f85d fb04 	ldr.w	pc, [sp], #4
    7a0c:	1fff8df8 	.word	0x1fff8df8
    7a10:	1fff8df4 	.word	0x1fff8df4

00007a14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7a14:	b500      	push	{lr}
    7a16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a18:	f7f9 fdda 	bl	15d0 <Sys_GetCoreID>
    7a1c:	4603      	mov	r3, r0
    7a1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    7a20:	4a10      	ldr	r2, [pc, #64]	; (7a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7a22:	9b01      	ldr	r3, [sp, #4]
    7a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d10d      	bne.n	7a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a2c:	f7f8 ff9e 	bl	96c <Port_schm_read_msr>
    7a30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a32:	9b00      	ldr	r3, [sp, #0]
    7a34:	f003 0301 	and.w	r3, r3, #1
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d100      	bne.n	7a3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    7a3e:	490a      	ldr	r1, [pc, #40]	; (7a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    7a40:	9b01      	ldr	r3, [sp, #4]
    7a42:	9a00      	ldr	r2, [sp, #0]
    7a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7a48:	4a06      	ldr	r2, [pc, #24]	; (7a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7a4a:	9b01      	ldr	r3, [sp, #4]
    7a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a50:	1c5a      	adds	r2, r3, #1
    7a52:	4904      	ldr	r1, [pc, #16]	; (7a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7a54:	9b01      	ldr	r3, [sp, #4]
    7a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a5a:	bf00      	nop
    7a5c:	b003      	add	sp, #12
    7a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a62:	bf00      	nop
    7a64:	1fff8e00 	.word	0x1fff8e00
    7a68:	1fff8dfc 	.word	0x1fff8dfc

00007a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7a6c:	b500      	push	{lr}
    7a6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a70:	f7f9 fdae 	bl	15d0 <Sys_GetCoreID>
    7a74:	4603      	mov	r3, r0
    7a76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    7a78:	4a0d      	ldr	r2, [pc, #52]	; (7ab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7a7a:	9b01      	ldr	r3, [sp, #4]
    7a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a80:	1e5a      	subs	r2, r3, #1
    7a82:	490b      	ldr	r1, [pc, #44]	; (7ab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7a84:	9b01      	ldr	r3, [sp, #4]
    7a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    7a8a:	4a0a      	ldr	r2, [pc, #40]	; (7ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    7a8c:	9b01      	ldr	r3, [sp, #4]
    7a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a92:	f003 0301 	and.w	r3, r3, #1
    7a96:	2b00      	cmp	r3, #0
    7a98:	d106      	bne.n	7aa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    7a9a:	4a05      	ldr	r2, [pc, #20]	; (7ab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7a9c:	9b01      	ldr	r3, [sp, #4]
    7a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d100      	bne.n	7aa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7aa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7aa8:	bf00      	nop
    7aaa:	b003      	add	sp, #12
    7aac:	f85d fb04 	ldr.w	pc, [sp], #4
    7ab0:	1fff8e00 	.word	0x1fff8e00
    7ab4:	1fff8dfc 	.word	0x1fff8dfc

00007ab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7ab8:	b500      	push	{lr}
    7aba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7abc:	f7f9 fd88 	bl	15d0 <Sys_GetCoreID>
    7ac0:	4603      	mov	r3, r0
    7ac2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    7ac4:	4a10      	ldr	r2, [pc, #64]	; (7b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7ac6:	9b01      	ldr	r3, [sp, #4]
    7ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7acc:	2b00      	cmp	r3, #0
    7ace:	d10d      	bne.n	7aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ad0:	f7f8 ff4c 	bl	96c <Port_schm_read_msr>
    7ad4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7ad6:	9b00      	ldr	r3, [sp, #0]
    7ad8:	f003 0301 	and.w	r3, r3, #1
    7adc:	2b00      	cmp	r3, #0
    7ade:	d100      	bne.n	7ae2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7ae0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    7ae2:	490a      	ldr	r1, [pc, #40]	; (7b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    7ae4:	9b01      	ldr	r3, [sp, #4]
    7ae6:	9a00      	ldr	r2, [sp, #0]
    7ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7aec:	4a06      	ldr	r2, [pc, #24]	; (7b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7aee:	9b01      	ldr	r3, [sp, #4]
    7af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af4:	1c5a      	adds	r2, r3, #1
    7af6:	4904      	ldr	r1, [pc, #16]	; (7b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7af8:	9b01      	ldr	r3, [sp, #4]
    7afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7afe:	bf00      	nop
    7b00:	b003      	add	sp, #12
    7b02:	f85d fb04 	ldr.w	pc, [sp], #4
    7b06:	bf00      	nop
    7b08:	1fff8e08 	.word	0x1fff8e08
    7b0c:	1fff8e04 	.word	0x1fff8e04

00007b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7b10:	b500      	push	{lr}
    7b12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b14:	f7f9 fd5c 	bl	15d0 <Sys_GetCoreID>
    7b18:	4603      	mov	r3, r0
    7b1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7b1c:	4a0d      	ldr	r2, [pc, #52]	; (7b54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7b1e:	9b01      	ldr	r3, [sp, #4]
    7b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b24:	1e5a      	subs	r2, r3, #1
    7b26:	490b      	ldr	r1, [pc, #44]	; (7b54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7b28:	9b01      	ldr	r3, [sp, #4]
    7b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    7b2e:	4a0a      	ldr	r2, [pc, #40]	; (7b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    7b30:	9b01      	ldr	r3, [sp, #4]
    7b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b36:	f003 0301 	and.w	r3, r3, #1
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	d106      	bne.n	7b4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    7b3e:	4a05      	ldr	r2, [pc, #20]	; (7b54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7b40:	9b01      	ldr	r3, [sp, #4]
    7b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b46:	2b00      	cmp	r3, #0
    7b48:	d100      	bne.n	7b4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b4c:	bf00      	nop
    7b4e:	b003      	add	sp, #12
    7b50:	f85d fb04 	ldr.w	pc, [sp], #4
    7b54:	1fff8e08 	.word	0x1fff8e08
    7b58:	1fff8e04 	.word	0x1fff8e04

00007b5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7b5c:	b500      	push	{lr}
    7b5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b60:	f7f9 fd36 	bl	15d0 <Sys_GetCoreID>
    7b64:	4603      	mov	r3, r0
    7b66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    7b68:	4a10      	ldr	r2, [pc, #64]	; (7bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7b6a:	9b01      	ldr	r3, [sp, #4]
    7b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d10d      	bne.n	7b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b74:	f7f8 fefa 	bl	96c <Port_schm_read_msr>
    7b78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b7a:	9b00      	ldr	r3, [sp, #0]
    7b7c:	f003 0301 	and.w	r3, r3, #1
    7b80:	2b00      	cmp	r3, #0
    7b82:	d100      	bne.n	7b86 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7b86:	490a      	ldr	r1, [pc, #40]	; (7bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7b88:	9b01      	ldr	r3, [sp, #4]
    7b8a:	9a00      	ldr	r2, [sp, #0]
    7b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    7b90:	4a06      	ldr	r2, [pc, #24]	; (7bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7b92:	9b01      	ldr	r3, [sp, #4]
    7b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b98:	1c5a      	adds	r2, r3, #1
    7b9a:	4904      	ldr	r1, [pc, #16]	; (7bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7b9c:	9b01      	ldr	r3, [sp, #4]
    7b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ba2:	bf00      	nop
    7ba4:	b003      	add	sp, #12
    7ba6:	f85d fb04 	ldr.w	pc, [sp], #4
    7baa:	bf00      	nop
    7bac:	1fff8e10 	.word	0x1fff8e10
    7bb0:	1fff8e0c 	.word	0x1fff8e0c

00007bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7bb4:	b500      	push	{lr}
    7bb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7bb8:	f7f9 fd0a 	bl	15d0 <Sys_GetCoreID>
    7bbc:	4603      	mov	r3, r0
    7bbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    7bc0:	4a0d      	ldr	r2, [pc, #52]	; (7bf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7bc2:	9b01      	ldr	r3, [sp, #4]
    7bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc8:	1e5a      	subs	r2, r3, #1
    7bca:	490b      	ldr	r1, [pc, #44]	; (7bf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7bcc:	9b01      	ldr	r3, [sp, #4]
    7bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    7bd2:	4a0a      	ldr	r2, [pc, #40]	; (7bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7bd4:	9b01      	ldr	r3, [sp, #4]
    7bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bda:	f003 0301 	and.w	r3, r3, #1
    7bde:	2b00      	cmp	r3, #0
    7be0:	d106      	bne.n	7bf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    7be2:	4a05      	ldr	r2, [pc, #20]	; (7bf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7be4:	9b01      	ldr	r3, [sp, #4]
    7be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d100      	bne.n	7bf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7bee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7bf0:	bf00      	nop
    7bf2:	b003      	add	sp, #12
    7bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf8:	1fff8e10 	.word	0x1fff8e10
    7bfc:	1fff8e0c 	.word	0x1fff8e0c

00007c00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7c00:	b500      	push	{lr}
    7c02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c04:	f7f9 fce4 	bl	15d0 <Sys_GetCoreID>
    7c08:	4603      	mov	r3, r0
    7c0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7c0c:	4a10      	ldr	r2, [pc, #64]	; (7c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7c0e:	9b01      	ldr	r3, [sp, #4]
    7c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c14:	2b00      	cmp	r3, #0
    7c16:	d10d      	bne.n	7c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c18:	f7f8 fea8 	bl	96c <Port_schm_read_msr>
    7c1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c1e:	9b00      	ldr	r3, [sp, #0]
    7c20:	f003 0301 	and.w	r3, r3, #1
    7c24:	2b00      	cmp	r3, #0
    7c26:	d100      	bne.n	7c2a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    7c2a:	490a      	ldr	r1, [pc, #40]	; (7c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7c2c:	9b01      	ldr	r3, [sp, #4]
    7c2e:	9a00      	ldr	r2, [sp, #0]
    7c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    7c34:	4a06      	ldr	r2, [pc, #24]	; (7c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7c36:	9b01      	ldr	r3, [sp, #4]
    7c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c3c:	1c5a      	adds	r2, r3, #1
    7c3e:	4904      	ldr	r1, [pc, #16]	; (7c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7c40:	9b01      	ldr	r3, [sp, #4]
    7c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c46:	bf00      	nop
    7c48:	b003      	add	sp, #12
    7c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c4e:	bf00      	nop
    7c50:	1fff8e18 	.word	0x1fff8e18
    7c54:	1fff8e14 	.word	0x1fff8e14

00007c58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7c58:	b500      	push	{lr}
    7c5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c5c:	f7f9 fcb8 	bl	15d0 <Sys_GetCoreID>
    7c60:	4603      	mov	r3, r0
    7c62:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7c64:	4a0d      	ldr	r2, [pc, #52]	; (7c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7c66:	9b01      	ldr	r3, [sp, #4]
    7c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c6c:	1e5a      	subs	r2, r3, #1
    7c6e:	490b      	ldr	r1, [pc, #44]	; (7c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7c70:	9b01      	ldr	r3, [sp, #4]
    7c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7c76:	4a0a      	ldr	r2, [pc, #40]	; (7ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7c78:	9b01      	ldr	r3, [sp, #4]
    7c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c7e:	f003 0301 	and.w	r3, r3, #1
    7c82:	2b00      	cmp	r3, #0
    7c84:	d106      	bne.n	7c94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7c86:	4a05      	ldr	r2, [pc, #20]	; (7c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7c88:	9b01      	ldr	r3, [sp, #4]
    7c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d100      	bne.n	7c94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c94:	bf00      	nop
    7c96:	b003      	add	sp, #12
    7c98:	f85d fb04 	ldr.w	pc, [sp], #4
    7c9c:	1fff8e18 	.word	0x1fff8e18
    7ca0:	1fff8e14 	.word	0x1fff8e14

00007ca4 <Clock_Ip_au8DividerCallbackIndex>:
    7ca4:	0e0d0c00 06030201 0a070409 000b0805     ................

00007cb4 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007cc4 <Clock_Ip_au8XoscCallbackIndex>:
    7cc4:	00000100 00000000 00000000 00000000     ................

00007cd4 <Clock_Ip_au8IrcoscCallbackIndex>:
    7cd4:	03020100 00000004 00000000 00000000     ................

00007ce4 <Clock_Ip_au8GateCallbackIndex>:
    7ce4:	06010200 01040301 00000500 00000000     ................

00007cf4 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007d04 <Clock_Ip_au8PllCallbackIndex>:
    7d04:	00000100 00000000 00000000 00000000     ................

00007d14 <Clock_Ip_au8SelectorCallbackIndex>:
    7d14:	0a090800 03020109 07060504 00000000     ................

00007d24 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00007d34 <Clock_Ip_au8CmuCallbackIndex>:
	...

00007d44 <Clock_Ip_au8ClockFeatures>:
	...
    7d54:	01000000 00000000 00000000 00000002     ................
    7d64:	00000000 00000300 00000000 00040000     ................
    7d74:	00000000 05000000 00000000 00000000     ................
    7d84:	00000006 00000000 00000100 00000000     ................
    7d94:	00010000 00000000 04000000 00000000     ................
    7da4:	00000000 00000005 00000001 00000401     ................
    7db4:	00000200 00050100 00030000 04020000     ................
    7dc4:	04000000 02000000 00000005 00000005     ................
    7dd4:	00000403 00000600 00050300 00070000     ................
    7de4:	05000000 00000000 00000000 00000006     ................
	...
    7e24:	00050000 00000000 06000000 00000100     ................
    7e34:	00000000 00030007 00000000 00000000     ................
    7e44:	00000000 00060000 00000000 07000000     ................
    7e54:	00000100 00000000 00030008 00000000     ................
	...
    7e6c:	00090000 00000000 0a000000 00000100     ................
    7e7c:	00000000 0003000b 00000000 00000000     ................
    7e8c:	00000000 000c0000 00000000 0d000000     ................
    7e9c:	00000100 00000000 0003000e 00000000     ................
    7eac:	00000800 00000000 00090000 00000000     ................
    7ebc:	0a000000 00000000 00000000 0000000b     ................
    7ecc:	00000000 00000b01 00000000 000b0200     ................
    7edc:	00000000 0b030000 00000000 00000000     ................
	...
    7ef4:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    7f04:	01000000 00000000 00000000 00000007     ................
    7f14:	00007300 00000700 00320000 00090000     .s........2.....
    7f24:	02000000 07000000 00000000 00000021     ............!...
    7f34:	00000009 00000400 00000900 00030000     ................
    7f44:	00070000 61000000 07000000 00000000     .......a........
    7f54:	00000024 00000007 00002500 00000700     $........%......
    7f64:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7f74:	00000000 00000020 38000004 00003800     .... ......8.8..
    7f84:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7f94:	04000000 00260000 00000026 66000004     ......&.&......f
    7fa4:	00006600 00000400 00370037 00040000     .f......7.7.....
    7fb4:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7fc4:	2e000004 00002e00 00000200 00404040     ............@@@.
    7fd4:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    7fe4:	0000006b 6c000004 00006c00 00000900     k......l.l......
    7ff4:	00010000 00090000 00000000 07000000     ................
    8004:	00000000 00000036 00000007 00003100     ....6........1..
    8014:	00000700 00490000 00070000 4a000000     ......I........J
    8024:	07000000 00000000 0000004b 00000007     ........K.......
    8034:	00004c00 00000700 004d0000 00070000     .L........M.....
    8044:	3d000000 03000000 00000000 00000000     ...=............

00008054 <Clock_Ip_au16SelectorEntryHardwareValue>:
    8054:	01010a03 01010001 04040002 02000603     ................
    8064:	00010810 02020100 00000000 00000007     ................
    8074:	00000009 00000000 00000c0e 00000000     ................
	...

000080ac <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    80ac:	00020000 00000300 00000601 00000000     ................
	...

000080dc <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    80dc:	00000700 00000000 02020000 01010303     ................
    80ec:	03020606 00000000 00000000 00000000     ................
	...

0000810c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    810c:	00000001 00000000 02020000 01010303     ................
    811c:	03020606 00000000 00000000 00000000     ................
	...

0000813c <Clock_Ip_au8DividerValueHardwareValue>:
    813c:	00020100 00000003 00000004 00000000     ................
    814c:	00000005 00000000 00000000 00000000     ................
    815c:	00000006 00000000 00000000 00000000     ................
	...
    817c:	00000007                                ....

00008180 <Clock_Ip_apxScgPeriphAsyncDivs>:
    8180:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00008190 <Clock_Ip_aeSourceTypeClockName>:
    8190:	00000000 00000001 00000001 00000001     ................
    81a0:	00000001 00000001 00000001 00000001     ................
    81b0:	00000002 00000003 00000001 00000001     ................
    81c0:	00000001 00000001 00000002 00000002     ................
    81d0:	00000003 00000003 00000001 00000001     ................
    81e0:	00000004 00000004 00000004 00000004     ................
	...

0000824c <Clock_Ip_aeHwPllName>:
    824c:	00000009                                ....

00008250 <Clock_Ip_aeHwDfsName>:
    8250:	00000057                                W...

00008254 <Clock_Ip_axDividerCallbacks>:
    8254:	0000271d 00002727 00002741 0000275b     .'..''..A'..['..
    8264:	00002775 0000278f 000027a9 000027c3     u'...'...'...'..
    8274:	000027dd 000027f7 00002811 0000282b     .'...'...(..+(..
    8284:	00002845 0000285f 00002879              E(.._(..y(..

00008290 <Clock_Ip_axDividerTriggerCallbacks>:
    8290:	00002bed 00002bed                       .+...+..

00008298 <Clock_Ip_axExtOscCallbacks>:
    8298:	00002bf9 00002bf9 00002bf9 00002c03     .+...+...+...,..
    82a8:	00002bf9 00002c0d 00002c27 00002c41     .+...,..',..A,..
    82b8:	00002cc5 00002cd9                       .,...,..

000082c0 <Clock_Ip_axFracDivCallbacks>:
    82c0:	00002e99 00002e99 00002ea3              ............

000082cc <Clock_Ip_axGateCallbacks>:
    82cc:	00002ebd 00002ec7 00002fc7 00002fe1     ........./.../..
    82dc:	00002f77 00002f91 00002f27 00002f41     w/.../..'/..A/..
    82ec:	00002ed7 00002ef1 00003017 00003031     .........0..10..
    82fc:	00003067 00003081                       g0...0..

00008304 <Clock_Ip_axIntOscCallbacks>:
    8304:	0000322d 0000322d 00003237 00003241     -2..-2..72..A2..
    8314:	0000325b 00003275 00003289 000032a3     [2..u2...2...2..
    8324:	000032bd 000032d1 000032eb 00003305     .2...2...2...3..
    8334:	000033ad 000033c7 000033e1              .3...3...3..

00008340 <Clock_Ip_axCmuCallbacks>:
    8340:	0000397d 00003987 00003993 0000397d     }9...9...9..}9..

00008350 <Clock_Ip_axPllCallbacks>:
    8350:	0000399d 0000399d 000039a7 0000399d     .9...9...9...9..
    8360:	000039b3 000039bd 000039d7 000039f1     .9...9...9...9..
    8370:	00003a95 00003a81                       .:...:..

00008378 <Clock_Ip_axPcfsCallbacks>:
    8378:	00003bf1                                .;..

0000837c <Clock_Ip_axSelectorCallbacks>:
    837c:	00003bfd 00003bfd 00003c07 00003c21     .;...;...<..!<..
    838c:	00003bfd 00003c3b 00003c55 00003c6f     .;..;<..U<..o<..
    839c:	00003c89 00003ca3 00003cbd 00003cd7     .<...<...<...<..
    83ac:	00003cf1 00003d0b 00003d25 00003d3f     .<...=..%=..?=..
    83bc:	00003d59 00003d73 00003d8d 00003da7     Y=..s=...=...=..
    83cc:	00003dc1 00003ddb                       .=...=..

000083d4 <ClockSource>:
    83d4:	00000000 00000008 00000002 00000005     ................
	...
    83ec:	00000009                                ....

000083f0 <ResetReasonArray>:
    83f0:	00000000 00000001 00000002 00000003     ................
    8400:	00000004 00000005 00000006 00000007     ................
    8410:	00000008 00000009 0000000a 0000000b     ................
    8420:	0000000c 0000000d 0000000e              ............

0000842c <Port_au32PortCiPortBaseAddr>:
    842c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    843c:	4004d000                                ...@

00008440 <Port_au32PortCiGpioBaseAddr>:
    8440:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    8450:	400ff100                                ...@

00008454 <Mcu_aClockConfigPB>:
	...
    845c:	14000001 0400000c 01000020 00000005     ........ .......
    846c:	00000001 00000000 00000057 00000000     ........W.......
    847c:	00000000 00000057 00000000 00000000     ....W...........
	...
    8494:	00000057 00000000 00000057 00000000     W.......W.......
	...
    84bc:	00000019 00000005 0000001a 00000002     ................
    84cc:	0000001b 00000005 0000002a 00000024     ........*...$...
    84dc:	0000003f 00000000 00000040 00000000     ?.......@.......
    84ec:	00000041 00000000 00000042 00000000     A.......B.......
    84fc:	00000031 00000000 00000045 00000000     1.......E.......
    850c:	00000046 00000000 00000047 00000000     F.......G.......
    851c:	00000044 00000000 00000030 00000000     D.......0.......
    852c:	0000003d 00000000 00000043 00000000     =.......C.......
    853c:	00000049 00000000 0000004a 00000000     I.......J.......
    854c:	0000004b 00000000 00000048 00000000     K.......H.......
    855c:	00000057 00000057 00000057 00000057     W...W...W...W...
    856c:	00000057 00000057 00000057 00000057     W...W...W...W...
    857c:	00000057 00000057 00000057 00000057     W...W...W...W...
    858c:	00000057 00000057 00000057 00000057     W...W...W...W...
    859c:	0000000c 00000001 00000000 0000000d     ................
    85ac:	00000001 00000000 0000001d 00000001     ................
    85bc:	00000000 0000001e 00000002 00000000     ................
    85cc:	0000001f 00000001 00000000 00000021     ............!...
    85dc:	00000001 00000000 00000022 00000002     ........".......
    85ec:	00000000 00000023 00000001 00000000     ....#...........
    85fc:	00000025 00000002 00000000 00000026     %...........&...
    860c:	00000004 00000000 00000027 00000002     ........'.......
    861c:	00000000 00000048 00000001 00000001     ....H...........
    862c:	00000057 00000000 00000000 00000057     W...........W...
	...
    8644:	00000057 00000000 00000000 00000057     W...........W...
	...
    865c:	00000057 00000000 00000000 00000057     W...........W...
	...
    8674:	00000057 00000000 00000000 00000057     W...........W...
	...
    868c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    86a8:	00000014 00007d00 00000015 00007d00     .....}.......}..
    86b8:	00000016 00007d00 00000017 00008000     .....}..........
    86c8:	00000030 00000000 00000031 00000000     0.......1.......
    86d8:	00000033 00000000 00000034 00000000     3.......4.......
    86e8:	00000036 00000000 00000039 00000000     6.......9.......
    86f8:	0000003a 00000000 0000003b 00000000     :.......;.......
    8708:	0000003c 00000000 0000003d 00000000     <.......=.......
    8718:	0000003e 00000000 0000003f 00000000     >.......?.......
    8728:	00000040 00000000 00000041 00000000     @.......A.......
    8738:	00000042 00000000 00000043 00000000     B.......C.......
    8748:	00000044 00000000 00000045 00000000     D.......E.......
    8758:	00000046 00000000 00000047 00000000     F.......G.......
    8768:	00000048 00000000 00000049 00000000     H.......I.......
    8778:	0000004a 00000000 0000004b 00000000     J.......K.......
    8788:	0000004e 00000000 0000004f 00000000     N.......O.......
    8798:	00000050 00000001 00000051 00000001     P.......Q.......
    87a8:	00000052 00000001 00000053 00000001     R.......S.......
    87b8:	00000054 00000001 00000055 00000000     T.......U.......
    87c8:	00000057 00000000 00000057 00000000     W.......W.......
    87d8:	00000057 00000000 00000057 00000000     W.......W.......
    87e8:	00000057 00000000 00000057 00000000     W.......W.......
    87f8:	00000057 00000000 00000057 00000000     W.......W.......
    8808:	00000057 00000000 00000057 00000000     W.......W.......
    8818:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000884c <Mcu_Config>:
    884c:	0000005a 00000000 00000001 00000001     Z...............
    885c:	00008a58 00008454 00008a64              X...T...d...

00008868 <OsIf_xPredefinedConfig>:
    8868:	00000000 02dc6c00                       .....l..

00008870 <OsIf_apxPredefinedConfig>:
    8870:	00008868                                h...

00008874 <g_pin_mux_InitConfigArr>:
    8874:	4004b000 400ff080 00000008 00000002     ...@...@........
    8884:	00000001 00000002 00000000 00000000     ................
	...
    889c:	4004b000 400ff080 00000009 00000002     ...@...@........
    88ac:	00000001 00000002 00000000 00000000     ................
	...
    88c4:	4004b000 400ff080 0000000a 00000002     ...@...@........
    88d4:	00000001 00000002 00000000 00000000     ................
	...
    88ec:	4004b000 400ff080 0000000b 00000002     ...@...@........
    88fc:	00000001 00000002 00000000 00000000     ................
	...

00008914 <au8Port_PartitionList>:
    8914:	00000001                                ....

00008918 <au32Port_PinToPartitionMap>:
    8918:	00000001 00000001 00000001 00000001     ................

00008928 <Port_au16NoUnUsedPadsArrayDefault>:
    8928:	00010000 00030002 00070006 00090008     ................
    8938:	000c000b 000e000d 0010000f 00200011     .............. .
    8948:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    8958:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    8968:	00400031 00420041 00460043 004c0047     1.@.A.B.C.F.G.L.
    8978:	004e004d 0050004f 00600051 00620061     M.N.O.P.Q.`.a.b.
    8988:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    8998:	006c006b 006e006d 0070006f 00800071     k.l.m.n.o.p.q...
    89a8:	00820081 00840083 00860085 00880087     ................
    89b8:	008a0089 008c008b 008e008d 0090008f     ................

000089c8 <Port_UnUsedPin>:
    89c8:	00000000 00000001 00000000              ............

000089d4 <Port_aPinConfigDefault>:
    89d4:	00000048 00000100 00000000 00000002     H...............
    89e4:	00010001 00000049 00000100 00000000     ....I...........
    89f4:	00000002 00010101 0000004a 00000100     ........J.......
    8a04:	00000000 00000002 00010101 0000004b     ............K...
    8a14:	00000100 00000000 00000002 00010101     ................

00008a24 <Port_Config>:
    8a24:	00500004 00008928 000089c8 000089d4     ..P.(...........
	...
    8a3c:	00008918 00008914 00008874              ........t...

00008a48 <Power_Ip_RCM_ConfigPB>:
	...

00008a50 <Power_Ip_PMC_ConfigPB>:
    8a50:	00000000                                ....

00008a54 <Power_Ip_SMC_ConfigPB>:
    8a54:	00000000                                ....

00008a58 <Power_Ip_aModeConfigPB>:
	...

00008a64 <Power_Ip_HwIPsConfigPB>:
    8a64:	00008a48 00008a50 00008a54              H...P...T...

00008a70 <__INIT_TABLE>:
    8a70:	00000002 	.word	0x00000002
    8a74:	1fff8b10 	.word	0x1fff8b10
    8a78:	00008a98 	.word	0x00008a98
    8a7c:	00008ac4 	.word	0x00008ac4
    8a80:	1fff8800 	.word	0x1fff8800
    8a84:	00000000 	.word	0x00000000
    8a88:	00000310 	.word	0x00000310

00008a8c <__ZERO_TABLE>:
    8a8c:	00000001 	.word	0x00000001
    8a90:	1fff8b40 	.word	0x1fff8b40
    8a94:	1fff8f40 	.word	0x1fff8f40
