
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b63 	.word	0x00000b63
  10:	00000b65 	.word	0x00000b65
  14:	00000b67 	.word	0x00000b67
  18:	00000b69 	.word	0x00000b69
	...
  2c:	00000b6b 	.word	0x00000b6b
  30:	00000b6d 	.word	0x00000b6d
  34:	00000000 	.word	0x00000000
  38:	00000b6f 	.word	0x00000b6f
  3c:	00000b71 	.word	0x00000b71
  40:	00000b73 	.word	0x00000b73
  44:	00000b73 	.word	0x00000b73
  48:	00000b73 	.word	0x00000b73
  4c:	00000b73 	.word	0x00000b73
  50:	00000b73 	.word	0x00000b73
  54:	00000b73 	.word	0x00000b73
  58:	00000b73 	.word	0x00000b73
  5c:	00000b73 	.word	0x00000b73
  60:	00000b73 	.word	0x00000b73
  64:	00000b73 	.word	0x00000b73
  68:	00000b73 	.word	0x00000b73
  6c:	00000b73 	.word	0x00000b73
  70:	00000b73 	.word	0x00000b73
  74:	00000b73 	.word	0x00000b73
  78:	00000b73 	.word	0x00000b73
  7c:	00000b73 	.word	0x00000b73
  80:	00000b73 	.word	0x00000b73
  84:	00000b73 	.word	0x00000b73
  88:	00000b73 	.word	0x00000b73
  8c:	00000b73 	.word	0x00000b73
  90:	00000b73 	.word	0x00000b73
  94:	00000b73 	.word	0x00000b73
  98:	00000b73 	.word	0x00000b73
  9c:	00000b73 	.word	0x00000b73
  a0:	00000b73 	.word	0x00000b73
  a4:	00000b73 	.word	0x00000b73
  a8:	00000b73 	.word	0x00000b73
  ac:	00000b73 	.word	0x00000b73
  b0:	00000b73 	.word	0x00000b73
  b4:	00000b73 	.word	0x00000b73
  b8:	00000b73 	.word	0x00000b73
  bc:	00000b73 	.word	0x00000b73
  c0:	00000b73 	.word	0x00000b73
  c4:	00000b73 	.word	0x00000b73
  c8:	00000b73 	.word	0x00000b73
  cc:	00000b73 	.word	0x00000b73
  d0:	00000b73 	.word	0x00000b73
  d4:	00000b73 	.word	0x00000b73
  d8:	00000b73 	.word	0x00000b73
  dc:	00000b73 	.word	0x00000b73
  e0:	00000b73 	.word	0x00000b73
  e4:	00000b73 	.word	0x00000b73
  e8:	00000b73 	.word	0x00000b73
  ec:	00000b73 	.word	0x00000b73
  f0:	00000b73 	.word	0x00000b73
  f4:	00000b73 	.word	0x00000b73
  f8:	00000b73 	.word	0x00000b73
  fc:	00000b73 	.word	0x00000b73
 100:	00000b73 	.word	0x00000b73
 104:	00000b73 	.word	0x00000b73
 108:	00000b73 	.word	0x00000b73
 10c:	00000b73 	.word	0x00000b73
 110:	00000b73 	.word	0x00000b73
 114:	00000b73 	.word	0x00000b73
 118:	00000b73 	.word	0x00000b73
 11c:	00000b73 	.word	0x00000b73
 120:	00000b73 	.word	0x00000b73
 124:	00000b73 	.word	0x00000b73
 128:	00000b73 	.word	0x00000b73
 12c:	00000b73 	.word	0x00000b73
 130:	00000b73 	.word	0x00000b73
 134:	00000b73 	.word	0x00000b73
 138:	00000b73 	.word	0x00000b73
 13c:	00000b73 	.word	0x00000b73
 140:	00000b73 	.word	0x00000b73
 144:	00000b73 	.word	0x00000b73
 148:	00000b73 	.word	0x00000b73
 14c:	00000b73 	.word	0x00000b73
 150:	00000b73 	.word	0x00000b73
 154:	00000b73 	.word	0x00000b73
 158:	00000b73 	.word	0x00000b73
 15c:	00000b73 	.word	0x00000b73
 160:	00000b73 	.word	0x00000b73
 164:	00000b73 	.word	0x00000b73
 168:	00000b73 	.word	0x00000b73
 16c:	00000b73 	.word	0x00000b73
 170:	00000b73 	.word	0x00000b73
 174:	00000b73 	.word	0x00000b73
 178:	00000b73 	.word	0x00000b73
 17c:	00000b73 	.word	0x00000b73
 180:	00000b73 	.word	0x00000b73
 184:	00000b73 	.word	0x00000b73
 188:	00000b73 	.word	0x00000b73
 18c:	00000b73 	.word	0x00000b73
 190:	00000b73 	.word	0x00000b73
 194:	00000b73 	.word	0x00000b73
 198:	00000b73 	.word	0x00000b73
 19c:	00000b73 	.word	0x00000b73
 1a0:	00000b73 	.word	0x00000b73
 1a4:	00000b73 	.word	0x00000b73
 1a8:	00000b73 	.word	0x00000b73
 1ac:	00000b73 	.word	0x00000b73
 1b0:	00000b73 	.word	0x00000b73
 1b4:	00000b73 	.word	0x00000b73
 1b8:	00000b73 	.word	0x00000b73
 1bc:	00000b73 	.word	0x00000b73
 1c0:	00000b73 	.word	0x00000b73
 1c4:	00000b73 	.word	0x00000b73
 1c8:	00000b73 	.word	0x00000b73
 1cc:	00000b73 	.word	0x00000b73
 1d0:	00000b73 	.word	0x00000b73
 1d4:	00000b73 	.word	0x00000b73
 1d8:	00000b73 	.word	0x00000b73
 1dc:	00000b73 	.word	0x00000b73
 1e0:	00000b73 	.word	0x00000b73
 1e4:	00000b73 	.word	0x00000b73
 1e8:	00000b73 	.word	0x00000b73
 1ec:	00000b73 	.word	0x00000b73
 1f0:	00000b73 	.word	0x00000b73
 1f4:	00000b73 	.word	0x00000b73
 1f8:	00000b73 	.word	0x00000b73
 1fc:	00000b73 	.word	0x00000b73
 200:	00000b73 	.word	0x00000b73
 204:	00000b73 	.word	0x00000b73
 208:	00000b73 	.word	0x00000b73
 20c:	00000b73 	.word	0x00000b73
 210:	00000b73 	.word	0x00000b73
 214:	00000b73 	.word	0x00000b73
 218:	00000b73 	.word	0x00000b73
 21c:	00000b73 	.word	0x00000b73
 220:	00000b73 	.word	0x00000b73
 224:	00000b73 	.word	0x00000b73
 228:	00000b73 	.word	0x00000b73
 22c:	00000b73 	.word	0x00000b73
 230:	00000b73 	.word	0x00000b73
 234:	00000b73 	.word	0x00000b73
 238:	00000b73 	.word	0x00000b73
 23c:	00000b73 	.word	0x00000b73
 240:	00000b73 	.word	0x00000b73
 244:	00000b73 	.word	0x00000b73
 248:	00000b73 	.word	0x00000b73
 24c:	00000b73 	.word	0x00000b73
 250:	00000b73 	.word	0x00000b73
 254:	00000b73 	.word	0x00000b73
 258:	00000b73 	.word	0x00000b73
 25c:	00000b73 	.word	0x00000b73
 260:	00000b73 	.word	0x00000b73
 264:	00000b73 	.word	0x00000b73
 268:	00000b73 	.word	0x00000b73
 26c:	00000b73 	.word	0x00000b73
 270:	00000b73 	.word	0x00000b73
 274:	00000b73 	.word	0x00000b73
 278:	00000b73 	.word	0x00000b73
 27c:	00000b73 	.word	0x00000b73
 280:	00000b73 	.word	0x00000b73
 284:	00000b73 	.word	0x00000b73
 288:	00000b73 	.word	0x00000b73
 28c:	00000b73 	.word	0x00000b73
 290:	00000b73 	.word	0x00000b73
 294:	00000b73 	.word	0x00000b73
 298:	00000b73 	.word	0x00000b73
 29c:	00000b73 	.word	0x00000b73
 2a0:	00000b73 	.word	0x00000b73
 2a4:	00000b73 	.word	0x00000b73
 2a8:	00000b73 	.word	0x00000b73
 2ac:	00000b73 	.word	0x00000b73
 2b0:	00000b73 	.word	0x00000b73
 2b4:	00000b73 	.word	0x00000b73
 2b8:	00000b73 	.word	0x00000b73
 2bc:	00000b73 	.word	0x00000b73
 2c0:	00000b73 	.word	0x00000b73
 2c4:	00000b73 	.word	0x00000b73
 2c8:	00000b73 	.word	0x00000b73
 2cc:	00000b73 	.word	0x00000b73
 2d0:	00000b73 	.word	0x00000b73
 2d4:	00000b73 	.word	0x00000b73
 2d8:	00000b73 	.word	0x00000b73
 2dc:	00000b73 	.word	0x00000b73
 2e0:	00000b73 	.word	0x00000b73
 2e4:	00000b73 	.word	0x00000b73
 2e8:	00000b73 	.word	0x00000b73
 2ec:	00000b73 	.word	0x00000b73
 2f0:	00000b73 	.word	0x00000b73
 2f4:	00000b73 	.word	0x00000b73
 2f8:	00000b73 	.word	0x00000b73
 2fc:	00000b73 	.word	0x00000b73
 300:	00000b73 	.word	0x00000b73
 304:	00000b73 	.word	0x00000b73
 308:	00000b73 	.word	0x00000b73
 30c:	00000b73 	.word	0x00000b73

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faa5 	bl	9d0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb64 	bl	b58 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92c4 	.word	0x1fff92c4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faaf 	bl	afc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x11c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x11c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x120>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x120>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x116>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x154>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x94>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x14c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x146>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x38>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x142>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x142>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x60>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x13a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x13a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x128>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x124>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x158>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xe0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x13e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x13e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x10e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x136>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x136>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x76>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x76>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x10e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x60>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xe0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x38>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}

    EcuM_Init();//MCU configuration.
     8b2:	f000 f981 	bl	bb8 <EcuM_Init>
    Gpt_StartTimer( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch0, FTM0CH0_V );//Starting timer 50ms.
     8b6:	f640 4135 	movw	r1, #3125	; 0xc35
     8ba:	2000      	movs	r0, #0
     8bc:	f005 fd8e 	bl	63dc <Gpt_StartTimer>

    while( 1u ) {
     8c0:	e7fe      	b.n	8c0 <main+0x10>
	...

000008c4 <Gpt_Ipw_FtmGetTimeElapsed>:
#define GPT_START_SEC_CODE
#include "Gpt_MemMap.h"

#if (FTM_GPT_IP_USED == STD_ON)
static Gpt_ValueType Gpt_Ipw_FtmGetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
     8c4:	b500      	push	{lr}
     8c6:	b087      	sub	sp, #28
     8c8:	9001      	str	r0, [sp, #4]
     8ca:	9100      	str	r1, [sp, #0]
    Gpt_ValueType returnValue;
    boolean HasChEvOccurred;

    /* Read compare and counter registers */
    uint32 counterValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
     8cc:	9b01      	ldr	r3, [sp, #4]
     8ce:	791b      	ldrb	r3, [r3, #4]
     8d0:	4618      	mov	r0, r3
     8d2:	f005 ff87 	bl	67e4 <Ftm_Gpt_Ip_GetCntValue>
     8d6:	9004      	str	r0, [sp, #16]
    uint32 compareValue = Ftm_Gpt_Ip_GetCompareValue(pHwChannelConfig->instance, pHwChannelConfig->channel);
     8d8:	9b01      	ldr	r3, [sp, #4]
     8da:	791a      	ldrb	r2, [r3, #4]
     8dc:	9b01      	ldr	r3, [sp, #4]
     8de:	795b      	ldrb	r3, [r3, #5]
     8e0:	4619      	mov	r1, r3
     8e2:	4610      	mov	r0, r2
     8e4:	f005 ff8e 	bl	6804 <Ftm_Gpt_Ip_GetCompareValue>
     8e8:	9003      	str	r0, [sp, #12]

    pReturnHwChannelInfo->uTargetTime = Ftm_Gpt_Ip_u32TargetValue[pHwChannelConfig->instance][pHwChannelConfig->channel];
     8ea:	9b01      	ldr	r3, [sp, #4]
     8ec:	791b      	ldrb	r3, [r3, #4]
     8ee:	4618      	mov	r0, r3
     8f0:	9b01      	ldr	r3, [sp, #4]
     8f2:	795b      	ldrb	r3, [r3, #5]
     8f4:	4619      	mov	r1, r3
     8f6:	4a23      	ldr	r2, [pc, #140]	; (984 <Gpt_Ipw_FtmGetTimeElapsed+0xc0>)
     8f8:	00c3      	lsls	r3, r0, #3
     8fa:	440b      	add	r3, r1
     8fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     900:	9b00      	ldr	r3, [sp, #0]
     902:	605a      	str	r2, [r3, #4]

    /* Calculate the elapsed time */
    if (counterValue > compareValue)
     904:	9a04      	ldr	r2, [sp, #16]
     906:	9b03      	ldr	r3, [sp, #12]
     908:	429a      	cmp	r2, r3
     90a:	d918      	bls.n	93e <Gpt_Ipw_FtmGetTimeElapsed+0x7a>
    {
        /* Counter value passed the set-up Target value - might have roll-over */
        if(((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) <= pReturnHwChannelInfo->uTargetTime)
     90c:	9a03      	ldr	r2, [sp, #12]
     90e:	9b04      	ldr	r3, [sp, #16]
     910:	1ad3      	subs	r3, r2, r3
     912:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     916:	33ff      	adds	r3, #255	; 0xff
     918:	9a00      	ldr	r2, [sp, #0]
     91a:	6852      	ldr	r2, [r2, #4]
     91c:	4293      	cmp	r3, r2
     91e:	d80a      	bhi.n	936 <Gpt_Ipw_FtmGetTimeElapsed+0x72>
        {
            /* New compare value was read by register read - isr served in time - we have roll-over */
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     920:	9b00      	ldr	r3, [sp, #0]
     922:	685a      	ldr	r2, [r3, #4]
                                                    ((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) ) + \
     924:	9904      	ldr	r1, [sp, #16]
     926:	9b03      	ldr	r3, [sp, #12]
     928:	1acb      	subs	r3, r1, r3
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     92a:	4413      	add	r3, r2
     92c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
     930:	3bfe      	subs	r3, #254	; 0xfe
     932:	9305      	str	r3, [sp, #20]
     934:	e00a      	b.n	94c <Gpt_Ipw_FtmGetTimeElapsed+0x88>
                                                FTM_OVERFLOW_PAD_U32 );
        }
        else
        {
            /* There is an delay in serving ISR or updating u32CompareValue - report last timer time */
            returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime);
     936:	9b00      	ldr	r3, [sp, #0]
     938:	685b      	ldr	r3, [r3, #4]
     93a:	9305      	str	r3, [sp, #20]
     93c:	e006      	b.n	94c <Gpt_Ipw_FtmGetTimeElapsed+0x88>
        }
    }
    else
    {
        /* Timer in between ISRs period */
        returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime - (compareValue - counterValue));
     93e:	9b00      	ldr	r3, [sp, #0]
     940:	685a      	ldr	r2, [r3, #4]
     942:	9904      	ldr	r1, [sp, #16]
     944:	9b03      	ldr	r3, [sp, #12]
     946:	1acb      	subs	r3, r1, r3
     948:	4413      	add	r3, r2
     94a:	9305      	str	r3, [sp, #20]
    }

    /* check if channel event has occurred */
    HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(pHwChannelConfig->instance, pHwChannelConfig->channel);
     94c:	9b01      	ldr	r3, [sp, #4]
     94e:	791a      	ldrb	r2, [r3, #4]
     950:	9b01      	ldr	r3, [sp, #4]
     952:	795b      	ldrb	r3, [r3, #5]
     954:	4619      	mov	r1, r3
     956:	4610      	mov	r0, r2
     958:	f005 ff24 	bl	67a4 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
     95c:	4603      	mov	r3, r0
     95e:	f88d 300b 	strb.w	r3, [sp, #11]

    /*Check interrupt status flag*/
    if (HasChEvOccurred)
     962:	f89d 300b 	ldrb.w	r3, [sp, #11]
     966:	2b00      	cmp	r3, #0
     968:	d003      	beq.n	972 <Gpt_Ipw_FtmGetTimeElapsed+0xae>
    {
        /* Channel counter was roll-over */
        pReturnHwChannelInfo->bChannelRollover = TRUE;
     96a:	9b00      	ldr	r3, [sp, #0]
     96c:	2201      	movs	r2, #1
     96e:	701a      	strb	r2, [r3, #0]
     970:	e002      	b.n	978 <Gpt_Ipw_FtmGetTimeElapsed+0xb4>
    }
    else
    {
        /* Channel counter was not rollover */
        pReturnHwChannelInfo->bChannelRollover = FALSE;
     972:	9b00      	ldr	r3, [sp, #0]
     974:	2200      	movs	r2, #0
     976:	701a      	strb	r2, [r3, #0]
    }
    return returnValue;
     978:	9b05      	ldr	r3, [sp, #20]
}
     97a:	4618      	mov	r0, r3
     97c:	b007      	add	sp, #28
     97e:	f85d fb04 	ldr.w	pc, [sp], #4
     982:	bf00      	nop
     984:	1fff8d38 	.word	0x1fff8d38

00000988 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     988:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     98a:	f3ef 8310 	mrs	r3, PRIMASK
     98e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     990:	4623      	mov	r3, r4
}
     992:	4618      	mov	r0, r3
     994:	f85d 4b04 	ldr.w	r4, [sp], #4
     998:	4770      	bx	lr

0000099a <Gpt_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Gpt_schm_read_msr(void)
{
     99a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     99c:	f3ef 8310 	mrs	r3, PRIMASK
     9a0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9a2:	4623      	mov	r3, r4
}
     9a4:	4618      	mov	r0, r3
     9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
     9aa:	4770      	bx	lr

000009ac <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9ac:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ae:	f3ef 8310 	mrs	r3, PRIMASK
     9b2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9b4:	4623      	mov	r3, r4
}
     9b6:	4618      	mov	r0, r3
     9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9bc:	4770      	bx	lr

000009be <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9be:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9c0:	f3ef 8310 	mrs	r3, PRIMASK
     9c4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c6:	4623      	mov	r3, r4
}
     9c8:	4618      	mov	r0, r3
     9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ce:	4770      	bx	lr

000009d0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     9d0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     9d2:	2300      	movs	r3, #0
     9d4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     9d6:	2300      	movs	r3, #0
     9d8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     9da:	2300      	movs	r3, #0
     9dc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9de:	2300      	movs	r3, #0
     9e0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     9e2:	4b44      	ldr	r3, [pc, #272]	; (af4 <init_data_bss+0x124>)
     9e4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     9e6:	4b44      	ldr	r3, [pc, #272]	; (af8 <init_data_bss+0x128>)
     9e8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     9ea:	9b05      	ldr	r3, [sp, #20]
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     9f0:	9b05      	ldr	r3, [sp, #20]
     9f2:	3304      	adds	r3, #4
     9f4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     9f6:	9b05      	ldr	r3, [sp, #20]
     9f8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     9fa:	2300      	movs	r3, #0
     9fc:	9309      	str	r3, [sp, #36]	; 0x24
     9fe:	e03d      	b.n	a7c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a02:	4613      	mov	r3, r2
     a04:	005b      	lsls	r3, r3, #1
     a06:	4413      	add	r3, r2
     a08:	009b      	lsls	r3, r3, #2
     a0a:	461a      	mov	r2, r3
     a0c:	9b03      	ldr	r3, [sp, #12]
     a0e:	4413      	add	r3, r2
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a16:	4613      	mov	r3, r2
     a18:	005b      	lsls	r3, r3, #1
     a1a:	4413      	add	r3, r2
     a1c:	009b      	lsls	r3, r3, #2
     a1e:	461a      	mov	r2, r3
     a20:	9b03      	ldr	r3, [sp, #12]
     a22:	4413      	add	r3, r2
     a24:	681b      	ldr	r3, [r3, #0]
     a26:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a2a:	4613      	mov	r3, r2
     a2c:	005b      	lsls	r3, r3, #1
     a2e:	4413      	add	r3, r2
     a30:	009b      	lsls	r3, r3, #2
     a32:	461a      	mov	r2, r3
     a34:	9b03      	ldr	r3, [sp, #12]
     a36:	4413      	add	r3, r2
     a38:	689b      	ldr	r3, [r3, #8]
     a3a:	4619      	mov	r1, r3
     a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a3e:	4613      	mov	r3, r2
     a40:	005b      	lsls	r3, r3, #1
     a42:	4413      	add	r3, r2
     a44:	009b      	lsls	r3, r3, #2
     a46:	461a      	mov	r2, r3
     a48:	9b03      	ldr	r3, [sp, #12]
     a4a:	4413      	add	r3, r2
     a4c:	685b      	ldr	r3, [r3, #4]
     a4e:	1acb      	subs	r3, r1, r3
     a50:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a52:	2300      	movs	r3, #0
     a54:	9308      	str	r3, [sp, #32]
     a56:	e00a      	b.n	a6e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a58:	9a00      	ldr	r2, [sp, #0]
     a5a:	9b08      	ldr	r3, [sp, #32]
     a5c:	441a      	add	r2, r3
     a5e:	9901      	ldr	r1, [sp, #4]
     a60:	9b08      	ldr	r3, [sp, #32]
     a62:	440b      	add	r3, r1
     a64:	7812      	ldrb	r2, [r2, #0]
     a66:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a68:	9b08      	ldr	r3, [sp, #32]
     a6a:	3301      	adds	r3, #1
     a6c:	9308      	str	r3, [sp, #32]
     a6e:	9a08      	ldr	r2, [sp, #32]
     a70:	9b06      	ldr	r3, [sp, #24]
     a72:	429a      	cmp	r2, r3
     a74:	d3f0      	bcc.n	a58 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a78:	3301      	adds	r3, #1
     a7a:	9309      	str	r3, [sp, #36]	; 0x24
     a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a7e:	9b07      	ldr	r3, [sp, #28]
     a80:	429a      	cmp	r2, r3
     a82:	d3bd      	bcc.n	a00 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a84:	9b04      	ldr	r3, [sp, #16]
     a86:	681b      	ldr	r3, [r3, #0]
     a88:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a8a:	9b04      	ldr	r3, [sp, #16]
     a8c:	3304      	adds	r3, #4
     a8e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a90:	9b04      	ldr	r3, [sp, #16]
     a92:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a94:	2300      	movs	r3, #0
     a96:	9309      	str	r3, [sp, #36]	; 0x24
     a98:	e024      	b.n	ae4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a9c:	00db      	lsls	r3, r3, #3
     a9e:	9a02      	ldr	r2, [sp, #8]
     aa0:	4413      	add	r3, r2
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aa8:	00db      	lsls	r3, r3, #3
     aaa:	9a02      	ldr	r2, [sp, #8]
     aac:	4413      	add	r3, r2
     aae:	685b      	ldr	r3, [r3, #4]
     ab0:	4619      	mov	r1, r3
     ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ab4:	00db      	lsls	r3, r3, #3
     ab6:	9a02      	ldr	r2, [sp, #8]
     ab8:	4413      	add	r3, r2
     aba:	681b      	ldr	r3, [r3, #0]
     abc:	1acb      	subs	r3, r1, r3
     abe:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ac0:	2300      	movs	r3, #0
     ac2:	9308      	str	r3, [sp, #32]
     ac4:	e007      	b.n	ad6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     ac6:	9a01      	ldr	r2, [sp, #4]
     ac8:	9b08      	ldr	r3, [sp, #32]
     aca:	4413      	add	r3, r2
     acc:	2200      	movs	r2, #0
     ace:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ad0:	9b08      	ldr	r3, [sp, #32]
     ad2:	3301      	adds	r3, #1
     ad4:	9308      	str	r3, [sp, #32]
     ad6:	9a08      	ldr	r2, [sp, #32]
     ad8:	9b06      	ldr	r3, [sp, #24]
     ada:	429a      	cmp	r2, r3
     adc:	d3f3      	bcc.n	ac6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae0:	3301      	adds	r3, #1
     ae2:	9309      	str	r3, [sp, #36]	; 0x24
     ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae6:	9b07      	ldr	r3, [sp, #28]
     ae8:	429a      	cmp	r2, r3
     aea:	d3d6      	bcc.n	a9a <init_data_bss+0xca>
        }
    }
}
     aec:	bf00      	nop
     aee:	bf00      	nop
     af0:	b00a      	add	sp, #40	; 0x28
     af2:	4770      	bx	lr
     af4:	0000bdf8 	.word	0x0000bdf8
     af8:	0000be14 	.word	0x0000be14

00000afc <sys_m4_cache_init>:
{
     afc:	b084      	sub	sp, #16
     afe:	4603      	mov	r3, r0
     b00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b04:	2300      	movs	r3, #0
     b06:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b0e:	2b00      	cmp	r3, #0
     b10:	d118      	bne.n	b44 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b12:	4b10      	ldr	r3, [pc, #64]	; (b54 <sys_m4_cache_init+0x58>)
     b14:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b18:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b1a:	4b0e      	ldr	r3, [pc, #56]	; (b54 <sys_m4_cache_init+0x58>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	4a0d      	ldr	r2, [pc, #52]	; (b54 <sys_m4_cache_init+0x58>)
     b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b24:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b26:	bf00      	nop
     b28:	4b0a      	ldr	r3, [pc, #40]	; (b54 <sys_m4_cache_init+0x58>)
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b34:	d0f8      	beq.n	b28 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <sys_m4_cache_init+0x58>)
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	4a06      	ldr	r2, [pc, #24]	; (b54 <sys_m4_cache_init+0x58>)
     b3c:	f043 0301 	orr.w	r3, r3, #1
     b40:	6013      	str	r3, [r2, #0]
     b42:	e002      	b.n	b4a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b44:	2301      	movs	r3, #1
     b46:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b4e:	4618      	mov	r0, r3
     b50:	b004      	add	sp, #16
     b52:	4770      	bx	lr
     b54:	e0082000 	.word	0xe0082000

00000b58 <startup_go_to_user_mode>:
}
     b58:	bf00      	nop
     b5a:	4770      	bx	lr

00000b5c <Sys_GetCoreID>:
    return 0U;
     b5c:	2300      	movs	r3, #0
}
     b5e:	4618      	mov	r0, r3
     b60:	4770      	bx	lr

00000b62 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b62:	e7fe      	b.n	b62 <HardFault_Handler>

00000b64 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b64:	e7fe      	b.n	b64 <MemManage_Handler>

00000b66 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b66:	e7fe      	b.n	b66 <BusFault_Handler>

00000b68 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b68:	e7fe      	b.n	b68 <UsageFault_Handler>

00000b6a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b6a:	e7fe      	b.n	b6a <SVC_Handler>

00000b6c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b6c:	e7fe      	b.n	b6c <DebugMon_Handler>

00000b6e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b6e:	e7fe      	b.n	b6e <PendSV_Handler>

00000b70 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b70:	e7fe      	b.n	b70 <SysTick_Handler>

00000b72 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b72:	e7fe      	b.n	b72 <undefined_handler>

00000b74 <Ftm0_ch0_callback>:
//Funtions
/**
 * @brief This is the notification for Gpt_Ftm0_ch0.
 * This function executes the state machine every 50ms
 */
void Ftm0_ch0_callback( void ) {
     b74:	b508      	push	{r3, lr}
    DoubleClick_stMachine();//Executing state machine.
     b76:	f000 f831 	bl	bdc <DoubleClick_stMachine>
}
     b7a:	bf00      	nop
     b7c:	bd08      	pop	{r3, pc}

00000b7e <Ftm0_ch1_callback>:

/**
 * @brief This is the notification for Gpt_Ftm0_ch1.
 */
void Ftm0_ch1_callback( void ) {
}
     b7e:	bf00      	nop
     b80:	4770      	bx	lr
	...

00000b84 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->1 Mhz.
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
     b84:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
     b86:	4805      	ldr	r0, [pc, #20]	; (b9c <MCU_clocks+0x18>)
     b88:	f004 f8c6 	bl	4d18 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
     b8c:	2000      	movs	r0, #0
     b8e:	f004 f93b 	bl	4e08 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
     b92:	2000      	movs	r0, #0
     b94:	f004 f914 	bl	4dc0 <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
     b98:	bf00      	nop
     b9a:	bd08      	pop	{r3, pc}
     b9c:	0000bbc4 	.word	0x0000bbc4

00000ba0 <Gpt_conf>:
 * @brief This function configures the gpt driver.
 * This function initialices the gpt driver and enables the notifications of the gpt channels configurated.
 * 
 * 
 */
void Gpt_conf( void ) {
     ba0:	b508      	push	{r3, lr}
    Gpt_Init( &Gpt_Config );//Initializing gpt driver and configurations.
     ba2:	4804      	ldr	r0, [pc, #16]	; (bb4 <Gpt_conf+0x14>)
     ba4:	f005 fa24 	bl	5ff0 <Gpt_Init>

    //Enabling notifications
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch0 );
     ba8:	2000      	movs	r0, #0
     baa:	f005 fd09 	bl	65c0 <Gpt_EnableNotification>
}
     bae:	bf00      	nop
     bb0:	bd08      	pop	{r3, pc}
     bb2:	bf00      	nop
     bb4:	0000bb9c 	.word	0x0000bb9c

00000bb8 <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
     bb8:	b508      	push	{r3, lr}
    MCU_clocks();
     bba:	f7ff ffe3 	bl	b84 <MCU_clocks>
    OsIf_Init( NULL_PTR );//Init Osif timer.
     bbe:	2000      	movs	r0, #0
     bc0:	f000 fb15 	bl	11ee <OsIf_Init>
    Gpt_conf();
     bc4:	f7ff ffec 	bl	ba0 <Gpt_conf>
    Port_Init( &Port_Config );//Init port driver and configuration.
     bc8:	4803      	ldr	r0, [pc, #12]	; (bd8 <EcuM_Init+0x20>)
     bca:	f005 feed 	bl	69a8 <Port_Init>
    Platform_Init( NULL_PTR );//Initializing platform driver and configurations.
     bce:	2000      	movs	r0, #0
     bd0:	f000 fa0a 	bl	fe8 <Platform_Init>
     bd4:	bf00      	nop
     bd6:	bd08      	pop	{r3, pc}
     bd8:	0000bdac 	.word	0x0000bdac

00000bdc <DoubleClick_stMachine>:

/**
 * @brief This function is the double click state machine.
 * 
 */
void DoubleClick_stMachine( void ) {
     bdc:	b508      	push	{r3, lr}
    switch( state ) {
     bde:	4b3f      	ldr	r3, [pc, #252]	; (cdc <DoubleClick_stMachine+0x100>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b04      	cmp	r3, #4
     be4:	d86c      	bhi.n	cc0 <DoubleClick_stMachine+0xe4>
     be6:	a201      	add	r2, pc, #4	; (adr r2, bec <DoubleClick_stMachine+0x10>)
     be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bec:	00000c01 	.word	0x00000c01
     bf0:	00000c1f 	.word	0x00000c1f
     bf4:	00000c45 	.word	0x00000c45
     bf8:	00000c7b 	.word	0x00000c7b
     bfc:	00000ca7 	.word	0x00000ca7
        case IDLE :
            //Checks if the button is pressed.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_LOW ) {
     c00:	208c      	movs	r0, #140	; 0x8c
     c02:	f006 fbe5 	bl	73d0 <Dio_ReadChannel>
     c06:	4603      	mov	r3, r0
     c08:	2b00      	cmp	r3, #0
     c0a:	d15b      	bne.n	cc4 <DoubleClick_stMachine+0xe8>
                Gpt_StartTimer( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch1, FTM0CH1_V );//Starting timer 300ms.
     c0c:	f644 113e 	movw	r1, #18750	; 0x493e
     c10:	2001      	movs	r0, #1
     c12:	f005 fbe3 	bl	63dc <Gpt_StartTimer>
                state = SINGLE_PRESS;
     c16:	4b31      	ldr	r3, [pc, #196]	; (cdc <DoubleClick_stMachine+0x100>)
     c18:	2201      	movs	r2, #1
     c1a:	701a      	strb	r2, [r3, #0]
            }
        break;
     c1c:	e052      	b.n	cc4 <DoubleClick_stMachine+0xe8>
        
        case SINGLE_PRESS :
            //Checking timer timeout.
            if ( Gpt_GetTimeRemaining( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch1 ) == 0 ) {
     c1e:	2001      	movs	r0, #1
     c20:	f005 fb5e 	bl	62e0 <Gpt_GetTimeRemaining>
     c24:	4603      	mov	r3, r0
     c26:	2b00      	cmp	r3, #0
     c28:	d102      	bne.n	c30 <DoubleClick_stMachine+0x54>
                state = HOLD;
     c2a:	4b2c      	ldr	r3, [pc, #176]	; (cdc <DoubleClick_stMachine+0x100>)
     c2c:	2204      	movs	r2, #4
     c2e:	701a      	strb	r2, [r3, #0]
            }

            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {
     c30:	208c      	movs	r0, #140	; 0x8c
     c32:	f006 fbcd 	bl	73d0 <Dio_ReadChannel>
     c36:	4603      	mov	r3, r0
     c38:	2b01      	cmp	r3, #1
     c3a:	d145      	bne.n	cc8 <DoubleClick_stMachine+0xec>
                state = SINGLE_RELEASE;
     c3c:	4b27      	ldr	r3, [pc, #156]	; (cdc <DoubleClick_stMachine+0x100>)
     c3e:	2202      	movs	r2, #2
     c40:	701a      	strb	r2, [r3, #0]
            }
        break;
     c42:	e041      	b.n	cc8 <DoubleClick_stMachine+0xec>
        
        case SINGLE_RELEASE :
            //Checking timer timeout.
            if ( Gpt_GetTimeRemaining( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch1 ) == 0 ) {//Single click
     c44:	2001      	movs	r0, #1
     c46:	f005 fb4b 	bl	62e0 <Gpt_GetTimeRemaining>
     c4a:	4603      	mov	r3, r0
     c4c:	2b00      	cmp	r3, #0
     c4e:	d105      	bne.n	c5c <DoubleClick_stMachine+0x80>
                Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     c50:	2048      	movs	r0, #72	; 0x48
     c52:	f006 fbe8 	bl	7426 <Dio_FlipChannel>
                state = IDLE;
     c56:	4b21      	ldr	r3, [pc, #132]	; (cdc <DoubleClick_stMachine+0x100>)
     c58:	2200      	movs	r2, #0
     c5a:	701a      	strb	r2, [r3, #0]
            }

            //Checks if the button is pressed.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_LOW ) {
     c5c:	208c      	movs	r0, #140	; 0x8c
     c5e:	f006 fbb7 	bl	73d0 <Dio_ReadChannel>
     c62:	4603      	mov	r3, r0
     c64:	2b00      	cmp	r3, #0
     c66:	d131      	bne.n	ccc <DoubleClick_stMachine+0xf0>
                Gpt_StartTimer( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch1, FTM0CH1_V );//Starting timer 300ms.
     c68:	f644 113e 	movw	r1, #18750	; 0x493e
     c6c:	2001      	movs	r0, #1
     c6e:	f005 fbb5 	bl	63dc <Gpt_StartTimer>
                state = DOUBLE_PRESS;
     c72:	4b1a      	ldr	r3, [pc, #104]	; (cdc <DoubleClick_stMachine+0x100>)
     c74:	2203      	movs	r2, #3
     c76:	701a      	strb	r2, [r3, #0]
            }
        break;
     c78:	e028      	b.n	ccc <DoubleClick_stMachine+0xf0>
        
        case DOUBLE_PRESS :
            //Checking timer timeout.
            if ( Gpt_GetTimeRemaining( GptConf_GptChannelConfiguration_Gpt_Ftm0_ch1 ) == 0 ) {
     c7a:	2001      	movs	r0, #1
     c7c:	f005 fb30 	bl	62e0 <Gpt_GetTimeRemaining>
     c80:	4603      	mov	r3, r0
     c82:	2b00      	cmp	r3, #0
     c84:	d102      	bne.n	c8c <DoubleClick_stMachine+0xb0>
                state = HOLD;
     c86:	4b15      	ldr	r3, [pc, #84]	; (cdc <DoubleClick_stMachine+0x100>)
     c88:	2204      	movs	r2, #4
     c8a:	701a      	strb	r2, [r3, #0]
            }

            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {//Double click.
     c8c:	208c      	movs	r0, #140	; 0x8c
     c8e:	f006 fb9f 	bl	73d0 <Dio_ReadChannel>
     c92:	4603      	mov	r3, r0
     c94:	2b01      	cmp	r3, #1
     c96:	d11b      	bne.n	cd0 <DoubleClick_stMachine+0xf4>
                Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     c98:	2049      	movs	r0, #73	; 0x49
     c9a:	f006 fbc4 	bl	7426 <Dio_FlipChannel>
                state = IDLE;
     c9e:	4b0f      	ldr	r3, [pc, #60]	; (cdc <DoubleClick_stMachine+0x100>)
     ca0:	2200      	movs	r2, #0
     ca2:	701a      	strb	r2, [r3, #0]
            }
        break;
     ca4:	e014      	b.n	cd0 <DoubleClick_stMachine+0xf4>
        
        case HOLD ://Hold click.
            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {
     ca6:	208c      	movs	r0, #140	; 0x8c
     ca8:	f006 fb92 	bl	73d0 <Dio_ReadChannel>
     cac:	4603      	mov	r3, r0
     cae:	2b01      	cmp	r3, #1
     cb0:	d110      	bne.n	cd4 <DoubleClick_stMachine+0xf8>
                Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     cb2:	204a      	movs	r0, #74	; 0x4a
     cb4:	f006 fbb7 	bl	7426 <Dio_FlipChannel>
                state = IDLE;
     cb8:	4b08      	ldr	r3, [pc, #32]	; (cdc <DoubleClick_stMachine+0x100>)
     cba:	2200      	movs	r2, #0
     cbc:	701a      	strb	r2, [r3, #0]
            }
        break;
     cbe:	e009      	b.n	cd4 <DoubleClick_stMachine+0xf8>
        
        default :
        break;
     cc0:	bf00      	nop
     cc2:	e008      	b.n	cd6 <DoubleClick_stMachine+0xfa>
        break;
     cc4:	bf00      	nop
     cc6:	e006      	b.n	cd6 <DoubleClick_stMachine+0xfa>
        break;
     cc8:	bf00      	nop
     cca:	e004      	b.n	cd6 <DoubleClick_stMachine+0xfa>
        break;
     ccc:	bf00      	nop
     cce:	e002      	b.n	cd6 <DoubleClick_stMachine+0xfa>
        break;
     cd0:	bf00      	nop
     cd2:	e000      	b.n	cd6 <DoubleClick_stMachine+0xfa>
        break;
     cd4:	bf00      	nop
    }
}
     cd6:	bf00      	nop
     cd8:	bd08      	pop	{r3, pc}
     cda:	bf00      	nop
     cdc:	1fff8b80 	.word	0x1fff8b80

00000ce0 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ce0:	b086      	sub	sp, #24
     ce2:	9003      	str	r0, [sp, #12]
     ce4:	9102      	str	r1, [sp, #8]
     ce6:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     cec:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     cf0:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     cf2:	9b01      	ldr	r3, [sp, #4]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d007      	beq.n	d08 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     cf8:	9b03      	ldr	r3, [sp, #12]
     cfa:	3310      	adds	r3, #16
     cfc:	009b      	lsls	r3, r3, #2
     cfe:	9a05      	ldr	r2, [sp, #20]
     d00:	4413      	add	r3, r2
     d02:	681a      	ldr	r2, [r3, #0]
     d04:	9b01      	ldr	r3, [sp, #4]
     d06:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     d08:	9b03      	ldr	r3, [sp, #12]
     d0a:	3310      	adds	r3, #16
     d0c:	009b      	lsls	r3, r3, #2
     d0e:	9a05      	ldr	r2, [sp, #20]
     d10:	4413      	add	r3, r2
     d12:	9a02      	ldr	r2, [sp, #8]
     d14:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     d16:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     d1a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     d1e:	bf00      	nop
     d20:	b006      	add	sp, #24
     d22:	4770      	bx	lr

00000d24 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     d24:	b082      	sub	sp, #8
     d26:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     d28:	9b01      	ldr	r3, [sp, #4]
     d2a:	f003 021f 	and.w	r2, r3, #31
     d2e:	4905      	ldr	r1, [pc, #20]	; (d44 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     d30:	9b01      	ldr	r3, [sp, #4]
     d32:	095b      	lsrs	r3, r3, #5
     d34:	2001      	movs	r0, #1
     d36:	fa00 f202 	lsl.w	r2, r0, r2
     d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     d3e:	bf00      	nop
     d40:	b002      	add	sp, #8
     d42:	4770      	bx	lr
     d44:	e000e100 	.word	0xe000e100

00000d48 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     d48:	b082      	sub	sp, #8
     d4a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     d4c:	9b01      	ldr	r3, [sp, #4]
     d4e:	f003 021f 	and.w	r2, r3, #31
     d52:	4906      	ldr	r1, [pc, #24]	; (d6c <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     d54:	9b01      	ldr	r3, [sp, #4]
     d56:	095b      	lsrs	r3, r3, #5
     d58:	2001      	movs	r0, #1
     d5a:	fa00 f202 	lsl.w	r2, r0, r2
     d5e:	3320      	adds	r3, #32
     d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     d64:	bf00      	nop
     d66:	b002      	add	sp, #8
     d68:	4770      	bx	lr
     d6a:	bf00      	nop
     d6c:	e000e100 	.word	0xe000e100

00000d70 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     d70:	b084      	sub	sp, #16
     d72:	9001      	str	r0, [sp, #4]
     d74:	460b      	mov	r3, r1
     d76:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     d7a:	2304      	movs	r3, #4
     d7c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     d80:	f89d 2003 	ldrb.w	r2, [sp, #3]
     d84:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d88:	fa02 f103 	lsl.w	r1, r2, r3
     d8c:	4a04      	ldr	r2, [pc, #16]	; (da0 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     d8e:	9b01      	ldr	r3, [sp, #4]
     d90:	b2c9      	uxtb	r1, r1
     d92:	4413      	add	r3, r2
     d94:	460a      	mov	r2, r1
     d96:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     d9a:	bf00      	nop
     d9c:	b004      	add	sp, #16
     d9e:	4770      	bx	lr
     da0:	e000e100 	.word	0xe000e100

00000da4 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     da4:	b084      	sub	sp, #16
     da6:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     da8:	2304      	movs	r3, #4
     daa:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     dae:	4a09      	ldr	r2, [pc, #36]	; (dd4 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     db0:	9b01      	ldr	r3, [sp, #4]
     db2:	4413      	add	r3, r2
     db4:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     db8:	b2db      	uxtb	r3, r3
     dba:	461a      	mov	r2, r3
     dbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dc0:	fa42 f303 	asr.w	r3, r2, r3
     dc4:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     dc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     dcc:	4618      	mov	r0, r3
     dce:	b004      	add	sp, #16
     dd0:	4770      	bx	lr
     dd2:	bf00      	nop
     dd4:	e000e100 	.word	0xe000e100

00000dd8 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     dd8:	b082      	sub	sp, #8
     dda:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     ddc:	9b01      	ldr	r3, [sp, #4]
     dde:	f003 021f 	and.w	r2, r3, #31
     de2:	4906      	ldr	r1, [pc, #24]	; (dfc <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     de4:	9b01      	ldr	r3, [sp, #4]
     de6:	095b      	lsrs	r3, r3, #5
     de8:	2001      	movs	r0, #1
     dea:	fa00 f202 	lsl.w	r2, r0, r2
     dee:	3360      	adds	r3, #96	; 0x60
     df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     df4:	bf00      	nop
     df6:	b002      	add	sp, #8
     df8:	4770      	bx	lr
     dfa:	bf00      	nop
     dfc:	e000e100 	.word	0xe000e100

00000e00 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     e00:	b500      	push	{lr}
     e02:	b085      	sub	sp, #20
     e04:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     e06:	2300      	movs	r3, #0
     e08:	9303      	str	r3, [sp, #12]
     e0a:	e05d      	b.n	ec8 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     e0c:	9b01      	ldr	r3, [sp, #4]
     e0e:	6859      	ldr	r1, [r3, #4]
     e10:	9a03      	ldr	r2, [sp, #12]
     e12:	4613      	mov	r3, r2
     e14:	005b      	lsls	r3, r3, #1
     e16:	4413      	add	r3, r2
     e18:	009b      	lsls	r3, r3, #2
     e1a:	440b      	add	r3, r1
     e1c:	681b      	ldr	r3, [r3, #0]
     e1e:	4618      	mov	r0, r3
     e20:	f000 f899 	bl	f56 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     e24:	9b01      	ldr	r3, [sp, #4]
     e26:	6859      	ldr	r1, [r3, #4]
     e28:	9a03      	ldr	r2, [sp, #12]
     e2a:	4613      	mov	r3, r2
     e2c:	005b      	lsls	r3, r3, #1
     e2e:	4413      	add	r3, r2
     e30:	009b      	lsls	r3, r3, #2
     e32:	440b      	add	r3, r1
     e34:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     e36:	9b01      	ldr	r3, [sp, #4]
     e38:	6859      	ldr	r1, [r3, #4]
     e3a:	9a03      	ldr	r2, [sp, #12]
     e3c:	4613      	mov	r3, r2
     e3e:	005b      	lsls	r3, r3, #1
     e40:	4413      	add	r3, r2
     e42:	009b      	lsls	r3, r3, #2
     e44:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     e46:	795b      	ldrb	r3, [r3, #5]
     e48:	4619      	mov	r1, r3
     e4a:	f000 f869 	bl	f20 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     e4e:	9b01      	ldr	r3, [sp, #4]
     e50:	6859      	ldr	r1, [r3, #4]
     e52:	9a03      	ldr	r2, [sp, #12]
     e54:	4613      	mov	r3, r2
     e56:	005b      	lsls	r3, r3, #1
     e58:	4413      	add	r3, r2
     e5a:	009b      	lsls	r3, r3, #2
     e5c:	440b      	add	r3, r1
     e5e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     e60:	9b01      	ldr	r3, [sp, #4]
     e62:	6859      	ldr	r1, [r3, #4]
     e64:	9a03      	ldr	r2, [sp, #12]
     e66:	4613      	mov	r3, r2
     e68:	005b      	lsls	r3, r3, #1
     e6a:	4413      	add	r3, r2
     e6c:	009b      	lsls	r3, r3, #2
     e6e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     e70:	689b      	ldr	r3, [r3, #8]
     e72:	2200      	movs	r2, #0
     e74:	4619      	mov	r1, r3
     e76:	f000 f831 	bl	edc <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     e7a:	9b01      	ldr	r3, [sp, #4]
     e7c:	6859      	ldr	r1, [r3, #4]
     e7e:	9a03      	ldr	r2, [sp, #12]
     e80:	4613      	mov	r3, r2
     e82:	005b      	lsls	r3, r3, #1
     e84:	4413      	add	r3, r2
     e86:	009b      	lsls	r3, r3, #2
     e88:	440b      	add	r3, r1
     e8a:	791b      	ldrb	r3, [r3, #4]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d00c      	beq.n	eaa <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     e90:	9b01      	ldr	r3, [sp, #4]
     e92:	6859      	ldr	r1, [r3, #4]
     e94:	9a03      	ldr	r2, [sp, #12]
     e96:	4613      	mov	r3, r2
     e98:	005b      	lsls	r3, r3, #1
     e9a:	4413      	add	r3, r2
     e9c:	009b      	lsls	r3, r3, #2
     e9e:	440b      	add	r3, r1
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	4618      	mov	r0, r3
     ea4:	f000 f828 	bl	ef8 <IntCtrl_Ip_EnableIrq>
     ea8:	e00b      	b.n	ec2 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     eaa:	9b01      	ldr	r3, [sp, #4]
     eac:	6859      	ldr	r1, [r3, #4]
     eae:	9a03      	ldr	r2, [sp, #12]
     eb0:	4613      	mov	r3, r2
     eb2:	005b      	lsls	r3, r3, #1
     eb4:	4413      	add	r3, r2
     eb6:	009b      	lsls	r3, r3, #2
     eb8:	440b      	add	r3, r1
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	4618      	mov	r0, r3
     ebe:	f000 f825 	bl	f0c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     ec2:	9b03      	ldr	r3, [sp, #12]
     ec4:	3301      	adds	r3, #1
     ec6:	9303      	str	r3, [sp, #12]
     ec8:	9b01      	ldr	r3, [sp, #4]
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	9a03      	ldr	r2, [sp, #12]
     ece:	429a      	cmp	r2, r3
     ed0:	d39c      	bcc.n	e0c <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     ed2:	2300      	movs	r3, #0
}
     ed4:	4618      	mov	r0, r3
     ed6:	b005      	add	sp, #20
     ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00000edc <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     edc:	b500      	push	{lr}
     ede:	b085      	sub	sp, #20
     ee0:	9003      	str	r0, [sp, #12]
     ee2:	9102      	str	r1, [sp, #8]
     ee4:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     ee6:	9a01      	ldr	r2, [sp, #4]
     ee8:	9902      	ldr	r1, [sp, #8]
     eea:	9803      	ldr	r0, [sp, #12]
     eec:	f7ff fef8 	bl	ce0 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     ef0:	bf00      	nop
     ef2:	b005      	add	sp, #20
     ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ef8 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     ef8:	b500      	push	{lr}
     efa:	b083      	sub	sp, #12
     efc:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     efe:	9801      	ldr	r0, [sp, #4]
     f00:	f7ff ff10 	bl	d24 <IntCtrl_Ip_EnableIrqPrivileged>
}
     f04:	bf00      	nop
     f06:	b003      	add	sp, #12
     f08:	f85d fb04 	ldr.w	pc, [sp], #4

00000f0c <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     f0c:	b500      	push	{lr}
     f0e:	b083      	sub	sp, #12
     f10:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     f12:	9801      	ldr	r0, [sp, #4]
     f14:	f7ff ff18 	bl	d48 <IntCtrl_Ip_DisableIrqPrivileged>
}
     f18:	bf00      	nop
     f1a:	b003      	add	sp, #12
     f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f20 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f20:	b500      	push	{lr}
     f22:	b083      	sub	sp, #12
     f24:	9001      	str	r0, [sp, #4]
     f26:	460b      	mov	r3, r1
     f28:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     f2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f30:	4619      	mov	r1, r3
     f32:	9801      	ldr	r0, [sp, #4]
     f34:	f7ff ff1c 	bl	d70 <IntCtrl_Ip_SetPriorityPrivileged>
}
     f38:	bf00      	nop
     f3a:	b003      	add	sp, #12
     f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f40 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     f40:	b500      	push	{lr}
     f42:	b083      	sub	sp, #12
     f44:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     f46:	9801      	ldr	r0, [sp, #4]
     f48:	f7ff ff2c 	bl	da4 <IntCtrl_Ip_GetPriorityPrivileged>
     f4c:	4603      	mov	r3, r0
}
     f4e:	4618      	mov	r0, r3
     f50:	b003      	add	sp, #12
     f52:	f85d fb04 	ldr.w	pc, [sp], #4

00000f56 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     f56:	b500      	push	{lr}
     f58:	b083      	sub	sp, #12
     f5a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     f5c:	9801      	ldr	r0, [sp, #4]
     f5e:	f7ff ff3b 	bl	dd8 <IntCtrl_Ip_ClearPendingPrivileged>
}
     f62:	bf00      	nop
     f64:	b003      	add	sp, #12
     f66:	f85d fb04 	ldr.w	pc, [sp], #4
     f6a:	bf00      	nop

00000f6c <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f6c:	b500      	push	{lr}
     f6e:	b083      	sub	sp, #12
     f70:	9001      	str	r0, [sp, #4]
     f72:	460b      	mov	r3, r1
     f74:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     f78:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d003      	beq.n	f88 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     f80:	9801      	ldr	r0, [sp, #4]
     f82:	f7ff ffb9 	bl	ef8 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     f86:	e002      	b.n	f8e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     f88:	9801      	ldr	r0, [sp, #4]
     f8a:	f7ff ffbf 	bl	f0c <IntCtrl_Ip_DisableIrq>
}
     f8e:	bf00      	nop
     f90:	b003      	add	sp, #12
     f92:	f85d fb04 	ldr.w	pc, [sp], #4

00000f96 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f96:	b500      	push	{lr}
     f98:	b083      	sub	sp, #12
     f9a:	9001      	str	r0, [sp, #4]
     f9c:	460b      	mov	r3, r1
     f9e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
     fa6:	4619      	mov	r1, r3
     fa8:	9801      	ldr	r0, [sp, #4]
     faa:	f7ff ffb9 	bl	f20 <IntCtrl_Ip_SetPriority>
}
     fae:	bf00      	nop
     fb0:	b003      	add	sp, #12
     fb2:	f85d fb04 	ldr.w	pc, [sp], #4

00000fb6 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     fb6:	b500      	push	{lr}
     fb8:	b083      	sub	sp, #12
     fba:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     fbc:	9801      	ldr	r0, [sp, #4]
     fbe:	f7ff ffbf 	bl	f40 <IntCtrl_Ip_GetPriority>
     fc2:	4603      	mov	r3, r0
}
     fc4:	4618      	mov	r0, r3
     fc6:	b003      	add	sp, #12
     fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00000fcc <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     fcc:	b500      	push	{lr}
     fce:	b085      	sub	sp, #20
     fd0:	9003      	str	r0, [sp, #12]
     fd2:	9102      	str	r1, [sp, #8]
     fd4:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     fd6:	9a01      	ldr	r2, [sp, #4]
     fd8:	9902      	ldr	r1, [sp, #8]
     fda:	9803      	ldr	r0, [sp, #12]
     fdc:	f7ff ff7e 	bl	edc <IntCtrl_Ip_InstallHandler>
}
     fe0:	bf00      	nop
     fe2:	b005      	add	sp, #20
     fe4:	f85d fb04 	ldr.w	pc, [sp], #4

00000fe8 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     fe8:	b500      	push	{lr}
     fea:	b085      	sub	sp, #20
     fec:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     fee:	2300      	movs	r3, #0
     ff0:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     ff4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ff8:	4a05      	ldr	r2, [pc, #20]	; (1010 <Platform_Init+0x28>)
     ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	4618      	mov	r0, r3
    1002:	f000 f8c7 	bl	1194 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1006:	bf00      	nop
    1008:	b005      	add	sp, #20
    100a:	f85d fb04 	ldr.w	pc, [sp], #4
    100e:	bf00      	nop
    1010:	0000bbf0 	.word	0x0000bbf0

00001014 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1014:	b500      	push	{lr}
    1016:	b085      	sub	sp, #20
    1018:	9001      	str	r0, [sp, #4]
    101a:	460b      	mov	r3, r1
    101c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1020:	2300      	movs	r3, #0
    1022:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1026:	f89d 3003 	ldrb.w	r3, [sp, #3]
    102a:	4619      	mov	r1, r3
    102c:	9801      	ldr	r0, [sp, #4]
    102e:	f7ff ff9d 	bl	f6c <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1032:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1036:	4618      	mov	r0, r3
    1038:	b005      	add	sp, #20
    103a:	f85d fb04 	ldr.w	pc, [sp], #4

0000103e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    103e:	b500      	push	{lr}
    1040:	b085      	sub	sp, #20
    1042:	9001      	str	r0, [sp, #4]
    1044:	460b      	mov	r3, r1
    1046:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    104a:	2300      	movs	r3, #0
    104c:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1050:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1054:	4619      	mov	r1, r3
    1056:	9801      	ldr	r0, [sp, #4]
    1058:	f7ff ff9d 	bl	f96 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    105c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1060:	4618      	mov	r0, r3
    1062:	b005      	add	sp, #20
    1064:	f85d fb04 	ldr.w	pc, [sp], #4

00001068 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1068:	b500      	push	{lr}
    106a:	b085      	sub	sp, #20
    106c:	9001      	str	r0, [sp, #4]
    106e:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1070:	2300      	movs	r3, #0
    1072:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1076:	9801      	ldr	r0, [sp, #4]
    1078:	f7ff ff9d 	bl	fb6 <Platform_Ipw_GetIrqPriority>
    107c:	4603      	mov	r3, r0
    107e:	461a      	mov	r2, r3
    1080:	9b00      	ldr	r3, [sp, #0]
    1082:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1084:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1088:	4618      	mov	r0, r3
    108a:	b005      	add	sp, #20
    108c:	f85d fb04 	ldr.w	pc, [sp], #4

00001090 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1090:	b500      	push	{lr}
    1092:	b087      	sub	sp, #28
    1094:	9003      	str	r0, [sp, #12]
    1096:	9102      	str	r1, [sp, #8]
    1098:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    109a:	2300      	movs	r3, #0
    109c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    10a0:	9a01      	ldr	r2, [sp, #4]
    10a2:	9902      	ldr	r1, [sp, #8]
    10a4:	9803      	ldr	r0, [sp, #12]
    10a6:	f7ff ff91 	bl	fcc <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    10aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    10ae:	4618      	mov	r0, r3
    10b0:	b007      	add	sp, #28
    10b2:	f85d fb04 	ldr.w	pc, [sp], #4
    10b6:	bf00      	nop

000010b8 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    10b8:	b500      	push	{lr}
    10ba:	b085      	sub	sp, #20
    10bc:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    10be:	2300      	movs	r3, #0
    10c0:	9303      	str	r3, [sp, #12]
    10c2:	e05d      	b.n	1180 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    10c4:	9b01      	ldr	r3, [sp, #4]
    10c6:	6859      	ldr	r1, [r3, #4]
    10c8:	9a03      	ldr	r2, [sp, #12]
    10ca:	4613      	mov	r3, r2
    10cc:	005b      	lsls	r3, r3, #1
    10ce:	4413      	add	r3, r2
    10d0:	009b      	lsls	r3, r3, #2
    10d2:	440b      	add	r3, r1
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	4618      	mov	r0, r3
    10d8:	f7ff ff3d 	bl	f56 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    10dc:	9b01      	ldr	r3, [sp, #4]
    10de:	6859      	ldr	r1, [r3, #4]
    10e0:	9a03      	ldr	r2, [sp, #12]
    10e2:	4613      	mov	r3, r2
    10e4:	005b      	lsls	r3, r3, #1
    10e6:	4413      	add	r3, r2
    10e8:	009b      	lsls	r3, r3, #2
    10ea:	440b      	add	r3, r1
    10ec:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    10ee:	9b01      	ldr	r3, [sp, #4]
    10f0:	6859      	ldr	r1, [r3, #4]
    10f2:	9a03      	ldr	r2, [sp, #12]
    10f4:	4613      	mov	r3, r2
    10f6:	005b      	lsls	r3, r3, #1
    10f8:	4413      	add	r3, r2
    10fa:	009b      	lsls	r3, r3, #2
    10fc:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    10fe:	795b      	ldrb	r3, [r3, #5]
    1100:	4619      	mov	r1, r3
    1102:	f7ff ff0d 	bl	f20 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1106:	9b01      	ldr	r3, [sp, #4]
    1108:	6859      	ldr	r1, [r3, #4]
    110a:	9a03      	ldr	r2, [sp, #12]
    110c:	4613      	mov	r3, r2
    110e:	005b      	lsls	r3, r3, #1
    1110:	4413      	add	r3, r2
    1112:	009b      	lsls	r3, r3, #2
    1114:	440b      	add	r3, r1
    1116:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1118:	9b01      	ldr	r3, [sp, #4]
    111a:	6859      	ldr	r1, [r3, #4]
    111c:	9a03      	ldr	r2, [sp, #12]
    111e:	4613      	mov	r3, r2
    1120:	005b      	lsls	r3, r3, #1
    1122:	4413      	add	r3, r2
    1124:	009b      	lsls	r3, r3, #2
    1126:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1128:	689b      	ldr	r3, [r3, #8]
    112a:	2200      	movs	r2, #0
    112c:	4619      	mov	r1, r3
    112e:	f7ff fed5 	bl	edc <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1132:	9b01      	ldr	r3, [sp, #4]
    1134:	6859      	ldr	r1, [r3, #4]
    1136:	9a03      	ldr	r2, [sp, #12]
    1138:	4613      	mov	r3, r2
    113a:	005b      	lsls	r3, r3, #1
    113c:	4413      	add	r3, r2
    113e:	009b      	lsls	r3, r3, #2
    1140:	440b      	add	r3, r1
    1142:	791b      	ldrb	r3, [r3, #4]
    1144:	2b00      	cmp	r3, #0
    1146:	d00c      	beq.n	1162 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1148:	9b01      	ldr	r3, [sp, #4]
    114a:	6859      	ldr	r1, [r3, #4]
    114c:	9a03      	ldr	r2, [sp, #12]
    114e:	4613      	mov	r3, r2
    1150:	005b      	lsls	r3, r3, #1
    1152:	4413      	add	r3, r2
    1154:	009b      	lsls	r3, r3, #2
    1156:	440b      	add	r3, r1
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	4618      	mov	r0, r3
    115c:	f7ff fecc 	bl	ef8 <IntCtrl_Ip_EnableIrq>
    1160:	e00b      	b.n	117a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1162:	9b01      	ldr	r3, [sp, #4]
    1164:	6859      	ldr	r1, [r3, #4]
    1166:	9a03      	ldr	r2, [sp, #12]
    1168:	4613      	mov	r3, r2
    116a:	005b      	lsls	r3, r3, #1
    116c:	4413      	add	r3, r2
    116e:	009b      	lsls	r3, r3, #2
    1170:	440b      	add	r3, r1
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	4618      	mov	r0, r3
    1176:	f7ff fec9 	bl	f0c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    117a:	9b03      	ldr	r3, [sp, #12]
    117c:	3301      	adds	r3, #1
    117e:	9303      	str	r3, [sp, #12]
    1180:	9b01      	ldr	r3, [sp, #4]
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	9a03      	ldr	r2, [sp, #12]
    1186:	429a      	cmp	r2, r3
    1188:	d39c      	bcc.n	10c4 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    118a:	2300      	movs	r3, #0
}
    118c:	4618      	mov	r0, r3
    118e:	b005      	add	sp, #20
    1190:	f85d fb04 	ldr.w	pc, [sp], #4

00001194 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1194:	b500      	push	{lr}
    1196:	b085      	sub	sp, #20
    1198:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    119a:	2300      	movs	r3, #0
    119c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    11a0:	9b01      	ldr	r3, [sp, #4]
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d007      	beq.n	11b8 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    11a8:	9b01      	ldr	r3, [sp, #4]
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	4618      	mov	r0, r3
    11ae:	f7ff ff83 	bl	10b8 <Platform_Ipw_InitIntCtrl>
    11b2:	4603      	mov	r3, r0
    11b4:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    11b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11bc:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    11be:	bf00      	nop
    11c0:	b005      	add	sp, #20
    11c2:	f85d fb04 	ldr.w	pc, [sp], #4

000011c6 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    11c6:	2300      	movs	r3, #0
}
    11c8:	4618      	mov	r0, r3
    11ca:	4770      	bx	lr

000011cc <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    11cc:	b082      	sub	sp, #8
    11ce:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    11d0:	2301      	movs	r3, #1
}
    11d2:	4618      	mov	r0, r3
    11d4:	b002      	add	sp, #8
    11d6:	4770      	bx	lr

000011d8 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    11d8:	b082      	sub	sp, #8
    11da:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    11dc:	bf00      	nop
    11de:	b002      	add	sp, #8
    11e0:	4770      	bx	lr

000011e2 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    11e2:	b082      	sub	sp, #8
    11e4:	9001      	str	r0, [sp, #4]
    return Micros;
    11e6:	9b01      	ldr	r3, [sp, #4]
}
    11e8:	4618      	mov	r0, r3
    11ea:	b002      	add	sp, #8
    11ec:	4770      	bx	lr

000011ee <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    11ee:	b500      	push	{lr}
    11f0:	b083      	sub	sp, #12
    11f2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    11f4:	f000 f86c 	bl	12d0 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    11f8:	bf00      	nop
    11fa:	b003      	add	sp, #12
    11fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001200 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1200:	b500      	push	{lr}
    1202:	b085      	sub	sp, #20
    1204:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1206:	2300      	movs	r3, #0
    1208:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    120a:	9b01      	ldr	r3, [sp, #4]
    120c:	2b00      	cmp	r3, #0
    120e:	d003      	beq.n	1218 <OsIf_GetCounter+0x18>
    1210:	9b01      	ldr	r3, [sp, #4]
    1212:	2b01      	cmp	r3, #1
    1214:	d004      	beq.n	1220 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1216:	e007      	b.n	1228 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1218:	f7ff ffd5 	bl	11c6 <OsIf_Timer_Dummy_GetCounter>
    121c:	9003      	str	r0, [sp, #12]
            break;
    121e:	e003      	b.n	1228 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1220:	f000 f872 	bl	1308 <OsIf_Timer_System_GetCounter>
    1224:	9003      	str	r0, [sp, #12]
            break;
    1226:	bf00      	nop
    }

    return Value;
    1228:	9b03      	ldr	r3, [sp, #12]
}
    122a:	4618      	mov	r0, r3
    122c:	b005      	add	sp, #20
    122e:	f85d fb04 	ldr.w	pc, [sp], #4

00001232 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1232:	b500      	push	{lr}
    1234:	b085      	sub	sp, #20
    1236:	9001      	str	r0, [sp, #4]
    1238:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    123a:	2300      	movs	r3, #0
    123c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    123e:	9b00      	ldr	r3, [sp, #0]
    1240:	2b00      	cmp	r3, #0
    1242:	d003      	beq.n	124c <OsIf_GetElapsed+0x1a>
    1244:	9b00      	ldr	r3, [sp, #0]
    1246:	2b01      	cmp	r3, #1
    1248:	d005      	beq.n	1256 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    124a:	e009      	b.n	1260 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    124c:	9801      	ldr	r0, [sp, #4]
    124e:	f7ff ffbd 	bl	11cc <OsIf_Timer_Dummy_GetElapsed>
    1252:	9003      	str	r0, [sp, #12]
            break;
    1254:	e004      	b.n	1260 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1256:	9801      	ldr	r0, [sp, #4]
    1258:	f000 f864 	bl	1324 <OsIf_Timer_System_GetElapsed>
    125c:	9003      	str	r0, [sp, #12]
            break;
    125e:	bf00      	nop
    }

    return Value;
    1260:	9b03      	ldr	r3, [sp, #12]
}
    1262:	4618      	mov	r0, r3
    1264:	b005      	add	sp, #20
    1266:	f85d fb04 	ldr.w	pc, [sp], #4

0000126a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    126a:	b500      	push	{lr}
    126c:	b083      	sub	sp, #12
    126e:	9001      	str	r0, [sp, #4]
    1270:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1272:	9b00      	ldr	r3, [sp, #0]
    1274:	2b00      	cmp	r3, #0
    1276:	d003      	beq.n	1280 <OsIf_SetTimerFrequency+0x16>
    1278:	9b00      	ldr	r3, [sp, #0]
    127a:	2b01      	cmp	r3, #1
    127c:	d004      	beq.n	1288 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    127e:	e007      	b.n	1290 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1280:	9801      	ldr	r0, [sp, #4]
    1282:	f7ff ffa9 	bl	11d8 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1286:	e003      	b.n	1290 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1288:	9801      	ldr	r0, [sp, #4]
    128a:	f000 f85b 	bl	1344 <OsIf_Timer_System_SetTimerFrequency>
            break;
    128e:	bf00      	nop
    }
}
    1290:	bf00      	nop
    1292:	b003      	add	sp, #12
    1294:	f85d fb04 	ldr.w	pc, [sp], #4

00001298 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1298:	b500      	push	{lr}
    129a:	b085      	sub	sp, #20
    129c:	9001      	str	r0, [sp, #4]
    129e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    12a0:	2300      	movs	r3, #0
    12a2:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    12a4:	9b00      	ldr	r3, [sp, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d003      	beq.n	12b2 <OsIf_MicrosToTicks+0x1a>
    12aa:	9b00      	ldr	r3, [sp, #0]
    12ac:	2b01      	cmp	r3, #1
    12ae:	d005      	beq.n	12bc <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    12b0:	e009      	b.n	12c6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    12b2:	9801      	ldr	r0, [sp, #4]
    12b4:	f7ff ff95 	bl	11e2 <OsIf_Timer_Dummy_MicrosToTicks>
    12b8:	9003      	str	r0, [sp, #12]
            break;
    12ba:	e004      	b.n	12c6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    12bc:	9801      	ldr	r0, [sp, #4]
    12be:	f000 f84f 	bl	1360 <OsIf_Timer_System_MicrosToTicks>
    12c2:	9003      	str	r0, [sp, #12]
            break;
    12c4:	bf00      	nop
    }

    return Value;
    12c6:	9b03      	ldr	r3, [sp, #12]
}
    12c8:	4618      	mov	r0, r3
    12ca:	b005      	add	sp, #20
    12cc:	f85d fb04 	ldr.w	pc, [sp], #4

000012d0 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    12d0:	b500      	push	{lr}
    12d2:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    12d4:	2300      	movs	r3, #0
    12d6:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    12d8:	4a09      	ldr	r2, [pc, #36]	; (1300 <OsIf_Timer_System_Init+0x30>)
    12da:	9b01      	ldr	r3, [sp, #4]
    12dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12e0:	685a      	ldr	r2, [r3, #4]
    12e2:	4908      	ldr	r1, [pc, #32]	; (1304 <OsIf_Timer_System_Init+0x34>)
    12e4:	9b01      	ldr	r3, [sp, #4]
    12e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    12ea:	4a06      	ldr	r2, [pc, #24]	; (1304 <OsIf_Timer_System_Init+0x34>)
    12ec:	9b01      	ldr	r3, [sp, #4]
    12ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12f2:	4618      	mov	r0, r3
    12f4:	f000 f868 	bl	13c8 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    12f8:	bf00      	nop
    12fa:	b003      	add	sp, #12
    12fc:	f85d fb04 	ldr.w	pc, [sp], #4
    1300:	0000bbe8 	.word	0x0000bbe8
    1304:	1fff8b84 	.word	0x1fff8b84

00001308 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1308:	b500      	push	{lr}
    130a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    130c:	2300      	movs	r3, #0
    130e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1310:	2300      	movs	r3, #0
    1312:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1314:	f000 f86c 	bl	13f0 <OsIf_Timer_System_Internal_GetCounter>
    1318:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    131a:	9b01      	ldr	r3, [sp, #4]
}
    131c:	4618      	mov	r0, r3
    131e:	b003      	add	sp, #12
    1320:	f85d fb04 	ldr.w	pc, [sp], #4

00001324 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1324:	b500      	push	{lr}
    1326:	b085      	sub	sp, #20
    1328:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    132a:	2300      	movs	r3, #0
    132c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    132e:	2300      	movs	r3, #0
    1330:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1332:	9801      	ldr	r0, [sp, #4]
    1334:	f000 f864 	bl	1400 <OsIf_Timer_System_Internal_GetElapsed>
    1338:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    133a:	9b03      	ldr	r3, [sp, #12]
}
    133c:	4618      	mov	r0, r3
    133e:	b005      	add	sp, #20
    1340:	f85d fb04 	ldr.w	pc, [sp], #4

00001344 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1344:	b084      	sub	sp, #16
    1346:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1348:	2300      	movs	r3, #0
    134a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    134c:	4903      	ldr	r1, [pc, #12]	; (135c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    134e:	9b03      	ldr	r3, [sp, #12]
    1350:	9a01      	ldr	r2, [sp, #4]
    1352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1356:	bf00      	nop
    1358:	b004      	add	sp, #16
    135a:	4770      	bx	lr
    135c:	1fff8b84 	.word	0x1fff8b84

00001360 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	b087      	sub	sp, #28
    1364:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1366:	2100      	movs	r1, #0
    1368:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    136a:	2100      	movs	r1, #0
    136c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    136e:	9901      	ldr	r1, [sp, #4]
    1370:	2000      	movs	r0, #0
    1372:	460e      	mov	r6, r1
    1374:	4607      	mov	r7, r0
    1376:	4812      	ldr	r0, [pc, #72]	; (13c0 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1378:	9904      	ldr	r1, [sp, #16]
    137a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    137e:	2000      	movs	r0, #0
    1380:	460c      	mov	r4, r1
    1382:	4605      	mov	r5, r0
    1384:	fb04 f007 	mul.w	r0, r4, r7
    1388:	fb06 f105 	mul.w	r1, r6, r5
    138c:	4401      	add	r1, r0
    138e:	fba6 2304 	umull	r2, r3, r6, r4
    1392:	4419      	add	r1, r3
    1394:	460b      	mov	r3, r1
    1396:	e9cd 2302 	strd	r2, r3, [sp, #8]
    139a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    139e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    13a2:	4a08      	ldr	r2, [pc, #32]	; (13c4 <OsIf_Timer_System_MicrosToTicks+0x64>)
    13a4:	f04f 0300 	mov.w	r3, #0
    13a8:	f7ff f8fc 	bl	5a4 <__aeabi_uldivmod>
    13ac:	4602      	mov	r2, r0
    13ae:	460b      	mov	r3, r1
    13b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    13b4:	9b02      	ldr	r3, [sp, #8]
    13b6:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    13b8:	9b05      	ldr	r3, [sp, #20]
}
    13ba:	4618      	mov	r0, r3
    13bc:	b007      	add	sp, #28
    13be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13c0:	1fff8b84 	.word	0x1fff8b84
    13c4:	000f4240 	.word	0x000f4240

000013c8 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    13c8:	b082      	sub	sp, #8
    13ca:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    13cc:	4b07      	ldr	r3, [pc, #28]	; (13ec <OsIf_Timer_System_Internal_Init+0x24>)
    13ce:	2200      	movs	r2, #0
    13d0:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    13d2:	4b06      	ldr	r3, [pc, #24]	; (13ec <OsIf_Timer_System_Internal_Init+0x24>)
    13d4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    13d8:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    13da:	4b04      	ldr	r3, [pc, #16]	; (13ec <OsIf_Timer_System_Internal_Init+0x24>)
    13dc:	2200      	movs	r2, #0
    13de:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    13e0:	4b02      	ldr	r3, [pc, #8]	; (13ec <OsIf_Timer_System_Internal_Init+0x24>)
    13e2:	2205      	movs	r2, #5
    13e4:	601a      	str	r2, [r3, #0]
}
    13e6:	bf00      	nop
    13e8:	b002      	add	sp, #8
    13ea:	4770      	bx	lr
    13ec:	e000e010 	.word	0xe000e010

000013f0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    13f0:	4b02      	ldr	r3, [pc, #8]	; (13fc <OsIf_Timer_System_Internal_GetCounter+0xc>)
    13f2:	689b      	ldr	r3, [r3, #8]
    13f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    13f8:	4618      	mov	r0, r3
    13fa:	4770      	bx	lr
    13fc:	e000e010 	.word	0xe000e010

00001400 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1400:	b084      	sub	sp, #16
    1402:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1404:	4b10      	ldr	r3, [pc, #64]	; (1448 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1406:	689b      	ldr	r3, [r3, #8]
    1408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    140c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    140e:	2300      	movs	r3, #0
    1410:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1412:	9b01      	ldr	r3, [sp, #4]
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	9a02      	ldr	r2, [sp, #8]
    1418:	429a      	cmp	r2, r3
    141a:	d909      	bls.n	1430 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    141c:	9b01      	ldr	r3, [sp, #4]
    141e:	681a      	ldr	r2, [r3, #0]
    1420:	9b02      	ldr	r3, [sp, #8]
    1422:	1ad3      	subs	r3, r2, r3
    1424:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1428:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    142c:	9303      	str	r3, [sp, #12]
    142e:	e004      	b.n	143a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1430:	9b01      	ldr	r3, [sp, #4]
    1432:	681a      	ldr	r2, [r3, #0]
    1434:	9b02      	ldr	r3, [sp, #8]
    1436:	1ad3      	subs	r3, r2, r3
    1438:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    143a:	9b01      	ldr	r3, [sp, #4]
    143c:	9a02      	ldr	r2, [sp, #8]
    143e:	601a      	str	r2, [r3, #0]

    return dif;
    1440:	9b03      	ldr	r3, [sp, #12]
}
    1442:	4618      	mov	r0, r3
    1444:	b004      	add	sp, #16
    1446:	4770      	bx	lr
    1448:	e000e010 	.word	0xe000e010

0000144c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    144c:	b082      	sub	sp, #8
    144e:	9001      	str	r0, [sp, #4]
    1450:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1452:	bf00      	nop
    1454:	b002      	add	sp, #8
    1456:	4770      	bx	lr

00001458 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1458:	b500      	push	{lr}
    145a:	b085      	sub	sp, #20
    145c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    145e:	4b24      	ldr	r3, [pc, #144]	; (14f0 <Clock_Ip_UpdateDriverContext+0x98>)
    1460:	2201      	movs	r2, #1
    1462:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1464:	4b23      	ldr	r3, [pc, #140]	; (14f4 <Clock_Ip_UpdateDriverContext+0x9c>)
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	2102      	movs	r1, #2
    146a:	4618      	mov	r0, r3
    146c:	f003 fc32 	bl	4cd4 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1470:	2300      	movs	r3, #0
    1472:	f88d 300f 	strb.w	r3, [sp, #15]
    1476:	e015      	b.n	14a4 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1478:	f89d 300f 	ldrb.w	r3, [sp, #15]
    147c:	9a01      	ldr	r2, [sp, #4]
    147e:	334a      	adds	r3, #74	; 0x4a
    1480:	00db      	lsls	r3, r3, #3
    1482:	4413      	add	r3, r2
    1484:	6858      	ldr	r0, [r3, #4]
    1486:	f89d 300f 	ldrb.w	r3, [sp, #15]
    148a:	9a01      	ldr	r2, [sp, #4]
    148c:	334a      	adds	r3, #74	; 0x4a
    148e:	00db      	lsls	r3, r3, #3
    1490:	4413      	add	r3, r2
    1492:	689b      	ldr	r3, [r3, #8]
    1494:	4619      	mov	r1, r3
    1496:	f001 fadc 	bl	2a52 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    149a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    149e:	3301      	adds	r3, #1
    14a0:	f88d 300f 	strb.w	r3, [sp, #15]
    14a4:	9b01      	ldr	r3, [sp, #4]
    14a6:	7bdb      	ldrb	r3, [r3, #15]
    14a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14ac:	429a      	cmp	r2, r3
    14ae:	d3e3      	bcc.n	1478 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    14b0:	f000 f824 	bl	14fc <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    14b4:	2301      	movs	r3, #1
    14b6:	f88d 300f 	strb.w	r3, [sp, #15]
    14ba:	e00e      	b.n	14da <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    14bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14c0:	9b01      	ldr	r3, [sp, #4]
    14c2:	327e      	adds	r2, #126	; 0x7e
    14c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    14c8:	490b      	ldr	r1, [pc, #44]	; (14f8 <Clock_Ip_UpdateDriverContext+0xa0>)
    14ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14ce:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    14d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14d4:	3301      	adds	r3, #1
    14d6:	f88d 300f 	strb.w	r3, [sp, #15]
    14da:	9b01      	ldr	r3, [sp, #4]
    14dc:	7cdb      	ldrb	r3, [r3, #19]
    14de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14e2:	429a      	cmp	r2, r3
    14e4:	d3ea      	bcc.n	14bc <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    14e6:	bf00      	nop
    14e8:	bf00      	nop
    14ea:	b005      	add	sp, #20
    14ec:	f85d fb04 	ldr.w	pc, [sp], #4
    14f0:	1fff8b10 	.word	0x1fff8b10
    14f4:	1fff8b88 	.word	0x1fff8b88
    14f8:	1fff8b94 	.word	0x1fff8b94

000014fc <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    14fc:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    14fe:	4b23      	ldr	r3, [pc, #140]	; (158c <Clock_Ip_CallEmptyCallbacks+0x90>)
    1500:	781b      	ldrb	r3, [r3, #0]
    1502:	f083 0301 	eor.w	r3, r3, #1
    1506:	b2db      	uxtb	r3, r3
    1508:	2b00      	cmp	r3, #0
    150a:	d03d      	beq.n	1588 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    150c:	4b1f      	ldr	r3, [pc, #124]	; (158c <Clock_Ip_CallEmptyCallbacks+0x90>)
    150e:	2201      	movs	r2, #1
    1510:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1512:	4b1f      	ldr	r3, [pc, #124]	; (1590 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1514:	685b      	ldr	r3, [r3, #4]
    1516:	2100      	movs	r1, #0
    1518:	2000      	movs	r0, #0
    151a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    151c:	4b1c      	ldr	r3, [pc, #112]	; (1590 <Clock_Ip_CallEmptyCallbacks+0x94>)
    151e:	689b      	ldr	r3, [r3, #8]
    1520:	2057      	movs	r0, #87	; 0x57
    1522:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1524:	4b1b      	ldr	r3, [pc, #108]	; (1594 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1526:	681b      	ldr	r3, [r3, #0]
    1528:	2000      	movs	r0, #0
    152a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    152c:	4b1a      	ldr	r3, [pc, #104]	; (1598 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	2000      	movs	r0, #0
    1532:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1534:	4b19      	ldr	r3, [pc, #100]	; (159c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	2000      	movs	r0, #0
    153a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    153c:	4b18      	ldr	r3, [pc, #96]	; (15a0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    153e:	685b      	ldr	r3, [r3, #4]
    1540:	2000      	movs	r0, #0
    1542:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1544:	4b16      	ldr	r3, [pc, #88]	; (15a0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1546:	689b      	ldr	r3, [r3, #8]
    1548:	2057      	movs	r0, #87	; 0x57
    154a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    154c:	4b15      	ldr	r3, [pc, #84]	; (15a4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	2000      	movs	r0, #0
    1552:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1554:	4b13      	ldr	r3, [pc, #76]	; (15a4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1556:	685b      	ldr	r3, [r3, #4]
    1558:	2100      	movs	r1, #0
    155a:	2057      	movs	r0, #87	; 0x57
    155c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    155e:	4b12      	ldr	r3, [pc, #72]	; (15a8 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1560:	681b      	ldr	r3, [r3, #0]
    1562:	2000      	movs	r0, #0
    1564:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1566:	4b11      	ldr	r3, [pc, #68]	; (15ac <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1568:	685b      	ldr	r3, [r3, #4]
    156a:	2000      	movs	r0, #0
    156c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    156e:	4b0f      	ldr	r3, [pc, #60]	; (15ac <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1570:	689b      	ldr	r3, [r3, #8]
    1572:	2057      	movs	r0, #87	; 0x57
    1574:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1576:	4b0e      	ldr	r3, [pc, #56]	; (15b0 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1578:	685b      	ldr	r3, [r3, #4]
    157a:	2000      	movs	r0, #0
    157c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    157e:	4b0d      	ldr	r3, [pc, #52]	; (15b4 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1580:	681b      	ldr	r3, [r3, #0]
    1582:	2100      	movs	r1, #0
    1584:	2000      	movs	r0, #0
    1586:	4798      	blx	r3
    }
}
    1588:	bf00      	nop
    158a:	bd08      	pop	{r3, pc}
    158c:	1fff8b8c 	.word	0x1fff8b8c
    1590:	0000b624 	.word	0x0000b624
    1594:	0000b538 	.word	0x0000b538
    1598:	0000b574 	.word	0x0000b574
    159c:	0000b57c 	.word	0x0000b57c
    15a0:	0000b5a4 	.word	0x0000b5a4
    15a4:	0000b5b0 	.word	0x0000b5b0
    15a8:	0000b5e8 	.word	0x0000b5e8
    15ac:	0000b634 	.word	0x0000b634
    15b0:	0000b660 	.word	0x0000b660
    15b4:	0000b65c 	.word	0x0000b65c

000015b8 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    15b8:	b500      	push	{lr}
    15ba:	b085      	sub	sp, #20
    15bc:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    15be:	9b01      	ldr	r3, [sp, #4]
    15c0:	7adb      	ldrb	r3, [r3, #11]
    15c2:	9303      	str	r3, [sp, #12]
    15c4:	e01f      	b.n	1606 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15c6:	9b03      	ldr	r3, [sp, #12]
    15c8:	1e5a      	subs	r2, r3, #1
    15ca:	9b01      	ldr	r3, [sp, #4]
    15cc:	320d      	adds	r2, #13
    15ce:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    15d2:	495a      	ldr	r1, [pc, #360]	; (173c <Clock_Ip_ResetClockConfiguration+0x184>)
    15d4:	4613      	mov	r3, r2
    15d6:	00db      	lsls	r3, r3, #3
    15d8:	4413      	add	r3, r2
    15da:	440b      	add	r3, r1
    15dc:	3301      	adds	r3, #1
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	461a      	mov	r2, r3
    15e2:	4b57      	ldr	r3, [pc, #348]	; (1740 <Clock_Ip_ResetClockConfiguration+0x188>)
    15e4:	5c9b      	ldrb	r3, [r3, r2]
    15e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    15e8:	4a56      	ldr	r2, [pc, #344]	; (1744 <Clock_Ip_ResetClockConfiguration+0x18c>)
    15ea:	9b02      	ldr	r3, [sp, #8]
    15ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    15f0:	9a03      	ldr	r2, [sp, #12]
    15f2:	3a01      	subs	r2, #1
    15f4:	320d      	adds	r2, #13
    15f6:	00d2      	lsls	r2, r2, #3
    15f8:	9901      	ldr	r1, [sp, #4]
    15fa:	440a      	add	r2, r1
    15fc:	4610      	mov	r0, r2
    15fe:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1600:	9b03      	ldr	r3, [sp, #12]
    1602:	3b01      	subs	r3, #1
    1604:	9303      	str	r3, [sp, #12]
    1606:	9b03      	ldr	r3, [sp, #12]
    1608:	2b00      	cmp	r3, #0
    160a:	d1dc      	bne.n	15c6 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    160c:	9b01      	ldr	r3, [sp, #4]
    160e:	7b9b      	ldrb	r3, [r3, #14]
    1610:	9303      	str	r3, [sp, #12]
    1612:	e026      	b.n	1662 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1614:	9b03      	ldr	r3, [sp, #12]
    1616:	3b01      	subs	r3, #1
    1618:	9a01      	ldr	r2, [sp, #4]
    161a:	3324      	adds	r3, #36	; 0x24
    161c:	011b      	lsls	r3, r3, #4
    161e:	4413      	add	r3, r2
    1620:	3304      	adds	r3, #4
    1622:	681a      	ldr	r2, [r3, #0]
    1624:	4945      	ldr	r1, [pc, #276]	; (173c <Clock_Ip_ResetClockConfiguration+0x184>)
    1626:	4613      	mov	r3, r2
    1628:	00db      	lsls	r3, r3, #3
    162a:	4413      	add	r3, r2
    162c:	440b      	add	r3, r1
    162e:	3301      	adds	r3, #1
    1630:	781b      	ldrb	r3, [r3, #0]
    1632:	461a      	mov	r2, r3
    1634:	4b44      	ldr	r3, [pc, #272]	; (1748 <Clock_Ip_ResetClockConfiguration+0x190>)
    1636:	5c9b      	ldrb	r3, [r3, r2]
    1638:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    163a:	4944      	ldr	r1, [pc, #272]	; (174c <Clock_Ip_ResetClockConfiguration+0x194>)
    163c:	9a02      	ldr	r2, [sp, #8]
    163e:	4613      	mov	r3, r2
    1640:	005b      	lsls	r3, r3, #1
    1642:	4413      	add	r3, r2
    1644:	009b      	lsls	r3, r3, #2
    1646:	440b      	add	r3, r1
    1648:	681b      	ldr	r3, [r3, #0]
    164a:	9a03      	ldr	r2, [sp, #12]
    164c:	3a01      	subs	r2, #1
    164e:	3224      	adds	r2, #36	; 0x24
    1650:	0112      	lsls	r2, r2, #4
    1652:	9901      	ldr	r1, [sp, #4]
    1654:	440a      	add	r2, r1
    1656:	3204      	adds	r2, #4
    1658:	4610      	mov	r0, r2
    165a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    165c:	9b03      	ldr	r3, [sp, #12]
    165e:	3b01      	subs	r3, #1
    1660:	9303      	str	r3, [sp, #12]
    1662:	9b03      	ldr	r3, [sp, #12]
    1664:	2b00      	cmp	r3, #0
    1666:	d1d5      	bne.n	1614 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1668:	9b01      	ldr	r3, [sp, #4]
    166a:	7a9b      	ldrb	r3, [r3, #10]
    166c:	9303      	str	r3, [sp, #12]
    166e:	e02a      	b.n	16c6 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1670:	9b03      	ldr	r3, [sp, #12]
    1672:	1e5a      	subs	r2, r3, #1
    1674:	9901      	ldr	r1, [sp, #4]
    1676:	4613      	mov	r3, r2
    1678:	009b      	lsls	r3, r3, #2
    167a:	4413      	add	r3, r2
    167c:	00db      	lsls	r3, r3, #3
    167e:	440b      	add	r3, r1
    1680:	3340      	adds	r3, #64	; 0x40
    1682:	681a      	ldr	r2, [r3, #0]
    1684:	492d      	ldr	r1, [pc, #180]	; (173c <Clock_Ip_ResetClockConfiguration+0x184>)
    1686:	4613      	mov	r3, r2
    1688:	00db      	lsls	r3, r3, #3
    168a:	4413      	add	r3, r2
    168c:	440b      	add	r3, r1
    168e:	3301      	adds	r3, #1
    1690:	781b      	ldrb	r3, [r3, #0]
    1692:	461a      	mov	r2, r3
    1694:	4b2e      	ldr	r3, [pc, #184]	; (1750 <Clock_Ip_ResetClockConfiguration+0x198>)
    1696:	5c9b      	ldrb	r3, [r3, r2]
    1698:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    169a:	492e      	ldr	r1, [pc, #184]	; (1754 <Clock_Ip_ResetClockConfiguration+0x19c>)
    169c:	9a02      	ldr	r2, [sp, #8]
    169e:	4613      	mov	r3, r2
    16a0:	009b      	lsls	r3, r3, #2
    16a2:	4413      	add	r3, r2
    16a4:	009b      	lsls	r3, r3, #2
    16a6:	440b      	add	r3, r1
    16a8:	6819      	ldr	r1, [r3, #0]
    16aa:	9b03      	ldr	r3, [sp, #12]
    16ac:	1e5a      	subs	r2, r3, #1
    16ae:	4613      	mov	r3, r2
    16b0:	009b      	lsls	r3, r3, #2
    16b2:	4413      	add	r3, r2
    16b4:	00db      	lsls	r3, r3, #3
    16b6:	3340      	adds	r3, #64	; 0x40
    16b8:	9a01      	ldr	r2, [sp, #4]
    16ba:	4413      	add	r3, r2
    16bc:	4618      	mov	r0, r3
    16be:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    16c0:	9b03      	ldr	r3, [sp, #12]
    16c2:	3b01      	subs	r3, #1
    16c4:	9303      	str	r3, [sp, #12]
    16c6:	9b03      	ldr	r3, [sp, #12]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d1d1      	bne.n	1670 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    16cc:	9b01      	ldr	r3, [sp, #4]
    16ce:	7a5b      	ldrb	r3, [r3, #9]
    16d0:	9303      	str	r3, [sp, #12]
    16d2:	e02b      	b.n	172c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    16d4:	9b03      	ldr	r3, [sp, #12]
    16d6:	1e5a      	subs	r2, r3, #1
    16d8:	9901      	ldr	r1, [sp, #4]
    16da:	4613      	mov	r3, r2
    16dc:	009b      	lsls	r3, r3, #2
    16de:	4413      	add	r3, r2
    16e0:	009b      	lsls	r3, r3, #2
    16e2:	440b      	add	r3, r1
    16e4:	332c      	adds	r3, #44	; 0x2c
    16e6:	681a      	ldr	r2, [r3, #0]
    16e8:	4914      	ldr	r1, [pc, #80]	; (173c <Clock_Ip_ResetClockConfiguration+0x184>)
    16ea:	4613      	mov	r3, r2
    16ec:	00db      	lsls	r3, r3, #3
    16ee:	4413      	add	r3, r2
    16f0:	440b      	add	r3, r1
    16f2:	3301      	adds	r3, #1
    16f4:	781b      	ldrb	r3, [r3, #0]
    16f6:	461a      	mov	r2, r3
    16f8:	4b17      	ldr	r3, [pc, #92]	; (1758 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    16fa:	5c9b      	ldrb	r3, [r3, r2]
    16fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    16fe:	4917      	ldr	r1, [pc, #92]	; (175c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1700:	9a02      	ldr	r2, [sp, #8]
    1702:	4613      	mov	r3, r2
    1704:	009b      	lsls	r3, r3, #2
    1706:	4413      	add	r3, r2
    1708:	009b      	lsls	r3, r3, #2
    170a:	440b      	add	r3, r1
    170c:	6819      	ldr	r1, [r3, #0]
    170e:	9b03      	ldr	r3, [sp, #12]
    1710:	1e5a      	subs	r2, r3, #1
    1712:	4613      	mov	r3, r2
    1714:	009b      	lsls	r3, r3, #2
    1716:	4413      	add	r3, r2
    1718:	009b      	lsls	r3, r3, #2
    171a:	3328      	adds	r3, #40	; 0x28
    171c:	9a01      	ldr	r2, [sp, #4]
    171e:	4413      	add	r3, r2
    1720:	3304      	adds	r3, #4
    1722:	4618      	mov	r0, r3
    1724:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1726:	9b03      	ldr	r3, [sp, #12]
    1728:	3b01      	subs	r3, #1
    172a:	9303      	str	r3, [sp, #12]
    172c:	9b03      	ldr	r3, [sp, #12]
    172e:	2b00      	cmp	r3, #0
    1730:	d1d0      	bne.n	16d4 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1732:	bf00      	nop
    1734:	bf00      	nop
    1736:	b005      	add	sp, #20
    1738:	f85d fb04 	ldr.w	pc, [sp], #4
    173c:	0000b028 	.word	0x0000b028
    1740:	0000aff8 	.word	0x0000aff8
    1744:	0000b660 	.word	0x0000b660
    1748:	0000afd8 	.word	0x0000afd8
    174c:	0000b5a4 	.word	0x0000b5a4
    1750:	0000afe8 	.word	0x0000afe8
    1754:	0000b634 	.word	0x0000b634
    1758:	0000afa8 	.word	0x0000afa8
    175c:	0000b57c 	.word	0x0000b57c

00001760 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1760:	b500      	push	{lr}
    1762:	b085      	sub	sp, #20
    1764:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1766:	2301      	movs	r3, #1
    1768:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    176a:	9801      	ldr	r0, [sp, #4]
    176c:	f000 f818 	bl	17a0 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1770:	4b0a      	ldr	r3, [pc, #40]	; (179c <Clock_Ip_Init+0x3c>)
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	2b00      	cmp	r3, #0
    1776:	d00a      	beq.n	178e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1778:	f000 fb74 	bl	1e64 <Clock_Ip_GetPllStatus>
    177c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    177e:	9b02      	ldr	r3, [sp, #8]
    1780:	2b00      	cmp	r3, #0
    1782:	d106      	bne.n	1792 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1784:	f000 fbf2 	bl	1f6c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1788:	2300      	movs	r3, #0
    178a:	9303      	str	r3, [sp, #12]
    178c:	e001      	b.n	1792 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    178e:	2300      	movs	r3, #0
    1790:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1792:	9b03      	ldr	r3, [sp, #12]
}
    1794:	4618      	mov	r0, r3
    1796:	b005      	add	sp, #20
    1798:	f85d fb04 	ldr.w	pc, [sp], #4
    179c:	1fff8b90 	.word	0x1fff8b90

000017a0 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    17a0:	b510      	push	{r4, lr}
    17a2:	b084      	sub	sp, #16
    17a4:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    17a6:	4a9f      	ldr	r2, [pc, #636]	; (1a24 <Clock_Ip_InitClock+0x284>)
    17a8:	9b01      	ldr	r3, [sp, #4]
    17aa:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    17ac:	2101      	movs	r1, #1
    17ae:	9801      	ldr	r0, [sp, #4]
    17b0:	f003 fa90 	bl	4cd4 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    17b4:	4b9b      	ldr	r3, [pc, #620]	; (1a24 <Clock_Ip_InitClock+0x284>)
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d030      	beq.n	181e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    17bc:	2300      	movs	r3, #0
    17be:	9303      	str	r3, [sp, #12]
    17c0:	e027      	b.n	1812 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    17c2:	9901      	ldr	r1, [sp, #4]
    17c4:	9a03      	ldr	r2, [sp, #12]
    17c6:	4613      	mov	r3, r2
    17c8:	009b      	lsls	r3, r3, #2
    17ca:	4413      	add	r3, r2
    17cc:	009b      	lsls	r3, r3, #2
    17ce:	440b      	add	r3, r1
    17d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    17d4:	681a      	ldr	r2, [r3, #0]
    17d6:	4994      	ldr	r1, [pc, #592]	; (1a28 <Clock_Ip_InitClock+0x288>)
    17d8:	4613      	mov	r3, r2
    17da:	00db      	lsls	r3, r3, #3
    17dc:	4413      	add	r3, r2
    17de:	440b      	add	r3, r1
    17e0:	3301      	adds	r3, #1
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	461a      	mov	r2, r3
    17e6:	4b91      	ldr	r3, [pc, #580]	; (1a2c <Clock_Ip_InitClock+0x28c>)
    17e8:	5c9b      	ldrb	r3, [r3, r2]
    17ea:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    17ec:	4a90      	ldr	r2, [pc, #576]	; (1a30 <Clock_Ip_InitClock+0x290>)
    17ee:	9b02      	ldr	r3, [sp, #8]
    17f0:	011b      	lsls	r3, r3, #4
    17f2:	4413      	add	r3, r2
    17f4:	6819      	ldr	r1, [r3, #0]
    17f6:	9a03      	ldr	r2, [sp, #12]
    17f8:	4613      	mov	r3, r2
    17fa:	009b      	lsls	r3, r3, #2
    17fc:	4413      	add	r3, r2
    17fe:	009b      	lsls	r3, r3, #2
    1800:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1804:	9a01      	ldr	r2, [sp, #4]
    1806:	4413      	add	r3, r2
    1808:	4618      	mov	r0, r3
    180a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    180c:	9b03      	ldr	r3, [sp, #12]
    180e:	3301      	adds	r3, #1
    1810:	9303      	str	r3, [sp, #12]
    1812:	9b01      	ldr	r3, [sp, #4]
    1814:	7c9b      	ldrb	r3, [r3, #18]
    1816:	461a      	mov	r2, r3
    1818:	9b03      	ldr	r3, [sp, #12]
    181a:	4293      	cmp	r3, r2
    181c:	d3d1      	bcc.n	17c2 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    181e:	9801      	ldr	r0, [sp, #4]
    1820:	f7ff feca 	bl	15b8 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1824:	2300      	movs	r3, #0
    1826:	9303      	str	r3, [sp, #12]
    1828:	e029      	b.n	187e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    182a:	9901      	ldr	r1, [sp, #4]
    182c:	9a03      	ldr	r2, [sp, #12]
    182e:	4613      	mov	r3, r2
    1830:	005b      	lsls	r3, r3, #1
    1832:	4413      	add	r3, r2
    1834:	009b      	lsls	r3, r3, #2
    1836:	440b      	add	r3, r1
    1838:	3314      	adds	r3, #20
    183a:	681a      	ldr	r2, [r3, #0]
    183c:	497a      	ldr	r1, [pc, #488]	; (1a28 <Clock_Ip_InitClock+0x288>)
    183e:	4613      	mov	r3, r2
    1840:	00db      	lsls	r3, r3, #3
    1842:	4413      	add	r3, r2
    1844:	440b      	add	r3, r1
    1846:	3301      	adds	r3, #1
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	461a      	mov	r2, r3
    184c:	4b79      	ldr	r3, [pc, #484]	; (1a34 <Clock_Ip_InitClock+0x294>)
    184e:	5c9b      	ldrb	r3, [r3, r2]
    1850:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1852:	4979      	ldr	r1, [pc, #484]	; (1a38 <Clock_Ip_InitClock+0x298>)
    1854:	9a02      	ldr	r2, [sp, #8]
    1856:	4613      	mov	r3, r2
    1858:	005b      	lsls	r3, r3, #1
    185a:	4413      	add	r3, r2
    185c:	009b      	lsls	r3, r3, #2
    185e:	440b      	add	r3, r1
    1860:	6819      	ldr	r1, [r3, #0]
    1862:	9a03      	ldr	r2, [sp, #12]
    1864:	4613      	mov	r3, r2
    1866:	005b      	lsls	r3, r3, #1
    1868:	4413      	add	r3, r2
    186a:	009b      	lsls	r3, r3, #2
    186c:	3310      	adds	r3, #16
    186e:	9a01      	ldr	r2, [sp, #4]
    1870:	4413      	add	r3, r2
    1872:	3304      	adds	r3, #4
    1874:	4618      	mov	r0, r3
    1876:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1878:	9b03      	ldr	r3, [sp, #12]
    187a:	3301      	adds	r3, #1
    187c:	9303      	str	r3, [sp, #12]
    187e:	9b01      	ldr	r3, [sp, #4]
    1880:	7a1b      	ldrb	r3, [r3, #8]
    1882:	461a      	mov	r2, r3
    1884:	9b03      	ldr	r3, [sp, #12]
    1886:	4293      	cmp	r3, r2
    1888:	d3cf      	bcc.n	182a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    188a:	2300      	movs	r3, #0
    188c:	9303      	str	r3, [sp, #12]
    188e:	e02a      	b.n	18e6 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1890:	9901      	ldr	r1, [sp, #4]
    1892:	9a03      	ldr	r2, [sp, #12]
    1894:	4613      	mov	r3, r2
    1896:	009b      	lsls	r3, r3, #2
    1898:	4413      	add	r3, r2
    189a:	009b      	lsls	r3, r3, #2
    189c:	440b      	add	r3, r1
    189e:	332c      	adds	r3, #44	; 0x2c
    18a0:	681a      	ldr	r2, [r3, #0]
    18a2:	4961      	ldr	r1, [pc, #388]	; (1a28 <Clock_Ip_InitClock+0x288>)
    18a4:	4613      	mov	r3, r2
    18a6:	00db      	lsls	r3, r3, #3
    18a8:	4413      	add	r3, r2
    18aa:	440b      	add	r3, r1
    18ac:	3301      	adds	r3, #1
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	461a      	mov	r2, r3
    18b2:	4b62      	ldr	r3, [pc, #392]	; (1a3c <Clock_Ip_InitClock+0x29c>)
    18b4:	5c9b      	ldrb	r3, [r3, r2]
    18b6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    18b8:	4961      	ldr	r1, [pc, #388]	; (1a40 <Clock_Ip_InitClock+0x2a0>)
    18ba:	9a02      	ldr	r2, [sp, #8]
    18bc:	4613      	mov	r3, r2
    18be:	009b      	lsls	r3, r3, #2
    18c0:	4413      	add	r3, r2
    18c2:	009b      	lsls	r3, r3, #2
    18c4:	440b      	add	r3, r1
    18c6:	3304      	adds	r3, #4
    18c8:	6819      	ldr	r1, [r3, #0]
    18ca:	9a03      	ldr	r2, [sp, #12]
    18cc:	4613      	mov	r3, r2
    18ce:	009b      	lsls	r3, r3, #2
    18d0:	4413      	add	r3, r2
    18d2:	009b      	lsls	r3, r3, #2
    18d4:	3328      	adds	r3, #40	; 0x28
    18d6:	9a01      	ldr	r2, [sp, #4]
    18d8:	4413      	add	r3, r2
    18da:	3304      	adds	r3, #4
    18dc:	4618      	mov	r0, r3
    18de:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    18e0:	9b03      	ldr	r3, [sp, #12]
    18e2:	3301      	adds	r3, #1
    18e4:	9303      	str	r3, [sp, #12]
    18e6:	9b01      	ldr	r3, [sp, #4]
    18e8:	7a5b      	ldrb	r3, [r3, #9]
    18ea:	461a      	mov	r2, r3
    18ec:	9b03      	ldr	r3, [sp, #12]
    18ee:	4293      	cmp	r3, r2
    18f0:	d3ce      	bcc.n	1890 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    18f2:	9801      	ldr	r0, [sp, #4]
    18f4:	f7ff fdb0 	bl	1458 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    18f8:	2300      	movs	r3, #0
    18fa:	9303      	str	r3, [sp, #12]
    18fc:	e028      	b.n	1950 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    18fe:	9901      	ldr	r1, [sp, #4]
    1900:	9a03      	ldr	r2, [sp, #12]
    1902:	4613      	mov	r3, r2
    1904:	009b      	lsls	r3, r3, #2
    1906:	4413      	add	r3, r2
    1908:	009b      	lsls	r3, r3, #2
    190a:	440b      	add	r3, r1
    190c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1910:	681a      	ldr	r2, [r3, #0]
    1912:	4945      	ldr	r1, [pc, #276]	; (1a28 <Clock_Ip_InitClock+0x288>)
    1914:	4613      	mov	r3, r2
    1916:	00db      	lsls	r3, r3, #3
    1918:	4413      	add	r3, r2
    191a:	440b      	add	r3, r1
    191c:	3301      	adds	r3, #1
    191e:	781b      	ldrb	r3, [r3, #0]
    1920:	461a      	mov	r2, r3
    1922:	4b48      	ldr	r3, [pc, #288]	; (1a44 <Clock_Ip_InitClock+0x2a4>)
    1924:	5c9b      	ldrb	r3, [r3, r2]
    1926:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1928:	4a47      	ldr	r2, [pc, #284]	; (1a48 <Clock_Ip_InitClock+0x2a8>)
    192a:	9b02      	ldr	r3, [sp, #8]
    192c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1930:	9a03      	ldr	r2, [sp, #12]
    1932:	4613      	mov	r3, r2
    1934:	009b      	lsls	r3, r3, #2
    1936:	4413      	add	r3, r2
    1938:	009b      	lsls	r3, r3, #2
    193a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    193e:	9a01      	ldr	r2, [sp, #4]
    1940:	4413      	add	r3, r2
    1942:	3304      	adds	r3, #4
    1944:	9903      	ldr	r1, [sp, #12]
    1946:	4618      	mov	r0, r3
    1948:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    194a:	9b03      	ldr	r3, [sp, #12]
    194c:	3301      	adds	r3, #1
    194e:	9303      	str	r3, [sp, #12]
    1950:	9b01      	ldr	r3, [sp, #4]
    1952:	7c5b      	ldrb	r3, [r3, #17]
    1954:	461a      	mov	r2, r3
    1956:	9b03      	ldr	r3, [sp, #12]
    1958:	4293      	cmp	r3, r2
    195a:	d3d0      	bcc.n	18fe <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    195c:	2300      	movs	r3, #0
    195e:	9303      	str	r3, [sp, #12]
    1960:	e026      	b.n	19b0 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1962:	9901      	ldr	r1, [sp, #4]
    1964:	9a03      	ldr	r2, [sp, #12]
    1966:	4613      	mov	r3, r2
    1968:	005b      	lsls	r3, r3, #1
    196a:	4413      	add	r3, r2
    196c:	009b      	lsls	r3, r3, #2
    196e:	440b      	add	r3, r1
    1970:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1974:	681a      	ldr	r2, [r3, #0]
    1976:	492c      	ldr	r1, [pc, #176]	; (1a28 <Clock_Ip_InitClock+0x288>)
    1978:	4613      	mov	r3, r2
    197a:	00db      	lsls	r3, r3, #3
    197c:	4413      	add	r3, r2
    197e:	440b      	add	r3, r1
    1980:	3301      	adds	r3, #1
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	461a      	mov	r2, r3
    1986:	4b31      	ldr	r3, [pc, #196]	; (1a4c <Clock_Ip_InitClock+0x2ac>)
    1988:	5c9b      	ldrb	r3, [r3, r2]
    198a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    198c:	4a30      	ldr	r2, [pc, #192]	; (1a50 <Clock_Ip_InitClock+0x2b0>)
    198e:	9b02      	ldr	r3, [sp, #8]
    1990:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1994:	9a03      	ldr	r2, [sp, #12]
    1996:	4613      	mov	r3, r2
    1998:	005b      	lsls	r3, r3, #1
    199a:	4413      	add	r3, r2
    199c:	009b      	lsls	r3, r3, #2
    199e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19a2:	9a01      	ldr	r2, [sp, #4]
    19a4:	4413      	add	r3, r2
    19a6:	4618      	mov	r0, r3
    19a8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    19aa:	9b03      	ldr	r3, [sp, #12]
    19ac:	3301      	adds	r3, #1
    19ae:	9303      	str	r3, [sp, #12]
    19b0:	9b01      	ldr	r3, [sp, #4]
    19b2:	7b5b      	ldrb	r3, [r3, #13]
    19b4:	461a      	mov	r2, r3
    19b6:	9b03      	ldr	r3, [sp, #12]
    19b8:	4293      	cmp	r3, r2
    19ba:	d3d2      	bcc.n	1962 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    19bc:	2300      	movs	r3, #0
    19be:	9303      	str	r3, [sp, #12]
    19c0:	e026      	b.n	1a10 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    19c2:	9901      	ldr	r1, [sp, #4]
    19c4:	9a03      	ldr	r2, [sp, #12]
    19c6:	4613      	mov	r3, r2
    19c8:	005b      	lsls	r3, r3, #1
    19ca:	4413      	add	r3, r2
    19cc:	009b      	lsls	r3, r3, #2
    19ce:	440b      	add	r3, r1
    19d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    19d4:	681a      	ldr	r2, [r3, #0]
    19d6:	4914      	ldr	r1, [pc, #80]	; (1a28 <Clock_Ip_InitClock+0x288>)
    19d8:	4613      	mov	r3, r2
    19da:	00db      	lsls	r3, r3, #3
    19dc:	4413      	add	r3, r2
    19de:	440b      	add	r3, r1
    19e0:	3301      	adds	r3, #1
    19e2:	781b      	ldrb	r3, [r3, #0]
    19e4:	461a      	mov	r2, r3
    19e6:	4b1b      	ldr	r3, [pc, #108]	; (1a54 <Clock_Ip_InitClock+0x2b4>)
    19e8:	5c9b      	ldrb	r3, [r3, r2]
    19ea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    19ec:	4a1a      	ldr	r2, [pc, #104]	; (1a58 <Clock_Ip_InitClock+0x2b8>)
    19ee:	9b02      	ldr	r3, [sp, #8]
    19f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    19f4:	9a03      	ldr	r2, [sp, #12]
    19f6:	4613      	mov	r3, r2
    19f8:	005b      	lsls	r3, r3, #1
    19fa:	4413      	add	r3, r2
    19fc:	009b      	lsls	r3, r3, #2
    19fe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1a02:	9a01      	ldr	r2, [sp, #4]
    1a04:	4413      	add	r3, r2
    1a06:	4618      	mov	r0, r3
    1a08:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1a0a:	9b03      	ldr	r3, [sp, #12]
    1a0c:	3301      	adds	r3, #1
    1a0e:	9303      	str	r3, [sp, #12]
    1a10:	9b01      	ldr	r3, [sp, #4]
    1a12:	7b1b      	ldrb	r3, [r3, #12]
    1a14:	461a      	mov	r2, r3
    1a16:	9b03      	ldr	r3, [sp, #12]
    1a18:	4293      	cmp	r3, r2
    1a1a:	d3d2      	bcc.n	19c2 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1a1c:	2300      	movs	r3, #0
    1a1e:	9303      	str	r3, [sp, #12]
    1a20:	e044      	b.n	1aac <Clock_Ip_InitClock+0x30c>
    1a22:	bf00      	nop
    1a24:	1fff8b88 	.word	0x1fff8b88
    1a28:	0000b028 	.word	0x0000b028
    1a2c:	0000b018 	.word	0x0000b018
    1a30:	0000b624 	.word	0x0000b624
    1a34:	0000afb8 	.word	0x0000afb8
    1a38:	0000b5e8 	.word	0x0000b5e8
    1a3c:	0000afa8 	.word	0x0000afa8
    1a40:	0000b57c 	.word	0x0000b57c
    1a44:	0000b008 	.word	0x0000b008
    1a48:	0000b65c 	.word	0x0000b65c
    1a4c:	0000af98 	.word	0x0000af98
    1a50:	0000b574 	.word	0x0000b574
    1a54:	0000af88 	.word	0x0000af88
    1a58:	0000b538 	.word	0x0000b538
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1a5c:	9901      	ldr	r1, [sp, #4]
    1a5e:	9a03      	ldr	r2, [sp, #12]
    1a60:	4613      	mov	r3, r2
    1a62:	005b      	lsls	r3, r3, #1
    1a64:	4413      	add	r3, r2
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	440b      	add	r3, r1
    1a6a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1a6e:	681a      	ldr	r2, [r3, #0]
    1a70:	49ac      	ldr	r1, [pc, #688]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1a72:	4613      	mov	r3, r2
    1a74:	00db      	lsls	r3, r3, #3
    1a76:	4413      	add	r3, r2
    1a78:	440b      	add	r3, r1
    1a7a:	3301      	adds	r3, #1
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	461a      	mov	r2, r3
    1a80:	4ba9      	ldr	r3, [pc, #676]	; (1d28 <Clock_Ip_InitClock+0x588>)
    1a82:	5c9b      	ldrb	r3, [r3, r2]
    1a84:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1a86:	4aa9      	ldr	r2, [pc, #676]	; (1d2c <Clock_Ip_InitClock+0x58c>)
    1a88:	9b02      	ldr	r3, [sp, #8]
    1a8a:	00db      	lsls	r3, r3, #3
    1a8c:	4413      	add	r3, r2
    1a8e:	6859      	ldr	r1, [r3, #4]
    1a90:	9a03      	ldr	r2, [sp, #12]
    1a92:	4613      	mov	r3, r2
    1a94:	005b      	lsls	r3, r3, #1
    1a96:	4413      	add	r3, r2
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1a9e:	9a01      	ldr	r2, [sp, #4]
    1aa0:	4413      	add	r3, r2
    1aa2:	4618      	mov	r0, r3
    1aa4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1aa6:	9b03      	ldr	r3, [sp, #12]
    1aa8:	3301      	adds	r3, #1
    1aaa:	9303      	str	r3, [sp, #12]
    1aac:	9b01      	ldr	r3, [sp, #4]
    1aae:	7b5b      	ldrb	r3, [r3, #13]
    1ab0:	461a      	mov	r2, r3
    1ab2:	9b03      	ldr	r3, [sp, #12]
    1ab4:	4293      	cmp	r3, r2
    1ab6:	d3d1      	bcc.n	1a5c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1ab8:	2300      	movs	r3, #0
    1aba:	9303      	str	r3, [sp, #12]
    1abc:	e029      	b.n	1b12 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1abe:	9901      	ldr	r1, [sp, #4]
    1ac0:	9a03      	ldr	r2, [sp, #12]
    1ac2:	4613      	mov	r3, r2
    1ac4:	009b      	lsls	r3, r3, #2
    1ac6:	4413      	add	r3, r2
    1ac8:	00db      	lsls	r3, r3, #3
    1aca:	440b      	add	r3, r1
    1acc:	3340      	adds	r3, #64	; 0x40
    1ace:	681a      	ldr	r2, [r3, #0]
    1ad0:	4994      	ldr	r1, [pc, #592]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1ad2:	4613      	mov	r3, r2
    1ad4:	00db      	lsls	r3, r3, #3
    1ad6:	4413      	add	r3, r2
    1ad8:	440b      	add	r3, r1
    1ada:	3301      	adds	r3, #1
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	461a      	mov	r2, r3
    1ae0:	4b93      	ldr	r3, [pc, #588]	; (1d30 <Clock_Ip_InitClock+0x590>)
    1ae2:	5c9b      	ldrb	r3, [r3, r2]
    1ae4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1ae6:	4993      	ldr	r1, [pc, #588]	; (1d34 <Clock_Ip_InitClock+0x594>)
    1ae8:	9a02      	ldr	r2, [sp, #8]
    1aea:	4613      	mov	r3, r2
    1aec:	009b      	lsls	r3, r3, #2
    1aee:	4413      	add	r3, r2
    1af0:	009b      	lsls	r3, r3, #2
    1af2:	440b      	add	r3, r1
    1af4:	3304      	adds	r3, #4
    1af6:	6819      	ldr	r1, [r3, #0]
    1af8:	9a03      	ldr	r2, [sp, #12]
    1afa:	4613      	mov	r3, r2
    1afc:	009b      	lsls	r3, r3, #2
    1afe:	4413      	add	r3, r2
    1b00:	00db      	lsls	r3, r3, #3
    1b02:	3340      	adds	r3, #64	; 0x40
    1b04:	9a01      	ldr	r2, [sp, #4]
    1b06:	4413      	add	r3, r2
    1b08:	4618      	mov	r0, r3
    1b0a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1b0c:	9b03      	ldr	r3, [sp, #12]
    1b0e:	3301      	adds	r3, #1
    1b10:	9303      	str	r3, [sp, #12]
    1b12:	9b01      	ldr	r3, [sp, #4]
    1b14:	7a9b      	ldrb	r3, [r3, #10]
    1b16:	461a      	mov	r2, r3
    1b18:	9b03      	ldr	r3, [sp, #12]
    1b1a:	4293      	cmp	r3, r2
    1b1c:	d3cf      	bcc.n	1abe <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1b1e:	2300      	movs	r3, #0
    1b20:	9303      	str	r3, [sp, #12]
    1b22:	e029      	b.n	1b78 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1b24:	9901      	ldr	r1, [sp, #4]
    1b26:	9a03      	ldr	r2, [sp, #12]
    1b28:	4613      	mov	r3, r2
    1b2a:	009b      	lsls	r3, r3, #2
    1b2c:	4413      	add	r3, r2
    1b2e:	009b      	lsls	r3, r3, #2
    1b30:	440b      	add	r3, r1
    1b32:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b36:	681a      	ldr	r2, [r3, #0]
    1b38:	497a      	ldr	r1, [pc, #488]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1b3a:	4613      	mov	r3, r2
    1b3c:	00db      	lsls	r3, r3, #3
    1b3e:	4413      	add	r3, r2
    1b40:	440b      	add	r3, r1
    1b42:	3301      	adds	r3, #1
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	461a      	mov	r2, r3
    1b48:	4b7b      	ldr	r3, [pc, #492]	; (1d38 <Clock_Ip_InitClock+0x598>)
    1b4a:	5c9b      	ldrb	r3, [r3, r2]
    1b4c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1b4e:	4a7b      	ldr	r2, [pc, #492]	; (1d3c <Clock_Ip_InitClock+0x59c>)
    1b50:	9b02      	ldr	r3, [sp, #8]
    1b52:	011b      	lsls	r3, r3, #4
    1b54:	4413      	add	r3, r2
    1b56:	3304      	adds	r3, #4
    1b58:	681c      	ldr	r4, [r3, #0]
    1b5a:	9a03      	ldr	r2, [sp, #12]
    1b5c:	4613      	mov	r3, r2
    1b5e:	009b      	lsls	r3, r3, #2
    1b60:	4413      	add	r3, r2
    1b62:	009b      	lsls	r3, r3, #2
    1b64:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b68:	9a01      	ldr	r2, [sp, #4]
    1b6a:	4413      	add	r3, r2
    1b6c:	9903      	ldr	r1, [sp, #12]
    1b6e:	4618      	mov	r0, r3
    1b70:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1b72:	9b03      	ldr	r3, [sp, #12]
    1b74:	3301      	adds	r3, #1
    1b76:	9303      	str	r3, [sp, #12]
    1b78:	9b01      	ldr	r3, [sp, #4]
    1b7a:	7c9b      	ldrb	r3, [r3, #18]
    1b7c:	461a      	mov	r2, r3
    1b7e:	9b03      	ldr	r3, [sp, #12]
    1b80:	4293      	cmp	r3, r2
    1b82:	d3cf      	bcc.n	1b24 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1b84:	2300      	movs	r3, #0
    1b86:	9303      	str	r3, [sp, #12]
    1b88:	e02a      	b.n	1be0 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1b8a:	9901      	ldr	r1, [sp, #4]
    1b8c:	9a03      	ldr	r2, [sp, #12]
    1b8e:	4613      	mov	r3, r2
    1b90:	009b      	lsls	r3, r3, #2
    1b92:	4413      	add	r3, r2
    1b94:	009b      	lsls	r3, r3, #2
    1b96:	440b      	add	r3, r1
    1b98:	332c      	adds	r3, #44	; 0x2c
    1b9a:	681a      	ldr	r2, [r3, #0]
    1b9c:	4961      	ldr	r1, [pc, #388]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1b9e:	4613      	mov	r3, r2
    1ba0:	00db      	lsls	r3, r3, #3
    1ba2:	4413      	add	r3, r2
    1ba4:	440b      	add	r3, r1
    1ba6:	3301      	adds	r3, #1
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	461a      	mov	r2, r3
    1bac:	4b64      	ldr	r3, [pc, #400]	; (1d40 <Clock_Ip_InitClock+0x5a0>)
    1bae:	5c9b      	ldrb	r3, [r3, r2]
    1bb0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1bb2:	4964      	ldr	r1, [pc, #400]	; (1d44 <Clock_Ip_InitClock+0x5a4>)
    1bb4:	9a02      	ldr	r2, [sp, #8]
    1bb6:	4613      	mov	r3, r2
    1bb8:	009b      	lsls	r3, r3, #2
    1bba:	4413      	add	r3, r2
    1bbc:	009b      	lsls	r3, r3, #2
    1bbe:	440b      	add	r3, r1
    1bc0:	3308      	adds	r3, #8
    1bc2:	6819      	ldr	r1, [r3, #0]
    1bc4:	9a03      	ldr	r2, [sp, #12]
    1bc6:	4613      	mov	r3, r2
    1bc8:	009b      	lsls	r3, r3, #2
    1bca:	4413      	add	r3, r2
    1bcc:	009b      	lsls	r3, r3, #2
    1bce:	3328      	adds	r3, #40	; 0x28
    1bd0:	9a01      	ldr	r2, [sp, #4]
    1bd2:	4413      	add	r3, r2
    1bd4:	3304      	adds	r3, #4
    1bd6:	4618      	mov	r0, r3
    1bd8:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1bda:	9b03      	ldr	r3, [sp, #12]
    1bdc:	3301      	adds	r3, #1
    1bde:	9303      	str	r3, [sp, #12]
    1be0:	9b01      	ldr	r3, [sp, #4]
    1be2:	7a5b      	ldrb	r3, [r3, #9]
    1be4:	461a      	mov	r2, r3
    1be6:	9b03      	ldr	r3, [sp, #12]
    1be8:	4293      	cmp	r3, r2
    1bea:	d3ce      	bcc.n	1b8a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1bec:	2300      	movs	r3, #0
    1bee:	9303      	str	r3, [sp, #12]
    1bf0:	e029      	b.n	1c46 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1bf2:	9901      	ldr	r1, [sp, #4]
    1bf4:	9a03      	ldr	r2, [sp, #12]
    1bf6:	4613      	mov	r3, r2
    1bf8:	009b      	lsls	r3, r3, #2
    1bfa:	4413      	add	r3, r2
    1bfc:	00db      	lsls	r3, r3, #3
    1bfe:	440b      	add	r3, r1
    1c00:	3340      	adds	r3, #64	; 0x40
    1c02:	681a      	ldr	r2, [r3, #0]
    1c04:	4947      	ldr	r1, [pc, #284]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1c06:	4613      	mov	r3, r2
    1c08:	00db      	lsls	r3, r3, #3
    1c0a:	4413      	add	r3, r2
    1c0c:	440b      	add	r3, r1
    1c0e:	3301      	adds	r3, #1
    1c10:	781b      	ldrb	r3, [r3, #0]
    1c12:	461a      	mov	r2, r3
    1c14:	4b46      	ldr	r3, [pc, #280]	; (1d30 <Clock_Ip_InitClock+0x590>)
    1c16:	5c9b      	ldrb	r3, [r3, r2]
    1c18:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1c1a:	4946      	ldr	r1, [pc, #280]	; (1d34 <Clock_Ip_InitClock+0x594>)
    1c1c:	9a02      	ldr	r2, [sp, #8]
    1c1e:	4613      	mov	r3, r2
    1c20:	009b      	lsls	r3, r3, #2
    1c22:	4413      	add	r3, r2
    1c24:	009b      	lsls	r3, r3, #2
    1c26:	440b      	add	r3, r1
    1c28:	330c      	adds	r3, #12
    1c2a:	6819      	ldr	r1, [r3, #0]
    1c2c:	9a03      	ldr	r2, [sp, #12]
    1c2e:	4613      	mov	r3, r2
    1c30:	009b      	lsls	r3, r3, #2
    1c32:	4413      	add	r3, r2
    1c34:	00db      	lsls	r3, r3, #3
    1c36:	3340      	adds	r3, #64	; 0x40
    1c38:	9a01      	ldr	r2, [sp, #4]
    1c3a:	4413      	add	r3, r2
    1c3c:	4618      	mov	r0, r3
    1c3e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1c40:	9b03      	ldr	r3, [sp, #12]
    1c42:	3301      	adds	r3, #1
    1c44:	9303      	str	r3, [sp, #12]
    1c46:	9b01      	ldr	r3, [sp, #4]
    1c48:	7a9b      	ldrb	r3, [r3, #10]
    1c4a:	461a      	mov	r2, r3
    1c4c:	9b03      	ldr	r3, [sp, #12]
    1c4e:	4293      	cmp	r3, r2
    1c50:	d3cf      	bcc.n	1bf2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1c52:	2300      	movs	r3, #0
    1c54:	9303      	str	r3, [sp, #12]
    1c56:	e025      	b.n	1ca4 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1c58:	9a01      	ldr	r2, [sp, #4]
    1c5a:	9b03      	ldr	r3, [sp, #12]
    1c5c:	3324      	adds	r3, #36	; 0x24
    1c5e:	011b      	lsls	r3, r3, #4
    1c60:	4413      	add	r3, r2
    1c62:	3304      	adds	r3, #4
    1c64:	681a      	ldr	r2, [r3, #0]
    1c66:	492f      	ldr	r1, [pc, #188]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1c68:	4613      	mov	r3, r2
    1c6a:	00db      	lsls	r3, r3, #3
    1c6c:	4413      	add	r3, r2
    1c6e:	440b      	add	r3, r1
    1c70:	3301      	adds	r3, #1
    1c72:	781b      	ldrb	r3, [r3, #0]
    1c74:	461a      	mov	r2, r3
    1c76:	4b34      	ldr	r3, [pc, #208]	; (1d48 <Clock_Ip_InitClock+0x5a8>)
    1c78:	5c9b      	ldrb	r3, [r3, r2]
    1c7a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1c7c:	4933      	ldr	r1, [pc, #204]	; (1d4c <Clock_Ip_InitClock+0x5ac>)
    1c7e:	9a02      	ldr	r2, [sp, #8]
    1c80:	4613      	mov	r3, r2
    1c82:	005b      	lsls	r3, r3, #1
    1c84:	4413      	add	r3, r2
    1c86:	009b      	lsls	r3, r3, #2
    1c88:	440b      	add	r3, r1
    1c8a:	3304      	adds	r3, #4
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	9a03      	ldr	r2, [sp, #12]
    1c90:	3224      	adds	r2, #36	; 0x24
    1c92:	0112      	lsls	r2, r2, #4
    1c94:	9901      	ldr	r1, [sp, #4]
    1c96:	440a      	add	r2, r1
    1c98:	3204      	adds	r2, #4
    1c9a:	4610      	mov	r0, r2
    1c9c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1c9e:	9b03      	ldr	r3, [sp, #12]
    1ca0:	3301      	adds	r3, #1
    1ca2:	9303      	str	r3, [sp, #12]
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	7b9b      	ldrb	r3, [r3, #14]
    1ca8:	461a      	mov	r2, r3
    1caa:	9b03      	ldr	r3, [sp, #12]
    1cac:	4293      	cmp	r3, r2
    1cae:	d3d3      	bcc.n	1c58 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1cb0:	4b27      	ldr	r3, [pc, #156]	; (1d50 <Clock_Ip_InitClock+0x5b0>)
    1cb2:	2200      	movs	r2, #0
    1cb4:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1cb6:	4b26      	ldr	r3, [pc, #152]	; (1d50 <Clock_Ip_InitClock+0x5b0>)
    1cb8:	2200      	movs	r2, #0
    1cba:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1cbc:	4b24      	ldr	r3, [pc, #144]	; (1d50 <Clock_Ip_InitClock+0x5b0>)
    1cbe:	2201      	movs	r2, #1
    1cc0:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1cc2:	4b23      	ldr	r3, [pc, #140]	; (1d50 <Clock_Ip_InitClock+0x5b0>)
    1cc4:	2200      	movs	r2, #0
    1cc6:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1cc8:	f000 fa9c 	bl	2204 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1ccc:	2300      	movs	r3, #0
    1cce:	9303      	str	r3, [sp, #12]
    1cd0:	e04c      	b.n	1d6c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1cd2:	9a01      	ldr	r2, [sp, #4]
    1cd4:	9b03      	ldr	r3, [sp, #12]
    1cd6:	330d      	adds	r3, #13
    1cd8:	00db      	lsls	r3, r3, #3
    1cda:	4413      	add	r3, r2
    1cdc:	685b      	ldr	r3, [r3, #4]
    1cde:	4a1d      	ldr	r2, [pc, #116]	; (1d54 <Clock_Ip_InitClock+0x5b4>)
    1ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ce4:	2b03      	cmp	r3, #3
    1ce6:	d03b      	beq.n	1d60 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1ce8:	9b01      	ldr	r3, [sp, #4]
    1cea:	9a03      	ldr	r2, [sp, #12]
    1cec:	320d      	adds	r2, #13
    1cee:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1cf2:	490c      	ldr	r1, [pc, #48]	; (1d24 <Clock_Ip_InitClock+0x584>)
    1cf4:	4613      	mov	r3, r2
    1cf6:	00db      	lsls	r3, r3, #3
    1cf8:	4413      	add	r3, r2
    1cfa:	440b      	add	r3, r1
    1cfc:	3301      	adds	r3, #1
    1cfe:	781b      	ldrb	r3, [r3, #0]
    1d00:	461a      	mov	r2, r3
    1d02:	4b15      	ldr	r3, [pc, #84]	; (1d58 <Clock_Ip_InitClock+0x5b8>)
    1d04:	5c9b      	ldrb	r3, [r3, r2]
    1d06:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1d08:	4a14      	ldr	r2, [pc, #80]	; (1d5c <Clock_Ip_InitClock+0x5bc>)
    1d0a:	9b02      	ldr	r3, [sp, #8]
    1d0c:	00db      	lsls	r3, r3, #3
    1d0e:	4413      	add	r3, r2
    1d10:	685b      	ldr	r3, [r3, #4]
    1d12:	9a03      	ldr	r2, [sp, #12]
    1d14:	320d      	adds	r2, #13
    1d16:	00d2      	lsls	r2, r2, #3
    1d18:	9901      	ldr	r1, [sp, #4]
    1d1a:	440a      	add	r2, r1
    1d1c:	4610      	mov	r0, r2
    1d1e:	4798      	blx	r3
    1d20:	e021      	b.n	1d66 <Clock_Ip_InitClock+0x5c6>
    1d22:	bf00      	nop
    1d24:	0000b028 	.word	0x0000b028
    1d28:	0000af98 	.word	0x0000af98
    1d2c:	0000b574 	.word	0x0000b574
    1d30:	0000afe8 	.word	0x0000afe8
    1d34:	0000b634 	.word	0x0000b634
    1d38:	0000b018 	.word	0x0000b018
    1d3c:	0000b624 	.word	0x0000b624
    1d40:	0000afa8 	.word	0x0000afa8
    1d44:	0000b57c 	.word	0x0000b57c
    1d48:	0000afd8 	.word	0x0000afd8
    1d4c:	0000b5a4 	.word	0x0000b5a4
    1d50:	1fff8b90 	.word	0x1fff8b90
    1d54:	0000b474 	.word	0x0000b474
    1d58:	0000aff8 	.word	0x0000aff8
    1d5c:	0000b660 	.word	0x0000b660
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1d60:	4b3a      	ldr	r3, [pc, #232]	; (1e4c <Clock_Ip_InitClock+0x6ac>)
    1d62:	2201      	movs	r2, #1
    1d64:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1d66:	9b03      	ldr	r3, [sp, #12]
    1d68:	3301      	adds	r3, #1
    1d6a:	9303      	str	r3, [sp, #12]
    1d6c:	9b01      	ldr	r3, [sp, #4]
    1d6e:	7adb      	ldrb	r3, [r3, #11]
    1d70:	461a      	mov	r2, r3
    1d72:	9b03      	ldr	r3, [sp, #12]
    1d74:	4293      	cmp	r3, r2
    1d76:	d3ac      	bcc.n	1cd2 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1d78:	4b34      	ldr	r3, [pc, #208]	; (1e4c <Clock_Ip_InitClock+0x6ac>)
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	f083 0301 	eor.w	r3, r3, #1
    1d80:	b2db      	uxtb	r3, r3
    1d82:	2b00      	cmp	r3, #0
    1d84:	d05e      	beq.n	1e44 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1d86:	2300      	movs	r3, #0
    1d88:	9303      	str	r3, [sp, #12]
    1d8a:	e01f      	b.n	1dcc <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1d8c:	9a01      	ldr	r2, [sp, #4]
    1d8e:	9b03      	ldr	r3, [sp, #12]
    1d90:	334e      	adds	r3, #78	; 0x4e
    1d92:	00db      	lsls	r3, r3, #3
    1d94:	4413      	add	r3, r2
    1d96:	685a      	ldr	r2, [r3, #4]
    1d98:	492d      	ldr	r1, [pc, #180]	; (1e50 <Clock_Ip_InitClock+0x6b0>)
    1d9a:	4613      	mov	r3, r2
    1d9c:	00db      	lsls	r3, r3, #3
    1d9e:	4413      	add	r3, r2
    1da0:	440b      	add	r3, r1
    1da2:	3301      	adds	r3, #1
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	461a      	mov	r2, r3
    1da8:	4b2a      	ldr	r3, [pc, #168]	; (1e54 <Clock_Ip_InitClock+0x6b4>)
    1daa:	5c9b      	ldrb	r3, [r3, r2]
    1dac:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1dae:	4a2a      	ldr	r2, [pc, #168]	; (1e58 <Clock_Ip_InitClock+0x6b8>)
    1db0:	9b02      	ldr	r3, [sp, #8]
    1db2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1db6:	9a03      	ldr	r2, [sp, #12]
    1db8:	324e      	adds	r2, #78	; 0x4e
    1dba:	00d2      	lsls	r2, r2, #3
    1dbc:	9901      	ldr	r1, [sp, #4]
    1dbe:	440a      	add	r2, r1
    1dc0:	3204      	adds	r2, #4
    1dc2:	4610      	mov	r0, r2
    1dc4:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1dc6:	9b03      	ldr	r3, [sp, #12]
    1dc8:	3301      	adds	r3, #1
    1dca:	9303      	str	r3, [sp, #12]
    1dcc:	9b01      	ldr	r3, [sp, #4]
    1dce:	7c1b      	ldrb	r3, [r3, #16]
    1dd0:	461a      	mov	r2, r3
    1dd2:	9b03      	ldr	r3, [sp, #12]
    1dd4:	4293      	cmp	r3, r2
    1dd6:	d3d9      	bcc.n	1d8c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1dd8:	2300      	movs	r3, #0
    1dda:	9303      	str	r3, [sp, #12]
    1ddc:	e028      	b.n	1e30 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1dde:	9901      	ldr	r1, [sp, #4]
    1de0:	9a03      	ldr	r2, [sp, #12]
    1de2:	4613      	mov	r3, r2
    1de4:	009b      	lsls	r3, r3, #2
    1de6:	4413      	add	r3, r2
    1de8:	009b      	lsls	r3, r3, #2
    1dea:	440b      	add	r3, r1
    1dec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1df0:	681a      	ldr	r2, [r3, #0]
    1df2:	4917      	ldr	r1, [pc, #92]	; (1e50 <Clock_Ip_InitClock+0x6b0>)
    1df4:	4613      	mov	r3, r2
    1df6:	00db      	lsls	r3, r3, #3
    1df8:	4413      	add	r3, r2
    1dfa:	440b      	add	r3, r1
    1dfc:	3301      	adds	r3, #1
    1dfe:	781b      	ldrb	r3, [r3, #0]
    1e00:	461a      	mov	r2, r3
    1e02:	4b16      	ldr	r3, [pc, #88]	; (1e5c <Clock_Ip_InitClock+0x6bc>)
    1e04:	5c9b      	ldrb	r3, [r3, r2]
    1e06:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1e08:	4a15      	ldr	r2, [pc, #84]	; (1e60 <Clock_Ip_InitClock+0x6c0>)
    1e0a:	9b02      	ldr	r3, [sp, #8]
    1e0c:	011b      	lsls	r3, r3, #4
    1e0e:	4413      	add	r3, r2
    1e10:	330c      	adds	r3, #12
    1e12:	6819      	ldr	r1, [r3, #0]
    1e14:	9a03      	ldr	r2, [sp, #12]
    1e16:	4613      	mov	r3, r2
    1e18:	009b      	lsls	r3, r3, #2
    1e1a:	4413      	add	r3, r2
    1e1c:	009b      	lsls	r3, r3, #2
    1e1e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1e22:	9a01      	ldr	r2, [sp, #4]
    1e24:	4413      	add	r3, r2
    1e26:	4618      	mov	r0, r3
    1e28:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1e2a:	9b03      	ldr	r3, [sp, #12]
    1e2c:	3301      	adds	r3, #1
    1e2e:	9303      	str	r3, [sp, #12]
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	7c9b      	ldrb	r3, [r3, #18]
    1e34:	461a      	mov	r2, r3
    1e36:	9b03      	ldr	r3, [sp, #12]
    1e38:	4293      	cmp	r3, r2
    1e3a:	d3d0      	bcc.n	1dde <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1e3c:	2104      	movs	r1, #4
    1e3e:	9801      	ldr	r0, [sp, #4]
    1e40:	f002 ff48 	bl	4cd4 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1e44:	bf00      	nop
    1e46:	b004      	add	sp, #16
    1e48:	bd10      	pop	{r4, pc}
    1e4a:	bf00      	nop
    1e4c:	1fff8b90 	.word	0x1fff8b90
    1e50:	0000b028 	.word	0x0000b028
    1e54:	0000afc8 	.word	0x0000afc8
    1e58:	0000b5b0 	.word	0x0000b5b0
    1e5c:	0000b018 	.word	0x0000b018
    1e60:	0000b624 	.word	0x0000b624

00001e64 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1e64:	b500      	push	{lr}
    1e66:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1e68:	2302      	movs	r3, #2
    1e6a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1e6c:	2300      	movs	r3, #0
    1e6e:	9304      	str	r3, [sp, #16]
    1e70:	e02c      	b.n	1ecc <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1e72:	4a36      	ldr	r2, [pc, #216]	; (1f4c <Clock_Ip_GetPllStatus+0xe8>)
    1e74:	9b04      	ldr	r3, [sp, #16]
    1e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e7a:	4935      	ldr	r1, [pc, #212]	; (1f50 <Clock_Ip_GetPllStatus+0xec>)
    1e7c:	4613      	mov	r3, r2
    1e7e:	00db      	lsls	r3, r3, #3
    1e80:	4413      	add	r3, r2
    1e82:	440b      	add	r3, r1
    1e84:	3301      	adds	r3, #1
    1e86:	781b      	ldrb	r3, [r3, #0]
    1e88:	461a      	mov	r2, r3
    1e8a:	4b32      	ldr	r3, [pc, #200]	; (1f54 <Clock_Ip_GetPllStatus+0xf0>)
    1e8c:	5c9b      	ldrb	r3, [r3, r2]
    1e8e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1e90:	4931      	ldr	r1, [pc, #196]	; (1f58 <Clock_Ip_GetPllStatus+0xf4>)
    1e92:	9a03      	ldr	r2, [sp, #12]
    1e94:	4613      	mov	r3, r2
    1e96:	009b      	lsls	r3, r3, #2
    1e98:	4413      	add	r3, r2
    1e9a:	009b      	lsls	r3, r3, #2
    1e9c:	440b      	add	r3, r1
    1e9e:	3308      	adds	r3, #8
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	492a      	ldr	r1, [pc, #168]	; (1f4c <Clock_Ip_GetPllStatus+0xe8>)
    1ea4:	9a04      	ldr	r2, [sp, #16]
    1ea6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1eaa:	4610      	mov	r0, r2
    1eac:	4798      	blx	r3
    1eae:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1eb0:	9b02      	ldr	r3, [sp, #8]
    1eb2:	2b01      	cmp	r3, #1
    1eb4:	d102      	bne.n	1ebc <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1eb6:	2301      	movs	r3, #1
    1eb8:	9305      	str	r3, [sp, #20]
            break;
    1eba:	e00d      	b.n	1ed8 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1ebc:	9b02      	ldr	r3, [sp, #8]
    1ebe:	2b02      	cmp	r3, #2
    1ec0:	d101      	bne.n	1ec6 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1ec2:	2300      	movs	r3, #0
    1ec4:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1ec6:	9b04      	ldr	r3, [sp, #16]
    1ec8:	3301      	adds	r3, #1
    1eca:	9304      	str	r3, [sp, #16]
    1ecc:	4b23      	ldr	r3, [pc, #140]	; (1f5c <Clock_Ip_GetPllStatus+0xf8>)
    1ece:	789b      	ldrb	r3, [r3, #2]
    1ed0:	461a      	mov	r2, r3
    1ed2:	9b04      	ldr	r3, [sp, #16]
    1ed4:	4293      	cmp	r3, r2
    1ed6:	d3cc      	bcc.n	1e72 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1ed8:	9b05      	ldr	r3, [sp, #20]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d130      	bne.n	1f40 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1ede:	2300      	movs	r3, #0
    1ee0:	9304      	str	r3, [sp, #16]
    1ee2:	e027      	b.n	1f34 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1ee4:	4a1e      	ldr	r2, [pc, #120]	; (1f60 <Clock_Ip_GetPllStatus+0xfc>)
    1ee6:	9b04      	ldr	r3, [sp, #16]
    1ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1eec:	4918      	ldr	r1, [pc, #96]	; (1f50 <Clock_Ip_GetPllStatus+0xec>)
    1eee:	4613      	mov	r3, r2
    1ef0:	00db      	lsls	r3, r3, #3
    1ef2:	4413      	add	r3, r2
    1ef4:	440b      	add	r3, r1
    1ef6:	3301      	adds	r3, #1
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	461a      	mov	r2, r3
    1efc:	4b19      	ldr	r3, [pc, #100]	; (1f64 <Clock_Ip_GetPllStatus+0x100>)
    1efe:	5c9b      	ldrb	r3, [r3, r2]
    1f00:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1f02:	4919      	ldr	r1, [pc, #100]	; (1f68 <Clock_Ip_GetPllStatus+0x104>)
    1f04:	9a03      	ldr	r2, [sp, #12]
    1f06:	4613      	mov	r3, r2
    1f08:	005b      	lsls	r3, r3, #1
    1f0a:	4413      	add	r3, r2
    1f0c:	009b      	lsls	r3, r3, #2
    1f0e:	440b      	add	r3, r1
    1f10:	3308      	adds	r3, #8
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	4912      	ldr	r1, [pc, #72]	; (1f60 <Clock_Ip_GetPllStatus+0xfc>)
    1f16:	9a04      	ldr	r2, [sp, #16]
    1f18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1f1c:	4610      	mov	r0, r2
    1f1e:	4798      	blx	r3
    1f20:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1f22:	9b01      	ldr	r3, [sp, #4]
    1f24:	2b01      	cmp	r3, #1
    1f26:	d102      	bne.n	1f2e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1f28:	2301      	movs	r3, #1
    1f2a:	9305      	str	r3, [sp, #20]
                break;
    1f2c:	e008      	b.n	1f40 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1f2e:	9b04      	ldr	r3, [sp, #16]
    1f30:	3301      	adds	r3, #1
    1f32:	9304      	str	r3, [sp, #16]
    1f34:	4b09      	ldr	r3, [pc, #36]	; (1f5c <Clock_Ip_GetPllStatus+0xf8>)
    1f36:	78db      	ldrb	r3, [r3, #3]
    1f38:	461a      	mov	r2, r3
    1f3a:	9b04      	ldr	r3, [sp, #16]
    1f3c:	4293      	cmp	r3, r2
    1f3e:	d3d1      	bcc.n	1ee4 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1f40:	9b05      	ldr	r3, [sp, #20]
}
    1f42:	4618      	mov	r0, r3
    1f44:	b007      	add	sp, #28
    1f46:	f85d fb04 	ldr.w	pc, [sp], #4
    1f4a:	bf00      	nop
    1f4c:	0000b530 	.word	0x0000b530
    1f50:	0000b028 	.word	0x0000b028
    1f54:	0000afe8 	.word	0x0000afe8
    1f58:	0000b634 	.word	0x0000b634
    1f5c:	1fff8b90 	.word	0x1fff8b90
    1f60:	0000b534 	.word	0x0000b534
    1f64:	0000afd8 	.word	0x0000afd8
    1f68:	0000b5a4 	.word	0x0000b5a4

00001f6c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1f6c:	b500      	push	{lr}
    1f6e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1f70:	4b55      	ldr	r3, [pc, #340]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    1f72:	681b      	ldr	r3, [r3, #0]
    1f74:	2b00      	cmp	r3, #0
    1f76:	f000 80a2 	beq.w	20be <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1f7a:	2300      	movs	r3, #0
    1f7c:	9301      	str	r3, [sp, #4]
    1f7e:	e02c      	b.n	1fda <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1f80:	4b51      	ldr	r3, [pc, #324]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    1f82:	681a      	ldr	r2, [r3, #0]
    1f84:	9b01      	ldr	r3, [sp, #4]
    1f86:	330d      	adds	r3, #13
    1f88:	00db      	lsls	r3, r3, #3
    1f8a:	4413      	add	r3, r2
    1f8c:	685b      	ldr	r3, [r3, #4]
    1f8e:	4a4f      	ldr	r2, [pc, #316]	; (20cc <Clock_Ip_DistributePll+0x160>)
    1f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f94:	2b03      	cmp	r3, #3
    1f96:	d11d      	bne.n	1fd4 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1f98:	4b4b      	ldr	r3, [pc, #300]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	9a01      	ldr	r2, [sp, #4]
    1f9e:	320d      	adds	r2, #13
    1fa0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1fa4:	494a      	ldr	r1, [pc, #296]	; (20d0 <Clock_Ip_DistributePll+0x164>)
    1fa6:	4613      	mov	r3, r2
    1fa8:	00db      	lsls	r3, r3, #3
    1faa:	4413      	add	r3, r2
    1fac:	440b      	add	r3, r1
    1fae:	3301      	adds	r3, #1
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	461a      	mov	r2, r3
    1fb4:	4b47      	ldr	r3, [pc, #284]	; (20d4 <Clock_Ip_DistributePll+0x168>)
    1fb6:	5c9b      	ldrb	r3, [r3, r2]
    1fb8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1fba:	4a47      	ldr	r2, [pc, #284]	; (20d8 <Clock_Ip_DistributePll+0x16c>)
    1fbc:	9b00      	ldr	r3, [sp, #0]
    1fbe:	00db      	lsls	r3, r3, #3
    1fc0:	4413      	add	r3, r2
    1fc2:	685b      	ldr	r3, [r3, #4]
    1fc4:	4a40      	ldr	r2, [pc, #256]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    1fc6:	6811      	ldr	r1, [r2, #0]
    1fc8:	9a01      	ldr	r2, [sp, #4]
    1fca:	320d      	adds	r2, #13
    1fcc:	00d2      	lsls	r2, r2, #3
    1fce:	440a      	add	r2, r1
    1fd0:	4610      	mov	r0, r2
    1fd2:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1fd4:	9b01      	ldr	r3, [sp, #4]
    1fd6:	3301      	adds	r3, #1
    1fd8:	9301      	str	r3, [sp, #4]
    1fda:	4b3b      	ldr	r3, [pc, #236]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	7adb      	ldrb	r3, [r3, #11]
    1fe0:	461a      	mov	r2, r3
    1fe2:	9b01      	ldr	r3, [sp, #4]
    1fe4:	4293      	cmp	r3, r2
    1fe6:	d3cb      	bcc.n	1f80 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1fe8:	4b3c      	ldr	r3, [pc, #240]	; (20dc <Clock_Ip_DistributePll+0x170>)
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d066      	beq.n	20be <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ff0:	2300      	movs	r3, #0
    1ff2:	9301      	str	r3, [sp, #4]
    1ff4:	e021      	b.n	203a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1ff6:	4b34      	ldr	r3, [pc, #208]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    1ff8:	681a      	ldr	r2, [r3, #0]
    1ffa:	9b01      	ldr	r3, [sp, #4]
    1ffc:	334e      	adds	r3, #78	; 0x4e
    1ffe:	00db      	lsls	r3, r3, #3
    2000:	4413      	add	r3, r2
    2002:	685a      	ldr	r2, [r3, #4]
    2004:	4932      	ldr	r1, [pc, #200]	; (20d0 <Clock_Ip_DistributePll+0x164>)
    2006:	4613      	mov	r3, r2
    2008:	00db      	lsls	r3, r3, #3
    200a:	4413      	add	r3, r2
    200c:	440b      	add	r3, r1
    200e:	3301      	adds	r3, #1
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	461a      	mov	r2, r3
    2014:	4b32      	ldr	r3, [pc, #200]	; (20e0 <Clock_Ip_DistributePll+0x174>)
    2016:	5c9b      	ldrb	r3, [r3, r2]
    2018:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    201a:	4a32      	ldr	r2, [pc, #200]	; (20e4 <Clock_Ip_DistributePll+0x178>)
    201c:	9b00      	ldr	r3, [sp, #0]
    201e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2022:	4a29      	ldr	r2, [pc, #164]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    2024:	6811      	ldr	r1, [r2, #0]
    2026:	9a01      	ldr	r2, [sp, #4]
    2028:	324e      	adds	r2, #78	; 0x4e
    202a:	00d2      	lsls	r2, r2, #3
    202c:	440a      	add	r2, r1
    202e:	3204      	adds	r2, #4
    2030:	4610      	mov	r0, r2
    2032:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2034:	9b01      	ldr	r3, [sp, #4]
    2036:	3301      	adds	r3, #1
    2038:	9301      	str	r3, [sp, #4]
    203a:	4b23      	ldr	r3, [pc, #140]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    203c:	681b      	ldr	r3, [r3, #0]
    203e:	7c1b      	ldrb	r3, [r3, #16]
    2040:	461a      	mov	r2, r3
    2042:	9b01      	ldr	r3, [sp, #4]
    2044:	4293      	cmp	r3, r2
    2046:	d3d6      	bcc.n	1ff6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2048:	2300      	movs	r3, #0
    204a:	9301      	str	r3, [sp, #4]
    204c:	e02a      	b.n	20a4 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    204e:	4b1e      	ldr	r3, [pc, #120]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    2050:	6819      	ldr	r1, [r3, #0]
    2052:	9a01      	ldr	r2, [sp, #4]
    2054:	4613      	mov	r3, r2
    2056:	009b      	lsls	r3, r3, #2
    2058:	4413      	add	r3, r2
    205a:	009b      	lsls	r3, r3, #2
    205c:	440b      	add	r3, r1
    205e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2062:	681a      	ldr	r2, [r3, #0]
    2064:	491a      	ldr	r1, [pc, #104]	; (20d0 <Clock_Ip_DistributePll+0x164>)
    2066:	4613      	mov	r3, r2
    2068:	00db      	lsls	r3, r3, #3
    206a:	4413      	add	r3, r2
    206c:	440b      	add	r3, r1
    206e:	3301      	adds	r3, #1
    2070:	781b      	ldrb	r3, [r3, #0]
    2072:	461a      	mov	r2, r3
    2074:	4b1c      	ldr	r3, [pc, #112]	; (20e8 <Clock_Ip_DistributePll+0x17c>)
    2076:	5c9b      	ldrb	r3, [r3, r2]
    2078:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    207a:	4a1c      	ldr	r2, [pc, #112]	; (20ec <Clock_Ip_DistributePll+0x180>)
    207c:	9b00      	ldr	r3, [sp, #0]
    207e:	011b      	lsls	r3, r3, #4
    2080:	4413      	add	r3, r2
    2082:	330c      	adds	r3, #12
    2084:	6819      	ldr	r1, [r3, #0]
    2086:	4b10      	ldr	r3, [pc, #64]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    2088:	6818      	ldr	r0, [r3, #0]
    208a:	9a01      	ldr	r2, [sp, #4]
    208c:	4613      	mov	r3, r2
    208e:	009b      	lsls	r3, r3, #2
    2090:	4413      	add	r3, r2
    2092:	009b      	lsls	r3, r3, #2
    2094:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2098:	4403      	add	r3, r0
    209a:	4618      	mov	r0, r3
    209c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    209e:	9b01      	ldr	r3, [sp, #4]
    20a0:	3301      	adds	r3, #1
    20a2:	9301      	str	r3, [sp, #4]
    20a4:	4b08      	ldr	r3, [pc, #32]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	7c9b      	ldrb	r3, [r3, #18]
    20aa:	461a      	mov	r2, r3
    20ac:	9b01      	ldr	r3, [sp, #4]
    20ae:	4293      	cmp	r3, r2
    20b0:	d3cd      	bcc.n	204e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <Clock_Ip_DistributePll+0x15c>)
    20b4:	681b      	ldr	r3, [r3, #0]
    20b6:	2104      	movs	r1, #4
    20b8:	4618      	mov	r0, r3
    20ba:	f002 fe0b 	bl	4cd4 <Clock_Ip_Command>
        }
    }
}
    20be:	bf00      	nop
    20c0:	b003      	add	sp, #12
    20c2:	f85d fb04 	ldr.w	pc, [sp], #4
    20c6:	bf00      	nop
    20c8:	1fff8b88 	.word	0x1fff8b88
    20cc:	0000b474 	.word	0x0000b474
    20d0:	0000b028 	.word	0x0000b028
    20d4:	0000aff8 	.word	0x0000aff8
    20d8:	0000b660 	.word	0x0000b660
    20dc:	1fff8b90 	.word	0x1fff8b90
    20e0:	0000afc8 	.word	0x0000afc8
    20e4:	0000b5b0 	.word	0x0000b5b0
    20e8:	0000b018 	.word	0x0000b018
    20ec:	0000b624 	.word	0x0000b624

000020f0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    20f0:	b500      	push	{lr}
    20f2:	b085      	sub	sp, #20
    20f4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    20f6:	490c      	ldr	r1, [pc, #48]	; (2128 <Clock_Ip_DisableClockMonitor+0x38>)
    20f8:	9a01      	ldr	r2, [sp, #4]
    20fa:	4613      	mov	r3, r2
    20fc:	00db      	lsls	r3, r3, #3
    20fe:	4413      	add	r3, r2
    2100:	440b      	add	r3, r1
    2102:	3301      	adds	r3, #1
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	461a      	mov	r2, r3
    2108:	4b08      	ldr	r3, [pc, #32]	; (212c <Clock_Ip_DisableClockMonitor+0x3c>)
    210a:	5c9b      	ldrb	r3, [r3, r2]
    210c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    210e:	4a08      	ldr	r2, [pc, #32]	; (2130 <Clock_Ip_DisableClockMonitor+0x40>)
    2110:	9b03      	ldr	r3, [sp, #12]
    2112:	011b      	lsls	r3, r3, #4
    2114:	4413      	add	r3, r2
    2116:	3308      	adds	r3, #8
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	9801      	ldr	r0, [sp, #4]
    211c:	4798      	blx	r3
}
    211e:	bf00      	nop
    2120:	b005      	add	sp, #20
    2122:	f85d fb04 	ldr.w	pc, [sp], #4
    2126:	bf00      	nop
    2128:	0000b028 	.word	0x0000b028
    212c:	0000b018 	.word	0x0000b018
    2130:	0000b624 	.word	0x0000b624

00002134 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2134:	b082      	sub	sp, #8
    2136:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2138:	4a02      	ldr	r2, [pc, #8]	; (2144 <Clock_Ip_InstallNotificationsCallback+0x10>)
    213a:	9b01      	ldr	r3, [sp, #4]
    213c:	6013      	str	r3, [r2, #0]
}
    213e:	bf00      	nop
    2140:	b002      	add	sp, #8
    2142:	4770      	bx	lr
    2144:	1fff8b14 	.word	0x1fff8b14

00002148 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2148:	b500      	push	{lr}
    214a:	b085      	sub	sp, #20
    214c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    214e:	490c      	ldr	r1, [pc, #48]	; (2180 <Clock_Ip_DisableModuleClock+0x38>)
    2150:	9a01      	ldr	r2, [sp, #4]
    2152:	4613      	mov	r3, r2
    2154:	00db      	lsls	r3, r3, #3
    2156:	4413      	add	r3, r2
    2158:	440b      	add	r3, r1
    215a:	3301      	adds	r3, #1
    215c:	781b      	ldrb	r3, [r3, #0]
    215e:	461a      	mov	r2, r3
    2160:	4b08      	ldr	r3, [pc, #32]	; (2184 <Clock_Ip_DisableModuleClock+0x3c>)
    2162:	5c9b      	ldrb	r3, [r3, r2]
    2164:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2166:	4a08      	ldr	r2, [pc, #32]	; (2188 <Clock_Ip_DisableModuleClock+0x40>)
    2168:	9b03      	ldr	r3, [sp, #12]
    216a:	00db      	lsls	r3, r3, #3
    216c:	4413      	add	r3, r2
    216e:	685b      	ldr	r3, [r3, #4]
    2170:	2101      	movs	r1, #1
    2172:	9801      	ldr	r0, [sp, #4]
    2174:	4798      	blx	r3
}
    2176:	bf00      	nop
    2178:	b005      	add	sp, #20
    217a:	f85d fb04 	ldr.w	pc, [sp], #4
    217e:	bf00      	nop
    2180:	0000b028 	.word	0x0000b028
    2184:	0000afc8 	.word	0x0000afc8
    2188:	0000b5b0 	.word	0x0000b5b0

0000218c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    218c:	b500      	push	{lr}
    218e:	b085      	sub	sp, #20
    2190:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2192:	490c      	ldr	r1, [pc, #48]	; (21c4 <Clock_Ip_EnableModuleClock+0x38>)
    2194:	9a01      	ldr	r2, [sp, #4]
    2196:	4613      	mov	r3, r2
    2198:	00db      	lsls	r3, r3, #3
    219a:	4413      	add	r3, r2
    219c:	440b      	add	r3, r1
    219e:	3301      	adds	r3, #1
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	461a      	mov	r2, r3
    21a4:	4b08      	ldr	r3, [pc, #32]	; (21c8 <Clock_Ip_EnableModuleClock+0x3c>)
    21a6:	5c9b      	ldrb	r3, [r3, r2]
    21a8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    21aa:	4a08      	ldr	r2, [pc, #32]	; (21cc <Clock_Ip_EnableModuleClock+0x40>)
    21ac:	9b03      	ldr	r3, [sp, #12]
    21ae:	00db      	lsls	r3, r3, #3
    21b0:	4413      	add	r3, r2
    21b2:	685b      	ldr	r3, [r3, #4]
    21b4:	2100      	movs	r1, #0
    21b6:	9801      	ldr	r0, [sp, #4]
    21b8:	4798      	blx	r3
}
    21ba:	bf00      	nop
    21bc:	b005      	add	sp, #20
    21be:	f85d fb04 	ldr.w	pc, [sp], #4
    21c2:	bf00      	nop
    21c4:	0000b028 	.word	0x0000b028
    21c8:	0000afc8 	.word	0x0000afc8
    21cc:	0000b5b0 	.word	0x0000b5b0

000021d0 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    21d0:	b500      	push	{lr}
    21d2:	b083      	sub	sp, #12
    21d4:	9001      	str	r0, [sp, #4]
    21d6:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    21d8:	4b08      	ldr	r3, [pc, #32]	; (21fc <Clock_Ip_PowerModeChangeNotification+0x2c>)
    21da:	2200      	movs	r2, #0
    21dc:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    21de:	4b08      	ldr	r3, [pc, #32]	; (2200 <Clock_Ip_PowerModeChangeNotification+0x30>)
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	2102      	movs	r1, #2
    21e4:	4618      	mov	r0, r3
    21e6:	f002 fd75 	bl	4cd4 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    21ea:	9900      	ldr	r1, [sp, #0]
    21ec:	9801      	ldr	r0, [sp, #4]
    21ee:	f002 fc51 	bl	4a94 <Clock_Ip_ClockPowerModeChangeNotification>
}
    21f2:	bf00      	nop
    21f4:	b003      	add	sp, #12
    21f6:	f85d fb04 	ldr.w	pc, [sp], #4
    21fa:	bf00      	nop
    21fc:	1fff8b10 	.word	0x1fff8b10
    2200:	1fff8b88 	.word	0x1fff8b88

00002204 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2204:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2206:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    220a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    220c:	4b06      	ldr	r3, [pc, #24]	; (2228 <Clock_Ip_SetWaitStates+0x24>)
    220e:	785b      	ldrb	r3, [r3, #1]
    2210:	2b00      	cmp	r3, #0
    2212:	d005      	beq.n	2220 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2214:	9b01      	ldr	r3, [sp, #4]
    2216:	3b01      	subs	r3, #1
    2218:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    221a:	9b01      	ldr	r3, [sp, #4]
    221c:	2b00      	cmp	r3, #0
    221e:	d1f9      	bne.n	2214 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2220:	bf00      	nop
    2222:	b002      	add	sp, #8
    2224:	4770      	bx	lr
    2226:	bf00      	nop
    2228:	1fff8b90 	.word	0x1fff8b90

0000222c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    222c:	b500      	push	{lr}
    222e:	b083      	sub	sp, #12
    2230:	9001      	str	r0, [sp, #4]
    2232:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2234:	4b04      	ldr	r3, [pc, #16]	; (2248 <Clock_Ip_ReportClockErrors+0x1c>)
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	9900      	ldr	r1, [sp, #0]
    223a:	9801      	ldr	r0, [sp, #4]
    223c:	4798      	blx	r3
}
    223e:	bf00      	nop
    2240:	b003      	add	sp, #12
    2242:	f85d fb04 	ldr.w	pc, [sp], #4
    2246:	bf00      	nop
    2248:	1fff8b14 	.word	0x1fff8b14

0000224c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    224c:	b500      	push	{lr}
    224e:	b085      	sub	sp, #20
    2250:	9003      	str	r0, [sp, #12]
    2252:	9102      	str	r1, [sp, #8]
    2254:	9201      	str	r2, [sp, #4]
    2256:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2258:	2000      	movs	r0, #0
    225a:	f7fe ffd1 	bl	1200 <OsIf_GetCounter>
    225e:	4602      	mov	r2, r0
    2260:	9b03      	ldr	r3, [sp, #12]
    2262:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2264:	9b02      	ldr	r3, [sp, #8]
    2266:	2200      	movs	r2, #0
    2268:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    226a:	2100      	movs	r1, #0
    226c:	9800      	ldr	r0, [sp, #0]
    226e:	f7ff f813 	bl	1298 <OsIf_MicrosToTicks>
    2272:	4602      	mov	r2, r0
    2274:	9b01      	ldr	r3, [sp, #4]
    2276:	601a      	str	r2, [r3, #0]
}
    2278:	bf00      	nop
    227a:	b005      	add	sp, #20
    227c:	f85d fb04 	ldr.w	pc, [sp], #4

00002280 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2280:	b500      	push	{lr}
    2282:	b087      	sub	sp, #28
    2284:	9003      	str	r0, [sp, #12]
    2286:	9102      	str	r1, [sp, #8]
    2288:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    228a:	2300      	movs	r3, #0
    228c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2290:	2100      	movs	r1, #0
    2292:	9803      	ldr	r0, [sp, #12]
    2294:	f7fe ffcd 	bl	1232 <OsIf_GetElapsed>
    2298:	4602      	mov	r2, r0
    229a:	9b02      	ldr	r3, [sp, #8]
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	441a      	add	r2, r3
    22a0:	9b02      	ldr	r3, [sp, #8]
    22a2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    22a4:	9b02      	ldr	r3, [sp, #8]
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	9a01      	ldr	r2, [sp, #4]
    22aa:	429a      	cmp	r2, r3
    22ac:	d802      	bhi.n	22b4 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    22ae:	2301      	movs	r3, #1
    22b0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    22b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    22b8:	4618      	mov	r0, r3
    22ba:	b007      	add	sp, #28
    22bc:	f85d fb04 	ldr.w	pc, [sp], #4

000022c0 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    22c0:	b082      	sub	sp, #8
    22c2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    22c4:	bf00      	nop
    22c6:	b002      	add	sp, #8
    22c8:	4770      	bx	lr

000022ca <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    22ca:	b500      	push	{lr}
    22cc:	b083      	sub	sp, #12
    22ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22d0:	9b01      	ldr	r3, [sp, #4]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d002      	beq.n	22dc <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    22d6:	9801      	ldr	r0, [sp, #4]
    22d8:	f000 f8ad 	bl	2436 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22dc:	bf00      	nop
    22de:	b003      	add	sp, #12
    22e0:	f85d fb04 	ldr.w	pc, [sp], #4

000022e4 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    22e4:	b500      	push	{lr}
    22e6:	b083      	sub	sp, #12
    22e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ea:	9b01      	ldr	r3, [sp, #4]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d002      	beq.n	22f6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    22f0:	9801      	ldr	r0, [sp, #4]
    22f2:	f000 f8cd 	bl	2490 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22f6:	bf00      	nop
    22f8:	b003      	add	sp, #12
    22fa:	f85d fb04 	ldr.w	pc, [sp], #4

000022fe <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    22fe:	b500      	push	{lr}
    2300:	b083      	sub	sp, #12
    2302:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2304:	9b01      	ldr	r3, [sp, #4]
    2306:	2b00      	cmp	r3, #0
    2308:	d002      	beq.n	2310 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    230a:	9801      	ldr	r0, [sp, #4]
    230c:	f000 f8ee 	bl	24ec <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2310:	bf00      	nop
    2312:	b003      	add	sp, #12
    2314:	f85d fb04 	ldr.w	pc, [sp], #4

00002318 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2318:	b500      	push	{lr}
    231a:	b083      	sub	sp, #12
    231c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    231e:	9b01      	ldr	r3, [sp, #4]
    2320:	2b00      	cmp	r3, #0
    2322:	d002      	beq.n	232a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2324:	9801      	ldr	r0, [sp, #4]
    2326:	f000 f8f9 	bl	251c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    232a:	bf00      	nop
    232c:	b003      	add	sp, #12
    232e:	f85d fb04 	ldr.w	pc, [sp], #4

00002332 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2332:	b500      	push	{lr}
    2334:	b083      	sub	sp, #12
    2336:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2338:	9b01      	ldr	r3, [sp, #4]
    233a:	2b00      	cmp	r3, #0
    233c:	d002      	beq.n	2344 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    233e:	9801      	ldr	r0, [sp, #4]
    2340:	f000 f904 	bl	254c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2344:	bf00      	nop
    2346:	b003      	add	sp, #12
    2348:	f85d fb04 	ldr.w	pc, [sp], #4

0000234c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    234c:	b500      	push	{lr}
    234e:	b083      	sub	sp, #12
    2350:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2352:	9b01      	ldr	r3, [sp, #4]
    2354:	2b00      	cmp	r3, #0
    2356:	d002      	beq.n	235e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2358:	9801      	ldr	r0, [sp, #4]
    235a:	f000 f90f 	bl	257c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    235e:	bf00      	nop
    2360:	b003      	add	sp, #12
    2362:	f85d fb04 	ldr.w	pc, [sp], #4

00002366 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2366:	b500      	push	{lr}
    2368:	b083      	sub	sp, #12
    236a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    236c:	9b01      	ldr	r3, [sp, #4]
    236e:	2b00      	cmp	r3, #0
    2370:	d002      	beq.n	2378 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2372:	9801      	ldr	r0, [sp, #4]
    2374:	f000 f91a 	bl	25ac <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2378:	bf00      	nop
    237a:	b003      	add	sp, #12
    237c:	f85d fb04 	ldr.w	pc, [sp], #4

00002380 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2380:	b500      	push	{lr}
    2382:	b083      	sub	sp, #12
    2384:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2386:	9b01      	ldr	r3, [sp, #4]
    2388:	2b00      	cmp	r3, #0
    238a:	d002      	beq.n	2392 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    238c:	9801      	ldr	r0, [sp, #4]
    238e:	f000 f925 	bl	25dc <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2392:	bf00      	nop
    2394:	b003      	add	sp, #12
    2396:	f85d fb04 	ldr.w	pc, [sp], #4

0000239a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    239a:	b500      	push	{lr}
    239c:	b083      	sub	sp, #12
    239e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23a0:	9b01      	ldr	r3, [sp, #4]
    23a2:	2b00      	cmp	r3, #0
    23a4:	d002      	beq.n	23ac <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    23a6:	9801      	ldr	r0, [sp, #4]
    23a8:	f000 f930 	bl	260c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23ac:	bf00      	nop
    23ae:	b003      	add	sp, #12
    23b0:	f85d fb04 	ldr.w	pc, [sp], #4

000023b4 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    23b4:	b500      	push	{lr}
    23b6:	b083      	sub	sp, #12
    23b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23ba:	9b01      	ldr	r3, [sp, #4]
    23bc:	2b00      	cmp	r3, #0
    23be:	d002      	beq.n	23c6 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    23c0:	9801      	ldr	r0, [sp, #4]
    23c2:	f000 f93b 	bl	263c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23c6:	bf00      	nop
    23c8:	b003      	add	sp, #12
    23ca:	f85d fb04 	ldr.w	pc, [sp], #4

000023ce <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    23ce:	b500      	push	{lr}
    23d0:	b083      	sub	sp, #12
    23d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d002      	beq.n	23e0 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    23da:	9801      	ldr	r0, [sp, #4]
    23dc:	f000 f946 	bl	266c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23e0:	bf00      	nop
    23e2:	b003      	add	sp, #12
    23e4:	f85d fb04 	ldr.w	pc, [sp], #4

000023e8 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    23e8:	b500      	push	{lr}
    23ea:	b083      	sub	sp, #12
    23ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d002      	beq.n	23fa <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    23f4:	9801      	ldr	r0, [sp, #4]
    23f6:	f000 f951 	bl	269c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23fa:	bf00      	nop
    23fc:	b003      	add	sp, #12
    23fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002402 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2402:	b500      	push	{lr}
    2404:	b083      	sub	sp, #12
    2406:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2408:	9b01      	ldr	r3, [sp, #4]
    240a:	2b00      	cmp	r3, #0
    240c:	d002      	beq.n	2414 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    240e:	9801      	ldr	r0, [sp, #4]
    2410:	f000 f95e 	bl	26d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2414:	bf00      	nop
    2416:	b003      	add	sp, #12
    2418:	f85d fb04 	ldr.w	pc, [sp], #4

0000241c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    241c:	b500      	push	{lr}
    241e:	b083      	sub	sp, #12
    2420:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	2b00      	cmp	r3, #0
    2426:	d002      	beq.n	242e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2428:	9801      	ldr	r0, [sp, #4]
    242a:	f000 f98b 	bl	2744 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    242e:	bf00      	nop
    2430:	b003      	add	sp, #12
    2432:	f85d fb04 	ldr.w	pc, [sp], #4

00002436 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2436:	b086      	sub	sp, #24
    2438:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	681a      	ldr	r2, [r3, #0]
    243e:	4911      	ldr	r1, [pc, #68]	; (2484 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2440:	4613      	mov	r3, r2
    2442:	00db      	lsls	r3, r3, #3
    2444:	4413      	add	r3, r2
    2446:	440b      	add	r3, r1
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    244c:	9b01      	ldr	r3, [sp, #4]
    244e:	685b      	ldr	r3, [r3, #4]
    2450:	4a0d      	ldr	r2, [pc, #52]	; (2488 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2452:	5cd3      	ldrb	r3, [r2, r3]
    2454:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2456:	4a0d      	ldr	r2, [pc, #52]	; (248c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2458:	9b05      	ldr	r3, [sp, #20]
    245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2462:	9b03      	ldr	r3, [sp, #12]
    2464:	f023 0307 	bic.w	r3, r3, #7
    2468:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    246a:	9a03      	ldr	r2, [sp, #12]
    246c:	9b04      	ldr	r3, [sp, #16]
    246e:	4313      	orrs	r3, r2
    2470:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2472:	4a06      	ldr	r2, [pc, #24]	; (248c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2474:	9b05      	ldr	r3, [sp, #20]
    2476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    247a:	9a03      	ldr	r2, [sp, #12]
    247c:	601a      	str	r2, [r3, #0]
}
    247e:	bf00      	nop
    2480:	b006      	add	sp, #24
    2482:	4770      	bx	lr
    2484:	0000b028 	.word	0x0000b028
    2488:	0000b420 	.word	0x0000b420
    248c:	0000b464 	.word	0x0000b464

00002490 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2490:	b086      	sub	sp, #24
    2492:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2494:	9b01      	ldr	r3, [sp, #4]
    2496:	681a      	ldr	r2, [r3, #0]
    2498:	4911      	ldr	r1, [pc, #68]	; (24e0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    249a:	4613      	mov	r3, r2
    249c:	00db      	lsls	r3, r3, #3
    249e:	4413      	add	r3, r2
    24a0:	440b      	add	r3, r1
    24a2:	781b      	ldrb	r3, [r3, #0]
    24a4:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    24a6:	9b01      	ldr	r3, [sp, #4]
    24a8:	685b      	ldr	r3, [r3, #4]
    24aa:	4a0e      	ldr	r2, [pc, #56]	; (24e4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    24ac:	5cd3      	ldrb	r3, [r2, r3]
    24ae:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    24b0:	4a0d      	ldr	r2, [pc, #52]	; (24e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    24b2:	9b05      	ldr	r3, [sp, #20]
    24b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24b8:	681b      	ldr	r3, [r3, #0]
    24ba:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    24bc:	9b03      	ldr	r3, [sp, #12]
    24be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    24c2:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    24c4:	9b04      	ldr	r3, [sp, #16]
    24c6:	021b      	lsls	r3, r3, #8
    24c8:	9a03      	ldr	r2, [sp, #12]
    24ca:	4313      	orrs	r3, r2
    24cc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    24ce:	4a06      	ldr	r2, [pc, #24]	; (24e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    24d0:	9b05      	ldr	r3, [sp, #20]
    24d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24d6:	9a03      	ldr	r2, [sp, #12]
    24d8:	601a      	str	r2, [r3, #0]
}
    24da:	bf00      	nop
    24dc:	b006      	add	sp, #24
    24de:	4770      	bx	lr
    24e0:	0000b028 	.word	0x0000b028
    24e4:	0000b420 	.word	0x0000b420
    24e8:	0000b464 	.word	0x0000b464

000024ec <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24ec:	b084      	sub	sp, #16
    24ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    24f0:	4b09      	ldr	r3, [pc, #36]	; (2518 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    24f2:	695b      	ldr	r3, [r3, #20]
    24f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    24f6:	9b03      	ldr	r3, [sp, #12]
    24f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    24fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    24fe:	9b01      	ldr	r3, [sp, #4]
    2500:	685b      	ldr	r3, [r3, #4]
    2502:	3b01      	subs	r3, #1
    2504:	041b      	lsls	r3, r3, #16
    2506:	9a03      	ldr	r2, [sp, #12]
    2508:	4313      	orrs	r3, r2
    250a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    250c:	4a02      	ldr	r2, [pc, #8]	; (2518 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    250e:	9b03      	ldr	r3, [sp, #12]
    2510:	6153      	str	r3, [r2, #20]
}
    2512:	bf00      	nop
    2514:	b004      	add	sp, #16
    2516:	4770      	bx	lr
    2518:	40064000 	.word	0x40064000

0000251c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    251c:	b084      	sub	sp, #16
    251e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2520:	4b09      	ldr	r3, [pc, #36]	; (2548 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2522:	695b      	ldr	r3, [r3, #20]
    2524:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2526:	9b03      	ldr	r3, [sp, #12]
    2528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    252c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    252e:	9b01      	ldr	r3, [sp, #4]
    2530:	685b      	ldr	r3, [r3, #4]
    2532:	3b01      	subs	r3, #1
    2534:	011b      	lsls	r3, r3, #4
    2536:	9a03      	ldr	r2, [sp, #12]
    2538:	4313      	orrs	r3, r2
    253a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    253c:	4a02      	ldr	r2, [pc, #8]	; (2548 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    253e:	9b03      	ldr	r3, [sp, #12]
    2540:	6153      	str	r3, [r2, #20]
}
    2542:	bf00      	nop
    2544:	b004      	add	sp, #16
    2546:	4770      	bx	lr
    2548:	40064000 	.word	0x40064000

0000254c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    254c:	b084      	sub	sp, #16
    254e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2550:	4b09      	ldr	r3, [pc, #36]	; (2578 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2552:	695b      	ldr	r3, [r3, #20]
    2554:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2556:	9b03      	ldr	r3, [sp, #12]
    2558:	f023 030f 	bic.w	r3, r3, #15
    255c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    255e:	9b01      	ldr	r3, [sp, #4]
    2560:	685b      	ldr	r3, [r3, #4]
    2562:	3b01      	subs	r3, #1
    2564:	9a03      	ldr	r2, [sp, #12]
    2566:	4313      	orrs	r3, r2
    2568:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    256a:	4a03      	ldr	r2, [pc, #12]	; (2578 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    256c:	9b03      	ldr	r3, [sp, #12]
    256e:	6153      	str	r3, [r2, #20]
}
    2570:	bf00      	nop
    2572:	b004      	add	sp, #16
    2574:	4770      	bx	lr
    2576:	bf00      	nop
    2578:	40064000 	.word	0x40064000

0000257c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    257c:	b084      	sub	sp, #16
    257e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2580:	4b09      	ldr	r3, [pc, #36]	; (25a8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2582:	699b      	ldr	r3, [r3, #24]
    2584:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2586:	9b03      	ldr	r3, [sp, #12]
    2588:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    258c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    258e:	9b01      	ldr	r3, [sp, #4]
    2590:	685b      	ldr	r3, [r3, #4]
    2592:	3b01      	subs	r3, #1
    2594:	041b      	lsls	r3, r3, #16
    2596:	9a03      	ldr	r2, [sp, #12]
    2598:	4313      	orrs	r3, r2
    259a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    259c:	4a02      	ldr	r2, [pc, #8]	; (25a8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    259e:	9b03      	ldr	r3, [sp, #12]
    25a0:	6193      	str	r3, [r2, #24]
}
    25a2:	bf00      	nop
    25a4:	b004      	add	sp, #16
    25a6:	4770      	bx	lr
    25a8:	40064000 	.word	0x40064000

000025ac <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25ac:	b084      	sub	sp, #16
    25ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    25b0:	4b09      	ldr	r3, [pc, #36]	; (25d8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    25b2:	699b      	ldr	r3, [r3, #24]
    25b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    25bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	685b      	ldr	r3, [r3, #4]
    25c2:	3b01      	subs	r3, #1
    25c4:	011b      	lsls	r3, r3, #4
    25c6:	9a03      	ldr	r2, [sp, #12]
    25c8:	4313      	orrs	r3, r2
    25ca:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    25cc:	4a02      	ldr	r2, [pc, #8]	; (25d8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    25ce:	9b03      	ldr	r3, [sp, #12]
    25d0:	6193      	str	r3, [r2, #24]
}
    25d2:	bf00      	nop
    25d4:	b004      	add	sp, #16
    25d6:	4770      	bx	lr
    25d8:	40064000 	.word	0x40064000

000025dc <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25dc:	b084      	sub	sp, #16
    25de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    25e2:	699b      	ldr	r3, [r3, #24]
    25e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    25e6:	9b03      	ldr	r3, [sp, #12]
    25e8:	f023 030f 	bic.w	r3, r3, #15
    25ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    25ee:	9b01      	ldr	r3, [sp, #4]
    25f0:	685b      	ldr	r3, [r3, #4]
    25f2:	3b01      	subs	r3, #1
    25f4:	9a03      	ldr	r2, [sp, #12]
    25f6:	4313      	orrs	r3, r2
    25f8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    25fa:	4a03      	ldr	r2, [pc, #12]	; (2608 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    25fc:	9b03      	ldr	r3, [sp, #12]
    25fe:	6193      	str	r3, [r2, #24]
}
    2600:	bf00      	nop
    2602:	b004      	add	sp, #16
    2604:	4770      	bx	lr
    2606:	bf00      	nop
    2608:	40064000 	.word	0x40064000

0000260c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    260c:	b084      	sub	sp, #16
    260e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2610:	4b09      	ldr	r3, [pc, #36]	; (2638 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2612:	69db      	ldr	r3, [r3, #28]
    2614:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2616:	9b03      	ldr	r3, [sp, #12]
    2618:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    261c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    261e:	9b01      	ldr	r3, [sp, #4]
    2620:	685b      	ldr	r3, [r3, #4]
    2622:	3b01      	subs	r3, #1
    2624:	041b      	lsls	r3, r3, #16
    2626:	9a03      	ldr	r2, [sp, #12]
    2628:	4313      	orrs	r3, r2
    262a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    262c:	4a02      	ldr	r2, [pc, #8]	; (2638 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    262e:	9b03      	ldr	r3, [sp, #12]
    2630:	61d3      	str	r3, [r2, #28]
}
    2632:	bf00      	nop
    2634:	b004      	add	sp, #16
    2636:	4770      	bx	lr
    2638:	40064000 	.word	0x40064000

0000263c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    263c:	b084      	sub	sp, #16
    263e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2640:	4b09      	ldr	r3, [pc, #36]	; (2668 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2642:	69db      	ldr	r3, [r3, #28]
    2644:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2646:	9b03      	ldr	r3, [sp, #12]
    2648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    264c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    264e:	9b01      	ldr	r3, [sp, #4]
    2650:	685b      	ldr	r3, [r3, #4]
    2652:	3b01      	subs	r3, #1
    2654:	011b      	lsls	r3, r3, #4
    2656:	9a03      	ldr	r2, [sp, #12]
    2658:	4313      	orrs	r3, r2
    265a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    265c:	4a02      	ldr	r2, [pc, #8]	; (2668 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	61d3      	str	r3, [r2, #28]
}
    2662:	bf00      	nop
    2664:	b004      	add	sp, #16
    2666:	4770      	bx	lr
    2668:	40064000 	.word	0x40064000

0000266c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    266c:	b084      	sub	sp, #16
    266e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2670:	4b09      	ldr	r3, [pc, #36]	; (2698 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2672:	69db      	ldr	r3, [r3, #28]
    2674:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2676:	9b03      	ldr	r3, [sp, #12]
    2678:	f023 030f 	bic.w	r3, r3, #15
    267c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    267e:	9b01      	ldr	r3, [sp, #4]
    2680:	685b      	ldr	r3, [r3, #4]
    2682:	3b01      	subs	r3, #1
    2684:	9a03      	ldr	r2, [sp, #12]
    2686:	4313      	orrs	r3, r2
    2688:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    268a:	4a03      	ldr	r2, [pc, #12]	; (2698 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    268c:	9b03      	ldr	r3, [sp, #12]
    268e:	61d3      	str	r3, [r2, #28]
}
    2690:	bf00      	nop
    2692:	b004      	add	sp, #16
    2694:	4770      	bx	lr
    2696:	bf00      	nop
    2698:	40064000 	.word	0x40064000

0000269c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    269c:	b084      	sub	sp, #16
    269e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    26a0:	4b0a      	ldr	r3, [pc, #40]	; (26cc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    26a2:	685b      	ldr	r3, [r3, #4]
    26a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    26a6:	9b03      	ldr	r3, [sp, #12]
    26a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    26ac:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    26ae:	9b01      	ldr	r3, [sp, #4]
    26b0:	685b      	ldr	r3, [r3, #4]
    26b2:	3b01      	subs	r3, #1
    26b4:	021b      	lsls	r3, r3, #8
    26b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    26ba:	9a03      	ldr	r2, [sp, #12]
    26bc:	4313      	orrs	r3, r2
    26be:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    26c0:	4a02      	ldr	r2, [pc, #8]	; (26cc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    26c2:	9b03      	ldr	r3, [sp, #12]
    26c4:	6053      	str	r3, [r2, #4]
}
    26c6:	bf00      	nop
    26c8:	b004      	add	sp, #16
    26ca:	4770      	bx	lr
    26cc:	40048000 	.word	0x40048000

000026d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    26d0:	b084      	sub	sp, #16
    26d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    26d4:	4919      	ldr	r1, [pc, #100]	; (273c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    26d6:	9b01      	ldr	r3, [sp, #4]
    26d8:	681a      	ldr	r2, [r3, #0]
    26da:	4819      	ldr	r0, [pc, #100]	; (2740 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    26dc:	4613      	mov	r3, r2
    26de:	00db      	lsls	r3, r3, #3
    26e0:	4413      	add	r3, r2
    26e2:	4403      	add	r3, r0
    26e4:	3305      	adds	r3, #5
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    26ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    26ee:	9b03      	ldr	r3, [sp, #12]
    26f0:	f023 030f 	bic.w	r3, r3, #15
    26f4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	685b      	ldr	r3, [r3, #4]
    26fa:	3b01      	subs	r3, #1
    26fc:	f003 0307 	and.w	r3, r3, #7
    2700:	9a03      	ldr	r2, [sp, #12]
    2702:	4313      	orrs	r3, r2
    2704:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	7a1b      	ldrb	r3, [r3, #8]
    270a:	3b01      	subs	r3, #1
    270c:	00db      	lsls	r3, r3, #3
    270e:	f003 0308 	and.w	r3, r3, #8
    2712:	9a03      	ldr	r2, [sp, #12]
    2714:	4313      	orrs	r3, r2
    2716:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2718:	4908      	ldr	r1, [pc, #32]	; (273c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    271a:	9b01      	ldr	r3, [sp, #4]
    271c:	681a      	ldr	r2, [r3, #0]
    271e:	4808      	ldr	r0, [pc, #32]	; (2740 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2720:	4613      	mov	r3, r2
    2722:	00db      	lsls	r3, r3, #3
    2724:	4413      	add	r3, r2
    2726:	4403      	add	r3, r0
    2728:	3305      	adds	r3, #5
    272a:	781b      	ldrb	r3, [r3, #0]
    272c:	461a      	mov	r2, r3
    272e:	9b03      	ldr	r3, [sp, #12]
    2730:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2734:	bf00      	nop
    2736:	b004      	add	sp, #16
    2738:	4770      	bx	lr
    273a:	bf00      	nop
    273c:	40065000 	.word	0x40065000
    2740:	0000b028 	.word	0x0000b028

00002744 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2744:	b084      	sub	sp, #16
    2746:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2748:	4b10      	ldr	r3, [pc, #64]	; (278c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    274a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    274c:	4a0f      	ldr	r2, [pc, #60]	; (278c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2752:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2754:	4b0d      	ldr	r3, [pc, #52]	; (278c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2758:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    275a:	9b03      	ldr	r3, [sp, #12]
    275c:	f023 030f 	bic.w	r3, r3, #15
    2760:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2762:	9b01      	ldr	r3, [sp, #4]
    2764:	685b      	ldr	r3, [r3, #4]
    2766:	3b01      	subs	r3, #1
    2768:	005b      	lsls	r3, r3, #1
    276a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    276e:	9b01      	ldr	r3, [sp, #4]
    2770:	7a1b      	ldrb	r3, [r3, #8]
    2772:	3b01      	subs	r3, #1
    2774:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2778:	4313      	orrs	r3, r2
    277a:	9a03      	ldr	r2, [sp, #12]
    277c:	4313      	orrs	r3, r2
    277e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2780:	4a02      	ldr	r2, [pc, #8]	; (278c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2782:	9b03      	ldr	r3, [sp, #12]
    2784:	6693      	str	r3, [r2, #104]	; 0x68
}
    2786:	bf00      	nop
    2788:	b004      	add	sp, #16
    278a:	4770      	bx	lr
    278c:	40048000 	.word	0x40048000

00002790 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2790:	b082      	sub	sp, #8
    2792:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2794:	bf00      	nop
    2796:	b002      	add	sp, #8
    2798:	4770      	bx	lr
	...

0000279c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    279c:	b082      	sub	sp, #8
    279e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    27a0:	bf00      	nop
    27a2:	b002      	add	sp, #8
    27a4:	4770      	bx	lr

000027a6 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    27a6:	b082      	sub	sp, #8
    27a8:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    27aa:	bf00      	nop
    27ac:	b002      	add	sp, #8
    27ae:	4770      	bx	lr

000027b0 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27b0:	b500      	push	{lr}
    27b2:	b083      	sub	sp, #12
    27b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27b6:	9b01      	ldr	r3, [sp, #4]
    27b8:	2b00      	cmp	r3, #0
    27ba:	d002      	beq.n	27c2 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    27bc:	9801      	ldr	r0, [sp, #4]
    27be:	f000 f86a 	bl	2896 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27c2:	bf00      	nop
    27c4:	b003      	add	sp, #12
    27c6:	f85d fb04 	ldr.w	pc, [sp], #4

000027ca <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27ca:	b500      	push	{lr}
    27cc:	b083      	sub	sp, #12
    27ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27d0:	9b01      	ldr	r3, [sp, #4]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d002      	beq.n	27dc <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    27d6:	9801      	ldr	r0, [sp, #4]
    27d8:	f000 f884 	bl	28e4 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    27dc:	bf00      	nop
    27de:	b003      	add	sp, #12
    27e0:	f85d fb04 	ldr.w	pc, [sp], #4

000027e4 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27e4:	b500      	push	{lr}
    27e6:	b089      	sub	sp, #36	; 0x24
    27e8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    27ea:	2300      	movs	r3, #0
    27ec:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    27f0:	9b01      	ldr	r3, [sp, #4]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d031      	beq.n	285a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    27f6:	4b1b      	ldr	r3, [pc, #108]	; (2864 <Clock_Ip_CompleteSOSC+0x80>)
    27f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27fc:	f003 0301 	and.w	r3, r3, #1
    2800:	2b00      	cmp	r3, #0
    2802:	d02a      	beq.n	285a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2804:	aa03      	add	r2, sp, #12
    2806:	a904      	add	r1, sp, #16
    2808:	a805      	add	r0, sp, #20
    280a:	f24c 3350 	movw	r3, #50000	; 0xc350
    280e:	f7ff fd1d 	bl	224c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2812:	4b14      	ldr	r3, [pc, #80]	; (2864 <Clock_Ip_CompleteSOSC+0x80>)
    2814:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2818:	0e1b      	lsrs	r3, r3, #24
    281a:	f003 0301 	and.w	r3, r3, #1
    281e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2820:	9a03      	ldr	r2, [sp, #12]
    2822:	a904      	add	r1, sp, #16
    2824:	ab05      	add	r3, sp, #20
    2826:	4618      	mov	r0, r3
    2828:	f7ff fd2a 	bl	2280 <Clock_Ip_TimeoutExpired>
    282c:	4603      	mov	r3, r0
    282e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2832:	9b06      	ldr	r3, [sp, #24]
    2834:	2b00      	cmp	r3, #0
    2836:	d106      	bne.n	2846 <Clock_Ip_CompleteSOSC+0x62>
    2838:	f89d 301f 	ldrb.w	r3, [sp, #31]
    283c:	f083 0301 	eor.w	r3, r3, #1
    2840:	b2db      	uxtb	r3, r3
    2842:	2b00      	cmp	r3, #0
    2844:	d1e5      	bne.n	2812 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2846:	f89d 301f 	ldrb.w	r3, [sp, #31]
    284a:	2b00      	cmp	r3, #0
    284c:	d005      	beq.n	285a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    284e:	9b01      	ldr	r3, [sp, #4]
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	4619      	mov	r1, r3
    2854:	2001      	movs	r0, #1
    2856:	f7ff fce9 	bl	222c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    285a:	bf00      	nop
    285c:	b009      	add	sp, #36	; 0x24
    285e:	f85d fb04 	ldr.w	pc, [sp], #4
    2862:	bf00      	nop
    2864:	40064000 	.word	0x40064000

00002868 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2868:	b500      	push	{lr}
    286a:	b083      	sub	sp, #12
    286c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    286e:	9801      	ldr	r0, [sp, #4]
    2870:	f000 f8c0 	bl	29f4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2874:	bf00      	nop
    2876:	b003      	add	sp, #12
    2878:	f85d fb04 	ldr.w	pc, [sp], #4

0000287c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    287c:	b500      	push	{lr}
    287e:	b083      	sub	sp, #12
    2880:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2882:	9b01      	ldr	r3, [sp, #4]
    2884:	2b00      	cmp	r3, #0
    2886:	d002      	beq.n	288e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2888:	9801      	ldr	r0, [sp, #4]
    288a:	f000 f8c3 	bl	2a14 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    288e:	bf00      	nop
    2890:	b003      	add	sp, #12
    2892:	f85d fb04 	ldr.w	pc, [sp], #4

00002896 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2896:	b082      	sub	sp, #8
    2898:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    289a:	4b11      	ldr	r3, [pc, #68]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    289c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28a0:	4a0f      	ldr	r2, [pc, #60]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    28a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    28aa:	4b0d      	ldr	r3, [pc, #52]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28b0:	4a0b      	ldr	r2, [pc, #44]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    28b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    28ba:	4b09      	ldr	r3, [pc, #36]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28c0:	4a07      	ldr	r2, [pc, #28]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    28c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    28ca:	4b05      	ldr	r3, [pc, #20]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28d0:	4a03      	ldr	r2, [pc, #12]	; (28e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28d2:	f023 0301 	bic.w	r3, r3, #1
    28d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    28da:	bf00      	nop
    28dc:	b002      	add	sp, #8
    28de:	4770      	bx	lr
    28e0:	40064000 	.word	0x40064000

000028e4 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    28e4:	b082      	sub	sp, #8
    28e6:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    28e8:	9b01      	ldr	r3, [sp, #4]
    28ea:	891b      	ldrh	r3, [r3, #8]
    28ec:	2b01      	cmp	r3, #1
    28ee:	d174      	bne.n	29da <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    28f0:	9b01      	ldr	r3, [sp, #4]
    28f2:	7bdb      	ldrb	r3, [r3, #15]
    28f4:	2b00      	cmp	r3, #0
    28f6:	d002      	beq.n	28fe <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    28f8:	2b01      	cmp	r3, #1
    28fa:	d009      	beq.n	2910 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    28fc:	e011      	b.n	2922 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    28fe:	4b39      	ldr	r3, [pc, #228]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2900:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2904:	4a37      	ldr	r2, [pc, #220]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2906:	f023 0308 	bic.w	r3, r3, #8
    290a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    290e:	e008      	b.n	2922 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2910:	4b34      	ldr	r3, [pc, #208]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2912:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2916:	4a33      	ldr	r2, [pc, #204]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2918:	f043 0308 	orr.w	r3, r3, #8
    291c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2920:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2922:	4b30      	ldr	r3, [pc, #192]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2924:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2928:	4a2e      	ldr	r2, [pc, #184]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    292a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    292e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2932:	9b01      	ldr	r3, [sp, #4]
    2934:	685b      	ldr	r3, [r3, #4]
    2936:	4a2c      	ldr	r2, [pc, #176]	; (29e8 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2938:	4293      	cmp	r3, r2
    293a:	d90d      	bls.n	2958 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	685b      	ldr	r3, [r3, #4]
    2940:	4a2a      	ldr	r2, [pc, #168]	; (29ec <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2942:	4293      	cmp	r3, r2
    2944:	d208      	bcs.n	2958 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2946:	4b27      	ldr	r3, [pc, #156]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2948:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    294c:	4a25      	ldr	r2, [pc, #148]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    294e:	f043 0320 	orr.w	r3, r3, #32
    2952:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2956:	e007      	b.n	2968 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2958:	4b22      	ldr	r3, [pc, #136]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    295a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    295e:	4a21      	ldr	r2, [pc, #132]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2960:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2964:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2968:	9b01      	ldr	r3, [sp, #4]
    296a:	7b1b      	ldrb	r3, [r3, #12]
    296c:	2b00      	cmp	r3, #0
    296e:	d108      	bne.n	2982 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2970:	4b1c      	ldr	r3, [pc, #112]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2972:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2976:	4a1b      	ldr	r2, [pc, #108]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2978:	f043 0304 	orr.w	r3, r3, #4
    297c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2980:	e007      	b.n	2992 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2982:	4b18      	ldr	r3, [pc, #96]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2984:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2988:	4a16      	ldr	r2, [pc, #88]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    298a:	f023 0304 	bic.w	r3, r3, #4
    298e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2992:	9b01      	ldr	r3, [sp, #4]
    2994:	7c1b      	ldrb	r3, [r3, #16]
    2996:	2b02      	cmp	r3, #2
    2998:	d011      	beq.n	29be <Clock_Ip_SetSOSC_TrustedCall+0xda>
    299a:	2b02      	cmp	r3, #2
    299c:	dc14      	bgt.n	29c8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    299e:	2b00      	cmp	r3, #0
    29a0:	d002      	beq.n	29a8 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    29a2:	2b01      	cmp	r3, #1
    29a4:	d005      	beq.n	29b2 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    29a6:	e00f      	b.n	29c8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    29a8:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29aa:	2201      	movs	r2, #1
    29ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    29b0:	e014      	b.n	29dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    29b2:	4b0c      	ldr	r3, [pc, #48]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    29b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    29bc:	e00e      	b.n	29dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    29be:	4b09      	ldr	r3, [pc, #36]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29c0:	4a0b      	ldr	r2, [pc, #44]	; (29f0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    29c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    29c6:	e009      	b.n	29dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    29c8:	4b06      	ldr	r3, [pc, #24]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    29ce:	4a05      	ldr	r2, [pc, #20]	; (29e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29d0:	f043 0301 	orr.w	r3, r3, #1
    29d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    29d8:	e000      	b.n	29dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    29da:	bf00      	nop
}
    29dc:	bf00      	nop
    29de:	b002      	add	sp, #8
    29e0:	4770      	bx	lr
    29e2:	bf00      	nop
    29e4:	40064000 	.word	0x40064000
    29e8:	003d08ff 	.word	0x003d08ff
    29ec:	007a1200 	.word	0x007a1200
    29f0:	00030001 	.word	0x00030001

000029f4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    29f4:	b082      	sub	sp, #8
    29f6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    29f8:	4b05      	ldr	r3, [pc, #20]	; (2a10 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    29fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    29fe:	4a04      	ldr	r2, [pc, #16]	; (2a10 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2a00:	f023 0301 	bic.w	r3, r3, #1
    2a04:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2a08:	bf00      	nop
    2a0a:	b002      	add	sp, #8
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop
    2a10:	40064000 	.word	0x40064000

00002a14 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2a14:	b082      	sub	sp, #8
    2a16:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2a18:	9b01      	ldr	r3, [sp, #4]
    2a1a:	891b      	ldrh	r3, [r3, #8]
    2a1c:	2b01      	cmp	r3, #1
    2a1e:	d107      	bne.n	2a30 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2a20:	4b05      	ldr	r3, [pc, #20]	; (2a38 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2a22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a26:	4a04      	ldr	r2, [pc, #16]	; (2a38 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2a28:	f043 0301 	orr.w	r3, r3, #1
    2a2c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2a30:	bf00      	nop
    2a32:	b002      	add	sp, #8
    2a34:	4770      	bx	lr
    2a36:	bf00      	nop
    2a38:	40064000 	.word	0x40064000

00002a3c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2a3c:	b082      	sub	sp, #8
    2a3e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a40:	bf00      	nop
    2a42:	b002      	add	sp, #8
    2a44:	4770      	bx	lr

00002a46 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2a46:	b082      	sub	sp, #8
    2a48:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2a4a:	2300      	movs	r3, #0
}
    2a4c:	4618      	mov	r0, r3
    2a4e:	b002      	add	sp, #8
    2a50:	4770      	bx	lr

00002a52 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2a52:	b082      	sub	sp, #8
    2a54:	9001      	str	r0, [sp, #4]
    2a56:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2a58:	bf00      	nop
    2a5a:	b002      	add	sp, #8
    2a5c:	4770      	bx	lr
	...

00002a60 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2a60:	b082      	sub	sp, #8
    2a62:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a64:	bf00      	nop
    2a66:	b002      	add	sp, #8
    2a68:	4770      	bx	lr

00002a6a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a6a:	b082      	sub	sp, #8
    2a6c:	9001      	str	r0, [sp, #4]
    2a6e:	460b      	mov	r3, r1
    2a70:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2a74:	bf00      	nop
    2a76:	b002      	add	sp, #8
    2a78:	4770      	bx	lr

00002a7a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2a7a:	b500      	push	{lr}
    2a7c:	b083      	sub	sp, #12
    2a7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a80:	9b01      	ldr	r3, [sp, #4]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d002      	beq.n	2a8c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2a86:	9801      	ldr	r0, [sp, #4]
    2a88:	f000 f8e7 	bl	2c5a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a8c:	bf00      	nop
    2a8e:	b003      	add	sp, #12
    2a90:	f85d fb04 	ldr.w	pc, [sp], #4

00002a94 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a94:	b500      	push	{lr}
    2a96:	b085      	sub	sp, #20
    2a98:	9001      	str	r0, [sp, #4]
    2a9a:	460b      	mov	r3, r1
    2a9c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2aa0:	9b01      	ldr	r3, [sp, #4]
    2aa2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2aa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d003      	beq.n	2ab4 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2aac:	2300      	movs	r3, #0
    2aae:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ab2:	e002      	b.n	2aba <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2ab4:	2301      	movs	r3, #1
    2ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2aba:	ab02      	add	r3, sp, #8
    2abc:	4618      	mov	r0, r3
    2abe:	f7ff ffdc 	bl	2a7a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2ac2:	bf00      	nop
    2ac4:	b005      	add	sp, #20
    2ac6:	f85d fb04 	ldr.w	pc, [sp], #4

00002aca <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2aca:	b500      	push	{lr}
    2acc:	b083      	sub	sp, #12
    2ace:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ad0:	9b01      	ldr	r3, [sp, #4]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d002      	beq.n	2adc <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2ad6:	9801      	ldr	r0, [sp, #4]
    2ad8:	f000 f8d6 	bl	2c88 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2adc:	bf00      	nop
    2ade:	b003      	add	sp, #12
    2ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ae4 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ae4:	b500      	push	{lr}
    2ae6:	b085      	sub	sp, #20
    2ae8:	9001      	str	r0, [sp, #4]
    2aea:	460b      	mov	r3, r1
    2aec:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2af0:	9b01      	ldr	r3, [sp, #4]
    2af2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2af4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d003      	beq.n	2b04 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2afc:	2300      	movs	r3, #0
    2afe:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b02:	e002      	b.n	2b0a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b04:	2301      	movs	r3, #1
    2b06:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2b0a:	ab02      	add	r3, sp, #8
    2b0c:	4618      	mov	r0, r3
    2b0e:	f7ff ffdc 	bl	2aca <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2b12:	bf00      	nop
    2b14:	b005      	add	sp, #20
    2b16:	f85d fb04 	ldr.w	pc, [sp], #4

00002b1a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2b1a:	b500      	push	{lr}
    2b1c:	b083      	sub	sp, #12
    2b1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b20:	9b01      	ldr	r3, [sp, #4]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d002      	beq.n	2b2c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2b26:	9801      	ldr	r0, [sp, #4]
    2b28:	f000 f8c6 	bl	2cb8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b2c:	bf00      	nop
    2b2e:	b003      	add	sp, #12
    2b30:	f85d fb04 	ldr.w	pc, [sp], #4

00002b34 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b34:	b500      	push	{lr}
    2b36:	b085      	sub	sp, #20
    2b38:	9001      	str	r0, [sp, #4]
    2b3a:	460b      	mov	r3, r1
    2b3c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b40:	9b01      	ldr	r3, [sp, #4]
    2b42:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d003      	beq.n	2b54 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2b4c:	2300      	movs	r3, #0
    2b4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b52:	e002      	b.n	2b5a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b54:	2301      	movs	r3, #1
    2b56:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2b5a:	ab02      	add	r3, sp, #8
    2b5c:	4618      	mov	r0, r3
    2b5e:	f7ff ffdc 	bl	2b1a <Clock_Ip_ClockSetSimClkoutEnable>
}
    2b62:	bf00      	nop
    2b64:	b005      	add	sp, #20
    2b66:	f85d fb04 	ldr.w	pc, [sp], #4

00002b6a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2b6a:	b500      	push	{lr}
    2b6c:	b083      	sub	sp, #12
    2b6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b70:	9b01      	ldr	r3, [sp, #4]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d002      	beq.n	2b7c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2b76:	9801      	ldr	r0, [sp, #4]
    2b78:	f000 f8b6 	bl	2ce8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b7c:	bf00      	nop
    2b7e:	b003      	add	sp, #12
    2b80:	f85d fb04 	ldr.w	pc, [sp], #4

00002b84 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b84:	b500      	push	{lr}
    2b86:	b085      	sub	sp, #20
    2b88:	9001      	str	r0, [sp, #4]
    2b8a:	460b      	mov	r3, r1
    2b8c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b90:	9b01      	ldr	r3, [sp, #4]
    2b92:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d003      	beq.n	2ba4 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2b9c:	2300      	movs	r3, #0
    2b9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ba2:	e002      	b.n	2baa <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2ba4:	2301      	movs	r3, #1
    2ba6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2baa:	ab02      	add	r3, sp, #8
    2bac:	4618      	mov	r0, r3
    2bae:	f7ff ffdc 	bl	2b6a <Clock_Ip_ClockSetPccCgcEnable>
}
    2bb2:	bf00      	nop
    2bb4:	b005      	add	sp, #20
    2bb6:	f85d fb04 	ldr.w	pc, [sp], #4

00002bba <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2bba:	b500      	push	{lr}
    2bbc:	b083      	sub	sp, #12
    2bbe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bc0:	9b01      	ldr	r3, [sp, #4]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d002      	beq.n	2bcc <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2bc6:	9801      	ldr	r0, [sp, #4]
    2bc8:	f000 f8bc 	bl	2d44 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bcc:	bf00      	nop
    2bce:	b003      	add	sp, #12
    2bd0:	f85d fb04 	ldr.w	pc, [sp], #4

00002bd4 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2bd4:	b500      	push	{lr}
    2bd6:	b085      	sub	sp, #20
    2bd8:	9001      	str	r0, [sp, #4]
    2bda:	460b      	mov	r3, r1
    2bdc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2be0:	9b01      	ldr	r3, [sp, #4]
    2be2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2be4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d003      	beq.n	2bf4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2bec:	2300      	movs	r3, #0
    2bee:	f8ad 300c 	strh.w	r3, [sp, #12]
    2bf2:	e002      	b.n	2bfa <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2bf4:	2301      	movs	r3, #1
    2bf6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2bfa:	ab02      	add	r3, sp, #8
    2bfc:	4618      	mov	r0, r3
    2bfe:	f7ff ffdc 	bl	2bba <Clock_Ip_ClockSetSimGate>
}
    2c02:	bf00      	nop
    2c04:	b005      	add	sp, #20
    2c06:	f85d fb04 	ldr.w	pc, [sp], #4

00002c0a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2c0a:	b500      	push	{lr}
    2c0c:	b083      	sub	sp, #12
    2c0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c10:	9b01      	ldr	r3, [sp, #4]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d002      	beq.n	2c1c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2c16:	9801      	ldr	r0, [sp, #4]
    2c18:	f000 f8c0 	bl	2d9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c1c:	bf00      	nop
    2c1e:	b003      	add	sp, #12
    2c20:	f85d fb04 	ldr.w	pc, [sp], #4

00002c24 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2c24:	b500      	push	{lr}
    2c26:	b085      	sub	sp, #20
    2c28:	9001      	str	r0, [sp, #4]
    2c2a:	460b      	mov	r3, r1
    2c2c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2c34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d003      	beq.n	2c44 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2c3c:	2300      	movs	r3, #0
    2c3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2c42:	e002      	b.n	2c4a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2c44:	2301      	movs	r3, #1
    2c46:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2c4a:	ab02      	add	r3, sp, #8
    2c4c:	4618      	mov	r0, r3
    2c4e:	f7ff ffdc 	bl	2c0a <Clock_Ip_ClockSetSimTraceEnable>
}
    2c52:	bf00      	nop
    2c54:	b005      	add	sp, #20
    2c56:	f85d fb04 	ldr.w	pc, [sp], #4

00002c5a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c5a:	b084      	sub	sp, #16
    2c5c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2c5e:	4b09      	ldr	r3, [pc, #36]	; (2c84 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2c60:	691b      	ldr	r3, [r3, #16]
    2c62:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2c64:	9b03      	ldr	r3, [sp, #12]
    2c66:	f023 0301 	bic.w	r3, r3, #1
    2c6a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2c6c:	9b01      	ldr	r3, [sp, #4]
    2c6e:	889b      	ldrh	r3, [r3, #4]
    2c70:	461a      	mov	r2, r3
    2c72:	9b03      	ldr	r3, [sp, #12]
    2c74:	4313      	orrs	r3, r2
    2c76:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2c78:	4a02      	ldr	r2, [pc, #8]	; (2c84 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2c7a:	9b03      	ldr	r3, [sp, #12]
    2c7c:	6113      	str	r3, [r2, #16]
}
    2c7e:	bf00      	nop
    2c80:	b004      	add	sp, #16
    2c82:	4770      	bx	lr
    2c84:	40048000 	.word	0x40048000

00002c88 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c88:	b084      	sub	sp, #16
    2c8a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2c8c:	4b09      	ldr	r3, [pc, #36]	; (2cb4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2c8e:	691b      	ldr	r3, [r3, #16]
    2c90:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2c92:	9b03      	ldr	r3, [sp, #12]
    2c94:	f023 0302 	bic.w	r3, r3, #2
    2c98:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2c9a:	9b01      	ldr	r3, [sp, #4]
    2c9c:	889b      	ldrh	r3, [r3, #4]
    2c9e:	005b      	lsls	r3, r3, #1
    2ca0:	9a03      	ldr	r2, [sp, #12]
    2ca2:	4313      	orrs	r3, r2
    2ca4:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2ca6:	4a03      	ldr	r2, [pc, #12]	; (2cb4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2ca8:	9b03      	ldr	r3, [sp, #12]
    2caa:	6113      	str	r3, [r2, #16]
}
    2cac:	bf00      	nop
    2cae:	b004      	add	sp, #16
    2cb0:	4770      	bx	lr
    2cb2:	bf00      	nop
    2cb4:	40048000 	.word	0x40048000

00002cb8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2cb8:	b084      	sub	sp, #16
    2cba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2cbc:	4b09      	ldr	r3, [pc, #36]	; (2ce4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2cbe:	685b      	ldr	r3, [r3, #4]
    2cc0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2cc2:	9b03      	ldr	r3, [sp, #12]
    2cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2cc8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2cca:	9b01      	ldr	r3, [sp, #4]
    2ccc:	889b      	ldrh	r3, [r3, #4]
    2cce:	02db      	lsls	r3, r3, #11
    2cd0:	9a03      	ldr	r2, [sp, #12]
    2cd2:	4313      	orrs	r3, r2
    2cd4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2cd6:	4a03      	ldr	r2, [pc, #12]	; (2ce4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2cd8:	9b03      	ldr	r3, [sp, #12]
    2cda:	6053      	str	r3, [r2, #4]
}
    2cdc:	bf00      	nop
    2cde:	b004      	add	sp, #16
    2ce0:	4770      	bx	lr
    2ce2:	bf00      	nop
    2ce4:	40048000 	.word	0x40048000

00002ce8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ce8:	b084      	sub	sp, #16
    2cea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2cec:	4913      	ldr	r1, [pc, #76]	; (2d3c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2cee:	9b01      	ldr	r3, [sp, #4]
    2cf0:	681a      	ldr	r2, [r3, #0]
    2cf2:	4813      	ldr	r0, [pc, #76]	; (2d40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2cf4:	4613      	mov	r3, r2
    2cf6:	00db      	lsls	r3, r3, #3
    2cf8:	4413      	add	r3, r2
    2cfa:	4403      	add	r3, r0
    2cfc:	3306      	adds	r3, #6
    2cfe:	781b      	ldrb	r3, [r3, #0]
    2d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2d04:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2d06:	9b03      	ldr	r3, [sp, #12]
    2d08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2d0c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2d0e:	9b01      	ldr	r3, [sp, #4]
    2d10:	889b      	ldrh	r3, [r3, #4]
    2d12:	079b      	lsls	r3, r3, #30
    2d14:	9a03      	ldr	r2, [sp, #12]
    2d16:	4313      	orrs	r3, r2
    2d18:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2d1a:	4908      	ldr	r1, [pc, #32]	; (2d3c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2d1c:	9b01      	ldr	r3, [sp, #4]
    2d1e:	681a      	ldr	r2, [r3, #0]
    2d20:	4807      	ldr	r0, [pc, #28]	; (2d40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2d22:	4613      	mov	r3, r2
    2d24:	00db      	lsls	r3, r3, #3
    2d26:	4413      	add	r3, r2
    2d28:	4403      	add	r3, r0
    2d2a:	3306      	adds	r3, #6
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	461a      	mov	r2, r3
    2d30:	9b03      	ldr	r3, [sp, #12]
    2d32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2d36:	bf00      	nop
    2d38:	b004      	add	sp, #16
    2d3a:	4770      	bx	lr
    2d3c:	40065000 	.word	0x40065000
    2d40:	0000b028 	.word	0x0000b028

00002d44 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d44:	b086      	sub	sp, #24
    2d46:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	889b      	ldrh	r3, [r3, #4]
    2d4c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2d4e:	9b01      	ldr	r3, [sp, #4]
    2d50:	681a      	ldr	r2, [r3, #0]
    2d52:	4910      	ldr	r1, [pc, #64]	; (2d94 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2d54:	4613      	mov	r3, r2
    2d56:	00db      	lsls	r3, r3, #3
    2d58:	4413      	add	r3, r2
    2d5a:	440b      	add	r3, r1
    2d5c:	3306      	adds	r3, #6
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2d62:	4b0d      	ldr	r3, [pc, #52]	; (2d98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2d66:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2d68:	2201      	movs	r2, #1
    2d6a:	9b04      	ldr	r3, [sp, #16]
    2d6c:	fa02 f303 	lsl.w	r3, r2, r3
    2d70:	43db      	mvns	r3, r3
    2d72:	9a03      	ldr	r2, [sp, #12]
    2d74:	4013      	ands	r3, r2
    2d76:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2d78:	9a05      	ldr	r2, [sp, #20]
    2d7a:	9b04      	ldr	r3, [sp, #16]
    2d7c:	fa02 f303 	lsl.w	r3, r2, r3
    2d80:	9a03      	ldr	r2, [sp, #12]
    2d82:	4313      	orrs	r3, r2
    2d84:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2d86:	4a04      	ldr	r2, [pc, #16]	; (2d98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2d88:	9b03      	ldr	r3, [sp, #12]
    2d8a:	6413      	str	r3, [r2, #64]	; 0x40
}
    2d8c:	bf00      	nop
    2d8e:	b006      	add	sp, #24
    2d90:	4770      	bx	lr
    2d92:	bf00      	nop
    2d94:	0000b028 	.word	0x0000b028
    2d98:	40048000 	.word	0x40048000

00002d9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d9c:	b084      	sub	sp, #16
    2d9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2da0:	4b0a      	ldr	r3, [pc, #40]	; (2dcc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2da4:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	889b      	ldrh	r3, [r3, #4]
    2daa:	2b01      	cmp	r3, #1
    2dac:	d104      	bne.n	2db8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2dae:	9b03      	ldr	r3, [sp, #12]
    2db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2db4:	9303      	str	r3, [sp, #12]
    2db6:	e003      	b.n	2dc0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2db8:	9b03      	ldr	r3, [sp, #12]
    2dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2dbe:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2dc0:	4a02      	ldr	r2, [pc, #8]	; (2dcc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2dc2:	9b03      	ldr	r3, [sp, #12]
    2dc4:	6693      	str	r3, [r2, #104]	; 0x68
}
    2dc6:	bf00      	nop
    2dc8:	b004      	add	sp, #16
    2dca:	4770      	bx	lr
    2dcc:	40048000 	.word	0x40048000

00002dd0 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2dd0:	b082      	sub	sp, #8
    2dd2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2dd4:	bf00      	nop
    2dd6:	b002      	add	sp, #8
    2dd8:	4770      	bx	lr

00002dda <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2dda:	b082      	sub	sp, #8
    2ddc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2dde:	bf00      	nop
    2de0:	b002      	add	sp, #8
    2de2:	4770      	bx	lr

00002de4 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2de4:	b500      	push	{lr}
    2de6:	b083      	sub	sp, #12
    2de8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dea:	9b01      	ldr	r3, [sp, #4]
    2dec:	2b00      	cmp	r3, #0
    2dee:	d002      	beq.n	2df6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2df0:	9801      	ldr	r0, [sp, #4]
    2df2:	f000 f8d1 	bl	2f98 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2df6:	bf00      	nop
    2df8:	b003      	add	sp, #12
    2dfa:	f85d fb04 	ldr.w	pc, [sp], #4

00002dfe <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2dfe:	b500      	push	{lr}
    2e00:	b083      	sub	sp, #12
    2e02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e04:	9b01      	ldr	r3, [sp, #4]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d002      	beq.n	2e10 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2e0a:	9801      	ldr	r0, [sp, #4]
    2e0c:	f000 f950 	bl	30b0 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e10:	bf00      	nop
    2e12:	b003      	add	sp, #12
    2e14:	f85d fb04 	ldr.w	pc, [sp], #4

00002e18 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2e18:	b500      	push	{lr}
    2e1a:	b083      	sub	sp, #12
    2e1c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2e1e:	9801      	ldr	r0, [sp, #4]
    2e20:	f000 f98e 	bl	3140 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e24:	bf00      	nop
    2e26:	b003      	add	sp, #12
    2e28:	f85d fb04 	ldr.w	pc, [sp], #4

00002e2c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2e2c:	b500      	push	{lr}
    2e2e:	b083      	sub	sp, #12
    2e30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e32:	9b01      	ldr	r3, [sp, #4]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d002      	beq.n	2e3e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2e38:	9801      	ldr	r0, [sp, #4]
    2e3a:	f000 f999 	bl	3170 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e3e:	bf00      	nop
    2e40:	b003      	add	sp, #12
    2e42:	f85d fb04 	ldr.w	pc, [sp], #4

00002e46 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2e46:	b500      	push	{lr}
    2e48:	b083      	sub	sp, #12
    2e4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e4c:	9b01      	ldr	r3, [sp, #4]
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d002      	beq.n	2e58 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2e52:	9801      	ldr	r0, [sp, #4]
    2e54:	f000 f9b0 	bl	31b8 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e58:	bf00      	nop
    2e5a:	b003      	add	sp, #12
    2e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e60 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2e60:	b500      	push	{lr}
    2e62:	b083      	sub	sp, #12
    2e64:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2e66:	9801      	ldr	r0, [sp, #4]
    2e68:	f000 f9ba 	bl	31e0 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e6c:	bf00      	nop
    2e6e:	b003      	add	sp, #12
    2e70:	f85d fb04 	ldr.w	pc, [sp], #4

00002e74 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2e74:	b500      	push	{lr}
    2e76:	b083      	sub	sp, #12
    2e78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e7a:	9b01      	ldr	r3, [sp, #4]
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d002      	beq.n	2e86 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2e80:	9801      	ldr	r0, [sp, #4]
    2e82:	f000 f9bd 	bl	3200 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e86:	bf00      	nop
    2e88:	b003      	add	sp, #12
    2e8a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e8e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2e8e:	b500      	push	{lr}
    2e90:	b083      	sub	sp, #12
    2e92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e94:	9b01      	ldr	r3, [sp, #4]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d002      	beq.n	2ea0 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2e9a:	9801      	ldr	r0, [sp, #4]
    2e9c:	f000 f9d4 	bl	3248 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ea0:	bf00      	nop
    2ea2:	b003      	add	sp, #12
    2ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ea8 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2ea8:	b500      	push	{lr}
    2eaa:	b083      	sub	sp, #12
    2eac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2eae:	9801      	ldr	r0, [sp, #4]
    2eb0:	f000 f9de 	bl	3270 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2eb4:	bf00      	nop
    2eb6:	b003      	add	sp, #12
    2eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ebc <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2ebc:	b500      	push	{lr}
    2ebe:	b089      	sub	sp, #36	; 0x24
    2ec0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2ec2:	2300      	movs	r3, #0
    2ec4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2ec8:	4b20      	ldr	r3, [pc, #128]	; (2f4c <SetInputSouceSytemClock+0x90>)
    2eca:	695b      	ldr	r3, [r3, #20]
    2ecc:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2ece:	9b06      	ldr	r3, [sp, #24]
    2ed0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2ed4:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2ed6:	9b01      	ldr	r3, [sp, #4]
    2ed8:	061b      	lsls	r3, r3, #24
    2eda:	9a06      	ldr	r2, [sp, #24]
    2edc:	4313      	orrs	r3, r2
    2ede:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2ee0:	4a1a      	ldr	r2, [pc, #104]	; (2f4c <SetInputSouceSytemClock+0x90>)
    2ee2:	9b06      	ldr	r3, [sp, #24]
    2ee4:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2ee6:	aa02      	add	r2, sp, #8
    2ee8:	a903      	add	r1, sp, #12
    2eea:	a804      	add	r0, sp, #16
    2eec:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ef0:	f7ff f9ac 	bl	224c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2ef4:	4b15      	ldr	r3, [pc, #84]	; (2f4c <SetInputSouceSytemClock+0x90>)
    2ef6:	691b      	ldr	r3, [r3, #16]
    2ef8:	0e1b      	lsrs	r3, r3, #24
    2efa:	f003 030f 	and.w	r3, r3, #15
    2efe:	9a01      	ldr	r2, [sp, #4]
    2f00:	429a      	cmp	r2, r3
    2f02:	bf0c      	ite	eq
    2f04:	2301      	moveq	r3, #1
    2f06:	2300      	movne	r3, #0
    2f08:	b2db      	uxtb	r3, r3
    2f0a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f0c:	9a02      	ldr	r2, [sp, #8]
    2f0e:	a903      	add	r1, sp, #12
    2f10:	ab04      	add	r3, sp, #16
    2f12:	4618      	mov	r0, r3
    2f14:	f7ff f9b4 	bl	2280 <Clock_Ip_TimeoutExpired>
    2f18:	4603      	mov	r3, r0
    2f1a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2f1e:	9b05      	ldr	r3, [sp, #20]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d106      	bne.n	2f32 <SetInputSouceSytemClock+0x76>
    2f24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f28:	f083 0301 	eor.w	r3, r3, #1
    2f2c:	b2db      	uxtb	r3, r3
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d1e0      	bne.n	2ef4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2f32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d003      	beq.n	2f42 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2f3a:	2105      	movs	r1, #5
    2f3c:	2001      	movs	r0, #1
    2f3e:	f7ff f975 	bl	222c <Clock_Ip_ReportClockErrors>
    }
}
    2f42:	bf00      	nop
    2f44:	b009      	add	sp, #36	; 0x24
    2f46:	f85d fb04 	ldr.w	pc, [sp], #4
    2f4a:	bf00      	nop
    2f4c:	40064000 	.word	0x40064000

00002f50 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2f50:	b500      	push	{lr}
    2f52:	b083      	sub	sp, #12
    2f54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f56:	9b01      	ldr	r3, [sp, #4]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d002      	beq.n	2f62 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2f5c:	9801      	ldr	r0, [sp, #4]
    2f5e:	f000 f997 	bl	3290 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f62:	bf00      	nop
    2f64:	b003      	add	sp, #12
    2f66:	f85d fb04 	ldr.w	pc, [sp], #4

00002f6a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2f6a:	b500      	push	{lr}
    2f6c:	b083      	sub	sp, #12
    2f6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f70:	9b01      	ldr	r3, [sp, #4]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d002      	beq.n	2f7c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2f76:	9801      	ldr	r0, [sp, #4]
    2f78:	f000 fa7e 	bl	3478 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f7c:	bf00      	nop
    2f7e:	b003      	add	sp, #12
    2f80:	f85d fb04 	ldr.w	pc, [sp], #4

00002f84 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2f84:	b500      	push	{lr}
    2f86:	b083      	sub	sp, #12
    2f88:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2f8a:	9801      	ldr	r0, [sp, #4]
    2f8c:	f000 fab8 	bl	3500 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f90:	bf00      	nop
    2f92:	b003      	add	sp, #12
    2f94:	f85d fb04 	ldr.w	pc, [sp], #4

00002f98 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2f98:	b500      	push	{lr}
    2f9a:	b08b      	sub	sp, #44	; 0x2c
    2f9c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2f9e:	2300      	movs	r3, #0
    2fa0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2fa4:	9b01      	ldr	r3, [sp, #4]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d10b      	bne.n	2fc2 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2faa:	2305      	movs	r3, #5
    2fac:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2fae:	2301      	movs	r3, #1
    2fb0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2fb4:	2301      	movs	r3, #1
    2fb6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2fba:	2301      	movs	r3, #1
    2fbc:	f88d 3010 	strb.w	r3, [sp, #16]
    2fc0:	e00e      	b.n	2fe0 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2fc2:	9b01      	ldr	r3, [sp, #4]
    2fc4:	681b      	ldr	r3, [r3, #0]
    2fc6:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2fc8:	9b01      	ldr	r3, [sp, #4]
    2fca:	79db      	ldrb	r3, [r3, #7]
    2fcc:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	889b      	ldrh	r3, [r3, #4]
    2fd4:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2fd8:	9b01      	ldr	r3, [sp, #4]
    2fda:	7a1b      	ldrb	r3, [r3, #8]
    2fdc:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2fe0:	4b32      	ldr	r3, [pc, #200]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fe6:	4a31      	ldr	r2, [pc, #196]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fe8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2fec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2ff0:	4b2e      	ldr	r3, [pc, #184]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ff6:	4a2d      	ldr	r2, [pc, #180]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ff8:	f023 0301 	bic.w	r3, r3, #1
    2ffc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3000:	4b2a      	ldr	r3, [pc, #168]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3006:	4a29      	ldr	r2, [pc, #164]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3008:	f023 0304 	bic.w	r3, r3, #4
    300c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3010:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3014:	2b01      	cmp	r3, #1
    3016:	d144      	bne.n	30a2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3018:	f89d 300f 	ldrb.w	r3, [sp, #15]
    301c:	4a23      	ldr	r2, [pc, #140]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    301e:	f003 0301 	and.w	r3, r3, #1
    3022:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3026:	4b21      	ldr	r3, [pc, #132]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3028:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    302c:	4a1f      	ldr	r2, [pc, #124]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    302e:	f043 0301 	orr.w	r3, r3, #1
    3032:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3036:	4b1d      	ldr	r3, [pc, #116]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3038:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    303c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3040:	009b      	lsls	r3, r3, #2
    3042:	f003 0304 	and.w	r3, r3, #4
    3046:	4919      	ldr	r1, [pc, #100]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3048:	4313      	orrs	r3, r2
    304a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    304e:	aa05      	add	r2, sp, #20
    3050:	a906      	add	r1, sp, #24
    3052:	a807      	add	r0, sp, #28
    3054:	f24c 3350 	movw	r3, #50000	; 0xc350
    3058:	f7ff f8f8 	bl	224c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    305c:	4b13      	ldr	r3, [pc, #76]	; (30ac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    305e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3062:	0e1b      	lsrs	r3, r3, #24
    3064:	f003 0301 	and.w	r3, r3, #1
    3068:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    306a:	9a05      	ldr	r2, [sp, #20]
    306c:	a906      	add	r1, sp, #24
    306e:	ab07      	add	r3, sp, #28
    3070:	4618      	mov	r0, r3
    3072:	f7ff f905 	bl	2280 <Clock_Ip_TimeoutExpired>
    3076:	4603      	mov	r3, r0
    3078:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    307c:	9b08      	ldr	r3, [sp, #32]
    307e:	2b00      	cmp	r3, #0
    3080:	d106      	bne.n	3090 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3082:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3086:	f083 0301 	eor.w	r3, r3, #1
    308a:	b2db      	uxtb	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	d1e5      	bne.n	305c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3090:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3094:	2b00      	cmp	r3, #0
    3096:	d004      	beq.n	30a2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3098:	9b02      	ldr	r3, [sp, #8]
    309a:	4619      	mov	r1, r3
    309c:	2001      	movs	r0, #1
    309e:	f7ff f8c5 	bl	222c <Clock_Ip_ReportClockErrors>
        }
    }
}
    30a2:	bf00      	nop
    30a4:	b00b      	add	sp, #44	; 0x2c
    30a6:	f85d fb04 	ldr.w	pc, [sp], #4
    30aa:	bf00      	nop
    30ac:	40064000 	.word	0x40064000

000030b0 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30b0:	b500      	push	{lr}
    30b2:	b089      	sub	sp, #36	; 0x24
    30b4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    30b6:	2300      	movs	r3, #0
    30b8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    30bc:	4b1f      	ldr	r3, [pc, #124]	; (313c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30c2:	4a1e      	ldr	r2, [pc, #120]	; (313c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30c4:	f043 0301 	orr.w	r3, r3, #1
    30c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    30cc:	4b1b      	ldr	r3, [pc, #108]	; (313c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30d2:	4a1a      	ldr	r2, [pc, #104]	; (313c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30d4:	f043 0304 	orr.w	r3, r3, #4
    30d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30dc:	aa03      	add	r2, sp, #12
    30de:	a904      	add	r1, sp, #16
    30e0:	a805      	add	r0, sp, #20
    30e2:	f24c 3350 	movw	r3, #50000	; 0xc350
    30e6:	f7ff f8b1 	bl	224c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    30ea:	4b14      	ldr	r3, [pc, #80]	; (313c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30f0:	0e1b      	lsrs	r3, r3, #24
    30f2:	f003 0301 	and.w	r3, r3, #1
    30f6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    30f8:	9a03      	ldr	r2, [sp, #12]
    30fa:	a904      	add	r1, sp, #16
    30fc:	ab05      	add	r3, sp, #20
    30fe:	4618      	mov	r0, r3
    3100:	f7ff f8be 	bl	2280 <Clock_Ip_TimeoutExpired>
    3104:	4603      	mov	r3, r0
    3106:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    310a:	9b06      	ldr	r3, [sp, #24]
    310c:	2b00      	cmp	r3, #0
    310e:	d106      	bne.n	311e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3110:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3114:	f083 0301 	eor.w	r3, r3, #1
    3118:	b2db      	uxtb	r3, r3
    311a:	2b00      	cmp	r3, #0
    311c:	d1e5      	bne.n	30ea <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    311e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3122:	2b00      	cmp	r3, #0
    3124:	d005      	beq.n	3132 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3126:	9b01      	ldr	r3, [sp, #4]
    3128:	681b      	ldr	r3, [r3, #0]
    312a:	4619      	mov	r1, r3
    312c:	2001      	movs	r0, #1
    312e:	f7ff f87d 	bl	222c <Clock_Ip_ReportClockErrors>
    }
}
    3132:	bf00      	nop
    3134:	b009      	add	sp, #36	; 0x24
    3136:	f85d fb04 	ldr.w	pc, [sp], #4
    313a:	bf00      	nop
    313c:	40064000 	.word	0x40064000

00003140 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3140:	b082      	sub	sp, #8
    3142:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3144:	4b09      	ldr	r3, [pc, #36]	; (316c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    314a:	4a08      	ldr	r2, [pc, #32]	; (316c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    314c:	f023 0301 	bic.w	r3, r3, #1
    3150:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3154:	4b05      	ldr	r3, [pc, #20]	; (316c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    315a:	4a04      	ldr	r2, [pc, #16]	; (316c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    315c:	f023 0304 	bic.w	r3, r3, #4
    3160:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3164:	bf00      	nop
    3166:	b002      	add	sp, #8
    3168:	4770      	bx	lr
    316a:	bf00      	nop
    316c:	40064000 	.word	0x40064000

00003170 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3170:	b082      	sub	sp, #8
    3172:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3174:	4b0f      	ldr	r3, [pc, #60]	; (31b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3176:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    317a:	4a0e      	ldr	r2, [pc, #56]	; (31b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    317c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3180:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3184:	4b0b      	ldr	r3, [pc, #44]	; (31b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3186:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    318a:	4a0a      	ldr	r2, [pc, #40]	; (31b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    318c:	f023 0304 	bic.w	r3, r3, #4
    3190:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3194:	4b07      	ldr	r3, [pc, #28]	; (31b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3196:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	7a1b      	ldrb	r3, [r3, #8]
    319e:	009b      	lsls	r3, r3, #2
    31a0:	f003 0304 	and.w	r3, r3, #4
    31a4:	4903      	ldr	r1, [pc, #12]	; (31b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31a6:	4313      	orrs	r3, r2
    31a8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    31ac:	bf00      	nop
    31ae:	b002      	add	sp, #8
    31b0:	4770      	bx	lr
    31b2:	bf00      	nop
    31b4:	40064000 	.word	0x40064000

000031b8 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31b8:	b082      	sub	sp, #8
    31ba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    31bc:	9b01      	ldr	r3, [sp, #4]
    31be:	889b      	ldrh	r3, [r3, #4]
    31c0:	2b01      	cmp	r3, #1
    31c2:	d107      	bne.n	31d4 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    31c4:	4b05      	ldr	r3, [pc, #20]	; (31dc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    31c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31ca:	4a04      	ldr	r2, [pc, #16]	; (31dc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    31cc:	f043 0304 	orr.w	r3, r3, #4
    31d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    31d4:	bf00      	nop
    31d6:	b002      	add	sp, #8
    31d8:	4770      	bx	lr
    31da:	bf00      	nop
    31dc:	40064000 	.word	0x40064000

000031e0 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    31e0:	b082      	sub	sp, #8
    31e2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    31e4:	4b05      	ldr	r3, [pc, #20]	; (31fc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    31e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31ea:	4a04      	ldr	r2, [pc, #16]	; (31fc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    31ec:	f023 0304 	bic.w	r3, r3, #4
    31f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    31f4:	bf00      	nop
    31f6:	b002      	add	sp, #8
    31f8:	4770      	bx	lr
    31fa:	bf00      	nop
    31fc:	40064000 	.word	0x40064000

00003200 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3200:	b082      	sub	sp, #8
    3202:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3204:	4b0f      	ldr	r3, [pc, #60]	; (3244 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3206:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    320a:	4a0e      	ldr	r2, [pc, #56]	; (3244 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    320c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3210:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3214:	4b0b      	ldr	r3, [pc, #44]	; (3244 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    321a:	4a0a      	ldr	r2, [pc, #40]	; (3244 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    321c:	f023 0302 	bic.w	r3, r3, #2
    3220:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3224:	4b07      	ldr	r3, [pc, #28]	; (3244 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3226:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    322a:	9b01      	ldr	r3, [sp, #4]
    322c:	7a5b      	ldrb	r3, [r3, #9]
    322e:	005b      	lsls	r3, r3, #1
    3230:	f003 0302 	and.w	r3, r3, #2
    3234:	4903      	ldr	r1, [pc, #12]	; (3244 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3236:	4313      	orrs	r3, r2
    3238:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    323c:	bf00      	nop
    323e:	b002      	add	sp, #8
    3240:	4770      	bx	lr
    3242:	bf00      	nop
    3244:	40064000 	.word	0x40064000

00003248 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3248:	b082      	sub	sp, #8
    324a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    324c:	9b01      	ldr	r3, [sp, #4]
    324e:	889b      	ldrh	r3, [r3, #4]
    3250:	2b01      	cmp	r3, #1
    3252:	d107      	bne.n	3264 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3254:	4b05      	ldr	r3, [pc, #20]	; (326c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3256:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    325a:	4a04      	ldr	r2, [pc, #16]	; (326c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    325c:	f043 0302 	orr.w	r3, r3, #2
    3260:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3264:	bf00      	nop
    3266:	b002      	add	sp, #8
    3268:	4770      	bx	lr
    326a:	bf00      	nop
    326c:	40064000 	.word	0x40064000

00003270 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3270:	b082      	sub	sp, #8
    3272:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3274:	4b05      	ldr	r3, [pc, #20]	; (328c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3276:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    327a:	4a04      	ldr	r2, [pc, #16]	; (328c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    327c:	f023 0302 	bic.w	r3, r3, #2
    3280:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3284:	bf00      	nop
    3286:	b002      	add	sp, #8
    3288:	4770      	bx	lr
    328a:	bf00      	nop
    328c:	40064000 	.word	0x40064000

00003290 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3290:	b500      	push	{lr}
    3292:	b08b      	sub	sp, #44	; 0x2c
    3294:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3296:	9b01      	ldr	r3, [sp, #4]
    3298:	681a      	ldr	r2, [r3, #0]
    329a:	4975      	ldr	r1, [pc, #468]	; (3470 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    329c:	4613      	mov	r3, r2
    329e:	00db      	lsls	r3, r3, #3
    32a0:	4413      	add	r3, r2
    32a2:	440b      	add	r3, r1
    32a4:	781b      	ldrb	r3, [r3, #0]
    32a6:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    32a8:	2300      	movs	r3, #0
    32aa:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    32ae:	2300      	movs	r3, #0
    32b0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    32b4:	4b6f      	ldr	r3, [pc, #444]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32ba:	4a6e      	ldr	r2, [pc, #440]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    32c0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    32c4:	4b6b      	ldr	r3, [pc, #428]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    32ce:	2b00      	cmp	r3, #0
    32d0:	d07d      	beq.n	33ce <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    32d2:	9b01      	ldr	r3, [sp, #4]
    32d4:	79db      	ldrb	r3, [r3, #7]
    32d6:	461a      	mov	r2, r3
    32d8:	4b66      	ldr	r3, [pc, #408]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32da:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    32de:	f003 0303 	and.w	r3, r3, #3
    32e2:	429a      	cmp	r2, r3
    32e4:	d10b      	bne.n	32fe <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    32e6:	9b01      	ldr	r3, [sp, #4]
    32e8:	799b      	ldrb	r3, [r3, #6]
    32ea:	461a      	mov	r2, r3
    32ec:	4b61      	ldr	r3, [pc, #388]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32f2:	08db      	lsrs	r3, r3, #3
    32f4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    32f8:	429a      	cmp	r2, r3
    32fa:	f000 80b4 	beq.w	3466 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    32fe:	4b5d      	ldr	r3, [pc, #372]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3304:	f003 0301 	and.w	r3, r3, #1
    3308:	2b00      	cmp	r3, #0
    330a:	d105      	bne.n	3318 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    330c:	2301      	movs	r3, #1
    330e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3312:	2000      	movs	r0, #0
    3314:	f7ff fd66 	bl	2de4 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3318:	2002      	movs	r0, #2
    331a:	f7ff fdcf 	bl	2ebc <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    331e:	4b55      	ldr	r3, [pc, #340]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3320:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3324:	4a53      	ldr	r2, [pc, #332]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3326:	f023 0301 	bic.w	r3, r3, #1
    332a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    332e:	9b01      	ldr	r3, [sp, #4]
    3330:	889b      	ldrh	r3, [r3, #4]
    3332:	2b01      	cmp	r3, #1
    3334:	f040 8097 	bne.w	3466 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3338:	9b01      	ldr	r3, [sp, #4]
    333a:	79db      	ldrb	r3, [r3, #7]
    333c:	4a4d      	ldr	r2, [pc, #308]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    333e:	f003 0303 	and.w	r3, r3, #3
    3342:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3346:	4b4b      	ldr	r3, [pc, #300]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3348:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    334c:	9b01      	ldr	r3, [sp, #4]
    334e:	799b      	ldrb	r3, [r3, #6]
    3350:	00db      	lsls	r3, r3, #3
    3352:	f003 0308 	and.w	r3, r3, #8
    3356:	4313      	orrs	r3, r2
    3358:	4a46      	ldr	r2, [pc, #280]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    335a:	f043 0301 	orr.w	r3, r3, #1
    335e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3362:	aa03      	add	r2, sp, #12
    3364:	a904      	add	r1, sp, #16
    3366:	a805      	add	r0, sp, #20
    3368:	f24c 3350 	movw	r3, #50000	; 0xc350
    336c:	f7fe ff6e 	bl	224c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3370:	4b40      	ldr	r3, [pc, #256]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3372:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3376:	0e1b      	lsrs	r3, r3, #24
    3378:	f003 0301 	and.w	r3, r3, #1
    337c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    337e:	9a03      	ldr	r2, [sp, #12]
    3380:	a904      	add	r1, sp, #16
    3382:	ab05      	add	r3, sp, #20
    3384:	4618      	mov	r0, r3
    3386:	f7fe ff7b 	bl	2280 <Clock_Ip_TimeoutExpired>
    338a:	4603      	mov	r3, r0
    338c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3390:	9b06      	ldr	r3, [sp, #24]
    3392:	2b00      	cmp	r3, #0
    3394:	d106      	bne.n	33a4 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3396:	f89d 301f 	ldrb.w	r3, [sp, #31]
    339a:	f083 0301 	eor.w	r3, r3, #1
    339e:	b2db      	uxtb	r3, r3
    33a0:	2b00      	cmp	r3, #0
    33a2:	d1e5      	bne.n	3370 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    33a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d005      	beq.n	33b8 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33ac:	9b01      	ldr	r3, [sp, #4]
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	4619      	mov	r1, r3
    33b2:	2001      	movs	r0, #1
    33b4:	f7fe ff3a 	bl	222c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    33b8:	2003      	movs	r0, #3
    33ba:	f7ff fd7f 	bl	2ebc <SetInputSouceSytemClock>

                if (SircWasDisabled)
    33be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    33c2:	2b00      	cmp	r3, #0
    33c4:	d04f      	beq.n	3466 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    33c6:	2002      	movs	r0, #2
    33c8:	f7ff fd26 	bl	2e18 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    33cc:	e04b      	b.n	3466 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    33ce:	4b29      	ldr	r3, [pc, #164]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33d4:	4a27      	ldr	r2, [pc, #156]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33d6:	f023 0301 	bic.w	r3, r3, #1
    33da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    33de:	9b01      	ldr	r3, [sp, #4]
    33e0:	889b      	ldrh	r3, [r3, #4]
    33e2:	2b01      	cmp	r3, #1
    33e4:	d13f      	bne.n	3466 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    33e6:	9b01      	ldr	r3, [sp, #4]
    33e8:	79db      	ldrb	r3, [r3, #7]
    33ea:	4a22      	ldr	r2, [pc, #136]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33ec:	f003 0303 	and.w	r3, r3, #3
    33f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    33f4:	4b1f      	ldr	r3, [pc, #124]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33f6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    33fa:	9b01      	ldr	r3, [sp, #4]
    33fc:	799b      	ldrb	r3, [r3, #6]
    33fe:	00db      	lsls	r3, r3, #3
    3400:	f003 0308 	and.w	r3, r3, #8
    3404:	4313      	orrs	r3, r2
    3406:	4a1b      	ldr	r2, [pc, #108]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3408:	f043 0301 	orr.w	r3, r3, #1
    340c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3410:	aa03      	add	r2, sp, #12
    3412:	a904      	add	r1, sp, #16
    3414:	a805      	add	r0, sp, #20
    3416:	f24c 3350 	movw	r3, #50000	; 0xc350
    341a:	f7fe ff17 	bl	224c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    341e:	4b15      	ldr	r3, [pc, #84]	; (3474 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3420:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3424:	0e1b      	lsrs	r3, r3, #24
    3426:	f003 0301 	and.w	r3, r3, #1
    342a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    342c:	9a03      	ldr	r2, [sp, #12]
    342e:	a904      	add	r1, sp, #16
    3430:	ab05      	add	r3, sp, #20
    3432:	4618      	mov	r0, r3
    3434:	f7fe ff24 	bl	2280 <Clock_Ip_TimeoutExpired>
    3438:	4603      	mov	r3, r0
    343a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    343e:	9b06      	ldr	r3, [sp, #24]
    3440:	2b00      	cmp	r3, #0
    3442:	d106      	bne.n	3452 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3444:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3448:	f083 0301 	eor.w	r3, r3, #1
    344c:	b2db      	uxtb	r3, r3
    344e:	2b00      	cmp	r3, #0
    3450:	d1e5      	bne.n	341e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3452:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3456:	2b00      	cmp	r3, #0
    3458:	d005      	beq.n	3466 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    345a:	9b01      	ldr	r3, [sp, #4]
    345c:	681b      	ldr	r3, [r3, #0]
    345e:	4619      	mov	r1, r3
    3460:	2001      	movs	r0, #1
    3462:	f7fe fee3 	bl	222c <Clock_Ip_ReportClockErrors>
}
    3466:	bf00      	nop
    3468:	b00b      	add	sp, #44	; 0x2c
    346a:	f85d fb04 	ldr.w	pc, [sp], #4
    346e:	bf00      	nop
    3470:	0000b028 	.word	0x0000b028
    3474:	40064000 	.word	0x40064000

00003478 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3478:	b500      	push	{lr}
    347a:	b089      	sub	sp, #36	; 0x24
    347c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    347e:	2300      	movs	r3, #0
    3480:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	889b      	ldrh	r3, [r3, #4]
    3488:	2b01      	cmp	r3, #1
    348a:	d132      	bne.n	34f2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    348c:	4b1b      	ldr	r3, [pc, #108]	; (34fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    348e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3492:	4a1a      	ldr	r2, [pc, #104]	; (34fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3494:	f043 0301 	orr.w	r3, r3, #1
    3498:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    349c:	aa03      	add	r2, sp, #12
    349e:	a904      	add	r1, sp, #16
    34a0:	a805      	add	r0, sp, #20
    34a2:	f24c 3350 	movw	r3, #50000	; 0xc350
    34a6:	f7fe fed1 	bl	224c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    34aa:	4b14      	ldr	r3, [pc, #80]	; (34fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    34ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    34b0:	0e1b      	lsrs	r3, r3, #24
    34b2:	f003 0301 	and.w	r3, r3, #1
    34b6:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34b8:	9a03      	ldr	r2, [sp, #12]
    34ba:	a904      	add	r1, sp, #16
    34bc:	ab05      	add	r3, sp, #20
    34be:	4618      	mov	r0, r3
    34c0:	f7fe fede 	bl	2280 <Clock_Ip_TimeoutExpired>
    34c4:	4603      	mov	r3, r0
    34c6:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    34ca:	9b06      	ldr	r3, [sp, #24]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d106      	bne.n	34de <Clock_Ip_EnableFirc_TrustedCall+0x66>
    34d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34d4:	f083 0301 	eor.w	r3, r3, #1
    34d8:	b2db      	uxtb	r3, r3
    34da:	2b00      	cmp	r3, #0
    34dc:	d1e5      	bne.n	34aa <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    34de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d005      	beq.n	34f2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    34e6:	9b01      	ldr	r3, [sp, #4]
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	4619      	mov	r1, r3
    34ec:	2001      	movs	r0, #1
    34ee:	f7fe fe9d 	bl	222c <Clock_Ip_ReportClockErrors>
        }
    }
}
    34f2:	bf00      	nop
    34f4:	b009      	add	sp, #36	; 0x24
    34f6:	f85d fb04 	ldr.w	pc, [sp], #4
    34fa:	bf00      	nop
    34fc:	40064000 	.word	0x40064000

00003500 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3500:	b082      	sub	sp, #8
    3502:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3504:	4b05      	ldr	r3, [pc, #20]	; (351c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3506:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    350a:	4a04      	ldr	r2, [pc, #16]	; (351c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    350c:	f023 0301 	bic.w	r3, r3, #1
    3510:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3514:	bf00      	nop
    3516:	b002      	add	sp, #8
    3518:	4770      	bx	lr
    351a:	bf00      	nop
    351c:	40064000 	.word	0x40064000

00003520 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3520:	b082      	sub	sp, #8
    3522:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3524:	bf00      	nop
    3526:	b002      	add	sp, #8
    3528:	4770      	bx	lr

0000352a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    352a:	b082      	sub	sp, #8
    352c:	9001      	str	r0, [sp, #4]
    352e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3530:	bf00      	nop
    3532:	b002      	add	sp, #8
    3534:	4770      	bx	lr

00003536 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3536:	b082      	sub	sp, #8
    3538:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    353a:	bf00      	nop
    353c:	b002      	add	sp, #8
    353e:	4770      	bx	lr

00003540 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3540:	b082      	sub	sp, #8
    3542:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3544:	bf00      	nop
    3546:	b002      	add	sp, #8
    3548:	4770      	bx	lr

0000354a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    354a:	b082      	sub	sp, #8
    354c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    354e:	2302      	movs	r3, #2
}
    3550:	4618      	mov	r0, r3
    3552:	b002      	add	sp, #8
    3554:	4770      	bx	lr

00003556 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3556:	b082      	sub	sp, #8
    3558:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    355a:	bf00      	nop
    355c:	b002      	add	sp, #8
    355e:	4770      	bx	lr

00003560 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3560:	b500      	push	{lr}
    3562:	b083      	sub	sp, #12
    3564:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3566:	9b01      	ldr	r3, [sp, #4]
    3568:	2b00      	cmp	r3, #0
    356a:	d002      	beq.n	3572 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    356c:	9801      	ldr	r0, [sp, #4]
    356e:	f000 f870 	bl	3652 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3572:	bf00      	nop
    3574:	b003      	add	sp, #12
    3576:	f85d fb04 	ldr.w	pc, [sp], #4

0000357a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    357a:	b500      	push	{lr}
    357c:	b083      	sub	sp, #12
    357e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3580:	9b01      	ldr	r3, [sp, #4]
    3582:	2b00      	cmp	r3, #0
    3584:	d002      	beq.n	358c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3586:	9801      	ldr	r0, [sp, #4]
    3588:	f000 f89a 	bl	36c0 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    358c:	bf00      	nop
    358e:	b003      	add	sp, #12
    3590:	f85d fb04 	ldr.w	pc, [sp], #4

00003594 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3594:	b500      	push	{lr}
    3596:	b089      	sub	sp, #36	; 0x24
    3598:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    359a:	2301      	movs	r3, #1
    359c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    359e:	2300      	movs	r3, #0
    35a0:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    35a4:	4b1e      	ldr	r3, [pc, #120]	; (3620 <Clock_Ip_CompleteSpll+0x8c>)
    35a6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35aa:	f003 0301 	and.w	r3, r3, #1
    35ae:	2b00      	cmp	r3, #0
    35b0:	d02f      	beq.n	3612 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    35b2:	aa02      	add	r2, sp, #8
    35b4:	a903      	add	r1, sp, #12
    35b6:	a804      	add	r0, sp, #16
    35b8:	f24c 3350 	movw	r3, #50000	; 0xc350
    35bc:	f7fe fe46 	bl	224c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    35c0:	4b17      	ldr	r3, [pc, #92]	; (3620 <Clock_Ip_CompleteSpll+0x8c>)
    35c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35c6:	0e1b      	lsrs	r3, r3, #24
    35c8:	f003 0301 	and.w	r3, r3, #1
    35cc:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    35ce:	9a02      	ldr	r2, [sp, #8]
    35d0:	a903      	add	r1, sp, #12
    35d2:	ab04      	add	r3, sp, #16
    35d4:	4618      	mov	r0, r3
    35d6:	f7fe fe53 	bl	2280 <Clock_Ip_TimeoutExpired>
    35da:	4603      	mov	r3, r0
    35dc:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    35e0:	9b05      	ldr	r3, [sp, #20]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d106      	bne.n	35f4 <Clock_Ip_CompleteSpll+0x60>
    35e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35ea:	f083 0301 	eor.w	r3, r3, #1
    35ee:	b2db      	uxtb	r3, r3
    35f0:	2b00      	cmp	r3, #0
    35f2:	d1e5      	bne.n	35c0 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    35f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35f8:	f083 0301 	eor.w	r3, r3, #1
    35fc:	b2db      	uxtb	r3, r3
    35fe:	2b00      	cmp	r3, #0
    3600:	d002      	beq.n	3608 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3602:	2302      	movs	r3, #2
    3604:	9307      	str	r3, [sp, #28]
    3606:	e006      	b.n	3616 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3608:	9901      	ldr	r1, [sp, #4]
    360a:	2001      	movs	r0, #1
    360c:	f7fe fe0e 	bl	222c <Clock_Ip_ReportClockErrors>
    3610:	e001      	b.n	3616 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3612:	2300      	movs	r3, #0
    3614:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3616:	9b07      	ldr	r3, [sp, #28]
}
    3618:	4618      	mov	r0, r3
    361a:	b009      	add	sp, #36	; 0x24
    361c:	f85d fb04 	ldr.w	pc, [sp], #4
    3620:	40064000 	.word	0x40064000

00003624 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3624:	b500      	push	{lr}
    3626:	b083      	sub	sp, #12
    3628:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    362a:	9801      	ldr	r0, [sp, #4]
    362c:	f000 f886 	bl	373c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3630:	bf00      	nop
    3632:	b003      	add	sp, #12
    3634:	f85d fb04 	ldr.w	pc, [sp], #4

00003638 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3638:	b500      	push	{lr}
    363a:	b083      	sub	sp, #12
    363c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    363e:	9b01      	ldr	r3, [sp, #4]
    3640:	2b00      	cmp	r3, #0
    3642:	d002      	beq.n	364a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3644:	9801      	ldr	r0, [sp, #4]
    3646:	f000 f891 	bl	376c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    364a:	bf00      	nop
    364c:	b003      	add	sp, #12
    364e:	f85d fb04 	ldr.w	pc, [sp], #4

00003652 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3652:	b082      	sub	sp, #8
    3654:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3656:	4b19      	ldr	r3, [pc, #100]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3658:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    365c:	4a17      	ldr	r2, [pc, #92]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    365e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3662:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3666:	4b15      	ldr	r3, [pc, #84]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3668:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    366c:	4a13      	ldr	r2, [pc, #76]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3672:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3676:	4b11      	ldr	r3, [pc, #68]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3678:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    367c:	4a0f      	ldr	r2, [pc, #60]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    367e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3682:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3686:	4b0d      	ldr	r3, [pc, #52]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3688:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    368c:	4a0b      	ldr	r2, [pc, #44]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    368e:	f023 0301 	bic.w	r3, r3, #1
    3692:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3696:	4b09      	ldr	r3, [pc, #36]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3698:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    369c:	4a07      	ldr	r2, [pc, #28]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    369e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    36a2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    36a6:	4b05      	ldr	r3, [pc, #20]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36a8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    36ac:	4a03      	ldr	r2, [pc, #12]	; (36bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    36b2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    36b6:	bf00      	nop
    36b8:	b002      	add	sp, #8
    36ba:	4770      	bx	lr
    36bc:	40064000 	.word	0x40064000

000036c0 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    36c0:	b082      	sub	sp, #8
    36c2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    36c4:	9b01      	ldr	r3, [sp, #4]
    36c6:	889b      	ldrh	r3, [r3, #4]
    36c8:	2b01      	cmp	r3, #1
    36ca:	d12f      	bne.n	372c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    36cc:	4b1a      	ldr	r3, [pc, #104]	; (3738 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    36ce:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    36d2:	9b01      	ldr	r3, [sp, #4]
    36d4:	7b5b      	ldrb	r3, [r3, #13]
    36d6:	3b01      	subs	r3, #1
    36d8:	021b      	lsls	r3, r3, #8
    36da:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    36de:	9b01      	ldr	r3, [sp, #4]
    36e0:	7d1b      	ldrb	r3, [r3, #20]
    36e2:	3b10      	subs	r3, #16
    36e4:	041b      	lsls	r3, r3, #16
    36e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    36ea:	430b      	orrs	r3, r1
    36ec:	4912      	ldr	r1, [pc, #72]	; (3738 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    36ee:	4313      	orrs	r3, r2
    36f0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    36f4:	9b01      	ldr	r3, [sp, #4]
    36f6:	7fdb      	ldrb	r3, [r3, #31]
    36f8:	2b02      	cmp	r3, #2
    36fa:	d011      	beq.n	3720 <Clock_Ip_SetSpll_TrustedCall+0x60>
    36fc:	2b02      	cmp	r3, #2
    36fe:	dc17      	bgt.n	3730 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3700:	2b00      	cmp	r3, #0
    3702:	d002      	beq.n	370a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3704:	2b01      	cmp	r3, #1
    3706:	d005      	beq.n	3714 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3708:	e012      	b.n	3730 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    370a:	4b0b      	ldr	r3, [pc, #44]	; (3738 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    370c:	2200      	movs	r2, #0
    370e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3712:	e00e      	b.n	3732 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3714:	4b08      	ldr	r3, [pc, #32]	; (3738 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    371a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    371e:	e008      	b.n	3732 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3720:	4b05      	ldr	r3, [pc, #20]	; (3738 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3722:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3726:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    372a:	e002      	b.n	3732 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    372c:	bf00      	nop
    372e:	e000      	b.n	3732 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3730:	bf00      	nop
}
    3732:	bf00      	nop
    3734:	b002      	add	sp, #8
    3736:	4770      	bx	lr
    3738:	40064000 	.word	0x40064000

0000373c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    373c:	b082      	sub	sp, #8
    373e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3740:	4b09      	ldr	r3, [pc, #36]	; (3768 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3742:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3746:	4a08      	ldr	r2, [pc, #32]	; (3768 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3748:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    374c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3750:	4b05      	ldr	r3, [pc, #20]	; (3768 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3752:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3756:	4a04      	ldr	r2, [pc, #16]	; (3768 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3758:	f023 0301 	bic.w	r3, r3, #1
    375c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3760:	bf00      	nop
    3762:	b002      	add	sp, #8
    3764:	4770      	bx	lr
    3766:	bf00      	nop
    3768:	40064000 	.word	0x40064000

0000376c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    376c:	b082      	sub	sp, #8
    376e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	889b      	ldrh	r3, [r3, #4]
    3774:	2b01      	cmp	r3, #1
    3776:	d107      	bne.n	3788 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3778:	4b05      	ldr	r3, [pc, #20]	; (3790 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    377a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    377e:	4a04      	ldr	r2, [pc, #16]	; (3790 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3780:	f043 0301 	orr.w	r3, r3, #1
    3784:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3788:	bf00      	nop
    378a:	b002      	add	sp, #8
    378c:	4770      	bx	lr
    378e:	bf00      	nop
    3790:	40064000 	.word	0x40064000

00003794 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3794:	b082      	sub	sp, #8
    3796:	9001      	str	r0, [sp, #4]
    3798:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    379a:	bf00      	nop
    379c:	b002      	add	sp, #8
    379e:	4770      	bx	lr

000037a0 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    37a0:	b082      	sub	sp, #8
    37a2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37a4:	bf00      	nop
    37a6:	b002      	add	sp, #8
    37a8:	4770      	bx	lr

000037aa <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    37aa:	b500      	push	{lr}
    37ac:	b083      	sub	sp, #12
    37ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b0:	9b01      	ldr	r3, [sp, #4]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d002      	beq.n	37bc <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    37b6:	9801      	ldr	r0, [sp, #4]
    37b8:	f000 f8ee 	bl	3998 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37bc:	bf00      	nop
    37be:	b003      	add	sp, #12
    37c0:	f85d fb04 	ldr.w	pc, [sp], #4

000037c4 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c4:	b500      	push	{lr}
    37c6:	b083      	sub	sp, #12
    37c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ca:	9b01      	ldr	r3, [sp, #4]
    37cc:	2b00      	cmp	r3, #0
    37ce:	d002      	beq.n	37d6 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    37d0:	9801      	ldr	r0, [sp, #4]
    37d2:	f000 f8ff 	bl	39d4 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d6:	bf00      	nop
    37d8:	b003      	add	sp, #12
    37da:	f85d fb04 	ldr.w	pc, [sp], #4

000037de <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    37de:	b500      	push	{lr}
    37e0:	b083      	sub	sp, #12
    37e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e4:	9b01      	ldr	r3, [sp, #4]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d002      	beq.n	37f0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    37ea:	9801      	ldr	r0, [sp, #4]
    37ec:	f000 f912 	bl	3a14 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f0:	bf00      	nop
    37f2:	b003      	add	sp, #12
    37f4:	f85d fb04 	ldr.w	pc, [sp], #4

000037f8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    37f8:	b500      	push	{lr}
    37fa:	b083      	sub	sp, #12
    37fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37fe:	9b01      	ldr	r3, [sp, #4]
    3800:	2b00      	cmp	r3, #0
    3802:	d002      	beq.n	380a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3804:	9801      	ldr	r0, [sp, #4]
    3806:	f000 f925 	bl	3a54 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380a:	bf00      	nop
    380c:	b003      	add	sp, #12
    380e:	f85d fb04 	ldr.w	pc, [sp], #4

00003812 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3812:	b500      	push	{lr}
    3814:	b083      	sub	sp, #12
    3816:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3818:	9b01      	ldr	r3, [sp, #4]
    381a:	2b00      	cmp	r3, #0
    381c:	d002      	beq.n	3824 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    381e:	9801      	ldr	r0, [sp, #4]
    3820:	f000 f936 	bl	3a90 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3824:	bf00      	nop
    3826:	b003      	add	sp, #12
    3828:	f85d fb04 	ldr.w	pc, [sp], #4

0000382c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    382c:	b500      	push	{lr}
    382e:	b083      	sub	sp, #12
    3830:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3832:	9b01      	ldr	r3, [sp, #4]
    3834:	2b00      	cmp	r3, #0
    3836:	d002      	beq.n	383e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3838:	9801      	ldr	r0, [sp, #4]
    383a:	f000 f949 	bl	3ad0 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383e:	bf00      	nop
    3840:	b003      	add	sp, #12
    3842:	f85d fb04 	ldr.w	pc, [sp], #4

00003846 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3846:	b500      	push	{lr}
    3848:	b083      	sub	sp, #12
    384a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384c:	9b01      	ldr	r3, [sp, #4]
    384e:	2b00      	cmp	r3, #0
    3850:	d002      	beq.n	3858 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3852:	9801      	ldr	r0, [sp, #4]
    3854:	f000 f958 	bl	3b08 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3858:	bf00      	nop
    385a:	b003      	add	sp, #12
    385c:	f85d fb04 	ldr.w	pc, [sp], #4

00003860 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3860:	b500      	push	{lr}
    3862:	b083      	sub	sp, #12
    3864:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3866:	9b01      	ldr	r3, [sp, #4]
    3868:	2b00      	cmp	r3, #0
    386a:	d002      	beq.n	3872 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    386c:	9801      	ldr	r0, [sp, #4]
    386e:	f000 f969 	bl	3b44 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3872:	bf00      	nop
    3874:	b003      	add	sp, #12
    3876:	f85d fb04 	ldr.w	pc, [sp], #4

0000387a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    387a:	b500      	push	{lr}
    387c:	b083      	sub	sp, #12
    387e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3880:	9b01      	ldr	r3, [sp, #4]
    3882:	2b00      	cmp	r3, #0
    3884:	d002      	beq.n	388c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3886:	9801      	ldr	r0, [sp, #4]
    3888:	f000 f978 	bl	3b7c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    388c:	bf00      	nop
    388e:	b003      	add	sp, #12
    3890:	f85d fb04 	ldr.w	pc, [sp], #4

00003894 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3894:	b500      	push	{lr}
    3896:	b083      	sub	sp, #12
    3898:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    389a:	9b01      	ldr	r3, [sp, #4]
    389c:	2b00      	cmp	r3, #0
    389e:	d002      	beq.n	38a6 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    38a0:	9801      	ldr	r0, [sp, #4]
    38a2:	f000 f989 	bl	3bb8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a6:	bf00      	nop
    38a8:	b003      	add	sp, #12
    38aa:	f85d fb04 	ldr.w	pc, [sp], #4

000038ae <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    38ae:	b500      	push	{lr}
    38b0:	b083      	sub	sp, #12
    38b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38b4:	9b01      	ldr	r3, [sp, #4]
    38b6:	2b00      	cmp	r3, #0
    38b8:	d002      	beq.n	38c0 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    38ba:	9801      	ldr	r0, [sp, #4]
    38bc:	f000 f998 	bl	3bf0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38c0:	bf00      	nop
    38c2:	b003      	add	sp, #12
    38c4:	f85d fb04 	ldr.w	pc, [sp], #4

000038c8 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    38c8:	b500      	push	{lr}
    38ca:	b083      	sub	sp, #12
    38cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ce:	9b01      	ldr	r3, [sp, #4]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d002      	beq.n	38da <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    38d4:	9801      	ldr	r0, [sp, #4]
    38d6:	f000 f9a9 	bl	3c2c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38da:	bf00      	nop
    38dc:	b003      	add	sp, #12
    38de:	f85d fb04 	ldr.w	pc, [sp], #4

000038e2 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    38e2:	b500      	push	{lr}
    38e4:	b083      	sub	sp, #12
    38e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38e8:	9b01      	ldr	r3, [sp, #4]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d002      	beq.n	38f4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    38ee:	9801      	ldr	r0, [sp, #4]
    38f0:	f000 f9e6 	bl	3cc0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38f4:	bf00      	nop
    38f6:	b003      	add	sp, #12
    38f8:	f85d fb04 	ldr.w	pc, [sp], #4

000038fc <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    38fc:	b500      	push	{lr}
    38fe:	b083      	sub	sp, #12
    3900:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3902:	9b01      	ldr	r3, [sp, #4]
    3904:	2b00      	cmp	r3, #0
    3906:	d002      	beq.n	390e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3908:	9801      	ldr	r0, [sp, #4]
    390a:	f000 fa25 	bl	3d58 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    390e:	bf00      	nop
    3910:	b003      	add	sp, #12
    3912:	f85d fb04 	ldr.w	pc, [sp], #4

00003916 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3916:	b500      	push	{lr}
    3918:	b083      	sub	sp, #12
    391a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    391c:	9b01      	ldr	r3, [sp, #4]
    391e:	2b00      	cmp	r3, #0
    3920:	d002      	beq.n	3928 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3922:	9801      	ldr	r0, [sp, #4]
    3924:	f000 fa2a 	bl	3d7c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3928:	bf00      	nop
    392a:	b003      	add	sp, #12
    392c:	f85d fb04 	ldr.w	pc, [sp], #4

00003930 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3930:	b500      	push	{lr}
    3932:	b083      	sub	sp, #12
    3934:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3936:	9b01      	ldr	r3, [sp, #4]
    3938:	2b00      	cmp	r3, #0
    393a:	d002      	beq.n	3942 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    393c:	9801      	ldr	r0, [sp, #4]
    393e:	f000 fa3b 	bl	3db8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3942:	bf00      	nop
    3944:	b003      	add	sp, #12
    3946:	f85d fb04 	ldr.w	pc, [sp], #4

0000394a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    394a:	b500      	push	{lr}
    394c:	b083      	sub	sp, #12
    394e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3950:	9b01      	ldr	r3, [sp, #4]
    3952:	2b00      	cmp	r3, #0
    3954:	d002      	beq.n	395c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3956:	9801      	ldr	r0, [sp, #4]
    3958:	f000 fa56 	bl	3e08 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    395c:	bf00      	nop
    395e:	b003      	add	sp, #12
    3960:	f85d fb04 	ldr.w	pc, [sp], #4

00003964 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3964:	b500      	push	{lr}
    3966:	b083      	sub	sp, #12
    3968:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    396a:	9b01      	ldr	r3, [sp, #4]
    396c:	2b00      	cmp	r3, #0
    396e:	d002      	beq.n	3976 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3970:	9801      	ldr	r0, [sp, #4]
    3972:	f000 fa79 	bl	3e68 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3976:	bf00      	nop
    3978:	b003      	add	sp, #12
    397a:	f85d fb04 	ldr.w	pc, [sp], #4

0000397e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    397e:	b500      	push	{lr}
    3980:	b083      	sub	sp, #12
    3982:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3984:	9b01      	ldr	r3, [sp, #4]
    3986:	2b00      	cmp	r3, #0
    3988:	d002      	beq.n	3990 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    398a:	9801      	ldr	r0, [sp, #4]
    398c:	f000 fa8a 	bl	3ea4 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3990:	bf00      	nop
    3992:	b003      	add	sp, #12
    3994:	f85d fb04 	ldr.w	pc, [sp], #4

00003998 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3998:	b084      	sub	sp, #16
    399a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    399c:	4b0b      	ldr	r3, [pc, #44]	; (39cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    399e:	795b      	ldrb	r3, [r3, #5]
    39a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    39a2:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    39a4:	695b      	ldr	r3, [r3, #20]
    39a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    39a8:	9b02      	ldr	r3, [sp, #8]
    39aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39ae:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    39b0:	9b03      	ldr	r3, [sp, #12]
    39b2:	061b      	lsls	r3, r3, #24
    39b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39b8:	9a02      	ldr	r2, [sp, #8]
    39ba:	4313      	orrs	r3, r2
    39bc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    39be:	4a04      	ldr	r2, [pc, #16]	; (39d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    39c0:	9b02      	ldr	r3, [sp, #8]
    39c2:	6153      	str	r3, [r2, #20]
}
    39c4:	bf00      	nop
    39c6:	b004      	add	sp, #16
    39c8:	4770      	bx	lr
    39ca:	bf00      	nop
    39cc:	0000b390 	.word	0x0000b390
    39d0:	40064000 	.word	0x40064000

000039d4 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39d4:	b084      	sub	sp, #16
    39d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39d8:	9b01      	ldr	r3, [sp, #4]
    39da:	685b      	ldr	r3, [r3, #4]
    39dc:	4a0b      	ldr	r2, [pc, #44]	; (3a0c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    39de:	5cd3      	ldrb	r3, [r2, r3]
    39e0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    39e2:	4b0b      	ldr	r3, [pc, #44]	; (3a10 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    39e4:	695b      	ldr	r3, [r3, #20]
    39e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    39e8:	9b02      	ldr	r3, [sp, #8]
    39ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39ee:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    39f0:	9b03      	ldr	r3, [sp, #12]
    39f2:	061b      	lsls	r3, r3, #24
    39f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39f8:	9a02      	ldr	r2, [sp, #8]
    39fa:	4313      	orrs	r3, r2
    39fc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    39fe:	4a04      	ldr	r2, [pc, #16]	; (3a10 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3a00:	9b02      	ldr	r3, [sp, #8]
    3a02:	6153      	str	r3, [r2, #20]
}
    3a04:	bf00      	nop
    3a06:	b004      	add	sp, #16
    3a08:	4770      	bx	lr
    3a0a:	bf00      	nop
    3a0c:	0000b390 	.word	0x0000b390
    3a10:	40064000 	.word	0x40064000

00003a14 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a14:	b084      	sub	sp, #16
    3a16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a18:	9b01      	ldr	r3, [sp, #4]
    3a1a:	685b      	ldr	r3, [r3, #4]
    3a1c:	4a0b      	ldr	r2, [pc, #44]	; (3a4c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3a1e:	5cd3      	ldrb	r3, [r2, r3]
    3a20:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3a22:	4b0b      	ldr	r3, [pc, #44]	; (3a50 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3a24:	699b      	ldr	r3, [r3, #24]
    3a26:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3a28:	9b02      	ldr	r3, [sp, #8]
    3a2a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a2e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3a30:	9b03      	ldr	r3, [sp, #12]
    3a32:	061b      	lsls	r3, r3, #24
    3a34:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a38:	9a02      	ldr	r2, [sp, #8]
    3a3a:	4313      	orrs	r3, r2
    3a3c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3a3e:	4a04      	ldr	r2, [pc, #16]	; (3a50 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3a40:	9b02      	ldr	r3, [sp, #8]
    3a42:	6193      	str	r3, [r2, #24]
}
    3a44:	bf00      	nop
    3a46:	b004      	add	sp, #16
    3a48:	4770      	bx	lr
    3a4a:	bf00      	nop
    3a4c:	0000b390 	.word	0x0000b390
    3a50:	40064000 	.word	0x40064000

00003a54 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a54:	b084      	sub	sp, #16
    3a56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a58:	4b0b      	ldr	r3, [pc, #44]	; (3a88 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3a5a:	795b      	ldrb	r3, [r3, #5]
    3a5c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3a5e:	4b0b      	ldr	r3, [pc, #44]	; (3a8c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3a60:	69db      	ldr	r3, [r3, #28]
    3a62:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3a64:	9b02      	ldr	r3, [sp, #8]
    3a66:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a6a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3a6c:	9b03      	ldr	r3, [sp, #12]
    3a6e:	061b      	lsls	r3, r3, #24
    3a70:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a74:	9a02      	ldr	r2, [sp, #8]
    3a76:	4313      	orrs	r3, r2
    3a78:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3a7a:	4a04      	ldr	r2, [pc, #16]	; (3a8c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3a7c:	9b02      	ldr	r3, [sp, #8]
    3a7e:	61d3      	str	r3, [r2, #28]
}
    3a80:	bf00      	nop
    3a82:	b004      	add	sp, #16
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop
    3a88:	0000b390 	.word	0x0000b390
    3a8c:	40064000 	.word	0x40064000

00003a90 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a90:	b084      	sub	sp, #16
    3a92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a94:	9b01      	ldr	r3, [sp, #4]
    3a96:	685b      	ldr	r3, [r3, #4]
    3a98:	4a0b      	ldr	r2, [pc, #44]	; (3ac8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3a9a:	5cd3      	ldrb	r3, [r2, r3]
    3a9c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3a9e:	4b0b      	ldr	r3, [pc, #44]	; (3acc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3aa0:	69db      	ldr	r3, [r3, #28]
    3aa2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3aa4:	9b02      	ldr	r3, [sp, #8]
    3aa6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3aaa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3aac:	9b03      	ldr	r3, [sp, #12]
    3aae:	061b      	lsls	r3, r3, #24
    3ab0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3ab4:	9a02      	ldr	r2, [sp, #8]
    3ab6:	4313      	orrs	r3, r2
    3ab8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3aba:	4a04      	ldr	r2, [pc, #16]	; (3acc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3abc:	9b02      	ldr	r3, [sp, #8]
    3abe:	61d3      	str	r3, [r2, #28]
}
    3ac0:	bf00      	nop
    3ac2:	b004      	add	sp, #16
    3ac4:	4770      	bx	lr
    3ac6:	bf00      	nop
    3ac8:	0000b390 	.word	0x0000b390
    3acc:	40064000 	.word	0x40064000

00003ad0 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ad0:	b084      	sub	sp, #16
    3ad2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ad4:	4b0a      	ldr	r3, [pc, #40]	; (3b00 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3ad6:	7b9b      	ldrb	r3, [r3, #14]
    3ad8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3ada:	4b0a      	ldr	r3, [pc, #40]	; (3b04 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3adc:	691b      	ldr	r3, [r3, #16]
    3ade:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3ae0:	9b02      	ldr	r3, [sp, #8]
    3ae2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3ae6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ae8:	9b03      	ldr	r3, [sp, #12]
    3aea:	011b      	lsls	r3, r3, #4
    3aec:	9a02      	ldr	r2, [sp, #8]
    3aee:	4313      	orrs	r3, r2
    3af0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3af2:	4a04      	ldr	r2, [pc, #16]	; (3b04 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3af4:	9b02      	ldr	r3, [sp, #8]
    3af6:	6113      	str	r3, [r2, #16]
}
    3af8:	bf00      	nop
    3afa:	b004      	add	sp, #16
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	0000b338 	.word	0x0000b338
    3b04:	40048000 	.word	0x40048000

00003b08 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b08:	b084      	sub	sp, #16
    3b0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b0c:	9b01      	ldr	r3, [sp, #4]
    3b0e:	685b      	ldr	r3, [r3, #4]
    3b10:	4a0a      	ldr	r2, [pc, #40]	; (3b3c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3b12:	5cd3      	ldrb	r3, [r2, r3]
    3b14:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3b16:	4b0a      	ldr	r3, [pc, #40]	; (3b40 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3b18:	691b      	ldr	r3, [r3, #16]
    3b1a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3b1c:	9b02      	ldr	r3, [sp, #8]
    3b1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3b22:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3b24:	9b03      	ldr	r3, [sp, #12]
    3b26:	011b      	lsls	r3, r3, #4
    3b28:	9a02      	ldr	r2, [sp, #8]
    3b2a:	4313      	orrs	r3, r2
    3b2c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b2e:	4a04      	ldr	r2, [pc, #16]	; (3b40 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3b30:	9b02      	ldr	r3, [sp, #8]
    3b32:	6113      	str	r3, [r2, #16]
}
    3b34:	bf00      	nop
    3b36:	b004      	add	sp, #16
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	0000b338 	.word	0x0000b338
    3b40:	40048000 	.word	0x40048000

00003b44 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b44:	b084      	sub	sp, #16
    3b46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b48:	4b0a      	ldr	r3, [pc, #40]	; (3b74 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3b4a:	785b      	ldrb	r3, [r3, #1]
    3b4c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3b4e:	4b0a      	ldr	r3, [pc, #40]	; (3b78 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3b50:	691b      	ldr	r3, [r3, #16]
    3b52:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3b54:	9b02      	ldr	r3, [sp, #8]
    3b56:	f023 030c 	bic.w	r3, r3, #12
    3b5a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3b5c:	9b03      	ldr	r3, [sp, #12]
    3b5e:	009b      	lsls	r3, r3, #2
    3b60:	9a02      	ldr	r2, [sp, #8]
    3b62:	4313      	orrs	r3, r2
    3b64:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b66:	4a04      	ldr	r2, [pc, #16]	; (3b78 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3b68:	9b02      	ldr	r3, [sp, #8]
    3b6a:	6113      	str	r3, [r2, #16]
}
    3b6c:	bf00      	nop
    3b6e:	b004      	add	sp, #16
    3b70:	4770      	bx	lr
    3b72:	bf00      	nop
    3b74:	0000b3f0 	.word	0x0000b3f0
    3b78:	40048000 	.word	0x40048000

00003b7c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b7c:	b084      	sub	sp, #16
    3b7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b80:	9b01      	ldr	r3, [sp, #4]
    3b82:	685b      	ldr	r3, [r3, #4]
    3b84:	4a0a      	ldr	r2, [pc, #40]	; (3bb0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3b86:	5cd3      	ldrb	r3, [r2, r3]
    3b88:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3b8a:	4b0a      	ldr	r3, [pc, #40]	; (3bb4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3b8c:	691b      	ldr	r3, [r3, #16]
    3b8e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3b90:	9b02      	ldr	r3, [sp, #8]
    3b92:	f023 030c 	bic.w	r3, r3, #12
    3b96:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3b98:	9b03      	ldr	r3, [sp, #12]
    3b9a:	009b      	lsls	r3, r3, #2
    3b9c:	9a02      	ldr	r2, [sp, #8]
    3b9e:	4313      	orrs	r3, r2
    3ba0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3ba2:	4a04      	ldr	r2, [pc, #16]	; (3bb4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3ba4:	9b02      	ldr	r3, [sp, #8]
    3ba6:	6113      	str	r3, [r2, #16]
}
    3ba8:	bf00      	nop
    3baa:	b004      	add	sp, #16
    3bac:	4770      	bx	lr
    3bae:	bf00      	nop
    3bb0:	0000b3f0 	.word	0x0000b3f0
    3bb4:	40048000 	.word	0x40048000

00003bb8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bb8:	b084      	sub	sp, #16
    3bba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bbc:	4b0a      	ldr	r3, [pc, #40]	; (3be8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3bbe:	795b      	ldrb	r3, [r3, #5]
    3bc0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3bc2:	4b0a      	ldr	r3, [pc, #40]	; (3bec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3bc4:	6a1b      	ldr	r3, [r3, #32]
    3bc6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3bc8:	9b02      	ldr	r3, [sp, #8]
    3bca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3bce:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3bd0:	9b03      	ldr	r3, [sp, #12]
    3bd2:	061b      	lsls	r3, r3, #24
    3bd4:	9a02      	ldr	r2, [sp, #8]
    3bd6:	4313      	orrs	r3, r2
    3bd8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3bda:	4a04      	ldr	r2, [pc, #16]	; (3bec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3bdc:	9b02      	ldr	r3, [sp, #8]
    3bde:	6213      	str	r3, [r2, #32]
}
    3be0:	bf00      	nop
    3be2:	b004      	add	sp, #16
    3be4:	4770      	bx	lr
    3be6:	bf00      	nop
    3be8:	0000b390 	.word	0x0000b390
    3bec:	40064000 	.word	0x40064000

00003bf0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bf0:	b084      	sub	sp, #16
    3bf2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bf4:	9b01      	ldr	r3, [sp, #4]
    3bf6:	685b      	ldr	r3, [r3, #4]
    3bf8:	4a0a      	ldr	r2, [pc, #40]	; (3c24 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3bfa:	5cd3      	ldrb	r3, [r2, r3]
    3bfc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3bfe:	4b0a      	ldr	r3, [pc, #40]	; (3c28 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3c00:	6a1b      	ldr	r3, [r3, #32]
    3c02:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3c04:	9b02      	ldr	r3, [sp, #8]
    3c06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3c0a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3c0c:	9b03      	ldr	r3, [sp, #12]
    3c0e:	061b      	lsls	r3, r3, #24
    3c10:	9a02      	ldr	r2, [sp, #8]
    3c12:	4313      	orrs	r3, r2
    3c14:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3c16:	4a04      	ldr	r2, [pc, #16]	; (3c28 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3c18:	9b02      	ldr	r3, [sp, #8]
    3c1a:	6213      	str	r3, [r2, #32]
}
    3c1c:	bf00      	nop
    3c1e:	b004      	add	sp, #16
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop
    3c24:	0000b390 	.word	0x0000b390
    3c28:	40064000 	.word	0x40064000

00003c2c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c2c:	b086      	sub	sp, #24
    3c2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c30:	4b20      	ldr	r3, [pc, #128]	; (3cb4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3c32:	795b      	ldrb	r3, [r3, #5]
    3c34:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c36:	9b01      	ldr	r3, [sp, #4]
    3c38:	681a      	ldr	r2, [r3, #0]
    3c3a:	491f      	ldr	r1, [pc, #124]	; (3cb8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3c3c:	4613      	mov	r3, r2
    3c3e:	00db      	lsls	r3, r3, #3
    3c40:	4413      	add	r3, r2
    3c42:	440b      	add	r3, r1
    3c44:	781b      	ldrb	r3, [r3, #0]
    3c46:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3c48:	4b1c      	ldr	r3, [pc, #112]	; (3cbc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3c4a:	68db      	ldr	r3, [r3, #12]
    3c4c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3c4e:	9b03      	ldr	r3, [sp, #12]
    3c50:	2b03      	cmp	r3, #3
    3c52:	d813      	bhi.n	3c7c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3c54:	9b03      	ldr	r3, [sp, #12]
    3c56:	005b      	lsls	r3, r3, #1
    3c58:	3318      	adds	r3, #24
    3c5a:	2203      	movs	r2, #3
    3c5c:	fa02 f303 	lsl.w	r3, r2, r3
    3c60:	43db      	mvns	r3, r3
    3c62:	9a05      	ldr	r2, [sp, #20]
    3c64:	4013      	ands	r3, r2
    3c66:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c68:	9b03      	ldr	r3, [sp, #12]
    3c6a:	005b      	lsls	r3, r3, #1
    3c6c:	3318      	adds	r3, #24
    3c6e:	9a04      	ldr	r2, [sp, #16]
    3c70:	fa02 f303 	lsl.w	r3, r2, r3
    3c74:	9a05      	ldr	r2, [sp, #20]
    3c76:	4313      	orrs	r3, r2
    3c78:	9305      	str	r3, [sp, #20]
    3c7a:	e014      	b.n	3ca6 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c7c:	9b03      	ldr	r3, [sp, #12]
    3c7e:	3b04      	subs	r3, #4
    3c80:	005b      	lsls	r3, r3, #1
    3c82:	3310      	adds	r3, #16
    3c84:	2203      	movs	r2, #3
    3c86:	fa02 f303 	lsl.w	r3, r2, r3
    3c8a:	43db      	mvns	r3, r3
    3c8c:	9a05      	ldr	r2, [sp, #20]
    3c8e:	4013      	ands	r3, r2
    3c90:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c92:	9b03      	ldr	r3, [sp, #12]
    3c94:	3b04      	subs	r3, #4
    3c96:	005b      	lsls	r3, r3, #1
    3c98:	3310      	adds	r3, #16
    3c9a:	9a04      	ldr	r2, [sp, #16]
    3c9c:	fa02 f303 	lsl.w	r3, r2, r3
    3ca0:	9a05      	ldr	r2, [sp, #20]
    3ca2:	4313      	orrs	r3, r2
    3ca4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3ca6:	4a05      	ldr	r2, [pc, #20]	; (3cbc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3ca8:	9b05      	ldr	r3, [sp, #20]
    3caa:	60d3      	str	r3, [r2, #12]
}
    3cac:	bf00      	nop
    3cae:	b006      	add	sp, #24
    3cb0:	4770      	bx	lr
    3cb2:	bf00      	nop
    3cb4:	0000b338 	.word	0x0000b338
    3cb8:	0000b028 	.word	0x0000b028
    3cbc:	40048000 	.word	0x40048000

00003cc0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cc0:	b086      	sub	sp, #24
    3cc2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3cc4:	9b01      	ldr	r3, [sp, #4]
    3cc6:	685b      	ldr	r3, [r3, #4]
    3cc8:	4a20      	ldr	r2, [pc, #128]	; (3d4c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3cca:	5cd3      	ldrb	r3, [r2, r3]
    3ccc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3cce:	9b01      	ldr	r3, [sp, #4]
    3cd0:	681a      	ldr	r2, [r3, #0]
    3cd2:	491f      	ldr	r1, [pc, #124]	; (3d50 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3cd4:	4613      	mov	r3, r2
    3cd6:	00db      	lsls	r3, r3, #3
    3cd8:	4413      	add	r3, r2
    3cda:	440b      	add	r3, r1
    3cdc:	781b      	ldrb	r3, [r3, #0]
    3cde:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3ce0:	4b1c      	ldr	r3, [pc, #112]	; (3d54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3ce2:	68db      	ldr	r3, [r3, #12]
    3ce4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3ce6:	9b03      	ldr	r3, [sp, #12]
    3ce8:	2b03      	cmp	r3, #3
    3cea:	d813      	bhi.n	3d14 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3cec:	9b03      	ldr	r3, [sp, #12]
    3cee:	005b      	lsls	r3, r3, #1
    3cf0:	3318      	adds	r3, #24
    3cf2:	2203      	movs	r2, #3
    3cf4:	fa02 f303 	lsl.w	r3, r2, r3
    3cf8:	43db      	mvns	r3, r3
    3cfa:	9a05      	ldr	r2, [sp, #20]
    3cfc:	4013      	ands	r3, r2
    3cfe:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3d00:	9b03      	ldr	r3, [sp, #12]
    3d02:	005b      	lsls	r3, r3, #1
    3d04:	3318      	adds	r3, #24
    3d06:	9a04      	ldr	r2, [sp, #16]
    3d08:	fa02 f303 	lsl.w	r3, r2, r3
    3d0c:	9a05      	ldr	r2, [sp, #20]
    3d0e:	4313      	orrs	r3, r2
    3d10:	9305      	str	r3, [sp, #20]
    3d12:	e014      	b.n	3d3e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3d14:	9b03      	ldr	r3, [sp, #12]
    3d16:	3b04      	subs	r3, #4
    3d18:	005b      	lsls	r3, r3, #1
    3d1a:	3310      	adds	r3, #16
    3d1c:	2203      	movs	r2, #3
    3d1e:	fa02 f303 	lsl.w	r3, r2, r3
    3d22:	43db      	mvns	r3, r3
    3d24:	9a05      	ldr	r2, [sp, #20]
    3d26:	4013      	ands	r3, r2
    3d28:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3d2a:	9b03      	ldr	r3, [sp, #12]
    3d2c:	3b04      	subs	r3, #4
    3d2e:	005b      	lsls	r3, r3, #1
    3d30:	3310      	adds	r3, #16
    3d32:	9a04      	ldr	r2, [sp, #16]
    3d34:	fa02 f303 	lsl.w	r3, r2, r3
    3d38:	9a05      	ldr	r2, [sp, #20]
    3d3a:	4313      	orrs	r3, r2
    3d3c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3d3e:	4a05      	ldr	r2, [pc, #20]	; (3d54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3d40:	9b05      	ldr	r3, [sp, #20]
    3d42:	60d3      	str	r3, [r2, #12]
}
    3d44:	bf00      	nop
    3d46:	b006      	add	sp, #24
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop
    3d4c:	0000b338 	.word	0x0000b338
    3d50:	0000b028 	.word	0x0000b028
    3d54:	40048000 	.word	0x40048000

00003d58 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d58:	b084      	sub	sp, #16
    3d5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3d5c:	4b06      	ldr	r3, [pc, #24]	; (3d78 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3d5e:	685b      	ldr	r3, [r3, #4]
    3d60:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3d62:	9b03      	ldr	r3, [sp, #12]
    3d64:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3d68:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3d6a:	4a03      	ldr	r2, [pc, #12]	; (3d78 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3d6c:	9b03      	ldr	r3, [sp, #12]
    3d6e:	6053      	str	r3, [r2, #4]
}
    3d70:	bf00      	nop
    3d72:	b004      	add	sp, #16
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop
    3d78:	40048000 	.word	0x40048000

00003d7c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d7c:	b084      	sub	sp, #16
    3d7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d80:	9b01      	ldr	r3, [sp, #4]
    3d82:	685b      	ldr	r3, [r3, #4]
    3d84:	4a0a      	ldr	r2, [pc, #40]	; (3db0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3d86:	5cd3      	ldrb	r3, [r2, r3]
    3d88:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3d8a:	4b0a      	ldr	r3, [pc, #40]	; (3db4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3d8c:	685b      	ldr	r3, [r3, #4]
    3d8e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3d90:	9b02      	ldr	r3, [sp, #8]
    3d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3d96:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3d98:	9b03      	ldr	r3, [sp, #12]
    3d9a:	011b      	lsls	r3, r3, #4
    3d9c:	9a02      	ldr	r2, [sp, #8]
    3d9e:	4313      	orrs	r3, r2
    3da0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3da2:	4a04      	ldr	r2, [pc, #16]	; (3db4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3da4:	9b02      	ldr	r3, [sp, #8]
    3da6:	6053      	str	r3, [r2, #4]
}
    3da8:	bf00      	nop
    3daa:	b004      	add	sp, #16
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop
    3db0:	0000b338 	.word	0x0000b338
    3db4:	40048000 	.word	0x40048000

00003db8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3db8:	b084      	sub	sp, #16
    3dba:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3dbc:	9b01      	ldr	r3, [sp, #4]
    3dbe:	681a      	ldr	r2, [r3, #0]
    3dc0:	490f      	ldr	r1, [pc, #60]	; (3e00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3dc2:	4613      	mov	r3, r2
    3dc4:	00db      	lsls	r3, r3, #3
    3dc6:	4413      	add	r3, r2
    3dc8:	440b      	add	r3, r1
    3dca:	3304      	adds	r3, #4
    3dcc:	781b      	ldrb	r3, [r3, #0]
    3dce:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3dd0:	4a0c      	ldr	r2, [pc, #48]	; (3e04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dd2:	9b03      	ldr	r3, [sp, #12]
    3dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3dd8:	490a      	ldr	r1, [pc, #40]	; (3e04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3dde:	9b03      	ldr	r3, [sp, #12]
    3de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3de4:	4a07      	ldr	r2, [pc, #28]	; (3e04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3de6:	9b03      	ldr	r3, [sp, #12]
    3de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3dec:	4905      	ldr	r1, [pc, #20]	; (3e04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3df2:	9b03      	ldr	r3, [sp, #12]
    3df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3df8:	bf00      	nop
    3dfa:	b004      	add	sp, #16
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop
    3e00:	0000b028 	.word	0x0000b028
    3e04:	40065000 	.word	0x40065000

00003e08 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e08:	b086      	sub	sp, #24
    3e0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3e0c:	9b01      	ldr	r3, [sp, #4]
    3e0e:	681a      	ldr	r2, [r3, #0]
    3e10:	4912      	ldr	r1, [pc, #72]	; (3e5c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3e12:	4613      	mov	r3, r2
    3e14:	00db      	lsls	r3, r3, #3
    3e16:	4413      	add	r3, r2
    3e18:	440b      	add	r3, r1
    3e1a:	3304      	adds	r3, #4
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e20:	9b01      	ldr	r3, [sp, #4]
    3e22:	685b      	ldr	r3, [r3, #4]
    3e24:	4a0e      	ldr	r2, [pc, #56]	; (3e60 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3e26:	5cd3      	ldrb	r3, [r2, r3]
    3e28:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3e2a:	4a0e      	ldr	r2, [pc, #56]	; (3e64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3e2c:	9b05      	ldr	r3, [sp, #20]
    3e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e32:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3e34:	9b03      	ldr	r3, [sp, #12]
    3e36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3e3a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3e3c:	9b04      	ldr	r3, [sp, #16]
    3e3e:	061b      	lsls	r3, r3, #24
    3e40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3e44:	9a03      	ldr	r2, [sp, #12]
    3e46:	4313      	orrs	r3, r2
    3e48:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3e4a:	4906      	ldr	r1, [pc, #24]	; (3e64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3e4c:	9b05      	ldr	r3, [sp, #20]
    3e4e:	9a03      	ldr	r2, [sp, #12]
    3e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3e54:	bf00      	nop
    3e56:	b006      	add	sp, #24
    3e58:	4770      	bx	lr
    3e5a:	bf00      	nop
    3e5c:	0000b028 	.word	0x0000b028
    3e60:	0000b3c0 	.word	0x0000b3c0
    3e64:	40065000 	.word	0x40065000

00003e68 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e68:	b084      	sub	sp, #16
    3e6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e6c:	4b0b      	ldr	r3, [pc, #44]	; (3e9c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3e6e:	7f1b      	ldrb	r3, [r3, #28]
    3e70:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3e72:	4b0b      	ldr	r3, [pc, #44]	; (3ea0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3e74:	685b      	ldr	r3, [r3, #4]
    3e76:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3e78:	9b02      	ldr	r3, [sp, #8]
    3e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e7e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3e80:	9b03      	ldr	r3, [sp, #12]
    3e82:	031b      	lsls	r3, r3, #12
    3e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3e88:	9a02      	ldr	r2, [sp, #8]
    3e8a:	4313      	orrs	r3, r2
    3e8c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3e8e:	4a04      	ldr	r2, [pc, #16]	; (3ea0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3e90:	9b02      	ldr	r3, [sp, #8]
    3e92:	6053      	str	r3, [r2, #4]
}
    3e94:	bf00      	nop
    3e96:	b004      	add	sp, #16
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop
    3e9c:	0000b338 	.word	0x0000b338
    3ea0:	40048000 	.word	0x40048000

00003ea4 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ea4:	b084      	sub	sp, #16
    3ea6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ea8:	9b01      	ldr	r3, [sp, #4]
    3eaa:	685b      	ldr	r3, [r3, #4]
    3eac:	4a0b      	ldr	r2, [pc, #44]	; (3edc <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3eae:	5cd3      	ldrb	r3, [r2, r3]
    3eb0:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3eb2:	4b0b      	ldr	r3, [pc, #44]	; (3ee0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3eb4:	685b      	ldr	r3, [r3, #4]
    3eb6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3eb8:	9b02      	ldr	r3, [sp, #8]
    3eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3ebe:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3ec0:	9b03      	ldr	r3, [sp, #12]
    3ec2:	031b      	lsls	r3, r3, #12
    3ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3ec8:	9a02      	ldr	r2, [sp, #8]
    3eca:	4313      	orrs	r3, r2
    3ecc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3ece:	4a04      	ldr	r2, [pc, #16]	; (3ee0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3ed0:	9b02      	ldr	r3, [sp, #8]
    3ed2:	6053      	str	r3, [r2, #4]
}
    3ed4:	bf00      	nop
    3ed6:	b004      	add	sp, #16
    3ed8:	4770      	bx	lr
    3eda:	bf00      	nop
    3edc:	0000b338 	.word	0x0000b338
    3ee0:	40048000 	.word	0x40048000

00003ee4 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3ee4:	b500      	push	{lr}
    3ee6:	b085      	sub	sp, #20
    3ee8:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3eea:	2300      	movs	r3, #0
    3eec:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3ef0:	9b01      	ldr	r3, [sp, #4]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d037      	beq.n	3f66 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3ef6:	2300      	movs	r3, #0
    3ef8:	9303      	str	r3, [sp, #12]
    3efa:	e02b      	b.n	3f54 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3efc:	4b29      	ldr	r3, [pc, #164]	; (3fa4 <DisableSafeClock+0xc0>)
    3efe:	6819      	ldr	r1, [r3, #0]
    3f00:	9a03      	ldr	r2, [sp, #12]
    3f02:	4613      	mov	r3, r2
    3f04:	005b      	lsls	r3, r3, #1
    3f06:	4413      	add	r3, r2
    3f08:	009b      	lsls	r3, r3, #2
    3f0a:	440b      	add	r3, r1
    3f0c:	3314      	adds	r3, #20
    3f0e:	681b      	ldr	r3, [r3, #0]
    3f10:	2b05      	cmp	r3, #5
    3f12:	d11c      	bne.n	3f4e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3f14:	2301      	movs	r3, #1
    3f16:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3f1a:	4b22      	ldr	r3, [pc, #136]	; (3fa4 <DisableSafeClock+0xc0>)
    3f1c:	6819      	ldr	r1, [r3, #0]
    3f1e:	9a03      	ldr	r2, [sp, #12]
    3f20:	4613      	mov	r3, r2
    3f22:	005b      	lsls	r3, r3, #1
    3f24:	4413      	add	r3, r2
    3f26:	009b      	lsls	r3, r3, #2
    3f28:	440b      	add	r3, r1
    3f2a:	3318      	adds	r3, #24
    3f2c:	881b      	ldrh	r3, [r3, #0]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d118      	bne.n	3f64 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3f32:	4b1d      	ldr	r3, [pc, #116]	; (3fa8 <DisableSafeClock+0xc4>)
    3f34:	791b      	ldrb	r3, [r3, #4]
    3f36:	4619      	mov	r1, r3
    3f38:	4a1c      	ldr	r2, [pc, #112]	; (3fac <DisableSafeClock+0xc8>)
    3f3a:	460b      	mov	r3, r1
    3f3c:	005b      	lsls	r3, r3, #1
    3f3e:	440b      	add	r3, r1
    3f40:	009b      	lsls	r3, r3, #2
    3f42:	4413      	add	r3, r2
    3f44:	3308      	adds	r3, #8
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	2005      	movs	r0, #5
    3f4a:	4798      	blx	r3
                }
                break;
    3f4c:	e00a      	b.n	3f64 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3f4e:	9b03      	ldr	r3, [sp, #12]
    3f50:	3301      	adds	r3, #1
    3f52:	9303      	str	r3, [sp, #12]
    3f54:	4b13      	ldr	r3, [pc, #76]	; (3fa4 <DisableSafeClock+0xc0>)
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	7a1b      	ldrb	r3, [r3, #8]
    3f5a:	461a      	mov	r2, r3
    3f5c:	9b03      	ldr	r3, [sp, #12]
    3f5e:	4293      	cmp	r3, r2
    3f60:	d3cc      	bcc.n	3efc <DisableSafeClock+0x18>
    3f62:	e000      	b.n	3f66 <DisableSafeClock+0x82>
                break;
    3f64:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3f66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3f6a:	f083 0301 	eor.w	r3, r3, #1
    3f6e:	b2db      	uxtb	r3, r3
    3f70:	2b00      	cmp	r3, #0
    3f72:	d013      	beq.n	3f9c <DisableSafeClock+0xb8>
    3f74:	4b0e      	ldr	r3, [pc, #56]	; (3fb0 <DisableSafeClock+0xcc>)
    3f76:	781b      	ldrb	r3, [r3, #0]
    3f78:	f083 0301 	eor.w	r3, r3, #1
    3f7c:	b2db      	uxtb	r3, r3
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d00c      	beq.n	3f9c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3f82:	4b09      	ldr	r3, [pc, #36]	; (3fa8 <DisableSafeClock+0xc4>)
    3f84:	791b      	ldrb	r3, [r3, #4]
    3f86:	4619      	mov	r1, r3
    3f88:	4a08      	ldr	r2, [pc, #32]	; (3fac <DisableSafeClock+0xc8>)
    3f8a:	460b      	mov	r3, r1
    3f8c:	005b      	lsls	r3, r3, #1
    3f8e:	440b      	add	r3, r1
    3f90:	009b      	lsls	r3, r3, #2
    3f92:	4413      	add	r3, r2
    3f94:	3308      	adds	r3, #8
    3f96:	681b      	ldr	r3, [r3, #0]
    3f98:	2005      	movs	r0, #5
    3f9a:	4798      	blx	r3
    }
}
    3f9c:	bf00      	nop
    3f9e:	b005      	add	sp, #20
    3fa0:	f85d fb04 	ldr.w	pc, [sp], #4
    3fa4:	1fff8bec 	.word	0x1fff8bec
    3fa8:	0000afb8 	.word	0x0000afb8
    3fac:	0000b5e8 	.word	0x0000b5e8
    3fb0:	1fff8b18 	.word	0x1fff8b18

00003fb4 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3fb4:	4b06      	ldr	r3, [pc, #24]	; (3fd0 <SetFircToResetValue_TrustedCall+0x1c>)
    3fb6:	2200      	movs	r2, #0
    3fb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3fbc:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <SetFircToResetValue_TrustedCall+0x1c>)
    3fbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fc2:	4a03      	ldr	r2, [pc, #12]	; (3fd0 <SetFircToResetValue_TrustedCall+0x1c>)
    3fc4:	f043 0301 	orr.w	r3, r3, #1
    3fc8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3fcc:	bf00      	nop
    3fce:	4770      	bx	lr
    3fd0:	40064000 	.word	0x40064000

00003fd4 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3fd4:	b084      	sub	sp, #16
    3fd6:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3fd8:	2303      	movs	r3, #3
    3fda:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3fdc:	2300      	movs	r3, #0
    3fde:	9302      	str	r3, [sp, #8]
    3fe0:	e028      	b.n	4034 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3fe2:	9b01      	ldr	r3, [sp, #4]
    3fe4:	9a02      	ldr	r2, [sp, #8]
    3fe6:	320d      	adds	r2, #13
    3fe8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3fec:	2b28      	cmp	r3, #40	; 0x28
    3fee:	d10b      	bne.n	4008 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ff0:	9a01      	ldr	r2, [sp, #4]
    3ff2:	9b02      	ldr	r3, [sp, #8]
    3ff4:	330d      	adds	r3, #13
    3ff6:	00db      	lsls	r3, r3, #3
    3ff8:	4413      	add	r3, r2
    3ffa:	685b      	ldr	r3, [r3, #4]
    3ffc:	4a2b      	ldr	r2, [pc, #172]	; (40ac <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3ffe:	5cd3      	ldrb	r3, [r2, r3]
    4000:	011b      	lsls	r3, r3, #4
    4002:	9a03      	ldr	r2, [sp, #12]
    4004:	4313      	orrs	r3, r2
    4006:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4008:	9b01      	ldr	r3, [sp, #4]
    400a:	9a02      	ldr	r2, [sp, #8]
    400c:	320d      	adds	r2, #13
    400e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4012:	2b29      	cmp	r3, #41	; 0x29
    4014:	d10b      	bne.n	402e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4016:	9a01      	ldr	r2, [sp, #4]
    4018:	9b02      	ldr	r3, [sp, #8]
    401a:	330d      	adds	r3, #13
    401c:	00db      	lsls	r3, r3, #3
    401e:	4413      	add	r3, r2
    4020:	685b      	ldr	r3, [r3, #4]
    4022:	4a23      	ldr	r2, [pc, #140]	; (40b0 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4024:	5cd3      	ldrb	r3, [r2, r3]
    4026:	009b      	lsls	r3, r3, #2
    4028:	9a03      	ldr	r2, [sp, #12]
    402a:	4313      	orrs	r3, r2
    402c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    402e:	9b02      	ldr	r3, [sp, #8]
    4030:	3301      	adds	r3, #1
    4032:	9302      	str	r3, [sp, #8]
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	7adb      	ldrb	r3, [r3, #11]
    4038:	461a      	mov	r2, r3
    403a:	9b02      	ldr	r3, [sp, #8]
    403c:	4293      	cmp	r3, r2
    403e:	d3d0      	bcc.n	3fe2 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4040:	2300      	movs	r3, #0
    4042:	9302      	str	r3, [sp, #8]
    4044:	e026      	b.n	4094 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4046:	9a01      	ldr	r2, [sp, #4]
    4048:	9b02      	ldr	r3, [sp, #8]
    404a:	334e      	adds	r3, #78	; 0x4e
    404c:	00db      	lsls	r3, r3, #3
    404e:	4413      	add	r3, r2
    4050:	685b      	ldr	r3, [r3, #4]
    4052:	2b12      	cmp	r3, #18
    4054:	d109      	bne.n	406a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4056:	9a01      	ldr	r2, [sp, #4]
    4058:	9b02      	ldr	r3, [sp, #8]
    405a:	334e      	adds	r3, #78	; 0x4e
    405c:	00db      	lsls	r3, r3, #3
    405e:	4413      	add	r3, r2
    4060:	891b      	ldrh	r3, [r3, #8]
    4062:	005b      	lsls	r3, r3, #1
    4064:	9a03      	ldr	r2, [sp, #12]
    4066:	4313      	orrs	r3, r2
    4068:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    406a:	9a01      	ldr	r2, [sp, #4]
    406c:	9b02      	ldr	r3, [sp, #8]
    406e:	334e      	adds	r3, #78	; 0x4e
    4070:	00db      	lsls	r3, r3, #3
    4072:	4413      	add	r3, r2
    4074:	685b      	ldr	r3, [r3, #4]
    4076:	2b13      	cmp	r3, #19
    4078:	d109      	bne.n	408e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    407a:	9a01      	ldr	r2, [sp, #4]
    407c:	9b02      	ldr	r3, [sp, #8]
    407e:	334e      	adds	r3, #78	; 0x4e
    4080:	00db      	lsls	r3, r3, #3
    4082:	4413      	add	r3, r2
    4084:	891b      	ldrh	r3, [r3, #8]
    4086:	461a      	mov	r2, r3
    4088:	9b03      	ldr	r3, [sp, #12]
    408a:	4313      	orrs	r3, r2
    408c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    408e:	9b02      	ldr	r3, [sp, #8]
    4090:	3301      	adds	r3, #1
    4092:	9302      	str	r3, [sp, #8]
    4094:	9b01      	ldr	r3, [sp, #4]
    4096:	7c1b      	ldrb	r3, [r3, #16]
    4098:	461a      	mov	r2, r3
    409a:	9b02      	ldr	r3, [sp, #8]
    409c:	4293      	cmp	r3, r2
    409e:	d3d2      	bcc.n	4046 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    40a0:	4a04      	ldr	r2, [pc, #16]	; (40b4 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    40a2:	9b03      	ldr	r3, [sp, #12]
    40a4:	6113      	str	r3, [r2, #16]
}
    40a6:	bf00      	nop
    40a8:	b004      	add	sp, #16
    40aa:	4770      	bx	lr
    40ac:	0000b338 	.word	0x0000b338
    40b0:	0000b3f0 	.word	0x0000b3f0
    40b4:	40048000 	.word	0x40048000

000040b8 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    40b8:	b500      	push	{lr}
    40ba:	b089      	sub	sp, #36	; 0x24
    40bc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    40be:	2300      	movs	r3, #0
    40c0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    40c4:	4a21      	ldr	r2, [pc, #132]	; (414c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    40ca:	4b21      	ldr	r3, [pc, #132]	; (4150 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    40cc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40d0:	f003 0301 	and.w	r3, r3, #1
    40d4:	2b00      	cmp	r3, #0
    40d6:	d12e      	bne.n	4136 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    40d8:	4b1e      	ldr	r3, [pc, #120]	; (4154 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    40da:	2200      	movs	r2, #0
    40dc:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    40de:	f7ff ff69 	bl	3fb4 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40e2:	aa03      	add	r2, sp, #12
    40e4:	a904      	add	r1, sp, #16
    40e6:	a805      	add	r0, sp, #20
    40e8:	f24c 3350 	movw	r3, #50000	; 0xc350
    40ec:	f7fe f8ae 	bl	224c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    40f0:	4b17      	ldr	r3, [pc, #92]	; (4150 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    40f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40f6:	0e1b      	lsrs	r3, r3, #24
    40f8:	f003 0301 	and.w	r3, r3, #1
    40fc:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40fe:	9a03      	ldr	r2, [sp, #12]
    4100:	a904      	add	r1, sp, #16
    4102:	ab05      	add	r3, sp, #20
    4104:	4618      	mov	r0, r3
    4106:	f7fe f8bb 	bl	2280 <Clock_Ip_TimeoutExpired>
    410a:	4603      	mov	r3, r0
    410c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4110:	9b06      	ldr	r3, [sp, #24]
    4112:	2b00      	cmp	r3, #0
    4114:	d106      	bne.n	4124 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4116:	f89d 301f 	ldrb.w	r3, [sp, #31]
    411a:	f083 0301 	eor.w	r3, r3, #1
    411e:	b2db      	uxtb	r3, r3
    4120:	2b00      	cmp	r3, #0
    4122:	d1e5      	bne.n	40f0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4124:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4128:	2b00      	cmp	r3, #0
    412a:	d007      	beq.n	413c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    412c:	2105      	movs	r1, #5
    412e:	2001      	movs	r0, #1
    4130:	f7fe f87c 	bl	222c <Clock_Ip_ReportClockErrors>
    4134:	e002      	b.n	413c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4136:	4b07      	ldr	r3, [pc, #28]	; (4154 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4138:	2201      	movs	r2, #1
    413a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    413c:	9801      	ldr	r0, [sp, #4]
    413e:	f7ff ff49 	bl	3fd4 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4142:	bf00      	nop
    4144:	b009      	add	sp, #36	; 0x24
    4146:	f85d fb04 	ldr.w	pc, [sp], #4
    414a:	bf00      	nop
    414c:	1fff8bec 	.word	0x1fff8bec
    4150:	40064000 	.word	0x40064000
    4154:	1fff8b18 	.word	0x1fff8b18

00004158 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4158:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    415a:	2300      	movs	r3, #0
    415c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    415e:	4b29      	ldr	r3, [pc, #164]	; (4204 <getFircConfig+0xac>)
    4160:	681b      	ldr	r3, [r3, #0]
    4162:	2b00      	cmp	r3, #0
    4164:	d024      	beq.n	41b0 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4166:	2300      	movs	r3, #0
    4168:	9301      	str	r3, [sp, #4]
    416a:	e01a      	b.n	41a2 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    416c:	4b25      	ldr	r3, [pc, #148]	; (4204 <getFircConfig+0xac>)
    416e:	6819      	ldr	r1, [r3, #0]
    4170:	9a01      	ldr	r2, [sp, #4]
    4172:	4613      	mov	r3, r2
    4174:	005b      	lsls	r3, r3, #1
    4176:	4413      	add	r3, r2
    4178:	009b      	lsls	r3, r3, #2
    417a:	440b      	add	r3, r1
    417c:	3314      	adds	r3, #20
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	2b05      	cmp	r3, #5
    4182:	d10b      	bne.n	419c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4184:	4b1f      	ldr	r3, [pc, #124]	; (4204 <getFircConfig+0xac>)
    4186:	6819      	ldr	r1, [r3, #0]
    4188:	9a01      	ldr	r2, [sp, #4]
    418a:	4613      	mov	r3, r2
    418c:	005b      	lsls	r3, r3, #1
    418e:	4413      	add	r3, r2
    4190:	009b      	lsls	r3, r3, #2
    4192:	3310      	adds	r3, #16
    4194:	440b      	add	r3, r1
    4196:	3304      	adds	r3, #4
    4198:	9300      	str	r3, [sp, #0]
                break;
    419a:	e009      	b.n	41b0 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    419c:	9b01      	ldr	r3, [sp, #4]
    419e:	3301      	adds	r3, #1
    41a0:	9301      	str	r3, [sp, #4]
    41a2:	4b18      	ldr	r3, [pc, #96]	; (4204 <getFircConfig+0xac>)
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	7a1b      	ldrb	r3, [r3, #8]
    41a8:	461a      	mov	r2, r3
    41aa:	9b01      	ldr	r3, [sp, #4]
    41ac:	4293      	cmp	r3, r2
    41ae:	d3dd      	bcc.n	416c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41b0:	9b00      	ldr	r3, [sp, #0]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d121      	bne.n	41fa <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    41b6:	4b14      	ldr	r3, [pc, #80]	; (4208 <getFircConfig+0xb0>)
    41b8:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    41ba:	4b13      	ldr	r3, [pc, #76]	; (4208 <getFircConfig+0xb0>)
    41bc:	2205      	movs	r2, #5
    41be:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    41c0:	4b12      	ldr	r3, [pc, #72]	; (420c <getFircConfig+0xb4>)
    41c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41c6:	b29b      	uxth	r3, r3
    41c8:	f003 0301 	and.w	r3, r3, #1
    41cc:	b29a      	uxth	r2, r3
    41ce:	4b0e      	ldr	r3, [pc, #56]	; (4208 <getFircConfig+0xb0>)
    41d0:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    41d2:	4b0e      	ldr	r3, [pc, #56]	; (420c <getFircConfig+0xb4>)
    41d4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    41d8:	b2db      	uxtb	r3, r3
    41da:	f003 0303 	and.w	r3, r3, #3
    41de:	b2da      	uxtb	r2, r3
    41e0:	4b09      	ldr	r3, [pc, #36]	; (4208 <getFircConfig+0xb0>)
    41e2:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    41e4:	4b09      	ldr	r3, [pc, #36]	; (420c <getFircConfig+0xb4>)
    41e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41ea:	b2db      	uxtb	r3, r3
    41ec:	10db      	asrs	r3, r3, #3
    41ee:	b2db      	uxtb	r3, r3
    41f0:	f003 0301 	and.w	r3, r3, #1
    41f4:	b2da      	uxtb	r2, r3
    41f6:	4b04      	ldr	r3, [pc, #16]	; (4208 <getFircConfig+0xb0>)
    41f8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    41fa:	9b00      	ldr	r3, [sp, #0]
}
    41fc:	4618      	mov	r0, r3
    41fe:	b002      	add	sp, #8
    4200:	4770      	bx	lr
    4202:	bf00      	nop
    4204:	1fff8bec 	.word	0x1fff8bec
    4208:	1fff8c58 	.word	0x1fff8c58
    420c:	40064000 	.word	0x40064000

00004210 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4210:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4212:	2300      	movs	r3, #0
    4214:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4216:	4b20      	ldr	r3, [pc, #128]	; (4298 <getSoscConfig+0x88>)
    4218:	681b      	ldr	r3, [r3, #0]
    421a:	2b00      	cmp	r3, #0
    421c:	d024      	beq.n	4268 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    421e:	2300      	movs	r3, #0
    4220:	9301      	str	r3, [sp, #4]
    4222:	e01a      	b.n	425a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4224:	4b1c      	ldr	r3, [pc, #112]	; (4298 <getSoscConfig+0x88>)
    4226:	6819      	ldr	r1, [r3, #0]
    4228:	9a01      	ldr	r2, [sp, #4]
    422a:	4613      	mov	r3, r2
    422c:	009b      	lsls	r3, r3, #2
    422e:	4413      	add	r3, r2
    4230:	009b      	lsls	r3, r3, #2
    4232:	440b      	add	r3, r1
    4234:	332c      	adds	r3, #44	; 0x2c
    4236:	681b      	ldr	r3, [r3, #0]
    4238:	2b08      	cmp	r3, #8
    423a:	d10b      	bne.n	4254 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    423c:	4b16      	ldr	r3, [pc, #88]	; (4298 <getSoscConfig+0x88>)
    423e:	6819      	ldr	r1, [r3, #0]
    4240:	9a01      	ldr	r2, [sp, #4]
    4242:	4613      	mov	r3, r2
    4244:	009b      	lsls	r3, r3, #2
    4246:	4413      	add	r3, r2
    4248:	009b      	lsls	r3, r3, #2
    424a:	3328      	adds	r3, #40	; 0x28
    424c:	440b      	add	r3, r1
    424e:	3304      	adds	r3, #4
    4250:	9300      	str	r3, [sp, #0]
                break;
    4252:	e009      	b.n	4268 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4254:	9b01      	ldr	r3, [sp, #4]
    4256:	3301      	adds	r3, #1
    4258:	9301      	str	r3, [sp, #4]
    425a:	4b0f      	ldr	r3, [pc, #60]	; (4298 <getSoscConfig+0x88>)
    425c:	681b      	ldr	r3, [r3, #0]
    425e:	7a5b      	ldrb	r3, [r3, #9]
    4260:	461a      	mov	r2, r3
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	4293      	cmp	r3, r2
    4266:	d3dd      	bcc.n	4224 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4268:	9b00      	ldr	r3, [sp, #0]
    426a:	2b00      	cmp	r3, #0
    426c:	d110      	bne.n	4290 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    426e:	4b0b      	ldr	r3, [pc, #44]	; (429c <getSoscConfig+0x8c>)
    4270:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4272:	4b0a      	ldr	r3, [pc, #40]	; (429c <getSoscConfig+0x8c>)
    4274:	2208      	movs	r2, #8
    4276:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4278:	4b09      	ldr	r3, [pc, #36]	; (42a0 <getSoscConfig+0x90>)
    427a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    427e:	b29b      	uxth	r3, r3
    4280:	f003 0301 	and.w	r3, r3, #1
    4284:	b29a      	uxth	r2, r3
    4286:	4b05      	ldr	r3, [pc, #20]	; (429c <getSoscConfig+0x8c>)
    4288:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    428a:	4b04      	ldr	r3, [pc, #16]	; (429c <getSoscConfig+0x8c>)
    428c:	4a05      	ldr	r2, [pc, #20]	; (42a4 <getSoscConfig+0x94>)
    428e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4290:	9b00      	ldr	r3, [sp, #0]
}
    4292:	4618      	mov	r0, r3
    4294:	b002      	add	sp, #8
    4296:	4770      	bx	lr
    4298:	1fff8bec 	.word	0x1fff8bec
    429c:	1fff8c64 	.word	0x1fff8c64
    42a0:	40064000 	.word	0x40064000
    42a4:	02625a00 	.word	0x02625a00

000042a8 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    42a8:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    42aa:	2300      	movs	r3, #0
    42ac:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    42ae:	4b28      	ldr	r3, [pc, #160]	; (4350 <getSpllConfig+0xa8>)
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d023      	beq.n	42fe <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    42b6:	2300      	movs	r3, #0
    42b8:	9301      	str	r3, [sp, #4]
    42ba:	e019      	b.n	42f0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    42bc:	4b24      	ldr	r3, [pc, #144]	; (4350 <getSpllConfig+0xa8>)
    42be:	6819      	ldr	r1, [r3, #0]
    42c0:	9a01      	ldr	r2, [sp, #4]
    42c2:	4613      	mov	r3, r2
    42c4:	009b      	lsls	r3, r3, #2
    42c6:	4413      	add	r3, r2
    42c8:	00db      	lsls	r3, r3, #3
    42ca:	440b      	add	r3, r1
    42cc:	3340      	adds	r3, #64	; 0x40
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	2b09      	cmp	r3, #9
    42d2:	d10a      	bne.n	42ea <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    42d4:	4b1e      	ldr	r3, [pc, #120]	; (4350 <getSpllConfig+0xa8>)
    42d6:	6819      	ldr	r1, [r3, #0]
    42d8:	9a01      	ldr	r2, [sp, #4]
    42da:	4613      	mov	r3, r2
    42dc:	009b      	lsls	r3, r3, #2
    42de:	4413      	add	r3, r2
    42e0:	00db      	lsls	r3, r3, #3
    42e2:	3340      	adds	r3, #64	; 0x40
    42e4:	440b      	add	r3, r1
    42e6:	9300      	str	r3, [sp, #0]
                break;
    42e8:	e009      	b.n	42fe <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    42ea:	9b01      	ldr	r3, [sp, #4]
    42ec:	3301      	adds	r3, #1
    42ee:	9301      	str	r3, [sp, #4]
    42f0:	4b17      	ldr	r3, [pc, #92]	; (4350 <getSpllConfig+0xa8>)
    42f2:	681b      	ldr	r3, [r3, #0]
    42f4:	7a9b      	ldrb	r3, [r3, #10]
    42f6:	461a      	mov	r2, r3
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	4293      	cmp	r3, r2
    42fc:	d3de      	bcc.n	42bc <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42fe:	9b00      	ldr	r3, [sp, #0]
    4300:	2b00      	cmp	r3, #0
    4302:	d121      	bne.n	4348 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4304:	4b13      	ldr	r3, [pc, #76]	; (4354 <getSpllConfig+0xac>)
    4306:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4308:	4b12      	ldr	r3, [pc, #72]	; (4354 <getSpllConfig+0xac>)
    430a:	2209      	movs	r2, #9
    430c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    430e:	4b12      	ldr	r3, [pc, #72]	; (4358 <getSpllConfig+0xb0>)
    4310:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4314:	b29b      	uxth	r3, r3
    4316:	f003 0301 	and.w	r3, r3, #1
    431a:	b29a      	uxth	r2, r3
    431c:	4b0d      	ldr	r3, [pc, #52]	; (4354 <getSpllConfig+0xac>)
    431e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4320:	4b0d      	ldr	r3, [pc, #52]	; (4358 <getSpllConfig+0xb0>)
    4322:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4326:	0a1b      	lsrs	r3, r3, #8
    4328:	b2db      	uxtb	r3, r3
    432a:	f003 0307 	and.w	r3, r3, #7
    432e:	b2da      	uxtb	r2, r3
    4330:	4b08      	ldr	r3, [pc, #32]	; (4354 <getSpllConfig+0xac>)
    4332:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4334:	4b08      	ldr	r3, [pc, #32]	; (4358 <getSpllConfig+0xb0>)
    4336:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    433a:	0c1b      	lsrs	r3, r3, #16
    433c:	b2db      	uxtb	r3, r3
    433e:	f003 031f 	and.w	r3, r3, #31
    4342:	b2da      	uxtb	r2, r3
    4344:	4b03      	ldr	r3, [pc, #12]	; (4354 <getSpllConfig+0xac>)
    4346:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4348:	9b00      	ldr	r3, [sp, #0]
}
    434a:	4618      	mov	r0, r3
    434c:	b002      	add	sp, #8
    434e:	4770      	bx	lr
    4350:	1fff8bec 	.word	0x1fff8bec
    4354:	1fff8c78 	.word	0x1fff8c78
    4358:	40064000 	.word	0x40064000

0000435c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    435c:	b086      	sub	sp, #24
    435e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4360:	2300      	movs	r3, #0
    4362:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4364:	9b01      	ldr	r3, [sp, #4]
    4366:	2b1b      	cmp	r3, #27
    4368:	d00f      	beq.n	438a <getSelectorConfig+0x2e>
    436a:	9b01      	ldr	r3, [sp, #4]
    436c:	2b1b      	cmp	r3, #27
    436e:	d80f      	bhi.n	4390 <getSelectorConfig+0x34>
    4370:	9b01      	ldr	r3, [sp, #4]
    4372:	2b19      	cmp	r3, #25
    4374:	d003      	beq.n	437e <getSelectorConfig+0x22>
    4376:	9b01      	ldr	r3, [sp, #4]
    4378:	2b1a      	cmp	r3, #26
    437a:	d003      	beq.n	4384 <getSelectorConfig+0x28>
    437c:	e008      	b.n	4390 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    437e:	2300      	movs	r3, #0
    4380:	9304      	str	r3, [sp, #16]
            break;
    4382:	e008      	b.n	4396 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4384:	2301      	movs	r3, #1
    4386:	9304      	str	r3, [sp, #16]
            break;
    4388:	e005      	b.n	4396 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    438a:	2302      	movs	r3, #2
    438c:	9304      	str	r3, [sp, #16]
            break;
    438e:	e002      	b.n	4396 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4390:	2300      	movs	r3, #0
    4392:	9304      	str	r3, [sp, #16]
            break;
    4394:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4396:	4b36      	ldr	r3, [pc, #216]	; (4470 <getSelectorConfig+0x114>)
    4398:	681b      	ldr	r3, [r3, #0]
    439a:	2b00      	cmp	r3, #0
    439c:	d01d      	beq.n	43da <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    439e:	2300      	movs	r3, #0
    43a0:	9303      	str	r3, [sp, #12]
    43a2:	e013      	b.n	43cc <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    43a4:	4b32      	ldr	r3, [pc, #200]	; (4470 <getSelectorConfig+0x114>)
    43a6:	681b      	ldr	r3, [r3, #0]
    43a8:	9a03      	ldr	r2, [sp, #12]
    43aa:	320d      	adds	r2, #13
    43ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    43b0:	9a01      	ldr	r2, [sp, #4]
    43b2:	429a      	cmp	r2, r3
    43b4:	d107      	bne.n	43c6 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    43b6:	4b2e      	ldr	r3, [pc, #184]	; (4470 <getSelectorConfig+0x114>)
    43b8:	681a      	ldr	r2, [r3, #0]
    43ba:	9b03      	ldr	r3, [sp, #12]
    43bc:	330d      	adds	r3, #13
    43be:	00db      	lsls	r3, r3, #3
    43c0:	4413      	add	r3, r2
    43c2:	9305      	str	r3, [sp, #20]
                break;
    43c4:	e009      	b.n	43da <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    43c6:	9b03      	ldr	r3, [sp, #12]
    43c8:	3301      	adds	r3, #1
    43ca:	9303      	str	r3, [sp, #12]
    43cc:	4b28      	ldr	r3, [pc, #160]	; (4470 <getSelectorConfig+0x114>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	7adb      	ldrb	r3, [r3, #11]
    43d2:	461a      	mov	r2, r3
    43d4:	9b03      	ldr	r3, [sp, #12]
    43d6:	4293      	cmp	r3, r2
    43d8:	d3e4      	bcc.n	43a4 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    43da:	9b05      	ldr	r3, [sp, #20]
    43dc:	2b00      	cmp	r3, #0
    43de:	d140      	bne.n	4462 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    43e0:	9b04      	ldr	r3, [sp, #16]
    43e2:	00db      	lsls	r3, r3, #3
    43e4:	4a23      	ldr	r2, [pc, #140]	; (4474 <getSelectorConfig+0x118>)
    43e6:	4413      	add	r3, r2
    43e8:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    43ea:	4922      	ldr	r1, [pc, #136]	; (4474 <getSelectorConfig+0x118>)
    43ec:	9b04      	ldr	r3, [sp, #16]
    43ee:	9a01      	ldr	r2, [sp, #4]
    43f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    43f4:	9b01      	ldr	r3, [sp, #4]
    43f6:	2b1b      	cmp	r3, #27
    43f8:	d025      	beq.n	4446 <getSelectorConfig+0xea>
    43fa:	9b01      	ldr	r3, [sp, #4]
    43fc:	2b1b      	cmp	r3, #27
    43fe:	d832      	bhi.n	4466 <getSelectorConfig+0x10a>
    4400:	9b01      	ldr	r3, [sp, #4]
    4402:	2b19      	cmp	r3, #25
    4404:	d003      	beq.n	440e <getSelectorConfig+0xb2>
    4406:	9b01      	ldr	r3, [sp, #4]
    4408:	2b1a      	cmp	r3, #26
    440a:	d00e      	beq.n	442a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    440c:	e02b      	b.n	4466 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    440e:	4b1a      	ldr	r3, [pc, #104]	; (4478 <getSelectorConfig+0x11c>)
    4410:	695b      	ldr	r3, [r3, #20]
    4412:	0e1b      	lsrs	r3, r3, #24
    4414:	f003 030f 	and.w	r3, r3, #15
    4418:	4a18      	ldr	r2, [pc, #96]	; (447c <getSelectorConfig+0x120>)
    441a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    441e:	4915      	ldr	r1, [pc, #84]	; (4474 <getSelectorConfig+0x118>)
    4420:	9b04      	ldr	r3, [sp, #16]
    4422:	00db      	lsls	r3, r3, #3
    4424:	440b      	add	r3, r1
    4426:	605a      	str	r2, [r3, #4]
                break;
    4428:	e01e      	b.n	4468 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    442a:	4b13      	ldr	r3, [pc, #76]	; (4478 <getSelectorConfig+0x11c>)
    442c:	699b      	ldr	r3, [r3, #24]
    442e:	0e1b      	lsrs	r3, r3, #24
    4430:	f003 030f 	and.w	r3, r3, #15
    4434:	4a11      	ldr	r2, [pc, #68]	; (447c <getSelectorConfig+0x120>)
    4436:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    443a:	490e      	ldr	r1, [pc, #56]	; (4474 <getSelectorConfig+0x118>)
    443c:	9b04      	ldr	r3, [sp, #16]
    443e:	00db      	lsls	r3, r3, #3
    4440:	440b      	add	r3, r1
    4442:	605a      	str	r2, [r3, #4]
                break;
    4444:	e010      	b.n	4468 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4446:	4b0c      	ldr	r3, [pc, #48]	; (4478 <getSelectorConfig+0x11c>)
    4448:	69db      	ldr	r3, [r3, #28]
    444a:	0e1b      	lsrs	r3, r3, #24
    444c:	f003 030f 	and.w	r3, r3, #15
    4450:	4a0a      	ldr	r2, [pc, #40]	; (447c <getSelectorConfig+0x120>)
    4452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4456:	4907      	ldr	r1, [pc, #28]	; (4474 <getSelectorConfig+0x118>)
    4458:	9b04      	ldr	r3, [sp, #16]
    445a:	00db      	lsls	r3, r3, #3
    445c:	440b      	add	r3, r1
    445e:	605a      	str	r2, [r3, #4]
                break;
    4460:	e002      	b.n	4468 <getSelectorConfig+0x10c>
        }
    }
    4462:	bf00      	nop
    4464:	e000      	b.n	4468 <getSelectorConfig+0x10c>
                break;
    4466:	bf00      	nop

    return ReturnValue;
    4468:	9b05      	ldr	r3, [sp, #20]
}
    446a:	4618      	mov	r0, r3
    446c:	b006      	add	sp, #24
    446e:	4770      	bx	lr
    4470:	1fff8bec 	.word	0x1fff8bec
    4474:	1fff8ca0 	.word	0x1fff8ca0
    4478:	40064000 	.word	0x40064000
    447c:	0000b6b8 	.word	0x0000b6b8

00004480 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4480:	b086      	sub	sp, #24
    4482:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4484:	2300      	movs	r3, #0
    4486:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4488:	2300      	movs	r3, #0
    448a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    448c:	9b01      	ldr	r3, [sp, #4]
    448e:	2b1f      	cmp	r3, #31
    4490:	d00f      	beq.n	44b2 <getCoreDividerConfig+0x32>
    4492:	9b01      	ldr	r3, [sp, #4]
    4494:	2b1f      	cmp	r3, #31
    4496:	d80f      	bhi.n	44b8 <getCoreDividerConfig+0x38>
    4498:	9b01      	ldr	r3, [sp, #4]
    449a:	2b1d      	cmp	r3, #29
    449c:	d003      	beq.n	44a6 <getCoreDividerConfig+0x26>
    449e:	9b01      	ldr	r3, [sp, #4]
    44a0:	2b1e      	cmp	r3, #30
    44a2:	d003      	beq.n	44ac <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44a4:	e008      	b.n	44b8 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44a6:	2300      	movs	r3, #0
    44a8:	9304      	str	r3, [sp, #16]
            break;
    44aa:	e006      	b.n	44ba <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44ac:	2301      	movs	r3, #1
    44ae:	9304      	str	r3, [sp, #16]
            break;
    44b0:	e003      	b.n	44ba <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    44b2:	2302      	movs	r3, #2
    44b4:	9304      	str	r3, [sp, #16]
            break;
    44b6:	e000      	b.n	44ba <getCoreDividerConfig+0x3a>
                break;
    44b8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    44ba:	4b41      	ldr	r3, [pc, #260]	; (45c0 <getCoreDividerConfig+0x140>)
    44bc:	681b      	ldr	r3, [r3, #0]
    44be:	2b00      	cmp	r3, #0
    44c0:	d026      	beq.n	4510 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44c2:	2300      	movs	r3, #0
    44c4:	9303      	str	r3, [sp, #12]
    44c6:	e01c      	b.n	4502 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    44c8:	4b3d      	ldr	r3, [pc, #244]	; (45c0 <getCoreDividerConfig+0x140>)
    44ca:	6819      	ldr	r1, [r3, #0]
    44cc:	9a03      	ldr	r2, [sp, #12]
    44ce:	4613      	mov	r3, r2
    44d0:	005b      	lsls	r3, r3, #1
    44d2:	4413      	add	r3, r2
    44d4:	009b      	lsls	r3, r3, #2
    44d6:	440b      	add	r3, r1
    44d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	9a01      	ldr	r2, [sp, #4]
    44e0:	429a      	cmp	r2, r3
    44e2:	d10b      	bne.n	44fc <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    44e4:	4b36      	ldr	r3, [pc, #216]	; (45c0 <getCoreDividerConfig+0x140>)
    44e6:	6819      	ldr	r1, [r3, #0]
    44e8:	9a03      	ldr	r2, [sp, #12]
    44ea:	4613      	mov	r3, r2
    44ec:	005b      	lsls	r3, r3, #1
    44ee:	4413      	add	r3, r2
    44f0:	009b      	lsls	r3, r3, #2
    44f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    44f6:	440b      	add	r3, r1
    44f8:	9305      	str	r3, [sp, #20]
                break;
    44fa:	e009      	b.n	4510 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44fc:	9b03      	ldr	r3, [sp, #12]
    44fe:	3301      	adds	r3, #1
    4500:	9303      	str	r3, [sp, #12]
    4502:	4b2f      	ldr	r3, [pc, #188]	; (45c0 <getCoreDividerConfig+0x140>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	7b1b      	ldrb	r3, [r3, #12]
    4508:	461a      	mov	r2, r3
    450a:	9b03      	ldr	r3, [sp, #12]
    450c:	4293      	cmp	r3, r2
    450e:	d3db      	bcc.n	44c8 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4510:	9b05      	ldr	r3, [sp, #20]
    4512:	2b00      	cmp	r3, #0
    4514:	d14d      	bne.n	45b2 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4516:	9a04      	ldr	r2, [sp, #16]
    4518:	4613      	mov	r3, r2
    451a:	005b      	lsls	r3, r3, #1
    451c:	4413      	add	r3, r2
    451e:	009b      	lsls	r3, r3, #2
    4520:	4a28      	ldr	r2, [pc, #160]	; (45c4 <getCoreDividerConfig+0x144>)
    4522:	4413      	add	r3, r2
    4524:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4526:	4927      	ldr	r1, [pc, #156]	; (45c4 <getCoreDividerConfig+0x144>)
    4528:	9a04      	ldr	r2, [sp, #16]
    452a:	4613      	mov	r3, r2
    452c:	005b      	lsls	r3, r3, #1
    452e:	4413      	add	r3, r2
    4530:	009b      	lsls	r3, r3, #2
    4532:	440b      	add	r3, r1
    4534:	9a01      	ldr	r2, [sp, #4]
    4536:	601a      	str	r2, [r3, #0]
        switch(Name)
    4538:	9b01      	ldr	r3, [sp, #4]
    453a:	2b1f      	cmp	r3, #31
    453c:	d029      	beq.n	4592 <getCoreDividerConfig+0x112>
    453e:	9b01      	ldr	r3, [sp, #4]
    4540:	2b1f      	cmp	r3, #31
    4542:	d838      	bhi.n	45b6 <getCoreDividerConfig+0x136>
    4544:	9b01      	ldr	r3, [sp, #4]
    4546:	2b1d      	cmp	r3, #29
    4548:	d003      	beq.n	4552 <getCoreDividerConfig+0xd2>
    454a:	9b01      	ldr	r3, [sp, #4]
    454c:	2b1e      	cmp	r3, #30
    454e:	d010      	beq.n	4572 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4550:	e031      	b.n	45b6 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4552:	4b1d      	ldr	r3, [pc, #116]	; (45c8 <getCoreDividerConfig+0x148>)
    4554:	695b      	ldr	r3, [r3, #20]
    4556:	0c1b      	lsrs	r3, r3, #16
    4558:	f003 030f 	and.w	r3, r3, #15
    455c:	1c59      	adds	r1, r3, #1
    455e:	4819      	ldr	r0, [pc, #100]	; (45c4 <getCoreDividerConfig+0x144>)
    4560:	9a04      	ldr	r2, [sp, #16]
    4562:	4613      	mov	r3, r2
    4564:	005b      	lsls	r3, r3, #1
    4566:	4413      	add	r3, r2
    4568:	009b      	lsls	r3, r3, #2
    456a:	4403      	add	r3, r0
    456c:	3304      	adds	r3, #4
    456e:	6019      	str	r1, [r3, #0]
                break;
    4570:	e022      	b.n	45b8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4572:	4b15      	ldr	r3, [pc, #84]	; (45c8 <getCoreDividerConfig+0x148>)
    4574:	699b      	ldr	r3, [r3, #24]
    4576:	0c1b      	lsrs	r3, r3, #16
    4578:	f003 030f 	and.w	r3, r3, #15
    457c:	1c59      	adds	r1, r3, #1
    457e:	4811      	ldr	r0, [pc, #68]	; (45c4 <getCoreDividerConfig+0x144>)
    4580:	9a04      	ldr	r2, [sp, #16]
    4582:	4613      	mov	r3, r2
    4584:	005b      	lsls	r3, r3, #1
    4586:	4413      	add	r3, r2
    4588:	009b      	lsls	r3, r3, #2
    458a:	4403      	add	r3, r0
    458c:	3304      	adds	r3, #4
    458e:	6019      	str	r1, [r3, #0]
                break;
    4590:	e012      	b.n	45b8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4592:	4b0d      	ldr	r3, [pc, #52]	; (45c8 <getCoreDividerConfig+0x148>)
    4594:	69db      	ldr	r3, [r3, #28]
    4596:	0c1b      	lsrs	r3, r3, #16
    4598:	f003 030f 	and.w	r3, r3, #15
    459c:	1c59      	adds	r1, r3, #1
    459e:	4809      	ldr	r0, [pc, #36]	; (45c4 <getCoreDividerConfig+0x144>)
    45a0:	9a04      	ldr	r2, [sp, #16]
    45a2:	4613      	mov	r3, r2
    45a4:	005b      	lsls	r3, r3, #1
    45a6:	4413      	add	r3, r2
    45a8:	009b      	lsls	r3, r3, #2
    45aa:	4403      	add	r3, r0
    45ac:	3304      	adds	r3, #4
    45ae:	6019      	str	r1, [r3, #0]
                break;
    45b0:	e002      	b.n	45b8 <getCoreDividerConfig+0x138>
        }
    }
    45b2:	bf00      	nop
    45b4:	e000      	b.n	45b8 <getCoreDividerConfig+0x138>
                break;
    45b6:	bf00      	nop

    return ReturnValue;
    45b8:	9b05      	ldr	r3, [sp, #20]
}
    45ba:	4618      	mov	r0, r3
    45bc:	b006      	add	sp, #24
    45be:	4770      	bx	lr
    45c0:	1fff8bec 	.word	0x1fff8bec
    45c4:	1fff8cb8 	.word	0x1fff8cb8
    45c8:	40064000 	.word	0x40064000

000045cc <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    45cc:	b086      	sub	sp, #24
    45ce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    45d0:	2300      	movs	r3, #0
    45d2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    45d4:	2300      	movs	r3, #0
    45d6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	2b23      	cmp	r3, #35	; 0x23
    45dc:	d00f      	beq.n	45fe <getBusDividerConfig+0x32>
    45de:	9b01      	ldr	r3, [sp, #4]
    45e0:	2b23      	cmp	r3, #35	; 0x23
    45e2:	d80f      	bhi.n	4604 <getBusDividerConfig+0x38>
    45e4:	9b01      	ldr	r3, [sp, #4]
    45e6:	2b21      	cmp	r3, #33	; 0x21
    45e8:	d003      	beq.n	45f2 <getBusDividerConfig+0x26>
    45ea:	9b01      	ldr	r3, [sp, #4]
    45ec:	2b22      	cmp	r3, #34	; 0x22
    45ee:	d003      	beq.n	45f8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    45f0:	e008      	b.n	4604 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    45f2:	2300      	movs	r3, #0
    45f4:	9304      	str	r3, [sp, #16]
            break;
    45f6:	e006      	b.n	4606 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    45f8:	2301      	movs	r3, #1
    45fa:	9304      	str	r3, [sp, #16]
            break;
    45fc:	e003      	b.n	4606 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    45fe:	2302      	movs	r3, #2
    4600:	9304      	str	r3, [sp, #16]
            break;
    4602:	e000      	b.n	4606 <getBusDividerConfig+0x3a>
                break;
    4604:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4606:	4b41      	ldr	r3, [pc, #260]	; (470c <getBusDividerConfig+0x140>)
    4608:	681b      	ldr	r3, [r3, #0]
    460a:	2b00      	cmp	r3, #0
    460c:	d026      	beq.n	465c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    460e:	2300      	movs	r3, #0
    4610:	9303      	str	r3, [sp, #12]
    4612:	e01c      	b.n	464e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4614:	4b3d      	ldr	r3, [pc, #244]	; (470c <getBusDividerConfig+0x140>)
    4616:	6819      	ldr	r1, [r3, #0]
    4618:	9a03      	ldr	r2, [sp, #12]
    461a:	4613      	mov	r3, r2
    461c:	005b      	lsls	r3, r3, #1
    461e:	4413      	add	r3, r2
    4620:	009b      	lsls	r3, r3, #2
    4622:	440b      	add	r3, r1
    4624:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4628:	681b      	ldr	r3, [r3, #0]
    462a:	9a01      	ldr	r2, [sp, #4]
    462c:	429a      	cmp	r2, r3
    462e:	d10b      	bne.n	4648 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4630:	4b36      	ldr	r3, [pc, #216]	; (470c <getBusDividerConfig+0x140>)
    4632:	6819      	ldr	r1, [r3, #0]
    4634:	9a03      	ldr	r2, [sp, #12]
    4636:	4613      	mov	r3, r2
    4638:	005b      	lsls	r3, r3, #1
    463a:	4413      	add	r3, r2
    463c:	009b      	lsls	r3, r3, #2
    463e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4642:	440b      	add	r3, r1
    4644:	9305      	str	r3, [sp, #20]
                break;
    4646:	e009      	b.n	465c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4648:	9b03      	ldr	r3, [sp, #12]
    464a:	3301      	adds	r3, #1
    464c:	9303      	str	r3, [sp, #12]
    464e:	4b2f      	ldr	r3, [pc, #188]	; (470c <getBusDividerConfig+0x140>)
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	7b1b      	ldrb	r3, [r3, #12]
    4654:	461a      	mov	r2, r3
    4656:	9b03      	ldr	r3, [sp, #12]
    4658:	4293      	cmp	r3, r2
    465a:	d3db      	bcc.n	4614 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    465c:	9b05      	ldr	r3, [sp, #20]
    465e:	2b00      	cmp	r3, #0
    4660:	d14d      	bne.n	46fe <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4662:	9a04      	ldr	r2, [sp, #16]
    4664:	4613      	mov	r3, r2
    4666:	005b      	lsls	r3, r3, #1
    4668:	4413      	add	r3, r2
    466a:	009b      	lsls	r3, r3, #2
    466c:	4a28      	ldr	r2, [pc, #160]	; (4710 <getBusDividerConfig+0x144>)
    466e:	4413      	add	r3, r2
    4670:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4672:	4927      	ldr	r1, [pc, #156]	; (4710 <getBusDividerConfig+0x144>)
    4674:	9a04      	ldr	r2, [sp, #16]
    4676:	4613      	mov	r3, r2
    4678:	005b      	lsls	r3, r3, #1
    467a:	4413      	add	r3, r2
    467c:	009b      	lsls	r3, r3, #2
    467e:	440b      	add	r3, r1
    4680:	9a01      	ldr	r2, [sp, #4]
    4682:	601a      	str	r2, [r3, #0]
        switch(Name)
    4684:	9b01      	ldr	r3, [sp, #4]
    4686:	2b23      	cmp	r3, #35	; 0x23
    4688:	d029      	beq.n	46de <getBusDividerConfig+0x112>
    468a:	9b01      	ldr	r3, [sp, #4]
    468c:	2b23      	cmp	r3, #35	; 0x23
    468e:	d838      	bhi.n	4702 <getBusDividerConfig+0x136>
    4690:	9b01      	ldr	r3, [sp, #4]
    4692:	2b21      	cmp	r3, #33	; 0x21
    4694:	d003      	beq.n	469e <getBusDividerConfig+0xd2>
    4696:	9b01      	ldr	r3, [sp, #4]
    4698:	2b22      	cmp	r3, #34	; 0x22
    469a:	d010      	beq.n	46be <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    469c:	e031      	b.n	4702 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    469e:	4b1d      	ldr	r3, [pc, #116]	; (4714 <getBusDividerConfig+0x148>)
    46a0:	695b      	ldr	r3, [r3, #20]
    46a2:	091b      	lsrs	r3, r3, #4
    46a4:	f003 030f 	and.w	r3, r3, #15
    46a8:	1c59      	adds	r1, r3, #1
    46aa:	4819      	ldr	r0, [pc, #100]	; (4710 <getBusDividerConfig+0x144>)
    46ac:	9a04      	ldr	r2, [sp, #16]
    46ae:	4613      	mov	r3, r2
    46b0:	005b      	lsls	r3, r3, #1
    46b2:	4413      	add	r3, r2
    46b4:	009b      	lsls	r3, r3, #2
    46b6:	4403      	add	r3, r0
    46b8:	3304      	adds	r3, #4
    46ba:	6019      	str	r1, [r3, #0]
                break;
    46bc:	e022      	b.n	4704 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    46be:	4b15      	ldr	r3, [pc, #84]	; (4714 <getBusDividerConfig+0x148>)
    46c0:	699b      	ldr	r3, [r3, #24]
    46c2:	091b      	lsrs	r3, r3, #4
    46c4:	f003 030f 	and.w	r3, r3, #15
    46c8:	1c59      	adds	r1, r3, #1
    46ca:	4811      	ldr	r0, [pc, #68]	; (4710 <getBusDividerConfig+0x144>)
    46cc:	9a04      	ldr	r2, [sp, #16]
    46ce:	4613      	mov	r3, r2
    46d0:	005b      	lsls	r3, r3, #1
    46d2:	4413      	add	r3, r2
    46d4:	009b      	lsls	r3, r3, #2
    46d6:	4403      	add	r3, r0
    46d8:	3304      	adds	r3, #4
    46da:	6019      	str	r1, [r3, #0]
                break;
    46dc:	e012      	b.n	4704 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    46de:	4b0d      	ldr	r3, [pc, #52]	; (4714 <getBusDividerConfig+0x148>)
    46e0:	69db      	ldr	r3, [r3, #28]
    46e2:	091b      	lsrs	r3, r3, #4
    46e4:	f003 030f 	and.w	r3, r3, #15
    46e8:	1c59      	adds	r1, r3, #1
    46ea:	4809      	ldr	r0, [pc, #36]	; (4710 <getBusDividerConfig+0x144>)
    46ec:	9a04      	ldr	r2, [sp, #16]
    46ee:	4613      	mov	r3, r2
    46f0:	005b      	lsls	r3, r3, #1
    46f2:	4413      	add	r3, r2
    46f4:	009b      	lsls	r3, r3, #2
    46f6:	4403      	add	r3, r0
    46f8:	3304      	adds	r3, #4
    46fa:	6019      	str	r1, [r3, #0]
                break;
    46fc:	e002      	b.n	4704 <getBusDividerConfig+0x138>
        }
    }
    46fe:	bf00      	nop
    4700:	e000      	b.n	4704 <getBusDividerConfig+0x138>
                break;
    4702:	bf00      	nop

    return ReturnValue;
    4704:	9b05      	ldr	r3, [sp, #20]
}
    4706:	4618      	mov	r0, r3
    4708:	b006      	add	sp, #24
    470a:	4770      	bx	lr
    470c:	1fff8bec 	.word	0x1fff8bec
    4710:	1fff8cdc 	.word	0x1fff8cdc
    4714:	40064000 	.word	0x40064000

00004718 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4718:	b086      	sub	sp, #24
    471a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    471c:	2300      	movs	r3, #0
    471e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4720:	2300      	movs	r3, #0
    4722:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4724:	9b01      	ldr	r3, [sp, #4]
    4726:	2b27      	cmp	r3, #39	; 0x27
    4728:	d00f      	beq.n	474a <getSlowDividerConfig+0x32>
    472a:	9b01      	ldr	r3, [sp, #4]
    472c:	2b27      	cmp	r3, #39	; 0x27
    472e:	d80f      	bhi.n	4750 <getSlowDividerConfig+0x38>
    4730:	9b01      	ldr	r3, [sp, #4]
    4732:	2b25      	cmp	r3, #37	; 0x25
    4734:	d003      	beq.n	473e <getSlowDividerConfig+0x26>
    4736:	9b01      	ldr	r3, [sp, #4]
    4738:	2b26      	cmp	r3, #38	; 0x26
    473a:	d003      	beq.n	4744 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    473c:	e008      	b.n	4750 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    473e:	2300      	movs	r3, #0
    4740:	9304      	str	r3, [sp, #16]
            break;
    4742:	e006      	b.n	4752 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4744:	2301      	movs	r3, #1
    4746:	9304      	str	r3, [sp, #16]
            break;
    4748:	e003      	b.n	4752 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    474a:	2302      	movs	r3, #2
    474c:	9304      	str	r3, [sp, #16]
            break;
    474e:	e000      	b.n	4752 <getSlowDividerConfig+0x3a>
                break;
    4750:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4752:	4b40      	ldr	r3, [pc, #256]	; (4854 <getSlowDividerConfig+0x13c>)
    4754:	681b      	ldr	r3, [r3, #0]
    4756:	2b00      	cmp	r3, #0
    4758:	d026      	beq.n	47a8 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    475a:	2300      	movs	r3, #0
    475c:	9303      	str	r3, [sp, #12]
    475e:	e01c      	b.n	479a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4760:	4b3c      	ldr	r3, [pc, #240]	; (4854 <getSlowDividerConfig+0x13c>)
    4762:	6819      	ldr	r1, [r3, #0]
    4764:	9a03      	ldr	r2, [sp, #12]
    4766:	4613      	mov	r3, r2
    4768:	005b      	lsls	r3, r3, #1
    476a:	4413      	add	r3, r2
    476c:	009b      	lsls	r3, r3, #2
    476e:	440b      	add	r3, r1
    4770:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	9a01      	ldr	r2, [sp, #4]
    4778:	429a      	cmp	r2, r3
    477a:	d10b      	bne.n	4794 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    477c:	4b35      	ldr	r3, [pc, #212]	; (4854 <getSlowDividerConfig+0x13c>)
    477e:	6819      	ldr	r1, [r3, #0]
    4780:	9a03      	ldr	r2, [sp, #12]
    4782:	4613      	mov	r3, r2
    4784:	005b      	lsls	r3, r3, #1
    4786:	4413      	add	r3, r2
    4788:	009b      	lsls	r3, r3, #2
    478a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    478e:	440b      	add	r3, r1
    4790:	9305      	str	r3, [sp, #20]
                break;
    4792:	e009      	b.n	47a8 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4794:	9b03      	ldr	r3, [sp, #12]
    4796:	3301      	adds	r3, #1
    4798:	9303      	str	r3, [sp, #12]
    479a:	4b2e      	ldr	r3, [pc, #184]	; (4854 <getSlowDividerConfig+0x13c>)
    479c:	681b      	ldr	r3, [r3, #0]
    479e:	7b1b      	ldrb	r3, [r3, #12]
    47a0:	461a      	mov	r2, r3
    47a2:	9b03      	ldr	r3, [sp, #12]
    47a4:	4293      	cmp	r3, r2
    47a6:	d3db      	bcc.n	4760 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    47a8:	9b05      	ldr	r3, [sp, #20]
    47aa:	2b00      	cmp	r3, #0
    47ac:	d14a      	bne.n	4844 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    47ae:	9a04      	ldr	r2, [sp, #16]
    47b0:	4613      	mov	r3, r2
    47b2:	005b      	lsls	r3, r3, #1
    47b4:	4413      	add	r3, r2
    47b6:	009b      	lsls	r3, r3, #2
    47b8:	4a27      	ldr	r2, [pc, #156]	; (4858 <getSlowDividerConfig+0x140>)
    47ba:	4413      	add	r3, r2
    47bc:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    47be:	4926      	ldr	r1, [pc, #152]	; (4858 <getSlowDividerConfig+0x140>)
    47c0:	9a04      	ldr	r2, [sp, #16]
    47c2:	4613      	mov	r3, r2
    47c4:	005b      	lsls	r3, r3, #1
    47c6:	4413      	add	r3, r2
    47c8:	009b      	lsls	r3, r3, #2
    47ca:	440b      	add	r3, r1
    47cc:	9a01      	ldr	r2, [sp, #4]
    47ce:	601a      	str	r2, [r3, #0]
        switch(Name)
    47d0:	9b01      	ldr	r3, [sp, #4]
    47d2:	2b27      	cmp	r3, #39	; 0x27
    47d4:	d027      	beq.n	4826 <getSlowDividerConfig+0x10e>
    47d6:	9b01      	ldr	r3, [sp, #4]
    47d8:	2b27      	cmp	r3, #39	; 0x27
    47da:	d835      	bhi.n	4848 <getSlowDividerConfig+0x130>
    47dc:	9b01      	ldr	r3, [sp, #4]
    47de:	2b25      	cmp	r3, #37	; 0x25
    47e0:	d003      	beq.n	47ea <getSlowDividerConfig+0xd2>
    47e2:	9b01      	ldr	r3, [sp, #4]
    47e4:	2b26      	cmp	r3, #38	; 0x26
    47e6:	d00f      	beq.n	4808 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    47e8:	e02e      	b.n	4848 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    47ea:	4b1c      	ldr	r3, [pc, #112]	; (485c <getSlowDividerConfig+0x144>)
    47ec:	695b      	ldr	r3, [r3, #20]
    47ee:	f003 030f 	and.w	r3, r3, #15
    47f2:	1c59      	adds	r1, r3, #1
    47f4:	4818      	ldr	r0, [pc, #96]	; (4858 <getSlowDividerConfig+0x140>)
    47f6:	9a04      	ldr	r2, [sp, #16]
    47f8:	4613      	mov	r3, r2
    47fa:	005b      	lsls	r3, r3, #1
    47fc:	4413      	add	r3, r2
    47fe:	009b      	lsls	r3, r3, #2
    4800:	4403      	add	r3, r0
    4802:	3304      	adds	r3, #4
    4804:	6019      	str	r1, [r3, #0]
                break;
    4806:	e020      	b.n	484a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4808:	4b14      	ldr	r3, [pc, #80]	; (485c <getSlowDividerConfig+0x144>)
    480a:	699b      	ldr	r3, [r3, #24]
    480c:	f003 030f 	and.w	r3, r3, #15
    4810:	1c59      	adds	r1, r3, #1
    4812:	4811      	ldr	r0, [pc, #68]	; (4858 <getSlowDividerConfig+0x140>)
    4814:	9a04      	ldr	r2, [sp, #16]
    4816:	4613      	mov	r3, r2
    4818:	005b      	lsls	r3, r3, #1
    481a:	4413      	add	r3, r2
    481c:	009b      	lsls	r3, r3, #2
    481e:	4403      	add	r3, r0
    4820:	3304      	adds	r3, #4
    4822:	6019      	str	r1, [r3, #0]
                break;
    4824:	e011      	b.n	484a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4826:	4b0d      	ldr	r3, [pc, #52]	; (485c <getSlowDividerConfig+0x144>)
    4828:	69db      	ldr	r3, [r3, #28]
    482a:	f003 030f 	and.w	r3, r3, #15
    482e:	1c59      	adds	r1, r3, #1
    4830:	4809      	ldr	r0, [pc, #36]	; (4858 <getSlowDividerConfig+0x140>)
    4832:	9a04      	ldr	r2, [sp, #16]
    4834:	4613      	mov	r3, r2
    4836:	005b      	lsls	r3, r3, #1
    4838:	4413      	add	r3, r2
    483a:	009b      	lsls	r3, r3, #2
    483c:	4403      	add	r3, r0
    483e:	3304      	adds	r3, #4
    4840:	6019      	str	r1, [r3, #0]
                break;
    4842:	e002      	b.n	484a <getSlowDividerConfig+0x132>
        }
    }
    4844:	bf00      	nop
    4846:	e000      	b.n	484a <getSlowDividerConfig+0x132>
                break;
    4848:	bf00      	nop

    return ReturnValue;
    484a:	9b05      	ldr	r3, [sp, #20]
}
    484c:	4618      	mov	r0, r3
    484e:	b006      	add	sp, #24
    4850:	4770      	bx	lr
    4852:	bf00      	nop
    4854:	1fff8bec 	.word	0x1fff8bec
    4858:	1fff8d00 	.word	0x1fff8d00
    485c:	40064000 	.word	0x40064000

00004860 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4860:	b500      	push	{lr}
    4862:	b083      	sub	sp, #12
    4864:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4866:	4b64      	ldr	r3, [pc, #400]	; (49f8 <Clock_Ip_ClockInitializeObjects+0x198>)
    4868:	781b      	ldrb	r3, [r3, #0]
    486a:	f083 0301 	eor.w	r3, r3, #1
    486e:	b2db      	uxtb	r3, r3
    4870:	2b00      	cmp	r3, #0
    4872:	d05b      	beq.n	492c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4874:	4b60      	ldr	r3, [pc, #384]	; (49f8 <Clock_Ip_ClockInitializeObjects+0x198>)
    4876:	2201      	movs	r2, #1
    4878:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    487a:	4b60      	ldr	r3, [pc, #384]	; (49fc <Clock_Ip_ClockInitializeObjects+0x19c>)
    487c:	785b      	ldrb	r3, [r3, #1]
    487e:	461a      	mov	r2, r3
    4880:	4613      	mov	r3, r2
    4882:	009b      	lsls	r3, r3, #2
    4884:	4413      	add	r3, r2
    4886:	009b      	lsls	r3, r3, #2
    4888:	4a5d      	ldr	r2, [pc, #372]	; (4a00 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    488a:	4413      	add	r3, r2
    488c:	4a5d      	ldr	r2, [pc, #372]	; (4a04 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    488e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4890:	4b5d      	ldr	r3, [pc, #372]	; (4a08 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4892:	785b      	ldrb	r3, [r3, #1]
    4894:	461a      	mov	r2, r3
    4896:	4613      	mov	r3, r2
    4898:	009b      	lsls	r3, r3, #2
    489a:	4413      	add	r3, r2
    489c:	009b      	lsls	r3, r3, #2
    489e:	4a5b      	ldr	r2, [pc, #364]	; (4a0c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    48a0:	4413      	add	r3, r2
    48a2:	4a5b      	ldr	r2, [pc, #364]	; (4a10 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    48a4:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    48a6:	4b5b      	ldr	r3, [pc, #364]	; (4a14 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    48a8:	791b      	ldrb	r3, [r3, #4]
    48aa:	461a      	mov	r2, r3
    48ac:	4613      	mov	r3, r2
    48ae:	005b      	lsls	r3, r3, #1
    48b0:	4413      	add	r3, r2
    48b2:	009b      	lsls	r3, r3, #2
    48b4:	4a58      	ldr	r2, [pc, #352]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    48b6:	4413      	add	r3, r2
    48b8:	4a58      	ldr	r2, [pc, #352]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    48ba:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    48bc:	4b58      	ldr	r3, [pc, #352]	; (4a20 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    48be:	795b      	ldrb	r3, [r3, #5]
    48c0:	00db      	lsls	r3, r3, #3
    48c2:	4a58      	ldr	r2, [pc, #352]	; (4a24 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    48c4:	4413      	add	r3, r2
    48c6:	4a58      	ldr	r2, [pc, #352]	; (4a28 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    48c8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    48ca:	4b55      	ldr	r3, [pc, #340]	; (4a20 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    48cc:	79db      	ldrb	r3, [r3, #7]
    48ce:	00db      	lsls	r3, r3, #3
    48d0:	4a54      	ldr	r2, [pc, #336]	; (4a24 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    48d2:	4413      	add	r3, r2
    48d4:	4a55      	ldr	r2, [pc, #340]	; (4a2c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    48d6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    48d8:	4b55      	ldr	r3, [pc, #340]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48da:	799b      	ldrb	r3, [r3, #6]
    48dc:	009b      	lsls	r3, r3, #2
    48de:	4a55      	ldr	r2, [pc, #340]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48e0:	4413      	add	r3, r2
    48e2:	4a55      	ldr	r2, [pc, #340]	; (4a38 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    48e4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    48e6:	4b52      	ldr	r3, [pc, #328]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48e8:	7a1b      	ldrb	r3, [r3, #8]
    48ea:	009b      	lsls	r3, r3, #2
    48ec:	4a51      	ldr	r2, [pc, #324]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48ee:	4413      	add	r3, r2
    48f0:	4a52      	ldr	r2, [pc, #328]	; (4a3c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    48f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    48f4:	4b4e      	ldr	r3, [pc, #312]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48f6:	7a5b      	ldrb	r3, [r3, #9]
    48f8:	009b      	lsls	r3, r3, #2
    48fa:	4a4e      	ldr	r2, [pc, #312]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48fc:	4413      	add	r3, r2
    48fe:	4a50      	ldr	r2, [pc, #320]	; (4a40 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4900:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4902:	4b4b      	ldr	r3, [pc, #300]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4904:	7adb      	ldrb	r3, [r3, #11]
    4906:	009b      	lsls	r3, r3, #2
    4908:	4a4a      	ldr	r2, [pc, #296]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    490a:	4413      	add	r3, r2
    490c:	4a4d      	ldr	r2, [pc, #308]	; (4a44 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    490e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4910:	4b47      	ldr	r3, [pc, #284]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4912:	7b1b      	ldrb	r3, [r3, #12]
    4914:	009b      	lsls	r3, r3, #2
    4916:	4a47      	ldr	r2, [pc, #284]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4918:	4413      	add	r3, r2
    491a:	4a4b      	ldr	r2, [pc, #300]	; (4a48 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    491c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    491e:	4b44      	ldr	r3, [pc, #272]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4920:	7b9b      	ldrb	r3, [r3, #14]
    4922:	009b      	lsls	r3, r3, #2
    4924:	4a43      	ldr	r2, [pc, #268]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4926:	4413      	add	r3, r2
    4928:	4a48      	ldr	r2, [pc, #288]	; (4a4c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    492a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    492c:	4b48      	ldr	r3, [pc, #288]	; (4a50 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	2b00      	cmp	r3, #0
    4932:	d002      	beq.n	493a <Clock_Ip_ClockInitializeObjects+0xda>
    4934:	9b01      	ldr	r3, [sp, #4]
    4936:	2b00      	cmp	r3, #0
    4938:	d003      	beq.n	4942 <Clock_Ip_ClockInitializeObjects+0xe2>
    493a:	4b46      	ldr	r3, [pc, #280]	; (4a54 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	2b00      	cmp	r3, #0
    4940:	d056      	beq.n	49f0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4942:	f7ff fc09 	bl	4158 <getFircConfig>
    4946:	4603      	mov	r3, r0
    4948:	4a43      	ldr	r2, [pc, #268]	; (4a58 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    494a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    494c:	f7ff fc60 	bl	4210 <getSoscConfig>
    4950:	4603      	mov	r3, r0
    4952:	4a42      	ldr	r2, [pc, #264]	; (4a5c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4954:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4956:	f7ff fca7 	bl	42a8 <getSpllConfig>
    495a:	4603      	mov	r3, r0
    495c:	4a40      	ldr	r2, [pc, #256]	; (4a60 <Clock_Ip_ClockInitializeObjects+0x200>)
    495e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4960:	2019      	movs	r0, #25
    4962:	f7ff fcfb 	bl	435c <getSelectorConfig>
    4966:	4603      	mov	r3, r0
    4968:	4a3e      	ldr	r2, [pc, #248]	; (4a64 <Clock_Ip_ClockInitializeObjects+0x204>)
    496a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    496c:	201a      	movs	r0, #26
    496e:	f7ff fcf5 	bl	435c <getSelectorConfig>
    4972:	4603      	mov	r3, r0
    4974:	4a3c      	ldr	r2, [pc, #240]	; (4a68 <Clock_Ip_ClockInitializeObjects+0x208>)
    4976:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4978:	201b      	movs	r0, #27
    497a:	f7ff fcef 	bl	435c <getSelectorConfig>
    497e:	4603      	mov	r3, r0
    4980:	4a3a      	ldr	r2, [pc, #232]	; (4a6c <Clock_Ip_ClockInitializeObjects+0x20c>)
    4982:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4984:	201d      	movs	r0, #29
    4986:	f7ff fd7b 	bl	4480 <getCoreDividerConfig>
    498a:	4603      	mov	r3, r0
    498c:	4a38      	ldr	r2, [pc, #224]	; (4a70 <Clock_Ip_ClockInitializeObjects+0x210>)
    498e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4990:	201e      	movs	r0, #30
    4992:	f7ff fd75 	bl	4480 <getCoreDividerConfig>
    4996:	4603      	mov	r3, r0
    4998:	4a36      	ldr	r2, [pc, #216]	; (4a74 <Clock_Ip_ClockInitializeObjects+0x214>)
    499a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    499c:	201f      	movs	r0, #31
    499e:	f7ff fd6f 	bl	4480 <getCoreDividerConfig>
    49a2:	4603      	mov	r3, r0
    49a4:	4a34      	ldr	r2, [pc, #208]	; (4a78 <Clock_Ip_ClockInitializeObjects+0x218>)
    49a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    49a8:	2021      	movs	r0, #33	; 0x21
    49aa:	f7ff fe0f 	bl	45cc <getBusDividerConfig>
    49ae:	4603      	mov	r3, r0
    49b0:	4a32      	ldr	r2, [pc, #200]	; (4a7c <Clock_Ip_ClockInitializeObjects+0x21c>)
    49b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    49b4:	2022      	movs	r0, #34	; 0x22
    49b6:	f7ff fe09 	bl	45cc <getBusDividerConfig>
    49ba:	4603      	mov	r3, r0
    49bc:	4a30      	ldr	r2, [pc, #192]	; (4a80 <Clock_Ip_ClockInitializeObjects+0x220>)
    49be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    49c0:	2023      	movs	r0, #35	; 0x23
    49c2:	f7ff fe03 	bl	45cc <getBusDividerConfig>
    49c6:	4603      	mov	r3, r0
    49c8:	4a2e      	ldr	r2, [pc, #184]	; (4a84 <Clock_Ip_ClockInitializeObjects+0x224>)
    49ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    49cc:	2025      	movs	r0, #37	; 0x25
    49ce:	f7ff fea3 	bl	4718 <getSlowDividerConfig>
    49d2:	4603      	mov	r3, r0
    49d4:	4a2c      	ldr	r2, [pc, #176]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x228>)
    49d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    49d8:	2026      	movs	r0, #38	; 0x26
    49da:	f7ff fe9d 	bl	4718 <getSlowDividerConfig>
    49de:	4603      	mov	r3, r0
    49e0:	4a2a      	ldr	r2, [pc, #168]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x22c>)
    49e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    49e4:	2027      	movs	r0, #39	; 0x27
    49e6:	f7ff fe97 	bl	4718 <getSlowDividerConfig>
    49ea:	4603      	mov	r3, r0
    49ec:	4a28      	ldr	r2, [pc, #160]	; (4a90 <Clock_Ip_ClockInitializeObjects+0x230>)
    49ee:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    49f0:	bf00      	nop
    49f2:	b003      	add	sp, #12
    49f4:	f85d fb04 	ldr.w	pc, [sp], #4
    49f8:	1fff8d24 	.word	0x1fff8d24
    49fc:	0000afe8 	.word	0x0000afe8
    4a00:	0000b634 	.word	0x0000b634
    4a04:	1fff8bf0 	.word	0x1fff8bf0
    4a08:	0000afa8 	.word	0x0000afa8
    4a0c:	0000b57c 	.word	0x0000b57c
    4a10:	1fff8bf4 	.word	0x1fff8bf4
    4a14:	0000afb8 	.word	0x0000afb8
    4a18:	0000b5e8 	.word	0x0000b5e8
    4a1c:	1fff8bf8 	.word	0x1fff8bf8
    4a20:	0000aff8 	.word	0x0000aff8
    4a24:	0000b660 	.word	0x0000b660
    4a28:	1fff8bfc 	.word	0x1fff8bfc
    4a2c:	1fff8c38 	.word	0x1fff8c38
    4a30:	0000af88 	.word	0x0000af88
    4a34:	0000b538 	.word	0x0000b538
    4a38:	1fff8c00 	.word	0x1fff8c00
    4a3c:	1fff8c3c 	.word	0x1fff8c3c
    4a40:	1fff8c04 	.word	0x1fff8c04
    4a44:	1fff8c40 	.word	0x1fff8c40
    4a48:	1fff8c08 	.word	0x1fff8c08
    4a4c:	1fff8c44 	.word	0x1fff8c44
    4a50:	1fff8b19 	.word	0x1fff8b19
    4a54:	1fff8b10 	.word	0x1fff8b10
    4a58:	1fff8c0c 	.word	0x1fff8c0c
    4a5c:	1fff8c10 	.word	0x1fff8c10
    4a60:	1fff8c14 	.word	0x1fff8c14
    4a64:	1fff8c18 	.word	0x1fff8c18
    4a68:	1fff8c1c 	.word	0x1fff8c1c
    4a6c:	1fff8c48 	.word	0x1fff8c48
    4a70:	1fff8c20 	.word	0x1fff8c20
    4a74:	1fff8c24 	.word	0x1fff8c24
    4a78:	1fff8c4c 	.word	0x1fff8c4c
    4a7c:	1fff8c28 	.word	0x1fff8c28
    4a80:	1fff8c2c 	.word	0x1fff8c2c
    4a84:	1fff8c50 	.word	0x1fff8c50
    4a88:	1fff8c30 	.word	0x1fff8c30
    4a8c:	1fff8c34 	.word	0x1fff8c34
    4a90:	1fff8c54 	.word	0x1fff8c54

00004a94 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4a94:	b500      	push	{lr}
    4a96:	b083      	sub	sp, #12
    4a98:	9001      	str	r0, [sp, #4]
    4a9a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4a9c:	9b01      	ldr	r3, [sp, #4]
    4a9e:	2b03      	cmp	r3, #3
    4aa0:	f000 8090 	beq.w	4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4aa4:	9b01      	ldr	r3, [sp, #4]
    4aa6:	2b03      	cmp	r3, #3
    4aa8:	f200 80d3 	bhi.w	4c52 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4aac:	9b01      	ldr	r3, [sp, #4]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d040      	beq.n	4b34 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4ab2:	9b01      	ldr	r3, [sp, #4]
    4ab4:	3b01      	subs	r3, #1
    4ab6:	2b01      	cmp	r3, #1
    4ab8:	f200 80cb 	bhi.w	4c52 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4abc:	9b00      	ldr	r3, [sp, #0]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	f040 80c9 	bne.w	4c56 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4ac4:	4b68      	ldr	r3, [pc, #416]	; (4c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4ac6:	2200      	movs	r2, #0
    4ac8:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4aca:	4b68      	ldr	r3, [pc, #416]	; (4c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	685b      	ldr	r3, [r3, #4]
    4ad0:	4a67      	ldr	r2, [pc, #412]	; (4c70 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4ad2:	6812      	ldr	r2, [r2, #0]
    4ad4:	4610      	mov	r0, r2
    4ad6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4ad8:	4b66      	ldr	r3, [pc, #408]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4ada:	681b      	ldr	r3, [r3, #0]
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	4a66      	ldr	r2, [pc, #408]	; (4c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4ae0:	6812      	ldr	r2, [r2, #0]
    4ae2:	4610      	mov	r0, r2
    4ae4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4ae6:	4b65      	ldr	r3, [pc, #404]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	4a64      	ldr	r2, [pc, #400]	; (4c80 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4aee:	6812      	ldr	r2, [r2, #0]
    4af0:	4610      	mov	r0, r2
    4af2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4af4:	4b63      	ldr	r3, [pc, #396]	; (4c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4af6:	681b      	ldr	r3, [r3, #0]
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	4a63      	ldr	r2, [pc, #396]	; (4c88 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4afc:	6812      	ldr	r2, [r2, #0]
    4afe:	4610      	mov	r0, r2
    4b00:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4b02:	4b62      	ldr	r3, [pc, #392]	; (4c8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	691b      	ldr	r3, [r3, #16]
    4b08:	4a61      	ldr	r2, [pc, #388]	; (4c90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b0a:	6812      	ldr	r2, [r2, #0]
    4b0c:	6812      	ldr	r2, [r2, #0]
    4b0e:	4610      	mov	r0, r2
    4b10:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4b12:	4b60      	ldr	r3, [pc, #384]	; (4c94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	68db      	ldr	r3, [r3, #12]
    4b18:	4a5f      	ldr	r2, [pc, #380]	; (4c98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b1a:	6812      	ldr	r2, [r2, #0]
    4b1c:	6812      	ldr	r2, [r2, #0]
    4b1e:	4610      	mov	r0, r2
    4b20:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4b22:	4b5e      	ldr	r3, [pc, #376]	; (4c9c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	689b      	ldr	r3, [r3, #8]
    4b28:	4a5d      	ldr	r2, [pc, #372]	; (4ca0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b2a:	6812      	ldr	r2, [r2, #0]
    4b2c:	6812      	ldr	r2, [r2, #0]
    4b2e:	4610      	mov	r0, r2
    4b30:	4798      	blx	r3
            }
        }
        break;
    4b32:	e090      	b.n	4c56 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4b34:	9b00      	ldr	r3, [sp, #0]
    4b36:	2b02      	cmp	r3, #2
    4b38:	f040 808f 	bne.w	4c5a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4b3c:	4b4a      	ldr	r3, [pc, #296]	; (4c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4b3e:	2201      	movs	r2, #1
    4b40:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4b42:	4b56      	ldr	r3, [pc, #344]	; (4c9c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	685b      	ldr	r3, [r3, #4]
    4b48:	4a55      	ldr	r2, [pc, #340]	; (4ca0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b4a:	6812      	ldr	r2, [r2, #0]
    4b4c:	4610      	mov	r0, r2
    4b4e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4b50:	4b50      	ldr	r3, [pc, #320]	; (4c94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	691b      	ldr	r3, [r3, #16]
    4b56:	4a50      	ldr	r2, [pc, #320]	; (4c98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b58:	6812      	ldr	r2, [r2, #0]
    4b5a:	4610      	mov	r0, r2
    4b5c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4b5e:	4b4d      	ldr	r3, [pc, #308]	; (4c94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b60:	681b      	ldr	r3, [r3, #0]
    4b62:	689b      	ldr	r3, [r3, #8]
    4b64:	4a4c      	ldr	r2, [pc, #304]	; (4c98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b66:	6812      	ldr	r2, [r2, #0]
    4b68:	4610      	mov	r0, r2
    4b6a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4b6c:	4b47      	ldr	r3, [pc, #284]	; (4c8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b6e:	681b      	ldr	r3, [r3, #0]
    4b70:	68db      	ldr	r3, [r3, #12]
    4b72:	4a47      	ldr	r2, [pc, #284]	; (4c90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b74:	6812      	ldr	r2, [r2, #0]
    4b76:	4610      	mov	r0, r2
    4b78:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b7a:	4b44      	ldr	r3, [pc, #272]	; (4c8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	689b      	ldr	r3, [r3, #8]
    4b80:	4a43      	ldr	r2, [pc, #268]	; (4c90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b82:	6812      	ldr	r2, [r2, #0]
    4b84:	6812      	ldr	r2, [r2, #0]
    4b86:	4610      	mov	r0, r2
    4b88:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4b8a:	4b38      	ldr	r3, [pc, #224]	; (4c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	685b      	ldr	r3, [r3, #4]
    4b90:	4a44      	ldr	r2, [pc, #272]	; (4ca4 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4b92:	6812      	ldr	r2, [r2, #0]
    4b94:	4610      	mov	r0, r2
    4b96:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4b98:	4b36      	ldr	r3, [pc, #216]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	4a42      	ldr	r2, [pc, #264]	; (4ca8 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4ba0:	6812      	ldr	r2, [r2, #0]
    4ba2:	4610      	mov	r0, r2
    4ba4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4ba6:	4b35      	ldr	r3, [pc, #212]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4ba8:	681b      	ldr	r3, [r3, #0]
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	4a3f      	ldr	r2, [pc, #252]	; (4cac <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4bae:	6812      	ldr	r2, [r2, #0]
    4bb0:	4610      	mov	r0, r2
    4bb2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4bb4:	4b33      	ldr	r3, [pc, #204]	; (4c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4bb6:	681b      	ldr	r3, [r3, #0]
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	4a3d      	ldr	r2, [pc, #244]	; (4cb0 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4bbc:	6812      	ldr	r2, [r2, #0]
    4bbe:	4610      	mov	r0, r2
    4bc0:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4bc2:	e04a      	b.n	4c5a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4bc4:	9b00      	ldr	r3, [sp, #0]
    4bc6:	2b02      	cmp	r3, #2
    4bc8:	d149      	bne.n	4c5e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4bca:	4b27      	ldr	r3, [pc, #156]	; (4c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4bcc:	2201      	movs	r2, #1
    4bce:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4bd0:	4b32      	ldr	r3, [pc, #200]	; (4c9c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	685b      	ldr	r3, [r3, #4]
    4bd6:	4a32      	ldr	r2, [pc, #200]	; (4ca0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4bd8:	6812      	ldr	r2, [r2, #0]
    4bda:	4610      	mov	r0, r2
    4bdc:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4bde:	4b2d      	ldr	r3, [pc, #180]	; (4c94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4be0:	681b      	ldr	r3, [r3, #0]
    4be2:	691b      	ldr	r3, [r3, #16]
    4be4:	4a2c      	ldr	r2, [pc, #176]	; (4c98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4be6:	6812      	ldr	r2, [r2, #0]
    4be8:	4610      	mov	r0, r2
    4bea:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4bec:	4b29      	ldr	r3, [pc, #164]	; (4c94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	689b      	ldr	r3, [r3, #8]
    4bf2:	4a29      	ldr	r2, [pc, #164]	; (4c98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4bf4:	6812      	ldr	r2, [r2, #0]
    4bf6:	4610      	mov	r0, r2
    4bf8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4bfa:	4b24      	ldr	r3, [pc, #144]	; (4c8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4bfc:	681b      	ldr	r3, [r3, #0]
    4bfe:	68db      	ldr	r3, [r3, #12]
    4c00:	4a23      	ldr	r2, [pc, #140]	; (4c90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4c02:	6812      	ldr	r2, [r2, #0]
    4c04:	4610      	mov	r0, r2
    4c06:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4c08:	4b20      	ldr	r3, [pc, #128]	; (4c8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4c0a:	681b      	ldr	r3, [r3, #0]
    4c0c:	689b      	ldr	r3, [r3, #8]
    4c0e:	4a20      	ldr	r2, [pc, #128]	; (4c90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4c10:	6812      	ldr	r2, [r2, #0]
    4c12:	6812      	ldr	r2, [r2, #0]
    4c14:	4610      	mov	r0, r2
    4c16:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4c18:	4b26      	ldr	r3, [pc, #152]	; (4cb4 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4c1a:	681b      	ldr	r3, [r3, #0]
    4c1c:	685b      	ldr	r3, [r3, #4]
    4c1e:	4a26      	ldr	r2, [pc, #152]	; (4cb8 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4c20:	6812      	ldr	r2, [r2, #0]
    4c22:	4610      	mov	r0, r2
    4c24:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4c26:	4b25      	ldr	r3, [pc, #148]	; (4cbc <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4c28:	681b      	ldr	r3, [r3, #0]
    4c2a:	681b      	ldr	r3, [r3, #0]
    4c2c:	4a24      	ldr	r2, [pc, #144]	; (4cc0 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4c2e:	6812      	ldr	r2, [r2, #0]
    4c30:	4610      	mov	r0, r2
    4c32:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4c34:	4b23      	ldr	r3, [pc, #140]	; (4cc4 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4c36:	681b      	ldr	r3, [r3, #0]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	4a23      	ldr	r2, [pc, #140]	; (4cc8 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4c3c:	6812      	ldr	r2, [r2, #0]
    4c3e:	4610      	mov	r0, r2
    4c40:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4c42:	4b22      	ldr	r3, [pc, #136]	; (4ccc <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	4a21      	ldr	r2, [pc, #132]	; (4cd0 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4c4a:	6812      	ldr	r2, [r2, #0]
    4c4c:	4610      	mov	r0, r2
    4c4e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4c50:	e005      	b.n	4c5e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4c52:	bf00      	nop
    4c54:	e004      	b.n	4c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4c56:	bf00      	nop
    4c58:	e002      	b.n	4c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4c5a:	bf00      	nop
    4c5c:	e000      	b.n	4c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4c5e:	bf00      	nop
    }

}
    4c60:	bf00      	nop
    4c62:	b003      	add	sp, #12
    4c64:	f85d fb04 	ldr.w	pc, [sp], #4
    4c68:	1fff8b19 	.word	0x1fff8b19
    4c6c:	1fff8bfc 	.word	0x1fff8bfc
    4c70:	1fff8c1c 	.word	0x1fff8c1c
    4c74:	1fff8c00 	.word	0x1fff8c00
    4c78:	1fff8c24 	.word	0x1fff8c24
    4c7c:	1fff8c04 	.word	0x1fff8c04
    4c80:	1fff8c2c 	.word	0x1fff8c2c
    4c84:	1fff8c08 	.word	0x1fff8c08
    4c88:	1fff8c34 	.word	0x1fff8c34
    4c8c:	1fff8bf0 	.word	0x1fff8bf0
    4c90:	1fff8c14 	.word	0x1fff8c14
    4c94:	1fff8bf4 	.word	0x1fff8bf4
    4c98:	1fff8c10 	.word	0x1fff8c10
    4c9c:	1fff8bf8 	.word	0x1fff8bf8
    4ca0:	1fff8c0c 	.word	0x1fff8c0c
    4ca4:	1fff8c18 	.word	0x1fff8c18
    4ca8:	1fff8c20 	.word	0x1fff8c20
    4cac:	1fff8c28 	.word	0x1fff8c28
    4cb0:	1fff8c30 	.word	0x1fff8c30
    4cb4:	1fff8c38 	.word	0x1fff8c38
    4cb8:	1fff8c48 	.word	0x1fff8c48
    4cbc:	1fff8c3c 	.word	0x1fff8c3c
    4cc0:	1fff8c4c 	.word	0x1fff8c4c
    4cc4:	1fff8c40 	.word	0x1fff8c40
    4cc8:	1fff8c50 	.word	0x1fff8c50
    4ccc:	1fff8c44 	.word	0x1fff8c44
    4cd0:	1fff8c54 	.word	0x1fff8c54

00004cd4 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4cd4:	b500      	push	{lr}
    4cd6:	b083      	sub	sp, #12
    4cd8:	9001      	str	r0, [sp, #4]
    4cda:	9100      	str	r1, [sp, #0]
    switch(Command)
    4cdc:	9b00      	ldr	r3, [sp, #0]
    4cde:	2b04      	cmp	r3, #4
    4ce0:	d010      	beq.n	4d04 <Clock_Ip_Command+0x30>
    4ce2:	9b00      	ldr	r3, [sp, #0]
    4ce4:	2b04      	cmp	r3, #4
    4ce6:	d811      	bhi.n	4d0c <Clock_Ip_Command+0x38>
    4ce8:	9b00      	ldr	r3, [sp, #0]
    4cea:	2b01      	cmp	r3, #1
    4cec:	d006      	beq.n	4cfc <Clock_Ip_Command+0x28>
    4cee:	9b00      	ldr	r3, [sp, #0]
    4cf0:	2b02      	cmp	r3, #2
    4cf2:	d10b      	bne.n	4d0c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4cf4:	9801      	ldr	r0, [sp, #4]
    4cf6:	f7ff fdb3 	bl	4860 <Clock_Ip_ClockInitializeObjects>
            break;
    4cfa:	e008      	b.n	4d0e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4cfc:	9801      	ldr	r0, [sp, #4]
    4cfe:	f7ff f9db 	bl	40b8 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4d02:	e004      	b.n	4d0e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4d04:	9801      	ldr	r0, [sp, #4]
    4d06:	f7ff f8ed 	bl	3ee4 <DisableSafeClock>
            break;
    4d0a:	e000      	b.n	4d0e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4d0c:	bf00      	nop
    }
}
    4d0e:	bf00      	nop
    4d10:	b003      	add	sp, #12
    4d12:	f85d fb04 	ldr.w	pc, [sp], #4
    4d16:	bf00      	nop

00004d18 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4d18:	b500      	push	{lr}
    4d1a:	b085      	sub	sp, #20
    4d1c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4d1e:	4a20      	ldr	r2, [pc, #128]	; (4da0 <Mcu_Init+0x88>)
    4d20:	9b01      	ldr	r3, [sp, #4]
    4d22:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4d24:	2300      	movs	r3, #0
    4d26:	9303      	str	r3, [sp, #12]
    4d28:	e010      	b.n	4d4c <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4d2a:	4b1d      	ldr	r3, [pc, #116]	; (4da0 <Mcu_Init+0x88>)
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	6919      	ldr	r1, [r3, #16]
    4d30:	9a03      	ldr	r2, [sp, #12]
    4d32:	4613      	mov	r3, r2
    4d34:	005b      	lsls	r3, r3, #1
    4d36:	4413      	add	r3, r2
    4d38:	009b      	lsls	r3, r3, #2
    4d3a:	440b      	add	r3, r1
    4d3c:	681b      	ldr	r3, [r3, #0]
    4d3e:	9a03      	ldr	r2, [sp, #12]
    4d40:	b2d1      	uxtb	r1, r2
    4d42:	4a18      	ldr	r2, [pc, #96]	; (4da4 <Mcu_Init+0x8c>)
    4d44:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4d46:	9b03      	ldr	r3, [sp, #12]
    4d48:	3301      	adds	r3, #1
    4d4a:	9303      	str	r3, [sp, #12]
    4d4c:	4b14      	ldr	r3, [pc, #80]	; (4da0 <Mcu_Init+0x88>)
    4d4e:	681b      	ldr	r3, [r3, #0]
    4d50:	689b      	ldr	r3, [r3, #8]
    4d52:	9a03      	ldr	r2, [sp, #12]
    4d54:	429a      	cmp	r2, r3
    4d56:	d3e8      	bcc.n	4d2a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4d58:	2300      	movs	r3, #0
    4d5a:	9303      	str	r3, [sp, #12]
    4d5c:	e010      	b.n	4d80 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4d5e:	4b10      	ldr	r3, [pc, #64]	; (4da0 <Mcu_Init+0x88>)
    4d60:	681b      	ldr	r3, [r3, #0]
    4d62:	6959      	ldr	r1, [r3, #20]
    4d64:	9a03      	ldr	r2, [sp, #12]
    4d66:	4613      	mov	r3, r2
    4d68:	01db      	lsls	r3, r3, #7
    4d6a:	1a9b      	subs	r3, r3, r2
    4d6c:	00db      	lsls	r3, r3, #3
    4d6e:	440b      	add	r3, r1
    4d70:	681b      	ldr	r3, [r3, #0]
    4d72:	9a03      	ldr	r2, [sp, #12]
    4d74:	b2d1      	uxtb	r1, r2
    4d76:	4a0c      	ldr	r2, [pc, #48]	; (4da8 <Mcu_Init+0x90>)
    4d78:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4d7a:	9b03      	ldr	r3, [sp, #12]
    4d7c:	3301      	adds	r3, #1
    4d7e:	9303      	str	r3, [sp, #12]
    4d80:	4b07      	ldr	r3, [pc, #28]	; (4da0 <Mcu_Init+0x88>)
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	68db      	ldr	r3, [r3, #12]
    4d86:	9a03      	ldr	r2, [sp, #12]
    4d88:	429a      	cmp	r2, r3
    4d8a:	d3e8      	bcc.n	4d5e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4d8c:	4b04      	ldr	r3, [pc, #16]	; (4da0 <Mcu_Init+0x88>)
    4d8e:	681b      	ldr	r3, [r3, #0]
    4d90:	699b      	ldr	r3, [r3, #24]
    4d92:	4618      	mov	r0, r3
    4d94:	f000 f88a 	bl	4eac <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d98:	bf00      	nop
    4d9a:	b005      	add	sp, #20
    4d9c:	f85d fb04 	ldr.w	pc, [sp], #4
    4da0:	1fff8d30 	.word	0x1fff8d30
    4da4:	1fff8d2c 	.word	0x1fff8d2c
    4da8:	1fff8d28 	.word	0x1fff8d28

00004dac <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4dac:	b084      	sub	sp, #16
    4dae:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4db0:	2301      	movs	r3, #1
    4db2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4db6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4dba:	4618      	mov	r0, r3
    4dbc:	b004      	add	sp, #16
    4dbe:	4770      	bx	lr

00004dc0 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4dc0:	b500      	push	{lr}
    4dc2:	b085      	sub	sp, #20
    4dc4:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4dc6:	4a0e      	ldr	r2, [pc, #56]	; (4e00 <Mcu_InitClock+0x40>)
    4dc8:	9b01      	ldr	r3, [sp, #4]
    4dca:	4413      	add	r3, r2
    4dcc:	781b      	ldrb	r3, [r3, #0]
    4dce:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4dd2:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <Mcu_InitClock+0x44>)
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	6959      	ldr	r1, [r3, #20]
    4dd8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4ddc:	4613      	mov	r3, r2
    4dde:	01db      	lsls	r3, r3, #7
    4de0:	1a9b      	subs	r3, r3, r2
    4de2:	00db      	lsls	r3, r3, #3
    4de4:	440b      	add	r3, r1
    4de6:	4618      	mov	r0, r3
    4de8:	f000 f86a 	bl	4ec0 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4dec:	2300      	movs	r3, #0
    4dee:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4df2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4df6:	4618      	mov	r0, r3
    4df8:	b005      	add	sp, #20
    4dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    4dfe:	bf00      	nop
    4e00:	1fff8d28 	.word	0x1fff8d28
    4e04:	1fff8d30 	.word	0x1fff8d30

00004e08 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4e08:	b500      	push	{lr}
    4e0a:	b085      	sub	sp, #20
    4e0c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4e0e:	4a0d      	ldr	r2, [pc, #52]	; (4e44 <Mcu_SetMode+0x3c>)
    4e10:	9b01      	ldr	r3, [sp, #4]
    4e12:	4413      	add	r3, r2
    4e14:	781b      	ldrb	r3, [r3, #0]
    4e16:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4e1a:	f004 fe15 	bl	9a48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4e1e:	4b0a      	ldr	r3, [pc, #40]	; (4e48 <Mcu_SetMode+0x40>)
    4e20:	681b      	ldr	r3, [r3, #0]
    4e22:	6919      	ldr	r1, [r3, #16]
    4e24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4e28:	4613      	mov	r3, r2
    4e2a:	005b      	lsls	r3, r3, #1
    4e2c:	4413      	add	r3, r2
    4e2e:	009b      	lsls	r3, r3, #2
    4e30:	440b      	add	r3, r1
    4e32:	4618      	mov	r0, r3
    4e34:	f000 f84e 	bl	4ed4 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4e38:	f004 fe32 	bl	9aa0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4e3c:	bf00      	nop
    4e3e:	b005      	add	sp, #20
    4e40:	f85d fb04 	ldr.w	pc, [sp], #4
    4e44:	1fff8d2c 	.word	0x1fff8d2c
    4e48:	1fff8d30 	.word	0x1fff8d30

00004e4c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4e4c:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4e4e:	2302      	movs	r3, #2
    4e50:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4e52:	9b01      	ldr	r3, [sp, #4]
}
    4e54:	4618      	mov	r0, r3
    4e56:	b002      	add	sp, #8
    4e58:	4770      	bx	lr

00004e5a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4e5a:	b500      	push	{lr}
    4e5c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4e5e:	f000 f843 	bl	4ee8 <Mcu_Ipw_GetResetReason>
    4e62:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4e64:	9b01      	ldr	r3, [sp, #4]
}
    4e66:	4618      	mov	r0, r3
    4e68:	b003      	add	sp, #12
    4e6a:	f85d fb04 	ldr.w	pc, [sp], #4

00004e6e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4e6e:	b500      	push	{lr}
    4e70:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4e72:	f000 f83f 	bl	4ef4 <Mcu_Ipw_GetResetRawValue>
    4e76:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4e78:	9b01      	ldr	r3, [sp, #4]
}
    4e7a:	4618      	mov	r0, r3
    4e7c:	b003      	add	sp, #12
    4e7e:	f85d fb04 	ldr.w	pc, [sp], #4

00004e82 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e82:	b500      	push	{lr}
    4e84:	b083      	sub	sp, #12
    4e86:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4e88:	9801      	ldr	r0, [sp, #4]
    4e8a:	f000 f839 	bl	4f00 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4e8e:	bf00      	nop
    4e90:	b003      	add	sp, #12
    4e92:	f85d fb04 	ldr.w	pc, [sp], #4

00004e96 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4e96:	b082      	sub	sp, #8
    4e98:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4e9a:	4b03      	ldr	r3, [pc, #12]	; (4ea8 <Mcu_ClkSrcFailureNotification+0x12>)
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4ea0:	bf00      	nop
    4ea2:	b002      	add	sp, #8
    4ea4:	4770      	bx	lr
    4ea6:	bf00      	nop
    4ea8:	1fff8d30 	.word	0x1fff8d30

00004eac <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4eac:	b500      	push	{lr}
    4eae:	b083      	sub	sp, #12
    4eb0:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4eb2:	9801      	ldr	r0, [sp, #4]
    4eb4:	f000 f882 	bl	4fbc <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4eb8:	bf00      	nop
    4eba:	b003      	add	sp, #12
    4ebc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec0 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4ec0:	b500      	push	{lr}
    4ec2:	b083      	sub	sp, #12
    4ec4:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4ec6:	9801      	ldr	r0, [sp, #4]
    4ec8:	f7fc fc6a 	bl	17a0 <Clock_Ip_InitClock>
}
    4ecc:	bf00      	nop
    4ece:	b003      	add	sp, #12
    4ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ed4 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4ed4:	b500      	push	{lr}
    4ed6:	b083      	sub	sp, #12
    4ed8:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4eda:	9801      	ldr	r0, [sp, #4]
    4edc:	f000 f820 	bl	4f20 <Power_Ip_SetMode>
}
    4ee0:	bf00      	nop
    4ee2:	b003      	add	sp, #12
    4ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ee8 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4ee8:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4eea:	f000 f84f 	bl	4f8c <Power_Ip_GetResetReason>
    4eee:	4603      	mov	r3, r0
}
    4ef0:	4618      	mov	r0, r3
    4ef2:	bd08      	pop	{r3, pc}

00004ef4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4ef4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4ef6:	f000 f857 	bl	4fa8 <Power_Ip_GetResetRawValue>
    4efa:	4603      	mov	r3, r0
}
    4efc:	4618      	mov	r0, r3
    4efe:	bd08      	pop	{r3, pc}

00004f00 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4f00:	b500      	push	{lr}
    4f02:	b083      	sub	sp, #12
    4f04:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4f06:	9b01      	ldr	r3, [sp, #4]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d102      	bne.n	4f12 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4f0c:	f000 f86c 	bl	4fe8 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4f10:	e001      	b.n	4f16 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4f12:	f000 f86e 	bl	4ff2 <Power_Ip_EnableSleepOnExit>
}
    4f16:	bf00      	nop
    4f18:	b003      	add	sp, #12
    4f1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004f20 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4f20:	b500      	push	{lr}
    4f22:	b085      	sub	sp, #20
    4f24:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4f26:	9b01      	ldr	r3, [sp, #4]
    4f28:	685b      	ldr	r3, [r3, #4]
    4f2a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4f2c:	9802      	ldr	r0, [sp, #8]
    4f2e:	f000 f9f5 	bl	531c <Power_Ip_SMC_ModeCheckEntry>
    4f32:	4603      	mov	r3, r0
    4f34:	2b00      	cmp	r3, #0
    4f36:	d002      	beq.n	4f3e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4f38:	2301      	movs	r3, #1
    4f3a:	9303      	str	r3, [sp, #12]
    4f3c:	e003      	b.n	4f46 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4f3e:	9801      	ldr	r0, [sp, #4]
    4f40:	f000 fa1e 	bl	5380 <Power_Ip_SMC_ModeConfig>
    4f44:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4f46:	9b03      	ldr	r3, [sp, #12]
    4f48:	2b01      	cmp	r3, #1
    4f4a:	d103      	bne.n	4f54 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4f4c:	21ff      	movs	r1, #255	; 0xff
    4f4e:	2003      	movs	r0, #3
    4f50:	f000 f8f4 	bl	513c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4f54:	bf00      	nop
    4f56:	b005      	add	sp, #20
    4f58:	f85d fb04 	ldr.w	pc, [sp], #4

00004f5c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4f5c:	b084      	sub	sp, #16
    4f5e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4f60:	230c      	movs	r3, #12
    4f62:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4f64:	4a08      	ldr	r2, [pc, #32]	; (4f88 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4f66:	9b01      	ldr	r3, [sp, #4]
    4f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f6c:	2b0e      	cmp	r3, #14
    4f6e:	d805      	bhi.n	4f7c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4f70:	4a05      	ldr	r2, [pc, #20]	; (4f88 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f78:	9303      	str	r3, [sp, #12]
    4f7a:	e001      	b.n	4f80 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4f7c:	230c      	movs	r3, #12
    4f7e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4f80:	9b03      	ldr	r3, [sp, #12]
}
    4f82:	4618      	mov	r0, r3
    4f84:	b004      	add	sp, #16
    4f86:	4770      	bx	lr
    4f88:	0000b6d4 	.word	0x0000b6d4

00004f8c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4f8c:	b500      	push	{lr}
    4f8e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4f90:	f000 f940 	bl	5214 <Power_Ip_RCM_GetResetReason>
    4f94:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4f96:	9801      	ldr	r0, [sp, #4]
    4f98:	f7ff ffe0 	bl	4f5c <Power_Ip_ConvertIntergeToResetType>
    4f9c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4f9e:	9b00      	ldr	r3, [sp, #0]
}
    4fa0:	4618      	mov	r0, r3
    4fa2:	b003      	add	sp, #12
    4fa4:	f85d fb04 	ldr.w	pc, [sp], #4

00004fa8 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4fa8:	b500      	push	{lr}
    4faa:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4fac:	f000 f98a 	bl	52c4 <Power_Ip_RCM_GetResetRawValue>
    4fb0:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4fb2:	9b01      	ldr	r3, [sp, #4]
}
    4fb4:	4618      	mov	r0, r3
    4fb6:	b003      	add	sp, #12
    4fb8:	f85d fb04 	ldr.w	pc, [sp], #4

00004fbc <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4fbc:	b500      	push	{lr}
    4fbe:	b083      	sub	sp, #12
    4fc0:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4fc2:	9b01      	ldr	r3, [sp, #4]
    4fc4:	681b      	ldr	r3, [r3, #0]
    4fc6:	4618      	mov	r0, r3
    4fc8:	f000 f90e 	bl	51e8 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	685b      	ldr	r3, [r3, #4]
    4fd0:	4618      	mov	r0, r3
    4fd2:	f000 f86d 	bl	50b0 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4fd6:	9b01      	ldr	r3, [sp, #4]
    4fd8:	689b      	ldr	r3, [r3, #8]
    4fda:	4618      	mov	r0, r3
    4fdc:	f000 f990 	bl	5300 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4fe0:	bf00      	nop
    4fe2:	b003      	add	sp, #12
    4fe4:	f85d fb04 	ldr.w	pc, [sp], #4

00004fe8 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4fe8:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4fea:	f000 f811 	bl	5010 <Power_Ip_CM4_DisableSleepOnExit>
}
    4fee:	bf00      	nop
    4ff0:	bd08      	pop	{r3, pc}

00004ff2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4ff2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4ff4:	f000 f820 	bl	5038 <Power_Ip_CM4_EnableSleepOnExit>
}
    4ff8:	bf00      	nop
    4ffa:	bd08      	pop	{r3, pc}

00004ffc <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4ffc:	b082      	sub	sp, #8
    4ffe:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5000:	4a02      	ldr	r2, [pc, #8]	; (500c <Power_Ip_InstallNotificationsCallback+0x10>)
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	6013      	str	r3, [r2, #0]
}
    5006:	bf00      	nop
    5008:	b002      	add	sp, #8
    500a:	4770      	bx	lr
    500c:	1fff8b1c 	.word	0x1fff8b1c

00005010 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5010:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5012:	2300      	movs	r3, #0
    5014:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5018:	681b      	ldr	r3, [r3, #0]
    501a:	685b      	ldr	r3, [r3, #4]
    501c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    501e:	9b01      	ldr	r3, [sp, #4]
    5020:	f023 0302 	bic.w	r3, r3, #2
    5024:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5026:	4b03      	ldr	r3, [pc, #12]	; (5034 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5028:	681b      	ldr	r3, [r3, #0]
    502a:	9a01      	ldr	r2, [sp, #4]
    502c:	605a      	str	r2, [r3, #4]
}
    502e:	bf00      	nop
    5030:	b002      	add	sp, #8
    5032:	4770      	bx	lr
    5034:	1fff8b20 	.word	0x1fff8b20

00005038 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5038:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    503a:	2300      	movs	r3, #0
    503c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    503e:	4b07      	ldr	r3, [pc, #28]	; (505c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5040:	681b      	ldr	r3, [r3, #0]
    5042:	685b      	ldr	r3, [r3, #4]
    5044:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5046:	9b01      	ldr	r3, [sp, #4]
    5048:	f043 0302 	orr.w	r3, r3, #2
    504c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    504e:	4b03      	ldr	r3, [pc, #12]	; (505c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	9a01      	ldr	r2, [sp, #4]
    5054:	605a      	str	r2, [r3, #4]
}
    5056:	bf00      	nop
    5058:	b002      	add	sp, #8
    505a:	4770      	bx	lr
    505c:	1fff8b20 	.word	0x1fff8b20

00005060 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5060:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5062:	2300      	movs	r3, #0
    5064:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5066:	4b07      	ldr	r3, [pc, #28]	; (5084 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	685b      	ldr	r3, [r3, #4]
    506c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    506e:	9b01      	ldr	r3, [sp, #4]
    5070:	f043 0304 	orr.w	r3, r3, #4
    5074:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5076:	4b03      	ldr	r3, [pc, #12]	; (5084 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	9a01      	ldr	r2, [sp, #4]
    507c:	605a      	str	r2, [r3, #4]
}
    507e:	bf00      	nop
    5080:	b002      	add	sp, #8
    5082:	4770      	bx	lr
    5084:	1fff8b20 	.word	0x1fff8b20

00005088 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5088:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    508a:	2300      	movs	r3, #0
    508c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    508e:	4b07      	ldr	r3, [pc, #28]	; (50ac <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5090:	681b      	ldr	r3, [r3, #0]
    5092:	685b      	ldr	r3, [r3, #4]
    5094:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5096:	9b01      	ldr	r3, [sp, #4]
    5098:	f023 0304 	bic.w	r3, r3, #4
    509c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    509e:	4b03      	ldr	r3, [pc, #12]	; (50ac <Power_Ip_CM4_DisableDeepSleep+0x24>)
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	9a01      	ldr	r2, [sp, #4]
    50a4:	605a      	str	r2, [r3, #4]
}
    50a6:	bf00      	nop
    50a8:	b002      	add	sp, #8
    50aa:	4770      	bx	lr
    50ac:	1fff8b20 	.word	0x1fff8b20

000050b0 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    50b0:	b084      	sub	sp, #16
    50b2:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    50b4:	4b20      	ldr	r3, [pc, #128]	; (5138 <Power_Ip_PMC_PowerInit+0x88>)
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    50bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50c0:	f003 030f 	and.w	r3, r3, #15
    50c4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    50c8:	9b01      	ldr	r3, [sp, #4]
    50ca:	781a      	ldrb	r2, [r3, #0]
    50cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50d0:	4313      	orrs	r3, r2
    50d2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    50d6:	4a18      	ldr	r2, [pc, #96]	; (5138 <Power_Ip_PMC_PowerInit+0x88>)
    50d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50dc:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    50de:	4b16      	ldr	r3, [pc, #88]	; (5138 <Power_Ip_PMC_PowerInit+0x88>)
    50e0:	785b      	ldrb	r3, [r3, #1]
    50e2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    50e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50ea:	f003 031f 	and.w	r3, r3, #31
    50ee:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    50f2:	9b01      	ldr	r3, [sp, #4]
    50f4:	785a      	ldrb	r2, [r3, #1]
    50f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50fa:	4313      	orrs	r3, r2
    50fc:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5100:	4a0d      	ldr	r2, [pc, #52]	; (5138 <Power_Ip_PMC_PowerInit+0x88>)
    5102:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5106:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5108:	4b0b      	ldr	r3, [pc, #44]	; (5138 <Power_Ip_PMC_PowerInit+0x88>)
    510a:	789b      	ldrb	r3, [r3, #2]
    510c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5110:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5114:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5118:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    511c:	9b01      	ldr	r3, [sp, #4]
    511e:	789a      	ldrb	r2, [r3, #2]
    5120:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5124:	4313      	orrs	r3, r2
    5126:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    512a:	4a03      	ldr	r2, [pc, #12]	; (5138 <Power_Ip_PMC_PowerInit+0x88>)
    512c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5130:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5132:	bf00      	nop
    5134:	b004      	add	sp, #16
    5136:	4770      	bx	lr
    5138:	4007d000 	.word	0x4007d000

0000513c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    513c:	b500      	push	{lr}
    513e:	b083      	sub	sp, #12
    5140:	9001      	str	r0, [sp, #4]
    5142:	460b      	mov	r3, r1
    5144:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5148:	4b05      	ldr	r3, [pc, #20]	; (5160 <Power_Ip_ReportPowerErrors+0x24>)
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5150:	4611      	mov	r1, r2
    5152:	9801      	ldr	r0, [sp, #4]
    5154:	4798      	blx	r3
}
    5156:	bf00      	nop
    5158:	b003      	add	sp, #12
    515a:	f85d fb04 	ldr.w	pc, [sp], #4
    515e:	bf00      	nop
    5160:	1fff8b1c 	.word	0x1fff8b1c

00005164 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5164:	b082      	sub	sp, #8
    5166:	9001      	str	r0, [sp, #4]
    5168:	460b      	mov	r3, r1
    516a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    516e:	bf00      	nop
    5170:	b002      	add	sp, #8
    5172:	4770      	bx	lr

00005174 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5174:	b500      	push	{lr}
    5176:	b085      	sub	sp, #20
    5178:	9003      	str	r0, [sp, #12]
    517a:	9102      	str	r1, [sp, #8]
    517c:	9201      	str	r2, [sp, #4]
    517e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5180:	2000      	movs	r0, #0
    5182:	f7fc f83d 	bl	1200 <OsIf_GetCounter>
    5186:	4602      	mov	r2, r0
    5188:	9b03      	ldr	r3, [sp, #12]
    518a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    518c:	9b02      	ldr	r3, [sp, #8]
    518e:	2200      	movs	r2, #0
    5190:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5192:	2100      	movs	r1, #0
    5194:	9800      	ldr	r0, [sp, #0]
    5196:	f7fc f87f 	bl	1298 <OsIf_MicrosToTicks>
    519a:	4602      	mov	r2, r0
    519c:	9b01      	ldr	r3, [sp, #4]
    519e:	601a      	str	r2, [r3, #0]
}
    51a0:	bf00      	nop
    51a2:	b005      	add	sp, #20
    51a4:	f85d fb04 	ldr.w	pc, [sp], #4

000051a8 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    51a8:	b500      	push	{lr}
    51aa:	b087      	sub	sp, #28
    51ac:	9003      	str	r0, [sp, #12]
    51ae:	9102      	str	r1, [sp, #8]
    51b0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    51b2:	2300      	movs	r3, #0
    51b4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    51b8:	2100      	movs	r1, #0
    51ba:	9803      	ldr	r0, [sp, #12]
    51bc:	f7fc f839 	bl	1232 <OsIf_GetElapsed>
    51c0:	4602      	mov	r2, r0
    51c2:	9b02      	ldr	r3, [sp, #8]
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	441a      	add	r2, r3
    51c8:	9b02      	ldr	r3, [sp, #8]
    51ca:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    51cc:	9b02      	ldr	r3, [sp, #8]
    51ce:	681b      	ldr	r3, [r3, #0]
    51d0:	9a01      	ldr	r2, [sp, #4]
    51d2:	429a      	cmp	r2, r3
    51d4:	d802      	bhi.n	51dc <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    51d6:	2301      	movs	r3, #1
    51d8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    51dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    51e0:	4618      	mov	r0, r3
    51e2:	b007      	add	sp, #28
    51e4:	f85d fb04 	ldr.w	pc, [sp], #4

000051e8 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    51e8:	b082      	sub	sp, #8
    51ea:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    51ec:	9b01      	ldr	r3, [sp, #4]
    51ee:	681a      	ldr	r2, [r3, #0]
    51f0:	4907      	ldr	r1, [pc, #28]	; (5210 <Power_Ip_RCM_ResetInit+0x28>)
    51f2:	f641 7307 	movw	r3, #7943	; 0x1f07
    51f6:	4013      	ands	r3, r2
    51f8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    51fa:	9b01      	ldr	r3, [sp, #4]
    51fc:	685a      	ldr	r2, [r3, #4]
    51fe:	4904      	ldr	r1, [pc, #16]	; (5210 <Power_Ip_RCM_ResetInit+0x28>)
    5200:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5204:	4013      	ands	r3, r2
    5206:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5208:	bf00      	nop
    520a:	b002      	add	sp, #8
    520c:	4770      	bx	lr
    520e:	bf00      	nop
    5210:	4007f000 	.word	0x4007f000

00005214 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5214:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5216:	230c      	movs	r3, #12
    5218:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    521a:	2300      	movs	r3, #0
    521c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    521e:	2300      	movs	r3, #0
    5220:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5222:	2300      	movs	r3, #0
    5224:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5226:	4b25      	ldr	r3, [pc, #148]	; (52bc <Power_Ip_RCM_GetResetReason+0xa8>)
    5228:	699a      	ldr	r2, [r3, #24]
    522a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    522e:	4013      	ands	r3, r2
    5230:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5232:	9b03      	ldr	r3, [sp, #12]
    5234:	2b00      	cmp	r3, #0
    5236:	d008      	beq.n	524a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5238:	4920      	ldr	r1, [pc, #128]	; (52bc <Power_Ip_RCM_GetResetReason+0xa8>)
    523a:	9a03      	ldr	r2, [sp, #12]
    523c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5240:	4013      	ands	r3, r2
    5242:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5244:	4a1e      	ldr	r2, [pc, #120]	; (52c0 <Power_Ip_RCM_GetResetReason+0xac>)
    5246:	9b03      	ldr	r3, [sp, #12]
    5248:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    524a:	4b1d      	ldr	r3, [pc, #116]	; (52c0 <Power_Ip_RCM_GetResetReason+0xac>)
    524c:	681b      	ldr	r3, [r3, #0]
    524e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5250:	9a02      	ldr	r2, [sp, #8]
    5252:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5256:	4013      	ands	r3, r2
    5258:	2b82      	cmp	r3, #130	; 0x82
    525a:	d102      	bne.n	5262 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    525c:	2305      	movs	r3, #5
    525e:	9307      	str	r3, [sp, #28]
    5260:	e027      	b.n	52b2 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5262:	2300      	movs	r3, #0
    5264:	9306      	str	r3, [sp, #24]
    5266:	e021      	b.n	52ac <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5268:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    526c:	9b06      	ldr	r3, [sp, #24]
    526e:	fa22 f303 	lsr.w	r3, r2, r3
    5272:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5274:	9a01      	ldr	r2, [sp, #4]
    5276:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    527a:	4013      	ands	r3, r2
    527c:	2b00      	cmp	r3, #0
    527e:	d012      	beq.n	52a6 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5280:	9a01      	ldr	r2, [sp, #4]
    5282:	9b02      	ldr	r3, [sp, #8]
    5284:	4013      	ands	r3, r2
    5286:	2b00      	cmp	r3, #0
    5288:	d00a      	beq.n	52a0 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    528a:	9b05      	ldr	r3, [sp, #20]
    528c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    528e:	9b04      	ldr	r3, [sp, #16]
    5290:	3301      	adds	r3, #1
    5292:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5294:	9b04      	ldr	r3, [sp, #16]
    5296:	2b01      	cmp	r3, #1
    5298:	d902      	bls.n	52a0 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    529a:	230d      	movs	r3, #13
    529c:	9307      	str	r3, [sp, #28]
                        break;
    529e:	e008      	b.n	52b2 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    52a0:	9b05      	ldr	r3, [sp, #20]
    52a2:	3301      	adds	r3, #1
    52a4:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    52a6:	9b06      	ldr	r3, [sp, #24]
    52a8:	3301      	adds	r3, #1
    52aa:	9306      	str	r3, [sp, #24]
    52ac:	9b06      	ldr	r3, [sp, #24]
    52ae:	2b1f      	cmp	r3, #31
    52b0:	d9da      	bls.n	5268 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    52b2:	9b07      	ldr	r3, [sp, #28]
}
    52b4:	4618      	mov	r0, r3
    52b6:	b008      	add	sp, #32
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop
    52bc:	4007f000 	.word	0x4007f000
    52c0:	1fff8d34 	.word	0x1fff8d34

000052c4 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    52c4:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    52c6:	4b0c      	ldr	r3, [pc, #48]	; (52f8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    52c8:	699a      	ldr	r2, [r3, #24]
    52ca:	f642 73ee 	movw	r3, #12270	; 0x2fee
    52ce:	4013      	ands	r3, r2
    52d0:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    52d2:	9b01      	ldr	r3, [sp, #4]
    52d4:	2b00      	cmp	r3, #0
    52d6:	d008      	beq.n	52ea <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    52d8:	4907      	ldr	r1, [pc, #28]	; (52f8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    52da:	9a01      	ldr	r2, [sp, #4]
    52dc:	f642 73ee 	movw	r3, #12270	; 0x2fee
    52e0:	4013      	ands	r3, r2
    52e2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    52e4:	4a05      	ldr	r2, [pc, #20]	; (52fc <Power_Ip_RCM_GetResetRawValue+0x38>)
    52e6:	9b01      	ldr	r3, [sp, #4]
    52e8:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    52ea:	4b04      	ldr	r3, [pc, #16]	; (52fc <Power_Ip_RCM_GetResetRawValue+0x38>)
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    52f0:	9b00      	ldr	r3, [sp, #0]
}
    52f2:	4618      	mov	r0, r3
    52f4:	b002      	add	sp, #8
    52f6:	4770      	bx	lr
    52f8:	4007f000 	.word	0x4007f000
    52fc:	1fff8d34 	.word	0x1fff8d34

00005300 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5300:	b082      	sub	sp, #8
    5302:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5304:	9b01      	ldr	r3, [sp, #4]
    5306:	681b      	ldr	r3, [r3, #0]
    5308:	4a03      	ldr	r2, [pc, #12]	; (5318 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    530a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    530e:	6093      	str	r3, [r2, #8]
}
    5310:	bf00      	nop
    5312:	b002      	add	sp, #8
    5314:	4770      	bx	lr
    5316:	bf00      	nop
    5318:	4007e000 	.word	0x4007e000

0000531c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    531c:	b084      	sub	sp, #16
    531e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5320:	2301      	movs	r3, #1
    5322:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5324:	4b15      	ldr	r3, [pc, #84]	; (537c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5326:	695b      	ldr	r3, [r3, #20]
    5328:	b2db      	uxtb	r3, r3
    532a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    532c:	9b01      	ldr	r3, [sp, #4]
    532e:	2b02      	cmp	r3, #2
    5330:	d012      	beq.n	5358 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5332:	9b01      	ldr	r3, [sp, #4]
    5334:	2b02      	cmp	r3, #2
    5336:	d818      	bhi.n	536a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5338:	9b01      	ldr	r3, [sp, #4]
    533a:	2b00      	cmp	r3, #0
    533c:	d003      	beq.n	5346 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    533e:	9b01      	ldr	r3, [sp, #4]
    5340:	2b01      	cmp	r3, #1
    5342:	d003      	beq.n	534c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5344:	e011      	b.n	536a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5346:	2300      	movs	r3, #0
    5348:	9303      	str	r3, [sp, #12]
            break;
    534a:	e013      	b.n	5374 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    534c:	9b02      	ldr	r3, [sp, #8]
    534e:	2b01      	cmp	r3, #1
    5350:	d10d      	bne.n	536e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5352:	2300      	movs	r3, #0
    5354:	9303      	str	r3, [sp, #12]
            break;
    5356:	e00a      	b.n	536e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5358:	9b02      	ldr	r3, [sp, #8]
    535a:	2b01      	cmp	r3, #1
    535c:	d002      	beq.n	5364 <Power_Ip_SMC_ModeCheckEntry+0x48>
    535e:	9b02      	ldr	r3, [sp, #8]
    5360:	2b10      	cmp	r3, #16
    5362:	d106      	bne.n	5372 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5364:	2300      	movs	r3, #0
    5366:	9303      	str	r3, [sp, #12]
            break;
    5368:	e003      	b.n	5372 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    536a:	bf00      	nop
    536c:	e002      	b.n	5374 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    536e:	bf00      	nop
    5370:	e000      	b.n	5374 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5372:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5374:	9b03      	ldr	r3, [sp, #12]
}
    5376:	4618      	mov	r0, r3
    5378:	b004      	add	sp, #16
    537a:	4770      	bx	lr
    537c:	4007e000 	.word	0x4007e000

00005380 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5380:	b500      	push	{lr}
    5382:	b08b      	sub	sp, #44	; 0x2c
    5384:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5386:	2300      	movs	r3, #0
    5388:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    538a:	2300      	movs	r3, #0
    538c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    538e:	2300      	movs	r3, #0
    5390:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5394:	9b01      	ldr	r3, [sp, #4]
    5396:	685b      	ldr	r3, [r3, #4]
    5398:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    539a:	9b08      	ldr	r3, [sp, #32]
    539c:	2b02      	cmp	r3, #2
    539e:	d076      	beq.n	548e <Power_Ip_SMC_ModeConfig+0x10e>
    53a0:	9b08      	ldr	r3, [sp, #32]
    53a2:	2b02      	cmp	r3, #2
    53a4:	f200 80ab 	bhi.w	54fe <Power_Ip_SMC_ModeConfig+0x17e>
    53a8:	9b08      	ldr	r3, [sp, #32]
    53aa:	2b00      	cmp	r3, #0
    53ac:	d003      	beq.n	53b6 <Power_Ip_SMC_ModeConfig+0x36>
    53ae:	9b08      	ldr	r3, [sp, #32]
    53b0:	2b01      	cmp	r3, #1
    53b2:	d034      	beq.n	541e <Power_Ip_SMC_ModeConfig+0x9e>
    53b4:	e0a3      	b.n	54fe <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    53b6:	4b58      	ldr	r3, [pc, #352]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    53b8:	68db      	ldr	r3, [r3, #12]
    53ba:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    53bc:	9b06      	ldr	r3, [sp, #24]
    53be:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    53c2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    53c4:	4a54      	ldr	r2, [pc, #336]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    53c6:	9b06      	ldr	r3, [sp, #24]
    53c8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53ca:	aa02      	add	r2, sp, #8
    53cc:	a903      	add	r1, sp, #12
    53ce:	a804      	add	r0, sp, #16
    53d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    53d4:	f7ff fece 	bl	5174 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53d8:	9a02      	ldr	r2, [sp, #8]
    53da:	a903      	add	r1, sp, #12
    53dc:	ab04      	add	r3, sp, #16
    53de:	4618      	mov	r0, r3
    53e0:	f7ff fee2 	bl	51a8 <Power_Ip_TimeoutExpired>
    53e4:	4603      	mov	r3, r0
    53e6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    53ea:	4b4b      	ldr	r3, [pc, #300]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    53ec:	695b      	ldr	r3, [r3, #20]
    53ee:	f003 0301 	and.w	r3, r3, #1
    53f2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53f4:	9b05      	ldr	r3, [sp, #20]
    53f6:	2b01      	cmp	r3, #1
    53f8:	d006      	beq.n	5408 <Power_Ip_SMC_ModeConfig+0x88>
    53fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53fe:	f083 0301 	eor.w	r3, r3, #1
    5402:	b2db      	uxtb	r3, r3
    5404:	2b00      	cmp	r3, #0
    5406:	d1e7      	bne.n	53d8 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5408:	f89d 301f 	ldrb.w	r3, [sp, #31]
    540c:	2b00      	cmp	r3, #0
    540e:	d079      	beq.n	5504 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5410:	2301      	movs	r3, #1
    5412:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5414:	21ff      	movs	r1, #255	; 0xff
    5416:	2000      	movs	r0, #0
    5418:	f7ff fe90 	bl	513c <Power_Ip_ReportPowerErrors>
            }

            break;
    541c:	e072      	b.n	5504 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    541e:	4b3e      	ldr	r3, [pc, #248]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    5420:	68db      	ldr	r3, [r3, #12]
    5422:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5424:	9b06      	ldr	r3, [sp, #24]
    5426:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    542a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    542c:	9b06      	ldr	r3, [sp, #24]
    542e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5432:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5434:	4a38      	ldr	r2, [pc, #224]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    5436:	9b06      	ldr	r3, [sp, #24]
    5438:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    543a:	aa02      	add	r2, sp, #8
    543c:	a903      	add	r1, sp, #12
    543e:	a804      	add	r0, sp, #16
    5440:	f24c 3350 	movw	r3, #50000	; 0xc350
    5444:	f7ff fe96 	bl	5174 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5448:	9a02      	ldr	r2, [sp, #8]
    544a:	a903      	add	r1, sp, #12
    544c:	ab04      	add	r3, sp, #16
    544e:	4618      	mov	r0, r3
    5450:	f7ff feaa 	bl	51a8 <Power_Ip_TimeoutExpired>
    5454:	4603      	mov	r3, r0
    5456:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    545a:	4b2f      	ldr	r3, [pc, #188]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    545c:	695b      	ldr	r3, [r3, #20]
    545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5462:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5464:	9b05      	ldr	r3, [sp, #20]
    5466:	2b80      	cmp	r3, #128	; 0x80
    5468:	d006      	beq.n	5478 <Power_Ip_SMC_ModeConfig+0xf8>
    546a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    546e:	f083 0301 	eor.w	r3, r3, #1
    5472:	b2db      	uxtb	r3, r3
    5474:	2b00      	cmp	r3, #0
    5476:	d1e7      	bne.n	5448 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5478:	f89d 301f 	ldrb.w	r3, [sp, #31]
    547c:	2b00      	cmp	r3, #0
    547e:	d043      	beq.n	5508 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5480:	2301      	movs	r3, #1
    5482:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5484:	21ff      	movs	r1, #255	; 0xff
    5486:	2000      	movs	r0, #0
    5488:	f7ff fe58 	bl	513c <Power_Ip_ReportPowerErrors>
            }

            break;
    548c:	e03c      	b.n	5508 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    548e:	4b22      	ldr	r3, [pc, #136]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    5490:	68db      	ldr	r3, [r3, #12]
    5492:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5494:	9b06      	ldr	r3, [sp, #24]
    5496:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    549a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    549c:	9b06      	ldr	r3, [sp, #24]
    549e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    54a2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    54a4:	4a1c      	ldr	r2, [pc, #112]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    54a6:	9b06      	ldr	r3, [sp, #24]
    54a8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    54aa:	aa02      	add	r2, sp, #8
    54ac:	a903      	add	r1, sp, #12
    54ae:	a804      	add	r0, sp, #16
    54b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    54b4:	f7ff fe5e 	bl	5174 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    54b8:	9a02      	ldr	r2, [sp, #8]
    54ba:	a903      	add	r1, sp, #12
    54bc:	ab04      	add	r3, sp, #16
    54be:	4618      	mov	r0, r3
    54c0:	f7ff fe72 	bl	51a8 <Power_Ip_TimeoutExpired>
    54c4:	4603      	mov	r3, r0
    54c6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    54ca:	4b13      	ldr	r3, [pc, #76]	; (5518 <Power_Ip_SMC_ModeConfig+0x198>)
    54cc:	695b      	ldr	r3, [r3, #20]
    54ce:	f003 0304 	and.w	r3, r3, #4
    54d2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    54d4:	9b05      	ldr	r3, [sp, #20]
    54d6:	2b04      	cmp	r3, #4
    54d8:	d006      	beq.n	54e8 <Power_Ip_SMC_ModeConfig+0x168>
    54da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    54de:	f083 0301 	eor.w	r3, r3, #1
    54e2:	b2db      	uxtb	r3, r3
    54e4:	2b00      	cmp	r3, #0
    54e6:	d1e7      	bne.n	54b8 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    54e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    54ec:	2b00      	cmp	r3, #0
    54ee:	d00d      	beq.n	550c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    54f0:	2301      	movs	r3, #1
    54f2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    54f4:	21ff      	movs	r1, #255	; 0xff
    54f6:	2000      	movs	r0, #0
    54f8:	f7ff fe20 	bl	513c <Power_Ip_ReportPowerErrors>
            }

            break;
    54fc:	e006      	b.n	550c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    54fe:	2301      	movs	r3, #1
    5500:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5502:	e004      	b.n	550e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5504:	bf00      	nop
    5506:	e002      	b.n	550e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5508:	bf00      	nop
    550a:	e000      	b.n	550e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    550c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5510:	4618      	mov	r0, r3
    5512:	b00b      	add	sp, #44	; 0x2c
    5514:	f85d fb04 	ldr.w	pc, [sp], #4
    5518:	4007e000 	.word	0x4007e000

0000551c <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    551c:	b082      	sub	sp, #8
    551e:	4603      	mov	r3, r0
    5520:	460a      	mov	r2, r1
    5522:	f88d 3007 	strb.w	r3, [sp, #7]
    5526:	4613      	mov	r3, r2
    5528:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    552c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5530:	4a09      	ldr	r2, [pc, #36]	; (5558 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    5532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5536:	f89d 3006 	ldrb.w	r3, [sp, #6]
    553a:	3301      	adds	r3, #1
    553c:	00db      	lsls	r3, r3, #3
    553e:	4413      	add	r3, r2
    5540:	685b      	ldr	r3, [r3, #4]
    5542:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5546:	2b00      	cmp	r3, #0
    5548:	bf14      	ite	ne
    554a:	2301      	movne	r3, #1
    554c:	2300      	moveq	r3, #0
    554e:	b2db      	uxtb	r3, r3
}
    5550:	4618      	mov	r0, r3
    5552:	b002      	add	sp, #8
    5554:	4770      	bx	lr
    5556:	bf00      	nop
    5558:	0000b710 	.word	0x0000b710

0000555c <Ftm_Gpt_Ip_GetCntValue>:
*
* @return   current counter value
*
*/
static inline uint32 Ftm_Gpt_Ip_GetCntValue(uint8 instance)
{
    555c:	b082      	sub	sp, #8
    555e:	4603      	mov	r3, r0
    5560:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    5564:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5568:	4a03      	ldr	r2, [pc, #12]	; (5578 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    556e:	685b      	ldr	r3, [r3, #4]
}
    5570:	4618      	mov	r0, r3
    5572:	b002      	add	sp, #8
    5574:	4770      	bx	lr
    5576:	bf00      	nop
    5578:	0000b710 	.word	0x0000b710

0000557c <Ftm_Gpt_Ip_GetCompareValue>:
 *
 * @return      compare value (CV)
 *
 */
static inline uint32 Ftm_Gpt_Ip_GetCompareValue(uint8 instance, uint8 channel)
{
    557c:	b082      	sub	sp, #8
    557e:	4603      	mov	r3, r0
    5580:	460a      	mov	r2, r1
    5582:	f88d 3007 	strb.w	r3, [sp, #7]
    5586:	4613      	mov	r3, r2
    5588:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    558c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5590:	4a05      	ldr	r2, [pc, #20]	; (55a8 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    5592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5596:	f89d 3006 	ldrb.w	r3, [sp, #6]
    559a:	3301      	adds	r3, #1
    559c:	00db      	lsls	r3, r3, #3
    559e:	4413      	add	r3, r2
    55a0:	689b      	ldr	r3, [r3, #8]
}
    55a2:	4618      	mov	r0, r3
    55a4:	b002      	add	sp, #8
    55a6:	4770      	bx	lr
    55a8:	0000b710 	.word	0x0000b710

000055ac <Ftm_Gpt_Ip_SetFreezeBits>:
 *
 * @return      void
 *
 */
static inline void Ftm_Gpt_Ip_SetFreezeBits(uint8 instance, boolean freezeBits)
{
    55ac:	b500      	push	{lr}
    55ae:	b085      	sub	sp, #20
    55b0:	4603      	mov	r3, r0
    55b2:	460a      	mov	r2, r1
    55b4:	f88d 3007 	strb.w	r3, [sp, #7]
    55b8:	4613      	mov	r3, r2
    55ba:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 freezeVal = (TRUE == freezeBits) ? 0UL : 3UL;
    55be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    55c2:	2b00      	cmp	r3, #0
    55c4:	d001      	beq.n	55ca <Ftm_Gpt_Ip_SetFreezeBits+0x1e>
    55c6:	2300      	movs	r3, #0
    55c8:	e000      	b.n	55cc <Ftm_Gpt_Ip_SetFreezeBits+0x20>
    55ca:	2303      	movs	r3, #3
    55cc:	9303      	str	r3, [sp, #12]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17();
    55ce:	f002 fcc7 	bl	7f60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>
    ftmGptBase[instance]->CONF = (ftmGptBase[instance]->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(freezeVal);
    55d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    55d6:	4a0c      	ldr	r2, [pc, #48]	; (5608 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    55d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    55e0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    55e4:	9b03      	ldr	r3, [sp, #12]
    55e6:	019b      	lsls	r3, r3, #6
    55e8:	b2da      	uxtb	r2, r3
    55ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    55ee:	4806      	ldr	r0, [pc, #24]	; (5608 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    55f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    55f4:	430a      	orrs	r2, r1
    55f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17();
    55fa:	f002 fcdd 	bl	7fb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>
}
    55fe:	bf00      	nop
    5600:	b005      	add	sp, #20
    5602:	f85d fb04 	ldr.w	pc, [sp], #4
    5606:	bf00      	nop
    5608:	0000b710 	.word	0x0000b710

0000560c <Ftm_Gpt_Ip_SetCounterInitVal>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounterInitVal(uint8 instance, uint16 value)
{
    560c:	b082      	sub	sp, #8
    560e:	4603      	mov	r3, r0
    5610:	460a      	mov	r2, r1
    5612:	f88d 3007 	strb.w	r3, [sp, #7]
    5616:	4613      	mov	r3, r2
    5618:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNTIN = (uint32)(((uint32)value << FTM_CNTIN_INIT_SHIFT) & FTM_CNTIN_INIT_MASK);
    561c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5620:	4a04      	ldr	r2, [pc, #16]	; (5634 <Ftm_Gpt_Ip_SetCounterInitVal+0x28>)
    5622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5626:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    562a:	64da      	str	r2, [r3, #76]	; 0x4c
}
    562c:	bf00      	nop
    562e:	b002      	add	sp, #8
    5630:	4770      	bx	lr
    5632:	bf00      	nop
    5634:	0000b710 	.word	0x0000b710

00005638 <Ftm_Gpt_Ip_SetCounter>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounter(uint8 instance, uint16 value)
{
    5638:	b082      	sub	sp, #8
    563a:	4603      	mov	r3, r0
    563c:	460a      	mov	r2, r1
    563e:	f88d 3007 	strb.w	r3, [sp, #7]
    5642:	4613      	mov	r3, r2
    5644:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNT = (uint32)(((uint32)value << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    5648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    564c:	4a04      	ldr	r2, [pc, #16]	; (5660 <Ftm_Gpt_Ip_SetCounter+0x28>)
    564e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5652:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5656:	605a      	str	r2, [r3, #4]
}
    5658:	bf00      	nop
    565a:	b002      	add	sp, #8
    565c:	4770      	bx	lr
    565e:	bf00      	nop
    5660:	0000b710 	.word	0x0000b710

00005664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>:
 *
 * @return      void
 * @pre         The driver needs to be initialized.
 */
static inline void Ftm_Gpt_Ip_ClearChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    5664:	b082      	sub	sp, #8
    5666:	4603      	mov	r3, r0
    5668:	460a      	mov	r2, r1
    566a:	f88d 3007 	strb.w	r3, [sp, #7]
    566e:	4613      	mov	r3, r2
    5670:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CSC &= ~(FTM_CSC_CHF_MASK);
    5674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5678:	4a0c      	ldr	r2, [pc, #48]	; (56ac <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    567a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    567e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5682:	3301      	adds	r3, #1
    5684:	00db      	lsls	r3, r3, #3
    5686:	4413      	add	r3, r2
    5688:	685a      	ldr	r2, [r3, #4]
    568a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    568e:	4907      	ldr	r1, [pc, #28]	; (56ac <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    5690:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    5694:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    569c:	3301      	adds	r3, #1
    569e:	00db      	lsls	r3, r3, #3
    56a0:	440b      	add	r3, r1
    56a2:	605a      	str	r2, [r3, #4]
}
    56a4:	bf00      	nop
    56a6:	b002      	add	sp, #8
    56a8:	4770      	bx	lr
    56aa:	bf00      	nop
    56ac:	0000b710 	.word	0x0000b710

000056b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>:
 * @param[in]   aboEn - Enables the FTM channel(n) interrupt
 *              - True : Enable the FTM channel(n) interrupt.
 *              - False: Disable the FTM channel(n) interrupt.
 */
static inline void Ftm_Gpt_Ip_SetChannelEnableInterrupt(uint8 instance, uint8 channel, boolean aboEn)
{
    56b0:	b082      	sub	sp, #8
    56b2:	4603      	mov	r3, r0
    56b4:	f88d 3007 	strb.w	r3, [sp, #7]
    56b8:	460b      	mov	r3, r1
    56ba:	f88d 3006 	strb.w	r3, [sp, #6]
    56be:	4613      	mov	r3, r2
    56c0:	f88d 3005 	strb.w	r3, [sp, #5]
    ftmGptBase[instance]-> CONTROLS[channel].CSC = (ftmGptBase[instance]-> CONTROLS[channel].CSC & ~(FTM_CSC_CHIE_MASK)) | FTM_CSC_CHIE((TRUE == aboEn) ? 1UL : 0UL);
    56c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    56c8:	4a10      	ldr	r2, [pc, #64]	; (570c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    56ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    56ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    56d2:	3301      	adds	r3, #1
    56d4:	00db      	lsls	r3, r3, #3
    56d6:	4413      	add	r3, r2
    56d8:	685b      	ldr	r3, [r3, #4]
    56da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    56de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d001      	beq.n	56ea <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3a>
    56e6:	2040      	movs	r0, #64	; 0x40
    56e8:	e000      	b.n	56ec <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3c>
    56ea:	2000      	movs	r0, #0
    56ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    56f0:	4906      	ldr	r1, [pc, #24]	; (570c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    56f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    56f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    56fa:	4302      	orrs	r2, r0
    56fc:	3301      	adds	r3, #1
    56fe:	00db      	lsls	r3, r3, #3
    5700:	440b      	add	r3, r1
    5702:	605a      	str	r2, [r3, #4]
}
    5704:	bf00      	nop
    5706:	b002      	add	sp, #8
    5708:	4770      	bx	lr
    570a:	bf00      	nop
    570c:	0000b710 	.word	0x0000b710

00005710 <Ftm_Gpt_Ip_SetClockSource>:
 * @param[in]       instance    FTM hardware instance number
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetClockSource(uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
    5710:	b500      	push	{lr}
    5712:	b083      	sub	sp, #12
    5714:	4603      	mov	r3, r0
    5716:	9100      	str	r1, [sp, #0]
    5718:	f88d 3007 	strb.w	r3, [sp, #7]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21();
    571c:	f002 fc72 	bl	8004 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(clocksource);
    5720:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5724:	4a0b      	ldr	r2, [pc, #44]	; (5754 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    5726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	f023 0118 	bic.w	r1, r3, #24
    5730:	9b00      	ldr	r3, [sp, #0]
    5732:	00db      	lsls	r3, r3, #3
    5734:	f003 0218 	and.w	r2, r3, #24
    5738:	f89d 3007 	ldrb.w	r3, [sp, #7]
    573c:	4805      	ldr	r0, [pc, #20]	; (5754 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    573e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5742:	430a      	orrs	r2, r1
    5744:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21();
    5746:	f002 fc89 	bl	805c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>
}
    574a:	bf00      	nop
    574c:	b003      	add	sp, #12
    574e:	f85d fb04 	ldr.w	pc, [sp], #4
    5752:	bf00      	nop
    5754:	0000b710 	.word	0x0000b710

00005758 <Ftm_Gpt_Ip_SetPrescaler>:
 *
 * @return        void
 *
 */
static inline void Ftm_Gpt_Ip_SetPrescaler(uint8 instance, uint8 prescalerValue)
{
    5758:	b500      	push	{lr}
    575a:	b083      	sub	sp, #12
    575c:	4603      	mov	r3, r0
    575e:	460a      	mov	r2, r1
    5760:	f88d 3007 	strb.w	r3, [sp, #7]
    5764:	4613      	mov	r3, r2
    5766:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22();
    576a:	f002 fc9d 	bl	80a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(prescalerValue);
    576e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5772:	4a0b      	ldr	r2, [pc, #44]	; (57a0 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    5774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	f023 0107 	bic.w	r1, r3, #7
    577e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5782:	f003 0207 	and.w	r2, r3, #7
    5786:	f89d 3007 	ldrb.w	r3, [sp, #7]
    578a:	4805      	ldr	r0, [pc, #20]	; (57a0 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    578c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5790:	430a      	orrs	r2, r1
    5792:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22();
    5794:	f002 fcb4 	bl	8100 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>
}
    5798:	bf00      	nop
    579a:	b003      	add	sp, #12
    579c:	f85d fb04 	ldr.w	pc, [sp], #4
    57a0:	0000b710 	.word	0x0000b710

000057a4 <Ftm_Gpt_Ip_SetEnFtmModule>:
 * @param[in]   enable
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetEnFtmModule(uint8 instance, boolean enable)
{
    57a4:	b500      	push	{lr}
    57a6:	b083      	sub	sp, #12
    57a8:	4603      	mov	r3, r0
    57aa:	460a      	mov	r2, r1
    57ac:	f88d 3007 	strb.w	r3, [sp, #7]
    57b0:	4613      	mov	r3, r2
    57b2:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23();
    57b6:	f002 fcc9 	bl	814c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>
    {
        ftmGptBase[instance]->MODE &= ~(FTM_MODE_FTMEN_MASK);
    57ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57be:	4a13      	ldr	r2, [pc, #76]	; (580c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    57c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    57c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57ca:	4910      	ldr	r1, [pc, #64]	; (580c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    57cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    57d0:	f022 0201 	bic.w	r2, r2, #1
    57d4:	655a      	str	r2, [r3, #84]	; 0x54
        ftmGptBase[instance]->MODE |= FTM_MODE_FTMEN(enable ? 1UL : 0UL);
    57d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57da:	4a0c      	ldr	r2, [pc, #48]	; (580c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    57dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    57e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    57e6:	2b00      	cmp	r3, #0
    57e8:	d001      	beq.n	57ee <Ftm_Gpt_Ip_SetEnFtmModule+0x4a>
    57ea:	2101      	movs	r1, #1
    57ec:	e000      	b.n	57f0 <Ftm_Gpt_Ip_SetEnFtmModule+0x4c>
    57ee:	2100      	movs	r1, #0
    57f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57f4:	4805      	ldr	r0, [pc, #20]	; (580c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    57f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    57fa:	430a      	orrs	r2, r1
    57fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23();
    57fe:	f002 fcd1 	bl	81a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>
}
    5802:	bf00      	nop
    5804:	b003      	add	sp, #12
    5806:	f85d fb04 	ldr.w	pc, [sp], #4
    580a:	bf00      	nop
    580c:	0000b710 	.word	0x0000b710

00005810 <Ftm_Gpt_Ip_SetCompareValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCompareValue(uint8 instance, uint8 channel, uint32 value)
{
    5810:	b082      	sub	sp, #8
    5812:	4603      	mov	r3, r0
    5814:	9200      	str	r2, [sp, #0]
    5816:	f88d 3007 	strb.w	r3, [sp, #7]
    581a:	460b      	mov	r3, r1
    581c:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CV = (uint32)((((uint32)value << FTM_CV_VAL_SHIFT) & FTM_CV_VAL_MASK));
    5820:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5824:	4a06      	ldr	r2, [pc, #24]	; (5840 <Ftm_Gpt_Ip_SetCompareValue+0x30>)
    5826:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    582a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    582e:	9a00      	ldr	r2, [sp, #0]
    5830:	b292      	uxth	r2, r2
    5832:	3301      	adds	r3, #1
    5834:	00db      	lsls	r3, r3, #3
    5836:	440b      	add	r3, r1
    5838:	609a      	str	r2, [r3, #8]

}
    583a:	bf00      	nop
    583c:	b002      	add	sp, #8
    583e:	4770      	bx	lr
    5840:	0000b710 	.word	0x0000b710

00005844 <Ftm_Gpt_Ip_WriteModulo>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_WriteModulo(uint8 instance, uint16 value)
{
    5844:	b082      	sub	sp, #8
    5846:	4603      	mov	r3, r0
    5848:	460a      	mov	r2, r1
    584a:	f88d 3007 	strb.w	r3, [sp, #7]
    584e:	4613      	mov	r3, r2
    5850:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]-> MOD = value;
    5854:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5858:	4a04      	ldr	r2, [pc, #16]	; (586c <Ftm_Gpt_Ip_WriteModulo+0x28>)
    585a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    585e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5862:	609a      	str	r2, [r3, #8]

}
    5864:	bf00      	nop
    5866:	b002      	add	sp, #8
    5868:	4770      	bx	lr
    586a:	bf00      	nop
    586c:	0000b710 	.word	0x0000b710

00005870 <Ftm_Gpt_Ip_ModeSelectA>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_ModeSelectA(uint8 instance, uint8 channel, boolean enable)
{
    5870:	b500      	push	{lr}
    5872:	b083      	sub	sp, #12
    5874:	4603      	mov	r3, r0
    5876:	f88d 3007 	strb.w	r3, [sp, #7]
    587a:	460b      	mov	r3, r1
    587c:	f88d 3006 	strb.w	r3, [sp, #6]
    5880:	4613      	mov	r3, r2
    5882:	f88d 3005 	strb.w	r3, [sp, #5]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24();
    5886:	f002 fcb3 	bl	81f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>
    if (TRUE == enable)
    588a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    588e:	2b00      	cmp	r3, #0
    5890:	d018      	beq.n	58c4 <Ftm_Gpt_Ip_ModeSelectA+0x54>
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC |= FTM_CSC_MSA_MASK;
    5892:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5896:	4a1a      	ldr	r2, [pc, #104]	; (5900 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    5898:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    589c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    58a0:	3301      	adds	r3, #1
    58a2:	00db      	lsls	r3, r3, #3
    58a4:	4413      	add	r3, r2
    58a6:	685a      	ldr	r2, [r3, #4]
    58a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58ac:	4914      	ldr	r1, [pc, #80]	; (5900 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    58ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    58b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    58b6:	f042 0210 	orr.w	r2, r2, #16
    58ba:	3301      	adds	r3, #1
    58bc:	00db      	lsls	r3, r3, #3
    58be:	440b      	add	r3, r1
    58c0:	605a      	str	r2, [r3, #4]
    58c2:	e017      	b.n	58f4 <Ftm_Gpt_Ip_ModeSelectA+0x84>
    }
    else
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC &= (~(FTM_CSC_MSA_MASK));
    58c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58c8:	4a0d      	ldr	r2, [pc, #52]	; (5900 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    58ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    58ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    58d2:	3301      	adds	r3, #1
    58d4:	00db      	lsls	r3, r3, #3
    58d6:	4413      	add	r3, r2
    58d8:	685a      	ldr	r2, [r3, #4]
    58da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58de:	4908      	ldr	r1, [pc, #32]	; (5900 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    58e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    58e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    58e8:	f022 0210 	bic.w	r2, r2, #16
    58ec:	3301      	adds	r3, #1
    58ee:	00db      	lsls	r3, r3, #3
    58f0:	440b      	add	r3, r1
    58f2:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24();
    58f4:	f002 fca8 	bl	8248 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>
}
    58f8:	bf00      	nop
    58fa:	b003      	add	sp, #12
    58fc:	f85d fb04 	ldr.w	pc, [sp], #4
    5900:	0000b710 	.word	0x0000b710

00005904 <Ftm_Gpt_Ip_SetHalfCycleValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetHalfCycleValue(FTM_Type * const base, uint16 value)
{
    5904:	b082      	sub	sp, #8
    5906:	9001      	str	r0, [sp, #4]
    5908:	460b      	mov	r3, r1
    590a:	f8ad 3002 	strh.w	r3, [sp, #2]
    ((base)->HCR) = value;
    590e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5912:	9b01      	ldr	r3, [sp, #4]
    5914:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    5918:	bf00      	nop
    591a:	b002      	add	sp, #8
    591c:	4770      	bx	lr

0000591e <Ftm_Gpt_Ip_GetChInterruptEnableFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptEnableFlag(uint8 instance, uint8 channel)
{
    591e:	b082      	sub	sp, #8
    5920:	4603      	mov	r3, r0
    5922:	460a      	mov	r2, r1
    5924:	f88d 3007 	strb.w	r3, [sp, #7]
    5928:	4613      	mov	r3, r2
    592a:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHIE_MASK)) ? TRUE : FALSE;
    592e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5932:	4a09      	ldr	r2, [pc, #36]	; (5958 <Ftm_Gpt_Ip_GetChInterruptEnableFlag+0x3a>)
    5934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5938:	f89d 3006 	ldrb.w	r3, [sp, #6]
    593c:	3301      	adds	r3, #1
    593e:	00db      	lsls	r3, r3, #3
    5940:	4413      	add	r3, r2
    5942:	685b      	ldr	r3, [r3, #4]
    5944:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5948:	2b00      	cmp	r3, #0
    594a:	bf14      	ite	ne
    594c:	2301      	movne	r3, #1
    594e:	2300      	moveq	r3, #0
    5950:	b2db      	uxtb	r3, r3
}
    5952:	4618      	mov	r0, r3
    5954:	b002      	add	sp, #8
    5956:	4770      	bx	lr
    5958:	0000b710 	.word	0x0000b710

0000595c <Ftm_Gpt_Ip_GetChannelEventStatus>:
 *         - True : A channel event has occurred
 *         - False: No channel event has occurred
 *
 */
static inline boolean Ftm_Gpt_Ip_GetChannelEventStatus(uint8 instance, uint8 channel)
{
    595c:	b082      	sub	sp, #8
    595e:	4603      	mov	r3, r0
    5960:	460a      	mov	r2, r1
    5962:	f88d 3007 	strb.w	r3, [sp, #7]
    5966:	4613      	mov	r3, r2
    5968:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->STATUS & (1UL << channel))) ? TRUE : FALSE;
    596c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5970:	4a08      	ldr	r2, [pc, #32]	; (5994 <Ftm_Gpt_Ip_GetChannelEventStatus+0x38>)
    5972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    5978:	f89d 3006 	ldrb.w	r3, [sp, #6]
    597c:	fa22 f303 	lsr.w	r3, r2, r3
    5980:	f003 0301 	and.w	r3, r3, #1
    5984:	2b00      	cmp	r3, #0
    5986:	bf14      	ite	ne
    5988:	2301      	movne	r3, #1
    598a:	2300      	moveq	r3, #0
    598c:	b2db      	uxtb	r3, r3
}
    598e:	4618      	mov	r0, r3
    5990:	b002      	add	sp, #8
    5992:	4770      	bx	lr
    5994:	0000b710 	.word	0x0000b710

00005998 <Ftm_Gpt_Ip_ProcessCommonInterrupt>:
* @param[in]     instance     FTM hardware instance number
* @param[in]     channel      FTM hardware channel number
* @implements    Ftm_Gpt_Ip_ProcessCommonInterrupt_Activity
*/
static void Ftm_Gpt_Ip_ProcessCommonInterrupt(uint8 instance, uint8 channel)
{
    5998:	b500      	push	{lr}
    599a:	b089      	sub	sp, #36	; 0x24
    599c:	4603      	mov	r3, r0
    599e:	460a      	mov	r2, r1
    59a0:	f88d 3007 	strb.w	r3, [sp, #7]
    59a4:	4613      	mov	r3, r2
    59a6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Gpt_Ip_CallbackType     callback;
    uint8                       callbackParam;
    Ftm_Gpt_Ip_ChannelModeType  channelMode;

    uint32 targetValue;
    uint32 oldCmpValue = Ftm_Gpt_Ip_GetCompareValue(instance, channel);
    59aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    59ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59b2:	4611      	mov	r1, r2
    59b4:	4618      	mov	r0, r3
    59b6:	f7ff fde1 	bl	557c <Ftm_Gpt_Ip_GetCompareValue>
    59ba:	9007      	str	r0, [sp, #28]

    if ((instance < FTM_INSTANCE_COUNT) && (channel < FTM_CONTROLS_COUNT))
    59bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59c0:	2b03      	cmp	r3, #3
    59c2:	f200 80a8 	bhi.w	5b16 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    59c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    59ca:	2b07      	cmp	r3, #7
    59cc:	f200 80a3 	bhi.w	5b16 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    {
        /* enter critical section */
        SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25();
    59d0:	f002 fc60 	bl	8294 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>
        {
            /* check if channel event is enabled */
            IsChEvEnabled = Ftm_Gpt_Ip_GetChInterruptEnableFlag(instance, channel);
    59d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    59d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59dc:	4611      	mov	r1, r2
    59de:	4618      	mov	r0, r3
    59e0:	f7ff ff9d 	bl	591e <Ftm_Gpt_Ip_GetChInterruptEnableFlag>
    59e4:	4603      	mov	r3, r0
    59e6:	f88d 301b 	strb.w	r3, [sp, #27]

            /* check if channel event has occurred */
            HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(instance, channel);
    59ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
    59ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59f2:	4611      	mov	r1, r2
    59f4:	4618      	mov	r0, r3
    59f6:	f7ff fd91 	bl	551c <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
    59fa:	4603      	mov	r3, r0
    59fc:	f88d 301a 	strb.w	r3, [sp, #26]

            /* Check for spurious interrupts */
            if (HasChEvOccurred && IsChEvEnabled)
    5a00:	f89d 301a 	ldrb.w	r3, [sp, #26]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d00b      	beq.n	5a20 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
    5a08:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d007      	beq.n	5a20 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
            {
                /* Clear interrupt flag */
                Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    5a10:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5a14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a18:	4611      	mov	r1, r2
    5a1a:	4618      	mov	r0, r3
    5a1c:	f7ff fe22 	bl	5664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
            }
        }
        /* exit critical section */
        SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25();
    5a20:	f002 fc64 	bl	82ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>

        if (HasChEvOccurred && IsChEvEnabled)
    5a24:	f89d 301a 	ldrb.w	r3, [sp, #26]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d074      	beq.n	5b16 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    5a2c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5a30:	2b00      	cmp	r3, #0
    5a32:	d070      	beq.n	5b16 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
        {
            chInit          = Ftm_Gpt_Ip_u32ChState[instance][channel].chInit;
    5a34:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a3c:	4938      	ldr	r1, [pc, #224]	; (5b20 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    5a3e:	00d2      	lsls	r2, r2, #3
    5a40:	4413      	add	r3, r2
    5a42:	011b      	lsls	r3, r3, #4
    5a44:	440b      	add	r3, r1
    5a46:	781b      	ldrb	r3, [r3, #0]
    5a48:	f88d 3019 	strb.w	r3, [sp, #25]
            callback        = Ftm_Gpt_Ip_u32ChState[instance][channel].callback;
    5a4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a54:	4932      	ldr	r1, [pc, #200]	; (5b20 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    5a56:	00d2      	lsls	r2, r2, #3
    5a58:	4413      	add	r3, r2
    5a5a:	011b      	lsls	r3, r3, #4
    5a5c:	440b      	add	r3, r1
    5a5e:	3304      	adds	r3, #4
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	9305      	str	r3, [sp, #20]
            callbackParam   = Ftm_Gpt_Ip_u32ChState[instance][channel].callbackParam;
    5a64:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a6c:	492c      	ldr	r1, [pc, #176]	; (5b20 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    5a6e:	00d2      	lsls	r2, r2, #3
    5a70:	4413      	add	r3, r2
    5a72:	011b      	lsls	r3, r3, #4
    5a74:	440b      	add	r3, r1
    5a76:	3308      	adds	r3, #8
    5a78:	781b      	ldrb	r3, [r3, #0]
    5a7a:	f88d 3013 	strb.w	r3, [sp, #19]

            /* Call GPT upper layer handler */
            if ((TRUE == chInit) && (NULL_PTR != callback))
    5a7e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5a82:	2b00      	cmp	r3, #0
    5a84:	d007      	beq.n	5a96 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
    5a86:	9b05      	ldr	r3, [sp, #20]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d004      	beq.n	5a96 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
            {
                callback(callbackParam);
    5a8c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    5a90:	9b05      	ldr	r3, [sp, #20]
    5a92:	4610      	mov	r0, r2
    5a94:	4798      	blx	r3
                Ftm_Gpt_Ip_u32TargetValue[instance][channel] = Ftm_Gpt_Ip_u32NextTargetValue[instance][channel];
                Ftm_Gpt_Ip_u32NextTargetValue[instance][channel] = 0x0U;
            }
#endif
            /* Check if channel mode is ONE-SHOT */
            channelMode = Ftm_Gpt_Ip_u32ChState[instance][channel].channelMode;
    5a96:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a9e:	4920      	ldr	r1, [pc, #128]	; (5b20 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    5aa0:	00d2      	lsls	r2, r2, #3
    5aa2:	4413      	add	r3, r2
    5aa4:	011b      	lsls	r3, r3, #4
    5aa6:	440b      	add	r3, r1
    5aa8:	330c      	adds	r3, #12
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	9303      	str	r3, [sp, #12]
            if(FTM_GPT_IP_CH_MODE_ONESHOT == channelMode)
    5aae:	9b03      	ldr	r3, [sp, #12]
    5ab0:	2b01      	cmp	r3, #1
    5ab2:	d108      	bne.n	5ac6 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x12e>
            {
                Ftm_Gpt_Ip_DisableChannelInterrupt(instance, channel);
    5ab4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5abc:	4611      	mov	r1, r2
    5abe:	4618      	mov	r0, r3
    5ac0:	f000 f9ce 	bl	5e60 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
                }
            }
        }
    }
}
    5ac4:	e027      	b.n	5b16 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                targetValue = Ftm_Gpt_Ip_u32TargetValue[instance][channel];
    5ac6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5aca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5ace:	4915      	ldr	r1, [pc, #84]	; (5b24 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x18c>)
    5ad0:	00d2      	lsls	r2, r2, #3
    5ad2:	4413      	add	r3, r2
    5ad4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    5ad8:	9302      	str	r3, [sp, #8]
                if ((uint32)(oldCmpValue + targetValue) > FTM_CNT_MAX_VALUE)
    5ada:	9a07      	ldr	r2, [sp, #28]
    5adc:	9b02      	ldr	r3, [sp, #8]
    5ade:	4413      	add	r3, r2
    5ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5ae4:	d30d      	bcc.n	5b02 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x16a>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(targetValue - (FTM_CNT_MAX_VALUE - oldCmpValue)));
    5ae6:	9a07      	ldr	r2, [sp, #28]
    5ae8:	9b02      	ldr	r3, [sp, #8]
    5aea:	4413      	add	r3, r2
    5aec:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    5af0:	3bff      	subs	r3, #255	; 0xff
    5af2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5af6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5afa:	461a      	mov	r2, r3
    5afc:	f7ff fe88 	bl	5810 <Ftm_Gpt_Ip_SetCompareValue>
}
    5b00:	e009      	b.n	5b16 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
    5b02:	9a07      	ldr	r2, [sp, #28]
    5b04:	9b02      	ldr	r3, [sp, #8]
    5b06:	441a      	add	r2, r3
    5b08:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b10:	4618      	mov	r0, r3
    5b12:	f7ff fe7d 	bl	5810 <Ftm_Gpt_Ip_SetCompareValue>
}
    5b16:	bf00      	nop
    5b18:	b009      	add	sp, #36	; 0x24
    5b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b1e:	bf00      	nop
    5b20:	1fff8dc8 	.word	0x1fff8dc8
    5b24:	1fff8d38 	.word	0x1fff8d38

00005b28 <Ftm_Gpt_Ip_Init>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_Init_Activity
*/
void Ftm_Gpt_Ip_Init(uint8 instance, const Ftm_Gpt_Ip_InstanceConfigType *configPtr)
{
    5b28:	b500      	push	{lr}
    5b2a:	b083      	sub	sp, #12
    5b2c:	4603      	mov	r3, r0
    5b2e:	9100      	str	r1, [sp, #0]
    5b30:	f88d 3007 	strb.w	r3, [sp, #7]
#endif
    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Check the FTM counter modes */
    if (FTM_GPT_IP_MODE_UP_TIMER == configPtr->mode)
    5b34:	9b00      	ldr	r3, [sp, #0]
    5b36:	68db      	ldr	r3, [r3, #12]
    5b38:	2b01      	cmp	r3, #1
    5b3a:	d12a      	bne.n	5b92 <Ftm_Gpt_Ip_Init+0x6a>
    {
        /* Set clock and prescalerValue FTM */
        Ftm_Gpt_Ip_SetPrescaler(instance, configPtr->clockPrescaler);
    5b3c:	9b00      	ldr	r3, [sp, #0]
    5b3e:	7a1a      	ldrb	r2, [r3, #8]
    5b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b44:	4611      	mov	r1, r2
    5b46:	4618      	mov	r0, r3
    5b48:	f7ff fe06 	bl	5758 <Ftm_Gpt_Ip_SetPrescaler>
        /* Set FTM counter clock source */
        Ftm_Gpt_Ip_SetClockSource(instance, configPtr->clocksource);
    5b4c:	9b00      	ldr	r3, [sp, #0]
    5b4e:	685a      	ldr	r2, [r3, #4]
    5b50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b54:	4611      	mov	r1, r2
    5b56:	4618      	mov	r0, r3
    5b58:	f7ff fdda 	bl	5710 <Ftm_Gpt_Ip_SetClockSource>

        /* Set freeze bits */
        Ftm_Gpt_Ip_SetFreezeBits(instance, configPtr->freezeBits);
    5b5c:	9b00      	ldr	r3, [sp, #0]
    5b5e:	781a      	ldrb	r2, [r3, #0]
    5b60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b64:	4611      	mov	r1, r2
    5b66:	4618      	mov	r0, r3
    5b68:	f7ff fd20 	bl	55ac <Ftm_Gpt_Ip_SetFreezeBits>

        /*Set Counter register and Initial Counter Value*/
        Ftm_Gpt_Ip_SetCounterInitVal(instance, 1U);
    5b6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b70:	2101      	movs	r1, #1
    5b72:	4618      	mov	r0, r3
    5b74:	f7ff fd4a 	bl	560c <Ftm_Gpt_Ip_SetCounterInitVal>

        /* write the Ftm Modulo Register with 0xFFFF */
        Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    5b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5b80:	4618      	mov	r0, r3
    5b82:	f7ff fe5f 	bl	5844 <Ftm_Gpt_Ip_WriteModulo>

        /* set FTM Enable bit */
        Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    5b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b8a:	2101      	movs	r1, #1
    5b8c:	4618      	mov	r0, r3
    5b8e:	f7ff fe09 	bl	57a4 <Ftm_Gpt_Ip_SetEnFtmModule>
#if (FTM_GPT_IP_SET_CLOCK_MODE == STD_ON)
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockPrescaler = configPtr->clockPrescaler;
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockAlternatePrescaler = configPtr->clockAlternatePrescaler;
#endif
    /* set FTM instance status to initialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_INITIALIZED;
    5b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b96:	4a04      	ldr	r2, [pc, #16]	; (5ba8 <Ftm_Gpt_Ip_Init+0x80>)
    5b98:	2101      	movs	r1, #1
    5b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    5b9e:	bf00      	nop
    5ba0:	b003      	add	sp, #12
    5ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    5ba6:	bf00      	nop
    5ba8:	1fff8db8 	.word	0x1fff8db8

00005bac <Ftm_Gpt_Ip_InitChannel>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_InitChannel_Activity
*/
void Ftm_Gpt_Ip_InitChannel(uint8 instance, const Ftm_Gpt_Ip_ChannelConfigType *configPtr)
{
    5bac:	b500      	push	{lr}
    5bae:	b083      	sub	sp, #12
    5bb0:	4603      	mov	r3, r0
    5bb2:	9100      	str	r1, [sp, #0]
    5bb4:	f88d 3007 	strb.w	r3, [sp, #7]
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > configPtr->hwChannel);
#endif

    /* Disable channels interrupt bit */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, configPtr->hwChannel, FALSE);
    5bb8:	9b00      	ldr	r3, [sp, #0]
    5bba:	7819      	ldrb	r1, [r3, #0]
    5bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5bc0:	2200      	movs	r2, #0
    5bc2:	4618      	mov	r0, r3
    5bc4:	f7ff fd74 	bl	56b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear ClearInterruptFlag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, configPtr->hwChannel);
    5bc8:	9b00      	ldr	r3, [sp, #0]
    5bca:	781a      	ldrb	r2, [r3, #0]
    5bcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5bd0:	4611      	mov	r1, r2
    5bd2:	4618      	mov	r0, r3
    5bd4:	f7ff fd46 	bl	5664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, configPtr->hwChannel, 0xFFFFU);
    5bd8:	9b00      	ldr	r3, [sp, #0]
    5bda:	7819      	ldrb	r1, [r3, #0]
    5bdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5be4:	4618      	mov	r0, r3
    5be6:	f7ff fe13 	bl	5810 <Ftm_Gpt_Ip_SetCompareValue>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, configPtr->hwChannel, TRUE);
    5bea:	9b00      	ldr	r3, [sp, #0]
    5bec:	7819      	ldrb	r1, [r3, #0]
    5bee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5bf2:	2201      	movs	r2, #1
    5bf4:	4618      	mov	r0, r3
    5bf6:	f7ff fe3b 	bl	5870 <Ftm_Gpt_Ip_ModeSelectA>
     (defined FTM_4_CH_4_CH_5_ISR_USED) || (defined FTM_4_CH_6_CH_7_ISR_USED) || (defined FTM_5_CH_0_CH_1_ISR_USED) || \
     (defined FTM_5_CH_2_CH_3_ISR_USED) || (defined FTM_5_CH_4_CH_5_ISR_USED) || (defined FTM_5_CH_6_CH_7_ISR_USED) || \
     (defined FTM_6_CH_0_CH_1_ISR_USED) || (defined FTM_6_CH_2_CH_3_ISR_USED) || (defined FTM_6_CH_4_CH_5_ISR_USED) || \
     (defined FTM_6_CH_6_CH_7_ISR_USED) || (defined FTM_7_CH_0_CH_1_ISR_USED) || (defined FTM_7_CH_2_CH_3_ISR_USED) || \
     (defined FTM_7_CH_4_CH_5_ISR_USED) || (defined FTM_7_CH_6_CH_7_ISR_USED))
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].chInit = TRUE;
    5bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5bfe:	9a00      	ldr	r2, [sp, #0]
    5c00:	7812      	ldrb	r2, [r2, #0]
    5c02:	4611      	mov	r1, r2
    5c04:	4a1a      	ldr	r2, [pc, #104]	; (5c70 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    5c06:	00db      	lsls	r3, r3, #3
    5c08:	440b      	add	r3, r1
    5c0a:	011b      	lsls	r3, r3, #4
    5c0c:	4413      	add	r3, r2
    5c0e:	2201      	movs	r2, #1
    5c10:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callback = configPtr->callback;
    5c12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c16:	9a00      	ldr	r2, [sp, #0]
    5c18:	7812      	ldrb	r2, [r2, #0]
    5c1a:	4610      	mov	r0, r2
    5c1c:	9a00      	ldr	r2, [sp, #0]
    5c1e:	6852      	ldr	r2, [r2, #4]
    5c20:	4913      	ldr	r1, [pc, #76]	; (5c70 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    5c22:	00db      	lsls	r3, r3, #3
    5c24:	4403      	add	r3, r0
    5c26:	011b      	lsls	r3, r3, #4
    5c28:	440b      	add	r3, r1
    5c2a:	3304      	adds	r3, #4
    5c2c:	601a      	str	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callbackParam = configPtr->callbackParam;
    5c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c32:	9a00      	ldr	r2, [sp, #0]
    5c34:	7812      	ldrb	r2, [r2, #0]
    5c36:	4610      	mov	r0, r2
    5c38:	9a00      	ldr	r2, [sp, #0]
    5c3a:	7a11      	ldrb	r1, [r2, #8]
    5c3c:	4a0c      	ldr	r2, [pc, #48]	; (5c70 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    5c3e:	00db      	lsls	r3, r3, #3
    5c40:	4403      	add	r3, r0
    5c42:	011b      	lsls	r3, r3, #4
    5c44:	4413      	add	r3, r2
    5c46:	3308      	adds	r3, #8
    5c48:	460a      	mov	r2, r1
    5c4a:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].channelMode = configPtr->channelMode;
    5c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c50:	9a00      	ldr	r2, [sp, #0]
    5c52:	7812      	ldrb	r2, [r2, #0]
    5c54:	4610      	mov	r0, r2
    5c56:	9a00      	ldr	r2, [sp, #0]
    5c58:	68d2      	ldr	r2, [r2, #12]
    5c5a:	4905      	ldr	r1, [pc, #20]	; (5c70 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    5c5c:	00db      	lsls	r3, r3, #3
    5c5e:	4403      	add	r3, r0
    5c60:	011b      	lsls	r3, r3, #4
    5c62:	440b      	add	r3, r1
    5c64:	330c      	adds	r3, #12
    5c66:	601a      	str	r2, [r3, #0]
#endif
}
    5c68:	bf00      	nop
    5c6a:	b003      	add	sp, #12
    5c6c:	f85d fb04 	ldr.w	pc, [sp], #4
    5c70:	1fff8dc8 	.word	0x1fff8dc8

00005c74 <Ftm_Gpt_Ip_Deinit>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver.
* @implements    Ftm_Gpt_Ip_Deinit_Activity
*/
void Ftm_Gpt_Ip_Deinit(uint8 instance)
{
    5c74:	b500      	push	{lr}
    5c76:	b085      	sub	sp, #20
    5c78:	4603      	mov	r3, r0
    5c7a:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    uint8 channelIndex;

    /* Reset all channels to default */
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    5c7e:	2300      	movs	r3, #0
    5c80:	f88d 300f 	strb.w	r3, [sp, #15]
    5c84:	e014      	b.n	5cb0 <Ftm_Gpt_Ip_Deinit+0x3c>
    {
        /* Disable interrupts */
        Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channelIndex, FALSE );
    5c86:	f89d 100f 	ldrb.w	r1, [sp, #15]
    5c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c8e:	2200      	movs	r2, #0
    5c90:	4618      	mov	r0, r3
    5c92:	f7ff fd0d 	bl	56b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
        /*Clear interrupt flags*/
        Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channelIndex);
    5c96:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c9e:	4611      	mov	r1, r2
    5ca0:	4618      	mov	r0, r3
    5ca2:	f7ff fcdf 	bl	5664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    5ca6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5caa:	3301      	adds	r3, #1
    5cac:	f88d 300f 	strb.w	r3, [sp, #15]
    5cb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5cb4:	2b07      	cmp	r3, #7
    5cb6:	d9e6      	bls.n	5c86 <Ftm_Gpt_Ip_Deinit+0x12>
    }
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    5cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5cbc:	2100      	movs	r1, #0
    5cbe:	4618      	mov	r0, r3
    5cc0:	f7ff fd26 	bl	5710 <Ftm_Gpt_Ip_SetClockSource>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    5cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5cc8:	2100      	movs	r1, #0
    5cca:	4618      	mov	r0, r3
    5ccc:	f7ff fd6a 	bl	57a4 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* clearde freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, FALSE);
    5cd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5cd4:	2100      	movs	r1, #0
    5cd6:	4618      	mov	r0, r3
    5cd8:	f7ff fc68 	bl	55ac <Ftm_Gpt_Ip_SetFreezeBits>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    5cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ce0:	2100      	movs	r1, #0
    5ce2:	4618      	mov	r0, r3
    5ce4:	f7ff fc92 	bl	560c <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    5ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5cec:	2100      	movs	r1, #0
    5cee:	4618      	mov	r0, r3
    5cf0:	f7ff fca2 	bl	5638 <Ftm_Gpt_Ip_SetCounter>
    /* set FTM instance status to uninitialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_UNINITIALIZED;
    5cf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5cf8:	4a03      	ldr	r2, [pc, #12]	; (5d08 <Ftm_Gpt_Ip_Deinit+0x94>)
    5cfa:	2100      	movs	r1, #0
    5cfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    5d00:	bf00      	nop
    5d02:	b005      	add	sp, #20
    5d04:	f85d fb04 	ldr.w	pc, [sp], #4
    5d08:	1fff8db8 	.word	0x1fff8db8

00005d0c <Ftm_Gpt_Ip_StartCounting>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for starting the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StartCounting_Activity
*/
void Ftm_Gpt_Ip_StartCounting(uint8 instance, uint8 channel, uint16 compareValue)
{
    5d0c:	b500      	push	{lr}
    5d0e:	b085      	sub	sp, #20
    5d10:	4603      	mov	r3, r0
    5d12:	f88d 3007 	strb.w	r3, [sp, #7]
    5d16:	460b      	mov	r3, r1
    5d18:	f88d 3006 	strb.w	r3, [sp, #6]
    5d1c:	4613      	mov	r3, r2
    5d1e:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    uint32 counterValue;
    uint32 currentCntValue = Ftm_Gpt_Ip_GetCntValue(instance);
    5d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d26:	4618      	mov	r0, r3
    5d28:	f7ff fc18 	bl	555c <Ftm_Gpt_Ip_GetCntValue>
    5d2c:	9002      	str	r0, [sp, #8]

    if ((uint32)(currentCntValue + compareValue) > FTM_CNT_MAX_VALUE)
    5d2e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5d32:	9b02      	ldr	r3, [sp, #8]
    5d34:	4413      	add	r3, r2
    5d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5d3a:	d308      	bcc.n	5d4e <Ftm_Gpt_Ip_StartCounting+0x42>
    {
        counterValue = (uint32)(compareValue - (FTM_CNT_MAX_VALUE - currentCntValue));
    5d3c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5d40:	9b02      	ldr	r3, [sp, #8]
    5d42:	4413      	add	r3, r2
    5d44:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    5d48:	3bff      	subs	r3, #255	; 0xff
    5d4a:	9303      	str	r3, [sp, #12]
    5d4c:	e004      	b.n	5d58 <Ftm_Gpt_Ip_StartCounting+0x4c>
    }
    else
    {
        counterValue = (uint32)(currentCntValue + compareValue);
    5d4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5d52:	9a02      	ldr	r2, [sp, #8]
    5d54:	4413      	add	r3, r2
    5d56:	9303      	str	r3, [sp, #12]
    }
    /* Set new compare value */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, counterValue);
    5d58:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d60:	9a03      	ldr	r2, [sp, #12]
    5d62:	4618      	mov	r0, r3
    5d64:	f7ff fd54 	bl	5810 <Ftm_Gpt_Ip_SetCompareValue>
    /* Save compare value */
    Ftm_Gpt_Ip_u32TargetValue[instance][channel] = compareValue;
    5d68:	f89d 1007 	ldrb.w	r1, [sp, #7]
    5d6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5d70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5d74:	480c      	ldr	r0, [pc, #48]	; (5da8 <Ftm_Gpt_Ip_StartCounting+0x9c>)
    5d76:	00c9      	lsls	r1, r1, #3
    5d78:	440b      	add	r3, r1
    5d7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /* Clear CHF flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance,channel);
    5d7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d86:	4611      	mov	r1, r2
    5d88:	4618      	mov	r0, r3
    5d8a:	f7ff fc6b 	bl	5664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    5d8e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d96:	2201      	movs	r2, #1
    5d98:	4618      	mov	r0, r3
    5d9a:	f7ff fc89 	bl	56b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>

}
    5d9e:	bf00      	nop
    5da0:	b005      	add	sp, #20
    5da2:	f85d fb04 	ldr.w	pc, [sp], #4
    5da6:	bf00      	nop
    5da8:	1fff8d38 	.word	0x1fff8d38

00005dac <Ftm_Gpt_Ip_StartTimer>:
 *                  - enables the FTM counter
 * @pre           The driver needs to be initialized.
 * @implements    Ftm_Gpt_Ip_StartTimer_Activity
 */
void Ftm_Gpt_Ip_StartTimer(uint8 instance, uint16 counterValue)
{
    5dac:	b500      	push	{lr}
    5dae:	b083      	sub	sp, #12
    5db0:	4603      	mov	r3, r0
    5db2:	460a      	mov	r2, r1
    5db4:	f88d 3007 	strb.w	r3, [sp, #7]
    5db8:	4613      	mov	r3, r2
    5dba:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    if (instance < FTM_INSTANCE_COUNT)
    5dbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5dc2:	2b03      	cmp	r3, #3
    5dc4:	d814      	bhi.n	5df0 <Ftm_Gpt_Ip_StartTimer+0x44>
    {
        if (FTM_GPT_IP_STATUS_INITIALIZED == Ftm_Gpt_Ip_u32InstanceState[instance])
    5dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5dca:	4a0b      	ldr	r2, [pc, #44]	; (5df8 <Ftm_Gpt_Ip_StartTimer+0x4c>)
    5dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dd0:	2b01      	cmp	r3, #1
    5dd2:	d10d      	bne.n	5df0 <Ftm_Gpt_Ip_StartTimer+0x44>
        {
            /* Set the new value counter */
            Ftm_Gpt_Ip_SetCounterInitVal(instance, counterValue);
    5dd4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ddc:	4611      	mov	r1, r2
    5dde:	4618      	mov	r0, r3
    5de0:	f7ff fc14 	bl	560c <Ftm_Gpt_Ip_SetCounterInitVal>
            /* set FTM Enable bit */
            Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    5de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5de8:	2101      	movs	r1, #1
    5dea:	4618      	mov	r0, r3
    5dec:	f7ff fcda 	bl	57a4 <Ftm_Gpt_Ip_SetEnFtmModule>
        }
    }
}
    5df0:	bf00      	nop
    5df2:	b003      	add	sp, #12
    5df4:	f85d fb04 	ldr.w	pc, [sp], #4
    5df8:	1fff8db8 	.word	0x1fff8db8

00005dfc <Ftm_Gpt_Ip_StopTimer>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for stoping the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StopTimer_Activity
*/
void Ftm_Gpt_Ip_StopTimer(uint8 instance)
{
    5dfc:	b500      	push	{lr}
    5dfe:	b083      	sub	sp, #12
    5e00:	4603      	mov	r3, r0
    5e02:	f88d 3007 	strb.w	r3, [sp, #7]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    5e06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e0a:	2100      	movs	r1, #0
    5e0c:	4618      	mov	r0, r3
    5e0e:	f7ff fcc9 	bl	57a4 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    5e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e16:	2100      	movs	r1, #0
    5e18:	4618      	mov	r0, r3
    5e1a:	f7ff fc79 	bl	5710 <Ftm_Gpt_Ip_SetClockSource>
}
    5e1e:	bf00      	nop
    5e20:	b003      	add	sp, #12
    5e22:	f85d fb04 	ldr.w	pc, [sp], #4

00005e26 <Ftm_Gpt_Ip_EnableChannelInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Ftm_Gpt_Ip_EnableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_EnableChannelInterrupt(uint8 instance, uint8 channel)
{
    5e26:	b500      	push	{lr}
    5e28:	b083      	sub	sp, #12
    5e2a:	4603      	mov	r3, r0
    5e2c:	460a      	mov	r2, r1
    5e2e:	f88d 3007 	strb.w	r3, [sp, #7]
    5e32:	4613      	mov	r3, r2
    5e34:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

     /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    5e38:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e40:	4611      	mov	r1, r2
    5e42:	4618      	mov	r0, r3
    5e44:	f7ff fc0e 	bl	5664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable channel interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    5e48:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e50:	2201      	movs	r2, #1
    5e52:	4618      	mov	r0, r3
    5e54:	f7ff fc2c 	bl	56b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
}
    5e58:	bf00      	nop
    5e5a:	b003      	add	sp, #12
    5e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00005e60 <Ftm_Gpt_Ip_DisableChannelInterrupt>:
* @return        void
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_DisableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_DisableChannelInterrupt(uint8 instance, uint8 channel)
{
    5e60:	b500      	push	{lr}
    5e62:	b083      	sub	sp, #12
    5e64:	4603      	mov	r3, r0
    5e66:	460a      	mov	r2, r1
    5e68:	f88d 3007 	strb.w	r3, [sp, #7]
    5e6c:	4613      	mov	r3, r2
    5e6e:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

    /* Disable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    5e72:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e7a:	2200      	movs	r2, #0
    5e7c:	4618      	mov	r0, r3
    5e7e:	f7ff fc17 	bl	56b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    5e82:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e8a:	4611      	mov	r1, r2
    5e8c:	4618      	mov	r0, r3
    5e8e:	f7ff fbe9 	bl	5664 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
}
    5e92:	bf00      	nop
    5e94:	b003      	add	sp, #12
    5e96:	f85d fb04 	ldr.w	pc, [sp], #4

00005e9a <Ftm_Gpt_Ip_SetHalfCycleReloadPoint>:
* @return
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_SetHalfCycleReloadPoint_Activity
*/
void Ftm_Gpt_Ip_SetHalfCycleReloadPoint(uint8 instance, uint16 reloadPoint)
{
    5e9a:	b500      	push	{lr}
    5e9c:	b083      	sub	sp, #12
    5e9e:	4603      	mov	r3, r0
    5ea0:	460a      	mov	r2, r1
    5ea2:	f88d 3007 	strb.w	r3, [sp, #7]
    5ea6:	4613      	mov	r3, r2
    5ea8:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    Ftm_Gpt_Ip_SetHalfCycleValue(ftmGptBase[instance], reloadPoint);
    5eac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5eb0:	4a06      	ldr	r2, [pc, #24]	; (5ecc <Ftm_Gpt_Ip_SetHalfCycleReloadPoint+0x32>)
    5eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eb6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5eba:	4611      	mov	r1, r2
    5ebc:	4618      	mov	r0, r3
    5ebe:	f7ff fd21 	bl	5904 <Ftm_Gpt_Ip_SetHalfCycleValue>
}
    5ec2:	bf00      	nop
    5ec4:	b003      	add	sp, #12
    5ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    5eca:	bf00      	nop
    5ecc:	0000b710 	.word	0x0000b710

00005ed0 <FTM_0_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 0 channel 0 - channel 1.
 */
ISR(FTM_0_CH_0_CH_1_ISR)
{
    5ed0:	b500      	push	{lr}
    5ed2:	b083      	sub	sp, #12
    uint8 channel = 0U;
    5ed4:	2300      	movs	r3, #0
    5ed6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 0U;
    5eda:	2300      	movs	r3, #0
    5edc:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    5ee0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5ee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5ee8:	4611      	mov	r1, r2
    5eea:	4618      	mov	r0, r3
    5eec:	f7ff fd36 	bl	595c <Ftm_Gpt_Ip_GetChannelEventStatus>
    5ef0:	4603      	mov	r3, r0
    5ef2:	2b00      	cmp	r3, #0
    5ef4:	d007      	beq.n	5f06 <FTM_0_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    5ef6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5efa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5efe:	4611      	mov	r1, r2
    5f00:	4618      	mov	r0, r3
    5f02:	f7ff fd49 	bl	5998 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    5f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f0a:	3301      	adds	r3, #1
    5f0c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    5f10:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5f14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5f18:	4611      	mov	r1, r2
    5f1a:	4618      	mov	r0, r3
    5f1c:	f7ff fd1e 	bl	595c <Ftm_Gpt_Ip_GetChannelEventStatus>
    5f20:	4603      	mov	r3, r0
    5f22:	2b00      	cmp	r3, #0
    5f24:	d007      	beq.n	5f36 <FTM_0_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    5f26:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5f2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5f2e:	4611      	mov	r1, r2
    5f30:	4618      	mov	r0, r3
    5f32:	f7ff fd31 	bl	5998 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    5f36:	f3bf 8f4f 	dsb	sy
}
    5f3a:	bf00      	nop
    5f3c:	b003      	add	sp, #12
    5f3e:	f85d fb04 	ldr.w	pc, [sp], #4
    5f42:	bf00      	nop

00005f44 <Gpt_ValidateChannelStatus>:
(
    uint8 u8ServiceId,
    Gpt_ChannelType channel,
    uint32 coreID
)
{
    5f44:	b500      	push	{lr}
    5f46:	b085      	sub	sp, #20
    5f48:	4603      	mov	r3, r0
    5f4a:	9200      	str	r2, [sp, #0]
    5f4c:	f88d 3007 	strb.w	r3, [sp, #7]
    5f50:	460b      	mov	r3, r1
    5f52:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    5f56:	2301      	movs	r3, #1
    5f58:	f88d 300f 	strb.w	r3, [sp, #15]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(u8ServiceId, channel, coreID))
    {
#endif
        if(channel < GPT_HW_CHANNEL_NUM)
    5f5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5f60:	2b01      	cmp	r3, #1
    5f62:	d814      	bhi.n	5f8e <Gpt_ValidateChannelStatus+0x4a>
                    );
                }
                else
                {
    #else
                    if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    5f64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5f68:	490c      	ldr	r1, [pc, #48]	; (5f9c <Gpt_ValidateChannelStatus+0x58>)
    5f6a:	9a00      	ldr	r2, [sp, #0]
    5f6c:	0052      	lsls	r2, r2, #1
    5f6e:	4413      	add	r3, r2
    5f70:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    5f74:	2b04      	cmp	r3, #4
    5f76:	d107      	bne.n	5f88 <Gpt_ValidateChannelStatus+0x44>
                    {
                        (void)Det_ReportRuntimeError\
    5f78:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5f7c:	230b      	movs	r3, #11
    5f7e:	2100      	movs	r1, #0
    5f80:	2064      	movs	r0, #100	; 0x64
    5f82:	f004 ff8b 	bl	ae9c <Det_ReportRuntimeError>
    5f86:	e002      	b.n	5f8e <Gpt_ValidateChannelStatus+0x4a>
                        );
                    }
                    else
                    {
    #endif
                        returnValue = (Std_ReturnType)E_OK;
    5f88:	2300      	movs	r3, #0
    5f8a:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return returnValue;
    5f8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5f92:	4618      	mov	r0, r3
    5f94:	b005      	add	sp, #20
    5f96:	f85d fb04 	ldr.w	pc, [sp], #4
    5f9a:	bf00      	nop
    5f9c:	1fff8fd0 	.word	0x1fff8fd0

00005fa0 <Gpt_ConvertChannelIndexToChannel>:
 *
 * */
static inline Gpt_ChannelType Gpt_ConvertChannelIndexToChannel(Gpt_ChannelType ChannelIndex,
                                                                              uint32 coreID
                                                                              )
{
    5fa0:	b084      	sub	sp, #16
    5fa2:	4603      	mov	r3, r0
    5fa4:	9100      	str	r1, [sp, #0]
    5fa6:	f88d 3007 	strb.w	r3, [sp, #7]
    Gpt_ChannelType Channel;

    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    5faa:	2300      	movs	r3, #0
    5fac:	f88d 300f 	strb.w	r3, [sp, #15]
    5fb0:	e010      	b.n	5fd4 <Gpt_ConvertChannelIndexToChannel+0x34>
    {
        if(ChannelIndex == (*Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap)[Channel])
    5fb2:	4a0e      	ldr	r2, [pc, #56]	; (5fec <Gpt_ConvertChannelIndexToChannel+0x4c>)
    5fb4:	9b00      	ldr	r3, [sp, #0]
    5fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fba:	691a      	ldr	r2, [r3, #16]
    5fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fc0:	5cd3      	ldrb	r3, [r2, r3]
    5fc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5fc6:	429a      	cmp	r2, r3
    5fc8:	d009      	beq.n	5fde <Gpt_ConvertChannelIndexToChannel+0x3e>
    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    5fca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fce:	3301      	adds	r3, #1
    5fd0:	f88d 300f 	strb.w	r3, [sp, #15]
    5fd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fd8:	2b01      	cmp	r3, #1
    5fda:	d9ea      	bls.n	5fb2 <Gpt_ConvertChannelIndexToChannel+0x12>
    5fdc:	e000      	b.n	5fe0 <Gpt_ConvertChannelIndexToChannel+0x40>
        {
            break;
    5fde:	bf00      	nop
        }
    }
    return Channel;
    5fe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5fe4:	4618      	mov	r0, r3
    5fe6:	b004      	add	sp, #16
    5fe8:	4770      	bx	lr
    5fea:	bf00      	nop
    5fec:	1fff8fcc 	.word	0x1fff8fcc

00005ff0 <Gpt_Init>:
*
* @pre            The data structure including the configuration set required for initializing the GPT driver..
* @implements     Gpt_Init_Activity
*/
void Gpt_Init(const Gpt_ConfigType * configPtr)
{
    5ff0:	b500      	push	{lr}
    5ff2:	b087      	sub	sp, #28
    5ff4:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    5ff6:	2300      	movs	r3, #0
    5ff8:	9304      	str	r3, [sp, #16]
        #else
            Gpt_pConfig[coreID] = &Gpt_Config;
        #endif
            (void)configPtr;
    #else
            Gpt_pConfig[coreID] = configPtr;
    5ffa:	4930      	ldr	r1, [pc, #192]	; (60bc <Gpt_Init+0xcc>)
    5ffc:	9b04      	ldr	r3, [sp, #16]
    5ffe:	9a01      	ldr	r2, [sp, #4]
    6000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /*Initialize and Start Predef Timers.*/
            Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
#endif
            Gpt_Ipw_InitInstances(Gpt_pConfig[coreID]);
    6004:	4a2d      	ldr	r2, [pc, #180]	; (60bc <Gpt_Init+0xcc>)
    6006:	9b04      	ldr	r3, [sp, #16]
    6008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    600c:	4618      	mov	r0, r3
    600e:	f000 fc11 	bl	6834 <Gpt_Ipw_InitInstances>

            /*Initialize for each channel the runtime status informations.*/
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6012:	2300      	movs	r3, #0
    6014:	f88d 3017 	strb.w	r3, [sp, #23]
    6018:	e03e      	b.n	6098 <Gpt_Init+0xa8>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    601a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    601e:	9904      	ldr	r1, [sp, #16]
    6020:	4618      	mov	r0, r3
    6022:	f7ff ffbd 	bl	5fa0 <Gpt_ConvertChannelIndexToChannel>
    6026:	4603      	mov	r3, r0
    6028:	f88d 300f 	strb.w	r3, [sp, #15]
                if(channel < GPT_HW_CHANNEL_NUM)
    602c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6030:	2b01      	cmp	r3, #1
    6032:	d81b      	bhi.n	606c <Gpt_Init+0x7c>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    6034:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6038:	4921      	ldr	r1, [pc, #132]	; (60c0 <Gpt_Init+0xd0>)
    603a:	9a04      	ldr	r2, [sp, #16]
    603c:	0052      	lsls	r2, r2, #1
    603e:	4413      	add	r3, r2
    6040:	00db      	lsls	r3, r3, #3
    6042:	440b      	add	r3, r1
    6044:	2200      	movs	r2, #0
    6046:	711a      	strb	r2, [r3, #4]
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
#endif
                    /* Initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_INITIALIZED;
    6048:	f89d 300f 	ldrb.w	r3, [sp, #15]
    604c:	491c      	ldr	r1, [pc, #112]	; (60c0 <Gpt_Init+0xd0>)
    604e:	9a04      	ldr	r2, [sp, #16]
    6050:	0052      	lsls	r2, r2, #1
    6052:	4413      	add	r3, r2
    6054:	2201      	movs	r2, #1
    6056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    605a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    605e:	4919      	ldr	r1, [pc, #100]	; (60c4 <Gpt_Init+0xd4>)
    6060:	9a04      	ldr	r2, [sp, #16]
    6062:	0052      	lsls	r2, r2, #1
    6064:	4413      	add	r3, r2
    6066:	2200      	movs	r2, #0
    6068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                }

                /*Initialize hardware timer channel.*/
                Gpt_Ipw_Init(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    606c:	4a13      	ldr	r2, [pc, #76]	; (60bc <Gpt_Init+0xcc>)
    606e:	9b04      	ldr	r3, [sp, #16]
    6070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6074:	6859      	ldr	r1, [r3, #4]
    6076:	f89d 2017 	ldrb.w	r2, [sp, #23]
    607a:	4613      	mov	r3, r2
    607c:	009b      	lsls	r3, r3, #2
    607e:	4413      	add	r3, r2
    6080:	009b      	lsls	r3, r3, #2
    6082:	440b      	add	r3, r1
    6084:	3310      	adds	r3, #16
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	4618      	mov	r0, r3
    608a:	f000 fc0a 	bl	68a2 <Gpt_Ipw_Init>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    608e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6092:	3301      	adds	r3, #1
    6094:	f88d 3017 	strb.w	r3, [sp, #23]
    6098:	4a08      	ldr	r2, [pc, #32]	; (60bc <Gpt_Init+0xcc>)
    609a:	9b04      	ldr	r3, [sp, #16]
    609c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    60a6:	429a      	cmp	r2, r3
    60a8:	d3b7      	bcc.n	601a <Gpt_Init+0x2a>
            }
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
            /*Set the driver to normal mode*/
            Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    60aa:	4a07      	ldr	r2, [pc, #28]	; (60c8 <Gpt_Init+0xd8>)
    60ac:	9b04      	ldr	r3, [sp, #16]
    60ae:	2100      	movs	r1, #0
    60b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    60b4:	bf00      	nop
}
    60b6:	b007      	add	sp, #28
    60b8:	f85d fb04 	ldr.w	pc, [sp], #4
    60bc:	1fff8fcc 	.word	0x1fff8fcc
    60c0:	1fff8fd0 	.word	0x1fff8fd0
    60c4:	1fff8fe0 	.word	0x1fff8fe0
    60c8:	1fff8fc8 	.word	0x1fff8fc8

000060cc <Gpt_DeInit>:
* @return  void
*
* @implements   Gpt_DeInit_Activity
*/
void Gpt_DeInit(void)
{
    60cc:	b500      	push	{lr}
    60ce:	b085      	sub	sp, #20
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    Std_ReturnType allChannelStatus = (Std_ReturnType)E_OK;
    60d0:	2300      	movs	r3, #0
    60d2:	f88d 300e 	strb.w	r3, [sp, #14]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    60d6:	2300      	movs	r3, #0
    60d8:	9302      	str	r3, [sp, #8]
    /*Validate if the calling context is valid*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_DEINIT_ID, coreID))
    {
#endif
        /* Initialize for each channel the runtime status informations.*/
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    60da:	2300      	movs	r3, #0
    60dc:	f88d 300f 	strb.w	r3, [sp, #15]
    60e0:	e01b      	b.n	611a <Gpt_DeInit+0x4e>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    60e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60e6:	9902      	ldr	r1, [sp, #8]
    60e8:	4618      	mov	r0, r3
    60ea:	f7ff ff59 	bl	5fa0 <Gpt_ConvertChannelIndexToChannel>
    60ee:	4603      	mov	r3, r0
    60f0:	f88d 3007 	strb.w	r3, [sp, #7]
            /*Check if the channel is not running.*/
            if((Std_ReturnType)E_NOT_OK == Gpt_ValidateChannelStatus(GPT_DEINIT_ID, channel, coreID))
    60f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60f8:	9a02      	ldr	r2, [sp, #8]
    60fa:	4619      	mov	r1, r3
    60fc:	2002      	movs	r0, #2
    60fe:	f7ff ff21 	bl	5f44 <Gpt_ValidateChannelStatus>
    6102:	4603      	mov	r3, r0
    6104:	2b01      	cmp	r3, #1
    6106:	d103      	bne.n	6110 <Gpt_DeInit+0x44>
            {
                allChannelStatus = (Std_ReturnType)E_NOT_OK;
    6108:	2301      	movs	r3, #1
    610a:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    610e:	e00d      	b.n	612c <Gpt_DeInit+0x60>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6110:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6114:	3301      	adds	r3, #1
    6116:	f88d 300f 	strb.w	r3, [sp, #15]
    611a:	4a31      	ldr	r2, [pc, #196]	; (61e0 <Gpt_DeInit+0x114>)
    611c:	9b02      	ldr	r3, [sp, #8]
    611e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6128:	429a      	cmp	r2, r3
    612a:	d3da      	bcc.n	60e2 <Gpt_DeInit+0x16>
            }
        }

        if((Std_ReturnType)E_OK == allChannelStatus)
    612c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6130:	2b00      	cmp	r3, #0
    6132:	d151      	bne.n	61d8 <Gpt_DeInit+0x10c>
        {
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6134:	2300      	movs	r3, #0
    6136:	f88d 300f 	strb.w	r3, [sp, #15]
    613a:	e03e      	b.n	61ba <Gpt_DeInit+0xee>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    613c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6140:	9902      	ldr	r1, [sp, #8]
    6142:	4618      	mov	r0, r3
    6144:	f7ff ff2c 	bl	5fa0 <Gpt_ConvertChannelIndexToChannel>
    6148:	4603      	mov	r3, r0
    614a:	f88d 3007 	strb.w	r3, [sp, #7]
                if(channel < GPT_HW_CHANNEL_NUM)
    614e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6152:	2b01      	cmp	r3, #1
    6154:	d82c      	bhi.n	61b0 <Gpt_DeInit+0xe4>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    6156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    615a:	4922      	ldr	r1, [pc, #136]	; (61e4 <Gpt_DeInit+0x118>)
    615c:	9a02      	ldr	r2, [sp, #8]
    615e:	0052      	lsls	r2, r2, #1
    6160:	4413      	add	r3, r2
    6162:	00db      	lsls	r3, r3, #3
    6164:	440b      	add	r3, r1
    6166:	2200      	movs	r2, #0
    6168:	711a      	strb	r2, [r3, #4]
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
#endif
                    /* De initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_UNINITIALIZED;
    616a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    616e:	491d      	ldr	r1, [pc, #116]	; (61e4 <Gpt_DeInit+0x118>)
    6170:	9a02      	ldr	r2, [sp, #8]
    6172:	0052      	lsls	r2, r2, #1
    6174:	4413      	add	r3, r2
    6176:	2200      	movs	r2, #0
    6178:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    617c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6180:	4919      	ldr	r1, [pc, #100]	; (61e8 <Gpt_DeInit+0x11c>)
    6182:	9a02      	ldr	r2, [sp, #8]
    6184:	0052      	lsls	r2, r2, #1
    6186:	4413      	add	r3, r2
    6188:	2200      	movs	r2, #0
    618a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                    /*Initialize hardware timer channel.*/
                    Gpt_Ipw_DeInit
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    618e:	4a14      	ldr	r2, [pc, #80]	; (61e0 <Gpt_DeInit+0x114>)
    6190:	9b02      	ldr	r3, [sp, #8]
    6192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6196:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DeInit
    6198:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    619c:	4613      	mov	r3, r2
    619e:	009b      	lsls	r3, r3, #2
    61a0:	4413      	add	r3, r2
    61a2:	009b      	lsls	r3, r3, #2
    61a4:	440b      	add	r3, r1
    61a6:	3310      	adds	r3, #16
    61a8:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DeInit
    61aa:	4618      	mov	r0, r3
    61ac:	f000 fbe1 	bl	6972 <Gpt_Ipw_DeInit>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    61b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    61b4:	3301      	adds	r3, #1
    61b6:	f88d 300f 	strb.w	r3, [sp, #15]
    61ba:	4a09      	ldr	r2, [pc, #36]	; (61e0 <Gpt_DeInit+0x114>)
    61bc:	9b02      	ldr	r3, [sp, #8]
    61be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61c2:	781b      	ldrb	r3, [r3, #0]
    61c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    61c8:	429a      	cmp	r2, r3
    61ca:	d3b7      	bcc.n	613c <Gpt_DeInit+0x70>
            /* Deinitialize and stop Predef timers.*/
            Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
#endif
            /* Writing NULL to configuration pointer is mandatory because that variable
            is used to test the initialization of the driver */
            Gpt_pConfig[coreID] = NULL_PTR;
    61cc:	4a04      	ldr	r2, [pc, #16]	; (61e0 <Gpt_DeInit+0x114>)
    61ce:	9b02      	ldr	r3, [sp, #8]
    61d0:	2100      	movs	r1, #0
    61d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    61d6:	bf00      	nop
    61d8:	bf00      	nop
}
    61da:	b005      	add	sp, #20
    61dc:	f85d fb04 	ldr.w	pc, [sp], #4
    61e0:	1fff8fcc 	.word	0x1fff8fcc
    61e4:	1fff8fd0 	.word	0x1fff8fd0
    61e8:	1fff8fe0 	.word	0x1fff8fe0

000061ec <Gpt_GetTimeElapsed>:
*
* @pre     The driver needs to be initialized.
* @implements Gpt_GetTimeElapsed_Activity
*/
Gpt_ValueType Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    61ec:	b500      	push	{lr}
    61ee:	b089      	sub	sp, #36	; 0x24
    61f0:	4603      	mov	r3, r0
    61f2:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    61f6:	2300      	movs	r3, #0
    61f8:	f88d 3008 	strb.w	r3, [sp, #8]
    61fc:	2300      	movs	r3, #0
    61fe:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    6200:	ab02      	add	r3, sp, #8
    6202:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    6204:	2300      	movs	r3, #0
    6206:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    6208:	2300      	movs	r3, #0
    620a:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEELAPSED_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    620c:	4a31      	ldr	r2, [pc, #196]	; (62d4 <Gpt_GetTimeElapsed+0xe8>)
    620e:	9b05      	ldr	r3, [sp, #20]
    6210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6214:	691a      	ldr	r2, [r3, #16]
    6216:	f89d 3007 	ldrb.w	r3, [sp, #7]
    621a:	5cd3      	ldrb	r3, [r2, r3]
    621c:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamp
        retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    6220:	4a2c      	ldr	r2, [pc, #176]	; (62d4 <Gpt_GetTimeElapsed+0xe8>)
    6222:	9b05      	ldr	r3, [sp, #20]
    6224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6228:	6859      	ldr	r1, [r3, #4]
    622a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    622e:	4613      	mov	r3, r2
    6230:	009b      	lsls	r3, r3, #2
    6232:	4413      	add	r3, r2
    6234:	009b      	lsls	r3, r3, #2
    6236:	440b      	add	r3, r1
    6238:	3310      	adds	r3, #16
    623a:	681b      	ldr	r3, [r3, #0]
    623c:	9906      	ldr	r1, [sp, #24]
    623e:	4618      	mov	r0, r3
    6240:	f000 fb63 	bl	690a <Gpt_Ipw_GetTimeElapsed>
    6244:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6246:	f89d 3007 	ldrb.w	r3, [sp, #7]
    624a:	4923      	ldr	r1, [pc, #140]	; (62d8 <Gpt_GetTimeElapsed+0xec>)
    624c:	9a05      	ldr	r2, [sp, #20]
    624e:	0052      	lsls	r2, r2, #1
    6250:	4413      	add	r3, r2
    6252:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6256:	3b01      	subs	r3, #1
    6258:	2b03      	cmp	r3, #3
    625a:	d832      	bhi.n	62c2 <Gpt_GetTimeElapsed+0xd6>
    625c:	a201      	add	r2, pc, #4	; (adr r2, 6264 <Gpt_GetTimeElapsed+0x78>)
    625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6262:	bf00      	nop
    6264:	000062a3 	.word	0x000062a3
    6268:	000062a9 	.word	0x000062a9
    626c:	000062bd 	.word	0x000062bd
    6270:	00006275 	.word	0x00006275
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already rollover*/
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    6274:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6278:	2b00      	cmp	r3, #0
    627a:	d024      	beq.n	62c6 <Gpt_GetTimeElapsed+0xda>
                    (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    627c:	4a15      	ldr	r2, [pc, #84]	; (62d4 <Gpt_GetTimeElapsed+0xe8>)
    627e:	9b05      	ldr	r3, [sp, #20]
    6280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6284:	6859      	ldr	r1, [r3, #4]
    6286:	f89d 2013 	ldrb.w	r2, [sp, #19]
    628a:	4613      	mov	r3, r2
    628c:	009b      	lsls	r3, r3, #2
    628e:	4413      	add	r3, r2
    6290:	009b      	lsls	r3, r3, #2
    6292:	440b      	add	r3, r1
    6294:	330c      	adds	r3, #12
    6296:	681b      	ldr	r3, [r3, #0]
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    6298:	2b01      	cmp	r3, #1
    629a:	d114      	bne.n	62c6 <Gpt_GetTimeElapsed+0xda>
                   )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = returnHwChannelInfo.uTargetTime;
    629c:	9b03      	ldr	r3, [sp, #12]
    629e:	9307      	str	r3, [sp, #28]
                }
            }
            break;
    62a0:	e011      	b.n	62c6 <Gpt_GetTimeElapsed+0xda>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    62a2:	2300      	movs	r3, #0
    62a4:	9307      	str	r3, [sp, #28]
            }
            break;
    62a6:	e00f      	b.n	62c8 <Gpt_GetTimeElapsed+0xdc>
            case GPT_STATUS_STOPPED:
            {
                /*Return elapsed time at the when the channel was stopped*/
                returnValue = Gpt_aStopTime[coreID][channel];
    62a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62ac:	490b      	ldr	r1, [pc, #44]	; (62dc <Gpt_GetTimeElapsed+0xf0>)
    62ae:	9a05      	ldr	r2, [sp, #20]
    62b0:	0052      	lsls	r2, r2, #1
    62b2:	4413      	add	r3, r2
    62b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    62b8:	9307      	str	r3, [sp, #28]
            }
            break;
    62ba:	e005      	b.n	62c8 <Gpt_GetTimeElapsed+0xdc>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = returnHwChannelInfo.uTargetTime;
    62bc:	9b03      	ldr	r3, [sp, #12]
    62be:	9307      	str	r3, [sp, #28]
            }
            break;
    62c0:	e002      	b.n	62c8 <Gpt_GetTimeElapsed+0xdc>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    62c2:	bf00      	nop
    62c4:	e000      	b.n	62c8 <Gpt_GetTimeElapsed+0xdc>
            break;
    62c6:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    62c8:	9b07      	ldr	r3, [sp, #28]
}
    62ca:	4618      	mov	r0, r3
    62cc:	b009      	add	sp, #36	; 0x24
    62ce:	f85d fb04 	ldr.w	pc, [sp], #4
    62d2:	bf00      	nop
    62d4:	1fff8fcc 	.word	0x1fff8fcc
    62d8:	1fff8fd0 	.word	0x1fff8fd0
    62dc:	1fff8fe0 	.word	0x1fff8fe0

000062e0 <Gpt_GetTimeRemaining>:
*
* @pre           The driver needs to be initialized.
* @implements    Gpt_GetTimeRemaining_Activity
*/
Gpt_ValueType Gpt_GetTimeRemaining(Gpt_ChannelType channel)
{
    62e0:	b500      	push	{lr}
    62e2:	b089      	sub	sp, #36	; 0x24
    62e4:	4603      	mov	r3, r0
    62e6:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    62ea:	2300      	movs	r3, #0
    62ec:	f88d 3008 	strb.w	r3, [sp, #8]
    62f0:	2300      	movs	r3, #0
    62f2:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    62f4:	ab02      	add	r3, sp, #8
    62f6:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    62f8:	2300      	movs	r3, #0
    62fa:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    62fc:	2300      	movs	r3, #0
    62fe:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEREMAINING_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    6300:	4a33      	ldr	r2, [pc, #204]	; (63d0 <Gpt_GetTimeRemaining+0xf0>)
    6302:	9b05      	ldr	r3, [sp, #20]
    6304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6308:	691a      	ldr	r2, [r3, #16]
    630a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    630e:	5cd3      	ldrb	r3, [r2, r3]
    6310:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Calculate the remaining time from the elapsed time*/
        /* Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can
        change the logical channel state between the checking of logical channel state
        and timestamps retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    6314:	4a2e      	ldr	r2, [pc, #184]	; (63d0 <Gpt_GetTimeRemaining+0xf0>)
    6316:	9b05      	ldr	r3, [sp, #20]
    6318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    631c:	6859      	ldr	r1, [r3, #4]
    631e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    6322:	4613      	mov	r3, r2
    6324:	009b      	lsls	r3, r3, #2
    6326:	4413      	add	r3, r2
    6328:	009b      	lsls	r3, r3, #2
    632a:	440b      	add	r3, r1
    632c:	3310      	adds	r3, #16
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	9906      	ldr	r1, [sp, #24]
    6332:	4618      	mov	r0, r3
    6334:	f000 fae9 	bl	690a <Gpt_Ipw_GetTimeElapsed>
    6338:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    633a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    633e:	4925      	ldr	r1, [pc, #148]	; (63d4 <Gpt_GetTimeRemaining+0xf4>)
    6340:	9a05      	ldr	r2, [sp, #20]
    6342:	0052      	lsls	r2, r2, #1
    6344:	4413      	add	r3, r2
    6346:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    634a:	3b01      	subs	r3, #1
    634c:	2b03      	cmp	r3, #3
    634e:	d839      	bhi.n	63c4 <Gpt_GetTimeRemaining+0xe4>
    6350:	a201      	add	r2, pc, #4	; (adr r2, 6358 <Gpt_GetTimeRemaining+0x78>)
    6352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6356:	bf00      	nop
    6358:	000063a1 	.word	0x000063a1
    635c:	000063a7 	.word	0x000063a7
    6360:	000063bf 	.word	0x000063bf
    6364:	00006369 	.word	0x00006369
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already roll-over*/
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    6368:	f89d 3008 	ldrb.w	r3, [sp, #8]
    636c:	2b00      	cmp	r3, #0
    636e:	d012      	beq.n	6396 <Gpt_GetTimeRemaining+0xb6>
                   (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    6370:	4a17      	ldr	r2, [pc, #92]	; (63d0 <Gpt_GetTimeRemaining+0xf0>)
    6372:	9b05      	ldr	r3, [sp, #20]
    6374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6378:	6859      	ldr	r1, [r3, #4]
    637a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    637e:	4613      	mov	r3, r2
    6380:	009b      	lsls	r3, r3, #2
    6382:	4413      	add	r3, r2
    6384:	009b      	lsls	r3, r3, #2
    6386:	440b      	add	r3, r1
    6388:	330c      	adds	r3, #12
    638a:	681b      	ldr	r3, [r3, #0]
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    638c:	2b01      	cmp	r3, #1
    638e:	d102      	bne.n	6396 <Gpt_GetTimeRemaining+0xb6>
                  )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = 0U;
    6390:	2300      	movs	r3, #0
    6392:	9307      	str	r3, [sp, #28]
                {
                    /*Calculate remaining time from elapsed time*/
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
                }
            }
            break;
    6394:	e017      	b.n	63c6 <Gpt_GetTimeRemaining+0xe6>
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
    6396:	9a03      	ldr	r2, [sp, #12]
    6398:	9b07      	ldr	r3, [sp, #28]
    639a:	1ad3      	subs	r3, r2, r3
    639c:	9307      	str	r3, [sp, #28]
            break;
    639e:	e012      	b.n	63c6 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    63a0:	2300      	movs	r3, #0
    63a2:	9307      	str	r3, [sp, #28]
            }
            break;
    63a4:	e00f      	b.n	63c6 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_STOPPED:
            {
                returnValue = returnHwChannelInfo.uTargetTime-Gpt_aStopTime[coreID][channel];
    63a6:	9a03      	ldr	r2, [sp, #12]
    63a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63ac:	480a      	ldr	r0, [pc, #40]	; (63d8 <Gpt_GetTimeRemaining+0xf8>)
    63ae:	9905      	ldr	r1, [sp, #20]
    63b0:	0049      	lsls	r1, r1, #1
    63b2:	440b      	add	r3, r1
    63b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    63b8:	1ad3      	subs	r3, r2, r3
    63ba:	9307      	str	r3, [sp, #28]
            }
            break;
    63bc:	e003      	b.n	63c6 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = 0U;
    63be:	2300      	movs	r3, #0
    63c0:	9307      	str	r3, [sp, #28]
            }
            break;
    63c2:	e000      	b.n	63c6 <Gpt_GetTimeRemaining+0xe6>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    63c4:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    63c6:	9b07      	ldr	r3, [sp, #28]
}
    63c8:	4618      	mov	r0, r3
    63ca:	b009      	add	sp, #36	; 0x24
    63cc:	f85d fb04 	ldr.w	pc, [sp], #4
    63d0:	1fff8fcc 	.word	0x1fff8fcc
    63d4:	1fff8fd0 	.word	0x1fff8fd0
    63d8:	1fff8fe0 	.word	0x1fff8fe0

000063dc <Gpt_StartTimer>:
void Gpt_StartTimer
(
    Gpt_ChannelType channel,
    Gpt_ValueType value
)
{
    63dc:	b500      	push	{lr}
    63de:	b085      	sub	sp, #20
    63e0:	4603      	mov	r3, r0
    63e2:	9100      	str	r1, [sp, #0]
    63e4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    Std_ReturnType returnValue;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    63e8:	2300      	movs	r3, #0
    63ea:	9303      	str	r3, [sp, #12]

    if ((Std_ReturnType)E_OK == Gpt_ValidateChannelStatus(GPT_STARTTIMER_ID, channel, coreID))
    63ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63f0:	9a03      	ldr	r2, [sp, #12]
    63f2:	4619      	mov	r1, r3
    63f4:	2005      	movs	r0, #5
    63f6:	f7ff fda5 	bl	5f44 <Gpt_ValidateChannelStatus>
    63fa:	4603      	mov	r3, r0
    63fc:	2b00      	cmp	r3, #0
    63fe:	d153      	bne.n	64a8 <Gpt_StartTimer+0xcc>
    {
#if (GPT_VALIDATE_PARAM  == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateParamValue(GPT_STARTTIMER_ID, channel, value, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    6400:	4a2b      	ldr	r2, [pc, #172]	; (64b0 <Gpt_StartTimer+0xd4>)
    6402:	9b03      	ldr	r3, [sp, #12]
    6404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6408:	691a      	ldr	r2, [r3, #16]
    640a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    640e:	5cd3      	ldrb	r3, [r2, r3]
    6410:	f88d 300b 	strb.w	r3, [sp, #11]
            /*Enable hardware interrupts for the one-shot mode to set the status of  channel*/
            if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    6414:	4a26      	ldr	r2, [pc, #152]	; (64b0 <Gpt_StartTimer+0xd4>)
    6416:	9b03      	ldr	r3, [sp, #12]
    6418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    641c:	6859      	ldr	r1, [r3, #4]
    641e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    6422:	4613      	mov	r3, r2
    6424:	009b      	lsls	r3, r3, #2
    6426:	4413      	add	r3, r2
    6428:	009b      	lsls	r3, r3, #2
    642a:	440b      	add	r3, r1
    642c:	330c      	adds	r3, #12
    642e:	681b      	ldr	r3, [r3, #0]
    6430:	2b01      	cmp	r3, #1
    6432:	d110      	bne.n	6456 <Gpt_StartTimer+0x7a>
            {
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6434:	4a1e      	ldr	r2, [pc, #120]	; (64b0 <Gpt_StartTimer+0xd4>)
    6436:	9b03      	ldr	r3, [sp, #12]
    6438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    643c:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    643e:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6442:	4613      	mov	r3, r2
    6444:	009b      	lsls	r3, r3, #2
    6446:	4413      	add	r3, r2
    6448:	009b      	lsls	r3, r3, #2
    644a:	440b      	add	r3, r1
    644c:	3310      	adds	r3, #16
    644e:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    6450:	4618      	mov	r0, r3
    6452:	f000 fa85 	bl	6960 <Gpt_Ipw_EnableInterrupt>
                );
            }

            /* Change GPT channel status.Channel status change shall be made before to start
            the hardware in order to not change the channel status from EXPIRED to RUNNING*/
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_RUNNING;
    6456:	f89d 3007 	ldrb.w	r3, [sp, #7]
    645a:	4916      	ldr	r1, [pc, #88]	; (64b4 <Gpt_StartTimer+0xd8>)
    645c:	9a03      	ldr	r2, [sp, #12]
    645e:	0052      	lsls	r2, r2, #1
    6460:	4413      	add	r3, r2
    6462:	2204      	movs	r2, #4
    6464:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

            /* Call low level API */
            returnValue = Gpt_Ipw_StartTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig),value);
    6468:	4a11      	ldr	r2, [pc, #68]	; (64b0 <Gpt_StartTimer+0xd4>)
    646a:	9b03      	ldr	r3, [sp, #12]
    646c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6470:	6859      	ldr	r1, [r3, #4]
    6472:	f89d 200b 	ldrb.w	r2, [sp, #11]
    6476:	4613      	mov	r3, r2
    6478:	009b      	lsls	r3, r3, #2
    647a:	4413      	add	r3, r2
    647c:	009b      	lsls	r3, r3, #2
    647e:	440b      	add	r3, r1
    6480:	3310      	adds	r3, #16
    6482:	681b      	ldr	r3, [r3, #0]
    6484:	9900      	ldr	r1, [sp, #0]
    6486:	4618      	mov	r0, r3
    6488:	f000 fa20 	bl	68cc <Gpt_Ipw_StartTimer>
    648c:	4603      	mov	r3, r0
    648e:	f88d 300a 	strb.w	r3, [sp, #10]

            if((Std_ReturnType)E_OK != returnValue)
    6492:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6496:	2b00      	cmp	r3, #0
    6498:	d006      	beq.n	64a8 <Gpt_StartTimer+0xcc>
            {
                (void)Det_ReportRuntimeError\
    649a:	232b      	movs	r3, #43	; 0x2b
    649c:	2205      	movs	r2, #5
    649e:	2100      	movs	r1, #0
    64a0:	2064      	movs	r0, #100	; 0x64
    64a2:	f004 fcfb 	bl	ae9c <Det_ReportRuntimeError>
            }
#if (GPT_VALIDATE_PARAM  == STD_ON)
        }
#endif
    }
    return;
    64a6:	bf00      	nop
    64a8:	bf00      	nop
}
    64aa:	b005      	add	sp, #20
    64ac:	f85d fb04 	ldr.w	pc, [sp], #4
    64b0:	1fff8fcc 	.word	0x1fff8fcc
    64b4:	1fff8fd0 	.word	0x1fff8fd0

000064b8 <Gpt_StopTimer>:
*
* @pre          The driver needs to be initialized. Gpt_StartTimer must be called before.
* @implements   Gpt_StopTimer_Activity
*/
void Gpt_StopTimer(Gpt_ChannelType channel)
{
    64b8:	b500      	push	{lr}
    64ba:	b089      	sub	sp, #36	; 0x24
    64bc:	4603      	mov	r3, r0
    64be:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    64c2:	2300      	movs	r3, #0
    64c4:	f88d 3008 	strb.w	r3, [sp, #8]
    64c8:	2300      	movs	r3, #0
    64ca:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    64cc:	ab02      	add	r3, sp, #8
    64ce:	9307      	str	r3, [sp, #28]
    Gpt_ValueType uElapsedTime = 0U;
    64d0:	2300      	movs	r3, #0
    64d2:	9306      	str	r3, [sp, #24]
#endif
    Gpt_ChannelType ChannelIndex;

    uint32 coreID = (uint32)Gpt_GetCoreID();
    64d4:	2300      	movs	r3, #0
    64d6:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_STOPTIMER_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    64d8:	4a36      	ldr	r2, [pc, #216]	; (65b4 <Gpt_StopTimer+0xfc>)
    64da:	9b05      	ldr	r3, [sp, #20]
    64dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e0:	691a      	ldr	r2, [r3, #16]
    64e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64e6:	5cd3      	ldrb	r3, [r2, r3]
    64e8:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamps
        retrieval*/
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
        /* Get the elapsed  time  for later use by other API calls*/
        uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    64ec:	4a31      	ldr	r2, [pc, #196]	; (65b4 <Gpt_StopTimer+0xfc>)
    64ee:	9b05      	ldr	r3, [sp, #20]
    64f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64f4:	6859      	ldr	r1, [r3, #4]
    64f6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    64fa:	4613      	mov	r3, r2
    64fc:	009b      	lsls	r3, r3, #2
    64fe:	4413      	add	r3, r2
    6500:	009b      	lsls	r3, r3, #2
    6502:	440b      	add	r3, r1
    6504:	3310      	adds	r3, #16
    6506:	681b      	ldr	r3, [r3, #0]
    6508:	9907      	ldr	r1, [sp, #28]
    650a:	4618      	mov	r0, r3
    650c:	f000 f9fd 	bl	690a <Gpt_Ipw_GetTimeElapsed>
    6510:	9006      	str	r0, [sp, #24]
#endif

        /*Check the logical channel status*/
        if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6512:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6516:	4928      	ldr	r1, [pc, #160]	; (65b8 <Gpt_StopTimer+0x100>)
    6518:	9a05      	ldr	r2, [sp, #20]
    651a:	0052      	lsls	r2, r2, #1
    651c:	4413      	add	r3, r2
    651e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6522:	2b04      	cmp	r3, #4
    6524:	d141      	bne.n	65aa <Gpt_StopTimer+0xf2>
        {
            /* Call low level stop timer */
            Gpt_Ipw_StopTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    6526:	4a23      	ldr	r2, [pc, #140]	; (65b4 <Gpt_StopTimer+0xfc>)
    6528:	9b05      	ldr	r3, [sp, #20]
    652a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    652e:	6859      	ldr	r1, [r3, #4]
    6530:	f89d 2013 	ldrb.w	r2, [sp, #19]
    6534:	4613      	mov	r3, r2
    6536:	009b      	lsls	r3, r3, #2
    6538:	4413      	add	r3, r2
    653a:	009b      	lsls	r3, r3, #2
    653c:	440b      	add	r3, r1
    653e:	3310      	adds	r3, #16
    6540:	681b      	ldr	r3, [r3, #0]
    6542:	4618      	mov	r0, r3
    6544:	f000 f9f7 	bl	6936 <Gpt_Ipw_StopTimer>

            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    6548:	f89d 3008 	ldrb.w	r3, [sp, #8]
    654c:	2b00      	cmp	r3, #0
    654e:	d019      	beq.n	6584 <Gpt_StopTimer+0xcc>
                (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    6550:	4a18      	ldr	r2, [pc, #96]	; (65b4 <Gpt_StopTimer+0xfc>)
    6552:	9b05      	ldr	r3, [sp, #20]
    6554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6558:	6859      	ldr	r1, [r3, #4]
    655a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    655e:	4613      	mov	r3, r2
    6560:	009b      	lsls	r3, r3, #2
    6562:	4413      	add	r3, r2
    6564:	009b      	lsls	r3, r3, #2
    6566:	440b      	add	r3, r1
    6568:	330c      	adds	r3, #12
    656a:	681b      	ldr	r3, [r3, #0]
            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    656c:	2b01      	cmp	r3, #1
    656e:	d109      	bne.n	6584 <Gpt_StopTimer+0xcc>
            )
            {
                /*This action could be executed only when the function is called during a critical
                section implemented by disabling all interrupts*/
                /*Set channel status to EXPIRED*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    6570:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6574:	4910      	ldr	r1, [pc, #64]	; (65b8 <Gpt_StopTimer+0x100>)
    6576:	9a05      	ldr	r2, [sp, #20]
    6578:	0052      	lsls	r2, r2, #1
    657a:	4413      	add	r3, r2
    657c:	2203      	movs	r2, #3
    657e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    6582:	e011      	b.n	65a8 <Gpt_StopTimer+0xf0>
            }
            else
            {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /* Store the stopping time for later use by other API calls*/
                Gpt_aStopTime[coreID][channel] = uElapsedTime;
    6584:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6588:	490c      	ldr	r1, [pc, #48]	; (65bc <Gpt_StopTimer+0x104>)
    658a:	9a05      	ldr	r2, [sp, #20]
    658c:	0052      	lsls	r2, r2, #1
    658e:	4413      	add	r3, r2
    6590:	9a06      	ldr	r2, [sp, #24]
    6592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

                /* Set GPT channel status to stopped*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    6596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    659a:	4907      	ldr	r1, [pc, #28]	; (65b8 <Gpt_StopTimer+0x100>)
    659c:	9a05      	ldr	r2, [sp, #20]
    659e:	0052      	lsls	r2, r2, #1
    65a0:	4413      	add	r3, r2
    65a2:	2202      	movs	r2, #2
    65a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            }
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    65a8:	bf00      	nop
    65aa:	bf00      	nop
}
    65ac:	b009      	add	sp, #36	; 0x24
    65ae:	f85d fb04 	ldr.w	pc, [sp], #4
    65b2:	bf00      	nop
    65b4:	1fff8fcc 	.word	0x1fff8fcc
    65b8:	1fff8fd0 	.word	0x1fff8fd0
    65bc:	1fff8fe0 	.word	0x1fff8fe0

000065c0 <Gpt_EnableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_EnableNotification_Activity
*/
void Gpt_EnableNotification(Gpt_ChannelType channel)
{
    65c0:	b500      	push	{lr}
    65c2:	b085      	sub	sp, #20
    65c4:	4603      	mov	r3, r0
    65c6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    65ca:	2300      	movs	r3, #0
    65cc:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_ENABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    65ce:	4a18      	ldr	r2, [pc, #96]	; (6630 <Gpt_EnableNotification+0x70>)
    65d0:	9b03      	ldr	r3, [sp, #12]
    65d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65d6:	691a      	ldr	r2, [r3, #16]
    65d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65dc:	5cd3      	ldrb	r3, [r2, r3]
    65de:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = TRUE;
    65e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65e6:	4913      	ldr	r1, [pc, #76]	; (6634 <Gpt_EnableNotification+0x74>)
    65e8:	9a03      	ldr	r2, [sp, #12]
    65ea:	0052      	lsls	r2, r2, #1
    65ec:	4413      	add	r3, r2
    65ee:	00db      	lsls	r3, r3, #3
    65f0:	440b      	add	r3, r1
    65f2:	2201      	movs	r2, #1
    65f4:	711a      	strb	r2, [r3, #4]

            if (GPT_MODE_NORMAL == Gpt_eMode[coreID])
    65f6:	4a10      	ldr	r2, [pc, #64]	; (6638 <Gpt_EnableNotification+0x78>)
    65f8:	9b03      	ldr	r3, [sp, #12]
    65fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65fe:	2b00      	cmp	r3, #0
    6600:	d111      	bne.n	6626 <Gpt_EnableNotification+0x66>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6602:	4a0b      	ldr	r2, [pc, #44]	; (6630 <Gpt_EnableNotification+0x70>)
    6604:	9b03      	ldr	r3, [sp, #12]
    6606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    660a:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    660c:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6610:	4613      	mov	r3, r2
    6612:	009b      	lsls	r3, r3, #2
    6614:	4413      	add	r3, r2
    6616:	009b      	lsls	r3, r3, #2
    6618:	440b      	add	r3, r1
    661a:	3310      	adds	r3, #16
    661c:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    661e:	4618      	mov	r0, r3
    6620:	f000 f99e 	bl	6960 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return;
    6624:	bf00      	nop
    6626:	bf00      	nop
}
    6628:	b005      	add	sp, #20
    662a:	f85d fb04 	ldr.w	pc, [sp], #4
    662e:	bf00      	nop
    6630:	1fff8fcc 	.word	0x1fff8fcc
    6634:	1fff8fd0 	.word	0x1fff8fd0
    6638:	1fff8fc8 	.word	0x1fff8fc8

0000663c <Gpt_DisableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableNotification_Activity
*/
void Gpt_DisableNotification(Gpt_ChannelType channel)
{
    663c:	b500      	push	{lr}
    663e:	b085      	sub	sp, #20
    6640:	4603      	mov	r3, r0
    6642:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    6646:	2300      	movs	r3, #0
    6648:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_DISABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    664a:	4a25      	ldr	r2, [pc, #148]	; (66e0 <Gpt_DisableNotification+0xa4>)
    664c:	9b03      	ldr	r3, [sp, #12]
    664e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6652:	691a      	ldr	r2, [r3, #16]
    6654:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6658:	5cd3      	ldrb	r3, [r2, r3]
    665a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    665e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6662:	4920      	ldr	r1, [pc, #128]	; (66e4 <Gpt_DisableNotification+0xa8>)
    6664:	9a03      	ldr	r2, [sp, #12]
    6666:	0052      	lsls	r2, r2, #1
    6668:	4413      	add	r3, r2
    666a:	00db      	lsls	r3, r3, #3
    666c:	440b      	add	r3, r1
    666e:	2200      	movs	r2, #0
    6670:	711a      	strb	r2, [r3, #4]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    6672:	4a1d      	ldr	r2, [pc, #116]	; (66e8 <Gpt_DisableNotification+0xac>)
    6674:	9b03      	ldr	r3, [sp, #12]
    6676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    667a:	2b00      	cmp	r3, #0
    667c:	d12b      	bne.n	66d6 <Gpt_DisableNotification+0x9a>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode) \
    667e:	4a18      	ldr	r2, [pc, #96]	; (66e0 <Gpt_DisableNotification+0xa4>)
    6680:	9b03      	ldr	r3, [sp, #12]
    6682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6686:	6859      	ldr	r1, [r3, #4]
    6688:	f89d 200b 	ldrb.w	r2, [sp, #11]
    668c:	4613      	mov	r3, r2
    668e:	009b      	lsls	r3, r3, #2
    6690:	4413      	add	r3, r2
    6692:	009b      	lsls	r3, r3, #2
    6694:	440b      	add	r3, r1
    6696:	330c      	adds	r3, #12
    6698:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    669a:	2b00      	cmp	r3, #0
    669c:	d009      	beq.n	66b2 <Gpt_DisableNotification+0x76>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    669e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66a2:	4910      	ldr	r1, [pc, #64]	; (66e4 <Gpt_DisableNotification+0xa8>)
    66a4:	9a03      	ldr	r2, [sp, #12]
    66a6:	0052      	lsls	r2, r2, #1
    66a8:	4413      	add	r3, r2
    66aa:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    66ae:	2b04      	cmp	r3, #4
    66b0:	d011      	beq.n	66d6 <Gpt_DisableNotification+0x9a>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    66b2:	4a0b      	ldr	r2, [pc, #44]	; (66e0 <Gpt_DisableNotification+0xa4>)
    66b4:	9b03      	ldr	r3, [sp, #12]
    66b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ba:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    66bc:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    66c0:	4613      	mov	r3, r2
    66c2:	009b      	lsls	r3, r3, #2
    66c4:	4413      	add	r3, r2
    66c6:	009b      	lsls	r3, r3, #2
    66c8:	440b      	add	r3, r1
    66ca:	3310      	adds	r3, #16
    66cc:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    66ce:	4618      	mov	r0, r3
    66d0:	f000 f961 	bl	6996 <Gpt_Ipw_DisableInterrupt>
        }
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    66d4:	bf00      	nop
    66d6:	bf00      	nop
}
    66d8:	b005      	add	sp, #20
    66da:	f85d fb04 	ldr.w	pc, [sp], #4
    66de:	bf00      	nop
    66e0:	1fff8fcc 	.word	0x1fff8fcc
    66e4:	1fff8fd0 	.word	0x1fff8fd0
    66e8:	1fff8fc8 	.word	0x1fff8fc8

000066ec <Gpt_ProcessCommonInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Gpt_ProcessCommonInterrupt_Activity
*/
void Gpt_ProcessCommonInterrupt(uint8 channel)
{
    66ec:	b500      	push	{lr}
    66ee:	b085      	sub	sp, #20
    66f0:	4603      	mov	r3, r0
    66f2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    66f6:	2300      	movs	r3, #0
    66f8:	9303      	str	r3, [sp, #12]

    if (Gpt_pConfig[coreID] != NULL_PTR)
    66fa:	4a27      	ldr	r2, [pc, #156]	; (6798 <Gpt_ProcessCommonInterrupt+0xac>)
    66fc:	9b03      	ldr	r3, [sp, #12]
    66fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6702:	2b00      	cmp	r3, #0
    6704:	d043      	beq.n	678e <Gpt_ProcessCommonInterrupt+0xa2>
    {
        /* Extract the logical channel from the hardware to logic map table */
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    6706:	4a24      	ldr	r2, [pc, #144]	; (6798 <Gpt_ProcessCommonInterrupt+0xac>)
    6708:	9b03      	ldr	r3, [sp, #12]
    670a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    670e:	691a      	ldr	r2, [r3, #16]
    6710:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6714:	5cd3      	ldrb	r3, [r2, r3]
    6716:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Change the channel status for one-shot mode */
        if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    671a:	4a1f      	ldr	r2, [pc, #124]	; (6798 <Gpt_ProcessCommonInterrupt+0xac>)
    671c:	9b03      	ldr	r3, [sp, #12]
    671e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6722:	6859      	ldr	r1, [r3, #4]
    6724:	f89d 200b 	ldrb.w	r2, [sp, #11]
    6728:	4613      	mov	r3, r2
    672a:	009b      	lsls	r3, r3, #2
    672c:	4413      	add	r3, r2
    672e:	009b      	lsls	r3, r3, #2
    6730:	440b      	add	r3, r1
    6732:	330c      	adds	r3, #12
    6734:	681b      	ldr	r3, [r3, #0]
    6736:	2b01      	cmp	r3, #1
    6738:	d108      	bne.n	674c <Gpt_ProcessCommonInterrupt+0x60>
        {
            /* Change the channel status to expired */
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    673a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    673e:	4917      	ldr	r1, [pc, #92]	; (679c <Gpt_ProcessCommonInterrupt+0xb0>)
    6740:	9a03      	ldr	r2, [sp, #12]
    6742:	0052      	lsls	r2, r2, #1
    6744:	4413      	add	r3, r2
    6746:	2203      	movs	r2, #3
    6748:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        }
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
        if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled))
    674c:	4a14      	ldr	r2, [pc, #80]	; (67a0 <Gpt_ProcessCommonInterrupt+0xb4>)
    674e:	9b03      	ldr	r3, [sp, #12]
    6750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6754:	2b00      	cmp	r3, #0
    6756:	d11a      	bne.n	678e <Gpt_ProcessCommonInterrupt+0xa2>
    6758:	f89d 3007 	ldrb.w	r3, [sp, #7]
    675c:	490f      	ldr	r1, [pc, #60]	; (679c <Gpt_ProcessCommonInterrupt+0xb0>)
    675e:	9a03      	ldr	r2, [sp, #12]
    6760:	0052      	lsls	r2, r2, #1
    6762:	4413      	add	r3, r2
    6764:	00db      	lsls	r3, r3, #3
    6766:	440b      	add	r3, r1
    6768:	791b      	ldrb	r3, [r3, #4]
    676a:	2b00      	cmp	r3, #0
    676c:	d00f      	beq.n	678e <Gpt_ProcessCommonInterrupt+0xa2>
        {
            (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_pfNotification();
    676e:	4a0a      	ldr	r2, [pc, #40]	; (6798 <Gpt_ProcessCommonInterrupt+0xac>)
    6770:	9b03      	ldr	r3, [sp, #12]
    6772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6776:	6859      	ldr	r1, [r3, #4]
    6778:	f89d 200b 	ldrb.w	r2, [sp, #11]
    677c:	4613      	mov	r3, r2
    677e:	009b      	lsls	r3, r3, #2
    6780:	4413      	add	r3, r2
    6782:	009b      	lsls	r3, r3, #2
    6784:	440b      	add	r3, r1
    6786:	3304      	adds	r3, #4
    6788:	681b      	ldr	r3, [r3, #0]
    678a:	4798      	blx	r3
            EcuM_CheckWakeup((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource);
        }
#endif
#endif
    }
    return;
    678c:	bf00      	nop
    678e:	bf00      	nop
}
    6790:	b005      	add	sp, #20
    6792:	f85d fb04 	ldr.w	pc, [sp], #4
    6796:	bf00      	nop
    6798:	1fff8fcc 	.word	0x1fff8fcc
    679c:	1fff8fd0 	.word	0x1fff8fd0
    67a0:	1fff8fc8 	.word	0x1fff8fc8

000067a4 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
{
    67a4:	b082      	sub	sp, #8
    67a6:	4603      	mov	r3, r0
    67a8:	460a      	mov	r2, r1
    67aa:	f88d 3007 	strb.w	r3, [sp, #7]
    67ae:	4613      	mov	r3, r2
    67b0:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    67b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67b8:	4a09      	ldr	r2, [pc, #36]	; (67e0 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    67ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    67be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67c2:	3301      	adds	r3, #1
    67c4:	00db      	lsls	r3, r3, #3
    67c6:	4413      	add	r3, r2
    67c8:	685b      	ldr	r3, [r3, #4]
    67ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    67ce:	2b00      	cmp	r3, #0
    67d0:	bf14      	ite	ne
    67d2:	2301      	movne	r3, #1
    67d4:	2300      	moveq	r3, #0
    67d6:	b2db      	uxtb	r3, r3
}
    67d8:	4618      	mov	r0, r3
    67da:	b002      	add	sp, #8
    67dc:	4770      	bx	lr
    67de:	bf00      	nop
    67e0:	0000b710 	.word	0x0000b710

000067e4 <Ftm_Gpt_Ip_GetCntValue>:
{
    67e4:	b082      	sub	sp, #8
    67e6:	4603      	mov	r3, r0
    67e8:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    67ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67f0:	4a03      	ldr	r2, [pc, #12]	; (6800 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    67f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f6:	685b      	ldr	r3, [r3, #4]
}
    67f8:	4618      	mov	r0, r3
    67fa:	b002      	add	sp, #8
    67fc:	4770      	bx	lr
    67fe:	bf00      	nop
    6800:	0000b710 	.word	0x0000b710

00006804 <Ftm_Gpt_Ip_GetCompareValue>:
{
    6804:	b082      	sub	sp, #8
    6806:	4603      	mov	r3, r0
    6808:	460a      	mov	r2, r1
    680a:	f88d 3007 	strb.w	r3, [sp, #7]
    680e:	4613      	mov	r3, r2
    6810:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    6814:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6818:	4a05      	ldr	r2, [pc, #20]	; (6830 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    681a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    681e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6822:	3301      	adds	r3, #1
    6824:	00db      	lsls	r3, r3, #3
    6826:	4413      	add	r3, r2
    6828:	689b      	ldr	r3, [r3, #8]
}
    682a:	4618      	mov	r0, r3
    682c:	b002      	add	sp, #8
    682e:	4770      	bx	lr
    6830:	0000b710 	.word	0x0000b710

00006834 <Gpt_Ipw_InitInstances>:
*
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_InitInstances(const Gpt_ConfigType * configPtr)
{
    6834:	b500      	push	{lr}
    6836:	b085      	sub	sp, #20
    6838:	9001      	str	r0, [sp, #4]

    uint8 index = 0U;
    683a:	2300      	movs	r3, #0
    683c:	f88d 300f 	strb.w	r3, [sp, #15]

    for(index = 0; index < configPtr->instanceCount; index++)
    6840:	2300      	movs	r3, #0
    6842:	f88d 300f 	strb.w	r3, [sp, #15]
    6846:	e022      	b.n	688e <Gpt_Ipw_InitInstances+0x5a>
    {
        switch((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instanceType)
    6848:	9b01      	ldr	r3, [sp, #4]
    684a:	68da      	ldr	r2, [r3, #12]
    684c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6850:	011b      	lsls	r3, r3, #4
    6852:	4413      	add	r3, r2
    6854:	681b      	ldr	r3, [r3, #0]
    6856:	2b00      	cmp	r3, #0
    6858:	d113      	bne.n	6882 <Gpt_Ipw_InitInstances+0x4e>
        {
#if (FTM_GPT_IP_USED == STD_ON)
            case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	68da      	ldr	r2, [r3, #12]
    685e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6862:	011b      	lsls	r3, r3, #4
    6864:	4413      	add	r3, r2
    6866:	3304      	adds	r3, #4
    6868:	7818      	ldrb	r0, [r3, #0]
                                (*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig);
    686a:	9b01      	ldr	r3, [sp, #4]
    686c:	68da      	ldr	r2, [r3, #12]
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    686e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6872:	011b      	lsls	r3, r3, #4
    6874:	4413      	add	r3, r2
    6876:	3308      	adds	r3, #8
    6878:	681b      	ldr	r3, [r3, #0]
    687a:	4619      	mov	r1, r3
    687c:	f7ff f954 	bl	5b28 <Ftm_Gpt_Ip_Init>
            }
            break;
    6880:	e000      	b.n	6884 <Gpt_Ipw_InitInstances+0x50>
            break;
#endif

            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
    6882:	bf00      	nop
    for(index = 0; index < configPtr->instanceCount; index++)
    6884:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6888:	3301      	adds	r3, #1
    688a:	f88d 300f 	strb.w	r3, [sp, #15]
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	7a1b      	ldrb	r3, [r3, #8]
    6892:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6896:	429a      	cmp	r2, r3
    6898:	d3d6      	bcc.n	6848 <Gpt_Ipw_InitInstances+0x14>
        }
    }
    return;
    689a:	bf00      	nop
}
    689c:	b005      	add	sp, #20
    689e:	f85d fb04 	ldr.w	pc, [sp], #4

000068a2 <Gpt_Ipw_Init>:
* @param[in]    pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_Init(const Gpt_Ipw_HwChannelConfigType *pHwChannelConfig)
{
    68a2:	b500      	push	{lr}
    68a4:	b083      	sub	sp, #12
    68a6:	9001      	str	r0, [sp, #4]

    switch(pHwChannelConfig->instanceType)
    68a8:	9b01      	ldr	r3, [sp, #4]
    68aa:	681b      	ldr	r3, [r3, #0]
    68ac:	2b00      	cmp	r3, #0
    68ae:	d108      	bne.n	68c2 <Gpt_Ipw_Init+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            Ftm_Gpt_Ip_InitChannel(pHwChannelConfig->instance,
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	791a      	ldrb	r2, [r3, #4]
    68b4:	9b01      	ldr	r3, [sp, #4]
    68b6:	689b      	ldr	r3, [r3, #8]
    68b8:	4619      	mov	r1, r3
    68ba:	4610      	mov	r0, r2
    68bc:	f7ff f976 	bl	5bac <Ftm_Gpt_Ip_InitChannel>
                                   pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig);
        }
        break;
    68c0:	e000      	b.n	68c4 <Gpt_Ipw_Init+0x22>
        }
            break;
#endif
        default:
            /* This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    68c2:	bf00      	nop
    }
    return;
    68c4:	bf00      	nop
}
    68c6:	b003      	add	sp, #12
    68c8:	f85d fb04 	ldr.w	pc, [sp], #4

000068cc <Gpt_Ipw_StartTimer>:
* @param[in]     uValue              Timeout period (in ticks) after which a notification shall occur (if enabled).
* @return        void
* @pre           The driver needs to be initialized.Call Gpt_StartTimer before.
*/
Std_ReturnType Gpt_Ipw_StartTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
    68cc:	b500      	push	{lr}
    68ce:	b085      	sub	sp, #20
    68d0:	9001      	str	r0, [sp, #4]
    68d2:	9100      	str	r1, [sp, #0]

    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    68d4:	2301      	movs	r3, #1
    68d6:	f88d 300f 	strb.w	r3, [sp, #15]

    switch(pHwChannelConfig->instanceType)
    68da:	9b01      	ldr	r3, [sp, #4]
    68dc:	681b      	ldr	r3, [r3, #0]
    68de:	2b00      	cmp	r3, #0
    68e0:	d10c      	bne.n	68fc <Gpt_Ipw_StartTimer+0x30>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_StartCounting(pHwChannelConfig->instance,
    68e2:	9b01      	ldr	r3, [sp, #4]
    68e4:	7918      	ldrb	r0, [r3, #4]
    68e6:	9b01      	ldr	r3, [sp, #4]
    68e8:	795b      	ldrb	r3, [r3, #5]
    68ea:	9a00      	ldr	r2, [sp, #0]
    68ec:	b292      	uxth	r2, r2
    68ee:	4619      	mov	r1, r3
    68f0:	f7ff fa0c 	bl	5d0c <Ftm_Gpt_Ip_StartCounting>
                                         pHwChannelConfig->channel,
                                         (uint16)uValue);
                returnValue = (Std_ReturnType)E_OK;
    68f4:	2300      	movs	r3, #0
    68f6:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        break;
    68fa:	e000      	b.n	68fe <Gpt_Ipw_StartTimer+0x32>
            }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    68fc:	bf00      	nop
    }

    return returnValue;
    68fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6902:	4618      	mov	r0, r3
    6904:	b005      	add	sp, #20
    6906:	f85d fb04 	ldr.w	pc, [sp], #4

0000690a <Gpt_Ipw_GetTimeElapsed>:
* @pre           The driver needs to be initialized.Call GetTimeElapsed before.
*
*/
Gpt_ValueType Gpt_Ipw_GetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig,
                                                      Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
    690a:	b500      	push	{lr}
    690c:	b085      	sub	sp, #20
    690e:	9001      	str	r0, [sp, #4]
    6910:	9100      	str	r1, [sp, #0]
    uint32 returnValue;

    switch(pHwChannelConfig->instanceType)
    6912:	9b01      	ldr	r3, [sp, #4]
    6914:	681b      	ldr	r3, [r3, #0]
    6916:	2b00      	cmp	r3, #0
    6918:	d105      	bne.n	6926 <Gpt_Ipw_GetTimeElapsed+0x1c>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            returnValue = Gpt_Ipw_FtmGetTimeElapsed(pHwChannelConfig, pReturnHwChannelInfo);
    691a:	9900      	ldr	r1, [sp, #0]
    691c:	9801      	ldr	r0, [sp, #4]
    691e:	f7f9 ffd1 	bl	8c4 <Gpt_Ipw_FtmGetTimeElapsed>
    6922:	9003      	str	r0, [sp, #12]
        }
        break;
    6924:	e002      	b.n	692c <Gpt_Ipw_GetTimeElapsed+0x22>
        break;
#endif

        default:
             /* This switch branch is empty because it shall not be executed for normal behaviour */
             returnValue = 0U;
    6926:	2300      	movs	r3, #0
    6928:	9303      	str	r3, [sp, #12]
        break;
    692a:	bf00      	nop
    }
    return (Gpt_ValueType)returnValue;
    692c:	9b03      	ldr	r3, [sp, #12]
}
    692e:	4618      	mov	r0, r3
    6930:	b005      	add	sp, #20
    6932:	f85d fb04 	ldr.w	pc, [sp], #4

00006936 <Gpt_Ipw_StopTimer>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.Call StopTimer before.
*/
void Gpt_Ipw_StopTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    6936:	b500      	push	{lr}
    6938:	b083      	sub	sp, #12
    693a:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	2b00      	cmp	r3, #0
    6942:	d108      	bne.n	6956 <Gpt_Ipw_StopTimer+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {

            Ftm_Gpt_Ip_DisableChannelInterrupt(pHwChannelConfig->instance,
    6944:	9b01      	ldr	r3, [sp, #4]
    6946:	791a      	ldrb	r2, [r3, #4]
    6948:	9b01      	ldr	r3, [sp, #4]
    694a:	795b      	ldrb	r3, [r3, #5]
    694c:	4619      	mov	r1, r3
    694e:	4610      	mov	r0, r2
    6950:	f7ff fa86 	bl	5e60 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                                               pHwChannelConfig->channel);
        }
        break;
    6954:	e000      	b.n	6958 <Gpt_Ipw_StopTimer+0x22>
        }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    6956:	bf00      	nop
    }

    return;
    6958:	bf00      	nop
}
    695a:	b003      	add	sp, #12
    695c:	f85d fb04 	ldr.w	pc, [sp], #4

00006960 <Gpt_Ipw_EnableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.
*/
void Gpt_Ipw_EnableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    6960:	b082      	sub	sp, #8
    6962:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    6964:	9b01      	ldr	r3, [sp, #4]
    6966:	681b      	ldr	r3, [r3, #0]
    6968:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    696a:	bf00      	nop
    }

    return;
    696c:	bf00      	nop
}
    696e:	b002      	add	sp, #8
    6970:	4770      	bx	lr

00006972 <Gpt_Ipw_DeInit>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized. On/Off by the configuration parameter: GPT_DEINIT_API
*/
void Gpt_Ipw_DeInit(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    6972:	b500      	push	{lr}
    6974:	b083      	sub	sp, #12
    6976:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    6978:	9b01      	ldr	r3, [sp, #4]
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	2b00      	cmp	r3, #0
    697e:	d105      	bne.n	698c <Gpt_Ipw_DeInit+0x1a>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
           Ftm_Gpt_Ip_Deinit(pHwChannelConfig->instance);
    6980:	9b01      	ldr	r3, [sp, #4]
    6982:	791b      	ldrb	r3, [r3, #4]
    6984:	4618      	mov	r0, r3
    6986:	f7ff f975 	bl	5c74 <Ftm_Gpt_Ip_Deinit>
        }
        break;
    698a:	e000      	b.n	698e <Gpt_Ipw_DeInit+0x1c>
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    698c:	bf00      	nop
    }
    return;
    698e:	bf00      	nop
}
    6990:	b003      	add	sp, #12
    6992:	f85d fb04 	ldr.w	pc, [sp], #4

00006996 <Gpt_Ipw_DisableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.On/Off by the configuration parameter: GPT_ENABLE_DISABLE_NOTIFICATION_API
*/
void Gpt_Ipw_DisableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    6996:	b082      	sub	sp, #8
    6998:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    699a:	9b01      	ldr	r3, [sp, #4]
    699c:	681b      	ldr	r3, [r3, #0]
    699e:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    69a0:	bf00      	nop
    }

    return;
    69a2:	bf00      	nop
}
    69a4:	b002      	add	sp, #8
    69a6:	4770      	bx	lr

000069a8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    69a8:	b500      	push	{lr}
    69aa:	b085      	sub	sp, #20
    69ac:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    69ae:	9b01      	ldr	r3, [sp, #4]
    69b0:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    69b2:	9803      	ldr	r0, [sp, #12]
    69b4:	f000 fbc8 	bl	7148 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    69b8:	4a03      	ldr	r2, [pc, #12]	; (69c8 <Port_Init+0x20>)
    69ba:	9b03      	ldr	r3, [sp, #12]
    69bc:	6013      	str	r3, [r2, #0]
        }
    }
}
    69be:	bf00      	nop
    69c0:	b005      	add	sp, #20
    69c2:	f85d fb04 	ldr.w	pc, [sp], #4
    69c6:	bf00      	nop
    69c8:	1fff8fe8 	.word	0x1fff8fe8

000069cc <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    69cc:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    69ce:	4b03      	ldr	r3, [pc, #12]	; (69dc <Port_RefreshPortDirection+0x10>)
    69d0:	681b      	ldr	r3, [r3, #0]
    69d2:	4618      	mov	r0, r3
    69d4:	f000 fc10 	bl	71f8 <Port_Ipw_RefreshPortDirection>
    }
}
    69d8:	bf00      	nop
    69da:	bd08      	pop	{r3, pc}
    69dc:	1fff8fe8 	.word	0x1fff8fe8

000069e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    69e0:	b086      	sub	sp, #24
    69e2:	9003      	str	r0, [sp, #12]
    69e4:	9102      	str	r1, [sp, #8]
    69e6:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    69e8:	23ff      	movs	r3, #255	; 0xff
    69ea:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    69ec:	9b03      	ldr	r3, [sp, #12]
    69ee:	4a39      	ldr	r2, [pc, #228]	; (6ad4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    69f0:	4293      	cmp	r3, r2
    69f2:	d151      	bne.n	6a98 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    69f4:	9b02      	ldr	r3, [sp, #8]
    69f6:	2b10      	cmp	r3, #16
    69f8:	d867      	bhi.n	6aca <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    69fa:	a201      	add	r2, pc, #4	; (adr r2, 6a00 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    69fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6a00:	00006a45 	.word	0x00006a45
    6a04:	00006a53 	.word	0x00006a53
    6a08:	00006acb 	.word	0x00006acb
    6a0c:	00006acb 	.word	0x00006acb
    6a10:	00006acb 	.word	0x00006acb
    6a14:	00006acb 	.word	0x00006acb
    6a18:	00006acb 	.word	0x00006acb
    6a1c:	00006acb 	.word	0x00006acb
    6a20:	00006acb 	.word	0x00006acb
    6a24:	00006acb 	.word	0x00006acb
    6a28:	00006acb 	.word	0x00006acb
    6a2c:	00006acb 	.word	0x00006acb
    6a30:	00006acb 	.word	0x00006acb
    6a34:	00006a61 	.word	0x00006a61
    6a38:	00006a6f 	.word	0x00006a6f
    6a3c:	00006a7d 	.word	0x00006a7d
    6a40:	00006a8b 	.word	0x00006a8b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6a44:	2301      	movs	r3, #1
    6a46:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6a48:	9a05      	ldr	r2, [sp, #20]
    6a4a:	9b01      	ldr	r3, [sp, #4]
    6a4c:	4313      	orrs	r3, r2
    6a4e:	9305      	str	r3, [sp, #20]
                break;
    6a50:	e03c      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6a52:	2302      	movs	r3, #2
    6a54:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6a56:	9a05      	ldr	r2, [sp, #20]
    6a58:	9b01      	ldr	r3, [sp, #4]
    6a5a:	4313      	orrs	r3, r2
    6a5c:	9305      	str	r3, [sp, #20]
                break;
    6a5e:	e035      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6a60:	2304      	movs	r3, #4
    6a62:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6a64:	9a05      	ldr	r2, [sp, #20]
    6a66:	9b01      	ldr	r3, [sp, #4]
    6a68:	4313      	orrs	r3, r2
    6a6a:	9305      	str	r3, [sp, #20]
                break;
    6a6c:	e02e      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6a6e:	2308      	movs	r3, #8
    6a70:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6a72:	9a05      	ldr	r2, [sp, #20]
    6a74:	9b01      	ldr	r3, [sp, #4]
    6a76:	4313      	orrs	r3, r2
    6a78:	9305      	str	r3, [sp, #20]
                break;
    6a7a:	e027      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6a7c:	230e      	movs	r3, #14
    6a7e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6a80:	9a05      	ldr	r2, [sp, #20]
    6a82:	9b01      	ldr	r3, [sp, #4]
    6a84:	4013      	ands	r3, r2
    6a86:	9305      	str	r3, [sp, #20]
                break;
    6a88:	e020      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    6a8a:	230d      	movs	r3, #13
    6a8c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6a8e:	9a05      	ldr	r2, [sp, #20]
    6a90:	9b01      	ldr	r3, [sp, #4]
    6a92:	4013      	ands	r3, r2
    6a94:	9305      	str	r3, [sp, #20]
                break;
    6a96:	e019      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6a98:	9b03      	ldr	r3, [sp, #12]
    6a9a:	4a0f      	ldr	r2, [pc, #60]	; (6ad8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6a9c:	4293      	cmp	r3, r2
    6a9e:	d115      	bne.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6aa0:	9b02      	ldr	r3, [sp, #8]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d003      	beq.n	6aae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6aa6:	9b02      	ldr	r3, [sp, #8]
    6aa8:	2b01      	cmp	r3, #1
    6aaa:	d007      	beq.n	6abc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6aac:	e00e      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6aae:	230b      	movs	r3, #11
    6ab0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6ab2:	9a05      	ldr	r2, [sp, #20]
    6ab4:	9b01      	ldr	r3, [sp, #4]
    6ab6:	4013      	ands	r3, r2
    6ab8:	9305      	str	r3, [sp, #20]
                break;
    6aba:	e007      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6abc:	2307      	movs	r3, #7
    6abe:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6ac0:	9a05      	ldr	r2, [sp, #20]
    6ac2:	9b01      	ldr	r3, [sp, #4]
    6ac4:	4013      	ands	r3, r2
    6ac6:	9305      	str	r3, [sp, #20]
                break;
    6ac8:	e000      	b.n	6acc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6aca:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6acc:	9b05      	ldr	r3, [sp, #20]
}
    6ace:	4618      	mov	r0, r3
    6ad0:	b006      	add	sp, #24
    6ad2:	4770      	bx	lr
    6ad4:	4004a000 	.word	0x4004a000
    6ad8:	4004b000 	.word	0x4004b000

00006adc <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6adc:	b500      	push	{lr}
    6ade:	b089      	sub	sp, #36	; 0x24
    6ae0:	9003      	str	r0, [sp, #12]
    6ae2:	9102      	str	r1, [sp, #8]
    6ae4:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6ae6:	9b01      	ldr	r3, [sp, #4]
    6ae8:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6aea:	9b01      	ldr	r3, [sp, #4]
    6aec:	2b08      	cmp	r3, #8
    6aee:	d121      	bne.n	6b34 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6af0:	4b13      	ldr	r3, [pc, #76]	; (6b40 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6af2:	685b      	ldr	r3, [r3, #4]
    6af4:	f003 030f 	and.w	r3, r3, #15
    6af8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6afa:	9a06      	ldr	r2, [sp, #24]
    6afc:	9902      	ldr	r1, [sp, #8]
    6afe:	9803      	ldr	r0, [sp, #12]
    6b00:	f7ff ff6e 	bl	69e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6b04:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6b06:	9b05      	ldr	r3, [sp, #20]
    6b08:	2bff      	cmp	r3, #255	; 0xff
    6b0a:	d011      	beq.n	6b30 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6b0c:	f003 fa2c 	bl	9f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6b10:	4b0b      	ldr	r3, [pc, #44]	; (6b40 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6b12:	685b      	ldr	r3, [r3, #4]
    6b14:	4a0a      	ldr	r2, [pc, #40]	; (6b40 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6b16:	f023 030f 	bic.w	r3, r3, #15
    6b1a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6b1c:	4b08      	ldr	r3, [pc, #32]	; (6b40 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6b1e:	685a      	ldr	r2, [r3, #4]
    6b20:	9b05      	ldr	r3, [sp, #20]
    6b22:	f003 030f 	and.w	r3, r3, #15
    6b26:	4906      	ldr	r1, [pc, #24]	; (6b40 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6b28:	4313      	orrs	r3, r2
    6b2a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6b2c:	f003 fa48 	bl	9fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6b30:	2300      	movs	r3, #0
    6b32:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6b34:	9b07      	ldr	r3, [sp, #28]
}
    6b36:	4618      	mov	r0, r3
    6b38:	b009      	add	sp, #36	; 0x24
    6b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    6b3e:	bf00      	nop
    6b40:	40048000 	.word	0x40048000

00006b44 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6b44:	b500      	push	{lr}
    6b46:	b087      	sub	sp, #28
    6b48:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6b4a:	2300      	movs	r3, #0
    6b4c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6b4e:	2300      	movs	r3, #0
    6b50:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6b52:	2300      	movs	r3, #0
    6b54:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6b56:	9b01      	ldr	r3, [sp, #4]
    6b58:	68db      	ldr	r3, [r3, #12]
    6b5a:	2b02      	cmp	r3, #2
    6b5c:	d00a      	beq.n	6b74 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6b5e:	9b05      	ldr	r3, [sp, #20]
    6b60:	f043 0302 	orr.w	r3, r3, #2
    6b64:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6b66:	9b01      	ldr	r3, [sp, #4]
    6b68:	68db      	ldr	r3, [r3, #12]
    6b6a:	f003 0301 	and.w	r3, r3, #1
    6b6e:	9a05      	ldr	r2, [sp, #20]
    6b70:	4313      	orrs	r3, r2
    6b72:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6b74:	9b01      	ldr	r3, [sp, #4]
    6b76:	699b      	ldr	r3, [r3, #24]
    6b78:	019b      	lsls	r3, r3, #6
    6b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6b7e:	9a05      	ldr	r2, [sp, #20]
    6b80:	4313      	orrs	r3, r2
    6b82:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6b84:	9b01      	ldr	r3, [sp, #4]
    6b86:	6a1b      	ldr	r3, [r3, #32]
    6b88:	03db      	lsls	r3, r3, #15
    6b8a:	b29b      	uxth	r3, r3
    6b8c:	9a05      	ldr	r2, [sp, #20]
    6b8e:	4313      	orrs	r3, r2
    6b90:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6b92:	9b01      	ldr	r3, [sp, #4]
    6b94:	7f1b      	ldrb	r3, [r3, #28]
    6b96:	2b00      	cmp	r3, #0
    6b98:	d001      	beq.n	6b9e <Port_Ci_Port_Ip_PinInit+0x5a>
    6b9a:	2310      	movs	r3, #16
    6b9c:	e000      	b.n	6ba0 <Port_Ci_Port_Ip_PinInit+0x5c>
    6b9e:	2300      	movs	r3, #0
    6ba0:	9a05      	ldr	r2, [sp, #20]
    6ba2:	4313      	orrs	r3, r2
    6ba4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6ba6:	9b01      	ldr	r3, [sp, #4]
    6ba8:	691b      	ldr	r3, [r3, #16]
    6baa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6bac:	9b01      	ldr	r3, [sp, #4]
    6bae:	6818      	ldr	r0, [r3, #0]
    6bb0:	9b01      	ldr	r3, [sp, #4]
    6bb2:	689b      	ldr	r3, [r3, #8]
    6bb4:	9a04      	ldr	r2, [sp, #16]
    6bb6:	4619      	mov	r1, r3
    6bb8:	f7ff ff90 	bl	6adc <Port_Ci_Port_Ip_ConfigureInterleave>
    6bbc:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6bbe:	9b03      	ldr	r3, [sp, #12]
    6bc0:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6bc2:	9b04      	ldr	r3, [sp, #16]
    6bc4:	021b      	lsls	r3, r3, #8
    6bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6bca:	9a05      	ldr	r2, [sp, #20]
    6bcc:	4313      	orrs	r3, r2
    6bce:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6bd0:	f003 f830 	bl	9c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6bd4:	9b01      	ldr	r3, [sp, #4]
    6bd6:	681b      	ldr	r3, [r3, #0]
    6bd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6bdc:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6bde:	9b01      	ldr	r3, [sp, #4]
    6be0:	689b      	ldr	r3, [r3, #8]
    6be2:	2201      	movs	r2, #1
    6be4:	fa02 f303 	lsl.w	r3, r2, r3
    6be8:	43db      	mvns	r3, r3
    6bea:	9a02      	ldr	r2, [sp, #8]
    6bec:	4013      	ands	r3, r2
    6bee:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6bf0:	9b01      	ldr	r3, [sp, #4]
    6bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d001      	beq.n	6bfe <Port_Ci_Port_Ip_PinInit+0xba>
    6bfa:	2201      	movs	r2, #1
    6bfc:	e000      	b.n	6c00 <Port_Ci_Port_Ip_PinInit+0xbc>
    6bfe:	2200      	movs	r2, #0
    6c00:	9b01      	ldr	r3, [sp, #4]
    6c02:	689b      	ldr	r3, [r3, #8]
    6c04:	fa02 f303 	lsl.w	r3, r2, r3
    6c08:	9a02      	ldr	r2, [sp, #8]
    6c0a:	4313      	orrs	r3, r2
    6c0c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6c0e:	9b01      	ldr	r3, [sp, #4]
    6c10:	681b      	ldr	r3, [r3, #0]
    6c12:	9a02      	ldr	r2, [sp, #8]
    6c14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6c18:	f003 f838 	bl	9c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6c1c:	9b04      	ldr	r3, [sp, #16]
    6c1e:	2b01      	cmp	r3, #1
    6c20:	d16d      	bne.n	6cfe <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6c22:	9b01      	ldr	r3, [sp, #4]
    6c24:	695b      	ldr	r3, [r3, #20]
    6c26:	2b02      	cmp	r3, #2
    6c28:	d138      	bne.n	6c9c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6c2a:	9b01      	ldr	r3, [sp, #4]
    6c2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6c30:	2b01      	cmp	r3, #1
    6c32:	d10f      	bne.n	6c54 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6c34:	f003 f850 	bl	9cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6c38:	9b01      	ldr	r3, [sp, #4]
    6c3a:	685b      	ldr	r3, [r3, #4]
    6c3c:	6859      	ldr	r1, [r3, #4]
    6c3e:	9b01      	ldr	r3, [sp, #4]
    6c40:	689b      	ldr	r3, [r3, #8]
    6c42:	2201      	movs	r2, #1
    6c44:	409a      	lsls	r2, r3
    6c46:	9b01      	ldr	r3, [sp, #4]
    6c48:	685b      	ldr	r3, [r3, #4]
    6c4a:	430a      	orrs	r2, r1
    6c4c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6c4e:	f003 f86f 	bl	9d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6c52:	e013      	b.n	6c7c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6c54:	9b01      	ldr	r3, [sp, #4]
    6c56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d10e      	bne.n	6c7c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6c5e:	f003 f88d 	bl	9d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6c62:	9b01      	ldr	r3, [sp, #4]
    6c64:	685b      	ldr	r3, [r3, #4]
    6c66:	6899      	ldr	r1, [r3, #8]
    6c68:	9b01      	ldr	r3, [sp, #4]
    6c6a:	689b      	ldr	r3, [r3, #8]
    6c6c:	2201      	movs	r2, #1
    6c6e:	409a      	lsls	r2, r3
    6c70:	9b01      	ldr	r3, [sp, #4]
    6c72:	685b      	ldr	r3, [r3, #4]
    6c74:	430a      	orrs	r2, r1
    6c76:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6c78:	f003 f8ac 	bl	9dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6c7c:	f003 f8d0 	bl	9e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6c80:	9b01      	ldr	r3, [sp, #4]
    6c82:	685b      	ldr	r3, [r3, #4]
    6c84:	6959      	ldr	r1, [r3, #20]
    6c86:	9b01      	ldr	r3, [sp, #4]
    6c88:	689b      	ldr	r3, [r3, #8]
    6c8a:	2201      	movs	r2, #1
    6c8c:	409a      	lsls	r2, r3
    6c8e:	9b01      	ldr	r3, [sp, #4]
    6c90:	685b      	ldr	r3, [r3, #4]
    6c92:	430a      	orrs	r2, r1
    6c94:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6c96:	f003 f8ef 	bl	9e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6c9a:	e030      	b.n	6cfe <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6c9c:	f003 f8c0 	bl	9e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	685b      	ldr	r3, [r3, #4]
    6ca4:	6959      	ldr	r1, [r3, #20]
    6ca6:	9b01      	ldr	r3, [sp, #4]
    6ca8:	689b      	ldr	r3, [r3, #8]
    6caa:	2201      	movs	r2, #1
    6cac:	fa02 f303 	lsl.w	r3, r2, r3
    6cb0:	43da      	mvns	r2, r3
    6cb2:	9b01      	ldr	r3, [sp, #4]
    6cb4:	685b      	ldr	r3, [r3, #4]
    6cb6:	400a      	ands	r2, r1
    6cb8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6cba:	f003 f8dd 	bl	9e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6cbe:	f003 f901 	bl	9ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6cc2:	9b01      	ldr	r3, [sp, #4]
    6cc4:	685b      	ldr	r3, [r3, #4]
    6cc6:	6999      	ldr	r1, [r3, #24]
    6cc8:	9b01      	ldr	r3, [sp, #4]
    6cca:	689b      	ldr	r3, [r3, #8]
    6ccc:	2201      	movs	r2, #1
    6cce:	fa02 f303 	lsl.w	r3, r2, r3
    6cd2:	43da      	mvns	r2, r3
    6cd4:	9b01      	ldr	r3, [sp, #4]
    6cd6:	685b      	ldr	r3, [r3, #4]
    6cd8:	400a      	ands	r2, r1
    6cda:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6cdc:	9b01      	ldr	r3, [sp, #4]
    6cde:	695b      	ldr	r3, [r3, #20]
    6ce0:	2b03      	cmp	r3, #3
    6ce2:	d10a      	bne.n	6cfa <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6ce4:	9b01      	ldr	r3, [sp, #4]
    6ce6:	685b      	ldr	r3, [r3, #4]
    6ce8:	6999      	ldr	r1, [r3, #24]
    6cea:	9b01      	ldr	r3, [sp, #4]
    6cec:	689b      	ldr	r3, [r3, #8]
    6cee:	2201      	movs	r2, #1
    6cf0:	409a      	lsls	r2, r3
    6cf2:	9b01      	ldr	r3, [sp, #4]
    6cf4:	685b      	ldr	r3, [r3, #4]
    6cf6:	430a      	orrs	r2, r1
    6cf8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6cfa:	f003 f90f 	bl	9f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6cfe:	9b01      	ldr	r3, [sp, #4]
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	9a01      	ldr	r2, [sp, #4]
    6d04:	6892      	ldr	r2, [r2, #8]
    6d06:	9905      	ldr	r1, [sp, #20]
    6d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6d0c:	bf00      	nop
    6d0e:	b007      	add	sp, #28
    6d10:	f85d fb04 	ldr.w	pc, [sp], #4

00006d14 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6d14:	b500      	push	{lr}
    6d16:	b085      	sub	sp, #20
    6d18:	9001      	str	r0, [sp, #4]
    6d1a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6d1c:	2300      	movs	r3, #0
    6d1e:	9303      	str	r3, [sp, #12]
    6d20:	e00d      	b.n	6d3e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6d22:	9a03      	ldr	r2, [sp, #12]
    6d24:	4613      	mov	r3, r2
    6d26:	009b      	lsls	r3, r3, #2
    6d28:	4413      	add	r3, r2
    6d2a:	00db      	lsls	r3, r3, #3
    6d2c:	461a      	mov	r2, r3
    6d2e:	9b00      	ldr	r3, [sp, #0]
    6d30:	4413      	add	r3, r2
    6d32:	4618      	mov	r0, r3
    6d34:	f7ff ff06 	bl	6b44 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6d38:	9b03      	ldr	r3, [sp, #12]
    6d3a:	3301      	adds	r3, #1
    6d3c:	9303      	str	r3, [sp, #12]
    6d3e:	9a03      	ldr	r2, [sp, #12]
    6d40:	9b01      	ldr	r3, [sp, #4]
    6d42:	429a      	cmp	r2, r3
    6d44:	d3ed      	bcc.n	6d22 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6d46:	2300      	movs	r3, #0
}
    6d48:	4618      	mov	r0, r3
    6d4a:	b005      	add	sp, #20
    6d4c:	f85d fb04 	ldr.w	pc, [sp], #4

00006d50 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6d50:	b500      	push	{lr}
    6d52:	b087      	sub	sp, #28
    6d54:	9003      	str	r0, [sp, #12]
    6d56:	9102      	str	r1, [sp, #8]
    6d58:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6d5a:	9a01      	ldr	r2, [sp, #4]
    6d5c:	9902      	ldr	r1, [sp, #8]
    6d5e:	9803      	ldr	r0, [sp, #12]
    6d60:	f7ff febc 	bl	6adc <Port_Ci_Port_Ip_ConfigureInterleave>
    6d64:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6d66:	f003 f951 	bl	a00c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6d6a:	9b03      	ldr	r3, [sp, #12]
    6d6c:	9a02      	ldr	r2, [sp, #8]
    6d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d72:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6d74:	9b04      	ldr	r3, [sp, #16]
    6d76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6d7a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6d7c:	9b05      	ldr	r3, [sp, #20]
    6d7e:	021b      	lsls	r3, r3, #8
    6d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6d84:	9a04      	ldr	r2, [sp, #16]
    6d86:	4313      	orrs	r3, r2
    6d88:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6d8a:	9b03      	ldr	r3, [sp, #12]
    6d8c:	9a02      	ldr	r2, [sp, #8]
    6d8e:	9904      	ldr	r1, [sp, #16]
    6d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6d94:	f003 f966 	bl	a064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6d98:	bf00      	nop
    6d9a:	b007      	add	sp, #28
    6d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00006da0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6da0:	b500      	push	{lr}
    6da2:	b083      	sub	sp, #12
    6da4:	9001      	str	r0, [sp, #4]
    6da6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6da8:	f003 f982 	bl	a0b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6dac:	9b01      	ldr	r3, [sp, #4]
    6dae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6db2:	2101      	movs	r1, #1
    6db4:	9b00      	ldr	r3, [sp, #0]
    6db6:	fa01 f303 	lsl.w	r3, r1, r3
    6dba:	431a      	orrs	r2, r3
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6dc2:	f003 f9a1 	bl	a108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6dc6:	bf00      	nop
    6dc8:	b003      	add	sp, #12
    6dca:	f85d fb04 	ldr.w	pc, [sp], #4

00006dce <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6dce:	b500      	push	{lr}
    6dd0:	b083      	sub	sp, #12
    6dd2:	9001      	str	r0, [sp, #4]
    6dd4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6dd6:	f003 f9bd 	bl	a154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6dda:	9b01      	ldr	r3, [sp, #4]
    6ddc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6de0:	2101      	movs	r1, #1
    6de2:	9b00      	ldr	r3, [sp, #0]
    6de4:	fa01 f303 	lsl.w	r3, r1, r3
    6de8:	43db      	mvns	r3, r3
    6dea:	401a      	ands	r2, r3
    6dec:	9b01      	ldr	r3, [sp, #4]
    6dee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6df2:	f003 f9db 	bl	a1ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6df6:	bf00      	nop
    6df8:	b003      	add	sp, #12
    6dfa:	f85d fb04 	ldr.w	pc, [sp], #4

00006dfe <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6dfe:	b082      	sub	sp, #8
    6e00:	9001      	str	r0, [sp, #4]
    6e02:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6e04:	9b00      	ldr	r3, [sp, #0]
    6e06:	785b      	ldrb	r3, [r3, #1]
    6e08:	f003 0201 	and.w	r2, r3, #1
    6e0c:	9b01      	ldr	r3, [sp, #4]
    6e0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6e12:	9b00      	ldr	r3, [sp, #0]
    6e14:	789b      	ldrb	r3, [r3, #2]
    6e16:	f003 021f 	and.w	r2, r3, #31
    6e1a:	9b01      	ldr	r3, [sp, #4]
    6e1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6e20:	bf00      	nop
    6e22:	b002      	add	sp, #8
    6e24:	4770      	bx	lr

00006e26 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6e26:	b086      	sub	sp, #24
    6e28:	9003      	str	r0, [sp, #12]
    6e2a:	9301      	str	r3, [sp, #4]
    6e2c:	460b      	mov	r3, r1
    6e2e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6e32:	4613      	mov	r3, r2
    6e34:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6e38:	2300      	movs	r3, #0
    6e3a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6e3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e42:	f043 0301 	orr.w	r3, r3, #1
    6e46:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6e4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e4e:	f043 0302 	orr.w	r3, r3, #2
    6e52:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6e56:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e5a:	f043 0310 	orr.w	r3, r3, #16
    6e5e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6e62:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6e6a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6e6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6e76:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6e7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6e86:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6e8a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6e8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6e92:	4013      	ands	r3, r2
    6e94:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	d003      	beq.n	6ea6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6e9e:	9b01      	ldr	r3, [sp, #4]
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d00a      	beq.n	6eba <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6ea4:	e013      	b.n	6ece <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6ea6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6eaa:	041a      	lsls	r2, r3, #16
    6eac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6eb0:	431a      	orrs	r2, r3
    6eb2:	9b03      	ldr	r3, [sp, #12]
    6eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6eb8:	e009      	b.n	6ece <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6eba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ebe:	041a      	lsls	r2, r3, #16
    6ec0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ec4:	431a      	orrs	r2, r3
    6ec6:	9b03      	ldr	r3, [sp, #12]
    6ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6ecc:	bf00      	nop
    }
}
    6ece:	bf00      	nop
    6ed0:	b006      	add	sp, #24
    6ed2:	4770      	bx	lr

00006ed4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6ed4:	b500      	push	{lr}
    6ed6:	b087      	sub	sp, #28
    6ed8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6eda:	9b01      	ldr	r3, [sp, #4]
    6edc:	885b      	ldrh	r3, [r3, #2]
    6ede:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6ee2:	9b01      	ldr	r3, [sp, #4]
    6ee4:	689b      	ldr	r3, [r3, #8]
    6ee6:	7a1b      	ldrb	r3, [r3, #8]
    6ee8:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6eec:	9b01      	ldr	r3, [sp, #4]
    6eee:	689b      	ldr	r3, [r3, #8]
    6ef0:	681b      	ldr	r3, [r3, #0]
    6ef2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6ef4:	9b01      	ldr	r3, [sp, #4]
    6ef6:	689b      	ldr	r3, [r3, #8]
    6ef8:	685b      	ldr	r3, [r3, #4]
    6efa:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6efc:	2300      	movs	r3, #0
    6efe:	f8ad 3016 	strh.w	r3, [sp, #22]
    6f02:	e111      	b.n	7128 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6f04:	9b02      	ldr	r3, [sp, #8]
    6f06:	2b02      	cmp	r3, #2
    6f08:	d169      	bne.n	6fde <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6f0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6f0e:	2b01      	cmp	r3, #1
    6f10:	d11a      	bne.n	6f48 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6f12:	9b01      	ldr	r3, [sp, #4]
    6f14:	685a      	ldr	r2, [r3, #4]
    6f16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f1a:	005b      	lsls	r3, r3, #1
    6f1c:	4413      	add	r3, r2
    6f1e:	881b      	ldrh	r3, [r3, #0]
    6f20:	f003 021f 	and.w	r2, r3, #31
    6f24:	9b01      	ldr	r3, [sp, #4]
    6f26:	6859      	ldr	r1, [r3, #4]
    6f28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f2c:	005b      	lsls	r3, r3, #1
    6f2e:	440b      	add	r3, r1
    6f30:	881b      	ldrh	r3, [r3, #0]
    6f32:	095b      	lsrs	r3, r3, #5
    6f34:	b29b      	uxth	r3, r3
    6f36:	4619      	mov	r1, r3
    6f38:	4b81      	ldr	r3, [pc, #516]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6f3e:	2101      	movs	r1, #1
    6f40:	fa01 f202 	lsl.w	r2, r1, r2
    6f44:	605a      	str	r2, [r3, #4]
    6f46:	e01d      	b.n	6f84 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6f48:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d119      	bne.n	6f84 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6f50:	9b01      	ldr	r3, [sp, #4]
    6f52:	685a      	ldr	r2, [r3, #4]
    6f54:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f58:	005b      	lsls	r3, r3, #1
    6f5a:	4413      	add	r3, r2
    6f5c:	881b      	ldrh	r3, [r3, #0]
    6f5e:	f003 021f 	and.w	r2, r3, #31
    6f62:	9b01      	ldr	r3, [sp, #4]
    6f64:	6859      	ldr	r1, [r3, #4]
    6f66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f6a:	005b      	lsls	r3, r3, #1
    6f6c:	440b      	add	r3, r1
    6f6e:	881b      	ldrh	r3, [r3, #0]
    6f70:	095b      	lsrs	r3, r3, #5
    6f72:	b29b      	uxth	r3, r3
    6f74:	4619      	mov	r1, r3
    6f76:	4b72      	ldr	r3, [pc, #456]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6f7c:	2101      	movs	r1, #1
    6f7e:	fa01 f202 	lsl.w	r2, r1, r2
    6f82:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6f84:	f003 f938 	bl	a1f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6f88:	9b01      	ldr	r3, [sp, #4]
    6f8a:	685a      	ldr	r2, [r3, #4]
    6f8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f90:	005b      	lsls	r3, r3, #1
    6f92:	4413      	add	r3, r2
    6f94:	881b      	ldrh	r3, [r3, #0]
    6f96:	095b      	lsrs	r3, r3, #5
    6f98:	b29b      	uxth	r3, r3
    6f9a:	461a      	mov	r2, r3
    6f9c:	4b68      	ldr	r3, [pc, #416]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6fa2:	6959      	ldr	r1, [r3, #20]
    6fa4:	9b01      	ldr	r3, [sp, #4]
    6fa6:	685a      	ldr	r2, [r3, #4]
    6fa8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fac:	005b      	lsls	r3, r3, #1
    6fae:	4413      	add	r3, r2
    6fb0:	881b      	ldrh	r3, [r3, #0]
    6fb2:	f003 031f 	and.w	r3, r3, #31
    6fb6:	2201      	movs	r2, #1
    6fb8:	409a      	lsls	r2, r3
    6fba:	9b01      	ldr	r3, [sp, #4]
    6fbc:	6858      	ldr	r0, [r3, #4]
    6fbe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fc2:	005b      	lsls	r3, r3, #1
    6fc4:	4403      	add	r3, r0
    6fc6:	881b      	ldrh	r3, [r3, #0]
    6fc8:	095b      	lsrs	r3, r3, #5
    6fca:	b29b      	uxth	r3, r3
    6fcc:	4618      	mov	r0, r3
    6fce:	4b5c      	ldr	r3, [pc, #368]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    6fd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6fd4:	430a      	orrs	r2, r1
    6fd6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6fd8:	f003 f93a 	bl	a250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6fdc:	e086      	b.n	70ec <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6fde:	f003 f90b 	bl	a1f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6fe2:	9b01      	ldr	r3, [sp, #4]
    6fe4:	685a      	ldr	r2, [r3, #4]
    6fe6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fea:	005b      	lsls	r3, r3, #1
    6fec:	4413      	add	r3, r2
    6fee:	881b      	ldrh	r3, [r3, #0]
    6ff0:	095b      	lsrs	r3, r3, #5
    6ff2:	b29b      	uxth	r3, r3
    6ff4:	461a      	mov	r2, r3
    6ff6:	4b52      	ldr	r3, [pc, #328]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ffc:	6959      	ldr	r1, [r3, #20]
    6ffe:	9b01      	ldr	r3, [sp, #4]
    7000:	685a      	ldr	r2, [r3, #4]
    7002:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7006:	005b      	lsls	r3, r3, #1
    7008:	4413      	add	r3, r2
    700a:	881b      	ldrh	r3, [r3, #0]
    700c:	f003 031f 	and.w	r3, r3, #31
    7010:	2201      	movs	r2, #1
    7012:	fa02 f303 	lsl.w	r3, r2, r3
    7016:	43da      	mvns	r2, r3
    7018:	9b01      	ldr	r3, [sp, #4]
    701a:	6858      	ldr	r0, [r3, #4]
    701c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7020:	005b      	lsls	r3, r3, #1
    7022:	4403      	add	r3, r0
    7024:	881b      	ldrh	r3, [r3, #0]
    7026:	095b      	lsrs	r3, r3, #5
    7028:	b29b      	uxth	r3, r3
    702a:	4618      	mov	r0, r3
    702c:	4b44      	ldr	r3, [pc, #272]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    702e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7032:	400a      	ands	r2, r1
    7034:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7036:	f003 f90b 	bl	a250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    703a:	f003 f92f 	bl	a29c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    703e:	9b01      	ldr	r3, [sp, #4]
    7040:	685a      	ldr	r2, [r3, #4]
    7042:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7046:	005b      	lsls	r3, r3, #1
    7048:	4413      	add	r3, r2
    704a:	881b      	ldrh	r3, [r3, #0]
    704c:	095b      	lsrs	r3, r3, #5
    704e:	b29b      	uxth	r3, r3
    7050:	461a      	mov	r2, r3
    7052:	4b3b      	ldr	r3, [pc, #236]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    7054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7058:	6999      	ldr	r1, [r3, #24]
    705a:	9b01      	ldr	r3, [sp, #4]
    705c:	685a      	ldr	r2, [r3, #4]
    705e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7062:	005b      	lsls	r3, r3, #1
    7064:	4413      	add	r3, r2
    7066:	881b      	ldrh	r3, [r3, #0]
    7068:	f003 031f 	and.w	r3, r3, #31
    706c:	2201      	movs	r2, #1
    706e:	fa02 f303 	lsl.w	r3, r2, r3
    7072:	43da      	mvns	r2, r3
    7074:	9b01      	ldr	r3, [sp, #4]
    7076:	6858      	ldr	r0, [r3, #4]
    7078:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    707c:	005b      	lsls	r3, r3, #1
    707e:	4403      	add	r3, r0
    7080:	881b      	ldrh	r3, [r3, #0]
    7082:	095b      	lsrs	r3, r3, #5
    7084:	b29b      	uxth	r3, r3
    7086:	4618      	mov	r0, r3
    7088:	4b2d      	ldr	r3, [pc, #180]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    708a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    708e:	400a      	ands	r2, r1
    7090:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    7092:	9b02      	ldr	r3, [sp, #8]
    7094:	2b03      	cmp	r3, #3
    7096:	d127      	bne.n	70e8 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7098:	9b01      	ldr	r3, [sp, #4]
    709a:	685a      	ldr	r2, [r3, #4]
    709c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70a0:	005b      	lsls	r3, r3, #1
    70a2:	4413      	add	r3, r2
    70a4:	881b      	ldrh	r3, [r3, #0]
    70a6:	095b      	lsrs	r3, r3, #5
    70a8:	b29b      	uxth	r3, r3
    70aa:	461a      	mov	r2, r3
    70ac:	4b24      	ldr	r3, [pc, #144]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    70ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70b2:	6999      	ldr	r1, [r3, #24]
    70b4:	9b01      	ldr	r3, [sp, #4]
    70b6:	685a      	ldr	r2, [r3, #4]
    70b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70bc:	005b      	lsls	r3, r3, #1
    70be:	4413      	add	r3, r2
    70c0:	881b      	ldrh	r3, [r3, #0]
    70c2:	f003 031f 	and.w	r3, r3, #31
    70c6:	2201      	movs	r2, #1
    70c8:	409a      	lsls	r2, r3
    70ca:	9b01      	ldr	r3, [sp, #4]
    70cc:	6858      	ldr	r0, [r3, #4]
    70ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70d2:	005b      	lsls	r3, r3, #1
    70d4:	4403      	add	r3, r0
    70d6:	881b      	ldrh	r3, [r3, #0]
    70d8:	095b      	lsrs	r3, r3, #5
    70da:	b29b      	uxth	r3, r3
    70dc:	4618      	mov	r0, r3
    70de:	4b18      	ldr	r3, [pc, #96]	; (7140 <Port_Ipw_Init_UnusedPins+0x26c>)
    70e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    70e4:	430a      	orrs	r2, r1
    70e6:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    70e8:	f003 f904 	bl	a2f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    70ec:	9b01      	ldr	r3, [sp, #4]
    70ee:	685a      	ldr	r2, [r3, #4]
    70f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70f4:	005b      	lsls	r3, r3, #1
    70f6:	4413      	add	r3, r2
    70f8:	881b      	ldrh	r3, [r3, #0]
    70fa:	095b      	lsrs	r3, r3, #5
    70fc:	b29b      	uxth	r3, r3
    70fe:	461a      	mov	r2, r3
    7100:	4b10      	ldr	r3, [pc, #64]	; (7144 <Port_Ipw_Init_UnusedPins+0x270>)
    7102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7106:	9a01      	ldr	r2, [sp, #4]
    7108:	6851      	ldr	r1, [r2, #4]
    710a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    710e:	0052      	lsls	r2, r2, #1
    7110:	440a      	add	r2, r1
    7112:	8812      	ldrh	r2, [r2, #0]
    7114:	f002 021f 	and.w	r2, r2, #31
    7118:	9903      	ldr	r1, [sp, #12]
    711a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    711e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7122:	3301      	adds	r3, #1
    7124:	f8ad 3016 	strh.w	r3, [sp, #22]
    7128:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    712c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7130:	429a      	cmp	r2, r3
    7132:	f4ff aee7 	bcc.w	6f04 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    7136:	bf00      	nop
    7138:	bf00      	nop
    713a:	b007      	add	sp, #28
    713c:	f85d fb04 	ldr.w	pc, [sp], #4
    7140:	0000b734 	.word	0x0000b734
    7144:	0000b720 	.word	0x0000b720

00007148 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    7148:	b500      	push	{lr}
    714a:	b085      	sub	sp, #20
    714c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    714e:	9b01      	ldr	r3, [sp, #4]
    7150:	7c1b      	ldrb	r3, [r3, #16]
    7152:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7156:	2300      	movs	r3, #0
    7158:	f8ad 300e 	strh.w	r3, [sp, #14]
    715c:	e035      	b.n	71ca <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    715e:	9b01      	ldr	r3, [sp, #4]
    7160:	695a      	ldr	r2, [r3, #20]
    7162:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7166:	00db      	lsls	r3, r3, #3
    7168:	4413      	add	r3, r2
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    7170:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7174:	4a1f      	ldr	r2, [pc, #124]	; (71f4 <Port_Ipw_Init+0xac>)
    7176:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    717a:	9b01      	ldr	r3, [sp, #4]
    717c:	695a      	ldr	r2, [r3, #20]
    717e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7182:	00db      	lsls	r3, r3, #3
    7184:	4413      	add	r3, r2
    7186:	4619      	mov	r1, r3
    7188:	f7ff fe39 	bl	6dfe <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    718c:	f003 fa20 	bl	a5d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    7190:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7194:	4a17      	ldr	r2, [pc, #92]	; (71f4 <Port_Ipw_Init+0xac>)
    7196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    719a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    719e:	9b01      	ldr	r3, [sp, #4]
    71a0:	695a      	ldr	r2, [r3, #20]
    71a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71a6:	00db      	lsls	r3, r3, #3
    71a8:	4413      	add	r3, r2
    71aa:	685a      	ldr	r2, [r3, #4]
    71ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    71b0:	4810      	ldr	r0, [pc, #64]	; (71f4 <Port_Ipw_Init+0xac>)
    71b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    71b6:	430a      	orrs	r2, r1
    71b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    71bc:	f003 fa34 	bl	a628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    71c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71c4:	3301      	adds	r3, #1
    71c6:	f8ad 300e 	strh.w	r3, [sp, #14]
    71ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71ce:	b29b      	uxth	r3, r3
    71d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    71d4:	429a      	cmp	r2, r3
    71d6:	d3c2      	bcc.n	715e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    71d8:	9b01      	ldr	r3, [sp, #4]
    71da:	6a1b      	ldr	r3, [r3, #32]
    71dc:	4619      	mov	r1, r3
    71de:	2004      	movs	r0, #4
    71e0:	f7ff fd98 	bl	6d14 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    71e4:	9801      	ldr	r0, [sp, #4]
    71e6:	f7ff fe75 	bl	6ed4 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    71ea:	bf00      	nop
    71ec:	b005      	add	sp, #20
    71ee:	f85d fb04 	ldr.w	pc, [sp], #4
    71f2:	bf00      	nop
    71f4:	0000b720 	.word	0x0000b720

000071f8 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    71f8:	b500      	push	{lr}
    71fa:	b085      	sub	sp, #20
    71fc:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    71fe:	9b01      	ldr	r3, [sp, #4]
    7200:	881b      	ldrh	r3, [r3, #0]
    7202:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7206:	2300      	movs	r3, #0
    7208:	f8ad 300e 	strh.w	r3, [sp, #14]
    720c:	e0d2      	b.n	73b4 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    720e:	9b01      	ldr	r3, [sp, #4]
    7210:	68d9      	ldr	r1, [r3, #12]
    7212:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7216:	4613      	mov	r3, r2
    7218:	009b      	lsls	r3, r3, #2
    721a:	4413      	add	r3, r2
    721c:	009b      	lsls	r3, r3, #2
    721e:	440b      	add	r3, r1
    7220:	7c5b      	ldrb	r3, [r3, #17]
    7222:	f083 0301 	eor.w	r3, r3, #1
    7226:	b2db      	uxtb	r3, r3
    7228:	2b00      	cmp	r3, #0
    722a:	f000 80be 	beq.w	73aa <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	68d9      	ldr	r1, [r3, #12]
    7232:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7236:	4613      	mov	r3, r2
    7238:	009b      	lsls	r3, r3, #2
    723a:	4413      	add	r3, r2
    723c:	009b      	lsls	r3, r3, #2
    723e:	440b      	add	r3, r1
    7240:	7c1b      	ldrb	r3, [r3, #16]
    7242:	2b00      	cmp	r3, #0
    7244:	f000 80b1 	beq.w	73aa <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7248:	9b01      	ldr	r3, [sp, #4]
    724a:	68d9      	ldr	r1, [r3, #12]
    724c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7250:	4613      	mov	r3, r2
    7252:	009b      	lsls	r3, r3, #2
    7254:	4413      	add	r3, r2
    7256:	009b      	lsls	r3, r3, #2
    7258:	440b      	add	r3, r1
    725a:	881b      	ldrh	r3, [r3, #0]
    725c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7260:	9b01      	ldr	r3, [sp, #4]
    7262:	68d9      	ldr	r1, [r3, #12]
    7264:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7268:	4613      	mov	r3, r2
    726a:	009b      	lsls	r3, r3, #2
    726c:	4413      	add	r3, r2
    726e:	009b      	lsls	r3, r3, #2
    7270:	440b      	add	r3, r1
    7272:	68db      	ldr	r3, [r3, #12]
    7274:	2b02      	cmp	r3, #2
    7276:	d11d      	bne.n	72b4 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7278:	f003 faf2 	bl	a860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    727c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7280:	095b      	lsrs	r3, r3, #5
    7282:	b29b      	uxth	r3, r3
    7284:	461a      	mov	r2, r3
    7286:	4b51      	ldr	r3, [pc, #324]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    7288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    728c:	6959      	ldr	r1, [r3, #20]
    728e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7292:	f003 031f 	and.w	r3, r3, #31
    7296:	2201      	movs	r2, #1
    7298:	409a      	lsls	r2, r3
    729a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    729e:	095b      	lsrs	r3, r3, #5
    72a0:	b29b      	uxth	r3, r3
    72a2:	4618      	mov	r0, r3
    72a4:	4b49      	ldr	r3, [pc, #292]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    72a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    72aa:	430a      	orrs	r2, r1
    72ac:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    72ae:	f003 fb03 	bl	a8b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    72b2:	e07a      	b.n	73aa <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    72b4:	9b01      	ldr	r3, [sp, #4]
    72b6:	68d9      	ldr	r1, [r3, #12]
    72b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72bc:	4613      	mov	r3, r2
    72be:	009b      	lsls	r3, r3, #2
    72c0:	4413      	add	r3, r2
    72c2:	009b      	lsls	r3, r3, #2
    72c4:	440b      	add	r3, r1
    72c6:	68db      	ldr	r3, [r3, #12]
    72c8:	2b01      	cmp	r3, #1
    72ca:	d00b      	beq.n	72e4 <Port_Ipw_RefreshPortDirection+0xec>
    72cc:	9b01      	ldr	r3, [sp, #4]
    72ce:	68d9      	ldr	r1, [r3, #12]
    72d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72d4:	4613      	mov	r3, r2
    72d6:	009b      	lsls	r3, r3, #2
    72d8:	4413      	add	r3, r2
    72da:	009b      	lsls	r3, r3, #2
    72dc:	440b      	add	r3, r1
    72de:	68db      	ldr	r3, [r3, #12]
    72e0:	2b03      	cmp	r3, #3
    72e2:	d162      	bne.n	73aa <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    72e4:	f003 fabc 	bl	a860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    72e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    72ec:	095b      	lsrs	r3, r3, #5
    72ee:	b29b      	uxth	r3, r3
    72f0:	461a      	mov	r2, r3
    72f2:	4b36      	ldr	r3, [pc, #216]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    72f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    72f8:	6959      	ldr	r1, [r3, #20]
    72fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    72fe:	f003 031f 	and.w	r3, r3, #31
    7302:	2201      	movs	r2, #1
    7304:	fa02 f303 	lsl.w	r3, r2, r3
    7308:	43da      	mvns	r2, r3
    730a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    730e:	095b      	lsrs	r3, r3, #5
    7310:	b29b      	uxth	r3, r3
    7312:	4618      	mov	r0, r3
    7314:	4b2d      	ldr	r3, [pc, #180]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    7316:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    731a:	400a      	ands	r2, r1
    731c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    731e:	f003 facb 	bl	a8b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7322:	f003 faef 	bl	a904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7326:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    732a:	095b      	lsrs	r3, r3, #5
    732c:	b29b      	uxth	r3, r3
    732e:	461a      	mov	r2, r3
    7330:	4b26      	ldr	r3, [pc, #152]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    7332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7336:	6999      	ldr	r1, [r3, #24]
    7338:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    733c:	f003 031f 	and.w	r3, r3, #31
    7340:	2201      	movs	r2, #1
    7342:	fa02 f303 	lsl.w	r3, r2, r3
    7346:	43da      	mvns	r2, r3
    7348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    734c:	095b      	lsrs	r3, r3, #5
    734e:	b29b      	uxth	r3, r3
    7350:	4618      	mov	r0, r3
    7352:	4b1e      	ldr	r3, [pc, #120]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    7354:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7358:	400a      	ands	r2, r1
    735a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    735c:	9b01      	ldr	r3, [sp, #4]
    735e:	68d9      	ldr	r1, [r3, #12]
    7360:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7364:	4613      	mov	r3, r2
    7366:	009b      	lsls	r3, r3, #2
    7368:	4413      	add	r3, r2
    736a:	009b      	lsls	r3, r3, #2
    736c:	440b      	add	r3, r1
    736e:	68db      	ldr	r3, [r3, #12]
    7370:	2b03      	cmp	r3, #3
    7372:	d118      	bne.n	73a6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7374:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7378:	095b      	lsrs	r3, r3, #5
    737a:	b29b      	uxth	r3, r3
    737c:	461a      	mov	r2, r3
    737e:	4b13      	ldr	r3, [pc, #76]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    7380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7384:	6999      	ldr	r1, [r3, #24]
    7386:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    738a:	f003 031f 	and.w	r3, r3, #31
    738e:	2201      	movs	r2, #1
    7390:	409a      	lsls	r2, r3
    7392:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7396:	095b      	lsrs	r3, r3, #5
    7398:	b29b      	uxth	r3, r3
    739a:	4618      	mov	r0, r3
    739c:	4b0b      	ldr	r3, [pc, #44]	; (73cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    739e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73a2:	430a      	orrs	r2, r1
    73a4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    73a6:	f003 fad9 	bl	a95c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    73aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    73ae:	3301      	adds	r3, #1
    73b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    73b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    73bc:	429a      	cmp	r2, r3
    73be:	f4ff af26 	bcc.w	720e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    73c2:	bf00      	nop
    73c4:	bf00      	nop
    73c6:	b005      	add	sp, #20
    73c8:	f85d fb04 	ldr.w	pc, [sp], #4
    73cc:	0000b734 	.word	0x0000b734

000073d0 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    73d0:	b500      	push	{lr}
    73d2:	b085      	sub	sp, #20
    73d4:	4603      	mov	r3, r0
    73d6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    73da:	2300      	movs	r3, #0
    73dc:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    73e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73e4:	4618      	mov	r0, r3
    73e6:	f000 f871 	bl	74cc <Dio_Ipw_ReadChannel>
    73ea:	4603      	mov	r3, r0
    73ec:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    73f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    73f4:	4618      	mov	r0, r3
    73f6:	b005      	add	sp, #20
    73f8:	f85d fb04 	ldr.w	pc, [sp], #4

000073fc <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    73fc:	b500      	push	{lr}
    73fe:	b083      	sub	sp, #12
    7400:	4603      	mov	r3, r0
    7402:	460a      	mov	r2, r1
    7404:	f8ad 3006 	strh.w	r3, [sp, #6]
    7408:	4613      	mov	r3, r2
    740a:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    740e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7412:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7416:	4611      	mov	r1, r2
    7418:	4618      	mov	r0, r3
    741a:	f000 f87d 	bl	7518 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    741e:	bf00      	nop
    7420:	b003      	add	sp, #12
    7422:	f85d fb04 	ldr.w	pc, [sp], #4

00007426 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7426:	b500      	push	{lr}
    7428:	b085      	sub	sp, #20
    742a:	4603      	mov	r3, r0
    742c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7430:	2300      	movs	r3, #0
    7432:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    7436:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    743a:	4618      	mov	r0, r3
    743c:	f000 f892 	bl	7564 <Dio_Ipw_FlipChannel>
    7440:	4603      	mov	r3, r0
    7442:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    7446:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    744a:	4618      	mov	r0, r3
    744c:	b005      	add	sp, #20
    744e:	f85d fb04 	ldr.w	pc, [sp], #4

00007452 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    7452:	b500      	push	{lr}
    7454:	b085      	sub	sp, #20
    7456:	4603      	mov	r3, r0
    7458:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    745c:	2300      	movs	r3, #0
    745e:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    7460:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7464:	4618      	mov	r0, r3
    7466:	f000 f8b3 	bl	75d0 <Dio_Ipw_ReadPort>
    746a:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    746c:	9b03      	ldr	r3, [sp, #12]
}
    746e:	4618      	mov	r0, r3
    7470:	b005      	add	sp, #20
    7472:	f85d fb04 	ldr.w	pc, [sp], #4

00007476 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7476:	b500      	push	{lr}
    7478:	b083      	sub	sp, #12
    747a:	4603      	mov	r3, r0
    747c:	9100      	str	r1, [sp, #0]
    747e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    7482:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7486:	9900      	ldr	r1, [sp, #0]
    7488:	4618      	mov	r0, r3
    748a:	f000 f8b9 	bl	7600 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    748e:	bf00      	nop
    7490:	b003      	add	sp, #12
    7492:	f85d fb04 	ldr.w	pc, [sp], #4

00007496 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    7496:	b500      	push	{lr}
    7498:	b085      	sub	sp, #20
    749a:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    749c:	2300      	movs	r3, #0
    749e:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    74a0:	9801      	ldr	r0, [sp, #4]
    74a2:	f000 f8c5 	bl	7630 <Dio_Ipw_ReadChannelGroup>
    74a6:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    74a8:	9b03      	ldr	r3, [sp, #12]
}
    74aa:	4618      	mov	r0, r3
    74ac:	b005      	add	sp, #20
    74ae:	f85d fb04 	ldr.w	pc, [sp], #4

000074b2 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    74b2:	b500      	push	{lr}
    74b4:	b083      	sub	sp, #12
    74b6:	9001      	str	r0, [sp, #4]
    74b8:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    74ba:	9900      	ldr	r1, [sp, #0]
    74bc:	9801      	ldr	r0, [sp, #4]
    74be:	f000 f8d7 	bl	7670 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    74c2:	bf00      	nop
    74c4:	b003      	add	sp, #12
    74c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000074cc <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    74cc:	b500      	push	{lr}
    74ce:	b087      	sub	sp, #28
    74d0:	4603      	mov	r3, r0
    74d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    74d6:	2300      	movs	r3, #0
    74d8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    74dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74e0:	095b      	lsrs	r3, r3, #5
    74e2:	b29b      	uxth	r3, r3
    74e4:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    74e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74ea:	f003 031f 	and.w	r3, r3, #31
    74ee:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    74f0:	4a08      	ldr	r2, [pc, #32]	; (7514 <Dio_Ipw_ReadChannel+0x48>)
    74f2:	9b04      	ldr	r3, [sp, #16]
    74f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f8:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    74fa:	9903      	ldr	r1, [sp, #12]
    74fc:	9802      	ldr	r0, [sp, #8]
    74fe:	f000 f940 	bl	7782 <Gpio_Dio_Ip_ReadPin>
    7502:	4603      	mov	r3, r0
    7504:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    7508:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    750c:	4618      	mov	r0, r3
    750e:	b007      	add	sp, #28
    7510:	f85d fb04 	ldr.w	pc, [sp], #4
    7514:	1fff8b24 	.word	0x1fff8b24

00007518 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7518:	b500      	push	{lr}
    751a:	b087      	sub	sp, #28
    751c:	4603      	mov	r3, r0
    751e:	460a      	mov	r2, r1
    7520:	f8ad 3006 	strh.w	r3, [sp, #6]
    7524:	4613      	mov	r3, r2
    7526:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    752a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    752e:	095b      	lsrs	r3, r3, #5
    7530:	b29b      	uxth	r3, r3
    7532:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7534:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7538:	f003 031f 	and.w	r3, r3, #31
    753c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    753e:	4a08      	ldr	r2, [pc, #32]	; (7560 <Dio_Ipw_WriteChannel+0x48>)
    7540:	9b05      	ldr	r3, [sp, #20]
    7542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7546:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    7548:	f89d 3005 	ldrb.w	r3, [sp, #5]
    754c:	461a      	mov	r2, r3
    754e:	9904      	ldr	r1, [sp, #16]
    7550:	9803      	ldr	r0, [sp, #12]
    7552:	f000 f8b7 	bl	76c4 <Gpio_Dio_Ip_WritePin>
}
    7556:	bf00      	nop
    7558:	b007      	add	sp, #28
    755a:	f85d fb04 	ldr.w	pc, [sp], #4
    755e:	bf00      	nop
    7560:	1fff8b24 	.word	0x1fff8b24

00007564 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7564:	b500      	push	{lr}
    7566:	b089      	sub	sp, #36	; 0x24
    7568:	4603      	mov	r3, r0
    756a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    756e:	2300      	movs	r3, #0
    7570:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7574:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7578:	095b      	lsrs	r3, r3, #5
    757a:	b29b      	uxth	r3, r3
    757c:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    757e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7582:	f003 031f 	and.w	r3, r3, #31
    7586:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7588:	4a10      	ldr	r2, [pc, #64]	; (75cc <Dio_Ipw_FlipChannel+0x68>)
    758a:	9b06      	ldr	r3, [sp, #24]
    758c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7590:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    7592:	2201      	movs	r2, #1
    7594:	9b05      	ldr	r3, [sp, #20]
    7596:	fa02 f303 	lsl.w	r3, r2, r3
    759a:	4619      	mov	r1, r3
    759c:	9804      	ldr	r0, [sp, #16]
    759e:	f000 f8dc 	bl	775a <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    75a2:	9804      	ldr	r0, [sp, #16]
    75a4:	f000 f8bc 	bl	7720 <Gpio_Dio_Ip_GetPinsOutput>
    75a8:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    75aa:	2201      	movs	r2, #1
    75ac:	9b05      	ldr	r3, [sp, #20]
    75ae:	409a      	lsls	r2, r3
    75b0:	9b03      	ldr	r3, [sp, #12]
    75b2:	401a      	ands	r2, r3
    75b4:	9b05      	ldr	r3, [sp, #20]
    75b6:	fa22 f303 	lsr.w	r3, r2, r3
    75ba:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    75be:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    75c2:	4618      	mov	r0, r3
    75c4:	b009      	add	sp, #36	; 0x24
    75c6:	f85d fb04 	ldr.w	pc, [sp], #4
    75ca:	bf00      	nop
    75cc:	1fff8b24 	.word	0x1fff8b24

000075d0 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    75d0:	b500      	push	{lr}
    75d2:	b085      	sub	sp, #20
    75d4:	4603      	mov	r3, r0
    75d6:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    75da:	2300      	movs	r3, #0
    75dc:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    75de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75e2:	4a06      	ldr	r2, [pc, #24]	; (75fc <Dio_Ipw_ReadPort+0x2c>)
    75e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e8:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    75ea:	9802      	ldr	r0, [sp, #8]
    75ec:	f000 f8be 	bl	776c <Gpio_Dio_Ip_ReadPins>
    75f0:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    75f2:	9b03      	ldr	r3, [sp, #12]
}
    75f4:	4618      	mov	r0, r3
    75f6:	b005      	add	sp, #20
    75f8:	f85d fb04 	ldr.w	pc, [sp], #4
    75fc:	1fff8b24 	.word	0x1fff8b24

00007600 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7600:	b500      	push	{lr}
    7602:	b085      	sub	sp, #20
    7604:	4603      	mov	r3, r0
    7606:	9100      	str	r1, [sp, #0]
    7608:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    760c:	9b00      	ldr	r3, [sp, #0]
    760e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    7610:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7614:	4a05      	ldr	r2, [pc, #20]	; (762c <Dio_Ipw_WritePort+0x2c>)
    7616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    761a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    761c:	9903      	ldr	r1, [sp, #12]
    761e:	9802      	ldr	r0, [sp, #8]
    7620:	f000 f875 	bl	770e <Gpio_Dio_Ip_WritePins>
}
    7624:	bf00      	nop
    7626:	b005      	add	sp, #20
    7628:	f85d fb04 	ldr.w	pc, [sp], #4
    762c:	1fff8b24 	.word	0x1fff8b24

00007630 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    7630:	b500      	push	{lr}
    7632:	b087      	sub	sp, #28
    7634:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7636:	2300      	movs	r3, #0
    7638:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    763a:	9b01      	ldr	r3, [sp, #4]
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	461a      	mov	r2, r3
    7640:	4b0a      	ldr	r3, [pc, #40]	; (766c <Dio_Ipw_ReadChannelGroup+0x3c>)
    7642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7646:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    7648:	9804      	ldr	r0, [sp, #16]
    764a:	f000 f88f 	bl	776c <Gpio_Dio_Ip_ReadPins>
    764e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    7650:	9b01      	ldr	r3, [sp, #4]
    7652:	685a      	ldr	r2, [r3, #4]
    7654:	9b03      	ldr	r3, [sp, #12]
    7656:	4013      	ands	r3, r2
    7658:	9a01      	ldr	r2, [sp, #4]
    765a:	7852      	ldrb	r2, [r2, #1]
    765c:	40d3      	lsrs	r3, r2
    765e:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    7660:	9b05      	ldr	r3, [sp, #20]
}
    7662:	4618      	mov	r0, r3
    7664:	b007      	add	sp, #28
    7666:	f85d fb04 	ldr.w	pc, [sp], #4
    766a:	bf00      	nop
    766c:	1fff8b24 	.word	0x1fff8b24

00007670 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    7670:	b500      	push	{lr}
    7672:	b087      	sub	sp, #28
    7674:	9001      	str	r0, [sp, #4]
    7676:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    7678:	9b01      	ldr	r3, [sp, #4]
    767a:	781b      	ldrb	r3, [r3, #0]
    767c:	461a      	mov	r2, r3
    767e:	4b10      	ldr	r3, [pc, #64]	; (76c0 <Dio_Ipw_WriteChannelGroup+0x50>)
    7680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7684:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    7686:	9b01      	ldr	r3, [sp, #4]
    7688:	785b      	ldrb	r3, [r3, #1]
    768a:	461a      	mov	r2, r3
    768c:	9b00      	ldr	r3, [sp, #0]
    768e:	fa03 f202 	lsl.w	r2, r3, r2
    7692:	9b01      	ldr	r3, [sp, #4]
    7694:	685b      	ldr	r3, [r3, #4]
    7696:	4013      	ands	r3, r2
    7698:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    769a:	9904      	ldr	r1, [sp, #16]
    769c:	9805      	ldr	r0, [sp, #20]
    769e:	f000 f84a 	bl	7736 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    76a2:	9b04      	ldr	r3, [sp, #16]
    76a4:	43da      	mvns	r2, r3
    76a6:	9b01      	ldr	r3, [sp, #4]
    76a8:	685b      	ldr	r3, [r3, #4]
    76aa:	4013      	ands	r3, r2
    76ac:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    76ae:	9903      	ldr	r1, [sp, #12]
    76b0:	9805      	ldr	r0, [sp, #20]
    76b2:	f000 f849 	bl	7748 <Gpio_Dio_Ip_ClearPins>

}
    76b6:	bf00      	nop
    76b8:	b007      	add	sp, #28
    76ba:	f85d fb04 	ldr.w	pc, [sp], #4
    76be:	bf00      	nop
    76c0:	1fff8b24 	.word	0x1fff8b24

000076c4 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    76c4:	b500      	push	{lr}
    76c6:	b087      	sub	sp, #28
    76c8:	9003      	str	r0, [sp, #12]
    76ca:	9102      	str	r1, [sp, #8]
    76cc:	4613      	mov	r3, r2
    76ce:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    76d2:	f000 f86d 	bl	77b0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    76d6:	9b03      	ldr	r3, [sp, #12]
    76d8:	681b      	ldr	r3, [r3, #0]
    76da:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    76dc:	2201      	movs	r2, #1
    76de:	9b02      	ldr	r3, [sp, #8]
    76e0:	fa02 f303 	lsl.w	r3, r2, r3
    76e4:	43db      	mvns	r3, r3
    76e6:	9a05      	ldr	r2, [sp, #20]
    76e8:	4013      	ands	r3, r2
    76ea:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    76ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    76f0:	9b02      	ldr	r3, [sp, #8]
    76f2:	fa02 f303 	lsl.w	r3, r2, r3
    76f6:	9a05      	ldr	r2, [sp, #20]
    76f8:	4313      	orrs	r3, r2
    76fa:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    76fc:	9b03      	ldr	r3, [sp, #12]
    76fe:	9a05      	ldr	r2, [sp, #20]
    7700:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    7702:	f000 f881 	bl	7808 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7706:	bf00      	nop
    7708:	b007      	add	sp, #28
    770a:	f85d fb04 	ldr.w	pc, [sp], #4

0000770e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    770e:	b082      	sub	sp, #8
    7710:	9001      	str	r0, [sp, #4]
    7712:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7714:	9b01      	ldr	r3, [sp, #4]
    7716:	9a00      	ldr	r2, [sp, #0]
    7718:	601a      	str	r2, [r3, #0]
}
    771a:	bf00      	nop
    771c:	b002      	add	sp, #8
    771e:	4770      	bx	lr

00007720 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7720:	b084      	sub	sp, #16
    7722:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7724:	2300      	movs	r3, #0
    7726:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7728:	9b01      	ldr	r3, [sp, #4]
    772a:	681b      	ldr	r3, [r3, #0]
    772c:	9303      	str	r3, [sp, #12]
    return returnValue;
    772e:	9b03      	ldr	r3, [sp, #12]
}
    7730:	4618      	mov	r0, r3
    7732:	b004      	add	sp, #16
    7734:	4770      	bx	lr

00007736 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7736:	b082      	sub	sp, #8
    7738:	9001      	str	r0, [sp, #4]
    773a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    773c:	9b01      	ldr	r3, [sp, #4]
    773e:	9a00      	ldr	r2, [sp, #0]
    7740:	605a      	str	r2, [r3, #4]
}
    7742:	bf00      	nop
    7744:	b002      	add	sp, #8
    7746:	4770      	bx	lr

00007748 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7748:	b082      	sub	sp, #8
    774a:	9001      	str	r0, [sp, #4]
    774c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    774e:	9b01      	ldr	r3, [sp, #4]
    7750:	9a00      	ldr	r2, [sp, #0]
    7752:	609a      	str	r2, [r3, #8]
}
    7754:	bf00      	nop
    7756:	b002      	add	sp, #8
    7758:	4770      	bx	lr

0000775a <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    775a:	b082      	sub	sp, #8
    775c:	9001      	str	r0, [sp, #4]
    775e:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    7760:	9b01      	ldr	r3, [sp, #4]
    7762:	9a00      	ldr	r2, [sp, #0]
    7764:	60da      	str	r2, [r3, #12]
}
    7766:	bf00      	nop
    7768:	b002      	add	sp, #8
    776a:	4770      	bx	lr

0000776c <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    776c:	b084      	sub	sp, #16
    776e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7770:	2300      	movs	r3, #0
    7772:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    7774:	9b01      	ldr	r3, [sp, #4]
    7776:	691b      	ldr	r3, [r3, #16]
    7778:	9303      	str	r3, [sp, #12]
    return returnValue;
    777a:	9b03      	ldr	r3, [sp, #12]
}
    777c:	4618      	mov	r0, r3
    777e:	b004      	add	sp, #16
    7780:	4770      	bx	lr

00007782 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    7782:	b084      	sub	sp, #16
    7784:	9001      	str	r0, [sp, #4]
    7786:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    7788:	2300      	movs	r3, #0
    778a:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    778e:	9b01      	ldr	r3, [sp, #4]
    7790:	691a      	ldr	r2, [r3, #16]
    7792:	2101      	movs	r1, #1
    7794:	9b00      	ldr	r3, [sp, #0]
    7796:	fa01 f303 	lsl.w	r3, r1, r3
    779a:	401a      	ands	r2, r3
    779c:	9b00      	ldr	r3, [sp, #0]
    779e:	fa22 f303 	lsr.w	r3, r2, r3
    77a2:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    77a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    77aa:	4618      	mov	r0, r3
    77ac:	b004      	add	sp, #16
    77ae:	4770      	bx	lr

000077b0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    77b0:	b500      	push	{lr}
    77b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77b4:	f7f9 f9d2 	bl	b5c <Sys_GetCoreID>
    77b8:	4603      	mov	r3, r0
    77ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    77bc:	4a10      	ldr	r2, [pc, #64]	; (7800 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    77be:	9b01      	ldr	r3, [sp, #4]
    77c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c4:	2b00      	cmp	r3, #0
    77c6:	d10d      	bne.n	77e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77c8:	f7f9 f8de 	bl	988 <Dio_schm_read_msr>
    77cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77ce:	9b00      	ldr	r3, [sp, #0]
    77d0:	f003 0301 	and.w	r3, r3, #1
    77d4:	2b00      	cmp	r3, #0
    77d6:	d100      	bne.n	77da <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    77da:	490a      	ldr	r1, [pc, #40]	; (7804 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    77dc:	9b01      	ldr	r3, [sp, #4]
    77de:	9a00      	ldr	r2, [sp, #0]
    77e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    77e4:	4a06      	ldr	r2, [pc, #24]	; (7800 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    77e6:	9b01      	ldr	r3, [sp, #4]
    77e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ec:	1c5a      	adds	r2, r3, #1
    77ee:	4904      	ldr	r1, [pc, #16]	; (7800 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    77f0:	9b01      	ldr	r3, [sp, #4]
    77f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77f6:	bf00      	nop
    77f8:	b003      	add	sp, #12
    77fa:	f85d fb04 	ldr.w	pc, [sp], #4
    77fe:	bf00      	nop
    7800:	1fff8ff0 	.word	0x1fff8ff0
    7804:	1fff8fec 	.word	0x1fff8fec

00007808 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    7808:	b500      	push	{lr}
    780a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    780c:	f7f9 f9a6 	bl	b5c <Sys_GetCoreID>
    7810:	4603      	mov	r3, r0
    7812:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    7814:	4a0d      	ldr	r2, [pc, #52]	; (784c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7816:	9b01      	ldr	r3, [sp, #4]
    7818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    781c:	1e5a      	subs	r2, r3, #1
    781e:	490b      	ldr	r1, [pc, #44]	; (784c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7820:	9b01      	ldr	r3, [sp, #4]
    7822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    7826:	4a0a      	ldr	r2, [pc, #40]	; (7850 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    7828:	9b01      	ldr	r3, [sp, #4]
    782a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    782e:	f003 0301 	and.w	r3, r3, #1
    7832:	2b00      	cmp	r3, #0
    7834:	d106      	bne.n	7844 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    7836:	4a05      	ldr	r2, [pc, #20]	; (784c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7838:	9b01      	ldr	r3, [sp, #4]
    783a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783e:	2b00      	cmp	r3, #0
    7840:	d100      	bne.n	7844 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7842:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7844:	bf00      	nop
    7846:	b003      	add	sp, #12
    7848:	f85d fb04 	ldr.w	pc, [sp], #4
    784c:	1fff8ff0 	.word	0x1fff8ff0
    7850:	1fff8fec 	.word	0x1fff8fec

00007854 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    7854:	b500      	push	{lr}
    7856:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7858:	f7f9 f980 	bl	b5c <Sys_GetCoreID>
    785c:	4603      	mov	r3, r0
    785e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    7860:	4a10      	ldr	r2, [pc, #64]	; (78a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    7862:	9b01      	ldr	r3, [sp, #4]
    7864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7868:	2b00      	cmp	r3, #0
    786a:	d10d      	bne.n	7888 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    786c:	f7f9 f88c 	bl	988 <Dio_schm_read_msr>
    7870:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7872:	9b00      	ldr	r3, [sp, #0]
    7874:	f003 0301 	and.w	r3, r3, #1
    7878:	2b00      	cmp	r3, #0
    787a:	d100      	bne.n	787e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    787c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    787e:	490a      	ldr	r1, [pc, #40]	; (78a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    7880:	9b01      	ldr	r3, [sp, #4]
    7882:	9a00      	ldr	r2, [sp, #0]
    7884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    7888:	4a06      	ldr	r2, [pc, #24]	; (78a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    788a:	9b01      	ldr	r3, [sp, #4]
    788c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7890:	1c5a      	adds	r2, r3, #1
    7892:	4904      	ldr	r1, [pc, #16]	; (78a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    7894:	9b01      	ldr	r3, [sp, #4]
    7896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    789a:	bf00      	nop
    789c:	b003      	add	sp, #12
    789e:	f85d fb04 	ldr.w	pc, [sp], #4
    78a2:	bf00      	nop
    78a4:	1fff8ff8 	.word	0x1fff8ff8
    78a8:	1fff8ff4 	.word	0x1fff8ff4

000078ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    78ac:	b500      	push	{lr}
    78ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78b0:	f7f9 f954 	bl	b5c <Sys_GetCoreID>
    78b4:	4603      	mov	r3, r0
    78b6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    78b8:	4a0d      	ldr	r2, [pc, #52]	; (78f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    78ba:	9b01      	ldr	r3, [sp, #4]
    78bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78c0:	1e5a      	subs	r2, r3, #1
    78c2:	490b      	ldr	r1, [pc, #44]	; (78f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    78c4:	9b01      	ldr	r3, [sp, #4]
    78c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    78ca:	4a0a      	ldr	r2, [pc, #40]	; (78f4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    78cc:	9b01      	ldr	r3, [sp, #4]
    78ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78d2:	f003 0301 	and.w	r3, r3, #1
    78d6:	2b00      	cmp	r3, #0
    78d8:	d106      	bne.n	78e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    78da:	4a05      	ldr	r2, [pc, #20]	; (78f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    78dc:	9b01      	ldr	r3, [sp, #4]
    78de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e2:	2b00      	cmp	r3, #0
    78e4:	d100      	bne.n	78e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    78e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    78e8:	bf00      	nop
    78ea:	b003      	add	sp, #12
    78ec:	f85d fb04 	ldr.w	pc, [sp], #4
    78f0:	1fff8ff8 	.word	0x1fff8ff8
    78f4:	1fff8ff4 	.word	0x1fff8ff4

000078f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    78f8:	b500      	push	{lr}
    78fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78fc:	f7f9 f92e 	bl	b5c <Sys_GetCoreID>
    7900:	4603      	mov	r3, r0
    7902:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId])
    7904:	4a10      	ldr	r2, [pc, #64]	; (7948 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    7906:	9b01      	ldr	r3, [sp, #4]
    7908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    790c:	2b00      	cmp	r3, #0
    790e:	d10d      	bne.n	792c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7910:	f7f9 f843 	bl	99a <Gpt_schm_read_msr>
    7914:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7916:	9b00      	ldr	r3, [sp, #0]
    7918:	f003 0301 	and.w	r3, r3, #1
    791c:	2b00      	cmp	r3, #0
    791e:	d100      	bne.n	7922 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7920:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    7922:	490a      	ldr	r1, [pc, #40]	; (794c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x54>)
    7924:	9b01      	ldr	r3, [sp, #4]
    7926:	9a00      	ldr	r2, [sp, #0]
    7928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]++;
    792c:	4a06      	ldr	r2, [pc, #24]	; (7948 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    792e:	9b01      	ldr	r3, [sp, #4]
    7930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7934:	1c5a      	adds	r2, r3, #1
    7936:	4904      	ldr	r1, [pc, #16]	; (7948 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    7938:	9b01      	ldr	r3, [sp, #4]
    793a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    793e:	bf00      	nop
    7940:	b003      	add	sp, #12
    7942:	f85d fb04 	ldr.w	pc, [sp], #4
    7946:	bf00      	nop
    7948:	1fff9000 	.word	0x1fff9000
    794c:	1fff8ffc 	.word	0x1fff8ffc

00007950 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    7950:	b500      	push	{lr}
    7952:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7954:	f7f9 f902 	bl	b5c <Sys_GetCoreID>
    7958:	4603      	mov	r3, r0
    795a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]--;
    795c:	4a0d      	ldr	r2, [pc, #52]	; (7994 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    795e:	9b01      	ldr	r3, [sp, #4]
    7960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7964:	1e5a      	subs	r2, r3, #1
    7966:	490b      	ldr	r1, [pc, #44]	; (7994 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    7968:	9b01      	ldr	r3, [sp, #4]
    796a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    796e:	4a0a      	ldr	r2, [pc, #40]	; (7998 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x48>)
    7970:	9b01      	ldr	r3, [sp, #4]
    7972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7976:	f003 0301 	and.w	r3, r3, #1
    797a:	2b00      	cmp	r3, #0
    797c:	d106      	bne.n	798c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    797e:	4a05      	ldr	r2, [pc, #20]	; (7994 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    7980:	9b01      	ldr	r3, [sp, #4]
    7982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7986:	2b00      	cmp	r3, #0
    7988:	d100      	bne.n	798c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    798a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    798c:	bf00      	nop
    798e:	b003      	add	sp, #12
    7990:	f85d fb04 	ldr.w	pc, [sp], #4
    7994:	1fff9000 	.word	0x1fff9000
    7998:	1fff8ffc 	.word	0x1fff8ffc

0000799c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    799c:	b500      	push	{lr}
    799e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79a0:	f7f9 f8dc 	bl	b5c <Sys_GetCoreID>
    79a4:	4603      	mov	r3, r0
    79a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId])
    79a8:	4a10      	ldr	r2, [pc, #64]	; (79ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    79aa:	9b01      	ldr	r3, [sp, #4]
    79ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79b0:	2b00      	cmp	r3, #0
    79b2:	d10d      	bne.n	79d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79b4:	f7f8 fff1 	bl	99a <Gpt_schm_read_msr>
    79b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79ba:	9b00      	ldr	r3, [sp, #0]
    79bc:	f003 0301 	and.w	r3, r3, #1
    79c0:	2b00      	cmp	r3, #0
    79c2:	d100      	bne.n	79c6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    79c6:	490a      	ldr	r1, [pc, #40]	; (79f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x54>)
    79c8:	9b01      	ldr	r3, [sp, #4]
    79ca:	9a00      	ldr	r2, [sp, #0]
    79cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]++;
    79d0:	4a06      	ldr	r2, [pc, #24]	; (79ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    79d2:	9b01      	ldr	r3, [sp, #4]
    79d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d8:	1c5a      	adds	r2, r3, #1
    79da:	4904      	ldr	r1, [pc, #16]	; (79ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    79dc:	9b01      	ldr	r3, [sp, #4]
    79de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79e2:	bf00      	nop
    79e4:	b003      	add	sp, #12
    79e6:	f85d fb04 	ldr.w	pc, [sp], #4
    79ea:	bf00      	nop
    79ec:	1fff9008 	.word	0x1fff9008
    79f0:	1fff9004 	.word	0x1fff9004

000079f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    79f4:	b500      	push	{lr}
    79f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79f8:	f7f9 f8b0 	bl	b5c <Sys_GetCoreID>
    79fc:	4603      	mov	r3, r0
    79fe:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]--;
    7a00:	4a0d      	ldr	r2, [pc, #52]	; (7a38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    7a02:	9b01      	ldr	r3, [sp, #4]
    7a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a08:	1e5a      	subs	r2, r3, #1
    7a0a:	490b      	ldr	r1, [pc, #44]	; (7a38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    7a0c:	9b01      	ldr	r3, [sp, #4]
    7a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    7a12:	4a0a      	ldr	r2, [pc, #40]	; (7a3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x48>)
    7a14:	9b01      	ldr	r3, [sp, #4]
    7a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a1a:	f003 0301 	and.w	r3, r3, #1
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d106      	bne.n	7a30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    7a22:	4a05      	ldr	r2, [pc, #20]	; (7a38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    7a24:	9b01      	ldr	r3, [sp, #4]
    7a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	d100      	bne.n	7a30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a30:	bf00      	nop
    7a32:	b003      	add	sp, #12
    7a34:	f85d fb04 	ldr.w	pc, [sp], #4
    7a38:	1fff9008 	.word	0x1fff9008
    7a3c:	1fff9004 	.word	0x1fff9004

00007a40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    7a40:	b500      	push	{lr}
    7a42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a44:	f7f9 f88a 	bl	b5c <Sys_GetCoreID>
    7a48:	4603      	mov	r3, r0
    7a4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId])
    7a4c:	4a10      	ldr	r2, [pc, #64]	; (7a90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    7a4e:	9b01      	ldr	r3, [sp, #4]
    7a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a54:	2b00      	cmp	r3, #0
    7a56:	d10d      	bne.n	7a74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a58:	f7f8 ff9f 	bl	99a <Gpt_schm_read_msr>
    7a5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a5e:	9b00      	ldr	r3, [sp, #0]
    7a60:	f003 0301 	and.w	r3, r3, #1
    7a64:	2b00      	cmp	r3, #0
    7a66:	d100      	bne.n	7a6a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    7a6a:	490a      	ldr	r1, [pc, #40]	; (7a94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x54>)
    7a6c:	9b01      	ldr	r3, [sp, #4]
    7a6e:	9a00      	ldr	r2, [sp, #0]
    7a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]++;
    7a74:	4a06      	ldr	r2, [pc, #24]	; (7a90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a7c:	1c5a      	adds	r2, r3, #1
    7a7e:	4904      	ldr	r1, [pc, #16]	; (7a90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    7a80:	9b01      	ldr	r3, [sp, #4]
    7a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a86:	bf00      	nop
    7a88:	b003      	add	sp, #12
    7a8a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a8e:	bf00      	nop
    7a90:	1fff9010 	.word	0x1fff9010
    7a94:	1fff900c 	.word	0x1fff900c

00007a98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    7a98:	b500      	push	{lr}
    7a9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a9c:	f7f9 f85e 	bl	b5c <Sys_GetCoreID>
    7aa0:	4603      	mov	r3, r0
    7aa2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]--;
    7aa4:	4a0d      	ldr	r2, [pc, #52]	; (7adc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    7aa6:	9b01      	ldr	r3, [sp, #4]
    7aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aac:	1e5a      	subs	r2, r3, #1
    7aae:	490b      	ldr	r1, [pc, #44]	; (7adc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    7ab0:	9b01      	ldr	r3, [sp, #4]
    7ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    7ab6:	4a0a      	ldr	r2, [pc, #40]	; (7ae0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x48>)
    7ab8:	9b01      	ldr	r3, [sp, #4]
    7aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7abe:	f003 0301 	and.w	r3, r3, #1
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d106      	bne.n	7ad4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    7ac6:	4a05      	ldr	r2, [pc, #20]	; (7adc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    7ac8:	9b01      	ldr	r3, [sp, #4]
    7aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d100      	bne.n	7ad4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ad2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ad4:	bf00      	nop
    7ad6:	b003      	add	sp, #12
    7ad8:	f85d fb04 	ldr.w	pc, [sp], #4
    7adc:	1fff9010 	.word	0x1fff9010
    7ae0:	1fff900c 	.word	0x1fff900c

00007ae4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    7ae4:	b500      	push	{lr}
    7ae6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ae8:	f7f9 f838 	bl	b5c <Sys_GetCoreID>
    7aec:	4603      	mov	r3, r0
    7aee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId])
    7af0:	4a10      	ldr	r2, [pc, #64]	; (7b34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    7af2:	9b01      	ldr	r3, [sp, #4]
    7af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af8:	2b00      	cmp	r3, #0
    7afa:	d10d      	bne.n	7b18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7afc:	f7f8 ff4d 	bl	99a <Gpt_schm_read_msr>
    7b00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b02:	9b00      	ldr	r3, [sp, #0]
    7b04:	f003 0301 	and.w	r3, r3, #1
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d100      	bne.n	7b0e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    7b0e:	490a      	ldr	r1, [pc, #40]	; (7b38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x54>)
    7b10:	9b01      	ldr	r3, [sp, #4]
    7b12:	9a00      	ldr	r2, [sp, #0]
    7b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]++;
    7b18:	4a06      	ldr	r2, [pc, #24]	; (7b34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    7b1a:	9b01      	ldr	r3, [sp, #4]
    7b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b20:	1c5a      	adds	r2, r3, #1
    7b22:	4904      	ldr	r1, [pc, #16]	; (7b34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    7b24:	9b01      	ldr	r3, [sp, #4]
    7b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b2a:	bf00      	nop
    7b2c:	b003      	add	sp, #12
    7b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b32:	bf00      	nop
    7b34:	1fff9018 	.word	0x1fff9018
    7b38:	1fff9014 	.word	0x1fff9014

00007b3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    7b3c:	b500      	push	{lr}
    7b3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b40:	f7f9 f80c 	bl	b5c <Sys_GetCoreID>
    7b44:	4603      	mov	r3, r0
    7b46:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]--;
    7b48:	4a0d      	ldr	r2, [pc, #52]	; (7b80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    7b4a:	9b01      	ldr	r3, [sp, #4]
    7b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b50:	1e5a      	subs	r2, r3, #1
    7b52:	490b      	ldr	r1, [pc, #44]	; (7b80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    7b54:	9b01      	ldr	r3, [sp, #4]
    7b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    7b5a:	4a0a      	ldr	r2, [pc, #40]	; (7b84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x48>)
    7b5c:	9b01      	ldr	r3, [sp, #4]
    7b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b62:	f003 0301 	and.w	r3, r3, #1
    7b66:	2b00      	cmp	r3, #0
    7b68:	d106      	bne.n	7b78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    7b6a:	4a05      	ldr	r2, [pc, #20]	; (7b80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    7b6c:	9b01      	ldr	r3, [sp, #4]
    7b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b72:	2b00      	cmp	r3, #0
    7b74:	d100      	bne.n	7b78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b78:	bf00      	nop
    7b7a:	b003      	add	sp, #12
    7b7c:	f85d fb04 	ldr.w	pc, [sp], #4
    7b80:	1fff9018 	.word	0x1fff9018
    7b84:	1fff9014 	.word	0x1fff9014

00007b88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    7b88:	b500      	push	{lr}
    7b8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b8c:	f7f8 ffe6 	bl	b5c <Sys_GetCoreID>
    7b90:	4603      	mov	r3, r0
    7b92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId])
    7b94:	4a10      	ldr	r2, [pc, #64]	; (7bd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    7b96:	9b01      	ldr	r3, [sp, #4]
    7b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d10d      	bne.n	7bbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ba0:	f7f8 fefb 	bl	99a <Gpt_schm_read_msr>
    7ba4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7ba6:	9b00      	ldr	r3, [sp, #0]
    7ba8:	f003 0301 	and.w	r3, r3, #1
    7bac:	2b00      	cmp	r3, #0
    7bae:	d100      	bne.n	7bb2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7bb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    7bb2:	490a      	ldr	r1, [pc, #40]	; (7bdc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x54>)
    7bb4:	9b01      	ldr	r3, [sp, #4]
    7bb6:	9a00      	ldr	r2, [sp, #0]
    7bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]++;
    7bbc:	4a06      	ldr	r2, [pc, #24]	; (7bd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    7bbe:	9b01      	ldr	r3, [sp, #4]
    7bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc4:	1c5a      	adds	r2, r3, #1
    7bc6:	4904      	ldr	r1, [pc, #16]	; (7bd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    7bc8:	9b01      	ldr	r3, [sp, #4]
    7bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bce:	bf00      	nop
    7bd0:	b003      	add	sp, #12
    7bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    7bd6:	bf00      	nop
    7bd8:	1fff9020 	.word	0x1fff9020
    7bdc:	1fff901c 	.word	0x1fff901c

00007be0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    7be0:	b500      	push	{lr}
    7be2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7be4:	f7f8 ffba 	bl	b5c <Sys_GetCoreID>
    7be8:	4603      	mov	r3, r0
    7bea:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]--;
    7bec:	4a0d      	ldr	r2, [pc, #52]	; (7c24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    7bee:	9b01      	ldr	r3, [sp, #4]
    7bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bf4:	1e5a      	subs	r2, r3, #1
    7bf6:	490b      	ldr	r1, [pc, #44]	; (7c24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    7bf8:	9b01      	ldr	r3, [sp, #4]
    7bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    7bfe:	4a0a      	ldr	r2, [pc, #40]	; (7c28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x48>)
    7c00:	9b01      	ldr	r3, [sp, #4]
    7c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c06:	f003 0301 	and.w	r3, r3, #1
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	d106      	bne.n	7c1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    7c0e:	4a05      	ldr	r2, [pc, #20]	; (7c24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    7c10:	9b01      	ldr	r3, [sp, #4]
    7c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c16:	2b00      	cmp	r3, #0
    7c18:	d100      	bne.n	7c1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c1c:	bf00      	nop
    7c1e:	b003      	add	sp, #12
    7c20:	f85d fb04 	ldr.w	pc, [sp], #4
    7c24:	1fff9020 	.word	0x1fff9020
    7c28:	1fff901c 	.word	0x1fff901c

00007c2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    7c2c:	b500      	push	{lr}
    7c2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c30:	f7f8 ff94 	bl	b5c <Sys_GetCoreID>
    7c34:	4603      	mov	r3, r0
    7c36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId])
    7c38:	4a10      	ldr	r2, [pc, #64]	; (7c7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    7c3a:	9b01      	ldr	r3, [sp, #4]
    7c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c40:	2b00      	cmp	r3, #0
    7c42:	d10d      	bne.n	7c60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c44:	f7f8 fea9 	bl	99a <Gpt_schm_read_msr>
    7c48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c4a:	9b00      	ldr	r3, [sp, #0]
    7c4c:	f003 0301 	and.w	r3, r3, #1
    7c50:	2b00      	cmp	r3, #0
    7c52:	d100      	bne.n	7c56 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    7c56:	490a      	ldr	r1, [pc, #40]	; (7c80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x54>)
    7c58:	9b01      	ldr	r3, [sp, #4]
    7c5a:	9a00      	ldr	r2, [sp, #0]
    7c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]++;
    7c60:	4a06      	ldr	r2, [pc, #24]	; (7c7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c68:	1c5a      	adds	r2, r3, #1
    7c6a:	4904      	ldr	r1, [pc, #16]	; (7c7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    7c6c:	9b01      	ldr	r3, [sp, #4]
    7c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c72:	bf00      	nop
    7c74:	b003      	add	sp, #12
    7c76:	f85d fb04 	ldr.w	pc, [sp], #4
    7c7a:	bf00      	nop
    7c7c:	1fff9028 	.word	0x1fff9028
    7c80:	1fff9024 	.word	0x1fff9024

00007c84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    7c84:	b500      	push	{lr}
    7c86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c88:	f7f8 ff68 	bl	b5c <Sys_GetCoreID>
    7c8c:	4603      	mov	r3, r0
    7c8e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]--;
    7c90:	4a0d      	ldr	r2, [pc, #52]	; (7cc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    7c92:	9b01      	ldr	r3, [sp, #4]
    7c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c98:	1e5a      	subs	r2, r3, #1
    7c9a:	490b      	ldr	r1, [pc, #44]	; (7cc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    7c9c:	9b01      	ldr	r3, [sp, #4]
    7c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    7ca2:	4a0a      	ldr	r2, [pc, #40]	; (7ccc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x48>)
    7ca4:	9b01      	ldr	r3, [sp, #4]
    7ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7caa:	f003 0301 	and.w	r3, r3, #1
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d106      	bne.n	7cc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    7cb2:	4a05      	ldr	r2, [pc, #20]	; (7cc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    7cb4:	9b01      	ldr	r3, [sp, #4]
    7cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d100      	bne.n	7cc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7cbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7cc0:	bf00      	nop
    7cc2:	b003      	add	sp, #12
    7cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    7cc8:	1fff9028 	.word	0x1fff9028
    7ccc:	1fff9024 	.word	0x1fff9024

00007cd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    7cd0:	b500      	push	{lr}
    7cd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7cd4:	f7f8 ff42 	bl	b5c <Sys_GetCoreID>
    7cd8:	4603      	mov	r3, r0
    7cda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId])
    7cdc:	4a10      	ldr	r2, [pc, #64]	; (7d20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    7cde:	9b01      	ldr	r3, [sp, #4]
    7ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d10d      	bne.n	7d04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ce8:	f7f8 fe57 	bl	99a <Gpt_schm_read_msr>
    7cec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7cee:	9b00      	ldr	r3, [sp, #0]
    7cf0:	f003 0301 	and.w	r3, r3, #1
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d100      	bne.n	7cfa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7cf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    7cfa:	490a      	ldr	r1, [pc, #40]	; (7d24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x54>)
    7cfc:	9b01      	ldr	r3, [sp, #4]
    7cfe:	9a00      	ldr	r2, [sp, #0]
    7d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]++;
    7d04:	4a06      	ldr	r2, [pc, #24]	; (7d20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    7d06:	9b01      	ldr	r3, [sp, #4]
    7d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d0c:	1c5a      	adds	r2, r3, #1
    7d0e:	4904      	ldr	r1, [pc, #16]	; (7d20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    7d10:	9b01      	ldr	r3, [sp, #4]
    7d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d16:	bf00      	nop
    7d18:	b003      	add	sp, #12
    7d1a:	f85d fb04 	ldr.w	pc, [sp], #4
    7d1e:	bf00      	nop
    7d20:	1fff9030 	.word	0x1fff9030
    7d24:	1fff902c 	.word	0x1fff902c

00007d28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    7d28:	b500      	push	{lr}
    7d2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d2c:	f7f8 ff16 	bl	b5c <Sys_GetCoreID>
    7d30:	4603      	mov	r3, r0
    7d32:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]--;
    7d34:	4a0d      	ldr	r2, [pc, #52]	; (7d6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    7d36:	9b01      	ldr	r3, [sp, #4]
    7d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d3c:	1e5a      	subs	r2, r3, #1
    7d3e:	490b      	ldr	r1, [pc, #44]	; (7d6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    7d40:	9b01      	ldr	r3, [sp, #4]
    7d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    7d46:	4a0a      	ldr	r2, [pc, #40]	; (7d70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x48>)
    7d48:	9b01      	ldr	r3, [sp, #4]
    7d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d4e:	f003 0301 	and.w	r3, r3, #1
    7d52:	2b00      	cmp	r3, #0
    7d54:	d106      	bne.n	7d64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    7d56:	4a05      	ldr	r2, [pc, #20]	; (7d6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    7d58:	9b01      	ldr	r3, [sp, #4]
    7d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d100      	bne.n	7d64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7d62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7d64:	bf00      	nop
    7d66:	b003      	add	sp, #12
    7d68:	f85d fb04 	ldr.w	pc, [sp], #4
    7d6c:	1fff9030 	.word	0x1fff9030
    7d70:	1fff902c 	.word	0x1fff902c

00007d74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    7d74:	b500      	push	{lr}
    7d76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d78:	f7f8 fef0 	bl	b5c <Sys_GetCoreID>
    7d7c:	4603      	mov	r3, r0
    7d7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId])
    7d80:	4a10      	ldr	r2, [pc, #64]	; (7dc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    7d82:	9b01      	ldr	r3, [sp, #4]
    7d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d10d      	bne.n	7da8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7d8c:	f7f8 fe05 	bl	99a <Gpt_schm_read_msr>
    7d90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7d92:	9b00      	ldr	r3, [sp, #0]
    7d94:	f003 0301 	and.w	r3, r3, #1
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d100      	bne.n	7d9e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7d9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    7d9e:	490a      	ldr	r1, [pc, #40]	; (7dc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x54>)
    7da0:	9b01      	ldr	r3, [sp, #4]
    7da2:	9a00      	ldr	r2, [sp, #0]
    7da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]++;
    7da8:	4a06      	ldr	r2, [pc, #24]	; (7dc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    7daa:	9b01      	ldr	r3, [sp, #4]
    7dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7db0:	1c5a      	adds	r2, r3, #1
    7db2:	4904      	ldr	r1, [pc, #16]	; (7dc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    7db4:	9b01      	ldr	r3, [sp, #4]
    7db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dba:	bf00      	nop
    7dbc:	b003      	add	sp, #12
    7dbe:	f85d fb04 	ldr.w	pc, [sp], #4
    7dc2:	bf00      	nop
    7dc4:	1fff9038 	.word	0x1fff9038
    7dc8:	1fff9034 	.word	0x1fff9034

00007dcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    7dcc:	b500      	push	{lr}
    7dce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7dd0:	f7f8 fec4 	bl	b5c <Sys_GetCoreID>
    7dd4:	4603      	mov	r3, r0
    7dd6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]--;
    7dd8:	4a0d      	ldr	r2, [pc, #52]	; (7e10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    7dda:	9b01      	ldr	r3, [sp, #4]
    7ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7de0:	1e5a      	subs	r2, r3, #1
    7de2:	490b      	ldr	r1, [pc, #44]	; (7e10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    7de4:	9b01      	ldr	r3, [sp, #4]
    7de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    7dea:	4a0a      	ldr	r2, [pc, #40]	; (7e14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x48>)
    7dec:	9b01      	ldr	r3, [sp, #4]
    7dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df2:	f003 0301 	and.w	r3, r3, #1
    7df6:	2b00      	cmp	r3, #0
    7df8:	d106      	bne.n	7e08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    7dfa:	4a05      	ldr	r2, [pc, #20]	; (7e10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    7dfc:	9b01      	ldr	r3, [sp, #4]
    7dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e02:	2b00      	cmp	r3, #0
    7e04:	d100      	bne.n	7e08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7e06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7e08:	bf00      	nop
    7e0a:	b003      	add	sp, #12
    7e0c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e10:	1fff9038 	.word	0x1fff9038
    7e14:	1fff9034 	.word	0x1fff9034

00007e18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    7e18:	b500      	push	{lr}
    7e1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e1c:	f7f8 fe9e 	bl	b5c <Sys_GetCoreID>
    7e20:	4603      	mov	r3, r0
    7e22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId])
    7e24:	4a10      	ldr	r2, [pc, #64]	; (7e68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    7e26:	9b01      	ldr	r3, [sp, #4]
    7e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d10d      	bne.n	7e4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7e30:	f7f8 fdb3 	bl	99a <Gpt_schm_read_msr>
    7e34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7e36:	9b00      	ldr	r3, [sp, #0]
    7e38:	f003 0301 	and.w	r3, r3, #1
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d100      	bne.n	7e42 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7e40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    7e42:	490a      	ldr	r1, [pc, #40]	; (7e6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x54>)
    7e44:	9b01      	ldr	r3, [sp, #4]
    7e46:	9a00      	ldr	r2, [sp, #0]
    7e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]++;
    7e4c:	4a06      	ldr	r2, [pc, #24]	; (7e68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    7e4e:	9b01      	ldr	r3, [sp, #4]
    7e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e54:	1c5a      	adds	r2, r3, #1
    7e56:	4904      	ldr	r1, [pc, #16]	; (7e68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    7e58:	9b01      	ldr	r3, [sp, #4]
    7e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e5e:	bf00      	nop
    7e60:	b003      	add	sp, #12
    7e62:	f85d fb04 	ldr.w	pc, [sp], #4
    7e66:	bf00      	nop
    7e68:	1fff9040 	.word	0x1fff9040
    7e6c:	1fff903c 	.word	0x1fff903c

00007e70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    7e70:	b500      	push	{lr}
    7e72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e74:	f7f8 fe72 	bl	b5c <Sys_GetCoreID>
    7e78:	4603      	mov	r3, r0
    7e7a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]--;
    7e7c:	4a0d      	ldr	r2, [pc, #52]	; (7eb4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    7e7e:	9b01      	ldr	r3, [sp, #4]
    7e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e84:	1e5a      	subs	r2, r3, #1
    7e86:	490b      	ldr	r1, [pc, #44]	; (7eb4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    7e88:	9b01      	ldr	r3, [sp, #4]
    7e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    7e8e:	4a0a      	ldr	r2, [pc, #40]	; (7eb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x48>)
    7e90:	9b01      	ldr	r3, [sp, #4]
    7e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e96:	f003 0301 	and.w	r3, r3, #1
    7e9a:	2b00      	cmp	r3, #0
    7e9c:	d106      	bne.n	7eac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    7e9e:	4a05      	ldr	r2, [pc, #20]	; (7eb4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    7ea0:	9b01      	ldr	r3, [sp, #4]
    7ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d100      	bne.n	7eac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7eaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7eac:	bf00      	nop
    7eae:	b003      	add	sp, #12
    7eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    7eb4:	1fff9040 	.word	0x1fff9040
    7eb8:	1fff903c 	.word	0x1fff903c

00007ebc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    7ebc:	b500      	push	{lr}
    7ebe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ec0:	f7f8 fe4c 	bl	b5c <Sys_GetCoreID>
    7ec4:	4603      	mov	r3, r0
    7ec6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId])
    7ec8:	4a10      	ldr	r2, [pc, #64]	; (7f0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    7eca:	9b01      	ldr	r3, [sp, #4]
    7ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d10d      	bne.n	7ef0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ed4:	f7f8 fd61 	bl	99a <Gpt_schm_read_msr>
    7ed8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7eda:	9b00      	ldr	r3, [sp, #0]
    7edc:	f003 0301 	and.w	r3, r3, #1
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	d100      	bne.n	7ee6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7ee4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    7ee6:	490a      	ldr	r1, [pc, #40]	; (7f10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x54>)
    7ee8:	9b01      	ldr	r3, [sp, #4]
    7eea:	9a00      	ldr	r2, [sp, #0]
    7eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7ef0:	4a06      	ldr	r2, [pc, #24]	; (7f0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    7ef2:	9b01      	ldr	r3, [sp, #4]
    7ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ef8:	1c5a      	adds	r2, r3, #1
    7efa:	4904      	ldr	r1, [pc, #16]	; (7f0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    7efc:	9b01      	ldr	r3, [sp, #4]
    7efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7f02:	bf00      	nop
    7f04:	b003      	add	sp, #12
    7f06:	f85d fb04 	ldr.w	pc, [sp], #4
    7f0a:	bf00      	nop
    7f0c:	1fff9048 	.word	0x1fff9048
    7f10:	1fff9044 	.word	0x1fff9044

00007f14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    7f14:	b500      	push	{lr}
    7f16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f18:	f7f8 fe20 	bl	b5c <Sys_GetCoreID>
    7f1c:	4603      	mov	r3, r0
    7f1e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7f20:	4a0d      	ldr	r2, [pc, #52]	; (7f58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    7f22:	9b01      	ldr	r3, [sp, #4]
    7f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f28:	1e5a      	subs	r2, r3, #1
    7f2a:	490b      	ldr	r1, [pc, #44]	; (7f58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    7f2c:	9b01      	ldr	r3, [sp, #4]
    7f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7f32:	4a0a      	ldr	r2, [pc, #40]	; (7f5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x48>)
    7f34:	9b01      	ldr	r3, [sp, #4]
    7f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f3a:	f003 0301 	and.w	r3, r3, #1
    7f3e:	2b00      	cmp	r3, #0
    7f40:	d106      	bne.n	7f50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    7f42:	4a05      	ldr	r2, [pc, #20]	; (7f58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    7f44:	9b01      	ldr	r3, [sp, #4]
    7f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d100      	bne.n	7f50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7f4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7f50:	bf00      	nop
    7f52:	b003      	add	sp, #12
    7f54:	f85d fb04 	ldr.w	pc, [sp], #4
    7f58:	1fff9048 	.word	0x1fff9048
    7f5c:	1fff9044 	.word	0x1fff9044

00007f60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    7f60:	b500      	push	{lr}
    7f62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f64:	f7f8 fdfa 	bl	b5c <Sys_GetCoreID>
    7f68:	4603      	mov	r3, r0
    7f6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId])
    7f6c:	4a10      	ldr	r2, [pc, #64]	; (7fb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    7f6e:	9b01      	ldr	r3, [sp, #4]
    7f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f74:	2b00      	cmp	r3, #0
    7f76:	d10d      	bne.n	7f94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7f78:	f7f8 fd0f 	bl	99a <Gpt_schm_read_msr>
    7f7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7f7e:	9b00      	ldr	r3, [sp, #0]
    7f80:	f003 0301 	and.w	r3, r3, #1
    7f84:	2b00      	cmp	r3, #0
    7f86:	d100      	bne.n	7f8a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7f88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    7f8a:	490a      	ldr	r1, [pc, #40]	; (7fb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x54>)
    7f8c:	9b01      	ldr	r3, [sp, #4]
    7f8e:	9a00      	ldr	r2, [sp, #0]
    7f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7f94:	4a06      	ldr	r2, [pc, #24]	; (7fb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    7f96:	9b01      	ldr	r3, [sp, #4]
    7f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f9c:	1c5a      	adds	r2, r3, #1
    7f9e:	4904      	ldr	r1, [pc, #16]	; (7fb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    7fa0:	9b01      	ldr	r3, [sp, #4]
    7fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fa6:	bf00      	nop
    7fa8:	b003      	add	sp, #12
    7faa:	f85d fb04 	ldr.w	pc, [sp], #4
    7fae:	bf00      	nop
    7fb0:	1fff9050 	.word	0x1fff9050
    7fb4:	1fff904c 	.word	0x1fff904c

00007fb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    7fb8:	b500      	push	{lr}
    7fba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7fbc:	f7f8 fdce 	bl	b5c <Sys_GetCoreID>
    7fc0:	4603      	mov	r3, r0
    7fc2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7fc4:	4a0d      	ldr	r2, [pc, #52]	; (7ffc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    7fc6:	9b01      	ldr	r3, [sp, #4]
    7fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fcc:	1e5a      	subs	r2, r3, #1
    7fce:	490b      	ldr	r1, [pc, #44]	; (7ffc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    7fd0:	9b01      	ldr	r3, [sp, #4]
    7fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    7fd6:	4a0a      	ldr	r2, [pc, #40]	; (8000 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x48>)
    7fd8:	9b01      	ldr	r3, [sp, #4]
    7fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fde:	f003 0301 	and.w	r3, r3, #1
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d106      	bne.n	7ff4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    7fe6:	4a05      	ldr	r2, [pc, #20]	; (7ffc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    7fe8:	9b01      	ldr	r3, [sp, #4]
    7fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fee:	2b00      	cmp	r3, #0
    7ff0:	d100      	bne.n	7ff4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ff2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ff4:	bf00      	nop
    7ff6:	b003      	add	sp, #12
    7ff8:	f85d fb04 	ldr.w	pc, [sp], #4
    7ffc:	1fff9050 	.word	0x1fff9050
    8000:	1fff904c 	.word	0x1fff904c

00008004 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    8004:	b500      	push	{lr}
    8006:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8008:	f7f8 fda8 	bl	b5c <Sys_GetCoreID>
    800c:	4603      	mov	r3, r0
    800e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId])
    8010:	4a10      	ldr	r2, [pc, #64]	; (8054 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8012:	9b01      	ldr	r3, [sp, #4]
    8014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8018:	2b00      	cmp	r3, #0
    801a:	d10d      	bne.n	8038 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    801c:	f7f8 fcbd 	bl	99a <Gpt_schm_read_msr>
    8020:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8022:	9b00      	ldr	r3, [sp, #0]
    8024:	f003 0301 	and.w	r3, r3, #1
    8028:	2b00      	cmp	r3, #0
    802a:	d100      	bne.n	802e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    802c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    802e:	490a      	ldr	r1, [pc, #40]	; (8058 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x54>)
    8030:	9b01      	ldr	r3, [sp, #4]
    8032:	9a00      	ldr	r2, [sp, #0]
    8034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]++;
    8038:	4a06      	ldr	r2, [pc, #24]	; (8054 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    803a:	9b01      	ldr	r3, [sp, #4]
    803c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8040:	1c5a      	adds	r2, r3, #1
    8042:	4904      	ldr	r1, [pc, #16]	; (8054 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8044:	9b01      	ldr	r3, [sp, #4]
    8046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    804a:	bf00      	nop
    804c:	b003      	add	sp, #12
    804e:	f85d fb04 	ldr.w	pc, [sp], #4
    8052:	bf00      	nop
    8054:	1fff9058 	.word	0x1fff9058
    8058:	1fff9054 	.word	0x1fff9054

0000805c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    805c:	b500      	push	{lr}
    805e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8060:	f7f8 fd7c 	bl	b5c <Sys_GetCoreID>
    8064:	4603      	mov	r3, r0
    8066:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]--;
    8068:	4a0d      	ldr	r2, [pc, #52]	; (80a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    806a:	9b01      	ldr	r3, [sp, #4]
    806c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8070:	1e5a      	subs	r2, r3, #1
    8072:	490b      	ldr	r1, [pc, #44]	; (80a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8074:	9b01      	ldr	r3, [sp, #4]
    8076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    807a:	4a0a      	ldr	r2, [pc, #40]	; (80a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x48>)
    807c:	9b01      	ldr	r3, [sp, #4]
    807e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8082:	f003 0301 	and.w	r3, r3, #1
    8086:	2b00      	cmp	r3, #0
    8088:	d106      	bne.n	8098 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    808a:	4a05      	ldr	r2, [pc, #20]	; (80a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    808c:	9b01      	ldr	r3, [sp, #4]
    808e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8092:	2b00      	cmp	r3, #0
    8094:	d100      	bne.n	8098 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8096:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8098:	bf00      	nop
    809a:	b003      	add	sp, #12
    809c:	f85d fb04 	ldr.w	pc, [sp], #4
    80a0:	1fff9058 	.word	0x1fff9058
    80a4:	1fff9054 	.word	0x1fff9054

000080a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    80a8:	b500      	push	{lr}
    80aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80ac:	f7f8 fd56 	bl	b5c <Sys_GetCoreID>
    80b0:	4603      	mov	r3, r0
    80b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId])
    80b4:	4a10      	ldr	r2, [pc, #64]	; (80f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    80b6:	9b01      	ldr	r3, [sp, #4]
    80b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80bc:	2b00      	cmp	r3, #0
    80be:	d10d      	bne.n	80dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80c0:	f7f8 fc6b 	bl	99a <Gpt_schm_read_msr>
    80c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80c6:	9b00      	ldr	r3, [sp, #0]
    80c8:	f003 0301 	and.w	r3, r3, #1
    80cc:	2b00      	cmp	r3, #0
    80ce:	d100      	bne.n	80d2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    80d2:	490a      	ldr	r1, [pc, #40]	; (80fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x54>)
    80d4:	9b01      	ldr	r3, [sp, #4]
    80d6:	9a00      	ldr	r2, [sp, #0]
    80d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]++;
    80dc:	4a06      	ldr	r2, [pc, #24]	; (80f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    80de:	9b01      	ldr	r3, [sp, #4]
    80e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80e4:	1c5a      	adds	r2, r3, #1
    80e6:	4904      	ldr	r1, [pc, #16]	; (80f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    80e8:	9b01      	ldr	r3, [sp, #4]
    80ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80ee:	bf00      	nop
    80f0:	b003      	add	sp, #12
    80f2:	f85d fb04 	ldr.w	pc, [sp], #4
    80f6:	bf00      	nop
    80f8:	1fff9060 	.word	0x1fff9060
    80fc:	1fff905c 	.word	0x1fff905c

00008100 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8100:	b500      	push	{lr}
    8102:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8104:	f7f8 fd2a 	bl	b5c <Sys_GetCoreID>
    8108:	4603      	mov	r3, r0
    810a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]--;
    810c:	4a0d      	ldr	r2, [pc, #52]	; (8144 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    810e:	9b01      	ldr	r3, [sp, #4]
    8110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8114:	1e5a      	subs	r2, r3, #1
    8116:	490b      	ldr	r1, [pc, #44]	; (8144 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8118:	9b01      	ldr	r3, [sp, #4]
    811a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    811e:	4a0a      	ldr	r2, [pc, #40]	; (8148 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x48>)
    8120:	9b01      	ldr	r3, [sp, #4]
    8122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8126:	f003 0301 	and.w	r3, r3, #1
    812a:	2b00      	cmp	r3, #0
    812c:	d106      	bne.n	813c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    812e:	4a05      	ldr	r2, [pc, #20]	; (8144 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8130:	9b01      	ldr	r3, [sp, #4]
    8132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8136:	2b00      	cmp	r3, #0
    8138:	d100      	bne.n	813c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    813a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    813c:	bf00      	nop
    813e:	b003      	add	sp, #12
    8140:	f85d fb04 	ldr.w	pc, [sp], #4
    8144:	1fff9060 	.word	0x1fff9060
    8148:	1fff905c 	.word	0x1fff905c

0000814c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    814c:	b500      	push	{lr}
    814e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8150:	f7f8 fd04 	bl	b5c <Sys_GetCoreID>
    8154:	4603      	mov	r3, r0
    8156:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId])
    8158:	4a10      	ldr	r2, [pc, #64]	; (819c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    815a:	9b01      	ldr	r3, [sp, #4]
    815c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8160:	2b00      	cmp	r3, #0
    8162:	d10d      	bne.n	8180 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8164:	f7f8 fc19 	bl	99a <Gpt_schm_read_msr>
    8168:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    816a:	9b00      	ldr	r3, [sp, #0]
    816c:	f003 0301 	and.w	r3, r3, #1
    8170:	2b00      	cmp	r3, #0
    8172:	d100      	bne.n	8176 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8174:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    8176:	490a      	ldr	r1, [pc, #40]	; (81a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x54>)
    8178:	9b01      	ldr	r3, [sp, #4]
    817a:	9a00      	ldr	r2, [sp, #0]
    817c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]++;
    8180:	4a06      	ldr	r2, [pc, #24]	; (819c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8182:	9b01      	ldr	r3, [sp, #4]
    8184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8188:	1c5a      	adds	r2, r3, #1
    818a:	4904      	ldr	r1, [pc, #16]	; (819c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    818c:	9b01      	ldr	r3, [sp, #4]
    818e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8192:	bf00      	nop
    8194:	b003      	add	sp, #12
    8196:	f85d fb04 	ldr.w	pc, [sp], #4
    819a:	bf00      	nop
    819c:	1fff9068 	.word	0x1fff9068
    81a0:	1fff9064 	.word	0x1fff9064

000081a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    81a4:	b500      	push	{lr}
    81a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81a8:	f7f8 fcd8 	bl	b5c <Sys_GetCoreID>
    81ac:	4603      	mov	r3, r0
    81ae:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]--;
    81b0:	4a0d      	ldr	r2, [pc, #52]	; (81e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    81b2:	9b01      	ldr	r3, [sp, #4]
    81b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81b8:	1e5a      	subs	r2, r3, #1
    81ba:	490b      	ldr	r1, [pc, #44]	; (81e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    81bc:	9b01      	ldr	r3, [sp, #4]
    81be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    81c2:	4a0a      	ldr	r2, [pc, #40]	; (81ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x48>)
    81c4:	9b01      	ldr	r3, [sp, #4]
    81c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ca:	f003 0301 	and.w	r3, r3, #1
    81ce:	2b00      	cmp	r3, #0
    81d0:	d106      	bne.n	81e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    81d2:	4a05      	ldr	r2, [pc, #20]	; (81e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    81d4:	9b01      	ldr	r3, [sp, #4]
    81d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81da:	2b00      	cmp	r3, #0
    81dc:	d100      	bne.n	81e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    81de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    81e0:	bf00      	nop
    81e2:	b003      	add	sp, #12
    81e4:	f85d fb04 	ldr.w	pc, [sp], #4
    81e8:	1fff9068 	.word	0x1fff9068
    81ec:	1fff9064 	.word	0x1fff9064

000081f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    81f0:	b500      	push	{lr}
    81f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81f4:	f7f8 fcb2 	bl	b5c <Sys_GetCoreID>
    81f8:	4603      	mov	r3, r0
    81fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId])
    81fc:	4a10      	ldr	r2, [pc, #64]	; (8240 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    81fe:	9b01      	ldr	r3, [sp, #4]
    8200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8204:	2b00      	cmp	r3, #0
    8206:	d10d      	bne.n	8224 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8208:	f7f8 fbc7 	bl	99a <Gpt_schm_read_msr>
    820c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    820e:	9b00      	ldr	r3, [sp, #0]
    8210:	f003 0301 	and.w	r3, r3, #1
    8214:	2b00      	cmp	r3, #0
    8216:	d100      	bne.n	821a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8218:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    821a:	490a      	ldr	r1, [pc, #40]	; (8244 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x54>)
    821c:	9b01      	ldr	r3, [sp, #4]
    821e:	9a00      	ldr	r2, [sp, #0]
    8220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]++;
    8224:	4a06      	ldr	r2, [pc, #24]	; (8240 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8226:	9b01      	ldr	r3, [sp, #4]
    8228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    822c:	1c5a      	adds	r2, r3, #1
    822e:	4904      	ldr	r1, [pc, #16]	; (8240 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8230:	9b01      	ldr	r3, [sp, #4]
    8232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8236:	bf00      	nop
    8238:	b003      	add	sp, #12
    823a:	f85d fb04 	ldr.w	pc, [sp], #4
    823e:	bf00      	nop
    8240:	1fff9070 	.word	0x1fff9070
    8244:	1fff906c 	.word	0x1fff906c

00008248 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8248:	b500      	push	{lr}
    824a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    824c:	f7f8 fc86 	bl	b5c <Sys_GetCoreID>
    8250:	4603      	mov	r3, r0
    8252:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]--;
    8254:	4a0d      	ldr	r2, [pc, #52]	; (828c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8256:	9b01      	ldr	r3, [sp, #4]
    8258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    825c:	1e5a      	subs	r2, r3, #1
    825e:	490b      	ldr	r1, [pc, #44]	; (828c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8260:	9b01      	ldr	r3, [sp, #4]
    8262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    8266:	4a0a      	ldr	r2, [pc, #40]	; (8290 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x48>)
    8268:	9b01      	ldr	r3, [sp, #4]
    826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    826e:	f003 0301 	and.w	r3, r3, #1
    8272:	2b00      	cmp	r3, #0
    8274:	d106      	bne.n	8284 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    8276:	4a05      	ldr	r2, [pc, #20]	; (828c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8278:	9b01      	ldr	r3, [sp, #4]
    827a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    827e:	2b00      	cmp	r3, #0
    8280:	d100      	bne.n	8284 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8282:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8284:	bf00      	nop
    8286:	b003      	add	sp, #12
    8288:	f85d fb04 	ldr.w	pc, [sp], #4
    828c:	1fff9070 	.word	0x1fff9070
    8290:	1fff906c 	.word	0x1fff906c

00008294 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8294:	b500      	push	{lr}
    8296:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8298:	f7f8 fc60 	bl	b5c <Sys_GetCoreID>
    829c:	4603      	mov	r3, r0
    829e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId])
    82a0:	4a10      	ldr	r2, [pc, #64]	; (82e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    82a2:	9b01      	ldr	r3, [sp, #4]
    82a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82a8:	2b00      	cmp	r3, #0
    82aa:	d10d      	bne.n	82c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    82ac:	f7f8 fb75 	bl	99a <Gpt_schm_read_msr>
    82b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    82b2:	9b00      	ldr	r3, [sp, #0]
    82b4:	f003 0301 	and.w	r3, r3, #1
    82b8:	2b00      	cmp	r3, #0
    82ba:	d100      	bne.n	82be <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    82bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    82be:	490a      	ldr	r1, [pc, #40]	; (82e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x54>)
    82c0:	9b01      	ldr	r3, [sp, #4]
    82c2:	9a00      	ldr	r2, [sp, #0]
    82c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]++;
    82c8:	4a06      	ldr	r2, [pc, #24]	; (82e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    82ca:	9b01      	ldr	r3, [sp, #4]
    82cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d0:	1c5a      	adds	r2, r3, #1
    82d2:	4904      	ldr	r1, [pc, #16]	; (82e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    82d4:	9b01      	ldr	r3, [sp, #4]
    82d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82da:	bf00      	nop
    82dc:	b003      	add	sp, #12
    82de:	f85d fb04 	ldr.w	pc, [sp], #4
    82e2:	bf00      	nop
    82e4:	1fff9078 	.word	0x1fff9078
    82e8:	1fff9074 	.word	0x1fff9074

000082ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    82ec:	b500      	push	{lr}
    82ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82f0:	f7f8 fc34 	bl	b5c <Sys_GetCoreID>
    82f4:	4603      	mov	r3, r0
    82f6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]--;
    82f8:	4a0d      	ldr	r2, [pc, #52]	; (8330 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    82fa:	9b01      	ldr	r3, [sp, #4]
    82fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8300:	1e5a      	subs	r2, r3, #1
    8302:	490b      	ldr	r1, [pc, #44]	; (8330 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8304:	9b01      	ldr	r3, [sp, #4]
    8306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    830a:	4a0a      	ldr	r2, [pc, #40]	; (8334 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x48>)
    830c:	9b01      	ldr	r3, [sp, #4]
    830e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8312:	f003 0301 	and.w	r3, r3, #1
    8316:	2b00      	cmp	r3, #0
    8318:	d106      	bne.n	8328 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    831a:	4a05      	ldr	r2, [pc, #20]	; (8330 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    831c:	9b01      	ldr	r3, [sp, #4]
    831e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8322:	2b00      	cmp	r3, #0
    8324:	d100      	bne.n	8328 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8326:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8328:	bf00      	nop
    832a:	b003      	add	sp, #12
    832c:	f85d fb04 	ldr.w	pc, [sp], #4
    8330:	1fff9078 	.word	0x1fff9078
    8334:	1fff9074 	.word	0x1fff9074

00008338 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8338:	b500      	push	{lr}
    833a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    833c:	f7f8 fc0e 	bl	b5c <Sys_GetCoreID>
    8340:	4603      	mov	r3, r0
    8342:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId])
    8344:	4a10      	ldr	r2, [pc, #64]	; (8388 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8346:	9b01      	ldr	r3, [sp, #4]
    8348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    834c:	2b00      	cmp	r3, #0
    834e:	d10d      	bne.n	836c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8350:	f7f8 fb23 	bl	99a <Gpt_schm_read_msr>
    8354:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8356:	9b00      	ldr	r3, [sp, #0]
    8358:	f003 0301 	and.w	r3, r3, #1
    835c:	2b00      	cmp	r3, #0
    835e:	d100      	bne.n	8362 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8360:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8362:	490a      	ldr	r1, [pc, #40]	; (838c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x54>)
    8364:	9b01      	ldr	r3, [sp, #4]
    8366:	9a00      	ldr	r2, [sp, #0]
    8368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]++;
    836c:	4a06      	ldr	r2, [pc, #24]	; (8388 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    836e:	9b01      	ldr	r3, [sp, #4]
    8370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8374:	1c5a      	adds	r2, r3, #1
    8376:	4904      	ldr	r1, [pc, #16]	; (8388 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8378:	9b01      	ldr	r3, [sp, #4]
    837a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    837e:	bf00      	nop
    8380:	b003      	add	sp, #12
    8382:	f85d fb04 	ldr.w	pc, [sp], #4
    8386:	bf00      	nop
    8388:	1fff9080 	.word	0x1fff9080
    838c:	1fff907c 	.word	0x1fff907c

00008390 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8390:	b500      	push	{lr}
    8392:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8394:	f7f8 fbe2 	bl	b5c <Sys_GetCoreID>
    8398:	4603      	mov	r3, r0
    839a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]--;
    839c:	4a0d      	ldr	r2, [pc, #52]	; (83d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    839e:	9b01      	ldr	r3, [sp, #4]
    83a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83a4:	1e5a      	subs	r2, r3, #1
    83a6:	490b      	ldr	r1, [pc, #44]	; (83d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    83a8:	9b01      	ldr	r3, [sp, #4]
    83aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    83ae:	4a0a      	ldr	r2, [pc, #40]	; (83d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x48>)
    83b0:	9b01      	ldr	r3, [sp, #4]
    83b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b6:	f003 0301 	and.w	r3, r3, #1
    83ba:	2b00      	cmp	r3, #0
    83bc:	d106      	bne.n	83cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    83be:	4a05      	ldr	r2, [pc, #20]	; (83d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    83c0:	9b01      	ldr	r3, [sp, #4]
    83c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c6:	2b00      	cmp	r3, #0
    83c8:	d100      	bne.n	83cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    83ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    83cc:	bf00      	nop
    83ce:	b003      	add	sp, #12
    83d0:	f85d fb04 	ldr.w	pc, [sp], #4
    83d4:	1fff9080 	.word	0x1fff9080
    83d8:	1fff907c 	.word	0x1fff907c

000083dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    83dc:	b500      	push	{lr}
    83de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83e0:	f7f8 fbbc 	bl	b5c <Sys_GetCoreID>
    83e4:	4603      	mov	r3, r0
    83e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId])
    83e8:	4a10      	ldr	r2, [pc, #64]	; (842c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    83ea:	9b01      	ldr	r3, [sp, #4]
    83ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83f0:	2b00      	cmp	r3, #0
    83f2:	d10d      	bne.n	8410 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    83f4:	f7f8 fad1 	bl	99a <Gpt_schm_read_msr>
    83f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    83fa:	9b00      	ldr	r3, [sp, #0]
    83fc:	f003 0301 	and.w	r3, r3, #1
    8400:	2b00      	cmp	r3, #0
    8402:	d100      	bne.n	8406 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8404:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    8406:	490a      	ldr	r1, [pc, #40]	; (8430 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x54>)
    8408:	9b01      	ldr	r3, [sp, #4]
    840a:	9a00      	ldr	r2, [sp, #0]
    840c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]++;
    8410:	4a06      	ldr	r2, [pc, #24]	; (842c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8412:	9b01      	ldr	r3, [sp, #4]
    8414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8418:	1c5a      	adds	r2, r3, #1
    841a:	4904      	ldr	r1, [pc, #16]	; (842c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    841c:	9b01      	ldr	r3, [sp, #4]
    841e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8422:	bf00      	nop
    8424:	b003      	add	sp, #12
    8426:	f85d fb04 	ldr.w	pc, [sp], #4
    842a:	bf00      	nop
    842c:	1fff9088 	.word	0x1fff9088
    8430:	1fff9084 	.word	0x1fff9084

00008434 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8434:	b500      	push	{lr}
    8436:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8438:	f7f8 fb90 	bl	b5c <Sys_GetCoreID>
    843c:	4603      	mov	r3, r0
    843e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]--;
    8440:	4a0d      	ldr	r2, [pc, #52]	; (8478 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8442:	9b01      	ldr	r3, [sp, #4]
    8444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8448:	1e5a      	subs	r2, r3, #1
    844a:	490b      	ldr	r1, [pc, #44]	; (8478 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    844c:	9b01      	ldr	r3, [sp, #4]
    844e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    8452:	4a0a      	ldr	r2, [pc, #40]	; (847c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x48>)
    8454:	9b01      	ldr	r3, [sp, #4]
    8456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    845a:	f003 0301 	and.w	r3, r3, #1
    845e:	2b00      	cmp	r3, #0
    8460:	d106      	bne.n	8470 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    8462:	4a05      	ldr	r2, [pc, #20]	; (8478 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8464:	9b01      	ldr	r3, [sp, #4]
    8466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    846a:	2b00      	cmp	r3, #0
    846c:	d100      	bne.n	8470 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    846e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8470:	bf00      	nop
    8472:	b003      	add	sp, #12
    8474:	f85d fb04 	ldr.w	pc, [sp], #4
    8478:	1fff9088 	.word	0x1fff9088
    847c:	1fff9084 	.word	0x1fff9084

00008480 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8480:	b500      	push	{lr}
    8482:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8484:	f7f8 fb6a 	bl	b5c <Sys_GetCoreID>
    8488:	4603      	mov	r3, r0
    848a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId])
    848c:	4a10      	ldr	r2, [pc, #64]	; (84d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    848e:	9b01      	ldr	r3, [sp, #4]
    8490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8494:	2b00      	cmp	r3, #0
    8496:	d10d      	bne.n	84b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8498:	f7f8 fa7f 	bl	99a <Gpt_schm_read_msr>
    849c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    849e:	9b00      	ldr	r3, [sp, #0]
    84a0:	f003 0301 	and.w	r3, r3, #1
    84a4:	2b00      	cmp	r3, #0
    84a6:	d100      	bne.n	84aa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    84a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    84aa:	490a      	ldr	r1, [pc, #40]	; (84d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x54>)
    84ac:	9b01      	ldr	r3, [sp, #4]
    84ae:	9a00      	ldr	r2, [sp, #0]
    84b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]++;
    84b4:	4a06      	ldr	r2, [pc, #24]	; (84d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    84b6:	9b01      	ldr	r3, [sp, #4]
    84b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84bc:	1c5a      	adds	r2, r3, #1
    84be:	4904      	ldr	r1, [pc, #16]	; (84d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    84c0:	9b01      	ldr	r3, [sp, #4]
    84c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    84c6:	bf00      	nop
    84c8:	b003      	add	sp, #12
    84ca:	f85d fb04 	ldr.w	pc, [sp], #4
    84ce:	bf00      	nop
    84d0:	1fff9090 	.word	0x1fff9090
    84d4:	1fff908c 	.word	0x1fff908c

000084d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    84d8:	b500      	push	{lr}
    84da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84dc:	f7f8 fb3e 	bl	b5c <Sys_GetCoreID>
    84e0:	4603      	mov	r3, r0
    84e2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]--;
    84e4:	4a0d      	ldr	r2, [pc, #52]	; (851c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    84e6:	9b01      	ldr	r3, [sp, #4]
    84e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ec:	1e5a      	subs	r2, r3, #1
    84ee:	490b      	ldr	r1, [pc, #44]	; (851c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    84f0:	9b01      	ldr	r3, [sp, #4]
    84f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    84f6:	4a0a      	ldr	r2, [pc, #40]	; (8520 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x48>)
    84f8:	9b01      	ldr	r3, [sp, #4]
    84fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84fe:	f003 0301 	and.w	r3, r3, #1
    8502:	2b00      	cmp	r3, #0
    8504:	d106      	bne.n	8514 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    8506:	4a05      	ldr	r2, [pc, #20]	; (851c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8508:	9b01      	ldr	r3, [sp, #4]
    850a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    850e:	2b00      	cmp	r3, #0
    8510:	d100      	bne.n	8514 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8512:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8514:	bf00      	nop
    8516:	b003      	add	sp, #12
    8518:	f85d fb04 	ldr.w	pc, [sp], #4
    851c:	1fff9090 	.word	0x1fff9090
    8520:	1fff908c 	.word	0x1fff908c

00008524 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8524:	b500      	push	{lr}
    8526:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8528:	f7f8 fb18 	bl	b5c <Sys_GetCoreID>
    852c:	4603      	mov	r3, r0
    852e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId])
    8530:	4a10      	ldr	r2, [pc, #64]	; (8574 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8532:	9b01      	ldr	r3, [sp, #4]
    8534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8538:	2b00      	cmp	r3, #0
    853a:	d10d      	bne.n	8558 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    853c:	f7f8 fa2d 	bl	99a <Gpt_schm_read_msr>
    8540:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8542:	9b00      	ldr	r3, [sp, #0]
    8544:	f003 0301 	and.w	r3, r3, #1
    8548:	2b00      	cmp	r3, #0
    854a:	d100      	bne.n	854e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    854c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    854e:	490a      	ldr	r1, [pc, #40]	; (8578 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x54>)
    8550:	9b01      	ldr	r3, [sp, #4]
    8552:	9a00      	ldr	r2, [sp, #0]
    8554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]++;
    8558:	4a06      	ldr	r2, [pc, #24]	; (8574 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    855a:	9b01      	ldr	r3, [sp, #4]
    855c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8560:	1c5a      	adds	r2, r3, #1
    8562:	4904      	ldr	r1, [pc, #16]	; (8574 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8564:	9b01      	ldr	r3, [sp, #4]
    8566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    856a:	bf00      	nop
    856c:	b003      	add	sp, #12
    856e:	f85d fb04 	ldr.w	pc, [sp], #4
    8572:	bf00      	nop
    8574:	1fff9098 	.word	0x1fff9098
    8578:	1fff9094 	.word	0x1fff9094

0000857c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    857c:	b500      	push	{lr}
    857e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8580:	f7f8 faec 	bl	b5c <Sys_GetCoreID>
    8584:	4603      	mov	r3, r0
    8586:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]--;
    8588:	4a0d      	ldr	r2, [pc, #52]	; (85c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    858a:	9b01      	ldr	r3, [sp, #4]
    858c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8590:	1e5a      	subs	r2, r3, #1
    8592:	490b      	ldr	r1, [pc, #44]	; (85c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8594:	9b01      	ldr	r3, [sp, #4]
    8596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    859a:	4a0a      	ldr	r2, [pc, #40]	; (85c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x48>)
    859c:	9b01      	ldr	r3, [sp, #4]
    859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85a2:	f003 0301 	and.w	r3, r3, #1
    85a6:	2b00      	cmp	r3, #0
    85a8:	d106      	bne.n	85b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    85aa:	4a05      	ldr	r2, [pc, #20]	; (85c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    85ac:	9b01      	ldr	r3, [sp, #4]
    85ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d100      	bne.n	85b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85b8:	bf00      	nop
    85ba:	b003      	add	sp, #12
    85bc:	f85d fb04 	ldr.w	pc, [sp], #4
    85c0:	1fff9098 	.word	0x1fff9098
    85c4:	1fff9094 	.word	0x1fff9094

000085c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    85c8:	b500      	push	{lr}
    85ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85cc:	f7f8 fac6 	bl	b5c <Sys_GetCoreID>
    85d0:	4603      	mov	r3, r0
    85d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId])
    85d4:	4a10      	ldr	r2, [pc, #64]	; (8618 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    85d6:	9b01      	ldr	r3, [sp, #4]
    85d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85dc:	2b00      	cmp	r3, #0
    85de:	d10d      	bne.n	85fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    85e0:	f7f8 f9db 	bl	99a <Gpt_schm_read_msr>
    85e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    85e6:	9b00      	ldr	r3, [sp, #0]
    85e8:	f003 0301 	and.w	r3, r3, #1
    85ec:	2b00      	cmp	r3, #0
    85ee:	d100      	bne.n	85f2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    85f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    85f2:	490a      	ldr	r1, [pc, #40]	; (861c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x54>)
    85f4:	9b01      	ldr	r3, [sp, #4]
    85f6:	9a00      	ldr	r2, [sp, #0]
    85f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]++;
    85fc:	4a06      	ldr	r2, [pc, #24]	; (8618 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    85fe:	9b01      	ldr	r3, [sp, #4]
    8600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8604:	1c5a      	adds	r2, r3, #1
    8606:	4904      	ldr	r1, [pc, #16]	; (8618 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8608:	9b01      	ldr	r3, [sp, #4]
    860a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    860e:	bf00      	nop
    8610:	b003      	add	sp, #12
    8612:	f85d fb04 	ldr.w	pc, [sp], #4
    8616:	bf00      	nop
    8618:	1fff90a0 	.word	0x1fff90a0
    861c:	1fff909c 	.word	0x1fff909c

00008620 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8620:	b500      	push	{lr}
    8622:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8624:	f7f8 fa9a 	bl	b5c <Sys_GetCoreID>
    8628:	4603      	mov	r3, r0
    862a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]--;
    862c:	4a0d      	ldr	r2, [pc, #52]	; (8664 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    862e:	9b01      	ldr	r3, [sp, #4]
    8630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8634:	1e5a      	subs	r2, r3, #1
    8636:	490b      	ldr	r1, [pc, #44]	; (8664 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8638:	9b01      	ldr	r3, [sp, #4]
    863a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    863e:	4a0a      	ldr	r2, [pc, #40]	; (8668 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x48>)
    8640:	9b01      	ldr	r3, [sp, #4]
    8642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8646:	f003 0301 	and.w	r3, r3, #1
    864a:	2b00      	cmp	r3, #0
    864c:	d106      	bne.n	865c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    864e:	4a05      	ldr	r2, [pc, #20]	; (8664 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8650:	9b01      	ldr	r3, [sp, #4]
    8652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8656:	2b00      	cmp	r3, #0
    8658:	d100      	bne.n	865c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    865a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    865c:	bf00      	nop
    865e:	b003      	add	sp, #12
    8660:	f85d fb04 	ldr.w	pc, [sp], #4
    8664:	1fff90a0 	.word	0x1fff90a0
    8668:	1fff909c 	.word	0x1fff909c

0000866c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    866c:	b500      	push	{lr}
    866e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8670:	f7f8 fa74 	bl	b5c <Sys_GetCoreID>
    8674:	4603      	mov	r3, r0
    8676:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId])
    8678:	4a10      	ldr	r2, [pc, #64]	; (86bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    867a:	9b01      	ldr	r3, [sp, #4]
    867c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8680:	2b00      	cmp	r3, #0
    8682:	d10d      	bne.n	86a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8684:	f7f8 f989 	bl	99a <Gpt_schm_read_msr>
    8688:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    868a:	9b00      	ldr	r3, [sp, #0]
    868c:	f003 0301 	and.w	r3, r3, #1
    8690:	2b00      	cmp	r3, #0
    8692:	d100      	bne.n	8696 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8694:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    8696:	490a      	ldr	r1, [pc, #40]	; (86c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x54>)
    8698:	9b01      	ldr	r3, [sp, #4]
    869a:	9a00      	ldr	r2, [sp, #0]
    869c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]++;
    86a0:	4a06      	ldr	r2, [pc, #24]	; (86bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    86a2:	9b01      	ldr	r3, [sp, #4]
    86a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86a8:	1c5a      	adds	r2, r3, #1
    86aa:	4904      	ldr	r1, [pc, #16]	; (86bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    86ac:	9b01      	ldr	r3, [sp, #4]
    86ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86b2:	bf00      	nop
    86b4:	b003      	add	sp, #12
    86b6:	f85d fb04 	ldr.w	pc, [sp], #4
    86ba:	bf00      	nop
    86bc:	1fff90a8 	.word	0x1fff90a8
    86c0:	1fff90a4 	.word	0x1fff90a4

000086c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    86c4:	b500      	push	{lr}
    86c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86c8:	f7f8 fa48 	bl	b5c <Sys_GetCoreID>
    86cc:	4603      	mov	r3, r0
    86ce:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]--;
    86d0:	4a0d      	ldr	r2, [pc, #52]	; (8708 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    86d2:	9b01      	ldr	r3, [sp, #4]
    86d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86d8:	1e5a      	subs	r2, r3, #1
    86da:	490b      	ldr	r1, [pc, #44]	; (8708 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    86dc:	9b01      	ldr	r3, [sp, #4]
    86de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    86e2:	4a0a      	ldr	r2, [pc, #40]	; (870c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x48>)
    86e4:	9b01      	ldr	r3, [sp, #4]
    86e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ea:	f003 0301 	and.w	r3, r3, #1
    86ee:	2b00      	cmp	r3, #0
    86f0:	d106      	bne.n	8700 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    86f2:	4a05      	ldr	r2, [pc, #20]	; (8708 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    86f4:	9b01      	ldr	r3, [sp, #4]
    86f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86fa:	2b00      	cmp	r3, #0
    86fc:	d100      	bne.n	8700 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    86fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8700:	bf00      	nop
    8702:	b003      	add	sp, #12
    8704:	f85d fb04 	ldr.w	pc, [sp], #4
    8708:	1fff90a8 	.word	0x1fff90a8
    870c:	1fff90a4 	.word	0x1fff90a4

00008710 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8710:	b500      	push	{lr}
    8712:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8714:	f7f8 fa22 	bl	b5c <Sys_GetCoreID>
    8718:	4603      	mov	r3, r0
    871a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId])
    871c:	4a10      	ldr	r2, [pc, #64]	; (8760 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    871e:	9b01      	ldr	r3, [sp, #4]
    8720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8724:	2b00      	cmp	r3, #0
    8726:	d10d      	bne.n	8744 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8728:	f7f8 f937 	bl	99a <Gpt_schm_read_msr>
    872c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    872e:	9b00      	ldr	r3, [sp, #0]
    8730:	f003 0301 	and.w	r3, r3, #1
    8734:	2b00      	cmp	r3, #0
    8736:	d100      	bne.n	873a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8738:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    873a:	490a      	ldr	r1, [pc, #40]	; (8764 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x54>)
    873c:	9b01      	ldr	r3, [sp, #4]
    873e:	9a00      	ldr	r2, [sp, #0]
    8740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]++;
    8744:	4a06      	ldr	r2, [pc, #24]	; (8760 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8746:	9b01      	ldr	r3, [sp, #4]
    8748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    874c:	1c5a      	adds	r2, r3, #1
    874e:	4904      	ldr	r1, [pc, #16]	; (8760 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8750:	9b01      	ldr	r3, [sp, #4]
    8752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8756:	bf00      	nop
    8758:	b003      	add	sp, #12
    875a:	f85d fb04 	ldr.w	pc, [sp], #4
    875e:	bf00      	nop
    8760:	1fff90b0 	.word	0x1fff90b0
    8764:	1fff90ac 	.word	0x1fff90ac

00008768 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8768:	b500      	push	{lr}
    876a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    876c:	f7f8 f9f6 	bl	b5c <Sys_GetCoreID>
    8770:	4603      	mov	r3, r0
    8772:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]--;
    8774:	4a0d      	ldr	r2, [pc, #52]	; (87ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8776:	9b01      	ldr	r3, [sp, #4]
    8778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    877c:	1e5a      	subs	r2, r3, #1
    877e:	490b      	ldr	r1, [pc, #44]	; (87ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8780:	9b01      	ldr	r3, [sp, #4]
    8782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    8786:	4a0a      	ldr	r2, [pc, #40]	; (87b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x48>)
    8788:	9b01      	ldr	r3, [sp, #4]
    878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    878e:	f003 0301 	and.w	r3, r3, #1
    8792:	2b00      	cmp	r3, #0
    8794:	d106      	bne.n	87a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    8796:	4a05      	ldr	r2, [pc, #20]	; (87ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8798:	9b01      	ldr	r3, [sp, #4]
    879a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    879e:	2b00      	cmp	r3, #0
    87a0:	d100      	bne.n	87a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    87a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    87a4:	bf00      	nop
    87a6:	b003      	add	sp, #12
    87a8:	f85d fb04 	ldr.w	pc, [sp], #4
    87ac:	1fff90b0 	.word	0x1fff90b0
    87b0:	1fff90ac 	.word	0x1fff90ac

000087b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    87b4:	b500      	push	{lr}
    87b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87b8:	f7f8 f9d0 	bl	b5c <Sys_GetCoreID>
    87bc:	4603      	mov	r3, r0
    87be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId])
    87c0:	4a10      	ldr	r2, [pc, #64]	; (8804 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    87c2:	9b01      	ldr	r3, [sp, #4]
    87c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d10d      	bne.n	87e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    87cc:	f7f8 f8e5 	bl	99a <Gpt_schm_read_msr>
    87d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    87d2:	9b00      	ldr	r3, [sp, #0]
    87d4:	f003 0301 	and.w	r3, r3, #1
    87d8:	2b00      	cmp	r3, #0
    87da:	d100      	bne.n	87de <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    87dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    87de:	490a      	ldr	r1, [pc, #40]	; (8808 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x54>)
    87e0:	9b01      	ldr	r3, [sp, #4]
    87e2:	9a00      	ldr	r2, [sp, #0]
    87e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]++;
    87e8:	4a06      	ldr	r2, [pc, #24]	; (8804 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    87ea:	9b01      	ldr	r3, [sp, #4]
    87ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87f0:	1c5a      	adds	r2, r3, #1
    87f2:	4904      	ldr	r1, [pc, #16]	; (8804 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    87f4:	9b01      	ldr	r3, [sp, #4]
    87f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    87fa:	bf00      	nop
    87fc:	b003      	add	sp, #12
    87fe:	f85d fb04 	ldr.w	pc, [sp], #4
    8802:	bf00      	nop
    8804:	1fff90b8 	.word	0x1fff90b8
    8808:	1fff90b4 	.word	0x1fff90b4

0000880c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    880c:	b500      	push	{lr}
    880e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8810:	f7f8 f9a4 	bl	b5c <Sys_GetCoreID>
    8814:	4603      	mov	r3, r0
    8816:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]--;
    8818:	4a0d      	ldr	r2, [pc, #52]	; (8850 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    881a:	9b01      	ldr	r3, [sp, #4]
    881c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8820:	1e5a      	subs	r2, r3, #1
    8822:	490b      	ldr	r1, [pc, #44]	; (8850 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    8824:	9b01      	ldr	r3, [sp, #4]
    8826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    882a:	4a0a      	ldr	r2, [pc, #40]	; (8854 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x48>)
    882c:	9b01      	ldr	r3, [sp, #4]
    882e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8832:	f003 0301 	and.w	r3, r3, #1
    8836:	2b00      	cmp	r3, #0
    8838:	d106      	bne.n	8848 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    883a:	4a05      	ldr	r2, [pc, #20]	; (8850 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    883c:	9b01      	ldr	r3, [sp, #4]
    883e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8842:	2b00      	cmp	r3, #0
    8844:	d100      	bne.n	8848 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8846:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8848:	bf00      	nop
    884a:	b003      	add	sp, #12
    884c:	f85d fb04 	ldr.w	pc, [sp], #4
    8850:	1fff90b8 	.word	0x1fff90b8
    8854:	1fff90b4 	.word	0x1fff90b4

00008858 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    8858:	b500      	push	{lr}
    885a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    885c:	f7f8 f97e 	bl	b5c <Sys_GetCoreID>
    8860:	4603      	mov	r3, r0
    8862:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId])
    8864:	4a10      	ldr	r2, [pc, #64]	; (88a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    8866:	9b01      	ldr	r3, [sp, #4]
    8868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    886c:	2b00      	cmp	r3, #0
    886e:	d10d      	bne.n	888c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8870:	f7f8 f893 	bl	99a <Gpt_schm_read_msr>
    8874:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8876:	9b00      	ldr	r3, [sp, #0]
    8878:	f003 0301 	and.w	r3, r3, #1
    887c:	2b00      	cmp	r3, #0
    887e:	d100      	bne.n	8882 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8880:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    8882:	490a      	ldr	r1, [pc, #40]	; (88ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x54>)
    8884:	9b01      	ldr	r3, [sp, #4]
    8886:	9a00      	ldr	r2, [sp, #0]
    8888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]++;
    888c:	4a06      	ldr	r2, [pc, #24]	; (88a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    888e:	9b01      	ldr	r3, [sp, #4]
    8890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8894:	1c5a      	adds	r2, r3, #1
    8896:	4904      	ldr	r1, [pc, #16]	; (88a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    8898:	9b01      	ldr	r3, [sp, #4]
    889a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    889e:	bf00      	nop
    88a0:	b003      	add	sp, #12
    88a2:	f85d fb04 	ldr.w	pc, [sp], #4
    88a6:	bf00      	nop
    88a8:	1fff90c0 	.word	0x1fff90c0
    88ac:	1fff90bc 	.word	0x1fff90bc

000088b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    88b0:	b500      	push	{lr}
    88b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88b4:	f7f8 f952 	bl	b5c <Sys_GetCoreID>
    88b8:	4603      	mov	r3, r0
    88ba:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]--;
    88bc:	4a0d      	ldr	r2, [pc, #52]	; (88f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    88be:	9b01      	ldr	r3, [sp, #4]
    88c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88c4:	1e5a      	subs	r2, r3, #1
    88c6:	490b      	ldr	r1, [pc, #44]	; (88f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    88c8:	9b01      	ldr	r3, [sp, #4]
    88ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    88ce:	4a0a      	ldr	r2, [pc, #40]	; (88f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x48>)
    88d0:	9b01      	ldr	r3, [sp, #4]
    88d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d6:	f003 0301 	and.w	r3, r3, #1
    88da:	2b00      	cmp	r3, #0
    88dc:	d106      	bne.n	88ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    88de:	4a05      	ldr	r2, [pc, #20]	; (88f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    88e0:	9b01      	ldr	r3, [sp, #4]
    88e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88e6:	2b00      	cmp	r3, #0
    88e8:	d100      	bne.n	88ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    88ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    88ec:	bf00      	nop
    88ee:	b003      	add	sp, #12
    88f0:	f85d fb04 	ldr.w	pc, [sp], #4
    88f4:	1fff90c0 	.word	0x1fff90c0
    88f8:	1fff90bc 	.word	0x1fff90bc

000088fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    88fc:	b500      	push	{lr}
    88fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8900:	f7f8 f92c 	bl	b5c <Sys_GetCoreID>
    8904:	4603      	mov	r3, r0
    8906:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId])
    8908:	4a10      	ldr	r2, [pc, #64]	; (894c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    890a:	9b01      	ldr	r3, [sp, #4]
    890c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8910:	2b00      	cmp	r3, #0
    8912:	d10d      	bne.n	8930 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8914:	f7f8 f841 	bl	99a <Gpt_schm_read_msr>
    8918:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    891a:	9b00      	ldr	r3, [sp, #0]
    891c:	f003 0301 	and.w	r3, r3, #1
    8920:	2b00      	cmp	r3, #0
    8922:	d100      	bne.n	8926 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8924:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    8926:	490a      	ldr	r1, [pc, #40]	; (8950 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x54>)
    8928:	9b01      	ldr	r3, [sp, #4]
    892a:	9a00      	ldr	r2, [sp, #0]
    892c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]++;
    8930:	4a06      	ldr	r2, [pc, #24]	; (894c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    8932:	9b01      	ldr	r3, [sp, #4]
    8934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8938:	1c5a      	adds	r2, r3, #1
    893a:	4904      	ldr	r1, [pc, #16]	; (894c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    893c:	9b01      	ldr	r3, [sp, #4]
    893e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8942:	bf00      	nop
    8944:	b003      	add	sp, #12
    8946:	f85d fb04 	ldr.w	pc, [sp], #4
    894a:	bf00      	nop
    894c:	1fff90c8 	.word	0x1fff90c8
    8950:	1fff90c4 	.word	0x1fff90c4

00008954 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    8954:	b500      	push	{lr}
    8956:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8958:	f7f8 f900 	bl	b5c <Sys_GetCoreID>
    895c:	4603      	mov	r3, r0
    895e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]--;
    8960:	4a0d      	ldr	r2, [pc, #52]	; (8998 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    8962:	9b01      	ldr	r3, [sp, #4]
    8964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8968:	1e5a      	subs	r2, r3, #1
    896a:	490b      	ldr	r1, [pc, #44]	; (8998 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    896c:	9b01      	ldr	r3, [sp, #4]
    896e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    8972:	4a0a      	ldr	r2, [pc, #40]	; (899c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x48>)
    8974:	9b01      	ldr	r3, [sp, #4]
    8976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    897a:	f003 0301 	and.w	r3, r3, #1
    897e:	2b00      	cmp	r3, #0
    8980:	d106      	bne.n	8990 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    8982:	4a05      	ldr	r2, [pc, #20]	; (8998 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    8984:	9b01      	ldr	r3, [sp, #4]
    8986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    898a:	2b00      	cmp	r3, #0
    898c:	d100      	bne.n	8990 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    898e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8990:	bf00      	nop
    8992:	b003      	add	sp, #12
    8994:	f85d fb04 	ldr.w	pc, [sp], #4
    8998:	1fff90c8 	.word	0x1fff90c8
    899c:	1fff90c4 	.word	0x1fff90c4

000089a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    89a0:	b500      	push	{lr}
    89a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89a4:	f7f8 f8da 	bl	b5c <Sys_GetCoreID>
    89a8:	4603      	mov	r3, r0
    89aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId])
    89ac:	4a10      	ldr	r2, [pc, #64]	; (89f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    89ae:	9b01      	ldr	r3, [sp, #4]
    89b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89b4:	2b00      	cmp	r3, #0
    89b6:	d10d      	bne.n	89d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89b8:	f7f7 ffef 	bl	99a <Gpt_schm_read_msr>
    89bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    89be:	9b00      	ldr	r3, [sp, #0]
    89c0:	f003 0301 	and.w	r3, r3, #1
    89c4:	2b00      	cmp	r3, #0
    89c6:	d100      	bne.n	89ca <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    89c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    89ca:	490a      	ldr	r1, [pc, #40]	; (89f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x54>)
    89cc:	9b01      	ldr	r3, [sp, #4]
    89ce:	9a00      	ldr	r2, [sp, #0]
    89d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]++;
    89d4:	4a06      	ldr	r2, [pc, #24]	; (89f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    89d6:	9b01      	ldr	r3, [sp, #4]
    89d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89dc:	1c5a      	adds	r2, r3, #1
    89de:	4904      	ldr	r1, [pc, #16]	; (89f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    89e0:	9b01      	ldr	r3, [sp, #4]
    89e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    89e6:	bf00      	nop
    89e8:	b003      	add	sp, #12
    89ea:	f85d fb04 	ldr.w	pc, [sp], #4
    89ee:	bf00      	nop
    89f0:	1fff90d0 	.word	0x1fff90d0
    89f4:	1fff90cc 	.word	0x1fff90cc

000089f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    89f8:	b500      	push	{lr}
    89fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89fc:	f7f8 f8ae 	bl	b5c <Sys_GetCoreID>
    8a00:	4603      	mov	r3, r0
    8a02:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]--;
    8a04:	4a0d      	ldr	r2, [pc, #52]	; (8a3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    8a06:	9b01      	ldr	r3, [sp, #4]
    8a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a0c:	1e5a      	subs	r2, r3, #1
    8a0e:	490b      	ldr	r1, [pc, #44]	; (8a3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    8a10:	9b01      	ldr	r3, [sp, #4]
    8a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    8a16:	4a0a      	ldr	r2, [pc, #40]	; (8a40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x48>)
    8a18:	9b01      	ldr	r3, [sp, #4]
    8a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a1e:	f003 0301 	and.w	r3, r3, #1
    8a22:	2b00      	cmp	r3, #0
    8a24:	d106      	bne.n	8a34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    8a26:	4a05      	ldr	r2, [pc, #20]	; (8a3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    8a28:	9b01      	ldr	r3, [sp, #4]
    8a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d100      	bne.n	8a34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a34:	bf00      	nop
    8a36:	b003      	add	sp, #12
    8a38:	f85d fb04 	ldr.w	pc, [sp], #4
    8a3c:	1fff90d0 	.word	0x1fff90d0
    8a40:	1fff90cc 	.word	0x1fff90cc

00008a44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    8a44:	b500      	push	{lr}
    8a46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a48:	f7f8 f888 	bl	b5c <Sys_GetCoreID>
    8a4c:	4603      	mov	r3, r0
    8a4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId])
    8a50:	4a10      	ldr	r2, [pc, #64]	; (8a94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    8a52:	9b01      	ldr	r3, [sp, #4]
    8a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d10d      	bne.n	8a78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a5c:	f7f7 ff9d 	bl	99a <Gpt_schm_read_msr>
    8a60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a62:	9b00      	ldr	r3, [sp, #0]
    8a64:	f003 0301 	and.w	r3, r3, #1
    8a68:	2b00      	cmp	r3, #0
    8a6a:	d100      	bne.n	8a6e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    8a6e:	490a      	ldr	r1, [pc, #40]	; (8a98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x54>)
    8a70:	9b01      	ldr	r3, [sp, #4]
    8a72:	9a00      	ldr	r2, [sp, #0]
    8a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]++;
    8a78:	4a06      	ldr	r2, [pc, #24]	; (8a94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    8a7a:	9b01      	ldr	r3, [sp, #4]
    8a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a80:	1c5a      	adds	r2, r3, #1
    8a82:	4904      	ldr	r1, [pc, #16]	; (8a94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    8a84:	9b01      	ldr	r3, [sp, #4]
    8a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a8a:	bf00      	nop
    8a8c:	b003      	add	sp, #12
    8a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a92:	bf00      	nop
    8a94:	1fff90d8 	.word	0x1fff90d8
    8a98:	1fff90d4 	.word	0x1fff90d4

00008a9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    8a9c:	b500      	push	{lr}
    8a9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8aa0:	f7f8 f85c 	bl	b5c <Sys_GetCoreID>
    8aa4:	4603      	mov	r3, r0
    8aa6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]--;
    8aa8:	4a0d      	ldr	r2, [pc, #52]	; (8ae0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    8aaa:	9b01      	ldr	r3, [sp, #4]
    8aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ab0:	1e5a      	subs	r2, r3, #1
    8ab2:	490b      	ldr	r1, [pc, #44]	; (8ae0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    8ab4:	9b01      	ldr	r3, [sp, #4]
    8ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    8aba:	4a0a      	ldr	r2, [pc, #40]	; (8ae4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x48>)
    8abc:	9b01      	ldr	r3, [sp, #4]
    8abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ac2:	f003 0301 	and.w	r3, r3, #1
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d106      	bne.n	8ad8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    8aca:	4a05      	ldr	r2, [pc, #20]	; (8ae0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    8acc:	9b01      	ldr	r3, [sp, #4]
    8ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ad2:	2b00      	cmp	r3, #0
    8ad4:	d100      	bne.n	8ad8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ad6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ad8:	bf00      	nop
    8ada:	b003      	add	sp, #12
    8adc:	f85d fb04 	ldr.w	pc, [sp], #4
    8ae0:	1fff90d8 	.word	0x1fff90d8
    8ae4:	1fff90d4 	.word	0x1fff90d4

00008ae8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    8ae8:	b500      	push	{lr}
    8aea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8aec:	f7f8 f836 	bl	b5c <Sys_GetCoreID>
    8af0:	4603      	mov	r3, r0
    8af2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId])
    8af4:	4a10      	ldr	r2, [pc, #64]	; (8b38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    8af6:	9b01      	ldr	r3, [sp, #4]
    8af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8afc:	2b00      	cmp	r3, #0
    8afe:	d10d      	bne.n	8b1c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b00:	f7f7 ff4b 	bl	99a <Gpt_schm_read_msr>
    8b04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b06:	9b00      	ldr	r3, [sp, #0]
    8b08:	f003 0301 	and.w	r3, r3, #1
    8b0c:	2b00      	cmp	r3, #0
    8b0e:	d100      	bne.n	8b12 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    8b12:	490a      	ldr	r1, [pc, #40]	; (8b3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x54>)
    8b14:	9b01      	ldr	r3, [sp, #4]
    8b16:	9a00      	ldr	r2, [sp, #0]
    8b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]++;
    8b1c:	4a06      	ldr	r2, [pc, #24]	; (8b38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    8b1e:	9b01      	ldr	r3, [sp, #4]
    8b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b24:	1c5a      	adds	r2, r3, #1
    8b26:	4904      	ldr	r1, [pc, #16]	; (8b38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    8b28:	9b01      	ldr	r3, [sp, #4]
    8b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b2e:	bf00      	nop
    8b30:	b003      	add	sp, #12
    8b32:	f85d fb04 	ldr.w	pc, [sp], #4
    8b36:	bf00      	nop
    8b38:	1fff90e0 	.word	0x1fff90e0
    8b3c:	1fff90dc 	.word	0x1fff90dc

00008b40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    8b40:	b500      	push	{lr}
    8b42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b44:	f7f8 f80a 	bl	b5c <Sys_GetCoreID>
    8b48:	4603      	mov	r3, r0
    8b4a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]--;
    8b4c:	4a0d      	ldr	r2, [pc, #52]	; (8b84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    8b4e:	9b01      	ldr	r3, [sp, #4]
    8b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b54:	1e5a      	subs	r2, r3, #1
    8b56:	490b      	ldr	r1, [pc, #44]	; (8b84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    8b58:	9b01      	ldr	r3, [sp, #4]
    8b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    8b5e:	4a0a      	ldr	r2, [pc, #40]	; (8b88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x48>)
    8b60:	9b01      	ldr	r3, [sp, #4]
    8b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b66:	f003 0301 	and.w	r3, r3, #1
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d106      	bne.n	8b7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    8b6e:	4a05      	ldr	r2, [pc, #20]	; (8b84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    8b70:	9b01      	ldr	r3, [sp, #4]
    8b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d100      	bne.n	8b7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b7c:	bf00      	nop
    8b7e:	b003      	add	sp, #12
    8b80:	f85d fb04 	ldr.w	pc, [sp], #4
    8b84:	1fff90e0 	.word	0x1fff90e0
    8b88:	1fff90dc 	.word	0x1fff90dc

00008b8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    8b8c:	b500      	push	{lr}
    8b8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b90:	f7f7 ffe4 	bl	b5c <Sys_GetCoreID>
    8b94:	4603      	mov	r3, r0
    8b96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId])
    8b98:	4a10      	ldr	r2, [pc, #64]	; (8bdc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    8b9a:	9b01      	ldr	r3, [sp, #4]
    8b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d10d      	bne.n	8bc0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ba4:	f7f7 fef9 	bl	99a <Gpt_schm_read_msr>
    8ba8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8baa:	9b00      	ldr	r3, [sp, #0]
    8bac:	f003 0301 	and.w	r3, r3, #1
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d100      	bne.n	8bb6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8bb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    8bb6:	490a      	ldr	r1, [pc, #40]	; (8be0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x54>)
    8bb8:	9b01      	ldr	r3, [sp, #4]
    8bba:	9a00      	ldr	r2, [sp, #0]
    8bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]++;
    8bc0:	4a06      	ldr	r2, [pc, #24]	; (8bdc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    8bc2:	9b01      	ldr	r3, [sp, #4]
    8bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bc8:	1c5a      	adds	r2, r3, #1
    8bca:	4904      	ldr	r1, [pc, #16]	; (8bdc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    8bcc:	9b01      	ldr	r3, [sp, #4]
    8bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8bd2:	bf00      	nop
    8bd4:	b003      	add	sp, #12
    8bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    8bda:	bf00      	nop
    8bdc:	1fff90e8 	.word	0x1fff90e8
    8be0:	1fff90e4 	.word	0x1fff90e4

00008be4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    8be4:	b500      	push	{lr}
    8be6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8be8:	f7f7 ffb8 	bl	b5c <Sys_GetCoreID>
    8bec:	4603      	mov	r3, r0
    8bee:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]--;
    8bf0:	4a0d      	ldr	r2, [pc, #52]	; (8c28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    8bf2:	9b01      	ldr	r3, [sp, #4]
    8bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bf8:	1e5a      	subs	r2, r3, #1
    8bfa:	490b      	ldr	r1, [pc, #44]	; (8c28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    8bfc:	9b01      	ldr	r3, [sp, #4]
    8bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    8c02:	4a0a      	ldr	r2, [pc, #40]	; (8c2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x48>)
    8c04:	9b01      	ldr	r3, [sp, #4]
    8c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c0a:	f003 0301 	and.w	r3, r3, #1
    8c0e:	2b00      	cmp	r3, #0
    8c10:	d106      	bne.n	8c20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    8c12:	4a05      	ldr	r2, [pc, #20]	; (8c28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    8c14:	9b01      	ldr	r3, [sp, #4]
    8c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d100      	bne.n	8c20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c20:	bf00      	nop
    8c22:	b003      	add	sp, #12
    8c24:	f85d fb04 	ldr.w	pc, [sp], #4
    8c28:	1fff90e8 	.word	0x1fff90e8
    8c2c:	1fff90e4 	.word	0x1fff90e4

00008c30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    8c30:	b500      	push	{lr}
    8c32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c34:	f7f7 ff92 	bl	b5c <Sys_GetCoreID>
    8c38:	4603      	mov	r3, r0
    8c3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId])
    8c3c:	4a10      	ldr	r2, [pc, #64]	; (8c80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    8c3e:	9b01      	ldr	r3, [sp, #4]
    8c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c44:	2b00      	cmp	r3, #0
    8c46:	d10d      	bne.n	8c64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c48:	f7f7 fea7 	bl	99a <Gpt_schm_read_msr>
    8c4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c4e:	9b00      	ldr	r3, [sp, #0]
    8c50:	f003 0301 	and.w	r3, r3, #1
    8c54:	2b00      	cmp	r3, #0
    8c56:	d100      	bne.n	8c5a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    8c5a:	490a      	ldr	r1, [pc, #40]	; (8c84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x54>)
    8c5c:	9b01      	ldr	r3, [sp, #4]
    8c5e:	9a00      	ldr	r2, [sp, #0]
    8c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]++;
    8c64:	4a06      	ldr	r2, [pc, #24]	; (8c80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    8c66:	9b01      	ldr	r3, [sp, #4]
    8c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c6c:	1c5a      	adds	r2, r3, #1
    8c6e:	4904      	ldr	r1, [pc, #16]	; (8c80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    8c70:	9b01      	ldr	r3, [sp, #4]
    8c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c76:	bf00      	nop
    8c78:	b003      	add	sp, #12
    8c7a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c7e:	bf00      	nop
    8c80:	1fff90f0 	.word	0x1fff90f0
    8c84:	1fff90ec 	.word	0x1fff90ec

00008c88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    8c88:	b500      	push	{lr}
    8c8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c8c:	f7f7 ff66 	bl	b5c <Sys_GetCoreID>
    8c90:	4603      	mov	r3, r0
    8c92:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]--;
    8c94:	4a0d      	ldr	r2, [pc, #52]	; (8ccc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    8c96:	9b01      	ldr	r3, [sp, #4]
    8c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c9c:	1e5a      	subs	r2, r3, #1
    8c9e:	490b      	ldr	r1, [pc, #44]	; (8ccc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    8ca0:	9b01      	ldr	r3, [sp, #4]
    8ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    8ca6:	4a0a      	ldr	r2, [pc, #40]	; (8cd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x48>)
    8ca8:	9b01      	ldr	r3, [sp, #4]
    8caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cae:	f003 0301 	and.w	r3, r3, #1
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	d106      	bne.n	8cc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    8cb6:	4a05      	ldr	r2, [pc, #20]	; (8ccc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    8cb8:	9b01      	ldr	r3, [sp, #4]
    8cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d100      	bne.n	8cc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8cc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8cc4:	bf00      	nop
    8cc6:	b003      	add	sp, #12
    8cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    8ccc:	1fff90f0 	.word	0x1fff90f0
    8cd0:	1fff90ec 	.word	0x1fff90ec

00008cd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    8cd4:	b500      	push	{lr}
    8cd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cd8:	f7f7 ff40 	bl	b5c <Sys_GetCoreID>
    8cdc:	4603      	mov	r3, r0
    8cde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId])
    8ce0:	4a10      	ldr	r2, [pc, #64]	; (8d24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    8ce2:	9b01      	ldr	r3, [sp, #4]
    8ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d10d      	bne.n	8d08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8cec:	f7f7 fe55 	bl	99a <Gpt_schm_read_msr>
    8cf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8cf2:	9b00      	ldr	r3, [sp, #0]
    8cf4:	f003 0301 	and.w	r3, r3, #1
    8cf8:	2b00      	cmp	r3, #0
    8cfa:	d100      	bne.n	8cfe <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8cfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    8cfe:	490a      	ldr	r1, [pc, #40]	; (8d28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x54>)
    8d00:	9b01      	ldr	r3, [sp, #4]
    8d02:	9a00      	ldr	r2, [sp, #0]
    8d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]++;
    8d08:	4a06      	ldr	r2, [pc, #24]	; (8d24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    8d0a:	9b01      	ldr	r3, [sp, #4]
    8d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d10:	1c5a      	adds	r2, r3, #1
    8d12:	4904      	ldr	r1, [pc, #16]	; (8d24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    8d14:	9b01      	ldr	r3, [sp, #4]
    8d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d1a:	bf00      	nop
    8d1c:	b003      	add	sp, #12
    8d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d22:	bf00      	nop
    8d24:	1fff90f8 	.word	0x1fff90f8
    8d28:	1fff90f4 	.word	0x1fff90f4

00008d2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    8d2c:	b500      	push	{lr}
    8d2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d30:	f7f7 ff14 	bl	b5c <Sys_GetCoreID>
    8d34:	4603      	mov	r3, r0
    8d36:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]--;
    8d38:	4a0d      	ldr	r2, [pc, #52]	; (8d70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    8d3a:	9b01      	ldr	r3, [sp, #4]
    8d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d40:	1e5a      	subs	r2, r3, #1
    8d42:	490b      	ldr	r1, [pc, #44]	; (8d70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    8d44:	9b01      	ldr	r3, [sp, #4]
    8d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    8d4a:	4a0a      	ldr	r2, [pc, #40]	; (8d74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x48>)
    8d4c:	9b01      	ldr	r3, [sp, #4]
    8d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d52:	f003 0301 	and.w	r3, r3, #1
    8d56:	2b00      	cmp	r3, #0
    8d58:	d106      	bne.n	8d68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    8d5a:	4a05      	ldr	r2, [pc, #20]	; (8d70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    8d5c:	9b01      	ldr	r3, [sp, #4]
    8d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d62:	2b00      	cmp	r3, #0
    8d64:	d100      	bne.n	8d68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d68:	bf00      	nop
    8d6a:	b003      	add	sp, #12
    8d6c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d70:	1fff90f8 	.word	0x1fff90f8
    8d74:	1fff90f4 	.word	0x1fff90f4

00008d78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    8d78:	b500      	push	{lr}
    8d7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d7c:	f7f7 feee 	bl	b5c <Sys_GetCoreID>
    8d80:	4603      	mov	r3, r0
    8d82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId])
    8d84:	4a10      	ldr	r2, [pc, #64]	; (8dc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    8d86:	9b01      	ldr	r3, [sp, #4]
    8d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d8c:	2b00      	cmp	r3, #0
    8d8e:	d10d      	bne.n	8dac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d90:	f7f7 fe03 	bl	99a <Gpt_schm_read_msr>
    8d94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d96:	9b00      	ldr	r3, [sp, #0]
    8d98:	f003 0301 	and.w	r3, r3, #1
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	d100      	bne.n	8da2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8da0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    8da2:	490a      	ldr	r1, [pc, #40]	; (8dcc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x54>)
    8da4:	9b01      	ldr	r3, [sp, #4]
    8da6:	9a00      	ldr	r2, [sp, #0]
    8da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]++;
    8dac:	4a06      	ldr	r2, [pc, #24]	; (8dc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    8dae:	9b01      	ldr	r3, [sp, #4]
    8db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8db4:	1c5a      	adds	r2, r3, #1
    8db6:	4904      	ldr	r1, [pc, #16]	; (8dc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    8db8:	9b01      	ldr	r3, [sp, #4]
    8dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8dbe:	bf00      	nop
    8dc0:	b003      	add	sp, #12
    8dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    8dc6:	bf00      	nop
    8dc8:	1fff9100 	.word	0x1fff9100
    8dcc:	1fff90fc 	.word	0x1fff90fc

00008dd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    8dd0:	b500      	push	{lr}
    8dd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8dd4:	f7f7 fec2 	bl	b5c <Sys_GetCoreID>
    8dd8:	4603      	mov	r3, r0
    8dda:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]--;
    8ddc:	4a0d      	ldr	r2, [pc, #52]	; (8e14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    8dde:	9b01      	ldr	r3, [sp, #4]
    8de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de4:	1e5a      	subs	r2, r3, #1
    8de6:	490b      	ldr	r1, [pc, #44]	; (8e14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    8de8:	9b01      	ldr	r3, [sp, #4]
    8dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    8dee:	4a0a      	ldr	r2, [pc, #40]	; (8e18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x48>)
    8df0:	9b01      	ldr	r3, [sp, #4]
    8df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df6:	f003 0301 	and.w	r3, r3, #1
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	d106      	bne.n	8e0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    8dfe:	4a05      	ldr	r2, [pc, #20]	; (8e14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    8e00:	9b01      	ldr	r3, [sp, #4]
    8e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e06:	2b00      	cmp	r3, #0
    8e08:	d100      	bne.n	8e0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e0c:	bf00      	nop
    8e0e:	b003      	add	sp, #12
    8e10:	f85d fb04 	ldr.w	pc, [sp], #4
    8e14:	1fff9100 	.word	0x1fff9100
    8e18:	1fff90fc 	.word	0x1fff90fc

00008e1c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    8e1c:	b500      	push	{lr}
    8e1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e20:	f7f7 fe9c 	bl	b5c <Sys_GetCoreID>
    8e24:	4603      	mov	r3, r0
    8e26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId])
    8e28:	4a10      	ldr	r2, [pc, #64]	; (8e6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    8e2a:	9b01      	ldr	r3, [sp, #4]
    8e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e30:	2b00      	cmp	r3, #0
    8e32:	d10d      	bne.n	8e50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e34:	f7f7 fdb1 	bl	99a <Gpt_schm_read_msr>
    8e38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e3a:	9b00      	ldr	r3, [sp, #0]
    8e3c:	f003 0301 	and.w	r3, r3, #1
    8e40:	2b00      	cmp	r3, #0
    8e42:	d100      	bne.n	8e46 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_52[u32CoreId] = msr;
    8e46:	490a      	ldr	r1, [pc, #40]	; (8e70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x54>)
    8e48:	9b01      	ldr	r3, [sp, #4]
    8e4a:	9a00      	ldr	r2, [sp, #0]
    8e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]++;
    8e50:	4a06      	ldr	r2, [pc, #24]	; (8e6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    8e52:	9b01      	ldr	r3, [sp, #4]
    8e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e58:	1c5a      	adds	r2, r3, #1
    8e5a:	4904      	ldr	r1, [pc, #16]	; (8e6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    8e5c:	9b01      	ldr	r3, [sp, #4]
    8e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e62:	bf00      	nop
    8e64:	b003      	add	sp, #12
    8e66:	f85d fb04 	ldr.w	pc, [sp], #4
    8e6a:	bf00      	nop
    8e6c:	1fff9108 	.word	0x1fff9108
    8e70:	1fff9104 	.word	0x1fff9104

00008e74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    8e74:	b500      	push	{lr}
    8e76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e78:	f7f7 fe70 	bl	b5c <Sys_GetCoreID>
    8e7c:	4603      	mov	r3, r0
    8e7e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]--;
    8e80:	4a0d      	ldr	r2, [pc, #52]	; (8eb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    8e82:	9b01      	ldr	r3, [sp, #4]
    8e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e88:	1e5a      	subs	r2, r3, #1
    8e8a:	490b      	ldr	r1, [pc, #44]	; (8eb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    8e8c:	9b01      	ldr	r3, [sp, #4]
    8e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_52[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]))         /*if interrupts were enabled*/
    8e92:	4a0a      	ldr	r2, [pc, #40]	; (8ebc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x48>)
    8e94:	9b01      	ldr	r3, [sp, #4]
    8e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e9a:	f003 0301 	and.w	r3, r3, #1
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d106      	bne.n	8eb0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    8ea2:	4a05      	ldr	r2, [pc, #20]	; (8eb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    8ea4:	9b01      	ldr	r3, [sp, #4]
    8ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eaa:	2b00      	cmp	r3, #0
    8eac:	d100      	bne.n	8eb0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8eae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8eb0:	bf00      	nop
    8eb2:	b003      	add	sp, #12
    8eb4:	f85d fb04 	ldr.w	pc, [sp], #4
    8eb8:	1fff9108 	.word	0x1fff9108
    8ebc:	1fff9104 	.word	0x1fff9104

00008ec0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    8ec0:	b500      	push	{lr}
    8ec2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ec4:	f7f7 fe4a 	bl	b5c <Sys_GetCoreID>
    8ec8:	4603      	mov	r3, r0
    8eca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId])
    8ecc:	4a10      	ldr	r2, [pc, #64]	; (8f10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    8ece:	9b01      	ldr	r3, [sp, #4]
    8ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d10d      	bne.n	8ef4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ed8:	f7f7 fd5f 	bl	99a <Gpt_schm_read_msr>
    8edc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8ede:	9b00      	ldr	r3, [sp, #0]
    8ee0:	f003 0301 	and.w	r3, r3, #1
    8ee4:	2b00      	cmp	r3, #0
    8ee6:	d100      	bne.n	8eea <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ee8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_53[u32CoreId] = msr;
    8eea:	490a      	ldr	r1, [pc, #40]	; (8f14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x54>)
    8eec:	9b01      	ldr	r3, [sp, #4]
    8eee:	9a00      	ldr	r2, [sp, #0]
    8ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]++;
    8ef4:	4a06      	ldr	r2, [pc, #24]	; (8f10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    8ef6:	9b01      	ldr	r3, [sp, #4]
    8ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8efc:	1c5a      	adds	r2, r3, #1
    8efe:	4904      	ldr	r1, [pc, #16]	; (8f10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    8f00:	9b01      	ldr	r3, [sp, #4]
    8f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f06:	bf00      	nop
    8f08:	b003      	add	sp, #12
    8f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f0e:	bf00      	nop
    8f10:	1fff9110 	.word	0x1fff9110
    8f14:	1fff910c 	.word	0x1fff910c

00008f18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    8f18:	b500      	push	{lr}
    8f1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f1c:	f7f7 fe1e 	bl	b5c <Sys_GetCoreID>
    8f20:	4603      	mov	r3, r0
    8f22:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]--;
    8f24:	4a0d      	ldr	r2, [pc, #52]	; (8f5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    8f26:	9b01      	ldr	r3, [sp, #4]
    8f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f2c:	1e5a      	subs	r2, r3, #1
    8f2e:	490b      	ldr	r1, [pc, #44]	; (8f5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    8f30:	9b01      	ldr	r3, [sp, #4]
    8f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_53[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]))         /*if interrupts were enabled*/
    8f36:	4a0a      	ldr	r2, [pc, #40]	; (8f60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x48>)
    8f38:	9b01      	ldr	r3, [sp, #4]
    8f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3e:	f003 0301 	and.w	r3, r3, #1
    8f42:	2b00      	cmp	r3, #0
    8f44:	d106      	bne.n	8f54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    8f46:	4a05      	ldr	r2, [pc, #20]	; (8f5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    8f48:	9b01      	ldr	r3, [sp, #4]
    8f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f4e:	2b00      	cmp	r3, #0
    8f50:	d100      	bne.n	8f54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f54:	bf00      	nop
    8f56:	b003      	add	sp, #12
    8f58:	f85d fb04 	ldr.w	pc, [sp], #4
    8f5c:	1fff9110 	.word	0x1fff9110
    8f60:	1fff910c 	.word	0x1fff910c

00008f64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    8f64:	b500      	push	{lr}
    8f66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f68:	f7f7 fdf8 	bl	b5c <Sys_GetCoreID>
    8f6c:	4603      	mov	r3, r0
    8f6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId])
    8f70:	4a10      	ldr	r2, [pc, #64]	; (8fb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    8f72:	9b01      	ldr	r3, [sp, #4]
    8f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d10d      	bne.n	8f98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f7c:	f7f7 fd0d 	bl	99a <Gpt_schm_read_msr>
    8f80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f82:	9b00      	ldr	r3, [sp, #0]
    8f84:	f003 0301 	and.w	r3, r3, #1
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d100      	bne.n	8f8e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    8f8e:	490a      	ldr	r1, [pc, #40]	; (8fb8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x54>)
    8f90:	9b01      	ldr	r3, [sp, #4]
    8f92:	9a00      	ldr	r2, [sp, #0]
    8f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]++;
    8f98:	4a06      	ldr	r2, [pc, #24]	; (8fb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    8f9a:	9b01      	ldr	r3, [sp, #4]
    8f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fa0:	1c5a      	adds	r2, r3, #1
    8fa2:	4904      	ldr	r1, [pc, #16]	; (8fb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    8fa4:	9b01      	ldr	r3, [sp, #4]
    8fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8faa:	bf00      	nop
    8fac:	b003      	add	sp, #12
    8fae:	f85d fb04 	ldr.w	pc, [sp], #4
    8fb2:	bf00      	nop
    8fb4:	1fff9118 	.word	0x1fff9118
    8fb8:	1fff9114 	.word	0x1fff9114

00008fbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    8fbc:	b500      	push	{lr}
    8fbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fc0:	f7f7 fdcc 	bl	b5c <Sys_GetCoreID>
    8fc4:	4603      	mov	r3, r0
    8fc6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]--;
    8fc8:	4a0d      	ldr	r2, [pc, #52]	; (9000 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    8fca:	9b01      	ldr	r3, [sp, #4]
    8fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fd0:	1e5a      	subs	r2, r3, #1
    8fd2:	490b      	ldr	r1, [pc, #44]	; (9000 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    8fd4:	9b01      	ldr	r3, [sp, #4]
    8fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    8fda:	4a0a      	ldr	r2, [pc, #40]	; (9004 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x48>)
    8fdc:	9b01      	ldr	r3, [sp, #4]
    8fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe2:	f003 0301 	and.w	r3, r3, #1
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d106      	bne.n	8ff8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    8fea:	4a05      	ldr	r2, [pc, #20]	; (9000 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    8fec:	9b01      	ldr	r3, [sp, #4]
    8fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d100      	bne.n	8ff8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ff6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ff8:	bf00      	nop
    8ffa:	b003      	add	sp, #12
    8ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    9000:	1fff9118 	.word	0x1fff9118
    9004:	1fff9114 	.word	0x1fff9114

00009008 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9008:	b500      	push	{lr}
    900a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    900c:	f7f7 fda6 	bl	b5c <Sys_GetCoreID>
    9010:	4603      	mov	r3, r0
    9012:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId])
    9014:	4a10      	ldr	r2, [pc, #64]	; (9058 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9016:	9b01      	ldr	r3, [sp, #4]
    9018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    901c:	2b00      	cmp	r3, #0
    901e:	d10d      	bne.n	903c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9020:	f7f7 fcbb 	bl	99a <Gpt_schm_read_msr>
    9024:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9026:	9b00      	ldr	r3, [sp, #0]
    9028:	f003 0301 	and.w	r3, r3, #1
    902c:	2b00      	cmp	r3, #0
    902e:	d100      	bne.n	9032 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9030:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    9032:	490a      	ldr	r1, [pc, #40]	; (905c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x54>)
    9034:	9b01      	ldr	r3, [sp, #4]
    9036:	9a00      	ldr	r2, [sp, #0]
    9038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]++;
    903c:	4a06      	ldr	r2, [pc, #24]	; (9058 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    903e:	9b01      	ldr	r3, [sp, #4]
    9040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9044:	1c5a      	adds	r2, r3, #1
    9046:	4904      	ldr	r1, [pc, #16]	; (9058 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9048:	9b01      	ldr	r3, [sp, #4]
    904a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    904e:	bf00      	nop
    9050:	b003      	add	sp, #12
    9052:	f85d fb04 	ldr.w	pc, [sp], #4
    9056:	bf00      	nop
    9058:	1fff9120 	.word	0x1fff9120
    905c:	1fff911c 	.word	0x1fff911c

00009060 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9060:	b500      	push	{lr}
    9062:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9064:	f7f7 fd7a 	bl	b5c <Sys_GetCoreID>
    9068:	4603      	mov	r3, r0
    906a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]--;
    906c:	4a0d      	ldr	r2, [pc, #52]	; (90a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    906e:	9b01      	ldr	r3, [sp, #4]
    9070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9074:	1e5a      	subs	r2, r3, #1
    9076:	490b      	ldr	r1, [pc, #44]	; (90a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9078:	9b01      	ldr	r3, [sp, #4]
    907a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    907e:	4a0a      	ldr	r2, [pc, #40]	; (90a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x48>)
    9080:	9b01      	ldr	r3, [sp, #4]
    9082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9086:	f003 0301 	and.w	r3, r3, #1
    908a:	2b00      	cmp	r3, #0
    908c:	d106      	bne.n	909c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    908e:	4a05      	ldr	r2, [pc, #20]	; (90a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9090:	9b01      	ldr	r3, [sp, #4]
    9092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9096:	2b00      	cmp	r3, #0
    9098:	d100      	bne.n	909c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    909a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    909c:	bf00      	nop
    909e:	b003      	add	sp, #12
    90a0:	f85d fb04 	ldr.w	pc, [sp], #4
    90a4:	1fff9120 	.word	0x1fff9120
    90a8:	1fff911c 	.word	0x1fff911c

000090ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    90ac:	b500      	push	{lr}
    90ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90b0:	f7f7 fd54 	bl	b5c <Sys_GetCoreID>
    90b4:	4603      	mov	r3, r0
    90b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId])
    90b8:	4a10      	ldr	r2, [pc, #64]	; (90fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    90ba:	9b01      	ldr	r3, [sp, #4]
    90bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90c0:	2b00      	cmp	r3, #0
    90c2:	d10d      	bne.n	90e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    90c4:	f7f7 fc69 	bl	99a <Gpt_schm_read_msr>
    90c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    90ca:	9b00      	ldr	r3, [sp, #0]
    90cc:	f003 0301 	and.w	r3, r3, #1
    90d0:	2b00      	cmp	r3, #0
    90d2:	d100      	bne.n	90d6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    90d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    90d6:	490a      	ldr	r1, [pc, #40]	; (9100 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x54>)
    90d8:	9b01      	ldr	r3, [sp, #4]
    90da:	9a00      	ldr	r2, [sp, #0]
    90dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]++;
    90e0:	4a06      	ldr	r2, [pc, #24]	; (90fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    90e2:	9b01      	ldr	r3, [sp, #4]
    90e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90e8:	1c5a      	adds	r2, r3, #1
    90ea:	4904      	ldr	r1, [pc, #16]	; (90fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    90ec:	9b01      	ldr	r3, [sp, #4]
    90ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90f2:	bf00      	nop
    90f4:	b003      	add	sp, #12
    90f6:	f85d fb04 	ldr.w	pc, [sp], #4
    90fa:	bf00      	nop
    90fc:	1fff9128 	.word	0x1fff9128
    9100:	1fff9124 	.word	0x1fff9124

00009104 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9104:	b500      	push	{lr}
    9106:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9108:	f7f7 fd28 	bl	b5c <Sys_GetCoreID>
    910c:	4603      	mov	r3, r0
    910e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]--;
    9110:	4a0d      	ldr	r2, [pc, #52]	; (9148 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9112:	9b01      	ldr	r3, [sp, #4]
    9114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9118:	1e5a      	subs	r2, r3, #1
    911a:	490b      	ldr	r1, [pc, #44]	; (9148 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    911c:	9b01      	ldr	r3, [sp, #4]
    911e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    9122:	4a0a      	ldr	r2, [pc, #40]	; (914c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x48>)
    9124:	9b01      	ldr	r3, [sp, #4]
    9126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    912a:	f003 0301 	and.w	r3, r3, #1
    912e:	2b00      	cmp	r3, #0
    9130:	d106      	bne.n	9140 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    9132:	4a05      	ldr	r2, [pc, #20]	; (9148 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9134:	9b01      	ldr	r3, [sp, #4]
    9136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    913a:	2b00      	cmp	r3, #0
    913c:	d100      	bne.n	9140 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    913e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9140:	bf00      	nop
    9142:	b003      	add	sp, #12
    9144:	f85d fb04 	ldr.w	pc, [sp], #4
    9148:	1fff9128 	.word	0x1fff9128
    914c:	1fff9124 	.word	0x1fff9124

00009150 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9150:	b500      	push	{lr}
    9152:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9154:	f7f7 fd02 	bl	b5c <Sys_GetCoreID>
    9158:	4603      	mov	r3, r0
    915a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId])
    915c:	4a10      	ldr	r2, [pc, #64]	; (91a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    915e:	9b01      	ldr	r3, [sp, #4]
    9160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9164:	2b00      	cmp	r3, #0
    9166:	d10d      	bne.n	9184 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9168:	f7f7 fc17 	bl	99a <Gpt_schm_read_msr>
    916c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    916e:	9b00      	ldr	r3, [sp, #0]
    9170:	f003 0301 	and.w	r3, r3, #1
    9174:	2b00      	cmp	r3, #0
    9176:	d100      	bne.n	917a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9178:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    917a:	490a      	ldr	r1, [pc, #40]	; (91a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x54>)
    917c:	9b01      	ldr	r3, [sp, #4]
    917e:	9a00      	ldr	r2, [sp, #0]
    9180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]++;
    9184:	4a06      	ldr	r2, [pc, #24]	; (91a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9186:	9b01      	ldr	r3, [sp, #4]
    9188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    918c:	1c5a      	adds	r2, r3, #1
    918e:	4904      	ldr	r1, [pc, #16]	; (91a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9190:	9b01      	ldr	r3, [sp, #4]
    9192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9196:	bf00      	nop
    9198:	b003      	add	sp, #12
    919a:	f85d fb04 	ldr.w	pc, [sp], #4
    919e:	bf00      	nop
    91a0:	1fff9130 	.word	0x1fff9130
    91a4:	1fff912c 	.word	0x1fff912c

000091a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    91a8:	b500      	push	{lr}
    91aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91ac:	f7f7 fcd6 	bl	b5c <Sys_GetCoreID>
    91b0:	4603      	mov	r3, r0
    91b2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]--;
    91b4:	4a0d      	ldr	r2, [pc, #52]	; (91ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    91b6:	9b01      	ldr	r3, [sp, #4]
    91b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91bc:	1e5a      	subs	r2, r3, #1
    91be:	490b      	ldr	r1, [pc, #44]	; (91ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    91c0:	9b01      	ldr	r3, [sp, #4]
    91c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    91c6:	4a0a      	ldr	r2, [pc, #40]	; (91f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x48>)
    91c8:	9b01      	ldr	r3, [sp, #4]
    91ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ce:	f003 0301 	and.w	r3, r3, #1
    91d2:	2b00      	cmp	r3, #0
    91d4:	d106      	bne.n	91e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    91d6:	4a05      	ldr	r2, [pc, #20]	; (91ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    91d8:	9b01      	ldr	r3, [sp, #4]
    91da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91de:	2b00      	cmp	r3, #0
    91e0:	d100      	bne.n	91e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    91e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    91e4:	bf00      	nop
    91e6:	b003      	add	sp, #12
    91e8:	f85d fb04 	ldr.w	pc, [sp], #4
    91ec:	1fff9130 	.word	0x1fff9130
    91f0:	1fff912c 	.word	0x1fff912c

000091f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    91f4:	b500      	push	{lr}
    91f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91f8:	f7f7 fcb0 	bl	b5c <Sys_GetCoreID>
    91fc:	4603      	mov	r3, r0
    91fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId])
    9200:	4a10      	ldr	r2, [pc, #64]	; (9244 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9202:	9b01      	ldr	r3, [sp, #4]
    9204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9208:	2b00      	cmp	r3, #0
    920a:	d10d      	bne.n	9228 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    920c:	f7f7 fbc5 	bl	99a <Gpt_schm_read_msr>
    9210:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9212:	9b00      	ldr	r3, [sp, #0]
    9214:	f003 0301 	and.w	r3, r3, #1
    9218:	2b00      	cmp	r3, #0
    921a:	d100      	bne.n	921e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    921c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    921e:	490a      	ldr	r1, [pc, #40]	; (9248 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x54>)
    9220:	9b01      	ldr	r3, [sp, #4]
    9222:	9a00      	ldr	r2, [sp, #0]
    9224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]++;
    9228:	4a06      	ldr	r2, [pc, #24]	; (9244 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    922a:	9b01      	ldr	r3, [sp, #4]
    922c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9230:	1c5a      	adds	r2, r3, #1
    9232:	4904      	ldr	r1, [pc, #16]	; (9244 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9234:	9b01      	ldr	r3, [sp, #4]
    9236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    923a:	bf00      	nop
    923c:	b003      	add	sp, #12
    923e:	f85d fb04 	ldr.w	pc, [sp], #4
    9242:	bf00      	nop
    9244:	1fff9138 	.word	0x1fff9138
    9248:	1fff9134 	.word	0x1fff9134

0000924c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    924c:	b500      	push	{lr}
    924e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9250:	f7f7 fc84 	bl	b5c <Sys_GetCoreID>
    9254:	4603      	mov	r3, r0
    9256:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]--;
    9258:	4a0d      	ldr	r2, [pc, #52]	; (9290 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    925a:	9b01      	ldr	r3, [sp, #4]
    925c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9260:	1e5a      	subs	r2, r3, #1
    9262:	490b      	ldr	r1, [pc, #44]	; (9290 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9264:	9b01      	ldr	r3, [sp, #4]
    9266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    926a:	4a0a      	ldr	r2, [pc, #40]	; (9294 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x48>)
    926c:	9b01      	ldr	r3, [sp, #4]
    926e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9272:	f003 0301 	and.w	r3, r3, #1
    9276:	2b00      	cmp	r3, #0
    9278:	d106      	bne.n	9288 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    927a:	4a05      	ldr	r2, [pc, #20]	; (9290 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    927c:	9b01      	ldr	r3, [sp, #4]
    927e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9282:	2b00      	cmp	r3, #0
    9284:	d100      	bne.n	9288 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9286:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9288:	bf00      	nop
    928a:	b003      	add	sp, #12
    928c:	f85d fb04 	ldr.w	pc, [sp], #4
    9290:	1fff9138 	.word	0x1fff9138
    9294:	1fff9134 	.word	0x1fff9134

00009298 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9298:	b500      	push	{lr}
    929a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    929c:	f7f7 fc5e 	bl	b5c <Sys_GetCoreID>
    92a0:	4603      	mov	r3, r0
    92a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId])
    92a4:	4a10      	ldr	r2, [pc, #64]	; (92e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    92a6:	9b01      	ldr	r3, [sp, #4]
    92a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d10d      	bne.n	92cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92b0:	f7f7 fb73 	bl	99a <Gpt_schm_read_msr>
    92b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92b6:	9b00      	ldr	r3, [sp, #0]
    92b8:	f003 0301 	and.w	r3, r3, #1
    92bc:	2b00      	cmp	r3, #0
    92be:	d100      	bne.n	92c2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    92c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    92c2:	490a      	ldr	r1, [pc, #40]	; (92ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x54>)
    92c4:	9b01      	ldr	r3, [sp, #4]
    92c6:	9a00      	ldr	r2, [sp, #0]
    92c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]++;
    92cc:	4a06      	ldr	r2, [pc, #24]	; (92e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    92ce:	9b01      	ldr	r3, [sp, #4]
    92d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92d4:	1c5a      	adds	r2, r3, #1
    92d6:	4904      	ldr	r1, [pc, #16]	; (92e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    92d8:	9b01      	ldr	r3, [sp, #4]
    92da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    92de:	bf00      	nop
    92e0:	b003      	add	sp, #12
    92e2:	f85d fb04 	ldr.w	pc, [sp], #4
    92e6:	bf00      	nop
    92e8:	1fff9140 	.word	0x1fff9140
    92ec:	1fff913c 	.word	0x1fff913c

000092f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    92f0:	b500      	push	{lr}
    92f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92f4:	f7f7 fc32 	bl	b5c <Sys_GetCoreID>
    92f8:	4603      	mov	r3, r0
    92fa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]--;
    92fc:	4a0d      	ldr	r2, [pc, #52]	; (9334 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    92fe:	9b01      	ldr	r3, [sp, #4]
    9300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9304:	1e5a      	subs	r2, r3, #1
    9306:	490b      	ldr	r1, [pc, #44]	; (9334 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9308:	9b01      	ldr	r3, [sp, #4]
    930a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    930e:	4a0a      	ldr	r2, [pc, #40]	; (9338 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x48>)
    9310:	9b01      	ldr	r3, [sp, #4]
    9312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9316:	f003 0301 	and.w	r3, r3, #1
    931a:	2b00      	cmp	r3, #0
    931c:	d106      	bne.n	932c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    931e:	4a05      	ldr	r2, [pc, #20]	; (9334 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9320:	9b01      	ldr	r3, [sp, #4]
    9322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9326:	2b00      	cmp	r3, #0
    9328:	d100      	bne.n	932c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    932a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    932c:	bf00      	nop
    932e:	b003      	add	sp, #12
    9330:	f85d fb04 	ldr.w	pc, [sp], #4
    9334:	1fff9140 	.word	0x1fff9140
    9338:	1fff913c 	.word	0x1fff913c

0000933c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    933c:	b500      	push	{lr}
    933e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9340:	f7f7 fc0c 	bl	b5c <Sys_GetCoreID>
    9344:	4603      	mov	r3, r0
    9346:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId])
    9348:	4a10      	ldr	r2, [pc, #64]	; (938c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    934a:	9b01      	ldr	r3, [sp, #4]
    934c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9350:	2b00      	cmp	r3, #0
    9352:	d10d      	bne.n	9370 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9354:	f7f7 fb21 	bl	99a <Gpt_schm_read_msr>
    9358:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    935a:	9b00      	ldr	r3, [sp, #0]
    935c:	f003 0301 	and.w	r3, r3, #1
    9360:	2b00      	cmp	r3, #0
    9362:	d100      	bne.n	9366 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9364:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    9366:	490a      	ldr	r1, [pc, #40]	; (9390 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x54>)
    9368:	9b01      	ldr	r3, [sp, #4]
    936a:	9a00      	ldr	r2, [sp, #0]
    936c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]++;
    9370:	4a06      	ldr	r2, [pc, #24]	; (938c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9372:	9b01      	ldr	r3, [sp, #4]
    9374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9378:	1c5a      	adds	r2, r3, #1
    937a:	4904      	ldr	r1, [pc, #16]	; (938c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    937c:	9b01      	ldr	r3, [sp, #4]
    937e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9382:	bf00      	nop
    9384:	b003      	add	sp, #12
    9386:	f85d fb04 	ldr.w	pc, [sp], #4
    938a:	bf00      	nop
    938c:	1fff9148 	.word	0x1fff9148
    9390:	1fff9144 	.word	0x1fff9144

00009394 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9394:	b500      	push	{lr}
    9396:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9398:	f7f7 fbe0 	bl	b5c <Sys_GetCoreID>
    939c:	4603      	mov	r3, r0
    939e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]--;
    93a0:	4a0d      	ldr	r2, [pc, #52]	; (93d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    93a2:	9b01      	ldr	r3, [sp, #4]
    93a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93a8:	1e5a      	subs	r2, r3, #1
    93aa:	490b      	ldr	r1, [pc, #44]	; (93d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    93ac:	9b01      	ldr	r3, [sp, #4]
    93ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    93b2:	4a0a      	ldr	r2, [pc, #40]	; (93dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x48>)
    93b4:	9b01      	ldr	r3, [sp, #4]
    93b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ba:	f003 0301 	and.w	r3, r3, #1
    93be:	2b00      	cmp	r3, #0
    93c0:	d106      	bne.n	93d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    93c2:	4a05      	ldr	r2, [pc, #20]	; (93d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    93c4:	9b01      	ldr	r3, [sp, #4]
    93c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ca:	2b00      	cmp	r3, #0
    93cc:	d100      	bne.n	93d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    93ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    93d0:	bf00      	nop
    93d2:	b003      	add	sp, #12
    93d4:	f85d fb04 	ldr.w	pc, [sp], #4
    93d8:	1fff9148 	.word	0x1fff9148
    93dc:	1fff9144 	.word	0x1fff9144

000093e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    93e0:	b500      	push	{lr}
    93e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93e4:	f7f7 fbba 	bl	b5c <Sys_GetCoreID>
    93e8:	4603      	mov	r3, r0
    93ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId])
    93ec:	4a10      	ldr	r2, [pc, #64]	; (9430 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    93ee:	9b01      	ldr	r3, [sp, #4]
    93f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d10d      	bne.n	9414 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    93f8:	f7f7 facf 	bl	99a <Gpt_schm_read_msr>
    93fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    93fe:	9b00      	ldr	r3, [sp, #0]
    9400:	f003 0301 	and.w	r3, r3, #1
    9404:	2b00      	cmp	r3, #0
    9406:	d100      	bne.n	940a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9408:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    940a:	490a      	ldr	r1, [pc, #40]	; (9434 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x54>)
    940c:	9b01      	ldr	r3, [sp, #4]
    940e:	9a00      	ldr	r2, [sp, #0]
    9410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]++;
    9414:	4a06      	ldr	r2, [pc, #24]	; (9430 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9416:	9b01      	ldr	r3, [sp, #4]
    9418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    941c:	1c5a      	adds	r2, r3, #1
    941e:	4904      	ldr	r1, [pc, #16]	; (9430 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9420:	9b01      	ldr	r3, [sp, #4]
    9422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9426:	bf00      	nop
    9428:	b003      	add	sp, #12
    942a:	f85d fb04 	ldr.w	pc, [sp], #4
    942e:	bf00      	nop
    9430:	1fff9150 	.word	0x1fff9150
    9434:	1fff914c 	.word	0x1fff914c

00009438 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9438:	b500      	push	{lr}
    943a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    943c:	f7f7 fb8e 	bl	b5c <Sys_GetCoreID>
    9440:	4603      	mov	r3, r0
    9442:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]--;
    9444:	4a0d      	ldr	r2, [pc, #52]	; (947c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9446:	9b01      	ldr	r3, [sp, #4]
    9448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    944c:	1e5a      	subs	r2, r3, #1
    944e:	490b      	ldr	r1, [pc, #44]	; (947c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9450:	9b01      	ldr	r3, [sp, #4]
    9452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    9456:	4a0a      	ldr	r2, [pc, #40]	; (9480 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x48>)
    9458:	9b01      	ldr	r3, [sp, #4]
    945a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    945e:	f003 0301 	and.w	r3, r3, #1
    9462:	2b00      	cmp	r3, #0
    9464:	d106      	bne.n	9474 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    9466:	4a05      	ldr	r2, [pc, #20]	; (947c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9468:	9b01      	ldr	r3, [sp, #4]
    946a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    946e:	2b00      	cmp	r3, #0
    9470:	d100      	bne.n	9474 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9472:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9474:	bf00      	nop
    9476:	b003      	add	sp, #12
    9478:	f85d fb04 	ldr.w	pc, [sp], #4
    947c:	1fff9150 	.word	0x1fff9150
    9480:	1fff914c 	.word	0x1fff914c

00009484 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9484:	b500      	push	{lr}
    9486:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9488:	f7f7 fb68 	bl	b5c <Sys_GetCoreID>
    948c:	4603      	mov	r3, r0
    948e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId])
    9490:	4a10      	ldr	r2, [pc, #64]	; (94d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9492:	9b01      	ldr	r3, [sp, #4]
    9494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9498:	2b00      	cmp	r3, #0
    949a:	d10d      	bne.n	94b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    949c:	f7f7 fa7d 	bl	99a <Gpt_schm_read_msr>
    94a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    94a2:	9b00      	ldr	r3, [sp, #0]
    94a4:	f003 0301 	and.w	r3, r3, #1
    94a8:	2b00      	cmp	r3, #0
    94aa:	d100      	bne.n	94ae <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    94ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    94ae:	490a      	ldr	r1, [pc, #40]	; (94d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x54>)
    94b0:	9b01      	ldr	r3, [sp, #4]
    94b2:	9a00      	ldr	r2, [sp, #0]
    94b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]++;
    94b8:	4a06      	ldr	r2, [pc, #24]	; (94d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    94ba:	9b01      	ldr	r3, [sp, #4]
    94bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c0:	1c5a      	adds	r2, r3, #1
    94c2:	4904      	ldr	r1, [pc, #16]	; (94d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    94c4:	9b01      	ldr	r3, [sp, #4]
    94c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94ca:	bf00      	nop
    94cc:	b003      	add	sp, #12
    94ce:	f85d fb04 	ldr.w	pc, [sp], #4
    94d2:	bf00      	nop
    94d4:	1fff9158 	.word	0x1fff9158
    94d8:	1fff9154 	.word	0x1fff9154

000094dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    94dc:	b500      	push	{lr}
    94de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94e0:	f7f7 fb3c 	bl	b5c <Sys_GetCoreID>
    94e4:	4603      	mov	r3, r0
    94e6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]--;
    94e8:	4a0d      	ldr	r2, [pc, #52]	; (9520 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    94ea:	9b01      	ldr	r3, [sp, #4]
    94ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94f0:	1e5a      	subs	r2, r3, #1
    94f2:	490b      	ldr	r1, [pc, #44]	; (9520 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    94f4:	9b01      	ldr	r3, [sp, #4]
    94f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    94fa:	4a0a      	ldr	r2, [pc, #40]	; (9524 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x48>)
    94fc:	9b01      	ldr	r3, [sp, #4]
    94fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9502:	f003 0301 	and.w	r3, r3, #1
    9506:	2b00      	cmp	r3, #0
    9508:	d106      	bne.n	9518 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    950a:	4a05      	ldr	r2, [pc, #20]	; (9520 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    950c:	9b01      	ldr	r3, [sp, #4]
    950e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9512:	2b00      	cmp	r3, #0
    9514:	d100      	bne.n	9518 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9516:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9518:	bf00      	nop
    951a:	b003      	add	sp, #12
    951c:	f85d fb04 	ldr.w	pc, [sp], #4
    9520:	1fff9158 	.word	0x1fff9158
    9524:	1fff9154 	.word	0x1fff9154

00009528 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9528:	b500      	push	{lr}
    952a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    952c:	f7f7 fb16 	bl	b5c <Sys_GetCoreID>
    9530:	4603      	mov	r3, r0
    9532:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId])
    9534:	4a10      	ldr	r2, [pc, #64]	; (9578 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9536:	9b01      	ldr	r3, [sp, #4]
    9538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    953c:	2b00      	cmp	r3, #0
    953e:	d10d      	bne.n	955c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9540:	f7f7 fa2b 	bl	99a <Gpt_schm_read_msr>
    9544:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9546:	9b00      	ldr	r3, [sp, #0]
    9548:	f003 0301 	and.w	r3, r3, #1
    954c:	2b00      	cmp	r3, #0
    954e:	d100      	bne.n	9552 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9550:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    9552:	490a      	ldr	r1, [pc, #40]	; (957c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x54>)
    9554:	9b01      	ldr	r3, [sp, #4]
    9556:	9a00      	ldr	r2, [sp, #0]
    9558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]++;
    955c:	4a06      	ldr	r2, [pc, #24]	; (9578 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    955e:	9b01      	ldr	r3, [sp, #4]
    9560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9564:	1c5a      	adds	r2, r3, #1
    9566:	4904      	ldr	r1, [pc, #16]	; (9578 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9568:	9b01      	ldr	r3, [sp, #4]
    956a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    956e:	bf00      	nop
    9570:	b003      	add	sp, #12
    9572:	f85d fb04 	ldr.w	pc, [sp], #4
    9576:	bf00      	nop
    9578:	1fff9160 	.word	0x1fff9160
    957c:	1fff915c 	.word	0x1fff915c

00009580 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9580:	b500      	push	{lr}
    9582:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9584:	f7f7 faea 	bl	b5c <Sys_GetCoreID>
    9588:	4603      	mov	r3, r0
    958a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]--;
    958c:	4a0d      	ldr	r2, [pc, #52]	; (95c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    958e:	9b01      	ldr	r3, [sp, #4]
    9590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9594:	1e5a      	subs	r2, r3, #1
    9596:	490b      	ldr	r1, [pc, #44]	; (95c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9598:	9b01      	ldr	r3, [sp, #4]
    959a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    959e:	4a0a      	ldr	r2, [pc, #40]	; (95c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x48>)
    95a0:	9b01      	ldr	r3, [sp, #4]
    95a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a6:	f003 0301 	and.w	r3, r3, #1
    95aa:	2b00      	cmp	r3, #0
    95ac:	d106      	bne.n	95bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    95ae:	4a05      	ldr	r2, [pc, #20]	; (95c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    95b0:	9b01      	ldr	r3, [sp, #4]
    95b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95b6:	2b00      	cmp	r3, #0
    95b8:	d100      	bne.n	95bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    95bc:	bf00      	nop
    95be:	b003      	add	sp, #12
    95c0:	f85d fb04 	ldr.w	pc, [sp], #4
    95c4:	1fff9160 	.word	0x1fff9160
    95c8:	1fff915c 	.word	0x1fff915c

000095cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    95cc:	b500      	push	{lr}
    95ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95d0:	f7f7 fac4 	bl	b5c <Sys_GetCoreID>
    95d4:	4603      	mov	r3, r0
    95d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId])
    95d8:	4a10      	ldr	r2, [pc, #64]	; (961c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    95da:	9b01      	ldr	r3, [sp, #4]
    95dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d10d      	bne.n	9600 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    95e4:	f7f7 f9d9 	bl	99a <Gpt_schm_read_msr>
    95e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    95ea:	9b00      	ldr	r3, [sp, #0]
    95ec:	f003 0301 	and.w	r3, r3, #1
    95f0:	2b00      	cmp	r3, #0
    95f2:	d100      	bne.n	95f6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    95f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    95f6:	490a      	ldr	r1, [pc, #40]	; (9620 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x54>)
    95f8:	9b01      	ldr	r3, [sp, #4]
    95fa:	9a00      	ldr	r2, [sp, #0]
    95fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]++;
    9600:	4a06      	ldr	r2, [pc, #24]	; (961c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9602:	9b01      	ldr	r3, [sp, #4]
    9604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9608:	1c5a      	adds	r2, r3, #1
    960a:	4904      	ldr	r1, [pc, #16]	; (961c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    960c:	9b01      	ldr	r3, [sp, #4]
    960e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9612:	bf00      	nop
    9614:	b003      	add	sp, #12
    9616:	f85d fb04 	ldr.w	pc, [sp], #4
    961a:	bf00      	nop
    961c:	1fff9168 	.word	0x1fff9168
    9620:	1fff9164 	.word	0x1fff9164

00009624 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9624:	b500      	push	{lr}
    9626:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9628:	f7f7 fa98 	bl	b5c <Sys_GetCoreID>
    962c:	4603      	mov	r3, r0
    962e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]--;
    9630:	4a0d      	ldr	r2, [pc, #52]	; (9668 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9632:	9b01      	ldr	r3, [sp, #4]
    9634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9638:	1e5a      	subs	r2, r3, #1
    963a:	490b      	ldr	r1, [pc, #44]	; (9668 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    963c:	9b01      	ldr	r3, [sp, #4]
    963e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    9642:	4a0a      	ldr	r2, [pc, #40]	; (966c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x48>)
    9644:	9b01      	ldr	r3, [sp, #4]
    9646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    964a:	f003 0301 	and.w	r3, r3, #1
    964e:	2b00      	cmp	r3, #0
    9650:	d106      	bne.n	9660 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    9652:	4a05      	ldr	r2, [pc, #20]	; (9668 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9654:	9b01      	ldr	r3, [sp, #4]
    9656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    965a:	2b00      	cmp	r3, #0
    965c:	d100      	bne.n	9660 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    965e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9660:	bf00      	nop
    9662:	b003      	add	sp, #12
    9664:	f85d fb04 	ldr.w	pc, [sp], #4
    9668:	1fff9168 	.word	0x1fff9168
    966c:	1fff9164 	.word	0x1fff9164

00009670 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9670:	b500      	push	{lr}
    9672:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9674:	f7f7 fa72 	bl	b5c <Sys_GetCoreID>
    9678:	4603      	mov	r3, r0
    967a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId])
    967c:	4a10      	ldr	r2, [pc, #64]	; (96c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    967e:	9b01      	ldr	r3, [sp, #4]
    9680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9684:	2b00      	cmp	r3, #0
    9686:	d10d      	bne.n	96a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9688:	f7f7 f987 	bl	99a <Gpt_schm_read_msr>
    968c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    968e:	9b00      	ldr	r3, [sp, #0]
    9690:	f003 0301 	and.w	r3, r3, #1
    9694:	2b00      	cmp	r3, #0
    9696:	d100      	bne.n	969a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9698:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    969a:	490a      	ldr	r1, [pc, #40]	; (96c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x54>)
    969c:	9b01      	ldr	r3, [sp, #4]
    969e:	9a00      	ldr	r2, [sp, #0]
    96a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]++;
    96a4:	4a06      	ldr	r2, [pc, #24]	; (96c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    96a6:	9b01      	ldr	r3, [sp, #4]
    96a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ac:	1c5a      	adds	r2, r3, #1
    96ae:	4904      	ldr	r1, [pc, #16]	; (96c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    96b0:	9b01      	ldr	r3, [sp, #4]
    96b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96b6:	bf00      	nop
    96b8:	b003      	add	sp, #12
    96ba:	f85d fb04 	ldr.w	pc, [sp], #4
    96be:	bf00      	nop
    96c0:	1fff9170 	.word	0x1fff9170
    96c4:	1fff916c 	.word	0x1fff916c

000096c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    96c8:	b500      	push	{lr}
    96ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96cc:	f7f7 fa46 	bl	b5c <Sys_GetCoreID>
    96d0:	4603      	mov	r3, r0
    96d2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]--;
    96d4:	4a0d      	ldr	r2, [pc, #52]	; (970c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    96d6:	9b01      	ldr	r3, [sp, #4]
    96d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96dc:	1e5a      	subs	r2, r3, #1
    96de:	490b      	ldr	r1, [pc, #44]	; (970c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    96e0:	9b01      	ldr	r3, [sp, #4]
    96e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    96e6:	4a0a      	ldr	r2, [pc, #40]	; (9710 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x48>)
    96e8:	9b01      	ldr	r3, [sp, #4]
    96ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ee:	f003 0301 	and.w	r3, r3, #1
    96f2:	2b00      	cmp	r3, #0
    96f4:	d106      	bne.n	9704 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    96f6:	4a05      	ldr	r2, [pc, #20]	; (970c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    96f8:	9b01      	ldr	r3, [sp, #4]
    96fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96fe:	2b00      	cmp	r3, #0
    9700:	d100      	bne.n	9704 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9702:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9704:	bf00      	nop
    9706:	b003      	add	sp, #12
    9708:	f85d fb04 	ldr.w	pc, [sp], #4
    970c:	1fff9170 	.word	0x1fff9170
    9710:	1fff916c 	.word	0x1fff916c

00009714 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    9714:	b500      	push	{lr}
    9716:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9718:	f7f7 fa20 	bl	b5c <Sys_GetCoreID>
    971c:	4603      	mov	r3, r0
    971e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId])
    9720:	4a10      	ldr	r2, [pc, #64]	; (9764 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9722:	9b01      	ldr	r3, [sp, #4]
    9724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9728:	2b00      	cmp	r3, #0
    972a:	d10d      	bne.n	9748 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    972c:	f7f7 f935 	bl	99a <Gpt_schm_read_msr>
    9730:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9732:	9b00      	ldr	r3, [sp, #0]
    9734:	f003 0301 	and.w	r3, r3, #1
    9738:	2b00      	cmp	r3, #0
    973a:	d100      	bne.n	973e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    973c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    973e:	490a      	ldr	r1, [pc, #40]	; (9768 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x54>)
    9740:	9b01      	ldr	r3, [sp, #4]
    9742:	9a00      	ldr	r2, [sp, #0]
    9744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]++;
    9748:	4a06      	ldr	r2, [pc, #24]	; (9764 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    974a:	9b01      	ldr	r3, [sp, #4]
    974c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9750:	1c5a      	adds	r2, r3, #1
    9752:	4904      	ldr	r1, [pc, #16]	; (9764 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9754:	9b01      	ldr	r3, [sp, #4]
    9756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    975a:	bf00      	nop
    975c:	b003      	add	sp, #12
    975e:	f85d fb04 	ldr.w	pc, [sp], #4
    9762:	bf00      	nop
    9764:	1fff9178 	.word	0x1fff9178
    9768:	1fff9174 	.word	0x1fff9174

0000976c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    976c:	b500      	push	{lr}
    976e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9770:	f7f7 f9f4 	bl	b5c <Sys_GetCoreID>
    9774:	4603      	mov	r3, r0
    9776:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]--;
    9778:	4a0d      	ldr	r2, [pc, #52]	; (97b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    977a:	9b01      	ldr	r3, [sp, #4]
    977c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9780:	1e5a      	subs	r2, r3, #1
    9782:	490b      	ldr	r1, [pc, #44]	; (97b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9784:	9b01      	ldr	r3, [sp, #4]
    9786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    978a:	4a0a      	ldr	r2, [pc, #40]	; (97b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x48>)
    978c:	9b01      	ldr	r3, [sp, #4]
    978e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9792:	f003 0301 	and.w	r3, r3, #1
    9796:	2b00      	cmp	r3, #0
    9798:	d106      	bne.n	97a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    979a:	4a05      	ldr	r2, [pc, #20]	; (97b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    979c:	9b01      	ldr	r3, [sp, #4]
    979e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a2:	2b00      	cmp	r3, #0
    97a4:	d100      	bne.n	97a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    97a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    97a8:	bf00      	nop
    97aa:	b003      	add	sp, #12
    97ac:	f85d fb04 	ldr.w	pc, [sp], #4
    97b0:	1fff9178 	.word	0x1fff9178
    97b4:	1fff9174 	.word	0x1fff9174

000097b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    97b8:	b500      	push	{lr}
    97ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97bc:	f7f7 f9ce 	bl	b5c <Sys_GetCoreID>
    97c0:	4603      	mov	r3, r0
    97c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId])
    97c4:	4a10      	ldr	r2, [pc, #64]	; (9808 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    97c6:	9b01      	ldr	r3, [sp, #4]
    97c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d10d      	bne.n	97ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    97d0:	f7f7 f8e3 	bl	99a <Gpt_schm_read_msr>
    97d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    97d6:	9b00      	ldr	r3, [sp, #0]
    97d8:	f003 0301 	and.w	r3, r3, #1
    97dc:	2b00      	cmp	r3, #0
    97de:	d100      	bne.n	97e2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    97e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    97e2:	490a      	ldr	r1, [pc, #40]	; (980c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x54>)
    97e4:	9b01      	ldr	r3, [sp, #4]
    97e6:	9a00      	ldr	r2, [sp, #0]
    97e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]++;
    97ec:	4a06      	ldr	r2, [pc, #24]	; (9808 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    97ee:	9b01      	ldr	r3, [sp, #4]
    97f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f4:	1c5a      	adds	r2, r3, #1
    97f6:	4904      	ldr	r1, [pc, #16]	; (9808 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    97f8:	9b01      	ldr	r3, [sp, #4]
    97fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    97fe:	bf00      	nop
    9800:	b003      	add	sp, #12
    9802:	f85d fb04 	ldr.w	pc, [sp], #4
    9806:	bf00      	nop
    9808:	1fff9180 	.word	0x1fff9180
    980c:	1fff917c 	.word	0x1fff917c

00009810 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    9810:	b500      	push	{lr}
    9812:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9814:	f7f7 f9a2 	bl	b5c <Sys_GetCoreID>
    9818:	4603      	mov	r3, r0
    981a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]--;
    981c:	4a0d      	ldr	r2, [pc, #52]	; (9854 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    981e:	9b01      	ldr	r3, [sp, #4]
    9820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9824:	1e5a      	subs	r2, r3, #1
    9826:	490b      	ldr	r1, [pc, #44]	; (9854 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    9828:	9b01      	ldr	r3, [sp, #4]
    982a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    982e:	4a0a      	ldr	r2, [pc, #40]	; (9858 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x48>)
    9830:	9b01      	ldr	r3, [sp, #4]
    9832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9836:	f003 0301 	and.w	r3, r3, #1
    983a:	2b00      	cmp	r3, #0
    983c:	d106      	bne.n	984c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    983e:	4a05      	ldr	r2, [pc, #20]	; (9854 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    9840:	9b01      	ldr	r3, [sp, #4]
    9842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9846:	2b00      	cmp	r3, #0
    9848:	d100      	bne.n	984c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    984a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    984c:	bf00      	nop
    984e:	b003      	add	sp, #12
    9850:	f85d fb04 	ldr.w	pc, [sp], #4
    9854:	1fff9180 	.word	0x1fff9180
    9858:	1fff917c 	.word	0x1fff917c

0000985c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    985c:	b500      	push	{lr}
    985e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9860:	f7f7 f97c 	bl	b5c <Sys_GetCoreID>
    9864:	4603      	mov	r3, r0
    9866:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId])
    9868:	4a10      	ldr	r2, [pc, #64]	; (98ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    986a:	9b01      	ldr	r3, [sp, #4]
    986c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9870:	2b00      	cmp	r3, #0
    9872:	d10d      	bne.n	9890 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9874:	f7f7 f891 	bl	99a <Gpt_schm_read_msr>
    9878:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    987a:	9b00      	ldr	r3, [sp, #0]
    987c:	f003 0301 	and.w	r3, r3, #1
    9880:	2b00      	cmp	r3, #0
    9882:	d100      	bne.n	9886 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9884:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    9886:	490a      	ldr	r1, [pc, #40]	; (98b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x54>)
    9888:	9b01      	ldr	r3, [sp, #4]
    988a:	9a00      	ldr	r2, [sp, #0]
    988c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]++;
    9890:	4a06      	ldr	r2, [pc, #24]	; (98ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    9892:	9b01      	ldr	r3, [sp, #4]
    9894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9898:	1c5a      	adds	r2, r3, #1
    989a:	4904      	ldr	r1, [pc, #16]	; (98ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    989c:	9b01      	ldr	r3, [sp, #4]
    989e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    98a2:	bf00      	nop
    98a4:	b003      	add	sp, #12
    98a6:	f85d fb04 	ldr.w	pc, [sp], #4
    98aa:	bf00      	nop
    98ac:	1fff9188 	.word	0x1fff9188
    98b0:	1fff9184 	.word	0x1fff9184

000098b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    98b4:	b500      	push	{lr}
    98b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98b8:	f7f7 f950 	bl	b5c <Sys_GetCoreID>
    98bc:	4603      	mov	r3, r0
    98be:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]--;
    98c0:	4a0d      	ldr	r2, [pc, #52]	; (98f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    98c2:	9b01      	ldr	r3, [sp, #4]
    98c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98c8:	1e5a      	subs	r2, r3, #1
    98ca:	490b      	ldr	r1, [pc, #44]	; (98f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    98cc:	9b01      	ldr	r3, [sp, #4]
    98ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    98d2:	4a0a      	ldr	r2, [pc, #40]	; (98fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x48>)
    98d4:	9b01      	ldr	r3, [sp, #4]
    98d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98da:	f003 0301 	and.w	r3, r3, #1
    98de:	2b00      	cmp	r3, #0
    98e0:	d106      	bne.n	98f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    98e2:	4a05      	ldr	r2, [pc, #20]	; (98f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    98e4:	9b01      	ldr	r3, [sp, #4]
    98e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ea:	2b00      	cmp	r3, #0
    98ec:	d100      	bne.n	98f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    98ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    98f0:	bf00      	nop
    98f2:	b003      	add	sp, #12
    98f4:	f85d fb04 	ldr.w	pc, [sp], #4
    98f8:	1fff9188 	.word	0x1fff9188
    98fc:	1fff9184 	.word	0x1fff9184

00009900 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    9900:	b500      	push	{lr}
    9902:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9904:	f7f7 f92a 	bl	b5c <Sys_GetCoreID>
    9908:	4603      	mov	r3, r0
    990a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId])
    990c:	4a10      	ldr	r2, [pc, #64]	; (9950 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    990e:	9b01      	ldr	r3, [sp, #4]
    9910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9914:	2b00      	cmp	r3, #0
    9916:	d10d      	bne.n	9934 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9918:	f7f7 f83f 	bl	99a <Gpt_schm_read_msr>
    991c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    991e:	9b00      	ldr	r3, [sp, #0]
    9920:	f003 0301 	and.w	r3, r3, #1
    9924:	2b00      	cmp	r3, #0
    9926:	d100      	bne.n	992a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9928:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    992a:	490a      	ldr	r1, [pc, #40]	; (9954 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x54>)
    992c:	9b01      	ldr	r3, [sp, #4]
    992e:	9a00      	ldr	r2, [sp, #0]
    9930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]++;
    9934:	4a06      	ldr	r2, [pc, #24]	; (9950 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    9936:	9b01      	ldr	r3, [sp, #4]
    9938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    993c:	1c5a      	adds	r2, r3, #1
    993e:	4904      	ldr	r1, [pc, #16]	; (9950 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    9940:	9b01      	ldr	r3, [sp, #4]
    9942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9946:	bf00      	nop
    9948:	b003      	add	sp, #12
    994a:	f85d fb04 	ldr.w	pc, [sp], #4
    994e:	bf00      	nop
    9950:	1fff9190 	.word	0x1fff9190
    9954:	1fff918c 	.word	0x1fff918c

00009958 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    9958:	b500      	push	{lr}
    995a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    995c:	f7f7 f8fe 	bl	b5c <Sys_GetCoreID>
    9960:	4603      	mov	r3, r0
    9962:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]--;
    9964:	4a0d      	ldr	r2, [pc, #52]	; (999c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    9966:	9b01      	ldr	r3, [sp, #4]
    9968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    996c:	1e5a      	subs	r2, r3, #1
    996e:	490b      	ldr	r1, [pc, #44]	; (999c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    9970:	9b01      	ldr	r3, [sp, #4]
    9972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    9976:	4a0a      	ldr	r2, [pc, #40]	; (99a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x48>)
    9978:	9b01      	ldr	r3, [sp, #4]
    997a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    997e:	f003 0301 	and.w	r3, r3, #1
    9982:	2b00      	cmp	r3, #0
    9984:	d106      	bne.n	9994 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    9986:	4a05      	ldr	r2, [pc, #20]	; (999c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    9988:	9b01      	ldr	r3, [sp, #4]
    998a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    998e:	2b00      	cmp	r3, #0
    9990:	d100      	bne.n	9994 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9992:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9994:	bf00      	nop
    9996:	b003      	add	sp, #12
    9998:	f85d fb04 	ldr.w	pc, [sp], #4
    999c:	1fff9190 	.word	0x1fff9190
    99a0:	1fff918c 	.word	0x1fff918c

000099a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    99a4:	b500      	push	{lr}
    99a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99a8:	f7f7 f8d8 	bl	b5c <Sys_GetCoreID>
    99ac:	4603      	mov	r3, r0
    99ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId])
    99b0:	4a10      	ldr	r2, [pc, #64]	; (99f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    99b2:	9b01      	ldr	r3, [sp, #4]
    99b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99b8:	2b00      	cmp	r3, #0
    99ba:	d10d      	bne.n	99d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    99bc:	f7f6 ffed 	bl	99a <Gpt_schm_read_msr>
    99c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    99c2:	9b00      	ldr	r3, [sp, #0]
    99c4:	f003 0301 	and.w	r3, r3, #1
    99c8:	2b00      	cmp	r3, #0
    99ca:	d100      	bne.n	99ce <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    99cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    99ce:	490a      	ldr	r1, [pc, #40]	; (99f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x54>)
    99d0:	9b01      	ldr	r3, [sp, #4]
    99d2:	9a00      	ldr	r2, [sp, #0]
    99d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]++;
    99d8:	4a06      	ldr	r2, [pc, #24]	; (99f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    99da:	9b01      	ldr	r3, [sp, #4]
    99dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99e0:	1c5a      	adds	r2, r3, #1
    99e2:	4904      	ldr	r1, [pc, #16]	; (99f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    99e4:	9b01      	ldr	r3, [sp, #4]
    99e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    99ea:	bf00      	nop
    99ec:	b003      	add	sp, #12
    99ee:	f85d fb04 	ldr.w	pc, [sp], #4
    99f2:	bf00      	nop
    99f4:	1fff9198 	.word	0x1fff9198
    99f8:	1fff9194 	.word	0x1fff9194

000099fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    99fc:	b500      	push	{lr}
    99fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a00:	f7f7 f8ac 	bl	b5c <Sys_GetCoreID>
    9a04:	4603      	mov	r3, r0
    9a06:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]--;
    9a08:	4a0d      	ldr	r2, [pc, #52]	; (9a40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    9a0a:	9b01      	ldr	r3, [sp, #4]
    9a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a10:	1e5a      	subs	r2, r3, #1
    9a12:	490b      	ldr	r1, [pc, #44]	; (9a40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    9a14:	9b01      	ldr	r3, [sp, #4]
    9a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    9a1a:	4a0a      	ldr	r2, [pc, #40]	; (9a44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x48>)
    9a1c:	9b01      	ldr	r3, [sp, #4]
    9a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a22:	f003 0301 	and.w	r3, r3, #1
    9a26:	2b00      	cmp	r3, #0
    9a28:	d106      	bne.n	9a38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    9a2a:	4a05      	ldr	r2, [pc, #20]	; (9a40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    9a2c:	9b01      	ldr	r3, [sp, #4]
    9a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a32:	2b00      	cmp	r3, #0
    9a34:	d100      	bne.n	9a38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a38:	bf00      	nop
    9a3a:	b003      	add	sp, #12
    9a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    9a40:	1fff9198 	.word	0x1fff9198
    9a44:	1fff9194 	.word	0x1fff9194

00009a48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    9a48:	b500      	push	{lr}
    9a4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a4c:	f7f7 f886 	bl	b5c <Sys_GetCoreID>
    9a50:	4603      	mov	r3, r0
    9a52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    9a54:	4a10      	ldr	r2, [pc, #64]	; (9a98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    9a56:	9b01      	ldr	r3, [sp, #4]
    9a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	d10d      	bne.n	9a7c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a60:	f7f6 ffa4 	bl	9ac <Mcu_schm_read_msr>
    9a64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a66:	9b00      	ldr	r3, [sp, #0]
    9a68:	f003 0301 	and.w	r3, r3, #1
    9a6c:	2b00      	cmp	r3, #0
    9a6e:	d100      	bne.n	9a72 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    9a72:	490a      	ldr	r1, [pc, #40]	; (9a9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    9a74:	9b01      	ldr	r3, [sp, #4]
    9a76:	9a00      	ldr	r2, [sp, #0]
    9a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    9a7c:	4a06      	ldr	r2, [pc, #24]	; (9a98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    9a7e:	9b01      	ldr	r3, [sp, #4]
    9a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a84:	1c5a      	adds	r2, r3, #1
    9a86:	4904      	ldr	r1, [pc, #16]	; (9a98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    9a88:	9b01      	ldr	r3, [sp, #4]
    9a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a8e:	bf00      	nop
    9a90:	b003      	add	sp, #12
    9a92:	f85d fb04 	ldr.w	pc, [sp], #4
    9a96:	bf00      	nop
    9a98:	1fff91a0 	.word	0x1fff91a0
    9a9c:	1fff919c 	.word	0x1fff919c

00009aa0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    9aa0:	b500      	push	{lr}
    9aa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9aa4:	f7f7 f85a 	bl	b5c <Sys_GetCoreID>
    9aa8:	4603      	mov	r3, r0
    9aaa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    9aac:	4a0d      	ldr	r2, [pc, #52]	; (9ae4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    9aae:	9b01      	ldr	r3, [sp, #4]
    9ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab4:	1e5a      	subs	r2, r3, #1
    9ab6:	490b      	ldr	r1, [pc, #44]	; (9ae4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    9ab8:	9b01      	ldr	r3, [sp, #4]
    9aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    9abe:	4a0a      	ldr	r2, [pc, #40]	; (9ae8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    9ac0:	9b01      	ldr	r3, [sp, #4]
    9ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac6:	f003 0301 	and.w	r3, r3, #1
    9aca:	2b00      	cmp	r3, #0
    9acc:	d106      	bne.n	9adc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    9ace:	4a05      	ldr	r2, [pc, #20]	; (9ae4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    9ad0:	9b01      	ldr	r3, [sp, #4]
    9ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d100      	bne.n	9adc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ada:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9adc:	bf00      	nop
    9ade:	b003      	add	sp, #12
    9ae0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ae4:	1fff91a0 	.word	0x1fff91a0
    9ae8:	1fff919c 	.word	0x1fff919c

00009aec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    9aec:	b500      	push	{lr}
    9aee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9af0:	f7f7 f834 	bl	b5c <Sys_GetCoreID>
    9af4:	4603      	mov	r3, r0
    9af6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    9af8:	4a10      	ldr	r2, [pc, #64]	; (9b3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    9afa:	9b01      	ldr	r3, [sp, #4]
    9afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b00:	2b00      	cmp	r3, #0
    9b02:	d10d      	bne.n	9b20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b04:	f7f6 ff52 	bl	9ac <Mcu_schm_read_msr>
    9b08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b0a:	9b00      	ldr	r3, [sp, #0]
    9b0c:	f003 0301 	and.w	r3, r3, #1
    9b10:	2b00      	cmp	r3, #0
    9b12:	d100      	bne.n	9b16 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    9b16:	490a      	ldr	r1, [pc, #40]	; (9b40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    9b18:	9b01      	ldr	r3, [sp, #4]
    9b1a:	9a00      	ldr	r2, [sp, #0]
    9b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    9b20:	4a06      	ldr	r2, [pc, #24]	; (9b3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    9b22:	9b01      	ldr	r3, [sp, #4]
    9b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b28:	1c5a      	adds	r2, r3, #1
    9b2a:	4904      	ldr	r1, [pc, #16]	; (9b3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    9b2c:	9b01      	ldr	r3, [sp, #4]
    9b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b32:	bf00      	nop
    9b34:	b003      	add	sp, #12
    9b36:	f85d fb04 	ldr.w	pc, [sp], #4
    9b3a:	bf00      	nop
    9b3c:	1fff91a8 	.word	0x1fff91a8
    9b40:	1fff91a4 	.word	0x1fff91a4

00009b44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    9b44:	b500      	push	{lr}
    9b46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b48:	f7f7 f808 	bl	b5c <Sys_GetCoreID>
    9b4c:	4603      	mov	r3, r0
    9b4e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    9b50:	4a0d      	ldr	r2, [pc, #52]	; (9b88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    9b52:	9b01      	ldr	r3, [sp, #4]
    9b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b58:	1e5a      	subs	r2, r3, #1
    9b5a:	490b      	ldr	r1, [pc, #44]	; (9b88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    9b5c:	9b01      	ldr	r3, [sp, #4]
    9b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    9b62:	4a0a      	ldr	r2, [pc, #40]	; (9b8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    9b64:	9b01      	ldr	r3, [sp, #4]
    9b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b6a:	f003 0301 	and.w	r3, r3, #1
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d106      	bne.n	9b80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    9b72:	4a05      	ldr	r2, [pc, #20]	; (9b88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    9b74:	9b01      	ldr	r3, [sp, #4]
    9b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b7a:	2b00      	cmp	r3, #0
    9b7c:	d100      	bne.n	9b80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b80:	bf00      	nop
    9b82:	b003      	add	sp, #12
    9b84:	f85d fb04 	ldr.w	pc, [sp], #4
    9b88:	1fff91a8 	.word	0x1fff91a8
    9b8c:	1fff91a4 	.word	0x1fff91a4

00009b90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    9b90:	b500      	push	{lr}
    9b92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b94:	f7f6 ffe2 	bl	b5c <Sys_GetCoreID>
    9b98:	4603      	mov	r3, r0
    9b9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    9b9c:	4a10      	ldr	r2, [pc, #64]	; (9be0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    9b9e:	9b01      	ldr	r3, [sp, #4]
    9ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d10d      	bne.n	9bc4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ba8:	f7f6 ff00 	bl	9ac <Mcu_schm_read_msr>
    9bac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9bae:	9b00      	ldr	r3, [sp, #0]
    9bb0:	f003 0301 	and.w	r3, r3, #1
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	d100      	bne.n	9bba <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9bb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    9bba:	490a      	ldr	r1, [pc, #40]	; (9be4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    9bbc:	9b01      	ldr	r3, [sp, #4]
    9bbe:	9a00      	ldr	r2, [sp, #0]
    9bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    9bc4:	4a06      	ldr	r2, [pc, #24]	; (9be0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    9bc6:	9b01      	ldr	r3, [sp, #4]
    9bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bcc:	1c5a      	adds	r2, r3, #1
    9bce:	4904      	ldr	r1, [pc, #16]	; (9be0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    9bd0:	9b01      	ldr	r3, [sp, #4]
    9bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9bd6:	bf00      	nop
    9bd8:	b003      	add	sp, #12
    9bda:	f85d fb04 	ldr.w	pc, [sp], #4
    9bde:	bf00      	nop
    9be0:	1fff91b0 	.word	0x1fff91b0
    9be4:	1fff91ac 	.word	0x1fff91ac

00009be8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    9be8:	b500      	push	{lr}
    9bea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bec:	f7f6 ffb6 	bl	b5c <Sys_GetCoreID>
    9bf0:	4603      	mov	r3, r0
    9bf2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    9bf4:	4a0d      	ldr	r2, [pc, #52]	; (9c2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    9bf6:	9b01      	ldr	r3, [sp, #4]
    9bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfc:	1e5a      	subs	r2, r3, #1
    9bfe:	490b      	ldr	r1, [pc, #44]	; (9c2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    9c00:	9b01      	ldr	r3, [sp, #4]
    9c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    9c06:	4a0a      	ldr	r2, [pc, #40]	; (9c30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    9c08:	9b01      	ldr	r3, [sp, #4]
    9c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c0e:	f003 0301 	and.w	r3, r3, #1
    9c12:	2b00      	cmp	r3, #0
    9c14:	d106      	bne.n	9c24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    9c16:	4a05      	ldr	r2, [pc, #20]	; (9c2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    9c18:	9b01      	ldr	r3, [sp, #4]
    9c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d100      	bne.n	9c24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c24:	bf00      	nop
    9c26:	b003      	add	sp, #12
    9c28:	f85d fb04 	ldr.w	pc, [sp], #4
    9c2c:	1fff91b0 	.word	0x1fff91b0
    9c30:	1fff91ac 	.word	0x1fff91ac

00009c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    9c34:	b500      	push	{lr}
    9c36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c38:	f7f6 ff90 	bl	b5c <Sys_GetCoreID>
    9c3c:	4603      	mov	r3, r0
    9c3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    9c40:	4a10      	ldr	r2, [pc, #64]	; (9c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    9c42:	9b01      	ldr	r3, [sp, #4]
    9c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d10d      	bne.n	9c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c4c:	f7f6 feb7 	bl	9be <Port_schm_read_msr>
    9c50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c52:	9b00      	ldr	r3, [sp, #0]
    9c54:	f003 0301 	and.w	r3, r3, #1
    9c58:	2b00      	cmp	r3, #0
    9c5a:	d100      	bne.n	9c5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    9c5e:	490a      	ldr	r1, [pc, #40]	; (9c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    9c60:	9b01      	ldr	r3, [sp, #4]
    9c62:	9a00      	ldr	r2, [sp, #0]
    9c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    9c68:	4a06      	ldr	r2, [pc, #24]	; (9c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    9c6a:	9b01      	ldr	r3, [sp, #4]
    9c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c70:	1c5a      	adds	r2, r3, #1
    9c72:	4904      	ldr	r1, [pc, #16]	; (9c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    9c74:	9b01      	ldr	r3, [sp, #4]
    9c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c7a:	bf00      	nop
    9c7c:	b003      	add	sp, #12
    9c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c82:	bf00      	nop
    9c84:	1fff91b8 	.word	0x1fff91b8
    9c88:	1fff91b4 	.word	0x1fff91b4

00009c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    9c8c:	b500      	push	{lr}
    9c8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c90:	f7f6 ff64 	bl	b5c <Sys_GetCoreID>
    9c94:	4603      	mov	r3, r0
    9c96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    9c98:	4a0d      	ldr	r2, [pc, #52]	; (9cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    9c9a:	9b01      	ldr	r3, [sp, #4]
    9c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ca0:	1e5a      	subs	r2, r3, #1
    9ca2:	490b      	ldr	r1, [pc, #44]	; (9cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    9ca4:	9b01      	ldr	r3, [sp, #4]
    9ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    9caa:	4a0a      	ldr	r2, [pc, #40]	; (9cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    9cac:	9b01      	ldr	r3, [sp, #4]
    9cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb2:	f003 0301 	and.w	r3, r3, #1
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d106      	bne.n	9cc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    9cba:	4a05      	ldr	r2, [pc, #20]	; (9cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    9cbc:	9b01      	ldr	r3, [sp, #4]
    9cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d100      	bne.n	9cc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9cc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9cc8:	bf00      	nop
    9cca:	b003      	add	sp, #12
    9ccc:	f85d fb04 	ldr.w	pc, [sp], #4
    9cd0:	1fff91b8 	.word	0x1fff91b8
    9cd4:	1fff91b4 	.word	0x1fff91b4

00009cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    9cd8:	b500      	push	{lr}
    9cda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cdc:	f7f6 ff3e 	bl	b5c <Sys_GetCoreID>
    9ce0:	4603      	mov	r3, r0
    9ce2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    9ce4:	4a10      	ldr	r2, [pc, #64]	; (9d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    9ce6:	9b01      	ldr	r3, [sp, #4]
    9ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cec:	2b00      	cmp	r3, #0
    9cee:	d10d      	bne.n	9d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9cf0:	f7f6 fe65 	bl	9be <Port_schm_read_msr>
    9cf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9cf6:	9b00      	ldr	r3, [sp, #0]
    9cf8:	f003 0301 	and.w	r3, r3, #1
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	d100      	bne.n	9d02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    9d02:	490a      	ldr	r1, [pc, #40]	; (9d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    9d04:	9b01      	ldr	r3, [sp, #4]
    9d06:	9a00      	ldr	r2, [sp, #0]
    9d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    9d0c:	4a06      	ldr	r2, [pc, #24]	; (9d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    9d0e:	9b01      	ldr	r3, [sp, #4]
    9d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d14:	1c5a      	adds	r2, r3, #1
    9d16:	4904      	ldr	r1, [pc, #16]	; (9d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    9d18:	9b01      	ldr	r3, [sp, #4]
    9d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d1e:	bf00      	nop
    9d20:	b003      	add	sp, #12
    9d22:	f85d fb04 	ldr.w	pc, [sp], #4
    9d26:	bf00      	nop
    9d28:	1fff91c0 	.word	0x1fff91c0
    9d2c:	1fff91bc 	.word	0x1fff91bc

00009d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    9d30:	b500      	push	{lr}
    9d32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d34:	f7f6 ff12 	bl	b5c <Sys_GetCoreID>
    9d38:	4603      	mov	r3, r0
    9d3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    9d3c:	4a0d      	ldr	r2, [pc, #52]	; (9d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    9d3e:	9b01      	ldr	r3, [sp, #4]
    9d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d44:	1e5a      	subs	r2, r3, #1
    9d46:	490b      	ldr	r1, [pc, #44]	; (9d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    9d48:	9b01      	ldr	r3, [sp, #4]
    9d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    9d4e:	4a0a      	ldr	r2, [pc, #40]	; (9d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    9d50:	9b01      	ldr	r3, [sp, #4]
    9d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d56:	f003 0301 	and.w	r3, r3, #1
    9d5a:	2b00      	cmp	r3, #0
    9d5c:	d106      	bne.n	9d6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    9d5e:	4a05      	ldr	r2, [pc, #20]	; (9d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    9d60:	9b01      	ldr	r3, [sp, #4]
    9d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d66:	2b00      	cmp	r3, #0
    9d68:	d100      	bne.n	9d6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d6c:	bf00      	nop
    9d6e:	b003      	add	sp, #12
    9d70:	f85d fb04 	ldr.w	pc, [sp], #4
    9d74:	1fff91c0 	.word	0x1fff91c0
    9d78:	1fff91bc 	.word	0x1fff91bc

00009d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    9d7c:	b500      	push	{lr}
    9d7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d80:	f7f6 feec 	bl	b5c <Sys_GetCoreID>
    9d84:	4603      	mov	r3, r0
    9d86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    9d88:	4a10      	ldr	r2, [pc, #64]	; (9dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    9d8a:	9b01      	ldr	r3, [sp, #4]
    9d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d90:	2b00      	cmp	r3, #0
    9d92:	d10d      	bne.n	9db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d94:	f7f6 fe13 	bl	9be <Port_schm_read_msr>
    9d98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d9a:	9b00      	ldr	r3, [sp, #0]
    9d9c:	f003 0301 	and.w	r3, r3, #1
    9da0:	2b00      	cmp	r3, #0
    9da2:	d100      	bne.n	9da6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9da4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    9da6:	490a      	ldr	r1, [pc, #40]	; (9dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    9da8:	9b01      	ldr	r3, [sp, #4]
    9daa:	9a00      	ldr	r2, [sp, #0]
    9dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    9db0:	4a06      	ldr	r2, [pc, #24]	; (9dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    9db2:	9b01      	ldr	r3, [sp, #4]
    9db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9db8:	1c5a      	adds	r2, r3, #1
    9dba:	4904      	ldr	r1, [pc, #16]	; (9dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    9dbc:	9b01      	ldr	r3, [sp, #4]
    9dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9dc2:	bf00      	nop
    9dc4:	b003      	add	sp, #12
    9dc6:	f85d fb04 	ldr.w	pc, [sp], #4
    9dca:	bf00      	nop
    9dcc:	1fff91c8 	.word	0x1fff91c8
    9dd0:	1fff91c4 	.word	0x1fff91c4

00009dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    9dd4:	b500      	push	{lr}
    9dd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9dd8:	f7f6 fec0 	bl	b5c <Sys_GetCoreID>
    9ddc:	4603      	mov	r3, r0
    9dde:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    9de0:	4a0d      	ldr	r2, [pc, #52]	; (9e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    9de2:	9b01      	ldr	r3, [sp, #4]
    9de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9de8:	1e5a      	subs	r2, r3, #1
    9dea:	490b      	ldr	r1, [pc, #44]	; (9e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    9dec:	9b01      	ldr	r3, [sp, #4]
    9dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    9df2:	4a0a      	ldr	r2, [pc, #40]	; (9e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    9df4:	9b01      	ldr	r3, [sp, #4]
    9df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dfa:	f003 0301 	and.w	r3, r3, #1
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d106      	bne.n	9e10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    9e02:	4a05      	ldr	r2, [pc, #20]	; (9e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    9e04:	9b01      	ldr	r3, [sp, #4]
    9e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d100      	bne.n	9e10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e10:	bf00      	nop
    9e12:	b003      	add	sp, #12
    9e14:	f85d fb04 	ldr.w	pc, [sp], #4
    9e18:	1fff91c8 	.word	0x1fff91c8
    9e1c:	1fff91c4 	.word	0x1fff91c4

00009e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    9e20:	b500      	push	{lr}
    9e22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e24:	f7f6 fe9a 	bl	b5c <Sys_GetCoreID>
    9e28:	4603      	mov	r3, r0
    9e2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    9e2c:	4a10      	ldr	r2, [pc, #64]	; (9e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    9e2e:	9b01      	ldr	r3, [sp, #4]
    9e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e34:	2b00      	cmp	r3, #0
    9e36:	d10d      	bne.n	9e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e38:	f7f6 fdc1 	bl	9be <Port_schm_read_msr>
    9e3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e3e:	9b00      	ldr	r3, [sp, #0]
    9e40:	f003 0301 	and.w	r3, r3, #1
    9e44:	2b00      	cmp	r3, #0
    9e46:	d100      	bne.n	9e4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    9e4a:	490a      	ldr	r1, [pc, #40]	; (9e74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    9e4c:	9b01      	ldr	r3, [sp, #4]
    9e4e:	9a00      	ldr	r2, [sp, #0]
    9e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    9e54:	4a06      	ldr	r2, [pc, #24]	; (9e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    9e56:	9b01      	ldr	r3, [sp, #4]
    9e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e5c:	1c5a      	adds	r2, r3, #1
    9e5e:	4904      	ldr	r1, [pc, #16]	; (9e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    9e60:	9b01      	ldr	r3, [sp, #4]
    9e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e66:	bf00      	nop
    9e68:	b003      	add	sp, #12
    9e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e6e:	bf00      	nop
    9e70:	1fff91d0 	.word	0x1fff91d0
    9e74:	1fff91cc 	.word	0x1fff91cc

00009e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    9e78:	b500      	push	{lr}
    9e7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e7c:	f7f6 fe6e 	bl	b5c <Sys_GetCoreID>
    9e80:	4603      	mov	r3, r0
    9e82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    9e84:	4a0d      	ldr	r2, [pc, #52]	; (9ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    9e86:	9b01      	ldr	r3, [sp, #4]
    9e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e8c:	1e5a      	subs	r2, r3, #1
    9e8e:	490b      	ldr	r1, [pc, #44]	; (9ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    9e90:	9b01      	ldr	r3, [sp, #4]
    9e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    9e96:	4a0a      	ldr	r2, [pc, #40]	; (9ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    9e98:	9b01      	ldr	r3, [sp, #4]
    9e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e9e:	f003 0301 	and.w	r3, r3, #1
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	d106      	bne.n	9eb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    9ea6:	4a05      	ldr	r2, [pc, #20]	; (9ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    9ea8:	9b01      	ldr	r3, [sp, #4]
    9eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d100      	bne.n	9eb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9eb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9eb4:	bf00      	nop
    9eb6:	b003      	add	sp, #12
    9eb8:	f85d fb04 	ldr.w	pc, [sp], #4
    9ebc:	1fff91d0 	.word	0x1fff91d0
    9ec0:	1fff91cc 	.word	0x1fff91cc

00009ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    9ec4:	b500      	push	{lr}
    9ec6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ec8:	f7f6 fe48 	bl	b5c <Sys_GetCoreID>
    9ecc:	4603      	mov	r3, r0
    9ece:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    9ed0:	4a10      	ldr	r2, [pc, #64]	; (9f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9ed2:	9b01      	ldr	r3, [sp, #4]
    9ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d10d      	bne.n	9ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9edc:	f7f6 fd6f 	bl	9be <Port_schm_read_msr>
    9ee0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ee2:	9b00      	ldr	r3, [sp, #0]
    9ee4:	f003 0301 	and.w	r3, r3, #1
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d100      	bne.n	9eee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9eec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    9eee:	490a      	ldr	r1, [pc, #40]	; (9f18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    9ef0:	9b01      	ldr	r3, [sp, #4]
    9ef2:	9a00      	ldr	r2, [sp, #0]
    9ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    9ef8:	4a06      	ldr	r2, [pc, #24]	; (9f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9efa:	9b01      	ldr	r3, [sp, #4]
    9efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f00:	1c5a      	adds	r2, r3, #1
    9f02:	4904      	ldr	r1, [pc, #16]	; (9f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9f04:	9b01      	ldr	r3, [sp, #4]
    9f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f0a:	bf00      	nop
    9f0c:	b003      	add	sp, #12
    9f0e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f12:	bf00      	nop
    9f14:	1fff91d8 	.word	0x1fff91d8
    9f18:	1fff91d4 	.word	0x1fff91d4

00009f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    9f1c:	b500      	push	{lr}
    9f1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f20:	f7f6 fe1c 	bl	b5c <Sys_GetCoreID>
    9f24:	4603      	mov	r3, r0
    9f26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    9f28:	4a0d      	ldr	r2, [pc, #52]	; (9f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9f2a:	9b01      	ldr	r3, [sp, #4]
    9f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f30:	1e5a      	subs	r2, r3, #1
    9f32:	490b      	ldr	r1, [pc, #44]	; (9f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9f34:	9b01      	ldr	r3, [sp, #4]
    9f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    9f3a:	4a0a      	ldr	r2, [pc, #40]	; (9f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    9f3c:	9b01      	ldr	r3, [sp, #4]
    9f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f42:	f003 0301 	and.w	r3, r3, #1
    9f46:	2b00      	cmp	r3, #0
    9f48:	d106      	bne.n	9f58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    9f4a:	4a05      	ldr	r2, [pc, #20]	; (9f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9f4c:	9b01      	ldr	r3, [sp, #4]
    9f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f52:	2b00      	cmp	r3, #0
    9f54:	d100      	bne.n	9f58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f58:	bf00      	nop
    9f5a:	b003      	add	sp, #12
    9f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    9f60:	1fff91d8 	.word	0x1fff91d8
    9f64:	1fff91d4 	.word	0x1fff91d4

00009f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    9f68:	b500      	push	{lr}
    9f6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f6c:	f7f6 fdf6 	bl	b5c <Sys_GetCoreID>
    9f70:	4603      	mov	r3, r0
    9f72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    9f74:	4a10      	ldr	r2, [pc, #64]	; (9fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    9f76:	9b01      	ldr	r3, [sp, #4]
    9f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d10d      	bne.n	9f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f80:	f7f6 fd1d 	bl	9be <Port_schm_read_msr>
    9f84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f86:	9b00      	ldr	r3, [sp, #0]
    9f88:	f003 0301 	and.w	r3, r3, #1
    9f8c:	2b00      	cmp	r3, #0
    9f8e:	d100      	bne.n	9f92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    9f92:	490a      	ldr	r1, [pc, #40]	; (9fbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    9f94:	9b01      	ldr	r3, [sp, #4]
    9f96:	9a00      	ldr	r2, [sp, #0]
    9f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    9f9c:	4a06      	ldr	r2, [pc, #24]	; (9fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    9f9e:	9b01      	ldr	r3, [sp, #4]
    9fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa4:	1c5a      	adds	r2, r3, #1
    9fa6:	4904      	ldr	r1, [pc, #16]	; (9fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    9fa8:	9b01      	ldr	r3, [sp, #4]
    9faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9fae:	bf00      	nop
    9fb0:	b003      	add	sp, #12
    9fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    9fb6:	bf00      	nop
    9fb8:	1fff91e0 	.word	0x1fff91e0
    9fbc:	1fff91dc 	.word	0x1fff91dc

00009fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    9fc0:	b500      	push	{lr}
    9fc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fc4:	f7f6 fdca 	bl	b5c <Sys_GetCoreID>
    9fc8:	4603      	mov	r3, r0
    9fca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    9fcc:	4a0d      	ldr	r2, [pc, #52]	; (a004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9fce:	9b01      	ldr	r3, [sp, #4]
    9fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd4:	1e5a      	subs	r2, r3, #1
    9fd6:	490b      	ldr	r1, [pc, #44]	; (a004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9fd8:	9b01      	ldr	r3, [sp, #4]
    9fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    9fde:	4a0a      	ldr	r2, [pc, #40]	; (a008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    9fe0:	9b01      	ldr	r3, [sp, #4]
    9fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe6:	f003 0301 	and.w	r3, r3, #1
    9fea:	2b00      	cmp	r3, #0
    9fec:	d106      	bne.n	9ffc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    9fee:	4a05      	ldr	r2, [pc, #20]	; (a004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9ff0:	9b01      	ldr	r3, [sp, #4]
    9ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d100      	bne.n	9ffc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ffa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ffc:	bf00      	nop
    9ffe:	b003      	add	sp, #12
    a000:	f85d fb04 	ldr.w	pc, [sp], #4
    a004:	1fff91e0 	.word	0x1fff91e0
    a008:	1fff91dc 	.word	0x1fff91dc

0000a00c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a00c:	b500      	push	{lr}
    a00e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a010:	f7f6 fda4 	bl	b5c <Sys_GetCoreID>
    a014:	4603      	mov	r3, r0
    a016:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    a018:	4a10      	ldr	r2, [pc, #64]	; (a05c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a01a:	9b01      	ldr	r3, [sp, #4]
    a01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a020:	2b00      	cmp	r3, #0
    a022:	d10d      	bne.n	a040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a024:	f7f6 fccb 	bl	9be <Port_schm_read_msr>
    a028:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a02a:	9b00      	ldr	r3, [sp, #0]
    a02c:	f003 0301 	and.w	r3, r3, #1
    a030:	2b00      	cmp	r3, #0
    a032:	d100      	bne.n	a036 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a034:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    a036:	490a      	ldr	r1, [pc, #40]	; (a060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    a038:	9b01      	ldr	r3, [sp, #4]
    a03a:	9a00      	ldr	r2, [sp, #0]
    a03c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    a040:	4a06      	ldr	r2, [pc, #24]	; (a05c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a042:	9b01      	ldr	r3, [sp, #4]
    a044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a048:	1c5a      	adds	r2, r3, #1
    a04a:	4904      	ldr	r1, [pc, #16]	; (a05c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a04c:	9b01      	ldr	r3, [sp, #4]
    a04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a052:	bf00      	nop
    a054:	b003      	add	sp, #12
    a056:	f85d fb04 	ldr.w	pc, [sp], #4
    a05a:	bf00      	nop
    a05c:	1fff91e8 	.word	0x1fff91e8
    a060:	1fff91e4 	.word	0x1fff91e4

0000a064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a064:	b500      	push	{lr}
    a066:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a068:	f7f6 fd78 	bl	b5c <Sys_GetCoreID>
    a06c:	4603      	mov	r3, r0
    a06e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    a070:	4a0d      	ldr	r2, [pc, #52]	; (a0a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a072:	9b01      	ldr	r3, [sp, #4]
    a074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a078:	1e5a      	subs	r2, r3, #1
    a07a:	490b      	ldr	r1, [pc, #44]	; (a0a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a07c:	9b01      	ldr	r3, [sp, #4]
    a07e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    a082:	4a0a      	ldr	r2, [pc, #40]	; (a0ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    a084:	9b01      	ldr	r3, [sp, #4]
    a086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08a:	f003 0301 	and.w	r3, r3, #1
    a08e:	2b00      	cmp	r3, #0
    a090:	d106      	bne.n	a0a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    a092:	4a05      	ldr	r2, [pc, #20]	; (a0a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a094:	9b01      	ldr	r3, [sp, #4]
    a096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d100      	bne.n	a0a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a09e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a0a0:	bf00      	nop
    a0a2:	b003      	add	sp, #12
    a0a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a0a8:	1fff91e8 	.word	0x1fff91e8
    a0ac:	1fff91e4 	.word	0x1fff91e4

0000a0b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a0b0:	b500      	push	{lr}
    a0b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0b4:	f7f6 fd52 	bl	b5c <Sys_GetCoreID>
    a0b8:	4603      	mov	r3, r0
    a0ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    a0bc:	4a10      	ldr	r2, [pc, #64]	; (a100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a0be:	9b01      	ldr	r3, [sp, #4]
    a0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d10d      	bne.n	a0e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a0c8:	f7f6 fc79 	bl	9be <Port_schm_read_msr>
    a0cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a0ce:	9b00      	ldr	r3, [sp, #0]
    a0d0:	f003 0301 	and.w	r3, r3, #1
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d100      	bne.n	a0da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a0d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    a0da:	490a      	ldr	r1, [pc, #40]	; (a104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    a0dc:	9b01      	ldr	r3, [sp, #4]
    a0de:	9a00      	ldr	r2, [sp, #0]
    a0e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    a0e4:	4a06      	ldr	r2, [pc, #24]	; (a100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a0e6:	9b01      	ldr	r3, [sp, #4]
    a0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ec:	1c5a      	adds	r2, r3, #1
    a0ee:	4904      	ldr	r1, [pc, #16]	; (a100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a0f0:	9b01      	ldr	r3, [sp, #4]
    a0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0f6:	bf00      	nop
    a0f8:	b003      	add	sp, #12
    a0fa:	f85d fb04 	ldr.w	pc, [sp], #4
    a0fe:	bf00      	nop
    a100:	1fff91f0 	.word	0x1fff91f0
    a104:	1fff91ec 	.word	0x1fff91ec

0000a108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a108:	b500      	push	{lr}
    a10a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a10c:	f7f6 fd26 	bl	b5c <Sys_GetCoreID>
    a110:	4603      	mov	r3, r0
    a112:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    a114:	4a0d      	ldr	r2, [pc, #52]	; (a14c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a116:	9b01      	ldr	r3, [sp, #4]
    a118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11c:	1e5a      	subs	r2, r3, #1
    a11e:	490b      	ldr	r1, [pc, #44]	; (a14c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a120:	9b01      	ldr	r3, [sp, #4]
    a122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    a126:	4a0a      	ldr	r2, [pc, #40]	; (a150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    a128:	9b01      	ldr	r3, [sp, #4]
    a12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a12e:	f003 0301 	and.w	r3, r3, #1
    a132:	2b00      	cmp	r3, #0
    a134:	d106      	bne.n	a144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    a136:	4a05      	ldr	r2, [pc, #20]	; (a14c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a138:	9b01      	ldr	r3, [sp, #4]
    a13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a13e:	2b00      	cmp	r3, #0
    a140:	d100      	bne.n	a144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a144:	bf00      	nop
    a146:	b003      	add	sp, #12
    a148:	f85d fb04 	ldr.w	pc, [sp], #4
    a14c:	1fff91f0 	.word	0x1fff91f0
    a150:	1fff91ec 	.word	0x1fff91ec

0000a154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    a154:	b500      	push	{lr}
    a156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a158:	f7f6 fd00 	bl	b5c <Sys_GetCoreID>
    a15c:	4603      	mov	r3, r0
    a15e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    a160:	4a10      	ldr	r2, [pc, #64]	; (a1a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a162:	9b01      	ldr	r3, [sp, #4]
    a164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a168:	2b00      	cmp	r3, #0
    a16a:	d10d      	bne.n	a188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a16c:	f7f6 fc27 	bl	9be <Port_schm_read_msr>
    a170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a172:	9b00      	ldr	r3, [sp, #0]
    a174:	f003 0301 	and.w	r3, r3, #1
    a178:	2b00      	cmp	r3, #0
    a17a:	d100      	bne.n	a17e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a17c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    a17e:	490a      	ldr	r1, [pc, #40]	; (a1a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    a180:	9b01      	ldr	r3, [sp, #4]
    a182:	9a00      	ldr	r2, [sp, #0]
    a184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    a188:	4a06      	ldr	r2, [pc, #24]	; (a1a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a18a:	9b01      	ldr	r3, [sp, #4]
    a18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a190:	1c5a      	adds	r2, r3, #1
    a192:	4904      	ldr	r1, [pc, #16]	; (a1a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a194:	9b01      	ldr	r3, [sp, #4]
    a196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a19a:	bf00      	nop
    a19c:	b003      	add	sp, #12
    a19e:	f85d fb04 	ldr.w	pc, [sp], #4
    a1a2:	bf00      	nop
    a1a4:	1fff91f8 	.word	0x1fff91f8
    a1a8:	1fff91f4 	.word	0x1fff91f4

0000a1ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    a1ac:	b500      	push	{lr}
    a1ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1b0:	f7f6 fcd4 	bl	b5c <Sys_GetCoreID>
    a1b4:	4603      	mov	r3, r0
    a1b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    a1b8:	4a0d      	ldr	r2, [pc, #52]	; (a1f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a1ba:	9b01      	ldr	r3, [sp, #4]
    a1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1c0:	1e5a      	subs	r2, r3, #1
    a1c2:	490b      	ldr	r1, [pc, #44]	; (a1f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a1c4:	9b01      	ldr	r3, [sp, #4]
    a1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    a1ca:	4a0a      	ldr	r2, [pc, #40]	; (a1f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    a1cc:	9b01      	ldr	r3, [sp, #4]
    a1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1d2:	f003 0301 	and.w	r3, r3, #1
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	d106      	bne.n	a1e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    a1da:	4a05      	ldr	r2, [pc, #20]	; (a1f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a1dc:	9b01      	ldr	r3, [sp, #4]
    a1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1e2:	2b00      	cmp	r3, #0
    a1e4:	d100      	bne.n	a1e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a1e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a1e8:	bf00      	nop
    a1ea:	b003      	add	sp, #12
    a1ec:	f85d fb04 	ldr.w	pc, [sp], #4
    a1f0:	1fff91f8 	.word	0x1fff91f8
    a1f4:	1fff91f4 	.word	0x1fff91f4

0000a1f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    a1f8:	b500      	push	{lr}
    a1fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1fc:	f7f6 fcae 	bl	b5c <Sys_GetCoreID>
    a200:	4603      	mov	r3, r0
    a202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    a204:	4a10      	ldr	r2, [pc, #64]	; (a248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    a206:	9b01      	ldr	r3, [sp, #4]
    a208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a20c:	2b00      	cmp	r3, #0
    a20e:	d10d      	bne.n	a22c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a210:	f7f6 fbd5 	bl	9be <Port_schm_read_msr>
    a214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a216:	9b00      	ldr	r3, [sp, #0]
    a218:	f003 0301 	and.w	r3, r3, #1
    a21c:	2b00      	cmp	r3, #0
    a21e:	d100      	bne.n	a222 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    a222:	490a      	ldr	r1, [pc, #40]	; (a24c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    a224:	9b01      	ldr	r3, [sp, #4]
    a226:	9a00      	ldr	r2, [sp, #0]
    a228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    a22c:	4a06      	ldr	r2, [pc, #24]	; (a248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    a22e:	9b01      	ldr	r3, [sp, #4]
    a230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a234:	1c5a      	adds	r2, r3, #1
    a236:	4904      	ldr	r1, [pc, #16]	; (a248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    a238:	9b01      	ldr	r3, [sp, #4]
    a23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a23e:	bf00      	nop
    a240:	b003      	add	sp, #12
    a242:	f85d fb04 	ldr.w	pc, [sp], #4
    a246:	bf00      	nop
    a248:	1fff9200 	.word	0x1fff9200
    a24c:	1fff91fc 	.word	0x1fff91fc

0000a250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    a250:	b500      	push	{lr}
    a252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a254:	f7f6 fc82 	bl	b5c <Sys_GetCoreID>
    a258:	4603      	mov	r3, r0
    a25a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    a25c:	4a0d      	ldr	r2, [pc, #52]	; (a294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    a25e:	9b01      	ldr	r3, [sp, #4]
    a260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a264:	1e5a      	subs	r2, r3, #1
    a266:	490b      	ldr	r1, [pc, #44]	; (a294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    a268:	9b01      	ldr	r3, [sp, #4]
    a26a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    a26e:	4a0a      	ldr	r2, [pc, #40]	; (a298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    a270:	9b01      	ldr	r3, [sp, #4]
    a272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a276:	f003 0301 	and.w	r3, r3, #1
    a27a:	2b00      	cmp	r3, #0
    a27c:	d106      	bne.n	a28c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    a27e:	4a05      	ldr	r2, [pc, #20]	; (a294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    a280:	9b01      	ldr	r3, [sp, #4]
    a282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a286:	2b00      	cmp	r3, #0
    a288:	d100      	bne.n	a28c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a28a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a28c:	bf00      	nop
    a28e:	b003      	add	sp, #12
    a290:	f85d fb04 	ldr.w	pc, [sp], #4
    a294:	1fff9200 	.word	0x1fff9200
    a298:	1fff91fc 	.word	0x1fff91fc

0000a29c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    a29c:	b500      	push	{lr}
    a29e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2a0:	f7f6 fc5c 	bl	b5c <Sys_GetCoreID>
    a2a4:	4603      	mov	r3, r0
    a2a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    a2a8:	4a10      	ldr	r2, [pc, #64]	; (a2ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    a2aa:	9b01      	ldr	r3, [sp, #4]
    a2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d10d      	bne.n	a2d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2b4:	f7f6 fb83 	bl	9be <Port_schm_read_msr>
    a2b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2ba:	9b00      	ldr	r3, [sp, #0]
    a2bc:	f003 0301 	and.w	r3, r3, #1
    a2c0:	2b00      	cmp	r3, #0
    a2c2:	d100      	bne.n	a2c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a2c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    a2c6:	490a      	ldr	r1, [pc, #40]	; (a2f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    a2c8:	9b01      	ldr	r3, [sp, #4]
    a2ca:	9a00      	ldr	r2, [sp, #0]
    a2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    a2d0:	4a06      	ldr	r2, [pc, #24]	; (a2ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    a2d2:	9b01      	ldr	r3, [sp, #4]
    a2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d8:	1c5a      	adds	r2, r3, #1
    a2da:	4904      	ldr	r1, [pc, #16]	; (a2ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    a2dc:	9b01      	ldr	r3, [sp, #4]
    a2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a2e2:	bf00      	nop
    a2e4:	b003      	add	sp, #12
    a2e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2ea:	bf00      	nop
    a2ec:	1fff9208 	.word	0x1fff9208
    a2f0:	1fff9204 	.word	0x1fff9204

0000a2f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    a2f4:	b500      	push	{lr}
    a2f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2f8:	f7f6 fc30 	bl	b5c <Sys_GetCoreID>
    a2fc:	4603      	mov	r3, r0
    a2fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    a300:	4a0d      	ldr	r2, [pc, #52]	; (a338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    a302:	9b01      	ldr	r3, [sp, #4]
    a304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a308:	1e5a      	subs	r2, r3, #1
    a30a:	490b      	ldr	r1, [pc, #44]	; (a338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    a30c:	9b01      	ldr	r3, [sp, #4]
    a30e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    a312:	4a0a      	ldr	r2, [pc, #40]	; (a33c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    a314:	9b01      	ldr	r3, [sp, #4]
    a316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a31a:	f003 0301 	and.w	r3, r3, #1
    a31e:	2b00      	cmp	r3, #0
    a320:	d106      	bne.n	a330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    a322:	4a05      	ldr	r2, [pc, #20]	; (a338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    a324:	9b01      	ldr	r3, [sp, #4]
    a326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a32a:	2b00      	cmp	r3, #0
    a32c:	d100      	bne.n	a330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a32e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a330:	bf00      	nop
    a332:	b003      	add	sp, #12
    a334:	f85d fb04 	ldr.w	pc, [sp], #4
    a338:	1fff9208 	.word	0x1fff9208
    a33c:	1fff9204 	.word	0x1fff9204

0000a340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    a340:	b500      	push	{lr}
    a342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a344:	f7f6 fc0a 	bl	b5c <Sys_GetCoreID>
    a348:	4603      	mov	r3, r0
    a34a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    a34c:	4a10      	ldr	r2, [pc, #64]	; (a390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    a34e:	9b01      	ldr	r3, [sp, #4]
    a350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a354:	2b00      	cmp	r3, #0
    a356:	d10d      	bne.n	a374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a358:	f7f6 fb31 	bl	9be <Port_schm_read_msr>
    a35c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a35e:	9b00      	ldr	r3, [sp, #0]
    a360:	f003 0301 	and.w	r3, r3, #1
    a364:	2b00      	cmp	r3, #0
    a366:	d100      	bne.n	a36a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    a36a:	490a      	ldr	r1, [pc, #40]	; (a394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    a36c:	9b01      	ldr	r3, [sp, #4]
    a36e:	9a00      	ldr	r2, [sp, #0]
    a370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    a374:	4a06      	ldr	r2, [pc, #24]	; (a390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    a376:	9b01      	ldr	r3, [sp, #4]
    a378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a37c:	1c5a      	adds	r2, r3, #1
    a37e:	4904      	ldr	r1, [pc, #16]	; (a390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    a380:	9b01      	ldr	r3, [sp, #4]
    a382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a386:	bf00      	nop
    a388:	b003      	add	sp, #12
    a38a:	f85d fb04 	ldr.w	pc, [sp], #4
    a38e:	bf00      	nop
    a390:	1fff9210 	.word	0x1fff9210
    a394:	1fff920c 	.word	0x1fff920c

0000a398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    a398:	b500      	push	{lr}
    a39a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a39c:	f7f6 fbde 	bl	b5c <Sys_GetCoreID>
    a3a0:	4603      	mov	r3, r0
    a3a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    a3a4:	4a0d      	ldr	r2, [pc, #52]	; (a3dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    a3a6:	9b01      	ldr	r3, [sp, #4]
    a3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ac:	1e5a      	subs	r2, r3, #1
    a3ae:	490b      	ldr	r1, [pc, #44]	; (a3dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    a3b0:	9b01      	ldr	r3, [sp, #4]
    a3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    a3b6:	4a0a      	ldr	r2, [pc, #40]	; (a3e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    a3b8:	9b01      	ldr	r3, [sp, #4]
    a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3be:	f003 0301 	and.w	r3, r3, #1
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d106      	bne.n	a3d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    a3c6:	4a05      	ldr	r2, [pc, #20]	; (a3dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    a3c8:	9b01      	ldr	r3, [sp, #4]
    a3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d100      	bne.n	a3d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a3d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a3d4:	bf00      	nop
    a3d6:	b003      	add	sp, #12
    a3d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a3dc:	1fff9210 	.word	0x1fff9210
    a3e0:	1fff920c 	.word	0x1fff920c

0000a3e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    a3e4:	b500      	push	{lr}
    a3e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3e8:	f7f6 fbb8 	bl	b5c <Sys_GetCoreID>
    a3ec:	4603      	mov	r3, r0
    a3ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    a3f0:	4a10      	ldr	r2, [pc, #64]	; (a434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    a3f2:	9b01      	ldr	r3, [sp, #4]
    a3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d10d      	bne.n	a418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a3fc:	f7f6 fadf 	bl	9be <Port_schm_read_msr>
    a400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a402:	9b00      	ldr	r3, [sp, #0]
    a404:	f003 0301 	and.w	r3, r3, #1
    a408:	2b00      	cmp	r3, #0
    a40a:	d100      	bne.n	a40e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a40c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    a40e:	490a      	ldr	r1, [pc, #40]	; (a438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    a410:	9b01      	ldr	r3, [sp, #4]
    a412:	9a00      	ldr	r2, [sp, #0]
    a414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    a418:	4a06      	ldr	r2, [pc, #24]	; (a434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    a41a:	9b01      	ldr	r3, [sp, #4]
    a41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a420:	1c5a      	adds	r2, r3, #1
    a422:	4904      	ldr	r1, [pc, #16]	; (a434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    a424:	9b01      	ldr	r3, [sp, #4]
    a426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a42a:	bf00      	nop
    a42c:	b003      	add	sp, #12
    a42e:	f85d fb04 	ldr.w	pc, [sp], #4
    a432:	bf00      	nop
    a434:	1fff9218 	.word	0x1fff9218
    a438:	1fff9214 	.word	0x1fff9214

0000a43c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    a43c:	b500      	push	{lr}
    a43e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a440:	f7f6 fb8c 	bl	b5c <Sys_GetCoreID>
    a444:	4603      	mov	r3, r0
    a446:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    a448:	4a0d      	ldr	r2, [pc, #52]	; (a480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    a44a:	9b01      	ldr	r3, [sp, #4]
    a44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a450:	1e5a      	subs	r2, r3, #1
    a452:	490b      	ldr	r1, [pc, #44]	; (a480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    a454:	9b01      	ldr	r3, [sp, #4]
    a456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    a45a:	4a0a      	ldr	r2, [pc, #40]	; (a484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    a45c:	9b01      	ldr	r3, [sp, #4]
    a45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a462:	f003 0301 	and.w	r3, r3, #1
    a466:	2b00      	cmp	r3, #0
    a468:	d106      	bne.n	a478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    a46a:	4a05      	ldr	r2, [pc, #20]	; (a480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    a46c:	9b01      	ldr	r3, [sp, #4]
    a46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a472:	2b00      	cmp	r3, #0
    a474:	d100      	bne.n	a478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a478:	bf00      	nop
    a47a:	b003      	add	sp, #12
    a47c:	f85d fb04 	ldr.w	pc, [sp], #4
    a480:	1fff9218 	.word	0x1fff9218
    a484:	1fff9214 	.word	0x1fff9214

0000a488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    a488:	b500      	push	{lr}
    a48a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a48c:	f7f6 fb66 	bl	b5c <Sys_GetCoreID>
    a490:	4603      	mov	r3, r0
    a492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    a494:	4a10      	ldr	r2, [pc, #64]	; (a4d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    a496:	9b01      	ldr	r3, [sp, #4]
    a498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a49c:	2b00      	cmp	r3, #0
    a49e:	d10d      	bne.n	a4bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a4a0:	f7f6 fa8d 	bl	9be <Port_schm_read_msr>
    a4a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a4a6:	9b00      	ldr	r3, [sp, #0]
    a4a8:	f003 0301 	and.w	r3, r3, #1
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	d100      	bne.n	a4b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    a4b2:	490a      	ldr	r1, [pc, #40]	; (a4dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    a4b4:	9b01      	ldr	r3, [sp, #4]
    a4b6:	9a00      	ldr	r2, [sp, #0]
    a4b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    a4bc:	4a06      	ldr	r2, [pc, #24]	; (a4d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    a4be:	9b01      	ldr	r3, [sp, #4]
    a4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4c4:	1c5a      	adds	r2, r3, #1
    a4c6:	4904      	ldr	r1, [pc, #16]	; (a4d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    a4c8:	9b01      	ldr	r3, [sp, #4]
    a4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a4ce:	bf00      	nop
    a4d0:	b003      	add	sp, #12
    a4d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a4d6:	bf00      	nop
    a4d8:	1fff9220 	.word	0x1fff9220
    a4dc:	1fff921c 	.word	0x1fff921c

0000a4e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    a4e0:	b500      	push	{lr}
    a4e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4e4:	f7f6 fb3a 	bl	b5c <Sys_GetCoreID>
    a4e8:	4603      	mov	r3, r0
    a4ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    a4ec:	4a0d      	ldr	r2, [pc, #52]	; (a524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    a4ee:	9b01      	ldr	r3, [sp, #4]
    a4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f4:	1e5a      	subs	r2, r3, #1
    a4f6:	490b      	ldr	r1, [pc, #44]	; (a524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    a4f8:	9b01      	ldr	r3, [sp, #4]
    a4fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    a4fe:	4a0a      	ldr	r2, [pc, #40]	; (a528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    a500:	9b01      	ldr	r3, [sp, #4]
    a502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a506:	f003 0301 	and.w	r3, r3, #1
    a50a:	2b00      	cmp	r3, #0
    a50c:	d106      	bne.n	a51c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    a50e:	4a05      	ldr	r2, [pc, #20]	; (a524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    a510:	9b01      	ldr	r3, [sp, #4]
    a512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a516:	2b00      	cmp	r3, #0
    a518:	d100      	bne.n	a51c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a51a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a51c:	bf00      	nop
    a51e:	b003      	add	sp, #12
    a520:	f85d fb04 	ldr.w	pc, [sp], #4
    a524:	1fff9220 	.word	0x1fff9220
    a528:	1fff921c 	.word	0x1fff921c

0000a52c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    a52c:	b500      	push	{lr}
    a52e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a530:	f7f6 fb14 	bl	b5c <Sys_GetCoreID>
    a534:	4603      	mov	r3, r0
    a536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    a538:	4a10      	ldr	r2, [pc, #64]	; (a57c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    a53a:	9b01      	ldr	r3, [sp, #4]
    a53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a540:	2b00      	cmp	r3, #0
    a542:	d10d      	bne.n	a560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a544:	f7f6 fa3b 	bl	9be <Port_schm_read_msr>
    a548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a54a:	9b00      	ldr	r3, [sp, #0]
    a54c:	f003 0301 	and.w	r3, r3, #1
    a550:	2b00      	cmp	r3, #0
    a552:	d100      	bne.n	a556 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    a556:	490a      	ldr	r1, [pc, #40]	; (a580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    a558:	9b01      	ldr	r3, [sp, #4]
    a55a:	9a00      	ldr	r2, [sp, #0]
    a55c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    a560:	4a06      	ldr	r2, [pc, #24]	; (a57c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    a562:	9b01      	ldr	r3, [sp, #4]
    a564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a568:	1c5a      	adds	r2, r3, #1
    a56a:	4904      	ldr	r1, [pc, #16]	; (a57c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    a56c:	9b01      	ldr	r3, [sp, #4]
    a56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a572:	bf00      	nop
    a574:	b003      	add	sp, #12
    a576:	f85d fb04 	ldr.w	pc, [sp], #4
    a57a:	bf00      	nop
    a57c:	1fff9228 	.word	0x1fff9228
    a580:	1fff9224 	.word	0x1fff9224

0000a584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    a584:	b500      	push	{lr}
    a586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a588:	f7f6 fae8 	bl	b5c <Sys_GetCoreID>
    a58c:	4603      	mov	r3, r0
    a58e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    a590:	4a0d      	ldr	r2, [pc, #52]	; (a5c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    a592:	9b01      	ldr	r3, [sp, #4]
    a594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a598:	1e5a      	subs	r2, r3, #1
    a59a:	490b      	ldr	r1, [pc, #44]	; (a5c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    a59c:	9b01      	ldr	r3, [sp, #4]
    a59e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    a5a2:	4a0a      	ldr	r2, [pc, #40]	; (a5cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    a5a4:	9b01      	ldr	r3, [sp, #4]
    a5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5aa:	f003 0301 	and.w	r3, r3, #1
    a5ae:	2b00      	cmp	r3, #0
    a5b0:	d106      	bne.n	a5c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    a5b2:	4a05      	ldr	r2, [pc, #20]	; (a5c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    a5b4:	9b01      	ldr	r3, [sp, #4]
    a5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	d100      	bne.n	a5c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a5be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a5c0:	bf00      	nop
    a5c2:	b003      	add	sp, #12
    a5c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a5c8:	1fff9228 	.word	0x1fff9228
    a5cc:	1fff9224 	.word	0x1fff9224

0000a5d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    a5d0:	b500      	push	{lr}
    a5d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5d4:	f7f6 fac2 	bl	b5c <Sys_GetCoreID>
    a5d8:	4603      	mov	r3, r0
    a5da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    a5dc:	4a10      	ldr	r2, [pc, #64]	; (a620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    a5de:	9b01      	ldr	r3, [sp, #4]
    a5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d10d      	bne.n	a604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a5e8:	f7f6 f9e9 	bl	9be <Port_schm_read_msr>
    a5ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a5ee:	9b00      	ldr	r3, [sp, #0]
    a5f0:	f003 0301 	and.w	r3, r3, #1
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d100      	bne.n	a5fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a5f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    a5fa:	490a      	ldr	r1, [pc, #40]	; (a624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    a5fc:	9b01      	ldr	r3, [sp, #4]
    a5fe:	9a00      	ldr	r2, [sp, #0]
    a600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    a604:	4a06      	ldr	r2, [pc, #24]	; (a620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    a606:	9b01      	ldr	r3, [sp, #4]
    a608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a60c:	1c5a      	adds	r2, r3, #1
    a60e:	4904      	ldr	r1, [pc, #16]	; (a620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    a610:	9b01      	ldr	r3, [sp, #4]
    a612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a616:	bf00      	nop
    a618:	b003      	add	sp, #12
    a61a:	f85d fb04 	ldr.w	pc, [sp], #4
    a61e:	bf00      	nop
    a620:	1fff9230 	.word	0x1fff9230
    a624:	1fff922c 	.word	0x1fff922c

0000a628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    a628:	b500      	push	{lr}
    a62a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a62c:	f7f6 fa96 	bl	b5c <Sys_GetCoreID>
    a630:	4603      	mov	r3, r0
    a632:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    a634:	4a0d      	ldr	r2, [pc, #52]	; (a66c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    a636:	9b01      	ldr	r3, [sp, #4]
    a638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a63c:	1e5a      	subs	r2, r3, #1
    a63e:	490b      	ldr	r1, [pc, #44]	; (a66c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    a640:	9b01      	ldr	r3, [sp, #4]
    a642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    a646:	4a0a      	ldr	r2, [pc, #40]	; (a670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    a648:	9b01      	ldr	r3, [sp, #4]
    a64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a64e:	f003 0301 	and.w	r3, r3, #1
    a652:	2b00      	cmp	r3, #0
    a654:	d106      	bne.n	a664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    a656:	4a05      	ldr	r2, [pc, #20]	; (a66c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    a658:	9b01      	ldr	r3, [sp, #4]
    a65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a65e:	2b00      	cmp	r3, #0
    a660:	d100      	bne.n	a664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a664:	bf00      	nop
    a666:	b003      	add	sp, #12
    a668:	f85d fb04 	ldr.w	pc, [sp], #4
    a66c:	1fff9230 	.word	0x1fff9230
    a670:	1fff922c 	.word	0x1fff922c

0000a674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    a674:	b500      	push	{lr}
    a676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a678:	f7f6 fa70 	bl	b5c <Sys_GetCoreID>
    a67c:	4603      	mov	r3, r0
    a67e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    a680:	4a10      	ldr	r2, [pc, #64]	; (a6c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    a682:	9b01      	ldr	r3, [sp, #4]
    a684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a688:	2b00      	cmp	r3, #0
    a68a:	d10d      	bne.n	a6a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a68c:	f7f6 f997 	bl	9be <Port_schm_read_msr>
    a690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a692:	9b00      	ldr	r3, [sp, #0]
    a694:	f003 0301 	and.w	r3, r3, #1
    a698:	2b00      	cmp	r3, #0
    a69a:	d100      	bne.n	a69e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a69c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    a69e:	490a      	ldr	r1, [pc, #40]	; (a6c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    a6a0:	9b01      	ldr	r3, [sp, #4]
    a6a2:	9a00      	ldr	r2, [sp, #0]
    a6a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    a6a8:	4a06      	ldr	r2, [pc, #24]	; (a6c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    a6aa:	9b01      	ldr	r3, [sp, #4]
    a6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6b0:	1c5a      	adds	r2, r3, #1
    a6b2:	4904      	ldr	r1, [pc, #16]	; (a6c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    a6b4:	9b01      	ldr	r3, [sp, #4]
    a6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a6ba:	bf00      	nop
    a6bc:	b003      	add	sp, #12
    a6be:	f85d fb04 	ldr.w	pc, [sp], #4
    a6c2:	bf00      	nop
    a6c4:	1fff9238 	.word	0x1fff9238
    a6c8:	1fff9234 	.word	0x1fff9234

0000a6cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    a6cc:	b500      	push	{lr}
    a6ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6d0:	f7f6 fa44 	bl	b5c <Sys_GetCoreID>
    a6d4:	4603      	mov	r3, r0
    a6d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    a6d8:	4a0d      	ldr	r2, [pc, #52]	; (a710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    a6da:	9b01      	ldr	r3, [sp, #4]
    a6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6e0:	1e5a      	subs	r2, r3, #1
    a6e2:	490b      	ldr	r1, [pc, #44]	; (a710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    a6e4:	9b01      	ldr	r3, [sp, #4]
    a6e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    a6ea:	4a0a      	ldr	r2, [pc, #40]	; (a714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    a6ec:	9b01      	ldr	r3, [sp, #4]
    a6ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f2:	f003 0301 	and.w	r3, r3, #1
    a6f6:	2b00      	cmp	r3, #0
    a6f8:	d106      	bne.n	a708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    a6fa:	4a05      	ldr	r2, [pc, #20]	; (a710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    a6fc:	9b01      	ldr	r3, [sp, #4]
    a6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a702:	2b00      	cmp	r3, #0
    a704:	d100      	bne.n	a708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a708:	bf00      	nop
    a70a:	b003      	add	sp, #12
    a70c:	f85d fb04 	ldr.w	pc, [sp], #4
    a710:	1fff9238 	.word	0x1fff9238
    a714:	1fff9234 	.word	0x1fff9234

0000a718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    a718:	b500      	push	{lr}
    a71a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a71c:	f7f6 fa1e 	bl	b5c <Sys_GetCoreID>
    a720:	4603      	mov	r3, r0
    a722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    a724:	4a10      	ldr	r2, [pc, #64]	; (a768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    a726:	9b01      	ldr	r3, [sp, #4]
    a728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a72c:	2b00      	cmp	r3, #0
    a72e:	d10d      	bne.n	a74c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a730:	f7f6 f945 	bl	9be <Port_schm_read_msr>
    a734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a736:	9b00      	ldr	r3, [sp, #0]
    a738:	f003 0301 	and.w	r3, r3, #1
    a73c:	2b00      	cmp	r3, #0
    a73e:	d100      	bne.n	a742 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    a742:	490a      	ldr	r1, [pc, #40]	; (a76c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    a744:	9b01      	ldr	r3, [sp, #4]
    a746:	9a00      	ldr	r2, [sp, #0]
    a748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    a74c:	4a06      	ldr	r2, [pc, #24]	; (a768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    a74e:	9b01      	ldr	r3, [sp, #4]
    a750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a754:	1c5a      	adds	r2, r3, #1
    a756:	4904      	ldr	r1, [pc, #16]	; (a768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    a758:	9b01      	ldr	r3, [sp, #4]
    a75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a75e:	bf00      	nop
    a760:	b003      	add	sp, #12
    a762:	f85d fb04 	ldr.w	pc, [sp], #4
    a766:	bf00      	nop
    a768:	1fff9240 	.word	0x1fff9240
    a76c:	1fff923c 	.word	0x1fff923c

0000a770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    a770:	b500      	push	{lr}
    a772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a774:	f7f6 f9f2 	bl	b5c <Sys_GetCoreID>
    a778:	4603      	mov	r3, r0
    a77a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    a77c:	4a0d      	ldr	r2, [pc, #52]	; (a7b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    a77e:	9b01      	ldr	r3, [sp, #4]
    a780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a784:	1e5a      	subs	r2, r3, #1
    a786:	490b      	ldr	r1, [pc, #44]	; (a7b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    a788:	9b01      	ldr	r3, [sp, #4]
    a78a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    a78e:	4a0a      	ldr	r2, [pc, #40]	; (a7b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    a790:	9b01      	ldr	r3, [sp, #4]
    a792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a796:	f003 0301 	and.w	r3, r3, #1
    a79a:	2b00      	cmp	r3, #0
    a79c:	d106      	bne.n	a7ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    a79e:	4a05      	ldr	r2, [pc, #20]	; (a7b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    a7a0:	9b01      	ldr	r3, [sp, #4]
    a7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d100      	bne.n	a7ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a7aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a7ac:	bf00      	nop
    a7ae:	b003      	add	sp, #12
    a7b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a7b4:	1fff9240 	.word	0x1fff9240
    a7b8:	1fff923c 	.word	0x1fff923c

0000a7bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    a7bc:	b500      	push	{lr}
    a7be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7c0:	f7f6 f9cc 	bl	b5c <Sys_GetCoreID>
    a7c4:	4603      	mov	r3, r0
    a7c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    a7c8:	4a10      	ldr	r2, [pc, #64]	; (a80c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    a7ca:	9b01      	ldr	r3, [sp, #4]
    a7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7d0:	2b00      	cmp	r3, #0
    a7d2:	d10d      	bne.n	a7f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a7d4:	f7f6 f8f3 	bl	9be <Port_schm_read_msr>
    a7d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a7da:	9b00      	ldr	r3, [sp, #0]
    a7dc:	f003 0301 	and.w	r3, r3, #1
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d100      	bne.n	a7e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a7e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    a7e6:	490a      	ldr	r1, [pc, #40]	; (a810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    a7e8:	9b01      	ldr	r3, [sp, #4]
    a7ea:	9a00      	ldr	r2, [sp, #0]
    a7ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    a7f0:	4a06      	ldr	r2, [pc, #24]	; (a80c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    a7f2:	9b01      	ldr	r3, [sp, #4]
    a7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f8:	1c5a      	adds	r2, r3, #1
    a7fa:	4904      	ldr	r1, [pc, #16]	; (a80c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    a7fc:	9b01      	ldr	r3, [sp, #4]
    a7fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a802:	bf00      	nop
    a804:	b003      	add	sp, #12
    a806:	f85d fb04 	ldr.w	pc, [sp], #4
    a80a:	bf00      	nop
    a80c:	1fff9248 	.word	0x1fff9248
    a810:	1fff9244 	.word	0x1fff9244

0000a814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    a814:	b500      	push	{lr}
    a816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a818:	f7f6 f9a0 	bl	b5c <Sys_GetCoreID>
    a81c:	4603      	mov	r3, r0
    a81e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    a820:	4a0d      	ldr	r2, [pc, #52]	; (a858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    a822:	9b01      	ldr	r3, [sp, #4]
    a824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a828:	1e5a      	subs	r2, r3, #1
    a82a:	490b      	ldr	r1, [pc, #44]	; (a858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    a82c:	9b01      	ldr	r3, [sp, #4]
    a82e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    a832:	4a0a      	ldr	r2, [pc, #40]	; (a85c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    a834:	9b01      	ldr	r3, [sp, #4]
    a836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83a:	f003 0301 	and.w	r3, r3, #1
    a83e:	2b00      	cmp	r3, #0
    a840:	d106      	bne.n	a850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    a842:	4a05      	ldr	r2, [pc, #20]	; (a858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    a844:	9b01      	ldr	r3, [sp, #4]
    a846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a84a:	2b00      	cmp	r3, #0
    a84c:	d100      	bne.n	a850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a84e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a850:	bf00      	nop
    a852:	b003      	add	sp, #12
    a854:	f85d fb04 	ldr.w	pc, [sp], #4
    a858:	1fff9248 	.word	0x1fff9248
    a85c:	1fff9244 	.word	0x1fff9244

0000a860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    a860:	b500      	push	{lr}
    a862:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a864:	f7f6 f97a 	bl	b5c <Sys_GetCoreID>
    a868:	4603      	mov	r3, r0
    a86a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    a86c:	4a10      	ldr	r2, [pc, #64]	; (a8b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    a86e:	9b01      	ldr	r3, [sp, #4]
    a870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a874:	2b00      	cmp	r3, #0
    a876:	d10d      	bne.n	a894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a878:	f7f6 f8a1 	bl	9be <Port_schm_read_msr>
    a87c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a87e:	9b00      	ldr	r3, [sp, #0]
    a880:	f003 0301 	and.w	r3, r3, #1
    a884:	2b00      	cmp	r3, #0
    a886:	d100      	bne.n	a88a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a888:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    a88a:	490a      	ldr	r1, [pc, #40]	; (a8b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    a88c:	9b01      	ldr	r3, [sp, #4]
    a88e:	9a00      	ldr	r2, [sp, #0]
    a890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    a894:	4a06      	ldr	r2, [pc, #24]	; (a8b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    a896:	9b01      	ldr	r3, [sp, #4]
    a898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a89c:	1c5a      	adds	r2, r3, #1
    a89e:	4904      	ldr	r1, [pc, #16]	; (a8b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    a8a0:	9b01      	ldr	r3, [sp, #4]
    a8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a8a6:	bf00      	nop
    a8a8:	b003      	add	sp, #12
    a8aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ae:	bf00      	nop
    a8b0:	1fff9250 	.word	0x1fff9250
    a8b4:	1fff924c 	.word	0x1fff924c

0000a8b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    a8b8:	b500      	push	{lr}
    a8ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8bc:	f7f6 f94e 	bl	b5c <Sys_GetCoreID>
    a8c0:	4603      	mov	r3, r0
    a8c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    a8c4:	4a0d      	ldr	r2, [pc, #52]	; (a8fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    a8c6:	9b01      	ldr	r3, [sp, #4]
    a8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8cc:	1e5a      	subs	r2, r3, #1
    a8ce:	490b      	ldr	r1, [pc, #44]	; (a8fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    a8d0:	9b01      	ldr	r3, [sp, #4]
    a8d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    a8d6:	4a0a      	ldr	r2, [pc, #40]	; (a900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    a8d8:	9b01      	ldr	r3, [sp, #4]
    a8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8de:	f003 0301 	and.w	r3, r3, #1
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d106      	bne.n	a8f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    a8e6:	4a05      	ldr	r2, [pc, #20]	; (a8fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    a8e8:	9b01      	ldr	r3, [sp, #4]
    a8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	d100      	bne.n	a8f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a8f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a8f4:	bf00      	nop
    a8f6:	b003      	add	sp, #12
    a8f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a8fc:	1fff9250 	.word	0x1fff9250
    a900:	1fff924c 	.word	0x1fff924c

0000a904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    a904:	b500      	push	{lr}
    a906:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a908:	f7f6 f928 	bl	b5c <Sys_GetCoreID>
    a90c:	4603      	mov	r3, r0
    a90e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    a910:	4a10      	ldr	r2, [pc, #64]	; (a954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    a912:	9b01      	ldr	r3, [sp, #4]
    a914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a918:	2b00      	cmp	r3, #0
    a91a:	d10d      	bne.n	a938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a91c:	f7f6 f84f 	bl	9be <Port_schm_read_msr>
    a920:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a922:	9b00      	ldr	r3, [sp, #0]
    a924:	f003 0301 	and.w	r3, r3, #1
    a928:	2b00      	cmp	r3, #0
    a92a:	d100      	bne.n	a92e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a92c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    a92e:	490a      	ldr	r1, [pc, #40]	; (a958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    a930:	9b01      	ldr	r3, [sp, #4]
    a932:	9a00      	ldr	r2, [sp, #0]
    a934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    a938:	4a06      	ldr	r2, [pc, #24]	; (a954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    a93a:	9b01      	ldr	r3, [sp, #4]
    a93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a940:	1c5a      	adds	r2, r3, #1
    a942:	4904      	ldr	r1, [pc, #16]	; (a954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    a944:	9b01      	ldr	r3, [sp, #4]
    a946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a94a:	bf00      	nop
    a94c:	b003      	add	sp, #12
    a94e:	f85d fb04 	ldr.w	pc, [sp], #4
    a952:	bf00      	nop
    a954:	1fff9258 	.word	0x1fff9258
    a958:	1fff9254 	.word	0x1fff9254

0000a95c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    a95c:	b500      	push	{lr}
    a95e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a960:	f7f6 f8fc 	bl	b5c <Sys_GetCoreID>
    a964:	4603      	mov	r3, r0
    a966:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    a968:	4a0d      	ldr	r2, [pc, #52]	; (a9a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    a96a:	9b01      	ldr	r3, [sp, #4]
    a96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a970:	1e5a      	subs	r2, r3, #1
    a972:	490b      	ldr	r1, [pc, #44]	; (a9a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    a974:	9b01      	ldr	r3, [sp, #4]
    a976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    a97a:	4a0a      	ldr	r2, [pc, #40]	; (a9a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a982:	f003 0301 	and.w	r3, r3, #1
    a986:	2b00      	cmp	r3, #0
    a988:	d106      	bne.n	a998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    a98a:	4a05      	ldr	r2, [pc, #20]	; (a9a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    a98c:	9b01      	ldr	r3, [sp, #4]
    a98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a992:	2b00      	cmp	r3, #0
    a994:	d100      	bne.n	a998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a996:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a998:	bf00      	nop
    a99a:	b003      	add	sp, #12
    a99c:	f85d fb04 	ldr.w	pc, [sp], #4
    a9a0:	1fff9258 	.word	0x1fff9258
    a9a4:	1fff9254 	.word	0x1fff9254

0000a9a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    a9a8:	b500      	push	{lr}
    a9aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9ac:	f7f6 f8d6 	bl	b5c <Sys_GetCoreID>
    a9b0:	4603      	mov	r3, r0
    a9b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    a9b4:	4a10      	ldr	r2, [pc, #64]	; (a9f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    a9b6:	9b01      	ldr	r3, [sp, #4]
    a9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d10d      	bne.n	a9dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a9c0:	f7f5 fffd 	bl	9be <Port_schm_read_msr>
    a9c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a9c6:	9b00      	ldr	r3, [sp, #0]
    a9c8:	f003 0301 	and.w	r3, r3, #1
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	d100      	bne.n	a9d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a9d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    a9d2:	490a      	ldr	r1, [pc, #40]	; (a9fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    a9d4:	9b01      	ldr	r3, [sp, #4]
    a9d6:	9a00      	ldr	r2, [sp, #0]
    a9d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    a9dc:	4a06      	ldr	r2, [pc, #24]	; (a9f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    a9de:	9b01      	ldr	r3, [sp, #4]
    a9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9e4:	1c5a      	adds	r2, r3, #1
    a9e6:	4904      	ldr	r1, [pc, #16]	; (a9f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    a9e8:	9b01      	ldr	r3, [sp, #4]
    a9ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9ee:	bf00      	nop
    a9f0:	b003      	add	sp, #12
    a9f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9f6:	bf00      	nop
    a9f8:	1fff9260 	.word	0x1fff9260
    a9fc:	1fff925c 	.word	0x1fff925c

0000aa00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    aa00:	b500      	push	{lr}
    aa02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa04:	f7f6 f8aa 	bl	b5c <Sys_GetCoreID>
    aa08:	4603      	mov	r3, r0
    aa0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    aa0c:	4a0d      	ldr	r2, [pc, #52]	; (aa44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    aa0e:	9b01      	ldr	r3, [sp, #4]
    aa10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa14:	1e5a      	subs	r2, r3, #1
    aa16:	490b      	ldr	r1, [pc, #44]	; (aa44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    aa18:	9b01      	ldr	r3, [sp, #4]
    aa1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    aa1e:	4a0a      	ldr	r2, [pc, #40]	; (aa48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    aa20:	9b01      	ldr	r3, [sp, #4]
    aa22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa26:	f003 0301 	and.w	r3, r3, #1
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d106      	bne.n	aa3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    aa2e:	4a05      	ldr	r2, [pc, #20]	; (aa44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    aa30:	9b01      	ldr	r3, [sp, #4]
    aa32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa36:	2b00      	cmp	r3, #0
    aa38:	d100      	bne.n	aa3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa3c:	bf00      	nop
    aa3e:	b003      	add	sp, #12
    aa40:	f85d fb04 	ldr.w	pc, [sp], #4
    aa44:	1fff9260 	.word	0x1fff9260
    aa48:	1fff925c 	.word	0x1fff925c

0000aa4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    aa4c:	b500      	push	{lr}
    aa4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa50:	f7f6 f884 	bl	b5c <Sys_GetCoreID>
    aa54:	4603      	mov	r3, r0
    aa56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    aa58:	4a10      	ldr	r2, [pc, #64]	; (aa9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    aa5a:	9b01      	ldr	r3, [sp, #4]
    aa5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa60:	2b00      	cmp	r3, #0
    aa62:	d10d      	bne.n	aa80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa64:	f7f5 ffab 	bl	9be <Port_schm_read_msr>
    aa68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa6a:	9b00      	ldr	r3, [sp, #0]
    aa6c:	f003 0301 	and.w	r3, r3, #1
    aa70:	2b00      	cmp	r3, #0
    aa72:	d100      	bne.n	aa76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    aa76:	490a      	ldr	r1, [pc, #40]	; (aaa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    aa78:	9b01      	ldr	r3, [sp, #4]
    aa7a:	9a00      	ldr	r2, [sp, #0]
    aa7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    aa80:	4a06      	ldr	r2, [pc, #24]	; (aa9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    aa82:	9b01      	ldr	r3, [sp, #4]
    aa84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa88:	1c5a      	adds	r2, r3, #1
    aa8a:	4904      	ldr	r1, [pc, #16]	; (aa9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    aa8c:	9b01      	ldr	r3, [sp, #4]
    aa8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa92:	bf00      	nop
    aa94:	b003      	add	sp, #12
    aa96:	f85d fb04 	ldr.w	pc, [sp], #4
    aa9a:	bf00      	nop
    aa9c:	1fff9268 	.word	0x1fff9268
    aaa0:	1fff9264 	.word	0x1fff9264

0000aaa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    aaa4:	b500      	push	{lr}
    aaa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aaa8:	f7f6 f858 	bl	b5c <Sys_GetCoreID>
    aaac:	4603      	mov	r3, r0
    aaae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    aab0:	4a0d      	ldr	r2, [pc, #52]	; (aae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    aab2:	9b01      	ldr	r3, [sp, #4]
    aab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab8:	1e5a      	subs	r2, r3, #1
    aaba:	490b      	ldr	r1, [pc, #44]	; (aae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    aabc:	9b01      	ldr	r3, [sp, #4]
    aabe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    aac2:	4a0a      	ldr	r2, [pc, #40]	; (aaec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    aac4:	9b01      	ldr	r3, [sp, #4]
    aac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaca:	f003 0301 	and.w	r3, r3, #1
    aace:	2b00      	cmp	r3, #0
    aad0:	d106      	bne.n	aae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    aad2:	4a05      	ldr	r2, [pc, #20]	; (aae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    aad4:	9b01      	ldr	r3, [sp, #4]
    aad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aada:	2b00      	cmp	r3, #0
    aadc:	d100      	bne.n	aae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aade:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aae0:	bf00      	nop
    aae2:	b003      	add	sp, #12
    aae4:	f85d fb04 	ldr.w	pc, [sp], #4
    aae8:	1fff9268 	.word	0x1fff9268
    aaec:	1fff9264 	.word	0x1fff9264

0000aaf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    aaf0:	b500      	push	{lr}
    aaf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aaf4:	f7f6 f832 	bl	b5c <Sys_GetCoreID>
    aaf8:	4603      	mov	r3, r0
    aafa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    aafc:	4a10      	ldr	r2, [pc, #64]	; (ab40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    aafe:	9b01      	ldr	r3, [sp, #4]
    ab00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab04:	2b00      	cmp	r3, #0
    ab06:	d10d      	bne.n	ab24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab08:	f7f5 ff59 	bl	9be <Port_schm_read_msr>
    ab0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab0e:	9b00      	ldr	r3, [sp, #0]
    ab10:	f003 0301 	and.w	r3, r3, #1
    ab14:	2b00      	cmp	r3, #0
    ab16:	d100      	bne.n	ab1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ab1a:	490a      	ldr	r1, [pc, #40]	; (ab44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    ab1c:	9b01      	ldr	r3, [sp, #4]
    ab1e:	9a00      	ldr	r2, [sp, #0]
    ab20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    ab24:	4a06      	ldr	r2, [pc, #24]	; (ab40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ab26:	9b01      	ldr	r3, [sp, #4]
    ab28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab2c:	1c5a      	adds	r2, r3, #1
    ab2e:	4904      	ldr	r1, [pc, #16]	; (ab40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ab30:	9b01      	ldr	r3, [sp, #4]
    ab32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab36:	bf00      	nop
    ab38:	b003      	add	sp, #12
    ab3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab3e:	bf00      	nop
    ab40:	1fff9270 	.word	0x1fff9270
    ab44:	1fff926c 	.word	0x1fff926c

0000ab48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    ab48:	b500      	push	{lr}
    ab4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab4c:	f7f6 f806 	bl	b5c <Sys_GetCoreID>
    ab50:	4603      	mov	r3, r0
    ab52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    ab54:	4a0d      	ldr	r2, [pc, #52]	; (ab8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ab56:	9b01      	ldr	r3, [sp, #4]
    ab58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab5c:	1e5a      	subs	r2, r3, #1
    ab5e:	490b      	ldr	r1, [pc, #44]	; (ab8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ab60:	9b01      	ldr	r3, [sp, #4]
    ab62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ab66:	4a0a      	ldr	r2, [pc, #40]	; (ab90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    ab68:	9b01      	ldr	r3, [sp, #4]
    ab6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab6e:	f003 0301 	and.w	r3, r3, #1
    ab72:	2b00      	cmp	r3, #0
    ab74:	d106      	bne.n	ab84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    ab76:	4a05      	ldr	r2, [pc, #20]	; (ab8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ab78:	9b01      	ldr	r3, [sp, #4]
    ab7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab7e:	2b00      	cmp	r3, #0
    ab80:	d100      	bne.n	ab84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab84:	bf00      	nop
    ab86:	b003      	add	sp, #12
    ab88:	f85d fb04 	ldr.w	pc, [sp], #4
    ab8c:	1fff9270 	.word	0x1fff9270
    ab90:	1fff926c 	.word	0x1fff926c

0000ab94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    ab94:	b500      	push	{lr}
    ab96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab98:	f7f5 ffe0 	bl	b5c <Sys_GetCoreID>
    ab9c:	4603      	mov	r3, r0
    ab9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    aba0:	4a10      	ldr	r2, [pc, #64]	; (abe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    aba2:	9b01      	ldr	r3, [sp, #4]
    aba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aba8:	2b00      	cmp	r3, #0
    abaa:	d10d      	bne.n	abc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    abac:	f7f5 ff07 	bl	9be <Port_schm_read_msr>
    abb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    abb2:	9b00      	ldr	r3, [sp, #0]
    abb4:	f003 0301 	and.w	r3, r3, #1
    abb8:	2b00      	cmp	r3, #0
    abba:	d100      	bne.n	abbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    abbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    abbe:	490a      	ldr	r1, [pc, #40]	; (abe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    abc0:	9b01      	ldr	r3, [sp, #4]
    abc2:	9a00      	ldr	r2, [sp, #0]
    abc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    abc8:	4a06      	ldr	r2, [pc, #24]	; (abe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    abca:	9b01      	ldr	r3, [sp, #4]
    abcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abd0:	1c5a      	adds	r2, r3, #1
    abd2:	4904      	ldr	r1, [pc, #16]	; (abe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    abd4:	9b01      	ldr	r3, [sp, #4]
    abd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    abda:	bf00      	nop
    abdc:	b003      	add	sp, #12
    abde:	f85d fb04 	ldr.w	pc, [sp], #4
    abe2:	bf00      	nop
    abe4:	1fff9278 	.word	0x1fff9278
    abe8:	1fff9274 	.word	0x1fff9274

0000abec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    abec:	b500      	push	{lr}
    abee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abf0:	f7f5 ffb4 	bl	b5c <Sys_GetCoreID>
    abf4:	4603      	mov	r3, r0
    abf6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    abf8:	4a0d      	ldr	r2, [pc, #52]	; (ac30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    abfa:	9b01      	ldr	r3, [sp, #4]
    abfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac00:	1e5a      	subs	r2, r3, #1
    ac02:	490b      	ldr	r1, [pc, #44]	; (ac30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    ac04:	9b01      	ldr	r3, [sp, #4]
    ac06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    ac0a:	4a0a      	ldr	r2, [pc, #40]	; (ac34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    ac0c:	9b01      	ldr	r3, [sp, #4]
    ac0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac12:	f003 0301 	and.w	r3, r3, #1
    ac16:	2b00      	cmp	r3, #0
    ac18:	d106      	bne.n	ac28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    ac1a:	4a05      	ldr	r2, [pc, #20]	; (ac30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    ac1c:	9b01      	ldr	r3, [sp, #4]
    ac1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac22:	2b00      	cmp	r3, #0
    ac24:	d100      	bne.n	ac28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac28:	bf00      	nop
    ac2a:	b003      	add	sp, #12
    ac2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac30:	1fff9278 	.word	0x1fff9278
    ac34:	1fff9274 	.word	0x1fff9274

0000ac38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    ac38:	b500      	push	{lr}
    ac3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac3c:	f7f5 ff8e 	bl	b5c <Sys_GetCoreID>
    ac40:	4603      	mov	r3, r0
    ac42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    ac44:	4a10      	ldr	r2, [pc, #64]	; (ac88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    ac46:	9b01      	ldr	r3, [sp, #4]
    ac48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	d10d      	bne.n	ac6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac50:	f7f5 feb5 	bl	9be <Port_schm_read_msr>
    ac54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac56:	9b00      	ldr	r3, [sp, #0]
    ac58:	f003 0301 	and.w	r3, r3, #1
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d100      	bne.n	ac62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    ac62:	490a      	ldr	r1, [pc, #40]	; (ac8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    ac64:	9b01      	ldr	r3, [sp, #4]
    ac66:	9a00      	ldr	r2, [sp, #0]
    ac68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    ac6c:	4a06      	ldr	r2, [pc, #24]	; (ac88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    ac6e:	9b01      	ldr	r3, [sp, #4]
    ac70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac74:	1c5a      	adds	r2, r3, #1
    ac76:	4904      	ldr	r1, [pc, #16]	; (ac88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    ac78:	9b01      	ldr	r3, [sp, #4]
    ac7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac7e:	bf00      	nop
    ac80:	b003      	add	sp, #12
    ac82:	f85d fb04 	ldr.w	pc, [sp], #4
    ac86:	bf00      	nop
    ac88:	1fff9280 	.word	0x1fff9280
    ac8c:	1fff927c 	.word	0x1fff927c

0000ac90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    ac90:	b500      	push	{lr}
    ac92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac94:	f7f5 ff62 	bl	b5c <Sys_GetCoreID>
    ac98:	4603      	mov	r3, r0
    ac9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    ac9c:	4a0d      	ldr	r2, [pc, #52]	; (acd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    ac9e:	9b01      	ldr	r3, [sp, #4]
    aca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca4:	1e5a      	subs	r2, r3, #1
    aca6:	490b      	ldr	r1, [pc, #44]	; (acd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    aca8:	9b01      	ldr	r3, [sp, #4]
    acaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    acae:	4a0a      	ldr	r2, [pc, #40]	; (acd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    acb0:	9b01      	ldr	r3, [sp, #4]
    acb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb6:	f003 0301 	and.w	r3, r3, #1
    acba:	2b00      	cmp	r3, #0
    acbc:	d106      	bne.n	accc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    acbe:	4a05      	ldr	r2, [pc, #20]	; (acd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    acc0:	9b01      	ldr	r3, [sp, #4]
    acc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc6:	2b00      	cmp	r3, #0
    acc8:	d100      	bne.n	accc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    acca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    accc:	bf00      	nop
    acce:	b003      	add	sp, #12
    acd0:	f85d fb04 	ldr.w	pc, [sp], #4
    acd4:	1fff9280 	.word	0x1fff9280
    acd8:	1fff927c 	.word	0x1fff927c

0000acdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    acdc:	b500      	push	{lr}
    acde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ace0:	f7f5 ff3c 	bl	b5c <Sys_GetCoreID>
    ace4:	4603      	mov	r3, r0
    ace6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    ace8:	4a10      	ldr	r2, [pc, #64]	; (ad2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    acea:	9b01      	ldr	r3, [sp, #4]
    acec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acf0:	2b00      	cmp	r3, #0
    acf2:	d10d      	bne.n	ad10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    acf4:	f7f5 fe63 	bl	9be <Port_schm_read_msr>
    acf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    acfa:	9b00      	ldr	r3, [sp, #0]
    acfc:	f003 0301 	and.w	r3, r3, #1
    ad00:	2b00      	cmp	r3, #0
    ad02:	d100      	bne.n	ad06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    ad06:	490a      	ldr	r1, [pc, #40]	; (ad30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    ad08:	9b01      	ldr	r3, [sp, #4]
    ad0a:	9a00      	ldr	r2, [sp, #0]
    ad0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    ad10:	4a06      	ldr	r2, [pc, #24]	; (ad2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ad12:	9b01      	ldr	r3, [sp, #4]
    ad14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad18:	1c5a      	adds	r2, r3, #1
    ad1a:	4904      	ldr	r1, [pc, #16]	; (ad2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ad1c:	9b01      	ldr	r3, [sp, #4]
    ad1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad22:	bf00      	nop
    ad24:	b003      	add	sp, #12
    ad26:	f85d fb04 	ldr.w	pc, [sp], #4
    ad2a:	bf00      	nop
    ad2c:	1fff9288 	.word	0x1fff9288
    ad30:	1fff9284 	.word	0x1fff9284

0000ad34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    ad34:	b500      	push	{lr}
    ad36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad38:	f7f5 ff10 	bl	b5c <Sys_GetCoreID>
    ad3c:	4603      	mov	r3, r0
    ad3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    ad40:	4a0d      	ldr	r2, [pc, #52]	; (ad78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ad42:	9b01      	ldr	r3, [sp, #4]
    ad44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad48:	1e5a      	subs	r2, r3, #1
    ad4a:	490b      	ldr	r1, [pc, #44]	; (ad78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ad4c:	9b01      	ldr	r3, [sp, #4]
    ad4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    ad52:	4a0a      	ldr	r2, [pc, #40]	; (ad7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    ad54:	9b01      	ldr	r3, [sp, #4]
    ad56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad5a:	f003 0301 	and.w	r3, r3, #1
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d106      	bne.n	ad70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    ad62:	4a05      	ldr	r2, [pc, #20]	; (ad78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ad64:	9b01      	ldr	r3, [sp, #4]
    ad66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d100      	bne.n	ad70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad70:	bf00      	nop
    ad72:	b003      	add	sp, #12
    ad74:	f85d fb04 	ldr.w	pc, [sp], #4
    ad78:	1fff9288 	.word	0x1fff9288
    ad7c:	1fff9284 	.word	0x1fff9284

0000ad80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    ad80:	b500      	push	{lr}
    ad82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad84:	f7f5 feea 	bl	b5c <Sys_GetCoreID>
    ad88:	4603      	mov	r3, r0
    ad8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    ad8c:	4a10      	ldr	r2, [pc, #64]	; (add0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    ad8e:	9b01      	ldr	r3, [sp, #4]
    ad90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad94:	2b00      	cmp	r3, #0
    ad96:	d10d      	bne.n	adb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad98:	f7f5 fe11 	bl	9be <Port_schm_read_msr>
    ad9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad9e:	9b00      	ldr	r3, [sp, #0]
    ada0:	f003 0301 	and.w	r3, r3, #1
    ada4:	2b00      	cmp	r3, #0
    ada6:	d100      	bne.n	adaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ada8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    adaa:	490a      	ldr	r1, [pc, #40]	; (add4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    adac:	9b01      	ldr	r3, [sp, #4]
    adae:	9a00      	ldr	r2, [sp, #0]
    adb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    adb4:	4a06      	ldr	r2, [pc, #24]	; (add0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    adb6:	9b01      	ldr	r3, [sp, #4]
    adb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adbc:	1c5a      	adds	r2, r3, #1
    adbe:	4904      	ldr	r1, [pc, #16]	; (add0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    adc0:	9b01      	ldr	r3, [sp, #4]
    adc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    adc6:	bf00      	nop
    adc8:	b003      	add	sp, #12
    adca:	f85d fb04 	ldr.w	pc, [sp], #4
    adce:	bf00      	nop
    add0:	1fff9290 	.word	0x1fff9290
    add4:	1fff928c 	.word	0x1fff928c

0000add8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    add8:	b500      	push	{lr}
    adda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    addc:	f7f5 febe 	bl	b5c <Sys_GetCoreID>
    ade0:	4603      	mov	r3, r0
    ade2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    ade4:	4a0d      	ldr	r2, [pc, #52]	; (ae1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    ade6:	9b01      	ldr	r3, [sp, #4]
    ade8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adec:	1e5a      	subs	r2, r3, #1
    adee:	490b      	ldr	r1, [pc, #44]	; (ae1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    adf0:	9b01      	ldr	r3, [sp, #4]
    adf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    adf6:	4a0a      	ldr	r2, [pc, #40]	; (ae20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    adf8:	9b01      	ldr	r3, [sp, #4]
    adfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfe:	f003 0301 	and.w	r3, r3, #1
    ae02:	2b00      	cmp	r3, #0
    ae04:	d106      	bne.n	ae14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    ae06:	4a05      	ldr	r2, [pc, #20]	; (ae1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    ae08:	9b01      	ldr	r3, [sp, #4]
    ae0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d100      	bne.n	ae14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae14:	bf00      	nop
    ae16:	b003      	add	sp, #12
    ae18:	f85d fb04 	ldr.w	pc, [sp], #4
    ae1c:	1fff9290 	.word	0x1fff9290
    ae20:	1fff928c 	.word	0x1fff928c

0000ae24 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    ae24:	bf00      	nop
    ae26:	4770      	bx	lr

0000ae28 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    ae28:	b510      	push	{r4, lr}
    ae2a:	b084      	sub	sp, #16
    ae2c:	4604      	mov	r4, r0
    ae2e:	4608      	mov	r0, r1
    ae30:	4611      	mov	r1, r2
    ae32:	461a      	mov	r2, r3
    ae34:	4623      	mov	r3, r4
    ae36:	f8ad 3006 	strh.w	r3, [sp, #6]
    ae3a:	4603      	mov	r3, r0
    ae3c:	f88d 3005 	strb.w	r3, [sp, #5]
    ae40:	460b      	mov	r3, r1
    ae42:	f88d 3004 	strb.w	r3, [sp, #4]
    ae46:	4613      	mov	r3, r2
    ae48:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae4c:	f7f5 fe86 	bl	b5c <Sys_GetCoreID>
    ae50:	4603      	mov	r3, r0
    ae52:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    ae54:	490d      	ldr	r1, [pc, #52]	; (ae8c <Det_ReportError+0x64>)
    ae56:	9b03      	ldr	r3, [sp, #12]
    ae58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ae5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    ae60:	4a0b      	ldr	r2, [pc, #44]	; (ae90 <Det_ReportError+0x68>)
    ae62:	9b03      	ldr	r3, [sp, #12]
    ae64:	4413      	add	r3, r2
    ae66:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ae6a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    ae6c:	4a09      	ldr	r2, [pc, #36]	; (ae94 <Det_ReportError+0x6c>)
    ae6e:	9b03      	ldr	r3, [sp, #12]
    ae70:	4413      	add	r3, r2
    ae72:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ae76:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    ae78:	4a07      	ldr	r2, [pc, #28]	; (ae98 <Det_ReportError+0x70>)
    ae7a:	9b03      	ldr	r3, [sp, #12]
    ae7c:	4413      	add	r3, r2
    ae7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae82:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ae84:	2300      	movs	r3, #0
}
    ae86:	4618      	mov	r0, r3
    ae88:	b004      	add	sp, #16
    ae8a:	bd10      	pop	{r4, pc}
    ae8c:	1fff92bc 	.word	0x1fff92bc
    ae90:	1fff9294 	.word	0x1fff9294
    ae94:	1fff9298 	.word	0x1fff9298
    ae98:	1fff929c 	.word	0x1fff929c

0000ae9c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    ae9c:	b510      	push	{r4, lr}
    ae9e:	b084      	sub	sp, #16
    aea0:	4604      	mov	r4, r0
    aea2:	4608      	mov	r0, r1
    aea4:	4611      	mov	r1, r2
    aea6:	461a      	mov	r2, r3
    aea8:	4623      	mov	r3, r4
    aeaa:	f8ad 3006 	strh.w	r3, [sp, #6]
    aeae:	4603      	mov	r3, r0
    aeb0:	f88d 3005 	strb.w	r3, [sp, #5]
    aeb4:	460b      	mov	r3, r1
    aeb6:	f88d 3004 	strb.w	r3, [sp, #4]
    aeba:	4613      	mov	r3, r2
    aebc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aec0:	f7f5 fe4c 	bl	b5c <Sys_GetCoreID>
    aec4:	4603      	mov	r3, r0
    aec6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    aec8:	490d      	ldr	r1, [pc, #52]	; (af00 <Det_ReportRuntimeError+0x64>)
    aeca:	9b03      	ldr	r3, [sp, #12]
    aecc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    aed0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    aed4:	4a0b      	ldr	r2, [pc, #44]	; (af04 <Det_ReportRuntimeError+0x68>)
    aed6:	9b03      	ldr	r3, [sp, #12]
    aed8:	4413      	add	r3, r2
    aeda:	f89d 2005 	ldrb.w	r2, [sp, #5]
    aede:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    aee0:	4a09      	ldr	r2, [pc, #36]	; (af08 <Det_ReportRuntimeError+0x6c>)
    aee2:	9b03      	ldr	r3, [sp, #12]
    aee4:	4413      	add	r3, r2
    aee6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    aeea:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    aeec:	4a07      	ldr	r2, [pc, #28]	; (af0c <Det_ReportRuntimeError+0x70>)
    aeee:	9b03      	ldr	r3, [sp, #12]
    aef0:	4413      	add	r3, r2
    aef2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aef6:	701a      	strb	r2, [r3, #0]

    return E_OK;
    aef8:	2300      	movs	r3, #0
}
    aefa:	4618      	mov	r0, r3
    aefc:	b004      	add	sp, #16
    aefe:	bd10      	pop	{r4, pc}
    af00:	1fff92c0 	.word	0x1fff92c0
    af04:	1fff92a0 	.word	0x1fff92a0
    af08:	1fff92a4 	.word	0x1fff92a4
    af0c:	1fff92a8 	.word	0x1fff92a8

0000af10 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    af10:	b510      	push	{r4, lr}
    af12:	b084      	sub	sp, #16
    af14:	4604      	mov	r4, r0
    af16:	4608      	mov	r0, r1
    af18:	4611      	mov	r1, r2
    af1a:	461a      	mov	r2, r3
    af1c:	4623      	mov	r3, r4
    af1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    af22:	4603      	mov	r3, r0
    af24:	f88d 3005 	strb.w	r3, [sp, #5]
    af28:	460b      	mov	r3, r1
    af2a:	f88d 3004 	strb.w	r3, [sp, #4]
    af2e:	4613      	mov	r3, r2
    af30:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af34:	f7f5 fe12 	bl	b5c <Sys_GetCoreID>
    af38:	4603      	mov	r3, r0
    af3a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    af3c:	490d      	ldr	r1, [pc, #52]	; (af74 <Det_ReportTransientFault+0x64>)
    af3e:	9b03      	ldr	r3, [sp, #12]
    af40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    af44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    af48:	4a0b      	ldr	r2, [pc, #44]	; (af78 <Det_ReportTransientFault+0x68>)
    af4a:	9b03      	ldr	r3, [sp, #12]
    af4c:	4413      	add	r3, r2
    af4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    af52:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    af54:	4a09      	ldr	r2, [pc, #36]	; (af7c <Det_ReportTransientFault+0x6c>)
    af56:	9b03      	ldr	r3, [sp, #12]
    af58:	4413      	add	r3, r2
    af5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    af5e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    af60:	4a07      	ldr	r2, [pc, #28]	; (af80 <Det_ReportTransientFault+0x70>)
    af62:	9b03      	ldr	r3, [sp, #12]
    af64:	4413      	add	r3, r2
    af66:	f89d 2003 	ldrb.w	r2, [sp, #3]
    af6a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    af6c:	2300      	movs	r3, #0
}
    af6e:	4618      	mov	r0, r3
    af70:	b004      	add	sp, #16
    af72:	bd10      	pop	{r4, pc}
    af74:	1fff92b8 	.word	0x1fff92b8
    af78:	1fff92ac 	.word	0x1fff92ac
    af7c:	1fff92b0 	.word	0x1fff92b0
    af80:	1fff92b4 	.word	0x1fff92b4

0000af84 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    af84:	bf00      	nop
    af86:	4770      	bx	lr

0000af88 <Clock_Ip_au8DividerCallbackIndex>:
    af88:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000af98 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000afa8 <Clock_Ip_au8XoscCallbackIndex>:
    afa8:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000afb8 <Clock_Ip_au8IrcoscCallbackIndex>:
    afb8:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000afc8 <Clock_Ip_au8GateCallbackIndex>:
    afc8:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000afd8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000afe8 <Clock_Ip_au8PllCallbackIndex>:
    afe8:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000aff8 <Clock_Ip_au8SelectorCallbackIndex>:
    aff8:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000b008 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b018 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b028 <Clock_Ip_au8ClockFeatures>:
	...
    b038:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    b048:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    b058:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    b068:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    b078:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    b088:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    b098:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    b0a8:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    b0b8:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    b0c8:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    b108:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    b118:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    b128:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    b138:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    b150:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    b160:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    b170:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    b180:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    b190:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    b1a0:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    b1b0:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    b1c0:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    b1d8:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    b1e8:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    b1f8:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    b208:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    b218:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    b228:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    b238:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    b248:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    b258:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    b268:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    b278:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    b288:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    b298:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    b2a8:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    b2b8:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    b2c8:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    b2d8:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    b2e8:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    b2f8:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    b308:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    b318:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    b328:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000b338 <Clock_Ip_au16SelectorEntryHardwareValue>:
    b338:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    b348:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    b358:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000b390 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    b390:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000b3c0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    b3c0:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    b3d0:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000b3f0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    b3f0:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    b400:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000b420 <Clock_Ip_au8DividerValueHardwareValue>:
    b420:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    b430:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    b440:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    b460:	0007 0000                                   ....

0000b464 <Clock_Ip_apxScgPeriphAsyncDivs>:
    b464:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000b474 <Clock_Ip_aeSourceTypeClockName>:
    b474:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    b484:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    b494:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    b4a4:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    b4b4:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    b4c4:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000b530 <Clock_Ip_aeHwPllName>:
    b530:	0009 0000                                   ....

0000b534 <Clock_Ip_aeHwDfsName>:
    b534:	0057 0000                                   W...

0000b538 <Clock_Ip_axDividerCallbacks>:
    b538:	22c1 0000 22cb 0000 22e5 0000 22ff 0000     ."..."..."..."..
    b548:	2319 0000 2333 0000 234d 0000 2367 0000     .#..3#..M#..g#..
    b558:	2381 0000 239b 0000 23b5 0000 23cf 0000     .#...#...#...#..
    b568:	23e9 0000 2403 0000 241d 0000               .#...$...$..

0000b574 <Clock_Ip_axDividerTriggerCallbacks>:
    b574:	2791 0000 2791 0000                         .'...'..

0000b57c <Clock_Ip_axExtOscCallbacks>:
    b57c:	279d 0000 279d 0000 279d 0000 27a7 0000     .'...'...'...'..
    b58c:	279d 0000 27b1 0000 27cb 0000 27e5 0000     .'...'...'...'..
    b59c:	2869 0000 287d 0000                         i(..}(..

0000b5a4 <Clock_Ip_axFracDivCallbacks>:
    b5a4:	2a3d 0000 2a3d 0000 2a47 0000               =*..=*..G*..

0000b5b0 <Clock_Ip_axGateCallbacks>:
    b5b0:	2a61 0000 2a6b 0000 2b6b 0000 2b85 0000     a*..k*..k+...+..
    b5c0:	2b1b 0000 2b35 0000 2acb 0000 2ae5 0000     .+..5+...*...*..
    b5d0:	2a7b 0000 2a95 0000 2bbb 0000 2bd5 0000     {*...*...+...+..
    b5e0:	2c0b 0000 2c25 0000                         .,..%,..

0000b5e8 <Clock_Ip_axIntOscCallbacks>:
    b5e8:	2dd1 0000 2dd1 0000 2ddb 0000 2de5 0000     .-...-...-...-..
    b5f8:	2dff 0000 2e19 0000 2e2d 0000 2e47 0000     .-......-...G...
    b608:	2e61 0000 2e75 0000 2e8f 0000 2ea9 0000     a...u...........
    b618:	2f51 0000 2f6b 0000 2f85 0000               Q/..k/.../..

0000b624 <Clock_Ip_axCmuCallbacks>:
    b624:	3521 0000 352b 0000 3537 0000 3521 0000     !5..+5..75..!5..

0000b634 <Clock_Ip_axPllCallbacks>:
    b634:	3541 0000 3541 0000 354b 0000 3541 0000     A5..A5..K5..A5..
    b644:	3557 0000 3561 0000 357b 0000 3595 0000     W5..a5..{5...5..
    b654:	3639 0000 3625 0000                         96..%6..

0000b65c <Clock_Ip_axPcfsCallbacks>:
    b65c:	3795 0000                                   .7..

0000b660 <Clock_Ip_axSelectorCallbacks>:
    b660:	37a1 0000 37a1 0000 37ab 0000 37c5 0000     .7...7...7...7..
    b670:	37a1 0000 37df 0000 37f9 0000 3813 0000     .7...7...7...8..
    b680:	382d 0000 3847 0000 3861 0000 387b 0000     -8..G8..a8..{8..
    b690:	3895 0000 38af 0000 38c9 0000 38e3 0000     .8...8...8...8..
    b6a0:	38fd 0000 3917 0000 3931 0000 394b 0000     .8...9..19..K9..
    b6b0:	3965 0000 397f 0000                         e9...9..

0000b6b8 <ClockSource>:
    b6b8:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    b6d0:	0009 0000                                   ....

0000b6d4 <ResetReasonArray>:
    b6d4:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    b6e4:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    b6f4:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    b704:	000c 0000 000d 0000 000e 0000               ............

0000b710 <ftmGptBase>:
    b710:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

0000b720 <Port_au32PortCiPortBaseAddr>:
    b720:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    b730:	d000 4004                                   ...@

0000b734 <Port_au32PortCiGpioBaseAddr>:
    b734:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    b744:	f100 400f                                   ...@

0000b748 <Mcu_aClockConfigPB>:
	...
    b750:	0002 1400 000e 0400 0020 0100 0002 0000     ........ .......
    b760:	0001 0100 0001 0000 0005 0000 0001 0000     ................
    b770:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
	...
    b788:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
	...
    b7b0:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    b7c0:	001b 0000 0005 0000 002a 0000 0002 0000     ........*.......
    b7d0:	003f 0000 000a 0000 0040 0000 0000 0000     ?.......@.......
    b7e0:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    b7f0:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    b800:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    b810:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    b820:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    b830:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    b840:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    b850:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
    b860:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
    b870:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
    b880:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
    b890:	000a 0000 0008 0000 0000 0000 000b 0000     ................
    b8a0:	0001 0000 0000 0000 000c 0000 0001 0000     ................
    b8b0:	0000 0000 000d 0000 0001 0000 0000 0000     ................
    b8c0:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    b8d0:	0002 0000 0000 0000 001f 0000 0001 0000     ................
    b8e0:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    b8f0:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    b900:	0001 0000 0000 0000 0025 0000 0002 0000     ........%.......
    b910:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    b920:	0027 0000 0002 0000 0000 0000 0048 0000     '...........H...
    b930:	0001 0000 0001 0000 0057 0000 0000 0000     ........W.......
    b940:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
    b950:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    b968:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    b980:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    b99c:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    b9ac:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    b9bc:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    b9cc:	0033 0000 0000 0000 0034 0000 0000 0000     3.......4.......
    b9dc:	0036 0000 0000 0000 0039 0000 0000 0000     6.......9.......
    b9ec:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    b9fc:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    ba0c:	003e 0000 0000 0000 003f 0000 0001 0000     >.......?.......
    ba1c:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    ba2c:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    ba3c:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    ba4c:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    ba5c:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    ba6c:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    ba7c:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    ba8c:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    ba9c:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    baac:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    babc:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
    bacc:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
    badc:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
    baec:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
    bafc:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
    bb0c:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000bb40 <FTM_0_InitConfig_PB>:
    bb40:	0000 0000 0003 0000 0004 0000 0001 0000     ................

0000bb50 <FTM_0_ChannelConfig_PB>:
    bb50:	0000 0000 66ed 0000 0000 0000 0000 0000     .....f..........
    bb60:	0001 0000 66ed 0000 0001 0000 0001 0000     .....f..........

0000bb70 <u8GptChannelIdToIndexMap>:
    bb70:	0100 0000                                   ....

0000bb74 <Gpt_InitChannelPB>:
    bb74:	0000 0000 0b75 0000 ffff 0000 0000 0000     ....u...........
    bb84:	8b48 1fff 0000 0000 0b7f 0000 ffff 0000     H...............
    bb94:	0001 0000 8b60 1fff                         ....`...

0000bb9c <Gpt_Config>:
    bb9c:	0002 0000 bb74 0000 0001 0000 8b38 1fff     ....t.......8...
    bbac:	bb70 0000                                   p...

0000bbb0 <aIrqConfiguration>:
    bbb0:	0063 0000 0f01 0000 5ed1 0000               c........^..

0000bbbc <intCtrlConfig>:
    bbbc:	0001 0000 bbb0 0000                         ........

0000bbc4 <Mcu_Config>:
    bbc4:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    bbd4:	bde0 0000 b748 0000 bdec 0000               ....H.......

0000bbe0 <OsIf_xPredefinedConfig>:
    bbe0:	0000 0000 6c00 02dc                         .....l..

0000bbe8 <OsIf_apxPredefinedConfig>:
    bbe8:	bbe0 0000                                   ....

0000bbec <Platform_uConfiguration>:
    bbec:	bbf4 0000                                   ....

0000bbf0 <Platform_Config>:
    bbf0:	bbec 0000                                   ....

0000bbf4 <ipwConfig>:
    bbf4:	bbbc 0000 0000 0000                         ........

0000bbfc <g_pin_mux_InitConfigArr>:
    bbfc:	b000 4004 f080 400f 0008 0000 0002 0000     ...@...@........
    bc0c:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
    bc24:	b000 4004 f080 400f 0009 0000 0002 0000     ...@...@........
    bc34:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
    bc4c:	b000 4004 f080 400f 000a 0000 0002 0000     ...@...@........
    bc5c:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
    bc74:	d000 4004 f100 400f 000c 0000 0002 0000     ...@...@........
    bc84:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...

0000bc9c <au8Port_PartitionList>:
    bc9c:	0001 0000                                   ....

0000bca0 <au32Port_PinToPartitionMap>:
    bca0:	0001 0000 0001 0000 0001 0000 0001 0000     ................

0000bcb0 <Port_au16NoUnUsedPadsArrayDefault>:
    bcb0:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    bcc0:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    bcd0:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    bce0:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    bcf0:	0031 0040 0041 0042 0043 0046 0047 004b     1.@.A.B.C.F.G.K.
    bd00:	004c 004d 004e 004f 0050 0051 0060 0061     L.M.N.O.P.Q.`.a.
    bd10:	0062 0063 0064 0065 0066 0067 0068 0069     b.c.d.e.f.g.h.i.
    bd20:	006a 006b 006c 006d 006e 006f 0070 0071     j.k.l.m.n.o.p.q.
    bd30:	0080 0081 0082 0083 0084 0085 0086 0087     ................
    bd40:	0088 0089 008a 008b 008d 008e 008f 0090     ................

0000bd50 <Port_UnUsedPin>:
    bd50:	0000 0000 0001 0000 0000 0000               ............

0000bd5c <Port_aPinConfigDefault>:
    bd5c:	0048 0000 0100 0000 0000 0000 0002 0000     H...............
    bd6c:	0001 0001 0049 0000 0100 0000 0000 0000     ....I...........
    bd7c:	0002 0000 0101 0001 004a 0000 0100 0000     ........J.......
    bd8c:	0000 0000 0002 0000 0101 0001 008c 0000     ................
    bd9c:	0100 0000 0000 0000 0001 0000 0101 0001     ................

0000bdac <Port_Config>:
    bdac:	0004 0050 bcb0 0000 bd50 0000 bd5c 0000     ..P.....P...\...
	...
    bdc4:	bca0 0000 bc9c 0000 bbfc 0000               ............

0000bdd0 <Power_Ip_RCM_ConfigPB>:
	...

0000bdd8 <Power_Ip_PMC_ConfigPB>:
    bdd8:	0000 0000                                   ....

0000bddc <Power_Ip_SMC_ConfigPB>:
    bddc:	0000 0000                                   ....

0000bde0 <Power_Ip_aModeConfigPB>:
	...

0000bdec <Power_Ip_HwIPsConfigPB>:
    bdec:	bdd0 0000 bdd8 0000 bddc 0000               ............

0000bdf8 <__INIT_TABLE>:
    bdf8:	00000002 	.word	0x00000002
    bdfc:	1fff8b10 	.word	0x1fff8b10
    be00:	0000be20 	.word	0x0000be20
    be04:	0000be88 	.word	0x0000be88
    be08:	1fff8800 	.word	0x1fff8800
    be0c:	00000000 	.word	0x00000000
    be10:	00000310 	.word	0x00000310

0000be14 <__ZERO_TABLE>:
    be14:	00000001 	.word	0x00000001
    be18:	1fff8b80 	.word	0x1fff8b80
    be1c:	1fff92d0 	.word	0x1fff92d0
