
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001473 	.word	0x00001473
  10:	00001475 	.word	0x00001475
  14:	00001477 	.word	0x00001477
  18:	00001479 	.word	0x00001479
	...
  2c:	0000147b 	.word	0x0000147b
  30:	0000147d 	.word	0x0000147d
  34:	00000000 	.word	0x00000000
  38:	0000147f 	.word	0x0000147f
  3c:	00001481 	.word	0x00001481
  40:	00001483 	.word	0x00001483
  44:	00001483 	.word	0x00001483
  48:	00001483 	.word	0x00001483
  4c:	00001483 	.word	0x00001483
  50:	00001483 	.word	0x00001483
  54:	00001483 	.word	0x00001483
  58:	00001483 	.word	0x00001483
  5c:	00001483 	.word	0x00001483
  60:	00001483 	.word	0x00001483
  64:	00001483 	.word	0x00001483
  68:	00001483 	.word	0x00001483
  6c:	00001483 	.word	0x00001483
  70:	00001483 	.word	0x00001483
  74:	00001483 	.word	0x00001483
  78:	00001483 	.word	0x00001483
  7c:	00001483 	.word	0x00001483
  80:	00001483 	.word	0x00001483
  84:	00001483 	.word	0x00001483
  88:	00001483 	.word	0x00001483
  8c:	00001483 	.word	0x00001483
  90:	00001483 	.word	0x00001483
  94:	00001483 	.word	0x00001483
  98:	00001483 	.word	0x00001483
  9c:	00001483 	.word	0x00001483
  a0:	00001483 	.word	0x00001483
  a4:	00001483 	.word	0x00001483
  a8:	00001483 	.word	0x00001483
  ac:	00001483 	.word	0x00001483
  b0:	00001483 	.word	0x00001483
  b4:	00001483 	.word	0x00001483
  b8:	00001483 	.word	0x00001483
  bc:	00001483 	.word	0x00001483
  c0:	00001483 	.word	0x00001483
  c4:	00001483 	.word	0x00001483
  c8:	00001483 	.word	0x00001483
  cc:	00001483 	.word	0x00001483
  d0:	00001483 	.word	0x00001483
  d4:	00001483 	.word	0x00001483
  d8:	00001483 	.word	0x00001483
  dc:	00001483 	.word	0x00001483
  e0:	00001483 	.word	0x00001483
  e4:	00001483 	.word	0x00001483
  e8:	00001483 	.word	0x00001483
  ec:	00001483 	.word	0x00001483
  f0:	00001483 	.word	0x00001483
  f4:	00001483 	.word	0x00001483
  f8:	00001483 	.word	0x00001483
  fc:	00001483 	.word	0x00001483
 100:	00001483 	.word	0x00001483
 104:	00001483 	.word	0x00001483
 108:	00001483 	.word	0x00001483
 10c:	00001483 	.word	0x00001483
 110:	00001483 	.word	0x00001483
 114:	00001483 	.word	0x00001483
 118:	00001483 	.word	0x00001483
 11c:	00001483 	.word	0x00001483
 120:	00001483 	.word	0x00001483
 124:	00001483 	.word	0x00001483
 128:	00001483 	.word	0x00001483
 12c:	00001483 	.word	0x00001483
 130:	00001483 	.word	0x00001483
 134:	00001483 	.word	0x00001483
 138:	00001483 	.word	0x00001483
 13c:	00001483 	.word	0x00001483
 140:	00001483 	.word	0x00001483
 144:	00001483 	.word	0x00001483
 148:	00001483 	.word	0x00001483
 14c:	00001483 	.word	0x00001483
 150:	00001483 	.word	0x00001483
 154:	00001483 	.word	0x00001483
 158:	00001483 	.word	0x00001483
 15c:	00001483 	.word	0x00001483
 160:	00001483 	.word	0x00001483
 164:	00001483 	.word	0x00001483
 168:	00001483 	.word	0x00001483
 16c:	00001483 	.word	0x00001483
 170:	00001483 	.word	0x00001483
 174:	00001483 	.word	0x00001483
 178:	00001483 	.word	0x00001483
 17c:	00001483 	.word	0x00001483
 180:	00001483 	.word	0x00001483
 184:	00001483 	.word	0x00001483
 188:	00001483 	.word	0x00001483
 18c:	00001483 	.word	0x00001483
 190:	00001483 	.word	0x00001483
 194:	00001483 	.word	0x00001483
 198:	00001483 	.word	0x00001483
 19c:	00001483 	.word	0x00001483
 1a0:	00001483 	.word	0x00001483
 1a4:	00001483 	.word	0x00001483
 1a8:	00001483 	.word	0x00001483
 1ac:	00001483 	.word	0x00001483
 1b0:	00001483 	.word	0x00001483
 1b4:	00001483 	.word	0x00001483
 1b8:	00001483 	.word	0x00001483
 1bc:	00001483 	.word	0x00001483
 1c0:	00001483 	.word	0x00001483
 1c4:	00001483 	.word	0x00001483
 1c8:	00001483 	.word	0x00001483
 1cc:	00001483 	.word	0x00001483
 1d0:	00001483 	.word	0x00001483
 1d4:	00001483 	.word	0x00001483
 1d8:	00001483 	.word	0x00001483
 1dc:	00001483 	.word	0x00001483
 1e0:	00001483 	.word	0x00001483
 1e4:	00001483 	.word	0x00001483
 1e8:	00001483 	.word	0x00001483
 1ec:	00001483 	.word	0x00001483
 1f0:	00001483 	.word	0x00001483
 1f4:	00001483 	.word	0x00001483
 1f8:	00001483 	.word	0x00001483
 1fc:	00001483 	.word	0x00001483
 200:	00001483 	.word	0x00001483
 204:	00001483 	.word	0x00001483
 208:	00001483 	.word	0x00001483
 20c:	00001483 	.word	0x00001483
 210:	00001483 	.word	0x00001483
 214:	00001483 	.word	0x00001483
 218:	00001483 	.word	0x00001483
 21c:	00001483 	.word	0x00001483
 220:	00001483 	.word	0x00001483
 224:	00001483 	.word	0x00001483
 228:	00001483 	.word	0x00001483
 22c:	00001483 	.word	0x00001483
 230:	00001483 	.word	0x00001483
 234:	00001483 	.word	0x00001483
 238:	00001483 	.word	0x00001483
 23c:	00001483 	.word	0x00001483
 240:	00001483 	.word	0x00001483
 244:	00001483 	.word	0x00001483
 248:	00001483 	.word	0x00001483
 24c:	00001483 	.word	0x00001483
 250:	00001483 	.word	0x00001483
 254:	00001483 	.word	0x00001483
 258:	00001483 	.word	0x00001483
 25c:	00001483 	.word	0x00001483
 260:	00001483 	.word	0x00001483
 264:	00001483 	.word	0x00001483
 268:	00001483 	.word	0x00001483
 26c:	00001483 	.word	0x00001483
 270:	00001483 	.word	0x00001483
 274:	00001483 	.word	0x00001483
 278:	00001483 	.word	0x00001483
 27c:	00001483 	.word	0x00001483
 280:	00001483 	.word	0x00001483
 284:	00001483 	.word	0x00001483
 288:	00001483 	.word	0x00001483
 28c:	00001483 	.word	0x00001483
 290:	00001483 	.word	0x00001483
 294:	00001483 	.word	0x00001483
 298:	00001483 	.word	0x00001483
 29c:	00001483 	.word	0x00001483
 2a0:	00001483 	.word	0x00001483
 2a4:	00001483 	.word	0x00001483
 2a8:	00001483 	.word	0x00001483
 2ac:	00001483 	.word	0x00001483
 2b0:	00001483 	.word	0x00001483
 2b4:	00001483 	.word	0x00001483
 2b8:	00001483 	.word	0x00001483
 2bc:	00001483 	.word	0x00001483
 2c0:	00001483 	.word	0x00001483
 2c4:	00001483 	.word	0x00001483
 2c8:	00001483 	.word	0x00001483
 2cc:	00001483 	.word	0x00001483
 2d0:	00001483 	.word	0x00001483
 2d4:	00001483 	.word	0x00001483
 2d8:	00001483 	.word	0x00001483
 2dc:	00001483 	.word	0x00001483
 2e0:	00001483 	.word	0x00001483
 2e4:	00001483 	.word	0x00001483
 2e8:	00001483 	.word	0x00001483
 2ec:	00001483 	.word	0x00001483
 2f0:	00001483 	.word	0x00001483
 2f4:	00001483 	.word	0x00001483
 2f8:	00001483 	.word	0x00001483
 2fc:	00001483 	.word	0x00001483
 300:	00001483 	.word	0x00001483
 304:	00001483 	.word	0x00001483
 308:	00001483 	.word	0x00001483
 30c:	00001483 	.word	0x00001483

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ff2d 	bl	12e0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 ffec 	bl	1468 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92a4 	.word	0x1fff92a4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ff37 	bl	140c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x10c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x10c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x110>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x110>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x106>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x144>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x84>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x13c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x136>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x28>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x132>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x132>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x50>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x12a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x12a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x118>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x114>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x148>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xd0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x12e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x12e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0xfe>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x126>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x126>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x66>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x66>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0xfe>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x50>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xd0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x28>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f000 fdf5 	bl	14a0 <EcuM_Init>
    HwIoAb_Init();  //Initializing IO hardware abstractions.
     8b6:	f000 fe15 	bl	14e4 <HwIoAb_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <main+0x18>)
     8bc:	f000 f8c6 	bl	a4c <Scheduler_Init>
    
    while( 1u ) {
        Scheduler_MainFunction();
     8c0:	f000 f982 	bl	bc8 <Scheduler_MainFunction>
     8c4:	e7fc      	b.n	8c0 <main+0x10>
     8c6:	bf00      	nop
     8c8:	1fff9238 	.word	0x1fff9238

000008cc <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     8cc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ce:	f3ef 8310 	mrs	r3, PRIMASK
     8d2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d4:	4623      	mov	r3, r4
}
     8d6:	4618      	mov	r0, r3
     8d8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8dc:	4770      	bx	lr

000008de <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8de:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8e0:	f3ef 8310 	mrs	r3, PRIMASK
     8e4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e6:	4623      	mov	r3, r4
}
     8e8:	4618      	mov	r0, r3
     8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ee:	4770      	bx	lr

000008f0 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8f0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8f2:	f3ef 8310 	mrs	r3, PRIMASK
     8f6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f8:	4623      	mov	r3, r4
}
     8fa:	4618      	mov	r0, r3
     8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
     900:	4770      	bx	lr

00000902 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     902:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     904:	f3ef 8310 	mrs	r3, PRIMASK
     908:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     90a:	4623      	mov	r3, r4
}
     90c:	4618      	mov	r0, r3
     90e:	f85d 4b04 	ldr.w	r4, [sp], #4
     912:	4770      	bx	lr

00000914 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     914:	b082      	sub	sp, #8
     916:	9001      	str	r0, [sp, #4]
     918:	460b      	mov	r3, r1
     91a:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     91e:	9b01      	ldr	r3, [sp, #4]
     920:	681b      	ldr	r3, [r3, #0]
     922:	f89d 2003 	ldrb.w	r2, [sp, #3]
     926:	2101      	movs	r1, #1
     928:	fa01 f202 	lsl.w	r2, r1, r2
     92c:	431a      	orrs	r2, r3
     92e:	9b01      	ldr	r3, [sp, #4]
     930:	601a      	str	r2, [r3, #0]
}
     932:	bf00      	nop
     934:	b002      	add	sp, #8
     936:	4770      	bx	lr

00000938 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     938:	b082      	sub	sp, #8
     93a:	9001      	str	r0, [sp, #4]
     93c:	460b      	mov	r3, r1
     93e:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     942:	9b01      	ldr	r3, [sp, #4]
     944:	681b      	ldr	r3, [r3, #0]
     946:	f89d 2003 	ldrb.w	r2, [sp, #3]
     94a:	2101      	movs	r1, #1
     94c:	fa01 f202 	lsl.w	r2, r1, r2
     950:	43d2      	mvns	r2, r2
     952:	401a      	ands	r2, r3
     954:	9b01      	ldr	r3, [sp, #4]
     956:	601a      	str	r2, [r3, #0]
}
     958:	bf00      	nop
     95a:	b002      	add	sp, #8
     95c:	4770      	bx	lr

0000095e <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     95e:	b084      	sub	sp, #16
     960:	9001      	str	r0, [sp, #4]
     962:	460b      	mov	r3, r1
     964:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     968:	2300      	movs	r3, #0
     96a:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     96e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     972:	2201      	movs	r2, #1
     974:	fa02 f303 	lsl.w	r3, r2, r3
     978:	461a      	mov	r2, r3
     97a:	9b01      	ldr	r3, [sp, #4]
     97c:	4013      	ands	r3, r2
     97e:	2b00      	cmp	r3, #0
     980:	bf14      	ite	ne
     982:	2301      	movne	r3, #1
     984:	2300      	moveq	r3, #0
     986:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     98a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     98e:	4618      	mov	r0, r3
     990:	b004      	add	sp, #16
     992:	4770      	bx	lr

00000994 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     994:	b082      	sub	sp, #8
     996:	9001      	str	r0, [sp, #4]
     998:	460b      	mov	r3, r1
     99a:	f88d 3003 	strb.w	r3, [sp, #3]
     99e:	4613      	mov	r3, r2
     9a0:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d00a      	beq.n	9c2 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9ac:	9b01      	ldr	r3, [sp, #4]
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9b4:	2101      	movs	r1, #1
     9b6:	fa01 f202 	lsl.w	r2, r1, r2
     9ba:	431a      	orrs	r2, r3
     9bc:	9b01      	ldr	r3, [sp, #4]
     9be:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     9c0:	e00a      	b.n	9d8 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     9c2:	9b01      	ldr	r3, [sp, #4]
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9ca:	2101      	movs	r1, #1
     9cc:	fa01 f202 	lsl.w	r2, r1, r2
     9d0:	43d2      	mvns	r2, r2
     9d2:	401a      	ands	r2, r3
     9d4:	9b01      	ldr	r3, [sp, #4]
     9d6:	601a      	str	r2, [r3, #0]
}
     9d8:	bf00      	nop
     9da:	b002      	add	sp, #8
     9dc:	4770      	bx	lr

000009de <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     9de:	b500      	push	{lr}
     9e0:	b085      	sub	sp, #20
     9e2:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     9e4:	2300      	movs	r3, #0
     9e6:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     9ea:	2300      	movs	r3, #0
     9ec:	f88d 300f 	strb.w	r3, [sp, #15]
     9f0:	e023      	b.n	a3a <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     9f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     9f6:	9b01      	ldr	r3, [sp, #4]
     9f8:	3208      	adds	r2, #8
     9fa:	2100      	movs	r1, #0
     9fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a00:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a04:	9a01      	ldr	r2, [sp, #4]
     a06:	3308      	adds	r3, #8
     a08:	009b      	lsls	r3, r3, #2
     a0a:	4413      	add	r3, r2
     a0c:	2200      	movs	r2, #0
     a0e:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a10:	9b01      	ldr	r3, [sp, #4]
     a12:	332c      	adds	r3, #44	; 0x2c
     a14:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a18:	4611      	mov	r1, r2
     a1a:	4618      	mov	r0, r3
     a1c:	f7ff ff8c 	bl	938 <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a20:	9b01      	ldr	r3, [sp, #4]
     a22:	3328      	adds	r3, #40	; 0x28
     a24:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a28:	4611      	mov	r1, r2
     a2a:	4618      	mov	r0, r3
     a2c:	f7ff ff72 	bl	914 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a30:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a34:	3301      	adds	r3, #1
     a36:	f88d 300f 	strb.w	r3, [sp, #15]
     a3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a3e:	2b00      	cmp	r3, #0
     a40:	d0d7      	beq.n	9f2 <Scheduler_InitQueue+0x14>
    }
}
     a42:	bf00      	nop
     a44:	bf00      	nop
     a46:	b005      	add	sp, #20
     a48:	f85d fb04 	ldr.w	pc, [sp], #4

00000a4c <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a4c:	b500      	push	{lr}
     a4e:	b085      	sub	sp, #20
     a50:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     a52:	2301      	movs	r3, #1
     a54:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     a58:	2300      	movs	r3, #0
     a5a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     a5e:	2300      	movs	r3, #0
     a60:	f88d 300f 	strb.w	r3, [sp, #15]
     a64:	e033      	b.n	ace <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     a66:	4b44      	ldr	r3, [pc, #272]	; (b78 <Scheduler_Init+0x12c>)
     a68:	681b      	ldr	r3, [r3, #0]
     a6a:	6899      	ldr	r1, [r3, #8]
     a6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a70:	4613      	mov	r3, r2
     a72:	005b      	lsls	r3, r3, #1
     a74:	4413      	add	r3, r2
     a76:	009b      	lsls	r3, r3, #2
     a78:	440b      	add	r3, r1
     a7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a7e:	6819      	ldr	r1, [r3, #0]
     a80:	9b01      	ldr	r3, [sp, #4]
     a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     a86:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a8a:	9b01      	ldr	r3, [sp, #4]
     a8c:	3202      	adds	r2, #2
     a8e:	2100      	movs	r1, #0
     a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     a94:	9b01      	ldr	r3, [sp, #4]
     a96:	f103 0018 	add.w	r0, r3, #24
     a9a:	4b37      	ldr	r3, [pc, #220]	; (b78 <Scheduler_Init+0x12c>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	6899      	ldr	r1, [r3, #8]
     aa0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aa4:	4613      	mov	r3, r2
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	4413      	add	r3, r2
     aaa:	009b      	lsls	r3, r3, #2
     aac:	440b      	add	r3, r1
     aae:	791b      	ldrb	r3, [r3, #4]
     ab0:	2b00      	cmp	r3, #0
     ab2:	bf14      	ite	ne
     ab4:	2301      	movne	r3, #1
     ab6:	2300      	moveq	r3, #0
     ab8:	b2da      	uxtb	r2, r3
     aba:	f89d 300f 	ldrb.w	r3, [sp, #15]
     abe:	4619      	mov	r1, r3
     ac0:	f7ff ff68 	bl	994 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     ac4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ac8:	3301      	adds	r3, #1
     aca:	f88d 300f 	strb.w	r3, [sp, #15]
     ace:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ad2:	2b01      	cmp	r3, #1
     ad4:	d9c7      	bls.n	a66 <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     ad6:	2300      	movs	r3, #0
     ad8:	f88d 300f 	strb.w	r3, [sp, #15]
     adc:	e03f      	b.n	b5e <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     ade:	4b26      	ldr	r3, [pc, #152]	; (b78 <Scheduler_Init+0x12c>)
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	6919      	ldr	r1, [r3, #16]
     ae4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ae8:	4613      	mov	r3, r2
     aea:	005b      	lsls	r3, r3, #1
     aec:	4413      	add	r3, r2
     aee:	009b      	lsls	r3, r3, #2
     af0:	440b      	add	r3, r1
     af2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     af6:	6819      	ldr	r1, [r3, #0]
     af8:	9b01      	ldr	r3, [sp, #4]
     afa:	3204      	adds	r2, #4
     afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b00:	4b1d      	ldr	r3, [pc, #116]	; (b78 <Scheduler_Init+0x12c>)
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	6919      	ldr	r1, [r3, #16]
     b06:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b0a:	4613      	mov	r3, r2
     b0c:	005b      	lsls	r3, r3, #1
     b0e:	4413      	add	r3, r2
     b10:	009b      	lsls	r3, r3, #2
     b12:	18ca      	adds	r2, r1, r3
     b14:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b18:	6812      	ldr	r2, [r2, #0]
     b1a:	9901      	ldr	r1, [sp, #4]
     b1c:	3304      	adds	r3, #4
     b1e:	009b      	lsls	r3, r3, #2
     b20:	440b      	add	r3, r1
     b22:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b24:	9b01      	ldr	r3, [sp, #4]
     b26:	f103 001c 	add.w	r0, r3, #28
     b2a:	4b13      	ldr	r3, [pc, #76]	; (b78 <Scheduler_Init+0x12c>)
     b2c:	681b      	ldr	r3, [r3, #0]
     b2e:	6919      	ldr	r1, [r3, #16]
     b30:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b34:	4613      	mov	r3, r2
     b36:	005b      	lsls	r3, r3, #1
     b38:	4413      	add	r3, r2
     b3a:	009b      	lsls	r3, r3, #2
     b3c:	440b      	add	r3, r1
     b3e:	791b      	ldrb	r3, [r3, #4]
     b40:	2b00      	cmp	r3, #0
     b42:	bf14      	ite	ne
     b44:	2301      	movne	r3, #1
     b46:	2300      	moveq	r3, #0
     b48:	b2da      	uxtb	r2, r3
     b4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b4e:	4619      	mov	r1, r3
     b50:	f7ff ff20 	bl	994 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b54:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b58:	3301      	adds	r3, #1
     b5a:	f88d 300f 	strb.w	r3, [sp, #15]
     b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b62:	2b00      	cmp	r3, #0
     b64:	d0bb      	beq.n	ade <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     b66:	9801      	ldr	r0, [sp, #4]
     b68:	f7ff ff39 	bl	9de <Scheduler_InitQueue>

    return status;
     b6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     b70:	4618      	mov	r0, r3
     b72:	b005      	add	sp, #20
     b74:	f85d fb04 	ldr.w	pc, [sp], #4
     b78:	1fff8b38 	.word	0x1fff8b38

00000b7c <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     b7c:	b084      	sub	sp, #16
     b7e:	4603      	mov	r3, r0
     b80:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     b84:	2300      	movs	r3, #0
     b86:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     b88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d011      	beq.n	bb4 <Scheduler_GetTimer+0x38>
     b90:	4b0b      	ldr	r3, [pc, #44]	; (bc0 <Scheduler_GetTimer+0x44>)
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	7b1b      	ldrb	r3, [r3, #12]
     b96:	f89d 2007 	ldrb.w	r2, [sp, #7]
     b9a:	429a      	cmp	r2, r3
     b9c:	d80a      	bhi.n	bb4 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     b9e:	4b09      	ldr	r3, [pc, #36]	; (bc4 <Scheduler_GetTimer+0x48>)
     ba0:	681a      	ldr	r2, [r3, #0]
     ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba6:	3b01      	subs	r3, #1
     ba8:	3304      	adds	r3, #4
     baa:	009b      	lsls	r3, r3, #2
     bac:	4413      	add	r3, r2
     bae:	685b      	ldr	r3, [r3, #4]
     bb0:	9303      	str	r3, [sp, #12]
     bb2:	e001      	b.n	bb8 <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     bb4:	2300      	movs	r3, #0
     bb6:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     bb8:	9b03      	ldr	r3, [sp, #12]
}
     bba:	4618      	mov	r0, r3
     bbc:	b004      	add	sp, #16
     bbe:	4770      	bx	lr
     bc0:	1fff8b38 	.word	0x1fff8b38
     bc4:	1fff8b3c 	.word	0x1fff8b3c

00000bc8 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     bc8:	b500      	push	{lr}
     bca:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     bcc:	4b5e      	ldr	r3, [pc, #376]	; (d48 <Scheduler_MainFunction+0x180>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bd6:	fb02 f303 	mul.w	r3, r2, r3
     bda:	2101      	movs	r1, #1
     bdc:	4618      	mov	r0, r3
     bde:	f000 ff6d 	bl	1abc <OsIf_MicrosToTicks>
     be2:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     be4:	2001      	movs	r0, #1
     be6:	f000 ff1d 	bl	1a24 <OsIf_GetCounter>
     bea:	4603      	mov	r3, r0
     bec:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     bee:	2300      	movs	r3, #0
     bf0:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     bf2:	2300      	movs	r3, #0
     bf4:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     bf8:	466b      	mov	r3, sp
     bfa:	2101      	movs	r1, #1
     bfc:	4618      	mov	r0, r3
     bfe:	f000 ff2a 	bl	1a56 <OsIf_GetElapsed>
     c02:	4602      	mov	r2, r0
     c04:	9b03      	ldr	r3, [sp, #12]
     c06:	4413      	add	r3, r2
     c08:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c0a:	9a03      	ldr	r2, [sp, #12]
     c0c:	9b01      	ldr	r3, [sp, #4]
     c0e:	429a      	cmp	r2, r3
     c10:	d3f2      	bcc.n	bf8 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c12:	2300      	movs	r3, #0
     c14:	f88d 300b 	strb.w	r3, [sp, #11]
     c18:	e03a      	b.n	c90 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c1a:	4b4c      	ldr	r3, [pc, #304]	; (d4c <Scheduler_MainFunction+0x184>)
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	69db      	ldr	r3, [r3, #28]
     c20:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c24:	4611      	mov	r1, r2
     c26:	4618      	mov	r0, r3
     c28:	f7ff fe99 	bl	95e <Bfx_GetBit_u32u8_u8>
     c2c:	4603      	mov	r3, r0
     c2e:	2b00      	cmp	r3, #0
     c30:	d029      	beq.n	c86 <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c32:	4b46      	ldr	r3, [pc, #280]	; (d4c <Scheduler_MainFunction+0x184>)
     c34:	681a      	ldr	r2, [r3, #0]
     c36:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c3a:	3304      	adds	r3, #4
     c3c:	009b      	lsls	r3, r3, #2
     c3e:	4413      	add	r3, r2
     c40:	6858      	ldr	r0, [r3, #4]
     c42:	4b41      	ldr	r3, [pc, #260]	; (d48 <Scheduler_MainFunction+0x180>)
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	681a      	ldr	r2, [r3, #0]
     c48:	4b40      	ldr	r3, [pc, #256]	; (d4c <Scheduler_MainFunction+0x184>)
     c4a:	6819      	ldr	r1, [r3, #0]
     c4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c50:	1a82      	subs	r2, r0, r2
     c52:	3304      	adds	r3, #4
     c54:	009b      	lsls	r3, r3, #2
     c56:	440b      	add	r3, r1
     c58:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     c5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c5e:	3301      	adds	r3, #1
     c60:	b2db      	uxtb	r3, r3
     c62:	4618      	mov	r0, r3
     c64:	f7ff ff8a 	bl	b7c <Scheduler_GetTimer>
     c68:	4603      	mov	r3, r0
     c6a:	2b00      	cmp	r3, #0
     c6c:	d10b      	bne.n	c86 <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     c6e:	4b36      	ldr	r3, [pc, #216]	; (d48 <Scheduler_MainFunction+0x180>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	6919      	ldr	r1, [r3, #16]
     c74:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c78:	4613      	mov	r3, r2
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	4413      	add	r3, r2
     c7e:	009b      	lsls	r3, r3, #2
     c80:	440b      	add	r3, r1
     c82:	689b      	ldr	r3, [r3, #8]
     c84:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c86:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c8a:	3301      	adds	r3, #1
     c8c:	f88d 300b 	strb.w	r3, [sp, #11]
     c90:	4b2d      	ldr	r3, [pc, #180]	; (d48 <Scheduler_MainFunction+0x180>)
     c92:	681b      	ldr	r3, [r3, #0]
     c94:	7b1b      	ldrb	r3, [r3, #12]
     c96:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c9a:	429a      	cmp	r2, r3
     c9c:	d3bd      	bcc.n	c1a <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     c9e:	2300      	movs	r3, #0
     ca0:	f88d 300b 	strb.w	r3, [sp, #11]
     ca4:	e045      	b.n	d32 <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     ca6:	4b29      	ldr	r3, [pc, #164]	; (d4c <Scheduler_MainFunction+0x184>)
     ca8:	681b      	ldr	r3, [r3, #0]
     caa:	699b      	ldr	r3, [r3, #24]
     cac:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cb0:	4611      	mov	r1, r2
     cb2:	4618      	mov	r0, r3
     cb4:	f7ff fe53 	bl	95e <Bfx_GetBit_u32u8_u8>
     cb8:	4603      	mov	r3, r0
     cba:	2b00      	cmp	r3, #0
     cbc:	d034      	beq.n	d28 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     cbe:	4b23      	ldr	r3, [pc, #140]	; (d4c <Scheduler_MainFunction+0x184>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cc6:	3202      	adds	r2, #2
     cc8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     ccc:	4b1e      	ldr	r3, [pc, #120]	; (d48 <Scheduler_MainFunction+0x180>)
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	6819      	ldr	r1, [r3, #0]
     cd2:	4b1e      	ldr	r3, [pc, #120]	; (d4c <Scheduler_MainFunction+0x184>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cda:	4401      	add	r1, r0
     cdc:	3202      	adds	r2, #2
     cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     ce2:	4b1a      	ldr	r3, [pc, #104]	; (d4c <Scheduler_MainFunction+0x184>)
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cea:	3202      	adds	r2, #2
     cec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     cf0:	4b16      	ldr	r3, [pc, #88]	; (d4c <Scheduler_MainFunction+0x184>)
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	f89d 100b 	ldrb.w	r1, [sp, #11]
     cf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     cfc:	429a      	cmp	r2, r3
     cfe:	d313      	bcc.n	d28 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d00:	4b11      	ldr	r3, [pc, #68]	; (d48 <Scheduler_MainFunction+0x180>)
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	6899      	ldr	r1, [r3, #8]
     d06:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d0a:	4613      	mov	r3, r2
     d0c:	005b      	lsls	r3, r3, #1
     d0e:	4413      	add	r3, r2
     d10:	009b      	lsls	r3, r3, #2
     d12:	440b      	add	r3, r1
     d14:	689b      	ldr	r3, [r3, #8]
     d16:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d18:	4b0c      	ldr	r3, [pc, #48]	; (d4c <Scheduler_MainFunction+0x184>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d20:	3202      	adds	r2, #2
     d22:	2100      	movs	r1, #0
     d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d28:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d2c:	3301      	adds	r3, #1
     d2e:	f88d 300b 	strb.w	r3, [sp, #11]
     d32:	4b05      	ldr	r3, [pc, #20]	; (d48 <Scheduler_MainFunction+0x180>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	791b      	ldrb	r3, [r3, #4]
     d38:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d3c:	429a      	cmp	r2, r3
     d3e:	d3b2      	bcc.n	ca6 <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d40:	2300      	movs	r3, #0
     d42:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d44:	e758      	b.n	bf8 <Scheduler_MainFunction+0x30>
     d46:	bf00      	nop
     d48:	1fff8b38 	.word	0x1fff8b38
     d4c:	1fff8b3c 	.word	0x1fff8b3c

00000d50 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     d50:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     d52:	f000 f8f1 	bl	f38 <HwIoAb_Buttons_MainFunction>
}
     d56:	bf00      	nop
     d58:	bd08      	pop	{r3, pc}
	...

00000d5c <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click toggle only led1 (PTC9), hold click toggle both leds (PTC8-9).
 * @note Button 2, Single click toggle only led2 (PTC10), double click toggle only led3 (PTC11), hold click toggle both leds (PTC10-11).
 * @note Button 3, Single click toggle only led4 (PTC13), double click toggle only led5 (PTC14), hold click toggle both leds (PTC13-14).
 * 
 */
void Task2_callback( void ) {
     d5c:	b500      	push	{lr}
     d5e:	b083      	sub	sp, #12
    //local data.
    uint8 i = 0;
     d60:	2300      	movs	r3, #0
     d62:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     d66:	2300      	movs	r3, #0
     d68:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     d6c:	2300      	movs	r3, #0
     d6e:	f88d 3007 	strb.w	r3, [sp, #7]
     d72:	e074      	b.n	e5e <Task2_callback+0x102>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     d74:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d78:	3301      	adds	r3, #1
     d7a:	b2db      	uxtb	r3, r3
     d7c:	4618      	mov	r0, r3
     d7e:	f000 f8b1 	bl	ee4 <HwIoAb_Buttons_GetEvent>
     d82:	4603      	mov	r3, r0
     d84:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     d88:	f89d 3006 	ldrb.w	r3, [sp, #6]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d05e      	beq.n	e4e <Task2_callback+0xf2>
            switch ( i ) {    
     d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d94:	2b02      	cmp	r3, #2
     d96:	d03e      	beq.n	e16 <Task2_callback+0xba>
     d98:	2b02      	cmp	r3, #2
     d9a:	dc5a      	bgt.n	e52 <Task2_callback+0xf6>
     d9c:	2b00      	cmp	r3, #0
     d9e:	d002      	beq.n	da6 <Task2_callback+0x4a>
     da0:	2b01      	cmp	r3, #1
     da2:	d01c      	beq.n	dde <Task2_callback+0x82>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     da4:	e055      	b.n	e52 <Task2_callback+0xf6>
                    switch ( actual_event ) {
     da6:	f89d 3006 	ldrb.w	r3, [sp, #6]
     daa:	2b03      	cmp	r3, #3
     dac:	d00e      	beq.n	dcc <Task2_callback+0x70>
     dae:	2b03      	cmp	r3, #3
     db0:	dc13      	bgt.n	dda <Task2_callback+0x7e>
     db2:	2b01      	cmp	r3, #1
     db4:	d002      	beq.n	dbc <Task2_callback+0x60>
     db6:	2b02      	cmp	r3, #2
     db8:	d004      	beq.n	dc4 <Task2_callback+0x68>
                        break;
     dba:	e00e      	b.n	dda <Task2_callback+0x7e>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     dbc:	2000      	movs	r0, #0
     dbe:	f000 fa4b 	bl	1258 <HwIoAb_Leds_TurnToggle>
                        break;
     dc2:	e00b      	b.n	ddc <Task2_callback+0x80>
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     dc4:	2001      	movs	r0, #1
     dc6:	f000 fa47 	bl	1258 <HwIoAb_Leds_TurnToggle>
                        break;
     dca:	e007      	b.n	ddc <Task2_callback+0x80>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     dcc:	2000      	movs	r0, #0
     dce:	f000 fa43 	bl	1258 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     dd2:	2001      	movs	r0, #1
     dd4:	f000 fa40 	bl	1258 <HwIoAb_Leds_TurnToggle>
                        break;
     dd8:	e000      	b.n	ddc <Task2_callback+0x80>
                        break;
     dda:	bf00      	nop
                break;
     ddc:	e03a      	b.n	e54 <Task2_callback+0xf8>
                    switch ( actual_event ) {
     dde:	f89d 3006 	ldrb.w	r3, [sp, #6]
     de2:	2b03      	cmp	r3, #3
     de4:	d00e      	beq.n	e04 <Task2_callback+0xa8>
     de6:	2b03      	cmp	r3, #3
     de8:	dc13      	bgt.n	e12 <Task2_callback+0xb6>
     dea:	2b01      	cmp	r3, #1
     dec:	d002      	beq.n	df4 <Task2_callback+0x98>
     dee:	2b02      	cmp	r3, #2
     df0:	d004      	beq.n	dfc <Task2_callback+0xa0>
                        break;
     df2:	e00e      	b.n	e12 <Task2_callback+0xb6>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     df4:	2002      	movs	r0, #2
     df6:	f000 fa2f 	bl	1258 <HwIoAb_Leds_TurnToggle>
                        break;
     dfa:	e00b      	b.n	e14 <Task2_callback+0xb8>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_3_ID );
     dfc:	2003      	movs	r0, #3
     dfe:	f000 fa2b 	bl	1258 <HwIoAb_Leds_TurnToggle>
                        break;
     e02:	e007      	b.n	e14 <Task2_callback+0xb8>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     e04:	2002      	movs	r0, #2
     e06:	f000 fa27 	bl	1258 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_3_ID );
     e0a:	2003      	movs	r0, #3
     e0c:	f000 fa24 	bl	1258 <HwIoAb_Leds_TurnToggle>
                        break;
     e10:	e000      	b.n	e14 <Task2_callback+0xb8>
                        break;
     e12:	bf00      	nop
                break;
     e14:	e01e      	b.n	e54 <Task2_callback+0xf8>
                        switch ( actual_event ) {
     e16:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e1a:	2b03      	cmp	r3, #3
     e1c:	d00e      	beq.n	e3c <Task2_callback+0xe0>
     e1e:	2b03      	cmp	r3, #3
     e20:	dc13      	bgt.n	e4a <Task2_callback+0xee>
     e22:	2b01      	cmp	r3, #1
     e24:	d002      	beq.n	e2c <Task2_callback+0xd0>
     e26:	2b02      	cmp	r3, #2
     e28:	d004      	beq.n	e34 <Task2_callback+0xd8>
                            break;
     e2a:	e00e      	b.n	e4a <Task2_callback+0xee>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_4_ID );
     e2c:	2004      	movs	r0, #4
     e2e:	f000 fa13 	bl	1258 <HwIoAb_Leds_TurnToggle>
                            break;
     e32:	e00b      	b.n	e4c <Task2_callback+0xf0>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_5_ID );
     e34:	2005      	movs	r0, #5
     e36:	f000 fa0f 	bl	1258 <HwIoAb_Leds_TurnToggle>
                            break;
     e3a:	e007      	b.n	e4c <Task2_callback+0xf0>
                               HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_4_ID );
     e3c:	2004      	movs	r0, #4
     e3e:	f000 fa0b 	bl	1258 <HwIoAb_Leds_TurnToggle>
                               HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_5_ID );
     e42:	2005      	movs	r0, #5
     e44:	f000 fa08 	bl	1258 <HwIoAb_Leds_TurnToggle>
                            break;
     e48:	e000      	b.n	e4c <Task2_callback+0xf0>
                            break;
     e4a:	bf00      	nop
                break;
     e4c:	e002      	b.n	e54 <Task2_callback+0xf8>
            }
        }
     e4e:	bf00      	nop
     e50:	e000      	b.n	e54 <Task2_callback+0xf8>
                break;
     e52:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e58:	3301      	adds	r3, #1
     e5a:	f88d 3007 	strb.w	r3, [sp, #7]
     e5e:	4b06      	ldr	r3, [pc, #24]	; (e78 <Task2_callback+0x11c>)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	f89d 2007 	ldrb.w	r2, [sp, #7]
     e68:	429a      	cmp	r2, r3
     e6a:	d383      	bcc.n	d74 <Task2_callback+0x18>
    }
}
     e6c:	bf00      	nop
     e6e:	bf00      	nop
     e70:	b003      	add	sp, #12
     e72:	f85d fb04 	ldr.w	pc, [sp], #4
     e76:	bf00      	nop
     e78:	1fff8b40 	.word	0x1fff8b40

00000e7c <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
     e7c:	bf00      	nop
     e7e:	4770      	bx	lr

00000e80 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     e80:	b084      	sub	sp, #16
     e82:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     e84:	2300      	movs	r3, #0
     e86:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     e8a:	4b15      	ldr	r3, [pc, #84]	; (ee0 <HwIoAb_Buttons_Init+0x60>)
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	2203      	movs	r2, #3
     e90:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     e92:	4b13      	ldr	r3, [pc, #76]	; (ee0 <HwIoAb_Buttons_Init+0x60>)
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	9a01      	ldr	r2, [sp, #4]
     e98:	605a      	str	r2, [r3, #4]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     e9a:	2300      	movs	r3, #0
     e9c:	f88d 300f 	strb.w	r3, [sp, #15]
     ea0:	e012      	b.n	ec8 <HwIoAb_Buttons_Init+0x48>
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ea2:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <HwIoAb_Buttons_Init+0x60>)
     ea4:	681a      	ldr	r2, [r3, #0]
     ea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     eaa:	4413      	add	r3, r2
     eac:	2200      	movs	r2, #0
     eae:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     eb0:	4b0b      	ldr	r3, [pc, #44]	; (ee0 <HwIoAb_Buttons_Init+0x60>)
     eb2:	681a      	ldr	r2, [r3, #0]
     eb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     eb8:	4413      	add	r3, r2
     eba:	2200      	movs	r2, #0
     ebc:	72da      	strb	r2, [r3, #11]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     ebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ec2:	3301      	adds	r3, #1
     ec4:	f88d 300f 	strb.w	r3, [sp, #15]
     ec8:	4b05      	ldr	r3, [pc, #20]	; (ee0 <HwIoAb_Buttons_Init+0x60>)
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ed2:	429a      	cmp	r2, r3
     ed4:	d3e5      	bcc.n	ea2 <HwIoAb_Buttons_Init+0x22>
    }
}
     ed6:	bf00      	nop
     ed8:	bf00      	nop
     eda:	b004      	add	sp, #16
     edc:	4770      	bx	lr
     ede:	bf00      	nop
     ee0:	1fff8b40 	.word	0x1fff8b40

00000ee4 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
     ee4:	b084      	sub	sp, #16
     ee6:	4603      	mov	r3, r0
     ee8:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
     eec:	2300      	movs	r3, #0
     eee:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
     ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d017      	beq.n	f2a <HwIoAb_Buttons_GetEvent+0x46>
     efa:	4b0e      	ldr	r3, [pc, #56]	; (f34 <HwIoAb_Buttons_GetEvent+0x50>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	781b      	ldrb	r3, [r3, #0]
     f00:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f04:	429a      	cmp	r2, r3
     f06:	d810      	bhi.n	f2a <HwIoAb_Buttons_GetEvent+0x46>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
     f08:	4b0a      	ldr	r3, [pc, #40]	; (f34 <HwIoAb_Buttons_GetEvent+0x50>)
     f0a:	681a      	ldr	r2, [r3, #0]
     f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f10:	3b01      	subs	r3, #1
     f12:	4413      	add	r3, r2
     f14:	7adb      	ldrb	r3, [r3, #11]
     f16:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
     f1a:	4b06      	ldr	r3, [pc, #24]	; (f34 <HwIoAb_Buttons_GetEvent+0x50>)
     f1c:	681a      	ldr	r2, [r3, #0]
     f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f22:	3b01      	subs	r3, #1
     f24:	4413      	add	r3, r2
     f26:	2200      	movs	r2, #0
     f28:	72da      	strb	r2, [r3, #11]
    }

    return event;
     f2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f2e:	4618      	mov	r0, r3
     f30:	b004      	add	sp, #16
     f32:	4770      	bx	lr
     f34:	1fff8b40 	.word	0x1fff8b40

00000f38 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
     f38:	b500      	push	{lr}
     f3a:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
     f3c:	2300      	movs	r3, #0
     f3e:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
     f42:	2300      	movs	r3, #0
     f44:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
     f48:	2300      	movs	r3, #0
     f4a:	f88d 3007 	strb.w	r3, [sp, #7]
     f4e:	e029      	b.n	fa4 <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
     f50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f54:	4ab5      	ldr	r2, [pc, #724]	; (122c <HwIoAb_Buttons_MainFunction+0x2f4>)
     f56:	5cd3      	ldrb	r3, [r2, r3]
     f58:	2b00      	cmp	r3, #0
     f5a:	d01e      	beq.n	f9a <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
     f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f60:	4ab3      	ldr	r2, [pc, #716]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f6a:	3232      	adds	r2, #50	; 0x32
     f6c:	49b0      	ldr	r1, [pc, #704]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
     f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f76:	4aae      	ldr	r2, [pc, #696]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f7c:	4bad      	ldr	r3, [pc, #692]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	6859      	ldr	r1, [r3, #4]
     f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f86:	00db      	lsls	r3, r3, #3
     f88:	440b      	add	r3, r1
     f8a:	685b      	ldr	r3, [r3, #4]
     f8c:	429a      	cmp	r2, r3
     f8e:	d104      	bne.n	f9a <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
     f90:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f94:	4aa5      	ldr	r2, [pc, #660]	; (122c <HwIoAb_Buttons_MainFunction+0x2f4>)
     f96:	2100      	movs	r1, #0
     f98:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
     f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f9e:	3301      	adds	r3, #1
     fa0:	f88d 3007 	strb.w	r3, [sp, #7]
     fa4:	4ba3      	ldr	r3, [pc, #652]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	f89d 2007 	ldrb.w	r2, [sp, #7]
     fae:	429a      	cmp	r2, r3
     fb0:	d3ce      	bcc.n	f50 <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
     fb2:	2300      	movs	r3, #0
     fb4:	f88d 3007 	strb.w	r3, [sp, #7]
     fb8:	e12b      	b.n	1212 <HwIoAb_Buttons_MainFunction+0x2da>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
     fba:	4b9e      	ldr	r3, [pc, #632]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	685a      	ldr	r2, [r3, #4]
     fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fc4:	00db      	lsls	r3, r3, #3
     fc6:	4413      	add	r3, r2
     fc8:	789b      	ldrb	r3, [r3, #2]
     fca:	2b01      	cmp	r3, #1
     fcc:	d103      	bne.n	fd6 <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
     fce:	2301      	movs	r3, #1
     fd0:	f88d 3006 	strb.w	r3, [sp, #6]
     fd4:	e002      	b.n	fdc <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
     fd6:	2300      	movs	r3, #0
     fd8:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
     fdc:	4b95      	ldr	r3, [pc, #596]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
     fde:	681a      	ldr	r2, [r3, #0]
     fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fe4:	4413      	add	r3, r2
     fe6:	7a1b      	ldrb	r3, [r3, #8]
     fe8:	2b04      	cmp	r3, #4
     fea:	f200 8102 	bhi.w	11f2 <HwIoAb_Buttons_MainFunction+0x2ba>
     fee:	a201      	add	r2, pc, #4	; (adr r2, ff4 <HwIoAb_Buttons_MainFunction+0xbc>)
     ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ff4:	00001009 	.word	0x00001009
     ff8:	00001053 	.word	0x00001053
     ffc:	0000113b 	.word	0x0000113b
    1000:	000011ad 	.word	0x000011ad
    1004:	000010b9 	.word	0x000010b9
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    1008:	4b8a      	ldr	r3, [pc, #552]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	685a      	ldr	r2, [r3, #4]
    100e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1012:	00db      	lsls	r3, r3, #3
    1014:	4413      	add	r3, r2
    1016:	881b      	ldrh	r3, [r3, #0]
    1018:	4618      	mov	r0, r3
    101a:	f005 fba5 	bl	6768 <Dio_ReadChannel>
    101e:	4603      	mov	r3, r0
    1020:	461a      	mov	r2, r3
    1022:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1026:	429a      	cmp	r2, r3
    1028:	f040 80e5 	bne.w	11f6 <HwIoAb_Buttons_MainFunction+0x2be>
                    count_flags[i] = TRUE;  //Starting count.
    102c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1030:	4a7e      	ldr	r2, [pc, #504]	; (122c <HwIoAb_Buttons_MainFunction+0x2f4>)
    1032:	2101      	movs	r1, #1
    1034:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1036:	f89d 3007 	ldrb.w	r3, [sp, #7]
    103a:	4a7d      	ldr	r2, [pc, #500]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
    103c:	2100      	movs	r1, #0
    103e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    1042:	4b7c      	ldr	r3, [pc, #496]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1044:	681a      	ldr	r2, [r3, #0]
    1046:	f89d 3007 	ldrb.w	r3, [sp, #7]
    104a:	4413      	add	r3, r2
    104c:	2201      	movs	r2, #1
    104e:	721a      	strb	r2, [r3, #8]
                }
            break;
    1050:	e0d1      	b.n	11f6 <HwIoAb_Buttons_MainFunction+0x2be>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1052:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1056:	4a76      	ldr	r2, [pc, #472]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    105c:	4b75      	ldr	r3, [pc, #468]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	6859      	ldr	r1, [r3, #4]
    1062:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1066:	00db      	lsls	r3, r3, #3
    1068:	440b      	add	r3, r1
    106a:	685b      	ldr	r3, [r3, #4]
    106c:	429a      	cmp	r2, r3
    106e:	d106      	bne.n	107e <HwIoAb_Buttons_MainFunction+0x146>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1070:	4b70      	ldr	r3, [pc, #448]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1072:	681a      	ldr	r2, [r3, #0]
    1074:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1078:	4413      	add	r3, r2
    107a:	2203      	movs	r2, #3
    107c:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    107e:	4b6d      	ldr	r3, [pc, #436]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	685a      	ldr	r2, [r3, #4]
    1084:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1088:	00db      	lsls	r3, r3, #3
    108a:	4413      	add	r3, r2
    108c:	881b      	ldrh	r3, [r3, #0]
    108e:	4618      	mov	r0, r3
    1090:	f005 fb6a 	bl	6768 <Dio_ReadChannel>
    1094:	4603      	mov	r3, r0
    1096:	461a      	mov	r2, r3
    1098:	f89d 3006 	ldrb.w	r3, [sp, #6]
    109c:	f083 0301 	eor.w	r3, r3, #1
    10a0:	b2db      	uxtb	r3, r3
    10a2:	429a      	cmp	r2, r3
    10a4:	f040 80a9 	bne.w	11fa <HwIoAb_Buttons_MainFunction+0x2c2>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    10a8:	4b62      	ldr	r3, [pc, #392]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10aa:	681a      	ldr	r2, [r3, #0]
    10ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10b0:	4413      	add	r3, r2
    10b2:	2204      	movs	r2, #4
    10b4:	721a      	strb	r2, [r3, #8]
                }
            break;
    10b6:	e0a0      	b.n	11fa <HwIoAb_Buttons_MainFunction+0x2c2>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    10b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10bc:	4a5c      	ldr	r2, [pc, #368]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
    10be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10c2:	4b5c      	ldr	r3, [pc, #368]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10c4:	681b      	ldr	r3, [r3, #0]
    10c6:	6859      	ldr	r1, [r3, #4]
    10c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10cc:	00db      	lsls	r3, r3, #3
    10ce:	440b      	add	r3, r1
    10d0:	685b      	ldr	r3, [r3, #4]
    10d2:	429a      	cmp	r2, r3
    10d4:	d10d      	bne.n	10f2 <HwIoAb_Buttons_MainFunction+0x1ba>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    10d6:	4b57      	ldr	r3, [pc, #348]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10d8:	681a      	ldr	r2, [r3, #0]
    10da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10de:	4413      	add	r3, r2
    10e0:	2201      	movs	r2, #1
    10e2:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    10e4:	4b53      	ldr	r3, [pc, #332]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10e6:	681a      	ldr	r2, [r3, #0]
    10e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10ec:	4413      	add	r3, r2
    10ee:	2200      	movs	r2, #0
    10f0:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    10f2:	4b50      	ldr	r3, [pc, #320]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10f4:	681b      	ldr	r3, [r3, #0]
    10f6:	685a      	ldr	r2, [r3, #4]
    10f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10fc:	00db      	lsls	r3, r3, #3
    10fe:	4413      	add	r3, r2
    1100:	881b      	ldrh	r3, [r3, #0]
    1102:	4618      	mov	r0, r3
    1104:	f005 fb30 	bl	6768 <Dio_ReadChannel>
    1108:	4603      	mov	r3, r0
    110a:	461a      	mov	r2, r3
    110c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1110:	429a      	cmp	r2, r3
    1112:	d174      	bne.n	11fe <HwIoAb_Buttons_MainFunction+0x2c6>
                    count_flags[i] = TRUE;  //Starting count.
    1114:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1118:	4a44      	ldr	r2, [pc, #272]	; (122c <HwIoAb_Buttons_MainFunction+0x2f4>)
    111a:	2101      	movs	r1, #1
    111c:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    111e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1122:	4a43      	ldr	r2, [pc, #268]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1124:	2100      	movs	r1, #0
    1126:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    112a:	4b42      	ldr	r3, [pc, #264]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    112c:	681a      	ldr	r2, [r3, #0]
    112e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1132:	4413      	add	r3, r2
    1134:	2202      	movs	r2, #2
    1136:	721a      	strb	r2, [r3, #8]
                }
            break;
    1138:	e061      	b.n	11fe <HwIoAb_Buttons_MainFunction+0x2c6>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    113e:	4a3c      	ldr	r2, [pc, #240]	; (1230 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1144:	4b3b      	ldr	r3, [pc, #236]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	6859      	ldr	r1, [r3, #4]
    114a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    114e:	00db      	lsls	r3, r3, #3
    1150:	440b      	add	r3, r1
    1152:	685b      	ldr	r3, [r3, #4]
    1154:	429a      	cmp	r2, r3
    1156:	d106      	bne.n	1166 <HwIoAb_Buttons_MainFunction+0x22e>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1158:	4b36      	ldr	r3, [pc, #216]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    115a:	681a      	ldr	r2, [r3, #0]
    115c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1160:	4413      	add	r3, r2
    1162:	2203      	movs	r2, #3
    1164:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    1166:	4b33      	ldr	r3, [pc, #204]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	685a      	ldr	r2, [r3, #4]
    116c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1170:	00db      	lsls	r3, r3, #3
    1172:	4413      	add	r3, r2
    1174:	881b      	ldrh	r3, [r3, #0]
    1176:	4618      	mov	r0, r3
    1178:	f005 faf6 	bl	6768 <Dio_ReadChannel>
    117c:	4603      	mov	r3, r0
    117e:	461a      	mov	r2, r3
    1180:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1184:	f083 0301 	eor.w	r3, r3, #1
    1188:	b2db      	uxtb	r3, r3
    118a:	429a      	cmp	r2, r3
    118c:	d139      	bne.n	1202 <HwIoAb_Buttons_MainFunction+0x2ca>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    118e:	4b29      	ldr	r3, [pc, #164]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1190:	681a      	ldr	r2, [r3, #0]
    1192:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1196:	4413      	add	r3, r2
    1198:	2202      	movs	r2, #2
    119a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    119c:	4b25      	ldr	r3, [pc, #148]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    119e:	681a      	ldr	r2, [r3, #0]
    11a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11a4:	4413      	add	r3, r2
    11a6:	2200      	movs	r2, #0
    11a8:	721a      	strb	r2, [r3, #8]
                }
            break;
    11aa:	e02a      	b.n	1202 <HwIoAb_Buttons_MainFunction+0x2ca>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    11ac:	4b21      	ldr	r3, [pc, #132]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	685a      	ldr	r2, [r3, #4]
    11b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11b6:	00db      	lsls	r3, r3, #3
    11b8:	4413      	add	r3, r2
    11ba:	881b      	ldrh	r3, [r3, #0]
    11bc:	4618      	mov	r0, r3
    11be:	f005 fad3 	bl	6768 <Dio_ReadChannel>
    11c2:	4603      	mov	r3, r0
    11c4:	461a      	mov	r2, r3
    11c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11ca:	f083 0301 	eor.w	r3, r3, #1
    11ce:	b2db      	uxtb	r3, r3
    11d0:	429a      	cmp	r2, r3
    11d2:	d118      	bne.n	1206 <HwIoAb_Buttons_MainFunction+0x2ce>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    11d4:	4b17      	ldr	r3, [pc, #92]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11d6:	681a      	ldr	r2, [r3, #0]
    11d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11dc:	4413      	add	r3, r2
    11de:	2203      	movs	r2, #3
    11e0:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    11e2:	4b14      	ldr	r3, [pc, #80]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11e4:	681a      	ldr	r2, [r3, #0]
    11e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11ea:	4413      	add	r3, r2
    11ec:	2200      	movs	r2, #0
    11ee:	721a      	strb	r2, [r3, #8]
                }
            break;
    11f0:	e009      	b.n	1206 <HwIoAb_Buttons_MainFunction+0x2ce>
        
            default :
            break;
    11f2:	bf00      	nop
    11f4:	e008      	b.n	1208 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11f6:	bf00      	nop
    11f8:	e006      	b.n	1208 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11fa:	bf00      	nop
    11fc:	e004      	b.n	1208 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    11fe:	bf00      	nop
    1200:	e002      	b.n	1208 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    1202:	bf00      	nop
    1204:	e000      	b.n	1208 <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    1206:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    1208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    120c:	3301      	adds	r3, #1
    120e:	f88d 3007 	strb.w	r3, [sp, #7]
    1212:	4b08      	ldr	r3, [pc, #32]	; (1234 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1214:	681b      	ldr	r3, [r3, #0]
    1216:	781b      	ldrb	r3, [r3, #0]
    1218:	f89d 2007 	ldrb.w	r2, [sp, #7]
    121c:	429a      	cmp	r2, r3
    121e:	f4ff aecc 	bcc.w	fba <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    1222:	bf00      	nop
    1224:	bf00      	nop
    1226:	b003      	add	sp, #12
    1228:	f85d fb04 	ldr.w	pc, [sp], #4
    122c:	1fff9268 	.word	0x1fff9268
    1230:	1fff926c 	.word	0x1fff926c
    1234:	1fff8b40 	.word	0x1fff8b40

00001238 <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    1238:	b082      	sub	sp, #8
    123a:	9001      	str	r0, [sp, #4]
    //Initializing members.
    LedsControl_Ptr->Leds = HWIOAB_LEDS;
    123c:	4b05      	ldr	r3, [pc, #20]	; (1254 <HwIoAb_Leds_Init+0x1c>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	2206      	movs	r2, #6
    1242:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <HwIoAb_Leds_Init+0x1c>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	9a01      	ldr	r2, [sp, #4]
    124a:	605a      	str	r2, [r3, #4]
}
    124c:	bf00      	nop
    124e:	b002      	add	sp, #8
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	1fff8b44 	.word	0x1fff8b44

00001258 <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    1258:	b500      	push	{lr}
    125a:	b083      	sub	sp, #12
    125c:	4603      	mov	r3, r0
    125e:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    1262:	4b0b      	ldr	r3, [pc, #44]	; (1290 <HwIoAb_Leds_TurnToggle+0x38>)
    1264:	681b      	ldr	r3, [r3, #0]
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	f89d 2007 	ldrb.w	r2, [sp, #7]
    126c:	429a      	cmp	r2, r3
    126e:	d20a      	bcs.n	1286 <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1270:	4b07      	ldr	r3, [pc, #28]	; (1290 <HwIoAb_Leds_TurnToggle+0x38>)
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	685a      	ldr	r2, [r3, #4]
    1276:	f89d 3007 	ldrb.w	r3, [sp, #7]
    127a:	009b      	lsls	r3, r3, #2
    127c:	4413      	add	r3, r2
    127e:	881b      	ldrh	r3, [r3, #0]
    1280:	4618      	mov	r0, r3
    1282:	f005 fa9c 	bl	67be <Dio_FlipChannel>
    }
}
    1286:	bf00      	nop
    1288:	b003      	add	sp, #12
    128a:	f85d fb04 	ldr.w	pc, [sp], #4
    128e:	bf00      	nop
    1290:	1fff8b44 	.word	0x1fff8b44

00001294 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    1294:	b500      	push	{lr}
    1296:	b085      	sub	sp, #20
    1298:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    129a:	ab03      	add	r3, sp, #12
    129c:	4619      	mov	r1, r3
    129e:	2000      	movs	r0, #0
    12a0:	f006 fe20 	bl	7ee4 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    12a4:	ab02      	add	r3, sp, #8
    12a6:	4619      	mov	r1, r3
    12a8:	2001      	movs	r0, #1
    12aa:	f006 fe1b 	bl	7ee4 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    12ae:	4b0b      	ldr	r3, [pc, #44]	; (12dc <HwIoAb_Pots_Init+0x48>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	3302      	adds	r3, #2
    12b4:	4619      	mov	r1, r3
    12b6:	2000      	movs	r0, #0
    12b8:	f006 fbb6 	bl	7a28 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    12bc:	4b07      	ldr	r3, [pc, #28]	; (12dc <HwIoAb_Pots_Init+0x48>)
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	3306      	adds	r3, #6
    12c2:	4619      	mov	r1, r3
    12c4:	2001      	movs	r0, #1
    12c6:	f006 fbaf 	bl	7a28 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    12ca:	4b04      	ldr	r3, [pc, #16]	; (12dc <HwIoAb_Pots_Init+0x48>)
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	2202      	movs	r2, #2
    12d0:	701a      	strb	r2, [r3, #0]
}
    12d2:	bf00      	nop
    12d4:	b005      	add	sp, #20
    12d6:	f85d fb04 	ldr.w	pc, [sp], #4
    12da:	bf00      	nop
    12dc:	1fff8b48 	.word	0x1fff8b48

000012e0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    12e0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    12e2:	2300      	movs	r3, #0
    12e4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    12e6:	2300      	movs	r3, #0
    12e8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    12ea:	2300      	movs	r3, #0
    12ec:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    12ee:	2300      	movs	r3, #0
    12f0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    12f2:	4b44      	ldr	r3, [pc, #272]	; (1404 <init_data_bss+0x124>)
    12f4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    12f6:	4b44      	ldr	r3, [pc, #272]	; (1408 <init_data_bss+0x128>)
    12f8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    12fa:	9b05      	ldr	r3, [sp, #20]
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1300:	9b05      	ldr	r3, [sp, #20]
    1302:	3304      	adds	r3, #4
    1304:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    1306:	9b05      	ldr	r3, [sp, #20]
    1308:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    130a:	2300      	movs	r3, #0
    130c:	9309      	str	r3, [sp, #36]	; 0x24
    130e:	e03d      	b.n	138c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1310:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1312:	4613      	mov	r3, r2
    1314:	005b      	lsls	r3, r3, #1
    1316:	4413      	add	r3, r2
    1318:	009b      	lsls	r3, r3, #2
    131a:	461a      	mov	r2, r3
    131c:	9b03      	ldr	r3, [sp, #12]
    131e:	4413      	add	r3, r2
    1320:	685b      	ldr	r3, [r3, #4]
    1322:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1324:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1326:	4613      	mov	r3, r2
    1328:	005b      	lsls	r3, r3, #1
    132a:	4413      	add	r3, r2
    132c:	009b      	lsls	r3, r3, #2
    132e:	461a      	mov	r2, r3
    1330:	9b03      	ldr	r3, [sp, #12]
    1332:	4413      	add	r3, r2
    1334:	681b      	ldr	r3, [r3, #0]
    1336:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1338:	9a09      	ldr	r2, [sp, #36]	; 0x24
    133a:	4613      	mov	r3, r2
    133c:	005b      	lsls	r3, r3, #1
    133e:	4413      	add	r3, r2
    1340:	009b      	lsls	r3, r3, #2
    1342:	461a      	mov	r2, r3
    1344:	9b03      	ldr	r3, [sp, #12]
    1346:	4413      	add	r3, r2
    1348:	689b      	ldr	r3, [r3, #8]
    134a:	4619      	mov	r1, r3
    134c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    134e:	4613      	mov	r3, r2
    1350:	005b      	lsls	r3, r3, #1
    1352:	4413      	add	r3, r2
    1354:	009b      	lsls	r3, r3, #2
    1356:	461a      	mov	r2, r3
    1358:	9b03      	ldr	r3, [sp, #12]
    135a:	4413      	add	r3, r2
    135c:	685b      	ldr	r3, [r3, #4]
    135e:	1acb      	subs	r3, r1, r3
    1360:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1362:	2300      	movs	r3, #0
    1364:	9308      	str	r3, [sp, #32]
    1366:	e00a      	b.n	137e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1368:	9a00      	ldr	r2, [sp, #0]
    136a:	9b08      	ldr	r3, [sp, #32]
    136c:	441a      	add	r2, r3
    136e:	9901      	ldr	r1, [sp, #4]
    1370:	9b08      	ldr	r3, [sp, #32]
    1372:	440b      	add	r3, r1
    1374:	7812      	ldrb	r2, [r2, #0]
    1376:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1378:	9b08      	ldr	r3, [sp, #32]
    137a:	3301      	adds	r3, #1
    137c:	9308      	str	r3, [sp, #32]
    137e:	9a08      	ldr	r2, [sp, #32]
    1380:	9b06      	ldr	r3, [sp, #24]
    1382:	429a      	cmp	r2, r3
    1384:	d3f0      	bcc.n	1368 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1386:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1388:	3301      	adds	r3, #1
    138a:	9309      	str	r3, [sp, #36]	; 0x24
    138c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    138e:	9b07      	ldr	r3, [sp, #28]
    1390:	429a      	cmp	r2, r3
    1392:	d3bd      	bcc.n	1310 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1394:	9b04      	ldr	r3, [sp, #16]
    1396:	681b      	ldr	r3, [r3, #0]
    1398:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    139a:	9b04      	ldr	r3, [sp, #16]
    139c:	3304      	adds	r3, #4
    139e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    13a0:	9b04      	ldr	r3, [sp, #16]
    13a2:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    13a4:	2300      	movs	r3, #0
    13a6:	9309      	str	r3, [sp, #36]	; 0x24
    13a8:	e024      	b.n	13f4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    13aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13ac:	00db      	lsls	r3, r3, #3
    13ae:	9a02      	ldr	r2, [sp, #8]
    13b0:	4413      	add	r3, r2
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    13b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13b8:	00db      	lsls	r3, r3, #3
    13ba:	9a02      	ldr	r2, [sp, #8]
    13bc:	4413      	add	r3, r2
    13be:	685b      	ldr	r3, [r3, #4]
    13c0:	4619      	mov	r1, r3
    13c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13c4:	00db      	lsls	r3, r3, #3
    13c6:	9a02      	ldr	r2, [sp, #8]
    13c8:	4413      	add	r3, r2
    13ca:	681b      	ldr	r3, [r3, #0]
    13cc:	1acb      	subs	r3, r1, r3
    13ce:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    13d0:	2300      	movs	r3, #0
    13d2:	9308      	str	r3, [sp, #32]
    13d4:	e007      	b.n	13e6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    13d6:	9a01      	ldr	r2, [sp, #4]
    13d8:	9b08      	ldr	r3, [sp, #32]
    13da:	4413      	add	r3, r2
    13dc:	2200      	movs	r2, #0
    13de:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    13e0:	9b08      	ldr	r3, [sp, #32]
    13e2:	3301      	adds	r3, #1
    13e4:	9308      	str	r3, [sp, #32]
    13e6:	9a08      	ldr	r2, [sp, #32]
    13e8:	9b06      	ldr	r3, [sp, #24]
    13ea:	429a      	cmp	r2, r3
    13ec:	d3f3      	bcc.n	13d6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    13ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13f0:	3301      	adds	r3, #1
    13f2:	9309      	str	r3, [sp, #36]	; 0x24
    13f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13f6:	9b07      	ldr	r3, [sp, #28]
    13f8:	429a      	cmp	r2, r3
    13fa:	d3d6      	bcc.n	13aa <init_data_bss+0xca>
        }
    }
}
    13fc:	bf00      	nop
    13fe:	bf00      	nop
    1400:	b00a      	add	sp, #40	; 0x28
    1402:	4770      	bx	lr
    1404:	00011630 	.word	0x00011630
    1408:	0001164c 	.word	0x0001164c

0000140c <sys_m4_cache_init>:
{
    140c:	b084      	sub	sp, #16
    140e:	4603      	mov	r3, r0
    1410:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1414:	2300      	movs	r3, #0
    1416:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    141a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    141e:	2b00      	cmp	r3, #0
    1420:	d118      	bne.n	1454 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1422:	4b10      	ldr	r3, [pc, #64]	; (1464 <sys_m4_cache_init+0x58>)
    1424:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1428:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    142a:	4b0e      	ldr	r3, [pc, #56]	; (1464 <sys_m4_cache_init+0x58>)
    142c:	681b      	ldr	r3, [r3, #0]
    142e:	4a0d      	ldr	r2, [pc, #52]	; (1464 <sys_m4_cache_init+0x58>)
    1430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1434:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1436:	bf00      	nop
    1438:	4b0a      	ldr	r3, [pc, #40]	; (1464 <sys_m4_cache_init+0x58>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1444:	d0f8      	beq.n	1438 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1446:	4b07      	ldr	r3, [pc, #28]	; (1464 <sys_m4_cache_init+0x58>)
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	4a06      	ldr	r2, [pc, #24]	; (1464 <sys_m4_cache_init+0x58>)
    144c:	f043 0301 	orr.w	r3, r3, #1
    1450:	6013      	str	r3, [r2, #0]
    1452:	e002      	b.n	145a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1454:	2301      	movs	r3, #1
    1456:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    145a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    145e:	4618      	mov	r0, r3
    1460:	b004      	add	sp, #16
    1462:	4770      	bx	lr
    1464:	e0082000 	.word	0xe0082000

00001468 <startup_go_to_user_mode>:
}
    1468:	bf00      	nop
    146a:	4770      	bx	lr

0000146c <Sys_GetCoreID>:
    return 0U;
    146c:	2300      	movs	r3, #0
}
    146e:	4618      	mov	r0, r3
    1470:	4770      	bx	lr

00001472 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1472:	e7fe      	b.n	1472 <HardFault_Handler>

00001474 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1474:	e7fe      	b.n	1474 <MemManage_Handler>

00001476 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1476:	e7fe      	b.n	1476 <BusFault_Handler>

00001478 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1478:	e7fe      	b.n	1478 <UsageFault_Handler>

0000147a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    147a:	e7fe      	b.n	147a <SVC_Handler>

0000147c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    147c:	e7fe      	b.n	147c <DebugMon_Handler>

0000147e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    147e:	e7fe      	b.n	147e <PendSV_Handler>

00001480 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1480:	e7fe      	b.n	1480 <SysTick_Handler>

00001482 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1482:	e7fe      	b.n	1482 <undefined_handler>

00001484 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->Disabled
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    1484:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    1486:	4805      	ldr	r0, [pc, #20]	; (149c <MCU_clocks+0x18>)
    1488:	f004 f858 	bl	553c <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    148c:	2000      	movs	r0, #0
    148e:	f004 f8cd 	bl	562c <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    1492:	2000      	movs	r0, #0
    1494:	f004 f8a6 	bl	55e4 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    1498:	bf00      	nop
    149a:	bd08      	pop	{r3, pc}
    149c:	00011208 	.word	0x00011208

000014a0 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    14a0:	b508      	push	{r3, lr}
    MCU_clocks();
    14a2:	f7ff ffef 	bl	1484 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    14a6:	2000      	movs	r0, #0
    14a8:	f000 fab3 	bl	1a12 <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    14ac:	2000      	movs	r0, #0
    14ae:	f000 f9ad 	bl	180c <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    14b2:	4809      	ldr	r0, [pc, #36]	; (14d8 <EcuM_Init+0x38>)
    14b4:	f004 fc44 	bl	5d40 <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    14b8:	4808      	ldr	r0, [pc, #32]	; (14dc <EcuM_Init+0x3c>)
    14ba:	f006 fa67 	bl	798c <Adc_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    14be:	2208      	movs	r2, #8
    14c0:	2101      	movs	r1, #1
    14c2:	4807      	ldr	r0, [pc, #28]	; (14e0 <EcuM_Init+0x40>)
    14c4:	f004 fe10 	bl	60e8 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    14c8:	2208      	movs	r2, #8
    14ca:	210d      	movs	r1, #13
    14cc:	4804      	ldr	r0, [pc, #16]	; (14e0 <EcuM_Init+0x40>)
    14ce:	f004 fe0b 	bl	60e8 <Port_Ci_Port_Ip_SetMuxModeSel>
}
    14d2:	bf00      	nop
    14d4:	bd08      	pop	{r3, pc}
    14d6:	bf00      	nop
    14d8:	000115e4 	.word	0x000115e4
    14dc:	00010dd4 	.word	0x00010dd4
    14e0:	4004a000 	.word	0x4004a000

000014e4 <HwIoAb_Init>:

/**
 * @brief This function initialices the hardware io abstractions.
 * 
 */
void HwIoAb_Init( void ) {
    14e4:	b508      	push	{r3, lr}
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    14e6:	4805      	ldr	r0, [pc, #20]	; (14fc <HwIoAb_Init+0x18>)
    14e8:	f7ff fcca 	bl	e80 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    14ec:	4804      	ldr	r0, [pc, #16]	; (1500 <HwIoAb_Init+0x1c>)
    14ee:	f7ff fea3 	bl	1238 <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    14f2:	2000      	movs	r0, #0
    14f4:	f7ff fece 	bl	1294 <HwIoAb_Pots_Init>
    14f8:	bf00      	nop
    14fa:	bd08      	pop	{r3, pc}
    14fc:	00010c38 	.word	0x00010c38
    1500:	00010c50 	.word	0x00010c50

00001504 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1504:	b086      	sub	sp, #24
    1506:	9003      	str	r0, [sp, #12]
    1508:	9102      	str	r1, [sp, #8]
    150a:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    150c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1510:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1514:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1516:	9b01      	ldr	r3, [sp, #4]
    1518:	2b00      	cmp	r3, #0
    151a:	d007      	beq.n	152c <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    151c:	9b03      	ldr	r3, [sp, #12]
    151e:	3310      	adds	r3, #16
    1520:	009b      	lsls	r3, r3, #2
    1522:	9a05      	ldr	r2, [sp, #20]
    1524:	4413      	add	r3, r2
    1526:	681a      	ldr	r2, [r3, #0]
    1528:	9b01      	ldr	r3, [sp, #4]
    152a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    152c:	9b03      	ldr	r3, [sp, #12]
    152e:	3310      	adds	r3, #16
    1530:	009b      	lsls	r3, r3, #2
    1532:	9a05      	ldr	r2, [sp, #20]
    1534:	4413      	add	r3, r2
    1536:	9a02      	ldr	r2, [sp, #8]
    1538:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    153a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    153e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1542:	bf00      	nop
    1544:	b006      	add	sp, #24
    1546:	4770      	bx	lr

00001548 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1548:	b082      	sub	sp, #8
    154a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    154c:	9b01      	ldr	r3, [sp, #4]
    154e:	f003 021f 	and.w	r2, r3, #31
    1552:	4905      	ldr	r1, [pc, #20]	; (1568 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1554:	9b01      	ldr	r3, [sp, #4]
    1556:	095b      	lsrs	r3, r3, #5
    1558:	2001      	movs	r0, #1
    155a:	fa00 f202 	lsl.w	r2, r0, r2
    155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1562:	bf00      	nop
    1564:	b002      	add	sp, #8
    1566:	4770      	bx	lr
    1568:	e000e100 	.word	0xe000e100

0000156c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    156c:	b082      	sub	sp, #8
    156e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1570:	9b01      	ldr	r3, [sp, #4]
    1572:	f003 021f 	and.w	r2, r3, #31
    1576:	4906      	ldr	r1, [pc, #24]	; (1590 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1578:	9b01      	ldr	r3, [sp, #4]
    157a:	095b      	lsrs	r3, r3, #5
    157c:	2001      	movs	r0, #1
    157e:	fa00 f202 	lsl.w	r2, r0, r2
    1582:	3320      	adds	r3, #32
    1584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1588:	bf00      	nop
    158a:	b002      	add	sp, #8
    158c:	4770      	bx	lr
    158e:	bf00      	nop
    1590:	e000e100 	.word	0xe000e100

00001594 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1594:	b084      	sub	sp, #16
    1596:	9001      	str	r0, [sp, #4]
    1598:	460b      	mov	r3, r1
    159a:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    159e:	2304      	movs	r3, #4
    15a0:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    15a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    15a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    15ac:	fa02 f103 	lsl.w	r1, r2, r3
    15b0:	4a04      	ldr	r2, [pc, #16]	; (15c4 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    15b2:	9b01      	ldr	r3, [sp, #4]
    15b4:	b2c9      	uxtb	r1, r1
    15b6:	4413      	add	r3, r2
    15b8:	460a      	mov	r2, r1
    15ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    15be:	bf00      	nop
    15c0:	b004      	add	sp, #16
    15c2:	4770      	bx	lr
    15c4:	e000e100 	.word	0xe000e100

000015c8 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    15c8:	b084      	sub	sp, #16
    15ca:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    15cc:	2304      	movs	r3, #4
    15ce:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    15d2:	4a09      	ldr	r2, [pc, #36]	; (15f8 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    15d4:	9b01      	ldr	r3, [sp, #4]
    15d6:	4413      	add	r3, r2
    15d8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    15dc:	b2db      	uxtb	r3, r3
    15de:	461a      	mov	r2, r3
    15e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    15e4:	fa42 f303 	asr.w	r3, r2, r3
    15e8:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    15ec:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    15f0:	4618      	mov	r0, r3
    15f2:	b004      	add	sp, #16
    15f4:	4770      	bx	lr
    15f6:	bf00      	nop
    15f8:	e000e100 	.word	0xe000e100

000015fc <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    15fc:	b082      	sub	sp, #8
    15fe:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	f003 021f 	and.w	r2, r3, #31
    1606:	4906      	ldr	r1, [pc, #24]	; (1620 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	095b      	lsrs	r3, r3, #5
    160c:	2001      	movs	r0, #1
    160e:	fa00 f202 	lsl.w	r2, r0, r2
    1612:	3360      	adds	r3, #96	; 0x60
    1614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1618:	bf00      	nop
    161a:	b002      	add	sp, #8
    161c:	4770      	bx	lr
    161e:	bf00      	nop
    1620:	e000e100 	.word	0xe000e100

00001624 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1624:	b500      	push	{lr}
    1626:	b085      	sub	sp, #20
    1628:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    162a:	2300      	movs	r3, #0
    162c:	9303      	str	r3, [sp, #12]
    162e:	e05d      	b.n	16ec <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1630:	9b01      	ldr	r3, [sp, #4]
    1632:	6859      	ldr	r1, [r3, #4]
    1634:	9a03      	ldr	r2, [sp, #12]
    1636:	4613      	mov	r3, r2
    1638:	005b      	lsls	r3, r3, #1
    163a:	4413      	add	r3, r2
    163c:	009b      	lsls	r3, r3, #2
    163e:	440b      	add	r3, r1
    1640:	681b      	ldr	r3, [r3, #0]
    1642:	4618      	mov	r0, r3
    1644:	f000 f899 	bl	177a <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1648:	9b01      	ldr	r3, [sp, #4]
    164a:	6859      	ldr	r1, [r3, #4]
    164c:	9a03      	ldr	r2, [sp, #12]
    164e:	4613      	mov	r3, r2
    1650:	005b      	lsls	r3, r3, #1
    1652:	4413      	add	r3, r2
    1654:	009b      	lsls	r3, r3, #2
    1656:	440b      	add	r3, r1
    1658:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    165a:	9b01      	ldr	r3, [sp, #4]
    165c:	6859      	ldr	r1, [r3, #4]
    165e:	9a03      	ldr	r2, [sp, #12]
    1660:	4613      	mov	r3, r2
    1662:	005b      	lsls	r3, r3, #1
    1664:	4413      	add	r3, r2
    1666:	009b      	lsls	r3, r3, #2
    1668:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    166a:	795b      	ldrb	r3, [r3, #5]
    166c:	4619      	mov	r1, r3
    166e:	f000 f869 	bl	1744 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1672:	9b01      	ldr	r3, [sp, #4]
    1674:	6859      	ldr	r1, [r3, #4]
    1676:	9a03      	ldr	r2, [sp, #12]
    1678:	4613      	mov	r3, r2
    167a:	005b      	lsls	r3, r3, #1
    167c:	4413      	add	r3, r2
    167e:	009b      	lsls	r3, r3, #2
    1680:	440b      	add	r3, r1
    1682:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1684:	9b01      	ldr	r3, [sp, #4]
    1686:	6859      	ldr	r1, [r3, #4]
    1688:	9a03      	ldr	r2, [sp, #12]
    168a:	4613      	mov	r3, r2
    168c:	005b      	lsls	r3, r3, #1
    168e:	4413      	add	r3, r2
    1690:	009b      	lsls	r3, r3, #2
    1692:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1694:	689b      	ldr	r3, [r3, #8]
    1696:	2200      	movs	r2, #0
    1698:	4619      	mov	r1, r3
    169a:	f000 f831 	bl	1700 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    169e:	9b01      	ldr	r3, [sp, #4]
    16a0:	6859      	ldr	r1, [r3, #4]
    16a2:	9a03      	ldr	r2, [sp, #12]
    16a4:	4613      	mov	r3, r2
    16a6:	005b      	lsls	r3, r3, #1
    16a8:	4413      	add	r3, r2
    16aa:	009b      	lsls	r3, r3, #2
    16ac:	440b      	add	r3, r1
    16ae:	791b      	ldrb	r3, [r3, #4]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d00c      	beq.n	16ce <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	6859      	ldr	r1, [r3, #4]
    16b8:	9a03      	ldr	r2, [sp, #12]
    16ba:	4613      	mov	r3, r2
    16bc:	005b      	lsls	r3, r3, #1
    16be:	4413      	add	r3, r2
    16c0:	009b      	lsls	r3, r3, #2
    16c2:	440b      	add	r3, r1
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	4618      	mov	r0, r3
    16c8:	f000 f828 	bl	171c <IntCtrl_Ip_EnableIrq>
    16cc:	e00b      	b.n	16e6 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    16ce:	9b01      	ldr	r3, [sp, #4]
    16d0:	6859      	ldr	r1, [r3, #4]
    16d2:	9a03      	ldr	r2, [sp, #12]
    16d4:	4613      	mov	r3, r2
    16d6:	005b      	lsls	r3, r3, #1
    16d8:	4413      	add	r3, r2
    16da:	009b      	lsls	r3, r3, #2
    16dc:	440b      	add	r3, r1
    16de:	681b      	ldr	r3, [r3, #0]
    16e0:	4618      	mov	r0, r3
    16e2:	f000 f825 	bl	1730 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    16e6:	9b03      	ldr	r3, [sp, #12]
    16e8:	3301      	adds	r3, #1
    16ea:	9303      	str	r3, [sp, #12]
    16ec:	9b01      	ldr	r3, [sp, #4]
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	9a03      	ldr	r2, [sp, #12]
    16f2:	429a      	cmp	r2, r3
    16f4:	d39c      	bcc.n	1630 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    16f6:	2300      	movs	r3, #0
}
    16f8:	4618      	mov	r0, r3
    16fa:	b005      	add	sp, #20
    16fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001700 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1700:	b500      	push	{lr}
    1702:	b085      	sub	sp, #20
    1704:	9003      	str	r0, [sp, #12]
    1706:	9102      	str	r1, [sp, #8]
    1708:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    170a:	9a01      	ldr	r2, [sp, #4]
    170c:	9902      	ldr	r1, [sp, #8]
    170e:	9803      	ldr	r0, [sp, #12]
    1710:	f7ff fef8 	bl	1504 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1714:	bf00      	nop
    1716:	b005      	add	sp, #20
    1718:	f85d fb04 	ldr.w	pc, [sp], #4

0000171c <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    171c:	b500      	push	{lr}
    171e:	b083      	sub	sp, #12
    1720:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1722:	9801      	ldr	r0, [sp, #4]
    1724:	f7ff ff10 	bl	1548 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1728:	bf00      	nop
    172a:	b003      	add	sp, #12
    172c:	f85d fb04 	ldr.w	pc, [sp], #4

00001730 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1730:	b500      	push	{lr}
    1732:	b083      	sub	sp, #12
    1734:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1736:	9801      	ldr	r0, [sp, #4]
    1738:	f7ff ff18 	bl	156c <IntCtrl_Ip_DisableIrqPrivileged>
}
    173c:	bf00      	nop
    173e:	b003      	add	sp, #12
    1740:	f85d fb04 	ldr.w	pc, [sp], #4

00001744 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1744:	b500      	push	{lr}
    1746:	b083      	sub	sp, #12
    1748:	9001      	str	r0, [sp, #4]
    174a:	460b      	mov	r3, r1
    174c:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1750:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1754:	4619      	mov	r1, r3
    1756:	9801      	ldr	r0, [sp, #4]
    1758:	f7ff ff1c 	bl	1594 <IntCtrl_Ip_SetPriorityPrivileged>
}
    175c:	bf00      	nop
    175e:	b003      	add	sp, #12
    1760:	f85d fb04 	ldr.w	pc, [sp], #4

00001764 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1764:	b500      	push	{lr}
    1766:	b083      	sub	sp, #12
    1768:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    176a:	9801      	ldr	r0, [sp, #4]
    176c:	f7ff ff2c 	bl	15c8 <IntCtrl_Ip_GetPriorityPrivileged>
    1770:	4603      	mov	r3, r0
}
    1772:	4618      	mov	r0, r3
    1774:	b003      	add	sp, #12
    1776:	f85d fb04 	ldr.w	pc, [sp], #4

0000177a <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    177a:	b500      	push	{lr}
    177c:	b083      	sub	sp, #12
    177e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1780:	9801      	ldr	r0, [sp, #4]
    1782:	f7ff ff3b 	bl	15fc <IntCtrl_Ip_ClearPendingPrivileged>
}
    1786:	bf00      	nop
    1788:	b003      	add	sp, #12
    178a:	f85d fb04 	ldr.w	pc, [sp], #4
    178e:	bf00      	nop

00001790 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1790:	b500      	push	{lr}
    1792:	b083      	sub	sp, #12
    1794:	9001      	str	r0, [sp, #4]
    1796:	460b      	mov	r3, r1
    1798:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    179c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d003      	beq.n	17ac <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    17a4:	9801      	ldr	r0, [sp, #4]
    17a6:	f7ff ffb9 	bl	171c <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    17aa:	e002      	b.n	17b2 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    17ac:	9801      	ldr	r0, [sp, #4]
    17ae:	f7ff ffbf 	bl	1730 <IntCtrl_Ip_DisableIrq>
}
    17b2:	bf00      	nop
    17b4:	b003      	add	sp, #12
    17b6:	f85d fb04 	ldr.w	pc, [sp], #4

000017ba <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    17ba:	b500      	push	{lr}
    17bc:	b083      	sub	sp, #12
    17be:	9001      	str	r0, [sp, #4]
    17c0:	460b      	mov	r3, r1
    17c2:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    17c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17ca:	4619      	mov	r1, r3
    17cc:	9801      	ldr	r0, [sp, #4]
    17ce:	f7ff ffb9 	bl	1744 <IntCtrl_Ip_SetPriority>
}
    17d2:	bf00      	nop
    17d4:	b003      	add	sp, #12
    17d6:	f85d fb04 	ldr.w	pc, [sp], #4

000017da <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    17da:	b500      	push	{lr}
    17dc:	b083      	sub	sp, #12
    17de:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    17e0:	9801      	ldr	r0, [sp, #4]
    17e2:	f7ff ffbf 	bl	1764 <IntCtrl_Ip_GetPriority>
    17e6:	4603      	mov	r3, r0
}
    17e8:	4618      	mov	r0, r3
    17ea:	b003      	add	sp, #12
    17ec:	f85d fb04 	ldr.w	pc, [sp], #4

000017f0 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17f0:	b500      	push	{lr}
    17f2:	b085      	sub	sp, #20
    17f4:	9003      	str	r0, [sp, #12]
    17f6:	9102      	str	r1, [sp, #8]
    17f8:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    17fa:	9a01      	ldr	r2, [sp, #4]
    17fc:	9902      	ldr	r1, [sp, #8]
    17fe:	9803      	ldr	r0, [sp, #12]
    1800:	f7ff ff7e 	bl	1700 <IntCtrl_Ip_InstallHandler>
}
    1804:	bf00      	nop
    1806:	b005      	add	sp, #20
    1808:	f85d fb04 	ldr.w	pc, [sp], #4

0000180c <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    180c:	b500      	push	{lr}
    180e:	b085      	sub	sp, #20
    1810:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1812:	2300      	movs	r3, #0
    1814:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1818:	f89d 300f 	ldrb.w	r3, [sp, #15]
    181c:	4a05      	ldr	r2, [pc, #20]	; (1834 <Platform_Init+0x28>)
    181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1822:	681b      	ldr	r3, [r3, #0]
    1824:	4618      	mov	r0, r3
    1826:	f000 f8c7 	bl	19b8 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    182a:	bf00      	nop
    182c:	b005      	add	sp, #20
    182e:	f85d fb04 	ldr.w	pc, [sp], #4
    1832:	bf00      	nop
    1834:	00011274 	.word	0x00011274

00001838 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1838:	b500      	push	{lr}
    183a:	b085      	sub	sp, #20
    183c:	9001      	str	r0, [sp, #4]
    183e:	460b      	mov	r3, r1
    1840:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1844:	2300      	movs	r3, #0
    1846:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    184a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    184e:	4619      	mov	r1, r3
    1850:	9801      	ldr	r0, [sp, #4]
    1852:	f7ff ff9d 	bl	1790 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1856:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    185a:	4618      	mov	r0, r3
    185c:	b005      	add	sp, #20
    185e:	f85d fb04 	ldr.w	pc, [sp], #4

00001862 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1862:	b500      	push	{lr}
    1864:	b085      	sub	sp, #20
    1866:	9001      	str	r0, [sp, #4]
    1868:	460b      	mov	r3, r1
    186a:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    186e:	2300      	movs	r3, #0
    1870:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1874:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1878:	4619      	mov	r1, r3
    187a:	9801      	ldr	r0, [sp, #4]
    187c:	f7ff ff9d 	bl	17ba <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1880:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1884:	4618      	mov	r0, r3
    1886:	b005      	add	sp, #20
    1888:	f85d fb04 	ldr.w	pc, [sp], #4

0000188c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    188c:	b500      	push	{lr}
    188e:	b085      	sub	sp, #20
    1890:	9001      	str	r0, [sp, #4]
    1892:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1894:	2300      	movs	r3, #0
    1896:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    189a:	9801      	ldr	r0, [sp, #4]
    189c:	f7ff ff9d 	bl	17da <Platform_Ipw_GetIrqPriority>
    18a0:	4603      	mov	r3, r0
    18a2:	461a      	mov	r2, r3
    18a4:	9b00      	ldr	r3, [sp, #0]
    18a6:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    18a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    18ac:	4618      	mov	r0, r3
    18ae:	b005      	add	sp, #20
    18b0:	f85d fb04 	ldr.w	pc, [sp], #4

000018b4 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    18b4:	b500      	push	{lr}
    18b6:	b087      	sub	sp, #28
    18b8:	9003      	str	r0, [sp, #12]
    18ba:	9102      	str	r1, [sp, #8]
    18bc:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    18be:	2300      	movs	r3, #0
    18c0:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    18c4:	9a01      	ldr	r2, [sp, #4]
    18c6:	9902      	ldr	r1, [sp, #8]
    18c8:	9803      	ldr	r0, [sp, #12]
    18ca:	f7ff ff91 	bl	17f0 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    18ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    18d2:	4618      	mov	r0, r3
    18d4:	b007      	add	sp, #28
    18d6:	f85d fb04 	ldr.w	pc, [sp], #4
    18da:	bf00      	nop

000018dc <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    18dc:	b500      	push	{lr}
    18de:	b085      	sub	sp, #20
    18e0:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    18e2:	2300      	movs	r3, #0
    18e4:	9303      	str	r3, [sp, #12]
    18e6:	e05d      	b.n	19a4 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    18e8:	9b01      	ldr	r3, [sp, #4]
    18ea:	6859      	ldr	r1, [r3, #4]
    18ec:	9a03      	ldr	r2, [sp, #12]
    18ee:	4613      	mov	r3, r2
    18f0:	005b      	lsls	r3, r3, #1
    18f2:	4413      	add	r3, r2
    18f4:	009b      	lsls	r3, r3, #2
    18f6:	440b      	add	r3, r1
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	4618      	mov	r0, r3
    18fc:	f7ff ff3d 	bl	177a <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1900:	9b01      	ldr	r3, [sp, #4]
    1902:	6859      	ldr	r1, [r3, #4]
    1904:	9a03      	ldr	r2, [sp, #12]
    1906:	4613      	mov	r3, r2
    1908:	005b      	lsls	r3, r3, #1
    190a:	4413      	add	r3, r2
    190c:	009b      	lsls	r3, r3, #2
    190e:	440b      	add	r3, r1
    1910:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1912:	9b01      	ldr	r3, [sp, #4]
    1914:	6859      	ldr	r1, [r3, #4]
    1916:	9a03      	ldr	r2, [sp, #12]
    1918:	4613      	mov	r3, r2
    191a:	005b      	lsls	r3, r3, #1
    191c:	4413      	add	r3, r2
    191e:	009b      	lsls	r3, r3, #2
    1920:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1922:	795b      	ldrb	r3, [r3, #5]
    1924:	4619      	mov	r1, r3
    1926:	f7ff ff0d 	bl	1744 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    192a:	9b01      	ldr	r3, [sp, #4]
    192c:	6859      	ldr	r1, [r3, #4]
    192e:	9a03      	ldr	r2, [sp, #12]
    1930:	4613      	mov	r3, r2
    1932:	005b      	lsls	r3, r3, #1
    1934:	4413      	add	r3, r2
    1936:	009b      	lsls	r3, r3, #2
    1938:	440b      	add	r3, r1
    193a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    193c:	9b01      	ldr	r3, [sp, #4]
    193e:	6859      	ldr	r1, [r3, #4]
    1940:	9a03      	ldr	r2, [sp, #12]
    1942:	4613      	mov	r3, r2
    1944:	005b      	lsls	r3, r3, #1
    1946:	4413      	add	r3, r2
    1948:	009b      	lsls	r3, r3, #2
    194a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    194c:	689b      	ldr	r3, [r3, #8]
    194e:	2200      	movs	r2, #0
    1950:	4619      	mov	r1, r3
    1952:	f7ff fed5 	bl	1700 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1956:	9b01      	ldr	r3, [sp, #4]
    1958:	6859      	ldr	r1, [r3, #4]
    195a:	9a03      	ldr	r2, [sp, #12]
    195c:	4613      	mov	r3, r2
    195e:	005b      	lsls	r3, r3, #1
    1960:	4413      	add	r3, r2
    1962:	009b      	lsls	r3, r3, #2
    1964:	440b      	add	r3, r1
    1966:	791b      	ldrb	r3, [r3, #4]
    1968:	2b00      	cmp	r3, #0
    196a:	d00c      	beq.n	1986 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    196c:	9b01      	ldr	r3, [sp, #4]
    196e:	6859      	ldr	r1, [r3, #4]
    1970:	9a03      	ldr	r2, [sp, #12]
    1972:	4613      	mov	r3, r2
    1974:	005b      	lsls	r3, r3, #1
    1976:	4413      	add	r3, r2
    1978:	009b      	lsls	r3, r3, #2
    197a:	440b      	add	r3, r1
    197c:	681b      	ldr	r3, [r3, #0]
    197e:	4618      	mov	r0, r3
    1980:	f7ff fecc 	bl	171c <IntCtrl_Ip_EnableIrq>
    1984:	e00b      	b.n	199e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1986:	9b01      	ldr	r3, [sp, #4]
    1988:	6859      	ldr	r1, [r3, #4]
    198a:	9a03      	ldr	r2, [sp, #12]
    198c:	4613      	mov	r3, r2
    198e:	005b      	lsls	r3, r3, #1
    1990:	4413      	add	r3, r2
    1992:	009b      	lsls	r3, r3, #2
    1994:	440b      	add	r3, r1
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	4618      	mov	r0, r3
    199a:	f7ff fec9 	bl	1730 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    199e:	9b03      	ldr	r3, [sp, #12]
    19a0:	3301      	adds	r3, #1
    19a2:	9303      	str	r3, [sp, #12]
    19a4:	9b01      	ldr	r3, [sp, #4]
    19a6:	681b      	ldr	r3, [r3, #0]
    19a8:	9a03      	ldr	r2, [sp, #12]
    19aa:	429a      	cmp	r2, r3
    19ac:	d39c      	bcc.n	18e8 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    19ae:	2300      	movs	r3, #0
}
    19b0:	4618      	mov	r0, r3
    19b2:	b005      	add	sp, #20
    19b4:	f85d fb04 	ldr.w	pc, [sp], #4

000019b8 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    19b8:	b500      	push	{lr}
    19ba:	b085      	sub	sp, #20
    19bc:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    19be:	2300      	movs	r3, #0
    19c0:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d007      	beq.n	19dc <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    19cc:	9b01      	ldr	r3, [sp, #4]
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	4618      	mov	r0, r3
    19d2:	f7ff ff83 	bl	18dc <Platform_Ipw_InitIntCtrl>
    19d6:	4603      	mov	r3, r0
    19d8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    19dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    19e0:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    19e2:	bf00      	nop
    19e4:	b005      	add	sp, #20
    19e6:	f85d fb04 	ldr.w	pc, [sp], #4

000019ea <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    19ea:	2300      	movs	r3, #0
}
    19ec:	4618      	mov	r0, r3
    19ee:	4770      	bx	lr

000019f0 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    19f0:	b082      	sub	sp, #8
    19f2:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    19f4:	2301      	movs	r3, #1
}
    19f6:	4618      	mov	r0, r3
    19f8:	b002      	add	sp, #8
    19fa:	4770      	bx	lr

000019fc <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    19fc:	b082      	sub	sp, #8
    19fe:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1a00:	bf00      	nop
    1a02:	b002      	add	sp, #8
    1a04:	4770      	bx	lr

00001a06 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1a06:	b082      	sub	sp, #8
    1a08:	9001      	str	r0, [sp, #4]
    return Micros;
    1a0a:	9b01      	ldr	r3, [sp, #4]
}
    1a0c:	4618      	mov	r0, r3
    1a0e:	b002      	add	sp, #8
    1a10:	4770      	bx	lr

00001a12 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1a12:	b500      	push	{lr}
    1a14:	b083      	sub	sp, #12
    1a16:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1a18:	f000 f86c 	bl	1af4 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1a1c:	bf00      	nop
    1a1e:	b003      	add	sp, #12
    1a20:	f85d fb04 	ldr.w	pc, [sp], #4

00001a24 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1a24:	b500      	push	{lr}
    1a26:	b085      	sub	sp, #20
    1a28:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1a2a:	2300      	movs	r3, #0
    1a2c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1a2e:	9b01      	ldr	r3, [sp, #4]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d003      	beq.n	1a3c <OsIf_GetCounter+0x18>
    1a34:	9b01      	ldr	r3, [sp, #4]
    1a36:	2b01      	cmp	r3, #1
    1a38:	d004      	beq.n	1a44 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1a3a:	e007      	b.n	1a4c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1a3c:	f7ff ffd5 	bl	19ea <OsIf_Timer_Dummy_GetCounter>
    1a40:	9003      	str	r0, [sp, #12]
            break;
    1a42:	e003      	b.n	1a4c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1a44:	f000 f872 	bl	1b2c <OsIf_Timer_System_GetCounter>
    1a48:	9003      	str	r0, [sp, #12]
            break;
    1a4a:	bf00      	nop
    }

    return Value;
    1a4c:	9b03      	ldr	r3, [sp, #12]
}
    1a4e:	4618      	mov	r0, r3
    1a50:	b005      	add	sp, #20
    1a52:	f85d fb04 	ldr.w	pc, [sp], #4

00001a56 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1a56:	b500      	push	{lr}
    1a58:	b085      	sub	sp, #20
    1a5a:	9001      	str	r0, [sp, #4]
    1a5c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1a5e:	2300      	movs	r3, #0
    1a60:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1a62:	9b00      	ldr	r3, [sp, #0]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d003      	beq.n	1a70 <OsIf_GetElapsed+0x1a>
    1a68:	9b00      	ldr	r3, [sp, #0]
    1a6a:	2b01      	cmp	r3, #1
    1a6c:	d005      	beq.n	1a7a <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1a6e:	e009      	b.n	1a84 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1a70:	9801      	ldr	r0, [sp, #4]
    1a72:	f7ff ffbd 	bl	19f0 <OsIf_Timer_Dummy_GetElapsed>
    1a76:	9003      	str	r0, [sp, #12]
            break;
    1a78:	e004      	b.n	1a84 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1a7a:	9801      	ldr	r0, [sp, #4]
    1a7c:	f000 f864 	bl	1b48 <OsIf_Timer_System_GetElapsed>
    1a80:	9003      	str	r0, [sp, #12]
            break;
    1a82:	bf00      	nop
    }

    return Value;
    1a84:	9b03      	ldr	r3, [sp, #12]
}
    1a86:	4618      	mov	r0, r3
    1a88:	b005      	add	sp, #20
    1a8a:	f85d fb04 	ldr.w	pc, [sp], #4

00001a8e <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1a8e:	b500      	push	{lr}
    1a90:	b083      	sub	sp, #12
    1a92:	9001      	str	r0, [sp, #4]
    1a94:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1a96:	9b00      	ldr	r3, [sp, #0]
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d003      	beq.n	1aa4 <OsIf_SetTimerFrequency+0x16>
    1a9c:	9b00      	ldr	r3, [sp, #0]
    1a9e:	2b01      	cmp	r3, #1
    1aa0:	d004      	beq.n	1aac <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1aa2:	e007      	b.n	1ab4 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1aa4:	9801      	ldr	r0, [sp, #4]
    1aa6:	f7ff ffa9 	bl	19fc <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1aaa:	e003      	b.n	1ab4 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1aac:	9801      	ldr	r0, [sp, #4]
    1aae:	f000 f85b 	bl	1b68 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1ab2:	bf00      	nop
    }
}
    1ab4:	bf00      	nop
    1ab6:	b003      	add	sp, #12
    1ab8:	f85d fb04 	ldr.w	pc, [sp], #4

00001abc <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1abc:	b500      	push	{lr}
    1abe:	b085      	sub	sp, #20
    1ac0:	9001      	str	r0, [sp, #4]
    1ac2:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1ac4:	2300      	movs	r3, #0
    1ac6:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ac8:	9b00      	ldr	r3, [sp, #0]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d003      	beq.n	1ad6 <OsIf_MicrosToTicks+0x1a>
    1ace:	9b00      	ldr	r3, [sp, #0]
    1ad0:	2b01      	cmp	r3, #1
    1ad2:	d005      	beq.n	1ae0 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1ad4:	e009      	b.n	1aea <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1ad6:	9801      	ldr	r0, [sp, #4]
    1ad8:	f7ff ff95 	bl	1a06 <OsIf_Timer_Dummy_MicrosToTicks>
    1adc:	9003      	str	r0, [sp, #12]
            break;
    1ade:	e004      	b.n	1aea <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1ae0:	9801      	ldr	r0, [sp, #4]
    1ae2:	f000 f84f 	bl	1b84 <OsIf_Timer_System_MicrosToTicks>
    1ae6:	9003      	str	r0, [sp, #12]
            break;
    1ae8:	bf00      	nop
    }

    return Value;
    1aea:	9b03      	ldr	r3, [sp, #12]
}
    1aec:	4618      	mov	r0, r3
    1aee:	b005      	add	sp, #20
    1af0:	f85d fb04 	ldr.w	pc, [sp], #4

00001af4 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1af4:	b500      	push	{lr}
    1af6:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1af8:	2300      	movs	r3, #0
    1afa:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1afc:	4a09      	ldr	r2, [pc, #36]	; (1b24 <OsIf_Timer_System_Init+0x30>)
    1afe:	9b01      	ldr	r3, [sp, #4]
    1b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b04:	685a      	ldr	r2, [r3, #4]
    1b06:	4908      	ldr	r1, [pc, #32]	; (1b28 <OsIf_Timer_System_Init+0x34>)
    1b08:	9b01      	ldr	r3, [sp, #4]
    1b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1b0e:	4a06      	ldr	r2, [pc, #24]	; (1b28 <OsIf_Timer_System_Init+0x34>)
    1b10:	9b01      	ldr	r3, [sp, #4]
    1b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b16:	4618      	mov	r0, r3
    1b18:	f000 f868 	bl	1bec <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1b1c:	bf00      	nop
    1b1e:	b003      	add	sp, #12
    1b20:	f85d fb04 	ldr.w	pc, [sp], #4
    1b24:	0001122c 	.word	0x0001122c
    1b28:	1fff8b54 	.word	0x1fff8b54

00001b2c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1b2c:	b500      	push	{lr}
    1b2e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1b30:	2300      	movs	r3, #0
    1b32:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1b34:	2300      	movs	r3, #0
    1b36:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1b38:	f000 f86c 	bl	1c14 <OsIf_Timer_System_Internal_GetCounter>
    1b3c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1b3e:	9b01      	ldr	r3, [sp, #4]
}
    1b40:	4618      	mov	r0, r3
    1b42:	b003      	add	sp, #12
    1b44:	f85d fb04 	ldr.w	pc, [sp], #4

00001b48 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1b48:	b500      	push	{lr}
    1b4a:	b085      	sub	sp, #20
    1b4c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1b4e:	2300      	movs	r3, #0
    1b50:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1b52:	2300      	movs	r3, #0
    1b54:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1b56:	9801      	ldr	r0, [sp, #4]
    1b58:	f000 f864 	bl	1c24 <OsIf_Timer_System_Internal_GetElapsed>
    1b5c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1b5e:	9b03      	ldr	r3, [sp, #12]
}
    1b60:	4618      	mov	r0, r3
    1b62:	b005      	add	sp, #20
    1b64:	f85d fb04 	ldr.w	pc, [sp], #4

00001b68 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1b68:	b084      	sub	sp, #16
    1b6a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1b6c:	2300      	movs	r3, #0
    1b6e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1b70:	4903      	ldr	r1, [pc, #12]	; (1b80 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1b72:	9b03      	ldr	r3, [sp, #12]
    1b74:	9a01      	ldr	r2, [sp, #4]
    1b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1b7a:	bf00      	nop
    1b7c:	b004      	add	sp, #16
    1b7e:	4770      	bx	lr
    1b80:	1fff8b54 	.word	0x1fff8b54

00001b84 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b86:	b087      	sub	sp, #28
    1b88:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1b8a:	2100      	movs	r1, #0
    1b8c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1b8e:	2100      	movs	r1, #0
    1b90:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1b92:	9901      	ldr	r1, [sp, #4]
    1b94:	2000      	movs	r0, #0
    1b96:	460e      	mov	r6, r1
    1b98:	4607      	mov	r7, r0
    1b9a:	4812      	ldr	r0, [pc, #72]	; (1be4 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1b9c:	9904      	ldr	r1, [sp, #16]
    1b9e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1ba2:	2000      	movs	r0, #0
    1ba4:	460c      	mov	r4, r1
    1ba6:	4605      	mov	r5, r0
    1ba8:	fb04 f007 	mul.w	r0, r4, r7
    1bac:	fb06 f105 	mul.w	r1, r6, r5
    1bb0:	4401      	add	r1, r0
    1bb2:	fba6 2304 	umull	r2, r3, r6, r4
    1bb6:	4419      	add	r1, r3
    1bb8:	460b      	mov	r3, r1
    1bba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1bbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1bc6:	4a08      	ldr	r2, [pc, #32]	; (1be8 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1bc8:	f04f 0300 	mov.w	r3, #0
    1bcc:	f7fe fcea 	bl	5a4 <__aeabi_uldivmod>
    1bd0:	4602      	mov	r2, r0
    1bd2:	460b      	mov	r3, r1
    1bd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1bd8:	9b02      	ldr	r3, [sp, #8]
    1bda:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1bdc:	9b05      	ldr	r3, [sp, #20]
}
    1bde:	4618      	mov	r0, r3
    1be0:	b007      	add	sp, #28
    1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be4:	1fff8b54 	.word	0x1fff8b54
    1be8:	000f4240 	.word	0x000f4240

00001bec <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1bec:	b082      	sub	sp, #8
    1bee:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1bf0:	4b07      	ldr	r3, [pc, #28]	; (1c10 <OsIf_Timer_System_Internal_Init+0x24>)
    1bf2:	2200      	movs	r2, #0
    1bf4:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1bf6:	4b06      	ldr	r3, [pc, #24]	; (1c10 <OsIf_Timer_System_Internal_Init+0x24>)
    1bf8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1bfc:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1bfe:	4b04      	ldr	r3, [pc, #16]	; (1c10 <OsIf_Timer_System_Internal_Init+0x24>)
    1c00:	2200      	movs	r2, #0
    1c02:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1c04:	4b02      	ldr	r3, [pc, #8]	; (1c10 <OsIf_Timer_System_Internal_Init+0x24>)
    1c06:	2205      	movs	r2, #5
    1c08:	601a      	str	r2, [r3, #0]
}
    1c0a:	bf00      	nop
    1c0c:	b002      	add	sp, #8
    1c0e:	4770      	bx	lr
    1c10:	e000e010 	.word	0xe000e010

00001c14 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1c14:	4b02      	ldr	r3, [pc, #8]	; (1c20 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1c16:	689b      	ldr	r3, [r3, #8]
    1c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1c1c:	4618      	mov	r0, r3
    1c1e:	4770      	bx	lr
    1c20:	e000e010 	.word	0xe000e010

00001c24 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1c24:	b084      	sub	sp, #16
    1c26:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1c28:	4b10      	ldr	r3, [pc, #64]	; (1c6c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1c2a:	689b      	ldr	r3, [r3, #8]
    1c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1c30:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1c32:	2300      	movs	r3, #0
    1c34:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1c36:	9b01      	ldr	r3, [sp, #4]
    1c38:	681b      	ldr	r3, [r3, #0]
    1c3a:	9a02      	ldr	r2, [sp, #8]
    1c3c:	429a      	cmp	r2, r3
    1c3e:	d909      	bls.n	1c54 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1c40:	9b01      	ldr	r3, [sp, #4]
    1c42:	681a      	ldr	r2, [r3, #0]
    1c44:	9b02      	ldr	r3, [sp, #8]
    1c46:	1ad3      	subs	r3, r2, r3
    1c48:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1c4c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1c50:	9303      	str	r3, [sp, #12]
    1c52:	e004      	b.n	1c5e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	681a      	ldr	r2, [r3, #0]
    1c58:	9b02      	ldr	r3, [sp, #8]
    1c5a:	1ad3      	subs	r3, r2, r3
    1c5c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	9a02      	ldr	r2, [sp, #8]
    1c62:	601a      	str	r2, [r3, #0]

    return dif;
    1c64:	9b03      	ldr	r3, [sp, #12]
}
    1c66:	4618      	mov	r0, r3
    1c68:	b004      	add	sp, #16
    1c6a:	4770      	bx	lr
    1c6c:	e000e010 	.word	0xe000e010

00001c70 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1c70:	b082      	sub	sp, #8
    1c72:	9001      	str	r0, [sp, #4]
    1c74:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1c76:	bf00      	nop
    1c78:	b002      	add	sp, #8
    1c7a:	4770      	bx	lr

00001c7c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1c7c:	b500      	push	{lr}
    1c7e:	b085      	sub	sp, #20
    1c80:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1c82:	4b24      	ldr	r3, [pc, #144]	; (1d14 <Clock_Ip_UpdateDriverContext+0x98>)
    1c84:	2201      	movs	r2, #1
    1c86:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1c88:	4b23      	ldr	r3, [pc, #140]	; (1d18 <Clock_Ip_UpdateDriverContext+0x9c>)
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	2102      	movs	r1, #2
    1c8e:	4618      	mov	r0, r3
    1c90:	f003 fc32 	bl	54f8 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1c94:	2300      	movs	r3, #0
    1c96:	f88d 300f 	strb.w	r3, [sp, #15]
    1c9a:	e015      	b.n	1cc8 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1c9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ca0:	9a01      	ldr	r2, [sp, #4]
    1ca2:	334a      	adds	r3, #74	; 0x4a
    1ca4:	00db      	lsls	r3, r3, #3
    1ca6:	4413      	add	r3, r2
    1ca8:	6858      	ldr	r0, [r3, #4]
    1caa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cae:	9a01      	ldr	r2, [sp, #4]
    1cb0:	334a      	adds	r3, #74	; 0x4a
    1cb2:	00db      	lsls	r3, r3, #3
    1cb4:	4413      	add	r3, r2
    1cb6:	689b      	ldr	r3, [r3, #8]
    1cb8:	4619      	mov	r1, r3
    1cba:	f001 fadc 	bl	3276 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1cbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cc2:	3301      	adds	r3, #1
    1cc4:	f88d 300f 	strb.w	r3, [sp, #15]
    1cc8:	9b01      	ldr	r3, [sp, #4]
    1cca:	7bdb      	ldrb	r3, [r3, #15]
    1ccc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1cd0:	429a      	cmp	r2, r3
    1cd2:	d3e3      	bcc.n	1c9c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1cd4:	f000 f824 	bl	1d20 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1cd8:	2301      	movs	r3, #1
    1cda:	f88d 300f 	strb.w	r3, [sp, #15]
    1cde:	e00e      	b.n	1cfe <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1ce0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1ce4:	9b01      	ldr	r3, [sp, #4]
    1ce6:	327e      	adds	r2, #126	; 0x7e
    1ce8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1cec:	490b      	ldr	r1, [pc, #44]	; (1d1c <Clock_Ip_UpdateDriverContext+0xa0>)
    1cee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1cf2:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1cf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cf8:	3301      	adds	r3, #1
    1cfa:	f88d 300f 	strb.w	r3, [sp, #15]
    1cfe:	9b01      	ldr	r3, [sp, #4]
    1d00:	7cdb      	ldrb	r3, [r3, #19]
    1d02:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d06:	429a      	cmp	r2, r3
    1d08:	d3ea      	bcc.n	1ce0 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1d0a:	bf00      	nop
    1d0c:	bf00      	nop
    1d0e:	b005      	add	sp, #20
    1d10:	f85d fb04 	ldr.w	pc, [sp], #4
    1d14:	1fff8b10 	.word	0x1fff8b10
    1d18:	1fff8b58 	.word	0x1fff8b58
    1d1c:	1fff8b64 	.word	0x1fff8b64

00001d20 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1d20:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1d22:	4b23      	ldr	r3, [pc, #140]	; (1db0 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	f083 0301 	eor.w	r3, r3, #1
    1d2a:	b2db      	uxtb	r3, r3
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d03d      	beq.n	1dac <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1d30:	4b1f      	ldr	r3, [pc, #124]	; (1db0 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1d32:	2201      	movs	r2, #1
    1d34:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1d36:	4b1f      	ldr	r3, [pc, #124]	; (1db4 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1d38:	685b      	ldr	r3, [r3, #4]
    1d3a:	2100      	movs	r1, #0
    1d3c:	2000      	movs	r0, #0
    1d3e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1d40:	4b1c      	ldr	r3, [pc, #112]	; (1db4 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1d42:	689b      	ldr	r3, [r3, #8]
    1d44:	2057      	movs	r0, #87	; 0x57
    1d46:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d48:	4b1b      	ldr	r3, [pc, #108]	; (1db8 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1d4a:	681b      	ldr	r3, [r3, #0]
    1d4c:	2000      	movs	r0, #0
    1d4e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1d50:	4b1a      	ldr	r3, [pc, #104]	; (1dbc <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2000      	movs	r0, #0
    1d56:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1d58:	4b19      	ldr	r3, [pc, #100]	; (1dc0 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	2000      	movs	r0, #0
    1d5e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d60:	4b18      	ldr	r3, [pc, #96]	; (1dc4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1d62:	685b      	ldr	r3, [r3, #4]
    1d64:	2000      	movs	r0, #0
    1d66:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1d68:	4b16      	ldr	r3, [pc, #88]	; (1dc4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1d6a:	689b      	ldr	r3, [r3, #8]
    1d6c:	2057      	movs	r0, #87	; 0x57
    1d6e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d70:	4b15      	ldr	r3, [pc, #84]	; (1dc8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	2000      	movs	r0, #0
    1d76:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1d78:	4b13      	ldr	r3, [pc, #76]	; (1dc8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1d7a:	685b      	ldr	r3, [r3, #4]
    1d7c:	2100      	movs	r1, #0
    1d7e:	2057      	movs	r0, #87	; 0x57
    1d80:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d82:	4b12      	ldr	r3, [pc, #72]	; (1dcc <Clock_Ip_CallEmptyCallbacks+0xac>)
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	2000      	movs	r0, #0
    1d88:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d8a:	4b11      	ldr	r3, [pc, #68]	; (1dd0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1d8c:	685b      	ldr	r3, [r3, #4]
    1d8e:	2000      	movs	r0, #0
    1d90:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1d92:	4b0f      	ldr	r3, [pc, #60]	; (1dd0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1d94:	689b      	ldr	r3, [r3, #8]
    1d96:	2057      	movs	r0, #87	; 0x57
    1d98:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d9a:	4b0e      	ldr	r3, [pc, #56]	; (1dd4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1d9c:	685b      	ldr	r3, [r3, #4]
    1d9e:	2000      	movs	r0, #0
    1da0:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1da2:	4b0d      	ldr	r3, [pc, #52]	; (1dd8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1da4:	681b      	ldr	r3, [r3, #0]
    1da6:	2100      	movs	r1, #0
    1da8:	2000      	movs	r0, #0
    1daa:	4798      	blx	r3
    }
}
    1dac:	bf00      	nop
    1dae:	bd08      	pop	{r3, pc}
    1db0:	1fff8b5c 	.word	0x1fff8b5c
    1db4:	00010ac8 	.word	0x00010ac8
    1db8:	000109dc 	.word	0x000109dc
    1dbc:	00010a18 	.word	0x00010a18
    1dc0:	00010a20 	.word	0x00010a20
    1dc4:	00010a48 	.word	0x00010a48
    1dc8:	00010a54 	.word	0x00010a54
    1dcc:	00010a8c 	.word	0x00010a8c
    1dd0:	00010ad8 	.word	0x00010ad8
    1dd4:	00010b04 	.word	0x00010b04
    1dd8:	00010b00 	.word	0x00010b00

00001ddc <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1ddc:	b500      	push	{lr}
    1dde:	b085      	sub	sp, #20
    1de0:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	7adb      	ldrb	r3, [r3, #11]
    1de6:	9303      	str	r3, [sp, #12]
    1de8:	e01f      	b.n	1e2a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1dea:	9b03      	ldr	r3, [sp, #12]
    1dec:	1e5a      	subs	r2, r3, #1
    1dee:	9b01      	ldr	r3, [sp, #4]
    1df0:	320d      	adds	r2, #13
    1df2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1df6:	495a      	ldr	r1, [pc, #360]	; (1f60 <Clock_Ip_ResetClockConfiguration+0x184>)
    1df8:	4613      	mov	r3, r2
    1dfa:	00db      	lsls	r3, r3, #3
    1dfc:	4413      	add	r3, r2
    1dfe:	440b      	add	r3, r1
    1e00:	3301      	adds	r3, #1
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	461a      	mov	r2, r3
    1e06:	4b57      	ldr	r3, [pc, #348]	; (1f64 <Clock_Ip_ResetClockConfiguration+0x188>)
    1e08:	5c9b      	ldrb	r3, [r3, r2]
    1e0a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1e0c:	4a56      	ldr	r2, [pc, #344]	; (1f68 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1e0e:	9b02      	ldr	r3, [sp, #8]
    1e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e14:	9a03      	ldr	r2, [sp, #12]
    1e16:	3a01      	subs	r2, #1
    1e18:	320d      	adds	r2, #13
    1e1a:	00d2      	lsls	r2, r2, #3
    1e1c:	9901      	ldr	r1, [sp, #4]
    1e1e:	440a      	add	r2, r1
    1e20:	4610      	mov	r0, r2
    1e22:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1e24:	9b03      	ldr	r3, [sp, #12]
    1e26:	3b01      	subs	r3, #1
    1e28:	9303      	str	r3, [sp, #12]
    1e2a:	9b03      	ldr	r3, [sp, #12]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d1dc      	bne.n	1dea <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	7b9b      	ldrb	r3, [r3, #14]
    1e34:	9303      	str	r3, [sp, #12]
    1e36:	e026      	b.n	1e86 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1e38:	9b03      	ldr	r3, [sp, #12]
    1e3a:	3b01      	subs	r3, #1
    1e3c:	9a01      	ldr	r2, [sp, #4]
    1e3e:	3324      	adds	r3, #36	; 0x24
    1e40:	011b      	lsls	r3, r3, #4
    1e42:	4413      	add	r3, r2
    1e44:	3304      	adds	r3, #4
    1e46:	681a      	ldr	r2, [r3, #0]
    1e48:	4945      	ldr	r1, [pc, #276]	; (1f60 <Clock_Ip_ResetClockConfiguration+0x184>)
    1e4a:	4613      	mov	r3, r2
    1e4c:	00db      	lsls	r3, r3, #3
    1e4e:	4413      	add	r3, r2
    1e50:	440b      	add	r3, r1
    1e52:	3301      	adds	r3, #1
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	461a      	mov	r2, r3
    1e58:	4b44      	ldr	r3, [pc, #272]	; (1f6c <Clock_Ip_ResetClockConfiguration+0x190>)
    1e5a:	5c9b      	ldrb	r3, [r3, r2]
    1e5c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1e5e:	4944      	ldr	r1, [pc, #272]	; (1f70 <Clock_Ip_ResetClockConfiguration+0x194>)
    1e60:	9a02      	ldr	r2, [sp, #8]
    1e62:	4613      	mov	r3, r2
    1e64:	005b      	lsls	r3, r3, #1
    1e66:	4413      	add	r3, r2
    1e68:	009b      	lsls	r3, r3, #2
    1e6a:	440b      	add	r3, r1
    1e6c:	681b      	ldr	r3, [r3, #0]
    1e6e:	9a03      	ldr	r2, [sp, #12]
    1e70:	3a01      	subs	r2, #1
    1e72:	3224      	adds	r2, #36	; 0x24
    1e74:	0112      	lsls	r2, r2, #4
    1e76:	9901      	ldr	r1, [sp, #4]
    1e78:	440a      	add	r2, r1
    1e7a:	3204      	adds	r2, #4
    1e7c:	4610      	mov	r0, r2
    1e7e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1e80:	9b03      	ldr	r3, [sp, #12]
    1e82:	3b01      	subs	r3, #1
    1e84:	9303      	str	r3, [sp, #12]
    1e86:	9b03      	ldr	r3, [sp, #12]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d1d5      	bne.n	1e38 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1e8c:	9b01      	ldr	r3, [sp, #4]
    1e8e:	7a9b      	ldrb	r3, [r3, #10]
    1e90:	9303      	str	r3, [sp, #12]
    1e92:	e02a      	b.n	1eea <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1e94:	9b03      	ldr	r3, [sp, #12]
    1e96:	1e5a      	subs	r2, r3, #1
    1e98:	9901      	ldr	r1, [sp, #4]
    1e9a:	4613      	mov	r3, r2
    1e9c:	009b      	lsls	r3, r3, #2
    1e9e:	4413      	add	r3, r2
    1ea0:	00db      	lsls	r3, r3, #3
    1ea2:	440b      	add	r3, r1
    1ea4:	3340      	adds	r3, #64	; 0x40
    1ea6:	681a      	ldr	r2, [r3, #0]
    1ea8:	492d      	ldr	r1, [pc, #180]	; (1f60 <Clock_Ip_ResetClockConfiguration+0x184>)
    1eaa:	4613      	mov	r3, r2
    1eac:	00db      	lsls	r3, r3, #3
    1eae:	4413      	add	r3, r2
    1eb0:	440b      	add	r3, r1
    1eb2:	3301      	adds	r3, #1
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	461a      	mov	r2, r3
    1eb8:	4b2e      	ldr	r3, [pc, #184]	; (1f74 <Clock_Ip_ResetClockConfiguration+0x198>)
    1eba:	5c9b      	ldrb	r3, [r3, r2]
    1ebc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1ebe:	492e      	ldr	r1, [pc, #184]	; (1f78 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1ec0:	9a02      	ldr	r2, [sp, #8]
    1ec2:	4613      	mov	r3, r2
    1ec4:	009b      	lsls	r3, r3, #2
    1ec6:	4413      	add	r3, r2
    1ec8:	009b      	lsls	r3, r3, #2
    1eca:	440b      	add	r3, r1
    1ecc:	6819      	ldr	r1, [r3, #0]
    1ece:	9b03      	ldr	r3, [sp, #12]
    1ed0:	1e5a      	subs	r2, r3, #1
    1ed2:	4613      	mov	r3, r2
    1ed4:	009b      	lsls	r3, r3, #2
    1ed6:	4413      	add	r3, r2
    1ed8:	00db      	lsls	r3, r3, #3
    1eda:	3340      	adds	r3, #64	; 0x40
    1edc:	9a01      	ldr	r2, [sp, #4]
    1ede:	4413      	add	r3, r2
    1ee0:	4618      	mov	r0, r3
    1ee2:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1ee4:	9b03      	ldr	r3, [sp, #12]
    1ee6:	3b01      	subs	r3, #1
    1ee8:	9303      	str	r3, [sp, #12]
    1eea:	9b03      	ldr	r3, [sp, #12]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d1d1      	bne.n	1e94 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1ef0:	9b01      	ldr	r3, [sp, #4]
    1ef2:	7a5b      	ldrb	r3, [r3, #9]
    1ef4:	9303      	str	r3, [sp, #12]
    1ef6:	e02b      	b.n	1f50 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ef8:	9b03      	ldr	r3, [sp, #12]
    1efa:	1e5a      	subs	r2, r3, #1
    1efc:	9901      	ldr	r1, [sp, #4]
    1efe:	4613      	mov	r3, r2
    1f00:	009b      	lsls	r3, r3, #2
    1f02:	4413      	add	r3, r2
    1f04:	009b      	lsls	r3, r3, #2
    1f06:	440b      	add	r3, r1
    1f08:	332c      	adds	r3, #44	; 0x2c
    1f0a:	681a      	ldr	r2, [r3, #0]
    1f0c:	4914      	ldr	r1, [pc, #80]	; (1f60 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f0e:	4613      	mov	r3, r2
    1f10:	00db      	lsls	r3, r3, #3
    1f12:	4413      	add	r3, r2
    1f14:	440b      	add	r3, r1
    1f16:	3301      	adds	r3, #1
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	461a      	mov	r2, r3
    1f1c:	4b17      	ldr	r3, [pc, #92]	; (1f7c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1f1e:	5c9b      	ldrb	r3, [r3, r2]
    1f20:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1f22:	4917      	ldr	r1, [pc, #92]	; (1f80 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1f24:	9a02      	ldr	r2, [sp, #8]
    1f26:	4613      	mov	r3, r2
    1f28:	009b      	lsls	r3, r3, #2
    1f2a:	4413      	add	r3, r2
    1f2c:	009b      	lsls	r3, r3, #2
    1f2e:	440b      	add	r3, r1
    1f30:	6819      	ldr	r1, [r3, #0]
    1f32:	9b03      	ldr	r3, [sp, #12]
    1f34:	1e5a      	subs	r2, r3, #1
    1f36:	4613      	mov	r3, r2
    1f38:	009b      	lsls	r3, r3, #2
    1f3a:	4413      	add	r3, r2
    1f3c:	009b      	lsls	r3, r3, #2
    1f3e:	3328      	adds	r3, #40	; 0x28
    1f40:	9a01      	ldr	r2, [sp, #4]
    1f42:	4413      	add	r3, r2
    1f44:	3304      	adds	r3, #4
    1f46:	4618      	mov	r0, r3
    1f48:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1f4a:	9b03      	ldr	r3, [sp, #12]
    1f4c:	3b01      	subs	r3, #1
    1f4e:	9303      	str	r3, [sp, #12]
    1f50:	9b03      	ldr	r3, [sp, #12]
    1f52:	2b00      	cmp	r3, #0
    1f54:	d1d0      	bne.n	1ef8 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1f56:	bf00      	nop
    1f58:	bf00      	nop
    1f5a:	b005      	add	sp, #20
    1f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    1f60:	000104cc 	.word	0x000104cc
    1f64:	0001049c 	.word	0x0001049c
    1f68:	00010b04 	.word	0x00010b04
    1f6c:	0001047c 	.word	0x0001047c
    1f70:	00010a48 	.word	0x00010a48
    1f74:	0001048c 	.word	0x0001048c
    1f78:	00010ad8 	.word	0x00010ad8
    1f7c:	0001044c 	.word	0x0001044c
    1f80:	00010a20 	.word	0x00010a20

00001f84 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1f84:	b500      	push	{lr}
    1f86:	b085      	sub	sp, #20
    1f88:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1f8a:	2301      	movs	r3, #1
    1f8c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1f8e:	9801      	ldr	r0, [sp, #4]
    1f90:	f000 f818 	bl	1fc4 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1f94:	4b0a      	ldr	r3, [pc, #40]	; (1fc0 <Clock_Ip_Init+0x3c>)
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d00a      	beq.n	1fb2 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1f9c:	f000 fb74 	bl	2688 <Clock_Ip_GetPllStatus>
    1fa0:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1fa2:	9b02      	ldr	r3, [sp, #8]
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d106      	bne.n	1fb6 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1fa8:	f000 fbf2 	bl	2790 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1fac:	2300      	movs	r3, #0
    1fae:	9303      	str	r3, [sp, #12]
    1fb0:	e001      	b.n	1fb6 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1fb2:	2300      	movs	r3, #0
    1fb4:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1fb6:	9b03      	ldr	r3, [sp, #12]
}
    1fb8:	4618      	mov	r0, r3
    1fba:	b005      	add	sp, #20
    1fbc:	f85d fb04 	ldr.w	pc, [sp], #4
    1fc0:	1fff8b60 	.word	0x1fff8b60

00001fc4 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1fc4:	b510      	push	{r4, lr}
    1fc6:	b084      	sub	sp, #16
    1fc8:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1fca:	4a9f      	ldr	r2, [pc, #636]	; (2248 <Clock_Ip_InitClock+0x284>)
    1fcc:	9b01      	ldr	r3, [sp, #4]
    1fce:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1fd0:	2101      	movs	r1, #1
    1fd2:	9801      	ldr	r0, [sp, #4]
    1fd4:	f003 fa90 	bl	54f8 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1fd8:	4b9b      	ldr	r3, [pc, #620]	; (2248 <Clock_Ip_InitClock+0x284>)
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d030      	beq.n	2042 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1fe0:	2300      	movs	r3, #0
    1fe2:	9303      	str	r3, [sp, #12]
    1fe4:	e027      	b.n	2036 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1fe6:	9901      	ldr	r1, [sp, #4]
    1fe8:	9a03      	ldr	r2, [sp, #12]
    1fea:	4613      	mov	r3, r2
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	4413      	add	r3, r2
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	440b      	add	r3, r1
    1ff4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ff8:	681a      	ldr	r2, [r3, #0]
    1ffa:	4994      	ldr	r1, [pc, #592]	; (224c <Clock_Ip_InitClock+0x288>)
    1ffc:	4613      	mov	r3, r2
    1ffe:	00db      	lsls	r3, r3, #3
    2000:	4413      	add	r3, r2
    2002:	440b      	add	r3, r1
    2004:	3301      	adds	r3, #1
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	461a      	mov	r2, r3
    200a:	4b91      	ldr	r3, [pc, #580]	; (2250 <Clock_Ip_InitClock+0x28c>)
    200c:	5c9b      	ldrb	r3, [r3, r2]
    200e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2010:	4a90      	ldr	r2, [pc, #576]	; (2254 <Clock_Ip_InitClock+0x290>)
    2012:	9b02      	ldr	r3, [sp, #8]
    2014:	011b      	lsls	r3, r3, #4
    2016:	4413      	add	r3, r2
    2018:	6819      	ldr	r1, [r3, #0]
    201a:	9a03      	ldr	r2, [sp, #12]
    201c:	4613      	mov	r3, r2
    201e:	009b      	lsls	r3, r3, #2
    2020:	4413      	add	r3, r2
    2022:	009b      	lsls	r3, r3, #2
    2024:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2028:	9a01      	ldr	r2, [sp, #4]
    202a:	4413      	add	r3, r2
    202c:	4618      	mov	r0, r3
    202e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2030:	9b03      	ldr	r3, [sp, #12]
    2032:	3301      	adds	r3, #1
    2034:	9303      	str	r3, [sp, #12]
    2036:	9b01      	ldr	r3, [sp, #4]
    2038:	7c9b      	ldrb	r3, [r3, #18]
    203a:	461a      	mov	r2, r3
    203c:	9b03      	ldr	r3, [sp, #12]
    203e:	4293      	cmp	r3, r2
    2040:	d3d1      	bcc.n	1fe6 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2042:	9801      	ldr	r0, [sp, #4]
    2044:	f7ff feca 	bl	1ddc <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2048:	2300      	movs	r3, #0
    204a:	9303      	str	r3, [sp, #12]
    204c:	e029      	b.n	20a2 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    204e:	9901      	ldr	r1, [sp, #4]
    2050:	9a03      	ldr	r2, [sp, #12]
    2052:	4613      	mov	r3, r2
    2054:	005b      	lsls	r3, r3, #1
    2056:	4413      	add	r3, r2
    2058:	009b      	lsls	r3, r3, #2
    205a:	440b      	add	r3, r1
    205c:	3314      	adds	r3, #20
    205e:	681a      	ldr	r2, [r3, #0]
    2060:	497a      	ldr	r1, [pc, #488]	; (224c <Clock_Ip_InitClock+0x288>)
    2062:	4613      	mov	r3, r2
    2064:	00db      	lsls	r3, r3, #3
    2066:	4413      	add	r3, r2
    2068:	440b      	add	r3, r1
    206a:	3301      	adds	r3, #1
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	461a      	mov	r2, r3
    2070:	4b79      	ldr	r3, [pc, #484]	; (2258 <Clock_Ip_InitClock+0x294>)
    2072:	5c9b      	ldrb	r3, [r3, r2]
    2074:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2076:	4979      	ldr	r1, [pc, #484]	; (225c <Clock_Ip_InitClock+0x298>)
    2078:	9a02      	ldr	r2, [sp, #8]
    207a:	4613      	mov	r3, r2
    207c:	005b      	lsls	r3, r3, #1
    207e:	4413      	add	r3, r2
    2080:	009b      	lsls	r3, r3, #2
    2082:	440b      	add	r3, r1
    2084:	6819      	ldr	r1, [r3, #0]
    2086:	9a03      	ldr	r2, [sp, #12]
    2088:	4613      	mov	r3, r2
    208a:	005b      	lsls	r3, r3, #1
    208c:	4413      	add	r3, r2
    208e:	009b      	lsls	r3, r3, #2
    2090:	3310      	adds	r3, #16
    2092:	9a01      	ldr	r2, [sp, #4]
    2094:	4413      	add	r3, r2
    2096:	3304      	adds	r3, #4
    2098:	4618      	mov	r0, r3
    209a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    209c:	9b03      	ldr	r3, [sp, #12]
    209e:	3301      	adds	r3, #1
    20a0:	9303      	str	r3, [sp, #12]
    20a2:	9b01      	ldr	r3, [sp, #4]
    20a4:	7a1b      	ldrb	r3, [r3, #8]
    20a6:	461a      	mov	r2, r3
    20a8:	9b03      	ldr	r3, [sp, #12]
    20aa:	4293      	cmp	r3, r2
    20ac:	d3cf      	bcc.n	204e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    20ae:	2300      	movs	r3, #0
    20b0:	9303      	str	r3, [sp, #12]
    20b2:	e02a      	b.n	210a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    20b4:	9901      	ldr	r1, [sp, #4]
    20b6:	9a03      	ldr	r2, [sp, #12]
    20b8:	4613      	mov	r3, r2
    20ba:	009b      	lsls	r3, r3, #2
    20bc:	4413      	add	r3, r2
    20be:	009b      	lsls	r3, r3, #2
    20c0:	440b      	add	r3, r1
    20c2:	332c      	adds	r3, #44	; 0x2c
    20c4:	681a      	ldr	r2, [r3, #0]
    20c6:	4961      	ldr	r1, [pc, #388]	; (224c <Clock_Ip_InitClock+0x288>)
    20c8:	4613      	mov	r3, r2
    20ca:	00db      	lsls	r3, r3, #3
    20cc:	4413      	add	r3, r2
    20ce:	440b      	add	r3, r1
    20d0:	3301      	adds	r3, #1
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	461a      	mov	r2, r3
    20d6:	4b62      	ldr	r3, [pc, #392]	; (2260 <Clock_Ip_InitClock+0x29c>)
    20d8:	5c9b      	ldrb	r3, [r3, r2]
    20da:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    20dc:	4961      	ldr	r1, [pc, #388]	; (2264 <Clock_Ip_InitClock+0x2a0>)
    20de:	9a02      	ldr	r2, [sp, #8]
    20e0:	4613      	mov	r3, r2
    20e2:	009b      	lsls	r3, r3, #2
    20e4:	4413      	add	r3, r2
    20e6:	009b      	lsls	r3, r3, #2
    20e8:	440b      	add	r3, r1
    20ea:	3304      	adds	r3, #4
    20ec:	6819      	ldr	r1, [r3, #0]
    20ee:	9a03      	ldr	r2, [sp, #12]
    20f0:	4613      	mov	r3, r2
    20f2:	009b      	lsls	r3, r3, #2
    20f4:	4413      	add	r3, r2
    20f6:	009b      	lsls	r3, r3, #2
    20f8:	3328      	adds	r3, #40	; 0x28
    20fa:	9a01      	ldr	r2, [sp, #4]
    20fc:	4413      	add	r3, r2
    20fe:	3304      	adds	r3, #4
    2100:	4618      	mov	r0, r3
    2102:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2104:	9b03      	ldr	r3, [sp, #12]
    2106:	3301      	adds	r3, #1
    2108:	9303      	str	r3, [sp, #12]
    210a:	9b01      	ldr	r3, [sp, #4]
    210c:	7a5b      	ldrb	r3, [r3, #9]
    210e:	461a      	mov	r2, r3
    2110:	9b03      	ldr	r3, [sp, #12]
    2112:	4293      	cmp	r3, r2
    2114:	d3ce      	bcc.n	20b4 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2116:	9801      	ldr	r0, [sp, #4]
    2118:	f7ff fdb0 	bl	1c7c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    211c:	2300      	movs	r3, #0
    211e:	9303      	str	r3, [sp, #12]
    2120:	e028      	b.n	2174 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2122:	9901      	ldr	r1, [sp, #4]
    2124:	9a03      	ldr	r2, [sp, #12]
    2126:	4613      	mov	r3, r2
    2128:	009b      	lsls	r3, r3, #2
    212a:	4413      	add	r3, r2
    212c:	009b      	lsls	r3, r3, #2
    212e:	440b      	add	r3, r1
    2130:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2134:	681a      	ldr	r2, [r3, #0]
    2136:	4945      	ldr	r1, [pc, #276]	; (224c <Clock_Ip_InitClock+0x288>)
    2138:	4613      	mov	r3, r2
    213a:	00db      	lsls	r3, r3, #3
    213c:	4413      	add	r3, r2
    213e:	440b      	add	r3, r1
    2140:	3301      	adds	r3, #1
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	461a      	mov	r2, r3
    2146:	4b48      	ldr	r3, [pc, #288]	; (2268 <Clock_Ip_InitClock+0x2a4>)
    2148:	5c9b      	ldrb	r3, [r3, r2]
    214a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    214c:	4a47      	ldr	r2, [pc, #284]	; (226c <Clock_Ip_InitClock+0x2a8>)
    214e:	9b02      	ldr	r3, [sp, #8]
    2150:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2154:	9a03      	ldr	r2, [sp, #12]
    2156:	4613      	mov	r3, r2
    2158:	009b      	lsls	r3, r3, #2
    215a:	4413      	add	r3, r2
    215c:	009b      	lsls	r3, r3, #2
    215e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2162:	9a01      	ldr	r2, [sp, #4]
    2164:	4413      	add	r3, r2
    2166:	3304      	adds	r3, #4
    2168:	9903      	ldr	r1, [sp, #12]
    216a:	4618      	mov	r0, r3
    216c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    216e:	9b03      	ldr	r3, [sp, #12]
    2170:	3301      	adds	r3, #1
    2172:	9303      	str	r3, [sp, #12]
    2174:	9b01      	ldr	r3, [sp, #4]
    2176:	7c5b      	ldrb	r3, [r3, #17]
    2178:	461a      	mov	r2, r3
    217a:	9b03      	ldr	r3, [sp, #12]
    217c:	4293      	cmp	r3, r2
    217e:	d3d0      	bcc.n	2122 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2180:	2300      	movs	r3, #0
    2182:	9303      	str	r3, [sp, #12]
    2184:	e026      	b.n	21d4 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2186:	9901      	ldr	r1, [sp, #4]
    2188:	9a03      	ldr	r2, [sp, #12]
    218a:	4613      	mov	r3, r2
    218c:	005b      	lsls	r3, r3, #1
    218e:	4413      	add	r3, r2
    2190:	009b      	lsls	r3, r3, #2
    2192:	440b      	add	r3, r1
    2194:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2198:	681a      	ldr	r2, [r3, #0]
    219a:	492c      	ldr	r1, [pc, #176]	; (224c <Clock_Ip_InitClock+0x288>)
    219c:	4613      	mov	r3, r2
    219e:	00db      	lsls	r3, r3, #3
    21a0:	4413      	add	r3, r2
    21a2:	440b      	add	r3, r1
    21a4:	3301      	adds	r3, #1
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	461a      	mov	r2, r3
    21aa:	4b31      	ldr	r3, [pc, #196]	; (2270 <Clock_Ip_InitClock+0x2ac>)
    21ac:	5c9b      	ldrb	r3, [r3, r2]
    21ae:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    21b0:	4a30      	ldr	r2, [pc, #192]	; (2274 <Clock_Ip_InitClock+0x2b0>)
    21b2:	9b02      	ldr	r3, [sp, #8]
    21b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    21b8:	9a03      	ldr	r2, [sp, #12]
    21ba:	4613      	mov	r3, r2
    21bc:	005b      	lsls	r3, r3, #1
    21be:	4413      	add	r3, r2
    21c0:	009b      	lsls	r3, r3, #2
    21c2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    21c6:	9a01      	ldr	r2, [sp, #4]
    21c8:	4413      	add	r3, r2
    21ca:	4618      	mov	r0, r3
    21cc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    21ce:	9b03      	ldr	r3, [sp, #12]
    21d0:	3301      	adds	r3, #1
    21d2:	9303      	str	r3, [sp, #12]
    21d4:	9b01      	ldr	r3, [sp, #4]
    21d6:	7b5b      	ldrb	r3, [r3, #13]
    21d8:	461a      	mov	r2, r3
    21da:	9b03      	ldr	r3, [sp, #12]
    21dc:	4293      	cmp	r3, r2
    21de:	d3d2      	bcc.n	2186 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    21e0:	2300      	movs	r3, #0
    21e2:	9303      	str	r3, [sp, #12]
    21e4:	e026      	b.n	2234 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    21e6:	9901      	ldr	r1, [sp, #4]
    21e8:	9a03      	ldr	r2, [sp, #12]
    21ea:	4613      	mov	r3, r2
    21ec:	005b      	lsls	r3, r3, #1
    21ee:	4413      	add	r3, r2
    21f0:	009b      	lsls	r3, r3, #2
    21f2:	440b      	add	r3, r1
    21f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    21f8:	681a      	ldr	r2, [r3, #0]
    21fa:	4914      	ldr	r1, [pc, #80]	; (224c <Clock_Ip_InitClock+0x288>)
    21fc:	4613      	mov	r3, r2
    21fe:	00db      	lsls	r3, r3, #3
    2200:	4413      	add	r3, r2
    2202:	440b      	add	r3, r1
    2204:	3301      	adds	r3, #1
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	461a      	mov	r2, r3
    220a:	4b1b      	ldr	r3, [pc, #108]	; (2278 <Clock_Ip_InitClock+0x2b4>)
    220c:	5c9b      	ldrb	r3, [r3, r2]
    220e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2210:	4a1a      	ldr	r2, [pc, #104]	; (227c <Clock_Ip_InitClock+0x2b8>)
    2212:	9b02      	ldr	r3, [sp, #8]
    2214:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2218:	9a03      	ldr	r2, [sp, #12]
    221a:	4613      	mov	r3, r2
    221c:	005b      	lsls	r3, r3, #1
    221e:	4413      	add	r3, r2
    2220:	009b      	lsls	r3, r3, #2
    2222:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2226:	9a01      	ldr	r2, [sp, #4]
    2228:	4413      	add	r3, r2
    222a:	4618      	mov	r0, r3
    222c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    222e:	9b03      	ldr	r3, [sp, #12]
    2230:	3301      	adds	r3, #1
    2232:	9303      	str	r3, [sp, #12]
    2234:	9b01      	ldr	r3, [sp, #4]
    2236:	7b1b      	ldrb	r3, [r3, #12]
    2238:	461a      	mov	r2, r3
    223a:	9b03      	ldr	r3, [sp, #12]
    223c:	4293      	cmp	r3, r2
    223e:	d3d2      	bcc.n	21e6 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2240:	2300      	movs	r3, #0
    2242:	9303      	str	r3, [sp, #12]
    2244:	e044      	b.n	22d0 <Clock_Ip_InitClock+0x30c>
    2246:	bf00      	nop
    2248:	1fff8b58 	.word	0x1fff8b58
    224c:	000104cc 	.word	0x000104cc
    2250:	000104bc 	.word	0x000104bc
    2254:	00010ac8 	.word	0x00010ac8
    2258:	0001045c 	.word	0x0001045c
    225c:	00010a8c 	.word	0x00010a8c
    2260:	0001044c 	.word	0x0001044c
    2264:	00010a20 	.word	0x00010a20
    2268:	000104ac 	.word	0x000104ac
    226c:	00010b00 	.word	0x00010b00
    2270:	0001043c 	.word	0x0001043c
    2274:	00010a18 	.word	0x00010a18
    2278:	0001042c 	.word	0x0001042c
    227c:	000109dc 	.word	0x000109dc
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2280:	9901      	ldr	r1, [sp, #4]
    2282:	9a03      	ldr	r2, [sp, #12]
    2284:	4613      	mov	r3, r2
    2286:	005b      	lsls	r3, r3, #1
    2288:	4413      	add	r3, r2
    228a:	009b      	lsls	r3, r3, #2
    228c:	440b      	add	r3, r1
    228e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2292:	681a      	ldr	r2, [r3, #0]
    2294:	49ac      	ldr	r1, [pc, #688]	; (2548 <Clock_Ip_InitClock+0x584>)
    2296:	4613      	mov	r3, r2
    2298:	00db      	lsls	r3, r3, #3
    229a:	4413      	add	r3, r2
    229c:	440b      	add	r3, r1
    229e:	3301      	adds	r3, #1
    22a0:	781b      	ldrb	r3, [r3, #0]
    22a2:	461a      	mov	r2, r3
    22a4:	4ba9      	ldr	r3, [pc, #676]	; (254c <Clock_Ip_InitClock+0x588>)
    22a6:	5c9b      	ldrb	r3, [r3, r2]
    22a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    22aa:	4aa9      	ldr	r2, [pc, #676]	; (2550 <Clock_Ip_InitClock+0x58c>)
    22ac:	9b02      	ldr	r3, [sp, #8]
    22ae:	00db      	lsls	r3, r3, #3
    22b0:	4413      	add	r3, r2
    22b2:	6859      	ldr	r1, [r3, #4]
    22b4:	9a03      	ldr	r2, [sp, #12]
    22b6:	4613      	mov	r3, r2
    22b8:	005b      	lsls	r3, r3, #1
    22ba:	4413      	add	r3, r2
    22bc:	009b      	lsls	r3, r3, #2
    22be:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22c2:	9a01      	ldr	r2, [sp, #4]
    22c4:	4413      	add	r3, r2
    22c6:	4618      	mov	r0, r3
    22c8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22ca:	9b03      	ldr	r3, [sp, #12]
    22cc:	3301      	adds	r3, #1
    22ce:	9303      	str	r3, [sp, #12]
    22d0:	9b01      	ldr	r3, [sp, #4]
    22d2:	7b5b      	ldrb	r3, [r3, #13]
    22d4:	461a      	mov	r2, r3
    22d6:	9b03      	ldr	r3, [sp, #12]
    22d8:	4293      	cmp	r3, r2
    22da:	d3d1      	bcc.n	2280 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    22dc:	2300      	movs	r3, #0
    22de:	9303      	str	r3, [sp, #12]
    22e0:	e029      	b.n	2336 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    22e2:	9901      	ldr	r1, [sp, #4]
    22e4:	9a03      	ldr	r2, [sp, #12]
    22e6:	4613      	mov	r3, r2
    22e8:	009b      	lsls	r3, r3, #2
    22ea:	4413      	add	r3, r2
    22ec:	00db      	lsls	r3, r3, #3
    22ee:	440b      	add	r3, r1
    22f0:	3340      	adds	r3, #64	; 0x40
    22f2:	681a      	ldr	r2, [r3, #0]
    22f4:	4994      	ldr	r1, [pc, #592]	; (2548 <Clock_Ip_InitClock+0x584>)
    22f6:	4613      	mov	r3, r2
    22f8:	00db      	lsls	r3, r3, #3
    22fa:	4413      	add	r3, r2
    22fc:	440b      	add	r3, r1
    22fe:	3301      	adds	r3, #1
    2300:	781b      	ldrb	r3, [r3, #0]
    2302:	461a      	mov	r2, r3
    2304:	4b93      	ldr	r3, [pc, #588]	; (2554 <Clock_Ip_InitClock+0x590>)
    2306:	5c9b      	ldrb	r3, [r3, r2]
    2308:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    230a:	4993      	ldr	r1, [pc, #588]	; (2558 <Clock_Ip_InitClock+0x594>)
    230c:	9a02      	ldr	r2, [sp, #8]
    230e:	4613      	mov	r3, r2
    2310:	009b      	lsls	r3, r3, #2
    2312:	4413      	add	r3, r2
    2314:	009b      	lsls	r3, r3, #2
    2316:	440b      	add	r3, r1
    2318:	3304      	adds	r3, #4
    231a:	6819      	ldr	r1, [r3, #0]
    231c:	9a03      	ldr	r2, [sp, #12]
    231e:	4613      	mov	r3, r2
    2320:	009b      	lsls	r3, r3, #2
    2322:	4413      	add	r3, r2
    2324:	00db      	lsls	r3, r3, #3
    2326:	3340      	adds	r3, #64	; 0x40
    2328:	9a01      	ldr	r2, [sp, #4]
    232a:	4413      	add	r3, r2
    232c:	4618      	mov	r0, r3
    232e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2330:	9b03      	ldr	r3, [sp, #12]
    2332:	3301      	adds	r3, #1
    2334:	9303      	str	r3, [sp, #12]
    2336:	9b01      	ldr	r3, [sp, #4]
    2338:	7a9b      	ldrb	r3, [r3, #10]
    233a:	461a      	mov	r2, r3
    233c:	9b03      	ldr	r3, [sp, #12]
    233e:	4293      	cmp	r3, r2
    2340:	d3cf      	bcc.n	22e2 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2342:	2300      	movs	r3, #0
    2344:	9303      	str	r3, [sp, #12]
    2346:	e029      	b.n	239c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2348:	9901      	ldr	r1, [sp, #4]
    234a:	9a03      	ldr	r2, [sp, #12]
    234c:	4613      	mov	r3, r2
    234e:	009b      	lsls	r3, r3, #2
    2350:	4413      	add	r3, r2
    2352:	009b      	lsls	r3, r3, #2
    2354:	440b      	add	r3, r1
    2356:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    235a:	681a      	ldr	r2, [r3, #0]
    235c:	497a      	ldr	r1, [pc, #488]	; (2548 <Clock_Ip_InitClock+0x584>)
    235e:	4613      	mov	r3, r2
    2360:	00db      	lsls	r3, r3, #3
    2362:	4413      	add	r3, r2
    2364:	440b      	add	r3, r1
    2366:	3301      	adds	r3, #1
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	461a      	mov	r2, r3
    236c:	4b7b      	ldr	r3, [pc, #492]	; (255c <Clock_Ip_InitClock+0x598>)
    236e:	5c9b      	ldrb	r3, [r3, r2]
    2370:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2372:	4a7b      	ldr	r2, [pc, #492]	; (2560 <Clock_Ip_InitClock+0x59c>)
    2374:	9b02      	ldr	r3, [sp, #8]
    2376:	011b      	lsls	r3, r3, #4
    2378:	4413      	add	r3, r2
    237a:	3304      	adds	r3, #4
    237c:	681c      	ldr	r4, [r3, #0]
    237e:	9a03      	ldr	r2, [sp, #12]
    2380:	4613      	mov	r3, r2
    2382:	009b      	lsls	r3, r3, #2
    2384:	4413      	add	r3, r2
    2386:	009b      	lsls	r3, r3, #2
    2388:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    238c:	9a01      	ldr	r2, [sp, #4]
    238e:	4413      	add	r3, r2
    2390:	9903      	ldr	r1, [sp, #12]
    2392:	4618      	mov	r0, r3
    2394:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2396:	9b03      	ldr	r3, [sp, #12]
    2398:	3301      	adds	r3, #1
    239a:	9303      	str	r3, [sp, #12]
    239c:	9b01      	ldr	r3, [sp, #4]
    239e:	7c9b      	ldrb	r3, [r3, #18]
    23a0:	461a      	mov	r2, r3
    23a2:	9b03      	ldr	r3, [sp, #12]
    23a4:	4293      	cmp	r3, r2
    23a6:	d3cf      	bcc.n	2348 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    23a8:	2300      	movs	r3, #0
    23aa:	9303      	str	r3, [sp, #12]
    23ac:	e02a      	b.n	2404 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    23ae:	9901      	ldr	r1, [sp, #4]
    23b0:	9a03      	ldr	r2, [sp, #12]
    23b2:	4613      	mov	r3, r2
    23b4:	009b      	lsls	r3, r3, #2
    23b6:	4413      	add	r3, r2
    23b8:	009b      	lsls	r3, r3, #2
    23ba:	440b      	add	r3, r1
    23bc:	332c      	adds	r3, #44	; 0x2c
    23be:	681a      	ldr	r2, [r3, #0]
    23c0:	4961      	ldr	r1, [pc, #388]	; (2548 <Clock_Ip_InitClock+0x584>)
    23c2:	4613      	mov	r3, r2
    23c4:	00db      	lsls	r3, r3, #3
    23c6:	4413      	add	r3, r2
    23c8:	440b      	add	r3, r1
    23ca:	3301      	adds	r3, #1
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	461a      	mov	r2, r3
    23d0:	4b64      	ldr	r3, [pc, #400]	; (2564 <Clock_Ip_InitClock+0x5a0>)
    23d2:	5c9b      	ldrb	r3, [r3, r2]
    23d4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    23d6:	4964      	ldr	r1, [pc, #400]	; (2568 <Clock_Ip_InitClock+0x5a4>)
    23d8:	9a02      	ldr	r2, [sp, #8]
    23da:	4613      	mov	r3, r2
    23dc:	009b      	lsls	r3, r3, #2
    23de:	4413      	add	r3, r2
    23e0:	009b      	lsls	r3, r3, #2
    23e2:	440b      	add	r3, r1
    23e4:	3308      	adds	r3, #8
    23e6:	6819      	ldr	r1, [r3, #0]
    23e8:	9a03      	ldr	r2, [sp, #12]
    23ea:	4613      	mov	r3, r2
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	4413      	add	r3, r2
    23f0:	009b      	lsls	r3, r3, #2
    23f2:	3328      	adds	r3, #40	; 0x28
    23f4:	9a01      	ldr	r2, [sp, #4]
    23f6:	4413      	add	r3, r2
    23f8:	3304      	adds	r3, #4
    23fa:	4618      	mov	r0, r3
    23fc:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    23fe:	9b03      	ldr	r3, [sp, #12]
    2400:	3301      	adds	r3, #1
    2402:	9303      	str	r3, [sp, #12]
    2404:	9b01      	ldr	r3, [sp, #4]
    2406:	7a5b      	ldrb	r3, [r3, #9]
    2408:	461a      	mov	r2, r3
    240a:	9b03      	ldr	r3, [sp, #12]
    240c:	4293      	cmp	r3, r2
    240e:	d3ce      	bcc.n	23ae <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2410:	2300      	movs	r3, #0
    2412:	9303      	str	r3, [sp, #12]
    2414:	e029      	b.n	246a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2416:	9901      	ldr	r1, [sp, #4]
    2418:	9a03      	ldr	r2, [sp, #12]
    241a:	4613      	mov	r3, r2
    241c:	009b      	lsls	r3, r3, #2
    241e:	4413      	add	r3, r2
    2420:	00db      	lsls	r3, r3, #3
    2422:	440b      	add	r3, r1
    2424:	3340      	adds	r3, #64	; 0x40
    2426:	681a      	ldr	r2, [r3, #0]
    2428:	4947      	ldr	r1, [pc, #284]	; (2548 <Clock_Ip_InitClock+0x584>)
    242a:	4613      	mov	r3, r2
    242c:	00db      	lsls	r3, r3, #3
    242e:	4413      	add	r3, r2
    2430:	440b      	add	r3, r1
    2432:	3301      	adds	r3, #1
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	461a      	mov	r2, r3
    2438:	4b46      	ldr	r3, [pc, #280]	; (2554 <Clock_Ip_InitClock+0x590>)
    243a:	5c9b      	ldrb	r3, [r3, r2]
    243c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    243e:	4946      	ldr	r1, [pc, #280]	; (2558 <Clock_Ip_InitClock+0x594>)
    2440:	9a02      	ldr	r2, [sp, #8]
    2442:	4613      	mov	r3, r2
    2444:	009b      	lsls	r3, r3, #2
    2446:	4413      	add	r3, r2
    2448:	009b      	lsls	r3, r3, #2
    244a:	440b      	add	r3, r1
    244c:	330c      	adds	r3, #12
    244e:	6819      	ldr	r1, [r3, #0]
    2450:	9a03      	ldr	r2, [sp, #12]
    2452:	4613      	mov	r3, r2
    2454:	009b      	lsls	r3, r3, #2
    2456:	4413      	add	r3, r2
    2458:	00db      	lsls	r3, r3, #3
    245a:	3340      	adds	r3, #64	; 0x40
    245c:	9a01      	ldr	r2, [sp, #4]
    245e:	4413      	add	r3, r2
    2460:	4618      	mov	r0, r3
    2462:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2464:	9b03      	ldr	r3, [sp, #12]
    2466:	3301      	adds	r3, #1
    2468:	9303      	str	r3, [sp, #12]
    246a:	9b01      	ldr	r3, [sp, #4]
    246c:	7a9b      	ldrb	r3, [r3, #10]
    246e:	461a      	mov	r2, r3
    2470:	9b03      	ldr	r3, [sp, #12]
    2472:	4293      	cmp	r3, r2
    2474:	d3cf      	bcc.n	2416 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2476:	2300      	movs	r3, #0
    2478:	9303      	str	r3, [sp, #12]
    247a:	e025      	b.n	24c8 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    247c:	9a01      	ldr	r2, [sp, #4]
    247e:	9b03      	ldr	r3, [sp, #12]
    2480:	3324      	adds	r3, #36	; 0x24
    2482:	011b      	lsls	r3, r3, #4
    2484:	4413      	add	r3, r2
    2486:	3304      	adds	r3, #4
    2488:	681a      	ldr	r2, [r3, #0]
    248a:	492f      	ldr	r1, [pc, #188]	; (2548 <Clock_Ip_InitClock+0x584>)
    248c:	4613      	mov	r3, r2
    248e:	00db      	lsls	r3, r3, #3
    2490:	4413      	add	r3, r2
    2492:	440b      	add	r3, r1
    2494:	3301      	adds	r3, #1
    2496:	781b      	ldrb	r3, [r3, #0]
    2498:	461a      	mov	r2, r3
    249a:	4b34      	ldr	r3, [pc, #208]	; (256c <Clock_Ip_InitClock+0x5a8>)
    249c:	5c9b      	ldrb	r3, [r3, r2]
    249e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    24a0:	4933      	ldr	r1, [pc, #204]	; (2570 <Clock_Ip_InitClock+0x5ac>)
    24a2:	9a02      	ldr	r2, [sp, #8]
    24a4:	4613      	mov	r3, r2
    24a6:	005b      	lsls	r3, r3, #1
    24a8:	4413      	add	r3, r2
    24aa:	009b      	lsls	r3, r3, #2
    24ac:	440b      	add	r3, r1
    24ae:	3304      	adds	r3, #4
    24b0:	681b      	ldr	r3, [r3, #0]
    24b2:	9a03      	ldr	r2, [sp, #12]
    24b4:	3224      	adds	r2, #36	; 0x24
    24b6:	0112      	lsls	r2, r2, #4
    24b8:	9901      	ldr	r1, [sp, #4]
    24ba:	440a      	add	r2, r1
    24bc:	3204      	adds	r2, #4
    24be:	4610      	mov	r0, r2
    24c0:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    24c2:	9b03      	ldr	r3, [sp, #12]
    24c4:	3301      	adds	r3, #1
    24c6:	9303      	str	r3, [sp, #12]
    24c8:	9b01      	ldr	r3, [sp, #4]
    24ca:	7b9b      	ldrb	r3, [r3, #14]
    24cc:	461a      	mov	r2, r3
    24ce:	9b03      	ldr	r3, [sp, #12]
    24d0:	4293      	cmp	r3, r2
    24d2:	d3d3      	bcc.n	247c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    24d4:	4b27      	ldr	r3, [pc, #156]	; (2574 <Clock_Ip_InitClock+0x5b0>)
    24d6:	2200      	movs	r2, #0
    24d8:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    24da:	4b26      	ldr	r3, [pc, #152]	; (2574 <Clock_Ip_InitClock+0x5b0>)
    24dc:	2200      	movs	r2, #0
    24de:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    24e0:	4b24      	ldr	r3, [pc, #144]	; (2574 <Clock_Ip_InitClock+0x5b0>)
    24e2:	2201      	movs	r2, #1
    24e4:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    24e6:	4b23      	ldr	r3, [pc, #140]	; (2574 <Clock_Ip_InitClock+0x5b0>)
    24e8:	2200      	movs	r2, #0
    24ea:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    24ec:	f000 fa9c 	bl	2a28 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    24f0:	2300      	movs	r3, #0
    24f2:	9303      	str	r3, [sp, #12]
    24f4:	e04c      	b.n	2590 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    24f6:	9a01      	ldr	r2, [sp, #4]
    24f8:	9b03      	ldr	r3, [sp, #12]
    24fa:	330d      	adds	r3, #13
    24fc:	00db      	lsls	r3, r3, #3
    24fe:	4413      	add	r3, r2
    2500:	685b      	ldr	r3, [r3, #4]
    2502:	4a1d      	ldr	r2, [pc, #116]	; (2578 <Clock_Ip_InitClock+0x5b4>)
    2504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2508:	2b03      	cmp	r3, #3
    250a:	d03b      	beq.n	2584 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	9a03      	ldr	r2, [sp, #12]
    2510:	320d      	adds	r2, #13
    2512:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2516:	490c      	ldr	r1, [pc, #48]	; (2548 <Clock_Ip_InitClock+0x584>)
    2518:	4613      	mov	r3, r2
    251a:	00db      	lsls	r3, r3, #3
    251c:	4413      	add	r3, r2
    251e:	440b      	add	r3, r1
    2520:	3301      	adds	r3, #1
    2522:	781b      	ldrb	r3, [r3, #0]
    2524:	461a      	mov	r2, r3
    2526:	4b15      	ldr	r3, [pc, #84]	; (257c <Clock_Ip_InitClock+0x5b8>)
    2528:	5c9b      	ldrb	r3, [r3, r2]
    252a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    252c:	4a14      	ldr	r2, [pc, #80]	; (2580 <Clock_Ip_InitClock+0x5bc>)
    252e:	9b02      	ldr	r3, [sp, #8]
    2530:	00db      	lsls	r3, r3, #3
    2532:	4413      	add	r3, r2
    2534:	685b      	ldr	r3, [r3, #4]
    2536:	9a03      	ldr	r2, [sp, #12]
    2538:	320d      	adds	r2, #13
    253a:	00d2      	lsls	r2, r2, #3
    253c:	9901      	ldr	r1, [sp, #4]
    253e:	440a      	add	r2, r1
    2540:	4610      	mov	r0, r2
    2542:	4798      	blx	r3
    2544:	e021      	b.n	258a <Clock_Ip_InitClock+0x5c6>
    2546:	bf00      	nop
    2548:	000104cc 	.word	0x000104cc
    254c:	0001043c 	.word	0x0001043c
    2550:	00010a18 	.word	0x00010a18
    2554:	0001048c 	.word	0x0001048c
    2558:	00010ad8 	.word	0x00010ad8
    255c:	000104bc 	.word	0x000104bc
    2560:	00010ac8 	.word	0x00010ac8
    2564:	0001044c 	.word	0x0001044c
    2568:	00010a20 	.word	0x00010a20
    256c:	0001047c 	.word	0x0001047c
    2570:	00010a48 	.word	0x00010a48
    2574:	1fff8b60 	.word	0x1fff8b60
    2578:	00010918 	.word	0x00010918
    257c:	0001049c 	.word	0x0001049c
    2580:	00010b04 	.word	0x00010b04
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2584:	4b3a      	ldr	r3, [pc, #232]	; (2670 <Clock_Ip_InitClock+0x6ac>)
    2586:	2201      	movs	r2, #1
    2588:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    258a:	9b03      	ldr	r3, [sp, #12]
    258c:	3301      	adds	r3, #1
    258e:	9303      	str	r3, [sp, #12]
    2590:	9b01      	ldr	r3, [sp, #4]
    2592:	7adb      	ldrb	r3, [r3, #11]
    2594:	461a      	mov	r2, r3
    2596:	9b03      	ldr	r3, [sp, #12]
    2598:	4293      	cmp	r3, r2
    259a:	d3ac      	bcc.n	24f6 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    259c:	4b34      	ldr	r3, [pc, #208]	; (2670 <Clock_Ip_InitClock+0x6ac>)
    259e:	781b      	ldrb	r3, [r3, #0]
    25a0:	f083 0301 	eor.w	r3, r3, #1
    25a4:	b2db      	uxtb	r3, r3
    25a6:	2b00      	cmp	r3, #0
    25a8:	d05e      	beq.n	2668 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    25aa:	2300      	movs	r3, #0
    25ac:	9303      	str	r3, [sp, #12]
    25ae:	e01f      	b.n	25f0 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    25b0:	9a01      	ldr	r2, [sp, #4]
    25b2:	9b03      	ldr	r3, [sp, #12]
    25b4:	334e      	adds	r3, #78	; 0x4e
    25b6:	00db      	lsls	r3, r3, #3
    25b8:	4413      	add	r3, r2
    25ba:	685a      	ldr	r2, [r3, #4]
    25bc:	492d      	ldr	r1, [pc, #180]	; (2674 <Clock_Ip_InitClock+0x6b0>)
    25be:	4613      	mov	r3, r2
    25c0:	00db      	lsls	r3, r3, #3
    25c2:	4413      	add	r3, r2
    25c4:	440b      	add	r3, r1
    25c6:	3301      	adds	r3, #1
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	461a      	mov	r2, r3
    25cc:	4b2a      	ldr	r3, [pc, #168]	; (2678 <Clock_Ip_InitClock+0x6b4>)
    25ce:	5c9b      	ldrb	r3, [r3, r2]
    25d0:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    25d2:	4a2a      	ldr	r2, [pc, #168]	; (267c <Clock_Ip_InitClock+0x6b8>)
    25d4:	9b02      	ldr	r3, [sp, #8]
    25d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25da:	9a03      	ldr	r2, [sp, #12]
    25dc:	324e      	adds	r2, #78	; 0x4e
    25de:	00d2      	lsls	r2, r2, #3
    25e0:	9901      	ldr	r1, [sp, #4]
    25e2:	440a      	add	r2, r1
    25e4:	3204      	adds	r2, #4
    25e6:	4610      	mov	r0, r2
    25e8:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    25ea:	9b03      	ldr	r3, [sp, #12]
    25ec:	3301      	adds	r3, #1
    25ee:	9303      	str	r3, [sp, #12]
    25f0:	9b01      	ldr	r3, [sp, #4]
    25f2:	7c1b      	ldrb	r3, [r3, #16]
    25f4:	461a      	mov	r2, r3
    25f6:	9b03      	ldr	r3, [sp, #12]
    25f8:	4293      	cmp	r3, r2
    25fa:	d3d9      	bcc.n	25b0 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    25fc:	2300      	movs	r3, #0
    25fe:	9303      	str	r3, [sp, #12]
    2600:	e028      	b.n	2654 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2602:	9901      	ldr	r1, [sp, #4]
    2604:	9a03      	ldr	r2, [sp, #12]
    2606:	4613      	mov	r3, r2
    2608:	009b      	lsls	r3, r3, #2
    260a:	4413      	add	r3, r2
    260c:	009b      	lsls	r3, r3, #2
    260e:	440b      	add	r3, r1
    2610:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2614:	681a      	ldr	r2, [r3, #0]
    2616:	4917      	ldr	r1, [pc, #92]	; (2674 <Clock_Ip_InitClock+0x6b0>)
    2618:	4613      	mov	r3, r2
    261a:	00db      	lsls	r3, r3, #3
    261c:	4413      	add	r3, r2
    261e:	440b      	add	r3, r1
    2620:	3301      	adds	r3, #1
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	461a      	mov	r2, r3
    2626:	4b16      	ldr	r3, [pc, #88]	; (2680 <Clock_Ip_InitClock+0x6bc>)
    2628:	5c9b      	ldrb	r3, [r3, r2]
    262a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    262c:	4a15      	ldr	r2, [pc, #84]	; (2684 <Clock_Ip_InitClock+0x6c0>)
    262e:	9b02      	ldr	r3, [sp, #8]
    2630:	011b      	lsls	r3, r3, #4
    2632:	4413      	add	r3, r2
    2634:	330c      	adds	r3, #12
    2636:	6819      	ldr	r1, [r3, #0]
    2638:	9a03      	ldr	r2, [sp, #12]
    263a:	4613      	mov	r3, r2
    263c:	009b      	lsls	r3, r3, #2
    263e:	4413      	add	r3, r2
    2640:	009b      	lsls	r3, r3, #2
    2642:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2646:	9a01      	ldr	r2, [sp, #4]
    2648:	4413      	add	r3, r2
    264a:	4618      	mov	r0, r3
    264c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    264e:	9b03      	ldr	r3, [sp, #12]
    2650:	3301      	adds	r3, #1
    2652:	9303      	str	r3, [sp, #12]
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	7c9b      	ldrb	r3, [r3, #18]
    2658:	461a      	mov	r2, r3
    265a:	9b03      	ldr	r3, [sp, #12]
    265c:	4293      	cmp	r3, r2
    265e:	d3d0      	bcc.n	2602 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2660:	2104      	movs	r1, #4
    2662:	9801      	ldr	r0, [sp, #4]
    2664:	f002 ff48 	bl	54f8 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2668:	bf00      	nop
    266a:	b004      	add	sp, #16
    266c:	bd10      	pop	{r4, pc}
    266e:	bf00      	nop
    2670:	1fff8b60 	.word	0x1fff8b60
    2674:	000104cc 	.word	0x000104cc
    2678:	0001046c 	.word	0x0001046c
    267c:	00010a54 	.word	0x00010a54
    2680:	000104bc 	.word	0x000104bc
    2684:	00010ac8 	.word	0x00010ac8

00002688 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2688:	b500      	push	{lr}
    268a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    268c:	2302      	movs	r3, #2
    268e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2690:	2300      	movs	r3, #0
    2692:	9304      	str	r3, [sp, #16]
    2694:	e02c      	b.n	26f0 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2696:	4a36      	ldr	r2, [pc, #216]	; (2770 <Clock_Ip_GetPllStatus+0xe8>)
    2698:	9b04      	ldr	r3, [sp, #16]
    269a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    269e:	4935      	ldr	r1, [pc, #212]	; (2774 <Clock_Ip_GetPllStatus+0xec>)
    26a0:	4613      	mov	r3, r2
    26a2:	00db      	lsls	r3, r3, #3
    26a4:	4413      	add	r3, r2
    26a6:	440b      	add	r3, r1
    26a8:	3301      	adds	r3, #1
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	461a      	mov	r2, r3
    26ae:	4b32      	ldr	r3, [pc, #200]	; (2778 <Clock_Ip_GetPllStatus+0xf0>)
    26b0:	5c9b      	ldrb	r3, [r3, r2]
    26b2:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    26b4:	4931      	ldr	r1, [pc, #196]	; (277c <Clock_Ip_GetPllStatus+0xf4>)
    26b6:	9a03      	ldr	r2, [sp, #12]
    26b8:	4613      	mov	r3, r2
    26ba:	009b      	lsls	r3, r3, #2
    26bc:	4413      	add	r3, r2
    26be:	009b      	lsls	r3, r3, #2
    26c0:	440b      	add	r3, r1
    26c2:	3308      	adds	r3, #8
    26c4:	681b      	ldr	r3, [r3, #0]
    26c6:	492a      	ldr	r1, [pc, #168]	; (2770 <Clock_Ip_GetPllStatus+0xe8>)
    26c8:	9a04      	ldr	r2, [sp, #16]
    26ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    26ce:	4610      	mov	r0, r2
    26d0:	4798      	blx	r3
    26d2:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    26d4:	9b02      	ldr	r3, [sp, #8]
    26d6:	2b01      	cmp	r3, #1
    26d8:	d102      	bne.n	26e0 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    26da:	2301      	movs	r3, #1
    26dc:	9305      	str	r3, [sp, #20]
            break;
    26de:	e00d      	b.n	26fc <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    26e0:	9b02      	ldr	r3, [sp, #8]
    26e2:	2b02      	cmp	r3, #2
    26e4:	d101      	bne.n	26ea <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    26e6:	2300      	movs	r3, #0
    26e8:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    26ea:	9b04      	ldr	r3, [sp, #16]
    26ec:	3301      	adds	r3, #1
    26ee:	9304      	str	r3, [sp, #16]
    26f0:	4b23      	ldr	r3, [pc, #140]	; (2780 <Clock_Ip_GetPllStatus+0xf8>)
    26f2:	789b      	ldrb	r3, [r3, #2]
    26f4:	461a      	mov	r2, r3
    26f6:	9b04      	ldr	r3, [sp, #16]
    26f8:	4293      	cmp	r3, r2
    26fa:	d3cc      	bcc.n	2696 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    26fc:	9b05      	ldr	r3, [sp, #20]
    26fe:	2b00      	cmp	r3, #0
    2700:	d130      	bne.n	2764 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2702:	2300      	movs	r3, #0
    2704:	9304      	str	r3, [sp, #16]
    2706:	e027      	b.n	2758 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2708:	4a1e      	ldr	r2, [pc, #120]	; (2784 <Clock_Ip_GetPllStatus+0xfc>)
    270a:	9b04      	ldr	r3, [sp, #16]
    270c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2710:	4918      	ldr	r1, [pc, #96]	; (2774 <Clock_Ip_GetPllStatus+0xec>)
    2712:	4613      	mov	r3, r2
    2714:	00db      	lsls	r3, r3, #3
    2716:	4413      	add	r3, r2
    2718:	440b      	add	r3, r1
    271a:	3301      	adds	r3, #1
    271c:	781b      	ldrb	r3, [r3, #0]
    271e:	461a      	mov	r2, r3
    2720:	4b19      	ldr	r3, [pc, #100]	; (2788 <Clock_Ip_GetPllStatus+0x100>)
    2722:	5c9b      	ldrb	r3, [r3, r2]
    2724:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2726:	4919      	ldr	r1, [pc, #100]	; (278c <Clock_Ip_GetPllStatus+0x104>)
    2728:	9a03      	ldr	r2, [sp, #12]
    272a:	4613      	mov	r3, r2
    272c:	005b      	lsls	r3, r3, #1
    272e:	4413      	add	r3, r2
    2730:	009b      	lsls	r3, r3, #2
    2732:	440b      	add	r3, r1
    2734:	3308      	adds	r3, #8
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	4912      	ldr	r1, [pc, #72]	; (2784 <Clock_Ip_GetPllStatus+0xfc>)
    273a:	9a04      	ldr	r2, [sp, #16]
    273c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2740:	4610      	mov	r0, r2
    2742:	4798      	blx	r3
    2744:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2746:	9b01      	ldr	r3, [sp, #4]
    2748:	2b01      	cmp	r3, #1
    274a:	d102      	bne.n	2752 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    274c:	2301      	movs	r3, #1
    274e:	9305      	str	r3, [sp, #20]
                break;
    2750:	e008      	b.n	2764 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2752:	9b04      	ldr	r3, [sp, #16]
    2754:	3301      	adds	r3, #1
    2756:	9304      	str	r3, [sp, #16]
    2758:	4b09      	ldr	r3, [pc, #36]	; (2780 <Clock_Ip_GetPllStatus+0xf8>)
    275a:	78db      	ldrb	r3, [r3, #3]
    275c:	461a      	mov	r2, r3
    275e:	9b04      	ldr	r3, [sp, #16]
    2760:	4293      	cmp	r3, r2
    2762:	d3d1      	bcc.n	2708 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2764:	9b05      	ldr	r3, [sp, #20]
}
    2766:	4618      	mov	r0, r3
    2768:	b007      	add	sp, #28
    276a:	f85d fb04 	ldr.w	pc, [sp], #4
    276e:	bf00      	nop
    2770:	000109d4 	.word	0x000109d4
    2774:	000104cc 	.word	0x000104cc
    2778:	0001048c 	.word	0x0001048c
    277c:	00010ad8 	.word	0x00010ad8
    2780:	1fff8b60 	.word	0x1fff8b60
    2784:	000109d8 	.word	0x000109d8
    2788:	0001047c 	.word	0x0001047c
    278c:	00010a48 	.word	0x00010a48

00002790 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2790:	b500      	push	{lr}
    2792:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2794:	4b55      	ldr	r3, [pc, #340]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	2b00      	cmp	r3, #0
    279a:	f000 80a2 	beq.w	28e2 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    279e:	2300      	movs	r3, #0
    27a0:	9301      	str	r3, [sp, #4]
    27a2:	e02c      	b.n	27fe <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    27a4:	4b51      	ldr	r3, [pc, #324]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    27a6:	681a      	ldr	r2, [r3, #0]
    27a8:	9b01      	ldr	r3, [sp, #4]
    27aa:	330d      	adds	r3, #13
    27ac:	00db      	lsls	r3, r3, #3
    27ae:	4413      	add	r3, r2
    27b0:	685b      	ldr	r3, [r3, #4]
    27b2:	4a4f      	ldr	r2, [pc, #316]	; (28f0 <Clock_Ip_DistributePll+0x160>)
    27b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27b8:	2b03      	cmp	r3, #3
    27ba:	d11d      	bne.n	27f8 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    27bc:	4b4b      	ldr	r3, [pc, #300]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	9a01      	ldr	r2, [sp, #4]
    27c2:	320d      	adds	r2, #13
    27c4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    27c8:	494a      	ldr	r1, [pc, #296]	; (28f4 <Clock_Ip_DistributePll+0x164>)
    27ca:	4613      	mov	r3, r2
    27cc:	00db      	lsls	r3, r3, #3
    27ce:	4413      	add	r3, r2
    27d0:	440b      	add	r3, r1
    27d2:	3301      	adds	r3, #1
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	461a      	mov	r2, r3
    27d8:	4b47      	ldr	r3, [pc, #284]	; (28f8 <Clock_Ip_DistributePll+0x168>)
    27da:	5c9b      	ldrb	r3, [r3, r2]
    27dc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    27de:	4a47      	ldr	r2, [pc, #284]	; (28fc <Clock_Ip_DistributePll+0x16c>)
    27e0:	9b00      	ldr	r3, [sp, #0]
    27e2:	00db      	lsls	r3, r3, #3
    27e4:	4413      	add	r3, r2
    27e6:	685b      	ldr	r3, [r3, #4]
    27e8:	4a40      	ldr	r2, [pc, #256]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    27ea:	6811      	ldr	r1, [r2, #0]
    27ec:	9a01      	ldr	r2, [sp, #4]
    27ee:	320d      	adds	r2, #13
    27f0:	00d2      	lsls	r2, r2, #3
    27f2:	440a      	add	r2, r1
    27f4:	4610      	mov	r0, r2
    27f6:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    27f8:	9b01      	ldr	r3, [sp, #4]
    27fa:	3301      	adds	r3, #1
    27fc:	9301      	str	r3, [sp, #4]
    27fe:	4b3b      	ldr	r3, [pc, #236]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	7adb      	ldrb	r3, [r3, #11]
    2804:	461a      	mov	r2, r3
    2806:	9b01      	ldr	r3, [sp, #4]
    2808:	4293      	cmp	r3, r2
    280a:	d3cb      	bcc.n	27a4 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    280c:	4b3c      	ldr	r3, [pc, #240]	; (2900 <Clock_Ip_DistributePll+0x170>)
    280e:	781b      	ldrb	r3, [r3, #0]
    2810:	2b00      	cmp	r3, #0
    2812:	d066      	beq.n	28e2 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2814:	2300      	movs	r3, #0
    2816:	9301      	str	r3, [sp, #4]
    2818:	e021      	b.n	285e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    281a:	4b34      	ldr	r3, [pc, #208]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    281c:	681a      	ldr	r2, [r3, #0]
    281e:	9b01      	ldr	r3, [sp, #4]
    2820:	334e      	adds	r3, #78	; 0x4e
    2822:	00db      	lsls	r3, r3, #3
    2824:	4413      	add	r3, r2
    2826:	685a      	ldr	r2, [r3, #4]
    2828:	4932      	ldr	r1, [pc, #200]	; (28f4 <Clock_Ip_DistributePll+0x164>)
    282a:	4613      	mov	r3, r2
    282c:	00db      	lsls	r3, r3, #3
    282e:	4413      	add	r3, r2
    2830:	440b      	add	r3, r1
    2832:	3301      	adds	r3, #1
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	461a      	mov	r2, r3
    2838:	4b32      	ldr	r3, [pc, #200]	; (2904 <Clock_Ip_DistributePll+0x174>)
    283a:	5c9b      	ldrb	r3, [r3, r2]
    283c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    283e:	4a32      	ldr	r2, [pc, #200]	; (2908 <Clock_Ip_DistributePll+0x178>)
    2840:	9b00      	ldr	r3, [sp, #0]
    2842:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2846:	4a29      	ldr	r2, [pc, #164]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    2848:	6811      	ldr	r1, [r2, #0]
    284a:	9a01      	ldr	r2, [sp, #4]
    284c:	324e      	adds	r2, #78	; 0x4e
    284e:	00d2      	lsls	r2, r2, #3
    2850:	440a      	add	r2, r1
    2852:	3204      	adds	r2, #4
    2854:	4610      	mov	r0, r2
    2856:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2858:	9b01      	ldr	r3, [sp, #4]
    285a:	3301      	adds	r3, #1
    285c:	9301      	str	r3, [sp, #4]
    285e:	4b23      	ldr	r3, [pc, #140]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	7c1b      	ldrb	r3, [r3, #16]
    2864:	461a      	mov	r2, r3
    2866:	9b01      	ldr	r3, [sp, #4]
    2868:	4293      	cmp	r3, r2
    286a:	d3d6      	bcc.n	281a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    286c:	2300      	movs	r3, #0
    286e:	9301      	str	r3, [sp, #4]
    2870:	e02a      	b.n	28c8 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2872:	4b1e      	ldr	r3, [pc, #120]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    2874:	6819      	ldr	r1, [r3, #0]
    2876:	9a01      	ldr	r2, [sp, #4]
    2878:	4613      	mov	r3, r2
    287a:	009b      	lsls	r3, r3, #2
    287c:	4413      	add	r3, r2
    287e:	009b      	lsls	r3, r3, #2
    2880:	440b      	add	r3, r1
    2882:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2886:	681a      	ldr	r2, [r3, #0]
    2888:	491a      	ldr	r1, [pc, #104]	; (28f4 <Clock_Ip_DistributePll+0x164>)
    288a:	4613      	mov	r3, r2
    288c:	00db      	lsls	r3, r3, #3
    288e:	4413      	add	r3, r2
    2890:	440b      	add	r3, r1
    2892:	3301      	adds	r3, #1
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	461a      	mov	r2, r3
    2898:	4b1c      	ldr	r3, [pc, #112]	; (290c <Clock_Ip_DistributePll+0x17c>)
    289a:	5c9b      	ldrb	r3, [r3, r2]
    289c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    289e:	4a1c      	ldr	r2, [pc, #112]	; (2910 <Clock_Ip_DistributePll+0x180>)
    28a0:	9b00      	ldr	r3, [sp, #0]
    28a2:	011b      	lsls	r3, r3, #4
    28a4:	4413      	add	r3, r2
    28a6:	330c      	adds	r3, #12
    28a8:	6819      	ldr	r1, [r3, #0]
    28aa:	4b10      	ldr	r3, [pc, #64]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    28ac:	6818      	ldr	r0, [r3, #0]
    28ae:	9a01      	ldr	r2, [sp, #4]
    28b0:	4613      	mov	r3, r2
    28b2:	009b      	lsls	r3, r3, #2
    28b4:	4413      	add	r3, r2
    28b6:	009b      	lsls	r3, r3, #2
    28b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    28bc:	4403      	add	r3, r0
    28be:	4618      	mov	r0, r3
    28c0:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    28c2:	9b01      	ldr	r3, [sp, #4]
    28c4:	3301      	adds	r3, #1
    28c6:	9301      	str	r3, [sp, #4]
    28c8:	4b08      	ldr	r3, [pc, #32]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    28ca:	681b      	ldr	r3, [r3, #0]
    28cc:	7c9b      	ldrb	r3, [r3, #18]
    28ce:	461a      	mov	r2, r3
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	4293      	cmp	r3, r2
    28d4:	d3cd      	bcc.n	2872 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <Clock_Ip_DistributePll+0x15c>)
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	2104      	movs	r1, #4
    28dc:	4618      	mov	r0, r3
    28de:	f002 fe0b 	bl	54f8 <Clock_Ip_Command>
        }
    }
}
    28e2:	bf00      	nop
    28e4:	b003      	add	sp, #12
    28e6:	f85d fb04 	ldr.w	pc, [sp], #4
    28ea:	bf00      	nop
    28ec:	1fff8b58 	.word	0x1fff8b58
    28f0:	00010918 	.word	0x00010918
    28f4:	000104cc 	.word	0x000104cc
    28f8:	0001049c 	.word	0x0001049c
    28fc:	00010b04 	.word	0x00010b04
    2900:	1fff8b60 	.word	0x1fff8b60
    2904:	0001046c 	.word	0x0001046c
    2908:	00010a54 	.word	0x00010a54
    290c:	000104bc 	.word	0x000104bc
    2910:	00010ac8 	.word	0x00010ac8

00002914 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2914:	b500      	push	{lr}
    2916:	b085      	sub	sp, #20
    2918:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    291a:	490c      	ldr	r1, [pc, #48]	; (294c <Clock_Ip_DisableClockMonitor+0x38>)
    291c:	9a01      	ldr	r2, [sp, #4]
    291e:	4613      	mov	r3, r2
    2920:	00db      	lsls	r3, r3, #3
    2922:	4413      	add	r3, r2
    2924:	440b      	add	r3, r1
    2926:	3301      	adds	r3, #1
    2928:	781b      	ldrb	r3, [r3, #0]
    292a:	461a      	mov	r2, r3
    292c:	4b08      	ldr	r3, [pc, #32]	; (2950 <Clock_Ip_DisableClockMonitor+0x3c>)
    292e:	5c9b      	ldrb	r3, [r3, r2]
    2930:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2932:	4a08      	ldr	r2, [pc, #32]	; (2954 <Clock_Ip_DisableClockMonitor+0x40>)
    2934:	9b03      	ldr	r3, [sp, #12]
    2936:	011b      	lsls	r3, r3, #4
    2938:	4413      	add	r3, r2
    293a:	3308      	adds	r3, #8
    293c:	681b      	ldr	r3, [r3, #0]
    293e:	9801      	ldr	r0, [sp, #4]
    2940:	4798      	blx	r3
}
    2942:	bf00      	nop
    2944:	b005      	add	sp, #20
    2946:	f85d fb04 	ldr.w	pc, [sp], #4
    294a:	bf00      	nop
    294c:	000104cc 	.word	0x000104cc
    2950:	000104bc 	.word	0x000104bc
    2954:	00010ac8 	.word	0x00010ac8

00002958 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2958:	b082      	sub	sp, #8
    295a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    295c:	4a02      	ldr	r2, [pc, #8]	; (2968 <Clock_Ip_InstallNotificationsCallback+0x10>)
    295e:	9b01      	ldr	r3, [sp, #4]
    2960:	6013      	str	r3, [r2, #0]
}
    2962:	bf00      	nop
    2964:	b002      	add	sp, #8
    2966:	4770      	bx	lr
    2968:	1fff8b14 	.word	0x1fff8b14

0000296c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    296c:	b500      	push	{lr}
    296e:	b085      	sub	sp, #20
    2970:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2972:	490c      	ldr	r1, [pc, #48]	; (29a4 <Clock_Ip_DisableModuleClock+0x38>)
    2974:	9a01      	ldr	r2, [sp, #4]
    2976:	4613      	mov	r3, r2
    2978:	00db      	lsls	r3, r3, #3
    297a:	4413      	add	r3, r2
    297c:	440b      	add	r3, r1
    297e:	3301      	adds	r3, #1
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	461a      	mov	r2, r3
    2984:	4b08      	ldr	r3, [pc, #32]	; (29a8 <Clock_Ip_DisableModuleClock+0x3c>)
    2986:	5c9b      	ldrb	r3, [r3, r2]
    2988:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    298a:	4a08      	ldr	r2, [pc, #32]	; (29ac <Clock_Ip_DisableModuleClock+0x40>)
    298c:	9b03      	ldr	r3, [sp, #12]
    298e:	00db      	lsls	r3, r3, #3
    2990:	4413      	add	r3, r2
    2992:	685b      	ldr	r3, [r3, #4]
    2994:	2101      	movs	r1, #1
    2996:	9801      	ldr	r0, [sp, #4]
    2998:	4798      	blx	r3
}
    299a:	bf00      	nop
    299c:	b005      	add	sp, #20
    299e:	f85d fb04 	ldr.w	pc, [sp], #4
    29a2:	bf00      	nop
    29a4:	000104cc 	.word	0x000104cc
    29a8:	0001046c 	.word	0x0001046c
    29ac:	00010a54 	.word	0x00010a54

000029b0 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    29b0:	b500      	push	{lr}
    29b2:	b085      	sub	sp, #20
    29b4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29b6:	490c      	ldr	r1, [pc, #48]	; (29e8 <Clock_Ip_EnableModuleClock+0x38>)
    29b8:	9a01      	ldr	r2, [sp, #4]
    29ba:	4613      	mov	r3, r2
    29bc:	00db      	lsls	r3, r3, #3
    29be:	4413      	add	r3, r2
    29c0:	440b      	add	r3, r1
    29c2:	3301      	adds	r3, #1
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	461a      	mov	r2, r3
    29c8:	4b08      	ldr	r3, [pc, #32]	; (29ec <Clock_Ip_EnableModuleClock+0x3c>)
    29ca:	5c9b      	ldrb	r3, [r3, r2]
    29cc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    29ce:	4a08      	ldr	r2, [pc, #32]	; (29f0 <Clock_Ip_EnableModuleClock+0x40>)
    29d0:	9b03      	ldr	r3, [sp, #12]
    29d2:	00db      	lsls	r3, r3, #3
    29d4:	4413      	add	r3, r2
    29d6:	685b      	ldr	r3, [r3, #4]
    29d8:	2100      	movs	r1, #0
    29da:	9801      	ldr	r0, [sp, #4]
    29dc:	4798      	blx	r3
}
    29de:	bf00      	nop
    29e0:	b005      	add	sp, #20
    29e2:	f85d fb04 	ldr.w	pc, [sp], #4
    29e6:	bf00      	nop
    29e8:	000104cc 	.word	0x000104cc
    29ec:	0001046c 	.word	0x0001046c
    29f0:	00010a54 	.word	0x00010a54

000029f4 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    29f4:	b500      	push	{lr}
    29f6:	b083      	sub	sp, #12
    29f8:	9001      	str	r0, [sp, #4]
    29fa:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    29fc:	4b08      	ldr	r3, [pc, #32]	; (2a20 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    29fe:	2200      	movs	r2, #0
    2a00:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2a02:	4b08      	ldr	r3, [pc, #32]	; (2a24 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	2102      	movs	r1, #2
    2a08:	4618      	mov	r0, r3
    2a0a:	f002 fd75 	bl	54f8 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2a0e:	9900      	ldr	r1, [sp, #0]
    2a10:	9801      	ldr	r0, [sp, #4]
    2a12:	f002 fc51 	bl	52b8 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2a16:	bf00      	nop
    2a18:	b003      	add	sp, #12
    2a1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a1e:	bf00      	nop
    2a20:	1fff8b10 	.word	0x1fff8b10
    2a24:	1fff8b58 	.word	0x1fff8b58

00002a28 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2a28:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2a2a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2a2e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2a30:	4b06      	ldr	r3, [pc, #24]	; (2a4c <Clock_Ip_SetWaitStates+0x24>)
    2a32:	785b      	ldrb	r3, [r3, #1]
    2a34:	2b00      	cmp	r3, #0
    2a36:	d005      	beq.n	2a44 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	3b01      	subs	r3, #1
    2a3c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2a3e:	9b01      	ldr	r3, [sp, #4]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d1f9      	bne.n	2a38 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2a44:	bf00      	nop
    2a46:	b002      	add	sp, #8
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop
    2a4c:	1fff8b60 	.word	0x1fff8b60

00002a50 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2a50:	b500      	push	{lr}
    2a52:	b083      	sub	sp, #12
    2a54:	9001      	str	r0, [sp, #4]
    2a56:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2a58:	4b04      	ldr	r3, [pc, #16]	; (2a6c <Clock_Ip_ReportClockErrors+0x1c>)
    2a5a:	681b      	ldr	r3, [r3, #0]
    2a5c:	9900      	ldr	r1, [sp, #0]
    2a5e:	9801      	ldr	r0, [sp, #4]
    2a60:	4798      	blx	r3
}
    2a62:	bf00      	nop
    2a64:	b003      	add	sp, #12
    2a66:	f85d fb04 	ldr.w	pc, [sp], #4
    2a6a:	bf00      	nop
    2a6c:	1fff8b14 	.word	0x1fff8b14

00002a70 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2a70:	b500      	push	{lr}
    2a72:	b085      	sub	sp, #20
    2a74:	9003      	str	r0, [sp, #12]
    2a76:	9102      	str	r1, [sp, #8]
    2a78:	9201      	str	r2, [sp, #4]
    2a7a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2a7c:	2000      	movs	r0, #0
    2a7e:	f7fe ffd1 	bl	1a24 <OsIf_GetCounter>
    2a82:	4602      	mov	r2, r0
    2a84:	9b03      	ldr	r3, [sp, #12]
    2a86:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2a88:	9b02      	ldr	r3, [sp, #8]
    2a8a:	2200      	movs	r2, #0
    2a8c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2a8e:	2100      	movs	r1, #0
    2a90:	9800      	ldr	r0, [sp, #0]
    2a92:	f7ff f813 	bl	1abc <OsIf_MicrosToTicks>
    2a96:	4602      	mov	r2, r0
    2a98:	9b01      	ldr	r3, [sp, #4]
    2a9a:	601a      	str	r2, [r3, #0]
}
    2a9c:	bf00      	nop
    2a9e:	b005      	add	sp, #20
    2aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00002aa4 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2aa4:	b500      	push	{lr}
    2aa6:	b087      	sub	sp, #28
    2aa8:	9003      	str	r0, [sp, #12]
    2aaa:	9102      	str	r1, [sp, #8]
    2aac:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2aae:	2300      	movs	r3, #0
    2ab0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2ab4:	2100      	movs	r1, #0
    2ab6:	9803      	ldr	r0, [sp, #12]
    2ab8:	f7fe ffcd 	bl	1a56 <OsIf_GetElapsed>
    2abc:	4602      	mov	r2, r0
    2abe:	9b02      	ldr	r3, [sp, #8]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	441a      	add	r2, r3
    2ac4:	9b02      	ldr	r3, [sp, #8]
    2ac6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2ac8:	9b02      	ldr	r3, [sp, #8]
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	9a01      	ldr	r2, [sp, #4]
    2ace:	429a      	cmp	r2, r3
    2ad0:	d802      	bhi.n	2ad8 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2ad2:	2301      	movs	r3, #1
    2ad4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2ad8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2adc:	4618      	mov	r0, r3
    2ade:	b007      	add	sp, #28
    2ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ae4 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2ae4:	b082      	sub	sp, #8
    2ae6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ae8:	bf00      	nop
    2aea:	b002      	add	sp, #8
    2aec:	4770      	bx	lr

00002aee <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2aee:	b500      	push	{lr}
    2af0:	b083      	sub	sp, #12
    2af2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2af4:	9b01      	ldr	r3, [sp, #4]
    2af6:	2b00      	cmp	r3, #0
    2af8:	d002      	beq.n	2b00 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2afa:	9801      	ldr	r0, [sp, #4]
    2afc:	f000 f8ad 	bl	2c5a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b00:	bf00      	nop
    2b02:	b003      	add	sp, #12
    2b04:	f85d fb04 	ldr.w	pc, [sp], #4

00002b08 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2b08:	b500      	push	{lr}
    2b0a:	b083      	sub	sp, #12
    2b0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b0e:	9b01      	ldr	r3, [sp, #4]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d002      	beq.n	2b1a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2b14:	9801      	ldr	r0, [sp, #4]
    2b16:	f000 f8cd 	bl	2cb4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b1a:	bf00      	nop
    2b1c:	b003      	add	sp, #12
    2b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b22 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2b22:	b500      	push	{lr}
    2b24:	b083      	sub	sp, #12
    2b26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d002      	beq.n	2b34 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2b2e:	9801      	ldr	r0, [sp, #4]
    2b30:	f000 f8ee 	bl	2d10 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b34:	bf00      	nop
    2b36:	b003      	add	sp, #12
    2b38:	f85d fb04 	ldr.w	pc, [sp], #4

00002b3c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2b3c:	b500      	push	{lr}
    2b3e:	b083      	sub	sp, #12
    2b40:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b42:	9b01      	ldr	r3, [sp, #4]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d002      	beq.n	2b4e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2b48:	9801      	ldr	r0, [sp, #4]
    2b4a:	f000 f8f9 	bl	2d40 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b4e:	bf00      	nop
    2b50:	b003      	add	sp, #12
    2b52:	f85d fb04 	ldr.w	pc, [sp], #4

00002b56 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2b56:	b500      	push	{lr}
    2b58:	b083      	sub	sp, #12
    2b5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b5c:	9b01      	ldr	r3, [sp, #4]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d002      	beq.n	2b68 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2b62:	9801      	ldr	r0, [sp, #4]
    2b64:	f000 f904 	bl	2d70 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b68:	bf00      	nop
    2b6a:	b003      	add	sp, #12
    2b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002b70 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2b70:	b500      	push	{lr}
    2b72:	b083      	sub	sp, #12
    2b74:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b76:	9b01      	ldr	r3, [sp, #4]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d002      	beq.n	2b82 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2b7c:	9801      	ldr	r0, [sp, #4]
    2b7e:	f000 f90f 	bl	2da0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b82:	bf00      	nop
    2b84:	b003      	add	sp, #12
    2b86:	f85d fb04 	ldr.w	pc, [sp], #4

00002b8a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2b8a:	b500      	push	{lr}
    2b8c:	b083      	sub	sp, #12
    2b8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b90:	9b01      	ldr	r3, [sp, #4]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d002      	beq.n	2b9c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2b96:	9801      	ldr	r0, [sp, #4]
    2b98:	f000 f91a 	bl	2dd0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b9c:	bf00      	nop
    2b9e:	b003      	add	sp, #12
    2ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ba4 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ba4:	b500      	push	{lr}
    2ba6:	b083      	sub	sp, #12
    2ba8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2baa:	9b01      	ldr	r3, [sp, #4]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d002      	beq.n	2bb6 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2bb0:	9801      	ldr	r0, [sp, #4]
    2bb2:	f000 f925 	bl	2e00 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bb6:	bf00      	nop
    2bb8:	b003      	add	sp, #12
    2bba:	f85d fb04 	ldr.w	pc, [sp], #4

00002bbe <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2bbe:	b500      	push	{lr}
    2bc0:	b083      	sub	sp, #12
    2bc2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bc4:	9b01      	ldr	r3, [sp, #4]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d002      	beq.n	2bd0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2bca:	9801      	ldr	r0, [sp, #4]
    2bcc:	f000 f930 	bl	2e30 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bd0:	bf00      	nop
    2bd2:	b003      	add	sp, #12
    2bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00002bd8 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2bd8:	b500      	push	{lr}
    2bda:	b083      	sub	sp, #12
    2bdc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d002      	beq.n	2bea <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2be4:	9801      	ldr	r0, [sp, #4]
    2be6:	f000 f93b 	bl	2e60 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bea:	bf00      	nop
    2bec:	b003      	add	sp, #12
    2bee:	f85d fb04 	ldr.w	pc, [sp], #4

00002bf2 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2bf2:	b500      	push	{lr}
    2bf4:	b083      	sub	sp, #12
    2bf6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bf8:	9b01      	ldr	r3, [sp, #4]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d002      	beq.n	2c04 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2bfe:	9801      	ldr	r0, [sp, #4]
    2c00:	f000 f946 	bl	2e90 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c04:	bf00      	nop
    2c06:	b003      	add	sp, #12
    2c08:	f85d fb04 	ldr.w	pc, [sp], #4

00002c0c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2c0c:	b500      	push	{lr}
    2c0e:	b083      	sub	sp, #12
    2c10:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c12:	9b01      	ldr	r3, [sp, #4]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d002      	beq.n	2c1e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2c18:	9801      	ldr	r0, [sp, #4]
    2c1a:	f000 f951 	bl	2ec0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c1e:	bf00      	nop
    2c20:	b003      	add	sp, #12
    2c22:	f85d fb04 	ldr.w	pc, [sp], #4

00002c26 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2c26:	b500      	push	{lr}
    2c28:	b083      	sub	sp, #12
    2c2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c2c:	9b01      	ldr	r3, [sp, #4]
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d002      	beq.n	2c38 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2c32:	9801      	ldr	r0, [sp, #4]
    2c34:	f000 f95e 	bl	2ef4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c38:	bf00      	nop
    2c3a:	b003      	add	sp, #12
    2c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c40 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2c40:	b500      	push	{lr}
    2c42:	b083      	sub	sp, #12
    2c44:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c46:	9b01      	ldr	r3, [sp, #4]
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d002      	beq.n	2c52 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2c4c:	9801      	ldr	r0, [sp, #4]
    2c4e:	f000 f98b 	bl	2f68 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c52:	bf00      	nop
    2c54:	b003      	add	sp, #12
    2c56:	f85d fb04 	ldr.w	pc, [sp], #4

00002c5a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2c5a:	b086      	sub	sp, #24
    2c5c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2c5e:	9b01      	ldr	r3, [sp, #4]
    2c60:	681a      	ldr	r2, [r3, #0]
    2c62:	4911      	ldr	r1, [pc, #68]	; (2ca8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2c64:	4613      	mov	r3, r2
    2c66:	00db      	lsls	r3, r3, #3
    2c68:	4413      	add	r3, r2
    2c6a:	440b      	add	r3, r1
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2c70:	9b01      	ldr	r3, [sp, #4]
    2c72:	685b      	ldr	r3, [r3, #4]
    2c74:	4a0d      	ldr	r2, [pc, #52]	; (2cac <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2c76:	5cd3      	ldrb	r3, [r2, r3]
    2c78:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2c7a:	4a0d      	ldr	r2, [pc, #52]	; (2cb0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2c7c:	9b05      	ldr	r3, [sp, #20]
    2c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2c86:	9b03      	ldr	r3, [sp, #12]
    2c88:	f023 0307 	bic.w	r3, r3, #7
    2c8c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2c8e:	9a03      	ldr	r2, [sp, #12]
    2c90:	9b04      	ldr	r3, [sp, #16]
    2c92:	4313      	orrs	r3, r2
    2c94:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2c96:	4a06      	ldr	r2, [pc, #24]	; (2cb0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2c98:	9b05      	ldr	r3, [sp, #20]
    2c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c9e:	9a03      	ldr	r2, [sp, #12]
    2ca0:	601a      	str	r2, [r3, #0]
}
    2ca2:	bf00      	nop
    2ca4:	b006      	add	sp, #24
    2ca6:	4770      	bx	lr
    2ca8:	000104cc 	.word	0x000104cc
    2cac:	000108c4 	.word	0x000108c4
    2cb0:	00010908 	.word	0x00010908

00002cb4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2cb4:	b086      	sub	sp, #24
    2cb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2cb8:	9b01      	ldr	r3, [sp, #4]
    2cba:	681a      	ldr	r2, [r3, #0]
    2cbc:	4911      	ldr	r1, [pc, #68]	; (2d04 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2cbe:	4613      	mov	r3, r2
    2cc0:	00db      	lsls	r3, r3, #3
    2cc2:	4413      	add	r3, r2
    2cc4:	440b      	add	r3, r1
    2cc6:	781b      	ldrb	r3, [r3, #0]
    2cc8:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2cca:	9b01      	ldr	r3, [sp, #4]
    2ccc:	685b      	ldr	r3, [r3, #4]
    2cce:	4a0e      	ldr	r2, [pc, #56]	; (2d08 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2cd0:	5cd3      	ldrb	r3, [r2, r3]
    2cd2:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2cd4:	4a0d      	ldr	r2, [pc, #52]	; (2d0c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2cd6:	9b05      	ldr	r3, [sp, #20]
    2cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cdc:	681b      	ldr	r3, [r3, #0]
    2cde:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2ce0:	9b03      	ldr	r3, [sp, #12]
    2ce2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2ce6:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2ce8:	9b04      	ldr	r3, [sp, #16]
    2cea:	021b      	lsls	r3, r3, #8
    2cec:	9a03      	ldr	r2, [sp, #12]
    2cee:	4313      	orrs	r3, r2
    2cf0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2cf2:	4a06      	ldr	r2, [pc, #24]	; (2d0c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2cf4:	9b05      	ldr	r3, [sp, #20]
    2cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cfa:	9a03      	ldr	r2, [sp, #12]
    2cfc:	601a      	str	r2, [r3, #0]
}
    2cfe:	bf00      	nop
    2d00:	b006      	add	sp, #24
    2d02:	4770      	bx	lr
    2d04:	000104cc 	.word	0x000104cc
    2d08:	000108c4 	.word	0x000108c4
    2d0c:	00010908 	.word	0x00010908

00002d10 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d10:	b084      	sub	sp, #16
    2d12:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2d14:	4b09      	ldr	r3, [pc, #36]	; (2d3c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2d16:	695b      	ldr	r3, [r3, #20]
    2d18:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2d1a:	9b03      	ldr	r3, [sp, #12]
    2d1c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2d20:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	685b      	ldr	r3, [r3, #4]
    2d26:	3b01      	subs	r3, #1
    2d28:	041b      	lsls	r3, r3, #16
    2d2a:	9a03      	ldr	r2, [sp, #12]
    2d2c:	4313      	orrs	r3, r2
    2d2e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2d30:	4a02      	ldr	r2, [pc, #8]	; (2d3c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2d32:	9b03      	ldr	r3, [sp, #12]
    2d34:	6153      	str	r3, [r2, #20]
}
    2d36:	bf00      	nop
    2d38:	b004      	add	sp, #16
    2d3a:	4770      	bx	lr
    2d3c:	40064000 	.word	0x40064000

00002d40 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d40:	b084      	sub	sp, #16
    2d42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2d44:	4b09      	ldr	r3, [pc, #36]	; (2d6c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2d46:	695b      	ldr	r3, [r3, #20]
    2d48:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2d4a:	9b03      	ldr	r3, [sp, #12]
    2d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2d50:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	685b      	ldr	r3, [r3, #4]
    2d56:	3b01      	subs	r3, #1
    2d58:	011b      	lsls	r3, r3, #4
    2d5a:	9a03      	ldr	r2, [sp, #12]
    2d5c:	4313      	orrs	r3, r2
    2d5e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2d60:	4a02      	ldr	r2, [pc, #8]	; (2d6c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2d62:	9b03      	ldr	r3, [sp, #12]
    2d64:	6153      	str	r3, [r2, #20]
}
    2d66:	bf00      	nop
    2d68:	b004      	add	sp, #16
    2d6a:	4770      	bx	lr
    2d6c:	40064000 	.word	0x40064000

00002d70 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d70:	b084      	sub	sp, #16
    2d72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2d74:	4b09      	ldr	r3, [pc, #36]	; (2d9c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2d76:	695b      	ldr	r3, [r3, #20]
    2d78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2d7a:	9b03      	ldr	r3, [sp, #12]
    2d7c:	f023 030f 	bic.w	r3, r3, #15
    2d80:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2d82:	9b01      	ldr	r3, [sp, #4]
    2d84:	685b      	ldr	r3, [r3, #4]
    2d86:	3b01      	subs	r3, #1
    2d88:	9a03      	ldr	r2, [sp, #12]
    2d8a:	4313      	orrs	r3, r2
    2d8c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2d8e:	4a03      	ldr	r2, [pc, #12]	; (2d9c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2d90:	9b03      	ldr	r3, [sp, #12]
    2d92:	6153      	str	r3, [r2, #20]
}
    2d94:	bf00      	nop
    2d96:	b004      	add	sp, #16
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	40064000 	.word	0x40064000

00002da0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2da0:	b084      	sub	sp, #16
    2da2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2da4:	4b09      	ldr	r3, [pc, #36]	; (2dcc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2da6:	699b      	ldr	r3, [r3, #24]
    2da8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2daa:	9b03      	ldr	r3, [sp, #12]
    2dac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2db0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2db2:	9b01      	ldr	r3, [sp, #4]
    2db4:	685b      	ldr	r3, [r3, #4]
    2db6:	3b01      	subs	r3, #1
    2db8:	041b      	lsls	r3, r3, #16
    2dba:	9a03      	ldr	r2, [sp, #12]
    2dbc:	4313      	orrs	r3, r2
    2dbe:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2dc0:	4a02      	ldr	r2, [pc, #8]	; (2dcc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2dc2:	9b03      	ldr	r3, [sp, #12]
    2dc4:	6193      	str	r3, [r2, #24]
}
    2dc6:	bf00      	nop
    2dc8:	b004      	add	sp, #16
    2dca:	4770      	bx	lr
    2dcc:	40064000 	.word	0x40064000

00002dd0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dd0:	b084      	sub	sp, #16
    2dd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2dd4:	4b09      	ldr	r3, [pc, #36]	; (2dfc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2dd6:	699b      	ldr	r3, [r3, #24]
    2dd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2dda:	9b03      	ldr	r3, [sp, #12]
    2ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2de0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2de2:	9b01      	ldr	r3, [sp, #4]
    2de4:	685b      	ldr	r3, [r3, #4]
    2de6:	3b01      	subs	r3, #1
    2de8:	011b      	lsls	r3, r3, #4
    2dea:	9a03      	ldr	r2, [sp, #12]
    2dec:	4313      	orrs	r3, r2
    2dee:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2df0:	4a02      	ldr	r2, [pc, #8]	; (2dfc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2df2:	9b03      	ldr	r3, [sp, #12]
    2df4:	6193      	str	r3, [r2, #24]
}
    2df6:	bf00      	nop
    2df8:	b004      	add	sp, #16
    2dfa:	4770      	bx	lr
    2dfc:	40064000 	.word	0x40064000

00002e00 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e00:	b084      	sub	sp, #16
    2e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e04:	4b09      	ldr	r3, [pc, #36]	; (2e2c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2e06:	699b      	ldr	r3, [r3, #24]
    2e08:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2e0a:	9b03      	ldr	r3, [sp, #12]
    2e0c:	f023 030f 	bic.w	r3, r3, #15
    2e10:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2e12:	9b01      	ldr	r3, [sp, #4]
    2e14:	685b      	ldr	r3, [r3, #4]
    2e16:	3b01      	subs	r3, #1
    2e18:	9a03      	ldr	r2, [sp, #12]
    2e1a:	4313      	orrs	r3, r2
    2e1c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e1e:	4a03      	ldr	r2, [pc, #12]	; (2e2c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2e20:	9b03      	ldr	r3, [sp, #12]
    2e22:	6193      	str	r3, [r2, #24]
}
    2e24:	bf00      	nop
    2e26:	b004      	add	sp, #16
    2e28:	4770      	bx	lr
    2e2a:	bf00      	nop
    2e2c:	40064000 	.word	0x40064000

00002e30 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e30:	b084      	sub	sp, #16
    2e32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2e34:	4b09      	ldr	r3, [pc, #36]	; (2e5c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2e36:	69db      	ldr	r3, [r3, #28]
    2e38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2e3a:	9b03      	ldr	r3, [sp, #12]
    2e3c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e40:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2e42:	9b01      	ldr	r3, [sp, #4]
    2e44:	685b      	ldr	r3, [r3, #4]
    2e46:	3b01      	subs	r3, #1
    2e48:	041b      	lsls	r3, r3, #16
    2e4a:	9a03      	ldr	r2, [sp, #12]
    2e4c:	4313      	orrs	r3, r2
    2e4e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2e50:	4a02      	ldr	r2, [pc, #8]	; (2e5c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2e52:	9b03      	ldr	r3, [sp, #12]
    2e54:	61d3      	str	r3, [r2, #28]
}
    2e56:	bf00      	nop
    2e58:	b004      	add	sp, #16
    2e5a:	4770      	bx	lr
    2e5c:	40064000 	.word	0x40064000

00002e60 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e60:	b084      	sub	sp, #16
    2e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2e64:	4b09      	ldr	r3, [pc, #36]	; (2e8c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2e66:	69db      	ldr	r3, [r3, #28]
    2e68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2e6a:	9b03      	ldr	r3, [sp, #12]
    2e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e70:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2e72:	9b01      	ldr	r3, [sp, #4]
    2e74:	685b      	ldr	r3, [r3, #4]
    2e76:	3b01      	subs	r3, #1
    2e78:	011b      	lsls	r3, r3, #4
    2e7a:	9a03      	ldr	r2, [sp, #12]
    2e7c:	4313      	orrs	r3, r2
    2e7e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2e80:	4a02      	ldr	r2, [pc, #8]	; (2e8c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2e82:	9b03      	ldr	r3, [sp, #12]
    2e84:	61d3      	str	r3, [r2, #28]
}
    2e86:	bf00      	nop
    2e88:	b004      	add	sp, #16
    2e8a:	4770      	bx	lr
    2e8c:	40064000 	.word	0x40064000

00002e90 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e90:	b084      	sub	sp, #16
    2e92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2e94:	4b09      	ldr	r3, [pc, #36]	; (2ebc <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2e96:	69db      	ldr	r3, [r3, #28]
    2e98:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2e9a:	9b03      	ldr	r3, [sp, #12]
    2e9c:	f023 030f 	bic.w	r3, r3, #15
    2ea0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2ea2:	9b01      	ldr	r3, [sp, #4]
    2ea4:	685b      	ldr	r3, [r3, #4]
    2ea6:	3b01      	subs	r3, #1
    2ea8:	9a03      	ldr	r2, [sp, #12]
    2eaa:	4313      	orrs	r3, r2
    2eac:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2eae:	4a03      	ldr	r2, [pc, #12]	; (2ebc <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2eb0:	9b03      	ldr	r3, [sp, #12]
    2eb2:	61d3      	str	r3, [r2, #28]
}
    2eb4:	bf00      	nop
    2eb6:	b004      	add	sp, #16
    2eb8:	4770      	bx	lr
    2eba:	bf00      	nop
    2ebc:	40064000 	.word	0x40064000

00002ec0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2ec0:	b084      	sub	sp, #16
    2ec2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2ec4:	4b0a      	ldr	r3, [pc, #40]	; (2ef0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2ec6:	685b      	ldr	r3, [r3, #4]
    2ec8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2ed0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2ed2:	9b01      	ldr	r3, [sp, #4]
    2ed4:	685b      	ldr	r3, [r3, #4]
    2ed6:	3b01      	subs	r3, #1
    2ed8:	021b      	lsls	r3, r3, #8
    2eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2ede:	9a03      	ldr	r2, [sp, #12]
    2ee0:	4313      	orrs	r3, r2
    2ee2:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2ee4:	4a02      	ldr	r2, [pc, #8]	; (2ef0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2ee6:	9b03      	ldr	r3, [sp, #12]
    2ee8:	6053      	str	r3, [r2, #4]
}
    2eea:	bf00      	nop
    2eec:	b004      	add	sp, #16
    2eee:	4770      	bx	lr
    2ef0:	40048000 	.word	0x40048000

00002ef4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ef4:	b084      	sub	sp, #16
    2ef6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2ef8:	4919      	ldr	r1, [pc, #100]	; (2f60 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2efa:	9b01      	ldr	r3, [sp, #4]
    2efc:	681a      	ldr	r2, [r3, #0]
    2efe:	4819      	ldr	r0, [pc, #100]	; (2f64 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2f00:	4613      	mov	r3, r2
    2f02:	00db      	lsls	r3, r3, #3
    2f04:	4413      	add	r3, r2
    2f06:	4403      	add	r3, r0
    2f08:	3305      	adds	r3, #5
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2f10:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2f12:	9b03      	ldr	r3, [sp, #12]
    2f14:	f023 030f 	bic.w	r3, r3, #15
    2f18:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	685b      	ldr	r3, [r3, #4]
    2f1e:	3b01      	subs	r3, #1
    2f20:	f003 0307 	and.w	r3, r3, #7
    2f24:	9a03      	ldr	r2, [sp, #12]
    2f26:	4313      	orrs	r3, r2
    2f28:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2f2a:	9b01      	ldr	r3, [sp, #4]
    2f2c:	7a1b      	ldrb	r3, [r3, #8]
    2f2e:	3b01      	subs	r3, #1
    2f30:	00db      	lsls	r3, r3, #3
    2f32:	f003 0308 	and.w	r3, r3, #8
    2f36:	9a03      	ldr	r2, [sp, #12]
    2f38:	4313      	orrs	r3, r2
    2f3a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2f3c:	4908      	ldr	r1, [pc, #32]	; (2f60 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2f3e:	9b01      	ldr	r3, [sp, #4]
    2f40:	681a      	ldr	r2, [r3, #0]
    2f42:	4808      	ldr	r0, [pc, #32]	; (2f64 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2f44:	4613      	mov	r3, r2
    2f46:	00db      	lsls	r3, r3, #3
    2f48:	4413      	add	r3, r2
    2f4a:	4403      	add	r3, r0
    2f4c:	3305      	adds	r3, #5
    2f4e:	781b      	ldrb	r3, [r3, #0]
    2f50:	461a      	mov	r2, r3
    2f52:	9b03      	ldr	r3, [sp, #12]
    2f54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2f58:	bf00      	nop
    2f5a:	b004      	add	sp, #16
    2f5c:	4770      	bx	lr
    2f5e:	bf00      	nop
    2f60:	40065000 	.word	0x40065000
    2f64:	000104cc 	.word	0x000104cc

00002f68 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f68:	b084      	sub	sp, #16
    2f6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2f6c:	4b10      	ldr	r3, [pc, #64]	; (2fb0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2f70:	4a0f      	ldr	r2, [pc, #60]	; (2fb0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2f76:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2f78:	4b0d      	ldr	r3, [pc, #52]	; (2fb0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2f7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2f7e:	9b03      	ldr	r3, [sp, #12]
    2f80:	f023 030f 	bic.w	r3, r3, #15
    2f84:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2f86:	9b01      	ldr	r3, [sp, #4]
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	3b01      	subs	r3, #1
    2f8c:	005b      	lsls	r3, r3, #1
    2f8e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2f92:	9b01      	ldr	r3, [sp, #4]
    2f94:	7a1b      	ldrb	r3, [r3, #8]
    2f96:	3b01      	subs	r3, #1
    2f98:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2f9c:	4313      	orrs	r3, r2
    2f9e:	9a03      	ldr	r2, [sp, #12]
    2fa0:	4313      	orrs	r3, r2
    2fa2:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2fa4:	4a02      	ldr	r2, [pc, #8]	; (2fb0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2fa6:	9b03      	ldr	r3, [sp, #12]
    2fa8:	6693      	str	r3, [r2, #104]	; 0x68
}
    2faa:	bf00      	nop
    2fac:	b004      	add	sp, #16
    2fae:	4770      	bx	lr
    2fb0:	40048000 	.word	0x40048000

00002fb4 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2fb4:	b082      	sub	sp, #8
    2fb6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2fb8:	bf00      	nop
    2fba:	b002      	add	sp, #8
    2fbc:	4770      	bx	lr
	...

00002fc0 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2fc0:	b082      	sub	sp, #8
    2fc2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2fc4:	bf00      	nop
    2fc6:	b002      	add	sp, #8
    2fc8:	4770      	bx	lr

00002fca <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2fca:	b082      	sub	sp, #8
    2fcc:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2fce:	bf00      	nop
    2fd0:	b002      	add	sp, #8
    2fd2:	4770      	bx	lr

00002fd4 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2fd4:	b500      	push	{lr}
    2fd6:	b083      	sub	sp, #12
    2fd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fda:	9b01      	ldr	r3, [sp, #4]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d002      	beq.n	2fe6 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2fe0:	9801      	ldr	r0, [sp, #4]
    2fe2:	f000 f86a 	bl	30ba <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fe6:	bf00      	nop
    2fe8:	b003      	add	sp, #12
    2fea:	f85d fb04 	ldr.w	pc, [sp], #4

00002fee <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2fee:	b500      	push	{lr}
    2ff0:	b083      	sub	sp, #12
    2ff2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ff4:	9b01      	ldr	r3, [sp, #4]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d002      	beq.n	3000 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    2ffa:	9801      	ldr	r0, [sp, #4]
    2ffc:	f000 f884 	bl	3108 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3000:	bf00      	nop
    3002:	b003      	add	sp, #12
    3004:	f85d fb04 	ldr.w	pc, [sp], #4

00003008 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3008:	b500      	push	{lr}
    300a:	b089      	sub	sp, #36	; 0x24
    300c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    300e:	2300      	movs	r3, #0
    3010:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3014:	9b01      	ldr	r3, [sp, #4]
    3016:	2b00      	cmp	r3, #0
    3018:	d031      	beq.n	307e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    301a:	4b1b      	ldr	r3, [pc, #108]	; (3088 <Clock_Ip_CompleteSOSC+0x80>)
    301c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3020:	f003 0301 	and.w	r3, r3, #1
    3024:	2b00      	cmp	r3, #0
    3026:	d02a      	beq.n	307e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3028:	aa03      	add	r2, sp, #12
    302a:	a904      	add	r1, sp, #16
    302c:	a805      	add	r0, sp, #20
    302e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3032:	f7ff fd1d 	bl	2a70 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3036:	4b14      	ldr	r3, [pc, #80]	; (3088 <Clock_Ip_CompleteSOSC+0x80>)
    3038:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    303c:	0e1b      	lsrs	r3, r3, #24
    303e:	f003 0301 	and.w	r3, r3, #1
    3042:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3044:	9a03      	ldr	r2, [sp, #12]
    3046:	a904      	add	r1, sp, #16
    3048:	ab05      	add	r3, sp, #20
    304a:	4618      	mov	r0, r3
    304c:	f7ff fd2a 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    3050:	4603      	mov	r3, r0
    3052:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3056:	9b06      	ldr	r3, [sp, #24]
    3058:	2b00      	cmp	r3, #0
    305a:	d106      	bne.n	306a <Clock_Ip_CompleteSOSC+0x62>
    305c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3060:	f083 0301 	eor.w	r3, r3, #1
    3064:	b2db      	uxtb	r3, r3
    3066:	2b00      	cmp	r3, #0
    3068:	d1e5      	bne.n	3036 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    306a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    306e:	2b00      	cmp	r3, #0
    3070:	d005      	beq.n	307e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3072:	9b01      	ldr	r3, [sp, #4]
    3074:	681b      	ldr	r3, [r3, #0]
    3076:	4619      	mov	r1, r3
    3078:	2001      	movs	r0, #1
    307a:	f7ff fce9 	bl	2a50 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    307e:	bf00      	nop
    3080:	b009      	add	sp, #36	; 0x24
    3082:	f85d fb04 	ldr.w	pc, [sp], #4
    3086:	bf00      	nop
    3088:	40064000 	.word	0x40064000

0000308c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    308c:	b500      	push	{lr}
    308e:	b083      	sub	sp, #12
    3090:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3092:	9801      	ldr	r0, [sp, #4]
    3094:	f000 f8c0 	bl	3218 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3098:	bf00      	nop
    309a:	b003      	add	sp, #12
    309c:	f85d fb04 	ldr.w	pc, [sp], #4

000030a0 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30a0:	b500      	push	{lr}
    30a2:	b083      	sub	sp, #12
    30a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30a6:	9b01      	ldr	r3, [sp, #4]
    30a8:	2b00      	cmp	r3, #0
    30aa:	d002      	beq.n	30b2 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    30ac:	9801      	ldr	r0, [sp, #4]
    30ae:	f000 f8c3 	bl	3238 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30b2:	bf00      	nop
    30b4:	b003      	add	sp, #12
    30b6:	f85d fb04 	ldr.w	pc, [sp], #4

000030ba <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    30ba:	b082      	sub	sp, #8
    30bc:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    30be:	4b11      	ldr	r3, [pc, #68]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30c4:	4a0f      	ldr	r2, [pc, #60]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    30ce:	4b0d      	ldr	r3, [pc, #52]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30d4:	4a0b      	ldr	r2, [pc, #44]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    30da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    30de:	4b09      	ldr	r3, [pc, #36]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30e4:	4a07      	ldr	r2, [pc, #28]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    30ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    30ee:	4b05      	ldr	r3, [pc, #20]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30f4:	4a03      	ldr	r2, [pc, #12]	; (3104 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30f6:	f023 0301 	bic.w	r3, r3, #1
    30fa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    30fe:	bf00      	nop
    3100:	b002      	add	sp, #8
    3102:	4770      	bx	lr
    3104:	40064000 	.word	0x40064000

00003108 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3108:	b082      	sub	sp, #8
    310a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    310c:	9b01      	ldr	r3, [sp, #4]
    310e:	891b      	ldrh	r3, [r3, #8]
    3110:	2b01      	cmp	r3, #1
    3112:	d174      	bne.n	31fe <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3114:	9b01      	ldr	r3, [sp, #4]
    3116:	7bdb      	ldrb	r3, [r3, #15]
    3118:	2b00      	cmp	r3, #0
    311a:	d002      	beq.n	3122 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    311c:	2b01      	cmp	r3, #1
    311e:	d009      	beq.n	3134 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3120:	e011      	b.n	3146 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3122:	4b39      	ldr	r3, [pc, #228]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3124:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3128:	4a37      	ldr	r2, [pc, #220]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    312a:	f023 0308 	bic.w	r3, r3, #8
    312e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3132:	e008      	b.n	3146 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3134:	4b34      	ldr	r3, [pc, #208]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3136:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    313a:	4a33      	ldr	r2, [pc, #204]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    313c:	f043 0308 	orr.w	r3, r3, #8
    3140:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3144:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3146:	4b30      	ldr	r3, [pc, #192]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3148:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    314c:	4a2e      	ldr	r2, [pc, #184]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    314e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3152:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3156:	9b01      	ldr	r3, [sp, #4]
    3158:	685b      	ldr	r3, [r3, #4]
    315a:	4a2c      	ldr	r2, [pc, #176]	; (320c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    315c:	4293      	cmp	r3, r2
    315e:	d90d      	bls.n	317c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3160:	9b01      	ldr	r3, [sp, #4]
    3162:	685b      	ldr	r3, [r3, #4]
    3164:	4a2a      	ldr	r2, [pc, #168]	; (3210 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3166:	4293      	cmp	r3, r2
    3168:	d208      	bcs.n	317c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    316a:	4b27      	ldr	r3, [pc, #156]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    316c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3170:	4a25      	ldr	r2, [pc, #148]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3172:	f043 0320 	orr.w	r3, r3, #32
    3176:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    317a:	e007      	b.n	318c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    317c:	4b22      	ldr	r3, [pc, #136]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    317e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3182:	4a21      	ldr	r2, [pc, #132]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3184:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3188:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    318c:	9b01      	ldr	r3, [sp, #4]
    318e:	7b1b      	ldrb	r3, [r3, #12]
    3190:	2b00      	cmp	r3, #0
    3192:	d108      	bne.n	31a6 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3194:	4b1c      	ldr	r3, [pc, #112]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3196:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    319a:	4a1b      	ldr	r2, [pc, #108]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    319c:	f043 0304 	orr.w	r3, r3, #4
    31a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    31a4:	e007      	b.n	31b6 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    31a6:	4b18      	ldr	r3, [pc, #96]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31ac:	4a16      	ldr	r2, [pc, #88]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31ae:	f023 0304 	bic.w	r3, r3, #4
    31b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    31b6:	9b01      	ldr	r3, [sp, #4]
    31b8:	7c1b      	ldrb	r3, [r3, #16]
    31ba:	2b02      	cmp	r3, #2
    31bc:	d011      	beq.n	31e2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    31be:	2b02      	cmp	r3, #2
    31c0:	dc14      	bgt.n	31ec <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    31c2:	2b00      	cmp	r3, #0
    31c4:	d002      	beq.n	31cc <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    31c6:	2b01      	cmp	r3, #1
    31c8:	d005      	beq.n	31d6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    31ca:	e00f      	b.n	31ec <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    31cc:	4b0e      	ldr	r3, [pc, #56]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31ce:	2201      	movs	r2, #1
    31d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    31d4:	e014      	b.n	3200 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    31d6:	4b0c      	ldr	r3, [pc, #48]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31d8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    31dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    31e0:	e00e      	b.n	3200 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    31e2:	4b09      	ldr	r3, [pc, #36]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31e4:	4a0b      	ldr	r2, [pc, #44]	; (3214 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    31e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    31ea:	e009      	b.n	3200 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    31ec:	4b06      	ldr	r3, [pc, #24]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31f2:	4a05      	ldr	r2, [pc, #20]	; (3208 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31f4:	f043 0301 	orr.w	r3, r3, #1
    31f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    31fc:	e000      	b.n	3200 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    31fe:	bf00      	nop
}
    3200:	bf00      	nop
    3202:	b002      	add	sp, #8
    3204:	4770      	bx	lr
    3206:	bf00      	nop
    3208:	40064000 	.word	0x40064000
    320c:	003d08ff 	.word	0x003d08ff
    3210:	007a1200 	.word	0x007a1200
    3214:	00030001 	.word	0x00030001

00003218 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3218:	b082      	sub	sp, #8
    321a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    321c:	4b05      	ldr	r3, [pc, #20]	; (3234 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    321e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3222:	4a04      	ldr	r2, [pc, #16]	; (3234 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3224:	f023 0301 	bic.w	r3, r3, #1
    3228:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    322c:	bf00      	nop
    322e:	b002      	add	sp, #8
    3230:	4770      	bx	lr
    3232:	bf00      	nop
    3234:	40064000 	.word	0x40064000

00003238 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3238:	b082      	sub	sp, #8
    323a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    323c:	9b01      	ldr	r3, [sp, #4]
    323e:	891b      	ldrh	r3, [r3, #8]
    3240:	2b01      	cmp	r3, #1
    3242:	d107      	bne.n	3254 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3244:	4b05      	ldr	r3, [pc, #20]	; (325c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3246:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    324a:	4a04      	ldr	r2, [pc, #16]	; (325c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    324c:	f043 0301 	orr.w	r3, r3, #1
    3250:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3254:	bf00      	nop
    3256:	b002      	add	sp, #8
    3258:	4770      	bx	lr
    325a:	bf00      	nop
    325c:	40064000 	.word	0x40064000

00003260 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3260:	b082      	sub	sp, #8
    3262:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3264:	bf00      	nop
    3266:	b002      	add	sp, #8
    3268:	4770      	bx	lr

0000326a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    326a:	b082      	sub	sp, #8
    326c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    326e:	2300      	movs	r3, #0
}
    3270:	4618      	mov	r0, r3
    3272:	b002      	add	sp, #8
    3274:	4770      	bx	lr

00003276 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3276:	b082      	sub	sp, #8
    3278:	9001      	str	r0, [sp, #4]
    327a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    327c:	bf00      	nop
    327e:	b002      	add	sp, #8
    3280:	4770      	bx	lr
	...

00003284 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3284:	b082      	sub	sp, #8
    3286:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3288:	bf00      	nop
    328a:	b002      	add	sp, #8
    328c:	4770      	bx	lr

0000328e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    328e:	b082      	sub	sp, #8
    3290:	9001      	str	r0, [sp, #4]
    3292:	460b      	mov	r3, r1
    3294:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3298:	bf00      	nop
    329a:	b002      	add	sp, #8
    329c:	4770      	bx	lr

0000329e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    329e:	b500      	push	{lr}
    32a0:	b083      	sub	sp, #12
    32a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32a4:	9b01      	ldr	r3, [sp, #4]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d002      	beq.n	32b0 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    32aa:	9801      	ldr	r0, [sp, #4]
    32ac:	f000 f8e7 	bl	347e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32b0:	bf00      	nop
    32b2:	b003      	add	sp, #12
    32b4:	f85d fb04 	ldr.w	pc, [sp], #4

000032b8 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    32b8:	b500      	push	{lr}
    32ba:	b085      	sub	sp, #20
    32bc:	9001      	str	r0, [sp, #4]
    32be:	460b      	mov	r3, r1
    32c0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    32c4:	9b01      	ldr	r3, [sp, #4]
    32c6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    32c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    32cc:	2b00      	cmp	r3, #0
    32ce:	d003      	beq.n	32d8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    32d0:	2300      	movs	r3, #0
    32d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    32d6:	e002      	b.n	32de <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    32d8:	2301      	movs	r3, #1
    32da:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    32de:	ab02      	add	r3, sp, #8
    32e0:	4618      	mov	r0, r3
    32e2:	f7ff ffdc 	bl	329e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    32e6:	bf00      	nop
    32e8:	b005      	add	sp, #20
    32ea:	f85d fb04 	ldr.w	pc, [sp], #4

000032ee <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    32ee:	b500      	push	{lr}
    32f0:	b083      	sub	sp, #12
    32f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d002      	beq.n	3300 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    32fa:	9801      	ldr	r0, [sp, #4]
    32fc:	f000 f8d6 	bl	34ac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3300:	bf00      	nop
    3302:	b003      	add	sp, #12
    3304:	f85d fb04 	ldr.w	pc, [sp], #4

00003308 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3308:	b500      	push	{lr}
    330a:	b085      	sub	sp, #20
    330c:	9001      	str	r0, [sp, #4]
    330e:	460b      	mov	r3, r1
    3310:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3314:	9b01      	ldr	r3, [sp, #4]
    3316:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3318:	f89d 3003 	ldrb.w	r3, [sp, #3]
    331c:	2b00      	cmp	r3, #0
    331e:	d003      	beq.n	3328 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3320:	2300      	movs	r3, #0
    3322:	f8ad 300c 	strh.w	r3, [sp, #12]
    3326:	e002      	b.n	332e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3328:	2301      	movs	r3, #1
    332a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    332e:	ab02      	add	r3, sp, #8
    3330:	4618      	mov	r0, r3
    3332:	f7ff ffdc 	bl	32ee <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3336:	bf00      	nop
    3338:	b005      	add	sp, #20
    333a:	f85d fb04 	ldr.w	pc, [sp], #4

0000333e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    333e:	b500      	push	{lr}
    3340:	b083      	sub	sp, #12
    3342:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	2b00      	cmp	r3, #0
    3348:	d002      	beq.n	3350 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    334a:	9801      	ldr	r0, [sp, #4]
    334c:	f000 f8c6 	bl	34dc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3350:	bf00      	nop
    3352:	b003      	add	sp, #12
    3354:	f85d fb04 	ldr.w	pc, [sp], #4

00003358 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3358:	b500      	push	{lr}
    335a:	b085      	sub	sp, #20
    335c:	9001      	str	r0, [sp, #4]
    335e:	460b      	mov	r3, r1
    3360:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3364:	9b01      	ldr	r3, [sp, #4]
    3366:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3368:	f89d 3003 	ldrb.w	r3, [sp, #3]
    336c:	2b00      	cmp	r3, #0
    336e:	d003      	beq.n	3378 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3370:	2300      	movs	r3, #0
    3372:	f8ad 300c 	strh.w	r3, [sp, #12]
    3376:	e002      	b.n	337e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3378:	2301      	movs	r3, #1
    337a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    337e:	ab02      	add	r3, sp, #8
    3380:	4618      	mov	r0, r3
    3382:	f7ff ffdc 	bl	333e <Clock_Ip_ClockSetSimClkoutEnable>
}
    3386:	bf00      	nop
    3388:	b005      	add	sp, #20
    338a:	f85d fb04 	ldr.w	pc, [sp], #4

0000338e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    338e:	b500      	push	{lr}
    3390:	b083      	sub	sp, #12
    3392:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	2b00      	cmp	r3, #0
    3398:	d002      	beq.n	33a0 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    339a:	9801      	ldr	r0, [sp, #4]
    339c:	f000 f8b6 	bl	350c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33a0:	bf00      	nop
    33a2:	b003      	add	sp, #12
    33a4:	f85d fb04 	ldr.w	pc, [sp], #4

000033a8 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33a8:	b500      	push	{lr}
    33aa:	b085      	sub	sp, #20
    33ac:	9001      	str	r0, [sp, #4]
    33ae:	460b      	mov	r3, r1
    33b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33b4:	9b01      	ldr	r3, [sp, #4]
    33b6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33bc:	2b00      	cmp	r3, #0
    33be:	d003      	beq.n	33c8 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    33c0:	2300      	movs	r3, #0
    33c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    33c6:	e002      	b.n	33ce <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33c8:	2301      	movs	r3, #1
    33ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    33ce:	ab02      	add	r3, sp, #8
    33d0:	4618      	mov	r0, r3
    33d2:	f7ff ffdc 	bl	338e <Clock_Ip_ClockSetPccCgcEnable>
}
    33d6:	bf00      	nop
    33d8:	b005      	add	sp, #20
    33da:	f85d fb04 	ldr.w	pc, [sp], #4

000033de <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    33de:	b500      	push	{lr}
    33e0:	b083      	sub	sp, #12
    33e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33e4:	9b01      	ldr	r3, [sp, #4]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d002      	beq.n	33f0 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    33ea:	9801      	ldr	r0, [sp, #4]
    33ec:	f000 f8bc 	bl	3568 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33f0:	bf00      	nop
    33f2:	b003      	add	sp, #12
    33f4:	f85d fb04 	ldr.w	pc, [sp], #4

000033f8 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    33f8:	b500      	push	{lr}
    33fa:	b085      	sub	sp, #20
    33fc:	9001      	str	r0, [sp, #4]
    33fe:	460b      	mov	r3, r1
    3400:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3404:	9b01      	ldr	r3, [sp, #4]
    3406:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3408:	f89d 3003 	ldrb.w	r3, [sp, #3]
    340c:	2b00      	cmp	r3, #0
    340e:	d003      	beq.n	3418 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3410:	2300      	movs	r3, #0
    3412:	f8ad 300c 	strh.w	r3, [sp, #12]
    3416:	e002      	b.n	341e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3418:	2301      	movs	r3, #1
    341a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    341e:	ab02      	add	r3, sp, #8
    3420:	4618      	mov	r0, r3
    3422:	f7ff ffdc 	bl	33de <Clock_Ip_ClockSetSimGate>
}
    3426:	bf00      	nop
    3428:	b005      	add	sp, #20
    342a:	f85d fb04 	ldr.w	pc, [sp], #4

0000342e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    342e:	b500      	push	{lr}
    3430:	b083      	sub	sp, #12
    3432:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	2b00      	cmp	r3, #0
    3438:	d002      	beq.n	3440 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    343a:	9801      	ldr	r0, [sp, #4]
    343c:	f000 f8c0 	bl	35c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3440:	bf00      	nop
    3442:	b003      	add	sp, #12
    3444:	f85d fb04 	ldr.w	pc, [sp], #4

00003448 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3448:	b500      	push	{lr}
    344a:	b085      	sub	sp, #20
    344c:	9001      	str	r0, [sp, #4]
    344e:	460b      	mov	r3, r1
    3450:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3454:	9b01      	ldr	r3, [sp, #4]
    3456:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3458:	f89d 3003 	ldrb.w	r3, [sp, #3]
    345c:	2b00      	cmp	r3, #0
    345e:	d003      	beq.n	3468 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3460:	2300      	movs	r3, #0
    3462:	f8ad 300c 	strh.w	r3, [sp, #12]
    3466:	e002      	b.n	346e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3468:	2301      	movs	r3, #1
    346a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    346e:	ab02      	add	r3, sp, #8
    3470:	4618      	mov	r0, r3
    3472:	f7ff ffdc 	bl	342e <Clock_Ip_ClockSetSimTraceEnable>
}
    3476:	bf00      	nop
    3478:	b005      	add	sp, #20
    347a:	f85d fb04 	ldr.w	pc, [sp], #4

0000347e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    347e:	b084      	sub	sp, #16
    3480:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3482:	4b09      	ldr	r3, [pc, #36]	; (34a8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3484:	691b      	ldr	r3, [r3, #16]
    3486:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3488:	9b03      	ldr	r3, [sp, #12]
    348a:	f023 0301 	bic.w	r3, r3, #1
    348e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3490:	9b01      	ldr	r3, [sp, #4]
    3492:	889b      	ldrh	r3, [r3, #4]
    3494:	461a      	mov	r2, r3
    3496:	9b03      	ldr	r3, [sp, #12]
    3498:	4313      	orrs	r3, r2
    349a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    349c:	4a02      	ldr	r2, [pc, #8]	; (34a8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    349e:	9b03      	ldr	r3, [sp, #12]
    34a0:	6113      	str	r3, [r2, #16]
}
    34a2:	bf00      	nop
    34a4:	b004      	add	sp, #16
    34a6:	4770      	bx	lr
    34a8:	40048000 	.word	0x40048000

000034ac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    34ac:	b084      	sub	sp, #16
    34ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    34b0:	4b09      	ldr	r3, [pc, #36]	; (34d8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    34b2:	691b      	ldr	r3, [r3, #16]
    34b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    34b6:	9b03      	ldr	r3, [sp, #12]
    34b8:	f023 0302 	bic.w	r3, r3, #2
    34bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    34be:	9b01      	ldr	r3, [sp, #4]
    34c0:	889b      	ldrh	r3, [r3, #4]
    34c2:	005b      	lsls	r3, r3, #1
    34c4:	9a03      	ldr	r2, [sp, #12]
    34c6:	4313      	orrs	r3, r2
    34c8:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    34ca:	4a03      	ldr	r2, [pc, #12]	; (34d8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    34cc:	9b03      	ldr	r3, [sp, #12]
    34ce:	6113      	str	r3, [r2, #16]
}
    34d0:	bf00      	nop
    34d2:	b004      	add	sp, #16
    34d4:	4770      	bx	lr
    34d6:	bf00      	nop
    34d8:	40048000 	.word	0x40048000

000034dc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    34dc:	b084      	sub	sp, #16
    34de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    34e0:	4b09      	ldr	r3, [pc, #36]	; (3508 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    34e2:	685b      	ldr	r3, [r3, #4]
    34e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    34e6:	9b03      	ldr	r3, [sp, #12]
    34e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    34ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    34ee:	9b01      	ldr	r3, [sp, #4]
    34f0:	889b      	ldrh	r3, [r3, #4]
    34f2:	02db      	lsls	r3, r3, #11
    34f4:	9a03      	ldr	r2, [sp, #12]
    34f6:	4313      	orrs	r3, r2
    34f8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    34fa:	4a03      	ldr	r2, [pc, #12]	; (3508 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    34fc:	9b03      	ldr	r3, [sp, #12]
    34fe:	6053      	str	r3, [r2, #4]
}
    3500:	bf00      	nop
    3502:	b004      	add	sp, #16
    3504:	4770      	bx	lr
    3506:	bf00      	nop
    3508:	40048000 	.word	0x40048000

0000350c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    350c:	b084      	sub	sp, #16
    350e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3510:	4913      	ldr	r1, [pc, #76]	; (3560 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3512:	9b01      	ldr	r3, [sp, #4]
    3514:	681a      	ldr	r2, [r3, #0]
    3516:	4813      	ldr	r0, [pc, #76]	; (3564 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3518:	4613      	mov	r3, r2
    351a:	00db      	lsls	r3, r3, #3
    351c:	4413      	add	r3, r2
    351e:	4403      	add	r3, r0
    3520:	3306      	adds	r3, #6
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3528:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    352a:	9b03      	ldr	r3, [sp, #12]
    352c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3530:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3532:	9b01      	ldr	r3, [sp, #4]
    3534:	889b      	ldrh	r3, [r3, #4]
    3536:	079b      	lsls	r3, r3, #30
    3538:	9a03      	ldr	r2, [sp, #12]
    353a:	4313      	orrs	r3, r2
    353c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    353e:	4908      	ldr	r1, [pc, #32]	; (3560 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3540:	9b01      	ldr	r3, [sp, #4]
    3542:	681a      	ldr	r2, [r3, #0]
    3544:	4807      	ldr	r0, [pc, #28]	; (3564 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3546:	4613      	mov	r3, r2
    3548:	00db      	lsls	r3, r3, #3
    354a:	4413      	add	r3, r2
    354c:	4403      	add	r3, r0
    354e:	3306      	adds	r3, #6
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	461a      	mov	r2, r3
    3554:	9b03      	ldr	r3, [sp, #12]
    3556:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    355a:	bf00      	nop
    355c:	b004      	add	sp, #16
    355e:	4770      	bx	lr
    3560:	40065000 	.word	0x40065000
    3564:	000104cc 	.word	0x000104cc

00003568 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3568:	b086      	sub	sp, #24
    356a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    356c:	9b01      	ldr	r3, [sp, #4]
    356e:	889b      	ldrh	r3, [r3, #4]
    3570:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3572:	9b01      	ldr	r3, [sp, #4]
    3574:	681a      	ldr	r2, [r3, #0]
    3576:	4910      	ldr	r1, [pc, #64]	; (35b8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3578:	4613      	mov	r3, r2
    357a:	00db      	lsls	r3, r3, #3
    357c:	4413      	add	r3, r2
    357e:	440b      	add	r3, r1
    3580:	3306      	adds	r3, #6
    3582:	781b      	ldrb	r3, [r3, #0]
    3584:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3586:	4b0d      	ldr	r3, [pc, #52]	; (35bc <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    358a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    358c:	2201      	movs	r2, #1
    358e:	9b04      	ldr	r3, [sp, #16]
    3590:	fa02 f303 	lsl.w	r3, r2, r3
    3594:	43db      	mvns	r3, r3
    3596:	9a03      	ldr	r2, [sp, #12]
    3598:	4013      	ands	r3, r2
    359a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    359c:	9a05      	ldr	r2, [sp, #20]
    359e:	9b04      	ldr	r3, [sp, #16]
    35a0:	fa02 f303 	lsl.w	r3, r2, r3
    35a4:	9a03      	ldr	r2, [sp, #12]
    35a6:	4313      	orrs	r3, r2
    35a8:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    35aa:	4a04      	ldr	r2, [pc, #16]	; (35bc <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    35ac:	9b03      	ldr	r3, [sp, #12]
    35ae:	6413      	str	r3, [r2, #64]	; 0x40
}
    35b0:	bf00      	nop
    35b2:	b006      	add	sp, #24
    35b4:	4770      	bx	lr
    35b6:	bf00      	nop
    35b8:	000104cc 	.word	0x000104cc
    35bc:	40048000 	.word	0x40048000

000035c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35c0:	b084      	sub	sp, #16
    35c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    35c4:	4b0a      	ldr	r3, [pc, #40]	; (35f0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    35c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    35c8:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    35ca:	9b01      	ldr	r3, [sp, #4]
    35cc:	889b      	ldrh	r3, [r3, #4]
    35ce:	2b01      	cmp	r3, #1
    35d0:	d104      	bne.n	35dc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    35d2:	9b03      	ldr	r3, [sp, #12]
    35d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    35d8:	9303      	str	r3, [sp, #12]
    35da:	e003      	b.n	35e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    35dc:	9b03      	ldr	r3, [sp, #12]
    35de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    35e2:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    35e4:	4a02      	ldr	r2, [pc, #8]	; (35f0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    35e6:	9b03      	ldr	r3, [sp, #12]
    35e8:	6693      	str	r3, [r2, #104]	; 0x68
}
    35ea:	bf00      	nop
    35ec:	b004      	add	sp, #16
    35ee:	4770      	bx	lr
    35f0:	40048000 	.word	0x40048000

000035f4 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    35f4:	b082      	sub	sp, #8
    35f6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    35f8:	bf00      	nop
    35fa:	b002      	add	sp, #8
    35fc:	4770      	bx	lr

000035fe <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    35fe:	b082      	sub	sp, #8
    3600:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3602:	bf00      	nop
    3604:	b002      	add	sp, #8
    3606:	4770      	bx	lr

00003608 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3608:	b500      	push	{lr}
    360a:	b083      	sub	sp, #12
    360c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    360e:	9b01      	ldr	r3, [sp, #4]
    3610:	2b00      	cmp	r3, #0
    3612:	d002      	beq.n	361a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3614:	9801      	ldr	r0, [sp, #4]
    3616:	f000 f8d1 	bl	37bc <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    361a:	bf00      	nop
    361c:	b003      	add	sp, #12
    361e:	f85d fb04 	ldr.w	pc, [sp], #4

00003622 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3622:	b500      	push	{lr}
    3624:	b083      	sub	sp, #12
    3626:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3628:	9b01      	ldr	r3, [sp, #4]
    362a:	2b00      	cmp	r3, #0
    362c:	d002      	beq.n	3634 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    362e:	9801      	ldr	r0, [sp, #4]
    3630:	f000 f950 	bl	38d4 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3634:	bf00      	nop
    3636:	b003      	add	sp, #12
    3638:	f85d fb04 	ldr.w	pc, [sp], #4

0000363c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    363c:	b500      	push	{lr}
    363e:	b083      	sub	sp, #12
    3640:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3642:	9801      	ldr	r0, [sp, #4]
    3644:	f000 f98e 	bl	3964 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3648:	bf00      	nop
    364a:	b003      	add	sp, #12
    364c:	f85d fb04 	ldr.w	pc, [sp], #4

00003650 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3650:	b500      	push	{lr}
    3652:	b083      	sub	sp, #12
    3654:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3656:	9b01      	ldr	r3, [sp, #4]
    3658:	2b00      	cmp	r3, #0
    365a:	d002      	beq.n	3662 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    365c:	9801      	ldr	r0, [sp, #4]
    365e:	f000 f999 	bl	3994 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3662:	bf00      	nop
    3664:	b003      	add	sp, #12
    3666:	f85d fb04 	ldr.w	pc, [sp], #4

0000366a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    366a:	b500      	push	{lr}
    366c:	b083      	sub	sp, #12
    366e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3670:	9b01      	ldr	r3, [sp, #4]
    3672:	2b00      	cmp	r3, #0
    3674:	d002      	beq.n	367c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3676:	9801      	ldr	r0, [sp, #4]
    3678:	f000 f9b0 	bl	39dc <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    367c:	bf00      	nop
    367e:	b003      	add	sp, #12
    3680:	f85d fb04 	ldr.w	pc, [sp], #4

00003684 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3684:	b500      	push	{lr}
    3686:	b083      	sub	sp, #12
    3688:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    368a:	9801      	ldr	r0, [sp, #4]
    368c:	f000 f9ba 	bl	3a04 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3690:	bf00      	nop
    3692:	b003      	add	sp, #12
    3694:	f85d fb04 	ldr.w	pc, [sp], #4

00003698 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3698:	b500      	push	{lr}
    369a:	b083      	sub	sp, #12
    369c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    369e:	9b01      	ldr	r3, [sp, #4]
    36a0:	2b00      	cmp	r3, #0
    36a2:	d002      	beq.n	36aa <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    36a4:	9801      	ldr	r0, [sp, #4]
    36a6:	f000 f9bd 	bl	3a24 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36aa:	bf00      	nop
    36ac:	b003      	add	sp, #12
    36ae:	f85d fb04 	ldr.w	pc, [sp], #4

000036b2 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    36b2:	b500      	push	{lr}
    36b4:	b083      	sub	sp, #12
    36b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36b8:	9b01      	ldr	r3, [sp, #4]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d002      	beq.n	36c4 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    36be:	9801      	ldr	r0, [sp, #4]
    36c0:	f000 f9d4 	bl	3a6c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36c4:	bf00      	nop
    36c6:	b003      	add	sp, #12
    36c8:	f85d fb04 	ldr.w	pc, [sp], #4

000036cc <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    36cc:	b500      	push	{lr}
    36ce:	b083      	sub	sp, #12
    36d0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    36d2:	9801      	ldr	r0, [sp, #4]
    36d4:	f000 f9de 	bl	3a94 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    36d8:	bf00      	nop
    36da:	b003      	add	sp, #12
    36dc:	f85d fb04 	ldr.w	pc, [sp], #4

000036e0 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    36e0:	b500      	push	{lr}
    36e2:	b089      	sub	sp, #36	; 0x24
    36e4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    36e6:	2300      	movs	r3, #0
    36e8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    36ec:	4b20      	ldr	r3, [pc, #128]	; (3770 <SetInputSouceSytemClock+0x90>)
    36ee:	695b      	ldr	r3, [r3, #20]
    36f0:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    36f2:	9b06      	ldr	r3, [sp, #24]
    36f4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    36f8:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    36fa:	9b01      	ldr	r3, [sp, #4]
    36fc:	061b      	lsls	r3, r3, #24
    36fe:	9a06      	ldr	r2, [sp, #24]
    3700:	4313      	orrs	r3, r2
    3702:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3704:	4a1a      	ldr	r2, [pc, #104]	; (3770 <SetInputSouceSytemClock+0x90>)
    3706:	9b06      	ldr	r3, [sp, #24]
    3708:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    370a:	aa02      	add	r2, sp, #8
    370c:	a903      	add	r1, sp, #12
    370e:	a804      	add	r0, sp, #16
    3710:	f24c 3350 	movw	r3, #50000	; 0xc350
    3714:	f7ff f9ac 	bl	2a70 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3718:	4b15      	ldr	r3, [pc, #84]	; (3770 <SetInputSouceSytemClock+0x90>)
    371a:	691b      	ldr	r3, [r3, #16]
    371c:	0e1b      	lsrs	r3, r3, #24
    371e:	f003 030f 	and.w	r3, r3, #15
    3722:	9a01      	ldr	r2, [sp, #4]
    3724:	429a      	cmp	r2, r3
    3726:	bf0c      	ite	eq
    3728:	2301      	moveq	r3, #1
    372a:	2300      	movne	r3, #0
    372c:	b2db      	uxtb	r3, r3
    372e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3730:	9a02      	ldr	r2, [sp, #8]
    3732:	a903      	add	r1, sp, #12
    3734:	ab04      	add	r3, sp, #16
    3736:	4618      	mov	r0, r3
    3738:	f7ff f9b4 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    373c:	4603      	mov	r3, r0
    373e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3742:	9b05      	ldr	r3, [sp, #20]
    3744:	2b00      	cmp	r3, #0
    3746:	d106      	bne.n	3756 <SetInputSouceSytemClock+0x76>
    3748:	f89d 301f 	ldrb.w	r3, [sp, #31]
    374c:	f083 0301 	eor.w	r3, r3, #1
    3750:	b2db      	uxtb	r3, r3
    3752:	2b00      	cmp	r3, #0
    3754:	d1e0      	bne.n	3718 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3756:	f89d 301f 	ldrb.w	r3, [sp, #31]
    375a:	2b00      	cmp	r3, #0
    375c:	d003      	beq.n	3766 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    375e:	2105      	movs	r1, #5
    3760:	2001      	movs	r0, #1
    3762:	f7ff f975 	bl	2a50 <Clock_Ip_ReportClockErrors>
    }
}
    3766:	bf00      	nop
    3768:	b009      	add	sp, #36	; 0x24
    376a:	f85d fb04 	ldr.w	pc, [sp], #4
    376e:	bf00      	nop
    3770:	40064000 	.word	0x40064000

00003774 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3774:	b500      	push	{lr}
    3776:	b083      	sub	sp, #12
    3778:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    377a:	9b01      	ldr	r3, [sp, #4]
    377c:	2b00      	cmp	r3, #0
    377e:	d002      	beq.n	3786 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3780:	9801      	ldr	r0, [sp, #4]
    3782:	f000 f997 	bl	3ab4 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3786:	bf00      	nop
    3788:	b003      	add	sp, #12
    378a:	f85d fb04 	ldr.w	pc, [sp], #4

0000378e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    378e:	b500      	push	{lr}
    3790:	b083      	sub	sp, #12
    3792:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3794:	9b01      	ldr	r3, [sp, #4]
    3796:	2b00      	cmp	r3, #0
    3798:	d002      	beq.n	37a0 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    379a:	9801      	ldr	r0, [sp, #4]
    379c:	f000 fa7e 	bl	3c9c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a0:	bf00      	nop
    37a2:	b003      	add	sp, #12
    37a4:	f85d fb04 	ldr.w	pc, [sp], #4

000037a8 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    37a8:	b500      	push	{lr}
    37aa:	b083      	sub	sp, #12
    37ac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    37ae:	9801      	ldr	r0, [sp, #4]
    37b0:	f000 fab8 	bl	3d24 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37b4:	bf00      	nop
    37b6:	b003      	add	sp, #12
    37b8:	f85d fb04 	ldr.w	pc, [sp], #4

000037bc <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    37bc:	b500      	push	{lr}
    37be:	b08b      	sub	sp, #44	; 0x2c
    37c0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    37c2:	2300      	movs	r3, #0
    37c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d10b      	bne.n	37e6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    37ce:	2305      	movs	r3, #5
    37d0:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    37d2:	2301      	movs	r3, #1
    37d4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    37d8:	2301      	movs	r3, #1
    37da:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    37de:	2301      	movs	r3, #1
    37e0:	f88d 3010 	strb.w	r3, [sp, #16]
    37e4:	e00e      	b.n	3804 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    37e6:	9b01      	ldr	r3, [sp, #4]
    37e8:	681b      	ldr	r3, [r3, #0]
    37ea:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    37ec:	9b01      	ldr	r3, [sp, #4]
    37ee:	79db      	ldrb	r3, [r3, #7]
    37f0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    37f4:	9b01      	ldr	r3, [sp, #4]
    37f6:	889b      	ldrh	r3, [r3, #4]
    37f8:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	7a1b      	ldrb	r3, [r3, #8]
    3800:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3804:	4b32      	ldr	r3, [pc, #200]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    380a:	4a31      	ldr	r2, [pc, #196]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    380c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3810:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3814:	4b2e      	ldr	r3, [pc, #184]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3816:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    381a:	4a2d      	ldr	r2, [pc, #180]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    381c:	f023 0301 	bic.w	r3, r3, #1
    3820:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3824:	4b2a      	ldr	r3, [pc, #168]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    382a:	4a29      	ldr	r2, [pc, #164]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    382c:	f023 0304 	bic.w	r3, r3, #4
    3830:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3834:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3838:	2b01      	cmp	r3, #1
    383a:	d144      	bne.n	38c6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    383c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3840:	4a23      	ldr	r2, [pc, #140]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3842:	f003 0301 	and.w	r3, r3, #1
    3846:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    384a:	4b21      	ldr	r3, [pc, #132]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    384c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3850:	4a1f      	ldr	r2, [pc, #124]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3852:	f043 0301 	orr.w	r3, r3, #1
    3856:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    385a:	4b1d      	ldr	r3, [pc, #116]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    385c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3860:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3864:	009b      	lsls	r3, r3, #2
    3866:	f003 0304 	and.w	r3, r3, #4
    386a:	4919      	ldr	r1, [pc, #100]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    386c:	4313      	orrs	r3, r2
    386e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3872:	aa05      	add	r2, sp, #20
    3874:	a906      	add	r1, sp, #24
    3876:	a807      	add	r0, sp, #28
    3878:	f24c 3350 	movw	r3, #50000	; 0xc350
    387c:	f7ff f8f8 	bl	2a70 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3880:	4b13      	ldr	r3, [pc, #76]	; (38d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3882:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3886:	0e1b      	lsrs	r3, r3, #24
    3888:	f003 0301 	and.w	r3, r3, #1
    388c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    388e:	9a05      	ldr	r2, [sp, #20]
    3890:	a906      	add	r1, sp, #24
    3892:	ab07      	add	r3, sp, #28
    3894:	4618      	mov	r0, r3
    3896:	f7ff f905 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    389a:	4603      	mov	r3, r0
    389c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    38a0:	9b08      	ldr	r3, [sp, #32]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d106      	bne.n	38b4 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    38a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    38aa:	f083 0301 	eor.w	r3, r3, #1
    38ae:	b2db      	uxtb	r3, r3
    38b0:	2b00      	cmp	r3, #0
    38b2:	d1e5      	bne.n	3880 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    38b4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    38b8:	2b00      	cmp	r3, #0
    38ba:	d004      	beq.n	38c6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    38bc:	9b02      	ldr	r3, [sp, #8]
    38be:	4619      	mov	r1, r3
    38c0:	2001      	movs	r0, #1
    38c2:	f7ff f8c5 	bl	2a50 <Clock_Ip_ReportClockErrors>
        }
    }
}
    38c6:	bf00      	nop
    38c8:	b00b      	add	sp, #44	; 0x2c
    38ca:	f85d fb04 	ldr.w	pc, [sp], #4
    38ce:	bf00      	nop
    38d0:	40064000 	.word	0x40064000

000038d4 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    38d4:	b500      	push	{lr}
    38d6:	b089      	sub	sp, #36	; 0x24
    38d8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    38da:	2300      	movs	r3, #0
    38dc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    38e0:	4b1f      	ldr	r3, [pc, #124]	; (3960 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    38e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38e6:	4a1e      	ldr	r2, [pc, #120]	; (3960 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    38e8:	f043 0301 	orr.w	r3, r3, #1
    38ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    38f0:	4b1b      	ldr	r3, [pc, #108]	; (3960 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    38f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38f6:	4a1a      	ldr	r2, [pc, #104]	; (3960 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    38f8:	f043 0304 	orr.w	r3, r3, #4
    38fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3900:	aa03      	add	r2, sp, #12
    3902:	a904      	add	r1, sp, #16
    3904:	a805      	add	r0, sp, #20
    3906:	f24c 3350 	movw	r3, #50000	; 0xc350
    390a:	f7ff f8b1 	bl	2a70 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    390e:	4b14      	ldr	r3, [pc, #80]	; (3960 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3914:	0e1b      	lsrs	r3, r3, #24
    3916:	f003 0301 	and.w	r3, r3, #1
    391a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    391c:	9a03      	ldr	r2, [sp, #12]
    391e:	a904      	add	r1, sp, #16
    3920:	ab05      	add	r3, sp, #20
    3922:	4618      	mov	r0, r3
    3924:	f7ff f8be 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    3928:	4603      	mov	r3, r0
    392a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    392e:	9b06      	ldr	r3, [sp, #24]
    3930:	2b00      	cmp	r3, #0
    3932:	d106      	bne.n	3942 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3934:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3938:	f083 0301 	eor.w	r3, r3, #1
    393c:	b2db      	uxtb	r3, r3
    393e:	2b00      	cmp	r3, #0
    3940:	d1e5      	bne.n	390e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3942:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3946:	2b00      	cmp	r3, #0
    3948:	d005      	beq.n	3956 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    394a:	9b01      	ldr	r3, [sp, #4]
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	4619      	mov	r1, r3
    3950:	2001      	movs	r0, #1
    3952:	f7ff f87d 	bl	2a50 <Clock_Ip_ReportClockErrors>
    }
}
    3956:	bf00      	nop
    3958:	b009      	add	sp, #36	; 0x24
    395a:	f85d fb04 	ldr.w	pc, [sp], #4
    395e:	bf00      	nop
    3960:	40064000 	.word	0x40064000

00003964 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3964:	b082      	sub	sp, #8
    3966:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3968:	4b09      	ldr	r3, [pc, #36]	; (3990 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    396a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    396e:	4a08      	ldr	r2, [pc, #32]	; (3990 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3970:	f023 0301 	bic.w	r3, r3, #1
    3974:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3978:	4b05      	ldr	r3, [pc, #20]	; (3990 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    397a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    397e:	4a04      	ldr	r2, [pc, #16]	; (3990 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3980:	f023 0304 	bic.w	r3, r3, #4
    3984:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3988:	bf00      	nop
    398a:	b002      	add	sp, #8
    398c:	4770      	bx	lr
    398e:	bf00      	nop
    3990:	40064000 	.word	0x40064000

00003994 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3994:	b082      	sub	sp, #8
    3996:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3998:	4b0f      	ldr	r3, [pc, #60]	; (39d8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    399a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399e:	4a0e      	ldr	r2, [pc, #56]	; (39d8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    39a8:	4b0b      	ldr	r3, [pc, #44]	; (39d8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ae:	4a0a      	ldr	r2, [pc, #40]	; (39d8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39b0:	f023 0304 	bic.w	r3, r3, #4
    39b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    39b8:	4b07      	ldr	r3, [pc, #28]	; (39d8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39be:	9b01      	ldr	r3, [sp, #4]
    39c0:	7a1b      	ldrb	r3, [r3, #8]
    39c2:	009b      	lsls	r3, r3, #2
    39c4:	f003 0304 	and.w	r3, r3, #4
    39c8:	4903      	ldr	r1, [pc, #12]	; (39d8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39ca:	4313      	orrs	r3, r2
    39cc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    39d0:	bf00      	nop
    39d2:	b002      	add	sp, #8
    39d4:	4770      	bx	lr
    39d6:	bf00      	nop
    39d8:	40064000 	.word	0x40064000

000039dc <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    39dc:	b082      	sub	sp, #8
    39de:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    39e0:	9b01      	ldr	r3, [sp, #4]
    39e2:	889b      	ldrh	r3, [r3, #4]
    39e4:	2b01      	cmp	r3, #1
    39e6:	d107      	bne.n	39f8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    39e8:	4b05      	ldr	r3, [pc, #20]	; (3a00 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    39ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ee:	4a04      	ldr	r2, [pc, #16]	; (3a00 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    39f0:	f043 0304 	orr.w	r3, r3, #4
    39f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    39f8:	bf00      	nop
    39fa:	b002      	add	sp, #8
    39fc:	4770      	bx	lr
    39fe:	bf00      	nop
    3a00:	40064000 	.word	0x40064000

00003a04 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3a04:	b082      	sub	sp, #8
    3a06:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a08:	4b05      	ldr	r3, [pc, #20]	; (3a20 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a0e:	4a04      	ldr	r2, [pc, #16]	; (3a20 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3a10:	f023 0304 	bic.w	r3, r3, #4
    3a14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a18:	bf00      	nop
    3a1a:	b002      	add	sp, #8
    3a1c:	4770      	bx	lr
    3a1e:	bf00      	nop
    3a20:	40064000 	.word	0x40064000

00003a24 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a24:	b082      	sub	sp, #8
    3a26:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3a28:	4b0f      	ldr	r3, [pc, #60]	; (3a68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a2e:	4a0e      	ldr	r2, [pc, #56]	; (3a68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3a34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3a38:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a3e:	4a0a      	ldr	r2, [pc, #40]	; (3a68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a40:	f023 0302 	bic.w	r3, r3, #2
    3a44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3a48:	4b07      	ldr	r3, [pc, #28]	; (3a68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a4e:	9b01      	ldr	r3, [sp, #4]
    3a50:	7a5b      	ldrb	r3, [r3, #9]
    3a52:	005b      	lsls	r3, r3, #1
    3a54:	f003 0302 	and.w	r3, r3, #2
    3a58:	4903      	ldr	r1, [pc, #12]	; (3a68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a5a:	4313      	orrs	r3, r2
    3a5c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3a60:	bf00      	nop
    3a62:	b002      	add	sp, #8
    3a64:	4770      	bx	lr
    3a66:	bf00      	nop
    3a68:	40064000 	.word	0x40064000

00003a6c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a6c:	b082      	sub	sp, #8
    3a6e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3a70:	9b01      	ldr	r3, [sp, #4]
    3a72:	889b      	ldrh	r3, [r3, #4]
    3a74:	2b01      	cmp	r3, #1
    3a76:	d107      	bne.n	3a88 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3a78:	4b05      	ldr	r3, [pc, #20]	; (3a90 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a7e:	4a04      	ldr	r2, [pc, #16]	; (3a90 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3a80:	f043 0302 	orr.w	r3, r3, #2
    3a84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3a88:	bf00      	nop
    3a8a:	b002      	add	sp, #8
    3a8c:	4770      	bx	lr
    3a8e:	bf00      	nop
    3a90:	40064000 	.word	0x40064000

00003a94 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3a94:	b082      	sub	sp, #8
    3a96:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3a98:	4b05      	ldr	r3, [pc, #20]	; (3ab0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a9e:	4a04      	ldr	r2, [pc, #16]	; (3ab0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3aa0:	f023 0302 	bic.w	r3, r3, #2
    3aa4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3aa8:	bf00      	nop
    3aaa:	b002      	add	sp, #8
    3aac:	4770      	bx	lr
    3aae:	bf00      	nop
    3ab0:	40064000 	.word	0x40064000

00003ab4 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ab4:	b500      	push	{lr}
    3ab6:	b08b      	sub	sp, #44	; 0x2c
    3ab8:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3aba:	9b01      	ldr	r3, [sp, #4]
    3abc:	681a      	ldr	r2, [r3, #0]
    3abe:	4975      	ldr	r1, [pc, #468]	; (3c94 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3ac0:	4613      	mov	r3, r2
    3ac2:	00db      	lsls	r3, r3, #3
    3ac4:	4413      	add	r3, r2
    3ac6:	440b      	add	r3, r1
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3acc:	2300      	movs	r3, #0
    3ace:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3ad2:	2300      	movs	r3, #0
    3ad4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3ad8:	4b6f      	ldr	r3, [pc, #444]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ada:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ade:	4a6e      	ldr	r2, [pc, #440]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ae0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ae4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3ae8:	4b6b      	ldr	r3, [pc, #428]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3aea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3af2:	2b00      	cmp	r3, #0
    3af4:	d07d      	beq.n	3bf2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3af6:	9b01      	ldr	r3, [sp, #4]
    3af8:	79db      	ldrb	r3, [r3, #7]
    3afa:	461a      	mov	r2, r3
    3afc:	4b66      	ldr	r3, [pc, #408]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3afe:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3b02:	f003 0303 	and.w	r3, r3, #3
    3b06:	429a      	cmp	r2, r3
    3b08:	d10b      	bne.n	3b22 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3b0a:	9b01      	ldr	r3, [sp, #4]
    3b0c:	799b      	ldrb	r3, [r3, #6]
    3b0e:	461a      	mov	r2, r3
    3b10:	4b61      	ldr	r3, [pc, #388]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b16:	08db      	lsrs	r3, r3, #3
    3b18:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3b1c:	429a      	cmp	r2, r3
    3b1e:	f000 80b4 	beq.w	3c8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3b22:	4b5d      	ldr	r3, [pc, #372]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b28:	f003 0301 	and.w	r3, r3, #1
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d105      	bne.n	3b3c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3b30:	2301      	movs	r3, #1
    3b32:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3b36:	2000      	movs	r0, #0
    3b38:	f7ff fd66 	bl	3608 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3b3c:	2002      	movs	r0, #2
    3b3e:	f7ff fdcf 	bl	36e0 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3b42:	4b55      	ldr	r3, [pc, #340]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b48:	4a53      	ldr	r2, [pc, #332]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b4a:	f023 0301 	bic.w	r3, r3, #1
    3b4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3b52:	9b01      	ldr	r3, [sp, #4]
    3b54:	889b      	ldrh	r3, [r3, #4]
    3b56:	2b01      	cmp	r3, #1
    3b58:	f040 8097 	bne.w	3c8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	79db      	ldrb	r3, [r3, #7]
    3b60:	4a4d      	ldr	r2, [pc, #308]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b62:	f003 0303 	and.w	r3, r3, #3
    3b66:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3b6a:	4b4b      	ldr	r3, [pc, #300]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b6c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3b70:	9b01      	ldr	r3, [sp, #4]
    3b72:	799b      	ldrb	r3, [r3, #6]
    3b74:	00db      	lsls	r3, r3, #3
    3b76:	f003 0308 	and.w	r3, r3, #8
    3b7a:	4313      	orrs	r3, r2
    3b7c:	4a46      	ldr	r2, [pc, #280]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b7e:	f043 0301 	orr.w	r3, r3, #1
    3b82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3b86:	aa03      	add	r2, sp, #12
    3b88:	a904      	add	r1, sp, #16
    3b8a:	a805      	add	r0, sp, #20
    3b8c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b90:	f7fe ff6e 	bl	2a70 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3b94:	4b40      	ldr	r3, [pc, #256]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b9a:	0e1b      	lsrs	r3, r3, #24
    3b9c:	f003 0301 	and.w	r3, r3, #1
    3ba0:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ba2:	9a03      	ldr	r2, [sp, #12]
    3ba4:	a904      	add	r1, sp, #16
    3ba6:	ab05      	add	r3, sp, #20
    3ba8:	4618      	mov	r0, r3
    3baa:	f7fe ff7b 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    3bae:	4603      	mov	r3, r0
    3bb0:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3bb4:	9b06      	ldr	r3, [sp, #24]
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d106      	bne.n	3bc8 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3bba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bbe:	f083 0301 	eor.w	r3, r3, #1
    3bc2:	b2db      	uxtb	r3, r3
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d1e5      	bne.n	3b94 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3bc8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d005      	beq.n	3bdc <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3bd0:	9b01      	ldr	r3, [sp, #4]
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	4619      	mov	r1, r3
    3bd6:	2001      	movs	r0, #1
    3bd8:	f7fe ff3a 	bl	2a50 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3bdc:	2003      	movs	r0, #3
    3bde:	f7ff fd7f 	bl	36e0 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3be2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3be6:	2b00      	cmp	r3, #0
    3be8:	d04f      	beq.n	3c8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3bea:	2002      	movs	r0, #2
    3bec:	f7ff fd26 	bl	363c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3bf0:	e04b      	b.n	3c8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3bf2:	4b29      	ldr	r3, [pc, #164]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bf4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bf8:	4a27      	ldr	r2, [pc, #156]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bfa:	f023 0301 	bic.w	r3, r3, #1
    3bfe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3c02:	9b01      	ldr	r3, [sp, #4]
    3c04:	889b      	ldrh	r3, [r3, #4]
    3c06:	2b01      	cmp	r3, #1
    3c08:	d13f      	bne.n	3c8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c0a:	9b01      	ldr	r3, [sp, #4]
    3c0c:	79db      	ldrb	r3, [r3, #7]
    3c0e:	4a22      	ldr	r2, [pc, #136]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c10:	f003 0303 	and.w	r3, r3, #3
    3c14:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c18:	4b1f      	ldr	r3, [pc, #124]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c1a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c1e:	9b01      	ldr	r3, [sp, #4]
    3c20:	799b      	ldrb	r3, [r3, #6]
    3c22:	00db      	lsls	r3, r3, #3
    3c24:	f003 0308 	and.w	r3, r3, #8
    3c28:	4313      	orrs	r3, r2
    3c2a:	4a1b      	ldr	r2, [pc, #108]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c2c:	f043 0301 	orr.w	r3, r3, #1
    3c30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c34:	aa03      	add	r2, sp, #12
    3c36:	a904      	add	r1, sp, #16
    3c38:	a805      	add	r0, sp, #20
    3c3a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c3e:	f7fe ff17 	bl	2a70 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c42:	4b15      	ldr	r3, [pc, #84]	; (3c98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c48:	0e1b      	lsrs	r3, r3, #24
    3c4a:	f003 0301 	and.w	r3, r3, #1
    3c4e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c50:	9a03      	ldr	r2, [sp, #12]
    3c52:	a904      	add	r1, sp, #16
    3c54:	ab05      	add	r3, sp, #20
    3c56:	4618      	mov	r0, r3
    3c58:	f7fe ff24 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    3c5c:	4603      	mov	r3, r0
    3c5e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c62:	9b06      	ldr	r3, [sp, #24]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d106      	bne.n	3c76 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3c68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c6c:	f083 0301 	eor.w	r3, r3, #1
    3c70:	b2db      	uxtb	r3, r3
    3c72:	2b00      	cmp	r3, #0
    3c74:	d1e5      	bne.n	3c42 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3c76:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d005      	beq.n	3c8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3c7e:	9b01      	ldr	r3, [sp, #4]
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	4619      	mov	r1, r3
    3c84:	2001      	movs	r0, #1
    3c86:	f7fe fee3 	bl	2a50 <Clock_Ip_ReportClockErrors>
}
    3c8a:	bf00      	nop
    3c8c:	b00b      	add	sp, #44	; 0x2c
    3c8e:	f85d fb04 	ldr.w	pc, [sp], #4
    3c92:	bf00      	nop
    3c94:	000104cc 	.word	0x000104cc
    3c98:	40064000 	.word	0x40064000

00003c9c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c9c:	b500      	push	{lr}
    3c9e:	b089      	sub	sp, #36	; 0x24
    3ca0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3ca2:	2300      	movs	r3, #0
    3ca4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3ca8:	9b01      	ldr	r3, [sp, #4]
    3caa:	889b      	ldrh	r3, [r3, #4]
    3cac:	2b01      	cmp	r3, #1
    3cae:	d132      	bne.n	3d16 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3cb0:	4b1b      	ldr	r3, [pc, #108]	; (3d20 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cb6:	4a1a      	ldr	r2, [pc, #104]	; (3d20 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3cb8:	f043 0301 	orr.w	r3, r3, #1
    3cbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cc0:	aa03      	add	r2, sp, #12
    3cc2:	a904      	add	r1, sp, #16
    3cc4:	a805      	add	r0, sp, #20
    3cc6:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cca:	f7fe fed1 	bl	2a70 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3cce:	4b14      	ldr	r3, [pc, #80]	; (3d20 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3cd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cd4:	0e1b      	lsrs	r3, r3, #24
    3cd6:	f003 0301 	and.w	r3, r3, #1
    3cda:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3cdc:	9a03      	ldr	r2, [sp, #12]
    3cde:	a904      	add	r1, sp, #16
    3ce0:	ab05      	add	r3, sp, #20
    3ce2:	4618      	mov	r0, r3
    3ce4:	f7fe fede 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    3ce8:	4603      	mov	r3, r0
    3cea:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3cee:	9b06      	ldr	r3, [sp, #24]
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d106      	bne.n	3d02 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3cf4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cf8:	f083 0301 	eor.w	r3, r3, #1
    3cfc:	b2db      	uxtb	r3, r3
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d1e5      	bne.n	3cce <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3d02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d06:	2b00      	cmp	r3, #0
    3d08:	d005      	beq.n	3d16 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d0a:	9b01      	ldr	r3, [sp, #4]
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	4619      	mov	r1, r3
    3d10:	2001      	movs	r0, #1
    3d12:	f7fe fe9d 	bl	2a50 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3d16:	bf00      	nop
    3d18:	b009      	add	sp, #36	; 0x24
    3d1a:	f85d fb04 	ldr.w	pc, [sp], #4
    3d1e:	bf00      	nop
    3d20:	40064000 	.word	0x40064000

00003d24 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3d24:	b082      	sub	sp, #8
    3d26:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3d28:	4b05      	ldr	r3, [pc, #20]	; (3d40 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3d2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d2e:	4a04      	ldr	r2, [pc, #16]	; (3d40 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3d30:	f023 0301 	bic.w	r3, r3, #1
    3d34:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3d38:	bf00      	nop
    3d3a:	b002      	add	sp, #8
    3d3c:	4770      	bx	lr
    3d3e:	bf00      	nop
    3d40:	40064000 	.word	0x40064000

00003d44 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3d44:	b082      	sub	sp, #8
    3d46:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d48:	bf00      	nop
    3d4a:	b002      	add	sp, #8
    3d4c:	4770      	bx	lr

00003d4e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3d4e:	b082      	sub	sp, #8
    3d50:	9001      	str	r0, [sp, #4]
    3d52:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3d54:	bf00      	nop
    3d56:	b002      	add	sp, #8
    3d58:	4770      	bx	lr

00003d5a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3d5a:	b082      	sub	sp, #8
    3d5c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3d5e:	bf00      	nop
    3d60:	b002      	add	sp, #8
    3d62:	4770      	bx	lr

00003d64 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3d64:	b082      	sub	sp, #8
    3d66:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d68:	bf00      	nop
    3d6a:	b002      	add	sp, #8
    3d6c:	4770      	bx	lr

00003d6e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3d6e:	b082      	sub	sp, #8
    3d70:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3d72:	2302      	movs	r3, #2
}
    3d74:	4618      	mov	r0, r3
    3d76:	b002      	add	sp, #8
    3d78:	4770      	bx	lr

00003d7a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3d7a:	b082      	sub	sp, #8
    3d7c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3d7e:	bf00      	nop
    3d80:	b002      	add	sp, #8
    3d82:	4770      	bx	lr

00003d84 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3d84:	b500      	push	{lr}
    3d86:	b083      	sub	sp, #12
    3d88:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d8a:	9b01      	ldr	r3, [sp, #4]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d002      	beq.n	3d96 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3d90:	9801      	ldr	r0, [sp, #4]
    3d92:	f000 f870 	bl	3e76 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d96:	bf00      	nop
    3d98:	b003      	add	sp, #12
    3d9a:	f85d fb04 	ldr.w	pc, [sp], #4

00003d9e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3d9e:	b500      	push	{lr}
    3da0:	b083      	sub	sp, #12
    3da2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3da4:	9b01      	ldr	r3, [sp, #4]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d002      	beq.n	3db0 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3daa:	9801      	ldr	r0, [sp, #4]
    3dac:	f000 f89a 	bl	3ee4 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3db0:	bf00      	nop
    3db2:	b003      	add	sp, #12
    3db4:	f85d fb04 	ldr.w	pc, [sp], #4

00003db8 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3db8:	b500      	push	{lr}
    3dba:	b089      	sub	sp, #36	; 0x24
    3dbc:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3dbe:	2301      	movs	r3, #1
    3dc0:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3dc2:	2300      	movs	r3, #0
    3dc4:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3dc8:	4b1e      	ldr	r3, [pc, #120]	; (3e44 <Clock_Ip_CompleteSpll+0x8c>)
    3dca:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3dce:	f003 0301 	and.w	r3, r3, #1
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d02f      	beq.n	3e36 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dd6:	aa02      	add	r2, sp, #8
    3dd8:	a903      	add	r1, sp, #12
    3dda:	a804      	add	r0, sp, #16
    3ddc:	f24c 3350 	movw	r3, #50000	; 0xc350
    3de0:	f7fe fe46 	bl	2a70 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3de4:	4b17      	ldr	r3, [pc, #92]	; (3e44 <Clock_Ip_CompleteSpll+0x8c>)
    3de6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3dea:	0e1b      	lsrs	r3, r3, #24
    3dec:	f003 0301 	and.w	r3, r3, #1
    3df0:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3df2:	9a02      	ldr	r2, [sp, #8]
    3df4:	a903      	add	r1, sp, #12
    3df6:	ab04      	add	r3, sp, #16
    3df8:	4618      	mov	r0, r3
    3dfa:	f7fe fe53 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    3dfe:	4603      	mov	r3, r0
    3e00:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3e04:	9b05      	ldr	r3, [sp, #20]
    3e06:	2b00      	cmp	r3, #0
    3e08:	d106      	bne.n	3e18 <Clock_Ip_CompleteSpll+0x60>
    3e0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3e0e:	f083 0301 	eor.w	r3, r3, #1
    3e12:	b2db      	uxtb	r3, r3
    3e14:	2b00      	cmp	r3, #0
    3e16:	d1e5      	bne.n	3de4 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3e18:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3e1c:	f083 0301 	eor.w	r3, r3, #1
    3e20:	b2db      	uxtb	r3, r3
    3e22:	2b00      	cmp	r3, #0
    3e24:	d002      	beq.n	3e2c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3e26:	2302      	movs	r3, #2
    3e28:	9307      	str	r3, [sp, #28]
    3e2a:	e006      	b.n	3e3a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3e2c:	9901      	ldr	r1, [sp, #4]
    3e2e:	2001      	movs	r0, #1
    3e30:	f7fe fe0e 	bl	2a50 <Clock_Ip_ReportClockErrors>
    3e34:	e001      	b.n	3e3a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3e36:	2300      	movs	r3, #0
    3e38:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3e3a:	9b07      	ldr	r3, [sp, #28]
}
    3e3c:	4618      	mov	r0, r3
    3e3e:	b009      	add	sp, #36	; 0x24
    3e40:	f85d fb04 	ldr.w	pc, [sp], #4
    3e44:	40064000 	.word	0x40064000

00003e48 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3e48:	b500      	push	{lr}
    3e4a:	b083      	sub	sp, #12
    3e4c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3e4e:	9801      	ldr	r0, [sp, #4]
    3e50:	f000 f886 	bl	3f60 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e54:	bf00      	nop
    3e56:	b003      	add	sp, #12
    3e58:	f85d fb04 	ldr.w	pc, [sp], #4

00003e5c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3e5c:	b500      	push	{lr}
    3e5e:	b083      	sub	sp, #12
    3e60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e62:	9b01      	ldr	r3, [sp, #4]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d002      	beq.n	3e6e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3e68:	9801      	ldr	r0, [sp, #4]
    3e6a:	f000 f891 	bl	3f90 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e6e:	bf00      	nop
    3e70:	b003      	add	sp, #12
    3e72:	f85d fb04 	ldr.w	pc, [sp], #4

00003e76 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3e76:	b082      	sub	sp, #8
    3e78:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3e7a:	4b19      	ldr	r3, [pc, #100]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3e7c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e80:	4a17      	ldr	r2, [pc, #92]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3e82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e86:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3e8a:	4b15      	ldr	r3, [pc, #84]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3e8c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e90:	4a13      	ldr	r2, [pc, #76]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3e96:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3e9a:	4b11      	ldr	r3, [pc, #68]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3e9c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ea0:	4a0f      	ldr	r2, [pc, #60]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ea2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3ea6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3eaa:	4b0d      	ldr	r3, [pc, #52]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3eac:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3eb0:	4a0b      	ldr	r2, [pc, #44]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3eb2:	f023 0301 	bic.w	r3, r3, #1
    3eb6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3eba:	4b09      	ldr	r3, [pc, #36]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ebc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3ec0:	4a07      	ldr	r2, [pc, #28]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3ec6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3eca:	4b05      	ldr	r3, [pc, #20]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ecc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3ed0:	4a03      	ldr	r2, [pc, #12]	; (3ee0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ed2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3ed6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3eda:	bf00      	nop
    3edc:	b002      	add	sp, #8
    3ede:	4770      	bx	lr
    3ee0:	40064000 	.word	0x40064000

00003ee4 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3ee4:	b082      	sub	sp, #8
    3ee6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3ee8:	9b01      	ldr	r3, [sp, #4]
    3eea:	889b      	ldrh	r3, [r3, #4]
    3eec:	2b01      	cmp	r3, #1
    3eee:	d12f      	bne.n	3f50 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3ef0:	4b1a      	ldr	r3, [pc, #104]	; (3f5c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3ef2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3ef6:	9b01      	ldr	r3, [sp, #4]
    3ef8:	7b5b      	ldrb	r3, [r3, #13]
    3efa:	3b01      	subs	r3, #1
    3efc:	021b      	lsls	r3, r3, #8
    3efe:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	7d1b      	ldrb	r3, [r3, #20]
    3f06:	3b10      	subs	r3, #16
    3f08:	041b      	lsls	r3, r3, #16
    3f0a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3f0e:	430b      	orrs	r3, r1
    3f10:	4912      	ldr	r1, [pc, #72]	; (3f5c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f12:	4313      	orrs	r3, r2
    3f14:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3f18:	9b01      	ldr	r3, [sp, #4]
    3f1a:	7fdb      	ldrb	r3, [r3, #31]
    3f1c:	2b02      	cmp	r3, #2
    3f1e:	d011      	beq.n	3f44 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3f20:	2b02      	cmp	r3, #2
    3f22:	dc17      	bgt.n	3f54 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3f24:	2b00      	cmp	r3, #0
    3f26:	d002      	beq.n	3f2e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d005      	beq.n	3f38 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3f2c:	e012      	b.n	3f54 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3f2e:	4b0b      	ldr	r3, [pc, #44]	; (3f5c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f30:	2200      	movs	r2, #0
    3f32:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3f36:	e00e      	b.n	3f56 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3f38:	4b08      	ldr	r3, [pc, #32]	; (3f5c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3f3e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3f42:	e008      	b.n	3f56 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3f44:	4b05      	ldr	r3, [pc, #20]	; (3f5c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3f4a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3f4e:	e002      	b.n	3f56 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3f50:	bf00      	nop
    3f52:	e000      	b.n	3f56 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3f54:	bf00      	nop
}
    3f56:	bf00      	nop
    3f58:	b002      	add	sp, #8
    3f5a:	4770      	bx	lr
    3f5c:	40064000 	.word	0x40064000

00003f60 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3f60:	b082      	sub	sp, #8
    3f62:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f64:	4b09      	ldr	r3, [pc, #36]	; (3f8c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3f66:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f6a:	4a08      	ldr	r2, [pc, #32]	; (3f8c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3f6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f70:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3f74:	4b05      	ldr	r3, [pc, #20]	; (3f8c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3f76:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f7a:	4a04      	ldr	r2, [pc, #16]	; (3f8c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3f7c:	f023 0301 	bic.w	r3, r3, #1
    3f80:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3f84:	bf00      	nop
    3f86:	b002      	add	sp, #8
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop
    3f8c:	40064000 	.word	0x40064000

00003f90 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f90:	b082      	sub	sp, #8
    3f92:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3f94:	9b01      	ldr	r3, [sp, #4]
    3f96:	889b      	ldrh	r3, [r3, #4]
    3f98:	2b01      	cmp	r3, #1
    3f9a:	d107      	bne.n	3fac <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3f9c:	4b05      	ldr	r3, [pc, #20]	; (3fb4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3f9e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fa2:	4a04      	ldr	r2, [pc, #16]	; (3fb4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3fa4:	f043 0301 	orr.w	r3, r3, #1
    3fa8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3fac:	bf00      	nop
    3fae:	b002      	add	sp, #8
    3fb0:	4770      	bx	lr
    3fb2:	bf00      	nop
    3fb4:	40064000 	.word	0x40064000

00003fb8 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3fb8:	b082      	sub	sp, #8
    3fba:	9001      	str	r0, [sp, #4]
    3fbc:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3fbe:	bf00      	nop
    3fc0:	b002      	add	sp, #8
    3fc2:	4770      	bx	lr

00003fc4 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3fc4:	b082      	sub	sp, #8
    3fc6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3fc8:	bf00      	nop
    3fca:	b002      	add	sp, #8
    3fcc:	4770      	bx	lr

00003fce <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3fce:	b500      	push	{lr}
    3fd0:	b083      	sub	sp, #12
    3fd2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fd4:	9b01      	ldr	r3, [sp, #4]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d002      	beq.n	3fe0 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    3fda:	9801      	ldr	r0, [sp, #4]
    3fdc:	f000 f8ee 	bl	41bc <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fe0:	bf00      	nop
    3fe2:	b003      	add	sp, #12
    3fe4:	f85d fb04 	ldr.w	pc, [sp], #4

00003fe8 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3fe8:	b500      	push	{lr}
    3fea:	b083      	sub	sp, #12
    3fec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fee:	9b01      	ldr	r3, [sp, #4]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d002      	beq.n	3ffa <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3ff4:	9801      	ldr	r0, [sp, #4]
    3ff6:	f000 f8ff 	bl	41f8 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ffa:	bf00      	nop
    3ffc:	b003      	add	sp, #12
    3ffe:	f85d fb04 	ldr.w	pc, [sp], #4

00004002 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4002:	b500      	push	{lr}
    4004:	b083      	sub	sp, #12
    4006:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4008:	9b01      	ldr	r3, [sp, #4]
    400a:	2b00      	cmp	r3, #0
    400c:	d002      	beq.n	4014 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    400e:	9801      	ldr	r0, [sp, #4]
    4010:	f000 f912 	bl	4238 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4014:	bf00      	nop
    4016:	b003      	add	sp, #12
    4018:	f85d fb04 	ldr.w	pc, [sp], #4

0000401c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    401c:	b500      	push	{lr}
    401e:	b083      	sub	sp, #12
    4020:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4022:	9b01      	ldr	r3, [sp, #4]
    4024:	2b00      	cmp	r3, #0
    4026:	d002      	beq.n	402e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4028:	9801      	ldr	r0, [sp, #4]
    402a:	f000 f925 	bl	4278 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    402e:	bf00      	nop
    4030:	b003      	add	sp, #12
    4032:	f85d fb04 	ldr.w	pc, [sp], #4

00004036 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4036:	b500      	push	{lr}
    4038:	b083      	sub	sp, #12
    403a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    403c:	9b01      	ldr	r3, [sp, #4]
    403e:	2b00      	cmp	r3, #0
    4040:	d002      	beq.n	4048 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4042:	9801      	ldr	r0, [sp, #4]
    4044:	f000 f936 	bl	42b4 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4048:	bf00      	nop
    404a:	b003      	add	sp, #12
    404c:	f85d fb04 	ldr.w	pc, [sp], #4

00004050 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4050:	b500      	push	{lr}
    4052:	b083      	sub	sp, #12
    4054:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4056:	9b01      	ldr	r3, [sp, #4]
    4058:	2b00      	cmp	r3, #0
    405a:	d002      	beq.n	4062 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    405c:	9801      	ldr	r0, [sp, #4]
    405e:	f000 f949 	bl	42f4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4062:	bf00      	nop
    4064:	b003      	add	sp, #12
    4066:	f85d fb04 	ldr.w	pc, [sp], #4

0000406a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    406a:	b500      	push	{lr}
    406c:	b083      	sub	sp, #12
    406e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4070:	9b01      	ldr	r3, [sp, #4]
    4072:	2b00      	cmp	r3, #0
    4074:	d002      	beq.n	407c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4076:	9801      	ldr	r0, [sp, #4]
    4078:	f000 f958 	bl	432c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    407c:	bf00      	nop
    407e:	b003      	add	sp, #12
    4080:	f85d fb04 	ldr.w	pc, [sp], #4

00004084 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4084:	b500      	push	{lr}
    4086:	b083      	sub	sp, #12
    4088:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    408a:	9b01      	ldr	r3, [sp, #4]
    408c:	2b00      	cmp	r3, #0
    408e:	d002      	beq.n	4096 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4090:	9801      	ldr	r0, [sp, #4]
    4092:	f000 f969 	bl	4368 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4096:	bf00      	nop
    4098:	b003      	add	sp, #12
    409a:	f85d fb04 	ldr.w	pc, [sp], #4

0000409e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    409e:	b500      	push	{lr}
    40a0:	b083      	sub	sp, #12
    40a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40a4:	9b01      	ldr	r3, [sp, #4]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d002      	beq.n	40b0 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    40aa:	9801      	ldr	r0, [sp, #4]
    40ac:	f000 f978 	bl	43a0 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40b0:	bf00      	nop
    40b2:	b003      	add	sp, #12
    40b4:	f85d fb04 	ldr.w	pc, [sp], #4

000040b8 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    40b8:	b500      	push	{lr}
    40ba:	b083      	sub	sp, #12
    40bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40be:	9b01      	ldr	r3, [sp, #4]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    40c4:	9801      	ldr	r0, [sp, #4]
    40c6:	f000 f989 	bl	43dc <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40ca:	bf00      	nop
    40cc:	b003      	add	sp, #12
    40ce:	f85d fb04 	ldr.w	pc, [sp], #4

000040d2 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    40d2:	b500      	push	{lr}
    40d4:	b083      	sub	sp, #12
    40d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40d8:	9b01      	ldr	r3, [sp, #4]
    40da:	2b00      	cmp	r3, #0
    40dc:	d002      	beq.n	40e4 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    40de:	9801      	ldr	r0, [sp, #4]
    40e0:	f000 f998 	bl	4414 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40e4:	bf00      	nop
    40e6:	b003      	add	sp, #12
    40e8:	f85d fb04 	ldr.w	pc, [sp], #4

000040ec <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    40ec:	b500      	push	{lr}
    40ee:	b083      	sub	sp, #12
    40f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40f2:	9b01      	ldr	r3, [sp, #4]
    40f4:	2b00      	cmp	r3, #0
    40f6:	d002      	beq.n	40fe <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    40f8:	9801      	ldr	r0, [sp, #4]
    40fa:	f000 f9a9 	bl	4450 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40fe:	bf00      	nop
    4100:	b003      	add	sp, #12
    4102:	f85d fb04 	ldr.w	pc, [sp], #4

00004106 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4106:	b500      	push	{lr}
    4108:	b083      	sub	sp, #12
    410a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    410c:	9b01      	ldr	r3, [sp, #4]
    410e:	2b00      	cmp	r3, #0
    4110:	d002      	beq.n	4118 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4112:	9801      	ldr	r0, [sp, #4]
    4114:	f000 f9e6 	bl	44e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4118:	bf00      	nop
    411a:	b003      	add	sp, #12
    411c:	f85d fb04 	ldr.w	pc, [sp], #4

00004120 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4120:	b500      	push	{lr}
    4122:	b083      	sub	sp, #12
    4124:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4126:	9b01      	ldr	r3, [sp, #4]
    4128:	2b00      	cmp	r3, #0
    412a:	d002      	beq.n	4132 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    412c:	9801      	ldr	r0, [sp, #4]
    412e:	f000 fa25 	bl	457c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4132:	bf00      	nop
    4134:	b003      	add	sp, #12
    4136:	f85d fb04 	ldr.w	pc, [sp], #4

0000413a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    413a:	b500      	push	{lr}
    413c:	b083      	sub	sp, #12
    413e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4140:	9b01      	ldr	r3, [sp, #4]
    4142:	2b00      	cmp	r3, #0
    4144:	d002      	beq.n	414c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4146:	9801      	ldr	r0, [sp, #4]
    4148:	f000 fa2a 	bl	45a0 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    414c:	bf00      	nop
    414e:	b003      	add	sp, #12
    4150:	f85d fb04 	ldr.w	pc, [sp], #4

00004154 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4154:	b500      	push	{lr}
    4156:	b083      	sub	sp, #12
    4158:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    415a:	9b01      	ldr	r3, [sp, #4]
    415c:	2b00      	cmp	r3, #0
    415e:	d002      	beq.n	4166 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4160:	9801      	ldr	r0, [sp, #4]
    4162:	f000 fa3b 	bl	45dc <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4166:	bf00      	nop
    4168:	b003      	add	sp, #12
    416a:	f85d fb04 	ldr.w	pc, [sp], #4

0000416e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    416e:	b500      	push	{lr}
    4170:	b083      	sub	sp, #12
    4172:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4174:	9b01      	ldr	r3, [sp, #4]
    4176:	2b00      	cmp	r3, #0
    4178:	d002      	beq.n	4180 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    417a:	9801      	ldr	r0, [sp, #4]
    417c:	f000 fa56 	bl	462c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4180:	bf00      	nop
    4182:	b003      	add	sp, #12
    4184:	f85d fb04 	ldr.w	pc, [sp], #4

00004188 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4188:	b500      	push	{lr}
    418a:	b083      	sub	sp, #12
    418c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    418e:	9b01      	ldr	r3, [sp, #4]
    4190:	2b00      	cmp	r3, #0
    4192:	d002      	beq.n	419a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4194:	9801      	ldr	r0, [sp, #4]
    4196:	f000 fa79 	bl	468c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    419a:	bf00      	nop
    419c:	b003      	add	sp, #12
    419e:	f85d fb04 	ldr.w	pc, [sp], #4

000041a2 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    41a2:	b500      	push	{lr}
    41a4:	b083      	sub	sp, #12
    41a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a8:	9b01      	ldr	r3, [sp, #4]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d002      	beq.n	41b4 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    41ae:	9801      	ldr	r0, [sp, #4]
    41b0:	f000 fa8a 	bl	46c8 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b4:	bf00      	nop
    41b6:	b003      	add	sp, #12
    41b8:	f85d fb04 	ldr.w	pc, [sp], #4

000041bc <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41bc:	b084      	sub	sp, #16
    41be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41c0:	4b0b      	ldr	r3, [pc, #44]	; (41f0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    41c2:	795b      	ldrb	r3, [r3, #5]
    41c4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    41c6:	4b0b      	ldr	r3, [pc, #44]	; (41f4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    41c8:	695b      	ldr	r3, [r3, #20]
    41ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    41cc:	9b02      	ldr	r3, [sp, #8]
    41ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    41d2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    41d4:	9b03      	ldr	r3, [sp, #12]
    41d6:	061b      	lsls	r3, r3, #24
    41d8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    41dc:	9a02      	ldr	r2, [sp, #8]
    41de:	4313      	orrs	r3, r2
    41e0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    41e2:	4a04      	ldr	r2, [pc, #16]	; (41f4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    41e4:	9b02      	ldr	r3, [sp, #8]
    41e6:	6153      	str	r3, [r2, #20]
}
    41e8:	bf00      	nop
    41ea:	b004      	add	sp, #16
    41ec:	4770      	bx	lr
    41ee:	bf00      	nop
    41f0:	00010834 	.word	0x00010834
    41f4:	40064000 	.word	0x40064000

000041f8 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41f8:	b084      	sub	sp, #16
    41fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41fc:	9b01      	ldr	r3, [sp, #4]
    41fe:	685b      	ldr	r3, [r3, #4]
    4200:	4a0b      	ldr	r2, [pc, #44]	; (4230 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4202:	5cd3      	ldrb	r3, [r2, r3]
    4204:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4206:	4b0b      	ldr	r3, [pc, #44]	; (4234 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4208:	695b      	ldr	r3, [r3, #20]
    420a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    420c:	9b02      	ldr	r3, [sp, #8]
    420e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4212:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4214:	9b03      	ldr	r3, [sp, #12]
    4216:	061b      	lsls	r3, r3, #24
    4218:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    421c:	9a02      	ldr	r2, [sp, #8]
    421e:	4313      	orrs	r3, r2
    4220:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4222:	4a04      	ldr	r2, [pc, #16]	; (4234 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4224:	9b02      	ldr	r3, [sp, #8]
    4226:	6153      	str	r3, [r2, #20]
}
    4228:	bf00      	nop
    422a:	b004      	add	sp, #16
    422c:	4770      	bx	lr
    422e:	bf00      	nop
    4230:	00010834 	.word	0x00010834
    4234:	40064000 	.word	0x40064000

00004238 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4238:	b084      	sub	sp, #16
    423a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    423c:	9b01      	ldr	r3, [sp, #4]
    423e:	685b      	ldr	r3, [r3, #4]
    4240:	4a0b      	ldr	r2, [pc, #44]	; (4270 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4242:	5cd3      	ldrb	r3, [r2, r3]
    4244:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4246:	4b0b      	ldr	r3, [pc, #44]	; (4274 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4248:	699b      	ldr	r3, [r3, #24]
    424a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    424c:	9b02      	ldr	r3, [sp, #8]
    424e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4252:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4254:	9b03      	ldr	r3, [sp, #12]
    4256:	061b      	lsls	r3, r3, #24
    4258:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    425c:	9a02      	ldr	r2, [sp, #8]
    425e:	4313      	orrs	r3, r2
    4260:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4262:	4a04      	ldr	r2, [pc, #16]	; (4274 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4264:	9b02      	ldr	r3, [sp, #8]
    4266:	6193      	str	r3, [r2, #24]
}
    4268:	bf00      	nop
    426a:	b004      	add	sp, #16
    426c:	4770      	bx	lr
    426e:	bf00      	nop
    4270:	00010834 	.word	0x00010834
    4274:	40064000 	.word	0x40064000

00004278 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4278:	b084      	sub	sp, #16
    427a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    427c:	4b0b      	ldr	r3, [pc, #44]	; (42ac <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    427e:	795b      	ldrb	r3, [r3, #5]
    4280:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4282:	4b0b      	ldr	r3, [pc, #44]	; (42b0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4284:	69db      	ldr	r3, [r3, #28]
    4286:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4288:	9b02      	ldr	r3, [sp, #8]
    428a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    428e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4290:	9b03      	ldr	r3, [sp, #12]
    4292:	061b      	lsls	r3, r3, #24
    4294:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4298:	9a02      	ldr	r2, [sp, #8]
    429a:	4313      	orrs	r3, r2
    429c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    429e:	4a04      	ldr	r2, [pc, #16]	; (42b0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    42a0:	9b02      	ldr	r3, [sp, #8]
    42a2:	61d3      	str	r3, [r2, #28]
}
    42a4:	bf00      	nop
    42a6:	b004      	add	sp, #16
    42a8:	4770      	bx	lr
    42aa:	bf00      	nop
    42ac:	00010834 	.word	0x00010834
    42b0:	40064000 	.word	0x40064000

000042b4 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42b4:	b084      	sub	sp, #16
    42b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42b8:	9b01      	ldr	r3, [sp, #4]
    42ba:	685b      	ldr	r3, [r3, #4]
    42bc:	4a0b      	ldr	r2, [pc, #44]	; (42ec <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    42be:	5cd3      	ldrb	r3, [r2, r3]
    42c0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    42c2:	4b0b      	ldr	r3, [pc, #44]	; (42f0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    42c4:	69db      	ldr	r3, [r3, #28]
    42c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    42c8:	9b02      	ldr	r3, [sp, #8]
    42ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42ce:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    42d0:	9b03      	ldr	r3, [sp, #12]
    42d2:	061b      	lsls	r3, r3, #24
    42d4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42d8:	9a02      	ldr	r2, [sp, #8]
    42da:	4313      	orrs	r3, r2
    42dc:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    42de:	4a04      	ldr	r2, [pc, #16]	; (42f0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    42e0:	9b02      	ldr	r3, [sp, #8]
    42e2:	61d3      	str	r3, [r2, #28]
}
    42e4:	bf00      	nop
    42e6:	b004      	add	sp, #16
    42e8:	4770      	bx	lr
    42ea:	bf00      	nop
    42ec:	00010834 	.word	0x00010834
    42f0:	40064000 	.word	0x40064000

000042f4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42f4:	b084      	sub	sp, #16
    42f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42f8:	4b0a      	ldr	r3, [pc, #40]	; (4324 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    42fa:	7b9b      	ldrb	r3, [r3, #14]
    42fc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    42fe:	4b0a      	ldr	r3, [pc, #40]	; (4328 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4300:	691b      	ldr	r3, [r3, #16]
    4302:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4304:	9b02      	ldr	r3, [sp, #8]
    4306:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    430a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    430c:	9b03      	ldr	r3, [sp, #12]
    430e:	011b      	lsls	r3, r3, #4
    4310:	9a02      	ldr	r2, [sp, #8]
    4312:	4313      	orrs	r3, r2
    4314:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4316:	4a04      	ldr	r2, [pc, #16]	; (4328 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4318:	9b02      	ldr	r3, [sp, #8]
    431a:	6113      	str	r3, [r2, #16]
}
    431c:	bf00      	nop
    431e:	b004      	add	sp, #16
    4320:	4770      	bx	lr
    4322:	bf00      	nop
    4324:	000107dc 	.word	0x000107dc
    4328:	40048000 	.word	0x40048000

0000432c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    432c:	b084      	sub	sp, #16
    432e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4330:	9b01      	ldr	r3, [sp, #4]
    4332:	685b      	ldr	r3, [r3, #4]
    4334:	4a0a      	ldr	r2, [pc, #40]	; (4360 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4336:	5cd3      	ldrb	r3, [r2, r3]
    4338:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    433a:	4b0a      	ldr	r3, [pc, #40]	; (4364 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    433c:	691b      	ldr	r3, [r3, #16]
    433e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4340:	9b02      	ldr	r3, [sp, #8]
    4342:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4346:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4348:	9b03      	ldr	r3, [sp, #12]
    434a:	011b      	lsls	r3, r3, #4
    434c:	9a02      	ldr	r2, [sp, #8]
    434e:	4313      	orrs	r3, r2
    4350:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4352:	4a04      	ldr	r2, [pc, #16]	; (4364 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4354:	9b02      	ldr	r3, [sp, #8]
    4356:	6113      	str	r3, [r2, #16]
}
    4358:	bf00      	nop
    435a:	b004      	add	sp, #16
    435c:	4770      	bx	lr
    435e:	bf00      	nop
    4360:	000107dc 	.word	0x000107dc
    4364:	40048000 	.word	0x40048000

00004368 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4368:	b084      	sub	sp, #16
    436a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    436c:	4b0a      	ldr	r3, [pc, #40]	; (4398 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    436e:	785b      	ldrb	r3, [r3, #1]
    4370:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4372:	4b0a      	ldr	r3, [pc, #40]	; (439c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4374:	691b      	ldr	r3, [r3, #16]
    4376:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4378:	9b02      	ldr	r3, [sp, #8]
    437a:	f023 030c 	bic.w	r3, r3, #12
    437e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4380:	9b03      	ldr	r3, [sp, #12]
    4382:	009b      	lsls	r3, r3, #2
    4384:	9a02      	ldr	r2, [sp, #8]
    4386:	4313      	orrs	r3, r2
    4388:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    438a:	4a04      	ldr	r2, [pc, #16]	; (439c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    438c:	9b02      	ldr	r3, [sp, #8]
    438e:	6113      	str	r3, [r2, #16]
}
    4390:	bf00      	nop
    4392:	b004      	add	sp, #16
    4394:	4770      	bx	lr
    4396:	bf00      	nop
    4398:	00010894 	.word	0x00010894
    439c:	40048000 	.word	0x40048000

000043a0 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43a0:	b084      	sub	sp, #16
    43a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43a4:	9b01      	ldr	r3, [sp, #4]
    43a6:	685b      	ldr	r3, [r3, #4]
    43a8:	4a0a      	ldr	r2, [pc, #40]	; (43d4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    43aa:	5cd3      	ldrb	r3, [r2, r3]
    43ac:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43ae:	4b0a      	ldr	r3, [pc, #40]	; (43d8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    43b0:	691b      	ldr	r3, [r3, #16]
    43b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    43b4:	9b02      	ldr	r3, [sp, #8]
    43b6:	f023 030c 	bic.w	r3, r3, #12
    43ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    43bc:	9b03      	ldr	r3, [sp, #12]
    43be:	009b      	lsls	r3, r3, #2
    43c0:	9a02      	ldr	r2, [sp, #8]
    43c2:	4313      	orrs	r3, r2
    43c4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43c6:	4a04      	ldr	r2, [pc, #16]	; (43d8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    43c8:	9b02      	ldr	r3, [sp, #8]
    43ca:	6113      	str	r3, [r2, #16]
}
    43cc:	bf00      	nop
    43ce:	b004      	add	sp, #16
    43d0:	4770      	bx	lr
    43d2:	bf00      	nop
    43d4:	00010894 	.word	0x00010894
    43d8:	40048000 	.word	0x40048000

000043dc <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43dc:	b084      	sub	sp, #16
    43de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43e0:	4b0a      	ldr	r3, [pc, #40]	; (440c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    43e2:	795b      	ldrb	r3, [r3, #5]
    43e4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    43e6:	4b0a      	ldr	r3, [pc, #40]	; (4410 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    43e8:	6a1b      	ldr	r3, [r3, #32]
    43ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    43ec:	9b02      	ldr	r3, [sp, #8]
    43ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    43f4:	9b03      	ldr	r3, [sp, #12]
    43f6:	061b      	lsls	r3, r3, #24
    43f8:	9a02      	ldr	r2, [sp, #8]
    43fa:	4313      	orrs	r3, r2
    43fc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    43fe:	4a04      	ldr	r2, [pc, #16]	; (4410 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4400:	9b02      	ldr	r3, [sp, #8]
    4402:	6213      	str	r3, [r2, #32]
}
    4404:	bf00      	nop
    4406:	b004      	add	sp, #16
    4408:	4770      	bx	lr
    440a:	bf00      	nop
    440c:	00010834 	.word	0x00010834
    4410:	40064000 	.word	0x40064000

00004414 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4414:	b084      	sub	sp, #16
    4416:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4418:	9b01      	ldr	r3, [sp, #4]
    441a:	685b      	ldr	r3, [r3, #4]
    441c:	4a0a      	ldr	r2, [pc, #40]	; (4448 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    441e:	5cd3      	ldrb	r3, [r2, r3]
    4420:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4422:	4b0a      	ldr	r3, [pc, #40]	; (444c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4424:	6a1b      	ldr	r3, [r3, #32]
    4426:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4428:	9b02      	ldr	r3, [sp, #8]
    442a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    442e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4430:	9b03      	ldr	r3, [sp, #12]
    4432:	061b      	lsls	r3, r3, #24
    4434:	9a02      	ldr	r2, [sp, #8]
    4436:	4313      	orrs	r3, r2
    4438:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    443a:	4a04      	ldr	r2, [pc, #16]	; (444c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    443c:	9b02      	ldr	r3, [sp, #8]
    443e:	6213      	str	r3, [r2, #32]
}
    4440:	bf00      	nop
    4442:	b004      	add	sp, #16
    4444:	4770      	bx	lr
    4446:	bf00      	nop
    4448:	00010834 	.word	0x00010834
    444c:	40064000 	.word	0x40064000

00004450 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4450:	b086      	sub	sp, #24
    4452:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4454:	4b20      	ldr	r3, [pc, #128]	; (44d8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4456:	795b      	ldrb	r3, [r3, #5]
    4458:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    445a:	9b01      	ldr	r3, [sp, #4]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	491f      	ldr	r1, [pc, #124]	; (44dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4460:	4613      	mov	r3, r2
    4462:	00db      	lsls	r3, r3, #3
    4464:	4413      	add	r3, r2
    4466:	440b      	add	r3, r1
    4468:	781b      	ldrb	r3, [r3, #0]
    446a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    446c:	4b1c      	ldr	r3, [pc, #112]	; (44e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    446e:	68db      	ldr	r3, [r3, #12]
    4470:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4472:	9b03      	ldr	r3, [sp, #12]
    4474:	2b03      	cmp	r3, #3
    4476:	d813      	bhi.n	44a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4478:	9b03      	ldr	r3, [sp, #12]
    447a:	005b      	lsls	r3, r3, #1
    447c:	3318      	adds	r3, #24
    447e:	2203      	movs	r2, #3
    4480:	fa02 f303 	lsl.w	r3, r2, r3
    4484:	43db      	mvns	r3, r3
    4486:	9a05      	ldr	r2, [sp, #20]
    4488:	4013      	ands	r3, r2
    448a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    448c:	9b03      	ldr	r3, [sp, #12]
    448e:	005b      	lsls	r3, r3, #1
    4490:	3318      	adds	r3, #24
    4492:	9a04      	ldr	r2, [sp, #16]
    4494:	fa02 f303 	lsl.w	r3, r2, r3
    4498:	9a05      	ldr	r2, [sp, #20]
    449a:	4313      	orrs	r3, r2
    449c:	9305      	str	r3, [sp, #20]
    449e:	e014      	b.n	44ca <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    44a0:	9b03      	ldr	r3, [sp, #12]
    44a2:	3b04      	subs	r3, #4
    44a4:	005b      	lsls	r3, r3, #1
    44a6:	3310      	adds	r3, #16
    44a8:	2203      	movs	r2, #3
    44aa:	fa02 f303 	lsl.w	r3, r2, r3
    44ae:	43db      	mvns	r3, r3
    44b0:	9a05      	ldr	r2, [sp, #20]
    44b2:	4013      	ands	r3, r2
    44b4:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    44b6:	9b03      	ldr	r3, [sp, #12]
    44b8:	3b04      	subs	r3, #4
    44ba:	005b      	lsls	r3, r3, #1
    44bc:	3310      	adds	r3, #16
    44be:	9a04      	ldr	r2, [sp, #16]
    44c0:	fa02 f303 	lsl.w	r3, r2, r3
    44c4:	9a05      	ldr	r2, [sp, #20]
    44c6:	4313      	orrs	r3, r2
    44c8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    44ca:	4a05      	ldr	r2, [pc, #20]	; (44e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    44cc:	9b05      	ldr	r3, [sp, #20]
    44ce:	60d3      	str	r3, [r2, #12]
}
    44d0:	bf00      	nop
    44d2:	b006      	add	sp, #24
    44d4:	4770      	bx	lr
    44d6:	bf00      	nop
    44d8:	000107dc 	.word	0x000107dc
    44dc:	000104cc 	.word	0x000104cc
    44e0:	40048000 	.word	0x40048000

000044e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44e4:	b086      	sub	sp, #24
    44e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44e8:	9b01      	ldr	r3, [sp, #4]
    44ea:	685b      	ldr	r3, [r3, #4]
    44ec:	4a20      	ldr	r2, [pc, #128]	; (4570 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    44ee:	5cd3      	ldrb	r3, [r2, r3]
    44f0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    44f2:	9b01      	ldr	r3, [sp, #4]
    44f4:	681a      	ldr	r2, [r3, #0]
    44f6:	491f      	ldr	r1, [pc, #124]	; (4574 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    44f8:	4613      	mov	r3, r2
    44fa:	00db      	lsls	r3, r3, #3
    44fc:	4413      	add	r3, r2
    44fe:	440b      	add	r3, r1
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4504:	4b1c      	ldr	r3, [pc, #112]	; (4578 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4506:	68db      	ldr	r3, [r3, #12]
    4508:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    450a:	9b03      	ldr	r3, [sp, #12]
    450c:	2b03      	cmp	r3, #3
    450e:	d813      	bhi.n	4538 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4510:	9b03      	ldr	r3, [sp, #12]
    4512:	005b      	lsls	r3, r3, #1
    4514:	3318      	adds	r3, #24
    4516:	2203      	movs	r2, #3
    4518:	fa02 f303 	lsl.w	r3, r2, r3
    451c:	43db      	mvns	r3, r3
    451e:	9a05      	ldr	r2, [sp, #20]
    4520:	4013      	ands	r3, r2
    4522:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4524:	9b03      	ldr	r3, [sp, #12]
    4526:	005b      	lsls	r3, r3, #1
    4528:	3318      	adds	r3, #24
    452a:	9a04      	ldr	r2, [sp, #16]
    452c:	fa02 f303 	lsl.w	r3, r2, r3
    4530:	9a05      	ldr	r2, [sp, #20]
    4532:	4313      	orrs	r3, r2
    4534:	9305      	str	r3, [sp, #20]
    4536:	e014      	b.n	4562 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	3b04      	subs	r3, #4
    453c:	005b      	lsls	r3, r3, #1
    453e:	3310      	adds	r3, #16
    4540:	2203      	movs	r2, #3
    4542:	fa02 f303 	lsl.w	r3, r2, r3
    4546:	43db      	mvns	r3, r3
    4548:	9a05      	ldr	r2, [sp, #20]
    454a:	4013      	ands	r3, r2
    454c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    454e:	9b03      	ldr	r3, [sp, #12]
    4550:	3b04      	subs	r3, #4
    4552:	005b      	lsls	r3, r3, #1
    4554:	3310      	adds	r3, #16
    4556:	9a04      	ldr	r2, [sp, #16]
    4558:	fa02 f303 	lsl.w	r3, r2, r3
    455c:	9a05      	ldr	r2, [sp, #20]
    455e:	4313      	orrs	r3, r2
    4560:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4562:	4a05      	ldr	r2, [pc, #20]	; (4578 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4564:	9b05      	ldr	r3, [sp, #20]
    4566:	60d3      	str	r3, [r2, #12]
}
    4568:	bf00      	nop
    456a:	b006      	add	sp, #24
    456c:	4770      	bx	lr
    456e:	bf00      	nop
    4570:	000107dc 	.word	0x000107dc
    4574:	000104cc 	.word	0x000104cc
    4578:	40048000 	.word	0x40048000

0000457c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    457c:	b084      	sub	sp, #16
    457e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4580:	4b06      	ldr	r3, [pc, #24]	; (459c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4582:	685b      	ldr	r3, [r3, #4]
    4584:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4586:	9b03      	ldr	r3, [sp, #12]
    4588:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    458c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    458e:	4a03      	ldr	r2, [pc, #12]	; (459c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4590:	9b03      	ldr	r3, [sp, #12]
    4592:	6053      	str	r3, [r2, #4]
}
    4594:	bf00      	nop
    4596:	b004      	add	sp, #16
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	40048000 	.word	0x40048000

000045a0 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45a0:	b084      	sub	sp, #16
    45a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45a4:	9b01      	ldr	r3, [sp, #4]
    45a6:	685b      	ldr	r3, [r3, #4]
    45a8:	4a0a      	ldr	r2, [pc, #40]	; (45d4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    45aa:	5cd3      	ldrb	r3, [r2, r3]
    45ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    45ae:	4b0a      	ldr	r3, [pc, #40]	; (45d8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    45b0:	685b      	ldr	r3, [r3, #4]
    45b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    45b4:	9b02      	ldr	r3, [sp, #8]
    45b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    45ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    45bc:	9b03      	ldr	r3, [sp, #12]
    45be:	011b      	lsls	r3, r3, #4
    45c0:	9a02      	ldr	r2, [sp, #8]
    45c2:	4313      	orrs	r3, r2
    45c4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    45c6:	4a04      	ldr	r2, [pc, #16]	; (45d8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    45c8:	9b02      	ldr	r3, [sp, #8]
    45ca:	6053      	str	r3, [r2, #4]
}
    45cc:	bf00      	nop
    45ce:	b004      	add	sp, #16
    45d0:	4770      	bx	lr
    45d2:	bf00      	nop
    45d4:	000107dc 	.word	0x000107dc
    45d8:	40048000 	.word	0x40048000

000045dc <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45dc:	b084      	sub	sp, #16
    45de:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    45e0:	9b01      	ldr	r3, [sp, #4]
    45e2:	681a      	ldr	r2, [r3, #0]
    45e4:	490f      	ldr	r1, [pc, #60]	; (4624 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    45e6:	4613      	mov	r3, r2
    45e8:	00db      	lsls	r3, r3, #3
    45ea:	4413      	add	r3, r2
    45ec:	440b      	add	r3, r1
    45ee:	3304      	adds	r3, #4
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    45f4:	4a0c      	ldr	r2, [pc, #48]	; (4628 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    45f6:	9b03      	ldr	r3, [sp, #12]
    45f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    45fc:	490a      	ldr	r1, [pc, #40]	; (4628 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    45fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4602:	9b03      	ldr	r3, [sp, #12]
    4604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4608:	4a07      	ldr	r2, [pc, #28]	; (4628 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    460a:	9b03      	ldr	r3, [sp, #12]
    460c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4610:	4905      	ldr	r1, [pc, #20]	; (4628 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4612:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4616:	9b03      	ldr	r3, [sp, #12]
    4618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    461c:	bf00      	nop
    461e:	b004      	add	sp, #16
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	000104cc 	.word	0x000104cc
    4628:	40065000 	.word	0x40065000

0000462c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    462c:	b086      	sub	sp, #24
    462e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4630:	9b01      	ldr	r3, [sp, #4]
    4632:	681a      	ldr	r2, [r3, #0]
    4634:	4912      	ldr	r1, [pc, #72]	; (4680 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4636:	4613      	mov	r3, r2
    4638:	00db      	lsls	r3, r3, #3
    463a:	4413      	add	r3, r2
    463c:	440b      	add	r3, r1
    463e:	3304      	adds	r3, #4
    4640:	781b      	ldrb	r3, [r3, #0]
    4642:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	685b      	ldr	r3, [r3, #4]
    4648:	4a0e      	ldr	r2, [pc, #56]	; (4684 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    464a:	5cd3      	ldrb	r3, [r2, r3]
    464c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    464e:	4a0e      	ldr	r2, [pc, #56]	; (4688 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4650:	9b05      	ldr	r3, [sp, #20]
    4652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4656:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4658:	9b03      	ldr	r3, [sp, #12]
    465a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    465e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4660:	9b04      	ldr	r3, [sp, #16]
    4662:	061b      	lsls	r3, r3, #24
    4664:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4668:	9a03      	ldr	r2, [sp, #12]
    466a:	4313      	orrs	r3, r2
    466c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    466e:	4906      	ldr	r1, [pc, #24]	; (4688 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4670:	9b05      	ldr	r3, [sp, #20]
    4672:	9a03      	ldr	r2, [sp, #12]
    4674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4678:	bf00      	nop
    467a:	b006      	add	sp, #24
    467c:	4770      	bx	lr
    467e:	bf00      	nop
    4680:	000104cc 	.word	0x000104cc
    4684:	00010864 	.word	0x00010864
    4688:	40065000 	.word	0x40065000

0000468c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    468c:	b084      	sub	sp, #16
    468e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4690:	4b0b      	ldr	r3, [pc, #44]	; (46c0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4692:	7f1b      	ldrb	r3, [r3, #28]
    4694:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4696:	4b0b      	ldr	r3, [pc, #44]	; (46c4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4698:	685b      	ldr	r3, [r3, #4]
    469a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    469c:	9b02      	ldr	r3, [sp, #8]
    469e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    46a2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    46a4:	9b03      	ldr	r3, [sp, #12]
    46a6:	031b      	lsls	r3, r3, #12
    46a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    46ac:	9a02      	ldr	r2, [sp, #8]
    46ae:	4313      	orrs	r3, r2
    46b0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    46b2:	4a04      	ldr	r2, [pc, #16]	; (46c4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    46b4:	9b02      	ldr	r3, [sp, #8]
    46b6:	6053      	str	r3, [r2, #4]
}
    46b8:	bf00      	nop
    46ba:	b004      	add	sp, #16
    46bc:	4770      	bx	lr
    46be:	bf00      	nop
    46c0:	000107dc 	.word	0x000107dc
    46c4:	40048000 	.word	0x40048000

000046c8 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46c8:	b084      	sub	sp, #16
    46ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46cc:	9b01      	ldr	r3, [sp, #4]
    46ce:	685b      	ldr	r3, [r3, #4]
    46d0:	4a0b      	ldr	r2, [pc, #44]	; (4700 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    46d2:	5cd3      	ldrb	r3, [r2, r3]
    46d4:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    46d6:	4b0b      	ldr	r3, [pc, #44]	; (4704 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    46d8:	685b      	ldr	r3, [r3, #4]
    46da:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    46dc:	9b02      	ldr	r3, [sp, #8]
    46de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    46e2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    46e4:	9b03      	ldr	r3, [sp, #12]
    46e6:	031b      	lsls	r3, r3, #12
    46e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    46ec:	9a02      	ldr	r2, [sp, #8]
    46ee:	4313      	orrs	r3, r2
    46f0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    46f2:	4a04      	ldr	r2, [pc, #16]	; (4704 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    46f4:	9b02      	ldr	r3, [sp, #8]
    46f6:	6053      	str	r3, [r2, #4]
}
    46f8:	bf00      	nop
    46fa:	b004      	add	sp, #16
    46fc:	4770      	bx	lr
    46fe:	bf00      	nop
    4700:	000107dc 	.word	0x000107dc
    4704:	40048000 	.word	0x40048000

00004708 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4708:	b500      	push	{lr}
    470a:	b085      	sub	sp, #20
    470c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    470e:	2300      	movs	r3, #0
    4710:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4714:	9b01      	ldr	r3, [sp, #4]
    4716:	2b00      	cmp	r3, #0
    4718:	d037      	beq.n	478a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    471a:	2300      	movs	r3, #0
    471c:	9303      	str	r3, [sp, #12]
    471e:	e02b      	b.n	4778 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4720:	4b29      	ldr	r3, [pc, #164]	; (47c8 <DisableSafeClock+0xc0>)
    4722:	6819      	ldr	r1, [r3, #0]
    4724:	9a03      	ldr	r2, [sp, #12]
    4726:	4613      	mov	r3, r2
    4728:	005b      	lsls	r3, r3, #1
    472a:	4413      	add	r3, r2
    472c:	009b      	lsls	r3, r3, #2
    472e:	440b      	add	r3, r1
    4730:	3314      	adds	r3, #20
    4732:	681b      	ldr	r3, [r3, #0]
    4734:	2b05      	cmp	r3, #5
    4736:	d11c      	bne.n	4772 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4738:	2301      	movs	r3, #1
    473a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    473e:	4b22      	ldr	r3, [pc, #136]	; (47c8 <DisableSafeClock+0xc0>)
    4740:	6819      	ldr	r1, [r3, #0]
    4742:	9a03      	ldr	r2, [sp, #12]
    4744:	4613      	mov	r3, r2
    4746:	005b      	lsls	r3, r3, #1
    4748:	4413      	add	r3, r2
    474a:	009b      	lsls	r3, r3, #2
    474c:	440b      	add	r3, r1
    474e:	3318      	adds	r3, #24
    4750:	881b      	ldrh	r3, [r3, #0]
    4752:	2b00      	cmp	r3, #0
    4754:	d118      	bne.n	4788 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4756:	4b1d      	ldr	r3, [pc, #116]	; (47cc <DisableSafeClock+0xc4>)
    4758:	791b      	ldrb	r3, [r3, #4]
    475a:	4619      	mov	r1, r3
    475c:	4a1c      	ldr	r2, [pc, #112]	; (47d0 <DisableSafeClock+0xc8>)
    475e:	460b      	mov	r3, r1
    4760:	005b      	lsls	r3, r3, #1
    4762:	440b      	add	r3, r1
    4764:	009b      	lsls	r3, r3, #2
    4766:	4413      	add	r3, r2
    4768:	3308      	adds	r3, #8
    476a:	681b      	ldr	r3, [r3, #0]
    476c:	2005      	movs	r0, #5
    476e:	4798      	blx	r3
                }
                break;
    4770:	e00a      	b.n	4788 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4772:	9b03      	ldr	r3, [sp, #12]
    4774:	3301      	adds	r3, #1
    4776:	9303      	str	r3, [sp, #12]
    4778:	4b13      	ldr	r3, [pc, #76]	; (47c8 <DisableSafeClock+0xc0>)
    477a:	681b      	ldr	r3, [r3, #0]
    477c:	7a1b      	ldrb	r3, [r3, #8]
    477e:	461a      	mov	r2, r3
    4780:	9b03      	ldr	r3, [sp, #12]
    4782:	4293      	cmp	r3, r2
    4784:	d3cc      	bcc.n	4720 <DisableSafeClock+0x18>
    4786:	e000      	b.n	478a <DisableSafeClock+0x82>
                break;
    4788:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    478a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    478e:	f083 0301 	eor.w	r3, r3, #1
    4792:	b2db      	uxtb	r3, r3
    4794:	2b00      	cmp	r3, #0
    4796:	d013      	beq.n	47c0 <DisableSafeClock+0xb8>
    4798:	4b0e      	ldr	r3, [pc, #56]	; (47d4 <DisableSafeClock+0xcc>)
    479a:	781b      	ldrb	r3, [r3, #0]
    479c:	f083 0301 	eor.w	r3, r3, #1
    47a0:	b2db      	uxtb	r3, r3
    47a2:	2b00      	cmp	r3, #0
    47a4:	d00c      	beq.n	47c0 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    47a6:	4b09      	ldr	r3, [pc, #36]	; (47cc <DisableSafeClock+0xc4>)
    47a8:	791b      	ldrb	r3, [r3, #4]
    47aa:	4619      	mov	r1, r3
    47ac:	4a08      	ldr	r2, [pc, #32]	; (47d0 <DisableSafeClock+0xc8>)
    47ae:	460b      	mov	r3, r1
    47b0:	005b      	lsls	r3, r3, #1
    47b2:	440b      	add	r3, r1
    47b4:	009b      	lsls	r3, r3, #2
    47b6:	4413      	add	r3, r2
    47b8:	3308      	adds	r3, #8
    47ba:	681b      	ldr	r3, [r3, #0]
    47bc:	2005      	movs	r0, #5
    47be:	4798      	blx	r3
    }
}
    47c0:	bf00      	nop
    47c2:	b005      	add	sp, #20
    47c4:	f85d fb04 	ldr.w	pc, [sp], #4
    47c8:	1fff8bbc 	.word	0x1fff8bbc
    47cc:	0001045c 	.word	0x0001045c
    47d0:	00010a8c 	.word	0x00010a8c
    47d4:	1fff8b18 	.word	0x1fff8b18

000047d8 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    47d8:	4b06      	ldr	r3, [pc, #24]	; (47f4 <SetFircToResetValue_TrustedCall+0x1c>)
    47da:	2200      	movs	r2, #0
    47dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    47e0:	4b04      	ldr	r3, [pc, #16]	; (47f4 <SetFircToResetValue_TrustedCall+0x1c>)
    47e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    47e6:	4a03      	ldr	r2, [pc, #12]	; (47f4 <SetFircToResetValue_TrustedCall+0x1c>)
    47e8:	f043 0301 	orr.w	r3, r3, #1
    47ec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    47f0:	bf00      	nop
    47f2:	4770      	bx	lr
    47f4:	40064000 	.word	0x40064000

000047f8 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    47f8:	b084      	sub	sp, #16
    47fa:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    47fc:	2303      	movs	r3, #3
    47fe:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4800:	2300      	movs	r3, #0
    4802:	9302      	str	r3, [sp, #8]
    4804:	e028      	b.n	4858 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4806:	9b01      	ldr	r3, [sp, #4]
    4808:	9a02      	ldr	r2, [sp, #8]
    480a:	320d      	adds	r2, #13
    480c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4810:	2b28      	cmp	r3, #40	; 0x28
    4812:	d10b      	bne.n	482c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4814:	9a01      	ldr	r2, [sp, #4]
    4816:	9b02      	ldr	r3, [sp, #8]
    4818:	330d      	adds	r3, #13
    481a:	00db      	lsls	r3, r3, #3
    481c:	4413      	add	r3, r2
    481e:	685b      	ldr	r3, [r3, #4]
    4820:	4a2b      	ldr	r2, [pc, #172]	; (48d0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4822:	5cd3      	ldrb	r3, [r2, r3]
    4824:	011b      	lsls	r3, r3, #4
    4826:	9a03      	ldr	r2, [sp, #12]
    4828:	4313      	orrs	r3, r2
    482a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    482c:	9b01      	ldr	r3, [sp, #4]
    482e:	9a02      	ldr	r2, [sp, #8]
    4830:	320d      	adds	r2, #13
    4832:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4836:	2b29      	cmp	r3, #41	; 0x29
    4838:	d10b      	bne.n	4852 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    483a:	9a01      	ldr	r2, [sp, #4]
    483c:	9b02      	ldr	r3, [sp, #8]
    483e:	330d      	adds	r3, #13
    4840:	00db      	lsls	r3, r3, #3
    4842:	4413      	add	r3, r2
    4844:	685b      	ldr	r3, [r3, #4]
    4846:	4a23      	ldr	r2, [pc, #140]	; (48d4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4848:	5cd3      	ldrb	r3, [r2, r3]
    484a:	009b      	lsls	r3, r3, #2
    484c:	9a03      	ldr	r2, [sp, #12]
    484e:	4313      	orrs	r3, r2
    4850:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4852:	9b02      	ldr	r3, [sp, #8]
    4854:	3301      	adds	r3, #1
    4856:	9302      	str	r3, [sp, #8]
    4858:	9b01      	ldr	r3, [sp, #4]
    485a:	7adb      	ldrb	r3, [r3, #11]
    485c:	461a      	mov	r2, r3
    485e:	9b02      	ldr	r3, [sp, #8]
    4860:	4293      	cmp	r3, r2
    4862:	d3d0      	bcc.n	4806 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4864:	2300      	movs	r3, #0
    4866:	9302      	str	r3, [sp, #8]
    4868:	e026      	b.n	48b8 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    486a:	9a01      	ldr	r2, [sp, #4]
    486c:	9b02      	ldr	r3, [sp, #8]
    486e:	334e      	adds	r3, #78	; 0x4e
    4870:	00db      	lsls	r3, r3, #3
    4872:	4413      	add	r3, r2
    4874:	685b      	ldr	r3, [r3, #4]
    4876:	2b12      	cmp	r3, #18
    4878:	d109      	bne.n	488e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    487a:	9a01      	ldr	r2, [sp, #4]
    487c:	9b02      	ldr	r3, [sp, #8]
    487e:	334e      	adds	r3, #78	; 0x4e
    4880:	00db      	lsls	r3, r3, #3
    4882:	4413      	add	r3, r2
    4884:	891b      	ldrh	r3, [r3, #8]
    4886:	005b      	lsls	r3, r3, #1
    4888:	9a03      	ldr	r2, [sp, #12]
    488a:	4313      	orrs	r3, r2
    488c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    488e:	9a01      	ldr	r2, [sp, #4]
    4890:	9b02      	ldr	r3, [sp, #8]
    4892:	334e      	adds	r3, #78	; 0x4e
    4894:	00db      	lsls	r3, r3, #3
    4896:	4413      	add	r3, r2
    4898:	685b      	ldr	r3, [r3, #4]
    489a:	2b13      	cmp	r3, #19
    489c:	d109      	bne.n	48b2 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    489e:	9a01      	ldr	r2, [sp, #4]
    48a0:	9b02      	ldr	r3, [sp, #8]
    48a2:	334e      	adds	r3, #78	; 0x4e
    48a4:	00db      	lsls	r3, r3, #3
    48a6:	4413      	add	r3, r2
    48a8:	891b      	ldrh	r3, [r3, #8]
    48aa:	461a      	mov	r2, r3
    48ac:	9b03      	ldr	r3, [sp, #12]
    48ae:	4313      	orrs	r3, r2
    48b0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    48b2:	9b02      	ldr	r3, [sp, #8]
    48b4:	3301      	adds	r3, #1
    48b6:	9302      	str	r3, [sp, #8]
    48b8:	9b01      	ldr	r3, [sp, #4]
    48ba:	7c1b      	ldrb	r3, [r3, #16]
    48bc:	461a      	mov	r2, r3
    48be:	9b02      	ldr	r3, [sp, #8]
    48c0:	4293      	cmp	r3, r2
    48c2:	d3d2      	bcc.n	486a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    48c4:	4a04      	ldr	r2, [pc, #16]	; (48d8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    48c6:	9b03      	ldr	r3, [sp, #12]
    48c8:	6113      	str	r3, [r2, #16]
}
    48ca:	bf00      	nop
    48cc:	b004      	add	sp, #16
    48ce:	4770      	bx	lr
    48d0:	000107dc 	.word	0x000107dc
    48d4:	00010894 	.word	0x00010894
    48d8:	40048000 	.word	0x40048000

000048dc <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    48dc:	b500      	push	{lr}
    48de:	b089      	sub	sp, #36	; 0x24
    48e0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    48e2:	2300      	movs	r3, #0
    48e4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    48e8:	4a21      	ldr	r2, [pc, #132]	; (4970 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    48ea:	9b01      	ldr	r3, [sp, #4]
    48ec:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    48ee:	4b21      	ldr	r3, [pc, #132]	; (4974 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    48f0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48f4:	f003 0301 	and.w	r3, r3, #1
    48f8:	2b00      	cmp	r3, #0
    48fa:	d12e      	bne.n	495a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    48fc:	4b1e      	ldr	r3, [pc, #120]	; (4978 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    48fe:	2200      	movs	r2, #0
    4900:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4902:	f7ff ff69 	bl	47d8 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4906:	aa03      	add	r2, sp, #12
    4908:	a904      	add	r1, sp, #16
    490a:	a805      	add	r0, sp, #20
    490c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4910:	f7fe f8ae 	bl	2a70 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4914:	4b17      	ldr	r3, [pc, #92]	; (4974 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    491a:	0e1b      	lsrs	r3, r3, #24
    491c:	f003 0301 	and.w	r3, r3, #1
    4920:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4922:	9a03      	ldr	r2, [sp, #12]
    4924:	a904      	add	r1, sp, #16
    4926:	ab05      	add	r3, sp, #20
    4928:	4618      	mov	r0, r3
    492a:	f7fe f8bb 	bl	2aa4 <Clock_Ip_TimeoutExpired>
    492e:	4603      	mov	r3, r0
    4930:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4934:	9b06      	ldr	r3, [sp, #24]
    4936:	2b00      	cmp	r3, #0
    4938:	d106      	bne.n	4948 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    493a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    493e:	f083 0301 	eor.w	r3, r3, #1
    4942:	b2db      	uxtb	r3, r3
    4944:	2b00      	cmp	r3, #0
    4946:	d1e5      	bne.n	4914 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4948:	f89d 301f 	ldrb.w	r3, [sp, #31]
    494c:	2b00      	cmp	r3, #0
    494e:	d007      	beq.n	4960 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4950:	2105      	movs	r1, #5
    4952:	2001      	movs	r0, #1
    4954:	f7fe f87c 	bl	2a50 <Clock_Ip_ReportClockErrors>
    4958:	e002      	b.n	4960 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    495a:	4b07      	ldr	r3, [pc, #28]	; (4978 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    495c:	2201      	movs	r2, #1
    495e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4960:	9801      	ldr	r0, [sp, #4]
    4962:	f7ff ff49 	bl	47f8 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4966:	bf00      	nop
    4968:	b009      	add	sp, #36	; 0x24
    496a:	f85d fb04 	ldr.w	pc, [sp], #4
    496e:	bf00      	nop
    4970:	1fff8bbc 	.word	0x1fff8bbc
    4974:	40064000 	.word	0x40064000
    4978:	1fff8b18 	.word	0x1fff8b18

0000497c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    497c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    497e:	2300      	movs	r3, #0
    4980:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4982:	4b29      	ldr	r3, [pc, #164]	; (4a28 <getFircConfig+0xac>)
    4984:	681b      	ldr	r3, [r3, #0]
    4986:	2b00      	cmp	r3, #0
    4988:	d024      	beq.n	49d4 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    498a:	2300      	movs	r3, #0
    498c:	9301      	str	r3, [sp, #4]
    498e:	e01a      	b.n	49c6 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4990:	4b25      	ldr	r3, [pc, #148]	; (4a28 <getFircConfig+0xac>)
    4992:	6819      	ldr	r1, [r3, #0]
    4994:	9a01      	ldr	r2, [sp, #4]
    4996:	4613      	mov	r3, r2
    4998:	005b      	lsls	r3, r3, #1
    499a:	4413      	add	r3, r2
    499c:	009b      	lsls	r3, r3, #2
    499e:	440b      	add	r3, r1
    49a0:	3314      	adds	r3, #20
    49a2:	681b      	ldr	r3, [r3, #0]
    49a4:	2b05      	cmp	r3, #5
    49a6:	d10b      	bne.n	49c0 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    49a8:	4b1f      	ldr	r3, [pc, #124]	; (4a28 <getFircConfig+0xac>)
    49aa:	6819      	ldr	r1, [r3, #0]
    49ac:	9a01      	ldr	r2, [sp, #4]
    49ae:	4613      	mov	r3, r2
    49b0:	005b      	lsls	r3, r3, #1
    49b2:	4413      	add	r3, r2
    49b4:	009b      	lsls	r3, r3, #2
    49b6:	3310      	adds	r3, #16
    49b8:	440b      	add	r3, r1
    49ba:	3304      	adds	r3, #4
    49bc:	9300      	str	r3, [sp, #0]
                break;
    49be:	e009      	b.n	49d4 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    49c0:	9b01      	ldr	r3, [sp, #4]
    49c2:	3301      	adds	r3, #1
    49c4:	9301      	str	r3, [sp, #4]
    49c6:	4b18      	ldr	r3, [pc, #96]	; (4a28 <getFircConfig+0xac>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	7a1b      	ldrb	r3, [r3, #8]
    49cc:	461a      	mov	r2, r3
    49ce:	9b01      	ldr	r3, [sp, #4]
    49d0:	4293      	cmp	r3, r2
    49d2:	d3dd      	bcc.n	4990 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    49d4:	9b00      	ldr	r3, [sp, #0]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d121      	bne.n	4a1e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    49da:	4b14      	ldr	r3, [pc, #80]	; (4a2c <getFircConfig+0xb0>)
    49dc:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    49de:	4b13      	ldr	r3, [pc, #76]	; (4a2c <getFircConfig+0xb0>)
    49e0:	2205      	movs	r2, #5
    49e2:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    49e4:	4b12      	ldr	r3, [pc, #72]	; (4a30 <getFircConfig+0xb4>)
    49e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49ea:	b29b      	uxth	r3, r3
    49ec:	f003 0301 	and.w	r3, r3, #1
    49f0:	b29a      	uxth	r2, r3
    49f2:	4b0e      	ldr	r3, [pc, #56]	; (4a2c <getFircConfig+0xb0>)
    49f4:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    49f6:	4b0e      	ldr	r3, [pc, #56]	; (4a30 <getFircConfig+0xb4>)
    49f8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    49fc:	b2db      	uxtb	r3, r3
    49fe:	f003 0303 	and.w	r3, r3, #3
    4a02:	b2da      	uxtb	r2, r3
    4a04:	4b09      	ldr	r3, [pc, #36]	; (4a2c <getFircConfig+0xb0>)
    4a06:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4a08:	4b09      	ldr	r3, [pc, #36]	; (4a30 <getFircConfig+0xb4>)
    4a0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a0e:	b2db      	uxtb	r3, r3
    4a10:	10db      	asrs	r3, r3, #3
    4a12:	b2db      	uxtb	r3, r3
    4a14:	f003 0301 	and.w	r3, r3, #1
    4a18:	b2da      	uxtb	r2, r3
    4a1a:	4b04      	ldr	r3, [pc, #16]	; (4a2c <getFircConfig+0xb0>)
    4a1c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4a1e:	9b00      	ldr	r3, [sp, #0]
}
    4a20:	4618      	mov	r0, r3
    4a22:	b002      	add	sp, #8
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop
    4a28:	1fff8bbc 	.word	0x1fff8bbc
    4a2c:	1fff8c28 	.word	0x1fff8c28
    4a30:	40064000 	.word	0x40064000

00004a34 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4a34:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4a36:	2300      	movs	r3, #0
    4a38:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a3a:	4b20      	ldr	r3, [pc, #128]	; (4abc <getSoscConfig+0x88>)
    4a3c:	681b      	ldr	r3, [r3, #0]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d024      	beq.n	4a8c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4a42:	2300      	movs	r3, #0
    4a44:	9301      	str	r3, [sp, #4]
    4a46:	e01a      	b.n	4a7e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4a48:	4b1c      	ldr	r3, [pc, #112]	; (4abc <getSoscConfig+0x88>)
    4a4a:	6819      	ldr	r1, [r3, #0]
    4a4c:	9a01      	ldr	r2, [sp, #4]
    4a4e:	4613      	mov	r3, r2
    4a50:	009b      	lsls	r3, r3, #2
    4a52:	4413      	add	r3, r2
    4a54:	009b      	lsls	r3, r3, #2
    4a56:	440b      	add	r3, r1
    4a58:	332c      	adds	r3, #44	; 0x2c
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	2b08      	cmp	r3, #8
    4a5e:	d10b      	bne.n	4a78 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4a60:	4b16      	ldr	r3, [pc, #88]	; (4abc <getSoscConfig+0x88>)
    4a62:	6819      	ldr	r1, [r3, #0]
    4a64:	9a01      	ldr	r2, [sp, #4]
    4a66:	4613      	mov	r3, r2
    4a68:	009b      	lsls	r3, r3, #2
    4a6a:	4413      	add	r3, r2
    4a6c:	009b      	lsls	r3, r3, #2
    4a6e:	3328      	adds	r3, #40	; 0x28
    4a70:	440b      	add	r3, r1
    4a72:	3304      	adds	r3, #4
    4a74:	9300      	str	r3, [sp, #0]
                break;
    4a76:	e009      	b.n	4a8c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4a78:	9b01      	ldr	r3, [sp, #4]
    4a7a:	3301      	adds	r3, #1
    4a7c:	9301      	str	r3, [sp, #4]
    4a7e:	4b0f      	ldr	r3, [pc, #60]	; (4abc <getSoscConfig+0x88>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	7a5b      	ldrb	r3, [r3, #9]
    4a84:	461a      	mov	r2, r3
    4a86:	9b01      	ldr	r3, [sp, #4]
    4a88:	4293      	cmp	r3, r2
    4a8a:	d3dd      	bcc.n	4a48 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4a8c:	9b00      	ldr	r3, [sp, #0]
    4a8e:	2b00      	cmp	r3, #0
    4a90:	d110      	bne.n	4ab4 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4a92:	4b0b      	ldr	r3, [pc, #44]	; (4ac0 <getSoscConfig+0x8c>)
    4a94:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4a96:	4b0a      	ldr	r3, [pc, #40]	; (4ac0 <getSoscConfig+0x8c>)
    4a98:	2208      	movs	r2, #8
    4a9a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4a9c:	4b09      	ldr	r3, [pc, #36]	; (4ac4 <getSoscConfig+0x90>)
    4a9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4aa2:	b29b      	uxth	r3, r3
    4aa4:	f003 0301 	and.w	r3, r3, #1
    4aa8:	b29a      	uxth	r2, r3
    4aaa:	4b05      	ldr	r3, [pc, #20]	; (4ac0 <getSoscConfig+0x8c>)
    4aac:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4aae:	4b04      	ldr	r3, [pc, #16]	; (4ac0 <getSoscConfig+0x8c>)
    4ab0:	4a05      	ldr	r2, [pc, #20]	; (4ac8 <getSoscConfig+0x94>)
    4ab2:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4ab4:	9b00      	ldr	r3, [sp, #0]
}
    4ab6:	4618      	mov	r0, r3
    4ab8:	b002      	add	sp, #8
    4aba:	4770      	bx	lr
    4abc:	1fff8bbc 	.word	0x1fff8bbc
    4ac0:	1fff8c34 	.word	0x1fff8c34
    4ac4:	40064000 	.word	0x40064000
    4ac8:	02625a00 	.word	0x02625a00

00004acc <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4acc:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4ace:	2300      	movs	r3, #0
    4ad0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4ad2:	4b28      	ldr	r3, [pc, #160]	; (4b74 <getSpllConfig+0xa8>)
    4ad4:	681b      	ldr	r3, [r3, #0]
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d023      	beq.n	4b22 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4ada:	2300      	movs	r3, #0
    4adc:	9301      	str	r3, [sp, #4]
    4ade:	e019      	b.n	4b14 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4ae0:	4b24      	ldr	r3, [pc, #144]	; (4b74 <getSpllConfig+0xa8>)
    4ae2:	6819      	ldr	r1, [r3, #0]
    4ae4:	9a01      	ldr	r2, [sp, #4]
    4ae6:	4613      	mov	r3, r2
    4ae8:	009b      	lsls	r3, r3, #2
    4aea:	4413      	add	r3, r2
    4aec:	00db      	lsls	r3, r3, #3
    4aee:	440b      	add	r3, r1
    4af0:	3340      	adds	r3, #64	; 0x40
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	2b09      	cmp	r3, #9
    4af6:	d10a      	bne.n	4b0e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4af8:	4b1e      	ldr	r3, [pc, #120]	; (4b74 <getSpllConfig+0xa8>)
    4afa:	6819      	ldr	r1, [r3, #0]
    4afc:	9a01      	ldr	r2, [sp, #4]
    4afe:	4613      	mov	r3, r2
    4b00:	009b      	lsls	r3, r3, #2
    4b02:	4413      	add	r3, r2
    4b04:	00db      	lsls	r3, r3, #3
    4b06:	3340      	adds	r3, #64	; 0x40
    4b08:	440b      	add	r3, r1
    4b0a:	9300      	str	r3, [sp, #0]
                break;
    4b0c:	e009      	b.n	4b22 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4b0e:	9b01      	ldr	r3, [sp, #4]
    4b10:	3301      	adds	r3, #1
    4b12:	9301      	str	r3, [sp, #4]
    4b14:	4b17      	ldr	r3, [pc, #92]	; (4b74 <getSpllConfig+0xa8>)
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	7a9b      	ldrb	r3, [r3, #10]
    4b1a:	461a      	mov	r2, r3
    4b1c:	9b01      	ldr	r3, [sp, #4]
    4b1e:	4293      	cmp	r3, r2
    4b20:	d3de      	bcc.n	4ae0 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b22:	9b00      	ldr	r3, [sp, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d121      	bne.n	4b6c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4b28:	4b13      	ldr	r3, [pc, #76]	; (4b78 <getSpllConfig+0xac>)
    4b2a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4b2c:	4b12      	ldr	r3, [pc, #72]	; (4b78 <getSpllConfig+0xac>)
    4b2e:	2209      	movs	r2, #9
    4b30:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4b32:	4b12      	ldr	r3, [pc, #72]	; (4b7c <getSpllConfig+0xb0>)
    4b34:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b38:	b29b      	uxth	r3, r3
    4b3a:	f003 0301 	and.w	r3, r3, #1
    4b3e:	b29a      	uxth	r2, r3
    4b40:	4b0d      	ldr	r3, [pc, #52]	; (4b78 <getSpllConfig+0xac>)
    4b42:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4b44:	4b0d      	ldr	r3, [pc, #52]	; (4b7c <getSpllConfig+0xb0>)
    4b46:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4b4a:	0a1b      	lsrs	r3, r3, #8
    4b4c:	b2db      	uxtb	r3, r3
    4b4e:	f003 0307 	and.w	r3, r3, #7
    4b52:	b2da      	uxtb	r2, r3
    4b54:	4b08      	ldr	r3, [pc, #32]	; (4b78 <getSpllConfig+0xac>)
    4b56:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4b58:	4b08      	ldr	r3, [pc, #32]	; (4b7c <getSpllConfig+0xb0>)
    4b5a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4b5e:	0c1b      	lsrs	r3, r3, #16
    4b60:	b2db      	uxtb	r3, r3
    4b62:	f003 031f 	and.w	r3, r3, #31
    4b66:	b2da      	uxtb	r2, r3
    4b68:	4b03      	ldr	r3, [pc, #12]	; (4b78 <getSpllConfig+0xac>)
    4b6a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4b6c:	9b00      	ldr	r3, [sp, #0]
}
    4b6e:	4618      	mov	r0, r3
    4b70:	b002      	add	sp, #8
    4b72:	4770      	bx	lr
    4b74:	1fff8bbc 	.word	0x1fff8bbc
    4b78:	1fff8c48 	.word	0x1fff8c48
    4b7c:	40064000 	.word	0x40064000

00004b80 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4b80:	b086      	sub	sp, #24
    4b82:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4b84:	2300      	movs	r3, #0
    4b86:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4b88:	9b01      	ldr	r3, [sp, #4]
    4b8a:	2b1b      	cmp	r3, #27
    4b8c:	d00f      	beq.n	4bae <getSelectorConfig+0x2e>
    4b8e:	9b01      	ldr	r3, [sp, #4]
    4b90:	2b1b      	cmp	r3, #27
    4b92:	d80f      	bhi.n	4bb4 <getSelectorConfig+0x34>
    4b94:	9b01      	ldr	r3, [sp, #4]
    4b96:	2b19      	cmp	r3, #25
    4b98:	d003      	beq.n	4ba2 <getSelectorConfig+0x22>
    4b9a:	9b01      	ldr	r3, [sp, #4]
    4b9c:	2b1a      	cmp	r3, #26
    4b9e:	d003      	beq.n	4ba8 <getSelectorConfig+0x28>
    4ba0:	e008      	b.n	4bb4 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4ba2:	2300      	movs	r3, #0
    4ba4:	9304      	str	r3, [sp, #16]
            break;
    4ba6:	e008      	b.n	4bba <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4ba8:	2301      	movs	r3, #1
    4baa:	9304      	str	r3, [sp, #16]
            break;
    4bac:	e005      	b.n	4bba <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4bae:	2302      	movs	r3, #2
    4bb0:	9304      	str	r3, [sp, #16]
            break;
    4bb2:	e002      	b.n	4bba <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4bb4:	2300      	movs	r3, #0
    4bb6:	9304      	str	r3, [sp, #16]
            break;
    4bb8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4bba:	4b36      	ldr	r3, [pc, #216]	; (4c94 <getSelectorConfig+0x114>)
    4bbc:	681b      	ldr	r3, [r3, #0]
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d01d      	beq.n	4bfe <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4bc2:	2300      	movs	r3, #0
    4bc4:	9303      	str	r3, [sp, #12]
    4bc6:	e013      	b.n	4bf0 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4bc8:	4b32      	ldr	r3, [pc, #200]	; (4c94 <getSelectorConfig+0x114>)
    4bca:	681b      	ldr	r3, [r3, #0]
    4bcc:	9a03      	ldr	r2, [sp, #12]
    4bce:	320d      	adds	r2, #13
    4bd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4bd4:	9a01      	ldr	r2, [sp, #4]
    4bd6:	429a      	cmp	r2, r3
    4bd8:	d107      	bne.n	4bea <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4bda:	4b2e      	ldr	r3, [pc, #184]	; (4c94 <getSelectorConfig+0x114>)
    4bdc:	681a      	ldr	r2, [r3, #0]
    4bde:	9b03      	ldr	r3, [sp, #12]
    4be0:	330d      	adds	r3, #13
    4be2:	00db      	lsls	r3, r3, #3
    4be4:	4413      	add	r3, r2
    4be6:	9305      	str	r3, [sp, #20]
                break;
    4be8:	e009      	b.n	4bfe <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4bea:	9b03      	ldr	r3, [sp, #12]
    4bec:	3301      	adds	r3, #1
    4bee:	9303      	str	r3, [sp, #12]
    4bf0:	4b28      	ldr	r3, [pc, #160]	; (4c94 <getSelectorConfig+0x114>)
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	7adb      	ldrb	r3, [r3, #11]
    4bf6:	461a      	mov	r2, r3
    4bf8:	9b03      	ldr	r3, [sp, #12]
    4bfa:	4293      	cmp	r3, r2
    4bfc:	d3e4      	bcc.n	4bc8 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bfe:	9b05      	ldr	r3, [sp, #20]
    4c00:	2b00      	cmp	r3, #0
    4c02:	d140      	bne.n	4c86 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4c04:	9b04      	ldr	r3, [sp, #16]
    4c06:	00db      	lsls	r3, r3, #3
    4c08:	4a23      	ldr	r2, [pc, #140]	; (4c98 <getSelectorConfig+0x118>)
    4c0a:	4413      	add	r3, r2
    4c0c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4c0e:	4922      	ldr	r1, [pc, #136]	; (4c98 <getSelectorConfig+0x118>)
    4c10:	9b04      	ldr	r3, [sp, #16]
    4c12:	9a01      	ldr	r2, [sp, #4]
    4c14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4c18:	9b01      	ldr	r3, [sp, #4]
    4c1a:	2b1b      	cmp	r3, #27
    4c1c:	d025      	beq.n	4c6a <getSelectorConfig+0xea>
    4c1e:	9b01      	ldr	r3, [sp, #4]
    4c20:	2b1b      	cmp	r3, #27
    4c22:	d832      	bhi.n	4c8a <getSelectorConfig+0x10a>
    4c24:	9b01      	ldr	r3, [sp, #4]
    4c26:	2b19      	cmp	r3, #25
    4c28:	d003      	beq.n	4c32 <getSelectorConfig+0xb2>
    4c2a:	9b01      	ldr	r3, [sp, #4]
    4c2c:	2b1a      	cmp	r3, #26
    4c2e:	d00e      	beq.n	4c4e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4c30:	e02b      	b.n	4c8a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4c32:	4b1a      	ldr	r3, [pc, #104]	; (4c9c <getSelectorConfig+0x11c>)
    4c34:	695b      	ldr	r3, [r3, #20]
    4c36:	0e1b      	lsrs	r3, r3, #24
    4c38:	f003 030f 	and.w	r3, r3, #15
    4c3c:	4a18      	ldr	r2, [pc, #96]	; (4ca0 <getSelectorConfig+0x120>)
    4c3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4c42:	4915      	ldr	r1, [pc, #84]	; (4c98 <getSelectorConfig+0x118>)
    4c44:	9b04      	ldr	r3, [sp, #16]
    4c46:	00db      	lsls	r3, r3, #3
    4c48:	440b      	add	r3, r1
    4c4a:	605a      	str	r2, [r3, #4]
                break;
    4c4c:	e01e      	b.n	4c8c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4c4e:	4b13      	ldr	r3, [pc, #76]	; (4c9c <getSelectorConfig+0x11c>)
    4c50:	699b      	ldr	r3, [r3, #24]
    4c52:	0e1b      	lsrs	r3, r3, #24
    4c54:	f003 030f 	and.w	r3, r3, #15
    4c58:	4a11      	ldr	r2, [pc, #68]	; (4ca0 <getSelectorConfig+0x120>)
    4c5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4c5e:	490e      	ldr	r1, [pc, #56]	; (4c98 <getSelectorConfig+0x118>)
    4c60:	9b04      	ldr	r3, [sp, #16]
    4c62:	00db      	lsls	r3, r3, #3
    4c64:	440b      	add	r3, r1
    4c66:	605a      	str	r2, [r3, #4]
                break;
    4c68:	e010      	b.n	4c8c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4c6a:	4b0c      	ldr	r3, [pc, #48]	; (4c9c <getSelectorConfig+0x11c>)
    4c6c:	69db      	ldr	r3, [r3, #28]
    4c6e:	0e1b      	lsrs	r3, r3, #24
    4c70:	f003 030f 	and.w	r3, r3, #15
    4c74:	4a0a      	ldr	r2, [pc, #40]	; (4ca0 <getSelectorConfig+0x120>)
    4c76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4c7a:	4907      	ldr	r1, [pc, #28]	; (4c98 <getSelectorConfig+0x118>)
    4c7c:	9b04      	ldr	r3, [sp, #16]
    4c7e:	00db      	lsls	r3, r3, #3
    4c80:	440b      	add	r3, r1
    4c82:	605a      	str	r2, [r3, #4]
                break;
    4c84:	e002      	b.n	4c8c <getSelectorConfig+0x10c>
        }
    }
    4c86:	bf00      	nop
    4c88:	e000      	b.n	4c8c <getSelectorConfig+0x10c>
                break;
    4c8a:	bf00      	nop

    return ReturnValue;
    4c8c:	9b05      	ldr	r3, [sp, #20]
}
    4c8e:	4618      	mov	r0, r3
    4c90:	b006      	add	sp, #24
    4c92:	4770      	bx	lr
    4c94:	1fff8bbc 	.word	0x1fff8bbc
    4c98:	1fff8c70 	.word	0x1fff8c70
    4c9c:	40064000 	.word	0x40064000
    4ca0:	00010b5c 	.word	0x00010b5c

00004ca4 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4ca4:	b086      	sub	sp, #24
    4ca6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4ca8:	2300      	movs	r3, #0
    4caa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4cac:	2300      	movs	r3, #0
    4cae:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4cb0:	9b01      	ldr	r3, [sp, #4]
    4cb2:	2b1f      	cmp	r3, #31
    4cb4:	d00f      	beq.n	4cd6 <getCoreDividerConfig+0x32>
    4cb6:	9b01      	ldr	r3, [sp, #4]
    4cb8:	2b1f      	cmp	r3, #31
    4cba:	d80f      	bhi.n	4cdc <getCoreDividerConfig+0x38>
    4cbc:	9b01      	ldr	r3, [sp, #4]
    4cbe:	2b1d      	cmp	r3, #29
    4cc0:	d003      	beq.n	4cca <getCoreDividerConfig+0x26>
    4cc2:	9b01      	ldr	r3, [sp, #4]
    4cc4:	2b1e      	cmp	r3, #30
    4cc6:	d003      	beq.n	4cd0 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4cc8:	e008      	b.n	4cdc <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4cca:	2300      	movs	r3, #0
    4ccc:	9304      	str	r3, [sp, #16]
            break;
    4cce:	e006      	b.n	4cde <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4cd0:	2301      	movs	r3, #1
    4cd2:	9304      	str	r3, [sp, #16]
            break;
    4cd4:	e003      	b.n	4cde <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4cd6:	2302      	movs	r3, #2
    4cd8:	9304      	str	r3, [sp, #16]
            break;
    4cda:	e000      	b.n	4cde <getCoreDividerConfig+0x3a>
                break;
    4cdc:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4cde:	4b41      	ldr	r3, [pc, #260]	; (4de4 <getCoreDividerConfig+0x140>)
    4ce0:	681b      	ldr	r3, [r3, #0]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d026      	beq.n	4d34 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4ce6:	2300      	movs	r3, #0
    4ce8:	9303      	str	r3, [sp, #12]
    4cea:	e01c      	b.n	4d26 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4cec:	4b3d      	ldr	r3, [pc, #244]	; (4de4 <getCoreDividerConfig+0x140>)
    4cee:	6819      	ldr	r1, [r3, #0]
    4cf0:	9a03      	ldr	r2, [sp, #12]
    4cf2:	4613      	mov	r3, r2
    4cf4:	005b      	lsls	r3, r3, #1
    4cf6:	4413      	add	r3, r2
    4cf8:	009b      	lsls	r3, r3, #2
    4cfa:	440b      	add	r3, r1
    4cfc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4d00:	681b      	ldr	r3, [r3, #0]
    4d02:	9a01      	ldr	r2, [sp, #4]
    4d04:	429a      	cmp	r2, r3
    4d06:	d10b      	bne.n	4d20 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4d08:	4b36      	ldr	r3, [pc, #216]	; (4de4 <getCoreDividerConfig+0x140>)
    4d0a:	6819      	ldr	r1, [r3, #0]
    4d0c:	9a03      	ldr	r2, [sp, #12]
    4d0e:	4613      	mov	r3, r2
    4d10:	005b      	lsls	r3, r3, #1
    4d12:	4413      	add	r3, r2
    4d14:	009b      	lsls	r3, r3, #2
    4d16:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4d1a:	440b      	add	r3, r1
    4d1c:	9305      	str	r3, [sp, #20]
                break;
    4d1e:	e009      	b.n	4d34 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4d20:	9b03      	ldr	r3, [sp, #12]
    4d22:	3301      	adds	r3, #1
    4d24:	9303      	str	r3, [sp, #12]
    4d26:	4b2f      	ldr	r3, [pc, #188]	; (4de4 <getCoreDividerConfig+0x140>)
    4d28:	681b      	ldr	r3, [r3, #0]
    4d2a:	7b1b      	ldrb	r3, [r3, #12]
    4d2c:	461a      	mov	r2, r3
    4d2e:	9b03      	ldr	r3, [sp, #12]
    4d30:	4293      	cmp	r3, r2
    4d32:	d3db      	bcc.n	4cec <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d34:	9b05      	ldr	r3, [sp, #20]
    4d36:	2b00      	cmp	r3, #0
    4d38:	d14d      	bne.n	4dd6 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4d3a:	9a04      	ldr	r2, [sp, #16]
    4d3c:	4613      	mov	r3, r2
    4d3e:	005b      	lsls	r3, r3, #1
    4d40:	4413      	add	r3, r2
    4d42:	009b      	lsls	r3, r3, #2
    4d44:	4a28      	ldr	r2, [pc, #160]	; (4de8 <getCoreDividerConfig+0x144>)
    4d46:	4413      	add	r3, r2
    4d48:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4d4a:	4927      	ldr	r1, [pc, #156]	; (4de8 <getCoreDividerConfig+0x144>)
    4d4c:	9a04      	ldr	r2, [sp, #16]
    4d4e:	4613      	mov	r3, r2
    4d50:	005b      	lsls	r3, r3, #1
    4d52:	4413      	add	r3, r2
    4d54:	009b      	lsls	r3, r3, #2
    4d56:	440b      	add	r3, r1
    4d58:	9a01      	ldr	r2, [sp, #4]
    4d5a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4d5c:	9b01      	ldr	r3, [sp, #4]
    4d5e:	2b1f      	cmp	r3, #31
    4d60:	d029      	beq.n	4db6 <getCoreDividerConfig+0x112>
    4d62:	9b01      	ldr	r3, [sp, #4]
    4d64:	2b1f      	cmp	r3, #31
    4d66:	d838      	bhi.n	4dda <getCoreDividerConfig+0x136>
    4d68:	9b01      	ldr	r3, [sp, #4]
    4d6a:	2b1d      	cmp	r3, #29
    4d6c:	d003      	beq.n	4d76 <getCoreDividerConfig+0xd2>
    4d6e:	9b01      	ldr	r3, [sp, #4]
    4d70:	2b1e      	cmp	r3, #30
    4d72:	d010      	beq.n	4d96 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d74:	e031      	b.n	4dda <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4d76:	4b1d      	ldr	r3, [pc, #116]	; (4dec <getCoreDividerConfig+0x148>)
    4d78:	695b      	ldr	r3, [r3, #20]
    4d7a:	0c1b      	lsrs	r3, r3, #16
    4d7c:	f003 030f 	and.w	r3, r3, #15
    4d80:	1c59      	adds	r1, r3, #1
    4d82:	4819      	ldr	r0, [pc, #100]	; (4de8 <getCoreDividerConfig+0x144>)
    4d84:	9a04      	ldr	r2, [sp, #16]
    4d86:	4613      	mov	r3, r2
    4d88:	005b      	lsls	r3, r3, #1
    4d8a:	4413      	add	r3, r2
    4d8c:	009b      	lsls	r3, r3, #2
    4d8e:	4403      	add	r3, r0
    4d90:	3304      	adds	r3, #4
    4d92:	6019      	str	r1, [r3, #0]
                break;
    4d94:	e022      	b.n	4ddc <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4d96:	4b15      	ldr	r3, [pc, #84]	; (4dec <getCoreDividerConfig+0x148>)
    4d98:	699b      	ldr	r3, [r3, #24]
    4d9a:	0c1b      	lsrs	r3, r3, #16
    4d9c:	f003 030f 	and.w	r3, r3, #15
    4da0:	1c59      	adds	r1, r3, #1
    4da2:	4811      	ldr	r0, [pc, #68]	; (4de8 <getCoreDividerConfig+0x144>)
    4da4:	9a04      	ldr	r2, [sp, #16]
    4da6:	4613      	mov	r3, r2
    4da8:	005b      	lsls	r3, r3, #1
    4daa:	4413      	add	r3, r2
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	4403      	add	r3, r0
    4db0:	3304      	adds	r3, #4
    4db2:	6019      	str	r1, [r3, #0]
                break;
    4db4:	e012      	b.n	4ddc <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4db6:	4b0d      	ldr	r3, [pc, #52]	; (4dec <getCoreDividerConfig+0x148>)
    4db8:	69db      	ldr	r3, [r3, #28]
    4dba:	0c1b      	lsrs	r3, r3, #16
    4dbc:	f003 030f 	and.w	r3, r3, #15
    4dc0:	1c59      	adds	r1, r3, #1
    4dc2:	4809      	ldr	r0, [pc, #36]	; (4de8 <getCoreDividerConfig+0x144>)
    4dc4:	9a04      	ldr	r2, [sp, #16]
    4dc6:	4613      	mov	r3, r2
    4dc8:	005b      	lsls	r3, r3, #1
    4dca:	4413      	add	r3, r2
    4dcc:	009b      	lsls	r3, r3, #2
    4dce:	4403      	add	r3, r0
    4dd0:	3304      	adds	r3, #4
    4dd2:	6019      	str	r1, [r3, #0]
                break;
    4dd4:	e002      	b.n	4ddc <getCoreDividerConfig+0x138>
        }
    }
    4dd6:	bf00      	nop
    4dd8:	e000      	b.n	4ddc <getCoreDividerConfig+0x138>
                break;
    4dda:	bf00      	nop

    return ReturnValue;
    4ddc:	9b05      	ldr	r3, [sp, #20]
}
    4dde:	4618      	mov	r0, r3
    4de0:	b006      	add	sp, #24
    4de2:	4770      	bx	lr
    4de4:	1fff8bbc 	.word	0x1fff8bbc
    4de8:	1fff8c88 	.word	0x1fff8c88
    4dec:	40064000 	.word	0x40064000

00004df0 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4df0:	b086      	sub	sp, #24
    4df2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4df4:	2300      	movs	r3, #0
    4df6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4df8:	2300      	movs	r3, #0
    4dfa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4dfc:	9b01      	ldr	r3, [sp, #4]
    4dfe:	2b23      	cmp	r3, #35	; 0x23
    4e00:	d00f      	beq.n	4e22 <getBusDividerConfig+0x32>
    4e02:	9b01      	ldr	r3, [sp, #4]
    4e04:	2b23      	cmp	r3, #35	; 0x23
    4e06:	d80f      	bhi.n	4e28 <getBusDividerConfig+0x38>
    4e08:	9b01      	ldr	r3, [sp, #4]
    4e0a:	2b21      	cmp	r3, #33	; 0x21
    4e0c:	d003      	beq.n	4e16 <getBusDividerConfig+0x26>
    4e0e:	9b01      	ldr	r3, [sp, #4]
    4e10:	2b22      	cmp	r3, #34	; 0x22
    4e12:	d003      	beq.n	4e1c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e14:	e008      	b.n	4e28 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e16:	2300      	movs	r3, #0
    4e18:	9304      	str	r3, [sp, #16]
            break;
    4e1a:	e006      	b.n	4e2a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e1c:	2301      	movs	r3, #1
    4e1e:	9304      	str	r3, [sp, #16]
            break;
    4e20:	e003      	b.n	4e2a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e22:	2302      	movs	r3, #2
    4e24:	9304      	str	r3, [sp, #16]
            break;
    4e26:	e000      	b.n	4e2a <getBusDividerConfig+0x3a>
                break;
    4e28:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e2a:	4b41      	ldr	r3, [pc, #260]	; (4f30 <getBusDividerConfig+0x140>)
    4e2c:	681b      	ldr	r3, [r3, #0]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d026      	beq.n	4e80 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e32:	2300      	movs	r3, #0
    4e34:	9303      	str	r3, [sp, #12]
    4e36:	e01c      	b.n	4e72 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e38:	4b3d      	ldr	r3, [pc, #244]	; (4f30 <getBusDividerConfig+0x140>)
    4e3a:	6819      	ldr	r1, [r3, #0]
    4e3c:	9a03      	ldr	r2, [sp, #12]
    4e3e:	4613      	mov	r3, r2
    4e40:	005b      	lsls	r3, r3, #1
    4e42:	4413      	add	r3, r2
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	440b      	add	r3, r1
    4e48:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	9a01      	ldr	r2, [sp, #4]
    4e50:	429a      	cmp	r2, r3
    4e52:	d10b      	bne.n	4e6c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e54:	4b36      	ldr	r3, [pc, #216]	; (4f30 <getBusDividerConfig+0x140>)
    4e56:	6819      	ldr	r1, [r3, #0]
    4e58:	9a03      	ldr	r2, [sp, #12]
    4e5a:	4613      	mov	r3, r2
    4e5c:	005b      	lsls	r3, r3, #1
    4e5e:	4413      	add	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e66:	440b      	add	r3, r1
    4e68:	9305      	str	r3, [sp, #20]
                break;
    4e6a:	e009      	b.n	4e80 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e6c:	9b03      	ldr	r3, [sp, #12]
    4e6e:	3301      	adds	r3, #1
    4e70:	9303      	str	r3, [sp, #12]
    4e72:	4b2f      	ldr	r3, [pc, #188]	; (4f30 <getBusDividerConfig+0x140>)
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	7b1b      	ldrb	r3, [r3, #12]
    4e78:	461a      	mov	r2, r3
    4e7a:	9b03      	ldr	r3, [sp, #12]
    4e7c:	4293      	cmp	r3, r2
    4e7e:	d3db      	bcc.n	4e38 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e80:	9b05      	ldr	r3, [sp, #20]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d14d      	bne.n	4f22 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4e86:	9a04      	ldr	r2, [sp, #16]
    4e88:	4613      	mov	r3, r2
    4e8a:	005b      	lsls	r3, r3, #1
    4e8c:	4413      	add	r3, r2
    4e8e:	009b      	lsls	r3, r3, #2
    4e90:	4a28      	ldr	r2, [pc, #160]	; (4f34 <getBusDividerConfig+0x144>)
    4e92:	4413      	add	r3, r2
    4e94:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4e96:	4927      	ldr	r1, [pc, #156]	; (4f34 <getBusDividerConfig+0x144>)
    4e98:	9a04      	ldr	r2, [sp, #16]
    4e9a:	4613      	mov	r3, r2
    4e9c:	005b      	lsls	r3, r3, #1
    4e9e:	4413      	add	r3, r2
    4ea0:	009b      	lsls	r3, r3, #2
    4ea2:	440b      	add	r3, r1
    4ea4:	9a01      	ldr	r2, [sp, #4]
    4ea6:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	2b23      	cmp	r3, #35	; 0x23
    4eac:	d029      	beq.n	4f02 <getBusDividerConfig+0x112>
    4eae:	9b01      	ldr	r3, [sp, #4]
    4eb0:	2b23      	cmp	r3, #35	; 0x23
    4eb2:	d838      	bhi.n	4f26 <getBusDividerConfig+0x136>
    4eb4:	9b01      	ldr	r3, [sp, #4]
    4eb6:	2b21      	cmp	r3, #33	; 0x21
    4eb8:	d003      	beq.n	4ec2 <getBusDividerConfig+0xd2>
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	2b22      	cmp	r3, #34	; 0x22
    4ebe:	d010      	beq.n	4ee2 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ec0:	e031      	b.n	4f26 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4ec2:	4b1d      	ldr	r3, [pc, #116]	; (4f38 <getBusDividerConfig+0x148>)
    4ec4:	695b      	ldr	r3, [r3, #20]
    4ec6:	091b      	lsrs	r3, r3, #4
    4ec8:	f003 030f 	and.w	r3, r3, #15
    4ecc:	1c59      	adds	r1, r3, #1
    4ece:	4819      	ldr	r0, [pc, #100]	; (4f34 <getBusDividerConfig+0x144>)
    4ed0:	9a04      	ldr	r2, [sp, #16]
    4ed2:	4613      	mov	r3, r2
    4ed4:	005b      	lsls	r3, r3, #1
    4ed6:	4413      	add	r3, r2
    4ed8:	009b      	lsls	r3, r3, #2
    4eda:	4403      	add	r3, r0
    4edc:	3304      	adds	r3, #4
    4ede:	6019      	str	r1, [r3, #0]
                break;
    4ee0:	e022      	b.n	4f28 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4ee2:	4b15      	ldr	r3, [pc, #84]	; (4f38 <getBusDividerConfig+0x148>)
    4ee4:	699b      	ldr	r3, [r3, #24]
    4ee6:	091b      	lsrs	r3, r3, #4
    4ee8:	f003 030f 	and.w	r3, r3, #15
    4eec:	1c59      	adds	r1, r3, #1
    4eee:	4811      	ldr	r0, [pc, #68]	; (4f34 <getBusDividerConfig+0x144>)
    4ef0:	9a04      	ldr	r2, [sp, #16]
    4ef2:	4613      	mov	r3, r2
    4ef4:	005b      	lsls	r3, r3, #1
    4ef6:	4413      	add	r3, r2
    4ef8:	009b      	lsls	r3, r3, #2
    4efa:	4403      	add	r3, r0
    4efc:	3304      	adds	r3, #4
    4efe:	6019      	str	r1, [r3, #0]
                break;
    4f00:	e012      	b.n	4f28 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4f02:	4b0d      	ldr	r3, [pc, #52]	; (4f38 <getBusDividerConfig+0x148>)
    4f04:	69db      	ldr	r3, [r3, #28]
    4f06:	091b      	lsrs	r3, r3, #4
    4f08:	f003 030f 	and.w	r3, r3, #15
    4f0c:	1c59      	adds	r1, r3, #1
    4f0e:	4809      	ldr	r0, [pc, #36]	; (4f34 <getBusDividerConfig+0x144>)
    4f10:	9a04      	ldr	r2, [sp, #16]
    4f12:	4613      	mov	r3, r2
    4f14:	005b      	lsls	r3, r3, #1
    4f16:	4413      	add	r3, r2
    4f18:	009b      	lsls	r3, r3, #2
    4f1a:	4403      	add	r3, r0
    4f1c:	3304      	adds	r3, #4
    4f1e:	6019      	str	r1, [r3, #0]
                break;
    4f20:	e002      	b.n	4f28 <getBusDividerConfig+0x138>
        }
    }
    4f22:	bf00      	nop
    4f24:	e000      	b.n	4f28 <getBusDividerConfig+0x138>
                break;
    4f26:	bf00      	nop

    return ReturnValue;
    4f28:	9b05      	ldr	r3, [sp, #20]
}
    4f2a:	4618      	mov	r0, r3
    4f2c:	b006      	add	sp, #24
    4f2e:	4770      	bx	lr
    4f30:	1fff8bbc 	.word	0x1fff8bbc
    4f34:	1fff8cac 	.word	0x1fff8cac
    4f38:	40064000 	.word	0x40064000

00004f3c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4f3c:	b086      	sub	sp, #24
    4f3e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f40:	2300      	movs	r3, #0
    4f42:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f44:	2300      	movs	r3, #0
    4f46:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f48:	9b01      	ldr	r3, [sp, #4]
    4f4a:	2b27      	cmp	r3, #39	; 0x27
    4f4c:	d00f      	beq.n	4f6e <getSlowDividerConfig+0x32>
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	2b27      	cmp	r3, #39	; 0x27
    4f52:	d80f      	bhi.n	4f74 <getSlowDividerConfig+0x38>
    4f54:	9b01      	ldr	r3, [sp, #4]
    4f56:	2b25      	cmp	r3, #37	; 0x25
    4f58:	d003      	beq.n	4f62 <getSlowDividerConfig+0x26>
    4f5a:	9b01      	ldr	r3, [sp, #4]
    4f5c:	2b26      	cmp	r3, #38	; 0x26
    4f5e:	d003      	beq.n	4f68 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f60:	e008      	b.n	4f74 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f62:	2300      	movs	r3, #0
    4f64:	9304      	str	r3, [sp, #16]
            break;
    4f66:	e006      	b.n	4f76 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f68:	2301      	movs	r3, #1
    4f6a:	9304      	str	r3, [sp, #16]
            break;
    4f6c:	e003      	b.n	4f76 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f6e:	2302      	movs	r3, #2
    4f70:	9304      	str	r3, [sp, #16]
            break;
    4f72:	e000      	b.n	4f76 <getSlowDividerConfig+0x3a>
                break;
    4f74:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f76:	4b40      	ldr	r3, [pc, #256]	; (5078 <getSlowDividerConfig+0x13c>)
    4f78:	681b      	ldr	r3, [r3, #0]
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d026      	beq.n	4fcc <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f7e:	2300      	movs	r3, #0
    4f80:	9303      	str	r3, [sp, #12]
    4f82:	e01c      	b.n	4fbe <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f84:	4b3c      	ldr	r3, [pc, #240]	; (5078 <getSlowDividerConfig+0x13c>)
    4f86:	6819      	ldr	r1, [r3, #0]
    4f88:	9a03      	ldr	r2, [sp, #12]
    4f8a:	4613      	mov	r3, r2
    4f8c:	005b      	lsls	r3, r3, #1
    4f8e:	4413      	add	r3, r2
    4f90:	009b      	lsls	r3, r3, #2
    4f92:	440b      	add	r3, r1
    4f94:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	9a01      	ldr	r2, [sp, #4]
    4f9c:	429a      	cmp	r2, r3
    4f9e:	d10b      	bne.n	4fb8 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fa0:	4b35      	ldr	r3, [pc, #212]	; (5078 <getSlowDividerConfig+0x13c>)
    4fa2:	6819      	ldr	r1, [r3, #0]
    4fa4:	9a03      	ldr	r2, [sp, #12]
    4fa6:	4613      	mov	r3, r2
    4fa8:	005b      	lsls	r3, r3, #1
    4faa:	4413      	add	r3, r2
    4fac:	009b      	lsls	r3, r3, #2
    4fae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fb2:	440b      	add	r3, r1
    4fb4:	9305      	str	r3, [sp, #20]
                break;
    4fb6:	e009      	b.n	4fcc <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fb8:	9b03      	ldr	r3, [sp, #12]
    4fba:	3301      	adds	r3, #1
    4fbc:	9303      	str	r3, [sp, #12]
    4fbe:	4b2e      	ldr	r3, [pc, #184]	; (5078 <getSlowDividerConfig+0x13c>)
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	7b1b      	ldrb	r3, [r3, #12]
    4fc4:	461a      	mov	r2, r3
    4fc6:	9b03      	ldr	r3, [sp, #12]
    4fc8:	4293      	cmp	r3, r2
    4fca:	d3db      	bcc.n	4f84 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fcc:	9b05      	ldr	r3, [sp, #20]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d14a      	bne.n	5068 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4fd2:	9a04      	ldr	r2, [sp, #16]
    4fd4:	4613      	mov	r3, r2
    4fd6:	005b      	lsls	r3, r3, #1
    4fd8:	4413      	add	r3, r2
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	4a27      	ldr	r2, [pc, #156]	; (507c <getSlowDividerConfig+0x140>)
    4fde:	4413      	add	r3, r2
    4fe0:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4fe2:	4926      	ldr	r1, [pc, #152]	; (507c <getSlowDividerConfig+0x140>)
    4fe4:	9a04      	ldr	r2, [sp, #16]
    4fe6:	4613      	mov	r3, r2
    4fe8:	005b      	lsls	r3, r3, #1
    4fea:	4413      	add	r3, r2
    4fec:	009b      	lsls	r3, r3, #2
    4fee:	440b      	add	r3, r1
    4ff0:	9a01      	ldr	r2, [sp, #4]
    4ff2:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ff4:	9b01      	ldr	r3, [sp, #4]
    4ff6:	2b27      	cmp	r3, #39	; 0x27
    4ff8:	d027      	beq.n	504a <getSlowDividerConfig+0x10e>
    4ffa:	9b01      	ldr	r3, [sp, #4]
    4ffc:	2b27      	cmp	r3, #39	; 0x27
    4ffe:	d835      	bhi.n	506c <getSlowDividerConfig+0x130>
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	2b25      	cmp	r3, #37	; 0x25
    5004:	d003      	beq.n	500e <getSlowDividerConfig+0xd2>
    5006:	9b01      	ldr	r3, [sp, #4]
    5008:	2b26      	cmp	r3, #38	; 0x26
    500a:	d00f      	beq.n	502c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    500c:	e02e      	b.n	506c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    500e:	4b1c      	ldr	r3, [pc, #112]	; (5080 <getSlowDividerConfig+0x144>)
    5010:	695b      	ldr	r3, [r3, #20]
    5012:	f003 030f 	and.w	r3, r3, #15
    5016:	1c59      	adds	r1, r3, #1
    5018:	4818      	ldr	r0, [pc, #96]	; (507c <getSlowDividerConfig+0x140>)
    501a:	9a04      	ldr	r2, [sp, #16]
    501c:	4613      	mov	r3, r2
    501e:	005b      	lsls	r3, r3, #1
    5020:	4413      	add	r3, r2
    5022:	009b      	lsls	r3, r3, #2
    5024:	4403      	add	r3, r0
    5026:	3304      	adds	r3, #4
    5028:	6019      	str	r1, [r3, #0]
                break;
    502a:	e020      	b.n	506e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    502c:	4b14      	ldr	r3, [pc, #80]	; (5080 <getSlowDividerConfig+0x144>)
    502e:	699b      	ldr	r3, [r3, #24]
    5030:	f003 030f 	and.w	r3, r3, #15
    5034:	1c59      	adds	r1, r3, #1
    5036:	4811      	ldr	r0, [pc, #68]	; (507c <getSlowDividerConfig+0x140>)
    5038:	9a04      	ldr	r2, [sp, #16]
    503a:	4613      	mov	r3, r2
    503c:	005b      	lsls	r3, r3, #1
    503e:	4413      	add	r3, r2
    5040:	009b      	lsls	r3, r3, #2
    5042:	4403      	add	r3, r0
    5044:	3304      	adds	r3, #4
    5046:	6019      	str	r1, [r3, #0]
                break;
    5048:	e011      	b.n	506e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    504a:	4b0d      	ldr	r3, [pc, #52]	; (5080 <getSlowDividerConfig+0x144>)
    504c:	69db      	ldr	r3, [r3, #28]
    504e:	f003 030f 	and.w	r3, r3, #15
    5052:	1c59      	adds	r1, r3, #1
    5054:	4809      	ldr	r0, [pc, #36]	; (507c <getSlowDividerConfig+0x140>)
    5056:	9a04      	ldr	r2, [sp, #16]
    5058:	4613      	mov	r3, r2
    505a:	005b      	lsls	r3, r3, #1
    505c:	4413      	add	r3, r2
    505e:	009b      	lsls	r3, r3, #2
    5060:	4403      	add	r3, r0
    5062:	3304      	adds	r3, #4
    5064:	6019      	str	r1, [r3, #0]
                break;
    5066:	e002      	b.n	506e <getSlowDividerConfig+0x132>
        }
    }
    5068:	bf00      	nop
    506a:	e000      	b.n	506e <getSlowDividerConfig+0x132>
                break;
    506c:	bf00      	nop

    return ReturnValue;
    506e:	9b05      	ldr	r3, [sp, #20]
}
    5070:	4618      	mov	r0, r3
    5072:	b006      	add	sp, #24
    5074:	4770      	bx	lr
    5076:	bf00      	nop
    5078:	1fff8bbc 	.word	0x1fff8bbc
    507c:	1fff8cd0 	.word	0x1fff8cd0
    5080:	40064000 	.word	0x40064000

00005084 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5084:	b500      	push	{lr}
    5086:	b083      	sub	sp, #12
    5088:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    508a:	4b64      	ldr	r3, [pc, #400]	; (521c <Clock_Ip_ClockInitializeObjects+0x198>)
    508c:	781b      	ldrb	r3, [r3, #0]
    508e:	f083 0301 	eor.w	r3, r3, #1
    5092:	b2db      	uxtb	r3, r3
    5094:	2b00      	cmp	r3, #0
    5096:	d05b      	beq.n	5150 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5098:	4b60      	ldr	r3, [pc, #384]	; (521c <Clock_Ip_ClockInitializeObjects+0x198>)
    509a:	2201      	movs	r2, #1
    509c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    509e:	4b60      	ldr	r3, [pc, #384]	; (5220 <Clock_Ip_ClockInitializeObjects+0x19c>)
    50a0:	785b      	ldrb	r3, [r3, #1]
    50a2:	461a      	mov	r2, r3
    50a4:	4613      	mov	r3, r2
    50a6:	009b      	lsls	r3, r3, #2
    50a8:	4413      	add	r3, r2
    50aa:	009b      	lsls	r3, r3, #2
    50ac:	4a5d      	ldr	r2, [pc, #372]	; (5224 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    50ae:	4413      	add	r3, r2
    50b0:	4a5d      	ldr	r2, [pc, #372]	; (5228 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    50b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    50b4:	4b5d      	ldr	r3, [pc, #372]	; (522c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    50b6:	785b      	ldrb	r3, [r3, #1]
    50b8:	461a      	mov	r2, r3
    50ba:	4613      	mov	r3, r2
    50bc:	009b      	lsls	r3, r3, #2
    50be:	4413      	add	r3, r2
    50c0:	009b      	lsls	r3, r3, #2
    50c2:	4a5b      	ldr	r2, [pc, #364]	; (5230 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    50c4:	4413      	add	r3, r2
    50c6:	4a5b      	ldr	r2, [pc, #364]	; (5234 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    50c8:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    50ca:	4b5b      	ldr	r3, [pc, #364]	; (5238 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    50cc:	791b      	ldrb	r3, [r3, #4]
    50ce:	461a      	mov	r2, r3
    50d0:	4613      	mov	r3, r2
    50d2:	005b      	lsls	r3, r3, #1
    50d4:	4413      	add	r3, r2
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	4a58      	ldr	r2, [pc, #352]	; (523c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    50da:	4413      	add	r3, r2
    50dc:	4a58      	ldr	r2, [pc, #352]	; (5240 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    50de:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    50e0:	4b58      	ldr	r3, [pc, #352]	; (5244 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    50e2:	795b      	ldrb	r3, [r3, #5]
    50e4:	00db      	lsls	r3, r3, #3
    50e6:	4a58      	ldr	r2, [pc, #352]	; (5248 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    50e8:	4413      	add	r3, r2
    50ea:	4a58      	ldr	r2, [pc, #352]	; (524c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    50ec:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    50ee:	4b55      	ldr	r3, [pc, #340]	; (5244 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    50f0:	79db      	ldrb	r3, [r3, #7]
    50f2:	00db      	lsls	r3, r3, #3
    50f4:	4a54      	ldr	r2, [pc, #336]	; (5248 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    50f6:	4413      	add	r3, r2
    50f8:	4a55      	ldr	r2, [pc, #340]	; (5250 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    50fa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    50fc:	4b55      	ldr	r3, [pc, #340]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    50fe:	799b      	ldrb	r3, [r3, #6]
    5100:	009b      	lsls	r3, r3, #2
    5102:	4a55      	ldr	r2, [pc, #340]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5104:	4413      	add	r3, r2
    5106:	4a55      	ldr	r2, [pc, #340]	; (525c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5108:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    510a:	4b52      	ldr	r3, [pc, #328]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    510c:	7a1b      	ldrb	r3, [r3, #8]
    510e:	009b      	lsls	r3, r3, #2
    5110:	4a51      	ldr	r2, [pc, #324]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5112:	4413      	add	r3, r2
    5114:	4a52      	ldr	r2, [pc, #328]	; (5260 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5116:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5118:	4b4e      	ldr	r3, [pc, #312]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    511a:	7a5b      	ldrb	r3, [r3, #9]
    511c:	009b      	lsls	r3, r3, #2
    511e:	4a4e      	ldr	r2, [pc, #312]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5120:	4413      	add	r3, r2
    5122:	4a50      	ldr	r2, [pc, #320]	; (5264 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5124:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5126:	4b4b      	ldr	r3, [pc, #300]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5128:	7adb      	ldrb	r3, [r3, #11]
    512a:	009b      	lsls	r3, r3, #2
    512c:	4a4a      	ldr	r2, [pc, #296]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    512e:	4413      	add	r3, r2
    5130:	4a4d      	ldr	r2, [pc, #308]	; (5268 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5132:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5134:	4b47      	ldr	r3, [pc, #284]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5136:	7b1b      	ldrb	r3, [r3, #12]
    5138:	009b      	lsls	r3, r3, #2
    513a:	4a47      	ldr	r2, [pc, #284]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    513c:	4413      	add	r3, r2
    513e:	4a4b      	ldr	r2, [pc, #300]	; (526c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5140:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5142:	4b44      	ldr	r3, [pc, #272]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5144:	7b9b      	ldrb	r3, [r3, #14]
    5146:	009b      	lsls	r3, r3, #2
    5148:	4a43      	ldr	r2, [pc, #268]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    514a:	4413      	add	r3, r2
    514c:	4a48      	ldr	r2, [pc, #288]	; (5270 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    514e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5150:	4b48      	ldr	r3, [pc, #288]	; (5274 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5152:	781b      	ldrb	r3, [r3, #0]
    5154:	2b00      	cmp	r3, #0
    5156:	d002      	beq.n	515e <Clock_Ip_ClockInitializeObjects+0xda>
    5158:	9b01      	ldr	r3, [sp, #4]
    515a:	2b00      	cmp	r3, #0
    515c:	d003      	beq.n	5166 <Clock_Ip_ClockInitializeObjects+0xe2>
    515e:	4b46      	ldr	r3, [pc, #280]	; (5278 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5160:	781b      	ldrb	r3, [r3, #0]
    5162:	2b00      	cmp	r3, #0
    5164:	d056      	beq.n	5214 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5166:	f7ff fc09 	bl	497c <getFircConfig>
    516a:	4603      	mov	r3, r0
    516c:	4a43      	ldr	r2, [pc, #268]	; (527c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    516e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5170:	f7ff fc60 	bl	4a34 <getSoscConfig>
    5174:	4603      	mov	r3, r0
    5176:	4a42      	ldr	r2, [pc, #264]	; (5280 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5178:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    517a:	f7ff fca7 	bl	4acc <getSpllConfig>
    517e:	4603      	mov	r3, r0
    5180:	4a40      	ldr	r2, [pc, #256]	; (5284 <Clock_Ip_ClockInitializeObjects+0x200>)
    5182:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5184:	2019      	movs	r0, #25
    5186:	f7ff fcfb 	bl	4b80 <getSelectorConfig>
    518a:	4603      	mov	r3, r0
    518c:	4a3e      	ldr	r2, [pc, #248]	; (5288 <Clock_Ip_ClockInitializeObjects+0x204>)
    518e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5190:	201a      	movs	r0, #26
    5192:	f7ff fcf5 	bl	4b80 <getSelectorConfig>
    5196:	4603      	mov	r3, r0
    5198:	4a3c      	ldr	r2, [pc, #240]	; (528c <Clock_Ip_ClockInitializeObjects+0x208>)
    519a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    519c:	201b      	movs	r0, #27
    519e:	f7ff fcef 	bl	4b80 <getSelectorConfig>
    51a2:	4603      	mov	r3, r0
    51a4:	4a3a      	ldr	r2, [pc, #232]	; (5290 <Clock_Ip_ClockInitializeObjects+0x20c>)
    51a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    51a8:	201d      	movs	r0, #29
    51aa:	f7ff fd7b 	bl	4ca4 <getCoreDividerConfig>
    51ae:	4603      	mov	r3, r0
    51b0:	4a38      	ldr	r2, [pc, #224]	; (5294 <Clock_Ip_ClockInitializeObjects+0x210>)
    51b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    51b4:	201e      	movs	r0, #30
    51b6:	f7ff fd75 	bl	4ca4 <getCoreDividerConfig>
    51ba:	4603      	mov	r3, r0
    51bc:	4a36      	ldr	r2, [pc, #216]	; (5298 <Clock_Ip_ClockInitializeObjects+0x214>)
    51be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    51c0:	201f      	movs	r0, #31
    51c2:	f7ff fd6f 	bl	4ca4 <getCoreDividerConfig>
    51c6:	4603      	mov	r3, r0
    51c8:	4a34      	ldr	r2, [pc, #208]	; (529c <Clock_Ip_ClockInitializeObjects+0x218>)
    51ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    51cc:	2021      	movs	r0, #33	; 0x21
    51ce:	f7ff fe0f 	bl	4df0 <getBusDividerConfig>
    51d2:	4603      	mov	r3, r0
    51d4:	4a32      	ldr	r2, [pc, #200]	; (52a0 <Clock_Ip_ClockInitializeObjects+0x21c>)
    51d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    51d8:	2022      	movs	r0, #34	; 0x22
    51da:	f7ff fe09 	bl	4df0 <getBusDividerConfig>
    51de:	4603      	mov	r3, r0
    51e0:	4a30      	ldr	r2, [pc, #192]	; (52a4 <Clock_Ip_ClockInitializeObjects+0x220>)
    51e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    51e4:	2023      	movs	r0, #35	; 0x23
    51e6:	f7ff fe03 	bl	4df0 <getBusDividerConfig>
    51ea:	4603      	mov	r3, r0
    51ec:	4a2e      	ldr	r2, [pc, #184]	; (52a8 <Clock_Ip_ClockInitializeObjects+0x224>)
    51ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    51f0:	2025      	movs	r0, #37	; 0x25
    51f2:	f7ff fea3 	bl	4f3c <getSlowDividerConfig>
    51f6:	4603      	mov	r3, r0
    51f8:	4a2c      	ldr	r2, [pc, #176]	; (52ac <Clock_Ip_ClockInitializeObjects+0x228>)
    51fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    51fc:	2026      	movs	r0, #38	; 0x26
    51fe:	f7ff fe9d 	bl	4f3c <getSlowDividerConfig>
    5202:	4603      	mov	r3, r0
    5204:	4a2a      	ldr	r2, [pc, #168]	; (52b0 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5206:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5208:	2027      	movs	r0, #39	; 0x27
    520a:	f7ff fe97 	bl	4f3c <getSlowDividerConfig>
    520e:	4603      	mov	r3, r0
    5210:	4a28      	ldr	r2, [pc, #160]	; (52b4 <Clock_Ip_ClockInitializeObjects+0x230>)
    5212:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5214:	bf00      	nop
    5216:	b003      	add	sp, #12
    5218:	f85d fb04 	ldr.w	pc, [sp], #4
    521c:	1fff8cf4 	.word	0x1fff8cf4
    5220:	0001048c 	.word	0x0001048c
    5224:	00010ad8 	.word	0x00010ad8
    5228:	1fff8bc0 	.word	0x1fff8bc0
    522c:	0001044c 	.word	0x0001044c
    5230:	00010a20 	.word	0x00010a20
    5234:	1fff8bc4 	.word	0x1fff8bc4
    5238:	0001045c 	.word	0x0001045c
    523c:	00010a8c 	.word	0x00010a8c
    5240:	1fff8bc8 	.word	0x1fff8bc8
    5244:	0001049c 	.word	0x0001049c
    5248:	00010b04 	.word	0x00010b04
    524c:	1fff8bcc 	.word	0x1fff8bcc
    5250:	1fff8c08 	.word	0x1fff8c08
    5254:	0001042c 	.word	0x0001042c
    5258:	000109dc 	.word	0x000109dc
    525c:	1fff8bd0 	.word	0x1fff8bd0
    5260:	1fff8c0c 	.word	0x1fff8c0c
    5264:	1fff8bd4 	.word	0x1fff8bd4
    5268:	1fff8c10 	.word	0x1fff8c10
    526c:	1fff8bd8 	.word	0x1fff8bd8
    5270:	1fff8c14 	.word	0x1fff8c14
    5274:	1fff8b19 	.word	0x1fff8b19
    5278:	1fff8b10 	.word	0x1fff8b10
    527c:	1fff8bdc 	.word	0x1fff8bdc
    5280:	1fff8be0 	.word	0x1fff8be0
    5284:	1fff8be4 	.word	0x1fff8be4
    5288:	1fff8be8 	.word	0x1fff8be8
    528c:	1fff8bec 	.word	0x1fff8bec
    5290:	1fff8c18 	.word	0x1fff8c18
    5294:	1fff8bf0 	.word	0x1fff8bf0
    5298:	1fff8bf4 	.word	0x1fff8bf4
    529c:	1fff8c1c 	.word	0x1fff8c1c
    52a0:	1fff8bf8 	.word	0x1fff8bf8
    52a4:	1fff8bfc 	.word	0x1fff8bfc
    52a8:	1fff8c20 	.word	0x1fff8c20
    52ac:	1fff8c00 	.word	0x1fff8c00
    52b0:	1fff8c04 	.word	0x1fff8c04
    52b4:	1fff8c24 	.word	0x1fff8c24

000052b8 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    52b8:	b500      	push	{lr}
    52ba:	b083      	sub	sp, #12
    52bc:	9001      	str	r0, [sp, #4]
    52be:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    52c0:	9b01      	ldr	r3, [sp, #4]
    52c2:	2b03      	cmp	r3, #3
    52c4:	f000 8090 	beq.w	53e8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    52c8:	9b01      	ldr	r3, [sp, #4]
    52ca:	2b03      	cmp	r3, #3
    52cc:	f200 80d3 	bhi.w	5476 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    52d0:	9b01      	ldr	r3, [sp, #4]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d040      	beq.n	5358 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    52d6:	9b01      	ldr	r3, [sp, #4]
    52d8:	3b01      	subs	r3, #1
    52da:	2b01      	cmp	r3, #1
    52dc:	f200 80cb 	bhi.w	5476 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    52e0:	9b00      	ldr	r3, [sp, #0]
    52e2:	2b00      	cmp	r3, #0
    52e4:	f040 80c9 	bne.w	547a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    52e8:	4b68      	ldr	r3, [pc, #416]	; (548c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    52ea:	2200      	movs	r2, #0
    52ec:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    52ee:	4b68      	ldr	r3, [pc, #416]	; (5490 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    52f0:	681b      	ldr	r3, [r3, #0]
    52f2:	685b      	ldr	r3, [r3, #4]
    52f4:	4a67      	ldr	r2, [pc, #412]	; (5494 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    52f6:	6812      	ldr	r2, [r2, #0]
    52f8:	4610      	mov	r0, r2
    52fa:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    52fc:	4b66      	ldr	r3, [pc, #408]	; (5498 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    52fe:	681b      	ldr	r3, [r3, #0]
    5300:	681b      	ldr	r3, [r3, #0]
    5302:	4a66      	ldr	r2, [pc, #408]	; (549c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5304:	6812      	ldr	r2, [r2, #0]
    5306:	4610      	mov	r0, r2
    5308:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    530a:	4b65      	ldr	r3, [pc, #404]	; (54a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	681b      	ldr	r3, [r3, #0]
    5310:	4a64      	ldr	r2, [pc, #400]	; (54a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5312:	6812      	ldr	r2, [r2, #0]
    5314:	4610      	mov	r0, r2
    5316:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5318:	4b63      	ldr	r3, [pc, #396]	; (54a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    531a:	681b      	ldr	r3, [r3, #0]
    531c:	681b      	ldr	r3, [r3, #0]
    531e:	4a63      	ldr	r2, [pc, #396]	; (54ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5320:	6812      	ldr	r2, [r2, #0]
    5322:	4610      	mov	r0, r2
    5324:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5326:	4b62      	ldr	r3, [pc, #392]	; (54b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5328:	681b      	ldr	r3, [r3, #0]
    532a:	691b      	ldr	r3, [r3, #16]
    532c:	4a61      	ldr	r2, [pc, #388]	; (54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    532e:	6812      	ldr	r2, [r2, #0]
    5330:	6812      	ldr	r2, [r2, #0]
    5332:	4610      	mov	r0, r2
    5334:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5336:	4b60      	ldr	r3, [pc, #384]	; (54b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	68db      	ldr	r3, [r3, #12]
    533c:	4a5f      	ldr	r2, [pc, #380]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    533e:	6812      	ldr	r2, [r2, #0]
    5340:	6812      	ldr	r2, [r2, #0]
    5342:	4610      	mov	r0, r2
    5344:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5346:	4b5e      	ldr	r3, [pc, #376]	; (54c0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5348:	681b      	ldr	r3, [r3, #0]
    534a:	689b      	ldr	r3, [r3, #8]
    534c:	4a5d      	ldr	r2, [pc, #372]	; (54c4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    534e:	6812      	ldr	r2, [r2, #0]
    5350:	6812      	ldr	r2, [r2, #0]
    5352:	4610      	mov	r0, r2
    5354:	4798      	blx	r3
            }
        }
        break;
    5356:	e090      	b.n	547a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5358:	9b00      	ldr	r3, [sp, #0]
    535a:	2b02      	cmp	r3, #2
    535c:	f040 808f 	bne.w	547e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5360:	4b4a      	ldr	r3, [pc, #296]	; (548c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5362:	2201      	movs	r2, #1
    5364:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5366:	4b56      	ldr	r3, [pc, #344]	; (54c0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5368:	681b      	ldr	r3, [r3, #0]
    536a:	685b      	ldr	r3, [r3, #4]
    536c:	4a55      	ldr	r2, [pc, #340]	; (54c4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    536e:	6812      	ldr	r2, [r2, #0]
    5370:	4610      	mov	r0, r2
    5372:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5374:	4b50      	ldr	r3, [pc, #320]	; (54b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	691b      	ldr	r3, [r3, #16]
    537a:	4a50      	ldr	r2, [pc, #320]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    537c:	6812      	ldr	r2, [r2, #0]
    537e:	4610      	mov	r0, r2
    5380:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5382:	4b4d      	ldr	r3, [pc, #308]	; (54b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	689b      	ldr	r3, [r3, #8]
    5388:	4a4c      	ldr	r2, [pc, #304]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    538a:	6812      	ldr	r2, [r2, #0]
    538c:	4610      	mov	r0, r2
    538e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5390:	4b47      	ldr	r3, [pc, #284]	; (54b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	68db      	ldr	r3, [r3, #12]
    5396:	4a47      	ldr	r2, [pc, #284]	; (54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5398:	6812      	ldr	r2, [r2, #0]
    539a:	4610      	mov	r0, r2
    539c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    539e:	4b44      	ldr	r3, [pc, #272]	; (54b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	689b      	ldr	r3, [r3, #8]
    53a4:	4a43      	ldr	r2, [pc, #268]	; (54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    53a6:	6812      	ldr	r2, [r2, #0]
    53a8:	6812      	ldr	r2, [r2, #0]
    53aa:	4610      	mov	r0, r2
    53ac:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    53ae:	4b38      	ldr	r3, [pc, #224]	; (5490 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53b0:	681b      	ldr	r3, [r3, #0]
    53b2:	685b      	ldr	r3, [r3, #4]
    53b4:	4a44      	ldr	r2, [pc, #272]	; (54c8 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    53b6:	6812      	ldr	r2, [r2, #0]
    53b8:	4610      	mov	r0, r2
    53ba:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    53bc:	4b36      	ldr	r3, [pc, #216]	; (5498 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	4a42      	ldr	r2, [pc, #264]	; (54cc <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    53c4:	6812      	ldr	r2, [r2, #0]
    53c6:	4610      	mov	r0, r2
    53c8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    53ca:	4b35      	ldr	r3, [pc, #212]	; (54a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    53cc:	681b      	ldr	r3, [r3, #0]
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	4a3f      	ldr	r2, [pc, #252]	; (54d0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    53d2:	6812      	ldr	r2, [r2, #0]
    53d4:	4610      	mov	r0, r2
    53d6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    53d8:	4b33      	ldr	r3, [pc, #204]	; (54a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	4a3d      	ldr	r2, [pc, #244]	; (54d4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    53e0:	6812      	ldr	r2, [r2, #0]
    53e2:	4610      	mov	r0, r2
    53e4:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    53e6:	e04a      	b.n	547e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    53e8:	9b00      	ldr	r3, [sp, #0]
    53ea:	2b02      	cmp	r3, #2
    53ec:	d149      	bne.n	5482 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    53ee:	4b27      	ldr	r3, [pc, #156]	; (548c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    53f0:	2201      	movs	r2, #1
    53f2:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    53f4:	4b32      	ldr	r3, [pc, #200]	; (54c0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    53f6:	681b      	ldr	r3, [r3, #0]
    53f8:	685b      	ldr	r3, [r3, #4]
    53fa:	4a32      	ldr	r2, [pc, #200]	; (54c4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    53fc:	6812      	ldr	r2, [r2, #0]
    53fe:	4610      	mov	r0, r2
    5400:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5402:	4b2d      	ldr	r3, [pc, #180]	; (54b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5404:	681b      	ldr	r3, [r3, #0]
    5406:	691b      	ldr	r3, [r3, #16]
    5408:	4a2c      	ldr	r2, [pc, #176]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    540a:	6812      	ldr	r2, [r2, #0]
    540c:	4610      	mov	r0, r2
    540e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5410:	4b29      	ldr	r3, [pc, #164]	; (54b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5412:	681b      	ldr	r3, [r3, #0]
    5414:	689b      	ldr	r3, [r3, #8]
    5416:	4a29      	ldr	r2, [pc, #164]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5418:	6812      	ldr	r2, [r2, #0]
    541a:	4610      	mov	r0, r2
    541c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    541e:	4b24      	ldr	r3, [pc, #144]	; (54b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	68db      	ldr	r3, [r3, #12]
    5424:	4a23      	ldr	r2, [pc, #140]	; (54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5426:	6812      	ldr	r2, [r2, #0]
    5428:	4610      	mov	r0, r2
    542a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    542c:	4b20      	ldr	r3, [pc, #128]	; (54b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    542e:	681b      	ldr	r3, [r3, #0]
    5430:	689b      	ldr	r3, [r3, #8]
    5432:	4a20      	ldr	r2, [pc, #128]	; (54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5434:	6812      	ldr	r2, [r2, #0]
    5436:	6812      	ldr	r2, [r2, #0]
    5438:	4610      	mov	r0, r2
    543a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    543c:	4b26      	ldr	r3, [pc, #152]	; (54d8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	685b      	ldr	r3, [r3, #4]
    5442:	4a26      	ldr	r2, [pc, #152]	; (54dc <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5444:	6812      	ldr	r2, [r2, #0]
    5446:	4610      	mov	r0, r2
    5448:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    544a:	4b25      	ldr	r3, [pc, #148]	; (54e0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	681b      	ldr	r3, [r3, #0]
    5450:	4a24      	ldr	r2, [pc, #144]	; (54e4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5452:	6812      	ldr	r2, [r2, #0]
    5454:	4610      	mov	r0, r2
    5456:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5458:	4b23      	ldr	r3, [pc, #140]	; (54e8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    545a:	681b      	ldr	r3, [r3, #0]
    545c:	681b      	ldr	r3, [r3, #0]
    545e:	4a23      	ldr	r2, [pc, #140]	; (54ec <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5460:	6812      	ldr	r2, [r2, #0]
    5462:	4610      	mov	r0, r2
    5464:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5466:	4b22      	ldr	r3, [pc, #136]	; (54f0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	681b      	ldr	r3, [r3, #0]
    546c:	4a21      	ldr	r2, [pc, #132]	; (54f4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    546e:	6812      	ldr	r2, [r2, #0]
    5470:	4610      	mov	r0, r2
    5472:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5474:	e005      	b.n	5482 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5476:	bf00      	nop
    5478:	e004      	b.n	5484 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    547a:	bf00      	nop
    547c:	e002      	b.n	5484 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    547e:	bf00      	nop
    5480:	e000      	b.n	5484 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5482:	bf00      	nop
    }

}
    5484:	bf00      	nop
    5486:	b003      	add	sp, #12
    5488:	f85d fb04 	ldr.w	pc, [sp], #4
    548c:	1fff8b19 	.word	0x1fff8b19
    5490:	1fff8bcc 	.word	0x1fff8bcc
    5494:	1fff8bec 	.word	0x1fff8bec
    5498:	1fff8bd0 	.word	0x1fff8bd0
    549c:	1fff8bf4 	.word	0x1fff8bf4
    54a0:	1fff8bd4 	.word	0x1fff8bd4
    54a4:	1fff8bfc 	.word	0x1fff8bfc
    54a8:	1fff8bd8 	.word	0x1fff8bd8
    54ac:	1fff8c04 	.word	0x1fff8c04
    54b0:	1fff8bc0 	.word	0x1fff8bc0
    54b4:	1fff8be4 	.word	0x1fff8be4
    54b8:	1fff8bc4 	.word	0x1fff8bc4
    54bc:	1fff8be0 	.word	0x1fff8be0
    54c0:	1fff8bc8 	.word	0x1fff8bc8
    54c4:	1fff8bdc 	.word	0x1fff8bdc
    54c8:	1fff8be8 	.word	0x1fff8be8
    54cc:	1fff8bf0 	.word	0x1fff8bf0
    54d0:	1fff8bf8 	.word	0x1fff8bf8
    54d4:	1fff8c00 	.word	0x1fff8c00
    54d8:	1fff8c08 	.word	0x1fff8c08
    54dc:	1fff8c18 	.word	0x1fff8c18
    54e0:	1fff8c0c 	.word	0x1fff8c0c
    54e4:	1fff8c1c 	.word	0x1fff8c1c
    54e8:	1fff8c10 	.word	0x1fff8c10
    54ec:	1fff8c20 	.word	0x1fff8c20
    54f0:	1fff8c14 	.word	0x1fff8c14
    54f4:	1fff8c24 	.word	0x1fff8c24

000054f8 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    54f8:	b500      	push	{lr}
    54fa:	b083      	sub	sp, #12
    54fc:	9001      	str	r0, [sp, #4]
    54fe:	9100      	str	r1, [sp, #0]
    switch(Command)
    5500:	9b00      	ldr	r3, [sp, #0]
    5502:	2b04      	cmp	r3, #4
    5504:	d010      	beq.n	5528 <Clock_Ip_Command+0x30>
    5506:	9b00      	ldr	r3, [sp, #0]
    5508:	2b04      	cmp	r3, #4
    550a:	d811      	bhi.n	5530 <Clock_Ip_Command+0x38>
    550c:	9b00      	ldr	r3, [sp, #0]
    550e:	2b01      	cmp	r3, #1
    5510:	d006      	beq.n	5520 <Clock_Ip_Command+0x28>
    5512:	9b00      	ldr	r3, [sp, #0]
    5514:	2b02      	cmp	r3, #2
    5516:	d10b      	bne.n	5530 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5518:	9801      	ldr	r0, [sp, #4]
    551a:	f7ff fdb3 	bl	5084 <Clock_Ip_ClockInitializeObjects>
            break;
    551e:	e008      	b.n	5532 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5520:	9801      	ldr	r0, [sp, #4]
    5522:	f7ff f9db 	bl	48dc <Clock_Ip_SpecificPlatformInitClock>
            break;
    5526:	e004      	b.n	5532 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5528:	9801      	ldr	r0, [sp, #4]
    552a:	f7ff f8ed 	bl	4708 <DisableSafeClock>
            break;
    552e:	e000      	b.n	5532 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5530:	bf00      	nop
    }
}
    5532:	bf00      	nop
    5534:	b003      	add	sp, #12
    5536:	f85d fb04 	ldr.w	pc, [sp], #4
    553a:	bf00      	nop

0000553c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    553c:	b500      	push	{lr}
    553e:	b085      	sub	sp, #20
    5540:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5542:	4a20      	ldr	r2, [pc, #128]	; (55c4 <Mcu_Init+0x88>)
    5544:	9b01      	ldr	r3, [sp, #4]
    5546:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5548:	2300      	movs	r3, #0
    554a:	9303      	str	r3, [sp, #12]
    554c:	e010      	b.n	5570 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    554e:	4b1d      	ldr	r3, [pc, #116]	; (55c4 <Mcu_Init+0x88>)
    5550:	681b      	ldr	r3, [r3, #0]
    5552:	6919      	ldr	r1, [r3, #16]
    5554:	9a03      	ldr	r2, [sp, #12]
    5556:	4613      	mov	r3, r2
    5558:	005b      	lsls	r3, r3, #1
    555a:	4413      	add	r3, r2
    555c:	009b      	lsls	r3, r3, #2
    555e:	440b      	add	r3, r1
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	9a03      	ldr	r2, [sp, #12]
    5564:	b2d1      	uxtb	r1, r2
    5566:	4a18      	ldr	r2, [pc, #96]	; (55c8 <Mcu_Init+0x8c>)
    5568:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    556a:	9b03      	ldr	r3, [sp, #12]
    556c:	3301      	adds	r3, #1
    556e:	9303      	str	r3, [sp, #12]
    5570:	4b14      	ldr	r3, [pc, #80]	; (55c4 <Mcu_Init+0x88>)
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	689b      	ldr	r3, [r3, #8]
    5576:	9a03      	ldr	r2, [sp, #12]
    5578:	429a      	cmp	r2, r3
    557a:	d3e8      	bcc.n	554e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    557c:	2300      	movs	r3, #0
    557e:	9303      	str	r3, [sp, #12]
    5580:	e010      	b.n	55a4 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5582:	4b10      	ldr	r3, [pc, #64]	; (55c4 <Mcu_Init+0x88>)
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	6959      	ldr	r1, [r3, #20]
    5588:	9a03      	ldr	r2, [sp, #12]
    558a:	4613      	mov	r3, r2
    558c:	01db      	lsls	r3, r3, #7
    558e:	1a9b      	subs	r3, r3, r2
    5590:	00db      	lsls	r3, r3, #3
    5592:	440b      	add	r3, r1
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	9a03      	ldr	r2, [sp, #12]
    5598:	b2d1      	uxtb	r1, r2
    559a:	4a0c      	ldr	r2, [pc, #48]	; (55cc <Mcu_Init+0x90>)
    559c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    559e:	9b03      	ldr	r3, [sp, #12]
    55a0:	3301      	adds	r3, #1
    55a2:	9303      	str	r3, [sp, #12]
    55a4:	4b07      	ldr	r3, [pc, #28]	; (55c4 <Mcu_Init+0x88>)
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	68db      	ldr	r3, [r3, #12]
    55aa:	9a03      	ldr	r2, [sp, #12]
    55ac:	429a      	cmp	r2, r3
    55ae:	d3e8      	bcc.n	5582 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    55b0:	4b04      	ldr	r3, [pc, #16]	; (55c4 <Mcu_Init+0x88>)
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	699b      	ldr	r3, [r3, #24]
    55b6:	4618      	mov	r0, r3
    55b8:	f000 f88a 	bl	56d0 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    55bc:	bf00      	nop
    55be:	b005      	add	sp, #20
    55c0:	f85d fb04 	ldr.w	pc, [sp], #4
    55c4:	1fff8d00 	.word	0x1fff8d00
    55c8:	1fff8cfc 	.word	0x1fff8cfc
    55cc:	1fff8cf8 	.word	0x1fff8cf8

000055d0 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    55d0:	b084      	sub	sp, #16
    55d2:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    55d4:	2301      	movs	r3, #1
    55d6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    55da:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    55de:	4618      	mov	r0, r3
    55e0:	b004      	add	sp, #16
    55e2:	4770      	bx	lr

000055e4 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    55e4:	b500      	push	{lr}
    55e6:	b085      	sub	sp, #20
    55e8:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    55ea:	4a0e      	ldr	r2, [pc, #56]	; (5624 <Mcu_InitClock+0x40>)
    55ec:	9b01      	ldr	r3, [sp, #4]
    55ee:	4413      	add	r3, r2
    55f0:	781b      	ldrb	r3, [r3, #0]
    55f2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    55f6:	4b0c      	ldr	r3, [pc, #48]	; (5628 <Mcu_InitClock+0x44>)
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	6959      	ldr	r1, [r3, #20]
    55fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5600:	4613      	mov	r3, r2
    5602:	01db      	lsls	r3, r3, #7
    5604:	1a9b      	subs	r3, r3, r2
    5606:	00db      	lsls	r3, r3, #3
    5608:	440b      	add	r3, r1
    560a:	4618      	mov	r0, r3
    560c:	f000 f86a 	bl	56e4 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5610:	2300      	movs	r3, #0
    5612:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5616:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    561a:	4618      	mov	r0, r3
    561c:	b005      	add	sp, #20
    561e:	f85d fb04 	ldr.w	pc, [sp], #4
    5622:	bf00      	nop
    5624:	1fff8cf8 	.word	0x1fff8cf8
    5628:	1fff8d00 	.word	0x1fff8d00

0000562c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    562c:	b500      	push	{lr}
    562e:	b085      	sub	sp, #20
    5630:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5632:	4a0d      	ldr	r2, [pc, #52]	; (5668 <Mcu_SetMode+0x3c>)
    5634:	9b01      	ldr	r3, [sp, #4]
    5636:	4413      	add	r3, r2
    5638:	781b      	ldrb	r3, [r3, #0]
    563a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    563e:	f009 fc55 	bl	eeec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5642:	4b0a      	ldr	r3, [pc, #40]	; (566c <Mcu_SetMode+0x40>)
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	6919      	ldr	r1, [r3, #16]
    5648:	f89d 200f 	ldrb.w	r2, [sp, #15]
    564c:	4613      	mov	r3, r2
    564e:	005b      	lsls	r3, r3, #1
    5650:	4413      	add	r3, r2
    5652:	009b      	lsls	r3, r3, #2
    5654:	440b      	add	r3, r1
    5656:	4618      	mov	r0, r3
    5658:	f000 f84e 	bl	56f8 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    565c:	f009 fc72 	bl	ef44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5660:	bf00      	nop
    5662:	b005      	add	sp, #20
    5664:	f85d fb04 	ldr.w	pc, [sp], #4
    5668:	1fff8cfc 	.word	0x1fff8cfc
    566c:	1fff8d00 	.word	0x1fff8d00

00005670 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5670:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5672:	2302      	movs	r3, #2
    5674:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5676:	9b01      	ldr	r3, [sp, #4]
}
    5678:	4618      	mov	r0, r3
    567a:	b002      	add	sp, #8
    567c:	4770      	bx	lr

0000567e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    567e:	b500      	push	{lr}
    5680:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5682:	f000 f843 	bl	570c <Mcu_Ipw_GetResetReason>
    5686:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5688:	9b01      	ldr	r3, [sp, #4]
}
    568a:	4618      	mov	r0, r3
    568c:	b003      	add	sp, #12
    568e:	f85d fb04 	ldr.w	pc, [sp], #4

00005692 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5692:	b500      	push	{lr}
    5694:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5696:	f000 f83f 	bl	5718 <Mcu_Ipw_GetResetRawValue>
    569a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    569c:	9b01      	ldr	r3, [sp, #4]
}
    569e:	4618      	mov	r0, r3
    56a0:	b003      	add	sp, #12
    56a2:	f85d fb04 	ldr.w	pc, [sp], #4

000056a6 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    56a6:	b500      	push	{lr}
    56a8:	b083      	sub	sp, #12
    56aa:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    56ac:	9801      	ldr	r0, [sp, #4]
    56ae:	f000 f839 	bl	5724 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    56b2:	bf00      	nop
    56b4:	b003      	add	sp, #12
    56b6:	f85d fb04 	ldr.w	pc, [sp], #4

000056ba <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    56ba:	b082      	sub	sp, #8
    56bc:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    56be:	4b03      	ldr	r3, [pc, #12]	; (56cc <Mcu_ClkSrcFailureNotification+0x12>)
    56c0:	681b      	ldr	r3, [r3, #0]
    56c2:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    56c4:	bf00      	nop
    56c6:	b002      	add	sp, #8
    56c8:	4770      	bx	lr
    56ca:	bf00      	nop
    56cc:	1fff8d00 	.word	0x1fff8d00

000056d0 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    56d0:	b500      	push	{lr}
    56d2:	b083      	sub	sp, #12
    56d4:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    56d6:	9801      	ldr	r0, [sp, #4]
    56d8:	f000 f882 	bl	57e0 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    56dc:	bf00      	nop
    56de:	b003      	add	sp, #12
    56e0:	f85d fb04 	ldr.w	pc, [sp], #4

000056e4 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    56e4:	b500      	push	{lr}
    56e6:	b083      	sub	sp, #12
    56e8:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    56ea:	9801      	ldr	r0, [sp, #4]
    56ec:	f7fc fc6a 	bl	1fc4 <Clock_Ip_InitClock>
}
    56f0:	bf00      	nop
    56f2:	b003      	add	sp, #12
    56f4:	f85d fb04 	ldr.w	pc, [sp], #4

000056f8 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    56f8:	b500      	push	{lr}
    56fa:	b083      	sub	sp, #12
    56fc:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    56fe:	9801      	ldr	r0, [sp, #4]
    5700:	f000 f820 	bl	5744 <Power_Ip_SetMode>
}
    5704:	bf00      	nop
    5706:	b003      	add	sp, #12
    5708:	f85d fb04 	ldr.w	pc, [sp], #4

0000570c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    570c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    570e:	f000 f84f 	bl	57b0 <Power_Ip_GetResetReason>
    5712:	4603      	mov	r3, r0
}
    5714:	4618      	mov	r0, r3
    5716:	bd08      	pop	{r3, pc}

00005718 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5718:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    571a:	f000 f857 	bl	57cc <Power_Ip_GetResetRawValue>
    571e:	4603      	mov	r3, r0
}
    5720:	4618      	mov	r0, r3
    5722:	bd08      	pop	{r3, pc}

00005724 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5724:	b500      	push	{lr}
    5726:	b083      	sub	sp, #12
    5728:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    572a:	9b01      	ldr	r3, [sp, #4]
    572c:	2b00      	cmp	r3, #0
    572e:	d102      	bne.n	5736 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5730:	f000 f86c 	bl	580c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5734:	e001      	b.n	573a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5736:	f000 f86e 	bl	5816 <Power_Ip_EnableSleepOnExit>
}
    573a:	bf00      	nop
    573c:	b003      	add	sp, #12
    573e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005744 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5744:	b500      	push	{lr}
    5746:	b085      	sub	sp, #20
    5748:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    574a:	9b01      	ldr	r3, [sp, #4]
    574c:	685b      	ldr	r3, [r3, #4]
    574e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5750:	9802      	ldr	r0, [sp, #8]
    5752:	f000 f9f5 	bl	5b40 <Power_Ip_SMC_ModeCheckEntry>
    5756:	4603      	mov	r3, r0
    5758:	2b00      	cmp	r3, #0
    575a:	d002      	beq.n	5762 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    575c:	2301      	movs	r3, #1
    575e:	9303      	str	r3, [sp, #12]
    5760:	e003      	b.n	576a <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5762:	9801      	ldr	r0, [sp, #4]
    5764:	f000 fa1e 	bl	5ba4 <Power_Ip_SMC_ModeConfig>
    5768:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    576a:	9b03      	ldr	r3, [sp, #12]
    576c:	2b01      	cmp	r3, #1
    576e:	d103      	bne.n	5778 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5770:	21ff      	movs	r1, #255	; 0xff
    5772:	2003      	movs	r0, #3
    5774:	f000 f8f4 	bl	5960 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5778:	bf00      	nop
    577a:	b005      	add	sp, #20
    577c:	f85d fb04 	ldr.w	pc, [sp], #4

00005780 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5780:	b084      	sub	sp, #16
    5782:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5784:	230c      	movs	r3, #12
    5786:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5788:	4a08      	ldr	r2, [pc, #32]	; (57ac <Power_Ip_ConvertIntergeToResetType+0x2c>)
    578a:	9b01      	ldr	r3, [sp, #4]
    578c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5790:	2b0e      	cmp	r3, #14
    5792:	d805      	bhi.n	57a0 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5794:	4a05      	ldr	r2, [pc, #20]	; (57ac <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5796:	9b01      	ldr	r3, [sp, #4]
    5798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    579c:	9303      	str	r3, [sp, #12]
    579e:	e001      	b.n	57a4 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    57a0:	230c      	movs	r3, #12
    57a2:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    57a4:	9b03      	ldr	r3, [sp, #12]
}
    57a6:	4618      	mov	r0, r3
    57a8:	b004      	add	sp, #16
    57aa:	4770      	bx	lr
    57ac:	00010b78 	.word	0x00010b78

000057b0 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    57b0:	b500      	push	{lr}
    57b2:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    57b4:	f000 f940 	bl	5a38 <Power_Ip_RCM_GetResetReason>
    57b8:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    57ba:	9801      	ldr	r0, [sp, #4]
    57bc:	f7ff ffe0 	bl	5780 <Power_Ip_ConvertIntergeToResetType>
    57c0:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    57c2:	9b00      	ldr	r3, [sp, #0]
}
    57c4:	4618      	mov	r0, r3
    57c6:	b003      	add	sp, #12
    57c8:	f85d fb04 	ldr.w	pc, [sp], #4

000057cc <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    57cc:	b500      	push	{lr}
    57ce:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    57d0:	f000 f98a 	bl	5ae8 <Power_Ip_RCM_GetResetRawValue>
    57d4:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    57d6:	9b01      	ldr	r3, [sp, #4]
}
    57d8:	4618      	mov	r0, r3
    57da:	b003      	add	sp, #12
    57dc:	f85d fb04 	ldr.w	pc, [sp], #4

000057e0 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    57e0:	b500      	push	{lr}
    57e2:	b083      	sub	sp, #12
    57e4:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    57e6:	9b01      	ldr	r3, [sp, #4]
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	4618      	mov	r0, r3
    57ec:	f000 f90e 	bl	5a0c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    57f0:	9b01      	ldr	r3, [sp, #4]
    57f2:	685b      	ldr	r3, [r3, #4]
    57f4:	4618      	mov	r0, r3
    57f6:	f000 f86d 	bl	58d4 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    57fa:	9b01      	ldr	r3, [sp, #4]
    57fc:	689b      	ldr	r3, [r3, #8]
    57fe:	4618      	mov	r0, r3
    5800:	f000 f990 	bl	5b24 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5804:	bf00      	nop
    5806:	b003      	add	sp, #12
    5808:	f85d fb04 	ldr.w	pc, [sp], #4

0000580c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    580c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    580e:	f000 f811 	bl	5834 <Power_Ip_CM4_DisableSleepOnExit>
}
    5812:	bf00      	nop
    5814:	bd08      	pop	{r3, pc}

00005816 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5816:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5818:	f000 f820 	bl	585c <Power_Ip_CM4_EnableSleepOnExit>
}
    581c:	bf00      	nop
    581e:	bd08      	pop	{r3, pc}

00005820 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5820:	b082      	sub	sp, #8
    5822:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5824:	4a02      	ldr	r2, [pc, #8]	; (5830 <Power_Ip_InstallNotificationsCallback+0x10>)
    5826:	9b01      	ldr	r3, [sp, #4]
    5828:	6013      	str	r3, [r2, #0]
}
    582a:	bf00      	nop
    582c:	b002      	add	sp, #8
    582e:	4770      	bx	lr
    5830:	1fff8b1c 	.word	0x1fff8b1c

00005834 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5834:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5836:	2300      	movs	r3, #0
    5838:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    583a:	4b07      	ldr	r3, [pc, #28]	; (5858 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    583c:	681b      	ldr	r3, [r3, #0]
    583e:	685b      	ldr	r3, [r3, #4]
    5840:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5842:	9b01      	ldr	r3, [sp, #4]
    5844:	f023 0302 	bic.w	r3, r3, #2
    5848:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    584a:	4b03      	ldr	r3, [pc, #12]	; (5858 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	9a01      	ldr	r2, [sp, #4]
    5850:	605a      	str	r2, [r3, #4]
}
    5852:	bf00      	nop
    5854:	b002      	add	sp, #8
    5856:	4770      	bx	lr
    5858:	1fff8b20 	.word	0x1fff8b20

0000585c <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    585c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    585e:	2300      	movs	r3, #0
    5860:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5862:	4b07      	ldr	r3, [pc, #28]	; (5880 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5864:	681b      	ldr	r3, [r3, #0]
    5866:	685b      	ldr	r3, [r3, #4]
    5868:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    586a:	9b01      	ldr	r3, [sp, #4]
    586c:	f043 0302 	orr.w	r3, r3, #2
    5870:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5872:	4b03      	ldr	r3, [pc, #12]	; (5880 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	9a01      	ldr	r2, [sp, #4]
    5878:	605a      	str	r2, [r3, #4]
}
    587a:	bf00      	nop
    587c:	b002      	add	sp, #8
    587e:	4770      	bx	lr
    5880:	1fff8b20 	.word	0x1fff8b20

00005884 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5884:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5886:	2300      	movs	r3, #0
    5888:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    588a:	4b07      	ldr	r3, [pc, #28]	; (58a8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	685b      	ldr	r3, [r3, #4]
    5890:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	f043 0304 	orr.w	r3, r3, #4
    5898:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    589a:	4b03      	ldr	r3, [pc, #12]	; (58a8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	9a01      	ldr	r2, [sp, #4]
    58a0:	605a      	str	r2, [r3, #4]
}
    58a2:	bf00      	nop
    58a4:	b002      	add	sp, #8
    58a6:	4770      	bx	lr
    58a8:	1fff8b20 	.word	0x1fff8b20

000058ac <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    58ac:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    58ae:	2300      	movs	r3, #0
    58b0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    58b2:	4b07      	ldr	r3, [pc, #28]	; (58d0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	685b      	ldr	r3, [r3, #4]
    58b8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	f023 0304 	bic.w	r3, r3, #4
    58c0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    58c2:	4b03      	ldr	r3, [pc, #12]	; (58d0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    58c4:	681b      	ldr	r3, [r3, #0]
    58c6:	9a01      	ldr	r2, [sp, #4]
    58c8:	605a      	str	r2, [r3, #4]
}
    58ca:	bf00      	nop
    58cc:	b002      	add	sp, #8
    58ce:	4770      	bx	lr
    58d0:	1fff8b20 	.word	0x1fff8b20

000058d4 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    58d4:	b084      	sub	sp, #16
    58d6:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    58d8:	4b20      	ldr	r3, [pc, #128]	; (595c <Power_Ip_PMC_PowerInit+0x88>)
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    58e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    58e4:	f003 030f 	and.w	r3, r3, #15
    58e8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    58ec:	9b01      	ldr	r3, [sp, #4]
    58ee:	781a      	ldrb	r2, [r3, #0]
    58f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    58f4:	4313      	orrs	r3, r2
    58f6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    58fa:	4a18      	ldr	r2, [pc, #96]	; (595c <Power_Ip_PMC_PowerInit+0x88>)
    58fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5900:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5902:	4b16      	ldr	r3, [pc, #88]	; (595c <Power_Ip_PMC_PowerInit+0x88>)
    5904:	785b      	ldrb	r3, [r3, #1]
    5906:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    590a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    590e:	f003 031f 	and.w	r3, r3, #31
    5912:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5916:	9b01      	ldr	r3, [sp, #4]
    5918:	785a      	ldrb	r2, [r3, #1]
    591a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    591e:	4313      	orrs	r3, r2
    5920:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5924:	4a0d      	ldr	r2, [pc, #52]	; (595c <Power_Ip_PMC_PowerInit+0x88>)
    5926:	f89d 300f 	ldrb.w	r3, [sp, #15]
    592a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    592c:	4b0b      	ldr	r3, [pc, #44]	; (595c <Power_Ip_PMC_PowerInit+0x88>)
    592e:	789b      	ldrb	r3, [r3, #2]
    5930:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5934:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5938:	f003 0338 	and.w	r3, r3, #56	; 0x38
    593c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5940:	9b01      	ldr	r3, [sp, #4]
    5942:	789a      	ldrb	r2, [r3, #2]
    5944:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5948:	4313      	orrs	r3, r2
    594a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    594e:	4a03      	ldr	r2, [pc, #12]	; (595c <Power_Ip_PMC_PowerInit+0x88>)
    5950:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5954:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5956:	bf00      	nop
    5958:	b004      	add	sp, #16
    595a:	4770      	bx	lr
    595c:	4007d000 	.word	0x4007d000

00005960 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5960:	b500      	push	{lr}
    5962:	b083      	sub	sp, #12
    5964:	9001      	str	r0, [sp, #4]
    5966:	460b      	mov	r3, r1
    5968:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    596c:	4b05      	ldr	r3, [pc, #20]	; (5984 <Power_Ip_ReportPowerErrors+0x24>)
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5974:	4611      	mov	r1, r2
    5976:	9801      	ldr	r0, [sp, #4]
    5978:	4798      	blx	r3
}
    597a:	bf00      	nop
    597c:	b003      	add	sp, #12
    597e:	f85d fb04 	ldr.w	pc, [sp], #4
    5982:	bf00      	nop
    5984:	1fff8b1c 	.word	0x1fff8b1c

00005988 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5988:	b082      	sub	sp, #8
    598a:	9001      	str	r0, [sp, #4]
    598c:	460b      	mov	r3, r1
    598e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5992:	bf00      	nop
    5994:	b002      	add	sp, #8
    5996:	4770      	bx	lr

00005998 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5998:	b500      	push	{lr}
    599a:	b085      	sub	sp, #20
    599c:	9003      	str	r0, [sp, #12]
    599e:	9102      	str	r1, [sp, #8]
    59a0:	9201      	str	r2, [sp, #4]
    59a2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    59a4:	2000      	movs	r0, #0
    59a6:	f7fc f83d 	bl	1a24 <OsIf_GetCounter>
    59aa:	4602      	mov	r2, r0
    59ac:	9b03      	ldr	r3, [sp, #12]
    59ae:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    59b0:	9b02      	ldr	r3, [sp, #8]
    59b2:	2200      	movs	r2, #0
    59b4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    59b6:	2100      	movs	r1, #0
    59b8:	9800      	ldr	r0, [sp, #0]
    59ba:	f7fc f87f 	bl	1abc <OsIf_MicrosToTicks>
    59be:	4602      	mov	r2, r0
    59c0:	9b01      	ldr	r3, [sp, #4]
    59c2:	601a      	str	r2, [r3, #0]
}
    59c4:	bf00      	nop
    59c6:	b005      	add	sp, #20
    59c8:	f85d fb04 	ldr.w	pc, [sp], #4

000059cc <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    59cc:	b500      	push	{lr}
    59ce:	b087      	sub	sp, #28
    59d0:	9003      	str	r0, [sp, #12]
    59d2:	9102      	str	r1, [sp, #8]
    59d4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    59d6:	2300      	movs	r3, #0
    59d8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    59dc:	2100      	movs	r1, #0
    59de:	9803      	ldr	r0, [sp, #12]
    59e0:	f7fc f839 	bl	1a56 <OsIf_GetElapsed>
    59e4:	4602      	mov	r2, r0
    59e6:	9b02      	ldr	r3, [sp, #8]
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	441a      	add	r2, r3
    59ec:	9b02      	ldr	r3, [sp, #8]
    59ee:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    59f0:	9b02      	ldr	r3, [sp, #8]
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	9a01      	ldr	r2, [sp, #4]
    59f6:	429a      	cmp	r2, r3
    59f8:	d802      	bhi.n	5a00 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    59fa:	2301      	movs	r3, #1
    59fc:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5a00:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5a04:	4618      	mov	r0, r3
    5a06:	b007      	add	sp, #28
    5a08:	f85d fb04 	ldr.w	pc, [sp], #4

00005a0c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5a0c:	b082      	sub	sp, #8
    5a0e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5a10:	9b01      	ldr	r3, [sp, #4]
    5a12:	681a      	ldr	r2, [r3, #0]
    5a14:	4907      	ldr	r1, [pc, #28]	; (5a34 <Power_Ip_RCM_ResetInit+0x28>)
    5a16:	f641 7307 	movw	r3, #7943	; 0x1f07
    5a1a:	4013      	ands	r3, r2
    5a1c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5a1e:	9b01      	ldr	r3, [sp, #4]
    5a20:	685a      	ldr	r2, [r3, #4]
    5a22:	4904      	ldr	r1, [pc, #16]	; (5a34 <Power_Ip_RCM_ResetInit+0x28>)
    5a24:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5a28:	4013      	ands	r3, r2
    5a2a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5a2c:	bf00      	nop
    5a2e:	b002      	add	sp, #8
    5a30:	4770      	bx	lr
    5a32:	bf00      	nop
    5a34:	4007f000 	.word	0x4007f000

00005a38 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5a38:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5a3a:	230c      	movs	r3, #12
    5a3c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5a3e:	2300      	movs	r3, #0
    5a40:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5a42:	2300      	movs	r3, #0
    5a44:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5a46:	2300      	movs	r3, #0
    5a48:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5a4a:	4b25      	ldr	r3, [pc, #148]	; (5ae0 <Power_Ip_RCM_GetResetReason+0xa8>)
    5a4c:	699a      	ldr	r2, [r3, #24]
    5a4e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5a52:	4013      	ands	r3, r2
    5a54:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5a56:	9b03      	ldr	r3, [sp, #12]
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d008      	beq.n	5a6e <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5a5c:	4920      	ldr	r1, [pc, #128]	; (5ae0 <Power_Ip_RCM_GetResetReason+0xa8>)
    5a5e:	9a03      	ldr	r2, [sp, #12]
    5a60:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5a64:	4013      	ands	r3, r2
    5a66:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5a68:	4a1e      	ldr	r2, [pc, #120]	; (5ae4 <Power_Ip_RCM_GetResetReason+0xac>)
    5a6a:	9b03      	ldr	r3, [sp, #12]
    5a6c:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5a6e:	4b1d      	ldr	r3, [pc, #116]	; (5ae4 <Power_Ip_RCM_GetResetReason+0xac>)
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5a74:	9a02      	ldr	r2, [sp, #8]
    5a76:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5a7a:	4013      	ands	r3, r2
    5a7c:	2b82      	cmp	r3, #130	; 0x82
    5a7e:	d102      	bne.n	5a86 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5a80:	2305      	movs	r3, #5
    5a82:	9307      	str	r3, [sp, #28]
    5a84:	e027      	b.n	5ad6 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5a86:	2300      	movs	r3, #0
    5a88:	9306      	str	r3, [sp, #24]
    5a8a:	e021      	b.n	5ad0 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5a8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5a90:	9b06      	ldr	r3, [sp, #24]
    5a92:	fa22 f303 	lsr.w	r3, r2, r3
    5a96:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5a98:	9a01      	ldr	r2, [sp, #4]
    5a9a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5a9e:	4013      	ands	r3, r2
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d012      	beq.n	5aca <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5aa4:	9a01      	ldr	r2, [sp, #4]
    5aa6:	9b02      	ldr	r3, [sp, #8]
    5aa8:	4013      	ands	r3, r2
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d00a      	beq.n	5ac4 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5aae:	9b05      	ldr	r3, [sp, #20]
    5ab0:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5ab2:	9b04      	ldr	r3, [sp, #16]
    5ab4:	3301      	adds	r3, #1
    5ab6:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5ab8:	9b04      	ldr	r3, [sp, #16]
    5aba:	2b01      	cmp	r3, #1
    5abc:	d902      	bls.n	5ac4 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5abe:	230d      	movs	r3, #13
    5ac0:	9307      	str	r3, [sp, #28]
                        break;
    5ac2:	e008      	b.n	5ad6 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5ac4:	9b05      	ldr	r3, [sp, #20]
    5ac6:	3301      	adds	r3, #1
    5ac8:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5aca:	9b06      	ldr	r3, [sp, #24]
    5acc:	3301      	adds	r3, #1
    5ace:	9306      	str	r3, [sp, #24]
    5ad0:	9b06      	ldr	r3, [sp, #24]
    5ad2:	2b1f      	cmp	r3, #31
    5ad4:	d9da      	bls.n	5a8c <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5ad6:	9b07      	ldr	r3, [sp, #28]
}
    5ad8:	4618      	mov	r0, r3
    5ada:	b008      	add	sp, #32
    5adc:	4770      	bx	lr
    5ade:	bf00      	nop
    5ae0:	4007f000 	.word	0x4007f000
    5ae4:	1fff8d04 	.word	0x1fff8d04

00005ae8 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5ae8:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5aea:	4b0c      	ldr	r3, [pc, #48]	; (5b1c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5aec:	699a      	ldr	r2, [r3, #24]
    5aee:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5af2:	4013      	ands	r3, r2
    5af4:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	2b00      	cmp	r3, #0
    5afa:	d008      	beq.n	5b0e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5afc:	4907      	ldr	r1, [pc, #28]	; (5b1c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5afe:	9a01      	ldr	r2, [sp, #4]
    5b00:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b04:	4013      	ands	r3, r2
    5b06:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b08:	4a05      	ldr	r2, [pc, #20]	; (5b20 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5b0a:	9b01      	ldr	r3, [sp, #4]
    5b0c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5b0e:	4b04      	ldr	r3, [pc, #16]	; (5b20 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5b10:	681b      	ldr	r3, [r3, #0]
    5b12:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5b14:	9b00      	ldr	r3, [sp, #0]
}
    5b16:	4618      	mov	r0, r3
    5b18:	b002      	add	sp, #8
    5b1a:	4770      	bx	lr
    5b1c:	4007f000 	.word	0x4007f000
    5b20:	1fff8d04 	.word	0x1fff8d04

00005b24 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5b24:	b082      	sub	sp, #8
    5b26:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5b28:	9b01      	ldr	r3, [sp, #4]
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	4a03      	ldr	r2, [pc, #12]	; (5b3c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5b2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5b32:	6093      	str	r3, [r2, #8]
}
    5b34:	bf00      	nop
    5b36:	b002      	add	sp, #8
    5b38:	4770      	bx	lr
    5b3a:	bf00      	nop
    5b3c:	4007e000 	.word	0x4007e000

00005b40 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5b40:	b084      	sub	sp, #16
    5b42:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5b44:	2301      	movs	r3, #1
    5b46:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5b48:	4b15      	ldr	r3, [pc, #84]	; (5ba0 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5b4a:	695b      	ldr	r3, [r3, #20]
    5b4c:	b2db      	uxtb	r3, r3
    5b4e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5b50:	9b01      	ldr	r3, [sp, #4]
    5b52:	2b02      	cmp	r3, #2
    5b54:	d012      	beq.n	5b7c <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5b56:	9b01      	ldr	r3, [sp, #4]
    5b58:	2b02      	cmp	r3, #2
    5b5a:	d818      	bhi.n	5b8e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5b5c:	9b01      	ldr	r3, [sp, #4]
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d003      	beq.n	5b6a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5b62:	9b01      	ldr	r3, [sp, #4]
    5b64:	2b01      	cmp	r3, #1
    5b66:	d003      	beq.n	5b70 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5b68:	e011      	b.n	5b8e <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5b6a:	2300      	movs	r3, #0
    5b6c:	9303      	str	r3, [sp, #12]
            break;
    5b6e:	e013      	b.n	5b98 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5b70:	9b02      	ldr	r3, [sp, #8]
    5b72:	2b01      	cmp	r3, #1
    5b74:	d10d      	bne.n	5b92 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5b76:	2300      	movs	r3, #0
    5b78:	9303      	str	r3, [sp, #12]
            break;
    5b7a:	e00a      	b.n	5b92 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5b7c:	9b02      	ldr	r3, [sp, #8]
    5b7e:	2b01      	cmp	r3, #1
    5b80:	d002      	beq.n	5b88 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5b82:	9b02      	ldr	r3, [sp, #8]
    5b84:	2b10      	cmp	r3, #16
    5b86:	d106      	bne.n	5b96 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5b88:	2300      	movs	r3, #0
    5b8a:	9303      	str	r3, [sp, #12]
            break;
    5b8c:	e003      	b.n	5b96 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5b8e:	bf00      	nop
    5b90:	e002      	b.n	5b98 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5b92:	bf00      	nop
    5b94:	e000      	b.n	5b98 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5b96:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5b98:	9b03      	ldr	r3, [sp, #12]
}
    5b9a:	4618      	mov	r0, r3
    5b9c:	b004      	add	sp, #16
    5b9e:	4770      	bx	lr
    5ba0:	4007e000 	.word	0x4007e000

00005ba4 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5ba4:	b500      	push	{lr}
    5ba6:	b08b      	sub	sp, #44	; 0x2c
    5ba8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5baa:	2300      	movs	r3, #0
    5bac:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5bae:	2300      	movs	r3, #0
    5bb0:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5bb2:	2300      	movs	r3, #0
    5bb4:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5bb8:	9b01      	ldr	r3, [sp, #4]
    5bba:	685b      	ldr	r3, [r3, #4]
    5bbc:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5bbe:	9b08      	ldr	r3, [sp, #32]
    5bc0:	2b02      	cmp	r3, #2
    5bc2:	d076      	beq.n	5cb2 <Power_Ip_SMC_ModeConfig+0x10e>
    5bc4:	9b08      	ldr	r3, [sp, #32]
    5bc6:	2b02      	cmp	r3, #2
    5bc8:	f200 80ab 	bhi.w	5d22 <Power_Ip_SMC_ModeConfig+0x17e>
    5bcc:	9b08      	ldr	r3, [sp, #32]
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d003      	beq.n	5bda <Power_Ip_SMC_ModeConfig+0x36>
    5bd2:	9b08      	ldr	r3, [sp, #32]
    5bd4:	2b01      	cmp	r3, #1
    5bd6:	d034      	beq.n	5c42 <Power_Ip_SMC_ModeConfig+0x9e>
    5bd8:	e0a3      	b.n	5d22 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5bda:	4b58      	ldr	r3, [pc, #352]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5bdc:	68db      	ldr	r3, [r3, #12]
    5bde:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5be0:	9b06      	ldr	r3, [sp, #24]
    5be2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5be6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5be8:	4a54      	ldr	r2, [pc, #336]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5bea:	9b06      	ldr	r3, [sp, #24]
    5bec:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5bee:	aa02      	add	r2, sp, #8
    5bf0:	a903      	add	r1, sp, #12
    5bf2:	a804      	add	r0, sp, #16
    5bf4:	f24c 3350 	movw	r3, #50000	; 0xc350
    5bf8:	f7ff fece 	bl	5998 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5bfc:	9a02      	ldr	r2, [sp, #8]
    5bfe:	a903      	add	r1, sp, #12
    5c00:	ab04      	add	r3, sp, #16
    5c02:	4618      	mov	r0, r3
    5c04:	f7ff fee2 	bl	59cc <Power_Ip_TimeoutExpired>
    5c08:	4603      	mov	r3, r0
    5c0a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5c0e:	4b4b      	ldr	r3, [pc, #300]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5c10:	695b      	ldr	r3, [r3, #20]
    5c12:	f003 0301 	and.w	r3, r3, #1
    5c16:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5c18:	9b05      	ldr	r3, [sp, #20]
    5c1a:	2b01      	cmp	r3, #1
    5c1c:	d006      	beq.n	5c2c <Power_Ip_SMC_ModeConfig+0x88>
    5c1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5c22:	f083 0301 	eor.w	r3, r3, #1
    5c26:	b2db      	uxtb	r3, r3
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d1e7      	bne.n	5bfc <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5c2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5c30:	2b00      	cmp	r3, #0
    5c32:	d079      	beq.n	5d28 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5c34:	2301      	movs	r3, #1
    5c36:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5c38:	21ff      	movs	r1, #255	; 0xff
    5c3a:	2000      	movs	r0, #0
    5c3c:	f7ff fe90 	bl	5960 <Power_Ip_ReportPowerErrors>
            }

            break;
    5c40:	e072      	b.n	5d28 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5c42:	4b3e      	ldr	r3, [pc, #248]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5c44:	68db      	ldr	r3, [r3, #12]
    5c46:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5c48:	9b06      	ldr	r3, [sp, #24]
    5c4a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5c4e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5c50:	9b06      	ldr	r3, [sp, #24]
    5c52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5c56:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5c58:	4a38      	ldr	r2, [pc, #224]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5c5a:	9b06      	ldr	r3, [sp, #24]
    5c5c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5c5e:	aa02      	add	r2, sp, #8
    5c60:	a903      	add	r1, sp, #12
    5c62:	a804      	add	r0, sp, #16
    5c64:	f24c 3350 	movw	r3, #50000	; 0xc350
    5c68:	f7ff fe96 	bl	5998 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5c6c:	9a02      	ldr	r2, [sp, #8]
    5c6e:	a903      	add	r1, sp, #12
    5c70:	ab04      	add	r3, sp, #16
    5c72:	4618      	mov	r0, r3
    5c74:	f7ff feaa 	bl	59cc <Power_Ip_TimeoutExpired>
    5c78:	4603      	mov	r3, r0
    5c7a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5c7e:	4b2f      	ldr	r3, [pc, #188]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5c80:	695b      	ldr	r3, [r3, #20]
    5c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5c86:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5c88:	9b05      	ldr	r3, [sp, #20]
    5c8a:	2b80      	cmp	r3, #128	; 0x80
    5c8c:	d006      	beq.n	5c9c <Power_Ip_SMC_ModeConfig+0xf8>
    5c8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5c92:	f083 0301 	eor.w	r3, r3, #1
    5c96:	b2db      	uxtb	r3, r3
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d1e7      	bne.n	5c6c <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5c9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d043      	beq.n	5d2c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ca4:	2301      	movs	r3, #1
    5ca6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ca8:	21ff      	movs	r1, #255	; 0xff
    5caa:	2000      	movs	r0, #0
    5cac:	f7ff fe58 	bl	5960 <Power_Ip_ReportPowerErrors>
            }

            break;
    5cb0:	e03c      	b.n	5d2c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5cb2:	4b22      	ldr	r3, [pc, #136]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5cb4:	68db      	ldr	r3, [r3, #12]
    5cb6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5cb8:	9b06      	ldr	r3, [sp, #24]
    5cba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5cbe:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5cc0:	9b06      	ldr	r3, [sp, #24]
    5cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5cc6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5cc8:	4a1c      	ldr	r2, [pc, #112]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5cca:	9b06      	ldr	r3, [sp, #24]
    5ccc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5cce:	aa02      	add	r2, sp, #8
    5cd0:	a903      	add	r1, sp, #12
    5cd2:	a804      	add	r0, sp, #16
    5cd4:	f24c 3350 	movw	r3, #50000	; 0xc350
    5cd8:	f7ff fe5e 	bl	5998 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5cdc:	9a02      	ldr	r2, [sp, #8]
    5cde:	a903      	add	r1, sp, #12
    5ce0:	ab04      	add	r3, sp, #16
    5ce2:	4618      	mov	r0, r3
    5ce4:	f7ff fe72 	bl	59cc <Power_Ip_TimeoutExpired>
    5ce8:	4603      	mov	r3, r0
    5cea:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5cee:	4b13      	ldr	r3, [pc, #76]	; (5d3c <Power_Ip_SMC_ModeConfig+0x198>)
    5cf0:	695b      	ldr	r3, [r3, #20]
    5cf2:	f003 0304 	and.w	r3, r3, #4
    5cf6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5cf8:	9b05      	ldr	r3, [sp, #20]
    5cfa:	2b04      	cmp	r3, #4
    5cfc:	d006      	beq.n	5d0c <Power_Ip_SMC_ModeConfig+0x168>
    5cfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d02:	f083 0301 	eor.w	r3, r3, #1
    5d06:	b2db      	uxtb	r3, r3
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d1e7      	bne.n	5cdc <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5d0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d10:	2b00      	cmp	r3, #0
    5d12:	d00d      	beq.n	5d30 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d14:	2301      	movs	r3, #1
    5d16:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d18:	21ff      	movs	r1, #255	; 0xff
    5d1a:	2000      	movs	r0, #0
    5d1c:	f7ff fe20 	bl	5960 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d20:	e006      	b.n	5d30 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d22:	2301      	movs	r3, #1
    5d24:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5d26:	e004      	b.n	5d32 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5d28:	bf00      	nop
    5d2a:	e002      	b.n	5d32 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5d2c:	bf00      	nop
    5d2e:	e000      	b.n	5d32 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5d30:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5d34:	4618      	mov	r0, r3
    5d36:	b00b      	add	sp, #44	; 0x2c
    5d38:	f85d fb04 	ldr.w	pc, [sp], #4
    5d3c:	4007e000 	.word	0x4007e000

00005d40 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5d40:	b500      	push	{lr}
    5d42:	b085      	sub	sp, #20
    5d44:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5d46:	9b01      	ldr	r3, [sp, #4]
    5d48:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5d4a:	9803      	ldr	r0, [sp, #12]
    5d4c:	f000 fbc8 	bl	64e0 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5d50:	4a03      	ldr	r2, [pc, #12]	; (5d60 <Port_Init+0x20>)
    5d52:	9b03      	ldr	r3, [sp, #12]
    5d54:	6013      	str	r3, [r2, #0]
        }
    }
}
    5d56:	bf00      	nop
    5d58:	b005      	add	sp, #20
    5d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d5e:	bf00      	nop
    5d60:	1fff8d08 	.word	0x1fff8d08

00005d64 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5d64:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5d66:	4b03      	ldr	r3, [pc, #12]	; (5d74 <Port_RefreshPortDirection+0x10>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	4618      	mov	r0, r3
    5d6c:	f000 fc10 	bl	6590 <Port_Ipw_RefreshPortDirection>
    }
}
    5d70:	bf00      	nop
    5d72:	bd08      	pop	{r3, pc}
    5d74:	1fff8d08 	.word	0x1fff8d08

00005d78 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5d78:	b086      	sub	sp, #24
    5d7a:	9003      	str	r0, [sp, #12]
    5d7c:	9102      	str	r1, [sp, #8]
    5d7e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5d80:	23ff      	movs	r3, #255	; 0xff
    5d82:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5d84:	9b03      	ldr	r3, [sp, #12]
    5d86:	4a39      	ldr	r2, [pc, #228]	; (5e6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5d88:	4293      	cmp	r3, r2
    5d8a:	d151      	bne.n	5e30 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5d8c:	9b02      	ldr	r3, [sp, #8]
    5d8e:	2b10      	cmp	r3, #16
    5d90:	d867      	bhi.n	5e62 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5d92:	a201      	add	r2, pc, #4	; (adr r2, 5d98 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5d98:	00005ddd 	.word	0x00005ddd
    5d9c:	00005deb 	.word	0x00005deb
    5da0:	00005e63 	.word	0x00005e63
    5da4:	00005e63 	.word	0x00005e63
    5da8:	00005e63 	.word	0x00005e63
    5dac:	00005e63 	.word	0x00005e63
    5db0:	00005e63 	.word	0x00005e63
    5db4:	00005e63 	.word	0x00005e63
    5db8:	00005e63 	.word	0x00005e63
    5dbc:	00005e63 	.word	0x00005e63
    5dc0:	00005e63 	.word	0x00005e63
    5dc4:	00005e63 	.word	0x00005e63
    5dc8:	00005e63 	.word	0x00005e63
    5dcc:	00005df9 	.word	0x00005df9
    5dd0:	00005e07 	.word	0x00005e07
    5dd4:	00005e15 	.word	0x00005e15
    5dd8:	00005e23 	.word	0x00005e23
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5ddc:	2301      	movs	r3, #1
    5dde:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5de0:	9a05      	ldr	r2, [sp, #20]
    5de2:	9b01      	ldr	r3, [sp, #4]
    5de4:	4313      	orrs	r3, r2
    5de6:	9305      	str	r3, [sp, #20]
                break;
    5de8:	e03c      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5dea:	2302      	movs	r3, #2
    5dec:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5dee:	9a05      	ldr	r2, [sp, #20]
    5df0:	9b01      	ldr	r3, [sp, #4]
    5df2:	4313      	orrs	r3, r2
    5df4:	9305      	str	r3, [sp, #20]
                break;
    5df6:	e035      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5df8:	2304      	movs	r3, #4
    5dfa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5dfc:	9a05      	ldr	r2, [sp, #20]
    5dfe:	9b01      	ldr	r3, [sp, #4]
    5e00:	4313      	orrs	r3, r2
    5e02:	9305      	str	r3, [sp, #20]
                break;
    5e04:	e02e      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5e06:	2308      	movs	r3, #8
    5e08:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5e0a:	9a05      	ldr	r2, [sp, #20]
    5e0c:	9b01      	ldr	r3, [sp, #4]
    5e0e:	4313      	orrs	r3, r2
    5e10:	9305      	str	r3, [sp, #20]
                break;
    5e12:	e027      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5e14:	230e      	movs	r3, #14
    5e16:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e18:	9a05      	ldr	r2, [sp, #20]
    5e1a:	9b01      	ldr	r3, [sp, #4]
    5e1c:	4013      	ands	r3, r2
    5e1e:	9305      	str	r3, [sp, #20]
                break;
    5e20:	e020      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5e22:	230d      	movs	r3, #13
    5e24:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e26:	9a05      	ldr	r2, [sp, #20]
    5e28:	9b01      	ldr	r3, [sp, #4]
    5e2a:	4013      	ands	r3, r2
    5e2c:	9305      	str	r3, [sp, #20]
                break;
    5e2e:	e019      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5e30:	9b03      	ldr	r3, [sp, #12]
    5e32:	4a0f      	ldr	r2, [pc, #60]	; (5e70 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5e34:	4293      	cmp	r3, r2
    5e36:	d115      	bne.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5e38:	9b02      	ldr	r3, [sp, #8]
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d003      	beq.n	5e46 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5e3e:	9b02      	ldr	r3, [sp, #8]
    5e40:	2b01      	cmp	r3, #1
    5e42:	d007      	beq.n	5e54 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5e44:	e00e      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5e46:	230b      	movs	r3, #11
    5e48:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e4a:	9a05      	ldr	r2, [sp, #20]
    5e4c:	9b01      	ldr	r3, [sp, #4]
    5e4e:	4013      	ands	r3, r2
    5e50:	9305      	str	r3, [sp, #20]
                break;
    5e52:	e007      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5e54:	2307      	movs	r3, #7
    5e56:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e58:	9a05      	ldr	r2, [sp, #20]
    5e5a:	9b01      	ldr	r3, [sp, #4]
    5e5c:	4013      	ands	r3, r2
    5e5e:	9305      	str	r3, [sp, #20]
                break;
    5e60:	e000      	b.n	5e64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5e62:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5e64:	9b05      	ldr	r3, [sp, #20]
}
    5e66:	4618      	mov	r0, r3
    5e68:	b006      	add	sp, #24
    5e6a:	4770      	bx	lr
    5e6c:	4004a000 	.word	0x4004a000
    5e70:	4004b000 	.word	0x4004b000

00005e74 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5e74:	b500      	push	{lr}
    5e76:	b089      	sub	sp, #36	; 0x24
    5e78:	9003      	str	r0, [sp, #12]
    5e7a:	9102      	str	r1, [sp, #8]
    5e7c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5e7e:	9b01      	ldr	r3, [sp, #4]
    5e80:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5e82:	9b01      	ldr	r3, [sp, #4]
    5e84:	2b08      	cmp	r3, #8
    5e86:	d121      	bne.n	5ecc <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5e88:	4b13      	ldr	r3, [pc, #76]	; (5ed8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5e8a:	685b      	ldr	r3, [r3, #4]
    5e8c:	f003 030f 	and.w	r3, r3, #15
    5e90:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5e92:	9a06      	ldr	r2, [sp, #24]
    5e94:	9902      	ldr	r1, [sp, #8]
    5e96:	9803      	ldr	r0, [sp, #12]
    5e98:	f7ff ff6e 	bl	5d78 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5e9c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5e9e:	9b05      	ldr	r3, [sp, #20]
    5ea0:	2bff      	cmp	r3, #255	; 0xff
    5ea2:	d011      	beq.n	5ec8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5ea4:	f009 fab2 	bl	f40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5ea8:	4b0b      	ldr	r3, [pc, #44]	; (5ed8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5eaa:	685b      	ldr	r3, [r3, #4]
    5eac:	4a0a      	ldr	r2, [pc, #40]	; (5ed8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5eae:	f023 030f 	bic.w	r3, r3, #15
    5eb2:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5eb4:	4b08      	ldr	r3, [pc, #32]	; (5ed8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5eb6:	685a      	ldr	r2, [r3, #4]
    5eb8:	9b05      	ldr	r3, [sp, #20]
    5eba:	f003 030f 	and.w	r3, r3, #15
    5ebe:	4906      	ldr	r1, [pc, #24]	; (5ed8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ec0:	4313      	orrs	r3, r2
    5ec2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5ec4:	f009 face 	bl	f464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5ec8:	2300      	movs	r3, #0
    5eca:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5ecc:	9b07      	ldr	r3, [sp, #28]
}
    5ece:	4618      	mov	r0, r3
    5ed0:	b009      	add	sp, #36	; 0x24
    5ed2:	f85d fb04 	ldr.w	pc, [sp], #4
    5ed6:	bf00      	nop
    5ed8:	40048000 	.word	0x40048000

00005edc <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5edc:	b500      	push	{lr}
    5ede:	b087      	sub	sp, #28
    5ee0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5ee2:	2300      	movs	r3, #0
    5ee4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5ee6:	2300      	movs	r3, #0
    5ee8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5eea:	2300      	movs	r3, #0
    5eec:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5eee:	9b01      	ldr	r3, [sp, #4]
    5ef0:	68db      	ldr	r3, [r3, #12]
    5ef2:	2b02      	cmp	r3, #2
    5ef4:	d00a      	beq.n	5f0c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5ef6:	9b05      	ldr	r3, [sp, #20]
    5ef8:	f043 0302 	orr.w	r3, r3, #2
    5efc:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5efe:	9b01      	ldr	r3, [sp, #4]
    5f00:	68db      	ldr	r3, [r3, #12]
    5f02:	f003 0301 	and.w	r3, r3, #1
    5f06:	9a05      	ldr	r2, [sp, #20]
    5f08:	4313      	orrs	r3, r2
    5f0a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5f0c:	9b01      	ldr	r3, [sp, #4]
    5f0e:	699b      	ldr	r3, [r3, #24]
    5f10:	019b      	lsls	r3, r3, #6
    5f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f16:	9a05      	ldr	r2, [sp, #20]
    5f18:	4313      	orrs	r3, r2
    5f1a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5f1c:	9b01      	ldr	r3, [sp, #4]
    5f1e:	6a1b      	ldr	r3, [r3, #32]
    5f20:	03db      	lsls	r3, r3, #15
    5f22:	b29b      	uxth	r3, r3
    5f24:	9a05      	ldr	r2, [sp, #20]
    5f26:	4313      	orrs	r3, r2
    5f28:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5f2a:	9b01      	ldr	r3, [sp, #4]
    5f2c:	7f1b      	ldrb	r3, [r3, #28]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d001      	beq.n	5f36 <Port_Ci_Port_Ip_PinInit+0x5a>
    5f32:	2310      	movs	r3, #16
    5f34:	e000      	b.n	5f38 <Port_Ci_Port_Ip_PinInit+0x5c>
    5f36:	2300      	movs	r3, #0
    5f38:	9a05      	ldr	r2, [sp, #20]
    5f3a:	4313      	orrs	r3, r2
    5f3c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5f3e:	9b01      	ldr	r3, [sp, #4]
    5f40:	691b      	ldr	r3, [r3, #16]
    5f42:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5f44:	9b01      	ldr	r3, [sp, #4]
    5f46:	6818      	ldr	r0, [r3, #0]
    5f48:	9b01      	ldr	r3, [sp, #4]
    5f4a:	689b      	ldr	r3, [r3, #8]
    5f4c:	9a04      	ldr	r2, [sp, #16]
    5f4e:	4619      	mov	r1, r3
    5f50:	f7ff ff90 	bl	5e74 <Port_Ci_Port_Ip_ConfigureInterleave>
    5f54:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5f56:	9b03      	ldr	r3, [sp, #12]
    5f58:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5f5a:	9b04      	ldr	r3, [sp, #16]
    5f5c:	021b      	lsls	r3, r3, #8
    5f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5f62:	9a05      	ldr	r2, [sp, #20]
    5f64:	4313      	orrs	r3, r2
    5f66:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5f68:	f009 f8b6 	bl	f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5f6c:	9b01      	ldr	r3, [sp, #4]
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5f74:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5f76:	9b01      	ldr	r3, [sp, #4]
    5f78:	689b      	ldr	r3, [r3, #8]
    5f7a:	2201      	movs	r2, #1
    5f7c:	fa02 f303 	lsl.w	r3, r2, r3
    5f80:	43db      	mvns	r3, r3
    5f82:	9a02      	ldr	r2, [sp, #8]
    5f84:	4013      	ands	r3, r2
    5f86:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5f88:	9b01      	ldr	r3, [sp, #4]
    5f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d001      	beq.n	5f96 <Port_Ci_Port_Ip_PinInit+0xba>
    5f92:	2201      	movs	r2, #1
    5f94:	e000      	b.n	5f98 <Port_Ci_Port_Ip_PinInit+0xbc>
    5f96:	2200      	movs	r2, #0
    5f98:	9b01      	ldr	r3, [sp, #4]
    5f9a:	689b      	ldr	r3, [r3, #8]
    5f9c:	fa02 f303 	lsl.w	r3, r2, r3
    5fa0:	9a02      	ldr	r2, [sp, #8]
    5fa2:	4313      	orrs	r3, r2
    5fa4:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5fa6:	9b01      	ldr	r3, [sp, #4]
    5fa8:	681b      	ldr	r3, [r3, #0]
    5faa:	9a02      	ldr	r2, [sp, #8]
    5fac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5fb0:	f009 f8be 	bl	f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5fb4:	9b04      	ldr	r3, [sp, #16]
    5fb6:	2b01      	cmp	r3, #1
    5fb8:	d16d      	bne.n	6096 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	695b      	ldr	r3, [r3, #20]
    5fbe:	2b02      	cmp	r3, #2
    5fc0:	d138      	bne.n	6034 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5fc2:	9b01      	ldr	r3, [sp, #4]
    5fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5fc8:	2b01      	cmp	r3, #1
    5fca:	d10f      	bne.n	5fec <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5fcc:	f009 f8d6 	bl	f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5fd0:	9b01      	ldr	r3, [sp, #4]
    5fd2:	685b      	ldr	r3, [r3, #4]
    5fd4:	6859      	ldr	r1, [r3, #4]
    5fd6:	9b01      	ldr	r3, [sp, #4]
    5fd8:	689b      	ldr	r3, [r3, #8]
    5fda:	2201      	movs	r2, #1
    5fdc:	409a      	lsls	r2, r3
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	685b      	ldr	r3, [r3, #4]
    5fe2:	430a      	orrs	r2, r1
    5fe4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5fe6:	f009 f8f5 	bl	f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5fea:	e013      	b.n	6014 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5fec:	9b01      	ldr	r3, [sp, #4]
    5fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d10e      	bne.n	6014 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5ff6:	f009 f913 	bl	f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5ffa:	9b01      	ldr	r3, [sp, #4]
    5ffc:	685b      	ldr	r3, [r3, #4]
    5ffe:	6899      	ldr	r1, [r3, #8]
    6000:	9b01      	ldr	r3, [sp, #4]
    6002:	689b      	ldr	r3, [r3, #8]
    6004:	2201      	movs	r2, #1
    6006:	409a      	lsls	r2, r3
    6008:	9b01      	ldr	r3, [sp, #4]
    600a:	685b      	ldr	r3, [r3, #4]
    600c:	430a      	orrs	r2, r1
    600e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6010:	f009 f932 	bl	f278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6014:	f009 f956 	bl	f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6018:	9b01      	ldr	r3, [sp, #4]
    601a:	685b      	ldr	r3, [r3, #4]
    601c:	6959      	ldr	r1, [r3, #20]
    601e:	9b01      	ldr	r3, [sp, #4]
    6020:	689b      	ldr	r3, [r3, #8]
    6022:	2201      	movs	r2, #1
    6024:	409a      	lsls	r2, r3
    6026:	9b01      	ldr	r3, [sp, #4]
    6028:	685b      	ldr	r3, [r3, #4]
    602a:	430a      	orrs	r2, r1
    602c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    602e:	f009 f975 	bl	f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6032:	e030      	b.n	6096 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6034:	f009 f946 	bl	f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6038:	9b01      	ldr	r3, [sp, #4]
    603a:	685b      	ldr	r3, [r3, #4]
    603c:	6959      	ldr	r1, [r3, #20]
    603e:	9b01      	ldr	r3, [sp, #4]
    6040:	689b      	ldr	r3, [r3, #8]
    6042:	2201      	movs	r2, #1
    6044:	fa02 f303 	lsl.w	r3, r2, r3
    6048:	43da      	mvns	r2, r3
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	685b      	ldr	r3, [r3, #4]
    604e:	400a      	ands	r2, r1
    6050:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6052:	f009 f963 	bl	f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6056:	f009 f987 	bl	f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    605a:	9b01      	ldr	r3, [sp, #4]
    605c:	685b      	ldr	r3, [r3, #4]
    605e:	6999      	ldr	r1, [r3, #24]
    6060:	9b01      	ldr	r3, [sp, #4]
    6062:	689b      	ldr	r3, [r3, #8]
    6064:	2201      	movs	r2, #1
    6066:	fa02 f303 	lsl.w	r3, r2, r3
    606a:	43da      	mvns	r2, r3
    606c:	9b01      	ldr	r3, [sp, #4]
    606e:	685b      	ldr	r3, [r3, #4]
    6070:	400a      	ands	r2, r1
    6072:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	695b      	ldr	r3, [r3, #20]
    6078:	2b03      	cmp	r3, #3
    607a:	d10a      	bne.n	6092 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	685b      	ldr	r3, [r3, #4]
    6080:	6999      	ldr	r1, [r3, #24]
    6082:	9b01      	ldr	r3, [sp, #4]
    6084:	689b      	ldr	r3, [r3, #8]
    6086:	2201      	movs	r2, #1
    6088:	409a      	lsls	r2, r3
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	685b      	ldr	r3, [r3, #4]
    608e:	430a      	orrs	r2, r1
    6090:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6092:	f009 f995 	bl	f3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6096:	9b01      	ldr	r3, [sp, #4]
    6098:	681b      	ldr	r3, [r3, #0]
    609a:	9a01      	ldr	r2, [sp, #4]
    609c:	6892      	ldr	r2, [r2, #8]
    609e:	9905      	ldr	r1, [sp, #20]
    60a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    60a4:	bf00      	nop
    60a6:	b007      	add	sp, #28
    60a8:	f85d fb04 	ldr.w	pc, [sp], #4

000060ac <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    60ac:	b500      	push	{lr}
    60ae:	b085      	sub	sp, #20
    60b0:	9001      	str	r0, [sp, #4]
    60b2:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    60b4:	2300      	movs	r3, #0
    60b6:	9303      	str	r3, [sp, #12]
    60b8:	e00d      	b.n	60d6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    60ba:	9a03      	ldr	r2, [sp, #12]
    60bc:	4613      	mov	r3, r2
    60be:	009b      	lsls	r3, r3, #2
    60c0:	4413      	add	r3, r2
    60c2:	00db      	lsls	r3, r3, #3
    60c4:	461a      	mov	r2, r3
    60c6:	9b00      	ldr	r3, [sp, #0]
    60c8:	4413      	add	r3, r2
    60ca:	4618      	mov	r0, r3
    60cc:	f7ff ff06 	bl	5edc <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    60d0:	9b03      	ldr	r3, [sp, #12]
    60d2:	3301      	adds	r3, #1
    60d4:	9303      	str	r3, [sp, #12]
    60d6:	9a03      	ldr	r2, [sp, #12]
    60d8:	9b01      	ldr	r3, [sp, #4]
    60da:	429a      	cmp	r2, r3
    60dc:	d3ed      	bcc.n	60ba <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    60de:	2300      	movs	r3, #0
}
    60e0:	4618      	mov	r0, r3
    60e2:	b005      	add	sp, #20
    60e4:	f85d fb04 	ldr.w	pc, [sp], #4

000060e8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    60e8:	b500      	push	{lr}
    60ea:	b087      	sub	sp, #28
    60ec:	9003      	str	r0, [sp, #12]
    60ee:	9102      	str	r1, [sp, #8]
    60f0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    60f2:	9a01      	ldr	r2, [sp, #4]
    60f4:	9902      	ldr	r1, [sp, #8]
    60f6:	9803      	ldr	r0, [sp, #12]
    60f8:	f7ff febc 	bl	5e74 <Port_Ci_Port_Ip_ConfigureInterleave>
    60fc:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    60fe:	f009 f9d7 	bl	f4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6102:	9b03      	ldr	r3, [sp, #12]
    6104:	9a02      	ldr	r2, [sp, #8]
    6106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    610a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    610c:	9b04      	ldr	r3, [sp, #16]
    610e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6112:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6114:	9b05      	ldr	r3, [sp, #20]
    6116:	021b      	lsls	r3, r3, #8
    6118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    611c:	9a04      	ldr	r2, [sp, #16]
    611e:	4313      	orrs	r3, r2
    6120:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6122:	9b03      	ldr	r3, [sp, #12]
    6124:	9a02      	ldr	r2, [sp, #8]
    6126:	9904      	ldr	r1, [sp, #16]
    6128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    612c:	f009 f9ec 	bl	f508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6130:	bf00      	nop
    6132:	b007      	add	sp, #28
    6134:	f85d fb04 	ldr.w	pc, [sp], #4

00006138 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6138:	b500      	push	{lr}
    613a:	b083      	sub	sp, #12
    613c:	9001      	str	r0, [sp, #4]
    613e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6140:	f009 fa08 	bl	f554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    614a:	2101      	movs	r1, #1
    614c:	9b00      	ldr	r3, [sp, #0]
    614e:	fa01 f303 	lsl.w	r3, r1, r3
    6152:	431a      	orrs	r2, r3
    6154:	9b01      	ldr	r3, [sp, #4]
    6156:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    615a:	f009 fa27 	bl	f5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    615e:	bf00      	nop
    6160:	b003      	add	sp, #12
    6162:	f85d fb04 	ldr.w	pc, [sp], #4

00006166 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6166:	b500      	push	{lr}
    6168:	b083      	sub	sp, #12
    616a:	9001      	str	r0, [sp, #4]
    616c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    616e:	f009 fa43 	bl	f5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6172:	9b01      	ldr	r3, [sp, #4]
    6174:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6178:	2101      	movs	r1, #1
    617a:	9b00      	ldr	r3, [sp, #0]
    617c:	fa01 f303 	lsl.w	r3, r1, r3
    6180:	43db      	mvns	r3, r3
    6182:	401a      	ands	r2, r3
    6184:	9b01      	ldr	r3, [sp, #4]
    6186:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    618a:	f009 fa61 	bl	f650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    618e:	bf00      	nop
    6190:	b003      	add	sp, #12
    6192:	f85d fb04 	ldr.w	pc, [sp], #4

00006196 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6196:	b082      	sub	sp, #8
    6198:	9001      	str	r0, [sp, #4]
    619a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    619c:	9b00      	ldr	r3, [sp, #0]
    619e:	785b      	ldrb	r3, [r3, #1]
    61a0:	f003 0201 	and.w	r2, r3, #1
    61a4:	9b01      	ldr	r3, [sp, #4]
    61a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    61aa:	9b00      	ldr	r3, [sp, #0]
    61ac:	789b      	ldrb	r3, [r3, #2]
    61ae:	f003 021f 	and.w	r2, r3, #31
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    61b8:	bf00      	nop
    61ba:	b002      	add	sp, #8
    61bc:	4770      	bx	lr

000061be <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    61be:	b086      	sub	sp, #24
    61c0:	9003      	str	r0, [sp, #12]
    61c2:	9301      	str	r3, [sp, #4]
    61c4:	460b      	mov	r3, r1
    61c6:	f8ad 300a 	strh.w	r3, [sp, #10]
    61ca:	4613      	mov	r3, r2
    61cc:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    61d0:	2300      	movs	r3, #0
    61d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    61d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61da:	f043 0301 	orr.w	r3, r3, #1
    61de:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    61e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61e6:	f043 0302 	orr.w	r3, r3, #2
    61ea:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    61ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61f2:	f043 0310 	orr.w	r3, r3, #16
    61f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    61fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6202:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6206:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    620a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    620e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6212:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    621a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    621e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6222:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6226:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    622a:	4013      	ands	r3, r2
    622c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6230:	9b01      	ldr	r3, [sp, #4]
    6232:	2b00      	cmp	r3, #0
    6234:	d003      	beq.n	623e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6236:	9b01      	ldr	r3, [sp, #4]
    6238:	2b01      	cmp	r3, #1
    623a:	d00a      	beq.n	6252 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    623c:	e013      	b.n	6266 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    623e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6242:	041a      	lsls	r2, r3, #16
    6244:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6248:	431a      	orrs	r2, r3
    624a:	9b03      	ldr	r3, [sp, #12]
    624c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6250:	e009      	b.n	6266 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6252:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6256:	041a      	lsls	r2, r3, #16
    6258:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    625c:	431a      	orrs	r2, r3
    625e:	9b03      	ldr	r3, [sp, #12]
    6260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6264:	bf00      	nop
    }
}
    6266:	bf00      	nop
    6268:	b006      	add	sp, #24
    626a:	4770      	bx	lr

0000626c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    626c:	b500      	push	{lr}
    626e:	b087      	sub	sp, #28
    6270:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6272:	9b01      	ldr	r3, [sp, #4]
    6274:	885b      	ldrh	r3, [r3, #2]
    6276:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    627a:	9b01      	ldr	r3, [sp, #4]
    627c:	689b      	ldr	r3, [r3, #8]
    627e:	7a1b      	ldrb	r3, [r3, #8]
    6280:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6284:	9b01      	ldr	r3, [sp, #4]
    6286:	689b      	ldr	r3, [r3, #8]
    6288:	681b      	ldr	r3, [r3, #0]
    628a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    628c:	9b01      	ldr	r3, [sp, #4]
    628e:	689b      	ldr	r3, [r3, #8]
    6290:	685b      	ldr	r3, [r3, #4]
    6292:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6294:	2300      	movs	r3, #0
    6296:	f8ad 3016 	strh.w	r3, [sp, #22]
    629a:	e111      	b.n	64c0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    629c:	9b02      	ldr	r3, [sp, #8]
    629e:	2b02      	cmp	r3, #2
    62a0:	d169      	bne.n	6376 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    62a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    62a6:	2b01      	cmp	r3, #1
    62a8:	d11a      	bne.n	62e0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    62aa:	9b01      	ldr	r3, [sp, #4]
    62ac:	685a      	ldr	r2, [r3, #4]
    62ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62b2:	005b      	lsls	r3, r3, #1
    62b4:	4413      	add	r3, r2
    62b6:	881b      	ldrh	r3, [r3, #0]
    62b8:	f003 021f 	and.w	r2, r3, #31
    62bc:	9b01      	ldr	r3, [sp, #4]
    62be:	6859      	ldr	r1, [r3, #4]
    62c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62c4:	005b      	lsls	r3, r3, #1
    62c6:	440b      	add	r3, r1
    62c8:	881b      	ldrh	r3, [r3, #0]
    62ca:	095b      	lsrs	r3, r3, #5
    62cc:	b29b      	uxth	r3, r3
    62ce:	4619      	mov	r1, r3
    62d0:	4b81      	ldr	r3, [pc, #516]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    62d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    62d6:	2101      	movs	r1, #1
    62d8:	fa01 f202 	lsl.w	r2, r1, r2
    62dc:	605a      	str	r2, [r3, #4]
    62de:	e01d      	b.n	631c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    62e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d119      	bne.n	631c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    62e8:	9b01      	ldr	r3, [sp, #4]
    62ea:	685a      	ldr	r2, [r3, #4]
    62ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62f0:	005b      	lsls	r3, r3, #1
    62f2:	4413      	add	r3, r2
    62f4:	881b      	ldrh	r3, [r3, #0]
    62f6:	f003 021f 	and.w	r2, r3, #31
    62fa:	9b01      	ldr	r3, [sp, #4]
    62fc:	6859      	ldr	r1, [r3, #4]
    62fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6302:	005b      	lsls	r3, r3, #1
    6304:	440b      	add	r3, r1
    6306:	881b      	ldrh	r3, [r3, #0]
    6308:	095b      	lsrs	r3, r3, #5
    630a:	b29b      	uxth	r3, r3
    630c:	4619      	mov	r1, r3
    630e:	4b72      	ldr	r3, [pc, #456]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6310:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6314:	2101      	movs	r1, #1
    6316:	fa01 f202 	lsl.w	r2, r1, r2
    631a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    631c:	f009 f9be 	bl	f69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6320:	9b01      	ldr	r3, [sp, #4]
    6322:	685a      	ldr	r2, [r3, #4]
    6324:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6328:	005b      	lsls	r3, r3, #1
    632a:	4413      	add	r3, r2
    632c:	881b      	ldrh	r3, [r3, #0]
    632e:	095b      	lsrs	r3, r3, #5
    6330:	b29b      	uxth	r3, r3
    6332:	461a      	mov	r2, r3
    6334:	4b68      	ldr	r3, [pc, #416]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    633a:	6959      	ldr	r1, [r3, #20]
    633c:	9b01      	ldr	r3, [sp, #4]
    633e:	685a      	ldr	r2, [r3, #4]
    6340:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6344:	005b      	lsls	r3, r3, #1
    6346:	4413      	add	r3, r2
    6348:	881b      	ldrh	r3, [r3, #0]
    634a:	f003 031f 	and.w	r3, r3, #31
    634e:	2201      	movs	r2, #1
    6350:	409a      	lsls	r2, r3
    6352:	9b01      	ldr	r3, [sp, #4]
    6354:	6858      	ldr	r0, [r3, #4]
    6356:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    635a:	005b      	lsls	r3, r3, #1
    635c:	4403      	add	r3, r0
    635e:	881b      	ldrh	r3, [r3, #0]
    6360:	095b      	lsrs	r3, r3, #5
    6362:	b29b      	uxth	r3, r3
    6364:	4618      	mov	r0, r3
    6366:	4b5c      	ldr	r3, [pc, #368]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6368:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    636c:	430a      	orrs	r2, r1
    636e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6370:	f009 f9c0 	bl	f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6374:	e086      	b.n	6484 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6376:	f009 f991 	bl	f69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    637a:	9b01      	ldr	r3, [sp, #4]
    637c:	685a      	ldr	r2, [r3, #4]
    637e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6382:	005b      	lsls	r3, r3, #1
    6384:	4413      	add	r3, r2
    6386:	881b      	ldrh	r3, [r3, #0]
    6388:	095b      	lsrs	r3, r3, #5
    638a:	b29b      	uxth	r3, r3
    638c:	461a      	mov	r2, r3
    638e:	4b52      	ldr	r3, [pc, #328]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6394:	6959      	ldr	r1, [r3, #20]
    6396:	9b01      	ldr	r3, [sp, #4]
    6398:	685a      	ldr	r2, [r3, #4]
    639a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    639e:	005b      	lsls	r3, r3, #1
    63a0:	4413      	add	r3, r2
    63a2:	881b      	ldrh	r3, [r3, #0]
    63a4:	f003 031f 	and.w	r3, r3, #31
    63a8:	2201      	movs	r2, #1
    63aa:	fa02 f303 	lsl.w	r3, r2, r3
    63ae:	43da      	mvns	r2, r3
    63b0:	9b01      	ldr	r3, [sp, #4]
    63b2:	6858      	ldr	r0, [r3, #4]
    63b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b8:	005b      	lsls	r3, r3, #1
    63ba:	4403      	add	r3, r0
    63bc:	881b      	ldrh	r3, [r3, #0]
    63be:	095b      	lsrs	r3, r3, #5
    63c0:	b29b      	uxth	r3, r3
    63c2:	4618      	mov	r0, r3
    63c4:	4b44      	ldr	r3, [pc, #272]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    63c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    63ca:	400a      	ands	r2, r1
    63cc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    63ce:	f009 f991 	bl	f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    63d2:	f009 f9b5 	bl	f740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63d6:	9b01      	ldr	r3, [sp, #4]
    63d8:	685a      	ldr	r2, [r3, #4]
    63da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63de:	005b      	lsls	r3, r3, #1
    63e0:	4413      	add	r3, r2
    63e2:	881b      	ldrh	r3, [r3, #0]
    63e4:	095b      	lsrs	r3, r3, #5
    63e6:	b29b      	uxth	r3, r3
    63e8:	461a      	mov	r2, r3
    63ea:	4b3b      	ldr	r3, [pc, #236]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    63ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63f0:	6999      	ldr	r1, [r3, #24]
    63f2:	9b01      	ldr	r3, [sp, #4]
    63f4:	685a      	ldr	r2, [r3, #4]
    63f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63fa:	005b      	lsls	r3, r3, #1
    63fc:	4413      	add	r3, r2
    63fe:	881b      	ldrh	r3, [r3, #0]
    6400:	f003 031f 	and.w	r3, r3, #31
    6404:	2201      	movs	r2, #1
    6406:	fa02 f303 	lsl.w	r3, r2, r3
    640a:	43da      	mvns	r2, r3
    640c:	9b01      	ldr	r3, [sp, #4]
    640e:	6858      	ldr	r0, [r3, #4]
    6410:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6414:	005b      	lsls	r3, r3, #1
    6416:	4403      	add	r3, r0
    6418:	881b      	ldrh	r3, [r3, #0]
    641a:	095b      	lsrs	r3, r3, #5
    641c:	b29b      	uxth	r3, r3
    641e:	4618      	mov	r0, r3
    6420:	4b2d      	ldr	r3, [pc, #180]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6422:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6426:	400a      	ands	r2, r1
    6428:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    642a:	9b02      	ldr	r3, [sp, #8]
    642c:	2b03      	cmp	r3, #3
    642e:	d127      	bne.n	6480 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6430:	9b01      	ldr	r3, [sp, #4]
    6432:	685a      	ldr	r2, [r3, #4]
    6434:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6438:	005b      	lsls	r3, r3, #1
    643a:	4413      	add	r3, r2
    643c:	881b      	ldrh	r3, [r3, #0]
    643e:	095b      	lsrs	r3, r3, #5
    6440:	b29b      	uxth	r3, r3
    6442:	461a      	mov	r2, r3
    6444:	4b24      	ldr	r3, [pc, #144]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    644a:	6999      	ldr	r1, [r3, #24]
    644c:	9b01      	ldr	r3, [sp, #4]
    644e:	685a      	ldr	r2, [r3, #4]
    6450:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6454:	005b      	lsls	r3, r3, #1
    6456:	4413      	add	r3, r2
    6458:	881b      	ldrh	r3, [r3, #0]
    645a:	f003 031f 	and.w	r3, r3, #31
    645e:	2201      	movs	r2, #1
    6460:	409a      	lsls	r2, r3
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	6858      	ldr	r0, [r3, #4]
    6466:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    646a:	005b      	lsls	r3, r3, #1
    646c:	4403      	add	r3, r0
    646e:	881b      	ldrh	r3, [r3, #0]
    6470:	095b      	lsrs	r3, r3, #5
    6472:	b29b      	uxth	r3, r3
    6474:	4618      	mov	r0, r3
    6476:	4b18      	ldr	r3, [pc, #96]	; (64d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6478:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    647c:	430a      	orrs	r2, r1
    647e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6480:	f009 f98a 	bl	f798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6484:	9b01      	ldr	r3, [sp, #4]
    6486:	685a      	ldr	r2, [r3, #4]
    6488:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    648c:	005b      	lsls	r3, r3, #1
    648e:	4413      	add	r3, r2
    6490:	881b      	ldrh	r3, [r3, #0]
    6492:	095b      	lsrs	r3, r3, #5
    6494:	b29b      	uxth	r3, r3
    6496:	461a      	mov	r2, r3
    6498:	4b10      	ldr	r3, [pc, #64]	; (64dc <Port_Ipw_Init_UnusedPins+0x270>)
    649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    649e:	9a01      	ldr	r2, [sp, #4]
    64a0:	6851      	ldr	r1, [r2, #4]
    64a2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    64a6:	0052      	lsls	r2, r2, #1
    64a8:	440a      	add	r2, r1
    64aa:	8812      	ldrh	r2, [r2, #0]
    64ac:	f002 021f 	and.w	r2, r2, #31
    64b0:	9903      	ldr	r1, [sp, #12]
    64b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    64b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ba:	3301      	adds	r3, #1
    64bc:	f8ad 3016 	strh.w	r3, [sp, #22]
    64c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    64c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    64c8:	429a      	cmp	r2, r3
    64ca:	f4ff aee7 	bcc.w	629c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    64ce:	bf00      	nop
    64d0:	bf00      	nop
    64d2:	b007      	add	sp, #28
    64d4:	f85d fb04 	ldr.w	pc, [sp], #4
    64d8:	00010bc8 	.word	0x00010bc8
    64dc:	00010bb4 	.word	0x00010bb4

000064e0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    64e0:	b500      	push	{lr}
    64e2:	b085      	sub	sp, #20
    64e4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    64e6:	9b01      	ldr	r3, [sp, #4]
    64e8:	7c1b      	ldrb	r3, [r3, #16]
    64ea:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    64ee:	2300      	movs	r3, #0
    64f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    64f4:	e035      	b.n	6562 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    64f6:	9b01      	ldr	r3, [sp, #4]
    64f8:	695a      	ldr	r2, [r3, #20]
    64fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    64fe:	00db      	lsls	r3, r3, #3
    6500:	4413      	add	r3, r2
    6502:	781b      	ldrb	r3, [r3, #0]
    6504:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6508:	f89d 300c 	ldrb.w	r3, [sp, #12]
    650c:	4a1f      	ldr	r2, [pc, #124]	; (658c <Port_Ipw_Init+0xac>)
    650e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6512:	9b01      	ldr	r3, [sp, #4]
    6514:	695a      	ldr	r2, [r3, #20]
    6516:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    651a:	00db      	lsls	r3, r3, #3
    651c:	4413      	add	r3, r2
    651e:	4619      	mov	r1, r3
    6520:	f7ff fe39 	bl	6196 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6524:	f009 faa6 	bl	fa74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6528:	f89d 300c 	ldrb.w	r3, [sp, #12]
    652c:	4a17      	ldr	r2, [pc, #92]	; (658c <Port_Ipw_Init+0xac>)
    652e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6532:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	695a      	ldr	r2, [r3, #20]
    653a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    653e:	00db      	lsls	r3, r3, #3
    6540:	4413      	add	r3, r2
    6542:	685a      	ldr	r2, [r3, #4]
    6544:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6548:	4810      	ldr	r0, [pc, #64]	; (658c <Port_Ipw_Init+0xac>)
    654a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    654e:	430a      	orrs	r2, r1
    6550:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6554:	f009 faba 	bl	facc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6558:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    655c:	3301      	adds	r3, #1
    655e:	f8ad 300e 	strh.w	r3, [sp, #14]
    6562:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6566:	b29b      	uxth	r3, r3
    6568:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    656c:	429a      	cmp	r2, r3
    656e:	d3c2      	bcc.n	64f6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6570:	9b01      	ldr	r3, [sp, #4]
    6572:	6a1b      	ldr	r3, [r3, #32]
    6574:	4619      	mov	r1, r3
    6576:	200b      	movs	r0, #11
    6578:	f7ff fd98 	bl	60ac <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    657c:	9801      	ldr	r0, [sp, #4]
    657e:	f7ff fe75 	bl	626c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6582:	bf00      	nop
    6584:	b005      	add	sp, #20
    6586:	f85d fb04 	ldr.w	pc, [sp], #4
    658a:	bf00      	nop
    658c:	00010bb4 	.word	0x00010bb4

00006590 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6590:	b500      	push	{lr}
    6592:	b085      	sub	sp, #20
    6594:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6596:	9b01      	ldr	r3, [sp, #4]
    6598:	881b      	ldrh	r3, [r3, #0]
    659a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    659e:	2300      	movs	r3, #0
    65a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    65a4:	e0d2      	b.n	674c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    65a6:	9b01      	ldr	r3, [sp, #4]
    65a8:	68d9      	ldr	r1, [r3, #12]
    65aa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    65ae:	4613      	mov	r3, r2
    65b0:	009b      	lsls	r3, r3, #2
    65b2:	4413      	add	r3, r2
    65b4:	009b      	lsls	r3, r3, #2
    65b6:	440b      	add	r3, r1
    65b8:	7c5b      	ldrb	r3, [r3, #17]
    65ba:	f083 0301 	eor.w	r3, r3, #1
    65be:	b2db      	uxtb	r3, r3
    65c0:	2b00      	cmp	r3, #0
    65c2:	f000 80be 	beq.w	6742 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	68d9      	ldr	r1, [r3, #12]
    65ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    65ce:	4613      	mov	r3, r2
    65d0:	009b      	lsls	r3, r3, #2
    65d2:	4413      	add	r3, r2
    65d4:	009b      	lsls	r3, r3, #2
    65d6:	440b      	add	r3, r1
    65d8:	7c1b      	ldrb	r3, [r3, #16]
    65da:	2b00      	cmp	r3, #0
    65dc:	f000 80b1 	beq.w	6742 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    65e0:	9b01      	ldr	r3, [sp, #4]
    65e2:	68d9      	ldr	r1, [r3, #12]
    65e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    65e8:	4613      	mov	r3, r2
    65ea:	009b      	lsls	r3, r3, #2
    65ec:	4413      	add	r3, r2
    65ee:	009b      	lsls	r3, r3, #2
    65f0:	440b      	add	r3, r1
    65f2:	881b      	ldrh	r3, [r3, #0]
    65f4:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	68d9      	ldr	r1, [r3, #12]
    65fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6600:	4613      	mov	r3, r2
    6602:	009b      	lsls	r3, r3, #2
    6604:	4413      	add	r3, r2
    6606:	009b      	lsls	r3, r3, #2
    6608:	440b      	add	r3, r1
    660a:	68db      	ldr	r3, [r3, #12]
    660c:	2b02      	cmp	r3, #2
    660e:	d11d      	bne.n	664c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6610:	f009 fb78 	bl	fd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6614:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6618:	095b      	lsrs	r3, r3, #5
    661a:	b29b      	uxth	r3, r3
    661c:	461a      	mov	r2, r3
    661e:	4b51      	ldr	r3, [pc, #324]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6624:	6959      	ldr	r1, [r3, #20]
    6626:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    662a:	f003 031f 	and.w	r3, r3, #31
    662e:	2201      	movs	r2, #1
    6630:	409a      	lsls	r2, r3
    6632:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6636:	095b      	lsrs	r3, r3, #5
    6638:	b29b      	uxth	r3, r3
    663a:	4618      	mov	r0, r3
    663c:	4b49      	ldr	r3, [pc, #292]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    663e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6642:	430a      	orrs	r2, r1
    6644:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6646:	f009 fb89 	bl	fd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    664a:	e07a      	b.n	6742 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    664c:	9b01      	ldr	r3, [sp, #4]
    664e:	68d9      	ldr	r1, [r3, #12]
    6650:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6654:	4613      	mov	r3, r2
    6656:	009b      	lsls	r3, r3, #2
    6658:	4413      	add	r3, r2
    665a:	009b      	lsls	r3, r3, #2
    665c:	440b      	add	r3, r1
    665e:	68db      	ldr	r3, [r3, #12]
    6660:	2b01      	cmp	r3, #1
    6662:	d00b      	beq.n	667c <Port_Ipw_RefreshPortDirection+0xec>
    6664:	9b01      	ldr	r3, [sp, #4]
    6666:	68d9      	ldr	r1, [r3, #12]
    6668:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    666c:	4613      	mov	r3, r2
    666e:	009b      	lsls	r3, r3, #2
    6670:	4413      	add	r3, r2
    6672:	009b      	lsls	r3, r3, #2
    6674:	440b      	add	r3, r1
    6676:	68db      	ldr	r3, [r3, #12]
    6678:	2b03      	cmp	r3, #3
    667a:	d162      	bne.n	6742 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    667c:	f009 fb42 	bl	fd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6680:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6684:	095b      	lsrs	r3, r3, #5
    6686:	b29b      	uxth	r3, r3
    6688:	461a      	mov	r2, r3
    668a:	4b36      	ldr	r3, [pc, #216]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6690:	6959      	ldr	r1, [r3, #20]
    6692:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6696:	f003 031f 	and.w	r3, r3, #31
    669a:	2201      	movs	r2, #1
    669c:	fa02 f303 	lsl.w	r3, r2, r3
    66a0:	43da      	mvns	r2, r3
    66a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66a6:	095b      	lsrs	r3, r3, #5
    66a8:	b29b      	uxth	r3, r3
    66aa:	4618      	mov	r0, r3
    66ac:	4b2d      	ldr	r3, [pc, #180]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    66b2:	400a      	ands	r2, r1
    66b4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    66b6:	f009 fb51 	bl	fd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    66ba:	f009 fb75 	bl	fda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66c2:	095b      	lsrs	r3, r3, #5
    66c4:	b29b      	uxth	r3, r3
    66c6:	461a      	mov	r2, r3
    66c8:	4b26      	ldr	r3, [pc, #152]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66ce:	6999      	ldr	r1, [r3, #24]
    66d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66d4:	f003 031f 	and.w	r3, r3, #31
    66d8:	2201      	movs	r2, #1
    66da:	fa02 f303 	lsl.w	r3, r2, r3
    66de:	43da      	mvns	r2, r3
    66e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66e4:	095b      	lsrs	r3, r3, #5
    66e6:	b29b      	uxth	r3, r3
    66e8:	4618      	mov	r0, r3
    66ea:	4b1e      	ldr	r3, [pc, #120]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    66f0:	400a      	ands	r2, r1
    66f2:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    66f4:	9b01      	ldr	r3, [sp, #4]
    66f6:	68d9      	ldr	r1, [r3, #12]
    66f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66fc:	4613      	mov	r3, r2
    66fe:	009b      	lsls	r3, r3, #2
    6700:	4413      	add	r3, r2
    6702:	009b      	lsls	r3, r3, #2
    6704:	440b      	add	r3, r1
    6706:	68db      	ldr	r3, [r3, #12]
    6708:	2b03      	cmp	r3, #3
    670a:	d118      	bne.n	673e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    670c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6710:	095b      	lsrs	r3, r3, #5
    6712:	b29b      	uxth	r3, r3
    6714:	461a      	mov	r2, r3
    6716:	4b13      	ldr	r3, [pc, #76]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    671c:	6999      	ldr	r1, [r3, #24]
    671e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6722:	f003 031f 	and.w	r3, r3, #31
    6726:	2201      	movs	r2, #1
    6728:	409a      	lsls	r2, r3
    672a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    672e:	095b      	lsrs	r3, r3, #5
    6730:	b29b      	uxth	r3, r3
    6732:	4618      	mov	r0, r3
    6734:	4b0b      	ldr	r3, [pc, #44]	; (6764 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6736:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    673a:	430a      	orrs	r2, r1
    673c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    673e:	f009 fb5f 	bl	fe00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6742:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6746:	3301      	adds	r3, #1
    6748:	f8ad 300e 	strh.w	r3, [sp, #14]
    674c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6750:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6754:	429a      	cmp	r2, r3
    6756:	f4ff af26 	bcc.w	65a6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    675a:	bf00      	nop
    675c:	bf00      	nop
    675e:	b005      	add	sp, #20
    6760:	f85d fb04 	ldr.w	pc, [sp], #4
    6764:	00010bc8 	.word	0x00010bc8

00006768 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6768:	b500      	push	{lr}
    676a:	b085      	sub	sp, #20
    676c:	4603      	mov	r3, r0
    676e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6772:	2300      	movs	r3, #0
    6774:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6778:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    677c:	4618      	mov	r0, r3
    677e:	f000 f871 	bl	6864 <Dio_Ipw_ReadChannel>
    6782:	4603      	mov	r3, r0
    6784:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6788:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    678c:	4618      	mov	r0, r3
    678e:	b005      	add	sp, #20
    6790:	f85d fb04 	ldr.w	pc, [sp], #4

00006794 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6794:	b500      	push	{lr}
    6796:	b083      	sub	sp, #12
    6798:	4603      	mov	r3, r0
    679a:	460a      	mov	r2, r1
    679c:	f8ad 3006 	strh.w	r3, [sp, #6]
    67a0:	4613      	mov	r3, r2
    67a2:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    67a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    67aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    67ae:	4611      	mov	r1, r2
    67b0:	4618      	mov	r0, r3
    67b2:	f000 f87d 	bl	68b0 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    67b6:	bf00      	nop
    67b8:	b003      	add	sp, #12
    67ba:	f85d fb04 	ldr.w	pc, [sp], #4

000067be <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    67be:	b500      	push	{lr}
    67c0:	b085      	sub	sp, #20
    67c2:	4603      	mov	r3, r0
    67c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    67c8:	2300      	movs	r3, #0
    67ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    67ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    67d2:	4618      	mov	r0, r3
    67d4:	f000 f892 	bl	68fc <Dio_Ipw_FlipChannel>
    67d8:	4603      	mov	r3, r0
    67da:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    67de:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    67e2:	4618      	mov	r0, r3
    67e4:	b005      	add	sp, #20
    67e6:	f85d fb04 	ldr.w	pc, [sp], #4

000067ea <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    67ea:	b500      	push	{lr}
    67ec:	b085      	sub	sp, #20
    67ee:	4603      	mov	r3, r0
    67f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    67f4:	2300      	movs	r3, #0
    67f6:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    67f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67fc:	4618      	mov	r0, r3
    67fe:	f000 f8b3 	bl	6968 <Dio_Ipw_ReadPort>
    6802:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6804:	9b03      	ldr	r3, [sp, #12]
}
    6806:	4618      	mov	r0, r3
    6808:	b005      	add	sp, #20
    680a:	f85d fb04 	ldr.w	pc, [sp], #4

0000680e <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    680e:	b500      	push	{lr}
    6810:	b083      	sub	sp, #12
    6812:	4603      	mov	r3, r0
    6814:	9100      	str	r1, [sp, #0]
    6816:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    681a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    681e:	9900      	ldr	r1, [sp, #0]
    6820:	4618      	mov	r0, r3
    6822:	f000 f8b9 	bl	6998 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6826:	bf00      	nop
    6828:	b003      	add	sp, #12
    682a:	f85d fb04 	ldr.w	pc, [sp], #4

0000682e <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    682e:	b500      	push	{lr}
    6830:	b085      	sub	sp, #20
    6832:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6834:	2300      	movs	r3, #0
    6836:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6838:	9801      	ldr	r0, [sp, #4]
    683a:	f000 f8c5 	bl	69c8 <Dio_Ipw_ReadChannelGroup>
    683e:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6840:	9b03      	ldr	r3, [sp, #12]
}
    6842:	4618      	mov	r0, r3
    6844:	b005      	add	sp, #20
    6846:	f85d fb04 	ldr.w	pc, [sp], #4

0000684a <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    684a:	b500      	push	{lr}
    684c:	b083      	sub	sp, #12
    684e:	9001      	str	r0, [sp, #4]
    6850:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6852:	9900      	ldr	r1, [sp, #0]
    6854:	9801      	ldr	r0, [sp, #4]
    6856:	f000 f8d7 	bl	6a08 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    685a:	bf00      	nop
    685c:	b003      	add	sp, #12
    685e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006864 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6864:	b500      	push	{lr}
    6866:	b087      	sub	sp, #28
    6868:	4603      	mov	r3, r0
    686a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    686e:	2300      	movs	r3, #0
    6870:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6874:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6878:	095b      	lsrs	r3, r3, #5
    687a:	b29b      	uxth	r3, r3
    687c:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    687e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6882:	f003 031f 	and.w	r3, r3, #31
    6886:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6888:	4a08      	ldr	r2, [pc, #32]	; (68ac <Dio_Ipw_ReadChannel+0x48>)
    688a:	9b04      	ldr	r3, [sp, #16]
    688c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6890:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6892:	9903      	ldr	r1, [sp, #12]
    6894:	9802      	ldr	r0, [sp, #8]
    6896:	f000 f940 	bl	6b1a <Gpio_Dio_Ip_ReadPin>
    689a:	4603      	mov	r3, r0
    689c:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    68a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    68a4:	4618      	mov	r0, r3
    68a6:	b007      	add	sp, #28
    68a8:	f85d fb04 	ldr.w	pc, [sp], #4
    68ac:	1fff8b24 	.word	0x1fff8b24

000068b0 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    68b0:	b500      	push	{lr}
    68b2:	b087      	sub	sp, #28
    68b4:	4603      	mov	r3, r0
    68b6:	460a      	mov	r2, r1
    68b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    68bc:	4613      	mov	r3, r2
    68be:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    68c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68c6:	095b      	lsrs	r3, r3, #5
    68c8:	b29b      	uxth	r3, r3
    68ca:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    68cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68d0:	f003 031f 	and.w	r3, r3, #31
    68d4:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    68d6:	4a08      	ldr	r2, [pc, #32]	; (68f8 <Dio_Ipw_WriteChannel+0x48>)
    68d8:	9b05      	ldr	r3, [sp, #20]
    68da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68de:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    68e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68e4:	461a      	mov	r2, r3
    68e6:	9904      	ldr	r1, [sp, #16]
    68e8:	9803      	ldr	r0, [sp, #12]
    68ea:	f000 f8b7 	bl	6a5c <Gpio_Dio_Ip_WritePin>
}
    68ee:	bf00      	nop
    68f0:	b007      	add	sp, #28
    68f2:	f85d fb04 	ldr.w	pc, [sp], #4
    68f6:	bf00      	nop
    68f8:	1fff8b24 	.word	0x1fff8b24

000068fc <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    68fc:	b500      	push	{lr}
    68fe:	b089      	sub	sp, #36	; 0x24
    6900:	4603      	mov	r3, r0
    6902:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6906:	2300      	movs	r3, #0
    6908:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    690c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6910:	095b      	lsrs	r3, r3, #5
    6912:	b29b      	uxth	r3, r3
    6914:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6916:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    691a:	f003 031f 	and.w	r3, r3, #31
    691e:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6920:	4a10      	ldr	r2, [pc, #64]	; (6964 <Dio_Ipw_FlipChannel+0x68>)
    6922:	9b06      	ldr	r3, [sp, #24]
    6924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6928:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    692a:	2201      	movs	r2, #1
    692c:	9b05      	ldr	r3, [sp, #20]
    692e:	fa02 f303 	lsl.w	r3, r2, r3
    6932:	4619      	mov	r1, r3
    6934:	9804      	ldr	r0, [sp, #16]
    6936:	f000 f8dc 	bl	6af2 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    693a:	9804      	ldr	r0, [sp, #16]
    693c:	f000 f8bc 	bl	6ab8 <Gpio_Dio_Ip_GetPinsOutput>
    6940:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6942:	2201      	movs	r2, #1
    6944:	9b05      	ldr	r3, [sp, #20]
    6946:	409a      	lsls	r2, r3
    6948:	9b03      	ldr	r3, [sp, #12]
    694a:	401a      	ands	r2, r3
    694c:	9b05      	ldr	r3, [sp, #20]
    694e:	fa22 f303 	lsr.w	r3, r2, r3
    6952:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6956:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    695a:	4618      	mov	r0, r3
    695c:	b009      	add	sp, #36	; 0x24
    695e:	f85d fb04 	ldr.w	pc, [sp], #4
    6962:	bf00      	nop
    6964:	1fff8b24 	.word	0x1fff8b24

00006968 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6968:	b500      	push	{lr}
    696a:	b085      	sub	sp, #20
    696c:	4603      	mov	r3, r0
    696e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6972:	2300      	movs	r3, #0
    6974:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6976:	f89d 3007 	ldrb.w	r3, [sp, #7]
    697a:	4a06      	ldr	r2, [pc, #24]	; (6994 <Dio_Ipw_ReadPort+0x2c>)
    697c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6980:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6982:	9802      	ldr	r0, [sp, #8]
    6984:	f000 f8be 	bl	6b04 <Gpio_Dio_Ip_ReadPins>
    6988:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    698a:	9b03      	ldr	r3, [sp, #12]
}
    698c:	4618      	mov	r0, r3
    698e:	b005      	add	sp, #20
    6990:	f85d fb04 	ldr.w	pc, [sp], #4
    6994:	1fff8b24 	.word	0x1fff8b24

00006998 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6998:	b500      	push	{lr}
    699a:	b085      	sub	sp, #20
    699c:	4603      	mov	r3, r0
    699e:	9100      	str	r1, [sp, #0]
    69a0:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    69a4:	9b00      	ldr	r3, [sp, #0]
    69a6:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    69a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69ac:	4a05      	ldr	r2, [pc, #20]	; (69c4 <Dio_Ipw_WritePort+0x2c>)
    69ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b2:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    69b4:	9903      	ldr	r1, [sp, #12]
    69b6:	9802      	ldr	r0, [sp, #8]
    69b8:	f000 f875 	bl	6aa6 <Gpio_Dio_Ip_WritePins>
}
    69bc:	bf00      	nop
    69be:	b005      	add	sp, #20
    69c0:	f85d fb04 	ldr.w	pc, [sp], #4
    69c4:	1fff8b24 	.word	0x1fff8b24

000069c8 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    69c8:	b500      	push	{lr}
    69ca:	b087      	sub	sp, #28
    69cc:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    69ce:	2300      	movs	r3, #0
    69d0:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    69d2:	9b01      	ldr	r3, [sp, #4]
    69d4:	781b      	ldrb	r3, [r3, #0]
    69d6:	461a      	mov	r2, r3
    69d8:	4b0a      	ldr	r3, [pc, #40]	; (6a04 <Dio_Ipw_ReadChannelGroup+0x3c>)
    69da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    69de:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    69e0:	9804      	ldr	r0, [sp, #16]
    69e2:	f000 f88f 	bl	6b04 <Gpio_Dio_Ip_ReadPins>
    69e6:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    69e8:	9b01      	ldr	r3, [sp, #4]
    69ea:	685a      	ldr	r2, [r3, #4]
    69ec:	9b03      	ldr	r3, [sp, #12]
    69ee:	4013      	ands	r3, r2
    69f0:	9a01      	ldr	r2, [sp, #4]
    69f2:	7852      	ldrb	r2, [r2, #1]
    69f4:	40d3      	lsrs	r3, r2
    69f6:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    69f8:	9b05      	ldr	r3, [sp, #20]
}
    69fa:	4618      	mov	r0, r3
    69fc:	b007      	add	sp, #28
    69fe:	f85d fb04 	ldr.w	pc, [sp], #4
    6a02:	bf00      	nop
    6a04:	1fff8b24 	.word	0x1fff8b24

00006a08 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6a08:	b500      	push	{lr}
    6a0a:	b087      	sub	sp, #28
    6a0c:	9001      	str	r0, [sp, #4]
    6a0e:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6a10:	9b01      	ldr	r3, [sp, #4]
    6a12:	781b      	ldrb	r3, [r3, #0]
    6a14:	461a      	mov	r2, r3
    6a16:	4b10      	ldr	r3, [pc, #64]	; (6a58 <Dio_Ipw_WriteChannelGroup+0x50>)
    6a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a1c:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6a1e:	9b01      	ldr	r3, [sp, #4]
    6a20:	785b      	ldrb	r3, [r3, #1]
    6a22:	461a      	mov	r2, r3
    6a24:	9b00      	ldr	r3, [sp, #0]
    6a26:	fa03 f202 	lsl.w	r2, r3, r2
    6a2a:	9b01      	ldr	r3, [sp, #4]
    6a2c:	685b      	ldr	r3, [r3, #4]
    6a2e:	4013      	ands	r3, r2
    6a30:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6a32:	9904      	ldr	r1, [sp, #16]
    6a34:	9805      	ldr	r0, [sp, #20]
    6a36:	f000 f84a 	bl	6ace <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6a3a:	9b04      	ldr	r3, [sp, #16]
    6a3c:	43da      	mvns	r2, r3
    6a3e:	9b01      	ldr	r3, [sp, #4]
    6a40:	685b      	ldr	r3, [r3, #4]
    6a42:	4013      	ands	r3, r2
    6a44:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6a46:	9903      	ldr	r1, [sp, #12]
    6a48:	9805      	ldr	r0, [sp, #20]
    6a4a:	f000 f849 	bl	6ae0 <Gpio_Dio_Ip_ClearPins>

}
    6a4e:	bf00      	nop
    6a50:	b007      	add	sp, #28
    6a52:	f85d fb04 	ldr.w	pc, [sp], #4
    6a56:	bf00      	nop
    6a58:	1fff8b24 	.word	0x1fff8b24

00006a5c <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6a5c:	b500      	push	{lr}
    6a5e:	b087      	sub	sp, #28
    6a60:	9003      	str	r0, [sp, #12]
    6a62:	9102      	str	r1, [sp, #8]
    6a64:	4613      	mov	r3, r2
    6a66:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6a6a:	f008 f99b 	bl	eda4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6a6e:	9b03      	ldr	r3, [sp, #12]
    6a70:	681b      	ldr	r3, [r3, #0]
    6a72:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6a74:	2201      	movs	r2, #1
    6a76:	9b02      	ldr	r3, [sp, #8]
    6a78:	fa02 f303 	lsl.w	r3, r2, r3
    6a7c:	43db      	mvns	r3, r3
    6a7e:	9a05      	ldr	r2, [sp, #20]
    6a80:	4013      	ands	r3, r2
    6a82:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6a84:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6a88:	9b02      	ldr	r3, [sp, #8]
    6a8a:	fa02 f303 	lsl.w	r3, r2, r3
    6a8e:	9a05      	ldr	r2, [sp, #20]
    6a90:	4313      	orrs	r3, r2
    6a92:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6a94:	9b03      	ldr	r3, [sp, #12]
    6a96:	9a05      	ldr	r2, [sp, #20]
    6a98:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6a9a:	f008 f9af 	bl	edfc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6a9e:	bf00      	nop
    6aa0:	b007      	add	sp, #28
    6aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00006aa6 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6aa6:	b082      	sub	sp, #8
    6aa8:	9001      	str	r0, [sp, #4]
    6aaa:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6aac:	9b01      	ldr	r3, [sp, #4]
    6aae:	9a00      	ldr	r2, [sp, #0]
    6ab0:	601a      	str	r2, [r3, #0]
}
    6ab2:	bf00      	nop
    6ab4:	b002      	add	sp, #8
    6ab6:	4770      	bx	lr

00006ab8 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6ab8:	b084      	sub	sp, #16
    6aba:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6abc:	2300      	movs	r3, #0
    6abe:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6ac0:	9b01      	ldr	r3, [sp, #4]
    6ac2:	681b      	ldr	r3, [r3, #0]
    6ac4:	9303      	str	r3, [sp, #12]
    return returnValue;
    6ac6:	9b03      	ldr	r3, [sp, #12]
}
    6ac8:	4618      	mov	r0, r3
    6aca:	b004      	add	sp, #16
    6acc:	4770      	bx	lr

00006ace <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6ace:	b082      	sub	sp, #8
    6ad0:	9001      	str	r0, [sp, #4]
    6ad2:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6ad4:	9b01      	ldr	r3, [sp, #4]
    6ad6:	9a00      	ldr	r2, [sp, #0]
    6ad8:	605a      	str	r2, [r3, #4]
}
    6ada:	bf00      	nop
    6adc:	b002      	add	sp, #8
    6ade:	4770      	bx	lr

00006ae0 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6ae0:	b082      	sub	sp, #8
    6ae2:	9001      	str	r0, [sp, #4]
    6ae4:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6ae6:	9b01      	ldr	r3, [sp, #4]
    6ae8:	9a00      	ldr	r2, [sp, #0]
    6aea:	609a      	str	r2, [r3, #8]
}
    6aec:	bf00      	nop
    6aee:	b002      	add	sp, #8
    6af0:	4770      	bx	lr

00006af2 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6af2:	b082      	sub	sp, #8
    6af4:	9001      	str	r0, [sp, #4]
    6af6:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6af8:	9b01      	ldr	r3, [sp, #4]
    6afa:	9a00      	ldr	r2, [sp, #0]
    6afc:	60da      	str	r2, [r3, #12]
}
    6afe:	bf00      	nop
    6b00:	b002      	add	sp, #8
    6b02:	4770      	bx	lr

00006b04 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6b04:	b084      	sub	sp, #16
    6b06:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6b08:	2300      	movs	r3, #0
    6b0a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6b0c:	9b01      	ldr	r3, [sp, #4]
    6b0e:	691b      	ldr	r3, [r3, #16]
    6b10:	9303      	str	r3, [sp, #12]
    return returnValue;
    6b12:	9b03      	ldr	r3, [sp, #12]
}
    6b14:	4618      	mov	r0, r3
    6b16:	b004      	add	sp, #16
    6b18:	4770      	bx	lr

00006b1a <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6b1a:	b084      	sub	sp, #16
    6b1c:	9001      	str	r0, [sp, #4]
    6b1e:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6b20:	2300      	movs	r3, #0
    6b22:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6b26:	9b01      	ldr	r3, [sp, #4]
    6b28:	691a      	ldr	r2, [r3, #16]
    6b2a:	2101      	movs	r1, #1
    6b2c:	9b00      	ldr	r3, [sp, #0]
    6b2e:	fa01 f303 	lsl.w	r3, r1, r3
    6b32:	401a      	ands	r2, r3
    6b34:	9b00      	ldr	r3, [sp, #0]
    6b36:	fa22 f303 	lsr.w	r3, r2, r3
    6b3a:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6b3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b42:	4618      	mov	r0, r3
    6b44:	b004      	add	sp, #16
    6b46:	4770      	bx	lr

00006b48 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    6b48:	b500      	push	{lr}
    6b4a:	b083      	sub	sp, #12
    6b4c:	4603      	mov	r3, r0
    6b4e:	460a      	mov	r2, r1
    6b50:	f88d 3007 	strb.w	r3, [sp, #7]
    6b54:	4613      	mov	r3, r2
    6b56:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    6b5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6b5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6b62:	2100      	movs	r1, #0
    6b64:	207b      	movs	r0, #123	; 0x7b
    6b66:	f009 fbeb 	bl	10340 <Det_ReportRuntimeError>
}
    6b6a:	bf00      	nop
    6b6c:	b003      	add	sp, #12
    6b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00006b72 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6b72:	b500      	push	{lr}
    6b74:	b085      	sub	sp, #20
    6b76:	4603      	mov	r3, r0
    6b78:	460a      	mov	r2, r1
    6b7a:	f88d 3007 	strb.w	r3, [sp, #7]
    6b7e:	4613      	mov	r3, r2
    6b80:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6b84:	2300      	movs	r3, #0
    6b86:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b8e:	4a0c      	ldr	r2, [pc, #48]	; (6bc0 <Adc_ValidateNotBusyNoQueue+0x4e>)
    6b90:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6b94:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6b98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b9c:	2b00      	cmp	r3, #0
    6b9e:	d008      	beq.n	6bb2 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6ba0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ba4:	210b      	movs	r1, #11
    6ba6:	4618      	mov	r0, r3
    6ba8:	f7ff ffce 	bl	6b48 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6bac:	2301      	movs	r3, #1
    6bae:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6bb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6bb6:	4618      	mov	r0, r3
    6bb8:	b005      	add	sp, #20
    6bba:	f85d fb04 	ldr.w	pc, [sp], #4
    6bbe:	bf00      	nop
    6bc0:	1fff8d38 	.word	0x1fff8d38

00006bc4 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    6bc4:	b500      	push	{lr}
    6bc6:	b085      	sub	sp, #20
    6bc8:	4603      	mov	r3, r0
    6bca:	f8ad 3006 	strh.w	r3, [sp, #6]
    6bce:	460b      	mov	r3, r1
    6bd0:	f88d 3005 	strb.w	r3, [sp, #5]
    6bd4:	4613      	mov	r3, r2
    6bd6:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6bda:	2301      	movs	r3, #1
    6bdc:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    6be0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6be4:	4917      	ldr	r1, [pc, #92]	; (6c44 <Adc_ValidateNotBusyNoPrio+0x80>)
    6be6:	4613      	mov	r3, r2
    6be8:	009b      	lsls	r3, r3, #2
    6bea:	4413      	add	r3, r2
    6bec:	009b      	lsls	r3, r3, #2
    6bee:	440b      	add	r3, r1
    6bf0:	681b      	ldr	r3, [r3, #0]
    6bf2:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    6bf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bf8:	f083 0301 	eor.w	r3, r3, #1
    6bfc:	b2db      	uxtb	r3, r3
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d007      	beq.n	6c12 <Adc_ValidateNotBusyNoPrio+0x4e>
    6c02:	9b02      	ldr	r3, [sp, #8]
    6c04:	2b00      	cmp	r3, #0
    6c06:	d004      	beq.n	6c12 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6c08:	210b      	movs	r1, #11
    6c0a:	2002      	movs	r0, #2
    6c0c:	f7ff ff9c 	bl	6b48 <Adc_ReportDetRuntimeError>
    6c10:	e011      	b.n	6c36 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    6c12:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d00a      	beq.n	6c30 <Adc_ValidateNotBusyNoPrio+0x6c>
    6c1a:	9b02      	ldr	r3, [sp, #8]
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d007      	beq.n	6c30 <Adc_ValidateNotBusyNoPrio+0x6c>
    6c20:	9b02      	ldr	r3, [sp, #8]
    6c22:	2b03      	cmp	r3, #3
    6c24:	d004      	beq.n	6c30 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6c26:	210b      	movs	r1, #11
    6c28:	2002      	movs	r0, #2
    6c2a:	f7ff ff8d 	bl	6b48 <Adc_ReportDetRuntimeError>
    6c2e:	e002      	b.n	6c36 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6c30:	2300      	movs	r3, #0
    6c32:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    6c36:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c3a:	4618      	mov	r0, r3
    6c3c:	b005      	add	sp, #20
    6c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c42:	bf00      	nop
    6c44:	1fff8d10 	.word	0x1fff8d10

00006c48 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    6c48:	b500      	push	{lr}
    6c4a:	b087      	sub	sp, #28
    6c4c:	4603      	mov	r3, r0
    6c4e:	460a      	mov	r2, r1
    6c50:	f88d 3007 	strb.w	r3, [sp, #7]
    6c54:	4613      	mov	r3, r2
    6c56:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6c5a:	2300      	movs	r3, #0
    6c5c:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6c60:	2300      	movs	r3, #0
    6c62:	f8ad 3016 	strh.w	r3, [sp, #22]
    6c66:	e02c      	b.n	6cc2 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    6c68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6c6c:	4a1d      	ldr	r2, [pc, #116]	; (6ce4 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c72:	685a      	ldr	r2, [r3, #4]
    6c74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c78:	2134      	movs	r1, #52	; 0x34
    6c7a:	fb01 f303 	mul.w	r3, r1, r3
    6c7e:	4413      	add	r3, r2
    6c80:	881b      	ldrh	r3, [r3, #0]
    6c82:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6c86:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6c8a:	4917      	ldr	r1, [pc, #92]	; (6ce8 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6c8c:	4613      	mov	r3, r2
    6c8e:	009b      	lsls	r3, r3, #2
    6c90:	4413      	add	r3, r2
    6c92:	009b      	lsls	r3, r3, #2
    6c94:	440b      	add	r3, r1
    6c96:	681b      	ldr	r3, [r3, #0]
    6c98:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6c9a:	9b03      	ldr	r3, [sp, #12]
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d00b      	beq.n	6cb8 <Adc_ValidateCheckGroupNotConversion+0x70>
    6ca0:	9b03      	ldr	r3, [sp, #12]
    6ca2:	2b03      	cmp	r3, #3
    6ca4:	d008      	beq.n	6cb8 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6ca6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6caa:	210b      	movs	r1, #11
    6cac:	4618      	mov	r0, r3
    6cae:	f7ff ff4b 	bl	6b48 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    6cb2:	2301      	movs	r3, #1
    6cb4:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6cb8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cbc:	3301      	adds	r3, #1
    6cbe:	f8ad 3016 	strh.w	r3, [sp, #22]
    6cc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6cc6:	4a07      	ldr	r2, [pc, #28]	; (6ce4 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ccc:	891b      	ldrh	r3, [r3, #8]
    6cce:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6cd2:	429a      	cmp	r2, r3
    6cd4:	d3c8      	bcc.n	6c68 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    6cd6:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    6cda:	4618      	mov	r0, r3
    6cdc:	b007      	add	sp, #28
    6cde:	f85d fb04 	ldr.w	pc, [sp], #4
    6ce2:	bf00      	nop
    6ce4:	1fff8d0c 	.word	0x1fff8d0c
    6ce8:	1fff8d10 	.word	0x1fff8d10

00006cec <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    6cec:	b500      	push	{lr}
    6cee:	b085      	sub	sp, #20
    6cf0:	4603      	mov	r3, r0
    6cf2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6cf6:	2300      	movs	r3, #0
    6cf8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6cfc:	2301      	movs	r3, #1
    6cfe:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6d02:	2300      	movs	r3, #0
    6d04:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d08:	2300      	movs	r3, #0
    6d0a:	f88d 300d 	strb.w	r3, [sp, #13]
    6d0e:	e01d      	b.n	6d4c <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6d10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d14:	4a1b      	ldr	r2, [pc, #108]	; (6d84 <Adc_ValidateDeInitNotBusy+0x98>)
    6d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d1a:	681a      	ldr	r2, [r3, #0]
    6d1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d20:	4413      	add	r3, r2
    6d22:	7f9b      	ldrb	r3, [r3, #30]
    6d24:	2b01      	cmp	r3, #1
    6d26:	d10c      	bne.n	6d42 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6d28:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d2c:	2101      	movs	r1, #1
    6d2e:	4618      	mov	r0, r3
    6d30:	f7ff ff1f 	bl	6b72 <Adc_ValidateNotBusyNoQueue>
    6d34:	4603      	mov	r3, r0
    6d36:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6d3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d3e:	2b01      	cmp	r3, #1
    6d40:	d009      	beq.n	6d56 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d42:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d46:	3301      	adds	r3, #1
    6d48:	f88d 300d 	strb.w	r3, [sp, #13]
    6d4c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d50:	2b01      	cmp	r3, #1
    6d52:	d9dd      	bls.n	6d10 <Adc_ValidateDeInitNotBusy+0x24>
    6d54:	e000      	b.n	6d58 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6d56:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6d58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d10b      	bne.n	6d78 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d64:	4619      	mov	r1, r3
    6d66:	2001      	movs	r0, #1
    6d68:	f7ff ff6e 	bl	6c48 <Adc_ValidateCheckGroupNotConversion>
    6d6c:	4603      	mov	r3, r0
    6d6e:	2b00      	cmp	r3, #0
    6d70:	d102      	bne.n	6d78 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6d72:	2300      	movs	r3, #0
    6d74:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6d78:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6d7c:	4618      	mov	r0, r3
    6d7e:	b005      	add	sp, #20
    6d80:	f85d fb04 	ldr.w	pc, [sp], #4
    6d84:	1fff8d0c 	.word	0x1fff8d0c

00006d88 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6d88:	b500      	push	{lr}
    6d8a:	b085      	sub	sp, #20
    6d8c:	4603      	mov	r3, r0
    6d8e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6d92:	2301      	movs	r3, #1
    6d94:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6d98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6d9c:	490b      	ldr	r1, [pc, #44]	; (6dcc <Adc_ValidateSetupBufferNotBusy+0x44>)
    6d9e:	4613      	mov	r3, r2
    6da0:	009b      	lsls	r3, r3, #2
    6da2:	4413      	add	r3, r2
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	440b      	add	r3, r1
    6da8:	681b      	ldr	r3, [r3, #0]
    6daa:	2b00      	cmp	r3, #0
    6dac:	d004      	beq.n	6db8 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6dae:	210b      	movs	r1, #11
    6db0:	200c      	movs	r0, #12
    6db2:	f7ff fec9 	bl	6b48 <Adc_ReportDetRuntimeError>
    6db6:	e002      	b.n	6dbe <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6db8:	2300      	movs	r3, #0
    6dba:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6dbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6dc2:	4618      	mov	r0, r3
    6dc4:	b005      	add	sp, #20
    6dc6:	f85d fb04 	ldr.w	pc, [sp], #4
    6dca:	bf00      	nop
    6dcc:	1fff8d10 	.word	0x1fff8d10

00006dd0 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6dd0:	b500      	push	{lr}
    6dd2:	b085      	sub	sp, #20
    6dd4:	4603      	mov	r3, r0
    6dd6:	460a      	mov	r2, r1
    6dd8:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ddc:	4613      	mov	r3, r2
    6dde:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6de2:	2300      	movs	r3, #0
    6de4:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6de8:	2300      	movs	r3, #0
    6dea:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6dee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6df2:	4a32      	ldr	r2, [pc, #200]	; (6ebc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df8:	68da      	ldr	r2, [r3, #12]
    6dfa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6dfe:	005b      	lsls	r3, r3, #1
    6e00:	4413      	add	r3, r2
    6e02:	881b      	ldrh	r3, [r3, #0]
    6e04:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6e08:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e0c:	4a2b      	ldr	r2, [pc, #172]	; (6ebc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e12:	685a      	ldr	r2, [r3, #4]
    6e14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e18:	2134      	movs	r1, #52	; 0x34
    6e1a:	fb01 f303 	mul.w	r3, r1, r3
    6e1e:	4413      	add	r3, r2
    6e20:	689b      	ldr	r3, [r3, #8]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d02c      	beq.n	6e80 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6e26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e2a:	4a24      	ldr	r2, [pc, #144]	; (6ebc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e30:	685a      	ldr	r2, [r3, #4]
    6e32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e36:	2134      	movs	r1, #52	; 0x34
    6e38:	fb01 f303 	mul.w	r3, r1, r3
    6e3c:	4413      	add	r3, r2
    6e3e:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6e40:	2b01      	cmp	r3, #1
    6e42:	d120      	bne.n	6e86 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6e44:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e48:	4a1c      	ldr	r2, [pc, #112]	; (6ebc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e4e:	685a      	ldr	r2, [r3, #4]
    6e50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e54:	2134      	movs	r1, #52	; 0x34
    6e56:	fb01 f303 	mul.w	r3, r1, r3
    6e5a:	4413      	add	r3, r2
    6e5c:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6e5e:	2b01      	cmp	r3, #1
    6e60:	d111      	bne.n	6e86 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6e62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e66:	4a15      	ldr	r2, [pc, #84]	; (6ebc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e6c:	685a      	ldr	r2, [r3, #4]
    6e6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e72:	2134      	movs	r1, #52	; 0x34
    6e74:	fb01 f303 	mul.w	r3, r1, r3
    6e78:	4413      	add	r3, r2
    6e7a:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d102      	bne.n	6e86 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6e80:	2301      	movs	r3, #1
    6e82:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6e86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e8a:	2b01      	cmp	r3, #1
    6e8c:	d104      	bne.n	6e98 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6e8e:	210b      	movs	r1, #11
    6e90:	2002      	movs	r0, #2
    6e92:	f7ff fe59 	bl	6b48 <Adc_ReportDetRuntimeError>
    6e96:	e00b      	b.n	6eb0 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6e98:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6e9c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6ea0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ea4:	4618      	mov	r0, r3
    6ea6:	f7ff fe8d 	bl	6bc4 <Adc_ValidateNotBusyNoPrio>
    6eaa:	4603      	mov	r3, r0
    6eac:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6eb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6eb4:	4618      	mov	r0, r3
    6eb6:	b005      	add	sp, #20
    6eb8:	f85d fb04 	ldr.w	pc, [sp], #4
    6ebc:	1fff8d0c 	.word	0x1fff8d0c

00006ec0 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6ec0:	b500      	push	{lr}
    6ec2:	b085      	sub	sp, #20
    6ec4:	4603      	mov	r3, r0
    6ec6:	f88d 3007 	strb.w	r3, [sp, #7]
    6eca:	460b      	mov	r3, r1
    6ecc:	f8ad 3004 	strh.w	r3, [sp, #4]
    6ed0:	4613      	mov	r3, r2
    6ed2:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6ed6:	2300      	movs	r3, #0
    6ed8:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ee0:	2b0b      	cmp	r3, #11
    6ee2:	d03b      	beq.n	6f5c <Adc_ValidateStateNotIdle+0x9c>
    6ee4:	2b0b      	cmp	r3, #11
    6ee6:	dc4e      	bgt.n	6f86 <Adc_ValidateStateNotIdle+0xc6>
    6ee8:	2b03      	cmp	r3, #3
    6eea:	d022      	beq.n	6f32 <Adc_ValidateStateNotIdle+0x72>
    6eec:	2b04      	cmp	r3, #4
    6eee:	d14a      	bne.n	6f86 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6ef0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ef4:	492a      	ldr	r1, [pc, #168]	; (6fa0 <Adc_ValidateStateNotIdle+0xe0>)
    6ef6:	4613      	mov	r3, r2
    6ef8:	009b      	lsls	r3, r3, #2
    6efa:	4413      	add	r3, r2
    6efc:	009b      	lsls	r3, r3, #2
    6efe:	440b      	add	r3, r1
    6f00:	681b      	ldr	r3, [r3, #0]
    6f02:	2b00      	cmp	r3, #0
    6f04:	d141      	bne.n	6f8a <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6f06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f0a:	4925      	ldr	r1, [pc, #148]	; (6fa0 <Adc_ValidateStateNotIdle+0xe0>)
    6f0c:	4613      	mov	r3, r2
    6f0e:	009b      	lsls	r3, r3, #2
    6f10:	4413      	add	r3, r2
    6f12:	009b      	lsls	r3, r3, #2
    6f14:	440b      	add	r3, r1
    6f16:	3304      	adds	r3, #4
    6f18:	681b      	ldr	r3, [r3, #0]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d135      	bne.n	6f8a <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f22:	210c      	movs	r1, #12
    6f24:	4618      	mov	r0, r3
    6f26:	f7ff fe0f 	bl	6b48 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6f2a:	2301      	movs	r3, #1
    6f2c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6f30:	e02b      	b.n	6f8a <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6f32:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f36:	491a      	ldr	r1, [pc, #104]	; (6fa0 <Adc_ValidateStateNotIdle+0xe0>)
    6f38:	4613      	mov	r3, r2
    6f3a:	009b      	lsls	r3, r3, #2
    6f3c:	4413      	add	r3, r2
    6f3e:	009b      	lsls	r3, r3, #2
    6f40:	440b      	add	r3, r1
    6f42:	681b      	ldr	r3, [r3, #0]
    6f44:	2b00      	cmp	r3, #0
    6f46:	d122      	bne.n	6f8e <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f4c:	210c      	movs	r1, #12
    6f4e:	4618      	mov	r0, r3
    6f50:	f7ff fdfa 	bl	6b48 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6f54:	2301      	movs	r3, #1
    6f56:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6f5a:	e018      	b.n	6f8e <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6f5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f60:	490f      	ldr	r1, [pc, #60]	; (6fa0 <Adc_ValidateStateNotIdle+0xe0>)
    6f62:	4613      	mov	r3, r2
    6f64:	009b      	lsls	r3, r3, #2
    6f66:	4413      	add	r3, r2
    6f68:	009b      	lsls	r3, r3, #2
    6f6a:	440b      	add	r3, r1
    6f6c:	681b      	ldr	r3, [r3, #0]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d10f      	bne.n	6f92 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f76:	210c      	movs	r1, #12
    6f78:	4618      	mov	r0, r3
    6f7a:	f7ff fde5 	bl	6b48 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6f7e:	2301      	movs	r3, #1
    6f80:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6f84:	e005      	b.n	6f92 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6f86:	bf00      	nop
    6f88:	e004      	b.n	6f94 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6f8a:	bf00      	nop
    6f8c:	e002      	b.n	6f94 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6f8e:	bf00      	nop
    6f90:	e000      	b.n	6f94 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6f92:	bf00      	nop
        }
    }

    return ValidState;
    6f94:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f98:	4618      	mov	r0, r3
    6f9a:	b005      	add	sp, #20
    6f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6fa0:	1fff8d10 	.word	0x1fff8d10

00006fa4 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6fa4:	b084      	sub	sp, #16
    6fa6:	4603      	mov	r3, r0
    6fa8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6fac:	2300      	movs	r3, #0
    6fae:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6fb2:	2300      	movs	r3, #0
    6fb4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6fb8:	2300      	movs	r3, #0
    6fba:	f8ad 300e 	strh.w	r3, [sp, #14]
    6fbe:	e049      	b.n	7054 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fc4:	4a2a      	ldr	r2, [pc, #168]	; (7070 <Adc_InitGroupsStatus+0xcc>)
    6fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fca:	685a      	ldr	r2, [r3, #4]
    6fcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6fd0:	2134      	movs	r1, #52	; 0x34
    6fd2:	fb01 f303 	mul.w	r3, r1, r3
    6fd6:	4413      	add	r3, r2
    6fd8:	881b      	ldrh	r3, [r3, #0]
    6fda:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6fde:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6fe2:	4924      	ldr	r1, [pc, #144]	; (7074 <Adc_InitGroupsStatus+0xd0>)
    6fe4:	4613      	mov	r3, r2
    6fe6:	009b      	lsls	r3, r3, #2
    6fe8:	4413      	add	r3, r2
    6fea:	009b      	lsls	r3, r3, #2
    6fec:	440b      	add	r3, r1
    6fee:	2200      	movs	r2, #0
    6ff0:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6ff2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6ff6:	491f      	ldr	r1, [pc, #124]	; (7074 <Adc_InitGroupsStatus+0xd0>)
    6ff8:	4613      	mov	r3, r2
    6ffa:	009b      	lsls	r3, r3, #2
    6ffc:	4413      	add	r3, r2
    6ffe:	009b      	lsls	r3, r3, #2
    7000:	440b      	add	r3, r1
    7002:	3304      	adds	r3, #4
    7004:	2200      	movs	r2, #0
    7006:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7008:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    700c:	4919      	ldr	r1, [pc, #100]	; (7074 <Adc_InitGroupsStatus+0xd0>)
    700e:	4613      	mov	r3, r2
    7010:	009b      	lsls	r3, r3, #2
    7012:	4413      	add	r3, r2
    7014:	009b      	lsls	r3, r3, #2
    7016:	440b      	add	r3, r1
    7018:	3308      	adds	r3, #8
    701a:	2200      	movs	r2, #0
    701c:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    701e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7022:	4914      	ldr	r1, [pc, #80]	; (7074 <Adc_InitGroupsStatus+0xd0>)
    7024:	4613      	mov	r3, r2
    7026:	009b      	lsls	r3, r3, #2
    7028:	4413      	add	r3, r2
    702a:	009b      	lsls	r3, r3, #2
    702c:	440b      	add	r3, r1
    702e:	330c      	adds	r3, #12
    7030:	2200      	movs	r2, #0
    7032:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7034:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7038:	490e      	ldr	r1, [pc, #56]	; (7074 <Adc_InitGroupsStatus+0xd0>)
    703a:	4613      	mov	r3, r2
    703c:	009b      	lsls	r3, r3, #2
    703e:	4413      	add	r3, r2
    7040:	009b      	lsls	r3, r3, #2
    7042:	440b      	add	r3, r1
    7044:	3310      	adds	r3, #16
    7046:	2200      	movs	r2, #0
    7048:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    704a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    704e:	3301      	adds	r3, #1
    7050:	f8ad 300e 	strh.w	r3, [sp, #14]
    7054:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7058:	4a05      	ldr	r2, [pc, #20]	; (7070 <Adc_InitGroupsStatus+0xcc>)
    705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705e:	891b      	ldrh	r3, [r3, #8]
    7060:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7064:	429a      	cmp	r2, r3
    7066:	d3ab      	bcc.n	6fc0 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7068:	bf00      	nop
    706a:	bf00      	nop
    706c:	b004      	add	sp, #16
    706e:	4770      	bx	lr
    7070:	1fff8d0c 	.word	0x1fff8d0c
    7074:	1fff8d10 	.word	0x1fff8d10

00007078 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7078:	b084      	sub	sp, #16
    707a:	4603      	mov	r3, r0
    707c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7080:	2300      	movs	r3, #0
    7082:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7086:	2300      	movs	r3, #0
    7088:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    708c:	2300      	movs	r3, #0
    708e:	f88d 300f 	strb.w	r3, [sp, #15]
    7092:	e035      	b.n	7100 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7098:	4a1d      	ldr	r2, [pc, #116]	; (7110 <Adc_InitUnitStatus+0x98>)
    709a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709e:	681a      	ldr	r2, [r3, #0]
    70a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70a4:	4413      	add	r3, r2
    70a6:	7f9b      	ldrb	r3, [r3, #30]
    70a8:	2b01      	cmp	r3, #1
    70aa:	d124      	bne.n	70f6 <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    70ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70b0:	4a18      	ldr	r2, [pc, #96]	; (7114 <Adc_InitUnitStatus+0x9c>)
    70b2:	2100      	movs	r1, #0
    70b4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    70b8:	2300      	movs	r3, #0
    70ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    70be:	e00f      	b.n	70e0 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    70c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    70c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70c8:	4912      	ldr	r1, [pc, #72]	; (7114 <Adc_InitUnitStatus+0x9c>)
    70ca:	0092      	lsls	r2, r2, #2
    70cc:	4413      	add	r3, r2
    70ce:	005b      	lsls	r3, r3, #1
    70d0:	440b      	add	r3, r1
    70d2:	2200      	movs	r2, #0
    70d4:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    70d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70da:	3301      	adds	r3, #1
    70dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    70e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70e4:	2b01      	cmp	r3, #1
    70e6:	d9eb      	bls.n	70c0 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    70e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70ec:	4a09      	ldr	r2, [pc, #36]	; (7114 <Adc_InitUnitStatus+0x9c>)
    70ee:	00db      	lsls	r3, r3, #3
    70f0:	4413      	add	r3, r2
    70f2:	2200      	movs	r2, #0
    70f4:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    70f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70fa:	3301      	adds	r3, #1
    70fc:	f88d 300f 	strb.w	r3, [sp, #15]
    7100:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7104:	2b01      	cmp	r3, #1
    7106:	d9c5      	bls.n	7094 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7108:	bf00      	nop
    710a:	bf00      	nop
    710c:	b004      	add	sp, #16
    710e:	4770      	bx	lr
    7110:	1fff8d0c 	.word	0x1fff8d0c
    7114:	1fff8d38 	.word	0x1fff8d38

00007118 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7118:	b084      	sub	sp, #16
    711a:	9001      	str	r0, [sp, #4]
    711c:	460b      	mov	r3, r1
    711e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7122:	2300      	movs	r3, #0
    7124:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7128:	2301      	movs	r3, #1
    712a:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    712e:	9b01      	ldr	r3, [sp, #4]
    7130:	7c1b      	ldrb	r3, [r3, #16]
    7132:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7136:	429a      	cmp	r2, r3
    7138:	d11c      	bne.n	7174 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    713a:	2300      	movs	r3, #0
    713c:	f88d 300f 	strb.w	r3, [sp, #15]
    7140:	e012      	b.n	7168 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7142:	9b01      	ldr	r3, [sp, #4]
    7144:	695a      	ldr	r2, [r3, #20]
    7146:	f89d 300f 	ldrb.w	r3, [sp, #15]
    714a:	4413      	add	r3, r2
    714c:	781b      	ldrb	r3, [r3, #0]
    714e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7152:	429a      	cmp	r2, r3
    7154:	d103      	bne.n	715e <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7156:	2300      	movs	r3, #0
    7158:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    715c:	e00a      	b.n	7174 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    715e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7162:	3301      	adds	r3, #1
    7164:	f88d 300f 	strb.w	r3, [sp, #15]
    7168:	9b01      	ldr	r3, [sp, #4]
    716a:	7e1b      	ldrb	r3, [r3, #24]
    716c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7170:	429a      	cmp	r2, r3
    7172:	d3e6      	bcc.n	7142 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7174:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7178:	4618      	mov	r0, r3
    717a:	b004      	add	sp, #16
    717c:	4770      	bx	lr

0000717e <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    717e:	b500      	push	{lr}
    7180:	b085      	sub	sp, #20
    7182:	4603      	mov	r3, r0
    7184:	f8ad 3006 	strh.w	r3, [sp, #6]
    7188:	460b      	mov	r3, r1
    718a:	f88d 3005 	strb.w	r3, [sp, #5]
    718e:	4613      	mov	r3, r2
    7190:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7194:	2300      	movs	r3, #0
    7196:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    719a:	2300      	movs	r3, #0
    719c:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    71a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71a4:	493e      	ldr	r1, [pc, #248]	; (72a0 <Adc_UpdateStatusStartConversion+0x122>)
    71a6:	4613      	mov	r3, r2
    71a8:	009b      	lsls	r3, r3, #2
    71aa:	4413      	add	r3, r2
    71ac:	009b      	lsls	r3, r3, #2
    71ae:	440b      	add	r3, r1
    71b0:	2201      	movs	r2, #1
    71b2:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    71b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71b8:	4939      	ldr	r1, [pc, #228]	; (72a0 <Adc_UpdateStatusStartConversion+0x122>)
    71ba:	4613      	mov	r3, r2
    71bc:	009b      	lsls	r3, r3, #2
    71be:	4413      	add	r3, r2
    71c0:	009b      	lsls	r3, r3, #2
    71c2:	440b      	add	r3, r1
    71c4:	3308      	adds	r3, #8
    71c6:	2200      	movs	r2, #0
    71c8:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    71ca:	f003 fed9 	bl	af80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    71ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    71d2:	4a34      	ldr	r2, [pc, #208]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    71d4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    71d8:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    71dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71e0:	2b00      	cmp	r3, #0
    71e2:	d016      	beq.n	7212 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    71e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    71e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71ec:	492d      	ldr	r1, [pc, #180]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    71ee:	0092      	lsls	r2, r2, #2
    71f0:	4413      	add	r3, r2
    71f2:	005b      	lsls	r3, r3, #1
    71f4:	440b      	add	r3, r1
    71f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71fa:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    71fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7200:	4a28      	ldr	r2, [pc, #160]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    7202:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7206:	b292      	uxth	r2, r2
    7208:	3201      	adds	r2, #1
    720a:	b291      	uxth	r1, r2
    720c:	4a25      	ldr	r2, [pc, #148]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    720e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7212:	f003 fee1 	bl	afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7216:	f003 feb3 	bl	af80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    721a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    721e:	4a21      	ldr	r2, [pc, #132]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    7220:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7224:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7228:	f89d 3005 	ldrb.w	r3, [sp, #5]
    722c:	4a1d      	ldr	r2, [pc, #116]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    722e:	00db      	lsls	r3, r3, #3
    7230:	4413      	add	r3, r2
    7232:	885b      	ldrh	r3, [r3, #2]
    7234:	b29b      	uxth	r3, r3
    7236:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    723a:	429a      	cmp	r2, r3
    723c:	d003      	beq.n	7246 <Adc_UpdateStatusStartConversion+0xc8>
    723e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7242:	2b00      	cmp	r3, #0
    7244:	d125      	bne.n	7292 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7246:	f89d 3005 	ldrb.w	r3, [sp, #5]
    724a:	4a16      	ldr	r2, [pc, #88]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    724c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7250:	b29b      	uxth	r3, r3
    7252:	2b00      	cmp	r3, #0
    7254:	d112      	bne.n	727c <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7256:	f89d 3005 	ldrb.w	r3, [sp, #5]
    725a:	4a12      	ldr	r2, [pc, #72]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    725c:	00db      	lsls	r3, r3, #3
    725e:	4413      	add	r3, r2
    7260:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7264:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7266:	f89d 3005 	ldrb.w	r3, [sp, #5]
    726a:	4a0e      	ldr	r2, [pc, #56]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    726c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7270:	b292      	uxth	r2, r2
    7272:	3201      	adds	r2, #1
    7274:	b291      	uxth	r1, r2
    7276:	4a0b      	ldr	r2, [pc, #44]	; (72a4 <Adc_UpdateStatusStartConversion+0x126>)
    7278:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    727c:	f003 feac 	bl	afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7280:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7284:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7288:	4611      	mov	r1, r2
    728a:	4618      	mov	r0, r3
    728c:	f002 fbf2 	bl	9a74 <Adc_Ipw_StartNormalConversion>
    7290:	e002      	b.n	7298 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7292:	f003 fea1 	bl	afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    7296:	bf00      	nop
    7298:	bf00      	nop
    729a:	b005      	add	sp, #20
    729c:	f85d fb04 	ldr.w	pc, [sp], #4
    72a0:	1fff8d10 	.word	0x1fff8d10
    72a4:	1fff8d38 	.word	0x1fff8d38

000072a8 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    72a8:	b500      	push	{lr}
    72aa:	b085      	sub	sp, #20
    72ac:	9001      	str	r0, [sp, #4]
    72ae:	4608      	mov	r0, r1
    72b0:	4611      	mov	r1, r2
    72b2:	461a      	mov	r2, r3
    72b4:	4603      	mov	r3, r0
    72b6:	f8ad 3002 	strh.w	r3, [sp, #2]
    72ba:	460b      	mov	r3, r1
    72bc:	f88d 3001 	strb.w	r3, [sp, #1]
    72c0:	4613      	mov	r3, r2
    72c2:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    72c6:	2300      	movs	r3, #0
    72c8:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    72cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    72d0:	4a26      	ldr	r2, [pc, #152]	; (736c <Adc_StopSwGroupConversion+0xc4>)
    72d2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    72d6:	b29a      	uxth	r2, r3
    72d8:	9b01      	ldr	r3, [sp, #4]
    72da:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    72dc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    72e0:	4a22      	ldr	r2, [pc, #136]	; (736c <Adc_StopSwGroupConversion+0xc4>)
    72e2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    72e6:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    72ea:	2300      	movs	r3, #0
    72ec:	f8ad 300c 	strh.w	r3, [sp, #12]
    72f0:	e02f      	b.n	7352 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    72f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
    72f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    72fa:	491c      	ldr	r1, [pc, #112]	; (736c <Adc_StopSwGroupConversion+0xc4>)
    72fc:	0092      	lsls	r2, r2, #2
    72fe:	4413      	add	r3, r2
    7300:	005b      	lsls	r3, r3, #1
    7302:	440b      	add	r3, r1
    7304:	885b      	ldrh	r3, [r3, #2]
    7306:	b29b      	uxth	r3, r3
    7308:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    730c:	429a      	cmp	r2, r3
    730e:	d11b      	bne.n	7348 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    7310:	9b01      	ldr	r3, [sp, #4]
    7312:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7316:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    7318:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    731c:	2b00      	cmp	r3, #0
    731e:	d10b      	bne.n	7338 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7320:	f89d 2000 	ldrb.w	r2, [sp]
    7324:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7328:	f89d 3001 	ldrb.w	r3, [sp, #1]
    732c:	4618      	mov	r0, r3
    732e:	f002 fc4b 	bl	9bc8 <Adc_Ipw_StopCurrentConversion>
    7332:	4603      	mov	r3, r0
    7334:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    7338:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    733c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7340:	4611      	mov	r1, r2
    7342:	4618      	mov	r0, r3
    7344:	f001 fd88 	bl	8e58 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7348:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    734c:	3301      	adds	r3, #1
    734e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7352:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    735a:	429a      	cmp	r2, r3
    735c:	d3c9      	bcc.n	72f2 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    735e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7362:	4618      	mov	r0, r3
    7364:	b005      	add	sp, #20
    7366:	f85d fb04 	ldr.w	pc, [sp], #4
    736a:	bf00      	nop
    736c:	1fff8d38 	.word	0x1fff8d38

00007370 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7370:	b500      	push	{lr}
    7372:	b089      	sub	sp, #36	; 0x24
    7374:	4603      	mov	r3, r0
    7376:	f8ad 3006 	strh.w	r3, [sp, #6]
    737a:	460b      	mov	r3, r1
    737c:	f88d 3005 	strb.w	r3, [sp, #5]
    7380:	4613      	mov	r3, r2
    7382:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7386:	f89d 3004 	ldrb.w	r3, [sp, #4]
    738a:	4a4f      	ldr	r2, [pc, #316]	; (74c8 <Adc_UpdateStatusStopConversion+0x158>)
    738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7390:	68da      	ldr	r2, [r3, #12]
    7392:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7396:	005b      	lsls	r3, r3, #1
    7398:	4413      	add	r3, r2
    739a:	881b      	ldrh	r3, [r3, #0]
    739c:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    73a0:	2300      	movs	r3, #0
    73a2:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    73a6:	2300      	movs	r3, #0
    73a8:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    73ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73b0:	4a45      	ldr	r2, [pc, #276]	; (74c8 <Adc_UpdateStatusStopConversion+0x158>)
    73b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73b6:	685a      	ldr	r2, [r3, #4]
    73b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    73bc:	2134      	movs	r1, #52	; 0x34
    73be:	fb01 f303 	mul.w	r3, r1, r3
    73c2:	4413      	add	r3, r2
    73c4:	689b      	ldr	r3, [r3, #8]
    73c6:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    73c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73cc:	4a3e      	ldr	r2, [pc, #248]	; (74c8 <Adc_UpdateStatusStopConversion+0x158>)
    73ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73d2:	685a      	ldr	r2, [r3, #4]
    73d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    73d8:	2134      	movs	r1, #52	; 0x34
    73da:	fb01 f303 	mul.w	r3, r1, r3
    73de:	4413      	add	r3, r2
    73e0:	685b      	ldr	r3, [r3, #4]
    73e2:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    73e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73e8:	4a37      	ldr	r2, [pc, #220]	; (74c8 <Adc_UpdateStatusStopConversion+0x158>)
    73ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ee:	685a      	ldr	r2, [r3, #4]
    73f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    73f4:	2134      	movs	r1, #52	; 0x34
    73f6:	fb01 f303 	mul.w	r3, r1, r3
    73fa:	4413      	add	r3, r2
    73fc:	699b      	ldr	r3, [r3, #24]
    73fe:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7400:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7404:	4931      	ldr	r1, [pc, #196]	; (74cc <Adc_UpdateStatusStopConversion+0x15c>)
    7406:	4613      	mov	r3, r2
    7408:	009b      	lsls	r3, r3, #2
    740a:	4413      	add	r3, r2
    740c:	009b      	lsls	r3, r3, #2
    740e:	440b      	add	r3, r1
    7410:	681b      	ldr	r3, [r3, #0]
    7412:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    7414:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7418:	492c      	ldr	r1, [pc, #176]	; (74cc <Adc_UpdateStatusStopConversion+0x15c>)
    741a:	4613      	mov	r3, r2
    741c:	009b      	lsls	r3, r3, #2
    741e:	4413      	add	r3, r2
    7420:	009b      	lsls	r3, r3, #2
    7422:	440b      	add	r3, r1
    7424:	3308      	adds	r3, #8
    7426:	2200      	movs	r2, #0
    7428:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    742a:	9b06      	ldr	r3, [sp, #24]
    742c:	2b00      	cmp	r3, #0
    742e:	d005      	beq.n	743c <Adc_UpdateStatusStopConversion+0xcc>
    7430:	9b05      	ldr	r3, [sp, #20]
    7432:	2b01      	cmp	r3, #1
    7434:	d110      	bne.n	7458 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    7436:	9b04      	ldr	r3, [sp, #16]
    7438:	2b00      	cmp	r3, #0
    743a:	d10d      	bne.n	7458 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    743c:	9b03      	ldr	r3, [sp, #12]
    743e:	2b03      	cmp	r3, #3
    7440:	d10a      	bne.n	7458 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7442:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7446:	4921      	ldr	r1, [pc, #132]	; (74cc <Adc_UpdateStatusStopConversion+0x15c>)
    7448:	4613      	mov	r3, r2
    744a:	009b      	lsls	r3, r3, #2
    744c:	4413      	add	r3, r2
    744e:	009b      	lsls	r3, r3, #2
    7450:	440b      	add	r3, r1
    7452:	2200      	movs	r2, #0
    7454:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    7456:	e032      	b.n	74be <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    7458:	f89d 3004 	ldrb.w	r3, [sp, #4]
    745c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7460:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7464:	f10d 000a 	add.w	r0, sp, #10
    7468:	f7ff ff1e 	bl	72a8 <Adc_StopSwGroupConversion>
    746c:	4603      	mov	r3, r0
    746e:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7472:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7476:	4915      	ldr	r1, [pc, #84]	; (74cc <Adc_UpdateStatusStopConversion+0x15c>)
    7478:	4613      	mov	r3, r2
    747a:	009b      	lsls	r3, r3, #2
    747c:	4413      	add	r3, r2
    747e:	009b      	lsls	r3, r3, #2
    7480:	440b      	add	r3, r1
    7482:	2200      	movs	r2, #0
    7484:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    7486:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    748a:	2b00      	cmp	r3, #0
    748c:	d10f      	bne.n	74ae <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    748e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7492:	4a0f      	ldr	r2, [pc, #60]	; (74d0 <Adc_UpdateStatusStopConversion+0x160>)
    7494:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7498:	b29b      	uxth	r3, r3
    749a:	2b00      	cmp	r3, #0
    749c:	d007      	beq.n	74ae <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    749e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    74a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74a6:	4611      	mov	r1, r2
    74a8:	4618      	mov	r0, r3
    74aa:	f002 fae3 	bl	9a74 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    74ae:	f89d 301d 	ldrb.w	r3, [sp, #29]
    74b2:	2b01      	cmp	r3, #1
    74b4:	d103      	bne.n	74be <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    74b6:	212b      	movs	r1, #43	; 0x2b
    74b8:	2003      	movs	r0, #3
    74ba:	f7ff fb45 	bl	6b48 <Adc_ReportDetRuntimeError>
}
    74be:	bf00      	nop
    74c0:	b009      	add	sp, #36	; 0x24
    74c2:	f85d fb04 	ldr.w	pc, [sp], #4
    74c6:	bf00      	nop
    74c8:	1fff8d0c 	.word	0x1fff8d0c
    74cc:	1fff8d10 	.word	0x1fff8d10
    74d0:	1fff8d38 	.word	0x1fff8d38

000074d4 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    74d4:	b500      	push	{lr}
    74d6:	b085      	sub	sp, #20
    74d8:	4603      	mov	r3, r0
    74da:	f8ad 3006 	strh.w	r3, [sp, #6]
    74de:	460b      	mov	r3, r1
    74e0:	f88d 3005 	strb.w	r3, [sp, #5]
    74e4:	4613      	mov	r3, r2
    74e6:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    74ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
    74ee:	4a18      	ldr	r2, [pc, #96]	; (7550 <Adc_UpdateStatusReadGroup+0x7c>)
    74f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f4:	68da      	ldr	r2, [r3, #12]
    74f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74fa:	005b      	lsls	r3, r3, #1
    74fc:	4413      	add	r3, r2
    74fe:	881b      	ldrh	r3, [r3, #0]
    7500:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    7504:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7508:	4a11      	ldr	r2, [pc, #68]	; (7550 <Adc_UpdateStatusReadGroup+0x7c>)
    750a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    750e:	685a      	ldr	r2, [r3, #4]
    7510:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7514:	2134      	movs	r1, #52	; 0x34
    7516:	fb01 f303 	mul.w	r3, r1, r3
    751a:	4413      	add	r3, r2
    751c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    7520:	2b01      	cmp	r3, #1
    7522:	d109      	bne.n	7538 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    7524:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7528:	f89d 1005 	ldrb.w	r1, [sp, #5]
    752c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7530:	4618      	mov	r0, r3
    7532:	f000 f80f 	bl	7554 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    7536:	e007      	b.n	7548 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    7538:	f89d 2004 	ldrb.w	r2, [sp, #4]
    753c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7540:	4611      	mov	r1, r2
    7542:	4618      	mov	r0, r3
    7544:	f000 f8e8 	bl	7718 <Adc_UpdateStatusReadGroupInt>
}
    7548:	bf00      	nop
    754a:	b005      	add	sp, #20
    754c:	f85d fb04 	ldr.w	pc, [sp], #4
    7550:	1fff8d0c 	.word	0x1fff8d0c

00007554 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    7554:	b500      	push	{lr}
    7556:	b085      	sub	sp, #20
    7558:	4603      	mov	r3, r0
    755a:	f8ad 3006 	strh.w	r3, [sp, #6]
    755e:	460b      	mov	r3, r1
    7560:	f88d 3005 	strb.w	r3, [sp, #5]
    7564:	4613      	mov	r3, r2
    7566:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    756a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    756e:	4a2c      	ldr	r2, [pc, #176]	; (7620 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7574:	68da      	ldr	r2, [r3, #12]
    7576:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    757a:	005b      	lsls	r3, r3, #1
    757c:	4413      	add	r3, r2
    757e:	881b      	ldrh	r3, [r3, #0]
    7580:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7584:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7588:	4926      	ldr	r1, [pc, #152]	; (7624 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    758a:	4613      	mov	r3, r2
    758c:	009b      	lsls	r3, r3, #2
    758e:	4413      	add	r3, r2
    7590:	009b      	lsls	r3, r3, #2
    7592:	440b      	add	r3, r1
    7594:	3304      	adds	r3, #4
    7596:	2201      	movs	r2, #1
    7598:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    759a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    759e:	2b00      	cmp	r3, #0
    75a0:	d03a      	beq.n	7618 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    75a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    75a6:	4a1e      	ldr	r2, [pc, #120]	; (7620 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    75a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ac:	685a      	ldr	r2, [r3, #4]
    75ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75b2:	2134      	movs	r1, #52	; 0x34
    75b4:	fb01 f303 	mul.w	r3, r1, r3
    75b8:	4413      	add	r3, r2
    75ba:	689b      	ldr	r3, [r3, #8]
    75bc:	2b01      	cmp	r3, #1
    75be:	d10a      	bne.n	75d6 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    75c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75c4:	4917      	ldr	r1, [pc, #92]	; (7624 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    75c6:	4613      	mov	r3, r2
    75c8:	009b      	lsls	r3, r3, #2
    75ca:	4413      	add	r3, r2
    75cc:	009b      	lsls	r3, r3, #2
    75ce:	440b      	add	r3, r1
    75d0:	2201      	movs	r2, #1
    75d2:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    75d4:	e020      	b.n	7618 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    75d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    75da:	4a11      	ldr	r2, [pc, #68]	; (7620 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    75dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e0:	685a      	ldr	r2, [r3, #4]
    75e2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75e6:	2134      	movs	r1, #52	; 0x34
    75e8:	fb01 f303 	mul.w	r3, r1, r3
    75ec:	4413      	add	r3, r2
    75ee:	695b      	ldr	r3, [r3, #20]
    75f0:	2b00      	cmp	r3, #0
    75f2:	d111      	bne.n	7618 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    75f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75f8:	490a      	ldr	r1, [pc, #40]	; (7624 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    75fa:	4613      	mov	r3, r2
    75fc:	009b      	lsls	r3, r3, #2
    75fe:	4413      	add	r3, r2
    7600:	009b      	lsls	r3, r3, #2
    7602:	440b      	add	r3, r1
    7604:	2200      	movs	r2, #0
    7606:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    7608:	f89d 2004 	ldrb.w	r2, [sp, #4]
    760c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7610:	4611      	mov	r1, r2
    7612:	4618      	mov	r0, r3
    7614:	f000 f808 	bl	7628 <Adc_UpdateSwQueueIndexNoInt>
}
    7618:	bf00      	nop
    761a:	b005      	add	sp, #20
    761c:	f85d fb04 	ldr.w	pc, [sp], #4
    7620:	1fff8d0c 	.word	0x1fff8d0c
    7624:	1fff8d10 	.word	0x1fff8d10

00007628 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    7628:	b500      	push	{lr}
    762a:	b085      	sub	sp, #20
    762c:	4603      	mov	r3, r0
    762e:	460a      	mov	r2, r1
    7630:	f8ad 3006 	strh.w	r3, [sp, #6]
    7634:	4613      	mov	r3, r2
    7636:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    763a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    763e:	4a34      	ldr	r2, [pc, #208]	; (7710 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    7640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7644:	68da      	ldr	r2, [r3, #12]
    7646:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    764a:	005b      	lsls	r3, r3, #1
    764c:	4413      	add	r3, r2
    764e:	881b      	ldrh	r3, [r3, #0]
    7650:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    7654:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7658:	4a2d      	ldr	r2, [pc, #180]	; (7710 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    765e:	685a      	ldr	r2, [r3, #4]
    7660:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7664:	2134      	movs	r1, #52	; 0x34
    7666:	fb01 f303 	mul.w	r3, r1, r3
    766a:	4413      	add	r3, r2
    766c:	789b      	ldrb	r3, [r3, #2]
    766e:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7672:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7676:	4a27      	ldr	r2, [pc, #156]	; (7714 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7678:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    767c:	b29b      	uxth	r3, r3
    767e:	2b00      	cmp	r3, #0
    7680:	d041      	beq.n	7706 <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7682:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7686:	4a23      	ldr	r2, [pc, #140]	; (7714 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7688:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    768c:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7690:	2300      	movs	r3, #0
    7692:	f8ad 300e 	strh.w	r3, [sp, #14]
    7696:	e01c      	b.n	76d2 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    7698:	f89d 200b 	ldrb.w	r2, [sp, #11]
    769c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76a0:	491c      	ldr	r1, [pc, #112]	; (7714 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    76a2:	0092      	lsls	r2, r2, #2
    76a4:	4413      	add	r3, r2
    76a6:	005b      	lsls	r3, r3, #1
    76a8:	440b      	add	r3, r1
    76aa:	885b      	ldrh	r3, [r3, #2]
    76ac:	b29b      	uxth	r3, r3
    76ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76b2:	429a      	cmp	r2, r3
    76b4:	d108      	bne.n	76c8 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    76b6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    76ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76be:	4611      	mov	r1, r2
    76c0:	4618      	mov	r0, r3
    76c2:	f001 fbc9 	bl	8e58 <Adc_Ipw_RemoveFromQueue>
                    break;
    76c6:	e00a      	b.n	76de <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    76c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76cc:	3301      	adds	r3, #1
    76ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    76d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    76d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    76da:	429a      	cmp	r2, r3
    76dc:	d3dc      	bcc.n	7698 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    76de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76e2:	2b00      	cmp	r3, #0
    76e4:	d10f      	bne.n	7706 <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    76e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76ea:	4a0a      	ldr	r2, [pc, #40]	; (7714 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    76ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    76f0:	b29b      	uxth	r3, r3
    76f2:	2b00      	cmp	r3, #0
    76f4:	d007      	beq.n	7706 <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    76f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    76fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76fe:	4611      	mov	r1, r2
    7700:	4618      	mov	r0, r3
    7702:	f002 f9b7 	bl	9a74 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    7706:	bf00      	nop
    7708:	b005      	add	sp, #20
    770a:	f85d fb04 	ldr.w	pc, [sp], #4
    770e:	bf00      	nop
    7710:	1fff8d0c 	.word	0x1fff8d0c
    7714:	1fff8d38 	.word	0x1fff8d38

00007718 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    7718:	b084      	sub	sp, #16
    771a:	4603      	mov	r3, r0
    771c:	460a      	mov	r2, r1
    771e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7722:	4613      	mov	r3, r2
    7724:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7728:	f89d 3005 	ldrb.w	r3, [sp, #5]
    772c:	4a47      	ldr	r2, [pc, #284]	; (784c <Adc_UpdateStatusReadGroupInt+0x134>)
    772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7732:	68da      	ldr	r2, [r3, #12]
    7734:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7738:	005b      	lsls	r3, r3, #1
    773a:	4413      	add	r3, r2
    773c:	881b      	ldrh	r3, [r3, #0]
    773e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7742:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7746:	4942      	ldr	r1, [pc, #264]	; (7850 <Adc_UpdateStatusReadGroupInt+0x138>)
    7748:	4613      	mov	r3, r2
    774a:	009b      	lsls	r3, r3, #2
    774c:	4413      	add	r3, r2
    774e:	009b      	lsls	r3, r3, #2
    7750:	440b      	add	r3, r1
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	2b02      	cmp	r3, #2
    7756:	d10a      	bne.n	776e <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7758:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    775c:	493c      	ldr	r1, [pc, #240]	; (7850 <Adc_UpdateStatusReadGroupInt+0x138>)
    775e:	4613      	mov	r3, r2
    7760:	009b      	lsls	r3, r3, #2
    7762:	4413      	add	r3, r2
    7764:	009b      	lsls	r3, r3, #2
    7766:	440b      	add	r3, r1
    7768:	2201      	movs	r2, #1
    776a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    776c:	e06a      	b.n	7844 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    776e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7772:	4937      	ldr	r1, [pc, #220]	; (7850 <Adc_UpdateStatusReadGroupInt+0x138>)
    7774:	4613      	mov	r3, r2
    7776:	009b      	lsls	r3, r3, #2
    7778:	4413      	add	r3, r2
    777a:	009b      	lsls	r3, r3, #2
    777c:	440b      	add	r3, r1
    777e:	681b      	ldr	r3, [r3, #0]
    7780:	2b03      	cmp	r3, #3
    7782:	d15f      	bne.n	7844 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7784:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7788:	4a30      	ldr	r2, [pc, #192]	; (784c <Adc_UpdateStatusReadGroupInt+0x134>)
    778a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    778e:	685a      	ldr	r2, [r3, #4]
    7790:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7794:	2134      	movs	r1, #52	; 0x34
    7796:	fb01 f303 	mul.w	r3, r1, r3
    779a:	4413      	add	r3, r2
    779c:	695b      	ldr	r3, [r3, #20]
    779e:	2b00      	cmp	r3, #0
    77a0:	d150      	bne.n	7844 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    77a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77a6:	4a29      	ldr	r2, [pc, #164]	; (784c <Adc_UpdateStatusReadGroupInt+0x134>)
    77a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ac:	685a      	ldr	r2, [r3, #4]
    77ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    77b2:	2134      	movs	r1, #52	; 0x34
    77b4:	fb01 f303 	mul.w	r3, r1, r3
    77b8:	4413      	add	r3, r2
    77ba:	689b      	ldr	r3, [r3, #8]
    77bc:	2b00      	cmp	r3, #0
    77be:	d02c      	beq.n	781a <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    77c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77c4:	4a21      	ldr	r2, [pc, #132]	; (784c <Adc_UpdateStatusReadGroupInt+0x134>)
    77c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ca:	685a      	ldr	r2, [r3, #4]
    77cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    77d0:	2134      	movs	r1, #52	; 0x34
    77d2:	fb01 f303 	mul.w	r3, r1, r3
    77d6:	4413      	add	r3, r2
    77d8:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    77da:	2b01      	cmp	r3, #1
    77dc:	d128      	bne.n	7830 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    77de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77e2:	4a1a      	ldr	r2, [pc, #104]	; (784c <Adc_UpdateStatusReadGroupInt+0x134>)
    77e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77e8:	685a      	ldr	r2, [r3, #4]
    77ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    77ee:	2134      	movs	r1, #52	; 0x34
    77f0:	fb01 f303 	mul.w	r3, r1, r3
    77f4:	4413      	add	r3, r2
    77f6:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    77f8:	2b01      	cmp	r3, #1
    77fa:	d119      	bne.n	7830 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    77fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7800:	4a12      	ldr	r2, [pc, #72]	; (784c <Adc_UpdateStatusReadGroupInt+0x134>)
    7802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7806:	685a      	ldr	r2, [r3, #4]
    7808:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    780c:	2134      	movs	r1, #52	; 0x34
    780e:	fb01 f303 	mul.w	r3, r1, r3
    7812:	4413      	add	r3, r2
    7814:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7816:	2b00      	cmp	r3, #0
    7818:	d10a      	bne.n	7830 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    781a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    781e:	490c      	ldr	r1, [pc, #48]	; (7850 <Adc_UpdateStatusReadGroupInt+0x138>)
    7820:	4613      	mov	r3, r2
    7822:	009b      	lsls	r3, r3, #2
    7824:	4413      	add	r3, r2
    7826:	009b      	lsls	r3, r3, #2
    7828:	440b      	add	r3, r1
    782a:	2200      	movs	r2, #0
    782c:	601a      	str	r2, [r3, #0]
}
    782e:	e009      	b.n	7844 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7830:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7834:	4906      	ldr	r1, [pc, #24]	; (7850 <Adc_UpdateStatusReadGroupInt+0x138>)
    7836:	4613      	mov	r3, r2
    7838:	009b      	lsls	r3, r3, #2
    783a:	4413      	add	r3, r2
    783c:	009b      	lsls	r3, r3, #2
    783e:	440b      	add	r3, r1
    7840:	2201      	movs	r2, #1
    7842:	601a      	str	r2, [r3, #0]
}
    7844:	bf00      	nop
    7846:	b004      	add	sp, #16
    7848:	4770      	bx	lr
    784a:	bf00      	nop
    784c:	1fff8d0c 	.word	0x1fff8d0c
    7850:	1fff8d10 	.word	0x1fff8d10

00007854 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    7854:	b084      	sub	sp, #16
    7856:	4603      	mov	r3, r0
    7858:	460a      	mov	r2, r1
    785a:	f8ad 3006 	strh.w	r3, [sp, #6]
    785e:	4613      	mov	r3, r2
    7860:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7864:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7868:	4a46      	ldr	r2, [pc, #280]	; (7984 <Adc_UpdateStatusAfterGetStream+0x130>)
    786a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    786e:	68da      	ldr	r2, [r3, #12]
    7870:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7874:	005b      	lsls	r3, r3, #1
    7876:	4413      	add	r3, r2
    7878:	881b      	ldrh	r3, [r3, #0]
    787a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    787e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7882:	4941      	ldr	r1, [pc, #260]	; (7988 <Adc_UpdateStatusAfterGetStream+0x134>)
    7884:	4613      	mov	r3, r2
    7886:	009b      	lsls	r3, r3, #2
    7888:	4413      	add	r3, r2
    788a:	009b      	lsls	r3, r3, #2
    788c:	440b      	add	r3, r1
    788e:	681b      	ldr	r3, [r3, #0]
    7890:	2b02      	cmp	r3, #2
    7892:	d109      	bne.n	78a8 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7894:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7898:	493b      	ldr	r1, [pc, #236]	; (7988 <Adc_UpdateStatusAfterGetStream+0x134>)
    789a:	4613      	mov	r3, r2
    789c:	009b      	lsls	r3, r3, #2
    789e:	4413      	add	r3, r2
    78a0:	009b      	lsls	r3, r3, #2
    78a2:	440b      	add	r3, r1
    78a4:	2201      	movs	r2, #1
    78a6:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    78a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    78ac:	4936      	ldr	r1, [pc, #216]	; (7988 <Adc_UpdateStatusAfterGetStream+0x134>)
    78ae:	4613      	mov	r3, r2
    78b0:	009b      	lsls	r3, r3, #2
    78b2:	4413      	add	r3, r2
    78b4:	009b      	lsls	r3, r3, #2
    78b6:	440b      	add	r3, r1
    78b8:	681b      	ldr	r3, [r3, #0]
    78ba:	2b03      	cmp	r3, #3
    78bc:	d15f      	bne.n	797e <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    78be:	f89d 3005 	ldrb.w	r3, [sp, #5]
    78c2:	4a30      	ldr	r2, [pc, #192]	; (7984 <Adc_UpdateStatusAfterGetStream+0x130>)
    78c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78c8:	685a      	ldr	r2, [r3, #4]
    78ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78ce:	2134      	movs	r1, #52	; 0x34
    78d0:	fb01 f303 	mul.w	r3, r1, r3
    78d4:	4413      	add	r3, r2
    78d6:	695b      	ldr	r3, [r3, #20]
    78d8:	2b00      	cmp	r3, #0
    78da:	d150      	bne.n	797e <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    78dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    78e0:	4a28      	ldr	r2, [pc, #160]	; (7984 <Adc_UpdateStatusAfterGetStream+0x130>)
    78e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e6:	685a      	ldr	r2, [r3, #4]
    78e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78ec:	2134      	movs	r1, #52	; 0x34
    78ee:	fb01 f303 	mul.w	r3, r1, r3
    78f2:	4413      	add	r3, r2
    78f4:	689b      	ldr	r3, [r3, #8]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d02c      	beq.n	7954 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    78fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    78fe:	4a21      	ldr	r2, [pc, #132]	; (7984 <Adc_UpdateStatusAfterGetStream+0x130>)
    7900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7904:	685a      	ldr	r2, [r3, #4]
    7906:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    790a:	2134      	movs	r1, #52	; 0x34
    790c:	fb01 f303 	mul.w	r3, r1, r3
    7910:	4413      	add	r3, r2
    7912:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7914:	2b01      	cmp	r3, #1
    7916:	d128      	bne.n	796a <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7918:	f89d 3005 	ldrb.w	r3, [sp, #5]
    791c:	4a19      	ldr	r2, [pc, #100]	; (7984 <Adc_UpdateStatusAfterGetStream+0x130>)
    791e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7922:	685a      	ldr	r2, [r3, #4]
    7924:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7928:	2134      	movs	r1, #52	; 0x34
    792a:	fb01 f303 	mul.w	r3, r1, r3
    792e:	4413      	add	r3, r2
    7930:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7932:	2b01      	cmp	r3, #1
    7934:	d119      	bne.n	796a <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7936:	f89d 3005 	ldrb.w	r3, [sp, #5]
    793a:	4a12      	ldr	r2, [pc, #72]	; (7984 <Adc_UpdateStatusAfterGetStream+0x130>)
    793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7940:	685a      	ldr	r2, [r3, #4]
    7942:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7946:	2134      	movs	r1, #52	; 0x34
    7948:	fb01 f303 	mul.w	r3, r1, r3
    794c:	4413      	add	r3, r2
    794e:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7950:	2b00      	cmp	r3, #0
    7952:	d10a      	bne.n	796a <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7954:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7958:	490b      	ldr	r1, [pc, #44]	; (7988 <Adc_UpdateStatusAfterGetStream+0x134>)
    795a:	4613      	mov	r3, r2
    795c:	009b      	lsls	r3, r3, #2
    795e:	4413      	add	r3, r2
    7960:	009b      	lsls	r3, r3, #2
    7962:	440b      	add	r3, r1
    7964:	2200      	movs	r2, #0
    7966:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    7968:	e009      	b.n	797e <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    796a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    796e:	4906      	ldr	r1, [pc, #24]	; (7988 <Adc_UpdateStatusAfterGetStream+0x134>)
    7970:	4613      	mov	r3, r2
    7972:	009b      	lsls	r3, r3, #2
    7974:	4413      	add	r3, r2
    7976:	009b      	lsls	r3, r3, #2
    7978:	440b      	add	r3, r1
    797a:	2201      	movs	r2, #1
    797c:	601a      	str	r2, [r3, #0]
}
    797e:	bf00      	nop
    7980:	b004      	add	sp, #16
    7982:	4770      	bx	lr
    7984:	1fff8d0c 	.word	0x1fff8d0c
    7988:	1fff8d10 	.word	0x1fff8d10

0000798c <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    798c:	b500      	push	{lr}
    798e:	b085      	sub	sp, #20
    7990:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7992:	f002 fa5b 	bl	9e4c <Adc_GetCoreID>
    7996:	4603      	mov	r3, r0
    7998:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    799c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79a0:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    79a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79a8:	b2db      	uxtb	r3, r3
    79aa:	4619      	mov	r1, r3
    79ac:	9801      	ldr	r0, [sp, #4]
    79ae:	f7ff fbb3 	bl	7118 <Adc_CheckCurrentCoreId>
    79b2:	4603      	mov	r3, r0
    79b4:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    79b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    79bc:	2b00      	cmp	r3, #0
    79be:	d12c      	bne.n	7a1a <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    79c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79c4:	b2db      	uxtb	r3, r3
    79c6:	4619      	mov	r1, r3
    79c8:	4a16      	ldr	r2, [pc, #88]	; (7a24 <Adc_Init+0x98>)
    79ca:	9b01      	ldr	r3, [sp, #4]
    79cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    79d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79d4:	b2db      	uxtb	r3, r3
    79d6:	4618      	mov	r0, r3
    79d8:	f7ff fb4e 	bl	7078 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    79dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79e0:	b2db      	uxtb	r3, r3
    79e2:	4618      	mov	r0, r3
    79e4:	f7ff fade 	bl	6fa4 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    79e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79ec:	b2db      	uxtb	r3, r3
    79ee:	461a      	mov	r2, r3
    79f0:	4b0c      	ldr	r3, [pc, #48]	; (7a24 <Adc_Init+0x98>)
    79f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79fc:	4611      	mov	r1, r2
    79fe:	4618      	mov	r0, r3
    7a00:	f001 ff78 	bl	98f4 <Adc_Ipw_Init>
    7a04:	4603      	mov	r3, r0
    7a06:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7a0a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a0e:	2b01      	cmp	r3, #1
    7a10:	d103      	bne.n	7a1a <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    7a12:	212b      	movs	r1, #43	; 0x2b
    7a14:	2000      	movs	r0, #0
    7a16:	f7ff f897 	bl	6b48 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    7a1a:	bf00      	nop
    7a1c:	b005      	add	sp, #20
    7a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a22:	bf00      	nop
    7a24:	1fff8d0c 	.word	0x1fff8d0c

00007a28 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    7a28:	b500      	push	{lr}
    7a2a:	b085      	sub	sp, #20
    7a2c:	4603      	mov	r3, r0
    7a2e:	9100      	str	r1, [sp, #0]
    7a30:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    7a34:	2301      	movs	r3, #1
    7a36:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    7a3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a3e:	4618      	mov	r0, r3
    7a40:	f7ff f9a2 	bl	6d88 <Adc_ValidateSetupBufferNotBusy>
    7a44:	4603      	mov	r3, r0
    7a46:	2b00      	cmp	r3, #0
    7a48:	d10d      	bne.n	7a66 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    7a4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a4e:	4909      	ldr	r1, [pc, #36]	; (7a74 <Adc_SetupResultBuffer+0x4c>)
    7a50:	4613      	mov	r3, r2
    7a52:	009b      	lsls	r3, r3, #2
    7a54:	4413      	add	r3, r2
    7a56:	009b      	lsls	r3, r3, #2
    7a58:	440b      	add	r3, r1
    7a5a:	330c      	adds	r3, #12
    7a5c:	9a00      	ldr	r2, [sp, #0]
    7a5e:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7a60:	2300      	movs	r3, #0
    7a62:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    7a66:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a6a:	4618      	mov	r0, r3
    7a6c:	b005      	add	sp, #20
    7a6e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a72:	bf00      	nop
    7a74:	1fff8d10 	.word	0x1fff8d10

00007a78 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    7a78:	b500      	push	{lr}
    7a7a:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7a7c:	2300      	movs	r3, #0
    7a7e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7a82:	f002 f9e3 	bl	9e4c <Adc_GetCoreID>
    7a86:	4603      	mov	r3, r0
    7a88:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7a8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7a90:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7a94:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7a98:	b2db      	uxtb	r3, r3
    7a9a:	461a      	mov	r2, r3
    7a9c:	4b2d      	ldr	r3, [pc, #180]	; (7b54 <Adc_DeInit+0xdc>)
    7a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7aa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7aa6:	4611      	mov	r1, r2
    7aa8:	4618      	mov	r0, r3
    7aaa:	f7ff fb35 	bl	7118 <Adc_CheckCurrentCoreId>
    7aae:	4603      	mov	r3, r0
    7ab0:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7ab4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ab8:	2b00      	cmp	r3, #0
    7aba:	d147      	bne.n	7b4c <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    7abc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7ac0:	b2db      	uxtb	r3, r3
    7ac2:	4618      	mov	r0, r3
    7ac4:	f7ff f912 	bl	6cec <Adc_ValidateDeInitNotBusy>
    7ac8:	4603      	mov	r3, r0
    7aca:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    7ace:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d13a      	bne.n	7b4c <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    7ad6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7ada:	b2db      	uxtb	r3, r3
    7adc:	4618      	mov	r0, r3
    7ade:	f001 ff4e 	bl	997e <Adc_Ipw_DeInit>
    7ae2:	4603      	mov	r3, r0
    7ae4:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    7ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7aec:	2b01      	cmp	r3, #1
    7aee:	d103      	bne.n	7af8 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7af0:	212b      	movs	r1, #43	; 0x2b
    7af2:	2001      	movs	r0, #1
    7af4:	f7ff f828 	bl	6b48 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7af8:	2300      	movs	r3, #0
    7afa:	f88d 3007 	strb.w	r3, [sp, #7]
    7afe:	e019      	b.n	7b34 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7b00:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7b04:	b2db      	uxtb	r3, r3
    7b06:	461a      	mov	r2, r3
    7b08:	4b12      	ldr	r3, [pc, #72]	; (7b54 <Adc_DeInit+0xdc>)
    7b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b0e:	681a      	ldr	r2, [r3, #0]
    7b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b14:	4413      	add	r3, r2
    7b16:	7f9b      	ldrb	r3, [r3, #30]
    7b18:	2b01      	cmp	r3, #1
    7b1a:	d106      	bne.n	7b2a <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7b1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b20:	4a0d      	ldr	r2, [pc, #52]	; (7b58 <Adc_DeInit+0xe0>)
    7b22:	00db      	lsls	r3, r3, #3
    7b24:	4413      	add	r3, r2
    7b26:	2200      	movs	r2, #0
    7b28:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7b2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b2e:	3301      	adds	r3, #1
    7b30:	f88d 3007 	strb.w	r3, [sp, #7]
    7b34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b38:	2b01      	cmp	r3, #1
    7b3a:	d9e1      	bls.n	7b00 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    7b3c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7b40:	b2db      	uxtb	r3, r3
    7b42:	4619      	mov	r1, r3
    7b44:	4b03      	ldr	r3, [pc, #12]	; (7b54 <Adc_DeInit+0xdc>)
    7b46:	2200      	movs	r2, #0
    7b48:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    7b4c:	bf00      	nop
    7b4e:	b003      	add	sp, #12
    7b50:	f85d fb04 	ldr.w	pc, [sp], #4
    7b54:	1fff8d0c 	.word	0x1fff8d0c
    7b58:	1fff8d38 	.word	0x1fff8d38

00007b5c <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    7b5c:	b500      	push	{lr}
    7b5e:	b085      	sub	sp, #20
    7b60:	4603      	mov	r3, r0
    7b62:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7b66:	2300      	movs	r3, #0
    7b68:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7b6c:	2300      	movs	r3, #0
    7b6e:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7b72:	f002 f96b 	bl	9e4c <Adc_GetCoreID>
    7b76:	4603      	mov	r3, r0
    7b78:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b80:	b2db      	uxtb	r3, r3
    7b82:	461a      	mov	r2, r3
    7b84:	4b1a      	ldr	r3, [pc, #104]	; (7bf0 <Adc_StartGroupConversion+0x94>)
    7b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b8a:	68da      	ldr	r2, [r3, #12]
    7b8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b90:	005b      	lsls	r3, r3, #1
    7b92:	4413      	add	r3, r2
    7b94:	881b      	ldrh	r3, [r3, #0]
    7b96:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    7b9a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b9e:	b2da      	uxtb	r2, r3
    7ba0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ba4:	4611      	mov	r1, r2
    7ba6:	4618      	mov	r0, r3
    7ba8:	f7ff f912 	bl	6dd0 <Adc_ValidateStateStartGroupConvNotBusy>
    7bac:	4603      	mov	r3, r0
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d11a      	bne.n	7be8 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7bb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bb6:	b2db      	uxtb	r3, r3
    7bb8:	461a      	mov	r2, r3
    7bba:	4b0d      	ldr	r3, [pc, #52]	; (7bf0 <Adc_StartGroupConversion+0x94>)
    7bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bc0:	685a      	ldr	r2, [r3, #4]
    7bc2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bc6:	2134      	movs	r1, #52	; 0x34
    7bc8:	fb01 f303 	mul.w	r3, r1, r3
    7bcc:	4413      	add	r3, r2
    7bce:	789b      	ldrb	r3, [r3, #2]
    7bd0:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7bd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bd8:	b2da      	uxtb	r2, r3
    7bda:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7bde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7be2:	4618      	mov	r0, r3
    7be4:	f7ff facb 	bl	717e <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7be8:	bf00      	nop
    7bea:	b005      	add	sp, #20
    7bec:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf0:	1fff8d0c 	.word	0x1fff8d0c

00007bf4 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7bf4:	b500      	push	{lr}
    7bf6:	b085      	sub	sp, #20
    7bf8:	4603      	mov	r3, r0
    7bfa:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7bfe:	2300      	movs	r3, #0
    7c00:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7c04:	2300      	movs	r3, #0
    7c06:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    7c0a:	f002 f91f 	bl	9e4c <Adc_GetCoreID>
    7c0e:	4603      	mov	r3, r0
    7c10:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    7c14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c18:	b2da      	uxtb	r2, r3
    7c1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c1e:	4619      	mov	r1, r3
    7c20:	2003      	movs	r0, #3
    7c22:	f7ff f94d 	bl	6ec0 <Adc_ValidateStateNotIdle>
    7c26:	4603      	mov	r3, r0
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d129      	bne.n	7c80 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7c2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c30:	b2db      	uxtb	r3, r3
    7c32:	461a      	mov	r2, r3
    7c34:	4b14      	ldr	r3, [pc, #80]	; (7c88 <Adc_StopGroupConversion+0x94>)
    7c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c3a:	68da      	ldr	r2, [r3, #12]
    7c3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c40:	005b      	lsls	r3, r3, #1
    7c42:	4413      	add	r3, r2
    7c44:	881b      	ldrh	r3, [r3, #0]
    7c46:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7c4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c4e:	b2db      	uxtb	r3, r3
    7c50:	461a      	mov	r2, r3
    7c52:	4b0d      	ldr	r3, [pc, #52]	; (7c88 <Adc_StopGroupConversion+0x94>)
    7c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c58:	685a      	ldr	r2, [r3, #4]
    7c5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c5e:	2134      	movs	r1, #52	; 0x34
    7c60:	fb01 f303 	mul.w	r3, r1, r3
    7c64:	4413      	add	r3, r2
    7c66:	789b      	ldrb	r3, [r3, #2]
    7c68:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    7c6c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c70:	b2da      	uxtb	r2, r3
    7c72:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7c76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c7a:	4618      	mov	r0, r3
    7c7c:	f7ff fb78 	bl	7370 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7c80:	bf00      	nop
    7c82:	b005      	add	sp, #20
    7c84:	f85d fb04 	ldr.w	pc, [sp], #4
    7c88:	1fff8d0c 	.word	0x1fff8d0c

00007c8c <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7c8c:	b500      	push	{lr}
    7c8e:	b085      	sub	sp, #20
    7c90:	4603      	mov	r3, r0
    7c92:	9100      	str	r1, [sp, #0]
    7c94:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7c98:	2301      	movs	r3, #1
    7c9a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7c9e:	2301      	movs	r3, #1
    7ca0:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7ca4:	f002 f8d2 	bl	9e4c <Adc_GetCoreID>
    7ca8:	4603      	mov	r3, r0
    7caa:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7cae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cb2:	b2da      	uxtb	r2, r3
    7cb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7cb8:	4619      	mov	r1, r3
    7cba:	2004      	movs	r0, #4
    7cbc:	f7ff f900 	bl	6ec0 <Adc_ValidateStateNotIdle>
    7cc0:	4603      	mov	r3, r0
    7cc2:	2b00      	cmp	r3, #0
    7cc4:	d121      	bne.n	7d0a <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7cc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cca:	b2db      	uxtb	r3, r3
    7ccc:	f10d 020d 	add.w	r2, sp, #13
    7cd0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7cd4:	9900      	ldr	r1, [sp, #0]
    7cd6:	f002 f812 	bl	9cfe <Adc_Ipw_ReadGroup>
    7cda:	4603      	mov	r3, r0
    7cdc:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7ce0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d006      	beq.n	7cf6 <Adc_ReadGroup+0x6a>
    7ce8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7cec:	f083 0301 	eor.w	r3, r3, #1
    7cf0:	b2db      	uxtb	r3, r3
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d009      	beq.n	7d0a <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7cf6:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7cfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cfe:	b2da      	uxtb	r2, r3
    7d00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d04:	4618      	mov	r0, r3
    7d06:	f7ff fbe5 	bl	74d4 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7d0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7d0e:	4618      	mov	r0, r3
    7d10:	b005      	add	sp, #20
    7d12:	f85d fb04 	ldr.w	pc, [sp], #4

00007d16 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7d16:	b084      	sub	sp, #16
    7d18:	4603      	mov	r3, r0
    7d1a:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7d1e:	2300      	movs	r3, #0
    7d20:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7d22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d26:	4906      	ldr	r1, [pc, #24]	; (7d40 <Adc_GetGroupStatus+0x2a>)
    7d28:	4613      	mov	r3, r2
    7d2a:	009b      	lsls	r3, r3, #2
    7d2c:	4413      	add	r3, r2
    7d2e:	009b      	lsls	r3, r3, #2
    7d30:	440b      	add	r3, r1
    7d32:	681b      	ldr	r3, [r3, #0]
    7d34:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7d36:	9b03      	ldr	r3, [sp, #12]
}
    7d38:	4618      	mov	r0, r3
    7d3a:	b004      	add	sp, #16
    7d3c:	4770      	bx	lr
    7d3e:	bf00      	nop
    7d40:	1fff8d10 	.word	0x1fff8d10

00007d44 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7d44:	b500      	push	{lr}
    7d46:	b085      	sub	sp, #20
    7d48:	4603      	mov	r3, r0
    7d4a:	9100      	str	r1, [sp, #0]
    7d4c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7d50:	f002 f87c 	bl	9e4c <Adc_GetCoreID>
    7d54:	4603      	mov	r3, r0
    7d56:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7d5a:	2300      	movs	r3, #0
    7d5c:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7d60:	2300      	movs	r3, #0
    7d62:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7d66:	2300      	movs	r3, #0
    7d68:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7d6c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7d70:	b2da      	uxtb	r2, r3
    7d72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d76:	4619      	mov	r1, r3
    7d78:	200b      	movs	r0, #11
    7d7a:	f7ff f8a1 	bl	6ec0 <Adc_ValidateStateNotIdle>
    7d7e:	4603      	mov	r3, r0
    7d80:	2b00      	cmp	r3, #0
    7d82:	f040 808e 	bne.w	7ea2 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7d86:	9b00      	ldr	r3, [sp, #0]
    7d88:	2200      	movs	r2, #0
    7d8a:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7d8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d90:	4948      	ldr	r1, [pc, #288]	; (7eb4 <Adc_GetStreamLastPointer+0x170>)
    7d92:	4613      	mov	r3, r2
    7d94:	009b      	lsls	r3, r3, #2
    7d96:	4413      	add	r3, r2
    7d98:	009b      	lsls	r3, r3, #2
    7d9a:	440b      	add	r3, r1
    7d9c:	681b      	ldr	r3, [r3, #0]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	f000 8082 	beq.w	7ea8 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7da4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7da8:	4942      	ldr	r1, [pc, #264]	; (7eb4 <Adc_GetStreamLastPointer+0x170>)
    7daa:	4613      	mov	r3, r2
    7dac:	009b      	lsls	r3, r3, #2
    7dae:	4413      	add	r3, r2
    7db0:	009b      	lsls	r3, r3, #2
    7db2:	440b      	add	r3, r1
    7db4:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7db6:	2b01      	cmp	r3, #1
    7db8:	d076      	beq.n	7ea8 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7dba:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7dbe:	b2db      	uxtb	r3, r3
    7dc0:	461a      	mov	r2, r3
    7dc2:	4b3d      	ldr	r3, [pc, #244]	; (7eb8 <Adc_GetStreamLastPointer+0x174>)
    7dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dc8:	68da      	ldr	r2, [r3, #12]
    7dca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7dce:	005b      	lsls	r3, r3, #1
    7dd0:	4413      	add	r3, r2
    7dd2:	881b      	ldrh	r3, [r3, #0]
    7dd4:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7dd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ddc:	4935      	ldr	r1, [pc, #212]	; (7eb4 <Adc_GetStreamLastPointer+0x170>)
    7dde:	4613      	mov	r3, r2
    7de0:	009b      	lsls	r3, r3, #2
    7de2:	4413      	add	r3, r2
    7de4:	009b      	lsls	r3, r3, #2
    7de6:	440b      	add	r3, r1
    7de8:	3308      	adds	r3, #8
    7dea:	881b      	ldrh	r3, [r3, #0]
    7dec:	b29b      	uxth	r3, r3
    7dee:	2b00      	cmp	r3, #0
    7df0:	d123      	bne.n	7e3a <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7df2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7df6:	b2db      	uxtb	r3, r3
    7df8:	461a      	mov	r2, r3
    7dfa:	4b2f      	ldr	r3, [pc, #188]	; (7eb8 <Adc_GetStreamLastPointer+0x174>)
    7dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e00:	685a      	ldr	r2, [r3, #4]
    7e02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7e06:	2134      	movs	r1, #52	; 0x34
    7e08:	fb01 f303 	mul.w	r3, r1, r3
    7e0c:	4413      	add	r3, r2
    7e0e:	8b9b      	ldrh	r3, [r3, #28]
    7e10:	3b01      	subs	r3, #1
    7e12:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7e16:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7e1a:	b2db      	uxtb	r3, r3
    7e1c:	461a      	mov	r2, r3
    7e1e:	4b26      	ldr	r3, [pc, #152]	; (7eb8 <Adc_GetStreamLastPointer+0x174>)
    7e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e24:	685a      	ldr	r2, [r3, #4]
    7e26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7e2a:	2134      	movs	r1, #52	; 0x34
    7e2c:	fb01 f303 	mul.w	r3, r1, r3
    7e30:	4413      	add	r3, r2
    7e32:	8b9b      	ldrh	r3, [r3, #28]
    7e34:	f8ad 300e 	strh.w	r3, [sp, #14]
    7e38:	e019      	b.n	7e6e <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7e3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e3e:	491d      	ldr	r1, [pc, #116]	; (7eb4 <Adc_GetStreamLastPointer+0x170>)
    7e40:	4613      	mov	r3, r2
    7e42:	009b      	lsls	r3, r3, #2
    7e44:	4413      	add	r3, r2
    7e46:	009b      	lsls	r3, r3, #2
    7e48:	440b      	add	r3, r1
    7e4a:	3308      	adds	r3, #8
    7e4c:	881b      	ldrh	r3, [r3, #0]
    7e4e:	b29b      	uxth	r3, r3
    7e50:	3b01      	subs	r3, #1
    7e52:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7e56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e5a:	4916      	ldr	r1, [pc, #88]	; (7eb4 <Adc_GetStreamLastPointer+0x170>)
    7e5c:	4613      	mov	r3, r2
    7e5e:	009b      	lsls	r3, r3, #2
    7e60:	4413      	add	r3, r2
    7e62:	009b      	lsls	r3, r3, #2
    7e64:	440b      	add	r3, r1
    7e66:	3308      	adds	r3, #8
    7e68:	881b      	ldrh	r3, [r3, #0]
    7e6a:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7e6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e72:	4910      	ldr	r1, [pc, #64]	; (7eb4 <Adc_GetStreamLastPointer+0x170>)
    7e74:	4613      	mov	r3, r2
    7e76:	009b      	lsls	r3, r3, #2
    7e78:	4413      	add	r3, r2
    7e7a:	009b      	lsls	r3, r3, #2
    7e7c:	440b      	add	r3, r1
    7e7e:	330c      	adds	r3, #12
    7e80:	681a      	ldr	r2, [r3, #0]
    7e82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e86:	005b      	lsls	r3, r3, #1
    7e88:	441a      	add	r2, r3
    7e8a:	9b00      	ldr	r3, [sp, #0]
    7e8c:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7e8e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7e92:	b2da      	uxtb	r2, r3
    7e94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e98:	4611      	mov	r1, r2
    7e9a:	4618      	mov	r0, r3
    7e9c:	f7ff fcda 	bl	7854 <Adc_UpdateStatusAfterGetStream>
    7ea0:	e002      	b.n	7ea8 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7ea2:	9b00      	ldr	r3, [sp, #0]
    7ea4:	2200      	movs	r2, #0
    7ea6:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7ea8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7eac:	4618      	mov	r0, r3
    7eae:	b005      	add	sp, #20
    7eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    7eb4:	1fff8d10 	.word	0x1fff8d10
    7eb8:	1fff8d0c 	.word	0x1fff8d0c

00007ebc <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7ebc:	b082      	sub	sp, #8
    7ebe:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7ec0:	9b01      	ldr	r3, [sp, #4]
    7ec2:	222b      	movs	r2, #43	; 0x2b
    7ec4:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7ec6:	9b01      	ldr	r3, [sp, #4]
    7ec8:	227b      	movs	r2, #123	; 0x7b
    7eca:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7ecc:	9b01      	ldr	r3, [sp, #4]
    7ece:	2202      	movs	r2, #2
    7ed0:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7ed2:	9b01      	ldr	r3, [sp, #4]
    7ed4:	2200      	movs	r2, #0
    7ed6:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7ed8:	9b01      	ldr	r3, [sp, #4]
    7eda:	2200      	movs	r2, #0
    7edc:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7ede:	bf00      	nop
    7ee0:	b002      	add	sp, #8
    7ee2:	4770      	bx	lr

00007ee4 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7ee4:	b500      	push	{lr}
    7ee6:	b085      	sub	sp, #20
    7ee8:	4603      	mov	r3, r0
    7eea:	9100      	str	r1, [sp, #0]
    7eec:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7ef0:	2300      	movs	r3, #0
    7ef2:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7ef6:	f001 ffa9 	bl	9e4c <Adc_GetCoreID>
    7efa:	4603      	mov	r3, r0
    7efc:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7f00:	9b00      	ldr	r3, [sp, #0]
    7f02:	2201      	movs	r2, #1
    7f04:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f0a:	2129      	movs	r1, #41	; 0x29
    7f0c:	4618      	mov	r0, r3
    7f0e:	f7fe fe30 	bl	6b72 <Adc_ValidateNotBusyNoQueue>
    7f12:	4603      	mov	r3, r0
    7f14:	2b00      	cmp	r3, #0
    7f16:	d115      	bne.n	7f44 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7f18:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7f1c:	b2db      	uxtb	r3, r3
    7f1e:	4619      	mov	r1, r3
    7f20:	2029      	movs	r0, #41	; 0x29
    7f22:	f7fe fe91 	bl	6c48 <Adc_ValidateCheckGroupNotConversion>
    7f26:	4603      	mov	r3, r0
    7f28:	2b00      	cmp	r3, #0
    7f2a:	d10b      	bne.n	7f44 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7f2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7f30:	b2da      	uxtb	r2, r3
    7f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f36:	9900      	ldr	r1, [sp, #0]
    7f38:	4618      	mov	r0, r3
    7f3a:	f001 ff5d 	bl	9df8 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7f3e:	2301      	movs	r3, #1
    7f40:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7f44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d007      	beq.n	7f5c <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7f4c:	9b00      	ldr	r3, [sp, #0]
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	2b01      	cmp	r3, #1
    7f52:	d103      	bne.n	7f5c <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7f54:	212b      	movs	r1, #43	; 0x2b
    7f56:	2029      	movs	r0, #41	; 0x29
    7f58:	f7fe fdf6 	bl	6b48 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7f5c:	bf00      	nop
    7f5e:	b005      	add	sp, #20
    7f60:	f85d fb04 	ldr.w	pc, [sp], #4

00007f64 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7f64:	b086      	sub	sp, #24
    7f66:	9003      	str	r0, [sp, #12]
    7f68:	9102      	str	r1, [sp, #8]
    7f6a:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7f6c:	9b03      	ldr	r3, [sp, #12]
    7f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7f72:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7f74:	9b02      	ldr	r3, [sp, #8]
    7f76:	43db      	mvns	r3, r3
    7f78:	9a05      	ldr	r2, [sp, #20]
    7f7a:	4013      	ands	r3, r2
    7f7c:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7f7e:	9a05      	ldr	r2, [sp, #20]
    7f80:	9b01      	ldr	r3, [sp, #4]
    7f82:	4313      	orrs	r3, r2
    7f84:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7f86:	9b03      	ldr	r3, [sp, #12]
    7f88:	9a05      	ldr	r2, [sp, #20]
    7f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7f8e:	bf00      	nop
    7f90:	b006      	add	sp, #24
    7f92:	4770      	bx	lr

00007f94 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7f94:	b086      	sub	sp, #24
    7f96:	9003      	str	r0, [sp, #12]
    7f98:	9102      	str	r1, [sp, #8]
    7f9a:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7f9c:	9b03      	ldr	r3, [sp, #12]
    7f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7fa0:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7fa2:	9b05      	ldr	r3, [sp, #20]
    7fa4:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7fa8:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7faa:	9b02      	ldr	r3, [sp, #8]
    7fac:	015b      	lsls	r3, r3, #5
    7fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7fb2:	9a05      	ldr	r2, [sp, #20]
    7fb4:	4313      	orrs	r3, r2
    7fb6:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7fb8:	9b01      	ldr	r3, [sp, #4]
    7fba:	f003 0303 	and.w	r3, r3, #3
    7fbe:	9a05      	ldr	r2, [sp, #20]
    7fc0:	4313      	orrs	r3, r2
    7fc2:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7fc4:	9b03      	ldr	r3, [sp, #12]
    7fc6:	9a05      	ldr	r2, [sp, #20]
    7fc8:	641a      	str	r2, [r3, #64]	; 0x40
}
    7fca:	bf00      	nop
    7fcc:	b006      	add	sp, #24
    7fce:	4770      	bx	lr

00007fd0 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7fd0:	b084      	sub	sp, #16
    7fd2:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7fd4:	2300      	movs	r3, #0
    7fd6:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7fd8:	9b01      	ldr	r3, [sp, #4]
    7fda:	095b      	lsrs	r3, r3, #5
    7fdc:	f003 0303 	and.w	r3, r3, #3
    7fe0:	2b03      	cmp	r3, #3
    7fe2:	d00c      	beq.n	7ffe <Adc_HwAcc_GetClockDivide+0x2e>
    7fe4:	2b03      	cmp	r3, #3
    7fe6:	d80d      	bhi.n	8004 <Adc_HwAcc_GetClockDivide+0x34>
    7fe8:	2b01      	cmp	r3, #1
    7fea:	d002      	beq.n	7ff2 <Adc_HwAcc_GetClockDivide+0x22>
    7fec:	2b02      	cmp	r3, #2
    7fee:	d003      	beq.n	7ff8 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7ff0:	e008      	b.n	8004 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7ff2:	2301      	movs	r3, #1
    7ff4:	9303      	str	r3, [sp, #12]
            break;
    7ff6:	e006      	b.n	8006 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7ff8:	2302      	movs	r3, #2
    7ffa:	9303      	str	r3, [sp, #12]
            break;
    7ffc:	e003      	b.n	8006 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7ffe:	2303      	movs	r3, #3
    8000:	9303      	str	r3, [sp, #12]
            break;
    8002:	e000      	b.n	8006 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8004:	bf00      	nop
    }
    return ReturnValue;
    8006:	9b03      	ldr	r3, [sp, #12]
}
    8008:	4618      	mov	r0, r3
    800a:	b004      	add	sp, #16
    800c:	4770      	bx	lr

0000800e <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    800e:	b084      	sub	sp, #16
    8010:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8012:	2300      	movs	r3, #0
    8014:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8016:	9b01      	ldr	r3, [sp, #4]
    8018:	f003 0303 	and.w	r3, r3, #3
    801c:	2b03      	cmp	r3, #3
    801e:	d00c      	beq.n	803a <Adc_HwAcc_GetInputClock+0x2c>
    8020:	2b03      	cmp	r3, #3
    8022:	d80d      	bhi.n	8040 <Adc_HwAcc_GetInputClock+0x32>
    8024:	2b01      	cmp	r3, #1
    8026:	d002      	beq.n	802e <Adc_HwAcc_GetInputClock+0x20>
    8028:	2b02      	cmp	r3, #2
    802a:	d003      	beq.n	8034 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    802c:	e008      	b.n	8040 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    802e:	2301      	movs	r3, #1
    8030:	9303      	str	r3, [sp, #12]
            break;
    8032:	e006      	b.n	8042 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8034:	2302      	movs	r3, #2
    8036:	9303      	str	r3, [sp, #12]
            break;
    8038:	e003      	b.n	8042 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    803a:	2303      	movs	r3, #3
    803c:	9303      	str	r3, [sp, #12]
            break;
    803e:	e000      	b.n	8042 <Adc_HwAcc_GetInputClock+0x34>
            break;
    8040:	bf00      	nop
    }
    return ReturnValue;
    8042:	9b03      	ldr	r3, [sp, #12]
}
    8044:	4618      	mov	r0, r3
    8046:	b004      	add	sp, #16
    8048:	4770      	bx	lr

0000804a <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    804a:	b084      	sub	sp, #16
    804c:	9001      	str	r0, [sp, #4]
    804e:	460b      	mov	r3, r1
    8050:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8054:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8058:	2b00      	cmp	r3, #0
    805a:	d002      	beq.n	8062 <Adc_HwAcc_SetSampleTime+0x18>
    805c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8060:	e000      	b.n	8064 <Adc_HwAcc_SetSampleTime+0x1a>
    8062:	2301      	movs	r3, #1
    8064:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8068:	9b01      	ldr	r3, [sp, #4]
    806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    806c:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    806e:	9b02      	ldr	r3, [sp, #8]
    8070:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8074:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8076:	f89d 300f 	ldrb.w	r3, [sp, #15]
    807a:	9a02      	ldr	r2, [sp, #8]
    807c:	4313      	orrs	r3, r2
    807e:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8080:	9b01      	ldr	r3, [sp, #4]
    8082:	9a02      	ldr	r2, [sp, #8]
    8084:	645a      	str	r2, [r3, #68]	; 0x44
}
    8086:	bf00      	nop
    8088:	b004      	add	sp, #16
    808a:	4770      	bx	lr

0000808c <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    808c:	b086      	sub	sp, #24
    808e:	9003      	str	r0, [sp, #12]
    8090:	460b      	mov	r3, r1
    8092:	9201      	str	r2, [sp, #4]
    8094:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8098:	9b03      	ldr	r3, [sp, #12]
    809a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    809e:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    80a0:	9b05      	ldr	r3, [sp, #20]
    80a2:	f023 0307 	bic.w	r3, r3, #7
    80a6:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    80a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    80ac:	2b00      	cmp	r3, #0
    80ae:	d001      	beq.n	80b4 <Adc_HwAcc_SetAveraging+0x28>
    80b0:	2304      	movs	r3, #4
    80b2:	e000      	b.n	80b6 <Adc_HwAcc_SetAveraging+0x2a>
    80b4:	2300      	movs	r3, #0
    80b6:	9a05      	ldr	r2, [sp, #20]
    80b8:	4313      	orrs	r3, r2
    80ba:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    80bc:	9b01      	ldr	r3, [sp, #4]
    80be:	f003 0303 	and.w	r3, r3, #3
    80c2:	9a05      	ldr	r2, [sp, #20]
    80c4:	4313      	orrs	r3, r2
    80c6:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    80c8:	9b03      	ldr	r3, [sp, #12]
    80ca:	9a05      	ldr	r2, [sp, #20]
    80cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    80d0:	bf00      	nop
    80d2:	b006      	add	sp, #24
    80d4:	4770      	bx	lr

000080d6 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    80d6:	b084      	sub	sp, #16
    80d8:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    80da:	2300      	movs	r3, #0
    80dc:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    80de:	9b01      	ldr	r3, [sp, #4]
    80e0:	f003 0303 	and.w	r3, r3, #3
    80e4:	2b03      	cmp	r3, #3
    80e6:	d00c      	beq.n	8102 <Adc_HwAcc_GetAverageSelect+0x2c>
    80e8:	2b03      	cmp	r3, #3
    80ea:	d80d      	bhi.n	8108 <Adc_HwAcc_GetAverageSelect+0x32>
    80ec:	2b01      	cmp	r3, #1
    80ee:	d002      	beq.n	80f6 <Adc_HwAcc_GetAverageSelect+0x20>
    80f0:	2b02      	cmp	r3, #2
    80f2:	d003      	beq.n	80fc <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    80f4:	e008      	b.n	8108 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    80f6:	2301      	movs	r3, #1
    80f8:	9303      	str	r3, [sp, #12]
            break;
    80fa:	e006      	b.n	810a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    80fc:	2302      	movs	r3, #2
    80fe:	9303      	str	r3, [sp, #12]
            break;
    8100:	e003      	b.n	810a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8102:	2303      	movs	r3, #3
    8104:	9303      	str	r3, [sp, #12]
            break;
    8106:	e000      	b.n	810a <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8108:	bf00      	nop
    }
    return ReturnValue;
    810a:	9b03      	ldr	r3, [sp, #12]
}
    810c:	4618      	mov	r0, r3
    810e:	b004      	add	sp, #16
    8110:	4770      	bx	lr

00008112 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8112:	b084      	sub	sp, #16
    8114:	9001      	str	r0, [sp, #4]
    8116:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8118:	9b01      	ldr	r3, [sp, #4]
    811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    811e:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8120:	9b03      	ldr	r3, [sp, #12]
    8122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8126:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8128:	9b00      	ldr	r3, [sp, #0]
    812a:	019b      	lsls	r3, r3, #6
    812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8130:	9a03      	ldr	r2, [sp, #12]
    8132:	4313      	orrs	r3, r2
    8134:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8136:	9b01      	ldr	r3, [sp, #4]
    8138:	9a03      	ldr	r2, [sp, #12]
    813a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    813e:	bf00      	nop
    8140:	b004      	add	sp, #16
    8142:	4770      	bx	lr

00008144 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8144:	b084      	sub	sp, #16
    8146:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8148:	2300      	movs	r3, #0
    814a:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    814c:	9b01      	ldr	r3, [sp, #4]
    814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8152:	2b00      	cmp	r3, #0
    8154:	d001      	beq.n	815a <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8156:	2301      	movs	r3, #1
    8158:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    815a:	9b03      	ldr	r3, [sp, #12]
}
    815c:	4618      	mov	r0, r3
    815e:	b004      	add	sp, #16
    8160:	4770      	bx	lr

00008162 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8162:	b086      	sub	sp, #24
    8164:	9003      	str	r0, [sp, #12]
    8166:	9201      	str	r2, [sp, #4]
    8168:	461a      	mov	r2, r3
    816a:	460b      	mov	r3, r1
    816c:	f88d 300b 	strb.w	r3, [sp, #11]
    8170:	4613      	mov	r3, r2
    8172:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8176:	f89d 200b 	ldrb.w	r2, [sp, #11]
    817a:	9b03      	ldr	r3, [sp, #12]
    817c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8180:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8182:	9b05      	ldr	r3, [sp, #20]
    8184:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8188:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    818a:	9b01      	ldr	r3, [sp, #4]
    818c:	f003 031f 	and.w	r3, r3, #31
    8190:	9a05      	ldr	r2, [sp, #20]
    8192:	4313      	orrs	r3, r2
    8194:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8196:	f89d 300a 	ldrb.w	r3, [sp, #10]
    819a:	2b00      	cmp	r3, #0
    819c:	d001      	beq.n	81a2 <Adc_HwAcc_SetChannel+0x40>
    819e:	2340      	movs	r3, #64	; 0x40
    81a0:	e000      	b.n	81a4 <Adc_HwAcc_SetChannel+0x42>
    81a2:	2300      	movs	r3, #0
    81a4:	9a05      	ldr	r2, [sp, #20]
    81a6:	4313      	orrs	r3, r2
    81a8:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    81aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    81ae:	9b03      	ldr	r3, [sp, #12]
    81b0:	9905      	ldr	r1, [sp, #20]
    81b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    81b6:	bf00      	nop
    81b8:	b006      	add	sp, #24
    81ba:	4770      	bx	lr

000081bc <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    81bc:	b082      	sub	sp, #8
    81be:	9001      	str	r0, [sp, #4]
    81c0:	460b      	mov	r3, r1
    81c2:	f8ad 3002 	strh.w	r3, [sp, #2]
    81c6:	4613      	mov	r3, r2
    81c8:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    81cc:	f8bd 3000 	ldrh.w	r3, [sp]
    81d0:	b2da      	uxtb	r2, r3
    81d2:	9b01      	ldr	r3, [sp, #4]
    81d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    81d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    81dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    81e0:	9b01      	ldr	r3, [sp, #4]
    81e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    81e6:	bf00      	nop
    81e8:	b002      	add	sp, #8
    81ea:	4770      	bx	lr

000081ec <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    81ec:	b082      	sub	sp, #8
    81ee:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    81f0:	9b01      	ldr	r3, [sp, #4]
    81f2:	099b      	lsrs	r3, r3, #6
    81f4:	f003 0301 	and.w	r3, r3, #1
    81f8:	2b00      	cmp	r3, #0
    81fa:	bf14      	ite	ne
    81fc:	2301      	movne	r3, #1
    81fe:	2300      	moveq	r3, #0
    8200:	b2db      	uxtb	r3, r3
}
    8202:	4618      	mov	r0, r3
    8204:	b002      	add	sp, #8
    8206:	4770      	bx	lr

00008208 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8208:	b082      	sub	sp, #8
    820a:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    820c:	9b01      	ldr	r3, [sp, #4]
    820e:	09db      	lsrs	r3, r3, #7
    8210:	f003 0301 	and.w	r3, r3, #1
    8214:	2b00      	cmp	r3, #0
    8216:	bf14      	ite	ne
    8218:	2301      	movne	r3, #1
    821a:	2300      	moveq	r3, #0
    821c:	b2db      	uxtb	r3, r3
}
    821e:	4618      	mov	r0, r3
    8220:	b002      	add	sp, #8
    8222:	4770      	bx	lr

00008224 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8224:	b084      	sub	sp, #16
    8226:	9001      	str	r0, [sp, #4]
    8228:	460b      	mov	r3, r1
    822a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    822e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8232:	9b01      	ldr	r3, [sp, #4]
    8234:	3212      	adds	r2, #18
    8236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    823a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    823e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8242:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8246:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    824a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    824e:	4618      	mov	r0, r3
    8250:	b004      	add	sp, #16
    8252:	4770      	bx	lr

00008254 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8254:	b500      	push	{lr}
    8256:	b085      	sub	sp, #20
    8258:	9003      	str	r0, [sp, #12]
    825a:	9102      	str	r1, [sp, #8]
    825c:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    825e:	f003 ff87 	bl	c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8262:	9b02      	ldr	r3, [sp, #8]
    8264:	7a59      	ldrb	r1, [r3, #9]
    8266:	9b02      	ldr	r3, [sp, #8]
    8268:	68db      	ldr	r3, [r3, #12]
    826a:	461a      	mov	r2, r3
    826c:	9803      	ldr	r0, [sp, #12]
    826e:	f7ff ff0d 	bl	808c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8272:	f003 ffa9 	bl	c1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8276:	f003 fde1 	bl	be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    827a:	9901      	ldr	r1, [sp, #4]
    827c:	9803      	ldr	r0, [sp, #12]
    827e:	f7ff ff48 	bl	8112 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8282:	f003 fe07 	bl	be94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8286:	f003 faf7 	bl	b878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    828a:	9b02      	ldr	r3, [sp, #8]
    828c:	7a1b      	ldrb	r3, [r3, #8]
    828e:	4619      	mov	r1, r3
    8290:	9803      	ldr	r0, [sp, #12]
    8292:	f7ff feda 	bl	804a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    8296:	f003 fb1b 	bl	b8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    829a:	f003 fa49 	bl	b730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    829e:	9b02      	ldr	r3, [sp, #8]
    82a0:	6819      	ldr	r1, [r3, #0]
    82a2:	9b02      	ldr	r3, [sp, #8]
    82a4:	685b      	ldr	r3, [r3, #4]
    82a6:	461a      	mov	r2, r3
    82a8:	9803      	ldr	r0, [sp, #12]
    82aa:	f7ff fe73 	bl	7f94 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    82ae:	f003 fa6b 	bl	b788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    82b2:	bf00      	nop
    82b4:	b005      	add	sp, #20
    82b6:	f85d fb04 	ldr.w	pc, [sp], #4

000082ba <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    82ba:	b500      	push	{lr}
    82bc:	b087      	sub	sp, #28
    82be:	9001      	str	r0, [sp, #4]
    82c0:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    82c2:	4a67      	ldr	r2, [pc, #412]	; (8460 <Adc_Ip_Init+0x1a6>)
    82c4:	9b01      	ldr	r3, [sp, #4]
    82c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82ca:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    82cc:	2300      	movs	r3, #0
    82ce:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    82d0:	2300      	movs	r3, #0
    82d2:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    82d4:	9b00      	ldr	r3, [sp, #0]
    82d6:	6819      	ldr	r1, [r3, #0]
    82d8:	9b00      	ldr	r3, [sp, #0]
    82da:	689b      	ldr	r3, [r3, #8]
    82dc:	461a      	mov	r2, r3
    82de:	9802      	ldr	r0, [sp, #8]
    82e0:	f7ff fe58 	bl	7f94 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    82e4:	9b00      	ldr	r3, [sp, #0]
    82e6:	7b1b      	ldrb	r3, [r3, #12]
    82e8:	4619      	mov	r1, r3
    82ea:	9802      	ldr	r0, [sp, #8]
    82ec:	f7ff fead 	bl	804a <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    82f0:	9b00      	ldr	r3, [sp, #0]
    82f2:	7b59      	ldrb	r1, [r3, #13]
    82f4:	9b00      	ldr	r3, [sp, #0]
    82f6:	691b      	ldr	r3, [r3, #16]
    82f8:	461a      	mov	r2, r3
    82fa:	9802      	ldr	r0, [sp, #8]
    82fc:	f7ff fec6 	bl	808c <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    8300:	9b00      	ldr	r3, [sp, #0]
    8302:	695b      	ldr	r3, [r3, #20]
    8304:	4619      	mov	r1, r3
    8306:	9801      	ldr	r0, [sp, #4]
    8308:	f000 f9ea 	bl	86e0 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    830c:	9b04      	ldr	r3, [sp, #16]
    830e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8312:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    8314:	9b00      	ldr	r3, [sp, #0]
    8316:	699b      	ldr	r3, [r3, #24]
    8318:	019b      	lsls	r3, r3, #6
    831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    831e:	9a05      	ldr	r2, [sp, #20]
    8320:	4313      	orrs	r3, r2
    8322:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8324:	9b00      	ldr	r3, [sp, #0]
    8326:	7f1b      	ldrb	r3, [r3, #28]
    8328:	2b00      	cmp	r3, #0
    832a:	d004      	beq.n	8336 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    832c:	9b05      	ldr	r3, [sp, #20]
    832e:	f043 0304 	orr.w	r3, r3, #4
    8332:	9305      	str	r3, [sp, #20]
    8334:	e003      	b.n	833e <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    8336:	9b04      	ldr	r3, [sp, #16]
    8338:	f043 0304 	orr.w	r3, r3, #4
    833c:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    833e:	9b04      	ldr	r3, [sp, #16]
    8340:	f043 0303 	orr.w	r3, r3, #3
    8344:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    8346:	9b00      	ldr	r3, [sp, #0]
    8348:	6a1b      	ldr	r3, [r3, #32]
    834a:	f003 0303 	and.w	r3, r3, #3
    834e:	9a05      	ldr	r2, [sp, #20]
    8350:	4313      	orrs	r3, r2
    8352:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8354:	9b04      	ldr	r3, [sp, #16]
    8356:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    835a:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    835c:	9b00      	ldr	r3, [sp, #0]
    835e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8362:	2b00      	cmp	r3, #0
    8364:	d001      	beq.n	836a <Adc_Ip_Init+0xb0>
    8366:	2320      	movs	r3, #32
    8368:	e000      	b.n	836c <Adc_Ip_Init+0xb2>
    836a:	2300      	movs	r3, #0
    836c:	9a05      	ldr	r2, [sp, #20]
    836e:	4313      	orrs	r3, r2
    8370:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8372:	9b00      	ldr	r3, [sp, #0]
    8374:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    8378:	2b00      	cmp	r3, #0
    837a:	d001      	beq.n	8380 <Adc_Ip_Init+0xc6>
    837c:	2310      	movs	r3, #16
    837e:	e000      	b.n	8382 <Adc_Ip_Init+0xc8>
    8380:	2300      	movs	r3, #0
    8382:	9a05      	ldr	r2, [sp, #20]
    8384:	4313      	orrs	r3, r2
    8386:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    8388:	9b00      	ldr	r3, [sp, #0]
    838a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    838e:	2b00      	cmp	r3, #0
    8390:	d001      	beq.n	8396 <Adc_Ip_Init+0xdc>
    8392:	2308      	movs	r3, #8
    8394:	e000      	b.n	8398 <Adc_Ip_Init+0xde>
    8396:	2300      	movs	r3, #0
    8398:	9a05      	ldr	r2, [sp, #20]
    839a:	4313      	orrs	r3, r2
    839c:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    839e:	9b00      	ldr	r3, [sp, #0]
    83a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    83a2:	461a      	mov	r2, r3
    83a4:	9b02      	ldr	r3, [sp, #8]
    83a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    83aa:	9b00      	ldr	r3, [sp, #0]
    83ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    83ae:	461a      	mov	r2, r3
    83b0:	9b02      	ldr	r3, [sp, #8]
    83b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    83b6:	9a05      	ldr	r2, [sp, #20]
    83b8:	9904      	ldr	r1, [sp, #16]
    83ba:	9802      	ldr	r0, [sp, #8]
    83bc:	f7ff fdd2 	bl	7f64 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    83c0:	9b00      	ldr	r3, [sp, #0]
    83c2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    83c4:	9b00      	ldr	r3, [sp, #0]
    83c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    83c8:	461a      	mov	r2, r3
    83ca:	9802      	ldr	r0, [sp, #8]
    83cc:	f7ff fef6 	bl	81bc <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    83d0:	9b00      	ldr	r3, [sp, #0]
    83d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    83d6:	4619      	mov	r1, r3
    83d8:	9801      	ldr	r0, [sp, #4]
    83da:	f000 f955 	bl	8688 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    83de:	9b00      	ldr	r3, [sp, #0]
    83e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    83e2:	2b00      	cmp	r3, #0
    83e4:	d01c      	beq.n	8420 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    83e6:	2300      	movs	r3, #0
    83e8:	f88d 300f 	strb.w	r3, [sp, #15]
    83ec:	e011      	b.n	8412 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    83ee:	9b00      	ldr	r3, [sp, #0]
    83f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    83f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83f6:	4613      	mov	r3, r2
    83f8:	005b      	lsls	r3, r3, #1
    83fa:	4413      	add	r3, r2
    83fc:	009b      	lsls	r3, r3, #2
    83fe:	440b      	add	r3, r1
    8400:	4619      	mov	r1, r3
    8402:	9801      	ldr	r0, [sp, #4]
    8404:	f000 f9c2 	bl	878c <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8408:	f89d 300f 	ldrb.w	r3, [sp, #15]
    840c:	3301      	adds	r3, #1
    840e:	f88d 300f 	strb.w	r3, [sp, #15]
    8412:	9b00      	ldr	r3, [sp, #0]
    8414:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8418:	f89d 200f 	ldrb.w	r2, [sp, #15]
    841c:	429a      	cmp	r2, r3
    841e:	d3e6      	bcc.n	83ee <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8420:	9b00      	ldr	r3, [sp, #0]
    8422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8424:	490f      	ldr	r1, [pc, #60]	; (8464 <Adc_Ip_Init+0x1aa>)
    8426:	9b01      	ldr	r3, [sp, #4]
    8428:	204c      	movs	r0, #76	; 0x4c
    842a:	fb00 f303 	mul.w	r3, r0, r3
    842e:	440b      	add	r3, r1
    8430:	3308      	adds	r3, #8
    8432:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8434:	9b00      	ldr	r3, [sp, #0]
    8436:	685a      	ldr	r2, [r3, #4]
    8438:	490a      	ldr	r1, [pc, #40]	; (8464 <Adc_Ip_Init+0x1aa>)
    843a:	9b01      	ldr	r3, [sp, #4]
    843c:	204c      	movs	r0, #76	; 0x4c
    843e:	fb00 f303 	mul.w	r3, r0, r3
    8442:	440b      	add	r3, r1
    8444:	3304      	adds	r3, #4
    8446:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    8448:	4a06      	ldr	r2, [pc, #24]	; (8464 <Adc_Ip_Init+0x1aa>)
    844a:	9b01      	ldr	r3, [sp, #4]
    844c:	214c      	movs	r1, #76	; 0x4c
    844e:	fb01 f303 	mul.w	r3, r1, r3
    8452:	4413      	add	r3, r2
    8454:	2201      	movs	r2, #1
    8456:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8458:	bf00      	nop
    845a:	b007      	add	sp, #28
    845c:	f85d fb04 	ldr.w	pc, [sp], #4
    8460:	00010bdc 	.word	0x00010bdc
    8464:	1fff8d48 	.word	0x1fff8d48

00008468 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    8468:	b500      	push	{lr}
    846a:	b0c3      	sub	sp, #268	; 0x10c
    846c:	ab42      	add	r3, sp, #264	; 0x108
    846e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8472:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8474:	2300      	movs	r3, #0
    8476:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    8478:	2303      	movs	r3, #3
    847a:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    847c:	2300      	movs	r3, #0
    847e:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8480:	230c      	movs	r3, #12
    8482:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    8486:	2300      	movs	r3, #0
    8488:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    848c:	2300      	movs	r3, #0
    848e:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8490:	2300      	movs	r3, #0
    8492:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8494:	2300      	movs	r3, #0
    8496:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    8498:	2300      	movs	r3, #0
    849a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    849e:	2300      	movs	r3, #0
    84a0:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    84a2:	2300      	movs	r3, #0
    84a4:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    84a8:	2300      	movs	r3, #0
    84aa:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    84ae:	2300      	movs	r3, #0
    84b0:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    84b4:	2300      	movs	r3, #0
    84b6:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    84ba:	2300      	movs	r3, #0
    84bc:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    84c0:	2300      	movs	r3, #0
    84c2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    84c6:	2304      	movs	r3, #4
    84c8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    84cc:	2300      	movs	r3, #0
    84ce:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    84d2:	2310      	movs	r3, #16
    84d4:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    84d8:	2300      	movs	r3, #0
    84da:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    84de:	e02b      	b.n	8538 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    84e0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    84e4:	ab42      	add	r3, sp, #264	; 0x108
    84e6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    84ea:	4613      	mov	r3, r2
    84ec:	005b      	lsls	r3, r3, #1
    84ee:	4413      	add	r3, r2
    84f0:	009b      	lsls	r3, r3, #2
    84f2:	440b      	add	r3, r1
    84f4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    84f8:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    84fa:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    84fe:	ab42      	add	r3, sp, #264	; 0x108
    8500:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8504:	4613      	mov	r3, r2
    8506:	005b      	lsls	r3, r3, #1
    8508:	4413      	add	r3, r2
    850a:	009b      	lsls	r3, r3, #2
    850c:	440b      	add	r3, r1
    850e:	3304      	adds	r3, #4
    8510:	221f      	movs	r2, #31
    8512:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    8514:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8518:	ab42      	add	r3, sp, #264	; 0x108
    851a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    851e:	4613      	mov	r3, r2
    8520:	005b      	lsls	r3, r3, #1
    8522:	4413      	add	r3, r2
    8524:	009b      	lsls	r3, r3, #2
    8526:	440b      	add	r3, r1
    8528:	3308      	adds	r3, #8
    852a:	2200      	movs	r2, #0
    852c:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    852e:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8532:	3301      	adds	r3, #1
    8534:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    8538:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    853c:	2b0f      	cmp	r3, #15
    853e:	d9cf      	bls.n	84e0 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    8540:	ab02      	add	r3, sp, #8
    8542:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8544:	2300      	movs	r3, #0
    8546:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    8548:	aa32      	add	r2, sp, #200	; 0xc8
    854a:	ab42      	add	r3, sp, #264	; 0x108
    854c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8550:	4611      	mov	r1, r2
    8552:	6818      	ldr	r0, [r3, #0]
    8554:	f7ff feb1 	bl	82ba <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    8558:	4a07      	ldr	r2, [pc, #28]	; (8578 <Adc_Ip_DeInit+0x110>)
    855a:	ab42      	add	r3, sp, #264	; 0x108
    855c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8560:	681b      	ldr	r3, [r3, #0]
    8562:	214c      	movs	r1, #76	; 0x4c
    8564:	fb01 f303 	mul.w	r3, r1, r3
    8568:	4413      	add	r3, r2
    856a:	2200      	movs	r2, #0
    856c:	701a      	strb	r2, [r3, #0]
}
    856e:	bf00      	nop
    8570:	b043      	add	sp, #268	; 0x10c
    8572:	f85d fb04 	ldr.w	pc, [sp], #4
    8576:	bf00      	nop
    8578:	1fff8d48 	.word	0x1fff8d48

0000857c <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    857c:	b500      	push	{lr}
    857e:	b087      	sub	sp, #28
    8580:	9003      	str	r0, [sp, #12]
    8582:	460b      	mov	r3, r1
    8584:	9201      	str	r2, [sp, #4]
    8586:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    858a:	4a0a      	ldr	r2, [pc, #40]	; (85b4 <Adc_Ip_SetAveraging+0x38>)
    858c:	9b03      	ldr	r3, [sp, #12]
    858e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8592:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8594:	f003 fd48 	bl	c028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    8598:	f89d 300b 	ldrb.w	r3, [sp, #11]
    859c:	9a01      	ldr	r2, [sp, #4]
    859e:	4619      	mov	r1, r3
    85a0:	9805      	ldr	r0, [sp, #20]
    85a2:	f7ff fd73 	bl	808c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    85a6:	f003 fd6b 	bl	c080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    85aa:	bf00      	nop
    85ac:	b007      	add	sp, #28
    85ae:	f85d fb04 	ldr.w	pc, [sp], #4
    85b2:	bf00      	nop
    85b4:	00010bdc 	.word	0x00010bdc

000085b8 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    85b8:	b500      	push	{lr}
    85ba:	b085      	sub	sp, #20
    85bc:	9001      	str	r0, [sp, #4]
    85be:	460b      	mov	r3, r1
    85c0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85c4:	4a09      	ldr	r2, [pc, #36]	; (85ec <Adc_Ip_SetSampleTime+0x34>)
    85c6:	9b01      	ldr	r3, [sp, #4]
    85c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85cc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    85ce:	f003 f9a5 	bl	b91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    85d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    85d6:	4619      	mov	r1, r3
    85d8:	9803      	ldr	r0, [sp, #12]
    85da:	f7ff fd36 	bl	804a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    85de:	f003 f9c9 	bl	b974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    85e2:	bf00      	nop
    85e4:	b005      	add	sp, #20
    85e6:	f85d fb04 	ldr.w	pc, [sp], #4
    85ea:	bf00      	nop
    85ec:	00010bdc 	.word	0x00010bdc

000085f0 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    85f0:	b500      	push	{lr}
    85f2:	b085      	sub	sp, #20
    85f4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85f6:	4a0a      	ldr	r2, [pc, #40]	; (8620 <Adc_Ip_EnableDma+0x30>)
    85f8:	9b01      	ldr	r3, [sp, #4]
    85fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85fe:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    8600:	f003 fcc0 	bl	bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    8604:	9b03      	ldr	r3, [sp, #12]
    8606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    860a:	f043 0204 	orr.w	r2, r3, #4
    860e:	9b03      	ldr	r3, [sp, #12]
    8610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    8614:	f003 fce2 	bl	bfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    8618:	bf00      	nop
    861a:	b005      	add	sp, #20
    861c:	f85d fb04 	ldr.w	pc, [sp], #4
    8620:	00010bdc 	.word	0x00010bdc

00008624 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8624:	b500      	push	{lr}
    8626:	b085      	sub	sp, #20
    8628:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    862a:	4a0a      	ldr	r2, [pc, #40]	; (8654 <Adc_Ip_DisableDma+0x30>)
    862c:	9b01      	ldr	r3, [sp, #4]
    862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8632:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8634:	f003 fb5e 	bl	bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    8638:	9b03      	ldr	r3, [sp, #12]
    863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    863e:	f023 0204 	bic.w	r2, r3, #4
    8642:	9b03      	ldr	r3, [sp, #12]
    8644:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    8648:	f003 fb80 	bl	bd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    864c:	bf00      	nop
    864e:	b005      	add	sp, #20
    8650:	f85d fb04 	ldr.w	pc, [sp], #4
    8654:	00010bdc 	.word	0x00010bdc

00008658 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    8658:	b500      	push	{lr}
    865a:	b085      	sub	sp, #20
    865c:	9001      	str	r0, [sp, #4]
    865e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8660:	4a08      	ldr	r2, [pc, #32]	; (8684 <Adc_Ip_SetTriggerMode+0x2c>)
    8662:	9b01      	ldr	r3, [sp, #4]
    8664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8668:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    866a:	f003 fb95 	bl	bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    866e:	9900      	ldr	r1, [sp, #0]
    8670:	9803      	ldr	r0, [sp, #12]
    8672:	f7ff fd4e 	bl	8112 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    8676:	f003 fbbb 	bl	bdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    867a:	bf00      	nop
    867c:	b005      	add	sp, #20
    867e:	f85d fb04 	ldr.w	pc, [sp], #4
    8682:	bf00      	nop
    8684:	00010bdc 	.word	0x00010bdc

00008688 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    8688:	b500      	push	{lr}
    868a:	b085      	sub	sp, #20
    868c:	9001      	str	r0, [sp, #4]
    868e:	460b      	mov	r3, r1
    8690:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8694:	4a11      	ldr	r2, [pc, #68]	; (86dc <Adc_Ip_SetContinuousMode+0x54>)
    8696:	9b01      	ldr	r3, [sp, #4]
    8698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    869c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    869e:	f003 fdb9 	bl	c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    86a2:	9b03      	ldr	r3, [sp, #12]
    86a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    86a8:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    86aa:	9b02      	ldr	r3, [sp, #8]
    86ac:	f023 0308 	bic.w	r3, r3, #8
    86b0:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    86b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    86b6:	2b00      	cmp	r3, #0
    86b8:	d001      	beq.n	86be <Adc_Ip_SetContinuousMode+0x36>
    86ba:	2308      	movs	r3, #8
    86bc:	e000      	b.n	86c0 <Adc_Ip_SetContinuousMode+0x38>
    86be:	2300      	movs	r3, #0
    86c0:	9a02      	ldr	r2, [sp, #8]
    86c2:	4313      	orrs	r3, r2
    86c4:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    86c6:	9b03      	ldr	r3, [sp, #12]
    86c8:	9a02      	ldr	r2, [sp, #8]
    86ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    86ce:	f003 fdcd 	bl	c26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    86d2:	bf00      	nop
    86d4:	b005      	add	sp, #20
    86d6:	f85d fb04 	ldr.w	pc, [sp], #4
    86da:	bf00      	nop
    86dc:	00010bdc 	.word	0x00010bdc

000086e0 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    86e0:	b500      	push	{lr}
    86e2:	b085      	sub	sp, #20
    86e4:	9001      	str	r0, [sp, #4]
    86e6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    86e8:	4a0e      	ldr	r2, [pc, #56]	; (8724 <Adc_Ip_SetResolution+0x44>)
    86ea:	9b01      	ldr	r3, [sp, #4]
    86ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86f0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    86f2:	f002 fddf 	bl	b2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    86f6:	9b03      	ldr	r3, [sp, #12]
    86f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    86fa:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    86fc:	9b02      	ldr	r3, [sp, #8]
    86fe:	f023 030c 	bic.w	r3, r3, #12
    8702:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8704:	9b00      	ldr	r3, [sp, #0]
    8706:	009b      	lsls	r3, r3, #2
    8708:	f003 030c 	and.w	r3, r3, #12
    870c:	9a02      	ldr	r2, [sp, #8]
    870e:	4313      	orrs	r3, r2
    8710:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    8712:	9b03      	ldr	r3, [sp, #12]
    8714:	9a02      	ldr	r2, [sp, #8]
    8716:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    8718:	f002 fdf8 	bl	b30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    871c:	bf00      	nop
    871e:	b005      	add	sp, #20
    8720:	f85d fb04 	ldr.w	pc, [sp], #4
    8724:	00010bdc 	.word	0x00010bdc

00008728 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    8728:	b500      	push	{lr}
    872a:	b085      	sub	sp, #20
    872c:	9001      	str	r0, [sp, #4]
    872e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8730:	4a15      	ldr	r2, [pc, #84]	; (8788 <Adc_Ip_SetClockMode+0x60>)
    8732:	9b01      	ldr	r3, [sp, #4]
    8734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8738:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    873a:	f002 ff55 	bl	b5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    873e:	9b00      	ldr	r3, [sp, #0]
    8740:	6819      	ldr	r1, [r3, #0]
    8742:	9b00      	ldr	r3, [sp, #0]
    8744:	685b      	ldr	r3, [r3, #4]
    8746:	461a      	mov	r2, r3
    8748:	9803      	ldr	r0, [sp, #12]
    874a:	f7ff fc23 	bl	7f94 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    874e:	f002 ff77 	bl	b640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    8752:	f003 f83f 	bl	b7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8756:	9b00      	ldr	r3, [sp, #0]
    8758:	7a1b      	ldrb	r3, [r3, #8]
    875a:	4619      	mov	r1, r3
    875c:	9803      	ldr	r0, [sp, #12]
    875e:	f7ff fc74 	bl	804a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    8762:	f003 f863 	bl	b82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    8766:	f003 fcb1 	bl	c0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    876a:	9b00      	ldr	r3, [sp, #0]
    876c:	7a59      	ldrb	r1, [r3, #9]
    876e:	9b00      	ldr	r3, [sp, #0]
    8770:	68db      	ldr	r3, [r3, #12]
    8772:	461a      	mov	r2, r3
    8774:	9803      	ldr	r0, [sp, #12]
    8776:	f7ff fc89 	bl	808c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    877a:	f003 fcd3 	bl	c124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    877e:	bf00      	nop
    8780:	b005      	add	sp, #20
    8782:	f85d fb04 	ldr.w	pc, [sp], #4
    8786:	bf00      	nop
    8788:	00010bdc 	.word	0x00010bdc

0000878c <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    878c:	b510      	push	{r4, lr}
    878e:	b084      	sub	sp, #16
    8790:	9001      	str	r0, [sp, #4]
    8792:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8794:	4a13      	ldr	r2, [pc, #76]	; (87e4 <Adc_Ip_ConfigChannel+0x58>)
    8796:	9b01      	ldr	r3, [sp, #4]
    8798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    879c:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    879e:	9b00      	ldr	r3, [sp, #0]
    87a0:	685b      	ldr	r3, [r3, #4]
    87a2:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    87a4:	f003 fa54 	bl	bc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    87a8:	9b00      	ldr	r3, [sp, #0]
    87aa:	7819      	ldrb	r1, [r3, #0]
    87ac:	9b00      	ldr	r3, [sp, #0]
    87ae:	7a1b      	ldrb	r3, [r3, #8]
    87b0:	9a02      	ldr	r2, [sp, #8]
    87b2:	9803      	ldr	r0, [sp, #12]
    87b4:	f7ff fcd5 	bl	8162 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    87b8:	f003 fa76 	bl	bca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    87bc:	9b00      	ldr	r3, [sp, #0]
    87be:	781b      	ldrb	r3, [r3, #0]
    87c0:	461c      	mov	r4, r3
    87c2:	9b00      	ldr	r3, [sp, #0]
    87c4:	6859      	ldr	r1, [r3, #4]
    87c6:	4808      	ldr	r0, [pc, #32]	; (87e8 <Adc_Ip_ConfigChannel+0x5c>)
    87c8:	9a01      	ldr	r2, [sp, #4]
    87ca:	4613      	mov	r3, r2
    87cc:	00db      	lsls	r3, r3, #3
    87ce:	4413      	add	r3, r2
    87d0:	005b      	lsls	r3, r3, #1
    87d2:	4413      	add	r3, r2
    87d4:	4423      	add	r3, r4
    87d6:	3302      	adds	r3, #2
    87d8:	009b      	lsls	r3, r3, #2
    87da:	4403      	add	r3, r0
    87dc:	6059      	str	r1, [r3, #4]
}
    87de:	bf00      	nop
    87e0:	b004      	add	sp, #16
    87e2:	bd10      	pop	{r4, pc}
    87e4:	00010bdc 	.word	0x00010bdc
    87e8:	1fff8d48 	.word	0x1fff8d48

000087ec <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    87ec:	b500      	push	{lr}
    87ee:	b089      	sub	sp, #36	; 0x24
    87f0:	9001      	str	r0, [sp, #4]
    87f2:	460b      	mov	r3, r1
    87f4:	f88d 3003 	strb.w	r3, [sp, #3]
    87f8:	4613      	mov	r3, r2
    87fa:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    87fe:	4a24      	ldr	r2, [pc, #144]	; (8890 <Adc_Ip_SetDisabledChannel+0xa4>)
    8800:	9b01      	ldr	r3, [sp, #4]
    8802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8806:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8808:	2300      	movs	r3, #0
    880a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    880c:	2100      	movs	r1, #0
    880e:	4821      	ldr	r0, [pc, #132]	; (8894 <Adc_Ip_SetDisabledChannel+0xa8>)
    8810:	f7f9 f954 	bl	1abc <OsIf_MicrosToTicks>
    8814:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8816:	2000      	movs	r0, #0
    8818:	f7f9 f904 	bl	1a24 <OsIf_GetCounter>
    881c:	4603      	mov	r3, r0
    881e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8820:	2300      	movs	r3, #0
    8822:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8824:	f003 f8cc 	bl	b9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    8828:	f89d 2003 	ldrb.w	r2, [sp, #3]
    882c:	9b05      	ldr	r3, [sp, #20]
    882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8832:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8836:	f043 011f 	orr.w	r1, r3, #31
    883a:	9b05      	ldr	r3, [sp, #20]
    883c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8840:	f003 f8ea 	bl	ba18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8844:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8848:	2b00      	cmp	r3, #0
    884a:	d01c      	beq.n	8886 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    884c:	e008      	b.n	8860 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    884e:	ab03      	add	r3, sp, #12
    8850:	2100      	movs	r1, #0
    8852:	4618      	mov	r0, r3
    8854:	f7f9 f8ff 	bl	1a56 <OsIf_GetElapsed>
    8858:	4602      	mov	r2, r0
    885a:	9b06      	ldr	r3, [sp, #24]
    885c:	4413      	add	r3, r2
    885e:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8860:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8864:	9b05      	ldr	r3, [sp, #20]
    8866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    886a:	f003 031f 	and.w	r3, r3, #31
    886e:	2b1f      	cmp	r3, #31
    8870:	d003      	beq.n	887a <Adc_Ip_SetDisabledChannel+0x8e>
    8872:	9a06      	ldr	r2, [sp, #24]
    8874:	9b04      	ldr	r3, [sp, #16]
    8876:	429a      	cmp	r2, r3
    8878:	d3e9      	bcc.n	884e <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    887a:	9a06      	ldr	r2, [sp, #24]
    887c:	9b04      	ldr	r3, [sp, #16]
    887e:	429a      	cmp	r2, r3
    8880:	d301      	bcc.n	8886 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8882:	2302      	movs	r3, #2
    8884:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    8886:	9b07      	ldr	r3, [sp, #28]
}
    8888:	4618      	mov	r0, r3
    888a:	b009      	add	sp, #36	; 0x24
    888c:	f85d fb04 	ldr.w	pc, [sp], #4
    8890:	00010bdc 	.word	0x00010bdc
    8894:	000186a0 	.word	0x000186a0

00008898 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    8898:	b500      	push	{lr}
    889a:	b087      	sub	sp, #28
    889c:	9003      	str	r0, [sp, #12]
    889e:	9102      	str	r1, [sp, #8]
    88a0:	4613      	mov	r3, r2
    88a2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88a6:	4a0a      	ldr	r2, [pc, #40]	; (88d0 <Adc_Ip_StartConversion+0x38>)
    88a8:	9b03      	ldr	r3, [sp, #12]
    88aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88ae:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    88b0:	f003 f8d8 	bl	ba64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    88b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88b8:	9a02      	ldr	r2, [sp, #8]
    88ba:	2100      	movs	r1, #0
    88bc:	9805      	ldr	r0, [sp, #20]
    88be:	f7ff fc50 	bl	8162 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    88c2:	f003 f8fb 	bl	babc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    88c6:	bf00      	nop
    88c8:	b007      	add	sp, #28
    88ca:	f85d fb04 	ldr.w	pc, [sp], #4
    88ce:	bf00      	nop
    88d0:	00010bdc 	.word	0x00010bdc

000088d4 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    88d4:	b084      	sub	sp, #16
    88d6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88d8:	4a0b      	ldr	r2, [pc, #44]	; (8908 <Adc_Ip_GetConvActiveFlag+0x34>)
    88da:	9b01      	ldr	r3, [sp, #4]
    88dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88e0:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    88e2:	9b03      	ldr	r3, [sp, #12]
    88e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    88e8:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    88ea:	9b02      	ldr	r3, [sp, #8]
    88ec:	09db      	lsrs	r3, r3, #7
    88ee:	f003 0301 	and.w	r3, r3, #1
    88f2:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    88f4:	9b02      	ldr	r3, [sp, #8]
    88f6:	2b00      	cmp	r3, #0
    88f8:	bf14      	ite	ne
    88fa:	2301      	movne	r3, #1
    88fc:	2300      	moveq	r3, #0
    88fe:	b2db      	uxtb	r3, r3
}
    8900:	4618      	mov	r0, r3
    8902:	b004      	add	sp, #16
    8904:	4770      	bx	lr
    8906:	bf00      	nop
    8908:	00010bdc 	.word	0x00010bdc

0000890c <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    890c:	b500      	push	{lr}
    890e:	b085      	sub	sp, #20
    8910:	9001      	str	r0, [sp, #4]
    8912:	460b      	mov	r3, r1
    8914:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8918:	4a08      	ldr	r2, [pc, #32]	; (893c <Adc_Ip_GetChanInterrupt+0x30>)
    891a:	9b01      	ldr	r3, [sp, #4]
    891c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8920:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8928:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    892a:	9803      	ldr	r0, [sp, #12]
    892c:	f7ff fc5e 	bl	81ec <Adc_HwAcc_GetAIEN>
    8930:	4603      	mov	r3, r0
}
    8932:	4618      	mov	r0, r3
    8934:	b005      	add	sp, #20
    8936:	f85d fb04 	ldr.w	pc, [sp], #4
    893a:	bf00      	nop
    893c:	00010bdc 	.word	0x00010bdc

00008940 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8940:	b500      	push	{lr}
    8942:	b085      	sub	sp, #20
    8944:	9001      	str	r0, [sp, #4]
    8946:	460b      	mov	r3, r1
    8948:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    894c:	4a08      	ldr	r2, [pc, #32]	; (8970 <Adc_Ip_GetConvCompleteFlag+0x30>)
    894e:	9b01      	ldr	r3, [sp, #4]
    8950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8954:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    895c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    895e:	9803      	ldr	r0, [sp, #12]
    8960:	f7ff fc52 	bl	8208 <Adc_HwAcc_GetCOCO>
    8964:	4603      	mov	r3, r0
}
    8966:	4618      	mov	r0, r3
    8968:	b005      	add	sp, #20
    896a:	f85d fb04 	ldr.w	pc, [sp], #4
    896e:	bf00      	nop
    8970:	00010bdc 	.word	0x00010bdc

00008974 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8974:	b500      	push	{lr}
    8976:	b085      	sub	sp, #20
    8978:	9001      	str	r0, [sp, #4]
    897a:	460b      	mov	r3, r1
    897c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8980:	4a07      	ldr	r2, [pc, #28]	; (89a0 <Adc_Ip_GetConvData+0x2c>)
    8982:	9b01      	ldr	r3, [sp, #4]
    8984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8988:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    898a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    898e:	4619      	mov	r1, r3
    8990:	9803      	ldr	r0, [sp, #12]
    8992:	f7ff fc47 	bl	8224 <Adc_HwAcc_GetData>
    8996:	4603      	mov	r3, r0
}
    8998:	4618      	mov	r0, r3
    899a:	b005      	add	sp, #20
    899c:	f85d fb04 	ldr.w	pc, [sp], #4
    89a0:	00010bdc 	.word	0x00010bdc

000089a4 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    89a4:	b500      	push	{lr}
    89a6:	b093      	sub	sp, #76	; 0x4c
    89a8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89aa:	4a59      	ldr	r2, [pc, #356]	; (8b10 <Adc_Ip_DoCalibration+0x16c>)
    89ac:	9b01      	ldr	r3, [sp, #4]
    89ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89b2:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    89b4:	2300      	movs	r3, #0
    89b6:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    89b8:	2100      	movs	r1, #0
    89ba:	4856      	ldr	r0, [pc, #344]	; (8b14 <Adc_Ip_DoCalibration+0x170>)
    89bc:	f7f9 f87e 	bl	1abc <OsIf_MicrosToTicks>
    89c0:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    89c2:	2000      	movs	r0, #0
    89c4:	f7f9 f82e 	bl	1a24 <OsIf_GetCounter>
    89c8:	4603      	mov	r3, r0
    89ca:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    89cc:	2300      	movs	r3, #0
    89ce:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    89d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    89d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    89d6:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    89d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    89da:	089b      	lsrs	r3, r3, #2
    89dc:	f003 0301 	and.w	r3, r3, #1
    89e0:	2b00      	cmp	r3, #0
    89e2:	bf14      	ite	ne
    89e4:	2301      	movne	r3, #1
    89e6:	2300      	moveq	r3, #0
    89e8:	b2db      	uxtb	r3, r3
    89ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    89ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    89f0:	f7ff fb71 	bl	80d6 <Adc_HwAcc_GetAverageSelect>
    89f4:	4603      	mov	r3, r0
    89f6:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    89f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    89fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    89fc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    89fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a00:	b2db      	uxtb	r3, r3
    8a02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a0c:	4618      	mov	r0, r3
    8a0e:	f7ff fb99 	bl	8144 <Adc_HwAcc_GetTriggerMode>
    8a12:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    8a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8a18:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    8a1a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8a1c:	f7ff fad8 	bl	7fd0 <Adc_HwAcc_GetClockDivide>
    8a20:	4603      	mov	r3, r0
    8a22:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8a24:	980d      	ldr	r0, [sp, #52]	; 0x34
    8a26:	f7ff faf2 	bl	800e <Adc_HwAcc_GetInputClock>
    8a2a:	4603      	mov	r3, r0
    8a2c:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    8a2e:	2301      	movs	r3, #1
    8a30:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8a34:	2303      	movs	r3, #3
    8a36:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8a38:	230c      	movs	r3, #12
    8a3a:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    8a3e:	4a36      	ldr	r2, [pc, #216]	; (8b18 <Adc_Ip_DoCalibration+0x174>)
    8a40:	9b01      	ldr	r3, [sp, #4]
    8a42:	214c      	movs	r1, #76	; 0x4c
    8a44:	fb01 f303 	mul.w	r3, r1, r3
    8a48:	4413      	add	r3, r2
    8a4a:	3304      	adds	r3, #4
    8a4c:	681b      	ldr	r3, [r3, #0]
    8a4e:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8a50:	9b08      	ldr	r3, [sp, #32]
    8a52:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8a54:	ab03      	add	r3, sp, #12
    8a56:	2200      	movs	r2, #0
    8a58:	4619      	mov	r1, r3
    8a5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a5c:	f7ff fbfa 	bl	8254 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a62:	2200      	movs	r2, #0
    8a64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a6a:	2200      	movs	r2, #0
    8a6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a72:	2200      	movs	r2, #0
    8a74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a7a:	2200      	movs	r2, #0
    8a7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a82:	2200      	movs	r2, #0
    8a84:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a8a:	2200      	movs	r2, #0
    8a8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a92:	2200      	movs	r2, #0
    8a94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8a98:	f003 fb6a 	bl	c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8aa2:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8aaa:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8ab2:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ab8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8abc:	f003 fb84 	bl	c1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8ac0:	e008      	b.n	8ad4 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8ac2:	ab0b      	add	r3, sp, #44	; 0x2c
    8ac4:	2100      	movs	r1, #0
    8ac6:	4618      	mov	r0, r3
    8ac8:	f7f8 ffc5 	bl	1a56 <OsIf_GetElapsed>
    8acc:	4602      	mov	r2, r0
    8ace:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ad0:	4413      	add	r3, r2
    8ad2:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d003      	beq.n	8aea <Adc_Ip_DoCalibration+0x146>
    8ae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ae6:	429a      	cmp	r2, r3
    8ae8:	d3eb      	bcc.n	8ac2 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8aea:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8aee:	429a      	cmp	r2, r3
    8af0:	d301      	bcc.n	8af6 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8af2:	2302      	movs	r3, #2
    8af4:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    8af6:	ab07      	add	r3, sp, #28
    8af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8afa:	4619      	mov	r1, r3
    8afc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8afe:	f7ff fba9 	bl	8254 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8b08:	4618      	mov	r0, r3
    8b0a:	b013      	add	sp, #76	; 0x4c
    8b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    8b10:	00010bdc 	.word	0x00010bdc
    8b14:	000186a0 	.word	0x000186a0
    8b18:	1fff8d48 	.word	0x1fff8d48

00008b1c <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8b1c:	b500      	push	{lr}
    8b1e:	b089      	sub	sp, #36	; 0x24
    8b20:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8b22:	4a1e      	ldr	r2, [pc, #120]	; (8b9c <Adc_Ip_ClearLatchedTriggers+0x80>)
    8b24:	9b01      	ldr	r3, [sp, #4]
    8b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b2a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8b2c:	2300      	movs	r3, #0
    8b2e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8b30:	2100      	movs	r1, #0
    8b32:	481b      	ldr	r0, [pc, #108]	; (8ba0 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8b34:	f7f8 ffc2 	bl	1abc <OsIf_MicrosToTicks>
    8b38:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8b3a:	2000      	movs	r0, #0
    8b3c:	f7f8 ff72 	bl	1a24 <OsIf_GetCounter>
    8b40:	4603      	mov	r3, r0
    8b42:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8b44:	2300      	movs	r3, #0
    8b46:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8b48:	f002 fda0 	bl	b68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8b4c:	9b05      	ldr	r3, [sp, #20]
    8b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8b54:	9b05      	ldr	r3, [sp, #20]
    8b56:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8b58:	f002 fdc4 	bl	b6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8b5c:	e008      	b.n	8b70 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8b5e:	ab03      	add	r3, sp, #12
    8b60:	2100      	movs	r1, #0
    8b62:	4618      	mov	r0, r3
    8b64:	f7f8 ff77 	bl	1a56 <OsIf_GetElapsed>
    8b68:	4602      	mov	r2, r0
    8b6a:	9b06      	ldr	r3, [sp, #24]
    8b6c:	4413      	add	r3, r2
    8b6e:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8b70:	9b05      	ldr	r3, [sp, #20]
    8b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8b76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	d003      	beq.n	8b86 <Adc_Ip_ClearLatchedTriggers+0x6a>
    8b7e:	9a06      	ldr	r2, [sp, #24]
    8b80:	9b04      	ldr	r3, [sp, #16]
    8b82:	429a      	cmp	r2, r3
    8b84:	d3eb      	bcc.n	8b5e <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8b86:	9a06      	ldr	r2, [sp, #24]
    8b88:	9b04      	ldr	r3, [sp, #16]
    8b8a:	429a      	cmp	r2, r3
    8b8c:	d301      	bcc.n	8b92 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8b8e:	2302      	movs	r3, #2
    8b90:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8b92:	9b07      	ldr	r3, [sp, #28]
}
    8b94:	4618      	mov	r0, r3
    8b96:	b009      	add	sp, #36	; 0x24
    8b98:	f85d fb04 	ldr.w	pc, [sp], #4
    8b9c:	00010bdc 	.word	0x00010bdc
    8ba0:	000186a0 	.word	0x000186a0

00008ba4 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8ba4:	b500      	push	{lr}
    8ba6:	b085      	sub	sp, #20
    8ba8:	9001      	str	r0, [sp, #4]
    8baa:	460b      	mov	r3, r1
    8bac:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8bb0:	4a0c      	ldr	r2, [pc, #48]	; (8be4 <Adc_Ip_EnableChannelNotification+0x40>)
    8bb2:	9b01      	ldr	r3, [sp, #4]
    8bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8bba:	f002 ffa5 	bl	bb08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8bbe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8bc2:	9b03      	ldr	r3, [sp, #12]
    8bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8bcc:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8bd0:	9b03      	ldr	r3, [sp, #12]
    8bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    8bd6:	f002 ffc3 	bl	bb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    8bda:	bf00      	nop
    8bdc:	b005      	add	sp, #20
    8bde:	f85d fb04 	ldr.w	pc, [sp], #4
    8be2:	bf00      	nop
    8be4:	00010bdc 	.word	0x00010bdc

00008be8 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    8be8:	b500      	push	{lr}
    8bea:	b085      	sub	sp, #20
    8bec:	9001      	str	r0, [sp, #4]
    8bee:	460b      	mov	r3, r1
    8bf0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8bf4:	4a0c      	ldr	r2, [pc, #48]	; (8c28 <Adc_Ip_DisableChannelNotification+0x40>)
    8bf6:	9b01      	ldr	r3, [sp, #4]
    8bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bfc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8bfe:	f002 ffd5 	bl	bbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8c02:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c06:	9b03      	ldr	r3, [sp, #12]
    8c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c10:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8c14:	9b03      	ldr	r3, [sp, #12]
    8c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    8c1a:	f002 fff3 	bl	bc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8c1e:	bf00      	nop
    8c20:	b005      	add	sp, #20
    8c22:	f85d fb04 	ldr.w	pc, [sp], #4
    8c26:	bf00      	nop
    8c28:	00010bdc 	.word	0x00010bdc

00008c2c <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8c2c:	b500      	push	{lr}
    8c2e:	b085      	sub	sp, #20
    8c30:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8c32:	4a0a      	ldr	r2, [pc, #40]	; (8c5c <Adc_Ip_ClearTrigErrReg+0x30>)
    8c34:	9b01      	ldr	r3, [sp, #4]
    8c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c3a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8c3c:	f003 f950 	bl	bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8c40:	9b03      	ldr	r3, [sp, #12]
    8c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8c46:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    8c4a:	9b03      	ldr	r3, [sp, #12]
    8c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8c50:	f003 f972 	bl	bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8c54:	bf00      	nop
    8c56:	b005      	add	sp, #20
    8c58:	f85d fb04 	ldr.w	pc, [sp], #4
    8c5c:	00010bdc 	.word	0x00010bdc

00008c60 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8c60:	b084      	sub	sp, #16
    8c62:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8c64:	4a06      	ldr	r2, [pc, #24]	; (8c80 <Adc_Ip_GetTrigErrReg+0x20>)
    8c66:	9b01      	ldr	r3, [sp, #4]
    8c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c6c:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8c6e:	9b03      	ldr	r3, [sp, #12]
    8c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8c74:	0e1b      	lsrs	r3, r3, #24
    8c76:	f003 030f 	and.w	r3, r3, #15
}
    8c7a:	4618      	mov	r0, r3
    8c7c:	b004      	add	sp, #16
    8c7e:	4770      	bx	lr
    8c80:	00010bdc 	.word	0x00010bdc

00008c84 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8c84:	b082      	sub	sp, #8
    8c86:	9001      	str	r0, [sp, #4]
    8c88:	460b      	mov	r3, r1
    8c8a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8c8e:	4a06      	ldr	r2, [pc, #24]	; (8ca8 <Adc_Ip_GetDataAddress+0x24>)
    8c90:	9b01      	ldr	r3, [sp, #4]
    8c92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8c96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c9a:	3312      	adds	r3, #18
    8c9c:	009b      	lsls	r3, r3, #2
    8c9e:	4413      	add	r3, r2
}
    8ca0:	4618      	mov	r0, r3
    8ca2:	b002      	add	sp, #8
    8ca4:	4770      	bx	lr
    8ca6:	bf00      	nop
    8ca8:	00010bdc 	.word	0x00010bdc

00008cac <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8cac:	b088      	sub	sp, #32
    8cae:	9003      	str	r0, [sp, #12]
    8cb0:	9102      	str	r1, [sp, #8]
    8cb2:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8cb4:	4a25      	ldr	r2, [pc, #148]	; (8d4c <Adc_Ip_GetChanData+0xa0>)
    8cb6:	9b03      	ldr	r3, [sp, #12]
    8cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cbc:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8cbe:	2300      	movs	r3, #0
    8cc0:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8cc2:	2300      	movs	r3, #0
    8cc4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8cc8:	2300      	movs	r3, #0
    8cca:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8cce:	2300      	movs	r3, #0
    8cd0:	f88d 3019 	strb.w	r3, [sp, #25]
    8cd4:	e019      	b.n	8d0a <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8cd6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8cda:	481d      	ldr	r0, [pc, #116]	; (8d50 <Adc_Ip_GetChanData+0xa4>)
    8cdc:	9a03      	ldr	r2, [sp, #12]
    8cde:	4613      	mov	r3, r2
    8ce0:	00db      	lsls	r3, r3, #3
    8ce2:	4413      	add	r3, r2
    8ce4:	005b      	lsls	r3, r3, #1
    8ce6:	4413      	add	r3, r2
    8ce8:	440b      	add	r3, r1
    8cea:	3302      	adds	r3, #2
    8cec:	009b      	lsls	r3, r3, #2
    8cee:	4403      	add	r3, r0
    8cf0:	685b      	ldr	r3, [r3, #4]
    8cf2:	9a02      	ldr	r2, [sp, #8]
    8cf4:	429a      	cmp	r2, r3
    8cf6:	d103      	bne.n	8d00 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8cf8:	2301      	movs	r3, #1
    8cfa:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8cfe:	e008      	b.n	8d12 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8d00:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8d04:	3301      	adds	r3, #1
    8d06:	f88d 3019 	strb.w	r3, [sp, #25]
    8d0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8d0e:	2b0f      	cmp	r3, #15
    8d10:	d9e1      	bls.n	8cd6 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8d12:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8d16:	2b00      	cmp	r3, #0
    8d18:	d00e      	beq.n	8d38 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8d1a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8d1e:	9b05      	ldr	r3, [sp, #20]
    8d20:	3212      	adds	r2, #18
    8d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d26:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8d2a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8d32:	f8ad 301a 	strh.w	r3, [sp, #26]
    8d36:	e001      	b.n	8d3c <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8d38:	2301      	movs	r3, #1
    8d3a:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8d3c:	9b01      	ldr	r3, [sp, #4]
    8d3e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8d42:	801a      	strh	r2, [r3, #0]

    return Status;
    8d44:	9b07      	ldr	r3, [sp, #28]
}
    8d46:	4618      	mov	r0, r3
    8d48:	b008      	add	sp, #32
    8d4a:	4770      	bx	lr
    8d4c:	00010bdc 	.word	0x00010bdc
    8d50:	1fff8d48 	.word	0x1fff8d48

00008d54 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8d54:	b500      	push	{lr}
    8d56:	b085      	sub	sp, #20
    8d58:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8d5a:	2300      	movs	r3, #0
    8d5c:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8d60:	2300      	movs	r3, #0
    8d62:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8d66:	4a32      	ldr	r2, [pc, #200]	; (8e30 <Adc_Ip_IRQHandler+0xdc>)
    8d68:	9b01      	ldr	r3, [sp, #4]
    8d6a:	214c      	movs	r1, #76	; 0x4c
    8d6c:	fb01 f303 	mul.w	r3, r1, r3
    8d70:	4413      	add	r3, r2
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	2b00      	cmp	r3, #0
    8d76:	d040      	beq.n	8dfa <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8d78:	4a2d      	ldr	r2, [pc, #180]	; (8e30 <Adc_Ip_IRQHandler+0xdc>)
    8d7a:	9b01      	ldr	r3, [sp, #4]
    8d7c:	214c      	movs	r1, #76	; 0x4c
    8d7e:	fb01 f303 	mul.w	r3, r1, r3
    8d82:	4413      	add	r3, r2
    8d84:	3308      	adds	r3, #8
    8d86:	681b      	ldr	r3, [r3, #0]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d04d      	beq.n	8e28 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8d8c:	2300      	movs	r3, #0
    8d8e:	f88d 300f 	strb.w	r3, [sp, #15]
    8d92:	e02d      	b.n	8df0 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8d94:	4a27      	ldr	r2, [pc, #156]	; (8e34 <Adc_Ip_IRQHandler+0xe0>)
    8d96:	9b01      	ldr	r3, [sp, #4]
    8d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d9c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8da4:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8da6:	9802      	ldr	r0, [sp, #8]
    8da8:	f7ff fa20 	bl	81ec <Adc_HwAcc_GetAIEN>
    8dac:	4603      	mov	r3, r0
    8dae:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8db2:	9802      	ldr	r0, [sp, #8]
    8db4:	f7ff fa28 	bl	8208 <Adc_HwAcc_GetCOCO>
    8db8:	4603      	mov	r3, r0
    8dba:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8dc2:	2b00      	cmp	r3, #0
    8dc4:	d00f      	beq.n	8de6 <Adc_Ip_IRQHandler+0x92>
    8dc6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8dca:	2b00      	cmp	r3, #0
    8dcc:	d00b      	beq.n	8de6 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8dce:	4a18      	ldr	r2, [pc, #96]	; (8e30 <Adc_Ip_IRQHandler+0xdc>)
    8dd0:	9b01      	ldr	r3, [sp, #4]
    8dd2:	214c      	movs	r1, #76	; 0x4c
    8dd4:	fb01 f303 	mul.w	r3, r1, r3
    8dd8:	4413      	add	r3, r2
    8dda:	3308      	adds	r3, #8
    8ddc:	681b      	ldr	r3, [r3, #0]
    8dde:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8de2:	4610      	mov	r0, r2
    8de4:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8de6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8dea:	3301      	adds	r3, #1
    8dec:	f88d 300f 	strb.w	r3, [sp, #15]
    8df0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8df4:	2b0f      	cmp	r3, #15
    8df6:	d9cd      	bls.n	8d94 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8df8:	e016      	b.n	8e28 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8dfa:	2300      	movs	r3, #0
    8dfc:	f88d 300f 	strb.w	r3, [sp, #15]
    8e00:	e00e      	b.n	8e20 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8e02:	4a0c      	ldr	r2, [pc, #48]	; (8e34 <Adc_Ip_IRQHandler+0xe0>)
    8e04:	9b01      	ldr	r3, [sp, #4]
    8e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8e0e:	4611      	mov	r1, r2
    8e10:	4618      	mov	r0, r3
    8e12:	f7ff fa07 	bl	8224 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8e16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e1a:	3301      	adds	r3, #1
    8e1c:	f88d 300f 	strb.w	r3, [sp, #15]
    8e20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e24:	2b0f      	cmp	r3, #15
    8e26:	d9ec      	bls.n	8e02 <Adc_Ip_IRQHandler+0xae>
}
    8e28:	bf00      	nop
    8e2a:	b005      	add	sp, #20
    8e2c:	f85d fb04 	ldr.w	pc, [sp], #4
    8e30:	1fff8d48 	.word	0x1fff8d48
    8e34:	00010bdc 	.word	0x00010bdc

00008e38 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8e38:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8e3a:	2000      	movs	r0, #0
    8e3c:	f7ff ff8a 	bl	8d54 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8e40:	f3bf 8f4f 	dsb	sy
}
    8e44:	bf00      	nop
    8e46:	bd08      	pop	{r3, pc}

00008e48 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8e48:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8e4a:	2001      	movs	r0, #1
    8e4c:	f7ff ff82 	bl	8d54 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8e50:	f3bf 8f4f 	dsb	sy
}
    8e54:	bf00      	nop
    8e56:	bd08      	pop	{r3, pc}

00008e58 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8e58:	b510      	push	{r4, lr}
    8e5a:	b084      	sub	sp, #16
    8e5c:	4603      	mov	r3, r0
    8e5e:	460a      	mov	r2, r1
    8e60:	f88d 3007 	strb.w	r3, [sp, #7]
    8e64:	4613      	mov	r3, r2
    8e66:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8e6a:	2300      	movs	r3, #0
    8e6c:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8e70:	2300      	movs	r3, #0
    8e72:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8e76:	f002 f831 	bl	aedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e7e:	4a24      	ldr	r2, [pc, #144]	; (8f10 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8e80:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8e84:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8e88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8e8c:	2b01      	cmp	r3, #1
    8e8e:	d806      	bhi.n	8e9e <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e94:	4a1e      	ldr	r2, [pc, #120]	; (8f10 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8e96:	2100      	movs	r1, #0
    8e98:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    8e9c:	e032      	b.n	8f04 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8e9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8ea2:	3301      	adds	r3, #1
    8ea4:	f8ad 300e 	strh.w	r3, [sp, #14]
    8ea8:	e01b      	b.n	8ee2 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8eaa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8eae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8eb2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8eb6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8eba:	3a01      	subs	r2, #1
    8ebc:	4c14      	ldr	r4, [pc, #80]	; (8f10 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8ebe:	0080      	lsls	r0, r0, #2
    8ec0:	4403      	add	r3, r0
    8ec2:	005b      	lsls	r3, r3, #1
    8ec4:	4423      	add	r3, r4
    8ec6:	885b      	ldrh	r3, [r3, #2]
    8ec8:	b29c      	uxth	r4, r3
    8eca:	4811      	ldr	r0, [pc, #68]	; (8f10 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8ecc:	008b      	lsls	r3, r1, #2
    8ece:	4413      	add	r3, r2
    8ed0:	005b      	lsls	r3, r3, #1
    8ed2:	4403      	add	r3, r0
    8ed4:	4622      	mov	r2, r4
    8ed6:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8ed8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8edc:	3301      	adds	r3, #1
    8ede:	f8ad 300e 	strh.w	r3, [sp, #14]
    8ee2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8ee6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8eea:	429a      	cmp	r2, r3
    8eec:	d3dd      	bcc.n	8eaa <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8eee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ef2:	4a07      	ldr	r2, [pc, #28]	; (8f10 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8ef4:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8ef8:	b292      	uxth	r2, r2
    8efa:	3a01      	subs	r2, #1
    8efc:	b291      	uxth	r1, r2
    8efe:	4a04      	ldr	r2, [pc, #16]	; (8f10 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8f00:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8f04:	f002 f816 	bl	af34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8f08:	bf00      	nop
    8f0a:	b004      	add	sp, #16
    8f0c:	bd10      	pop	{r4, pc}
    8f0e:	bf00      	nop
    8f10:	1fff8d38 	.word	0x1fff8d38

00008f14 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8f14:	b500      	push	{lr}
    8f16:	b087      	sub	sp, #28
    8f18:	9003      	str	r0, [sp, #12]
    8f1a:	9102      	str	r1, [sp, #8]
    8f1c:	9201      	str	r2, [sp, #4]
    8f1e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8f22:	2300      	movs	r3, #0
    8f24:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8f28:	9b03      	ldr	r3, [sp, #12]
    8f2a:	789b      	ldrb	r3, [r3, #2]
    8f2c:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8f30:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8f34:	4a29      	ldr	r2, [pc, #164]	; (8fdc <Adc_Ipw_ReadGroupConvData+0xc8>)
    8f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3a:	681a      	ldr	r2, [r3, #0]
    8f3c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8f40:	4413      	add	r3, r2
    8f42:	7c1b      	ldrb	r3, [r3, #16]
    8f44:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8f48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8f4c:	4a23      	ldr	r2, [pc, #140]	; (8fdc <Adc_Ipw_ReadGroupConvData+0xc8>)
    8f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f52:	681b      	ldr	r3, [r3, #0]
    8f54:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f5c:	695b      	ldr	r3, [r3, #20]
    8f5e:	4618      	mov	r0, r3
    8f60:	f000 fbce 	bl	9700 <Adc_Ipw_CalculateNumsBitShift>
    8f64:	4603      	mov	r3, r0
    8f66:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8f6a:	9b03      	ldr	r3, [sp, #12]
    8f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8f70:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8f74:	2300      	movs	r3, #0
    8f76:	f88d 3017 	strb.w	r3, [sp, #23]
    8f7a:	e022      	b.n	8fc2 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8f7c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f80:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8f84:	4611      	mov	r1, r2
    8f86:	4618      	mov	r0, r3
    8f88:	f7ff fcf4 	bl	8974 <Adc_Ip_GetConvData>
    8f8c:	4603      	mov	r3, r0
    8f8e:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8f92:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8f96:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8f9a:	fa02 f303 	lsl.w	r3, r2, r3
    8f9e:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8fa2:	9b01      	ldr	r3, [sp, #4]
    8fa4:	2201      	movs	r2, #1
    8fa6:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8fa8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8fac:	005b      	lsls	r3, r3, #1
    8fae:	9a02      	ldr	r2, [sp, #8]
    8fb0:	4413      	add	r3, r2
    8fb2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8fb6:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8fb8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8fbc:	3301      	adds	r3, #1
    8fbe:	f88d 3017 	strb.w	r3, [sp, #23]
    8fc2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8fc6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8fca:	429a      	cmp	r2, r3
    8fcc:	d3d6      	bcc.n	8f7c <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8fce:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8fd2:	4618      	mov	r0, r3
    8fd4:	b007      	add	sp, #28
    8fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    8fda:	bf00      	nop
    8fdc:	1fff8d0c 	.word	0x1fff8d0c

00008fe0 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8fe0:	b500      	push	{lr}
    8fe2:	b087      	sub	sp, #28
    8fe4:	9003      	str	r0, [sp, #12]
    8fe6:	9102      	str	r1, [sp, #8]
    8fe8:	9201      	str	r2, [sp, #4]
    8fea:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8fee:	2301      	movs	r3, #1
    8ff0:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8ff4:	2300      	movs	r3, #0
    8ff6:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8ffa:	9b03      	ldr	r3, [sp, #12]
    8ffc:	789b      	ldrb	r3, [r3, #2]
    8ffe:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9002:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9006:	4a19      	ldr	r2, [pc, #100]	; (906c <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900c:	681a      	ldr	r2, [r3, #0]
    900e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9012:	4413      	add	r3, r2
    9014:	7c1b      	ldrb	r3, [r3, #16]
    9016:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    901a:	9b03      	ldr	r3, [sp, #12]
    901c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9020:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9024:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9028:	f89d 3014 	ldrb.w	r3, [sp, #20]
    902c:	2100      	movs	r1, #0
    902e:	4618      	mov	r0, r3
    9030:	f000 fe2a 	bl	9c88 <Adc_Ipw_CheckValidConversion>
    9034:	4603      	mov	r3, r0
    9036:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    903a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    903e:	2b00      	cmp	r3, #0
    9040:	d00a      	beq.n	9058 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9042:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9046:	9a01      	ldr	r2, [sp, #4]
    9048:	9902      	ldr	r1, [sp, #8]
    904a:	9803      	ldr	r0, [sp, #12]
    904c:	f7ff ff62 	bl	8f14 <Adc_Ipw_ReadGroupConvData>
    9050:	4603      	mov	r3, r0
    9052:	f88d 3017 	strb.w	r3, [sp, #23]
    9056:	e002      	b.n	905e <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9058:	2301      	movs	r3, #1
    905a:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    905e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9062:	4618      	mov	r0, r3
    9064:	b007      	add	sp, #28
    9066:	f85d fb04 	ldr.w	pc, [sp], #4
    906a:	bf00      	nop
    906c:	1fff8d0c 	.word	0x1fff8d0c

00009070 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9070:	b088      	sub	sp, #32
    9072:	4603      	mov	r3, r0
    9074:	9100      	str	r1, [sp, #0]
    9076:	f8ad 3006 	strh.w	r3, [sp, #6]
    907a:	4613      	mov	r3, r2
    907c:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9080:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9084:	4a3a      	ldr	r2, [pc, #232]	; (9170 <Adc_Ipw_WriteDataBuffer+0x100>)
    9086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    908a:	68da      	ldr	r2, [r3, #12]
    908c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9090:	005b      	lsls	r3, r3, #1
    9092:	4413      	add	r3, r2
    9094:	881b      	ldrh	r3, [r3, #0]
    9096:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    909a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    909e:	4a34      	ldr	r2, [pc, #208]	; (9170 <Adc_Ipw_WriteDataBuffer+0x100>)
    90a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a4:	685a      	ldr	r2, [r3, #4]
    90a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    90aa:	2134      	movs	r1, #52	; 0x34
    90ac:	fb01 f303 	mul.w	r3, r1, r3
    90b0:	4413      	add	r3, r2
    90b2:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    90b4:	9b04      	ldr	r3, [sp, #16]
    90b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    90ba:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    90be:	2300      	movs	r3, #0
    90c0:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    90c2:	2300      	movs	r3, #0
    90c4:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    90c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    90cc:	4929      	ldr	r1, [pc, #164]	; (9174 <Adc_Ipw_WriteDataBuffer+0x104>)
    90ce:	4613      	mov	r3, r2
    90d0:	009b      	lsls	r3, r3, #2
    90d2:	4413      	add	r3, r2
    90d4:	009b      	lsls	r3, r3, #2
    90d6:	440b      	add	r3, r1
    90d8:	3308      	adds	r3, #8
    90da:	881b      	ldrh	r3, [r3, #0]
    90dc:	b29b      	uxth	r3, r3
    90de:	3b01      	subs	r3, #1
    90e0:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    90e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    90e8:	4922      	ldr	r1, [pc, #136]	; (9174 <Adc_Ipw_WriteDataBuffer+0x104>)
    90ea:	4613      	mov	r3, r2
    90ec:	009b      	lsls	r3, r3, #2
    90ee:	4413      	add	r3, r2
    90f0:	009b      	lsls	r3, r3, #2
    90f2:	440b      	add	r3, r1
    90f4:	3308      	adds	r3, #8
    90f6:	881b      	ldrh	r3, [r3, #0]
    90f8:	b29b      	uxth	r3, r3
    90fa:	2b00      	cmp	r3, #0
    90fc:	d104      	bne.n	9108 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    90fe:	9b04      	ldr	r3, [sp, #16]
    9100:	8b9b      	ldrh	r3, [r3, #28]
    9102:	3b01      	subs	r3, #1
    9104:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9108:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    910c:	4919      	ldr	r1, [pc, #100]	; (9174 <Adc_Ipw_WriteDataBuffer+0x104>)
    910e:	4613      	mov	r3, r2
    9110:	009b      	lsls	r3, r3, #2
    9112:	4413      	add	r3, r2
    9114:	009b      	lsls	r3, r3, #2
    9116:	440b      	add	r3, r1
    9118:	330c      	adds	r3, #12
    911a:	681a      	ldr	r2, [r3, #0]
    911c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9120:	005b      	lsls	r3, r3, #1
    9122:	4413      	add	r3, r2
    9124:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9126:	9b04      	ldr	r3, [sp, #16]
    9128:	8b9b      	ldrh	r3, [r3, #28]
    912a:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    912e:	2300      	movs	r3, #0
    9130:	f88d 301f 	strb.w	r3, [sp, #31]
    9134:	e012      	b.n	915c <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9136:	f89d 301f 	ldrb.w	r3, [sp, #31]
    913a:	005b      	lsls	r3, r3, #1
    913c:	9a00      	ldr	r2, [sp, #0]
    913e:	4413      	add	r3, r2
    9140:	9a06      	ldr	r2, [sp, #24]
    9142:	8812      	ldrh	r2, [r2, #0]
    9144:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9146:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    914a:	005b      	lsls	r3, r3, #1
    914c:	9a06      	ldr	r2, [sp, #24]
    914e:	4413      	add	r3, r2
    9150:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9152:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9156:	3301      	adds	r3, #1
    9158:	f88d 301f 	strb.w	r3, [sp, #31]
    915c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9160:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9164:	429a      	cmp	r2, r3
    9166:	d3e6      	bcc.n	9136 <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9168:	bf00      	nop
    916a:	bf00      	nop
    916c:	b008      	add	sp, #32
    916e:	4770      	bx	lr
    9170:	1fff8d0c 	.word	0x1fff8d0c
    9174:	1fff8d10 	.word	0x1fff8d10

00009178 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9178:	b500      	push	{lr}
    917a:	b089      	sub	sp, #36	; 0x24
    917c:	9200      	str	r2, [sp, #0]
    917e:	461a      	mov	r2, r3
    9180:	4603      	mov	r3, r0
    9182:	f88d 3007 	strb.w	r3, [sp, #7]
    9186:	460b      	mov	r3, r1
    9188:	f8ad 3004 	strh.w	r3, [sp, #4]
    918c:	4613      	mov	r3, r2
    918e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9192:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9196:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    919a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    919e:	f003 0307 	and.w	r3, r3, #7
    91a2:	b2db      	uxtb	r3, r3
    91a4:	2b00      	cmp	r3, #0
    91a6:	d006      	beq.n	91b6 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    91a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91ac:	08db      	lsrs	r3, r3, #3
    91ae:	b2db      	uxtb	r3, r3
    91b0:	3301      	adds	r3, #1
    91b2:	b2db      	uxtb	r3, r3
    91b4:	e003      	b.n	91be <Adc_Ipw_ConfigurePdbChannels+0x46>
    91b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91ba:	08db      	lsrs	r3, r3, #3
    91bc:	b2db      	uxtb	r3, r3
    91be:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    91c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    91c6:	4987      	ldr	r1, [pc, #540]	; (93e4 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    91c8:	4613      	mov	r3, r2
    91ca:	009b      	lsls	r3, r3, #2
    91cc:	4413      	add	r3, r2
    91ce:	009b      	lsls	r3, r3, #2
    91d0:	440b      	add	r3, r1
    91d2:	3310      	adds	r3, #16
    91d4:	781b      	ldrb	r3, [r3, #0]
    91d6:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    91da:	4b83      	ldr	r3, [pc, #524]	; (93e8 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    91dc:	681b      	ldr	r3, [r3, #0]
    91de:	681a      	ldr	r2, [r3, #0]
    91e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91e4:	4413      	add	r3, r2
    91e6:	7c1b      	ldrb	r3, [r3, #16]
    91e8:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    91ec:	9b00      	ldr	r3, [sp, #0]
    91ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91f0:	691b      	ldr	r3, [r3, #16]
    91f2:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    91f4:	2300      	movs	r3, #0
    91f6:	f88d 301f 	strb.w	r3, [sp, #31]
    91fa:	e0e6      	b.n	93ca <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    91fc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9200:	08db      	lsrs	r3, r3, #3
    9202:	b2db      	uxtb	r3, r3
    9204:	2b00      	cmp	r3, #0
    9206:	d102      	bne.n	920e <Adc_Ipw_ConfigurePdbChannels+0x96>
    9208:	f89d 301d 	ldrb.w	r3, [sp, #29]
    920c:	e000      	b.n	9210 <Adc_Ipw_ConfigurePdbChannels+0x98>
    920e:	2308      	movs	r3, #8
    9210:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9214:	9b00      	ldr	r3, [sp, #0]
    9216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9218:	7bdb      	ldrb	r3, [r3, #15]
    921a:	2b00      	cmp	r3, #0
    921c:	d05e      	beq.n	92dc <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    921e:	9b00      	ldr	r3, [sp, #0]
    9220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9222:	7b9b      	ldrb	r3, [r3, #14]
    9224:	f083 0301 	eor.w	r3, r3, #1
    9228:	b2db      	uxtb	r3, r3
    922a:	2b00      	cmp	r3, #0
    922c:	d02a      	beq.n	9284 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    922e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9232:	f1c3 0308 	rsb	r3, r3, #8
    9236:	22ff      	movs	r2, #255	; 0xff
    9238:	fa22 f303 	lsr.w	r3, r2, r3
    923c:	b2db      	uxtb	r3, r3
    923e:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9242:	2300      	movs	r3, #0
    9244:	f88d 301e 	strb.w	r3, [sp, #30]
    9248:	e015      	b.n	9276 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    924a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    924e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9252:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9256:	4413      	add	r3, r2
    9258:	005b      	lsls	r3, r3, #1
    925a:	9a05      	ldr	r2, [sp, #20]
    925c:	4413      	add	r3, r2
    925e:	881b      	ldrh	r3, [r3, #0]
    9260:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9264:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9268:	f001 fd16 	bl	ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    926c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9270:	3301      	adds	r3, #1
    9272:	f88d 301e 	strb.w	r3, [sp, #30]
    9276:	f89d 201e 	ldrb.w	r2, [sp, #30]
    927a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    927e:	429a      	cmp	r2, r3
    9280:	d3e3      	bcc.n	924a <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9282:	e051      	b.n	9328 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9284:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9288:	2b00      	cmp	r3, #0
    928a:	d110      	bne.n	92ae <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    928c:	2301      	movs	r3, #1
    928e:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9292:	9b05      	ldr	r3, [sp, #20]
    9294:	881b      	ldrh	r3, [r3, #0]
    9296:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    929a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    929e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    92a2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    92a6:	2200      	movs	r2, #0
    92a8:	f001 fcf6 	bl	ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    92ac:	e03c      	b.n	9328 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    92ae:	2301      	movs	r3, #1
    92b0:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    92b4:	9b00      	ldr	r3, [sp, #0]
    92b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92b8:	899a      	ldrh	r2, [r3, #12]
    92ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92be:	b29b      	uxth	r3, r3
    92c0:	fb12 f303 	smulbb	r3, r2, r3
    92c4:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    92c8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    92cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    92d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
    92d4:	2200      	movs	r2, #0
    92d6:	f001 fcdf 	bl	ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    92da:	e025      	b.n	9328 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    92dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92e0:	2b00      	cmp	r3, #0
    92e2:	d10b      	bne.n	92fc <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    92e4:	2301      	movs	r3, #1
    92e6:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    92ea:	f89d 0018 	ldrb.w	r0, [sp, #24]
    92ee:	f89d 101f 	ldrb.w	r1, [sp, #31]
    92f2:	2300      	movs	r3, #0
    92f4:	2200      	movs	r2, #0
    92f6:	f001 fccf 	bl	ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    92fa:	e015      	b.n	9328 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    92fc:	2301      	movs	r3, #1
    92fe:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9302:	9b00      	ldr	r3, [sp, #0]
    9304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9306:	899a      	ldrh	r2, [r3, #12]
    9308:	f89d 301f 	ldrb.w	r3, [sp, #31]
    930c:	b29b      	uxth	r3, r3
    930e:	fb12 f303 	smulbb	r3, r2, r3
    9312:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9316:	f89d 0018 	ldrb.w	r0, [sp, #24]
    931a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    931e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9322:	2200      	movs	r2, #0
    9324:	f001 fcb8 	bl	ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9328:	f89d 3018 	ldrb.w	r3, [sp, #24]
    932c:	4618      	mov	r0, r3
    932e:	f001 fb87 	bl	aa40 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    9332:	f89d 201d 	ldrb.w	r2, [sp, #29]
    9336:	f89d 3013 	ldrb.w	r3, [sp, #19]
    933a:	1ad3      	subs	r3, r2, r3
    933c:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9340:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9344:	b29a      	uxth	r2, r3
    9346:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    934a:	4413      	add	r3, r2
    934c:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9350:	9b00      	ldr	r3, [sp, #0]
    9352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9354:	7b9b      	ldrb	r3, [r3, #14]
    9356:	2b00      	cmp	r3, #0
    9358:	d01d      	beq.n	9396 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    935a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    935e:	2b00      	cmp	r3, #0
    9360:	d10c      	bne.n	937c <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9362:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9366:	f1c3 0308 	rsb	r3, r3, #8
    936a:	22ff      	movs	r2, #255	; 0xff
    936c:	fa22 f303 	lsr.w	r3, r2, r3
    9370:	b2db      	uxtb	r3, r3
    9372:	3b01      	subs	r3, #1
    9374:	b2db      	uxtb	r3, r3
    9376:	f88d 300e 	strb.w	r3, [sp, #14]
    937a:	e00f      	b.n	939c <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    937c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9380:	f1c3 0308 	rsb	r3, r3, #8
    9384:	22ff      	movs	r2, #255	; 0xff
    9386:	fa22 f303 	lsr.w	r3, r2, r3
    938a:	b2db      	uxtb	r3, r3
    938c:	3b01      	subs	r3, #1
    938e:	b2db      	uxtb	r3, r3
    9390:	f88d 300e 	strb.w	r3, [sp, #14]
    9394:	e002      	b.n	939c <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9396:	2300      	movs	r3, #0
    9398:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    939c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93a0:	f1c3 0308 	rsb	r3, r3, #8
    93a4:	22ff      	movs	r2, #255	; 0xff
    93a6:	fa22 f303 	lsr.w	r3, r2, r3
    93aa:	b2db      	uxtb	r3, r3
    93ac:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    93b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    93b4:	aa03      	add	r2, sp, #12
    93b6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    93ba:	4618      	mov	r0, r3
    93bc:	f001 fb7c 	bl	aab8 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    93c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    93c4:	3301      	adds	r3, #1
    93c6:	f88d 301f 	strb.w	r3, [sp, #31]
    93ca:	f89d 201f 	ldrb.w	r2, [sp, #31]
    93ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
    93d2:	429a      	cmp	r2, r3
    93d4:	f4ff af12 	bcc.w	91fc <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    93d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    93dc:	4618      	mov	r0, r3
    93de:	b009      	add	sp, #36	; 0x24
    93e0:	f85d fb04 	ldr.w	pc, [sp], #4
    93e4:	1fff8d10 	.word	0x1fff8d10
    93e8:	1fff8d0c 	.word	0x1fff8d0c

000093ec <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    93ec:	b500      	push	{lr}
    93ee:	b089      	sub	sp, #36	; 0x24
    93f0:	9202      	str	r2, [sp, #8]
    93f2:	9301      	str	r3, [sp, #4]
    93f4:	4603      	mov	r3, r0
    93f6:	f88d 300f 	strb.w	r3, [sp, #15]
    93fa:	460b      	mov	r3, r1
    93fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9400:	2300      	movs	r3, #0
    9402:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9406:	4b62      	ldr	r3, [pc, #392]	; (9590 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	681a      	ldr	r2, [r3, #0]
    940c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9410:	4413      	add	r3, r2
    9412:	7c1b      	ldrb	r3, [r3, #16]
    9414:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9418:	9b02      	ldr	r3, [sp, #8]
    941a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    941c:	691b      	ldr	r3, [r3, #16]
    941e:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9420:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9424:	f003 0307 	and.w	r3, r3, #7
    9428:	b2db      	uxtb	r3, r3
    942a:	2b00      	cmp	r3, #0
    942c:	d006      	beq.n	943c <Adc_Ipw_ConfigurePdbConversion+0x50>
    942e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9432:	08db      	lsrs	r3, r3, #3
    9434:	b2db      	uxtb	r3, r3
    9436:	3301      	adds	r3, #1
    9438:	b2db      	uxtb	r3, r3
    943a:	e003      	b.n	9444 <Adc_Ipw_ConfigurePdbConversion+0x58>
    943c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9440:	08db      	lsrs	r3, r3, #3
    9442:	b2db      	uxtb	r3, r3
    9444:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9448:	f89d 301b 	ldrb.w	r3, [sp, #27]
    944c:	4618      	mov	r0, r3
    944e:	f001 fa61 	bl	a914 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    9452:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9456:	9901      	ldr	r1, [sp, #4]
    9458:	4618      	mov	r0, r3
    945a:	f001 fa89 	bl	a970 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    945e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9462:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9466:	f89d 000f 	ldrb.w	r0, [sp, #15]
    946a:	9a02      	ldr	r2, [sp, #8]
    946c:	f7ff fe84 	bl	9178 <Adc_Ipw_ConfigurePdbChannels>
    9470:	4603      	mov	r3, r0
    9472:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9476:	9b02      	ldr	r3, [sp, #8]
    9478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    947a:	7bdb      	ldrb	r3, [r3, #15]
    947c:	2b00      	cmp	r3, #0
    947e:	d02f      	beq.n	94e0 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9480:	9b02      	ldr	r3, [sp, #8]
    9482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9484:	7b9b      	ldrb	r3, [r3, #14]
    9486:	f083 0301 	eor.w	r3, r3, #1
    948a:	b2db      	uxtb	r3, r3
    948c:	2b00      	cmp	r3, #0
    948e:	d017      	beq.n	94c0 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9490:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9494:	493f      	ldr	r1, [pc, #252]	; (9594 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9496:	4613      	mov	r3, r2
    9498:	009b      	lsls	r3, r3, #2
    949a:	4413      	add	r3, r2
    949c:	009b      	lsls	r3, r3, #2
    949e:	440b      	add	r3, r1
    94a0:	3310      	adds	r3, #16
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	461a      	mov	r2, r3
    94a6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    94aa:	4413      	add	r3, r2
    94ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    94b0:	3b01      	subs	r3, #1
    94b2:	005b      	lsls	r3, r3, #1
    94b4:	9a05      	ldr	r2, [sp, #20]
    94b6:	4413      	add	r3, r2
    94b8:	881b      	ldrh	r3, [r3, #0]
    94ba:	f8ad 301c 	strh.w	r3, [sp, #28]
    94be:	e01a      	b.n	94f6 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    94c0:	9b05      	ldr	r3, [sp, #20]
    94c2:	881a      	ldrh	r2, [r3, #0]
    94c4:	9b02      	ldr	r3, [sp, #8]
    94c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94c8:	8999      	ldrh	r1, [r3, #12]
    94ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    94ce:	3b01      	subs	r3, #1
    94d0:	b29b      	uxth	r3, r3
    94d2:	fb11 f303 	smulbb	r3, r1, r3
    94d6:	b29b      	uxth	r3, r3
    94d8:	4413      	add	r3, r2
    94da:	f8ad 301c 	strh.w	r3, [sp, #28]
    94de:	e00a      	b.n	94f6 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    94e0:	9b02      	ldr	r3, [sp, #8]
    94e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94e4:	899a      	ldrh	r2, [r3, #12]
    94e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    94ea:	3b01      	subs	r3, #1
    94ec:	b29b      	uxth	r3, r3
    94ee:	fb12 f303 	smulbb	r3, r2, r3
    94f2:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    94f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    94fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    94fe:	4611      	mov	r1, r2
    9500:	4618      	mov	r0, r3
    9502:	f001 fab5 	bl	aa70 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9506:	f89d 301b 	ldrb.w	r3, [sp, #27]
    950a:	4618      	mov	r0, r3
    950c:	f001 fa98 	bl	aa40 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    9510:	2300      	movs	r3, #0
    9512:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    9516:	2300      	movs	r3, #0
    9518:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    951c:	2300      	movs	r3, #0
    951e:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9522:	e00c      	b.n	953e <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9524:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9528:	aa04      	add	r2, sp, #16
    952a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    952e:	4618      	mov	r0, r3
    9530:	f001 fac2 	bl	aab8 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9534:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9538:	3301      	adds	r3, #1
    953a:	f88d 301f 	strb.w	r3, [sp, #31]
    953e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9542:	2b01      	cmp	r3, #1
    9544:	d9ee      	bls.n	9524 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    9546:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    954a:	4912      	ldr	r1, [pc, #72]	; (9594 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    954c:	4613      	mov	r3, r2
    954e:	009b      	lsls	r3, r3, #2
    9550:	4413      	add	r3, r2
    9552:	009b      	lsls	r3, r3, #2
    9554:	440b      	add	r3, r1
    9556:	3310      	adds	r3, #16
    9558:	7819      	ldrb	r1, [r3, #0]
    955a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    955e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9562:	440b      	add	r3, r1
    9564:	b2d8      	uxtb	r0, r3
    9566:	490b      	ldr	r1, [pc, #44]	; (9594 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9568:	4613      	mov	r3, r2
    956a:	009b      	lsls	r3, r3, #2
    956c:	4413      	add	r3, r2
    956e:	009b      	lsls	r3, r3, #2
    9570:	440b      	add	r3, r1
    9572:	3310      	adds	r3, #16
    9574:	4602      	mov	r2, r0
    9576:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    9578:	9b01      	ldr	r3, [sp, #4]
    957a:	2b0f      	cmp	r3, #15
    957c:	d104      	bne.n	9588 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    957e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9582:	4618      	mov	r0, r3
    9584:	f001 fa34 	bl	a9f0 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    9588:	bf00      	nop
    958a:	b009      	add	sp, #36	; 0x24
    958c:	f85d fb04 	ldr.w	pc, [sp], #4
    9590:	1fff8d0c 	.word	0x1fff8d0c
    9594:	1fff8d10 	.word	0x1fff8d10

00009598 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    9598:	b500      	push	{lr}
    959a:	b087      	sub	sp, #28
    959c:	4603      	mov	r3, r0
    959e:	f88d 3007 	strb.w	r3, [sp, #7]
    95a2:	460b      	mov	r3, r1
    95a4:	f8ad 3004 	strh.w	r3, [sp, #4]
    95a8:	4613      	mov	r3, r2
    95aa:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    95ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95b2:	4a36      	ldr	r2, [pc, #216]	; (968c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    95b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95b8:	68da      	ldr	r2, [r3, #12]
    95ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    95be:	005b      	lsls	r3, r3, #1
    95c0:	4413      	add	r3, r2
    95c2:	881b      	ldrh	r3, [r3, #0]
    95c4:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    95c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95cc:	4a2f      	ldr	r2, [pc, #188]	; (968c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    95ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d2:	681a      	ldr	r2, [r3, #0]
    95d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    95d8:	4413      	add	r3, r2
    95da:	7c1b      	ldrb	r3, [r3, #16]
    95dc:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    95e0:	2300      	movs	r3, #0
    95e2:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    95e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    95ea:	4618      	mov	r0, r3
    95ec:	f001 fb7e 	bl	acec <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    95f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95f4:	4a25      	ldr	r2, [pc, #148]	; (968c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    95f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95fa:	685a      	ldr	r2, [r3, #4]
    95fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9600:	2134      	movs	r1, #52	; 0x34
    9602:	fb01 f303 	mul.w	r3, r1, r3
    9606:	4413      	add	r3, r2
    9608:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    960c:	2b01      	cmp	r3, #1
    960e:	d114      	bne.n	963a <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    9610:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9614:	4a1d      	ldr	r2, [pc, #116]	; (968c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    961a:	685a      	ldr	r2, [r3, #4]
    961c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9620:	2134      	movs	r1, #52	; 0x34
    9622:	fb01 f303 	mul.w	r3, r1, r3
    9626:	4413      	add	r3, r2
    9628:	689b      	ldr	r3, [r3, #8]
    962a:	2b01      	cmp	r3, #1
    962c:	d105      	bne.n	963a <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    962e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9632:	2100      	movs	r1, #0
    9634:	4618      	mov	r0, r3
    9636:	f7ff f827 	bl	8688 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    963a:	2300      	movs	r3, #0
    963c:	f88d 3016 	strb.w	r3, [sp, #22]
    9640:	e013      	b.n	966a <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    9642:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9646:	f89d 1016 	ldrb.w	r1, [sp, #22]
    964a:	2201      	movs	r2, #1
    964c:	4618      	mov	r0, r3
    964e:	f7ff f8cd 	bl	87ec <Adc_Ip_SetDisabledChannel>
    9652:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    9654:	9b03      	ldr	r3, [sp, #12]
    9656:	2b02      	cmp	r3, #2
    9658:	d102      	bne.n	9660 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    965a:	2301      	movs	r3, #1
    965c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9660:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9664:	3301      	adds	r3, #1
    9666:	f88d 3016 	strb.w	r3, [sp, #22]
    966a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    966e:	4a08      	ldr	r2, [pc, #32]	; (9690 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    9670:	00db      	lsls	r3, r3, #3
    9672:	4413      	add	r3, r2
    9674:	799b      	ldrb	r3, [r3, #6]
    9676:	f89d 2016 	ldrb.w	r2, [sp, #22]
    967a:	429a      	cmp	r2, r3
    967c:	d3e1      	bcc.n	9642 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    967e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9682:	4618      	mov	r0, r3
    9684:	b007      	add	sp, #28
    9686:	f85d fb04 	ldr.w	pc, [sp], #4
    968a:	bf00      	nop
    968c:	1fff8d0c 	.word	0x1fff8d0c
    9690:	1fff8d38 	.word	0x1fff8d38

00009694 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9694:	b500      	push	{lr}
    9696:	b085      	sub	sp, #20
    9698:	4603      	mov	r3, r0
    969a:	9100      	str	r1, [sp, #0]
    969c:	f88d 3007 	strb.w	r3, [sp, #7]
    96a0:	4613      	mov	r3, r2
    96a2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    96a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    96aa:	4a14      	ldr	r2, [pc, #80]	; (96fc <Adc_Ipw_PrepareGroupStart+0x68>)
    96ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b0:	681a      	ldr	r2, [r3, #0]
    96b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96b6:	4413      	add	r3, r2
    96b8:	7c1b      	ldrb	r3, [r3, #16]
    96ba:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    96be:	9b00      	ldr	r3, [sp, #0]
    96c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	2b01      	cmp	r3, #1
    96c6:	d108      	bne.n	96da <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    96c8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96cc:	9b00      	ldr	r3, [sp, #0]
    96ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96d0:	685b      	ldr	r3, [r3, #4]
    96d2:	461a      	mov	r2, r3
    96d4:	2101      	movs	r1, #1
    96d6:	f7fe ff51 	bl	857c <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    96da:	9b00      	ldr	r3, [sp, #0]
    96dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96de:	7a1b      	ldrb	r3, [r3, #8]
    96e0:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    96e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    96ec:	4611      	mov	r1, r2
    96ee:	4618      	mov	r0, r3
    96f0:	f7fe ff62 	bl	85b8 <Adc_Ip_SetSampleTime>
}
    96f4:	bf00      	nop
    96f6:	b005      	add	sp, #20
    96f8:	f85d fb04 	ldr.w	pc, [sp], #4
    96fc:	1fff8d0c 	.word	0x1fff8d0c

00009700 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9700:	b084      	sub	sp, #16
    9702:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9704:	2300      	movs	r3, #0
    9706:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    970a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    970e:	4618      	mov	r0, r3
    9710:	b004      	add	sp, #16
    9712:	4770      	bx	lr

00009714 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    9714:	b500      	push	{lr}
    9716:	b08f      	sub	sp, #60	; 0x3c
    9718:	9202      	str	r2, [sp, #8]
    971a:	461a      	mov	r2, r3
    971c:	4603      	mov	r3, r0
    971e:	f88d 300f 	strb.w	r3, [sp, #15]
    9722:	460b      	mov	r3, r1
    9724:	f8ad 300c 	strh.w	r3, [sp, #12]
    9728:	4613      	mov	r3, r2
    972a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    972e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9732:	4a6d      	ldr	r2, [pc, #436]	; (98e8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9738:	68da      	ldr	r2, [r3, #12]
    973a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    973e:	005b      	lsls	r3, r3, #1
    9740:	4413      	add	r3, r2
    9742:	881b      	ldrh	r3, [r3, #0]
    9744:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9748:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    974c:	4a66      	ldr	r2, [pc, #408]	; (98e8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    974e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9752:	685a      	ldr	r2, [r3, #4]
    9754:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    9758:	2134      	movs	r1, #52	; 0x34
    975a:	fb01 f303 	mul.w	r3, r1, r3
    975e:	4413      	add	r3, r2
    9760:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9762:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9766:	4a60      	ldr	r2, [pc, #384]	; (98e8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976c:	681a      	ldr	r2, [r3, #0]
    976e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9772:	4413      	add	r3, r2
    9774:	7c1b      	ldrb	r3, [r3, #16]
    9776:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    977a:	2300      	movs	r3, #0
    977c:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    977e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9782:	495a      	ldr	r1, [pc, #360]	; (98ec <Adc_Ipw_ConfigureConversion+0x1d8>)
    9784:	4613      	mov	r3, r2
    9786:	009b      	lsls	r3, r3, #2
    9788:	4413      	add	r3, r2
    978a:	009b      	lsls	r3, r3, #2
    978c:	440b      	add	r3, r1
    978e:	3310      	adds	r3, #16
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    9796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9798:	6a1b      	ldr	r3, [r3, #32]
    979a:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    979c:	2300      	movs	r3, #0
    979e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    97a2:	e030      	b.n	9806 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    97a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    97a8:	4a4f      	ldr	r2, [pc, #316]	; (98e8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    97aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97ae:	681b      	ldr	r3, [r3, #0]
    97b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    97b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    97b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    97ba:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    97be:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    97c2:	440b      	add	r3, r1
    97c4:	005b      	lsls	r3, r3, #1
    97c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    97c8:	440b      	add	r3, r1
    97ca:	881b      	ldrh	r3, [r3, #0]
    97cc:	4619      	mov	r1, r3
    97ce:	460b      	mov	r3, r1
    97d0:	005b      	lsls	r3, r3, #1
    97d2:	440b      	add	r3, r1
    97d4:	009b      	lsls	r3, r3, #2
    97d6:	4413      	add	r3, r2
    97d8:	685b      	ldr	r3, [r3, #4]
    97da:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    97dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    97e0:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    97e4:	9b08      	ldr	r3, [sp, #32]
    97e6:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    97e8:	2300      	movs	r3, #0
    97ea:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    97ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    97f2:	aa05      	add	r2, sp, #20
    97f4:	4611      	mov	r1, r2
    97f6:	4618      	mov	r0, r3
    97f8:	f7fe ffc8 	bl	878c <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    97fc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9800:	3301      	adds	r3, #1
    9802:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9806:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    980a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    980e:	3b01      	subs	r3, #1
    9810:	429a      	cmp	r2, r3
    9812:	d3c7      	bcc.n	97a4 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9814:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9818:	4a33      	ldr	r2, [pc, #204]	; (98e8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    981a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    981e:	681b      	ldr	r3, [r3, #0]
    9820:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    982a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    982e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9832:	440b      	add	r3, r1
    9834:	005b      	lsls	r3, r3, #1
    9836:	990a      	ldr	r1, [sp, #40]	; 0x28
    9838:	440b      	add	r3, r1
    983a:	881b      	ldrh	r3, [r3, #0]
    983c:	4619      	mov	r1, r3
    983e:	460b      	mov	r3, r1
    9840:	005b      	lsls	r3, r3, #1
    9842:	440b      	add	r3, r1
    9844:	009b      	lsls	r3, r3, #2
    9846:	4413      	add	r3, r2
    9848:	685b      	ldr	r3, [r3, #4]
    984a:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    984c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9850:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9854:	9b08      	ldr	r3, [sp, #32]
    9856:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    985a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    985e:	2b00      	cmp	r3, #0
    9860:	d103      	bne.n	986a <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9862:	2301      	movs	r3, #1
    9864:	f88d 301c 	strb.w	r3, [sp, #28]
    9868:	e002      	b.n	9870 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    986a:	2300      	movs	r3, #0
    986c:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9870:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9874:	aa05      	add	r2, sp, #20
    9876:	4611      	mov	r1, r2
    9878:	4618      	mov	r0, r3
    987a:	f7fe ff87 	bl	878c <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    987e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9882:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9886:	e014      	b.n	98b2 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    9888:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    988c:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9890:	231f      	movs	r3, #31
    9892:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9894:	2300      	movs	r3, #0
    9896:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    989a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    989e:	aa05      	add	r2, sp, #20
    98a0:	4611      	mov	r1, r2
    98a2:	4618      	mov	r0, r3
    98a4:	f7fe ff72 	bl	878c <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    98a8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    98ac:	3301      	adds	r3, #1
    98ae:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    98b2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    98b6:	2b0f      	cmp	r3, #15
    98b8:	d9e6      	bls.n	9888 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    98ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98be:	4a0c      	ldr	r2, [pc, #48]	; (98f0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    98c0:	00db      	lsls	r3, r3, #3
    98c2:	4413      	add	r3, r2
    98c4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    98c8:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    98ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    98ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
    98d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98d6:	9300      	str	r3, [sp, #0]
    98d8:	9b02      	ldr	r3, [sp, #8]
    98da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    98dc:	f7ff fd86 	bl	93ec <Adc_Ipw_ConfigurePdbConversion>
}
    98e0:	bf00      	nop
    98e2:	b00f      	add	sp, #60	; 0x3c
    98e4:	f85d fb04 	ldr.w	pc, [sp], #4
    98e8:	1fff8d0c 	.word	0x1fff8d0c
    98ec:	1fff8d10 	.word	0x1fff8d10
    98f0:	1fff8d38 	.word	0x1fff8d38

000098f4 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    98f4:	b500      	push	{lr}
    98f6:	b085      	sub	sp, #20
    98f8:	9001      	str	r0, [sp, #4]
    98fa:	460b      	mov	r3, r1
    98fc:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9900:	2300      	movs	r3, #0
    9902:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9906:	2300      	movs	r3, #0
    9908:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    990c:	2300      	movs	r3, #0
    990e:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9912:	2300      	movs	r3, #0
    9914:	f88d 300f 	strb.w	r3, [sp, #15]
    9918:	e027      	b.n	996a <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    991a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    991e:	9a01      	ldr	r2, [sp, #4]
    9920:	4413      	add	r3, r2
    9922:	7f9b      	ldrb	r3, [r3, #30]
    9924:	2b01      	cmp	r3, #1
    9926:	d11b      	bne.n	9960 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9928:	f89d 300f 	ldrb.w	r3, [sp, #15]
    992c:	9a01      	ldr	r2, [sp, #4]
    992e:	4413      	add	r3, r2
    9930:	7c1b      	ldrb	r3, [r3, #16]
    9932:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    9936:	f89d 000e 	ldrb.w	r0, [sp, #14]
    993a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    993e:	9b01      	ldr	r3, [sp, #4]
    9940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9944:	4619      	mov	r1, r3
    9946:	f7fe fcb8 	bl	82ba <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    994a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    994e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9952:	9b01      	ldr	r3, [sp, #4]
    9954:	3202      	adds	r2, #2
    9956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    995a:	4619      	mov	r1, r3
    995c:	f000 fead 	bl	a6ba <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9960:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9964:	3301      	adds	r3, #1
    9966:	f88d 300f 	strb.w	r3, [sp, #15]
    996a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    996e:	2b01      	cmp	r3, #1
    9970:	d9d3      	bls.n	991a <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    9972:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    9976:	4618      	mov	r0, r3
    9978:	b005      	add	sp, #20
    997a:	f85d fb04 	ldr.w	pc, [sp], #4

0000997e <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    997e:	b500      	push	{lr}
    9980:	b087      	sub	sp, #28
    9982:	4603      	mov	r3, r0
    9984:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9988:	2300      	movs	r3, #0
    998a:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    998e:	2300      	movs	r3, #0
    9990:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    9994:	2300      	movs	r3, #0
    9996:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    999a:	2300      	movs	r3, #0
    999c:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    99a0:	2300      	movs	r3, #0
    99a2:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    99a6:	2300      	movs	r3, #0
    99a8:	f88d 3017 	strb.w	r3, [sp, #23]
    99ac:	e026      	b.n	99fc <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    99ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99b2:	4a2e      	ldr	r2, [pc, #184]	; (9a6c <Adc_Ipw_DeInit+0xee>)
    99b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99b8:	681a      	ldr	r2, [r3, #0]
    99ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    99be:	4413      	add	r3, r2
    99c0:	7f9b      	ldrb	r3, [r3, #30]
    99c2:	2b01      	cmp	r3, #1
    99c4:	d115      	bne.n	99f2 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    99c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99ca:	4a28      	ldr	r2, [pc, #160]	; (9a6c <Adc_Ipw_DeInit+0xee>)
    99cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d0:	681a      	ldr	r2, [r3, #0]
    99d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    99d6:	4413      	add	r3, r2
    99d8:	7c1b      	ldrb	r3, [r3, #16]
    99da:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    99de:	f89d 3013 	ldrb.w	r3, [sp, #19]
    99e2:	4618      	mov	r0, r3
    99e4:	f7fe fd40 	bl	8468 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    99e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    99ec:	4618      	mov	r0, r3
    99ee:	f000 ff0d 	bl	a80c <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    99f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    99f6:	3301      	adds	r3, #1
    99f8:	f88d 3017 	strb.w	r3, [sp, #23]
    99fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9a00:	2b01      	cmp	r3, #1
    9a02:	d9d4      	bls.n	99ae <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9a04:	2300      	movs	r3, #0
    9a06:	f8ad 3014 	strh.w	r3, [sp, #20]
    9a0a:	e01e      	b.n	9a4a <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a10:	4a16      	ldr	r2, [pc, #88]	; (9a6c <Adc_Ipw_DeInit+0xee>)
    9a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a16:	685a      	ldr	r2, [r3, #4]
    9a18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9a1c:	2134      	movs	r1, #52	; 0x34
    9a1e:	fb01 f303 	mul.w	r3, r1, r3
    9a22:	4413      	add	r3, r2
    9a24:	881b      	ldrh	r3, [r3, #0]
    9a26:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9a2a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9a2e:	4910      	ldr	r1, [pc, #64]	; (9a70 <Adc_Ipw_DeInit+0xf2>)
    9a30:	4613      	mov	r3, r2
    9a32:	009b      	lsls	r3, r3, #2
    9a34:	4413      	add	r3, r2
    9a36:	009b      	lsls	r3, r3, #2
    9a38:	440b      	add	r3, r1
    9a3a:	330c      	adds	r3, #12
    9a3c:	2200      	movs	r2, #0
    9a3e:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9a40:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9a44:	3301      	adds	r3, #1
    9a46:	f8ad 3014 	strh.w	r3, [sp, #20]
    9a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a4e:	4a07      	ldr	r2, [pc, #28]	; (9a6c <Adc_Ipw_DeInit+0xee>)
    9a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a54:	891b      	ldrh	r3, [r3, #8]
    9a56:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9a5a:	429a      	cmp	r2, r3
    9a5c:	d3d6      	bcc.n	9a0c <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    9a5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9a62:	4618      	mov	r0, r3
    9a64:	b007      	add	sp, #28
    9a66:	f85d fb04 	ldr.w	pc, [sp], #4
    9a6a:	bf00      	nop
    9a6c:	1fff8d0c 	.word	0x1fff8d0c
    9a70:	1fff8d10 	.word	0x1fff8d10

00009a74 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9a74:	b500      	push	{lr}
    9a76:	b089      	sub	sp, #36	; 0x24
    9a78:	4603      	mov	r3, r0
    9a7a:	460a      	mov	r2, r1
    9a7c:	f88d 300f 	strb.w	r3, [sp, #15]
    9a80:	4613      	mov	r3, r2
    9a82:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    9a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a8a:	4a4c      	ldr	r2, [pc, #304]	; (9bbc <Adc_Ipw_StartNormalConversion+0x148>)
    9a8c:	00db      	lsls	r3, r3, #3
    9a8e:	4413      	add	r3, r2
    9a90:	885b      	ldrh	r3, [r3, #2]
    9a92:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    9a96:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a9a:	4a49      	ldr	r2, [pc, #292]	; (9bc0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa0:	68da      	ldr	r2, [r3, #12]
    9aa2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9aa6:	005b      	lsls	r3, r3, #1
    9aa8:	4413      	add	r3, r2
    9aaa:	881b      	ldrh	r3, [r3, #0]
    9aac:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9ab0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ab4:	4a42      	ldr	r2, [pc, #264]	; (9bc0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aba:	685a      	ldr	r2, [r3, #4]
    9abc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9ac0:	2134      	movs	r1, #52	; 0x34
    9ac2:	fb01 f303 	mul.w	r3, r1, r3
    9ac6:	4413      	add	r3, r2
    9ac8:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9aca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ace:	4a3c      	ldr	r2, [pc, #240]	; (9bc0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad4:	681a      	ldr	r2, [r3, #0]
    9ad6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ada:	4413      	add	r3, r2
    9adc:	7c1b      	ldrb	r3, [r3, #16]
    9ade:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9ae2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ae6:	4a35      	ldr	r2, [pc, #212]	; (9bbc <Adc_Ipw_StartNormalConversion+0x148>)
    9ae8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9aec:	b29b      	uxth	r3, r3
    9aee:	2b00      	cmp	r3, #0
    9af0:	d05f      	beq.n	9bb2 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9af2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9af6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9afa:	9905      	ldr	r1, [sp, #20]
    9afc:	4618      	mov	r0, r3
    9afe:	f7ff fdc9 	bl	9694 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9b02:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9b06:	492f      	ldr	r1, [pc, #188]	; (9bc4 <Adc_Ipw_StartNormalConversion+0x150>)
    9b08:	4613      	mov	r3, r2
    9b0a:	009b      	lsls	r3, r3, #2
    9b0c:	4413      	add	r3, r2
    9b0e:	009b      	lsls	r3, r3, #2
    9b10:	440b      	add	r3, r1
    9b12:	3310      	adds	r3, #16
    9b14:	2200      	movs	r2, #0
    9b16:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    9b18:	9b05      	ldr	r3, [sp, #20]
    9b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9b1e:	2b0f      	cmp	r3, #15
    9b20:	d806      	bhi.n	9b30 <Adc_Ipw_StartNormalConversion+0xbc>
    9b22:	9b05      	ldr	r3, [sp, #20]
    9b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9b28:	f003 030f 	and.w	r3, r3, #15
    9b2c:	b2db      	uxtb	r3, r3
    9b2e:	e000      	b.n	9b32 <Adc_Ipw_StartNormalConversion+0xbe>
    9b30:	2310      	movs	r3, #16
    9b32:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    9b36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b3a:	4a20      	ldr	r2, [pc, #128]	; (9bbc <Adc_Ipw_StartNormalConversion+0x148>)
    9b3c:	00db      	lsls	r3, r3, #3
    9b3e:	4413      	add	r3, r2
    9b40:	799b      	ldrb	r3, [r3, #6]
    9b42:	2b00      	cmp	r3, #0
    9b44:	d107      	bne.n	9b56 <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9b46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b4a:	4a1c      	ldr	r2, [pc, #112]	; (9bbc <Adc_Ipw_StartNormalConversion+0x148>)
    9b4c:	00db      	lsls	r3, r3, #3
    9b4e:	4413      	add	r3, r2
    9b50:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9b54:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9b56:	2300      	movs	r3, #0
    9b58:	f88d 301f 	strb.w	r3, [sp, #31]
    9b5c:	e00c      	b.n	9b78 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9b5e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b62:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9b66:	4611      	mov	r1, r2
    9b68:	4618      	mov	r0, r3
    9b6a:	f7fe ff03 	bl	8974 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9b6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b72:	3301      	adds	r3, #1
    9b74:	f88d 301f 	strb.w	r3, [sp, #31]
    9b78:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b7c:	4a0f      	ldr	r2, [pc, #60]	; (9bbc <Adc_Ipw_StartNormalConversion+0x148>)
    9b7e:	00db      	lsls	r3, r3, #3
    9b80:	4413      	add	r3, r2
    9b82:	799b      	ldrb	r3, [r3, #6]
    9b84:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9b88:	429a      	cmp	r2, r3
    9b8a:	d3e8      	bcc.n	9b5e <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    9b8c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b90:	2101      	movs	r1, #1
    9b92:	4618      	mov	r0, r3
    9b94:	f7fe fd60 	bl	8658 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9b98:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9b9c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9ba0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9ba4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ba8:	9300      	str	r3, [sp, #0]
    9baa:	4613      	mov	r3, r2
    9bac:	220f      	movs	r2, #15
    9bae:	f7ff fdb1 	bl	9714 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9bb2:	bf00      	nop
    9bb4:	b009      	add	sp, #36	; 0x24
    9bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    9bba:	bf00      	nop
    9bbc:	1fff8d38 	.word	0x1fff8d38
    9bc0:	1fff8d0c 	.word	0x1fff8d0c
    9bc4:	1fff8d10 	.word	0x1fff8d10

00009bc8 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9bc8:	b500      	push	{lr}
    9bca:	b085      	sub	sp, #20
    9bcc:	4603      	mov	r3, r0
    9bce:	f88d 3007 	strb.w	r3, [sp, #7]
    9bd2:	460b      	mov	r3, r1
    9bd4:	f8ad 3004 	strh.w	r3, [sp, #4]
    9bd8:	4613      	mov	r3, r2
    9bda:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9bde:	2300      	movs	r3, #0
    9be0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9be4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9be8:	4a24      	ldr	r2, [pc, #144]	; (9c7c <Adc_Ipw_StopCurrentConversion+0xb4>)
    9bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bee:	681a      	ldr	r2, [r3, #0]
    9bf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bf4:	4413      	add	r3, r2
    9bf6:	7c1b      	ldrb	r3, [r3, #16]
    9bf8:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9bfc:	2300      	movs	r3, #0
    9bfe:	f88d 300f 	strb.w	r3, [sp, #15]
    9c02:	e014      	b.n	9c2e <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9c04:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9c08:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9c0c:	2200      	movs	r2, #0
    9c0e:	4618      	mov	r0, r3
    9c10:	f7fe fdec 	bl	87ec <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9c14:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9c18:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9c1c:	4611      	mov	r1, r2
    9c1e:	4618      	mov	r0, r3
    9c20:	f7fe fea8 	bl	8974 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9c24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c28:	3301      	adds	r3, #1
    9c2a:	f88d 300f 	strb.w	r3, [sp, #15]
    9c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c32:	4a13      	ldr	r2, [pc, #76]	; (9c80 <Adc_Ipw_StopCurrentConversion+0xb8>)
    9c34:	00db      	lsls	r3, r3, #3
    9c36:	4413      	add	r3, r2
    9c38:	799b      	ldrb	r3, [r3, #6]
    9c3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9c3e:	429a      	cmp	r2, r3
    9c40:	d3e0      	bcc.n	9c04 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9c42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9c46:	490f      	ldr	r1, [pc, #60]	; (9c84 <Adc_Ipw_StopCurrentConversion+0xbc>)
    9c48:	4613      	mov	r3, r2
    9c4a:	009b      	lsls	r3, r3, #2
    9c4c:	4413      	add	r3, r2
    9c4e:	009b      	lsls	r3, r3, #2
    9c50:	440b      	add	r3, r1
    9c52:	3310      	adds	r3, #16
    9c54:	2200      	movs	r2, #0
    9c56:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    9c58:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9c5c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c64:	4618      	mov	r0, r3
    9c66:	f7ff fc97 	bl	9598 <Adc_Ipw_StopConversionCheckTimeout>
    9c6a:	4603      	mov	r3, r0
    9c6c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9c70:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9c74:	4618      	mov	r0, r3
    9c76:	b005      	add	sp, #20
    9c78:	f85d fb04 	ldr.w	pc, [sp], #4
    9c7c:	1fff8d0c 	.word	0x1fff8d0c
    9c80:	1fff8d38 	.word	0x1fff8d38
    9c84:	1fff8d10 	.word	0x1fff8d10

00009c88 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9c88:	b500      	push	{lr}
    9c8a:	b085      	sub	sp, #20
    9c8c:	4603      	mov	r3, r0
    9c8e:	f88d 3007 	strb.w	r3, [sp, #7]
    9c92:	460b      	mov	r3, r1
    9c94:	f88d 3006 	strb.w	r3, [sp, #6]
    9c98:	4613      	mov	r3, r2
    9c9a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9c9e:	2301      	movs	r3, #1
    9ca0:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9ca4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ca8:	f88d 300f 	strb.w	r3, [sp, #15]
    9cac:	e019      	b.n	9ce2 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9cae:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9cb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9cb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9cba:	1ad3      	subs	r3, r2, r3
    9cbc:	b2db      	uxtb	r3, r3
    9cbe:	4619      	mov	r1, r3
    9cc0:	f7fe fe3e 	bl	8940 <Adc_Ip_GetConvCompleteFlag>
    9cc4:	4603      	mov	r3, r0
    9cc6:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9cca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cce:	f083 0301 	eor.w	r3, r3, #1
    9cd2:	b2db      	uxtb	r3, r3
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	d10b      	bne.n	9cf0 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9cd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9cdc:	3301      	adds	r3, #1
    9cde:	f88d 300f 	strb.w	r3, [sp, #15]
    9ce2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9ce6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9cea:	429a      	cmp	r2, r3
    9cec:	d3df      	bcc.n	9cae <Adc_Ipw_CheckValidConversion+0x26>
    9cee:	e000      	b.n	9cf2 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9cf0:	bf00      	nop
        }
    }

    return ValidConversion;
    9cf2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9cf6:	4618      	mov	r0, r3
    9cf8:	b005      	add	sp, #20
    9cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00009cfe <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9cfe:	b500      	push	{lr}
    9d00:	b089      	sub	sp, #36	; 0x24
    9d02:	9102      	str	r1, [sp, #8]
    9d04:	9201      	str	r2, [sp, #4]
    9d06:	461a      	mov	r2, r3
    9d08:	4603      	mov	r3, r0
    9d0a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9d0e:	4613      	mov	r3, r2
    9d10:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9d14:	2300      	movs	r3, #0
    9d16:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9d1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d1e:	4a33      	ldr	r2, [pc, #204]	; (9dec <Adc_Ipw_ReadGroup+0xee>)
    9d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d24:	68da      	ldr	r2, [r3, #12]
    9d26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d2a:	005b      	lsls	r3, r3, #1
    9d2c:	4413      	add	r3, r2
    9d2e:	881b      	ldrh	r3, [r3, #0]
    9d30:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9d34:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d38:	4a2c      	ldr	r2, [pc, #176]	; (9dec <Adc_Ipw_ReadGroup+0xee>)
    9d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d3e:	685a      	ldr	r2, [r3, #4]
    9d40:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9d44:	2134      	movs	r1, #52	; 0x34
    9d46:	fb01 f303 	mul.w	r3, r1, r3
    9d4a:	4413      	add	r3, r2
    9d4c:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9d4e:	9b06      	ldr	r3, [sp, #24]
    9d50:	789b      	ldrb	r3, [r3, #2]
    9d52:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9d56:	9b06      	ldr	r3, [sp, #24]
    9d58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9d5c:	2b01      	cmp	r3, #1
    9d5e:	d124      	bne.n	9daa <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9d60:	9b06      	ldr	r3, [sp, #24]
    9d62:	68db      	ldr	r3, [r3, #12]
    9d64:	2b00      	cmp	r3, #0
    9d66:	d111      	bne.n	9d8c <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9d68:	9b06      	ldr	r3, [sp, #24]
    9d6a:	695b      	ldr	r3, [r3, #20]
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d10d      	bne.n	9d8c <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9d70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d74:	4a1e      	ldr	r2, [pc, #120]	; (9df0 <Adc_Ipw_ReadGroup+0xf2>)
    9d76:	00db      	lsls	r3, r3, #3
    9d78:	4413      	add	r3, r2
    9d7a:	885b      	ldrh	r3, [r3, #2]
    9d7c:	b29b      	uxth	r3, r3
    9d7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9d82:	429a      	cmp	r2, r3
    9d84:	d002      	beq.n	9d8c <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9d86:	2301      	movs	r3, #1
    9d88:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9d8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9d90:	2b00      	cmp	r3, #0
    9d92:	d124      	bne.n	9dde <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9d94:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d98:	9a01      	ldr	r2, [sp, #4]
    9d9a:	9902      	ldr	r1, [sp, #8]
    9d9c:	9806      	ldr	r0, [sp, #24]
    9d9e:	f7ff f91f 	bl	8fe0 <Adc_Ipw_ReadGroupNoInt>
    9da2:	4603      	mov	r3, r0
    9da4:	f88d 301f 	strb.w	r3, [sp, #31]
    9da8:	e019      	b.n	9dde <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9daa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9dae:	4911      	ldr	r1, [pc, #68]	; (9df4 <Adc_Ipw_ReadGroup+0xf6>)
    9db0:	4613      	mov	r3, r2
    9db2:	009b      	lsls	r3, r3, #2
    9db4:	4413      	add	r3, r2
    9db6:	009b      	lsls	r3, r3, #2
    9db8:	440b      	add	r3, r1
    9dba:	681b      	ldr	r3, [r3, #0]
    9dbc:	2b01      	cmp	r3, #1
    9dbe:	d102      	bne.n	9dc6 <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9dc0:	2301      	movs	r3, #1
    9dc2:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9dc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d107      	bne.n	9dde <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9dce:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9dd2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9dd6:	9902      	ldr	r1, [sp, #8]
    9dd8:	4618      	mov	r0, r3
    9dda:	f7ff f949 	bl	9070 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9dde:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9de2:	4618      	mov	r0, r3
    9de4:	b009      	add	sp, #36	; 0x24
    9de6:	f85d fb04 	ldr.w	pc, [sp], #4
    9dea:	bf00      	nop
    9dec:	1fff8d0c 	.word	0x1fff8d0c
    9df0:	1fff8d38 	.word	0x1fff8d38
    9df4:	1fff8d10 	.word	0x1fff8d10

00009df8 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9df8:	b500      	push	{lr}
    9dfa:	b085      	sub	sp, #20
    9dfc:	4603      	mov	r3, r0
    9dfe:	9100      	str	r1, [sp, #0]
    9e00:	f88d 3007 	strb.w	r3, [sp, #7]
    9e04:	4613      	mov	r3, r2
    9e06:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9e0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e0e:	4a0e      	ldr	r2, [pc, #56]	; (9e48 <Adc_Ipw_Calibrate+0x50>)
    9e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e14:	681a      	ldr	r2, [r3, #0]
    9e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e1a:	4413      	add	r3, r2
    9e1c:	7c1b      	ldrb	r3, [r3, #16]
    9e1e:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9e22:	9b00      	ldr	r3, [sp, #0]
    9e24:	2200      	movs	r2, #0
    9e26:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9e28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e2c:	4618      	mov	r0, r3
    9e2e:	f7fe fdb9 	bl	89a4 <Adc_Ip_DoCalibration>
    9e32:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9e34:	9b02      	ldr	r3, [sp, #8]
    9e36:	2b00      	cmp	r3, #0
    9e38:	d002      	beq.n	9e40 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9e3a:	9b00      	ldr	r3, [sp, #0]
    9e3c:	2201      	movs	r2, #1
    9e3e:	701a      	strb	r2, [r3, #0]
    }
}
    9e40:	bf00      	nop
    9e42:	b005      	add	sp, #20
    9e44:	f85d fb04 	ldr.w	pc, [sp], #4
    9e48:	1fff8d0c 	.word	0x1fff8d0c

00009e4c <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9e4c:	2300      	movs	r3, #0
}
    9e4e:	4618      	mov	r0, r3
    9e50:	4770      	bx	lr
    9e52:	bf00      	nop

00009e54 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9e54:	b500      	push	{lr}
    9e56:	b083      	sub	sp, #12
    9e58:	4603      	mov	r3, r0
    9e5a:	460a      	mov	r2, r1
    9e5c:	f88d 3007 	strb.w	r3, [sp, #7]
    9e60:	4613      	mov	r3, r2
    9e62:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e6a:	2100      	movs	r1, #0
    9e6c:	4618      	mov	r0, r3
    9e6e:	f7fe fff3 	bl	8e58 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e76:	4a09      	ldr	r2, [pc, #36]	; (9e9c <Adc_Ipw_UpdateQueue+0x48>)
    9e78:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9e7c:	b29b      	uxth	r3, r3
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d007      	beq.n	9e92 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9e82:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e8a:	4611      	mov	r1, r2
    9e8c:	4618      	mov	r0, r3
    9e8e:	f7ff fdf1 	bl	9a74 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9e92:	bf00      	nop
    9e94:	b003      	add	sp, #12
    9e96:	f85d fb04 	ldr.w	pc, [sp], #4
    9e9a:	bf00      	nop
    9e9c:	1fff8d38 	.word	0x1fff8d38

00009ea0 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9ea0:	b510      	push	{r4, lr}
    9ea2:	b08a      	sub	sp, #40	; 0x28
    9ea4:	4604      	mov	r4, r0
    9ea6:	4608      	mov	r0, r1
    9ea8:	4611      	mov	r1, r2
    9eaa:	461a      	mov	r2, r3
    9eac:	4623      	mov	r3, r4
    9eae:	f88d 300f 	strb.w	r3, [sp, #15]
    9eb2:	4603      	mov	r3, r0
    9eb4:	f8ad 300c 	strh.w	r3, [sp, #12]
    9eb8:	460b      	mov	r3, r1
    9eba:	f8ad 300a 	strh.w	r3, [sp, #10]
    9ebe:	4613      	mov	r3, r2
    9ec0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9ec4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ec8:	4a68      	ldr	r2, [pc, #416]	; (a06c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ece:	68da      	ldr	r2, [r3, #12]
    9ed0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9ed4:	005b      	lsls	r3, r3, #1
    9ed6:	4413      	add	r3, r2
    9ed8:	881b      	ldrh	r3, [r3, #0]
    9eda:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9ede:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9ee2:	4963      	ldr	r1, [pc, #396]	; (a070 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9ee4:	4613      	mov	r3, r2
    9ee6:	009b      	lsls	r3, r3, #2
    9ee8:	4413      	add	r3, r2
    9eea:	009b      	lsls	r3, r3, #2
    9eec:	440b      	add	r3, r1
    9eee:	3310      	adds	r3, #16
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9ef6:	2300      	movs	r3, #0
    9ef8:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9efa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9efe:	4a5b      	ldr	r2, [pc, #364]	; (a06c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f04:	681a      	ldr	r2, [r3, #0]
    9f06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f0a:	4413      	add	r3, r2
    9f0c:	7c1b      	ldrb	r3, [r3, #16]
    9f0e:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9f12:	2300      	movs	r3, #0
    9f14:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9f18:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f1c:	4a53      	ldr	r2, [pc, #332]	; (a06c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f22:	681b      	ldr	r3, [r3, #0]
    9f24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f2c:	695b      	ldr	r3, [r3, #20]
    9f2e:	4618      	mov	r0, r3
    9f30:	f7ff fbe6 	bl	9700 <Adc_Ipw_CalculateNumsBitShift>
    9f34:	4603      	mov	r3, r0
    9f36:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9f3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f3e:	4a4b      	ldr	r2, [pc, #300]	; (a06c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f44:	685a      	ldr	r2, [r3, #4]
    9f46:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9f4a:	2134      	movs	r1, #52	; 0x34
    9f4c:	fb01 f303 	mul.w	r3, r1, r3
    9f50:	4413      	add	r3, r2
    9f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9f56:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9f5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f5e:	4a43      	ldr	r2, [pc, #268]	; (a06c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f64:	685a      	ldr	r2, [r3, #4]
    9f66:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9f6a:	2134      	movs	r1, #52	; 0x34
    9f6c:	fb01 f303 	mul.w	r3, r1, r3
    9f70:	4413      	add	r3, r2
    9f72:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9f74:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9f78:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9f7c:	429a      	cmp	r2, r3
    9f7e:	d870      	bhi.n	a062 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9f80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9f84:	f003 030f 	and.w	r3, r3, #15
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	d104      	bne.n	9f98 <Adc_Ipw_CheckConversionChannels+0xf8>
    9f8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9f92:	3b10      	subs	r3, #16
    9f94:	b2db      	uxtb	r3, r3
    9f96:	e004      	b.n	9fa2 <Adc_Ipw_CheckConversionChannels+0x102>
    9f98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9f9c:	f023 030f 	bic.w	r3, r3, #15
    9fa0:	b2db      	uxtb	r3, r3
    9fa2:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9fa6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9faa:	4931      	ldr	r1, [pc, #196]	; (a070 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9fac:	4613      	mov	r3, r2
    9fae:	009b      	lsls	r3, r3, #2
    9fb0:	4413      	add	r3, r2
    9fb2:	009b      	lsls	r3, r3, #2
    9fb4:	440b      	add	r3, r1
    9fb6:	330c      	adds	r3, #12
    9fb8:	6819      	ldr	r1, [r3, #0]
    9fba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9fbe:	482c      	ldr	r0, [pc, #176]	; (a070 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9fc0:	4613      	mov	r3, r2
    9fc2:	009b      	lsls	r3, r3, #2
    9fc4:	4413      	add	r3, r2
    9fc6:	009b      	lsls	r3, r3, #2
    9fc8:	4403      	add	r3, r0
    9fca:	3308      	adds	r3, #8
    9fcc:	881b      	ldrh	r3, [r3, #0]
    9fce:	b29b      	uxth	r3, r3
    9fd0:	005b      	lsls	r3, r3, #1
    9fd2:	440b      	add	r3, r1
    9fd4:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9fd6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9fda:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9fde:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9fe2:	4618      	mov	r0, r3
    9fe4:	f7ff fe50 	bl	9c88 <Adc_Ipw_CheckValidConversion>
    9fe8:	4603      	mov	r3, r0
    9fea:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9fee:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d032      	beq.n	a05c <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9ff6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9ffa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9ffe:	e026      	b.n	a04e <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    a000:	f89d 001b 	ldrb.w	r0, [sp, #27]
    a004:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a008:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a00c:	1ad3      	subs	r3, r2, r3
    a00e:	b2db      	uxtb	r3, r3
    a010:	4619      	mov	r1, r3
    a012:	f7fe fcaf 	bl	8974 <Adc_Ip_GetConvData>
    a016:	4603      	mov	r3, r0
    a018:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    a01c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a020:	f89d 301a 	ldrb.w	r3, [sp, #26]
    a024:	fa02 f303 	lsl.w	r3, r2, r3
    a028:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    a02c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a030:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    a034:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a038:	9300      	str	r3, [sp, #0]
    a03a:	460b      	mov	r3, r1
    a03c:	9907      	ldr	r1, [sp, #28]
    a03e:	9805      	ldr	r0, [sp, #20]
    a040:	f000 fa02 	bl	a448 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    a044:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a048:	3301      	adds	r3, #1
    a04a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a04e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a052:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a056:	429a      	cmp	r2, r3
    a058:	d3d2      	bcc.n	a000 <Adc_Ipw_CheckConversionChannels+0x160>
    a05a:	e002      	b.n	a062 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    a05c:	2301      	movs	r3, #1
    a05e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    a062:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    a066:	4618      	mov	r0, r3
    a068:	b00a      	add	sp, #40	; 0x28
    a06a:	bd10      	pop	{r4, pc}
    a06c:	1fff8d0c 	.word	0x1fff8d0c
    a070:	1fff8d10 	.word	0x1fff8d10

0000a074 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a074:	b500      	push	{lr}
    a076:	b087      	sub	sp, #28
    a078:	4603      	mov	r3, r0
    a07a:	f88d 300f 	strb.w	r3, [sp, #15]
    a07e:	460b      	mov	r3, r1
    a080:	f8ad 300c 	strh.w	r3, [sp, #12]
    a084:	4613      	mov	r3, r2
    a086:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a08a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a08e:	4a33      	ldr	r2, [pc, #204]	; (a15c <Adc_Ipw_RestartConversion+0xe8>)
    a090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a094:	68da      	ldr	r2, [r3, #12]
    a096:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a09a:	005b      	lsls	r3, r3, #1
    a09c:	4413      	add	r3, r2
    a09e:	881b      	ldrh	r3, [r3, #0]
    a0a0:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a0a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0a8:	4a2c      	ldr	r2, [pc, #176]	; (a15c <Adc_Ipw_RestartConversion+0xe8>)
    a0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ae:	681a      	ldr	r2, [r3, #0]
    a0b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0b4:	4413      	add	r3, r2
    a0b6:	7c1b      	ldrb	r3, [r3, #16]
    a0b8:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    a0bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0c0:	4a26      	ldr	r2, [pc, #152]	; (a15c <Adc_Ipw_RestartConversion+0xe8>)
    a0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c6:	685a      	ldr	r2, [r3, #4]
    a0c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a0cc:	2134      	movs	r1, #52	; 0x34
    a0ce:	fb01 f303 	mul.w	r3, r1, r3
    a0d2:	4413      	add	r3, r2
    a0d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a0d8:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    a0dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a0e0:	2b0f      	cmp	r3, #15
    a0e2:	d805      	bhi.n	a0f0 <Adc_Ipw_RestartConversion+0x7c>
    a0e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a0e8:	f003 030f 	and.w	r3, r3, #15
    a0ec:	b2db      	uxtb	r3, r3
    a0ee:	e000      	b.n	a0f2 <Adc_Ipw_RestartConversion+0x7e>
    a0f0:	2310      	movs	r3, #16
    a0f2:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    a0f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a0fa:	2b10      	cmp	r3, #16
    a0fc:	d811      	bhi.n	a122 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    a0fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a102:	4917      	ldr	r1, [pc, #92]	; (a160 <Adc_Ipw_RestartConversion+0xec>)
    a104:	4613      	mov	r3, r2
    a106:	009b      	lsls	r3, r3, #2
    a108:	4413      	add	r3, r2
    a10a:	009b      	lsls	r3, r3, #2
    a10c:	440b      	add	r3, r1
    a10e:	3310      	adds	r3, #16
    a110:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a114:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a116:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a11a:	4618      	mov	r0, r3
    a11c:	f000 fc68 	bl	a9f0 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    a120:	e017      	b.n	a152 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a122:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a126:	490e      	ldr	r1, [pc, #56]	; (a160 <Adc_Ipw_RestartConversion+0xec>)
    a128:	4613      	mov	r3, r2
    a12a:	009b      	lsls	r3, r3, #2
    a12c:	4413      	add	r3, r2
    a12e:	009b      	lsls	r3, r3, #2
    a130:	440b      	add	r3, r1
    a132:	3310      	adds	r3, #16
    a134:	2200      	movs	r2, #0
    a136:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a138:	f89d 2013 	ldrb.w	r2, [sp, #19]
    a13c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a140:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a144:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a148:	9300      	str	r3, [sp, #0]
    a14a:	4613      	mov	r3, r2
    a14c:	220f      	movs	r2, #15
    a14e:	f7ff fae1 	bl	9714 <Adc_Ipw_ConfigureConversion>
}
    a152:	bf00      	nop
    a154:	b007      	add	sp, #28
    a156:	f85d fb04 	ldr.w	pc, [sp], #4
    a15a:	bf00      	nop
    a15c:	1fff8d0c 	.word	0x1fff8d0c
    a160:	1fff8d10 	.word	0x1fff8d10

0000a164 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    a164:	b084      	sub	sp, #16
    a166:	4603      	mov	r3, r0
    a168:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    a16c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a170:	4907      	ldr	r1, [pc, #28]	; (a190 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    a172:	4613      	mov	r3, r2
    a174:	009b      	lsls	r3, r3, #2
    a176:	4413      	add	r3, r2
    a178:	009b      	lsls	r3, r3, #2
    a17a:	440b      	add	r3, r1
    a17c:	3308      	adds	r3, #8
    a17e:	881b      	ldrh	r3, [r3, #0]
    a180:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    a184:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a188:	4618      	mov	r0, r3
    a18a:	b004      	add	sp, #16
    a18c:	4770      	bx	lr
    a18e:	bf00      	nop
    a190:	1fff8d10 	.word	0x1fff8d10

0000a194 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    a194:	b510      	push	{r4, lr}
    a196:	b084      	sub	sp, #16
    a198:	4604      	mov	r4, r0
    a19a:	4608      	mov	r0, r1
    a19c:	4611      	mov	r1, r2
    a19e:	461a      	mov	r2, r3
    a1a0:	4623      	mov	r3, r4
    a1a2:	f88d 3007 	strb.w	r3, [sp, #7]
    a1a6:	4603      	mov	r3, r0
    a1a8:	f8ad 3004 	strh.w	r3, [sp, #4]
    a1ac:	460b      	mov	r3, r1
    a1ae:	f8ad 3002 	strh.w	r3, [sp, #2]
    a1b2:	4613      	mov	r3, r2
    a1b4:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a1b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1bc:	4a4f      	ldr	r2, [pc, #316]	; (a2fc <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1c2:	68da      	ldr	r2, [r3, #12]
    a1c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a1c8:	005b      	lsls	r3, r3, #1
    a1ca:	4413      	add	r3, r2
    a1cc:	881b      	ldrh	r3, [r3, #0]
    a1ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    a1d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a1d6:	494a      	ldr	r1, [pc, #296]	; (a300 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a1d8:	4613      	mov	r3, r2
    a1da:	009b      	lsls	r3, r3, #2
    a1dc:	4413      	add	r3, r2
    a1de:	009b      	lsls	r3, r3, #2
    a1e0:	440b      	add	r3, r1
    a1e2:	3304      	adds	r3, #4
    a1e4:	2201      	movs	r2, #1
    a1e6:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a1e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a1ec:	4944      	ldr	r1, [pc, #272]	; (a300 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a1ee:	4613      	mov	r3, r2
    a1f0:	009b      	lsls	r3, r3, #2
    a1f2:	4413      	add	r3, r2
    a1f4:	009b      	lsls	r3, r3, #2
    a1f6:	440b      	add	r3, r1
    a1f8:	681b      	ldr	r3, [r3, #0]
    a1fa:	2b01      	cmp	r3, #1
    a1fc:	d109      	bne.n	a212 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    a1fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a202:	493f      	ldr	r1, [pc, #252]	; (a300 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a204:	4613      	mov	r3, r2
    a206:	009b      	lsls	r3, r3, #2
    a208:	4413      	add	r3, r2
    a20a:	009b      	lsls	r3, r3, #2
    a20c:	440b      	add	r3, r1
    a20e:	2202      	movs	r2, #2
    a210:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    a212:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a216:	4618      	mov	r0, r3
    a218:	f7ff ffa4 	bl	a164 <Adc_Ipw_GetCurrentSampleCount>
    a21c:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    a21e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a222:	9a02      	ldr	r2, [sp, #8]
    a224:	429a      	cmp	r2, r3
    a226:	d35d      	bcc.n	a2e4 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    a228:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a22c:	4934      	ldr	r1, [pc, #208]	; (a300 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a22e:	4613      	mov	r3, r2
    a230:	009b      	lsls	r3, r3, #2
    a232:	4413      	add	r3, r2
    a234:	009b      	lsls	r3, r3, #2
    a236:	440b      	add	r3, r1
    a238:	2203      	movs	r2, #3
    a23a:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a23c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a240:	4a2e      	ldr	r2, [pc, #184]	; (a2fc <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a246:	685a      	ldr	r2, [r3, #4]
    a248:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a24c:	2134      	movs	r1, #52	; 0x34
    a24e:	fb01 f303 	mul.w	r3, r1, r3
    a252:	4413      	add	r3, r2
    a254:	699b      	ldr	r3, [r3, #24]
    a256:	2b00      	cmp	r3, #0
    a258:	d117      	bne.n	a28a <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    a25a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a25e:	4a27      	ldr	r2, [pc, #156]	; (a2fc <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a264:	685a      	ldr	r2, [r3, #4]
    a266:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a26a:	2134      	movs	r1, #52	; 0x34
    a26c:	fb01 f303 	mul.w	r3, r1, r3
    a270:	4413      	add	r3, r2
    a272:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a274:	2b01      	cmp	r3, #1
    a276:	d108      	bne.n	a28a <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a278:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a280:	4611      	mov	r1, r2
    a282:	4618      	mov	r0, r3
    a284:	f7ff fde6 	bl	9e54 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a288:	e035      	b.n	a2f6 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a28a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a28e:	4a1b      	ldr	r2, [pc, #108]	; (a2fc <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a294:	685a      	ldr	r2, [r3, #4]
    a296:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a29a:	2134      	movs	r1, #52	; 0x34
    a29c:	fb01 f303 	mul.w	r3, r1, r3
    a2a0:	4413      	add	r3, r2
    a2a2:	689b      	ldr	r3, [r3, #8]
    a2a4:	2b01      	cmp	r3, #1
    a2a6:	d114      	bne.n	a2d2 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a2a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a2ac:	4914      	ldr	r1, [pc, #80]	; (a300 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a2ae:	4613      	mov	r3, r2
    a2b0:	009b      	lsls	r3, r3, #2
    a2b2:	4413      	add	r3, r2
    a2b4:	009b      	lsls	r3, r3, #2
    a2b6:	440b      	add	r3, r1
    a2b8:	3308      	adds	r3, #8
    a2ba:	2200      	movs	r2, #0
    a2bc:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a2be:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a2c2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a2c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2ca:	4618      	mov	r0, r3
    a2cc:	f7ff fed2 	bl	a074 <Adc_Ipw_RestartConversion>
}
    a2d0:	e011      	b.n	a2f6 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a2d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a2d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2da:	4611      	mov	r1, r2
    a2dc:	4618      	mov	r0, r3
    a2de:	f7ff fdb9 	bl	9e54 <Adc_Ipw_UpdateQueue>
}
    a2e2:	e008      	b.n	a2f6 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a2e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a2e8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a2ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2f0:	4618      	mov	r0, r3
    a2f2:	f7ff febf 	bl	a074 <Adc_Ipw_RestartConversion>
}
    a2f6:	bf00      	nop
    a2f8:	b004      	add	sp, #16
    a2fa:	bd10      	pop	{r4, pc}
    a2fc:	1fff8d0c 	.word	0x1fff8d0c
    a300:	1fff8d10 	.word	0x1fff8d10

0000a304 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a304:	b510      	push	{r4, lr}
    a306:	b088      	sub	sp, #32
    a308:	4604      	mov	r4, r0
    a30a:	4608      	mov	r0, r1
    a30c:	4611      	mov	r1, r2
    a30e:	461a      	mov	r2, r3
    a310:	4623      	mov	r3, r4
    a312:	f88d 300f 	strb.w	r3, [sp, #15]
    a316:	4603      	mov	r3, r0
    a318:	f8ad 300c 	strh.w	r3, [sp, #12]
    a31c:	460b      	mov	r3, r1
    a31e:	f88d 300e 	strb.w	r3, [sp, #14]
    a322:	4613      	mov	r3, r2
    a324:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a328:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a32c:	4a44      	ldr	r2, [pc, #272]	; (a440 <Adc_Ipw_EndConversion+0x13c>)
    a32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a332:	68da      	ldr	r2, [r3, #12]
    a334:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a338:	005b      	lsls	r3, r3, #1
    a33a:	4413      	add	r3, r2
    a33c:	881b      	ldrh	r3, [r3, #0]
    a33e:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a342:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a346:	4a3e      	ldr	r2, [pc, #248]	; (a440 <Adc_Ipw_EndConversion+0x13c>)
    a348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a34c:	685a      	ldr	r2, [r3, #4]
    a34e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a352:	2134      	movs	r1, #52	; 0x34
    a354:	fb01 f303 	mul.w	r3, r1, r3
    a358:	4413      	add	r3, r2
    a35a:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a35c:	9b06      	ldr	r3, [sp, #24]
    a35e:	8b9a      	ldrh	r2, [r3, #28]
    a360:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a364:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a368:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a36c:	f7ff fd98 	bl	9ea0 <Adc_Ipw_CheckConversionChannels>
    a370:	4603      	mov	r3, r0
    a372:	2b00      	cmp	r3, #0
    a374:	d160      	bne.n	a438 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a376:	9b06      	ldr	r3, [sp, #24]
    a378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a37c:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a380:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a384:	492f      	ldr	r1, [pc, #188]	; (a444 <Adc_Ipw_EndConversion+0x140>)
    a386:	4613      	mov	r3, r2
    a388:	009b      	lsls	r3, r3, #2
    a38a:	4413      	add	r3, r2
    a38c:	009b      	lsls	r3, r3, #2
    a38e:	440b      	add	r3, r1
    a390:	3310      	adds	r3, #16
    a392:	781b      	ldrb	r3, [r3, #0]
    a394:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a398:	429a      	cmp	r2, r3
    a39a:	d929      	bls.n	a3f0 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a39c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a3a0:	4928      	ldr	r1, [pc, #160]	; (a444 <Adc_Ipw_EndConversion+0x140>)
    a3a2:	4613      	mov	r3, r2
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	4413      	add	r3, r2
    a3a8:	009b      	lsls	r3, r3, #2
    a3aa:	440b      	add	r3, r1
    a3ac:	3310      	adds	r3, #16
    a3ae:	781b      	ldrb	r3, [r3, #0]
    a3b0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a3b4:	1ad3      	subs	r3, r2, r3
    a3b6:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a3ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a3be:	2b0f      	cmp	r3, #15
    a3c0:	d805      	bhi.n	a3ce <Adc_Ipw_EndConversion+0xca>
    a3c2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a3c6:	f003 030f 	and.w	r3, r3, #15
    a3ca:	b2db      	uxtb	r3, r3
    a3cc:	e000      	b.n	a3d0 <Adc_Ipw_EndConversion+0xcc>
    a3ce:	2310      	movs	r3, #16
    a3d0:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a3d4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a3d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a3dc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a3e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3e4:	9300      	str	r3, [sp, #0]
    a3e6:	4613      	mov	r3, r2
    a3e8:	220f      	movs	r2, #15
    a3ea:	f7ff f993 	bl	9714 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a3ee:	e023      	b.n	a438 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a3f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a3f4:	4913      	ldr	r1, [pc, #76]	; (a444 <Adc_Ipw_EndConversion+0x140>)
    a3f6:	4613      	mov	r3, r2
    a3f8:	009b      	lsls	r3, r3, #2
    a3fa:	4413      	add	r3, r2
    a3fc:	009b      	lsls	r3, r3, #2
    a3fe:	440b      	add	r3, r1
    a400:	3308      	adds	r3, #8
    a402:	881b      	ldrh	r3, [r3, #0]
    a404:	b29b      	uxth	r3, r3
    a406:	3301      	adds	r3, #1
    a408:	b298      	uxth	r0, r3
    a40a:	490e      	ldr	r1, [pc, #56]	; (a444 <Adc_Ipw_EndConversion+0x140>)
    a40c:	4613      	mov	r3, r2
    a40e:	009b      	lsls	r3, r3, #2
    a410:	4413      	add	r3, r2
    a412:	009b      	lsls	r3, r3, #2
    a414:	440b      	add	r3, r1
    a416:	3308      	adds	r3, #8
    a418:	4602      	mov	r2, r0
    a41a:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a41c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a420:	2b00      	cmp	r3, #0
    a422:	d009      	beq.n	a438 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a424:	9b06      	ldr	r3, [sp, #24]
    a426:	8b9a      	ldrh	r2, [r3, #28]
    a428:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a42c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a430:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a434:	f7ff feae 	bl	a194 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a438:	bf00      	nop
    a43a:	b008      	add	sp, #32
    a43c:	bd10      	pop	{r4, pc}
    a43e:	bf00      	nop
    a440:	1fff8d0c 	.word	0x1fff8d0c
    a444:	1fff8d10 	.word	0x1fff8d10

0000a448 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a448:	b084      	sub	sp, #16
    a44a:	9003      	str	r0, [sp, #12]
    a44c:	9102      	str	r1, [sp, #8]
    a44e:	4611      	mov	r1, r2
    a450:	461a      	mov	r2, r3
    a452:	460b      	mov	r3, r1
    a454:	f8ad 3006 	strh.w	r3, [sp, #6]
    a458:	4613      	mov	r3, r2
    a45a:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a45e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a462:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a466:	fb02 f303 	mul.w	r3, r2, r3
    a46a:	005b      	lsls	r3, r3, #1
    a46c:	9a02      	ldr	r2, [sp, #8]
    a46e:	4413      	add	r3, r2
    a470:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a474:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a476:	bf00      	nop
    a478:	b004      	add	sp, #16
    a47a:	4770      	bx	lr

0000a47c <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a47c:	b500      	push	{lr}
    a47e:	b085      	sub	sp, #20
    a480:	4603      	mov	r3, r0
    a482:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a486:	f7ff fce1 	bl	9e4c <Adc_GetCoreID>
    a48a:	4603      	mov	r3, r0
    a48c:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a490:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a494:	b2db      	uxtb	r3, r3
    a496:	461a      	mov	r2, r3
    a498:	4b14      	ldr	r3, [pc, #80]	; (a4ec <Adc_Ipw_EndConversionNotification+0x70>)
    a49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a49e:	681a      	ldr	r2, [r3, #0]
    a4a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4a4:	4413      	add	r3, r2
    a4a6:	f893 3020 	ldrb.w	r3, [r3, #32]
    a4aa:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a4ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4b2:	4a0f      	ldr	r2, [pc, #60]	; (a4f0 <Adc_Ipw_EndConversionNotification+0x74>)
    a4b4:	00db      	lsls	r3, r3, #3
    a4b6:	4413      	add	r3, r2
    a4b8:	885b      	ldrh	r3, [r3, #2]
    a4ba:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a4be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4c2:	4a0b      	ldr	r2, [pc, #44]	; (a4f0 <Adc_Ipw_EndConversionNotification+0x74>)
    a4c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a4c8:	b29b      	uxth	r3, r3
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d009      	beq.n	a4e2 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a4ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a4d2:	b2db      	uxtb	r3, r3
    a4d4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a4d8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a4dc:	2201      	movs	r2, #1
    a4de:	f7ff ff11 	bl	a304 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a4e2:	bf00      	nop
    a4e4:	b005      	add	sp, #20
    a4e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a4ea:	bf00      	nop
    a4ec:	1fff8d0c 	.word	0x1fff8d0c
    a4f0:	1fff8d38 	.word	0x1fff8d38

0000a4f4 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a4f4:	b500      	push	{lr}
    a4f6:	b085      	sub	sp, #20
    a4f8:	4603      	mov	r3, r0
    a4fa:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a4fe:	2300      	movs	r3, #0
    a500:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a504:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a508:	4618      	mov	r0, r3
    a50a:	f7ff ffb7 	bl	a47c <Adc_Ipw_EndConversionNotification>
}
    a50e:	bf00      	nop
    a510:	b005      	add	sp, #20
    a512:	f85d fb04 	ldr.w	pc, [sp], #4

0000a516 <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    a516:	b500      	push	{lr}
    a518:	b085      	sub	sp, #20
    a51a:	4603      	mov	r3, r0
    a51c:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    a520:	2301      	movs	r3, #1
    a522:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a526:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a52a:	4618      	mov	r0, r3
    a52c:	f7ff ffa6 	bl	a47c <Adc_Ipw_EndConversionNotification>
}
    a530:	bf00      	nop
    a532:	b005      	add	sp, #20
    a534:	f85d fb04 	ldr.w	pc, [sp], #4

0000a538 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a538:	b084      	sub	sp, #16
    a53a:	9003      	str	r0, [sp, #12]
    a53c:	9201      	str	r2, [sp, #4]
    a53e:	461a      	mov	r2, r3
    a540:	460b      	mov	r3, r1
    a542:	f88d 300b 	strb.w	r3, [sp, #11]
    a546:	4613      	mov	r3, r2
    a548:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a54c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a550:	2b00      	cmp	r3, #0
    a552:	d016      	beq.n	a582 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a554:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a558:	9903      	ldr	r1, [sp, #12]
    a55a:	4613      	mov	r3, r2
    a55c:	009b      	lsls	r3, r3, #2
    a55e:	4413      	add	r3, r2
    a560:	00db      	lsls	r3, r3, #3
    a562:	440b      	add	r3, r1
    a564:	3310      	adds	r3, #16
    a566:	6819      	ldr	r1, [r3, #0]
    a568:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a56c:	9b01      	ldr	r3, [sp, #4]
    a56e:	4319      	orrs	r1, r3
    a570:	9803      	ldr	r0, [sp, #12]
    a572:	4613      	mov	r3, r2
    a574:	009b      	lsls	r3, r3, #2
    a576:	4413      	add	r3, r2
    a578:	00db      	lsls	r3, r3, #3
    a57a:	4403      	add	r3, r0
    a57c:	3310      	adds	r3, #16
    a57e:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a580:	e016      	b.n	a5b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a582:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a586:	9903      	ldr	r1, [sp, #12]
    a588:	4613      	mov	r3, r2
    a58a:	009b      	lsls	r3, r3, #2
    a58c:	4413      	add	r3, r2
    a58e:	00db      	lsls	r3, r3, #3
    a590:	440b      	add	r3, r1
    a592:	3310      	adds	r3, #16
    a594:	6819      	ldr	r1, [r3, #0]
    a596:	9b01      	ldr	r3, [sp, #4]
    a598:	43db      	mvns	r3, r3
    a59a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a59e:	4019      	ands	r1, r3
    a5a0:	9803      	ldr	r0, [sp, #12]
    a5a2:	4613      	mov	r3, r2
    a5a4:	009b      	lsls	r3, r3, #2
    a5a6:	4413      	add	r3, r2
    a5a8:	00db      	lsls	r3, r3, #3
    a5aa:	4403      	add	r3, r0
    a5ac:	3310      	adds	r3, #16
    a5ae:	6019      	str	r1, [r3, #0]
}
    a5b0:	bf00      	nop
    a5b2:	b004      	add	sp, #16
    a5b4:	4770      	bx	lr

0000a5b6 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a5b6:	b082      	sub	sp, #8
    a5b8:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a5ba:	9b01      	ldr	r3, [sp, #4]
    a5bc:	681b      	ldr	r3, [r3, #0]
    a5be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a5c2:	9b01      	ldr	r3, [sp, #4]
    a5c4:	601a      	str	r2, [r3, #0]
}
    a5c6:	bf00      	nop
    a5c8:	b002      	add	sp, #8
    a5ca:	4770      	bx	lr

0000a5cc <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a5cc:	b082      	sub	sp, #8
    a5ce:	9001      	str	r0, [sp, #4]
    a5d0:	460b      	mov	r3, r1
    a5d2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a5d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a5da:	2b00      	cmp	r3, #0
    a5dc:	d006      	beq.n	a5ec <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a5de:	9b01      	ldr	r3, [sp, #4]
    a5e0:	681b      	ldr	r3, [r3, #0]
    a5e2:	f043 0202 	orr.w	r2, r3, #2
    a5e6:	9b01      	ldr	r3, [sp, #4]
    a5e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a5ea:	e005      	b.n	a5f8 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a5ec:	9b01      	ldr	r3, [sp, #4]
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	f023 0202 	bic.w	r2, r3, #2
    a5f4:	9b01      	ldr	r3, [sp, #4]
    a5f6:	601a      	str	r2, [r3, #0]
}
    a5f8:	bf00      	nop
    a5fa:	b002      	add	sp, #8
    a5fc:	4770      	bx	lr

0000a5fe <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a5fe:	b086      	sub	sp, #24
    a600:	9003      	str	r0, [sp, #12]
    a602:	460b      	mov	r3, r1
    a604:	9201      	str	r2, [sp, #4]
    a606:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a60a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a60e:	9903      	ldr	r1, [sp, #12]
    a610:	4613      	mov	r3, r2
    a612:	009b      	lsls	r3, r3, #2
    a614:	4413      	add	r3, r2
    a616:	00db      	lsls	r3, r3, #3
    a618:	440b      	add	r3, r1
    a61a:	3310      	adds	r3, #16
    a61c:	681b      	ldr	r3, [r3, #0]
    a61e:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a620:	9b05      	ldr	r3, [sp, #20]
    a622:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a626:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a628:	9b01      	ldr	r3, [sp, #4]
    a62a:	781b      	ldrb	r3, [r3, #0]
    a62c:	461a      	mov	r2, r3
    a62e:	9b05      	ldr	r3, [sp, #20]
    a630:	4313      	orrs	r3, r2
    a632:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a634:	9b01      	ldr	r3, [sp, #4]
    a636:	785b      	ldrb	r3, [r3, #1]
    a638:	021b      	lsls	r3, r3, #8
    a63a:	b29b      	uxth	r3, r3
    a63c:	9a05      	ldr	r2, [sp, #20]
    a63e:	4313      	orrs	r3, r2
    a640:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a642:	9b01      	ldr	r3, [sp, #4]
    a644:	789b      	ldrb	r3, [r3, #2]
    a646:	041b      	lsls	r3, r3, #16
    a648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a64c:	9a05      	ldr	r2, [sp, #20]
    a64e:	4313      	orrs	r3, r2
    a650:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a652:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a656:	9903      	ldr	r1, [sp, #12]
    a658:	4613      	mov	r3, r2
    a65a:	009b      	lsls	r3, r3, #2
    a65c:	4413      	add	r3, r2
    a65e:	00db      	lsls	r3, r3, #3
    a660:	440b      	add	r3, r1
    a662:	3310      	adds	r3, #16
    a664:	9a05      	ldr	r2, [sp, #20]
    a666:	601a      	str	r2, [r3, #0]
}
    a668:	bf00      	nop
    a66a:	b006      	add	sp, #24
    a66c:	4770      	bx	lr

0000a66e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a66e:	b082      	sub	sp, #8
    a670:	9001      	str	r0, [sp, #4]
    a672:	460b      	mov	r3, r1
    a674:	f88d 3003 	strb.w	r3, [sp, #3]
    a678:	4613      	mov	r3, r2
    a67a:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a67e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a682:	9901      	ldr	r1, [sp, #4]
    a684:	4613      	mov	r3, r2
    a686:	009b      	lsls	r3, r3, #2
    a688:	4413      	add	r3, r2
    a68a:	00db      	lsls	r3, r3, #3
    a68c:	440b      	add	r3, r1
    a68e:	3314      	adds	r3, #20
    a690:	6819      	ldr	r1, [r3, #0]
    a692:	f8bd 3000 	ldrh.w	r3, [sp]
    a696:	041b      	lsls	r3, r3, #16
    a698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a69c:	43db      	mvns	r3, r3
    a69e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a6a2:	4019      	ands	r1, r3
    a6a4:	9801      	ldr	r0, [sp, #4]
    a6a6:	4613      	mov	r3, r2
    a6a8:	009b      	lsls	r3, r3, #2
    a6aa:	4413      	add	r3, r2
    a6ac:	00db      	lsls	r3, r3, #3
    a6ae:	4403      	add	r3, r0
    a6b0:	3314      	adds	r3, #20
    a6b2:	6019      	str	r1, [r3, #0]
}
    a6b4:	bf00      	nop
    a6b6:	b002      	add	sp, #8
    a6b8:	4770      	bx	lr

0000a6ba <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a6ba:	b500      	push	{lr}
    a6bc:	b087      	sub	sp, #28
    a6be:	9001      	str	r0, [sp, #4]
    a6c0:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6c2:	4a50      	ldr	r2, [pc, #320]	; (a804 <Pdb_Adc_Ip_Init+0x14a>)
    a6c4:	9b01      	ldr	r3, [sp, #4]
    a6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ca:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a6cc:	2300      	movs	r3, #0
    a6ce:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a6d0:	9b00      	ldr	r3, [sp, #0]
    a6d2:	681b      	ldr	r3, [r3, #0]
    a6d4:	049b      	lsls	r3, r3, #18
    a6d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a6da:	9a04      	ldr	r2, [sp, #16]
    a6dc:	4313      	orrs	r3, r2
    a6de:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a6e0:	9b00      	ldr	r3, [sp, #0]
    a6e2:	685b      	ldr	r3, [r3, #4]
    a6e4:	031b      	lsls	r3, r3, #12
    a6e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a6ea:	9a04      	ldr	r2, [sp, #16]
    a6ec:	4313      	orrs	r3, r2
    a6ee:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a6f0:	9b00      	ldr	r3, [sp, #0]
    a6f2:	689b      	ldr	r3, [r3, #8]
    a6f4:	009b      	lsls	r3, r3, #2
    a6f6:	f003 030c 	and.w	r3, r3, #12
    a6fa:	9a04      	ldr	r2, [sp, #16]
    a6fc:	4313      	orrs	r3, r2
    a6fe:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a700:	9b00      	ldr	r3, [sp, #0]
    a702:	68db      	ldr	r3, [r3, #12]
    a704:	021b      	lsls	r3, r3, #8
    a706:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a70a:	9a04      	ldr	r2, [sp, #16]
    a70c:	4313      	orrs	r3, r2
    a70e:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a710:	9b00      	ldr	r3, [sp, #0]
    a712:	7c1b      	ldrb	r3, [r3, #16]
    a714:	2b00      	cmp	r3, #0
    a716:	d003      	beq.n	a720 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a718:	9b04      	ldr	r3, [sp, #16]
    a71a:	f043 0302 	orr.w	r3, r3, #2
    a71e:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a720:	9b00      	ldr	r3, [sp, #0]
    a722:	7c5b      	ldrb	r3, [r3, #17]
    a724:	2b00      	cmp	r3, #0
    a726:	d003      	beq.n	a730 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a728:	9b04      	ldr	r3, [sp, #16]
    a72a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a72e:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a730:	9b00      	ldr	r3, [sp, #0]
    a732:	69db      	ldr	r3, [r3, #28]
    a734:	2b00      	cmp	r3, #0
    a736:	d003      	beq.n	a740 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a738:	9b04      	ldr	r3, [sp, #16]
    a73a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a73e:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a740:	9b03      	ldr	r3, [sp, #12]
    a742:	9a04      	ldr	r2, [sp, #16]
    a744:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a746:	9b00      	ldr	r3, [sp, #0]
    a748:	8a5b      	ldrh	r3, [r3, #18]
    a74a:	4619      	mov	r1, r3
    a74c:	9801      	ldr	r0, [sp, #4]
    a74e:	f000 f98f 	bl	aa70 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a752:	9b00      	ldr	r3, [sp, #0]
    a754:	7d1b      	ldrb	r3, [r3, #20]
    a756:	2b00      	cmp	r3, #0
    a758:	d03e      	beq.n	a7d8 <Pdb_Adc_Ip_Init+0x11e>
    a75a:	9b00      	ldr	r3, [sp, #0]
    a75c:	699b      	ldr	r3, [r3, #24]
    a75e:	2b00      	cmp	r3, #0
    a760:	d03a      	beq.n	a7d8 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a762:	2300      	movs	r3, #0
    a764:	f88d 3017 	strb.w	r3, [sp, #23]
    a768:	e030      	b.n	a7cc <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a76a:	9b00      	ldr	r3, [sp, #0]
    a76c:	6999      	ldr	r1, [r3, #24]
    a76e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a772:	4613      	mov	r3, r2
    a774:	009b      	lsls	r3, r3, #2
    a776:	4413      	add	r3, r2
    a778:	009b      	lsls	r3, r3, #2
    a77a:	440b      	add	r3, r1
    a77c:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a77e:	9b02      	ldr	r3, [sp, #8]
    a780:	7819      	ldrb	r1, [r3, #0]
    a782:	9b02      	ldr	r3, [sp, #8]
    a784:	3301      	adds	r3, #1
    a786:	461a      	mov	r2, r3
    a788:	9803      	ldr	r0, [sp, #12]
    a78a:	f7ff ff38 	bl	a5fe <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a78e:	2300      	movs	r3, #0
    a790:	f88d 3016 	strb.w	r3, [sp, #22]
    a794:	e011      	b.n	a7ba <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a796:	9b02      	ldr	r3, [sp, #8]
    a798:	7819      	ldrb	r1, [r3, #0]
    a79a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a79e:	9a02      	ldr	r2, [sp, #8]
    a7a0:	005b      	lsls	r3, r3, #1
    a7a2:	4413      	add	r3, r2
    a7a4:	889b      	ldrh	r3, [r3, #4]
    a7a6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a7aa:	9801      	ldr	r0, [sp, #4]
    a7ac:	f000 fa74 	bl	ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a7b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7b4:	3301      	adds	r3, #1
    a7b6:	f88d 3016 	strb.w	r3, [sp, #22]
    a7ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7be:	2b07      	cmp	r3, #7
    a7c0:	d9e9      	bls.n	a796 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a7c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7c6:	3301      	adds	r3, #1
    a7c8:	f88d 3017 	strb.w	r3, [sp, #23]
    a7cc:	9b00      	ldr	r3, [sp, #0]
    a7ce:	7d1b      	ldrb	r3, [r3, #20]
    a7d0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a7d4:	429a      	cmp	r2, r3
    a7d6:	d3c8      	bcc.n	a76a <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a7d8:	9801      	ldr	r0, [sp, #4]
    a7da:	f000 f89b 	bl	a914 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a7de:	9801      	ldr	r0, [sp, #4]
    a7e0:	f000 f92e 	bl	aa40 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a7e4:	9b00      	ldr	r3, [sp, #0]
    a7e6:	69da      	ldr	r2, [r3, #28]
    a7e8:	4907      	ldr	r1, [pc, #28]	; (a808 <Pdb_Adc_Ip_Init+0x14e>)
    a7ea:	9b01      	ldr	r3, [sp, #4]
    a7ec:	00db      	lsls	r3, r3, #3
    a7ee:	440b      	add	r3, r1
    a7f0:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a7f2:	4a05      	ldr	r2, [pc, #20]	; (a808 <Pdb_Adc_Ip_Init+0x14e>)
    a7f4:	9b01      	ldr	r3, [sp, #4]
    a7f6:	2101      	movs	r1, #1
    a7f8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a7fc:	bf00      	nop
    a7fe:	b007      	add	sp, #28
    a800:	f85d fb04 	ldr.w	pc, [sp], #4
    a804:	00010be4 	.word	0x00010be4
    a808:	1fff8de0 	.word	0x1fff8de0

0000a80c <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a80c:	b500      	push	{lr}
    a80e:	b097      	sub	sp, #92	; 0x5c
    a810:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a812:	2300      	movs	r3, #0
    a814:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a816:	2300      	movs	r3, #0
    a818:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a81a:	2300      	movs	r3, #0
    a81c:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a81e:	2300      	movs	r3, #0
    a820:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a822:	2300      	movs	r3, #0
    a824:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a828:	2300      	movs	r3, #0
    a82a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a82e:	2300      	movs	r3, #0
    a830:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a834:	2302      	movs	r3, #2
    a836:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a83a:	2300      	movs	r3, #0
    a83c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a840:	e04d      	b.n	a8de <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a842:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a846:	4613      	mov	r3, r2
    a848:	009b      	lsls	r3, r3, #2
    a84a:	4413      	add	r3, r2
    a84c:	009b      	lsls	r3, r3, #2
    a84e:	aa16      	add	r2, sp, #88	; 0x58
    a850:	4413      	add	r3, r2
    a852:	3b4c      	subs	r3, #76	; 0x4c
    a854:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a858:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a85a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a85e:	4613      	mov	r3, r2
    a860:	009b      	lsls	r3, r3, #2
    a862:	4413      	add	r3, r2
    a864:	009b      	lsls	r3, r3, #2
    a866:	aa16      	add	r2, sp, #88	; 0x58
    a868:	4413      	add	r3, r2
    a86a:	3b4b      	subs	r3, #75	; 0x4b
    a86c:	2200      	movs	r2, #0
    a86e:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a870:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a874:	4613      	mov	r3, r2
    a876:	009b      	lsls	r3, r3, #2
    a878:	4413      	add	r3, r2
    a87a:	009b      	lsls	r3, r3, #2
    a87c:	aa16      	add	r2, sp, #88	; 0x58
    a87e:	4413      	add	r3, r2
    a880:	3b4a      	subs	r3, #74	; 0x4a
    a882:	2200      	movs	r2, #0
    a884:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a886:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a88a:	4613      	mov	r3, r2
    a88c:	009b      	lsls	r3, r3, #2
    a88e:	4413      	add	r3, r2
    a890:	009b      	lsls	r3, r3, #2
    a892:	aa16      	add	r2, sp, #88	; 0x58
    a894:	4413      	add	r3, r2
    a896:	3b49      	subs	r3, #73	; 0x49
    a898:	2200      	movs	r2, #0
    a89a:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a89c:	2300      	movs	r3, #0
    a89e:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a8a2:	e013      	b.n	a8cc <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a8a4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a8a8:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a8ac:	4613      	mov	r3, r2
    a8ae:	009b      	lsls	r3, r3, #2
    a8b0:	4413      	add	r3, r2
    a8b2:	005b      	lsls	r3, r3, #1
    a8b4:	440b      	add	r3, r1
    a8b6:	005b      	lsls	r3, r3, #1
    a8b8:	aa16      	add	r2, sp, #88	; 0x58
    a8ba:	4413      	add	r3, r2
    a8bc:	2200      	movs	r2, #0
    a8be:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a8c2:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a8c6:	3301      	adds	r3, #1
    a8c8:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a8cc:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a8d0:	2b07      	cmp	r3, #7
    a8d2:	d9e7      	bls.n	a8a4 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a8d4:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a8d8:	3301      	adds	r3, #1
    a8da:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a8de:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a8e2:	2b01      	cmp	r3, #1
    a8e4:	d9ad      	bls.n	a842 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a8e6:	ab03      	add	r3, sp, #12
    a8e8:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a8ea:	2300      	movs	r3, #0
    a8ec:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a8ee:	ab0d      	add	r3, sp, #52	; 0x34
    a8f0:	4619      	mov	r1, r3
    a8f2:	9801      	ldr	r0, [sp, #4]
    a8f4:	f7ff fee1 	bl	a6ba <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a8f8:	9801      	ldr	r0, [sp, #4]
    a8fa:	f000 f823 	bl	a944 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a8fe:	4a04      	ldr	r2, [pc, #16]	; (a910 <Pdb_Adc_Ip_DeInit+0x104>)
    a900:	9b01      	ldr	r3, [sp, #4]
    a902:	2100      	movs	r1, #0
    a904:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a908:	bf00      	nop
    a90a:	b017      	add	sp, #92	; 0x5c
    a90c:	f85d fb04 	ldr.w	pc, [sp], #4
    a910:	1fff8de0 	.word	0x1fff8de0

0000a914 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a914:	b500      	push	{lr}
    a916:	b085      	sub	sp, #20
    a918:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a91a:	4a09      	ldr	r2, [pc, #36]	; (a940 <Pdb_Adc_Ip_Enable+0x2c>)
    a91c:	9b01      	ldr	r3, [sp, #4]
    a91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a922:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a924:	f001 fdbe 	bl	c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a928:	9b03      	ldr	r3, [sp, #12]
    a92a:	681b      	ldr	r3, [r3, #0]
    a92c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a930:	9b03      	ldr	r3, [sp, #12]
    a932:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a934:	f001 fde2 	bl	c4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a938:	bf00      	nop
    a93a:	b005      	add	sp, #20
    a93c:	f85d fb04 	ldr.w	pc, [sp], #4
    a940:	00010be4 	.word	0x00010be4

0000a944 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a944:	b500      	push	{lr}
    a946:	b085      	sub	sp, #20
    a948:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a94a:	4a08      	ldr	r2, [pc, #32]	; (a96c <Pdb_Adc_Ip_Disable+0x28>)
    a94c:	9b01      	ldr	r3, [sp, #4]
    a94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a952:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a954:	f001 fdf8 	bl	c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a958:	9803      	ldr	r0, [sp, #12]
    a95a:	f7ff fe2c 	bl	a5b6 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a95e:	f001 fe1f 	bl	c5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a962:	bf00      	nop
    a964:	b005      	add	sp, #20
    a966:	f85d fb04 	ldr.w	pc, [sp], #4
    a96a:	bf00      	nop
    a96c:	00010be4 	.word	0x00010be4

0000a970 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a970:	b500      	push	{lr}
    a972:	b085      	sub	sp, #20
    a974:	9001      	str	r0, [sp, #4]
    a976:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a978:	4a0e      	ldr	r2, [pc, #56]	; (a9b4 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a97a:	9b01      	ldr	r3, [sp, #4]
    a97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a980:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a982:	f001 fe33 	bl	c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a986:	9b03      	ldr	r3, [sp, #12]
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a98c:	9b02      	ldr	r3, [sp, #8]
    a98e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a992:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a994:	9b00      	ldr	r3, [sp, #0]
    a996:	021b      	lsls	r3, r3, #8
    a998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a99c:	9a02      	ldr	r2, [sp, #8]
    a99e:	4313      	orrs	r3, r2
    a9a0:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a9a2:	9b03      	ldr	r3, [sp, #12]
    a9a4:	9a02      	ldr	r2, [sp, #8]
    a9a6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a9a8:	f001 fe4c 	bl	c644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a9ac:	bf00      	nop
    a9ae:	b005      	add	sp, #20
    a9b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a9b4:	00010be4 	.word	0x00010be4

0000a9b8 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a9b8:	b500      	push	{lr}
    a9ba:	b085      	sub	sp, #20
    a9bc:	9001      	str	r0, [sp, #4]
    a9be:	460b      	mov	r3, r1
    a9c0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9c4:	4a09      	ldr	r2, [pc, #36]	; (a9ec <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a9c6:	9b01      	ldr	r3, [sp, #4]
    a9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9cc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a9ce:	f001 fe5f 	bl	c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a9d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a9d6:	4619      	mov	r1, r3
    a9d8:	9803      	ldr	r0, [sp, #12]
    a9da:	f7ff fdf7 	bl	a5cc <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a9de:	f001 fe83 	bl	c6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a9e2:	bf00      	nop
    a9e4:	b005      	add	sp, #20
    a9e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a9ea:	bf00      	nop
    a9ec:	00010be4 	.word	0x00010be4

0000a9f0 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a9f0:	b500      	push	{lr}
    a9f2:	b085      	sub	sp, #20
    a9f4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9f6:	4a09      	ldr	r2, [pc, #36]	; (aa1c <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a9f8:	9b01      	ldr	r3, [sp, #4]
    a9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9fe:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    aa00:	f001 fe98 	bl	c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    aa04:	9b03      	ldr	r3, [sp, #12]
    aa06:	681b      	ldr	r3, [r3, #0]
    aa08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    aa0c:	9b03      	ldr	r3, [sp, #12]
    aa0e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    aa10:	f001 febc 	bl	c78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    aa14:	bf00      	nop
    aa16:	b005      	add	sp, #20
    aa18:	f85d fb04 	ldr.w	pc, [sp], #4
    aa1c:	00010be4 	.word	0x00010be4

0000aa20 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    aa20:	b084      	sub	sp, #16
    aa22:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa24:	4a05      	ldr	r2, [pc, #20]	; (aa3c <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    aa26:	9b01      	ldr	r3, [sp, #4]
    aa28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa2c:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    aa2e:	9b03      	ldr	r3, [sp, #12]
    aa30:	689b      	ldr	r3, [r3, #8]
    aa32:	b29b      	uxth	r3, r3
}
    aa34:	4618      	mov	r0, r3
    aa36:	b004      	add	sp, #16
    aa38:	4770      	bx	lr
    aa3a:	bf00      	nop
    aa3c:	00010be4 	.word	0x00010be4

0000aa40 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    aa40:	b500      	push	{lr}
    aa42:	b085      	sub	sp, #20
    aa44:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa46:	4a09      	ldr	r2, [pc, #36]	; (aa6c <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    aa48:	9b01      	ldr	r3, [sp, #4]
    aa4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa4e:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    aa50:	f001 fec2 	bl	c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    aa54:	9b03      	ldr	r3, [sp, #12]
    aa56:	681b      	ldr	r3, [r3, #0]
    aa58:	f043 0201 	orr.w	r2, r3, #1
    aa5c:	9b03      	ldr	r3, [sp, #12]
    aa5e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    aa60:	f001 fee6 	bl	c830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    aa64:	bf00      	nop
    aa66:	b005      	add	sp, #20
    aa68:	f85d fb04 	ldr.w	pc, [sp], #4
    aa6c:	00010be4 	.word	0x00010be4

0000aa70 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    aa70:	b500      	push	{lr}
    aa72:	b085      	sub	sp, #20
    aa74:	9001      	str	r0, [sp, #4]
    aa76:	460b      	mov	r3, r1
    aa78:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa7c:	4a0d      	ldr	r2, [pc, #52]	; (aab4 <Pdb_Adc_Ip_SetModulus+0x44>)
    aa7e:	9b01      	ldr	r3, [sp, #4]
    aa80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa84:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    aa86:	f002 f989 	bl	cd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    aa8a:	9b03      	ldr	r3, [sp, #12]
    aa8c:	685b      	ldr	r3, [r3, #4]
    aa8e:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    aa90:	9b02      	ldr	r3, [sp, #8]
    aa92:	0c1b      	lsrs	r3, r3, #16
    aa94:	041b      	lsls	r3, r3, #16
    aa96:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    aa98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    aa9c:	9a02      	ldr	r2, [sp, #8]
    aa9e:	4313      	orrs	r3, r2
    aaa0:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    aaa2:	9b03      	ldr	r3, [sp, #12]
    aaa4:	9a02      	ldr	r2, [sp, #8]
    aaa6:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    aaa8:	f002 f9a4 	bl	cdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    aaac:	bf00      	nop
    aaae:	b005      	add	sp, #20
    aab0:	f85d fb04 	ldr.w	pc, [sp], #4
    aab4:	00010be4 	.word	0x00010be4

0000aab8 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    aab8:	b500      	push	{lr}
    aaba:	b087      	sub	sp, #28
    aabc:	9003      	str	r0, [sp, #12]
    aabe:	460b      	mov	r3, r1
    aac0:	9201      	str	r2, [sp, #4]
    aac2:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aac6:	4a0a      	ldr	r2, [pc, #40]	; (aaf0 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    aac8:	9b03      	ldr	r3, [sp, #12]
    aaca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aace:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    aad0:	f001 ff26 	bl	c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    aad4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aad8:	9a01      	ldr	r2, [sp, #4]
    aada:	4619      	mov	r1, r3
    aadc:	9805      	ldr	r0, [sp, #20]
    aade:	f7ff fd8e 	bl	a5fe <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    aae2:	f001 ff49 	bl	c978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    aae6:	bf00      	nop
    aae8:	b007      	add	sp, #28
    aaea:	f85d fb04 	ldr.w	pc, [sp], #4
    aaee:	bf00      	nop
    aaf0:	00010be4 	.word	0x00010be4

0000aaf4 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    aaf4:	b084      	sub	sp, #16
    aaf6:	9001      	str	r0, [sp, #4]
    aaf8:	460b      	mov	r3, r1
    aafa:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aafe:	4a0c      	ldr	r2, [pc, #48]	; (ab30 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    ab00:	9b01      	ldr	r3, [sp, #4]
    ab02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab06:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    ab08:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ab0c:	9903      	ldr	r1, [sp, #12]
    ab0e:	4613      	mov	r3, r2
    ab10:	009b      	lsls	r3, r3, #2
    ab12:	4413      	add	r3, r2
    ab14:	00db      	lsls	r3, r3, #3
    ab16:	440b      	add	r3, r1
    ab18:	3314      	adds	r3, #20
    ab1a:	681b      	ldr	r3, [r3, #0]
    ab1c:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    ab1e:	9b02      	ldr	r3, [sp, #8]
    ab20:	0c1b      	lsrs	r3, r3, #16
    ab22:	b2db      	uxtb	r3, r3
    ab24:	9302      	str	r3, [sp, #8]

    return Result;
    ab26:	9b02      	ldr	r3, [sp, #8]
}
    ab28:	4618      	mov	r0, r3
    ab2a:	b004      	add	sp, #16
    ab2c:	4770      	bx	lr
    ab2e:	bf00      	nop
    ab30:	00010be4 	.word	0x00010be4

0000ab34 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    ab34:	b500      	push	{lr}
    ab36:	b085      	sub	sp, #20
    ab38:	9001      	str	r0, [sp, #4]
    ab3a:	460b      	mov	r3, r1
    ab3c:	f88d 3003 	strb.w	r3, [sp, #3]
    ab40:	4613      	mov	r3, r2
    ab42:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab46:	4a0a      	ldr	r2, [pc, #40]	; (ab70 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    ab48:	9b01      	ldr	r3, [sp, #4]
    ab4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    ab50:	f002 f880 	bl	cc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    ab54:	f8bd 2000 	ldrh.w	r2, [sp]
    ab58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ab5c:	4619      	mov	r1, r3
    ab5e:	9803      	ldr	r0, [sp, #12]
    ab60:	f7ff fd85 	bl	a66e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    ab64:	f002 f8a2 	bl	ccac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    ab68:	bf00      	nop
    ab6a:	b005      	add	sp, #20
    ab6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ab70:	00010be4 	.word	0x00010be4

0000ab74 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    ab74:	b500      	push	{lr}
    ab76:	b085      	sub	sp, #20
    ab78:	9001      	str	r0, [sp, #4]
    ab7a:	4608      	mov	r0, r1
    ab7c:	4611      	mov	r1, r2
    ab7e:	461a      	mov	r2, r3
    ab80:	4603      	mov	r3, r0
    ab82:	f88d 3003 	strb.w	r3, [sp, #3]
    ab86:	460b      	mov	r3, r1
    ab88:	f88d 3002 	strb.w	r3, [sp, #2]
    ab8c:	4613      	mov	r3, r2
    ab8e:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab92:	4a10      	ldr	r2, [pc, #64]	; (abd4 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    ab94:	9b01      	ldr	r3, [sp, #4]
    ab96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab9a:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ab9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    aba0:	2201      	movs	r2, #1
    aba2:	fa02 f303 	lsl.w	r3, r2, r3
    aba6:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    aba8:	9b02      	ldr	r3, [sp, #8]
    abaa:	041b      	lsls	r3, r3, #16
    abac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    abb0:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    abb2:	f001 ff07 	bl	c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    abb6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    abba:	f89d 1003 	ldrb.w	r1, [sp, #3]
    abbe:	9a02      	ldr	r2, [sp, #8]
    abc0:	9803      	ldr	r0, [sp, #12]
    abc2:	f7ff fcb9 	bl	a538 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    abc6:	f001 ff29 	bl	ca1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    abca:	bf00      	nop
    abcc:	b005      	add	sp, #20
    abce:	f85d fb04 	ldr.w	pc, [sp], #4
    abd2:	bf00      	nop
    abd4:	00010be4 	.word	0x00010be4

0000abd8 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    abd8:	b500      	push	{lr}
    abda:	b085      	sub	sp, #20
    abdc:	9001      	str	r0, [sp, #4]
    abde:	4608      	mov	r0, r1
    abe0:	4611      	mov	r1, r2
    abe2:	461a      	mov	r2, r3
    abe4:	4603      	mov	r3, r0
    abe6:	f88d 3003 	strb.w	r3, [sp, #3]
    abea:	460b      	mov	r3, r1
    abec:	f88d 3002 	strb.w	r3, [sp, #2]
    abf0:	4613      	mov	r3, r2
    abf2:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    abf6:	4a0f      	ldr	r2, [pc, #60]	; (ac34 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    abf8:	9b01      	ldr	r3, [sp, #4]
    abfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abfe:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ac00:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ac04:	2201      	movs	r2, #1
    ac06:	fa02 f303 	lsl.w	r3, r2, r3
    ac0a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    ac0c:	9b02      	ldr	r3, [sp, #8]
    ac0e:	b2db      	uxtb	r3, r3
    ac10:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    ac12:	f001 ff29 	bl	ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ac16:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ac1a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ac1e:	9a02      	ldr	r2, [sp, #8]
    ac20:	9803      	ldr	r0, [sp, #12]
    ac22:	f7ff fc89 	bl	a538 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    ac26:	f001 ff4b 	bl	cac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    ac2a:	bf00      	nop
    ac2c:	b005      	add	sp, #20
    ac2e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac32:	bf00      	nop
    ac34:	00010be4 	.word	0x00010be4

0000ac38 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    ac38:	b500      	push	{lr}
    ac3a:	b085      	sub	sp, #20
    ac3c:	9001      	str	r0, [sp, #4]
    ac3e:	4608      	mov	r0, r1
    ac40:	4611      	mov	r1, r2
    ac42:	461a      	mov	r2, r3
    ac44:	4603      	mov	r3, r0
    ac46:	f88d 3003 	strb.w	r3, [sp, #3]
    ac4a:	460b      	mov	r3, r1
    ac4c:	f88d 3002 	strb.w	r3, [sp, #2]
    ac50:	4613      	mov	r3, r2
    ac52:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ac56:	4a0f      	ldr	r2, [pc, #60]	; (ac94 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    ac58:	9b01      	ldr	r3, [sp, #4]
    ac5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac5e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ac60:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ac64:	2201      	movs	r2, #1
    ac66:	fa02 f303 	lsl.w	r3, r2, r3
    ac6a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    ac6c:	9b02      	ldr	r3, [sp, #8]
    ac6e:	021b      	lsls	r3, r3, #8
    ac70:	b29b      	uxth	r3, r3
    ac72:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    ac74:	f001 ff4a 	bl	cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ac78:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ac7c:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ac80:	9a02      	ldr	r2, [sp, #8]
    ac82:	9803      	ldr	r0, [sp, #12]
    ac84:	f7ff fc58 	bl	a538 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    ac88:	f001 ff6c 	bl	cb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    ac8c:	bf00      	nop
    ac8e:	b005      	add	sp, #20
    ac90:	f85d fb04 	ldr.w	pc, [sp], #4
    ac94:	00010be4 	.word	0x00010be4

0000ac98 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    ac98:	b410      	push	{r4}
    ac9a:	b085      	sub	sp, #20
    ac9c:	9001      	str	r0, [sp, #4]
    ac9e:	4608      	mov	r0, r1
    aca0:	4611      	mov	r1, r2
    aca2:	461a      	mov	r2, r3
    aca4:	4603      	mov	r3, r0
    aca6:	f88d 3003 	strb.w	r3, [sp, #3]
    acaa:	460b      	mov	r3, r1
    acac:	f88d 3002 	strb.w	r3, [sp, #2]
    acb0:	4613      	mov	r3, r2
    acb2:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    acb6:	4a0c      	ldr	r2, [pc, #48]	; (ace8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    acb8:	9b01      	ldr	r3, [sp, #4]
    acba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acbe:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    acc0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    acc4:	f89d 4002 	ldrb.w	r4, [sp, #2]
    acc8:	f8bd 0000 	ldrh.w	r0, [sp]
    accc:	9903      	ldr	r1, [sp, #12]
    acce:	4613      	mov	r3, r2
    acd0:	009b      	lsls	r3, r3, #2
    acd2:	4413      	add	r3, r2
    acd4:	005b      	lsls	r3, r3, #1
    acd6:	4423      	add	r3, r4
    acd8:	3306      	adds	r3, #6
    acda:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    acde:	bf00      	nop
    ace0:	b005      	add	sp, #20
    ace2:	f85d 4b04 	ldr.w	r4, [sp], #4
    ace6:	4770      	bx	lr
    ace8:	00010be4 	.word	0x00010be4

0000acec <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    acec:	b500      	push	{lr}
    acee:	b087      	sub	sp, #28
    acf0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    acf2:	4a19      	ldr	r2, [pc, #100]	; (ad58 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    acf4:	9b01      	ldr	r3, [sp, #4]
    acf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acfa:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    acfc:	2300      	movs	r3, #0
    acfe:	f88d 300c 	strb.w	r3, [sp, #12]
    ad02:	2300      	movs	r3, #0
    ad04:	f88d 300d 	strb.w	r3, [sp, #13]
    ad08:	2300      	movs	r3, #0
    ad0a:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    ad0e:	f001 fdb5 	bl	c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ad12:	9804      	ldr	r0, [sp, #16]
    ad14:	f7ff fc4f 	bl	a5b6 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    ad18:	2100      	movs	r1, #0
    ad1a:	9804      	ldr	r0, [sp, #16]
    ad1c:	f7ff fc56 	bl	a5cc <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    ad20:	f001 fdd8 	bl	c8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad24:	2300      	movs	r3, #0
    ad26:	f88d 3017 	strb.w	r3, [sp, #23]
    ad2a:	e00b      	b.n	ad44 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    ad2c:	aa03      	add	r2, sp, #12
    ad2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad32:	4619      	mov	r1, r3
    ad34:	9804      	ldr	r0, [sp, #16]
    ad36:	f000 f899 	bl	ae6c <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad3e:	3301      	adds	r3, #1
    ad40:	f88d 3017 	strb.w	r3, [sp, #23]
    ad44:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad48:	2b01      	cmp	r3, #1
    ad4a:	d9ef      	bls.n	ad2c <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    ad4c:	bf00      	nop
    ad4e:	bf00      	nop
    ad50:	b007      	add	sp, #28
    ad52:	f85d fb04 	ldr.w	pc, [sp], #4
    ad56:	bf00      	nop
    ad58:	00010be4 	.word	0x00010be4

0000ad5c <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    ad5c:	b500      	push	{lr}
    ad5e:	b087      	sub	sp, #28
    ad60:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad62:	4a40      	ldr	r2, [pc, #256]	; (ae64 <Pdb_Adc_Ip_IRQHandler+0x108>)
    ad64:	9b01      	ldr	r3, [sp, #4]
    ad66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad6a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    ad6c:	4a3e      	ldr	r2, [pc, #248]	; (ae68 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ad6e:	9b01      	ldr	r3, [sp, #4]
    ad70:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ad74:	2b00      	cmp	r3, #0
    ad76:	d04d      	beq.n	ae14 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    ad78:	9b04      	ldr	r3, [sp, #16]
    ad7a:	681b      	ldr	r3, [r3, #0]
    ad7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    ad80:	2b00      	cmp	r3, #0
    ad82:	d06a      	beq.n	ae5a <Pdb_Adc_Ip_IRQHandler+0xfe>
    ad84:	4a38      	ldr	r2, [pc, #224]	; (ae68 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ad86:	9b01      	ldr	r3, [sp, #4]
    ad88:	00db      	lsls	r3, r3, #3
    ad8a:	4413      	add	r3, r2
    ad8c:	685b      	ldr	r3, [r3, #4]
    ad8e:	2b00      	cmp	r3, #0
    ad90:	d063      	beq.n	ae5a <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad92:	2300      	movs	r3, #0
    ad94:	f88d 3017 	strb.w	r3, [sp, #23]
    ad98:	e037      	b.n	ae0a <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    ad9a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ad9e:	9904      	ldr	r1, [sp, #16]
    ada0:	4613      	mov	r3, r2
    ada2:	009b      	lsls	r3, r3, #2
    ada4:	4413      	add	r3, r2
    ada6:	00db      	lsls	r3, r3, #3
    ada8:	440b      	add	r3, r1
    adaa:	3314      	adds	r3, #20
    adac:	681b      	ldr	r3, [r3, #0]
    adae:	b29b      	uxth	r3, r3
    adb0:	b2db      	uxtb	r3, r3
    adb2:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    adb6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    adba:	2b00      	cmp	r3, #0
    adbc:	d020      	beq.n	ae00 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    adbe:	f89d 2017 	ldrb.w	r2, [sp, #23]
    adc2:	9904      	ldr	r1, [sp, #16]
    adc4:	4613      	mov	r3, r2
    adc6:	009b      	lsls	r3, r3, #2
    adc8:	4413      	add	r3, r2
    adca:	00db      	lsls	r3, r3, #3
    adcc:	440b      	add	r3, r1
    adce:	3314      	adds	r3, #20
    add0:	681b      	ldr	r3, [r3, #0]
    add2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    add6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    adda:	9804      	ldr	r0, [sp, #16]
    addc:	4613      	mov	r3, r2
    adde:	009b      	lsls	r3, r3, #2
    ade0:	4413      	add	r3, r2
    ade2:	00db      	lsls	r3, r3, #3
    ade4:	4403      	add	r3, r0
    ade6:	3314      	adds	r3, #20
    ade8:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    adea:	4a1f      	ldr	r2, [pc, #124]	; (ae68 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    adec:	9b01      	ldr	r3, [sp, #4]
    adee:	00db      	lsls	r3, r3, #3
    adf0:	4413      	add	r3, r2
    adf2:	685b      	ldr	r3, [r3, #4]
    adf4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    adf8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    adfc:	4610      	mov	r0, r2
    adfe:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ae00:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae04:	3301      	adds	r3, #1
    ae06:	f88d 3017 	strb.w	r3, [sp, #23]
    ae0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae0e:	2b01      	cmp	r3, #1
    ae10:	d9c3      	bls.n	ad9a <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ae12:	e022      	b.n	ae5a <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ae14:	2300      	movs	r3, #0
    ae16:	f88d 3017 	strb.w	r3, [sp, #23]
    ae1a:	e01a      	b.n	ae52 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ae1c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ae20:	9904      	ldr	r1, [sp, #16]
    ae22:	4613      	mov	r3, r2
    ae24:	009b      	lsls	r3, r3, #2
    ae26:	4413      	add	r3, r2
    ae28:	00db      	lsls	r3, r3, #3
    ae2a:	440b      	add	r3, r1
    ae2c:	3314      	adds	r3, #20
    ae2e:	681b      	ldr	r3, [r3, #0]
    ae30:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ae34:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ae38:	9804      	ldr	r0, [sp, #16]
    ae3a:	4613      	mov	r3, r2
    ae3c:	009b      	lsls	r3, r3, #2
    ae3e:	4413      	add	r3, r2
    ae40:	00db      	lsls	r3, r3, #3
    ae42:	4403      	add	r3, r0
    ae44:	3314      	adds	r3, #20
    ae46:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ae48:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae4c:	3301      	adds	r3, #1
    ae4e:	f88d 3017 	strb.w	r3, [sp, #23]
    ae52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae56:	2b01      	cmp	r3, #1
    ae58:	d9e0      	bls.n	ae1c <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    ae5a:	bf00      	nop
    ae5c:	b007      	add	sp, #28
    ae5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae62:	bf00      	nop
    ae64:	00010be4 	.word	0x00010be4
    ae68:	1fff8de0 	.word	0x1fff8de0

0000ae6c <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    ae6c:	b500      	push	{lr}
    ae6e:	b085      	sub	sp, #20
    ae70:	9003      	str	r0, [sp, #12]
    ae72:	460b      	mov	r3, r1
    ae74:	9201      	str	r2, [sp, #4]
    ae76:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    ae7a:	f001 fe99 	bl	cbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    ae7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae82:	9a01      	ldr	r2, [sp, #4]
    ae84:	4619      	mov	r1, r3
    ae86:	9803      	ldr	r0, [sp, #12]
    ae88:	f7ff fbb9 	bl	a5fe <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    ae8c:	f001 febc 	bl	cc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    ae90:	f001 ff32 	bl	ccf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    ae94:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae98:	22ff      	movs	r2, #255	; 0xff
    ae9a:	4619      	mov	r1, r3
    ae9c:	9803      	ldr	r0, [sp, #12]
    ae9e:	f7ff fbe6 	bl	a66e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    aea2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    aea6:	9903      	ldr	r1, [sp, #12]
    aea8:	4613      	mov	r3, r2
    aeaa:	009b      	lsls	r3, r3, #2
    aeac:	4413      	add	r3, r2
    aeae:	00db      	lsls	r3, r3, #3
    aeb0:	440b      	add	r3, r1
    aeb2:	3314      	adds	r3, #20
    aeb4:	681b      	ldr	r3, [r3, #0]
    aeb6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    aeba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    aebe:	9803      	ldr	r0, [sp, #12]
    aec0:	4613      	mov	r3, r2
    aec2:	009b      	lsls	r3, r3, #2
    aec4:	4413      	add	r3, r2
    aec6:	00db      	lsls	r3, r3, #3
    aec8:	4403      	add	r3, r0
    aeca:	3314      	adds	r3, #20
    aecc:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    aece:	f001 ff3f 	bl	cd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    aed2:	bf00      	nop
    aed4:	b005      	add	sp, #20
    aed6:	f85d fb04 	ldr.w	pc, [sp], #4
    aeda:	bf00      	nop

0000aedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    aedc:	b500      	push	{lr}
    aede:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aee0:	f7f6 fac4 	bl	146c <Sys_GetCoreID>
    aee4:	4603      	mov	r3, r0
    aee6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    aee8:	4a10      	ldr	r2, [pc, #64]	; (af2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    aeea:	9b01      	ldr	r3, [sp, #4]
    aeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef0:	2b00      	cmp	r3, #0
    aef2:	d10d      	bne.n	af10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aef4:	f7f5 fcea 	bl	8cc <Adc_schm_read_msr>
    aef8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aefa:	9b00      	ldr	r3, [sp, #0]
    aefc:	f003 0301 	and.w	r3, r3, #1
    af00:	2b00      	cmp	r3, #0
    af02:	d100      	bne.n	af06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    af06:	490a      	ldr	r1, [pc, #40]	; (af30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    af08:	9b01      	ldr	r3, [sp, #4]
    af0a:	9a00      	ldr	r2, [sp, #0]
    af0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    af10:	4a06      	ldr	r2, [pc, #24]	; (af2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    af12:	9b01      	ldr	r3, [sp, #4]
    af14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af18:	1c5a      	adds	r2, r3, #1
    af1a:	4904      	ldr	r1, [pc, #16]	; (af2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    af1c:	9b01      	ldr	r3, [sp, #4]
    af1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af22:	bf00      	nop
    af24:	b003      	add	sp, #12
    af26:	f85d fb04 	ldr.w	pc, [sp], #4
    af2a:	bf00      	nop
    af2c:	1fff8df4 	.word	0x1fff8df4
    af30:	1fff8df0 	.word	0x1fff8df0

0000af34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    af34:	b500      	push	{lr}
    af36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af38:	f7f6 fa98 	bl	146c <Sys_GetCoreID>
    af3c:	4603      	mov	r3, r0
    af3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    af40:	4a0d      	ldr	r2, [pc, #52]	; (af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    af42:	9b01      	ldr	r3, [sp, #4]
    af44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af48:	1e5a      	subs	r2, r3, #1
    af4a:	490b      	ldr	r1, [pc, #44]	; (af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    af4c:	9b01      	ldr	r3, [sp, #4]
    af4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    af52:	4a0a      	ldr	r2, [pc, #40]	; (af7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    af54:	9b01      	ldr	r3, [sp, #4]
    af56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af5a:	f003 0301 	and.w	r3, r3, #1
    af5e:	2b00      	cmp	r3, #0
    af60:	d106      	bne.n	af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    af62:	4a05      	ldr	r2, [pc, #20]	; (af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    af64:	9b01      	ldr	r3, [sp, #4]
    af66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6a:	2b00      	cmp	r3, #0
    af6c:	d100      	bne.n	af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af70:	bf00      	nop
    af72:	b003      	add	sp, #12
    af74:	f85d fb04 	ldr.w	pc, [sp], #4
    af78:	1fff8df4 	.word	0x1fff8df4
    af7c:	1fff8df0 	.word	0x1fff8df0

0000af80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    af80:	b500      	push	{lr}
    af82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af84:	f7f6 fa72 	bl	146c <Sys_GetCoreID>
    af88:	4603      	mov	r3, r0
    af8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    af8c:	4a10      	ldr	r2, [pc, #64]	; (afd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    af8e:	9b01      	ldr	r3, [sp, #4]
    af90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af94:	2b00      	cmp	r3, #0
    af96:	d10d      	bne.n	afb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af98:	f7f5 fc98 	bl	8cc <Adc_schm_read_msr>
    af9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af9e:	9b00      	ldr	r3, [sp, #0]
    afa0:	f003 0301 	and.w	r3, r3, #1
    afa4:	2b00      	cmp	r3, #0
    afa6:	d100      	bne.n	afaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    afaa:	490a      	ldr	r1, [pc, #40]	; (afd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    afac:	9b01      	ldr	r3, [sp, #4]
    afae:	9a00      	ldr	r2, [sp, #0]
    afb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    afb4:	4a06      	ldr	r2, [pc, #24]	; (afd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    afb6:	9b01      	ldr	r3, [sp, #4]
    afb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afbc:	1c5a      	adds	r2, r3, #1
    afbe:	4904      	ldr	r1, [pc, #16]	; (afd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    afc0:	9b01      	ldr	r3, [sp, #4]
    afc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afc6:	bf00      	nop
    afc8:	b003      	add	sp, #12
    afca:	f85d fb04 	ldr.w	pc, [sp], #4
    afce:	bf00      	nop
    afd0:	1fff8dfc 	.word	0x1fff8dfc
    afd4:	1fff8df8 	.word	0x1fff8df8

0000afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    afd8:	b500      	push	{lr}
    afda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afdc:	f7f6 fa46 	bl	146c <Sys_GetCoreID>
    afe0:	4603      	mov	r3, r0
    afe2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    afe4:	4a0d      	ldr	r2, [pc, #52]	; (b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    afe6:	9b01      	ldr	r3, [sp, #4]
    afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afec:	1e5a      	subs	r2, r3, #1
    afee:	490b      	ldr	r1, [pc, #44]	; (b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    aff0:	9b01      	ldr	r3, [sp, #4]
    aff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    aff6:	4a0a      	ldr	r2, [pc, #40]	; (b020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    aff8:	9b01      	ldr	r3, [sp, #4]
    affa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    affe:	f003 0301 	and.w	r3, r3, #1
    b002:	2b00      	cmp	r3, #0
    b004:	d106      	bne.n	b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    b006:	4a05      	ldr	r2, [pc, #20]	; (b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b008:	9b01      	ldr	r3, [sp, #4]
    b00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00e:	2b00      	cmp	r3, #0
    b010:	d100      	bne.n	b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b012:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b014:	bf00      	nop
    b016:	b003      	add	sp, #12
    b018:	f85d fb04 	ldr.w	pc, [sp], #4
    b01c:	1fff8dfc 	.word	0x1fff8dfc
    b020:	1fff8df8 	.word	0x1fff8df8

0000b024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    b024:	b500      	push	{lr}
    b026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b028:	f7f6 fa20 	bl	146c <Sys_GetCoreID>
    b02c:	4603      	mov	r3, r0
    b02e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    b030:	4a10      	ldr	r2, [pc, #64]	; (b074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b032:	9b01      	ldr	r3, [sp, #4]
    b034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b038:	2b00      	cmp	r3, #0
    b03a:	d10d      	bne.n	b058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b03c:	f7f5 fc46 	bl	8cc <Adc_schm_read_msr>
    b040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b042:	9b00      	ldr	r3, [sp, #0]
    b044:	f003 0301 	and.w	r3, r3, #1
    b048:	2b00      	cmp	r3, #0
    b04a:	d100      	bne.n	b04e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b04c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    b04e:	490a      	ldr	r1, [pc, #40]	; (b078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    b050:	9b01      	ldr	r3, [sp, #4]
    b052:	9a00      	ldr	r2, [sp, #0]
    b054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    b058:	4a06      	ldr	r2, [pc, #24]	; (b074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b05a:	9b01      	ldr	r3, [sp, #4]
    b05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b060:	1c5a      	adds	r2, r3, #1
    b062:	4904      	ldr	r1, [pc, #16]	; (b074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b064:	9b01      	ldr	r3, [sp, #4]
    b066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b06a:	bf00      	nop
    b06c:	b003      	add	sp, #12
    b06e:	f85d fb04 	ldr.w	pc, [sp], #4
    b072:	bf00      	nop
    b074:	1fff8e04 	.word	0x1fff8e04
    b078:	1fff8e00 	.word	0x1fff8e00

0000b07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    b07c:	b500      	push	{lr}
    b07e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b080:	f7f6 f9f4 	bl	146c <Sys_GetCoreID>
    b084:	4603      	mov	r3, r0
    b086:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    b088:	4a0d      	ldr	r2, [pc, #52]	; (b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b08a:	9b01      	ldr	r3, [sp, #4]
    b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b090:	1e5a      	subs	r2, r3, #1
    b092:	490b      	ldr	r1, [pc, #44]	; (b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b094:	9b01      	ldr	r3, [sp, #4]
    b096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    b09a:	4a0a      	ldr	r2, [pc, #40]	; (b0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a2:	f003 0301 	and.w	r3, r3, #1
    b0a6:	2b00      	cmp	r3, #0
    b0a8:	d106      	bne.n	b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    b0aa:	4a05      	ldr	r2, [pc, #20]	; (b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b0ac:	9b01      	ldr	r3, [sp, #4]
    b0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d100      	bne.n	b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0b8:	bf00      	nop
    b0ba:	b003      	add	sp, #12
    b0bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c0:	1fff8e04 	.word	0x1fff8e04
    b0c4:	1fff8e00 	.word	0x1fff8e00

0000b0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b0c8:	b500      	push	{lr}
    b0ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0cc:	f7f6 f9ce 	bl	146c <Sys_GetCoreID>
    b0d0:	4603      	mov	r3, r0
    b0d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    b0d4:	4a10      	ldr	r2, [pc, #64]	; (b118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b0d6:	9b01      	ldr	r3, [sp, #4]
    b0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d10d      	bne.n	b0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0e0:	f7f5 fbf4 	bl	8cc <Adc_schm_read_msr>
    b0e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0e6:	9b00      	ldr	r3, [sp, #0]
    b0e8:	f003 0301 	and.w	r3, r3, #1
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d100      	bne.n	b0f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    b0f2:	490a      	ldr	r1, [pc, #40]	; (b11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    b0f4:	9b01      	ldr	r3, [sp, #4]
    b0f6:	9a00      	ldr	r2, [sp, #0]
    b0f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    b0fc:	4a06      	ldr	r2, [pc, #24]	; (b118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b0fe:	9b01      	ldr	r3, [sp, #4]
    b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b104:	1c5a      	adds	r2, r3, #1
    b106:	4904      	ldr	r1, [pc, #16]	; (b118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b108:	9b01      	ldr	r3, [sp, #4]
    b10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b10e:	bf00      	nop
    b110:	b003      	add	sp, #12
    b112:	f85d fb04 	ldr.w	pc, [sp], #4
    b116:	bf00      	nop
    b118:	1fff8e0c 	.word	0x1fff8e0c
    b11c:	1fff8e08 	.word	0x1fff8e08

0000b120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b120:	b500      	push	{lr}
    b122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b124:	f7f6 f9a2 	bl	146c <Sys_GetCoreID>
    b128:	4603      	mov	r3, r0
    b12a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    b12c:	4a0d      	ldr	r2, [pc, #52]	; (b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b12e:	9b01      	ldr	r3, [sp, #4]
    b130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b134:	1e5a      	subs	r2, r3, #1
    b136:	490b      	ldr	r1, [pc, #44]	; (b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    b13e:	4a0a      	ldr	r2, [pc, #40]	; (b168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    b140:	9b01      	ldr	r3, [sp, #4]
    b142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b146:	f003 0301 	and.w	r3, r3, #1
    b14a:	2b00      	cmp	r3, #0
    b14c:	d106      	bne.n	b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    b14e:	4a05      	ldr	r2, [pc, #20]	; (b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b150:	9b01      	ldr	r3, [sp, #4]
    b152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b156:	2b00      	cmp	r3, #0
    b158:	d100      	bne.n	b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b15a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b15c:	bf00      	nop
    b15e:	b003      	add	sp, #12
    b160:	f85d fb04 	ldr.w	pc, [sp], #4
    b164:	1fff8e0c 	.word	0x1fff8e0c
    b168:	1fff8e08 	.word	0x1fff8e08

0000b16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b16c:	b500      	push	{lr}
    b16e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b170:	f7f6 f97c 	bl	146c <Sys_GetCoreID>
    b174:	4603      	mov	r3, r0
    b176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    b178:	4a10      	ldr	r2, [pc, #64]	; (b1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b17a:	9b01      	ldr	r3, [sp, #4]
    b17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b180:	2b00      	cmp	r3, #0
    b182:	d10d      	bne.n	b1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b184:	f7f5 fba2 	bl	8cc <Adc_schm_read_msr>
    b188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b18a:	9b00      	ldr	r3, [sp, #0]
    b18c:	f003 0301 	and.w	r3, r3, #1
    b190:	2b00      	cmp	r3, #0
    b192:	d100      	bne.n	b196 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    b196:	490a      	ldr	r1, [pc, #40]	; (b1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    b198:	9b01      	ldr	r3, [sp, #4]
    b19a:	9a00      	ldr	r2, [sp, #0]
    b19c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    b1a0:	4a06      	ldr	r2, [pc, #24]	; (b1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b1a2:	9b01      	ldr	r3, [sp, #4]
    b1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a8:	1c5a      	adds	r2, r3, #1
    b1aa:	4904      	ldr	r1, [pc, #16]	; (b1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b1ac:	9b01      	ldr	r3, [sp, #4]
    b1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1b2:	bf00      	nop
    b1b4:	b003      	add	sp, #12
    b1b6:	f85d fb04 	ldr.w	pc, [sp], #4
    b1ba:	bf00      	nop
    b1bc:	1fff8e14 	.word	0x1fff8e14
    b1c0:	1fff8e10 	.word	0x1fff8e10

0000b1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b1c4:	b500      	push	{lr}
    b1c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1c8:	f7f6 f950 	bl	146c <Sys_GetCoreID>
    b1cc:	4603      	mov	r3, r0
    b1ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    b1d0:	4a0d      	ldr	r2, [pc, #52]	; (b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b1d2:	9b01      	ldr	r3, [sp, #4]
    b1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d8:	1e5a      	subs	r2, r3, #1
    b1da:	490b      	ldr	r1, [pc, #44]	; (b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b1dc:	9b01      	ldr	r3, [sp, #4]
    b1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    b1e2:	4a0a      	ldr	r2, [pc, #40]	; (b20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    b1e4:	9b01      	ldr	r3, [sp, #4]
    b1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ea:	f003 0301 	and.w	r3, r3, #1
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	d106      	bne.n	b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    b1f2:	4a05      	ldr	r2, [pc, #20]	; (b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b1f4:	9b01      	ldr	r3, [sp, #4]
    b1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d100      	bne.n	b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b200:	bf00      	nop
    b202:	b003      	add	sp, #12
    b204:	f85d fb04 	ldr.w	pc, [sp], #4
    b208:	1fff8e14 	.word	0x1fff8e14
    b20c:	1fff8e10 	.word	0x1fff8e10

0000b210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b210:	b500      	push	{lr}
    b212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b214:	f7f6 f92a 	bl	146c <Sys_GetCoreID>
    b218:	4603      	mov	r3, r0
    b21a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    b21c:	4a10      	ldr	r2, [pc, #64]	; (b260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b21e:	9b01      	ldr	r3, [sp, #4]
    b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b224:	2b00      	cmp	r3, #0
    b226:	d10d      	bne.n	b244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b228:	f7f5 fb50 	bl	8cc <Adc_schm_read_msr>
    b22c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b22e:	9b00      	ldr	r3, [sp, #0]
    b230:	f003 0301 	and.w	r3, r3, #1
    b234:	2b00      	cmp	r3, #0
    b236:	d100      	bne.n	b23a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    b23a:	490a      	ldr	r1, [pc, #40]	; (b264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    b23c:	9b01      	ldr	r3, [sp, #4]
    b23e:	9a00      	ldr	r2, [sp, #0]
    b240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    b244:	4a06      	ldr	r2, [pc, #24]	; (b260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b24c:	1c5a      	adds	r2, r3, #1
    b24e:	4904      	ldr	r1, [pc, #16]	; (b260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b250:	9b01      	ldr	r3, [sp, #4]
    b252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b256:	bf00      	nop
    b258:	b003      	add	sp, #12
    b25a:	f85d fb04 	ldr.w	pc, [sp], #4
    b25e:	bf00      	nop
    b260:	1fff8e1c 	.word	0x1fff8e1c
    b264:	1fff8e18 	.word	0x1fff8e18

0000b268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b268:	b500      	push	{lr}
    b26a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b26c:	f7f6 f8fe 	bl	146c <Sys_GetCoreID>
    b270:	4603      	mov	r3, r0
    b272:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    b274:	4a0d      	ldr	r2, [pc, #52]	; (b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b276:	9b01      	ldr	r3, [sp, #4]
    b278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b27c:	1e5a      	subs	r2, r3, #1
    b27e:	490b      	ldr	r1, [pc, #44]	; (b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b280:	9b01      	ldr	r3, [sp, #4]
    b282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    b286:	4a0a      	ldr	r2, [pc, #40]	; (b2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    b288:	9b01      	ldr	r3, [sp, #4]
    b28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b28e:	f003 0301 	and.w	r3, r3, #1
    b292:	2b00      	cmp	r3, #0
    b294:	d106      	bne.n	b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b296:	4a05      	ldr	r2, [pc, #20]	; (b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b298:	9b01      	ldr	r3, [sp, #4]
    b29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b29e:	2b00      	cmp	r3, #0
    b2a0:	d100      	bne.n	b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2a4:	bf00      	nop
    b2a6:	b003      	add	sp, #12
    b2a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ac:	1fff8e1c 	.word	0x1fff8e1c
    b2b0:	1fff8e18 	.word	0x1fff8e18

0000b2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b2b4:	b500      	push	{lr}
    b2b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2b8:	f7f6 f8d8 	bl	146c <Sys_GetCoreID>
    b2bc:	4603      	mov	r3, r0
    b2be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b2c0:	4a10      	ldr	r2, [pc, #64]	; (b304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d10d      	bne.n	b2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2cc:	f7f5 fafe 	bl	8cc <Adc_schm_read_msr>
    b2d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2d2:	9b00      	ldr	r3, [sp, #0]
    b2d4:	f003 0301 	and.w	r3, r3, #1
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d100      	bne.n	b2de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b2de:	490a      	ldr	r1, [pc, #40]	; (b308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b2e0:	9b01      	ldr	r3, [sp, #4]
    b2e2:	9a00      	ldr	r2, [sp, #0]
    b2e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b2e8:	4a06      	ldr	r2, [pc, #24]	; (b304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b2ea:	9b01      	ldr	r3, [sp, #4]
    b2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f0:	1c5a      	adds	r2, r3, #1
    b2f2:	4904      	ldr	r1, [pc, #16]	; (b304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b2f4:	9b01      	ldr	r3, [sp, #4]
    b2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2fa:	bf00      	nop
    b2fc:	b003      	add	sp, #12
    b2fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b302:	bf00      	nop
    b304:	1fff8e24 	.word	0x1fff8e24
    b308:	1fff8e20 	.word	0x1fff8e20

0000b30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b30c:	b500      	push	{lr}
    b30e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b310:	f7f6 f8ac 	bl	146c <Sys_GetCoreID>
    b314:	4603      	mov	r3, r0
    b316:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b318:	4a0d      	ldr	r2, [pc, #52]	; (b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b31a:	9b01      	ldr	r3, [sp, #4]
    b31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b320:	1e5a      	subs	r2, r3, #1
    b322:	490b      	ldr	r1, [pc, #44]	; (b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b32a:	4a0a      	ldr	r2, [pc, #40]	; (b354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b332:	f003 0301 	and.w	r3, r3, #1
    b336:	2b00      	cmp	r3, #0
    b338:	d106      	bne.n	b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b33a:	4a05      	ldr	r2, [pc, #20]	; (b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b33c:	9b01      	ldr	r3, [sp, #4]
    b33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b342:	2b00      	cmp	r3, #0
    b344:	d100      	bne.n	b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b348:	bf00      	nop
    b34a:	b003      	add	sp, #12
    b34c:	f85d fb04 	ldr.w	pc, [sp], #4
    b350:	1fff8e24 	.word	0x1fff8e24
    b354:	1fff8e20 	.word	0x1fff8e20

0000b358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b358:	b500      	push	{lr}
    b35a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b35c:	f7f6 f886 	bl	146c <Sys_GetCoreID>
    b360:	4603      	mov	r3, r0
    b362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b364:	4a10      	ldr	r2, [pc, #64]	; (b3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b36c:	2b00      	cmp	r3, #0
    b36e:	d10d      	bne.n	b38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b370:	f7f5 faac 	bl	8cc <Adc_schm_read_msr>
    b374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b376:	9b00      	ldr	r3, [sp, #0]
    b378:	f003 0301 	and.w	r3, r3, #1
    b37c:	2b00      	cmp	r3, #0
    b37e:	d100      	bne.n	b382 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b382:	490a      	ldr	r1, [pc, #40]	; (b3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b384:	9b01      	ldr	r3, [sp, #4]
    b386:	9a00      	ldr	r2, [sp, #0]
    b388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b38c:	4a06      	ldr	r2, [pc, #24]	; (b3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b38e:	9b01      	ldr	r3, [sp, #4]
    b390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b394:	1c5a      	adds	r2, r3, #1
    b396:	4904      	ldr	r1, [pc, #16]	; (b3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b39e:	bf00      	nop
    b3a0:	b003      	add	sp, #12
    b3a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b3a6:	bf00      	nop
    b3a8:	1fff8e2c 	.word	0x1fff8e2c
    b3ac:	1fff8e28 	.word	0x1fff8e28

0000b3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b3b0:	b500      	push	{lr}
    b3b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3b4:	f7f6 f85a 	bl	146c <Sys_GetCoreID>
    b3b8:	4603      	mov	r3, r0
    b3ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b3bc:	4a0d      	ldr	r2, [pc, #52]	; (b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b3be:	9b01      	ldr	r3, [sp, #4]
    b3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c4:	1e5a      	subs	r2, r3, #1
    b3c6:	490b      	ldr	r1, [pc, #44]	; (b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b3ce:	4a0a      	ldr	r2, [pc, #40]	; (b3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b3d0:	9b01      	ldr	r3, [sp, #4]
    b3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d6:	f003 0301 	and.w	r3, r3, #1
    b3da:	2b00      	cmp	r3, #0
    b3dc:	d106      	bne.n	b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b3de:	4a05      	ldr	r2, [pc, #20]	; (b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b3e0:	9b01      	ldr	r3, [sp, #4]
    b3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d100      	bne.n	b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3ec:	bf00      	nop
    b3ee:	b003      	add	sp, #12
    b3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f4:	1fff8e2c 	.word	0x1fff8e2c
    b3f8:	1fff8e28 	.word	0x1fff8e28

0000b3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b3fc:	b500      	push	{lr}
    b3fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b400:	f7f6 f834 	bl	146c <Sys_GetCoreID>
    b404:	4603      	mov	r3, r0
    b406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b408:	4a10      	ldr	r2, [pc, #64]	; (b44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b410:	2b00      	cmp	r3, #0
    b412:	d10d      	bne.n	b430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b414:	f7f5 fa5a 	bl	8cc <Adc_schm_read_msr>
    b418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b41a:	9b00      	ldr	r3, [sp, #0]
    b41c:	f003 0301 	and.w	r3, r3, #1
    b420:	2b00      	cmp	r3, #0
    b422:	d100      	bne.n	b426 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b426:	490a      	ldr	r1, [pc, #40]	; (b450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	9a00      	ldr	r2, [sp, #0]
    b42c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b430:	4a06      	ldr	r2, [pc, #24]	; (b44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b432:	9b01      	ldr	r3, [sp, #4]
    b434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b438:	1c5a      	adds	r2, r3, #1
    b43a:	4904      	ldr	r1, [pc, #16]	; (b44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b43c:	9b01      	ldr	r3, [sp, #4]
    b43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b442:	bf00      	nop
    b444:	b003      	add	sp, #12
    b446:	f85d fb04 	ldr.w	pc, [sp], #4
    b44a:	bf00      	nop
    b44c:	1fff8e34 	.word	0x1fff8e34
    b450:	1fff8e30 	.word	0x1fff8e30

0000b454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b454:	b500      	push	{lr}
    b456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b458:	f7f6 f808 	bl	146c <Sys_GetCoreID>
    b45c:	4603      	mov	r3, r0
    b45e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b460:	4a0d      	ldr	r2, [pc, #52]	; (b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b468:	1e5a      	subs	r2, r3, #1
    b46a:	490b      	ldr	r1, [pc, #44]	; (b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b472:	4a0a      	ldr	r2, [pc, #40]	; (b49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47a:	f003 0301 	and.w	r3, r3, #1
    b47e:	2b00      	cmp	r3, #0
    b480:	d106      	bne.n	b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b482:	4a05      	ldr	r2, [pc, #20]	; (b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b484:	9b01      	ldr	r3, [sp, #4]
    b486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b48a:	2b00      	cmp	r3, #0
    b48c:	d100      	bne.n	b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b48e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b490:	bf00      	nop
    b492:	b003      	add	sp, #12
    b494:	f85d fb04 	ldr.w	pc, [sp], #4
    b498:	1fff8e34 	.word	0x1fff8e34
    b49c:	1fff8e30 	.word	0x1fff8e30

0000b4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b4a0:	b500      	push	{lr}
    b4a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4a4:	f7f5 ffe2 	bl	146c <Sys_GetCoreID>
    b4a8:	4603      	mov	r3, r0
    b4aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b4ac:	4a10      	ldr	r2, [pc, #64]	; (b4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b4ae:	9b01      	ldr	r3, [sp, #4]
    b4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d10d      	bne.n	b4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4b8:	f7f5 fa08 	bl	8cc <Adc_schm_read_msr>
    b4bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4be:	9b00      	ldr	r3, [sp, #0]
    b4c0:	f003 0301 	and.w	r3, r3, #1
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d100      	bne.n	b4ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b4ca:	490a      	ldr	r1, [pc, #40]	; (b4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b4cc:	9b01      	ldr	r3, [sp, #4]
    b4ce:	9a00      	ldr	r2, [sp, #0]
    b4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b4d4:	4a06      	ldr	r2, [pc, #24]	; (b4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b4d6:	9b01      	ldr	r3, [sp, #4]
    b4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4dc:	1c5a      	adds	r2, r3, #1
    b4de:	4904      	ldr	r1, [pc, #16]	; (b4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b4e0:	9b01      	ldr	r3, [sp, #4]
    b4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4e6:	bf00      	nop
    b4e8:	b003      	add	sp, #12
    b4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b4ee:	bf00      	nop
    b4f0:	1fff8e3c 	.word	0x1fff8e3c
    b4f4:	1fff8e38 	.word	0x1fff8e38

0000b4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b4f8:	b500      	push	{lr}
    b4fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4fc:	f7f5 ffb6 	bl	146c <Sys_GetCoreID>
    b500:	4603      	mov	r3, r0
    b502:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b504:	4a0d      	ldr	r2, [pc, #52]	; (b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b506:	9b01      	ldr	r3, [sp, #4]
    b508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b50c:	1e5a      	subs	r2, r3, #1
    b50e:	490b      	ldr	r1, [pc, #44]	; (b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b510:	9b01      	ldr	r3, [sp, #4]
    b512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b516:	4a0a      	ldr	r2, [pc, #40]	; (b540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b518:	9b01      	ldr	r3, [sp, #4]
    b51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b51e:	f003 0301 	and.w	r3, r3, #1
    b522:	2b00      	cmp	r3, #0
    b524:	d106      	bne.n	b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b526:	4a05      	ldr	r2, [pc, #20]	; (b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b528:	9b01      	ldr	r3, [sp, #4]
    b52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52e:	2b00      	cmp	r3, #0
    b530:	d100      	bne.n	b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b534:	bf00      	nop
    b536:	b003      	add	sp, #12
    b538:	f85d fb04 	ldr.w	pc, [sp], #4
    b53c:	1fff8e3c 	.word	0x1fff8e3c
    b540:	1fff8e38 	.word	0x1fff8e38

0000b544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b544:	b500      	push	{lr}
    b546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b548:	f7f5 ff90 	bl	146c <Sys_GetCoreID>
    b54c:	4603      	mov	r3, r0
    b54e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b550:	4a10      	ldr	r2, [pc, #64]	; (b594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b552:	9b01      	ldr	r3, [sp, #4]
    b554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b558:	2b00      	cmp	r3, #0
    b55a:	d10d      	bne.n	b578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b55c:	f7f5 f9b6 	bl	8cc <Adc_schm_read_msr>
    b560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b562:	9b00      	ldr	r3, [sp, #0]
    b564:	f003 0301 	and.w	r3, r3, #1
    b568:	2b00      	cmp	r3, #0
    b56a:	d100      	bne.n	b56e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b56c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b56e:	490a      	ldr	r1, [pc, #40]	; (b598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b570:	9b01      	ldr	r3, [sp, #4]
    b572:	9a00      	ldr	r2, [sp, #0]
    b574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b578:	4a06      	ldr	r2, [pc, #24]	; (b594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b57a:	9b01      	ldr	r3, [sp, #4]
    b57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b580:	1c5a      	adds	r2, r3, #1
    b582:	4904      	ldr	r1, [pc, #16]	; (b594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b58a:	bf00      	nop
    b58c:	b003      	add	sp, #12
    b58e:	f85d fb04 	ldr.w	pc, [sp], #4
    b592:	bf00      	nop
    b594:	1fff8e44 	.word	0x1fff8e44
    b598:	1fff8e40 	.word	0x1fff8e40

0000b59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b59c:	b500      	push	{lr}
    b59e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5a0:	f7f5 ff64 	bl	146c <Sys_GetCoreID>
    b5a4:	4603      	mov	r3, r0
    b5a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b5a8:	4a0d      	ldr	r2, [pc, #52]	; (b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b5aa:	9b01      	ldr	r3, [sp, #4]
    b5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b0:	1e5a      	subs	r2, r3, #1
    b5b2:	490b      	ldr	r1, [pc, #44]	; (b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b5b4:	9b01      	ldr	r3, [sp, #4]
    b5b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b5ba:	4a0a      	ldr	r2, [pc, #40]	; (b5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c2:	f003 0301 	and.w	r3, r3, #1
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	d106      	bne.n	b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b5ca:	4a05      	ldr	r2, [pc, #20]	; (b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b5cc:	9b01      	ldr	r3, [sp, #4]
    b5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d100      	bne.n	b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5d8:	bf00      	nop
    b5da:	b003      	add	sp, #12
    b5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b5e0:	1fff8e44 	.word	0x1fff8e44
    b5e4:	1fff8e40 	.word	0x1fff8e40

0000b5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b5e8:	b500      	push	{lr}
    b5ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5ec:	f7f5 ff3e 	bl	146c <Sys_GetCoreID>
    b5f0:	4603      	mov	r3, r0
    b5f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b5f4:	4a10      	ldr	r2, [pc, #64]	; (b638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b5f6:	9b01      	ldr	r3, [sp, #4]
    b5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d10d      	bne.n	b61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b600:	f7f5 f964 	bl	8cc <Adc_schm_read_msr>
    b604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b606:	9b00      	ldr	r3, [sp, #0]
    b608:	f003 0301 	and.w	r3, r3, #1
    b60c:	2b00      	cmp	r3, #0
    b60e:	d100      	bne.n	b612 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b612:	490a      	ldr	r1, [pc, #40]	; (b63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b614:	9b01      	ldr	r3, [sp, #4]
    b616:	9a00      	ldr	r2, [sp, #0]
    b618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b61c:	4a06      	ldr	r2, [pc, #24]	; (b638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b61e:	9b01      	ldr	r3, [sp, #4]
    b620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b624:	1c5a      	adds	r2, r3, #1
    b626:	4904      	ldr	r1, [pc, #16]	; (b638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b628:	9b01      	ldr	r3, [sp, #4]
    b62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b62e:	bf00      	nop
    b630:	b003      	add	sp, #12
    b632:	f85d fb04 	ldr.w	pc, [sp], #4
    b636:	bf00      	nop
    b638:	1fff8e4c 	.word	0x1fff8e4c
    b63c:	1fff8e48 	.word	0x1fff8e48

0000b640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b640:	b500      	push	{lr}
    b642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b644:	f7f5 ff12 	bl	146c <Sys_GetCoreID>
    b648:	4603      	mov	r3, r0
    b64a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b64c:	4a0d      	ldr	r2, [pc, #52]	; (b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b64e:	9b01      	ldr	r3, [sp, #4]
    b650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b654:	1e5a      	subs	r2, r3, #1
    b656:	490b      	ldr	r1, [pc, #44]	; (b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b65e:	4a0a      	ldr	r2, [pc, #40]	; (b688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b660:	9b01      	ldr	r3, [sp, #4]
    b662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b666:	f003 0301 	and.w	r3, r3, #1
    b66a:	2b00      	cmp	r3, #0
    b66c:	d106      	bne.n	b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b66e:	4a05      	ldr	r2, [pc, #20]	; (b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b670:	9b01      	ldr	r3, [sp, #4]
    b672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b676:	2b00      	cmp	r3, #0
    b678:	d100      	bne.n	b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b67a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b67c:	bf00      	nop
    b67e:	b003      	add	sp, #12
    b680:	f85d fb04 	ldr.w	pc, [sp], #4
    b684:	1fff8e4c 	.word	0x1fff8e4c
    b688:	1fff8e48 	.word	0x1fff8e48

0000b68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b68c:	b500      	push	{lr}
    b68e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b690:	f7f5 feec 	bl	146c <Sys_GetCoreID>
    b694:	4603      	mov	r3, r0
    b696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    b698:	4a10      	ldr	r2, [pc, #64]	; (b6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b69a:	9b01      	ldr	r3, [sp, #4]
    b69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a0:	2b00      	cmp	r3, #0
    b6a2:	d10d      	bne.n	b6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6a4:	f7f5 f912 	bl	8cc <Adc_schm_read_msr>
    b6a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6aa:	9b00      	ldr	r3, [sp, #0]
    b6ac:	f003 0301 	and.w	r3, r3, #1
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d100      	bne.n	b6b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b6b6:	490a      	ldr	r1, [pc, #40]	; (b6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    b6b8:	9b01      	ldr	r3, [sp, #4]
    b6ba:	9a00      	ldr	r2, [sp, #0]
    b6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    b6c0:	4a06      	ldr	r2, [pc, #24]	; (b6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b6c2:	9b01      	ldr	r3, [sp, #4]
    b6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c8:	1c5a      	adds	r2, r3, #1
    b6ca:	4904      	ldr	r1, [pc, #16]	; (b6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b6cc:	9b01      	ldr	r3, [sp, #4]
    b6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6d2:	bf00      	nop
    b6d4:	b003      	add	sp, #12
    b6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b6da:	bf00      	nop
    b6dc:	1fff8e54 	.word	0x1fff8e54
    b6e0:	1fff8e50 	.word	0x1fff8e50

0000b6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b6e4:	b500      	push	{lr}
    b6e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6e8:	f7f5 fec0 	bl	146c <Sys_GetCoreID>
    b6ec:	4603      	mov	r3, r0
    b6ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    b6f0:	4a0d      	ldr	r2, [pc, #52]	; (b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b6f2:	9b01      	ldr	r3, [sp, #4]
    b6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f8:	1e5a      	subs	r2, r3, #1
    b6fa:	490b      	ldr	r1, [pc, #44]	; (b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b702:	4a0a      	ldr	r2, [pc, #40]	; (b72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    b704:	9b01      	ldr	r3, [sp, #4]
    b706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b70a:	f003 0301 	and.w	r3, r3, #1
    b70e:	2b00      	cmp	r3, #0
    b710:	d106      	bne.n	b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    b712:	4a05      	ldr	r2, [pc, #20]	; (b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b714:	9b01      	ldr	r3, [sp, #4]
    b716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b71a:	2b00      	cmp	r3, #0
    b71c:	d100      	bne.n	b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b71e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b720:	bf00      	nop
    b722:	b003      	add	sp, #12
    b724:	f85d fb04 	ldr.w	pc, [sp], #4
    b728:	1fff8e54 	.word	0x1fff8e54
    b72c:	1fff8e50 	.word	0x1fff8e50

0000b730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b730:	b500      	push	{lr}
    b732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b734:	f7f5 fe9a 	bl	146c <Sys_GetCoreID>
    b738:	4603      	mov	r3, r0
    b73a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    b73c:	4a10      	ldr	r2, [pc, #64]	; (b780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b73e:	9b01      	ldr	r3, [sp, #4]
    b740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b744:	2b00      	cmp	r3, #0
    b746:	d10d      	bne.n	b764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b748:	f7f5 f8c0 	bl	8cc <Adc_schm_read_msr>
    b74c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b74e:	9b00      	ldr	r3, [sp, #0]
    b750:	f003 0301 	and.w	r3, r3, #1
    b754:	2b00      	cmp	r3, #0
    b756:	d100      	bne.n	b75a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b75a:	490a      	ldr	r1, [pc, #40]	; (b784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    b75c:	9b01      	ldr	r3, [sp, #4]
    b75e:	9a00      	ldr	r2, [sp, #0]
    b760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    b764:	4a06      	ldr	r2, [pc, #24]	; (b780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b766:	9b01      	ldr	r3, [sp, #4]
    b768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b76c:	1c5a      	adds	r2, r3, #1
    b76e:	4904      	ldr	r1, [pc, #16]	; (b780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b770:	9b01      	ldr	r3, [sp, #4]
    b772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b776:	bf00      	nop
    b778:	b003      	add	sp, #12
    b77a:	f85d fb04 	ldr.w	pc, [sp], #4
    b77e:	bf00      	nop
    b780:	1fff8e5c 	.word	0x1fff8e5c
    b784:	1fff8e58 	.word	0x1fff8e58

0000b788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b788:	b500      	push	{lr}
    b78a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b78c:	f7f5 fe6e 	bl	146c <Sys_GetCoreID>
    b790:	4603      	mov	r3, r0
    b792:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    b794:	4a0d      	ldr	r2, [pc, #52]	; (b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b796:	9b01      	ldr	r3, [sp, #4]
    b798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b79c:	1e5a      	subs	r2, r3, #1
    b79e:	490b      	ldr	r1, [pc, #44]	; (b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b7a6:	4a0a      	ldr	r2, [pc, #40]	; (b7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    b7a8:	9b01      	ldr	r3, [sp, #4]
    b7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ae:	f003 0301 	and.w	r3, r3, #1
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d106      	bne.n	b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    b7b6:	4a05      	ldr	r2, [pc, #20]	; (b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b7b8:	9b01      	ldr	r3, [sp, #4]
    b7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7be:	2b00      	cmp	r3, #0
    b7c0:	d100      	bne.n	b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7c4:	bf00      	nop
    b7c6:	b003      	add	sp, #12
    b7c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b7cc:	1fff8e5c 	.word	0x1fff8e5c
    b7d0:	1fff8e58 	.word	0x1fff8e58

0000b7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b7d4:	b500      	push	{lr}
    b7d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7d8:	f7f5 fe48 	bl	146c <Sys_GetCoreID>
    b7dc:	4603      	mov	r3, r0
    b7de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    b7e0:	4a10      	ldr	r2, [pc, #64]	; (b824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b7e2:	9b01      	ldr	r3, [sp, #4]
    b7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d10d      	bne.n	b808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7ec:	f7f5 f86e 	bl	8cc <Adc_schm_read_msr>
    b7f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7f2:	9b00      	ldr	r3, [sp, #0]
    b7f4:	f003 0301 	and.w	r3, r3, #1
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	d100      	bne.n	b7fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b7fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b7fe:	490a      	ldr	r1, [pc, #40]	; (b828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    b800:	9b01      	ldr	r3, [sp, #4]
    b802:	9a00      	ldr	r2, [sp, #0]
    b804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    b808:	4a06      	ldr	r2, [pc, #24]	; (b824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b80a:	9b01      	ldr	r3, [sp, #4]
    b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b810:	1c5a      	adds	r2, r3, #1
    b812:	4904      	ldr	r1, [pc, #16]	; (b824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b814:	9b01      	ldr	r3, [sp, #4]
    b816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b81a:	bf00      	nop
    b81c:	b003      	add	sp, #12
    b81e:	f85d fb04 	ldr.w	pc, [sp], #4
    b822:	bf00      	nop
    b824:	1fff8e64 	.word	0x1fff8e64
    b828:	1fff8e60 	.word	0x1fff8e60

0000b82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b82c:	b500      	push	{lr}
    b82e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b830:	f7f5 fe1c 	bl	146c <Sys_GetCoreID>
    b834:	4603      	mov	r3, r0
    b836:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    b838:	4a0d      	ldr	r2, [pc, #52]	; (b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b83a:	9b01      	ldr	r3, [sp, #4]
    b83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b840:	1e5a      	subs	r2, r3, #1
    b842:	490b      	ldr	r1, [pc, #44]	; (b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b844:	9b01      	ldr	r3, [sp, #4]
    b846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b84a:	4a0a      	ldr	r2, [pc, #40]	; (b874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    b84c:	9b01      	ldr	r3, [sp, #4]
    b84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b852:	f003 0301 	and.w	r3, r3, #1
    b856:	2b00      	cmp	r3, #0
    b858:	d106      	bne.n	b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    b85a:	4a05      	ldr	r2, [pc, #20]	; (b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b85c:	9b01      	ldr	r3, [sp, #4]
    b85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b862:	2b00      	cmp	r3, #0
    b864:	d100      	bne.n	b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b868:	bf00      	nop
    b86a:	b003      	add	sp, #12
    b86c:	f85d fb04 	ldr.w	pc, [sp], #4
    b870:	1fff8e64 	.word	0x1fff8e64
    b874:	1fff8e60 	.word	0x1fff8e60

0000b878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b878:	b500      	push	{lr}
    b87a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b87c:	f7f5 fdf6 	bl	146c <Sys_GetCoreID>
    b880:	4603      	mov	r3, r0
    b882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    b884:	4a10      	ldr	r2, [pc, #64]	; (b8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b886:	9b01      	ldr	r3, [sp, #4]
    b888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b88c:	2b00      	cmp	r3, #0
    b88e:	d10d      	bne.n	b8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b890:	f7f5 f81c 	bl	8cc <Adc_schm_read_msr>
    b894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b896:	9b00      	ldr	r3, [sp, #0]
    b898:	f003 0301 	and.w	r3, r3, #1
    b89c:	2b00      	cmp	r3, #0
    b89e:	d100      	bne.n	b8a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b8a2:	490a      	ldr	r1, [pc, #40]	; (b8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    b8a4:	9b01      	ldr	r3, [sp, #4]
    b8a6:	9a00      	ldr	r2, [sp, #0]
    b8a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    b8ac:	4a06      	ldr	r2, [pc, #24]	; (b8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b8ae:	9b01      	ldr	r3, [sp, #4]
    b8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b4:	1c5a      	adds	r2, r3, #1
    b8b6:	4904      	ldr	r1, [pc, #16]	; (b8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b8b8:	9b01      	ldr	r3, [sp, #4]
    b8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8be:	bf00      	nop
    b8c0:	b003      	add	sp, #12
    b8c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b8c6:	bf00      	nop
    b8c8:	1fff8e6c 	.word	0x1fff8e6c
    b8cc:	1fff8e68 	.word	0x1fff8e68

0000b8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b8d0:	b500      	push	{lr}
    b8d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8d4:	f7f5 fdca 	bl	146c <Sys_GetCoreID>
    b8d8:	4603      	mov	r3, r0
    b8da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    b8dc:	4a0d      	ldr	r2, [pc, #52]	; (b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b8de:	9b01      	ldr	r3, [sp, #4]
    b8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8e4:	1e5a      	subs	r2, r3, #1
    b8e6:	490b      	ldr	r1, [pc, #44]	; (b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b8e8:	9b01      	ldr	r3, [sp, #4]
    b8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b8ee:	4a0a      	ldr	r2, [pc, #40]	; (b918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    b8f0:	9b01      	ldr	r3, [sp, #4]
    b8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8f6:	f003 0301 	and.w	r3, r3, #1
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d106      	bne.n	b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    b8fe:	4a05      	ldr	r2, [pc, #20]	; (b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b900:	9b01      	ldr	r3, [sp, #4]
    b902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b906:	2b00      	cmp	r3, #0
    b908:	d100      	bne.n	b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b90a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b90c:	bf00      	nop
    b90e:	b003      	add	sp, #12
    b910:	f85d fb04 	ldr.w	pc, [sp], #4
    b914:	1fff8e6c 	.word	0x1fff8e6c
    b918:	1fff8e68 	.word	0x1fff8e68

0000b91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b91c:	b500      	push	{lr}
    b91e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b920:	f7f5 fda4 	bl	146c <Sys_GetCoreID>
    b924:	4603      	mov	r3, r0
    b926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    b928:	4a10      	ldr	r2, [pc, #64]	; (b96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b92a:	9b01      	ldr	r3, [sp, #4]
    b92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b930:	2b00      	cmp	r3, #0
    b932:	d10d      	bne.n	b950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b934:	f7f4 ffca 	bl	8cc <Adc_schm_read_msr>
    b938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b93a:	9b00      	ldr	r3, [sp, #0]
    b93c:	f003 0301 	and.w	r3, r3, #1
    b940:	2b00      	cmp	r3, #0
    b942:	d100      	bne.n	b946 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b946:	490a      	ldr	r1, [pc, #40]	; (b970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    b948:	9b01      	ldr	r3, [sp, #4]
    b94a:	9a00      	ldr	r2, [sp, #0]
    b94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    b950:	4a06      	ldr	r2, [pc, #24]	; (b96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b952:	9b01      	ldr	r3, [sp, #4]
    b954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b958:	1c5a      	adds	r2, r3, #1
    b95a:	4904      	ldr	r1, [pc, #16]	; (b96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b962:	bf00      	nop
    b964:	b003      	add	sp, #12
    b966:	f85d fb04 	ldr.w	pc, [sp], #4
    b96a:	bf00      	nop
    b96c:	1fff8e74 	.word	0x1fff8e74
    b970:	1fff8e70 	.word	0x1fff8e70

0000b974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b974:	b500      	push	{lr}
    b976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b978:	f7f5 fd78 	bl	146c <Sys_GetCoreID>
    b97c:	4603      	mov	r3, r0
    b97e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    b980:	4a0d      	ldr	r2, [pc, #52]	; (b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b982:	9b01      	ldr	r3, [sp, #4]
    b984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b988:	1e5a      	subs	r2, r3, #1
    b98a:	490b      	ldr	r1, [pc, #44]	; (b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b98c:	9b01      	ldr	r3, [sp, #4]
    b98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b992:	4a0a      	ldr	r2, [pc, #40]	; (b9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    b994:	9b01      	ldr	r3, [sp, #4]
    b996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b99a:	f003 0301 	and.w	r3, r3, #1
    b99e:	2b00      	cmp	r3, #0
    b9a0:	d106      	bne.n	b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    b9a2:	4a05      	ldr	r2, [pc, #20]	; (b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b9a4:	9b01      	ldr	r3, [sp, #4]
    b9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d100      	bne.n	b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9b0:	bf00      	nop
    b9b2:	b003      	add	sp, #12
    b9b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b9b8:	1fff8e74 	.word	0x1fff8e74
    b9bc:	1fff8e70 	.word	0x1fff8e70

0000b9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b9c0:	b500      	push	{lr}
    b9c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9c4:	f7f5 fd52 	bl	146c <Sys_GetCoreID>
    b9c8:	4603      	mov	r3, r0
    b9ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    b9cc:	4a10      	ldr	r2, [pc, #64]	; (ba10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d10d      	bne.n	b9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9d8:	f7f4 ff78 	bl	8cc <Adc_schm_read_msr>
    b9dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9de:	9b00      	ldr	r3, [sp, #0]
    b9e0:	f003 0301 	and.w	r3, r3, #1
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d100      	bne.n	b9ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b9ea:	490a      	ldr	r1, [pc, #40]	; (ba14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    b9ec:	9b01      	ldr	r3, [sp, #4]
    b9ee:	9a00      	ldr	r2, [sp, #0]
    b9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    b9f4:	4a06      	ldr	r2, [pc, #24]	; (ba10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b9f6:	9b01      	ldr	r3, [sp, #4]
    b9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9fc:	1c5a      	adds	r2, r3, #1
    b9fe:	4904      	ldr	r1, [pc, #16]	; (ba10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ba00:	9b01      	ldr	r3, [sp, #4]
    ba02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba06:	bf00      	nop
    ba08:	b003      	add	sp, #12
    ba0a:	f85d fb04 	ldr.w	pc, [sp], #4
    ba0e:	bf00      	nop
    ba10:	1fff8e7c 	.word	0x1fff8e7c
    ba14:	1fff8e78 	.word	0x1fff8e78

0000ba18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    ba18:	b500      	push	{lr}
    ba1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba1c:	f7f5 fd26 	bl	146c <Sys_GetCoreID>
    ba20:	4603      	mov	r3, r0
    ba22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    ba24:	4a0d      	ldr	r2, [pc, #52]	; (ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    ba26:	9b01      	ldr	r3, [sp, #4]
    ba28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba2c:	1e5a      	subs	r2, r3, #1
    ba2e:	490b      	ldr	r1, [pc, #44]	; (ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    ba30:	9b01      	ldr	r3, [sp, #4]
    ba32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    ba36:	4a0a      	ldr	r2, [pc, #40]	; (ba60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    ba38:	9b01      	ldr	r3, [sp, #4]
    ba3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba3e:	f003 0301 	and.w	r3, r3, #1
    ba42:	2b00      	cmp	r3, #0
    ba44:	d106      	bne.n	ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    ba46:	4a05      	ldr	r2, [pc, #20]	; (ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    ba48:	9b01      	ldr	r3, [sp, #4]
    ba4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d100      	bne.n	ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba54:	bf00      	nop
    ba56:	b003      	add	sp, #12
    ba58:	f85d fb04 	ldr.w	pc, [sp], #4
    ba5c:	1fff8e7c 	.word	0x1fff8e7c
    ba60:	1fff8e78 	.word	0x1fff8e78

0000ba64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    ba64:	b500      	push	{lr}
    ba66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba68:	f7f5 fd00 	bl	146c <Sys_GetCoreID>
    ba6c:	4603      	mov	r3, r0
    ba6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    ba70:	4a10      	ldr	r2, [pc, #64]	; (bab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    ba72:	9b01      	ldr	r3, [sp, #4]
    ba74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba78:	2b00      	cmp	r3, #0
    ba7a:	d10d      	bne.n	ba98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba7c:	f7f4 ff26 	bl	8cc <Adc_schm_read_msr>
    ba80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba82:	9b00      	ldr	r3, [sp, #0]
    ba84:	f003 0301 	and.w	r3, r3, #1
    ba88:	2b00      	cmp	r3, #0
    ba8a:	d100      	bne.n	ba8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    ba8e:	490a      	ldr	r1, [pc, #40]	; (bab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    ba90:	9b01      	ldr	r3, [sp, #4]
    ba92:	9a00      	ldr	r2, [sp, #0]
    ba94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    ba98:	4a06      	ldr	r2, [pc, #24]	; (bab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    ba9a:	9b01      	ldr	r3, [sp, #4]
    ba9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baa0:	1c5a      	adds	r2, r3, #1
    baa2:	4904      	ldr	r1, [pc, #16]	; (bab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    baa4:	9b01      	ldr	r3, [sp, #4]
    baa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    baaa:	bf00      	nop
    baac:	b003      	add	sp, #12
    baae:	f85d fb04 	ldr.w	pc, [sp], #4
    bab2:	bf00      	nop
    bab4:	1fff8e84 	.word	0x1fff8e84
    bab8:	1fff8e80 	.word	0x1fff8e80

0000babc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    babc:	b500      	push	{lr}
    babe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bac0:	f7f5 fcd4 	bl	146c <Sys_GetCoreID>
    bac4:	4603      	mov	r3, r0
    bac6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    bac8:	4a0d      	ldr	r2, [pc, #52]	; (bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    baca:	9b01      	ldr	r3, [sp, #4]
    bacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bad0:	1e5a      	subs	r2, r3, #1
    bad2:	490b      	ldr	r1, [pc, #44]	; (bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    bad4:	9b01      	ldr	r3, [sp, #4]
    bad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    bada:	4a0a      	ldr	r2, [pc, #40]	; (bb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    badc:	9b01      	ldr	r3, [sp, #4]
    bade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae2:	f003 0301 	and.w	r3, r3, #1
    bae6:	2b00      	cmp	r3, #0
    bae8:	d106      	bne.n	baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    baea:	4a05      	ldr	r2, [pc, #20]	; (bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    baec:	9b01      	ldr	r3, [sp, #4]
    baee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d100      	bne.n	baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    baf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    baf8:	bf00      	nop
    bafa:	b003      	add	sp, #12
    bafc:	f85d fb04 	ldr.w	pc, [sp], #4
    bb00:	1fff8e84 	.word	0x1fff8e84
    bb04:	1fff8e80 	.word	0x1fff8e80

0000bb08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    bb08:	b500      	push	{lr}
    bb0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb0c:	f7f5 fcae 	bl	146c <Sys_GetCoreID>
    bb10:	4603      	mov	r3, r0
    bb12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    bb14:	4a10      	ldr	r2, [pc, #64]	; (bb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bb16:	9b01      	ldr	r3, [sp, #4]
    bb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb1c:	2b00      	cmp	r3, #0
    bb1e:	d10d      	bne.n	bb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb20:	f7f4 fed4 	bl	8cc <Adc_schm_read_msr>
    bb24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb26:	9b00      	ldr	r3, [sp, #0]
    bb28:	f003 0301 	and.w	r3, r3, #1
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d100      	bne.n	bb32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    bb32:	490a      	ldr	r1, [pc, #40]	; (bb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    bb34:	9b01      	ldr	r3, [sp, #4]
    bb36:	9a00      	ldr	r2, [sp, #0]
    bb38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    bb3c:	4a06      	ldr	r2, [pc, #24]	; (bb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bb3e:	9b01      	ldr	r3, [sp, #4]
    bb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb44:	1c5a      	adds	r2, r3, #1
    bb46:	4904      	ldr	r1, [pc, #16]	; (bb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bb48:	9b01      	ldr	r3, [sp, #4]
    bb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb4e:	bf00      	nop
    bb50:	b003      	add	sp, #12
    bb52:	f85d fb04 	ldr.w	pc, [sp], #4
    bb56:	bf00      	nop
    bb58:	1fff8e8c 	.word	0x1fff8e8c
    bb5c:	1fff8e88 	.word	0x1fff8e88

0000bb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    bb60:	b500      	push	{lr}
    bb62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb64:	f7f5 fc82 	bl	146c <Sys_GetCoreID>
    bb68:	4603      	mov	r3, r0
    bb6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    bb6c:	4a0d      	ldr	r2, [pc, #52]	; (bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bb6e:	9b01      	ldr	r3, [sp, #4]
    bb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb74:	1e5a      	subs	r2, r3, #1
    bb76:	490b      	ldr	r1, [pc, #44]	; (bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bb78:	9b01      	ldr	r3, [sp, #4]
    bb7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    bb7e:	4a0a      	ldr	r2, [pc, #40]	; (bba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    bb80:	9b01      	ldr	r3, [sp, #4]
    bb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb86:	f003 0301 	and.w	r3, r3, #1
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d106      	bne.n	bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    bb8e:	4a05      	ldr	r2, [pc, #20]	; (bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bb90:	9b01      	ldr	r3, [sp, #4]
    bb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb96:	2b00      	cmp	r3, #0
    bb98:	d100      	bne.n	bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb9c:	bf00      	nop
    bb9e:	b003      	add	sp, #12
    bba0:	f85d fb04 	ldr.w	pc, [sp], #4
    bba4:	1fff8e8c 	.word	0x1fff8e8c
    bba8:	1fff8e88 	.word	0x1fff8e88

0000bbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bbac:	b500      	push	{lr}
    bbae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbb0:	f7f5 fc5c 	bl	146c <Sys_GetCoreID>
    bbb4:	4603      	mov	r3, r0
    bbb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    bbb8:	4a10      	ldr	r2, [pc, #64]	; (bbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bbba:	9b01      	ldr	r3, [sp, #4]
    bbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d10d      	bne.n	bbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbc4:	f7f4 fe82 	bl	8cc <Adc_schm_read_msr>
    bbc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbca:	9b00      	ldr	r3, [sp, #0]
    bbcc:	f003 0301 	and.w	r3, r3, #1
    bbd0:	2b00      	cmp	r3, #0
    bbd2:	d100      	bne.n	bbd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    bbd6:	490a      	ldr	r1, [pc, #40]	; (bc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    bbd8:	9b01      	ldr	r3, [sp, #4]
    bbda:	9a00      	ldr	r2, [sp, #0]
    bbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    bbe0:	4a06      	ldr	r2, [pc, #24]	; (bbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bbe2:	9b01      	ldr	r3, [sp, #4]
    bbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbe8:	1c5a      	adds	r2, r3, #1
    bbea:	4904      	ldr	r1, [pc, #16]	; (bbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bbec:	9b01      	ldr	r3, [sp, #4]
    bbee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbf2:	bf00      	nop
    bbf4:	b003      	add	sp, #12
    bbf6:	f85d fb04 	ldr.w	pc, [sp], #4
    bbfa:	bf00      	nop
    bbfc:	1fff8e94 	.word	0x1fff8e94
    bc00:	1fff8e90 	.word	0x1fff8e90

0000bc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bc04:	b500      	push	{lr}
    bc06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc08:	f7f5 fc30 	bl	146c <Sys_GetCoreID>
    bc0c:	4603      	mov	r3, r0
    bc0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    bc10:	4a0d      	ldr	r2, [pc, #52]	; (bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bc12:	9b01      	ldr	r3, [sp, #4]
    bc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc18:	1e5a      	subs	r2, r3, #1
    bc1a:	490b      	ldr	r1, [pc, #44]	; (bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bc1c:	9b01      	ldr	r3, [sp, #4]
    bc1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    bc22:	4a0a      	ldr	r2, [pc, #40]	; (bc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    bc24:	9b01      	ldr	r3, [sp, #4]
    bc26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc2a:	f003 0301 	and.w	r3, r3, #1
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d106      	bne.n	bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    bc32:	4a05      	ldr	r2, [pc, #20]	; (bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bc34:	9b01      	ldr	r3, [sp, #4]
    bc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	d100      	bne.n	bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc40:	bf00      	nop
    bc42:	b003      	add	sp, #12
    bc44:	f85d fb04 	ldr.w	pc, [sp], #4
    bc48:	1fff8e94 	.word	0x1fff8e94
    bc4c:	1fff8e90 	.word	0x1fff8e90

0000bc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    bc50:	b500      	push	{lr}
    bc52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc54:	f7f5 fc0a 	bl	146c <Sys_GetCoreID>
    bc58:	4603      	mov	r3, r0
    bc5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    bc5c:	4a10      	ldr	r2, [pc, #64]	; (bca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bc5e:	9b01      	ldr	r3, [sp, #4]
    bc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc64:	2b00      	cmp	r3, #0
    bc66:	d10d      	bne.n	bc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc68:	f7f4 fe30 	bl	8cc <Adc_schm_read_msr>
    bc6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc6e:	9b00      	ldr	r3, [sp, #0]
    bc70:	f003 0301 	and.w	r3, r3, #1
    bc74:	2b00      	cmp	r3, #0
    bc76:	d100      	bne.n	bc7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    bc7a:	490a      	ldr	r1, [pc, #40]	; (bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    bc7c:	9b01      	ldr	r3, [sp, #4]
    bc7e:	9a00      	ldr	r2, [sp, #0]
    bc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    bc84:	4a06      	ldr	r2, [pc, #24]	; (bca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bc86:	9b01      	ldr	r3, [sp, #4]
    bc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc8c:	1c5a      	adds	r2, r3, #1
    bc8e:	4904      	ldr	r1, [pc, #16]	; (bca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bc90:	9b01      	ldr	r3, [sp, #4]
    bc92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc96:	bf00      	nop
    bc98:	b003      	add	sp, #12
    bc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc9e:	bf00      	nop
    bca0:	1fff8e9c 	.word	0x1fff8e9c
    bca4:	1fff8e98 	.word	0x1fff8e98

0000bca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    bca8:	b500      	push	{lr}
    bcaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcac:	f7f5 fbde 	bl	146c <Sys_GetCoreID>
    bcb0:	4603      	mov	r3, r0
    bcb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    bcb4:	4a0d      	ldr	r2, [pc, #52]	; (bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bcb6:	9b01      	ldr	r3, [sp, #4]
    bcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcbc:	1e5a      	subs	r2, r3, #1
    bcbe:	490b      	ldr	r1, [pc, #44]	; (bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bcc0:	9b01      	ldr	r3, [sp, #4]
    bcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    bcc6:	4a0a      	ldr	r2, [pc, #40]	; (bcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcce:	f003 0301 	and.w	r3, r3, #1
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d106      	bne.n	bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    bcd6:	4a05      	ldr	r2, [pc, #20]	; (bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bcd8:	9b01      	ldr	r3, [sp, #4]
    bcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcde:	2b00      	cmp	r3, #0
    bce0:	d100      	bne.n	bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bce4:	bf00      	nop
    bce6:	b003      	add	sp, #12
    bce8:	f85d fb04 	ldr.w	pc, [sp], #4
    bcec:	1fff8e9c 	.word	0x1fff8e9c
    bcf0:	1fff8e98 	.word	0x1fff8e98

0000bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bcf4:	b500      	push	{lr}
    bcf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcf8:	f7f5 fbb8 	bl	146c <Sys_GetCoreID>
    bcfc:	4603      	mov	r3, r0
    bcfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    bd00:	4a10      	ldr	r2, [pc, #64]	; (bd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d10d      	bne.n	bd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd0c:	f7f4 fdde 	bl	8cc <Adc_schm_read_msr>
    bd10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd12:	9b00      	ldr	r3, [sp, #0]
    bd14:	f003 0301 	and.w	r3, r3, #1
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d100      	bne.n	bd1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    bd1e:	490a      	ldr	r1, [pc, #40]	; (bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    bd20:	9b01      	ldr	r3, [sp, #4]
    bd22:	9a00      	ldr	r2, [sp, #0]
    bd24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    bd28:	4a06      	ldr	r2, [pc, #24]	; (bd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bd2a:	9b01      	ldr	r3, [sp, #4]
    bd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd30:	1c5a      	adds	r2, r3, #1
    bd32:	4904      	ldr	r1, [pc, #16]	; (bd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bd34:	9b01      	ldr	r3, [sp, #4]
    bd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd3a:	bf00      	nop
    bd3c:	b003      	add	sp, #12
    bd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    bd42:	bf00      	nop
    bd44:	1fff8ea4 	.word	0x1fff8ea4
    bd48:	1fff8ea0 	.word	0x1fff8ea0

0000bd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bd4c:	b500      	push	{lr}
    bd4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd50:	f7f5 fb8c 	bl	146c <Sys_GetCoreID>
    bd54:	4603      	mov	r3, r0
    bd56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    bd58:	4a0d      	ldr	r2, [pc, #52]	; (bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bd5a:	9b01      	ldr	r3, [sp, #4]
    bd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd60:	1e5a      	subs	r2, r3, #1
    bd62:	490b      	ldr	r1, [pc, #44]	; (bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    bd6a:	4a0a      	ldr	r2, [pc, #40]	; (bd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    bd6c:	9b01      	ldr	r3, [sp, #4]
    bd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd72:	f003 0301 	and.w	r3, r3, #1
    bd76:	2b00      	cmp	r3, #0
    bd78:	d106      	bne.n	bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    bd7a:	4a05      	ldr	r2, [pc, #20]	; (bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd82:	2b00      	cmp	r3, #0
    bd84:	d100      	bne.n	bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd88:	bf00      	nop
    bd8a:	b003      	add	sp, #12
    bd8c:	f85d fb04 	ldr.w	pc, [sp], #4
    bd90:	1fff8ea4 	.word	0x1fff8ea4
    bd94:	1fff8ea0 	.word	0x1fff8ea0

0000bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bd98:	b500      	push	{lr}
    bd9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd9c:	f7f5 fb66 	bl	146c <Sys_GetCoreID>
    bda0:	4603      	mov	r3, r0
    bda2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    bda4:	4a10      	ldr	r2, [pc, #64]	; (bde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bda6:	9b01      	ldr	r3, [sp, #4]
    bda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdac:	2b00      	cmp	r3, #0
    bdae:	d10d      	bne.n	bdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdb0:	f7f4 fd8c 	bl	8cc <Adc_schm_read_msr>
    bdb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdb6:	9b00      	ldr	r3, [sp, #0]
    bdb8:	f003 0301 	and.w	r3, r3, #1
    bdbc:	2b00      	cmp	r3, #0
    bdbe:	d100      	bne.n	bdc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    bdc2:	490a      	ldr	r1, [pc, #40]	; (bdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    bdc4:	9b01      	ldr	r3, [sp, #4]
    bdc6:	9a00      	ldr	r2, [sp, #0]
    bdc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    bdcc:	4a06      	ldr	r2, [pc, #24]	; (bde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bdce:	9b01      	ldr	r3, [sp, #4]
    bdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdd4:	1c5a      	adds	r2, r3, #1
    bdd6:	4904      	ldr	r1, [pc, #16]	; (bde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bdd8:	9b01      	ldr	r3, [sp, #4]
    bdda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdde:	bf00      	nop
    bde0:	b003      	add	sp, #12
    bde2:	f85d fb04 	ldr.w	pc, [sp], #4
    bde6:	bf00      	nop
    bde8:	1fff8eac 	.word	0x1fff8eac
    bdec:	1fff8ea8 	.word	0x1fff8ea8

0000bdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bdf0:	b500      	push	{lr}
    bdf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdf4:	f7f5 fb3a 	bl	146c <Sys_GetCoreID>
    bdf8:	4603      	mov	r3, r0
    bdfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    bdfc:	4a0d      	ldr	r2, [pc, #52]	; (be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bdfe:	9b01      	ldr	r3, [sp, #4]
    be00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be04:	1e5a      	subs	r2, r3, #1
    be06:	490b      	ldr	r1, [pc, #44]	; (be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    be0e:	4a0a      	ldr	r2, [pc, #40]	; (be38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    be10:	9b01      	ldr	r3, [sp, #4]
    be12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be16:	f003 0301 	and.w	r3, r3, #1
    be1a:	2b00      	cmp	r3, #0
    be1c:	d106      	bne.n	be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    be1e:	4a05      	ldr	r2, [pc, #20]	; (be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    be20:	9b01      	ldr	r3, [sp, #4]
    be22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be26:	2b00      	cmp	r3, #0
    be28:	d100      	bne.n	be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be2c:	bf00      	nop
    be2e:	b003      	add	sp, #12
    be30:	f85d fb04 	ldr.w	pc, [sp], #4
    be34:	1fff8eac 	.word	0x1fff8eac
    be38:	1fff8ea8 	.word	0x1fff8ea8

0000be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    be3c:	b500      	push	{lr}
    be3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be40:	f7f5 fb14 	bl	146c <Sys_GetCoreID>
    be44:	4603      	mov	r3, r0
    be46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    be48:	4a10      	ldr	r2, [pc, #64]	; (be8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    be4a:	9b01      	ldr	r3, [sp, #4]
    be4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be50:	2b00      	cmp	r3, #0
    be52:	d10d      	bne.n	be70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be54:	f7f4 fd3a 	bl	8cc <Adc_schm_read_msr>
    be58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be5a:	9b00      	ldr	r3, [sp, #0]
    be5c:	f003 0301 	and.w	r3, r3, #1
    be60:	2b00      	cmp	r3, #0
    be62:	d100      	bne.n	be66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    be66:	490a      	ldr	r1, [pc, #40]	; (be90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    be68:	9b01      	ldr	r3, [sp, #4]
    be6a:	9a00      	ldr	r2, [sp, #0]
    be6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    be70:	4a06      	ldr	r2, [pc, #24]	; (be8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    be72:	9b01      	ldr	r3, [sp, #4]
    be74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be78:	1c5a      	adds	r2, r3, #1
    be7a:	4904      	ldr	r1, [pc, #16]	; (be8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    be7c:	9b01      	ldr	r3, [sp, #4]
    be7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be82:	bf00      	nop
    be84:	b003      	add	sp, #12
    be86:	f85d fb04 	ldr.w	pc, [sp], #4
    be8a:	bf00      	nop
    be8c:	1fff8eb4 	.word	0x1fff8eb4
    be90:	1fff8eb0 	.word	0x1fff8eb0

0000be94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    be94:	b500      	push	{lr}
    be96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be98:	f7f5 fae8 	bl	146c <Sys_GetCoreID>
    be9c:	4603      	mov	r3, r0
    be9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    bea0:	4a0d      	ldr	r2, [pc, #52]	; (bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bea2:	9b01      	ldr	r3, [sp, #4]
    bea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea8:	1e5a      	subs	r2, r3, #1
    beaa:	490b      	ldr	r1, [pc, #44]	; (bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    beac:	9b01      	ldr	r3, [sp, #4]
    beae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    beb2:	4a0a      	ldr	r2, [pc, #40]	; (bedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    beb4:	9b01      	ldr	r3, [sp, #4]
    beb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beba:	f003 0301 	and.w	r3, r3, #1
    bebe:	2b00      	cmp	r3, #0
    bec0:	d106      	bne.n	bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    bec2:	4a05      	ldr	r2, [pc, #20]	; (bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bec4:	9b01      	ldr	r3, [sp, #4]
    bec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beca:	2b00      	cmp	r3, #0
    becc:	d100      	bne.n	bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bed0:	bf00      	nop
    bed2:	b003      	add	sp, #12
    bed4:	f85d fb04 	ldr.w	pc, [sp], #4
    bed8:	1fff8eb4 	.word	0x1fff8eb4
    bedc:	1fff8eb0 	.word	0x1fff8eb0

0000bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bee0:	b500      	push	{lr}
    bee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bee4:	f7f5 fac2 	bl	146c <Sys_GetCoreID>
    bee8:	4603      	mov	r3, r0
    beea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    beec:	4a10      	ldr	r2, [pc, #64]	; (bf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    beee:	9b01      	ldr	r3, [sp, #4]
    bef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d10d      	bne.n	bf14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bef8:	f7f4 fce8 	bl	8cc <Adc_schm_read_msr>
    befc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    befe:	9b00      	ldr	r3, [sp, #0]
    bf00:	f003 0301 	and.w	r3, r3, #1
    bf04:	2b00      	cmp	r3, #0
    bf06:	d100      	bne.n	bf0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    bf0a:	490a      	ldr	r1, [pc, #40]	; (bf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    bf0c:	9b01      	ldr	r3, [sp, #4]
    bf0e:	9a00      	ldr	r2, [sp, #0]
    bf10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    bf14:	4a06      	ldr	r2, [pc, #24]	; (bf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bf16:	9b01      	ldr	r3, [sp, #4]
    bf18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf1c:	1c5a      	adds	r2, r3, #1
    bf1e:	4904      	ldr	r1, [pc, #16]	; (bf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bf20:	9b01      	ldr	r3, [sp, #4]
    bf22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf26:	bf00      	nop
    bf28:	b003      	add	sp, #12
    bf2a:	f85d fb04 	ldr.w	pc, [sp], #4
    bf2e:	bf00      	nop
    bf30:	1fff8ebc 	.word	0x1fff8ebc
    bf34:	1fff8eb8 	.word	0x1fff8eb8

0000bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bf38:	b500      	push	{lr}
    bf3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf3c:	f7f5 fa96 	bl	146c <Sys_GetCoreID>
    bf40:	4603      	mov	r3, r0
    bf42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    bf44:	4a0d      	ldr	r2, [pc, #52]	; (bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bf46:	9b01      	ldr	r3, [sp, #4]
    bf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf4c:	1e5a      	subs	r2, r3, #1
    bf4e:	490b      	ldr	r1, [pc, #44]	; (bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bf50:	9b01      	ldr	r3, [sp, #4]
    bf52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    bf56:	4a0a      	ldr	r2, [pc, #40]	; (bf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf5e:	f003 0301 	and.w	r3, r3, #1
    bf62:	2b00      	cmp	r3, #0
    bf64:	d106      	bne.n	bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    bf66:	4a05      	ldr	r2, [pc, #20]	; (bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bf68:	9b01      	ldr	r3, [sp, #4]
    bf6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d100      	bne.n	bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf74:	bf00      	nop
    bf76:	b003      	add	sp, #12
    bf78:	f85d fb04 	ldr.w	pc, [sp], #4
    bf7c:	1fff8ebc 	.word	0x1fff8ebc
    bf80:	1fff8eb8 	.word	0x1fff8eb8

0000bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bf84:	b500      	push	{lr}
    bf86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf88:	f7f5 fa70 	bl	146c <Sys_GetCoreID>
    bf8c:	4603      	mov	r3, r0
    bf8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    bf90:	4a10      	ldr	r2, [pc, #64]	; (bfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bf92:	9b01      	ldr	r3, [sp, #4]
    bf94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf98:	2b00      	cmp	r3, #0
    bf9a:	d10d      	bne.n	bfb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf9c:	f7f4 fc96 	bl	8cc <Adc_schm_read_msr>
    bfa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfa2:	9b00      	ldr	r3, [sp, #0]
    bfa4:	f003 0301 	and.w	r3, r3, #1
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d100      	bne.n	bfae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    bfae:	490a      	ldr	r1, [pc, #40]	; (bfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    bfb0:	9b01      	ldr	r3, [sp, #4]
    bfb2:	9a00      	ldr	r2, [sp, #0]
    bfb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    bfb8:	4a06      	ldr	r2, [pc, #24]	; (bfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bfba:	9b01      	ldr	r3, [sp, #4]
    bfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc0:	1c5a      	adds	r2, r3, #1
    bfc2:	4904      	ldr	r1, [pc, #16]	; (bfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bfc4:	9b01      	ldr	r3, [sp, #4]
    bfc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfca:	bf00      	nop
    bfcc:	b003      	add	sp, #12
    bfce:	f85d fb04 	ldr.w	pc, [sp], #4
    bfd2:	bf00      	nop
    bfd4:	1fff8ec4 	.word	0x1fff8ec4
    bfd8:	1fff8ec0 	.word	0x1fff8ec0

0000bfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bfdc:	b500      	push	{lr}
    bfde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfe0:	f7f5 fa44 	bl	146c <Sys_GetCoreID>
    bfe4:	4603      	mov	r3, r0
    bfe6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    bfe8:	4a0d      	ldr	r2, [pc, #52]	; (c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bfea:	9b01      	ldr	r3, [sp, #4]
    bfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bff0:	1e5a      	subs	r2, r3, #1
    bff2:	490b      	ldr	r1, [pc, #44]	; (c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bff4:	9b01      	ldr	r3, [sp, #4]
    bff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    bffa:	4a0a      	ldr	r2, [pc, #40]	; (c024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    bffc:	9b01      	ldr	r3, [sp, #4]
    bffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c002:	f003 0301 	and.w	r3, r3, #1
    c006:	2b00      	cmp	r3, #0
    c008:	d106      	bne.n	c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    c00a:	4a05      	ldr	r2, [pc, #20]	; (c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c00c:	9b01      	ldr	r3, [sp, #4]
    c00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c012:	2b00      	cmp	r3, #0
    c014:	d100      	bne.n	c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c018:	bf00      	nop
    c01a:	b003      	add	sp, #12
    c01c:	f85d fb04 	ldr.w	pc, [sp], #4
    c020:	1fff8ec4 	.word	0x1fff8ec4
    c024:	1fff8ec0 	.word	0x1fff8ec0

0000c028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    c028:	b500      	push	{lr}
    c02a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c02c:	f7f5 fa1e 	bl	146c <Sys_GetCoreID>
    c030:	4603      	mov	r3, r0
    c032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    c034:	4a10      	ldr	r2, [pc, #64]	; (c078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c036:	9b01      	ldr	r3, [sp, #4]
    c038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d10d      	bne.n	c05c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c040:	f7f4 fc44 	bl	8cc <Adc_schm_read_msr>
    c044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c046:	9b00      	ldr	r3, [sp, #0]
    c048:	f003 0301 	and.w	r3, r3, #1
    c04c:	2b00      	cmp	r3, #0
    c04e:	d100      	bne.n	c052 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    c052:	490a      	ldr	r1, [pc, #40]	; (c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    c054:	9b01      	ldr	r3, [sp, #4]
    c056:	9a00      	ldr	r2, [sp, #0]
    c058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    c05c:	4a06      	ldr	r2, [pc, #24]	; (c078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c05e:	9b01      	ldr	r3, [sp, #4]
    c060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c064:	1c5a      	adds	r2, r3, #1
    c066:	4904      	ldr	r1, [pc, #16]	; (c078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c068:	9b01      	ldr	r3, [sp, #4]
    c06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c06e:	bf00      	nop
    c070:	b003      	add	sp, #12
    c072:	f85d fb04 	ldr.w	pc, [sp], #4
    c076:	bf00      	nop
    c078:	1fff8ecc 	.word	0x1fff8ecc
    c07c:	1fff8ec8 	.word	0x1fff8ec8

0000c080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    c080:	b500      	push	{lr}
    c082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c084:	f7f5 f9f2 	bl	146c <Sys_GetCoreID>
    c088:	4603      	mov	r3, r0
    c08a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    c08c:	4a0d      	ldr	r2, [pc, #52]	; (c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c08e:	9b01      	ldr	r3, [sp, #4]
    c090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c094:	1e5a      	subs	r2, r3, #1
    c096:	490b      	ldr	r1, [pc, #44]	; (c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c098:	9b01      	ldr	r3, [sp, #4]
    c09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    c09e:	4a0a      	ldr	r2, [pc, #40]	; (c0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0a6:	f003 0301 	and.w	r3, r3, #1
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d106      	bne.n	c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    c0ae:	4a05      	ldr	r2, [pc, #20]	; (c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c0b0:	9b01      	ldr	r3, [sp, #4]
    c0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d100      	bne.n	c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0bc:	bf00      	nop
    c0be:	b003      	add	sp, #12
    c0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c0c4:	1fff8ecc 	.word	0x1fff8ecc
    c0c8:	1fff8ec8 	.word	0x1fff8ec8

0000c0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c0cc:	b500      	push	{lr}
    c0ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0d0:	f7f5 f9cc 	bl	146c <Sys_GetCoreID>
    c0d4:	4603      	mov	r3, r0
    c0d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    c0d8:	4a10      	ldr	r2, [pc, #64]	; (c11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c0da:	9b01      	ldr	r3, [sp, #4]
    c0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0e0:	2b00      	cmp	r3, #0
    c0e2:	d10d      	bne.n	c100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0e4:	f7f4 fbf2 	bl	8cc <Adc_schm_read_msr>
    c0e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0ea:	9b00      	ldr	r3, [sp, #0]
    c0ec:	f003 0301 	and.w	r3, r3, #1
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d100      	bne.n	c0f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    c0f6:	490a      	ldr	r1, [pc, #40]	; (c120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    c0f8:	9b01      	ldr	r3, [sp, #4]
    c0fa:	9a00      	ldr	r2, [sp, #0]
    c0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    c100:	4a06      	ldr	r2, [pc, #24]	; (c11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c102:	9b01      	ldr	r3, [sp, #4]
    c104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c108:	1c5a      	adds	r2, r3, #1
    c10a:	4904      	ldr	r1, [pc, #16]	; (c11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c10c:	9b01      	ldr	r3, [sp, #4]
    c10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c112:	bf00      	nop
    c114:	b003      	add	sp, #12
    c116:	f85d fb04 	ldr.w	pc, [sp], #4
    c11a:	bf00      	nop
    c11c:	1fff8ed4 	.word	0x1fff8ed4
    c120:	1fff8ed0 	.word	0x1fff8ed0

0000c124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c124:	b500      	push	{lr}
    c126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c128:	f7f5 f9a0 	bl	146c <Sys_GetCoreID>
    c12c:	4603      	mov	r3, r0
    c12e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    c130:	4a0d      	ldr	r2, [pc, #52]	; (c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c132:	9b01      	ldr	r3, [sp, #4]
    c134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c138:	1e5a      	subs	r2, r3, #1
    c13a:	490b      	ldr	r1, [pc, #44]	; (c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c13c:	9b01      	ldr	r3, [sp, #4]
    c13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    c142:	4a0a      	ldr	r2, [pc, #40]	; (c16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    c144:	9b01      	ldr	r3, [sp, #4]
    c146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c14a:	f003 0301 	and.w	r3, r3, #1
    c14e:	2b00      	cmp	r3, #0
    c150:	d106      	bne.n	c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    c152:	4a05      	ldr	r2, [pc, #20]	; (c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c154:	9b01      	ldr	r3, [sp, #4]
    c156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d100      	bne.n	c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c15e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c160:	bf00      	nop
    c162:	b003      	add	sp, #12
    c164:	f85d fb04 	ldr.w	pc, [sp], #4
    c168:	1fff8ed4 	.word	0x1fff8ed4
    c16c:	1fff8ed0 	.word	0x1fff8ed0

0000c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c170:	b500      	push	{lr}
    c172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c174:	f7f5 f97a 	bl	146c <Sys_GetCoreID>
    c178:	4603      	mov	r3, r0
    c17a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    c17c:	4a10      	ldr	r2, [pc, #64]	; (c1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c17e:	9b01      	ldr	r3, [sp, #4]
    c180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c184:	2b00      	cmp	r3, #0
    c186:	d10d      	bne.n	c1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c188:	f7f4 fba0 	bl	8cc <Adc_schm_read_msr>
    c18c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c18e:	9b00      	ldr	r3, [sp, #0]
    c190:	f003 0301 	and.w	r3, r3, #1
    c194:	2b00      	cmp	r3, #0
    c196:	d100      	bne.n	c19a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    c19a:	490a      	ldr	r1, [pc, #40]	; (c1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    c19c:	9b01      	ldr	r3, [sp, #4]
    c19e:	9a00      	ldr	r2, [sp, #0]
    c1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    c1a4:	4a06      	ldr	r2, [pc, #24]	; (c1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c1a6:	9b01      	ldr	r3, [sp, #4]
    c1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ac:	1c5a      	adds	r2, r3, #1
    c1ae:	4904      	ldr	r1, [pc, #16]	; (c1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c1b0:	9b01      	ldr	r3, [sp, #4]
    c1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1b6:	bf00      	nop
    c1b8:	b003      	add	sp, #12
    c1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    c1be:	bf00      	nop
    c1c0:	1fff8edc 	.word	0x1fff8edc
    c1c4:	1fff8ed8 	.word	0x1fff8ed8

0000c1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c1c8:	b500      	push	{lr}
    c1ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1cc:	f7f5 f94e 	bl	146c <Sys_GetCoreID>
    c1d0:	4603      	mov	r3, r0
    c1d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    c1d4:	4a0d      	ldr	r2, [pc, #52]	; (c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c1d6:	9b01      	ldr	r3, [sp, #4]
    c1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1dc:	1e5a      	subs	r2, r3, #1
    c1de:	490b      	ldr	r1, [pc, #44]	; (c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c1e0:	9b01      	ldr	r3, [sp, #4]
    c1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    c1e6:	4a0a      	ldr	r2, [pc, #40]	; (c210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    c1e8:	9b01      	ldr	r3, [sp, #4]
    c1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ee:	f003 0301 	and.w	r3, r3, #1
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d106      	bne.n	c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    c1f6:	4a05      	ldr	r2, [pc, #20]	; (c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c1f8:	9b01      	ldr	r3, [sp, #4]
    c1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d100      	bne.n	c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c204:	bf00      	nop
    c206:	b003      	add	sp, #12
    c208:	f85d fb04 	ldr.w	pc, [sp], #4
    c20c:	1fff8edc 	.word	0x1fff8edc
    c210:	1fff8ed8 	.word	0x1fff8ed8

0000c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c214:	b500      	push	{lr}
    c216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c218:	f7f5 f928 	bl	146c <Sys_GetCoreID>
    c21c:	4603      	mov	r3, r0
    c21e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    c220:	4a10      	ldr	r2, [pc, #64]	; (c264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c222:	9b01      	ldr	r3, [sp, #4]
    c224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c228:	2b00      	cmp	r3, #0
    c22a:	d10d      	bne.n	c248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c22c:	f7f4 fb4e 	bl	8cc <Adc_schm_read_msr>
    c230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c232:	9b00      	ldr	r3, [sp, #0]
    c234:	f003 0301 	and.w	r3, r3, #1
    c238:	2b00      	cmp	r3, #0
    c23a:	d100      	bne.n	c23e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c23c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    c23e:	490a      	ldr	r1, [pc, #40]	; (c268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    c240:	9b01      	ldr	r3, [sp, #4]
    c242:	9a00      	ldr	r2, [sp, #0]
    c244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    c248:	4a06      	ldr	r2, [pc, #24]	; (c264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c24a:	9b01      	ldr	r3, [sp, #4]
    c24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c250:	1c5a      	adds	r2, r3, #1
    c252:	4904      	ldr	r1, [pc, #16]	; (c264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c254:	9b01      	ldr	r3, [sp, #4]
    c256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c25a:	bf00      	nop
    c25c:	b003      	add	sp, #12
    c25e:	f85d fb04 	ldr.w	pc, [sp], #4
    c262:	bf00      	nop
    c264:	1fff8ee4 	.word	0x1fff8ee4
    c268:	1fff8ee0 	.word	0x1fff8ee0

0000c26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c26c:	b500      	push	{lr}
    c26e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c270:	f7f5 f8fc 	bl	146c <Sys_GetCoreID>
    c274:	4603      	mov	r3, r0
    c276:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    c278:	4a0d      	ldr	r2, [pc, #52]	; (c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c27a:	9b01      	ldr	r3, [sp, #4]
    c27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c280:	1e5a      	subs	r2, r3, #1
    c282:	490b      	ldr	r1, [pc, #44]	; (c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    c28a:	4a0a      	ldr	r2, [pc, #40]	; (c2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    c28c:	9b01      	ldr	r3, [sp, #4]
    c28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c292:	f003 0301 	and.w	r3, r3, #1
    c296:	2b00      	cmp	r3, #0
    c298:	d106      	bne.n	c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c29a:	4a05      	ldr	r2, [pc, #20]	; (c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c29c:	9b01      	ldr	r3, [sp, #4]
    c29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d100      	bne.n	c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2a8:	bf00      	nop
    c2aa:	b003      	add	sp, #12
    c2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b0:	1fff8ee4 	.word	0x1fff8ee4
    c2b4:	1fff8ee0 	.word	0x1fff8ee0

0000c2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c2b8:	b500      	push	{lr}
    c2ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2bc:	f7f5 f8d6 	bl	146c <Sys_GetCoreID>
    c2c0:	4603      	mov	r3, r0
    c2c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c2c4:	4a10      	ldr	r2, [pc, #64]	; (c308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c2c6:	9b01      	ldr	r3, [sp, #4]
    c2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d10d      	bne.n	c2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2d0:	f7f4 fafc 	bl	8cc <Adc_schm_read_msr>
    c2d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2d6:	9b00      	ldr	r3, [sp, #0]
    c2d8:	f003 0301 	and.w	r3, r3, #1
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d100      	bne.n	c2e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c2e2:	490a      	ldr	r1, [pc, #40]	; (c30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c2e4:	9b01      	ldr	r3, [sp, #4]
    c2e6:	9a00      	ldr	r2, [sp, #0]
    c2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c2ec:	4a06      	ldr	r2, [pc, #24]	; (c308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c2ee:	9b01      	ldr	r3, [sp, #4]
    c2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2f4:	1c5a      	adds	r2, r3, #1
    c2f6:	4904      	ldr	r1, [pc, #16]	; (c308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c2f8:	9b01      	ldr	r3, [sp, #4]
    c2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2fe:	bf00      	nop
    c300:	b003      	add	sp, #12
    c302:	f85d fb04 	ldr.w	pc, [sp], #4
    c306:	bf00      	nop
    c308:	1fff8eec 	.word	0x1fff8eec
    c30c:	1fff8ee8 	.word	0x1fff8ee8

0000c310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c310:	b500      	push	{lr}
    c312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c314:	f7f5 f8aa 	bl	146c <Sys_GetCoreID>
    c318:	4603      	mov	r3, r0
    c31a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c31c:	4a0d      	ldr	r2, [pc, #52]	; (c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c31e:	9b01      	ldr	r3, [sp, #4]
    c320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c324:	1e5a      	subs	r2, r3, #1
    c326:	490b      	ldr	r1, [pc, #44]	; (c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c328:	9b01      	ldr	r3, [sp, #4]
    c32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c32e:	4a0a      	ldr	r2, [pc, #40]	; (c358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c330:	9b01      	ldr	r3, [sp, #4]
    c332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c336:	f003 0301 	and.w	r3, r3, #1
    c33a:	2b00      	cmp	r3, #0
    c33c:	d106      	bne.n	c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c33e:	4a05      	ldr	r2, [pc, #20]	; (c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c340:	9b01      	ldr	r3, [sp, #4]
    c342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c346:	2b00      	cmp	r3, #0
    c348:	d100      	bne.n	c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c34a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c34c:	bf00      	nop
    c34e:	b003      	add	sp, #12
    c350:	f85d fb04 	ldr.w	pc, [sp], #4
    c354:	1fff8eec 	.word	0x1fff8eec
    c358:	1fff8ee8 	.word	0x1fff8ee8

0000c35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c35c:	b500      	push	{lr}
    c35e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c360:	f7f5 f884 	bl	146c <Sys_GetCoreID>
    c364:	4603      	mov	r3, r0
    c366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c368:	4a10      	ldr	r2, [pc, #64]	; (c3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c36a:	9b01      	ldr	r3, [sp, #4]
    c36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c370:	2b00      	cmp	r3, #0
    c372:	d10d      	bne.n	c390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c374:	f7f4 faaa 	bl	8cc <Adc_schm_read_msr>
    c378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c37a:	9b00      	ldr	r3, [sp, #0]
    c37c:	f003 0301 	and.w	r3, r3, #1
    c380:	2b00      	cmp	r3, #0
    c382:	d100      	bne.n	c386 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c386:	490a      	ldr	r1, [pc, #40]	; (c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c388:	9b01      	ldr	r3, [sp, #4]
    c38a:	9a00      	ldr	r2, [sp, #0]
    c38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c390:	4a06      	ldr	r2, [pc, #24]	; (c3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c392:	9b01      	ldr	r3, [sp, #4]
    c394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c398:	1c5a      	adds	r2, r3, #1
    c39a:	4904      	ldr	r1, [pc, #16]	; (c3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c39c:	9b01      	ldr	r3, [sp, #4]
    c39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3a2:	bf00      	nop
    c3a4:	b003      	add	sp, #12
    c3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    c3aa:	bf00      	nop
    c3ac:	1fff8ef4 	.word	0x1fff8ef4
    c3b0:	1fff8ef0 	.word	0x1fff8ef0

0000c3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c3b4:	b500      	push	{lr}
    c3b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3b8:	f7f5 f858 	bl	146c <Sys_GetCoreID>
    c3bc:	4603      	mov	r3, r0
    c3be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c3c0:	4a0d      	ldr	r2, [pc, #52]	; (c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c3c2:	9b01      	ldr	r3, [sp, #4]
    c3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3c8:	1e5a      	subs	r2, r3, #1
    c3ca:	490b      	ldr	r1, [pc, #44]	; (c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c3d2:	4a0a      	ldr	r2, [pc, #40]	; (c3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c3d4:	9b01      	ldr	r3, [sp, #4]
    c3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3da:	f003 0301 	and.w	r3, r3, #1
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d106      	bne.n	c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c3e2:	4a05      	ldr	r2, [pc, #20]	; (c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c3e4:	9b01      	ldr	r3, [sp, #4]
    c3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d100      	bne.n	c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3f0:	bf00      	nop
    c3f2:	b003      	add	sp, #12
    c3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3f8:	1fff8ef4 	.word	0x1fff8ef4
    c3fc:	1fff8ef0 	.word	0x1fff8ef0

0000c400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c400:	b500      	push	{lr}
    c402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c404:	f7f5 f832 	bl	146c <Sys_GetCoreID>
    c408:	4603      	mov	r3, r0
    c40a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c40c:	4a10      	ldr	r2, [pc, #64]	; (c450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c40e:	9b01      	ldr	r3, [sp, #4]
    c410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c414:	2b00      	cmp	r3, #0
    c416:	d10d      	bne.n	c434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c418:	f7f4 fa58 	bl	8cc <Adc_schm_read_msr>
    c41c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c41e:	9b00      	ldr	r3, [sp, #0]
    c420:	f003 0301 	and.w	r3, r3, #1
    c424:	2b00      	cmp	r3, #0
    c426:	d100      	bne.n	c42a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c42a:	490a      	ldr	r1, [pc, #40]	; (c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c42c:	9b01      	ldr	r3, [sp, #4]
    c42e:	9a00      	ldr	r2, [sp, #0]
    c430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c434:	4a06      	ldr	r2, [pc, #24]	; (c450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c436:	9b01      	ldr	r3, [sp, #4]
    c438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c43c:	1c5a      	adds	r2, r3, #1
    c43e:	4904      	ldr	r1, [pc, #16]	; (c450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c440:	9b01      	ldr	r3, [sp, #4]
    c442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c446:	bf00      	nop
    c448:	b003      	add	sp, #12
    c44a:	f85d fb04 	ldr.w	pc, [sp], #4
    c44e:	bf00      	nop
    c450:	1fff8efc 	.word	0x1fff8efc
    c454:	1fff8ef8 	.word	0x1fff8ef8

0000c458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c458:	b500      	push	{lr}
    c45a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c45c:	f7f5 f806 	bl	146c <Sys_GetCoreID>
    c460:	4603      	mov	r3, r0
    c462:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c464:	4a0d      	ldr	r2, [pc, #52]	; (c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c466:	9b01      	ldr	r3, [sp, #4]
    c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c46c:	1e5a      	subs	r2, r3, #1
    c46e:	490b      	ldr	r1, [pc, #44]	; (c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c476:	4a0a      	ldr	r2, [pc, #40]	; (c4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c478:	9b01      	ldr	r3, [sp, #4]
    c47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c47e:	f003 0301 	and.w	r3, r3, #1
    c482:	2b00      	cmp	r3, #0
    c484:	d106      	bne.n	c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c486:	4a05      	ldr	r2, [pc, #20]	; (c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c488:	9b01      	ldr	r3, [sp, #4]
    c48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c48e:	2b00      	cmp	r3, #0
    c490:	d100      	bne.n	c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c494:	bf00      	nop
    c496:	b003      	add	sp, #12
    c498:	f85d fb04 	ldr.w	pc, [sp], #4
    c49c:	1fff8efc 	.word	0x1fff8efc
    c4a0:	1fff8ef8 	.word	0x1fff8ef8

0000c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c4a4:	b500      	push	{lr}
    c4a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4a8:	f7f4 ffe0 	bl	146c <Sys_GetCoreID>
    c4ac:	4603      	mov	r3, r0
    c4ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c4b0:	4a10      	ldr	r2, [pc, #64]	; (c4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c4b2:	9b01      	ldr	r3, [sp, #4]
    c4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d10d      	bne.n	c4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4bc:	f7f4 fa06 	bl	8cc <Adc_schm_read_msr>
    c4c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4c2:	9b00      	ldr	r3, [sp, #0]
    c4c4:	f003 0301 	and.w	r3, r3, #1
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d100      	bne.n	c4ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c4ce:	490a      	ldr	r1, [pc, #40]	; (c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c4d0:	9b01      	ldr	r3, [sp, #4]
    c4d2:	9a00      	ldr	r2, [sp, #0]
    c4d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c4d8:	4a06      	ldr	r2, [pc, #24]	; (c4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c4da:	9b01      	ldr	r3, [sp, #4]
    c4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e0:	1c5a      	adds	r2, r3, #1
    c4e2:	4904      	ldr	r1, [pc, #16]	; (c4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c4e4:	9b01      	ldr	r3, [sp, #4]
    c4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4ea:	bf00      	nop
    c4ec:	b003      	add	sp, #12
    c4ee:	f85d fb04 	ldr.w	pc, [sp], #4
    c4f2:	bf00      	nop
    c4f4:	1fff8f04 	.word	0x1fff8f04
    c4f8:	1fff8f00 	.word	0x1fff8f00

0000c4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c4fc:	b500      	push	{lr}
    c4fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c500:	f7f4 ffb4 	bl	146c <Sys_GetCoreID>
    c504:	4603      	mov	r3, r0
    c506:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c508:	4a0d      	ldr	r2, [pc, #52]	; (c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c50a:	9b01      	ldr	r3, [sp, #4]
    c50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c510:	1e5a      	subs	r2, r3, #1
    c512:	490b      	ldr	r1, [pc, #44]	; (c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c514:	9b01      	ldr	r3, [sp, #4]
    c516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c51a:	4a0a      	ldr	r2, [pc, #40]	; (c544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c51c:	9b01      	ldr	r3, [sp, #4]
    c51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c522:	f003 0301 	and.w	r3, r3, #1
    c526:	2b00      	cmp	r3, #0
    c528:	d106      	bne.n	c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c52a:	4a05      	ldr	r2, [pc, #20]	; (c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c52c:	9b01      	ldr	r3, [sp, #4]
    c52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c532:	2b00      	cmp	r3, #0
    c534:	d100      	bne.n	c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c538:	bf00      	nop
    c53a:	b003      	add	sp, #12
    c53c:	f85d fb04 	ldr.w	pc, [sp], #4
    c540:	1fff8f04 	.word	0x1fff8f04
    c544:	1fff8f00 	.word	0x1fff8f00

0000c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c548:	b500      	push	{lr}
    c54a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c54c:	f7f4 ff8e 	bl	146c <Sys_GetCoreID>
    c550:	4603      	mov	r3, r0
    c552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c554:	4a10      	ldr	r2, [pc, #64]	; (c598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c556:	9b01      	ldr	r3, [sp, #4]
    c558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c55c:	2b00      	cmp	r3, #0
    c55e:	d10d      	bne.n	c57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c560:	f7f4 f9b4 	bl	8cc <Adc_schm_read_msr>
    c564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c566:	9b00      	ldr	r3, [sp, #0]
    c568:	f003 0301 	and.w	r3, r3, #1
    c56c:	2b00      	cmp	r3, #0
    c56e:	d100      	bne.n	c572 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c572:	490a      	ldr	r1, [pc, #40]	; (c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c574:	9b01      	ldr	r3, [sp, #4]
    c576:	9a00      	ldr	r2, [sp, #0]
    c578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c57c:	4a06      	ldr	r2, [pc, #24]	; (c598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c57e:	9b01      	ldr	r3, [sp, #4]
    c580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c584:	1c5a      	adds	r2, r3, #1
    c586:	4904      	ldr	r1, [pc, #16]	; (c598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c588:	9b01      	ldr	r3, [sp, #4]
    c58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c58e:	bf00      	nop
    c590:	b003      	add	sp, #12
    c592:	f85d fb04 	ldr.w	pc, [sp], #4
    c596:	bf00      	nop
    c598:	1fff8f0c 	.word	0x1fff8f0c
    c59c:	1fff8f08 	.word	0x1fff8f08

0000c5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c5a0:	b500      	push	{lr}
    c5a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5a4:	f7f4 ff62 	bl	146c <Sys_GetCoreID>
    c5a8:	4603      	mov	r3, r0
    c5aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c5ac:	4a0d      	ldr	r2, [pc, #52]	; (c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c5ae:	9b01      	ldr	r3, [sp, #4]
    c5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5b4:	1e5a      	subs	r2, r3, #1
    c5b6:	490b      	ldr	r1, [pc, #44]	; (c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c5b8:	9b01      	ldr	r3, [sp, #4]
    c5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c5be:	4a0a      	ldr	r2, [pc, #40]	; (c5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c5c0:	9b01      	ldr	r3, [sp, #4]
    c5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5c6:	f003 0301 	and.w	r3, r3, #1
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d106      	bne.n	c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c5ce:	4a05      	ldr	r2, [pc, #20]	; (c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c5d0:	9b01      	ldr	r3, [sp, #4]
    c5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d100      	bne.n	c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5dc:	bf00      	nop
    c5de:	b003      	add	sp, #12
    c5e0:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e4:	1fff8f0c 	.word	0x1fff8f0c
    c5e8:	1fff8f08 	.word	0x1fff8f08

0000c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c5ec:	b500      	push	{lr}
    c5ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5f0:	f7f4 ff3c 	bl	146c <Sys_GetCoreID>
    c5f4:	4603      	mov	r3, r0
    c5f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c5f8:	4a10      	ldr	r2, [pc, #64]	; (c63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c5fa:	9b01      	ldr	r3, [sp, #4]
    c5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c600:	2b00      	cmp	r3, #0
    c602:	d10d      	bne.n	c620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c604:	f7f4 f962 	bl	8cc <Adc_schm_read_msr>
    c608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c60a:	9b00      	ldr	r3, [sp, #0]
    c60c:	f003 0301 	and.w	r3, r3, #1
    c610:	2b00      	cmp	r3, #0
    c612:	d100      	bne.n	c616 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c616:	490a      	ldr	r1, [pc, #40]	; (c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c618:	9b01      	ldr	r3, [sp, #4]
    c61a:	9a00      	ldr	r2, [sp, #0]
    c61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c620:	4a06      	ldr	r2, [pc, #24]	; (c63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c622:	9b01      	ldr	r3, [sp, #4]
    c624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c628:	1c5a      	adds	r2, r3, #1
    c62a:	4904      	ldr	r1, [pc, #16]	; (c63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c62c:	9b01      	ldr	r3, [sp, #4]
    c62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c632:	bf00      	nop
    c634:	b003      	add	sp, #12
    c636:	f85d fb04 	ldr.w	pc, [sp], #4
    c63a:	bf00      	nop
    c63c:	1fff8f14 	.word	0x1fff8f14
    c640:	1fff8f10 	.word	0x1fff8f10

0000c644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c644:	b500      	push	{lr}
    c646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c648:	f7f4 ff10 	bl	146c <Sys_GetCoreID>
    c64c:	4603      	mov	r3, r0
    c64e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c650:	4a0d      	ldr	r2, [pc, #52]	; (c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c652:	9b01      	ldr	r3, [sp, #4]
    c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c658:	1e5a      	subs	r2, r3, #1
    c65a:	490b      	ldr	r1, [pc, #44]	; (c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c662:	4a0a      	ldr	r2, [pc, #40]	; (c68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c664:	9b01      	ldr	r3, [sp, #4]
    c666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c66a:	f003 0301 	and.w	r3, r3, #1
    c66e:	2b00      	cmp	r3, #0
    c670:	d106      	bne.n	c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c672:	4a05      	ldr	r2, [pc, #20]	; (c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c674:	9b01      	ldr	r3, [sp, #4]
    c676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c67a:	2b00      	cmp	r3, #0
    c67c:	d100      	bne.n	c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c67e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c680:	bf00      	nop
    c682:	b003      	add	sp, #12
    c684:	f85d fb04 	ldr.w	pc, [sp], #4
    c688:	1fff8f14 	.word	0x1fff8f14
    c68c:	1fff8f10 	.word	0x1fff8f10

0000c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c690:	b500      	push	{lr}
    c692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c694:	f7f4 feea 	bl	146c <Sys_GetCoreID>
    c698:	4603      	mov	r3, r0
    c69a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    c69c:	4a10      	ldr	r2, [pc, #64]	; (c6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c69e:	9b01      	ldr	r3, [sp, #4]
    c6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d10d      	bne.n	c6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6a8:	f7f4 f910 	bl	8cc <Adc_schm_read_msr>
    c6ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6ae:	9b00      	ldr	r3, [sp, #0]
    c6b0:	f003 0301 	and.w	r3, r3, #1
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d100      	bne.n	c6ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    c6ba:	490a      	ldr	r1, [pc, #40]	; (c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    c6bc:	9b01      	ldr	r3, [sp, #4]
    c6be:	9a00      	ldr	r2, [sp, #0]
    c6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    c6c4:	4a06      	ldr	r2, [pc, #24]	; (c6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c6c6:	9b01      	ldr	r3, [sp, #4]
    c6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6cc:	1c5a      	adds	r2, r3, #1
    c6ce:	4904      	ldr	r1, [pc, #16]	; (c6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c6d0:	9b01      	ldr	r3, [sp, #4]
    c6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6d6:	bf00      	nop
    c6d8:	b003      	add	sp, #12
    c6da:	f85d fb04 	ldr.w	pc, [sp], #4
    c6de:	bf00      	nop
    c6e0:	1fff8f1c 	.word	0x1fff8f1c
    c6e4:	1fff8f18 	.word	0x1fff8f18

0000c6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c6e8:	b500      	push	{lr}
    c6ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6ec:	f7f4 febe 	bl	146c <Sys_GetCoreID>
    c6f0:	4603      	mov	r3, r0
    c6f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    c6f4:	4a0d      	ldr	r2, [pc, #52]	; (c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c6f6:	9b01      	ldr	r3, [sp, #4]
    c6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6fc:	1e5a      	subs	r2, r3, #1
    c6fe:	490b      	ldr	r1, [pc, #44]	; (c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c700:	9b01      	ldr	r3, [sp, #4]
    c702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    c706:	4a0a      	ldr	r2, [pc, #40]	; (c730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    c708:	9b01      	ldr	r3, [sp, #4]
    c70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c70e:	f003 0301 	and.w	r3, r3, #1
    c712:	2b00      	cmp	r3, #0
    c714:	d106      	bne.n	c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    c716:	4a05      	ldr	r2, [pc, #20]	; (c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c718:	9b01      	ldr	r3, [sp, #4]
    c71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c71e:	2b00      	cmp	r3, #0
    c720:	d100      	bne.n	c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c724:	bf00      	nop
    c726:	b003      	add	sp, #12
    c728:	f85d fb04 	ldr.w	pc, [sp], #4
    c72c:	1fff8f1c 	.word	0x1fff8f1c
    c730:	1fff8f18 	.word	0x1fff8f18

0000c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c734:	b500      	push	{lr}
    c736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c738:	f7f4 fe98 	bl	146c <Sys_GetCoreID>
    c73c:	4603      	mov	r3, r0
    c73e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    c740:	4a10      	ldr	r2, [pc, #64]	; (c784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c742:	9b01      	ldr	r3, [sp, #4]
    c744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c748:	2b00      	cmp	r3, #0
    c74a:	d10d      	bne.n	c768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c74c:	f7f4 f8be 	bl	8cc <Adc_schm_read_msr>
    c750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c752:	9b00      	ldr	r3, [sp, #0]
    c754:	f003 0301 	and.w	r3, r3, #1
    c758:	2b00      	cmp	r3, #0
    c75a:	d100      	bne.n	c75e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c75c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    c75e:	490a      	ldr	r1, [pc, #40]	; (c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    c760:	9b01      	ldr	r3, [sp, #4]
    c762:	9a00      	ldr	r2, [sp, #0]
    c764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    c768:	4a06      	ldr	r2, [pc, #24]	; (c784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c76a:	9b01      	ldr	r3, [sp, #4]
    c76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c770:	1c5a      	adds	r2, r3, #1
    c772:	4904      	ldr	r1, [pc, #16]	; (c784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c774:	9b01      	ldr	r3, [sp, #4]
    c776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c77a:	bf00      	nop
    c77c:	b003      	add	sp, #12
    c77e:	f85d fb04 	ldr.w	pc, [sp], #4
    c782:	bf00      	nop
    c784:	1fff8f24 	.word	0x1fff8f24
    c788:	1fff8f20 	.word	0x1fff8f20

0000c78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c78c:	b500      	push	{lr}
    c78e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c790:	f7f4 fe6c 	bl	146c <Sys_GetCoreID>
    c794:	4603      	mov	r3, r0
    c796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    c798:	4a0d      	ldr	r2, [pc, #52]	; (c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7a0:	1e5a      	subs	r2, r3, #1
    c7a2:	490b      	ldr	r1, [pc, #44]	; (c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c7a4:	9b01      	ldr	r3, [sp, #4]
    c7a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    c7aa:	4a0a      	ldr	r2, [pc, #40]	; (c7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    c7ac:	9b01      	ldr	r3, [sp, #4]
    c7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7b2:	f003 0301 	and.w	r3, r3, #1
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d106      	bne.n	c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    c7ba:	4a05      	ldr	r2, [pc, #20]	; (c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c7bc:	9b01      	ldr	r3, [sp, #4]
    c7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	d100      	bne.n	c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7c8:	bf00      	nop
    c7ca:	b003      	add	sp, #12
    c7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d0:	1fff8f24 	.word	0x1fff8f24
    c7d4:	1fff8f20 	.word	0x1fff8f20

0000c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c7d8:	b500      	push	{lr}
    c7da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7dc:	f7f4 fe46 	bl	146c <Sys_GetCoreID>
    c7e0:	4603      	mov	r3, r0
    c7e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    c7e4:	4a10      	ldr	r2, [pc, #64]	; (c828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c7e6:	9b01      	ldr	r3, [sp, #4]
    c7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d10d      	bne.n	c80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7f0:	f7f4 f86c 	bl	8cc <Adc_schm_read_msr>
    c7f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7f6:	9b00      	ldr	r3, [sp, #0]
    c7f8:	f003 0301 	and.w	r3, r3, #1
    c7fc:	2b00      	cmp	r3, #0
    c7fe:	d100      	bne.n	c802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    c802:	490a      	ldr	r1, [pc, #40]	; (c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    c804:	9b01      	ldr	r3, [sp, #4]
    c806:	9a00      	ldr	r2, [sp, #0]
    c808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    c80c:	4a06      	ldr	r2, [pc, #24]	; (c828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c80e:	9b01      	ldr	r3, [sp, #4]
    c810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c814:	1c5a      	adds	r2, r3, #1
    c816:	4904      	ldr	r1, [pc, #16]	; (c828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c818:	9b01      	ldr	r3, [sp, #4]
    c81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c81e:	bf00      	nop
    c820:	b003      	add	sp, #12
    c822:	f85d fb04 	ldr.w	pc, [sp], #4
    c826:	bf00      	nop
    c828:	1fff8f2c 	.word	0x1fff8f2c
    c82c:	1fff8f28 	.word	0x1fff8f28

0000c830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c830:	b500      	push	{lr}
    c832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c834:	f7f4 fe1a 	bl	146c <Sys_GetCoreID>
    c838:	4603      	mov	r3, r0
    c83a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    c83c:	4a0d      	ldr	r2, [pc, #52]	; (c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c83e:	9b01      	ldr	r3, [sp, #4]
    c840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c844:	1e5a      	subs	r2, r3, #1
    c846:	490b      	ldr	r1, [pc, #44]	; (c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c848:	9b01      	ldr	r3, [sp, #4]
    c84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    c84e:	4a0a      	ldr	r2, [pc, #40]	; (c878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    c850:	9b01      	ldr	r3, [sp, #4]
    c852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c856:	f003 0301 	and.w	r3, r3, #1
    c85a:	2b00      	cmp	r3, #0
    c85c:	d106      	bne.n	c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    c85e:	4a05      	ldr	r2, [pc, #20]	; (c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c860:	9b01      	ldr	r3, [sp, #4]
    c862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c866:	2b00      	cmp	r3, #0
    c868:	d100      	bne.n	c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c86a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c86c:	bf00      	nop
    c86e:	b003      	add	sp, #12
    c870:	f85d fb04 	ldr.w	pc, [sp], #4
    c874:	1fff8f2c 	.word	0x1fff8f2c
    c878:	1fff8f28 	.word	0x1fff8f28

0000c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c87c:	b500      	push	{lr}
    c87e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c880:	f7f4 fdf4 	bl	146c <Sys_GetCoreID>
    c884:	4603      	mov	r3, r0
    c886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    c888:	4a10      	ldr	r2, [pc, #64]	; (c8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c88a:	9b01      	ldr	r3, [sp, #4]
    c88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c890:	2b00      	cmp	r3, #0
    c892:	d10d      	bne.n	c8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c894:	f7f4 f81a 	bl	8cc <Adc_schm_read_msr>
    c898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c89a:	9b00      	ldr	r3, [sp, #0]
    c89c:	f003 0301 	and.w	r3, r3, #1
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d100      	bne.n	c8a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    c8a6:	490a      	ldr	r1, [pc, #40]	; (c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    c8a8:	9b01      	ldr	r3, [sp, #4]
    c8aa:	9a00      	ldr	r2, [sp, #0]
    c8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    c8b0:	4a06      	ldr	r2, [pc, #24]	; (c8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c8b2:	9b01      	ldr	r3, [sp, #4]
    c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8b8:	1c5a      	adds	r2, r3, #1
    c8ba:	4904      	ldr	r1, [pc, #16]	; (c8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c8bc:	9b01      	ldr	r3, [sp, #4]
    c8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8c2:	bf00      	nop
    c8c4:	b003      	add	sp, #12
    c8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ca:	bf00      	nop
    c8cc:	1fff8f34 	.word	0x1fff8f34
    c8d0:	1fff8f30 	.word	0x1fff8f30

0000c8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c8d4:	b500      	push	{lr}
    c8d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8d8:	f7f4 fdc8 	bl	146c <Sys_GetCoreID>
    c8dc:	4603      	mov	r3, r0
    c8de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    c8e0:	4a0d      	ldr	r2, [pc, #52]	; (c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c8e2:	9b01      	ldr	r3, [sp, #4]
    c8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e8:	1e5a      	subs	r2, r3, #1
    c8ea:	490b      	ldr	r1, [pc, #44]	; (c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c8ec:	9b01      	ldr	r3, [sp, #4]
    c8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    c8f2:	4a0a      	ldr	r2, [pc, #40]	; (c91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    c8f4:	9b01      	ldr	r3, [sp, #4]
    c8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8fa:	f003 0301 	and.w	r3, r3, #1
    c8fe:	2b00      	cmp	r3, #0
    c900:	d106      	bne.n	c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    c902:	4a05      	ldr	r2, [pc, #20]	; (c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c904:	9b01      	ldr	r3, [sp, #4]
    c906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c90a:	2b00      	cmp	r3, #0
    c90c:	d100      	bne.n	c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c90e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c910:	bf00      	nop
    c912:	b003      	add	sp, #12
    c914:	f85d fb04 	ldr.w	pc, [sp], #4
    c918:	1fff8f34 	.word	0x1fff8f34
    c91c:	1fff8f30 	.word	0x1fff8f30

0000c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c920:	b500      	push	{lr}
    c922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c924:	f7f4 fda2 	bl	146c <Sys_GetCoreID>
    c928:	4603      	mov	r3, r0
    c92a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    c92c:	4a10      	ldr	r2, [pc, #64]	; (c970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c92e:	9b01      	ldr	r3, [sp, #4]
    c930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c934:	2b00      	cmp	r3, #0
    c936:	d10d      	bne.n	c954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c938:	f7f3 ffc8 	bl	8cc <Adc_schm_read_msr>
    c93c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c93e:	9b00      	ldr	r3, [sp, #0]
    c940:	f003 0301 	and.w	r3, r3, #1
    c944:	2b00      	cmp	r3, #0
    c946:	d100      	bne.n	c94a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    c94a:	490a      	ldr	r1, [pc, #40]	; (c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    c94c:	9b01      	ldr	r3, [sp, #4]
    c94e:	9a00      	ldr	r2, [sp, #0]
    c950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    c954:	4a06      	ldr	r2, [pc, #24]	; (c970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c956:	9b01      	ldr	r3, [sp, #4]
    c958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c95c:	1c5a      	adds	r2, r3, #1
    c95e:	4904      	ldr	r1, [pc, #16]	; (c970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c960:	9b01      	ldr	r3, [sp, #4]
    c962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c966:	bf00      	nop
    c968:	b003      	add	sp, #12
    c96a:	f85d fb04 	ldr.w	pc, [sp], #4
    c96e:	bf00      	nop
    c970:	1fff8f3c 	.word	0x1fff8f3c
    c974:	1fff8f38 	.word	0x1fff8f38

0000c978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c978:	b500      	push	{lr}
    c97a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c97c:	f7f4 fd76 	bl	146c <Sys_GetCoreID>
    c980:	4603      	mov	r3, r0
    c982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    c984:	4a0d      	ldr	r2, [pc, #52]	; (c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c986:	9b01      	ldr	r3, [sp, #4]
    c988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c98c:	1e5a      	subs	r2, r3, #1
    c98e:	490b      	ldr	r1, [pc, #44]	; (c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c990:	9b01      	ldr	r3, [sp, #4]
    c992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    c996:	4a0a      	ldr	r2, [pc, #40]	; (c9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    c998:	9b01      	ldr	r3, [sp, #4]
    c99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c99e:	f003 0301 	and.w	r3, r3, #1
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d106      	bne.n	c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    c9a6:	4a05      	ldr	r2, [pc, #20]	; (c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c9a8:	9b01      	ldr	r3, [sp, #4]
    c9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d100      	bne.n	c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9b4:	bf00      	nop
    c9b6:	b003      	add	sp, #12
    c9b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c9bc:	1fff8f3c 	.word	0x1fff8f3c
    c9c0:	1fff8f38 	.word	0x1fff8f38

0000c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c9c4:	b500      	push	{lr}
    c9c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9c8:	f7f4 fd50 	bl	146c <Sys_GetCoreID>
    c9cc:	4603      	mov	r3, r0
    c9ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    c9d0:	4a10      	ldr	r2, [pc, #64]	; (ca14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c9d2:	9b01      	ldr	r3, [sp, #4]
    c9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d10d      	bne.n	c9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9dc:	f7f3 ff76 	bl	8cc <Adc_schm_read_msr>
    c9e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9e2:	9b00      	ldr	r3, [sp, #0]
    c9e4:	f003 0301 	and.w	r3, r3, #1
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d100      	bne.n	c9ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    c9ee:	490a      	ldr	r1, [pc, #40]	; (ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    c9f0:	9b01      	ldr	r3, [sp, #4]
    c9f2:	9a00      	ldr	r2, [sp, #0]
    c9f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    c9f8:	4a06      	ldr	r2, [pc, #24]	; (ca14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c9fa:	9b01      	ldr	r3, [sp, #4]
    c9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca00:	1c5a      	adds	r2, r3, #1
    ca02:	4904      	ldr	r1, [pc, #16]	; (ca14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    ca04:	9b01      	ldr	r3, [sp, #4]
    ca06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca0a:	bf00      	nop
    ca0c:	b003      	add	sp, #12
    ca0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ca12:	bf00      	nop
    ca14:	1fff8f44 	.word	0x1fff8f44
    ca18:	1fff8f40 	.word	0x1fff8f40

0000ca1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    ca1c:	b500      	push	{lr}
    ca1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca20:	f7f4 fd24 	bl	146c <Sys_GetCoreID>
    ca24:	4603      	mov	r3, r0
    ca26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    ca28:	4a0d      	ldr	r2, [pc, #52]	; (ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    ca2a:	9b01      	ldr	r3, [sp, #4]
    ca2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca30:	1e5a      	subs	r2, r3, #1
    ca32:	490b      	ldr	r1, [pc, #44]	; (ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    ca3a:	4a0a      	ldr	r2, [pc, #40]	; (ca64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    ca3c:	9b01      	ldr	r3, [sp, #4]
    ca3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca42:	f003 0301 	and.w	r3, r3, #1
    ca46:	2b00      	cmp	r3, #0
    ca48:	d106      	bne.n	ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    ca4a:	4a05      	ldr	r2, [pc, #20]	; (ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    ca4c:	9b01      	ldr	r3, [sp, #4]
    ca4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca52:	2b00      	cmp	r3, #0
    ca54:	d100      	bne.n	ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca58:	bf00      	nop
    ca5a:	b003      	add	sp, #12
    ca5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca60:	1fff8f44 	.word	0x1fff8f44
    ca64:	1fff8f40 	.word	0x1fff8f40

0000ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    ca68:	b500      	push	{lr}
    ca6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca6c:	f7f4 fcfe 	bl	146c <Sys_GetCoreID>
    ca70:	4603      	mov	r3, r0
    ca72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    ca74:	4a10      	ldr	r2, [pc, #64]	; (cab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ca76:	9b01      	ldr	r3, [sp, #4]
    ca78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d10d      	bne.n	ca9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca80:	f7f3 ff24 	bl	8cc <Adc_schm_read_msr>
    ca84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca86:	9b00      	ldr	r3, [sp, #0]
    ca88:	f003 0301 	and.w	r3, r3, #1
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d100      	bne.n	ca92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    ca92:	490a      	ldr	r1, [pc, #40]	; (cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    ca94:	9b01      	ldr	r3, [sp, #4]
    ca96:	9a00      	ldr	r2, [sp, #0]
    ca98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    ca9c:	4a06      	ldr	r2, [pc, #24]	; (cab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ca9e:	9b01      	ldr	r3, [sp, #4]
    caa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa4:	1c5a      	adds	r2, r3, #1
    caa6:	4904      	ldr	r1, [pc, #16]	; (cab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    caa8:	9b01      	ldr	r3, [sp, #4]
    caaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    caae:	bf00      	nop
    cab0:	b003      	add	sp, #12
    cab2:	f85d fb04 	ldr.w	pc, [sp], #4
    cab6:	bf00      	nop
    cab8:	1fff8f4c 	.word	0x1fff8f4c
    cabc:	1fff8f48 	.word	0x1fff8f48

0000cac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    cac0:	b500      	push	{lr}
    cac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cac4:	f7f4 fcd2 	bl	146c <Sys_GetCoreID>
    cac8:	4603      	mov	r3, r0
    caca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    cacc:	4a0d      	ldr	r2, [pc, #52]	; (cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    cace:	9b01      	ldr	r3, [sp, #4]
    cad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cad4:	1e5a      	subs	r2, r3, #1
    cad6:	490b      	ldr	r1, [pc, #44]	; (cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    cade:	4a0a      	ldr	r2, [pc, #40]	; (cb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    cae0:	9b01      	ldr	r3, [sp, #4]
    cae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae6:	f003 0301 	and.w	r3, r3, #1
    caea:	2b00      	cmp	r3, #0
    caec:	d106      	bne.n	cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    caee:	4a05      	ldr	r2, [pc, #20]	; (cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    caf0:	9b01      	ldr	r3, [sp, #4]
    caf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caf6:	2b00      	cmp	r3, #0
    caf8:	d100      	bne.n	cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cafa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cafc:	bf00      	nop
    cafe:	b003      	add	sp, #12
    cb00:	f85d fb04 	ldr.w	pc, [sp], #4
    cb04:	1fff8f4c 	.word	0x1fff8f4c
    cb08:	1fff8f48 	.word	0x1fff8f48

0000cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    cb0c:	b500      	push	{lr}
    cb0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb10:	f7f4 fcac 	bl	146c <Sys_GetCoreID>
    cb14:	4603      	mov	r3, r0
    cb16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    cb18:	4a10      	ldr	r2, [pc, #64]	; (cb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    cb1a:	9b01      	ldr	r3, [sp, #4]
    cb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d10d      	bne.n	cb40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb24:	f7f3 fed2 	bl	8cc <Adc_schm_read_msr>
    cb28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb2a:	9b00      	ldr	r3, [sp, #0]
    cb2c:	f003 0301 	and.w	r3, r3, #1
    cb30:	2b00      	cmp	r3, #0
    cb32:	d100      	bne.n	cb36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    cb36:	490a      	ldr	r1, [pc, #40]	; (cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    cb38:	9b01      	ldr	r3, [sp, #4]
    cb3a:	9a00      	ldr	r2, [sp, #0]
    cb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    cb40:	4a06      	ldr	r2, [pc, #24]	; (cb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    cb42:	9b01      	ldr	r3, [sp, #4]
    cb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb48:	1c5a      	adds	r2, r3, #1
    cb4a:	4904      	ldr	r1, [pc, #16]	; (cb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    cb4c:	9b01      	ldr	r3, [sp, #4]
    cb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb52:	bf00      	nop
    cb54:	b003      	add	sp, #12
    cb56:	f85d fb04 	ldr.w	pc, [sp], #4
    cb5a:	bf00      	nop
    cb5c:	1fff8f54 	.word	0x1fff8f54
    cb60:	1fff8f50 	.word	0x1fff8f50

0000cb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    cb64:	b500      	push	{lr}
    cb66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb68:	f7f4 fc80 	bl	146c <Sys_GetCoreID>
    cb6c:	4603      	mov	r3, r0
    cb6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    cb70:	4a0d      	ldr	r2, [pc, #52]	; (cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cb72:	9b01      	ldr	r3, [sp, #4]
    cb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb78:	1e5a      	subs	r2, r3, #1
    cb7a:	490b      	ldr	r1, [pc, #44]	; (cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cb7c:	9b01      	ldr	r3, [sp, #4]
    cb7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    cb82:	4a0a      	ldr	r2, [pc, #40]	; (cbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    cb84:	9b01      	ldr	r3, [sp, #4]
    cb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb8a:	f003 0301 	and.w	r3, r3, #1
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d106      	bne.n	cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    cb92:	4a05      	ldr	r2, [pc, #20]	; (cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cb94:	9b01      	ldr	r3, [sp, #4]
    cb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d100      	bne.n	cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cba0:	bf00      	nop
    cba2:	b003      	add	sp, #12
    cba4:	f85d fb04 	ldr.w	pc, [sp], #4
    cba8:	1fff8f54 	.word	0x1fff8f54
    cbac:	1fff8f50 	.word	0x1fff8f50

0000cbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cbb0:	b500      	push	{lr}
    cbb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbb4:	f7f4 fc5a 	bl	146c <Sys_GetCoreID>
    cbb8:	4603      	mov	r3, r0
    cbba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    cbbc:	4a10      	ldr	r2, [pc, #64]	; (cc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cbbe:	9b01      	ldr	r3, [sp, #4]
    cbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	d10d      	bne.n	cbe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbc8:	f7f3 fe80 	bl	8cc <Adc_schm_read_msr>
    cbcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbce:	9b00      	ldr	r3, [sp, #0]
    cbd0:	f003 0301 	and.w	r3, r3, #1
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d100      	bne.n	cbda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    cbda:	490a      	ldr	r1, [pc, #40]	; (cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    cbdc:	9b01      	ldr	r3, [sp, #4]
    cbde:	9a00      	ldr	r2, [sp, #0]
    cbe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    cbe4:	4a06      	ldr	r2, [pc, #24]	; (cc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cbe6:	9b01      	ldr	r3, [sp, #4]
    cbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbec:	1c5a      	adds	r2, r3, #1
    cbee:	4904      	ldr	r1, [pc, #16]	; (cc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cbf0:	9b01      	ldr	r3, [sp, #4]
    cbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbf6:	bf00      	nop
    cbf8:	b003      	add	sp, #12
    cbfa:	f85d fb04 	ldr.w	pc, [sp], #4
    cbfe:	bf00      	nop
    cc00:	1fff8f5c 	.word	0x1fff8f5c
    cc04:	1fff8f58 	.word	0x1fff8f58

0000cc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cc08:	b500      	push	{lr}
    cc0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc0c:	f7f4 fc2e 	bl	146c <Sys_GetCoreID>
    cc10:	4603      	mov	r3, r0
    cc12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    cc14:	4a0d      	ldr	r2, [pc, #52]	; (cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cc16:	9b01      	ldr	r3, [sp, #4]
    cc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc1c:	1e5a      	subs	r2, r3, #1
    cc1e:	490b      	ldr	r1, [pc, #44]	; (cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cc20:	9b01      	ldr	r3, [sp, #4]
    cc22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    cc26:	4a0a      	ldr	r2, [pc, #40]	; (cc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    cc28:	9b01      	ldr	r3, [sp, #4]
    cc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc2e:	f003 0301 	and.w	r3, r3, #1
    cc32:	2b00      	cmp	r3, #0
    cc34:	d106      	bne.n	cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    cc36:	4a05      	ldr	r2, [pc, #20]	; (cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cc38:	9b01      	ldr	r3, [sp, #4]
    cc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d100      	bne.n	cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc44:	bf00      	nop
    cc46:	b003      	add	sp, #12
    cc48:	f85d fb04 	ldr.w	pc, [sp], #4
    cc4c:	1fff8f5c 	.word	0x1fff8f5c
    cc50:	1fff8f58 	.word	0x1fff8f58

0000cc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    cc54:	b500      	push	{lr}
    cc56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc58:	f7f4 fc08 	bl	146c <Sys_GetCoreID>
    cc5c:	4603      	mov	r3, r0
    cc5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    cc60:	4a10      	ldr	r2, [pc, #64]	; (cca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cc62:	9b01      	ldr	r3, [sp, #4]
    cc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc68:	2b00      	cmp	r3, #0
    cc6a:	d10d      	bne.n	cc88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc6c:	f7f3 fe2e 	bl	8cc <Adc_schm_read_msr>
    cc70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc72:	9b00      	ldr	r3, [sp, #0]
    cc74:	f003 0301 	and.w	r3, r3, #1
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d100      	bne.n	cc7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    cc7e:	490a      	ldr	r1, [pc, #40]	; (cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    cc80:	9b01      	ldr	r3, [sp, #4]
    cc82:	9a00      	ldr	r2, [sp, #0]
    cc84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    cc88:	4a06      	ldr	r2, [pc, #24]	; (cca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cc8a:	9b01      	ldr	r3, [sp, #4]
    cc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc90:	1c5a      	adds	r2, r3, #1
    cc92:	4904      	ldr	r1, [pc, #16]	; (cca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cc94:	9b01      	ldr	r3, [sp, #4]
    cc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc9a:	bf00      	nop
    cc9c:	b003      	add	sp, #12
    cc9e:	f85d fb04 	ldr.w	pc, [sp], #4
    cca2:	bf00      	nop
    cca4:	1fff8f64 	.word	0x1fff8f64
    cca8:	1fff8f60 	.word	0x1fff8f60

0000ccac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    ccac:	b500      	push	{lr}
    ccae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccb0:	f7f4 fbdc 	bl	146c <Sys_GetCoreID>
    ccb4:	4603      	mov	r3, r0
    ccb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    ccb8:	4a0d      	ldr	r2, [pc, #52]	; (ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ccba:	9b01      	ldr	r3, [sp, #4]
    ccbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccc0:	1e5a      	subs	r2, r3, #1
    ccc2:	490b      	ldr	r1, [pc, #44]	; (ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    ccca:	4a0a      	ldr	r2, [pc, #40]	; (ccf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    cccc:	9b01      	ldr	r3, [sp, #4]
    ccce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd2:	f003 0301 	and.w	r3, r3, #1
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	d106      	bne.n	cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    ccda:	4a05      	ldr	r2, [pc, #20]	; (ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ccdc:	9b01      	ldr	r3, [sp, #4]
    ccde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce2:	2b00      	cmp	r3, #0
    cce4:	d100      	bne.n	cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cce8:	bf00      	nop
    ccea:	b003      	add	sp, #12
    ccec:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf0:	1fff8f64 	.word	0x1fff8f64
    ccf4:	1fff8f60 	.word	0x1fff8f60

0000ccf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    ccf8:	b500      	push	{lr}
    ccfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccfc:	f7f4 fbb6 	bl	146c <Sys_GetCoreID>
    cd00:	4603      	mov	r3, r0
    cd02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    cd04:	4a10      	ldr	r2, [pc, #64]	; (cd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cd06:	9b01      	ldr	r3, [sp, #4]
    cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d10d      	bne.n	cd2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd10:	f7f3 fddc 	bl	8cc <Adc_schm_read_msr>
    cd14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd16:	9b00      	ldr	r3, [sp, #0]
    cd18:	f003 0301 	and.w	r3, r3, #1
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d100      	bne.n	cd22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    cd22:	490a      	ldr	r1, [pc, #40]	; (cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    cd24:	9b01      	ldr	r3, [sp, #4]
    cd26:	9a00      	ldr	r2, [sp, #0]
    cd28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    cd2c:	4a06      	ldr	r2, [pc, #24]	; (cd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cd2e:	9b01      	ldr	r3, [sp, #4]
    cd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd34:	1c5a      	adds	r2, r3, #1
    cd36:	4904      	ldr	r1, [pc, #16]	; (cd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cd38:	9b01      	ldr	r3, [sp, #4]
    cd3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd3e:	bf00      	nop
    cd40:	b003      	add	sp, #12
    cd42:	f85d fb04 	ldr.w	pc, [sp], #4
    cd46:	bf00      	nop
    cd48:	1fff8f6c 	.word	0x1fff8f6c
    cd4c:	1fff8f68 	.word	0x1fff8f68

0000cd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cd50:	b500      	push	{lr}
    cd52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd54:	f7f4 fb8a 	bl	146c <Sys_GetCoreID>
    cd58:	4603      	mov	r3, r0
    cd5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    cd5c:	4a0d      	ldr	r2, [pc, #52]	; (cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cd5e:	9b01      	ldr	r3, [sp, #4]
    cd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd64:	1e5a      	subs	r2, r3, #1
    cd66:	490b      	ldr	r1, [pc, #44]	; (cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    cd6e:	4a0a      	ldr	r2, [pc, #40]	; (cd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    cd70:	9b01      	ldr	r3, [sp, #4]
    cd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd76:	f003 0301 	and.w	r3, r3, #1
    cd7a:	2b00      	cmp	r3, #0
    cd7c:	d106      	bne.n	cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    cd7e:	4a05      	ldr	r2, [pc, #20]	; (cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cd80:	9b01      	ldr	r3, [sp, #4]
    cd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d100      	bne.n	cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd8c:	bf00      	nop
    cd8e:	b003      	add	sp, #12
    cd90:	f85d fb04 	ldr.w	pc, [sp], #4
    cd94:	1fff8f6c 	.word	0x1fff8f6c
    cd98:	1fff8f68 	.word	0x1fff8f68

0000cd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cd9c:	b500      	push	{lr}
    cd9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda0:	f7f4 fb64 	bl	146c <Sys_GetCoreID>
    cda4:	4603      	mov	r3, r0
    cda6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    cda8:	4a10      	ldr	r2, [pc, #64]	; (cdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cdaa:	9b01      	ldr	r3, [sp, #4]
    cdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	d10d      	bne.n	cdd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdb4:	f7f3 fd8a 	bl	8cc <Adc_schm_read_msr>
    cdb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdba:	9b00      	ldr	r3, [sp, #0]
    cdbc:	f003 0301 	and.w	r3, r3, #1
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d100      	bne.n	cdc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    cdc6:	490a      	ldr	r1, [pc, #40]	; (cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    cdc8:	9b01      	ldr	r3, [sp, #4]
    cdca:	9a00      	ldr	r2, [sp, #0]
    cdcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    cdd0:	4a06      	ldr	r2, [pc, #24]	; (cdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cdd2:	9b01      	ldr	r3, [sp, #4]
    cdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd8:	1c5a      	adds	r2, r3, #1
    cdda:	4904      	ldr	r1, [pc, #16]	; (cdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cddc:	9b01      	ldr	r3, [sp, #4]
    cdde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cde2:	bf00      	nop
    cde4:	b003      	add	sp, #12
    cde6:	f85d fb04 	ldr.w	pc, [sp], #4
    cdea:	bf00      	nop
    cdec:	1fff8f74 	.word	0x1fff8f74
    cdf0:	1fff8f70 	.word	0x1fff8f70

0000cdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cdf4:	b500      	push	{lr}
    cdf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdf8:	f7f4 fb38 	bl	146c <Sys_GetCoreID>
    cdfc:	4603      	mov	r3, r0
    cdfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    ce00:	4a0d      	ldr	r2, [pc, #52]	; (ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce08:	1e5a      	subs	r2, r3, #1
    ce0a:	490b      	ldr	r1, [pc, #44]	; (ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    ce0c:	9b01      	ldr	r3, [sp, #4]
    ce0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    ce12:	4a0a      	ldr	r2, [pc, #40]	; (ce3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    ce14:	9b01      	ldr	r3, [sp, #4]
    ce16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce1a:	f003 0301 	and.w	r3, r3, #1
    ce1e:	2b00      	cmp	r3, #0
    ce20:	d106      	bne.n	ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    ce22:	4a05      	ldr	r2, [pc, #20]	; (ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    ce24:	9b01      	ldr	r3, [sp, #4]
    ce26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d100      	bne.n	ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce30:	bf00      	nop
    ce32:	b003      	add	sp, #12
    ce34:	f85d fb04 	ldr.w	pc, [sp], #4
    ce38:	1fff8f74 	.word	0x1fff8f74
    ce3c:	1fff8f70 	.word	0x1fff8f70

0000ce40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    ce40:	b500      	push	{lr}
    ce42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce44:	f7f4 fb12 	bl	146c <Sys_GetCoreID>
    ce48:	4603      	mov	r3, r0
    ce4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    ce4c:	4a10      	ldr	r2, [pc, #64]	; (ce90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    ce4e:	9b01      	ldr	r3, [sp, #4]
    ce50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce54:	2b00      	cmp	r3, #0
    ce56:	d10d      	bne.n	ce74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce58:	f7f3 fd38 	bl	8cc <Adc_schm_read_msr>
    ce5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce5e:	9b00      	ldr	r3, [sp, #0]
    ce60:	f003 0301 	and.w	r3, r3, #1
    ce64:	2b00      	cmp	r3, #0
    ce66:	d100      	bne.n	ce6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    ce6a:	490a      	ldr	r1, [pc, #40]	; (ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    ce6c:	9b01      	ldr	r3, [sp, #4]
    ce6e:	9a00      	ldr	r2, [sp, #0]
    ce70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    ce74:	4a06      	ldr	r2, [pc, #24]	; (ce90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    ce76:	9b01      	ldr	r3, [sp, #4]
    ce78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce7c:	1c5a      	adds	r2, r3, #1
    ce7e:	4904      	ldr	r1, [pc, #16]	; (ce90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    ce80:	9b01      	ldr	r3, [sp, #4]
    ce82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce86:	bf00      	nop
    ce88:	b003      	add	sp, #12
    ce8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce8e:	bf00      	nop
    ce90:	1fff8f7c 	.word	0x1fff8f7c
    ce94:	1fff8f78 	.word	0x1fff8f78

0000ce98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    ce98:	b500      	push	{lr}
    ce9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce9c:	f7f4 fae6 	bl	146c <Sys_GetCoreID>
    cea0:	4603      	mov	r3, r0
    cea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    cea4:	4a0d      	ldr	r2, [pc, #52]	; (cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cea6:	9b01      	ldr	r3, [sp, #4]
    cea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceac:	1e5a      	subs	r2, r3, #1
    ceae:	490b      	ldr	r1, [pc, #44]	; (cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    ceb6:	4a0a      	ldr	r2, [pc, #40]	; (cee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    ceb8:	9b01      	ldr	r3, [sp, #4]
    ceba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cebe:	f003 0301 	and.w	r3, r3, #1
    cec2:	2b00      	cmp	r3, #0
    cec4:	d106      	bne.n	ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    cec6:	4a05      	ldr	r2, [pc, #20]	; (cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cec8:	9b01      	ldr	r3, [sp, #4]
    ceca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cece:	2b00      	cmp	r3, #0
    ced0:	d100      	bne.n	ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ced2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ced4:	bf00      	nop
    ced6:	b003      	add	sp, #12
    ced8:	f85d fb04 	ldr.w	pc, [sp], #4
    cedc:	1fff8f7c 	.word	0x1fff8f7c
    cee0:	1fff8f78 	.word	0x1fff8f78

0000cee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cee4:	b500      	push	{lr}
    cee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cee8:	f7f4 fac0 	bl	146c <Sys_GetCoreID>
    ceec:	4603      	mov	r3, r0
    ceee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    cef0:	4a10      	ldr	r2, [pc, #64]	; (cf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cef2:	9b01      	ldr	r3, [sp, #4]
    cef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef8:	2b00      	cmp	r3, #0
    cefa:	d10d      	bne.n	cf18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cefc:	f7f3 fce6 	bl	8cc <Adc_schm_read_msr>
    cf00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf02:	9b00      	ldr	r3, [sp, #0]
    cf04:	f003 0301 	and.w	r3, r3, #1
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d100      	bne.n	cf0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    cf0e:	490a      	ldr	r1, [pc, #40]	; (cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    cf10:	9b01      	ldr	r3, [sp, #4]
    cf12:	9a00      	ldr	r2, [sp, #0]
    cf14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    cf18:	4a06      	ldr	r2, [pc, #24]	; (cf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cf1a:	9b01      	ldr	r3, [sp, #4]
    cf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf20:	1c5a      	adds	r2, r3, #1
    cf22:	4904      	ldr	r1, [pc, #16]	; (cf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cf24:	9b01      	ldr	r3, [sp, #4]
    cf26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf2a:	bf00      	nop
    cf2c:	b003      	add	sp, #12
    cf2e:	f85d fb04 	ldr.w	pc, [sp], #4
    cf32:	bf00      	nop
    cf34:	1fff8f84 	.word	0x1fff8f84
    cf38:	1fff8f80 	.word	0x1fff8f80

0000cf3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cf3c:	b500      	push	{lr}
    cf3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf40:	f7f4 fa94 	bl	146c <Sys_GetCoreID>
    cf44:	4603      	mov	r3, r0
    cf46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    cf48:	4a0d      	ldr	r2, [pc, #52]	; (cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cf4a:	9b01      	ldr	r3, [sp, #4]
    cf4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf50:	1e5a      	subs	r2, r3, #1
    cf52:	490b      	ldr	r1, [pc, #44]	; (cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cf54:	9b01      	ldr	r3, [sp, #4]
    cf56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    cf5a:	4a0a      	ldr	r2, [pc, #40]	; (cf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    cf5c:	9b01      	ldr	r3, [sp, #4]
    cf5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf62:	f003 0301 	and.w	r3, r3, #1
    cf66:	2b00      	cmp	r3, #0
    cf68:	d106      	bne.n	cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    cf6a:	4a05      	ldr	r2, [pc, #20]	; (cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cf6c:	9b01      	ldr	r3, [sp, #4]
    cf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d100      	bne.n	cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf78:	bf00      	nop
    cf7a:	b003      	add	sp, #12
    cf7c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf80:	1fff8f84 	.word	0x1fff8f84
    cf84:	1fff8f80 	.word	0x1fff8f80

0000cf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cf88:	b500      	push	{lr}
    cf8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf8c:	f7f4 fa6e 	bl	146c <Sys_GetCoreID>
    cf90:	4603      	mov	r3, r0
    cf92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    cf94:	4a10      	ldr	r2, [pc, #64]	; (cfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cf96:	9b01      	ldr	r3, [sp, #4]
    cf98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d10d      	bne.n	cfbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfa0:	f7f3 fc94 	bl	8cc <Adc_schm_read_msr>
    cfa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfa6:	9b00      	ldr	r3, [sp, #0]
    cfa8:	f003 0301 	and.w	r3, r3, #1
    cfac:	2b00      	cmp	r3, #0
    cfae:	d100      	bne.n	cfb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    cfb2:	490a      	ldr	r1, [pc, #40]	; (cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    cfb4:	9b01      	ldr	r3, [sp, #4]
    cfb6:	9a00      	ldr	r2, [sp, #0]
    cfb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    cfbc:	4a06      	ldr	r2, [pc, #24]	; (cfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cfbe:	9b01      	ldr	r3, [sp, #4]
    cfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc4:	1c5a      	adds	r2, r3, #1
    cfc6:	4904      	ldr	r1, [pc, #16]	; (cfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cfc8:	9b01      	ldr	r3, [sp, #4]
    cfca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfce:	bf00      	nop
    cfd0:	b003      	add	sp, #12
    cfd2:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd6:	bf00      	nop
    cfd8:	1fff8f8c 	.word	0x1fff8f8c
    cfdc:	1fff8f88 	.word	0x1fff8f88

0000cfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe4:	f7f4 fa42 	bl	146c <Sys_GetCoreID>
    cfe8:	4603      	mov	r3, r0
    cfea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    cfec:	4a0d      	ldr	r2, [pc, #52]	; (d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cfee:	9b01      	ldr	r3, [sp, #4]
    cff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff4:	1e5a      	subs	r2, r3, #1
    cff6:	490b      	ldr	r1, [pc, #44]	; (d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cff8:	9b01      	ldr	r3, [sp, #4]
    cffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    cffe:	4a0a      	ldr	r2, [pc, #40]	; (d028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    d000:	9b01      	ldr	r3, [sp, #4]
    d002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d006:	f003 0301 	and.w	r3, r3, #1
    d00a:	2b00      	cmp	r3, #0
    d00c:	d106      	bne.n	d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    d00e:	4a05      	ldr	r2, [pc, #20]	; (d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d010:	9b01      	ldr	r3, [sp, #4]
    d012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d016:	2b00      	cmp	r3, #0
    d018:	d100      	bne.n	d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d01c:	bf00      	nop
    d01e:	b003      	add	sp, #12
    d020:	f85d fb04 	ldr.w	pc, [sp], #4
    d024:	1fff8f8c 	.word	0x1fff8f8c
    d028:	1fff8f88 	.word	0x1fff8f88

0000d02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    d02c:	b500      	push	{lr}
    d02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d030:	f7f4 fa1c 	bl	146c <Sys_GetCoreID>
    d034:	4603      	mov	r3, r0
    d036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    d038:	4a10      	ldr	r2, [pc, #64]	; (d07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d03a:	9b01      	ldr	r3, [sp, #4]
    d03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d040:	2b00      	cmp	r3, #0
    d042:	d10d      	bne.n	d060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d044:	f7f3 fc42 	bl	8cc <Adc_schm_read_msr>
    d048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d04a:	9b00      	ldr	r3, [sp, #0]
    d04c:	f003 0301 	and.w	r3, r3, #1
    d050:	2b00      	cmp	r3, #0
    d052:	d100      	bne.n	d056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    d056:	490a      	ldr	r1, [pc, #40]	; (d080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    d058:	9b01      	ldr	r3, [sp, #4]
    d05a:	9a00      	ldr	r2, [sp, #0]
    d05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    d060:	4a06      	ldr	r2, [pc, #24]	; (d07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d062:	9b01      	ldr	r3, [sp, #4]
    d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d068:	1c5a      	adds	r2, r3, #1
    d06a:	4904      	ldr	r1, [pc, #16]	; (d07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d06c:	9b01      	ldr	r3, [sp, #4]
    d06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d072:	bf00      	nop
    d074:	b003      	add	sp, #12
    d076:	f85d fb04 	ldr.w	pc, [sp], #4
    d07a:	bf00      	nop
    d07c:	1fff8f94 	.word	0x1fff8f94
    d080:	1fff8f90 	.word	0x1fff8f90

0000d084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    d084:	b500      	push	{lr}
    d086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d088:	f7f4 f9f0 	bl	146c <Sys_GetCoreID>
    d08c:	4603      	mov	r3, r0
    d08e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    d090:	4a0d      	ldr	r2, [pc, #52]	; (d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d092:	9b01      	ldr	r3, [sp, #4]
    d094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d098:	1e5a      	subs	r2, r3, #1
    d09a:	490b      	ldr	r1, [pc, #44]	; (d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    d0a2:	4a0a      	ldr	r2, [pc, #40]	; (d0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    d0a4:	9b01      	ldr	r3, [sp, #4]
    d0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0aa:	f003 0301 	and.w	r3, r3, #1
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d106      	bne.n	d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    d0b2:	4a05      	ldr	r2, [pc, #20]	; (d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d0b4:	9b01      	ldr	r3, [sp, #4]
    d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d100      	bne.n	d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0c0:	bf00      	nop
    d0c2:	b003      	add	sp, #12
    d0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c8:	1fff8f94 	.word	0x1fff8f94
    d0cc:	1fff8f90 	.word	0x1fff8f90

0000d0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d0d0:	b500      	push	{lr}
    d0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0d4:	f7f4 f9ca 	bl	146c <Sys_GetCoreID>
    d0d8:	4603      	mov	r3, r0
    d0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    d0dc:	4a10      	ldr	r2, [pc, #64]	; (d120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d0de:	9b01      	ldr	r3, [sp, #4]
    d0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d10d      	bne.n	d104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0e8:	f7f3 fbf0 	bl	8cc <Adc_schm_read_msr>
    d0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0ee:	9b00      	ldr	r3, [sp, #0]
    d0f0:	f003 0301 	and.w	r3, r3, #1
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d100      	bne.n	d0fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    d0fa:	490a      	ldr	r1, [pc, #40]	; (d124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    d0fc:	9b01      	ldr	r3, [sp, #4]
    d0fe:	9a00      	ldr	r2, [sp, #0]
    d100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    d104:	4a06      	ldr	r2, [pc, #24]	; (d120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d106:	9b01      	ldr	r3, [sp, #4]
    d108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d10c:	1c5a      	adds	r2, r3, #1
    d10e:	4904      	ldr	r1, [pc, #16]	; (d120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d110:	9b01      	ldr	r3, [sp, #4]
    d112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d116:	bf00      	nop
    d118:	b003      	add	sp, #12
    d11a:	f85d fb04 	ldr.w	pc, [sp], #4
    d11e:	bf00      	nop
    d120:	1fff8f9c 	.word	0x1fff8f9c
    d124:	1fff8f98 	.word	0x1fff8f98

0000d128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d128:	b500      	push	{lr}
    d12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d12c:	f7f4 f99e 	bl	146c <Sys_GetCoreID>
    d130:	4603      	mov	r3, r0
    d132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    d134:	4a0d      	ldr	r2, [pc, #52]	; (d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d136:	9b01      	ldr	r3, [sp, #4]
    d138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d13c:	1e5a      	subs	r2, r3, #1
    d13e:	490b      	ldr	r1, [pc, #44]	; (d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d140:	9b01      	ldr	r3, [sp, #4]
    d142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    d146:	4a0a      	ldr	r2, [pc, #40]	; (d170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    d148:	9b01      	ldr	r3, [sp, #4]
    d14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d14e:	f003 0301 	and.w	r3, r3, #1
    d152:	2b00      	cmp	r3, #0
    d154:	d106      	bne.n	d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    d156:	4a05      	ldr	r2, [pc, #20]	; (d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d158:	9b01      	ldr	r3, [sp, #4]
    d15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d15e:	2b00      	cmp	r3, #0
    d160:	d100      	bne.n	d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d164:	bf00      	nop
    d166:	b003      	add	sp, #12
    d168:	f85d fb04 	ldr.w	pc, [sp], #4
    d16c:	1fff8f9c 	.word	0x1fff8f9c
    d170:	1fff8f98 	.word	0x1fff8f98

0000d174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d174:	b500      	push	{lr}
    d176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d178:	f7f4 f978 	bl	146c <Sys_GetCoreID>
    d17c:	4603      	mov	r3, r0
    d17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    d180:	4a10      	ldr	r2, [pc, #64]	; (d1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d182:	9b01      	ldr	r3, [sp, #4]
    d184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d188:	2b00      	cmp	r3, #0
    d18a:	d10d      	bne.n	d1a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d18c:	f7f3 fb9e 	bl	8cc <Adc_schm_read_msr>
    d190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d192:	9b00      	ldr	r3, [sp, #0]
    d194:	f003 0301 	and.w	r3, r3, #1
    d198:	2b00      	cmp	r3, #0
    d19a:	d100      	bne.n	d19e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    d19e:	490a      	ldr	r1, [pc, #40]	; (d1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    d1a0:	9b01      	ldr	r3, [sp, #4]
    d1a2:	9a00      	ldr	r2, [sp, #0]
    d1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    d1a8:	4a06      	ldr	r2, [pc, #24]	; (d1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d1aa:	9b01      	ldr	r3, [sp, #4]
    d1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b0:	1c5a      	adds	r2, r3, #1
    d1b2:	4904      	ldr	r1, [pc, #16]	; (d1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d1b4:	9b01      	ldr	r3, [sp, #4]
    d1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1ba:	bf00      	nop
    d1bc:	b003      	add	sp, #12
    d1be:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c2:	bf00      	nop
    d1c4:	1fff8fa4 	.word	0x1fff8fa4
    d1c8:	1fff8fa0 	.word	0x1fff8fa0

0000d1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d1cc:	b500      	push	{lr}
    d1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1d0:	f7f4 f94c 	bl	146c <Sys_GetCoreID>
    d1d4:	4603      	mov	r3, r0
    d1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    d1d8:	4a0d      	ldr	r2, [pc, #52]	; (d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d1da:	9b01      	ldr	r3, [sp, #4]
    d1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e0:	1e5a      	subs	r2, r3, #1
    d1e2:	490b      	ldr	r1, [pc, #44]	; (d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    d1ea:	4a0a      	ldr	r2, [pc, #40]	; (d214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    d1ec:	9b01      	ldr	r3, [sp, #4]
    d1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f2:	f003 0301 	and.w	r3, r3, #1
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d106      	bne.n	d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    d1fa:	4a05      	ldr	r2, [pc, #20]	; (d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d1fc:	9b01      	ldr	r3, [sp, #4]
    d1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d202:	2b00      	cmp	r3, #0
    d204:	d100      	bne.n	d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d208:	bf00      	nop
    d20a:	b003      	add	sp, #12
    d20c:	f85d fb04 	ldr.w	pc, [sp], #4
    d210:	1fff8fa4 	.word	0x1fff8fa4
    d214:	1fff8fa0 	.word	0x1fff8fa0

0000d218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d218:	b500      	push	{lr}
    d21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d21c:	f7f4 f926 	bl	146c <Sys_GetCoreID>
    d220:	4603      	mov	r3, r0
    d222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    d224:	4a10      	ldr	r2, [pc, #64]	; (d268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d226:	9b01      	ldr	r3, [sp, #4]
    d228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d22c:	2b00      	cmp	r3, #0
    d22e:	d10d      	bne.n	d24c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d230:	f7f3 fb4c 	bl	8cc <Adc_schm_read_msr>
    d234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d236:	9b00      	ldr	r3, [sp, #0]
    d238:	f003 0301 	and.w	r3, r3, #1
    d23c:	2b00      	cmp	r3, #0
    d23e:	d100      	bne.n	d242 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    d242:	490a      	ldr	r1, [pc, #40]	; (d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    d244:	9b01      	ldr	r3, [sp, #4]
    d246:	9a00      	ldr	r2, [sp, #0]
    d248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    d24c:	4a06      	ldr	r2, [pc, #24]	; (d268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d24e:	9b01      	ldr	r3, [sp, #4]
    d250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d254:	1c5a      	adds	r2, r3, #1
    d256:	4904      	ldr	r1, [pc, #16]	; (d268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d258:	9b01      	ldr	r3, [sp, #4]
    d25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d25e:	bf00      	nop
    d260:	b003      	add	sp, #12
    d262:	f85d fb04 	ldr.w	pc, [sp], #4
    d266:	bf00      	nop
    d268:	1fff8fac 	.word	0x1fff8fac
    d26c:	1fff8fa8 	.word	0x1fff8fa8

0000d270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d270:	b500      	push	{lr}
    d272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d274:	f7f4 f8fa 	bl	146c <Sys_GetCoreID>
    d278:	4603      	mov	r3, r0
    d27a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    d27c:	4a0d      	ldr	r2, [pc, #52]	; (d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d27e:	9b01      	ldr	r3, [sp, #4]
    d280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d284:	1e5a      	subs	r2, r3, #1
    d286:	490b      	ldr	r1, [pc, #44]	; (d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d288:	9b01      	ldr	r3, [sp, #4]
    d28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    d28e:	4a0a      	ldr	r2, [pc, #40]	; (d2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d290:	9b01      	ldr	r3, [sp, #4]
    d292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d296:	f003 0301 	and.w	r3, r3, #1
    d29a:	2b00      	cmp	r3, #0
    d29c:	d106      	bne.n	d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d29e:	4a05      	ldr	r2, [pc, #20]	; (d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d2a0:	9b01      	ldr	r3, [sp, #4]
    d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d100      	bne.n	d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2ac:	bf00      	nop
    d2ae:	b003      	add	sp, #12
    d2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    d2b4:	1fff8fac 	.word	0x1fff8fac
    d2b8:	1fff8fa8 	.word	0x1fff8fa8

0000d2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d2bc:	b500      	push	{lr}
    d2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c0:	f7f4 f8d4 	bl	146c <Sys_GetCoreID>
    d2c4:	4603      	mov	r3, r0
    d2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d2c8:	4a10      	ldr	r2, [pc, #64]	; (d30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d2ca:	9b01      	ldr	r3, [sp, #4]
    d2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d10d      	bne.n	d2f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2d4:	f7f3 fafa 	bl	8cc <Adc_schm_read_msr>
    d2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2da:	9b00      	ldr	r3, [sp, #0]
    d2dc:	f003 0301 	and.w	r3, r3, #1
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d100      	bne.n	d2e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d2e6:	490a      	ldr	r1, [pc, #40]	; (d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d2e8:	9b01      	ldr	r3, [sp, #4]
    d2ea:	9a00      	ldr	r2, [sp, #0]
    d2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d2f0:	4a06      	ldr	r2, [pc, #24]	; (d30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d2f2:	9b01      	ldr	r3, [sp, #4]
    d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f8:	1c5a      	adds	r2, r3, #1
    d2fa:	4904      	ldr	r1, [pc, #16]	; (d30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d2fc:	9b01      	ldr	r3, [sp, #4]
    d2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d302:	bf00      	nop
    d304:	b003      	add	sp, #12
    d306:	f85d fb04 	ldr.w	pc, [sp], #4
    d30a:	bf00      	nop
    d30c:	1fff8fb4 	.word	0x1fff8fb4
    d310:	1fff8fb0 	.word	0x1fff8fb0

0000d314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d314:	b500      	push	{lr}
    d316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d318:	f7f4 f8a8 	bl	146c <Sys_GetCoreID>
    d31c:	4603      	mov	r3, r0
    d31e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d320:	4a0d      	ldr	r2, [pc, #52]	; (d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d322:	9b01      	ldr	r3, [sp, #4]
    d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d328:	1e5a      	subs	r2, r3, #1
    d32a:	490b      	ldr	r1, [pc, #44]	; (d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d32c:	9b01      	ldr	r3, [sp, #4]
    d32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d332:	4a0a      	ldr	r2, [pc, #40]	; (d35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d334:	9b01      	ldr	r3, [sp, #4]
    d336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33a:	f003 0301 	and.w	r3, r3, #1
    d33e:	2b00      	cmp	r3, #0
    d340:	d106      	bne.n	d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d342:	4a05      	ldr	r2, [pc, #20]	; (d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d344:	9b01      	ldr	r3, [sp, #4]
    d346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34a:	2b00      	cmp	r3, #0
    d34c:	d100      	bne.n	d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d350:	bf00      	nop
    d352:	b003      	add	sp, #12
    d354:	f85d fb04 	ldr.w	pc, [sp], #4
    d358:	1fff8fb4 	.word	0x1fff8fb4
    d35c:	1fff8fb0 	.word	0x1fff8fb0

0000d360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d360:	b500      	push	{lr}
    d362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d364:	f7f4 f882 	bl	146c <Sys_GetCoreID>
    d368:	4603      	mov	r3, r0
    d36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d36c:	4a10      	ldr	r2, [pc, #64]	; (d3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d36e:	9b01      	ldr	r3, [sp, #4]
    d370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d374:	2b00      	cmp	r3, #0
    d376:	d10d      	bne.n	d394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d378:	f7f3 faa8 	bl	8cc <Adc_schm_read_msr>
    d37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d37e:	9b00      	ldr	r3, [sp, #0]
    d380:	f003 0301 	and.w	r3, r3, #1
    d384:	2b00      	cmp	r3, #0
    d386:	d100      	bne.n	d38a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d38a:	490a      	ldr	r1, [pc, #40]	; (d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d38c:	9b01      	ldr	r3, [sp, #4]
    d38e:	9a00      	ldr	r2, [sp, #0]
    d390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d394:	4a06      	ldr	r2, [pc, #24]	; (d3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d396:	9b01      	ldr	r3, [sp, #4]
    d398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d39c:	1c5a      	adds	r2, r3, #1
    d39e:	4904      	ldr	r1, [pc, #16]	; (d3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d3a0:	9b01      	ldr	r3, [sp, #4]
    d3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3a6:	bf00      	nop
    d3a8:	b003      	add	sp, #12
    d3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ae:	bf00      	nop
    d3b0:	1fff8fbc 	.word	0x1fff8fbc
    d3b4:	1fff8fb8 	.word	0x1fff8fb8

0000d3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d3b8:	b500      	push	{lr}
    d3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3bc:	f7f4 f856 	bl	146c <Sys_GetCoreID>
    d3c0:	4603      	mov	r3, r0
    d3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d3c4:	4a0d      	ldr	r2, [pc, #52]	; (d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d3c6:	9b01      	ldr	r3, [sp, #4]
    d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3cc:	1e5a      	subs	r2, r3, #1
    d3ce:	490b      	ldr	r1, [pc, #44]	; (d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d3d0:	9b01      	ldr	r3, [sp, #4]
    d3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d3d6:	4a0a      	ldr	r2, [pc, #40]	; (d400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d3d8:	9b01      	ldr	r3, [sp, #4]
    d3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3de:	f003 0301 	and.w	r3, r3, #1
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d106      	bne.n	d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d3e6:	4a05      	ldr	r2, [pc, #20]	; (d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d3e8:	9b01      	ldr	r3, [sp, #4]
    d3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	d100      	bne.n	d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3f4:	bf00      	nop
    d3f6:	b003      	add	sp, #12
    d3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    d3fc:	1fff8fbc 	.word	0x1fff8fbc
    d400:	1fff8fb8 	.word	0x1fff8fb8

0000d404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d404:	b500      	push	{lr}
    d406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d408:	f7f4 f830 	bl	146c <Sys_GetCoreID>
    d40c:	4603      	mov	r3, r0
    d40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d410:	4a10      	ldr	r2, [pc, #64]	; (d454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d412:	9b01      	ldr	r3, [sp, #4]
    d414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d418:	2b00      	cmp	r3, #0
    d41a:	d10d      	bne.n	d438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d41c:	f7f3 fa56 	bl	8cc <Adc_schm_read_msr>
    d420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d422:	9b00      	ldr	r3, [sp, #0]
    d424:	f003 0301 	and.w	r3, r3, #1
    d428:	2b00      	cmp	r3, #0
    d42a:	d100      	bne.n	d42e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d42e:	490a      	ldr	r1, [pc, #40]	; (d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d430:	9b01      	ldr	r3, [sp, #4]
    d432:	9a00      	ldr	r2, [sp, #0]
    d434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d438:	4a06      	ldr	r2, [pc, #24]	; (d454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d43a:	9b01      	ldr	r3, [sp, #4]
    d43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d440:	1c5a      	adds	r2, r3, #1
    d442:	4904      	ldr	r1, [pc, #16]	; (d454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d444:	9b01      	ldr	r3, [sp, #4]
    d446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d44a:	bf00      	nop
    d44c:	b003      	add	sp, #12
    d44e:	f85d fb04 	ldr.w	pc, [sp], #4
    d452:	bf00      	nop
    d454:	1fff8fc4 	.word	0x1fff8fc4
    d458:	1fff8fc0 	.word	0x1fff8fc0

0000d45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d45c:	b500      	push	{lr}
    d45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d460:	f7f4 f804 	bl	146c <Sys_GetCoreID>
    d464:	4603      	mov	r3, r0
    d466:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d468:	4a0d      	ldr	r2, [pc, #52]	; (d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d46a:	9b01      	ldr	r3, [sp, #4]
    d46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d470:	1e5a      	subs	r2, r3, #1
    d472:	490b      	ldr	r1, [pc, #44]	; (d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d474:	9b01      	ldr	r3, [sp, #4]
    d476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d47a:	4a0a      	ldr	r2, [pc, #40]	; (d4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d47c:	9b01      	ldr	r3, [sp, #4]
    d47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d482:	f003 0301 	and.w	r3, r3, #1
    d486:	2b00      	cmp	r3, #0
    d488:	d106      	bne.n	d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d48a:	4a05      	ldr	r2, [pc, #20]	; (d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d48c:	9b01      	ldr	r3, [sp, #4]
    d48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d492:	2b00      	cmp	r3, #0
    d494:	d100      	bne.n	d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d498:	bf00      	nop
    d49a:	b003      	add	sp, #12
    d49c:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a0:	1fff8fc4 	.word	0x1fff8fc4
    d4a4:	1fff8fc0 	.word	0x1fff8fc0

0000d4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d4a8:	b500      	push	{lr}
    d4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4ac:	f7f3 ffde 	bl	146c <Sys_GetCoreID>
    d4b0:	4603      	mov	r3, r0
    d4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d4b4:	4a10      	ldr	r2, [pc, #64]	; (d4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d4b6:	9b01      	ldr	r3, [sp, #4]
    d4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d10d      	bne.n	d4dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4c0:	f7f3 fa04 	bl	8cc <Adc_schm_read_msr>
    d4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4c6:	9b00      	ldr	r3, [sp, #0]
    d4c8:	f003 0301 	and.w	r3, r3, #1
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	d100      	bne.n	d4d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d4d2:	490a      	ldr	r1, [pc, #40]	; (d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d4d4:	9b01      	ldr	r3, [sp, #4]
    d4d6:	9a00      	ldr	r2, [sp, #0]
    d4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d4dc:	4a06      	ldr	r2, [pc, #24]	; (d4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d4de:	9b01      	ldr	r3, [sp, #4]
    d4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e4:	1c5a      	adds	r2, r3, #1
    d4e6:	4904      	ldr	r1, [pc, #16]	; (d4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d4e8:	9b01      	ldr	r3, [sp, #4]
    d4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4ee:	bf00      	nop
    d4f0:	b003      	add	sp, #12
    d4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f6:	bf00      	nop
    d4f8:	1fff8fcc 	.word	0x1fff8fcc
    d4fc:	1fff8fc8 	.word	0x1fff8fc8

0000d500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d500:	b500      	push	{lr}
    d502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d504:	f7f3 ffb2 	bl	146c <Sys_GetCoreID>
    d508:	4603      	mov	r3, r0
    d50a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d50c:	4a0d      	ldr	r2, [pc, #52]	; (d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d50e:	9b01      	ldr	r3, [sp, #4]
    d510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d514:	1e5a      	subs	r2, r3, #1
    d516:	490b      	ldr	r1, [pc, #44]	; (d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d518:	9b01      	ldr	r3, [sp, #4]
    d51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d51e:	4a0a      	ldr	r2, [pc, #40]	; (d548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d520:	9b01      	ldr	r3, [sp, #4]
    d522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d526:	f003 0301 	and.w	r3, r3, #1
    d52a:	2b00      	cmp	r3, #0
    d52c:	d106      	bne.n	d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d52e:	4a05      	ldr	r2, [pc, #20]	; (d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d530:	9b01      	ldr	r3, [sp, #4]
    d532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d536:	2b00      	cmp	r3, #0
    d538:	d100      	bne.n	d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d53c:	bf00      	nop
    d53e:	b003      	add	sp, #12
    d540:	f85d fb04 	ldr.w	pc, [sp], #4
    d544:	1fff8fcc 	.word	0x1fff8fcc
    d548:	1fff8fc8 	.word	0x1fff8fc8

0000d54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d54c:	b500      	push	{lr}
    d54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d550:	f7f3 ff8c 	bl	146c <Sys_GetCoreID>
    d554:	4603      	mov	r3, r0
    d556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d558:	4a10      	ldr	r2, [pc, #64]	; (d59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d55a:	9b01      	ldr	r3, [sp, #4]
    d55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d560:	2b00      	cmp	r3, #0
    d562:	d10d      	bne.n	d580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d564:	f7f3 f9b2 	bl	8cc <Adc_schm_read_msr>
    d568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d56a:	9b00      	ldr	r3, [sp, #0]
    d56c:	f003 0301 	and.w	r3, r3, #1
    d570:	2b00      	cmp	r3, #0
    d572:	d100      	bne.n	d576 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d576:	490a      	ldr	r1, [pc, #40]	; (d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d578:	9b01      	ldr	r3, [sp, #4]
    d57a:	9a00      	ldr	r2, [sp, #0]
    d57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d580:	4a06      	ldr	r2, [pc, #24]	; (d59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d582:	9b01      	ldr	r3, [sp, #4]
    d584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d588:	1c5a      	adds	r2, r3, #1
    d58a:	4904      	ldr	r1, [pc, #16]	; (d59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d58c:	9b01      	ldr	r3, [sp, #4]
    d58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d592:	bf00      	nop
    d594:	b003      	add	sp, #12
    d596:	f85d fb04 	ldr.w	pc, [sp], #4
    d59a:	bf00      	nop
    d59c:	1fff8fd4 	.word	0x1fff8fd4
    d5a0:	1fff8fd0 	.word	0x1fff8fd0

0000d5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d5a4:	b500      	push	{lr}
    d5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a8:	f7f3 ff60 	bl	146c <Sys_GetCoreID>
    d5ac:	4603      	mov	r3, r0
    d5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d5b0:	4a0d      	ldr	r2, [pc, #52]	; (d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d5b2:	9b01      	ldr	r3, [sp, #4]
    d5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b8:	1e5a      	subs	r2, r3, #1
    d5ba:	490b      	ldr	r1, [pc, #44]	; (d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d5c2:	4a0a      	ldr	r2, [pc, #40]	; (d5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d5c4:	9b01      	ldr	r3, [sp, #4]
    d5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ca:	f003 0301 	and.w	r3, r3, #1
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d106      	bne.n	d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d5d2:	4a05      	ldr	r2, [pc, #20]	; (d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d5d4:	9b01      	ldr	r3, [sp, #4]
    d5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d100      	bne.n	d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5e0:	bf00      	nop
    d5e2:	b003      	add	sp, #12
    d5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e8:	1fff8fd4 	.word	0x1fff8fd4
    d5ec:	1fff8fd0 	.word	0x1fff8fd0

0000d5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d5f0:	b500      	push	{lr}
    d5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5f4:	f7f3 ff3a 	bl	146c <Sys_GetCoreID>
    d5f8:	4603      	mov	r3, r0
    d5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d5fc:	4a10      	ldr	r2, [pc, #64]	; (d640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d5fe:	9b01      	ldr	r3, [sp, #4]
    d600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d604:	2b00      	cmp	r3, #0
    d606:	d10d      	bne.n	d624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d608:	f7f3 f960 	bl	8cc <Adc_schm_read_msr>
    d60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d60e:	9b00      	ldr	r3, [sp, #0]
    d610:	f003 0301 	and.w	r3, r3, #1
    d614:	2b00      	cmp	r3, #0
    d616:	d100      	bne.n	d61a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d61a:	490a      	ldr	r1, [pc, #40]	; (d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d61c:	9b01      	ldr	r3, [sp, #4]
    d61e:	9a00      	ldr	r2, [sp, #0]
    d620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d624:	4a06      	ldr	r2, [pc, #24]	; (d640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d626:	9b01      	ldr	r3, [sp, #4]
    d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62c:	1c5a      	adds	r2, r3, #1
    d62e:	4904      	ldr	r1, [pc, #16]	; (d640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d630:	9b01      	ldr	r3, [sp, #4]
    d632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d636:	bf00      	nop
    d638:	b003      	add	sp, #12
    d63a:	f85d fb04 	ldr.w	pc, [sp], #4
    d63e:	bf00      	nop
    d640:	1fff8fdc 	.word	0x1fff8fdc
    d644:	1fff8fd8 	.word	0x1fff8fd8

0000d648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d648:	b500      	push	{lr}
    d64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d64c:	f7f3 ff0e 	bl	146c <Sys_GetCoreID>
    d650:	4603      	mov	r3, r0
    d652:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d654:	4a0d      	ldr	r2, [pc, #52]	; (d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d656:	9b01      	ldr	r3, [sp, #4]
    d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d65c:	1e5a      	subs	r2, r3, #1
    d65e:	490b      	ldr	r1, [pc, #44]	; (d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d660:	9b01      	ldr	r3, [sp, #4]
    d662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d666:	4a0a      	ldr	r2, [pc, #40]	; (d690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d668:	9b01      	ldr	r3, [sp, #4]
    d66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d66e:	f003 0301 	and.w	r3, r3, #1
    d672:	2b00      	cmp	r3, #0
    d674:	d106      	bne.n	d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d676:	4a05      	ldr	r2, [pc, #20]	; (d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d678:	9b01      	ldr	r3, [sp, #4]
    d67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67e:	2b00      	cmp	r3, #0
    d680:	d100      	bne.n	d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d684:	bf00      	nop
    d686:	b003      	add	sp, #12
    d688:	f85d fb04 	ldr.w	pc, [sp], #4
    d68c:	1fff8fdc 	.word	0x1fff8fdc
    d690:	1fff8fd8 	.word	0x1fff8fd8

0000d694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d694:	b500      	push	{lr}
    d696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d698:	f7f3 fee8 	bl	146c <Sys_GetCoreID>
    d69c:	4603      	mov	r3, r0
    d69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    d6a0:	4a10      	ldr	r2, [pc, #64]	; (d6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d6a2:	9b01      	ldr	r3, [sp, #4]
    d6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d10d      	bne.n	d6c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6ac:	f7f3 f90e 	bl	8cc <Adc_schm_read_msr>
    d6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6b2:	9b00      	ldr	r3, [sp, #0]
    d6b4:	f003 0301 	and.w	r3, r3, #1
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d100      	bne.n	d6be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    d6be:	490a      	ldr	r1, [pc, #40]	; (d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    d6c0:	9b01      	ldr	r3, [sp, #4]
    d6c2:	9a00      	ldr	r2, [sp, #0]
    d6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    d6c8:	4a06      	ldr	r2, [pc, #24]	; (d6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d6ca:	9b01      	ldr	r3, [sp, #4]
    d6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d0:	1c5a      	adds	r2, r3, #1
    d6d2:	4904      	ldr	r1, [pc, #16]	; (d6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d6d4:	9b01      	ldr	r3, [sp, #4]
    d6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6da:	bf00      	nop
    d6dc:	b003      	add	sp, #12
    d6de:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e2:	bf00      	nop
    d6e4:	1fff8fe4 	.word	0x1fff8fe4
    d6e8:	1fff8fe0 	.word	0x1fff8fe0

0000d6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d6ec:	b500      	push	{lr}
    d6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6f0:	f7f3 febc 	bl	146c <Sys_GetCoreID>
    d6f4:	4603      	mov	r3, r0
    d6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    d6f8:	4a0d      	ldr	r2, [pc, #52]	; (d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d6fa:	9b01      	ldr	r3, [sp, #4]
    d6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d700:	1e5a      	subs	r2, r3, #1
    d702:	490b      	ldr	r1, [pc, #44]	; (d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    d70a:	4a0a      	ldr	r2, [pc, #40]	; (d734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    d70c:	9b01      	ldr	r3, [sp, #4]
    d70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d712:	f003 0301 	and.w	r3, r3, #1
    d716:	2b00      	cmp	r3, #0
    d718:	d106      	bne.n	d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    d71a:	4a05      	ldr	r2, [pc, #20]	; (d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d71c:	9b01      	ldr	r3, [sp, #4]
    d71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d722:	2b00      	cmp	r3, #0
    d724:	d100      	bne.n	d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d728:	bf00      	nop
    d72a:	b003      	add	sp, #12
    d72c:	f85d fb04 	ldr.w	pc, [sp], #4
    d730:	1fff8fe4 	.word	0x1fff8fe4
    d734:	1fff8fe0 	.word	0x1fff8fe0

0000d738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d738:	b500      	push	{lr}
    d73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d73c:	f7f3 fe96 	bl	146c <Sys_GetCoreID>
    d740:	4603      	mov	r3, r0
    d742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    d744:	4a10      	ldr	r2, [pc, #64]	; (d788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d746:	9b01      	ldr	r3, [sp, #4]
    d748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d74c:	2b00      	cmp	r3, #0
    d74e:	d10d      	bne.n	d76c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d750:	f7f3 f8bc 	bl	8cc <Adc_schm_read_msr>
    d754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d756:	9b00      	ldr	r3, [sp, #0]
    d758:	f003 0301 	and.w	r3, r3, #1
    d75c:	2b00      	cmp	r3, #0
    d75e:	d100      	bne.n	d762 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    d762:	490a      	ldr	r1, [pc, #40]	; (d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    d764:	9b01      	ldr	r3, [sp, #4]
    d766:	9a00      	ldr	r2, [sp, #0]
    d768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    d76c:	4a06      	ldr	r2, [pc, #24]	; (d788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d76e:	9b01      	ldr	r3, [sp, #4]
    d770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d774:	1c5a      	adds	r2, r3, #1
    d776:	4904      	ldr	r1, [pc, #16]	; (d788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d778:	9b01      	ldr	r3, [sp, #4]
    d77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d77e:	bf00      	nop
    d780:	b003      	add	sp, #12
    d782:	f85d fb04 	ldr.w	pc, [sp], #4
    d786:	bf00      	nop
    d788:	1fff8fec 	.word	0x1fff8fec
    d78c:	1fff8fe8 	.word	0x1fff8fe8

0000d790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d790:	b500      	push	{lr}
    d792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d794:	f7f3 fe6a 	bl	146c <Sys_GetCoreID>
    d798:	4603      	mov	r3, r0
    d79a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    d79c:	4a0d      	ldr	r2, [pc, #52]	; (d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d79e:	9b01      	ldr	r3, [sp, #4]
    d7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a4:	1e5a      	subs	r2, r3, #1
    d7a6:	490b      	ldr	r1, [pc, #44]	; (d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d7a8:	9b01      	ldr	r3, [sp, #4]
    d7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    d7ae:	4a0a      	ldr	r2, [pc, #40]	; (d7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    d7b0:	9b01      	ldr	r3, [sp, #4]
    d7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b6:	f003 0301 	and.w	r3, r3, #1
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d106      	bne.n	d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    d7be:	4a05      	ldr	r2, [pc, #20]	; (d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d7c0:	9b01      	ldr	r3, [sp, #4]
    d7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d100      	bne.n	d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7cc:	bf00      	nop
    d7ce:	b003      	add	sp, #12
    d7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d7d4:	1fff8fec 	.word	0x1fff8fec
    d7d8:	1fff8fe8 	.word	0x1fff8fe8

0000d7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d7dc:	b500      	push	{lr}
    d7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e0:	f7f3 fe44 	bl	146c <Sys_GetCoreID>
    d7e4:	4603      	mov	r3, r0
    d7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    d7e8:	4a10      	ldr	r2, [pc, #64]	; (d82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d7ea:	9b01      	ldr	r3, [sp, #4]
    d7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d10d      	bne.n	d810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7f4:	f7f3 f86a 	bl	8cc <Adc_schm_read_msr>
    d7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7fa:	9b00      	ldr	r3, [sp, #0]
    d7fc:	f003 0301 	and.w	r3, r3, #1
    d800:	2b00      	cmp	r3, #0
    d802:	d100      	bne.n	d806 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    d806:	490a      	ldr	r1, [pc, #40]	; (d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    d808:	9b01      	ldr	r3, [sp, #4]
    d80a:	9a00      	ldr	r2, [sp, #0]
    d80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    d810:	4a06      	ldr	r2, [pc, #24]	; (d82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d812:	9b01      	ldr	r3, [sp, #4]
    d814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d818:	1c5a      	adds	r2, r3, #1
    d81a:	4904      	ldr	r1, [pc, #16]	; (d82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d81c:	9b01      	ldr	r3, [sp, #4]
    d81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d822:	bf00      	nop
    d824:	b003      	add	sp, #12
    d826:	f85d fb04 	ldr.w	pc, [sp], #4
    d82a:	bf00      	nop
    d82c:	1fff8ff4 	.word	0x1fff8ff4
    d830:	1fff8ff0 	.word	0x1fff8ff0

0000d834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d834:	b500      	push	{lr}
    d836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d838:	f7f3 fe18 	bl	146c <Sys_GetCoreID>
    d83c:	4603      	mov	r3, r0
    d83e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    d840:	4a0d      	ldr	r2, [pc, #52]	; (d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d842:	9b01      	ldr	r3, [sp, #4]
    d844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d848:	1e5a      	subs	r2, r3, #1
    d84a:	490b      	ldr	r1, [pc, #44]	; (d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d84c:	9b01      	ldr	r3, [sp, #4]
    d84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    d852:	4a0a      	ldr	r2, [pc, #40]	; (d87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    d854:	9b01      	ldr	r3, [sp, #4]
    d856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d85a:	f003 0301 	and.w	r3, r3, #1
    d85e:	2b00      	cmp	r3, #0
    d860:	d106      	bne.n	d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    d862:	4a05      	ldr	r2, [pc, #20]	; (d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d864:	9b01      	ldr	r3, [sp, #4]
    d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86a:	2b00      	cmp	r3, #0
    d86c:	d100      	bne.n	d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d870:	bf00      	nop
    d872:	b003      	add	sp, #12
    d874:	f85d fb04 	ldr.w	pc, [sp], #4
    d878:	1fff8ff4 	.word	0x1fff8ff4
    d87c:	1fff8ff0 	.word	0x1fff8ff0

0000d880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d880:	b500      	push	{lr}
    d882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d884:	f7f3 fdf2 	bl	146c <Sys_GetCoreID>
    d888:	4603      	mov	r3, r0
    d88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    d88c:	4a10      	ldr	r2, [pc, #64]	; (d8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d88e:	9b01      	ldr	r3, [sp, #4]
    d890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d894:	2b00      	cmp	r3, #0
    d896:	d10d      	bne.n	d8b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d898:	f7f3 f818 	bl	8cc <Adc_schm_read_msr>
    d89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d89e:	9b00      	ldr	r3, [sp, #0]
    d8a0:	f003 0301 	and.w	r3, r3, #1
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d100      	bne.n	d8aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    d8aa:	490a      	ldr	r1, [pc, #40]	; (d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    d8ac:	9b01      	ldr	r3, [sp, #4]
    d8ae:	9a00      	ldr	r2, [sp, #0]
    d8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    d8b4:	4a06      	ldr	r2, [pc, #24]	; (d8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d8b6:	9b01      	ldr	r3, [sp, #4]
    d8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8bc:	1c5a      	adds	r2, r3, #1
    d8be:	4904      	ldr	r1, [pc, #16]	; (d8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d8c0:	9b01      	ldr	r3, [sp, #4]
    d8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8c6:	bf00      	nop
    d8c8:	b003      	add	sp, #12
    d8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ce:	bf00      	nop
    d8d0:	1fff8ffc 	.word	0x1fff8ffc
    d8d4:	1fff8ff8 	.word	0x1fff8ff8

0000d8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d8d8:	b500      	push	{lr}
    d8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8dc:	f7f3 fdc6 	bl	146c <Sys_GetCoreID>
    d8e0:	4603      	mov	r3, r0
    d8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    d8e4:	4a0d      	ldr	r2, [pc, #52]	; (d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d8e6:	9b01      	ldr	r3, [sp, #4]
    d8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ec:	1e5a      	subs	r2, r3, #1
    d8ee:	490b      	ldr	r1, [pc, #44]	; (d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    d8f6:	4a0a      	ldr	r2, [pc, #40]	; (d920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    d8f8:	9b01      	ldr	r3, [sp, #4]
    d8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8fe:	f003 0301 	and.w	r3, r3, #1
    d902:	2b00      	cmp	r3, #0
    d904:	d106      	bne.n	d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    d906:	4a05      	ldr	r2, [pc, #20]	; (d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d908:	9b01      	ldr	r3, [sp, #4]
    d90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d90e:	2b00      	cmp	r3, #0
    d910:	d100      	bne.n	d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d914:	bf00      	nop
    d916:	b003      	add	sp, #12
    d918:	f85d fb04 	ldr.w	pc, [sp], #4
    d91c:	1fff8ffc 	.word	0x1fff8ffc
    d920:	1fff8ff8 	.word	0x1fff8ff8

0000d924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d924:	b500      	push	{lr}
    d926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d928:	f7f3 fda0 	bl	146c <Sys_GetCoreID>
    d92c:	4603      	mov	r3, r0
    d92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    d930:	4a10      	ldr	r2, [pc, #64]	; (d974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d932:	9b01      	ldr	r3, [sp, #4]
    d934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d938:	2b00      	cmp	r3, #0
    d93a:	d10d      	bne.n	d958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d93c:	f7f2 ffc6 	bl	8cc <Adc_schm_read_msr>
    d940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d942:	9b00      	ldr	r3, [sp, #0]
    d944:	f003 0301 	and.w	r3, r3, #1
    d948:	2b00      	cmp	r3, #0
    d94a:	d100      	bne.n	d94e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    d94e:	490a      	ldr	r1, [pc, #40]	; (d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    d950:	9b01      	ldr	r3, [sp, #4]
    d952:	9a00      	ldr	r2, [sp, #0]
    d954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    d958:	4a06      	ldr	r2, [pc, #24]	; (d974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d95a:	9b01      	ldr	r3, [sp, #4]
    d95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d960:	1c5a      	adds	r2, r3, #1
    d962:	4904      	ldr	r1, [pc, #16]	; (d974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d964:	9b01      	ldr	r3, [sp, #4]
    d966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d96a:	bf00      	nop
    d96c:	b003      	add	sp, #12
    d96e:	f85d fb04 	ldr.w	pc, [sp], #4
    d972:	bf00      	nop
    d974:	1fff9004 	.word	0x1fff9004
    d978:	1fff9000 	.word	0x1fff9000

0000d97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d97c:	b500      	push	{lr}
    d97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d980:	f7f3 fd74 	bl	146c <Sys_GetCoreID>
    d984:	4603      	mov	r3, r0
    d986:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    d988:	4a0d      	ldr	r2, [pc, #52]	; (d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d98a:	9b01      	ldr	r3, [sp, #4]
    d98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d990:	1e5a      	subs	r2, r3, #1
    d992:	490b      	ldr	r1, [pc, #44]	; (d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d994:	9b01      	ldr	r3, [sp, #4]
    d996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    d99a:	4a0a      	ldr	r2, [pc, #40]	; (d9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    d99c:	9b01      	ldr	r3, [sp, #4]
    d99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a2:	f003 0301 	and.w	r3, r3, #1
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d106      	bne.n	d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    d9aa:	4a05      	ldr	r2, [pc, #20]	; (d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d9ac:	9b01      	ldr	r3, [sp, #4]
    d9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b2:	2b00      	cmp	r3, #0
    d9b4:	d100      	bne.n	d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9b8:	bf00      	nop
    d9ba:	b003      	add	sp, #12
    d9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c0:	1fff9004 	.word	0x1fff9004
    d9c4:	1fff9000 	.word	0x1fff9000

0000d9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d9c8:	b500      	push	{lr}
    d9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9cc:	f7f3 fd4e 	bl	146c <Sys_GetCoreID>
    d9d0:	4603      	mov	r3, r0
    d9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    d9d4:	4a10      	ldr	r2, [pc, #64]	; (da18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d9d6:	9b01      	ldr	r3, [sp, #4]
    d9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d10d      	bne.n	d9fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9e0:	f7f2 ff74 	bl	8cc <Adc_schm_read_msr>
    d9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9e6:	9b00      	ldr	r3, [sp, #0]
    d9e8:	f003 0301 	and.w	r3, r3, #1
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	d100      	bne.n	d9f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    d9f2:	490a      	ldr	r1, [pc, #40]	; (da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    d9f4:	9b01      	ldr	r3, [sp, #4]
    d9f6:	9a00      	ldr	r2, [sp, #0]
    d9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    d9fc:	4a06      	ldr	r2, [pc, #24]	; (da18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d9fe:	9b01      	ldr	r3, [sp, #4]
    da00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da04:	1c5a      	adds	r2, r3, #1
    da06:	4904      	ldr	r1, [pc, #16]	; (da18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    da08:	9b01      	ldr	r3, [sp, #4]
    da0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da0e:	bf00      	nop
    da10:	b003      	add	sp, #12
    da12:	f85d fb04 	ldr.w	pc, [sp], #4
    da16:	bf00      	nop
    da18:	1fff900c 	.word	0x1fff900c
    da1c:	1fff9008 	.word	0x1fff9008

0000da20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    da20:	b500      	push	{lr}
    da22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da24:	f7f3 fd22 	bl	146c <Sys_GetCoreID>
    da28:	4603      	mov	r3, r0
    da2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    da2c:	4a0d      	ldr	r2, [pc, #52]	; (da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    da2e:	9b01      	ldr	r3, [sp, #4]
    da30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da34:	1e5a      	subs	r2, r3, #1
    da36:	490b      	ldr	r1, [pc, #44]	; (da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    da3e:	4a0a      	ldr	r2, [pc, #40]	; (da68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    da40:	9b01      	ldr	r3, [sp, #4]
    da42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da46:	f003 0301 	and.w	r3, r3, #1
    da4a:	2b00      	cmp	r3, #0
    da4c:	d106      	bne.n	da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    da4e:	4a05      	ldr	r2, [pc, #20]	; (da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da56:	2b00      	cmp	r3, #0
    da58:	d100      	bne.n	da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da5c:	bf00      	nop
    da5e:	b003      	add	sp, #12
    da60:	f85d fb04 	ldr.w	pc, [sp], #4
    da64:	1fff900c 	.word	0x1fff900c
    da68:	1fff9008 	.word	0x1fff9008

0000da6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    da6c:	b500      	push	{lr}
    da6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da70:	f7f3 fcfc 	bl	146c <Sys_GetCoreID>
    da74:	4603      	mov	r3, r0
    da76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    da78:	4a10      	ldr	r2, [pc, #64]	; (dabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    da7a:	9b01      	ldr	r3, [sp, #4]
    da7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da80:	2b00      	cmp	r3, #0
    da82:	d10d      	bne.n	daa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da84:	f7f2 ff22 	bl	8cc <Adc_schm_read_msr>
    da88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da8a:	9b00      	ldr	r3, [sp, #0]
    da8c:	f003 0301 	and.w	r3, r3, #1
    da90:	2b00      	cmp	r3, #0
    da92:	d100      	bne.n	da96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    da96:	490a      	ldr	r1, [pc, #40]	; (dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    da98:	9b01      	ldr	r3, [sp, #4]
    da9a:	9a00      	ldr	r2, [sp, #0]
    da9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    daa0:	4a06      	ldr	r2, [pc, #24]	; (dabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    daa2:	9b01      	ldr	r3, [sp, #4]
    daa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa8:	1c5a      	adds	r2, r3, #1
    daaa:	4904      	ldr	r1, [pc, #16]	; (dabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    daac:	9b01      	ldr	r3, [sp, #4]
    daae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dab2:	bf00      	nop
    dab4:	b003      	add	sp, #12
    dab6:	f85d fb04 	ldr.w	pc, [sp], #4
    daba:	bf00      	nop
    dabc:	1fff9014 	.word	0x1fff9014
    dac0:	1fff9010 	.word	0x1fff9010

0000dac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    dac4:	b500      	push	{lr}
    dac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac8:	f7f3 fcd0 	bl	146c <Sys_GetCoreID>
    dacc:	4603      	mov	r3, r0
    dace:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    dad0:	4a0d      	ldr	r2, [pc, #52]	; (db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    dad2:	9b01      	ldr	r3, [sp, #4]
    dad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad8:	1e5a      	subs	r2, r3, #1
    dada:	490b      	ldr	r1, [pc, #44]	; (db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    dadc:	9b01      	ldr	r3, [sp, #4]
    dade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    dae2:	4a0a      	ldr	r2, [pc, #40]	; (db0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    dae4:	9b01      	ldr	r3, [sp, #4]
    dae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daea:	f003 0301 	and.w	r3, r3, #1
    daee:	2b00      	cmp	r3, #0
    daf0:	d106      	bne.n	db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    daf2:	4a05      	ldr	r2, [pc, #20]	; (db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    daf4:	9b01      	ldr	r3, [sp, #4]
    daf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafa:	2b00      	cmp	r3, #0
    dafc:	d100      	bne.n	db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db00:	bf00      	nop
    db02:	b003      	add	sp, #12
    db04:	f85d fb04 	ldr.w	pc, [sp], #4
    db08:	1fff9014 	.word	0x1fff9014
    db0c:	1fff9010 	.word	0x1fff9010

0000db10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    db10:	b500      	push	{lr}
    db12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db14:	f7f3 fcaa 	bl	146c <Sys_GetCoreID>
    db18:	4603      	mov	r3, r0
    db1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    db1c:	4a10      	ldr	r2, [pc, #64]	; (db60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    db1e:	9b01      	ldr	r3, [sp, #4]
    db20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db24:	2b00      	cmp	r3, #0
    db26:	d10d      	bne.n	db44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db28:	f7f2 fed0 	bl	8cc <Adc_schm_read_msr>
    db2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db2e:	9b00      	ldr	r3, [sp, #0]
    db30:	f003 0301 	and.w	r3, r3, #1
    db34:	2b00      	cmp	r3, #0
    db36:	d100      	bne.n	db3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    db3a:	490a      	ldr	r1, [pc, #40]	; (db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    db3c:	9b01      	ldr	r3, [sp, #4]
    db3e:	9a00      	ldr	r2, [sp, #0]
    db40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    db44:	4a06      	ldr	r2, [pc, #24]	; (db60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    db46:	9b01      	ldr	r3, [sp, #4]
    db48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4c:	1c5a      	adds	r2, r3, #1
    db4e:	4904      	ldr	r1, [pc, #16]	; (db60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    db50:	9b01      	ldr	r3, [sp, #4]
    db52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db56:	bf00      	nop
    db58:	b003      	add	sp, #12
    db5a:	f85d fb04 	ldr.w	pc, [sp], #4
    db5e:	bf00      	nop
    db60:	1fff901c 	.word	0x1fff901c
    db64:	1fff9018 	.word	0x1fff9018

0000db68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    db68:	b500      	push	{lr}
    db6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db6c:	f7f3 fc7e 	bl	146c <Sys_GetCoreID>
    db70:	4603      	mov	r3, r0
    db72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    db74:	4a0d      	ldr	r2, [pc, #52]	; (dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    db76:	9b01      	ldr	r3, [sp, #4]
    db78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db7c:	1e5a      	subs	r2, r3, #1
    db7e:	490b      	ldr	r1, [pc, #44]	; (dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    db80:	9b01      	ldr	r3, [sp, #4]
    db82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    db86:	4a0a      	ldr	r2, [pc, #40]	; (dbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    db88:	9b01      	ldr	r3, [sp, #4]
    db8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db8e:	f003 0301 	and.w	r3, r3, #1
    db92:	2b00      	cmp	r3, #0
    db94:	d106      	bne.n	dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    db96:	4a05      	ldr	r2, [pc, #20]	; (dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    db98:	9b01      	ldr	r3, [sp, #4]
    db9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db9e:	2b00      	cmp	r3, #0
    dba0:	d100      	bne.n	dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dba4:	bf00      	nop
    dba6:	b003      	add	sp, #12
    dba8:	f85d fb04 	ldr.w	pc, [sp], #4
    dbac:	1fff901c 	.word	0x1fff901c
    dbb0:	1fff9018 	.word	0x1fff9018

0000dbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    dbb4:	b500      	push	{lr}
    dbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbb8:	f7f3 fc58 	bl	146c <Sys_GetCoreID>
    dbbc:	4603      	mov	r3, r0
    dbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    dbc0:	4a10      	ldr	r2, [pc, #64]	; (dc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    dbc2:	9b01      	ldr	r3, [sp, #4]
    dbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc8:	2b00      	cmp	r3, #0
    dbca:	d10d      	bne.n	dbe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbcc:	f7f2 fe7e 	bl	8cc <Adc_schm_read_msr>
    dbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbd2:	9b00      	ldr	r3, [sp, #0]
    dbd4:	f003 0301 	and.w	r3, r3, #1
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d100      	bne.n	dbde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    dbde:	490a      	ldr	r1, [pc, #40]	; (dc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    dbe0:	9b01      	ldr	r3, [sp, #4]
    dbe2:	9a00      	ldr	r2, [sp, #0]
    dbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    dbe8:	4a06      	ldr	r2, [pc, #24]	; (dc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    dbea:	9b01      	ldr	r3, [sp, #4]
    dbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf0:	1c5a      	adds	r2, r3, #1
    dbf2:	4904      	ldr	r1, [pc, #16]	; (dc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    dbf4:	9b01      	ldr	r3, [sp, #4]
    dbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbfa:	bf00      	nop
    dbfc:	b003      	add	sp, #12
    dbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    dc02:	bf00      	nop
    dc04:	1fff9024 	.word	0x1fff9024
    dc08:	1fff9020 	.word	0x1fff9020

0000dc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    dc0c:	b500      	push	{lr}
    dc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc10:	f7f3 fc2c 	bl	146c <Sys_GetCoreID>
    dc14:	4603      	mov	r3, r0
    dc16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    dc18:	4a0d      	ldr	r2, [pc, #52]	; (dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    dc1a:	9b01      	ldr	r3, [sp, #4]
    dc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc20:	1e5a      	subs	r2, r3, #1
    dc22:	490b      	ldr	r1, [pc, #44]	; (dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    dc2a:	4a0a      	ldr	r2, [pc, #40]	; (dc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    dc2c:	9b01      	ldr	r3, [sp, #4]
    dc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc32:	f003 0301 	and.w	r3, r3, #1
    dc36:	2b00      	cmp	r3, #0
    dc38:	d106      	bne.n	dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    dc3a:	4a05      	ldr	r2, [pc, #20]	; (dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc42:	2b00      	cmp	r3, #0
    dc44:	d100      	bne.n	dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc48:	bf00      	nop
    dc4a:	b003      	add	sp, #12
    dc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    dc50:	1fff9024 	.word	0x1fff9024
    dc54:	1fff9020 	.word	0x1fff9020

0000dc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    dc58:	b500      	push	{lr}
    dc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc5c:	f7f3 fc06 	bl	146c <Sys_GetCoreID>
    dc60:	4603      	mov	r3, r0
    dc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    dc64:	4a10      	ldr	r2, [pc, #64]	; (dca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dc66:	9b01      	ldr	r3, [sp, #4]
    dc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d10d      	bne.n	dc8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc70:	f7f2 fe2c 	bl	8cc <Adc_schm_read_msr>
    dc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc76:	9b00      	ldr	r3, [sp, #0]
    dc78:	f003 0301 	and.w	r3, r3, #1
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d100      	bne.n	dc82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    dc82:	490a      	ldr	r1, [pc, #40]	; (dcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    dc84:	9b01      	ldr	r3, [sp, #4]
    dc86:	9a00      	ldr	r2, [sp, #0]
    dc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    dc8c:	4a06      	ldr	r2, [pc, #24]	; (dca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dc8e:	9b01      	ldr	r3, [sp, #4]
    dc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc94:	1c5a      	adds	r2, r3, #1
    dc96:	4904      	ldr	r1, [pc, #16]	; (dca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dc98:	9b01      	ldr	r3, [sp, #4]
    dc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc9e:	bf00      	nop
    dca0:	b003      	add	sp, #12
    dca2:	f85d fb04 	ldr.w	pc, [sp], #4
    dca6:	bf00      	nop
    dca8:	1fff902c 	.word	0x1fff902c
    dcac:	1fff9028 	.word	0x1fff9028

0000dcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    dcb0:	b500      	push	{lr}
    dcb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb4:	f7f3 fbda 	bl	146c <Sys_GetCoreID>
    dcb8:	4603      	mov	r3, r0
    dcba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    dcbc:	4a0d      	ldr	r2, [pc, #52]	; (dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dcbe:	9b01      	ldr	r3, [sp, #4]
    dcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc4:	1e5a      	subs	r2, r3, #1
    dcc6:	490b      	ldr	r1, [pc, #44]	; (dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    dcce:	4a0a      	ldr	r2, [pc, #40]	; (dcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    dcd0:	9b01      	ldr	r3, [sp, #4]
    dcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd6:	f003 0301 	and.w	r3, r3, #1
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d106      	bne.n	dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    dcde:	4a05      	ldr	r2, [pc, #20]	; (dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dce0:	9b01      	ldr	r3, [sp, #4]
    dce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d100      	bne.n	dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcec:	bf00      	nop
    dcee:	b003      	add	sp, #12
    dcf0:	f85d fb04 	ldr.w	pc, [sp], #4
    dcf4:	1fff902c 	.word	0x1fff902c
    dcf8:	1fff9028 	.word	0x1fff9028

0000dcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    dcfc:	b500      	push	{lr}
    dcfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd00:	f7f3 fbb4 	bl	146c <Sys_GetCoreID>
    dd04:	4603      	mov	r3, r0
    dd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    dd08:	4a10      	ldr	r2, [pc, #64]	; (dd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dd0a:	9b01      	ldr	r3, [sp, #4]
    dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd10:	2b00      	cmp	r3, #0
    dd12:	d10d      	bne.n	dd30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd14:	f7f2 fdda 	bl	8cc <Adc_schm_read_msr>
    dd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd1a:	9b00      	ldr	r3, [sp, #0]
    dd1c:	f003 0301 	and.w	r3, r3, #1
    dd20:	2b00      	cmp	r3, #0
    dd22:	d100      	bne.n	dd26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    dd26:	490a      	ldr	r1, [pc, #40]	; (dd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    dd28:	9b01      	ldr	r3, [sp, #4]
    dd2a:	9a00      	ldr	r2, [sp, #0]
    dd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    dd30:	4a06      	ldr	r2, [pc, #24]	; (dd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dd32:	9b01      	ldr	r3, [sp, #4]
    dd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd38:	1c5a      	adds	r2, r3, #1
    dd3a:	4904      	ldr	r1, [pc, #16]	; (dd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dd3c:	9b01      	ldr	r3, [sp, #4]
    dd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd42:	bf00      	nop
    dd44:	b003      	add	sp, #12
    dd46:	f85d fb04 	ldr.w	pc, [sp], #4
    dd4a:	bf00      	nop
    dd4c:	1fff9034 	.word	0x1fff9034
    dd50:	1fff9030 	.word	0x1fff9030

0000dd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    dd54:	b500      	push	{lr}
    dd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd58:	f7f3 fb88 	bl	146c <Sys_GetCoreID>
    dd5c:	4603      	mov	r3, r0
    dd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    dd60:	4a0d      	ldr	r2, [pc, #52]	; (dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dd62:	9b01      	ldr	r3, [sp, #4]
    dd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd68:	1e5a      	subs	r2, r3, #1
    dd6a:	490b      	ldr	r1, [pc, #44]	; (dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dd6c:	9b01      	ldr	r3, [sp, #4]
    dd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    dd72:	4a0a      	ldr	r2, [pc, #40]	; (dd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    dd74:	9b01      	ldr	r3, [sp, #4]
    dd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7a:	f003 0301 	and.w	r3, r3, #1
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d106      	bne.n	dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    dd82:	4a05      	ldr	r2, [pc, #20]	; (dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dd84:	9b01      	ldr	r3, [sp, #4]
    dd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d100      	bne.n	dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd90:	bf00      	nop
    dd92:	b003      	add	sp, #12
    dd94:	f85d fb04 	ldr.w	pc, [sp], #4
    dd98:	1fff9034 	.word	0x1fff9034
    dd9c:	1fff9030 	.word	0x1fff9030

0000dda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    dda0:	b500      	push	{lr}
    dda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dda4:	f7f3 fb62 	bl	146c <Sys_GetCoreID>
    dda8:	4603      	mov	r3, r0
    ddaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    ddac:	4a10      	ldr	r2, [pc, #64]	; (ddf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    ddae:	9b01      	ldr	r3, [sp, #4]
    ddb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d10d      	bne.n	ddd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddb8:	f7f2 fd88 	bl	8cc <Adc_schm_read_msr>
    ddbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddbe:	9b00      	ldr	r3, [sp, #0]
    ddc0:	f003 0301 	and.w	r3, r3, #1
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d100      	bne.n	ddca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    ddca:	490a      	ldr	r1, [pc, #40]	; (ddf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    ddcc:	9b01      	ldr	r3, [sp, #4]
    ddce:	9a00      	ldr	r2, [sp, #0]
    ddd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    ddd4:	4a06      	ldr	r2, [pc, #24]	; (ddf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    ddd6:	9b01      	ldr	r3, [sp, #4]
    ddd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dddc:	1c5a      	adds	r2, r3, #1
    ddde:	4904      	ldr	r1, [pc, #16]	; (ddf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dde0:	9b01      	ldr	r3, [sp, #4]
    dde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dde6:	bf00      	nop
    dde8:	b003      	add	sp, #12
    ddea:	f85d fb04 	ldr.w	pc, [sp], #4
    ddee:	bf00      	nop
    ddf0:	1fff903c 	.word	0x1fff903c
    ddf4:	1fff9038 	.word	0x1fff9038

0000ddf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    ddf8:	b500      	push	{lr}
    ddfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddfc:	f7f3 fb36 	bl	146c <Sys_GetCoreID>
    de00:	4603      	mov	r3, r0
    de02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    de04:	4a0d      	ldr	r2, [pc, #52]	; (de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    de06:	9b01      	ldr	r3, [sp, #4]
    de08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de0c:	1e5a      	subs	r2, r3, #1
    de0e:	490b      	ldr	r1, [pc, #44]	; (de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    de10:	9b01      	ldr	r3, [sp, #4]
    de12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    de16:	4a0a      	ldr	r2, [pc, #40]	; (de40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    de18:	9b01      	ldr	r3, [sp, #4]
    de1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de1e:	f003 0301 	and.w	r3, r3, #1
    de22:	2b00      	cmp	r3, #0
    de24:	d106      	bne.n	de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    de26:	4a05      	ldr	r2, [pc, #20]	; (de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    de28:	9b01      	ldr	r3, [sp, #4]
    de2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de2e:	2b00      	cmp	r3, #0
    de30:	d100      	bne.n	de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de34:	bf00      	nop
    de36:	b003      	add	sp, #12
    de38:	f85d fb04 	ldr.w	pc, [sp], #4
    de3c:	1fff903c 	.word	0x1fff903c
    de40:	1fff9038 	.word	0x1fff9038

0000de44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    de44:	b500      	push	{lr}
    de46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de48:	f7f3 fb10 	bl	146c <Sys_GetCoreID>
    de4c:	4603      	mov	r3, r0
    de4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    de50:	4a10      	ldr	r2, [pc, #64]	; (de94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    de52:	9b01      	ldr	r3, [sp, #4]
    de54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de58:	2b00      	cmp	r3, #0
    de5a:	d10d      	bne.n	de78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de5c:	f7f2 fd36 	bl	8cc <Adc_schm_read_msr>
    de60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de62:	9b00      	ldr	r3, [sp, #0]
    de64:	f003 0301 	and.w	r3, r3, #1
    de68:	2b00      	cmp	r3, #0
    de6a:	d100      	bne.n	de6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    de6e:	490a      	ldr	r1, [pc, #40]	; (de98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    de70:	9b01      	ldr	r3, [sp, #4]
    de72:	9a00      	ldr	r2, [sp, #0]
    de74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    de78:	4a06      	ldr	r2, [pc, #24]	; (de94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    de7a:	9b01      	ldr	r3, [sp, #4]
    de7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de80:	1c5a      	adds	r2, r3, #1
    de82:	4904      	ldr	r1, [pc, #16]	; (de94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    de84:	9b01      	ldr	r3, [sp, #4]
    de86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de8a:	bf00      	nop
    de8c:	b003      	add	sp, #12
    de8e:	f85d fb04 	ldr.w	pc, [sp], #4
    de92:	bf00      	nop
    de94:	1fff9044 	.word	0x1fff9044
    de98:	1fff9040 	.word	0x1fff9040

0000de9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    de9c:	b500      	push	{lr}
    de9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dea0:	f7f3 fae4 	bl	146c <Sys_GetCoreID>
    dea4:	4603      	mov	r3, r0
    dea6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    dea8:	4a0d      	ldr	r2, [pc, #52]	; (dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    deaa:	9b01      	ldr	r3, [sp, #4]
    deac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deb0:	1e5a      	subs	r2, r3, #1
    deb2:	490b      	ldr	r1, [pc, #44]	; (dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    deba:	4a0a      	ldr	r2, [pc, #40]	; (dee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    debc:	9b01      	ldr	r3, [sp, #4]
    debe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec2:	f003 0301 	and.w	r3, r3, #1
    dec6:	2b00      	cmp	r3, #0
    dec8:	d106      	bne.n	ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    deca:	4a05      	ldr	r2, [pc, #20]	; (dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    decc:	9b01      	ldr	r3, [sp, #4]
    dece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded2:	2b00      	cmp	r3, #0
    ded4:	d100      	bne.n	ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ded6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ded8:	bf00      	nop
    deda:	b003      	add	sp, #12
    dedc:	f85d fb04 	ldr.w	pc, [sp], #4
    dee0:	1fff9044 	.word	0x1fff9044
    dee4:	1fff9040 	.word	0x1fff9040

0000dee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dee8:	b500      	push	{lr}
    deea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    deec:	f7f3 fabe 	bl	146c <Sys_GetCoreID>
    def0:	4603      	mov	r3, r0
    def2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    def4:	4a10      	ldr	r2, [pc, #64]	; (df38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    def6:	9b01      	ldr	r3, [sp, #4]
    def8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    defc:	2b00      	cmp	r3, #0
    defe:	d10d      	bne.n	df1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df00:	f7f2 fce4 	bl	8cc <Adc_schm_read_msr>
    df04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df06:	9b00      	ldr	r3, [sp, #0]
    df08:	f003 0301 	and.w	r3, r3, #1
    df0c:	2b00      	cmp	r3, #0
    df0e:	d100      	bne.n	df12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    df12:	490a      	ldr	r1, [pc, #40]	; (df3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    df14:	9b01      	ldr	r3, [sp, #4]
    df16:	9a00      	ldr	r2, [sp, #0]
    df18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    df1c:	4a06      	ldr	r2, [pc, #24]	; (df38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    df1e:	9b01      	ldr	r3, [sp, #4]
    df20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df24:	1c5a      	adds	r2, r3, #1
    df26:	4904      	ldr	r1, [pc, #16]	; (df38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    df28:	9b01      	ldr	r3, [sp, #4]
    df2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df2e:	bf00      	nop
    df30:	b003      	add	sp, #12
    df32:	f85d fb04 	ldr.w	pc, [sp], #4
    df36:	bf00      	nop
    df38:	1fff904c 	.word	0x1fff904c
    df3c:	1fff9048 	.word	0x1fff9048

0000df40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    df40:	b500      	push	{lr}
    df42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df44:	f7f3 fa92 	bl	146c <Sys_GetCoreID>
    df48:	4603      	mov	r3, r0
    df4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    df4c:	4a0d      	ldr	r2, [pc, #52]	; (df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    df4e:	9b01      	ldr	r3, [sp, #4]
    df50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df54:	1e5a      	subs	r2, r3, #1
    df56:	490b      	ldr	r1, [pc, #44]	; (df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    df5e:	4a0a      	ldr	r2, [pc, #40]	; (df88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    df60:	9b01      	ldr	r3, [sp, #4]
    df62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df66:	f003 0301 	and.w	r3, r3, #1
    df6a:	2b00      	cmp	r3, #0
    df6c:	d106      	bne.n	df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    df6e:	4a05      	ldr	r2, [pc, #20]	; (df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    df70:	9b01      	ldr	r3, [sp, #4]
    df72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df76:	2b00      	cmp	r3, #0
    df78:	d100      	bne.n	df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df7c:	bf00      	nop
    df7e:	b003      	add	sp, #12
    df80:	f85d fb04 	ldr.w	pc, [sp], #4
    df84:	1fff904c 	.word	0x1fff904c
    df88:	1fff9048 	.word	0x1fff9048

0000df8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    df8c:	b500      	push	{lr}
    df8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df90:	f7f3 fa6c 	bl	146c <Sys_GetCoreID>
    df94:	4603      	mov	r3, r0
    df96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    df98:	4a10      	ldr	r2, [pc, #64]	; (dfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    df9a:	9b01      	ldr	r3, [sp, #4]
    df9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d10d      	bne.n	dfc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfa4:	f7f2 fc92 	bl	8cc <Adc_schm_read_msr>
    dfa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfaa:	9b00      	ldr	r3, [sp, #0]
    dfac:	f003 0301 	and.w	r3, r3, #1
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d100      	bne.n	dfb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    dfb6:	490a      	ldr	r1, [pc, #40]	; (dfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    dfb8:	9b01      	ldr	r3, [sp, #4]
    dfba:	9a00      	ldr	r2, [sp, #0]
    dfbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    dfc0:	4a06      	ldr	r2, [pc, #24]	; (dfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dfc2:	9b01      	ldr	r3, [sp, #4]
    dfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfc8:	1c5a      	adds	r2, r3, #1
    dfca:	4904      	ldr	r1, [pc, #16]	; (dfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dfcc:	9b01      	ldr	r3, [sp, #4]
    dfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfd2:	bf00      	nop
    dfd4:	b003      	add	sp, #12
    dfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    dfda:	bf00      	nop
    dfdc:	1fff9054 	.word	0x1fff9054
    dfe0:	1fff9050 	.word	0x1fff9050

0000dfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dfe4:	b500      	push	{lr}
    dfe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe8:	f7f3 fa40 	bl	146c <Sys_GetCoreID>
    dfec:	4603      	mov	r3, r0
    dfee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    dff0:	4a0d      	ldr	r2, [pc, #52]	; (e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dff2:	9b01      	ldr	r3, [sp, #4]
    dff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff8:	1e5a      	subs	r2, r3, #1
    dffa:	490b      	ldr	r1, [pc, #44]	; (e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    e002:	4a0a      	ldr	r2, [pc, #40]	; (e02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e00a:	f003 0301 	and.w	r3, r3, #1
    e00e:	2b00      	cmp	r3, #0
    e010:	d106      	bne.n	e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    e012:	4a05      	ldr	r2, [pc, #20]	; (e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e014:	9b01      	ldr	r3, [sp, #4]
    e016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01a:	2b00      	cmp	r3, #0
    e01c:	d100      	bne.n	e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e020:	bf00      	nop
    e022:	b003      	add	sp, #12
    e024:	f85d fb04 	ldr.w	pc, [sp], #4
    e028:	1fff9054 	.word	0x1fff9054
    e02c:	1fff9050 	.word	0x1fff9050

0000e030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    e030:	b500      	push	{lr}
    e032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e034:	f7f3 fa1a 	bl	146c <Sys_GetCoreID>
    e038:	4603      	mov	r3, r0
    e03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    e03c:	4a10      	ldr	r2, [pc, #64]	; (e080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e03e:	9b01      	ldr	r3, [sp, #4]
    e040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e044:	2b00      	cmp	r3, #0
    e046:	d10d      	bne.n	e064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e048:	f7f2 fc40 	bl	8cc <Adc_schm_read_msr>
    e04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e04e:	9b00      	ldr	r3, [sp, #0]
    e050:	f003 0301 	and.w	r3, r3, #1
    e054:	2b00      	cmp	r3, #0
    e056:	d100      	bne.n	e05a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    e05a:	490a      	ldr	r1, [pc, #40]	; (e084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    e05c:	9b01      	ldr	r3, [sp, #4]
    e05e:	9a00      	ldr	r2, [sp, #0]
    e060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    e064:	4a06      	ldr	r2, [pc, #24]	; (e080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e066:	9b01      	ldr	r3, [sp, #4]
    e068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06c:	1c5a      	adds	r2, r3, #1
    e06e:	4904      	ldr	r1, [pc, #16]	; (e080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e070:	9b01      	ldr	r3, [sp, #4]
    e072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e076:	bf00      	nop
    e078:	b003      	add	sp, #12
    e07a:	f85d fb04 	ldr.w	pc, [sp], #4
    e07e:	bf00      	nop
    e080:	1fff905c 	.word	0x1fff905c
    e084:	1fff9058 	.word	0x1fff9058

0000e088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    e088:	b500      	push	{lr}
    e08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e08c:	f7f3 f9ee 	bl	146c <Sys_GetCoreID>
    e090:	4603      	mov	r3, r0
    e092:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    e094:	4a0d      	ldr	r2, [pc, #52]	; (e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e096:	9b01      	ldr	r3, [sp, #4]
    e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e09c:	1e5a      	subs	r2, r3, #1
    e09e:	490b      	ldr	r1, [pc, #44]	; (e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    e0a6:	4a0a      	ldr	r2, [pc, #40]	; (e0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    e0a8:	9b01      	ldr	r3, [sp, #4]
    e0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ae:	f003 0301 	and.w	r3, r3, #1
    e0b2:	2b00      	cmp	r3, #0
    e0b4:	d106      	bne.n	e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    e0b6:	4a05      	ldr	r2, [pc, #20]	; (e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e0b8:	9b01      	ldr	r3, [sp, #4]
    e0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d100      	bne.n	e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0c4:	bf00      	nop
    e0c6:	b003      	add	sp, #12
    e0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    e0cc:	1fff905c 	.word	0x1fff905c
    e0d0:	1fff9058 	.word	0x1fff9058

0000e0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e0d4:	b500      	push	{lr}
    e0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0d8:	f7f3 f9c8 	bl	146c <Sys_GetCoreID>
    e0dc:	4603      	mov	r3, r0
    e0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    e0e0:	4a10      	ldr	r2, [pc, #64]	; (e124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e0e2:	9b01      	ldr	r3, [sp, #4]
    e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d10d      	bne.n	e108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0ec:	f7f2 fbee 	bl	8cc <Adc_schm_read_msr>
    e0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0f2:	9b00      	ldr	r3, [sp, #0]
    e0f4:	f003 0301 	and.w	r3, r3, #1
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d100      	bne.n	e0fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    e0fe:	490a      	ldr	r1, [pc, #40]	; (e128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    e100:	9b01      	ldr	r3, [sp, #4]
    e102:	9a00      	ldr	r2, [sp, #0]
    e104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    e108:	4a06      	ldr	r2, [pc, #24]	; (e124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e10a:	9b01      	ldr	r3, [sp, #4]
    e10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e110:	1c5a      	adds	r2, r3, #1
    e112:	4904      	ldr	r1, [pc, #16]	; (e124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e114:	9b01      	ldr	r3, [sp, #4]
    e116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e11a:	bf00      	nop
    e11c:	b003      	add	sp, #12
    e11e:	f85d fb04 	ldr.w	pc, [sp], #4
    e122:	bf00      	nop
    e124:	1fff9064 	.word	0x1fff9064
    e128:	1fff9060 	.word	0x1fff9060

0000e12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e12c:	b500      	push	{lr}
    e12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e130:	f7f3 f99c 	bl	146c <Sys_GetCoreID>
    e134:	4603      	mov	r3, r0
    e136:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    e138:	4a0d      	ldr	r2, [pc, #52]	; (e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e13a:	9b01      	ldr	r3, [sp, #4]
    e13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e140:	1e5a      	subs	r2, r3, #1
    e142:	490b      	ldr	r1, [pc, #44]	; (e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e144:	9b01      	ldr	r3, [sp, #4]
    e146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    e14a:	4a0a      	ldr	r2, [pc, #40]	; (e174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    e14c:	9b01      	ldr	r3, [sp, #4]
    e14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e152:	f003 0301 	and.w	r3, r3, #1
    e156:	2b00      	cmp	r3, #0
    e158:	d106      	bne.n	e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    e15a:	4a05      	ldr	r2, [pc, #20]	; (e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e15c:	9b01      	ldr	r3, [sp, #4]
    e15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e162:	2b00      	cmp	r3, #0
    e164:	d100      	bne.n	e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e168:	bf00      	nop
    e16a:	b003      	add	sp, #12
    e16c:	f85d fb04 	ldr.w	pc, [sp], #4
    e170:	1fff9064 	.word	0x1fff9064
    e174:	1fff9060 	.word	0x1fff9060

0000e178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e178:	b500      	push	{lr}
    e17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e17c:	f7f3 f976 	bl	146c <Sys_GetCoreID>
    e180:	4603      	mov	r3, r0
    e182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    e184:	4a10      	ldr	r2, [pc, #64]	; (e1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e186:	9b01      	ldr	r3, [sp, #4]
    e188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d10d      	bne.n	e1ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e190:	f7f2 fb9c 	bl	8cc <Adc_schm_read_msr>
    e194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e196:	9b00      	ldr	r3, [sp, #0]
    e198:	f003 0301 	and.w	r3, r3, #1
    e19c:	2b00      	cmp	r3, #0
    e19e:	d100      	bne.n	e1a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    e1a2:	490a      	ldr	r1, [pc, #40]	; (e1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    e1a4:	9b01      	ldr	r3, [sp, #4]
    e1a6:	9a00      	ldr	r2, [sp, #0]
    e1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    e1ac:	4a06      	ldr	r2, [pc, #24]	; (e1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e1ae:	9b01      	ldr	r3, [sp, #4]
    e1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b4:	1c5a      	adds	r2, r3, #1
    e1b6:	4904      	ldr	r1, [pc, #16]	; (e1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e1b8:	9b01      	ldr	r3, [sp, #4]
    e1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1be:	bf00      	nop
    e1c0:	b003      	add	sp, #12
    e1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    e1c6:	bf00      	nop
    e1c8:	1fff906c 	.word	0x1fff906c
    e1cc:	1fff9068 	.word	0x1fff9068

0000e1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e1d0:	b500      	push	{lr}
    e1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d4:	f7f3 f94a 	bl	146c <Sys_GetCoreID>
    e1d8:	4603      	mov	r3, r0
    e1da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    e1dc:	4a0d      	ldr	r2, [pc, #52]	; (e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e1de:	9b01      	ldr	r3, [sp, #4]
    e1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e4:	1e5a      	subs	r2, r3, #1
    e1e6:	490b      	ldr	r1, [pc, #44]	; (e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    e1ee:	4a0a      	ldr	r2, [pc, #40]	; (e218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    e1f0:	9b01      	ldr	r3, [sp, #4]
    e1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f6:	f003 0301 	and.w	r3, r3, #1
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	d106      	bne.n	e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    e1fe:	4a05      	ldr	r2, [pc, #20]	; (e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e200:	9b01      	ldr	r3, [sp, #4]
    e202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e206:	2b00      	cmp	r3, #0
    e208:	d100      	bne.n	e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e20c:	bf00      	nop
    e20e:	b003      	add	sp, #12
    e210:	f85d fb04 	ldr.w	pc, [sp], #4
    e214:	1fff906c 	.word	0x1fff906c
    e218:	1fff9068 	.word	0x1fff9068

0000e21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e21c:	b500      	push	{lr}
    e21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e220:	f7f3 f924 	bl	146c <Sys_GetCoreID>
    e224:	4603      	mov	r3, r0
    e226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    e228:	4a10      	ldr	r2, [pc, #64]	; (e26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e22a:	9b01      	ldr	r3, [sp, #4]
    e22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e230:	2b00      	cmp	r3, #0
    e232:	d10d      	bne.n	e250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e234:	f7f2 fb4a 	bl	8cc <Adc_schm_read_msr>
    e238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e23a:	9b00      	ldr	r3, [sp, #0]
    e23c:	f003 0301 	and.w	r3, r3, #1
    e240:	2b00      	cmp	r3, #0
    e242:	d100      	bne.n	e246 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    e246:	490a      	ldr	r1, [pc, #40]	; (e270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    e248:	9b01      	ldr	r3, [sp, #4]
    e24a:	9a00      	ldr	r2, [sp, #0]
    e24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    e250:	4a06      	ldr	r2, [pc, #24]	; (e26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e252:	9b01      	ldr	r3, [sp, #4]
    e254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e258:	1c5a      	adds	r2, r3, #1
    e25a:	4904      	ldr	r1, [pc, #16]	; (e26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e25c:	9b01      	ldr	r3, [sp, #4]
    e25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e262:	bf00      	nop
    e264:	b003      	add	sp, #12
    e266:	f85d fb04 	ldr.w	pc, [sp], #4
    e26a:	bf00      	nop
    e26c:	1fff9074 	.word	0x1fff9074
    e270:	1fff9070 	.word	0x1fff9070

0000e274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e274:	b500      	push	{lr}
    e276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e278:	f7f3 f8f8 	bl	146c <Sys_GetCoreID>
    e27c:	4603      	mov	r3, r0
    e27e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    e280:	4a0d      	ldr	r2, [pc, #52]	; (e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e282:	9b01      	ldr	r3, [sp, #4]
    e284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e288:	1e5a      	subs	r2, r3, #1
    e28a:	490b      	ldr	r1, [pc, #44]	; (e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e28c:	9b01      	ldr	r3, [sp, #4]
    e28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e292:	4a0a      	ldr	r2, [pc, #40]	; (e2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e294:	9b01      	ldr	r3, [sp, #4]
    e296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29a:	f003 0301 	and.w	r3, r3, #1
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d106      	bne.n	e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e2a2:	4a05      	ldr	r2, [pc, #20]	; (e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e2a4:	9b01      	ldr	r3, [sp, #4]
    e2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d100      	bne.n	e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2b0:	bf00      	nop
    e2b2:	b003      	add	sp, #12
    e2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2b8:	1fff9074 	.word	0x1fff9074
    e2bc:	1fff9070 	.word	0x1fff9070

0000e2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e2c0:	b500      	push	{lr}
    e2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2c4:	f7f3 f8d2 	bl	146c <Sys_GetCoreID>
    e2c8:	4603      	mov	r3, r0
    e2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e2cc:	4a10      	ldr	r2, [pc, #64]	; (e310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e2ce:	9b01      	ldr	r3, [sp, #4]
    e2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d10d      	bne.n	e2f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2d8:	f7f2 faf8 	bl	8cc <Adc_schm_read_msr>
    e2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2de:	9b00      	ldr	r3, [sp, #0]
    e2e0:	f003 0301 	and.w	r3, r3, #1
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d100      	bne.n	e2ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e2ea:	490a      	ldr	r1, [pc, #40]	; (e314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e2ec:	9b01      	ldr	r3, [sp, #4]
    e2ee:	9a00      	ldr	r2, [sp, #0]
    e2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e2f4:	4a06      	ldr	r2, [pc, #24]	; (e310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e2f6:	9b01      	ldr	r3, [sp, #4]
    e2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2fc:	1c5a      	adds	r2, r3, #1
    e2fe:	4904      	ldr	r1, [pc, #16]	; (e310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e300:	9b01      	ldr	r3, [sp, #4]
    e302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e306:	bf00      	nop
    e308:	b003      	add	sp, #12
    e30a:	f85d fb04 	ldr.w	pc, [sp], #4
    e30e:	bf00      	nop
    e310:	1fff907c 	.word	0x1fff907c
    e314:	1fff9078 	.word	0x1fff9078

0000e318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e318:	b500      	push	{lr}
    e31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e31c:	f7f3 f8a6 	bl	146c <Sys_GetCoreID>
    e320:	4603      	mov	r3, r0
    e322:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e324:	4a0d      	ldr	r2, [pc, #52]	; (e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e326:	9b01      	ldr	r3, [sp, #4]
    e328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e32c:	1e5a      	subs	r2, r3, #1
    e32e:	490b      	ldr	r1, [pc, #44]	; (e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e330:	9b01      	ldr	r3, [sp, #4]
    e332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e336:	4a0a      	ldr	r2, [pc, #40]	; (e360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e338:	9b01      	ldr	r3, [sp, #4]
    e33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33e:	f003 0301 	and.w	r3, r3, #1
    e342:	2b00      	cmp	r3, #0
    e344:	d106      	bne.n	e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e346:	4a05      	ldr	r2, [pc, #20]	; (e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e348:	9b01      	ldr	r3, [sp, #4]
    e34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e34e:	2b00      	cmp	r3, #0
    e350:	d100      	bne.n	e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e354:	bf00      	nop
    e356:	b003      	add	sp, #12
    e358:	f85d fb04 	ldr.w	pc, [sp], #4
    e35c:	1fff907c 	.word	0x1fff907c
    e360:	1fff9078 	.word	0x1fff9078

0000e364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e364:	b500      	push	{lr}
    e366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e368:	f7f3 f880 	bl	146c <Sys_GetCoreID>
    e36c:	4603      	mov	r3, r0
    e36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e370:	4a10      	ldr	r2, [pc, #64]	; (e3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e372:	9b01      	ldr	r3, [sp, #4]
    e374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e378:	2b00      	cmp	r3, #0
    e37a:	d10d      	bne.n	e398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e37c:	f7f2 faa6 	bl	8cc <Adc_schm_read_msr>
    e380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e382:	9b00      	ldr	r3, [sp, #0]
    e384:	f003 0301 	and.w	r3, r3, #1
    e388:	2b00      	cmp	r3, #0
    e38a:	d100      	bne.n	e38e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e38e:	490a      	ldr	r1, [pc, #40]	; (e3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e390:	9b01      	ldr	r3, [sp, #4]
    e392:	9a00      	ldr	r2, [sp, #0]
    e394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e398:	4a06      	ldr	r2, [pc, #24]	; (e3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e39a:	9b01      	ldr	r3, [sp, #4]
    e39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a0:	1c5a      	adds	r2, r3, #1
    e3a2:	4904      	ldr	r1, [pc, #16]	; (e3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e3a4:	9b01      	ldr	r3, [sp, #4]
    e3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3aa:	bf00      	nop
    e3ac:	b003      	add	sp, #12
    e3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b2:	bf00      	nop
    e3b4:	1fff9084 	.word	0x1fff9084
    e3b8:	1fff9080 	.word	0x1fff9080

0000e3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e3bc:	b500      	push	{lr}
    e3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3c0:	f7f3 f854 	bl	146c <Sys_GetCoreID>
    e3c4:	4603      	mov	r3, r0
    e3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e3c8:	4a0d      	ldr	r2, [pc, #52]	; (e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e3ca:	9b01      	ldr	r3, [sp, #4]
    e3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d0:	1e5a      	subs	r2, r3, #1
    e3d2:	490b      	ldr	r1, [pc, #44]	; (e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e3da:	4a0a      	ldr	r2, [pc, #40]	; (e404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e3dc:	9b01      	ldr	r3, [sp, #4]
    e3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e2:	f003 0301 	and.w	r3, r3, #1
    e3e6:	2b00      	cmp	r3, #0
    e3e8:	d106      	bne.n	e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e3ea:	4a05      	ldr	r2, [pc, #20]	; (e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e3ec:	9b01      	ldr	r3, [sp, #4]
    e3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	d100      	bne.n	e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3f8:	bf00      	nop
    e3fa:	b003      	add	sp, #12
    e3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    e400:	1fff9084 	.word	0x1fff9084
    e404:	1fff9080 	.word	0x1fff9080

0000e408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e408:	b500      	push	{lr}
    e40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e40c:	f7f3 f82e 	bl	146c <Sys_GetCoreID>
    e410:	4603      	mov	r3, r0
    e412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e414:	4a10      	ldr	r2, [pc, #64]	; (e458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e416:	9b01      	ldr	r3, [sp, #4]
    e418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e41c:	2b00      	cmp	r3, #0
    e41e:	d10d      	bne.n	e43c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e420:	f7f2 fa54 	bl	8cc <Adc_schm_read_msr>
    e424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e426:	9b00      	ldr	r3, [sp, #0]
    e428:	f003 0301 	and.w	r3, r3, #1
    e42c:	2b00      	cmp	r3, #0
    e42e:	d100      	bne.n	e432 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e432:	490a      	ldr	r1, [pc, #40]	; (e45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e434:	9b01      	ldr	r3, [sp, #4]
    e436:	9a00      	ldr	r2, [sp, #0]
    e438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e43c:	4a06      	ldr	r2, [pc, #24]	; (e458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e43e:	9b01      	ldr	r3, [sp, #4]
    e440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e444:	1c5a      	adds	r2, r3, #1
    e446:	4904      	ldr	r1, [pc, #16]	; (e458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e448:	9b01      	ldr	r3, [sp, #4]
    e44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e44e:	bf00      	nop
    e450:	b003      	add	sp, #12
    e452:	f85d fb04 	ldr.w	pc, [sp], #4
    e456:	bf00      	nop
    e458:	1fff908c 	.word	0x1fff908c
    e45c:	1fff9088 	.word	0x1fff9088

0000e460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e460:	b500      	push	{lr}
    e462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e464:	f7f3 f802 	bl	146c <Sys_GetCoreID>
    e468:	4603      	mov	r3, r0
    e46a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e46c:	4a0d      	ldr	r2, [pc, #52]	; (e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e46e:	9b01      	ldr	r3, [sp, #4]
    e470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e474:	1e5a      	subs	r2, r3, #1
    e476:	490b      	ldr	r1, [pc, #44]	; (e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e47e:	4a0a      	ldr	r2, [pc, #40]	; (e4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e480:	9b01      	ldr	r3, [sp, #4]
    e482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e486:	f003 0301 	and.w	r3, r3, #1
    e48a:	2b00      	cmp	r3, #0
    e48c:	d106      	bne.n	e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e48e:	4a05      	ldr	r2, [pc, #20]	; (e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e490:	9b01      	ldr	r3, [sp, #4]
    e492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e496:	2b00      	cmp	r3, #0
    e498:	d100      	bne.n	e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e49c:	bf00      	nop
    e49e:	b003      	add	sp, #12
    e4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    e4a4:	1fff908c 	.word	0x1fff908c
    e4a8:	1fff9088 	.word	0x1fff9088

0000e4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e4ac:	b500      	push	{lr}
    e4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b0:	f7f2 ffdc 	bl	146c <Sys_GetCoreID>
    e4b4:	4603      	mov	r3, r0
    e4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e4b8:	4a10      	ldr	r2, [pc, #64]	; (e4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e4ba:	9b01      	ldr	r3, [sp, #4]
    e4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d10d      	bne.n	e4e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4c4:	f7f2 fa02 	bl	8cc <Adc_schm_read_msr>
    e4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4ca:	9b00      	ldr	r3, [sp, #0]
    e4cc:	f003 0301 	and.w	r3, r3, #1
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	d100      	bne.n	e4d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e4d6:	490a      	ldr	r1, [pc, #40]	; (e500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e4d8:	9b01      	ldr	r3, [sp, #4]
    e4da:	9a00      	ldr	r2, [sp, #0]
    e4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e4e0:	4a06      	ldr	r2, [pc, #24]	; (e4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e4e2:	9b01      	ldr	r3, [sp, #4]
    e4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e8:	1c5a      	adds	r2, r3, #1
    e4ea:	4904      	ldr	r1, [pc, #16]	; (e4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e4ec:	9b01      	ldr	r3, [sp, #4]
    e4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4f2:	bf00      	nop
    e4f4:	b003      	add	sp, #12
    e4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e4fa:	bf00      	nop
    e4fc:	1fff9094 	.word	0x1fff9094
    e500:	1fff9090 	.word	0x1fff9090

0000e504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e504:	b500      	push	{lr}
    e506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e508:	f7f2 ffb0 	bl	146c <Sys_GetCoreID>
    e50c:	4603      	mov	r3, r0
    e50e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e510:	4a0d      	ldr	r2, [pc, #52]	; (e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e512:	9b01      	ldr	r3, [sp, #4]
    e514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e518:	1e5a      	subs	r2, r3, #1
    e51a:	490b      	ldr	r1, [pc, #44]	; (e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e522:	4a0a      	ldr	r2, [pc, #40]	; (e54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e524:	9b01      	ldr	r3, [sp, #4]
    e526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52a:	f003 0301 	and.w	r3, r3, #1
    e52e:	2b00      	cmp	r3, #0
    e530:	d106      	bne.n	e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e532:	4a05      	ldr	r2, [pc, #20]	; (e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53a:	2b00      	cmp	r3, #0
    e53c:	d100      	bne.n	e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e540:	bf00      	nop
    e542:	b003      	add	sp, #12
    e544:	f85d fb04 	ldr.w	pc, [sp], #4
    e548:	1fff9094 	.word	0x1fff9094
    e54c:	1fff9090 	.word	0x1fff9090

0000e550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e550:	b500      	push	{lr}
    e552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e554:	f7f2 ff8a 	bl	146c <Sys_GetCoreID>
    e558:	4603      	mov	r3, r0
    e55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e55c:	4a10      	ldr	r2, [pc, #64]	; (e5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e55e:	9b01      	ldr	r3, [sp, #4]
    e560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e564:	2b00      	cmp	r3, #0
    e566:	d10d      	bne.n	e584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e568:	f7f2 f9b0 	bl	8cc <Adc_schm_read_msr>
    e56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e56e:	9b00      	ldr	r3, [sp, #0]
    e570:	f003 0301 	and.w	r3, r3, #1
    e574:	2b00      	cmp	r3, #0
    e576:	d100      	bne.n	e57a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e57a:	490a      	ldr	r1, [pc, #40]	; (e5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e57c:	9b01      	ldr	r3, [sp, #4]
    e57e:	9a00      	ldr	r2, [sp, #0]
    e580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e584:	4a06      	ldr	r2, [pc, #24]	; (e5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e586:	9b01      	ldr	r3, [sp, #4]
    e588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e58c:	1c5a      	adds	r2, r3, #1
    e58e:	4904      	ldr	r1, [pc, #16]	; (e5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e590:	9b01      	ldr	r3, [sp, #4]
    e592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e596:	bf00      	nop
    e598:	b003      	add	sp, #12
    e59a:	f85d fb04 	ldr.w	pc, [sp], #4
    e59e:	bf00      	nop
    e5a0:	1fff909c 	.word	0x1fff909c
    e5a4:	1fff9098 	.word	0x1fff9098

0000e5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e5a8:	b500      	push	{lr}
    e5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5ac:	f7f2 ff5e 	bl	146c <Sys_GetCoreID>
    e5b0:	4603      	mov	r3, r0
    e5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e5b4:	4a0d      	ldr	r2, [pc, #52]	; (e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e5b6:	9b01      	ldr	r3, [sp, #4]
    e5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5bc:	1e5a      	subs	r2, r3, #1
    e5be:	490b      	ldr	r1, [pc, #44]	; (e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e5c6:	4a0a      	ldr	r2, [pc, #40]	; (e5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e5c8:	9b01      	ldr	r3, [sp, #4]
    e5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5ce:	f003 0301 	and.w	r3, r3, #1
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d106      	bne.n	e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e5d6:	4a05      	ldr	r2, [pc, #20]	; (e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e5d8:	9b01      	ldr	r3, [sp, #4]
    e5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5de:	2b00      	cmp	r3, #0
    e5e0:	d100      	bne.n	e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5e4:	bf00      	nop
    e5e6:	b003      	add	sp, #12
    e5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    e5ec:	1fff909c 	.word	0x1fff909c
    e5f0:	1fff9098 	.word	0x1fff9098

0000e5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e5f4:	b500      	push	{lr}
    e5f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5f8:	f7f2 ff38 	bl	146c <Sys_GetCoreID>
    e5fc:	4603      	mov	r3, r0
    e5fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e600:	4a10      	ldr	r2, [pc, #64]	; (e644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e602:	9b01      	ldr	r3, [sp, #4]
    e604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e608:	2b00      	cmp	r3, #0
    e60a:	d10d      	bne.n	e628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e60c:	f7f2 f95e 	bl	8cc <Adc_schm_read_msr>
    e610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e612:	9b00      	ldr	r3, [sp, #0]
    e614:	f003 0301 	and.w	r3, r3, #1
    e618:	2b00      	cmp	r3, #0
    e61a:	d100      	bne.n	e61e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e61c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e61e:	490a      	ldr	r1, [pc, #40]	; (e648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e620:	9b01      	ldr	r3, [sp, #4]
    e622:	9a00      	ldr	r2, [sp, #0]
    e624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e628:	4a06      	ldr	r2, [pc, #24]	; (e644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e62a:	9b01      	ldr	r3, [sp, #4]
    e62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e630:	1c5a      	adds	r2, r3, #1
    e632:	4904      	ldr	r1, [pc, #16]	; (e644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e634:	9b01      	ldr	r3, [sp, #4]
    e636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e63a:	bf00      	nop
    e63c:	b003      	add	sp, #12
    e63e:	f85d fb04 	ldr.w	pc, [sp], #4
    e642:	bf00      	nop
    e644:	1fff90a4 	.word	0x1fff90a4
    e648:	1fff90a0 	.word	0x1fff90a0

0000e64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e64c:	b500      	push	{lr}
    e64e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e650:	f7f2 ff0c 	bl	146c <Sys_GetCoreID>
    e654:	4603      	mov	r3, r0
    e656:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e658:	4a0d      	ldr	r2, [pc, #52]	; (e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e65a:	9b01      	ldr	r3, [sp, #4]
    e65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e660:	1e5a      	subs	r2, r3, #1
    e662:	490b      	ldr	r1, [pc, #44]	; (e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e66a:	4a0a      	ldr	r2, [pc, #40]	; (e694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e66c:	9b01      	ldr	r3, [sp, #4]
    e66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e672:	f003 0301 	and.w	r3, r3, #1
    e676:	2b00      	cmp	r3, #0
    e678:	d106      	bne.n	e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e67a:	4a05      	ldr	r2, [pc, #20]	; (e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e682:	2b00      	cmp	r3, #0
    e684:	d100      	bne.n	e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e688:	bf00      	nop
    e68a:	b003      	add	sp, #12
    e68c:	f85d fb04 	ldr.w	pc, [sp], #4
    e690:	1fff90a4 	.word	0x1fff90a4
    e694:	1fff90a0 	.word	0x1fff90a0

0000e698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e698:	b500      	push	{lr}
    e69a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e69c:	f7f2 fee6 	bl	146c <Sys_GetCoreID>
    e6a0:	4603      	mov	r3, r0
    e6a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    e6a4:	4a10      	ldr	r2, [pc, #64]	; (e6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e6a6:	9b01      	ldr	r3, [sp, #4]
    e6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d10d      	bne.n	e6cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6b0:	f7f2 f90c 	bl	8cc <Adc_schm_read_msr>
    e6b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6b6:	9b00      	ldr	r3, [sp, #0]
    e6b8:	f003 0301 	and.w	r3, r3, #1
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d100      	bne.n	e6c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    e6c2:	490a      	ldr	r1, [pc, #40]	; (e6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    e6c4:	9b01      	ldr	r3, [sp, #4]
    e6c6:	9a00      	ldr	r2, [sp, #0]
    e6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    e6cc:	4a06      	ldr	r2, [pc, #24]	; (e6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e6ce:	9b01      	ldr	r3, [sp, #4]
    e6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d4:	1c5a      	adds	r2, r3, #1
    e6d6:	4904      	ldr	r1, [pc, #16]	; (e6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e6d8:	9b01      	ldr	r3, [sp, #4]
    e6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6de:	bf00      	nop
    e6e0:	b003      	add	sp, #12
    e6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    e6e6:	bf00      	nop
    e6e8:	1fff90ac 	.word	0x1fff90ac
    e6ec:	1fff90a8 	.word	0x1fff90a8

0000e6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e6f0:	b500      	push	{lr}
    e6f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f4:	f7f2 feba 	bl	146c <Sys_GetCoreID>
    e6f8:	4603      	mov	r3, r0
    e6fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    e6fc:	4a0d      	ldr	r2, [pc, #52]	; (e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e6fe:	9b01      	ldr	r3, [sp, #4]
    e700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e704:	1e5a      	subs	r2, r3, #1
    e706:	490b      	ldr	r1, [pc, #44]	; (e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    e70e:	4a0a      	ldr	r2, [pc, #40]	; (e738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    e710:	9b01      	ldr	r3, [sp, #4]
    e712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e716:	f003 0301 	and.w	r3, r3, #1
    e71a:	2b00      	cmp	r3, #0
    e71c:	d106      	bne.n	e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    e71e:	4a05      	ldr	r2, [pc, #20]	; (e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e720:	9b01      	ldr	r3, [sp, #4]
    e722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e726:	2b00      	cmp	r3, #0
    e728:	d100      	bne.n	e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e72a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e72c:	bf00      	nop
    e72e:	b003      	add	sp, #12
    e730:	f85d fb04 	ldr.w	pc, [sp], #4
    e734:	1fff90ac 	.word	0x1fff90ac
    e738:	1fff90a8 	.word	0x1fff90a8

0000e73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e73c:	b500      	push	{lr}
    e73e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e740:	f7f2 fe94 	bl	146c <Sys_GetCoreID>
    e744:	4603      	mov	r3, r0
    e746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    e748:	4a10      	ldr	r2, [pc, #64]	; (e78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e74a:	9b01      	ldr	r3, [sp, #4]
    e74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e750:	2b00      	cmp	r3, #0
    e752:	d10d      	bne.n	e770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e754:	f7f2 f8ba 	bl	8cc <Adc_schm_read_msr>
    e758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e75a:	9b00      	ldr	r3, [sp, #0]
    e75c:	f003 0301 	and.w	r3, r3, #1
    e760:	2b00      	cmp	r3, #0
    e762:	d100      	bne.n	e766 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    e766:	490a      	ldr	r1, [pc, #40]	; (e790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    e768:	9b01      	ldr	r3, [sp, #4]
    e76a:	9a00      	ldr	r2, [sp, #0]
    e76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    e770:	4a06      	ldr	r2, [pc, #24]	; (e78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e772:	9b01      	ldr	r3, [sp, #4]
    e774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e778:	1c5a      	adds	r2, r3, #1
    e77a:	4904      	ldr	r1, [pc, #16]	; (e78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e77c:	9b01      	ldr	r3, [sp, #4]
    e77e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e782:	bf00      	nop
    e784:	b003      	add	sp, #12
    e786:	f85d fb04 	ldr.w	pc, [sp], #4
    e78a:	bf00      	nop
    e78c:	1fff90b4 	.word	0x1fff90b4
    e790:	1fff90b0 	.word	0x1fff90b0

0000e794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e794:	b500      	push	{lr}
    e796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e798:	f7f2 fe68 	bl	146c <Sys_GetCoreID>
    e79c:	4603      	mov	r3, r0
    e79e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    e7a0:	4a0d      	ldr	r2, [pc, #52]	; (e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e7a2:	9b01      	ldr	r3, [sp, #4]
    e7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a8:	1e5a      	subs	r2, r3, #1
    e7aa:	490b      	ldr	r1, [pc, #44]	; (e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e7ac:	9b01      	ldr	r3, [sp, #4]
    e7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    e7b2:	4a0a      	ldr	r2, [pc, #40]	; (e7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    e7b4:	9b01      	ldr	r3, [sp, #4]
    e7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ba:	f003 0301 	and.w	r3, r3, #1
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d106      	bne.n	e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    e7c2:	4a05      	ldr	r2, [pc, #20]	; (e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e7c4:	9b01      	ldr	r3, [sp, #4]
    e7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d100      	bne.n	e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7d0:	bf00      	nop
    e7d2:	b003      	add	sp, #12
    e7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    e7d8:	1fff90b4 	.word	0x1fff90b4
    e7dc:	1fff90b0 	.word	0x1fff90b0

0000e7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e7e0:	b500      	push	{lr}
    e7e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7e4:	f7f2 fe42 	bl	146c <Sys_GetCoreID>
    e7e8:	4603      	mov	r3, r0
    e7ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    e7ec:	4a10      	ldr	r2, [pc, #64]	; (e830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e7ee:	9b01      	ldr	r3, [sp, #4]
    e7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d10d      	bne.n	e814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7f8:	f7f2 f868 	bl	8cc <Adc_schm_read_msr>
    e7fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7fe:	9b00      	ldr	r3, [sp, #0]
    e800:	f003 0301 	and.w	r3, r3, #1
    e804:	2b00      	cmp	r3, #0
    e806:	d100      	bne.n	e80a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    e80a:	490a      	ldr	r1, [pc, #40]	; (e834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    e80c:	9b01      	ldr	r3, [sp, #4]
    e80e:	9a00      	ldr	r2, [sp, #0]
    e810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    e814:	4a06      	ldr	r2, [pc, #24]	; (e830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e816:	9b01      	ldr	r3, [sp, #4]
    e818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81c:	1c5a      	adds	r2, r3, #1
    e81e:	4904      	ldr	r1, [pc, #16]	; (e830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e820:	9b01      	ldr	r3, [sp, #4]
    e822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e826:	bf00      	nop
    e828:	b003      	add	sp, #12
    e82a:	f85d fb04 	ldr.w	pc, [sp], #4
    e82e:	bf00      	nop
    e830:	1fff90bc 	.word	0x1fff90bc
    e834:	1fff90b8 	.word	0x1fff90b8

0000e838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e838:	b500      	push	{lr}
    e83a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e83c:	f7f2 fe16 	bl	146c <Sys_GetCoreID>
    e840:	4603      	mov	r3, r0
    e842:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    e844:	4a0d      	ldr	r2, [pc, #52]	; (e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e846:	9b01      	ldr	r3, [sp, #4]
    e848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e84c:	1e5a      	subs	r2, r3, #1
    e84e:	490b      	ldr	r1, [pc, #44]	; (e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e850:	9b01      	ldr	r3, [sp, #4]
    e852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    e856:	4a0a      	ldr	r2, [pc, #40]	; (e880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    e858:	9b01      	ldr	r3, [sp, #4]
    e85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e85e:	f003 0301 	and.w	r3, r3, #1
    e862:	2b00      	cmp	r3, #0
    e864:	d106      	bne.n	e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    e866:	4a05      	ldr	r2, [pc, #20]	; (e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e868:	9b01      	ldr	r3, [sp, #4]
    e86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e86e:	2b00      	cmp	r3, #0
    e870:	d100      	bne.n	e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e874:	bf00      	nop
    e876:	b003      	add	sp, #12
    e878:	f85d fb04 	ldr.w	pc, [sp], #4
    e87c:	1fff90bc 	.word	0x1fff90bc
    e880:	1fff90b8 	.word	0x1fff90b8

0000e884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e884:	b500      	push	{lr}
    e886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e888:	f7f2 fdf0 	bl	146c <Sys_GetCoreID>
    e88c:	4603      	mov	r3, r0
    e88e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    e890:	4a10      	ldr	r2, [pc, #64]	; (e8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e892:	9b01      	ldr	r3, [sp, #4]
    e894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e898:	2b00      	cmp	r3, #0
    e89a:	d10d      	bne.n	e8b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e89c:	f7f2 f816 	bl	8cc <Adc_schm_read_msr>
    e8a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8a2:	9b00      	ldr	r3, [sp, #0]
    e8a4:	f003 0301 	and.w	r3, r3, #1
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d100      	bne.n	e8ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    e8ae:	490a      	ldr	r1, [pc, #40]	; (e8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    e8b0:	9b01      	ldr	r3, [sp, #4]
    e8b2:	9a00      	ldr	r2, [sp, #0]
    e8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    e8b8:	4a06      	ldr	r2, [pc, #24]	; (e8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e8ba:	9b01      	ldr	r3, [sp, #4]
    e8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c0:	1c5a      	adds	r2, r3, #1
    e8c2:	4904      	ldr	r1, [pc, #16]	; (e8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e8c4:	9b01      	ldr	r3, [sp, #4]
    e8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8ca:	bf00      	nop
    e8cc:	b003      	add	sp, #12
    e8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d2:	bf00      	nop
    e8d4:	1fff90c4 	.word	0x1fff90c4
    e8d8:	1fff90c0 	.word	0x1fff90c0

0000e8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e8dc:	b500      	push	{lr}
    e8de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8e0:	f7f2 fdc4 	bl	146c <Sys_GetCoreID>
    e8e4:	4603      	mov	r3, r0
    e8e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    e8e8:	4a0d      	ldr	r2, [pc, #52]	; (e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e8ea:	9b01      	ldr	r3, [sp, #4]
    e8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8f0:	1e5a      	subs	r2, r3, #1
    e8f2:	490b      	ldr	r1, [pc, #44]	; (e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e8f4:	9b01      	ldr	r3, [sp, #4]
    e8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    e8fa:	4a0a      	ldr	r2, [pc, #40]	; (e924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    e8fc:	9b01      	ldr	r3, [sp, #4]
    e8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e902:	f003 0301 	and.w	r3, r3, #1
    e906:	2b00      	cmp	r3, #0
    e908:	d106      	bne.n	e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    e90a:	4a05      	ldr	r2, [pc, #20]	; (e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e90c:	9b01      	ldr	r3, [sp, #4]
    e90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e912:	2b00      	cmp	r3, #0
    e914:	d100      	bne.n	e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e918:	bf00      	nop
    e91a:	b003      	add	sp, #12
    e91c:	f85d fb04 	ldr.w	pc, [sp], #4
    e920:	1fff90c4 	.word	0x1fff90c4
    e924:	1fff90c0 	.word	0x1fff90c0

0000e928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e928:	b500      	push	{lr}
    e92a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e92c:	f7f2 fd9e 	bl	146c <Sys_GetCoreID>
    e930:	4603      	mov	r3, r0
    e932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    e934:	4a10      	ldr	r2, [pc, #64]	; (e978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e936:	9b01      	ldr	r3, [sp, #4]
    e938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d10d      	bne.n	e95c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e940:	f7f1 ffc4 	bl	8cc <Adc_schm_read_msr>
    e944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e946:	9b00      	ldr	r3, [sp, #0]
    e948:	f003 0301 	and.w	r3, r3, #1
    e94c:	2b00      	cmp	r3, #0
    e94e:	d100      	bne.n	e952 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    e952:	490a      	ldr	r1, [pc, #40]	; (e97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    e954:	9b01      	ldr	r3, [sp, #4]
    e956:	9a00      	ldr	r2, [sp, #0]
    e958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    e95c:	4a06      	ldr	r2, [pc, #24]	; (e978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e95e:	9b01      	ldr	r3, [sp, #4]
    e960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e964:	1c5a      	adds	r2, r3, #1
    e966:	4904      	ldr	r1, [pc, #16]	; (e978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e968:	9b01      	ldr	r3, [sp, #4]
    e96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e96e:	bf00      	nop
    e970:	b003      	add	sp, #12
    e972:	f85d fb04 	ldr.w	pc, [sp], #4
    e976:	bf00      	nop
    e978:	1fff90cc 	.word	0x1fff90cc
    e97c:	1fff90c8 	.word	0x1fff90c8

0000e980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e980:	b500      	push	{lr}
    e982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e984:	f7f2 fd72 	bl	146c <Sys_GetCoreID>
    e988:	4603      	mov	r3, r0
    e98a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    e98c:	4a0d      	ldr	r2, [pc, #52]	; (e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e98e:	9b01      	ldr	r3, [sp, #4]
    e990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e994:	1e5a      	subs	r2, r3, #1
    e996:	490b      	ldr	r1, [pc, #44]	; (e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    e99e:	4a0a      	ldr	r2, [pc, #40]	; (e9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    e9a0:	9b01      	ldr	r3, [sp, #4]
    e9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a6:	f003 0301 	and.w	r3, r3, #1
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d106      	bne.n	e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    e9ae:	4a05      	ldr	r2, [pc, #20]	; (e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e9b0:	9b01      	ldr	r3, [sp, #4]
    e9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d100      	bne.n	e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9bc:	bf00      	nop
    e9be:	b003      	add	sp, #12
    e9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e9c4:	1fff90cc 	.word	0x1fff90cc
    e9c8:	1fff90c8 	.word	0x1fff90c8

0000e9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e9cc:	b500      	push	{lr}
    e9ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d0:	f7f2 fd4c 	bl	146c <Sys_GetCoreID>
    e9d4:	4603      	mov	r3, r0
    e9d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    e9d8:	4a10      	ldr	r2, [pc, #64]	; (ea1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e9da:	9b01      	ldr	r3, [sp, #4]
    e9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d10d      	bne.n	ea00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9e4:	f7f1 ff72 	bl	8cc <Adc_schm_read_msr>
    e9e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ea:	9b00      	ldr	r3, [sp, #0]
    e9ec:	f003 0301 	and.w	r3, r3, #1
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d100      	bne.n	e9f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    e9f6:	490a      	ldr	r1, [pc, #40]	; (ea20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    e9f8:	9b01      	ldr	r3, [sp, #4]
    e9fa:	9a00      	ldr	r2, [sp, #0]
    e9fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    ea00:	4a06      	ldr	r2, [pc, #24]	; (ea1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    ea02:	9b01      	ldr	r3, [sp, #4]
    ea04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea08:	1c5a      	adds	r2, r3, #1
    ea0a:	4904      	ldr	r1, [pc, #16]	; (ea1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    ea0c:	9b01      	ldr	r3, [sp, #4]
    ea0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea12:	bf00      	nop
    ea14:	b003      	add	sp, #12
    ea16:	f85d fb04 	ldr.w	pc, [sp], #4
    ea1a:	bf00      	nop
    ea1c:	1fff90d4 	.word	0x1fff90d4
    ea20:	1fff90d0 	.word	0x1fff90d0

0000ea24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    ea24:	b500      	push	{lr}
    ea26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea28:	f7f2 fd20 	bl	146c <Sys_GetCoreID>
    ea2c:	4603      	mov	r3, r0
    ea2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    ea30:	4a0d      	ldr	r2, [pc, #52]	; (ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    ea32:	9b01      	ldr	r3, [sp, #4]
    ea34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea38:	1e5a      	subs	r2, r3, #1
    ea3a:	490b      	ldr	r1, [pc, #44]	; (ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    ea42:	4a0a      	ldr	r2, [pc, #40]	; (ea6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    ea44:	9b01      	ldr	r3, [sp, #4]
    ea46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea4a:	f003 0301 	and.w	r3, r3, #1
    ea4e:	2b00      	cmp	r3, #0
    ea50:	d106      	bne.n	ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    ea52:	4a05      	ldr	r2, [pc, #20]	; (ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    ea54:	9b01      	ldr	r3, [sp, #4]
    ea56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d100      	bne.n	ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea60:	bf00      	nop
    ea62:	b003      	add	sp, #12
    ea64:	f85d fb04 	ldr.w	pc, [sp], #4
    ea68:	1fff90d4 	.word	0x1fff90d4
    ea6c:	1fff90d0 	.word	0x1fff90d0

0000ea70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    ea70:	b500      	push	{lr}
    ea72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea74:	f7f2 fcfa 	bl	146c <Sys_GetCoreID>
    ea78:	4603      	mov	r3, r0
    ea7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    ea7c:	4a10      	ldr	r2, [pc, #64]	; (eac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    ea7e:	9b01      	ldr	r3, [sp, #4]
    ea80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea84:	2b00      	cmp	r3, #0
    ea86:	d10d      	bne.n	eaa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea88:	f7f1 ff20 	bl	8cc <Adc_schm_read_msr>
    ea8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea8e:	9b00      	ldr	r3, [sp, #0]
    ea90:	f003 0301 	and.w	r3, r3, #1
    ea94:	2b00      	cmp	r3, #0
    ea96:	d100      	bne.n	ea9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    ea9a:	490a      	ldr	r1, [pc, #40]	; (eac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    ea9c:	9b01      	ldr	r3, [sp, #4]
    ea9e:	9a00      	ldr	r2, [sp, #0]
    eaa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    eaa4:	4a06      	ldr	r2, [pc, #24]	; (eac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    eaa6:	9b01      	ldr	r3, [sp, #4]
    eaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaac:	1c5a      	adds	r2, r3, #1
    eaae:	4904      	ldr	r1, [pc, #16]	; (eac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    eab0:	9b01      	ldr	r3, [sp, #4]
    eab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eab6:	bf00      	nop
    eab8:	b003      	add	sp, #12
    eaba:	f85d fb04 	ldr.w	pc, [sp], #4
    eabe:	bf00      	nop
    eac0:	1fff90dc 	.word	0x1fff90dc
    eac4:	1fff90d8 	.word	0x1fff90d8

0000eac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    eac8:	b500      	push	{lr}
    eaca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eacc:	f7f2 fcce 	bl	146c <Sys_GetCoreID>
    ead0:	4603      	mov	r3, r0
    ead2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    ead4:	4a0d      	ldr	r2, [pc, #52]	; (eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    ead6:	9b01      	ldr	r3, [sp, #4]
    ead8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eadc:	1e5a      	subs	r2, r3, #1
    eade:	490b      	ldr	r1, [pc, #44]	; (eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    eae6:	4a0a      	ldr	r2, [pc, #40]	; (eb10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    eae8:	9b01      	ldr	r3, [sp, #4]
    eaea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaee:	f003 0301 	and.w	r3, r3, #1
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d106      	bne.n	eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    eaf6:	4a05      	ldr	r2, [pc, #20]	; (eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    eaf8:	9b01      	ldr	r3, [sp, #4]
    eafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d100      	bne.n	eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb04:	bf00      	nop
    eb06:	b003      	add	sp, #12
    eb08:	f85d fb04 	ldr.w	pc, [sp], #4
    eb0c:	1fff90dc 	.word	0x1fff90dc
    eb10:	1fff90d8 	.word	0x1fff90d8

0000eb14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    eb14:	b500      	push	{lr}
    eb16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb18:	f7f2 fca8 	bl	146c <Sys_GetCoreID>
    eb1c:	4603      	mov	r3, r0
    eb1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    eb20:	4a10      	ldr	r2, [pc, #64]	; (eb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    eb22:	9b01      	ldr	r3, [sp, #4]
    eb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d10d      	bne.n	eb48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb2c:	f7f1 fece 	bl	8cc <Adc_schm_read_msr>
    eb30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb32:	9b00      	ldr	r3, [sp, #0]
    eb34:	f003 0301 	and.w	r3, r3, #1
    eb38:	2b00      	cmp	r3, #0
    eb3a:	d100      	bne.n	eb3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    eb3e:	490a      	ldr	r1, [pc, #40]	; (eb68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    eb40:	9b01      	ldr	r3, [sp, #4]
    eb42:	9a00      	ldr	r2, [sp, #0]
    eb44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    eb48:	4a06      	ldr	r2, [pc, #24]	; (eb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    eb4a:	9b01      	ldr	r3, [sp, #4]
    eb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb50:	1c5a      	adds	r2, r3, #1
    eb52:	4904      	ldr	r1, [pc, #16]	; (eb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    eb54:	9b01      	ldr	r3, [sp, #4]
    eb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb5a:	bf00      	nop
    eb5c:	b003      	add	sp, #12
    eb5e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb62:	bf00      	nop
    eb64:	1fff90e4 	.word	0x1fff90e4
    eb68:	1fff90e0 	.word	0x1fff90e0

0000eb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    eb6c:	b500      	push	{lr}
    eb6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb70:	f7f2 fc7c 	bl	146c <Sys_GetCoreID>
    eb74:	4603      	mov	r3, r0
    eb76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    eb78:	4a0d      	ldr	r2, [pc, #52]	; (ebb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eb7a:	9b01      	ldr	r3, [sp, #4]
    eb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb80:	1e5a      	subs	r2, r3, #1
    eb82:	490b      	ldr	r1, [pc, #44]	; (ebb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    eb8a:	4a0a      	ldr	r2, [pc, #40]	; (ebb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    eb8c:	9b01      	ldr	r3, [sp, #4]
    eb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb92:	f003 0301 	and.w	r3, r3, #1
    eb96:	2b00      	cmp	r3, #0
    eb98:	d106      	bne.n	eba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    eb9a:	4a05      	ldr	r2, [pc, #20]	; (ebb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eb9c:	9b01      	ldr	r3, [sp, #4]
    eb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba2:	2b00      	cmp	r3, #0
    eba4:	d100      	bne.n	eba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eba8:	bf00      	nop
    ebaa:	b003      	add	sp, #12
    ebac:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb0:	1fff90e4 	.word	0x1fff90e4
    ebb4:	1fff90e0 	.word	0x1fff90e0

0000ebb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ebb8:	b500      	push	{lr}
    ebba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebbc:	f7f2 fc56 	bl	146c <Sys_GetCoreID>
    ebc0:	4603      	mov	r3, r0
    ebc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    ebc4:	4a10      	ldr	r2, [pc, #64]	; (ec08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ebc6:	9b01      	ldr	r3, [sp, #4]
    ebc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d10d      	bne.n	ebec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebd0:	f7f1 fe7c 	bl	8cc <Adc_schm_read_msr>
    ebd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebd6:	9b00      	ldr	r3, [sp, #0]
    ebd8:	f003 0301 	and.w	r3, r3, #1
    ebdc:	2b00      	cmp	r3, #0
    ebde:	d100      	bne.n	ebe2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    ebe2:	490a      	ldr	r1, [pc, #40]	; (ec0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    ebe4:	9b01      	ldr	r3, [sp, #4]
    ebe6:	9a00      	ldr	r2, [sp, #0]
    ebe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    ebec:	4a06      	ldr	r2, [pc, #24]	; (ec08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ebee:	9b01      	ldr	r3, [sp, #4]
    ebf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf4:	1c5a      	adds	r2, r3, #1
    ebf6:	4904      	ldr	r1, [pc, #16]	; (ec08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ebf8:	9b01      	ldr	r3, [sp, #4]
    ebfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebfe:	bf00      	nop
    ec00:	b003      	add	sp, #12
    ec02:	f85d fb04 	ldr.w	pc, [sp], #4
    ec06:	bf00      	nop
    ec08:	1fff90ec 	.word	0x1fff90ec
    ec0c:	1fff90e8 	.word	0x1fff90e8

0000ec10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ec10:	b500      	push	{lr}
    ec12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec14:	f7f2 fc2a 	bl	146c <Sys_GetCoreID>
    ec18:	4603      	mov	r3, r0
    ec1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    ec1c:	4a0d      	ldr	r2, [pc, #52]	; (ec54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ec1e:	9b01      	ldr	r3, [sp, #4]
    ec20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec24:	1e5a      	subs	r2, r3, #1
    ec26:	490b      	ldr	r1, [pc, #44]	; (ec54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ec28:	9b01      	ldr	r3, [sp, #4]
    ec2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    ec2e:	4a0a      	ldr	r2, [pc, #40]	; (ec58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    ec30:	9b01      	ldr	r3, [sp, #4]
    ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec36:	f003 0301 	and.w	r3, r3, #1
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	d106      	bne.n	ec4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    ec3e:	4a05      	ldr	r2, [pc, #20]	; (ec54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ec40:	9b01      	ldr	r3, [sp, #4]
    ec42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d100      	bne.n	ec4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec4c:	bf00      	nop
    ec4e:	b003      	add	sp, #12
    ec50:	f85d fb04 	ldr.w	pc, [sp], #4
    ec54:	1fff90ec 	.word	0x1fff90ec
    ec58:	1fff90e8 	.word	0x1fff90e8

0000ec5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    ec5c:	b500      	push	{lr}
    ec5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec60:	f7f2 fc04 	bl	146c <Sys_GetCoreID>
    ec64:	4603      	mov	r3, r0
    ec66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    ec68:	4a10      	ldr	r2, [pc, #64]	; (ecac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ec6a:	9b01      	ldr	r3, [sp, #4]
    ec6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec70:	2b00      	cmp	r3, #0
    ec72:	d10d      	bne.n	ec90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec74:	f7f1 fe2a 	bl	8cc <Adc_schm_read_msr>
    ec78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec7a:	9b00      	ldr	r3, [sp, #0]
    ec7c:	f003 0301 	and.w	r3, r3, #1
    ec80:	2b00      	cmp	r3, #0
    ec82:	d100      	bne.n	ec86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    ec86:	490a      	ldr	r1, [pc, #40]	; (ecb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    ec88:	9b01      	ldr	r3, [sp, #4]
    ec8a:	9a00      	ldr	r2, [sp, #0]
    ec8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    ec90:	4a06      	ldr	r2, [pc, #24]	; (ecac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ec92:	9b01      	ldr	r3, [sp, #4]
    ec94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec98:	1c5a      	adds	r2, r3, #1
    ec9a:	4904      	ldr	r1, [pc, #16]	; (ecac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ec9c:	9b01      	ldr	r3, [sp, #4]
    ec9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eca2:	bf00      	nop
    eca4:	b003      	add	sp, #12
    eca6:	f85d fb04 	ldr.w	pc, [sp], #4
    ecaa:	bf00      	nop
    ecac:	1fff90f4 	.word	0x1fff90f4
    ecb0:	1fff90f0 	.word	0x1fff90f0

0000ecb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    ecb4:	b500      	push	{lr}
    ecb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb8:	f7f2 fbd8 	bl	146c <Sys_GetCoreID>
    ecbc:	4603      	mov	r3, r0
    ecbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    ecc0:	4a0d      	ldr	r2, [pc, #52]	; (ecf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ecc2:	9b01      	ldr	r3, [sp, #4]
    ecc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc8:	1e5a      	subs	r2, r3, #1
    ecca:	490b      	ldr	r1, [pc, #44]	; (ecf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    ecd2:	4a0a      	ldr	r2, [pc, #40]	; (ecfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecda:	f003 0301 	and.w	r3, r3, #1
    ecde:	2b00      	cmp	r3, #0
    ece0:	d106      	bne.n	ecf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    ece2:	4a05      	ldr	r2, [pc, #20]	; (ecf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ece4:	9b01      	ldr	r3, [sp, #4]
    ece6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d100      	bne.n	ecf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecf0:	bf00      	nop
    ecf2:	b003      	add	sp, #12
    ecf4:	f85d fb04 	ldr.w	pc, [sp], #4
    ecf8:	1fff90f4 	.word	0x1fff90f4
    ecfc:	1fff90f0 	.word	0x1fff90f0

0000ed00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ed00:	b500      	push	{lr}
    ed02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed04:	f7f2 fbb2 	bl	146c <Sys_GetCoreID>
    ed08:	4603      	mov	r3, r0
    ed0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    ed0c:	4a10      	ldr	r2, [pc, #64]	; (ed50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ed0e:	9b01      	ldr	r3, [sp, #4]
    ed10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed14:	2b00      	cmp	r3, #0
    ed16:	d10d      	bne.n	ed34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed18:	f7f1 fdd8 	bl	8cc <Adc_schm_read_msr>
    ed1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed1e:	9b00      	ldr	r3, [sp, #0]
    ed20:	f003 0301 	and.w	r3, r3, #1
    ed24:	2b00      	cmp	r3, #0
    ed26:	d100      	bne.n	ed2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    ed2a:	490a      	ldr	r1, [pc, #40]	; (ed54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    ed2c:	9b01      	ldr	r3, [sp, #4]
    ed2e:	9a00      	ldr	r2, [sp, #0]
    ed30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    ed34:	4a06      	ldr	r2, [pc, #24]	; (ed50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ed36:	9b01      	ldr	r3, [sp, #4]
    ed38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed3c:	1c5a      	adds	r2, r3, #1
    ed3e:	4904      	ldr	r1, [pc, #16]	; (ed50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed46:	bf00      	nop
    ed48:	b003      	add	sp, #12
    ed4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed4e:	bf00      	nop
    ed50:	1fff90fc 	.word	0x1fff90fc
    ed54:	1fff90f8 	.word	0x1fff90f8

0000ed58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ed58:	b500      	push	{lr}
    ed5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed5c:	f7f2 fb86 	bl	146c <Sys_GetCoreID>
    ed60:	4603      	mov	r3, r0
    ed62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    ed64:	4a0d      	ldr	r2, [pc, #52]	; (ed9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ed66:	9b01      	ldr	r3, [sp, #4]
    ed68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed6c:	1e5a      	subs	r2, r3, #1
    ed6e:	490b      	ldr	r1, [pc, #44]	; (ed9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    ed76:	4a0a      	ldr	r2, [pc, #40]	; (eda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    ed78:	9b01      	ldr	r3, [sp, #4]
    ed7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed7e:	f003 0301 	and.w	r3, r3, #1
    ed82:	2b00      	cmp	r3, #0
    ed84:	d106      	bne.n	ed94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    ed86:	4a05      	ldr	r2, [pc, #20]	; (ed9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ed88:	9b01      	ldr	r3, [sp, #4]
    ed8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d100      	bne.n	ed94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed94:	bf00      	nop
    ed96:	b003      	add	sp, #12
    ed98:	f85d fb04 	ldr.w	pc, [sp], #4
    ed9c:	1fff90fc 	.word	0x1fff90fc
    eda0:	1fff90f8 	.word	0x1fff90f8

0000eda4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    eda4:	b500      	push	{lr}
    eda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eda8:	f7f2 fb60 	bl	146c <Sys_GetCoreID>
    edac:	4603      	mov	r3, r0
    edae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    edb0:	4a10      	ldr	r2, [pc, #64]	; (edf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    edb2:	9b01      	ldr	r3, [sp, #4]
    edb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb8:	2b00      	cmp	r3, #0
    edba:	d10d      	bne.n	edd8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edbc:	f7f1 fd8f 	bl	8de <Dio_schm_read_msr>
    edc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edc2:	9b00      	ldr	r3, [sp, #0]
    edc4:	f003 0301 	and.w	r3, r3, #1
    edc8:	2b00      	cmp	r3, #0
    edca:	d100      	bne.n	edce <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    edce:	490a      	ldr	r1, [pc, #40]	; (edf8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    edd0:	9b01      	ldr	r3, [sp, #4]
    edd2:	9a00      	ldr	r2, [sp, #0]
    edd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    edd8:	4a06      	ldr	r2, [pc, #24]	; (edf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    edda:	9b01      	ldr	r3, [sp, #4]
    eddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede0:	1c5a      	adds	r2, r3, #1
    ede2:	4904      	ldr	r1, [pc, #16]	; (edf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    ede4:	9b01      	ldr	r3, [sp, #4]
    ede6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edea:	bf00      	nop
    edec:	b003      	add	sp, #12
    edee:	f85d fb04 	ldr.w	pc, [sp], #4
    edf2:	bf00      	nop
    edf4:	1fff9104 	.word	0x1fff9104
    edf8:	1fff9100 	.word	0x1fff9100

0000edfc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    edfc:	b500      	push	{lr}
    edfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee00:	f7f2 fb34 	bl	146c <Sys_GetCoreID>
    ee04:	4603      	mov	r3, r0
    ee06:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    ee08:	4a0d      	ldr	r2, [pc, #52]	; (ee40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    ee0a:	9b01      	ldr	r3, [sp, #4]
    ee0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee10:	1e5a      	subs	r2, r3, #1
    ee12:	490b      	ldr	r1, [pc, #44]	; (ee40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    ee14:	9b01      	ldr	r3, [sp, #4]
    ee16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ee1a:	4a0a      	ldr	r2, [pc, #40]	; (ee44 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    ee1c:	9b01      	ldr	r3, [sp, #4]
    ee1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee22:	f003 0301 	and.w	r3, r3, #1
    ee26:	2b00      	cmp	r3, #0
    ee28:	d106      	bne.n	ee38 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    ee2a:	4a05      	ldr	r2, [pc, #20]	; (ee40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    ee2c:	9b01      	ldr	r3, [sp, #4]
    ee2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee32:	2b00      	cmp	r3, #0
    ee34:	d100      	bne.n	ee38 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee38:	bf00      	nop
    ee3a:	b003      	add	sp, #12
    ee3c:	f85d fb04 	ldr.w	pc, [sp], #4
    ee40:	1fff9104 	.word	0x1fff9104
    ee44:	1fff9100 	.word	0x1fff9100

0000ee48 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    ee48:	b500      	push	{lr}
    ee4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee4c:	f7f2 fb0e 	bl	146c <Sys_GetCoreID>
    ee50:	4603      	mov	r3, r0
    ee52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    ee54:	4a10      	ldr	r2, [pc, #64]	; (ee98 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	d10d      	bne.n	ee7c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee60:	f7f1 fd3d 	bl	8de <Dio_schm_read_msr>
    ee64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee66:	9b00      	ldr	r3, [sp, #0]
    ee68:	f003 0301 	and.w	r3, r3, #1
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d100      	bne.n	ee72 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ee72:	490a      	ldr	r1, [pc, #40]	; (ee9c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    ee74:	9b01      	ldr	r3, [sp, #4]
    ee76:	9a00      	ldr	r2, [sp, #0]
    ee78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    ee7c:	4a06      	ldr	r2, [pc, #24]	; (ee98 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    ee7e:	9b01      	ldr	r3, [sp, #4]
    ee80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee84:	1c5a      	adds	r2, r3, #1
    ee86:	4904      	ldr	r1, [pc, #16]	; (ee98 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    ee88:	9b01      	ldr	r3, [sp, #4]
    ee8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee8e:	bf00      	nop
    ee90:	b003      	add	sp, #12
    ee92:	f85d fb04 	ldr.w	pc, [sp], #4
    ee96:	bf00      	nop
    ee98:	1fff910c 	.word	0x1fff910c
    ee9c:	1fff9108 	.word	0x1fff9108

0000eea0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    eea0:	b500      	push	{lr}
    eea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eea4:	f7f2 fae2 	bl	146c <Sys_GetCoreID>
    eea8:	4603      	mov	r3, r0
    eeaa:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    eeac:	4a0d      	ldr	r2, [pc, #52]	; (eee4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    eeae:	9b01      	ldr	r3, [sp, #4]
    eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb4:	1e5a      	subs	r2, r3, #1
    eeb6:	490b      	ldr	r1, [pc, #44]	; (eee4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    eeb8:	9b01      	ldr	r3, [sp, #4]
    eeba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    eebe:	4a0a      	ldr	r2, [pc, #40]	; (eee8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    eec0:	9b01      	ldr	r3, [sp, #4]
    eec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec6:	f003 0301 	and.w	r3, r3, #1
    eeca:	2b00      	cmp	r3, #0
    eecc:	d106      	bne.n	eedc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    eece:	4a05      	ldr	r2, [pc, #20]	; (eee4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    eed0:	9b01      	ldr	r3, [sp, #4]
    eed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed6:	2b00      	cmp	r3, #0
    eed8:	d100      	bne.n	eedc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eeda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eedc:	bf00      	nop
    eede:	b003      	add	sp, #12
    eee0:	f85d fb04 	ldr.w	pc, [sp], #4
    eee4:	1fff910c 	.word	0x1fff910c
    eee8:	1fff9108 	.word	0x1fff9108

0000eeec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    eeec:	b500      	push	{lr}
    eeee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef0:	f7f2 fabc 	bl	146c <Sys_GetCoreID>
    eef4:	4603      	mov	r3, r0
    eef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    eef8:	4a10      	ldr	r2, [pc, #64]	; (ef3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eefa:	9b01      	ldr	r3, [sp, #4]
    eefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef00:	2b00      	cmp	r3, #0
    ef02:	d10d      	bne.n	ef20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef04:	f7f1 fcf4 	bl	8f0 <Mcu_schm_read_msr>
    ef08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef0a:	9b00      	ldr	r3, [sp, #0]
    ef0c:	f003 0301 	and.w	r3, r3, #1
    ef10:	2b00      	cmp	r3, #0
    ef12:	d100      	bne.n	ef16 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ef16:	490a      	ldr	r1, [pc, #40]	; (ef40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    ef18:	9b01      	ldr	r3, [sp, #4]
    ef1a:	9a00      	ldr	r2, [sp, #0]
    ef1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    ef20:	4a06      	ldr	r2, [pc, #24]	; (ef3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ef22:	9b01      	ldr	r3, [sp, #4]
    ef24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef28:	1c5a      	adds	r2, r3, #1
    ef2a:	4904      	ldr	r1, [pc, #16]	; (ef3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ef2c:	9b01      	ldr	r3, [sp, #4]
    ef2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef32:	bf00      	nop
    ef34:	b003      	add	sp, #12
    ef36:	f85d fb04 	ldr.w	pc, [sp], #4
    ef3a:	bf00      	nop
    ef3c:	1fff9114 	.word	0x1fff9114
    ef40:	1fff9110 	.word	0x1fff9110

0000ef44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    ef44:	b500      	push	{lr}
    ef46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef48:	f7f2 fa90 	bl	146c <Sys_GetCoreID>
    ef4c:	4603      	mov	r3, r0
    ef4e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    ef50:	4a0d      	ldr	r2, [pc, #52]	; (ef88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ef52:	9b01      	ldr	r3, [sp, #4]
    ef54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef58:	1e5a      	subs	r2, r3, #1
    ef5a:	490b      	ldr	r1, [pc, #44]	; (ef88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ef5c:	9b01      	ldr	r3, [sp, #4]
    ef5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ef62:	4a0a      	ldr	r2, [pc, #40]	; (ef8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    ef64:	9b01      	ldr	r3, [sp, #4]
    ef66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef6a:	f003 0301 	and.w	r3, r3, #1
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d106      	bne.n	ef80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    ef72:	4a05      	ldr	r2, [pc, #20]	; (ef88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ef74:	9b01      	ldr	r3, [sp, #4]
    ef76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d100      	bne.n	ef80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef80:	bf00      	nop
    ef82:	b003      	add	sp, #12
    ef84:	f85d fb04 	ldr.w	pc, [sp], #4
    ef88:	1fff9114 	.word	0x1fff9114
    ef8c:	1fff9110 	.word	0x1fff9110

0000ef90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ef90:	b500      	push	{lr}
    ef92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef94:	f7f2 fa6a 	bl	146c <Sys_GetCoreID>
    ef98:	4603      	mov	r3, r0
    ef9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    ef9c:	4a10      	ldr	r2, [pc, #64]	; (efe0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ef9e:	9b01      	ldr	r3, [sp, #4]
    efa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efa4:	2b00      	cmp	r3, #0
    efa6:	d10d      	bne.n	efc4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efa8:	f7f1 fca2 	bl	8f0 <Mcu_schm_read_msr>
    efac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efae:	9b00      	ldr	r3, [sp, #0]
    efb0:	f003 0301 	and.w	r3, r3, #1
    efb4:	2b00      	cmp	r3, #0
    efb6:	d100      	bne.n	efba <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    efba:	490a      	ldr	r1, [pc, #40]	; (efe4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    efbc:	9b01      	ldr	r3, [sp, #4]
    efbe:	9a00      	ldr	r2, [sp, #0]
    efc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    efc4:	4a06      	ldr	r2, [pc, #24]	; (efe0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    efc6:	9b01      	ldr	r3, [sp, #4]
    efc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efcc:	1c5a      	adds	r2, r3, #1
    efce:	4904      	ldr	r1, [pc, #16]	; (efe0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    efd0:	9b01      	ldr	r3, [sp, #4]
    efd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efd6:	bf00      	nop
    efd8:	b003      	add	sp, #12
    efda:	f85d fb04 	ldr.w	pc, [sp], #4
    efde:	bf00      	nop
    efe0:	1fff911c 	.word	0x1fff911c
    efe4:	1fff9118 	.word	0x1fff9118

0000efe8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    efe8:	b500      	push	{lr}
    efea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efec:	f7f2 fa3e 	bl	146c <Sys_GetCoreID>
    eff0:	4603      	mov	r3, r0
    eff2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    eff4:	4a0d      	ldr	r2, [pc, #52]	; (f02c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    eff6:	9b01      	ldr	r3, [sp, #4]
    eff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    effc:	1e5a      	subs	r2, r3, #1
    effe:	490b      	ldr	r1, [pc, #44]	; (f02c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f006:	4a0a      	ldr	r2, [pc, #40]	; (f030 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    f008:	9b01      	ldr	r3, [sp, #4]
    f00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f00e:	f003 0301 	and.w	r3, r3, #1
    f012:	2b00      	cmp	r3, #0
    f014:	d106      	bne.n	f024 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    f016:	4a05      	ldr	r2, [pc, #20]	; (f02c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f018:	9b01      	ldr	r3, [sp, #4]
    f01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f01e:	2b00      	cmp	r3, #0
    f020:	d100      	bne.n	f024 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f024:	bf00      	nop
    f026:	b003      	add	sp, #12
    f028:	f85d fb04 	ldr.w	pc, [sp], #4
    f02c:	1fff911c 	.word	0x1fff911c
    f030:	1fff9118 	.word	0x1fff9118

0000f034 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    f034:	b500      	push	{lr}
    f036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f038:	f7f2 fa18 	bl	146c <Sys_GetCoreID>
    f03c:	4603      	mov	r3, r0
    f03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    f040:	4a10      	ldr	r2, [pc, #64]	; (f084 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f042:	9b01      	ldr	r3, [sp, #4]
    f044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f048:	2b00      	cmp	r3, #0
    f04a:	d10d      	bne.n	f068 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f04c:	f7f1 fc50 	bl	8f0 <Mcu_schm_read_msr>
    f050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f052:	9b00      	ldr	r3, [sp, #0]
    f054:	f003 0301 	and.w	r3, r3, #1
    f058:	2b00      	cmp	r3, #0
    f05a:	d100      	bne.n	f05e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f05e:	490a      	ldr	r1, [pc, #40]	; (f088 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    f060:	9b01      	ldr	r3, [sp, #4]
    f062:	9a00      	ldr	r2, [sp, #0]
    f064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    f068:	4a06      	ldr	r2, [pc, #24]	; (f084 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f06a:	9b01      	ldr	r3, [sp, #4]
    f06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f070:	1c5a      	adds	r2, r3, #1
    f072:	4904      	ldr	r1, [pc, #16]	; (f084 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f074:	9b01      	ldr	r3, [sp, #4]
    f076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f07a:	bf00      	nop
    f07c:	b003      	add	sp, #12
    f07e:	f85d fb04 	ldr.w	pc, [sp], #4
    f082:	bf00      	nop
    f084:	1fff9124 	.word	0x1fff9124
    f088:	1fff9120 	.word	0x1fff9120

0000f08c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    f08c:	b500      	push	{lr}
    f08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f090:	f7f2 f9ec 	bl	146c <Sys_GetCoreID>
    f094:	4603      	mov	r3, r0
    f096:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    f098:	4a0d      	ldr	r2, [pc, #52]	; (f0d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f09a:	9b01      	ldr	r3, [sp, #4]
    f09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a0:	1e5a      	subs	r2, r3, #1
    f0a2:	490b      	ldr	r1, [pc, #44]	; (f0d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f0a4:	9b01      	ldr	r3, [sp, #4]
    f0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f0aa:	4a0a      	ldr	r2, [pc, #40]	; (f0d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    f0ac:	9b01      	ldr	r3, [sp, #4]
    f0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b2:	f003 0301 	and.w	r3, r3, #1
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d106      	bne.n	f0c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    f0ba:	4a05      	ldr	r2, [pc, #20]	; (f0d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f0bc:	9b01      	ldr	r3, [sp, #4]
    f0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c2:	2b00      	cmp	r3, #0
    f0c4:	d100      	bne.n	f0c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0c8:	bf00      	nop
    f0ca:	b003      	add	sp, #12
    f0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d0:	1fff9124 	.word	0x1fff9124
    f0d4:	1fff9120 	.word	0x1fff9120

0000f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    f0d8:	b500      	push	{lr}
    f0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0dc:	f7f2 f9c6 	bl	146c <Sys_GetCoreID>
    f0e0:	4603      	mov	r3, r0
    f0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    f0e4:	4a10      	ldr	r2, [pc, #64]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f0e6:	9b01      	ldr	r3, [sp, #4]
    f0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ec:	2b00      	cmp	r3, #0
    f0ee:	d10d      	bne.n	f10c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0f0:	f7f1 fc07 	bl	902 <Port_schm_read_msr>
    f0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0f6:	9b00      	ldr	r3, [sp, #0]
    f0f8:	f003 0301 	and.w	r3, r3, #1
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d100      	bne.n	f102 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f102:	490a      	ldr	r1, [pc, #40]	; (f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    f104:	9b01      	ldr	r3, [sp, #4]
    f106:	9a00      	ldr	r2, [sp, #0]
    f108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    f10c:	4a06      	ldr	r2, [pc, #24]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f10e:	9b01      	ldr	r3, [sp, #4]
    f110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f114:	1c5a      	adds	r2, r3, #1
    f116:	4904      	ldr	r1, [pc, #16]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f118:	9b01      	ldr	r3, [sp, #4]
    f11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f11e:	bf00      	nop
    f120:	b003      	add	sp, #12
    f122:	f85d fb04 	ldr.w	pc, [sp], #4
    f126:	bf00      	nop
    f128:	1fff912c 	.word	0x1fff912c
    f12c:	1fff9128 	.word	0x1fff9128

0000f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    f130:	b500      	push	{lr}
    f132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f134:	f7f2 f99a 	bl	146c <Sys_GetCoreID>
    f138:	4603      	mov	r3, r0
    f13a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    f13c:	4a0d      	ldr	r2, [pc, #52]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f13e:	9b01      	ldr	r3, [sp, #4]
    f140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f144:	1e5a      	subs	r2, r3, #1
    f146:	490b      	ldr	r1, [pc, #44]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f14e:	4a0a      	ldr	r2, [pc, #40]	; (f178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    f150:	9b01      	ldr	r3, [sp, #4]
    f152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f156:	f003 0301 	and.w	r3, r3, #1
    f15a:	2b00      	cmp	r3, #0
    f15c:	d106      	bne.n	f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    f15e:	4a05      	ldr	r2, [pc, #20]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f160:	9b01      	ldr	r3, [sp, #4]
    f162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f166:	2b00      	cmp	r3, #0
    f168:	d100      	bne.n	f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f16c:	bf00      	nop
    f16e:	b003      	add	sp, #12
    f170:	f85d fb04 	ldr.w	pc, [sp], #4
    f174:	1fff912c 	.word	0x1fff912c
    f178:	1fff9128 	.word	0x1fff9128

0000f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    f17c:	b500      	push	{lr}
    f17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f180:	f7f2 f974 	bl	146c <Sys_GetCoreID>
    f184:	4603      	mov	r3, r0
    f186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    f188:	4a10      	ldr	r2, [pc, #64]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f18a:	9b01      	ldr	r3, [sp, #4]
    f18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f190:	2b00      	cmp	r3, #0
    f192:	d10d      	bne.n	f1b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f194:	f7f1 fbb5 	bl	902 <Port_schm_read_msr>
    f198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f19a:	9b00      	ldr	r3, [sp, #0]
    f19c:	f003 0301 	and.w	r3, r3, #1
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	d100      	bne.n	f1a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f1a6:	490a      	ldr	r1, [pc, #40]	; (f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    f1a8:	9b01      	ldr	r3, [sp, #4]
    f1aa:	9a00      	ldr	r2, [sp, #0]
    f1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    f1b0:	4a06      	ldr	r2, [pc, #24]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f1b2:	9b01      	ldr	r3, [sp, #4]
    f1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1b8:	1c5a      	adds	r2, r3, #1
    f1ba:	4904      	ldr	r1, [pc, #16]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f1bc:	9b01      	ldr	r3, [sp, #4]
    f1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1c2:	bf00      	nop
    f1c4:	b003      	add	sp, #12
    f1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ca:	bf00      	nop
    f1cc:	1fff9134 	.word	0x1fff9134
    f1d0:	1fff9130 	.word	0x1fff9130

0000f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    f1d4:	b500      	push	{lr}
    f1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d8:	f7f2 f948 	bl	146c <Sys_GetCoreID>
    f1dc:	4603      	mov	r3, r0
    f1de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    f1e0:	4a0d      	ldr	r2, [pc, #52]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f1e2:	9b01      	ldr	r3, [sp, #4]
    f1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e8:	1e5a      	subs	r2, r3, #1
    f1ea:	490b      	ldr	r1, [pc, #44]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f1ec:	9b01      	ldr	r3, [sp, #4]
    f1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f1f2:	4a0a      	ldr	r2, [pc, #40]	; (f21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    f1f4:	9b01      	ldr	r3, [sp, #4]
    f1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1fa:	f003 0301 	and.w	r3, r3, #1
    f1fe:	2b00      	cmp	r3, #0
    f200:	d106      	bne.n	f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    f202:	4a05      	ldr	r2, [pc, #20]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f204:	9b01      	ldr	r3, [sp, #4]
    f206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20a:	2b00      	cmp	r3, #0
    f20c:	d100      	bne.n	f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f210:	bf00      	nop
    f212:	b003      	add	sp, #12
    f214:	f85d fb04 	ldr.w	pc, [sp], #4
    f218:	1fff9134 	.word	0x1fff9134
    f21c:	1fff9130 	.word	0x1fff9130

0000f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f220:	b500      	push	{lr}
    f222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f224:	f7f2 f922 	bl	146c <Sys_GetCoreID>
    f228:	4603      	mov	r3, r0
    f22a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    f22c:	4a10      	ldr	r2, [pc, #64]	; (f270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f22e:	9b01      	ldr	r3, [sp, #4]
    f230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f234:	2b00      	cmp	r3, #0
    f236:	d10d      	bne.n	f254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f238:	f7f1 fb63 	bl	902 <Port_schm_read_msr>
    f23c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f23e:	9b00      	ldr	r3, [sp, #0]
    f240:	f003 0301 	and.w	r3, r3, #1
    f244:	2b00      	cmp	r3, #0
    f246:	d100      	bne.n	f24a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f24a:	490a      	ldr	r1, [pc, #40]	; (f274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    f24c:	9b01      	ldr	r3, [sp, #4]
    f24e:	9a00      	ldr	r2, [sp, #0]
    f250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    f254:	4a06      	ldr	r2, [pc, #24]	; (f270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f256:	9b01      	ldr	r3, [sp, #4]
    f258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f25c:	1c5a      	adds	r2, r3, #1
    f25e:	4904      	ldr	r1, [pc, #16]	; (f270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f260:	9b01      	ldr	r3, [sp, #4]
    f262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f266:	bf00      	nop
    f268:	b003      	add	sp, #12
    f26a:	f85d fb04 	ldr.w	pc, [sp], #4
    f26e:	bf00      	nop
    f270:	1fff913c 	.word	0x1fff913c
    f274:	1fff9138 	.word	0x1fff9138

0000f278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f278:	b500      	push	{lr}
    f27a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f27c:	f7f2 f8f6 	bl	146c <Sys_GetCoreID>
    f280:	4603      	mov	r3, r0
    f282:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    f284:	4a0d      	ldr	r2, [pc, #52]	; (f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f286:	9b01      	ldr	r3, [sp, #4]
    f288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f28c:	1e5a      	subs	r2, r3, #1
    f28e:	490b      	ldr	r1, [pc, #44]	; (f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f296:	4a0a      	ldr	r2, [pc, #40]	; (f2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    f298:	9b01      	ldr	r3, [sp, #4]
    f29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f29e:	f003 0301 	and.w	r3, r3, #1
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d106      	bne.n	f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    f2a6:	4a05      	ldr	r2, [pc, #20]	; (f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f2a8:	9b01      	ldr	r3, [sp, #4]
    f2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2ae:	2b00      	cmp	r3, #0
    f2b0:	d100      	bne.n	f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2b4:	bf00      	nop
    f2b6:	b003      	add	sp, #12
    f2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    f2bc:	1fff913c 	.word	0x1fff913c
    f2c0:	1fff9138 	.word	0x1fff9138

0000f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f2c4:	b500      	push	{lr}
    f2c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2c8:	f7f2 f8d0 	bl	146c <Sys_GetCoreID>
    f2cc:	4603      	mov	r3, r0
    f2ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    f2d0:	4a10      	ldr	r2, [pc, #64]	; (f314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f2d2:	9b01      	ldr	r3, [sp, #4]
    f2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d8:	2b00      	cmp	r3, #0
    f2da:	d10d      	bne.n	f2f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2dc:	f7f1 fb11 	bl	902 <Port_schm_read_msr>
    f2e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2e2:	9b00      	ldr	r3, [sp, #0]
    f2e4:	f003 0301 	and.w	r3, r3, #1
    f2e8:	2b00      	cmp	r3, #0
    f2ea:	d100      	bne.n	f2ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f2ee:	490a      	ldr	r1, [pc, #40]	; (f318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    f2f0:	9b01      	ldr	r3, [sp, #4]
    f2f2:	9a00      	ldr	r2, [sp, #0]
    f2f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    f2f8:	4a06      	ldr	r2, [pc, #24]	; (f314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f2fa:	9b01      	ldr	r3, [sp, #4]
    f2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f300:	1c5a      	adds	r2, r3, #1
    f302:	4904      	ldr	r1, [pc, #16]	; (f314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f304:	9b01      	ldr	r3, [sp, #4]
    f306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f30a:	bf00      	nop
    f30c:	b003      	add	sp, #12
    f30e:	f85d fb04 	ldr.w	pc, [sp], #4
    f312:	bf00      	nop
    f314:	1fff9144 	.word	0x1fff9144
    f318:	1fff9140 	.word	0x1fff9140

0000f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f31c:	b500      	push	{lr}
    f31e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f320:	f7f2 f8a4 	bl	146c <Sys_GetCoreID>
    f324:	4603      	mov	r3, r0
    f326:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    f328:	4a0d      	ldr	r2, [pc, #52]	; (f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f32a:	9b01      	ldr	r3, [sp, #4]
    f32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f330:	1e5a      	subs	r2, r3, #1
    f332:	490b      	ldr	r1, [pc, #44]	; (f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f334:	9b01      	ldr	r3, [sp, #4]
    f336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f33a:	4a0a      	ldr	r2, [pc, #40]	; (f364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    f33c:	9b01      	ldr	r3, [sp, #4]
    f33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f342:	f003 0301 	and.w	r3, r3, #1
    f346:	2b00      	cmp	r3, #0
    f348:	d106      	bne.n	f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    f34a:	4a05      	ldr	r2, [pc, #20]	; (f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f34c:	9b01      	ldr	r3, [sp, #4]
    f34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f352:	2b00      	cmp	r3, #0
    f354:	d100      	bne.n	f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f358:	bf00      	nop
    f35a:	b003      	add	sp, #12
    f35c:	f85d fb04 	ldr.w	pc, [sp], #4
    f360:	1fff9144 	.word	0x1fff9144
    f364:	1fff9140 	.word	0x1fff9140

0000f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f368:	b500      	push	{lr}
    f36a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f36c:	f7f2 f87e 	bl	146c <Sys_GetCoreID>
    f370:	4603      	mov	r3, r0
    f372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    f374:	4a10      	ldr	r2, [pc, #64]	; (f3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f376:	9b01      	ldr	r3, [sp, #4]
    f378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f37c:	2b00      	cmp	r3, #0
    f37e:	d10d      	bne.n	f39c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f380:	f7f1 fabf 	bl	902 <Port_schm_read_msr>
    f384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f386:	9b00      	ldr	r3, [sp, #0]
    f388:	f003 0301 	and.w	r3, r3, #1
    f38c:	2b00      	cmp	r3, #0
    f38e:	d100      	bne.n	f392 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f392:	490a      	ldr	r1, [pc, #40]	; (f3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    f394:	9b01      	ldr	r3, [sp, #4]
    f396:	9a00      	ldr	r2, [sp, #0]
    f398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    f39c:	4a06      	ldr	r2, [pc, #24]	; (f3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f39e:	9b01      	ldr	r3, [sp, #4]
    f3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a4:	1c5a      	adds	r2, r3, #1
    f3a6:	4904      	ldr	r1, [pc, #16]	; (f3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f3a8:	9b01      	ldr	r3, [sp, #4]
    f3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3ae:	bf00      	nop
    f3b0:	b003      	add	sp, #12
    f3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    f3b6:	bf00      	nop
    f3b8:	1fff914c 	.word	0x1fff914c
    f3bc:	1fff9148 	.word	0x1fff9148

0000f3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f3c0:	b500      	push	{lr}
    f3c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3c4:	f7f2 f852 	bl	146c <Sys_GetCoreID>
    f3c8:	4603      	mov	r3, r0
    f3ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    f3cc:	4a0d      	ldr	r2, [pc, #52]	; (f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f3ce:	9b01      	ldr	r3, [sp, #4]
    f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3d4:	1e5a      	subs	r2, r3, #1
    f3d6:	490b      	ldr	r1, [pc, #44]	; (f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f3d8:	9b01      	ldr	r3, [sp, #4]
    f3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f3de:	4a0a      	ldr	r2, [pc, #40]	; (f408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f3e0:	9b01      	ldr	r3, [sp, #4]
    f3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e6:	f003 0301 	and.w	r3, r3, #1
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	d106      	bne.n	f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f3ee:	4a05      	ldr	r2, [pc, #20]	; (f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f3f0:	9b01      	ldr	r3, [sp, #4]
    f3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	d100      	bne.n	f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3fc:	bf00      	nop
    f3fe:	b003      	add	sp, #12
    f400:	f85d fb04 	ldr.w	pc, [sp], #4
    f404:	1fff914c 	.word	0x1fff914c
    f408:	1fff9148 	.word	0x1fff9148

0000f40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f40c:	b500      	push	{lr}
    f40e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f410:	f7f2 f82c 	bl	146c <Sys_GetCoreID>
    f414:	4603      	mov	r3, r0
    f416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f418:	4a10      	ldr	r2, [pc, #64]	; (f45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f41a:	9b01      	ldr	r3, [sp, #4]
    f41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f420:	2b00      	cmp	r3, #0
    f422:	d10d      	bne.n	f440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f424:	f7f1 fa6d 	bl	902 <Port_schm_read_msr>
    f428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f42a:	9b00      	ldr	r3, [sp, #0]
    f42c:	f003 0301 	and.w	r3, r3, #1
    f430:	2b00      	cmp	r3, #0
    f432:	d100      	bne.n	f436 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f436:	490a      	ldr	r1, [pc, #40]	; (f460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f438:	9b01      	ldr	r3, [sp, #4]
    f43a:	9a00      	ldr	r2, [sp, #0]
    f43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f440:	4a06      	ldr	r2, [pc, #24]	; (f45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f442:	9b01      	ldr	r3, [sp, #4]
    f444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f448:	1c5a      	adds	r2, r3, #1
    f44a:	4904      	ldr	r1, [pc, #16]	; (f45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f44c:	9b01      	ldr	r3, [sp, #4]
    f44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f452:	bf00      	nop
    f454:	b003      	add	sp, #12
    f456:	f85d fb04 	ldr.w	pc, [sp], #4
    f45a:	bf00      	nop
    f45c:	1fff9154 	.word	0x1fff9154
    f460:	1fff9150 	.word	0x1fff9150

0000f464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f464:	b500      	push	{lr}
    f466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f468:	f7f2 f800 	bl	146c <Sys_GetCoreID>
    f46c:	4603      	mov	r3, r0
    f46e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f470:	4a0d      	ldr	r2, [pc, #52]	; (f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f472:	9b01      	ldr	r3, [sp, #4]
    f474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f478:	1e5a      	subs	r2, r3, #1
    f47a:	490b      	ldr	r1, [pc, #44]	; (f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f47c:	9b01      	ldr	r3, [sp, #4]
    f47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f482:	4a0a      	ldr	r2, [pc, #40]	; (f4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f484:	9b01      	ldr	r3, [sp, #4]
    f486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f48a:	f003 0301 	and.w	r3, r3, #1
    f48e:	2b00      	cmp	r3, #0
    f490:	d106      	bne.n	f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f492:	4a05      	ldr	r2, [pc, #20]	; (f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f494:	9b01      	ldr	r3, [sp, #4]
    f496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f49a:	2b00      	cmp	r3, #0
    f49c:	d100      	bne.n	f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f49e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4a0:	bf00      	nop
    f4a2:	b003      	add	sp, #12
    f4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    f4a8:	1fff9154 	.word	0x1fff9154
    f4ac:	1fff9150 	.word	0x1fff9150

0000f4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f4b0:	b500      	push	{lr}
    f4b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4b4:	f7f1 ffda 	bl	146c <Sys_GetCoreID>
    f4b8:	4603      	mov	r3, r0
    f4ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f4bc:	4a10      	ldr	r2, [pc, #64]	; (f500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f4be:	9b01      	ldr	r3, [sp, #4]
    f4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d10d      	bne.n	f4e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4c8:	f7f1 fa1b 	bl	902 <Port_schm_read_msr>
    f4cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4ce:	9b00      	ldr	r3, [sp, #0]
    f4d0:	f003 0301 	and.w	r3, r3, #1
    f4d4:	2b00      	cmp	r3, #0
    f4d6:	d100      	bne.n	f4da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f4da:	490a      	ldr	r1, [pc, #40]	; (f504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f4dc:	9b01      	ldr	r3, [sp, #4]
    f4de:	9a00      	ldr	r2, [sp, #0]
    f4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f4e4:	4a06      	ldr	r2, [pc, #24]	; (f500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f4e6:	9b01      	ldr	r3, [sp, #4]
    f4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ec:	1c5a      	adds	r2, r3, #1
    f4ee:	4904      	ldr	r1, [pc, #16]	; (f500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f4f0:	9b01      	ldr	r3, [sp, #4]
    f4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4f6:	bf00      	nop
    f4f8:	b003      	add	sp, #12
    f4fa:	f85d fb04 	ldr.w	pc, [sp], #4
    f4fe:	bf00      	nop
    f500:	1fff915c 	.word	0x1fff915c
    f504:	1fff9158 	.word	0x1fff9158

0000f508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f508:	b500      	push	{lr}
    f50a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f50c:	f7f1 ffae 	bl	146c <Sys_GetCoreID>
    f510:	4603      	mov	r3, r0
    f512:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f514:	4a0d      	ldr	r2, [pc, #52]	; (f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f516:	9b01      	ldr	r3, [sp, #4]
    f518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f51c:	1e5a      	subs	r2, r3, #1
    f51e:	490b      	ldr	r1, [pc, #44]	; (f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f520:	9b01      	ldr	r3, [sp, #4]
    f522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f526:	4a0a      	ldr	r2, [pc, #40]	; (f550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f528:	9b01      	ldr	r3, [sp, #4]
    f52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f52e:	f003 0301 	and.w	r3, r3, #1
    f532:	2b00      	cmp	r3, #0
    f534:	d106      	bne.n	f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f536:	4a05      	ldr	r2, [pc, #20]	; (f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f538:	9b01      	ldr	r3, [sp, #4]
    f53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f53e:	2b00      	cmp	r3, #0
    f540:	d100      	bne.n	f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f544:	bf00      	nop
    f546:	b003      	add	sp, #12
    f548:	f85d fb04 	ldr.w	pc, [sp], #4
    f54c:	1fff915c 	.word	0x1fff915c
    f550:	1fff9158 	.word	0x1fff9158

0000f554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f554:	b500      	push	{lr}
    f556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f558:	f7f1 ff88 	bl	146c <Sys_GetCoreID>
    f55c:	4603      	mov	r3, r0
    f55e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f560:	4a10      	ldr	r2, [pc, #64]	; (f5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f562:	9b01      	ldr	r3, [sp, #4]
    f564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f568:	2b00      	cmp	r3, #0
    f56a:	d10d      	bne.n	f588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f56c:	f7f1 f9c9 	bl	902 <Port_schm_read_msr>
    f570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f572:	9b00      	ldr	r3, [sp, #0]
    f574:	f003 0301 	and.w	r3, r3, #1
    f578:	2b00      	cmp	r3, #0
    f57a:	d100      	bne.n	f57e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f57c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f57e:	490a      	ldr	r1, [pc, #40]	; (f5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f580:	9b01      	ldr	r3, [sp, #4]
    f582:	9a00      	ldr	r2, [sp, #0]
    f584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f588:	4a06      	ldr	r2, [pc, #24]	; (f5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f58a:	9b01      	ldr	r3, [sp, #4]
    f58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f590:	1c5a      	adds	r2, r3, #1
    f592:	4904      	ldr	r1, [pc, #16]	; (f5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f594:	9b01      	ldr	r3, [sp, #4]
    f596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f59a:	bf00      	nop
    f59c:	b003      	add	sp, #12
    f59e:	f85d fb04 	ldr.w	pc, [sp], #4
    f5a2:	bf00      	nop
    f5a4:	1fff9164 	.word	0x1fff9164
    f5a8:	1fff9160 	.word	0x1fff9160

0000f5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f5ac:	b500      	push	{lr}
    f5ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5b0:	f7f1 ff5c 	bl	146c <Sys_GetCoreID>
    f5b4:	4603      	mov	r3, r0
    f5b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f5b8:	4a0d      	ldr	r2, [pc, #52]	; (f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f5ba:	9b01      	ldr	r3, [sp, #4]
    f5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5c0:	1e5a      	subs	r2, r3, #1
    f5c2:	490b      	ldr	r1, [pc, #44]	; (f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f5c4:	9b01      	ldr	r3, [sp, #4]
    f5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f5ca:	4a0a      	ldr	r2, [pc, #40]	; (f5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f5cc:	9b01      	ldr	r3, [sp, #4]
    f5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d2:	f003 0301 	and.w	r3, r3, #1
    f5d6:	2b00      	cmp	r3, #0
    f5d8:	d106      	bne.n	f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f5da:	4a05      	ldr	r2, [pc, #20]	; (f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f5dc:	9b01      	ldr	r3, [sp, #4]
    f5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e2:	2b00      	cmp	r3, #0
    f5e4:	d100      	bne.n	f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5e8:	bf00      	nop
    f5ea:	b003      	add	sp, #12
    f5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f0:	1fff9164 	.word	0x1fff9164
    f5f4:	1fff9160 	.word	0x1fff9160

0000f5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f5f8:	b500      	push	{lr}
    f5fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5fc:	f7f1 ff36 	bl	146c <Sys_GetCoreID>
    f600:	4603      	mov	r3, r0
    f602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f604:	4a10      	ldr	r2, [pc, #64]	; (f648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f606:	9b01      	ldr	r3, [sp, #4]
    f608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f60c:	2b00      	cmp	r3, #0
    f60e:	d10d      	bne.n	f62c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f610:	f7f1 f977 	bl	902 <Port_schm_read_msr>
    f614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f616:	9b00      	ldr	r3, [sp, #0]
    f618:	f003 0301 	and.w	r3, r3, #1
    f61c:	2b00      	cmp	r3, #0
    f61e:	d100      	bne.n	f622 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f622:	490a      	ldr	r1, [pc, #40]	; (f64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f624:	9b01      	ldr	r3, [sp, #4]
    f626:	9a00      	ldr	r2, [sp, #0]
    f628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f62c:	4a06      	ldr	r2, [pc, #24]	; (f648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f62e:	9b01      	ldr	r3, [sp, #4]
    f630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f634:	1c5a      	adds	r2, r3, #1
    f636:	4904      	ldr	r1, [pc, #16]	; (f648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f638:	9b01      	ldr	r3, [sp, #4]
    f63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f63e:	bf00      	nop
    f640:	b003      	add	sp, #12
    f642:	f85d fb04 	ldr.w	pc, [sp], #4
    f646:	bf00      	nop
    f648:	1fff916c 	.word	0x1fff916c
    f64c:	1fff9168 	.word	0x1fff9168

0000f650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f650:	b500      	push	{lr}
    f652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f654:	f7f1 ff0a 	bl	146c <Sys_GetCoreID>
    f658:	4603      	mov	r3, r0
    f65a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f65c:	4a0d      	ldr	r2, [pc, #52]	; (f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f65e:	9b01      	ldr	r3, [sp, #4]
    f660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f664:	1e5a      	subs	r2, r3, #1
    f666:	490b      	ldr	r1, [pc, #44]	; (f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f668:	9b01      	ldr	r3, [sp, #4]
    f66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f66e:	4a0a      	ldr	r2, [pc, #40]	; (f698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f670:	9b01      	ldr	r3, [sp, #4]
    f672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f676:	f003 0301 	and.w	r3, r3, #1
    f67a:	2b00      	cmp	r3, #0
    f67c:	d106      	bne.n	f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f67e:	4a05      	ldr	r2, [pc, #20]	; (f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f680:	9b01      	ldr	r3, [sp, #4]
    f682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f686:	2b00      	cmp	r3, #0
    f688:	d100      	bne.n	f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f68a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f68c:	bf00      	nop
    f68e:	b003      	add	sp, #12
    f690:	f85d fb04 	ldr.w	pc, [sp], #4
    f694:	1fff916c 	.word	0x1fff916c
    f698:	1fff9168 	.word	0x1fff9168

0000f69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f69c:	b500      	push	{lr}
    f69e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6a0:	f7f1 fee4 	bl	146c <Sys_GetCoreID>
    f6a4:	4603      	mov	r3, r0
    f6a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f6a8:	4a10      	ldr	r2, [pc, #64]	; (f6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f6aa:	9b01      	ldr	r3, [sp, #4]
    f6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	d10d      	bne.n	f6d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6b4:	f7f1 f925 	bl	902 <Port_schm_read_msr>
    f6b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6ba:	9b00      	ldr	r3, [sp, #0]
    f6bc:	f003 0301 	and.w	r3, r3, #1
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	d100      	bne.n	f6c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f6c6:	490a      	ldr	r1, [pc, #40]	; (f6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f6c8:	9b01      	ldr	r3, [sp, #4]
    f6ca:	9a00      	ldr	r2, [sp, #0]
    f6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f6d0:	4a06      	ldr	r2, [pc, #24]	; (f6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f6d2:	9b01      	ldr	r3, [sp, #4]
    f6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6d8:	1c5a      	adds	r2, r3, #1
    f6da:	4904      	ldr	r1, [pc, #16]	; (f6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f6dc:	9b01      	ldr	r3, [sp, #4]
    f6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6e2:	bf00      	nop
    f6e4:	b003      	add	sp, #12
    f6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    f6ea:	bf00      	nop
    f6ec:	1fff9174 	.word	0x1fff9174
    f6f0:	1fff9170 	.word	0x1fff9170

0000f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f6f4:	b500      	push	{lr}
    f6f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6f8:	f7f1 feb8 	bl	146c <Sys_GetCoreID>
    f6fc:	4603      	mov	r3, r0
    f6fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f700:	4a0d      	ldr	r2, [pc, #52]	; (f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f702:	9b01      	ldr	r3, [sp, #4]
    f704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f708:	1e5a      	subs	r2, r3, #1
    f70a:	490b      	ldr	r1, [pc, #44]	; (f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f70c:	9b01      	ldr	r3, [sp, #4]
    f70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f712:	4a0a      	ldr	r2, [pc, #40]	; (f73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f714:	9b01      	ldr	r3, [sp, #4]
    f716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f71a:	f003 0301 	and.w	r3, r3, #1
    f71e:	2b00      	cmp	r3, #0
    f720:	d106      	bne.n	f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f722:	4a05      	ldr	r2, [pc, #20]	; (f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f724:	9b01      	ldr	r3, [sp, #4]
    f726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f72a:	2b00      	cmp	r3, #0
    f72c:	d100      	bne.n	f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f72e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f730:	bf00      	nop
    f732:	b003      	add	sp, #12
    f734:	f85d fb04 	ldr.w	pc, [sp], #4
    f738:	1fff9174 	.word	0x1fff9174
    f73c:	1fff9170 	.word	0x1fff9170

0000f740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f740:	b500      	push	{lr}
    f742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f744:	f7f1 fe92 	bl	146c <Sys_GetCoreID>
    f748:	4603      	mov	r3, r0
    f74a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f74c:	4a10      	ldr	r2, [pc, #64]	; (f790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f74e:	9b01      	ldr	r3, [sp, #4]
    f750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f754:	2b00      	cmp	r3, #0
    f756:	d10d      	bne.n	f774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f758:	f7f1 f8d3 	bl	902 <Port_schm_read_msr>
    f75c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f75e:	9b00      	ldr	r3, [sp, #0]
    f760:	f003 0301 	and.w	r3, r3, #1
    f764:	2b00      	cmp	r3, #0
    f766:	d100      	bne.n	f76a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f76a:	490a      	ldr	r1, [pc, #40]	; (f794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f76c:	9b01      	ldr	r3, [sp, #4]
    f76e:	9a00      	ldr	r2, [sp, #0]
    f770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f774:	4a06      	ldr	r2, [pc, #24]	; (f790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f776:	9b01      	ldr	r3, [sp, #4]
    f778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f77c:	1c5a      	adds	r2, r3, #1
    f77e:	4904      	ldr	r1, [pc, #16]	; (f790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f780:	9b01      	ldr	r3, [sp, #4]
    f782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f786:	bf00      	nop
    f788:	b003      	add	sp, #12
    f78a:	f85d fb04 	ldr.w	pc, [sp], #4
    f78e:	bf00      	nop
    f790:	1fff917c 	.word	0x1fff917c
    f794:	1fff9178 	.word	0x1fff9178

0000f798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f798:	b500      	push	{lr}
    f79a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f79c:	f7f1 fe66 	bl	146c <Sys_GetCoreID>
    f7a0:	4603      	mov	r3, r0
    f7a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    f7a4:	4a0d      	ldr	r2, [pc, #52]	; (f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f7a6:	9b01      	ldr	r3, [sp, #4]
    f7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7ac:	1e5a      	subs	r2, r3, #1
    f7ae:	490b      	ldr	r1, [pc, #44]	; (f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f7b0:	9b01      	ldr	r3, [sp, #4]
    f7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f7b6:	4a0a      	ldr	r2, [pc, #40]	; (f7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    f7b8:	9b01      	ldr	r3, [sp, #4]
    f7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7be:	f003 0301 	and.w	r3, r3, #1
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d106      	bne.n	f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    f7c6:	4a05      	ldr	r2, [pc, #20]	; (f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f7c8:	9b01      	ldr	r3, [sp, #4]
    f7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7ce:	2b00      	cmp	r3, #0
    f7d0:	d100      	bne.n	f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7d4:	bf00      	nop
    f7d6:	b003      	add	sp, #12
    f7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    f7dc:	1fff917c 	.word	0x1fff917c
    f7e0:	1fff9178 	.word	0x1fff9178

0000f7e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f7e4:	b500      	push	{lr}
    f7e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7e8:	f7f1 fe40 	bl	146c <Sys_GetCoreID>
    f7ec:	4603      	mov	r3, r0
    f7ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    f7f0:	4a10      	ldr	r2, [pc, #64]	; (f834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f7f2:	9b01      	ldr	r3, [sp, #4]
    f7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f8:	2b00      	cmp	r3, #0
    f7fa:	d10d      	bne.n	f818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7fc:	f7f1 f881 	bl	902 <Port_schm_read_msr>
    f800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f802:	9b00      	ldr	r3, [sp, #0]
    f804:	f003 0301 	and.w	r3, r3, #1
    f808:	2b00      	cmp	r3, #0
    f80a:	d100      	bne.n	f80e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f80c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f80e:	490a      	ldr	r1, [pc, #40]	; (f838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    f810:	9b01      	ldr	r3, [sp, #4]
    f812:	9a00      	ldr	r2, [sp, #0]
    f814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    f818:	4a06      	ldr	r2, [pc, #24]	; (f834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f81a:	9b01      	ldr	r3, [sp, #4]
    f81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f820:	1c5a      	adds	r2, r3, #1
    f822:	4904      	ldr	r1, [pc, #16]	; (f834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f824:	9b01      	ldr	r3, [sp, #4]
    f826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f82a:	bf00      	nop
    f82c:	b003      	add	sp, #12
    f82e:	f85d fb04 	ldr.w	pc, [sp], #4
    f832:	bf00      	nop
    f834:	1fff9184 	.word	0x1fff9184
    f838:	1fff9180 	.word	0x1fff9180

0000f83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f83c:	b500      	push	{lr}
    f83e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f840:	f7f1 fe14 	bl	146c <Sys_GetCoreID>
    f844:	4603      	mov	r3, r0
    f846:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    f848:	4a0d      	ldr	r2, [pc, #52]	; (f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f84a:	9b01      	ldr	r3, [sp, #4]
    f84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f850:	1e5a      	subs	r2, r3, #1
    f852:	490b      	ldr	r1, [pc, #44]	; (f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f854:	9b01      	ldr	r3, [sp, #4]
    f856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f85a:	4a0a      	ldr	r2, [pc, #40]	; (f884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    f85c:	9b01      	ldr	r3, [sp, #4]
    f85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f862:	f003 0301 	and.w	r3, r3, #1
    f866:	2b00      	cmp	r3, #0
    f868:	d106      	bne.n	f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    f86a:	4a05      	ldr	r2, [pc, #20]	; (f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f86c:	9b01      	ldr	r3, [sp, #4]
    f86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f872:	2b00      	cmp	r3, #0
    f874:	d100      	bne.n	f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f878:	bf00      	nop
    f87a:	b003      	add	sp, #12
    f87c:	f85d fb04 	ldr.w	pc, [sp], #4
    f880:	1fff9184 	.word	0x1fff9184
    f884:	1fff9180 	.word	0x1fff9180

0000f888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f888:	b500      	push	{lr}
    f88a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f88c:	f7f1 fdee 	bl	146c <Sys_GetCoreID>
    f890:	4603      	mov	r3, r0
    f892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    f894:	4a10      	ldr	r2, [pc, #64]	; (f8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f896:	9b01      	ldr	r3, [sp, #4]
    f898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f89c:	2b00      	cmp	r3, #0
    f89e:	d10d      	bne.n	f8bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8a0:	f7f1 f82f 	bl	902 <Port_schm_read_msr>
    f8a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8a6:	9b00      	ldr	r3, [sp, #0]
    f8a8:	f003 0301 	and.w	r3, r3, #1
    f8ac:	2b00      	cmp	r3, #0
    f8ae:	d100      	bne.n	f8b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f8b2:	490a      	ldr	r1, [pc, #40]	; (f8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    f8b4:	9b01      	ldr	r3, [sp, #4]
    f8b6:	9a00      	ldr	r2, [sp, #0]
    f8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    f8bc:	4a06      	ldr	r2, [pc, #24]	; (f8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f8be:	9b01      	ldr	r3, [sp, #4]
    f8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8c4:	1c5a      	adds	r2, r3, #1
    f8c6:	4904      	ldr	r1, [pc, #16]	; (f8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f8c8:	9b01      	ldr	r3, [sp, #4]
    f8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8ce:	bf00      	nop
    f8d0:	b003      	add	sp, #12
    f8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f8d6:	bf00      	nop
    f8d8:	1fff918c 	.word	0x1fff918c
    f8dc:	1fff9188 	.word	0x1fff9188

0000f8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f8e0:	b500      	push	{lr}
    f8e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8e4:	f7f1 fdc2 	bl	146c <Sys_GetCoreID>
    f8e8:	4603      	mov	r3, r0
    f8ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    f8ec:	4a0d      	ldr	r2, [pc, #52]	; (f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f8ee:	9b01      	ldr	r3, [sp, #4]
    f8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8f4:	1e5a      	subs	r2, r3, #1
    f8f6:	490b      	ldr	r1, [pc, #44]	; (f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f8f8:	9b01      	ldr	r3, [sp, #4]
    f8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f8fe:	4a0a      	ldr	r2, [pc, #40]	; (f928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    f900:	9b01      	ldr	r3, [sp, #4]
    f902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f906:	f003 0301 	and.w	r3, r3, #1
    f90a:	2b00      	cmp	r3, #0
    f90c:	d106      	bne.n	f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    f90e:	4a05      	ldr	r2, [pc, #20]	; (f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f910:	9b01      	ldr	r3, [sp, #4]
    f912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f916:	2b00      	cmp	r3, #0
    f918:	d100      	bne.n	f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f91a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f91c:	bf00      	nop
    f91e:	b003      	add	sp, #12
    f920:	f85d fb04 	ldr.w	pc, [sp], #4
    f924:	1fff918c 	.word	0x1fff918c
    f928:	1fff9188 	.word	0x1fff9188

0000f92c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f92c:	b500      	push	{lr}
    f92e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f930:	f7f1 fd9c 	bl	146c <Sys_GetCoreID>
    f934:	4603      	mov	r3, r0
    f936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    f938:	4a10      	ldr	r2, [pc, #64]	; (f97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f93a:	9b01      	ldr	r3, [sp, #4]
    f93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f940:	2b00      	cmp	r3, #0
    f942:	d10d      	bne.n	f960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f944:	f7f0 ffdd 	bl	902 <Port_schm_read_msr>
    f948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f94a:	9b00      	ldr	r3, [sp, #0]
    f94c:	f003 0301 	and.w	r3, r3, #1
    f950:	2b00      	cmp	r3, #0
    f952:	d100      	bne.n	f956 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f956:	490a      	ldr	r1, [pc, #40]	; (f980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    f958:	9b01      	ldr	r3, [sp, #4]
    f95a:	9a00      	ldr	r2, [sp, #0]
    f95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    f960:	4a06      	ldr	r2, [pc, #24]	; (f97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f962:	9b01      	ldr	r3, [sp, #4]
    f964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f968:	1c5a      	adds	r2, r3, #1
    f96a:	4904      	ldr	r1, [pc, #16]	; (f97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f96c:	9b01      	ldr	r3, [sp, #4]
    f96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f972:	bf00      	nop
    f974:	b003      	add	sp, #12
    f976:	f85d fb04 	ldr.w	pc, [sp], #4
    f97a:	bf00      	nop
    f97c:	1fff9194 	.word	0x1fff9194
    f980:	1fff9190 	.word	0x1fff9190

0000f984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f984:	b500      	push	{lr}
    f986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f988:	f7f1 fd70 	bl	146c <Sys_GetCoreID>
    f98c:	4603      	mov	r3, r0
    f98e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    f990:	4a0d      	ldr	r2, [pc, #52]	; (f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f992:	9b01      	ldr	r3, [sp, #4]
    f994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f998:	1e5a      	subs	r2, r3, #1
    f99a:	490b      	ldr	r1, [pc, #44]	; (f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f99c:	9b01      	ldr	r3, [sp, #4]
    f99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f9a2:	4a0a      	ldr	r2, [pc, #40]	; (f9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    f9a4:	9b01      	ldr	r3, [sp, #4]
    f9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9aa:	f003 0301 	and.w	r3, r3, #1
    f9ae:	2b00      	cmp	r3, #0
    f9b0:	d106      	bne.n	f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    f9b2:	4a05      	ldr	r2, [pc, #20]	; (f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f9b4:	9b01      	ldr	r3, [sp, #4]
    f9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d100      	bne.n	f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9c0:	bf00      	nop
    f9c2:	b003      	add	sp, #12
    f9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f9c8:	1fff9194 	.word	0x1fff9194
    f9cc:	1fff9190 	.word	0x1fff9190

0000f9d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f9d0:	b500      	push	{lr}
    f9d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9d4:	f7f1 fd4a 	bl	146c <Sys_GetCoreID>
    f9d8:	4603      	mov	r3, r0
    f9da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    f9dc:	4a10      	ldr	r2, [pc, #64]	; (fa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f9de:	9b01      	ldr	r3, [sp, #4]
    f9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9e4:	2b00      	cmp	r3, #0
    f9e6:	d10d      	bne.n	fa04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9e8:	f7f0 ff8b 	bl	902 <Port_schm_read_msr>
    f9ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9ee:	9b00      	ldr	r3, [sp, #0]
    f9f0:	f003 0301 	and.w	r3, r3, #1
    f9f4:	2b00      	cmp	r3, #0
    f9f6:	d100      	bne.n	f9fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f9fa:	490a      	ldr	r1, [pc, #40]	; (fa24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    f9fc:	9b01      	ldr	r3, [sp, #4]
    f9fe:	9a00      	ldr	r2, [sp, #0]
    fa00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    fa04:	4a06      	ldr	r2, [pc, #24]	; (fa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fa06:	9b01      	ldr	r3, [sp, #4]
    fa08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa0c:	1c5a      	adds	r2, r3, #1
    fa0e:	4904      	ldr	r1, [pc, #16]	; (fa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fa10:	9b01      	ldr	r3, [sp, #4]
    fa12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa16:	bf00      	nop
    fa18:	b003      	add	sp, #12
    fa1a:	f85d fb04 	ldr.w	pc, [sp], #4
    fa1e:	bf00      	nop
    fa20:	1fff919c 	.word	0x1fff919c
    fa24:	1fff9198 	.word	0x1fff9198

0000fa28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    fa28:	b500      	push	{lr}
    fa2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa2c:	f7f1 fd1e 	bl	146c <Sys_GetCoreID>
    fa30:	4603      	mov	r3, r0
    fa32:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    fa34:	4a0d      	ldr	r2, [pc, #52]	; (fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fa36:	9b01      	ldr	r3, [sp, #4]
    fa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa3c:	1e5a      	subs	r2, r3, #1
    fa3e:	490b      	ldr	r1, [pc, #44]	; (fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fa40:	9b01      	ldr	r3, [sp, #4]
    fa42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    fa46:	4a0a      	ldr	r2, [pc, #40]	; (fa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    fa48:	9b01      	ldr	r3, [sp, #4]
    fa4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa4e:	f003 0301 	and.w	r3, r3, #1
    fa52:	2b00      	cmp	r3, #0
    fa54:	d106      	bne.n	fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    fa56:	4a05      	ldr	r2, [pc, #20]	; (fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fa58:	9b01      	ldr	r3, [sp, #4]
    fa5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa5e:	2b00      	cmp	r3, #0
    fa60:	d100      	bne.n	fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa64:	bf00      	nop
    fa66:	b003      	add	sp, #12
    fa68:	f85d fb04 	ldr.w	pc, [sp], #4
    fa6c:	1fff919c 	.word	0x1fff919c
    fa70:	1fff9198 	.word	0x1fff9198

0000fa74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    fa74:	b500      	push	{lr}
    fa76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa78:	f7f1 fcf8 	bl	146c <Sys_GetCoreID>
    fa7c:	4603      	mov	r3, r0
    fa7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    fa80:	4a10      	ldr	r2, [pc, #64]	; (fac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fa82:	9b01      	ldr	r3, [sp, #4]
    fa84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa88:	2b00      	cmp	r3, #0
    fa8a:	d10d      	bne.n	faa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa8c:	f7f0 ff39 	bl	902 <Port_schm_read_msr>
    fa90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa92:	9b00      	ldr	r3, [sp, #0]
    fa94:	f003 0301 	and.w	r3, r3, #1
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d100      	bne.n	fa9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    fa9e:	490a      	ldr	r1, [pc, #40]	; (fac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    faa0:	9b01      	ldr	r3, [sp, #4]
    faa2:	9a00      	ldr	r2, [sp, #0]
    faa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    faa8:	4a06      	ldr	r2, [pc, #24]	; (fac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    faaa:	9b01      	ldr	r3, [sp, #4]
    faac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab0:	1c5a      	adds	r2, r3, #1
    fab2:	4904      	ldr	r1, [pc, #16]	; (fac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fab4:	9b01      	ldr	r3, [sp, #4]
    fab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    faba:	bf00      	nop
    fabc:	b003      	add	sp, #12
    fabe:	f85d fb04 	ldr.w	pc, [sp], #4
    fac2:	bf00      	nop
    fac4:	1fff91a4 	.word	0x1fff91a4
    fac8:	1fff91a0 	.word	0x1fff91a0

0000facc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    facc:	b500      	push	{lr}
    face:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fad0:	f7f1 fccc 	bl	146c <Sys_GetCoreID>
    fad4:	4603      	mov	r3, r0
    fad6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    fad8:	4a0d      	ldr	r2, [pc, #52]	; (fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fada:	9b01      	ldr	r3, [sp, #4]
    fadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fae0:	1e5a      	subs	r2, r3, #1
    fae2:	490b      	ldr	r1, [pc, #44]	; (fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fae4:	9b01      	ldr	r3, [sp, #4]
    fae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    faea:	4a0a      	ldr	r2, [pc, #40]	; (fb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    faec:	9b01      	ldr	r3, [sp, #4]
    faee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf2:	f003 0301 	and.w	r3, r3, #1
    faf6:	2b00      	cmp	r3, #0
    faf8:	d106      	bne.n	fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    fafa:	4a05      	ldr	r2, [pc, #20]	; (fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fafc:	9b01      	ldr	r3, [sp, #4]
    fafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb02:	2b00      	cmp	r3, #0
    fb04:	d100      	bne.n	fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb08:	bf00      	nop
    fb0a:	b003      	add	sp, #12
    fb0c:	f85d fb04 	ldr.w	pc, [sp], #4
    fb10:	1fff91a4 	.word	0x1fff91a4
    fb14:	1fff91a0 	.word	0x1fff91a0

0000fb18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    fb18:	b500      	push	{lr}
    fb1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb1c:	f7f1 fca6 	bl	146c <Sys_GetCoreID>
    fb20:	4603      	mov	r3, r0
    fb22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    fb24:	4a10      	ldr	r2, [pc, #64]	; (fb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fb26:	9b01      	ldr	r3, [sp, #4]
    fb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	d10d      	bne.n	fb4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb30:	f7f0 fee7 	bl	902 <Port_schm_read_msr>
    fb34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb36:	9b00      	ldr	r3, [sp, #0]
    fb38:	f003 0301 	and.w	r3, r3, #1
    fb3c:	2b00      	cmp	r3, #0
    fb3e:	d100      	bne.n	fb42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    fb42:	490a      	ldr	r1, [pc, #40]	; (fb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    fb44:	9b01      	ldr	r3, [sp, #4]
    fb46:	9a00      	ldr	r2, [sp, #0]
    fb48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    fb4c:	4a06      	ldr	r2, [pc, #24]	; (fb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fb4e:	9b01      	ldr	r3, [sp, #4]
    fb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb54:	1c5a      	adds	r2, r3, #1
    fb56:	4904      	ldr	r1, [pc, #16]	; (fb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fb58:	9b01      	ldr	r3, [sp, #4]
    fb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb5e:	bf00      	nop
    fb60:	b003      	add	sp, #12
    fb62:	f85d fb04 	ldr.w	pc, [sp], #4
    fb66:	bf00      	nop
    fb68:	1fff91ac 	.word	0x1fff91ac
    fb6c:	1fff91a8 	.word	0x1fff91a8

0000fb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    fb70:	b500      	push	{lr}
    fb72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb74:	f7f1 fc7a 	bl	146c <Sys_GetCoreID>
    fb78:	4603      	mov	r3, r0
    fb7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    fb7c:	4a0d      	ldr	r2, [pc, #52]	; (fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fb7e:	9b01      	ldr	r3, [sp, #4]
    fb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb84:	1e5a      	subs	r2, r3, #1
    fb86:	490b      	ldr	r1, [pc, #44]	; (fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fb88:	9b01      	ldr	r3, [sp, #4]
    fb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    fb8e:	4a0a      	ldr	r2, [pc, #40]	; (fbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    fb90:	9b01      	ldr	r3, [sp, #4]
    fb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb96:	f003 0301 	and.w	r3, r3, #1
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d106      	bne.n	fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    fb9e:	4a05      	ldr	r2, [pc, #20]	; (fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fba0:	9b01      	ldr	r3, [sp, #4]
    fba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fba6:	2b00      	cmp	r3, #0
    fba8:	d100      	bne.n	fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbac:	bf00      	nop
    fbae:	b003      	add	sp, #12
    fbb0:	f85d fb04 	ldr.w	pc, [sp], #4
    fbb4:	1fff91ac 	.word	0x1fff91ac
    fbb8:	1fff91a8 	.word	0x1fff91a8

0000fbbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    fbbc:	b500      	push	{lr}
    fbbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbc0:	f7f1 fc54 	bl	146c <Sys_GetCoreID>
    fbc4:	4603      	mov	r3, r0
    fbc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    fbc8:	4a10      	ldr	r2, [pc, #64]	; (fc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    fbca:	9b01      	ldr	r3, [sp, #4]
    fbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbd0:	2b00      	cmp	r3, #0
    fbd2:	d10d      	bne.n	fbf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbd4:	f7f0 fe95 	bl	902 <Port_schm_read_msr>
    fbd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbda:	9b00      	ldr	r3, [sp, #0]
    fbdc:	f003 0301 	and.w	r3, r3, #1
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	d100      	bne.n	fbe6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    fbe6:	490a      	ldr	r1, [pc, #40]	; (fc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    fbe8:	9b01      	ldr	r3, [sp, #4]
    fbea:	9a00      	ldr	r2, [sp, #0]
    fbec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    fbf0:	4a06      	ldr	r2, [pc, #24]	; (fc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    fbf2:	9b01      	ldr	r3, [sp, #4]
    fbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbf8:	1c5a      	adds	r2, r3, #1
    fbfa:	4904      	ldr	r1, [pc, #16]	; (fc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    fbfc:	9b01      	ldr	r3, [sp, #4]
    fbfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc02:	bf00      	nop
    fc04:	b003      	add	sp, #12
    fc06:	f85d fb04 	ldr.w	pc, [sp], #4
    fc0a:	bf00      	nop
    fc0c:	1fff91b4 	.word	0x1fff91b4
    fc10:	1fff91b0 	.word	0x1fff91b0

0000fc14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    fc14:	b500      	push	{lr}
    fc16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc18:	f7f1 fc28 	bl	146c <Sys_GetCoreID>
    fc1c:	4603      	mov	r3, r0
    fc1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    fc20:	4a0d      	ldr	r2, [pc, #52]	; (fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    fc22:	9b01      	ldr	r3, [sp, #4]
    fc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc28:	1e5a      	subs	r2, r3, #1
    fc2a:	490b      	ldr	r1, [pc, #44]	; (fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    fc2c:	9b01      	ldr	r3, [sp, #4]
    fc2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    fc32:	4a0a      	ldr	r2, [pc, #40]	; (fc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    fc34:	9b01      	ldr	r3, [sp, #4]
    fc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc3a:	f003 0301 	and.w	r3, r3, #1
    fc3e:	2b00      	cmp	r3, #0
    fc40:	d106      	bne.n	fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    fc42:	4a05      	ldr	r2, [pc, #20]	; (fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    fc44:	9b01      	ldr	r3, [sp, #4]
    fc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d100      	bne.n	fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc50:	bf00      	nop
    fc52:	b003      	add	sp, #12
    fc54:	f85d fb04 	ldr.w	pc, [sp], #4
    fc58:	1fff91b4 	.word	0x1fff91b4
    fc5c:	1fff91b0 	.word	0x1fff91b0

0000fc60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    fc60:	b500      	push	{lr}
    fc62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc64:	f7f1 fc02 	bl	146c <Sys_GetCoreID>
    fc68:	4603      	mov	r3, r0
    fc6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    fc6c:	4a10      	ldr	r2, [pc, #64]	; (fcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fc6e:	9b01      	ldr	r3, [sp, #4]
    fc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc74:	2b00      	cmp	r3, #0
    fc76:	d10d      	bne.n	fc94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc78:	f7f0 fe43 	bl	902 <Port_schm_read_msr>
    fc7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc7e:	9b00      	ldr	r3, [sp, #0]
    fc80:	f003 0301 	and.w	r3, r3, #1
    fc84:	2b00      	cmp	r3, #0
    fc86:	d100      	bne.n	fc8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    fc8a:	490a      	ldr	r1, [pc, #40]	; (fcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    fc8c:	9b01      	ldr	r3, [sp, #4]
    fc8e:	9a00      	ldr	r2, [sp, #0]
    fc90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    fc94:	4a06      	ldr	r2, [pc, #24]	; (fcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fc96:	9b01      	ldr	r3, [sp, #4]
    fc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc9c:	1c5a      	adds	r2, r3, #1
    fc9e:	4904      	ldr	r1, [pc, #16]	; (fcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fca0:	9b01      	ldr	r3, [sp, #4]
    fca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fca6:	bf00      	nop
    fca8:	b003      	add	sp, #12
    fcaa:	f85d fb04 	ldr.w	pc, [sp], #4
    fcae:	bf00      	nop
    fcb0:	1fff91bc 	.word	0x1fff91bc
    fcb4:	1fff91b8 	.word	0x1fff91b8

0000fcb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    fcb8:	b500      	push	{lr}
    fcba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcbc:	f7f1 fbd6 	bl	146c <Sys_GetCoreID>
    fcc0:	4603      	mov	r3, r0
    fcc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    fcc4:	4a0d      	ldr	r2, [pc, #52]	; (fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    fcc6:	9b01      	ldr	r3, [sp, #4]
    fcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fccc:	1e5a      	subs	r2, r3, #1
    fcce:	490b      	ldr	r1, [pc, #44]	; (fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    fcd0:	9b01      	ldr	r3, [sp, #4]
    fcd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    fcd6:	4a0a      	ldr	r2, [pc, #40]	; (fd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    fcd8:	9b01      	ldr	r3, [sp, #4]
    fcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcde:	f003 0301 	and.w	r3, r3, #1
    fce2:	2b00      	cmp	r3, #0
    fce4:	d106      	bne.n	fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    fce6:	4a05      	ldr	r2, [pc, #20]	; (fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    fce8:	9b01      	ldr	r3, [sp, #4]
    fcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d100      	bne.n	fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcf4:	bf00      	nop
    fcf6:	b003      	add	sp, #12
    fcf8:	f85d fb04 	ldr.w	pc, [sp], #4
    fcfc:	1fff91bc 	.word	0x1fff91bc
    fd00:	1fff91b8 	.word	0x1fff91b8

0000fd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    fd04:	b500      	push	{lr}
    fd06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd08:	f7f1 fbb0 	bl	146c <Sys_GetCoreID>
    fd0c:	4603      	mov	r3, r0
    fd0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    fd10:	4a10      	ldr	r2, [pc, #64]	; (fd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fd12:	9b01      	ldr	r3, [sp, #4]
    fd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd18:	2b00      	cmp	r3, #0
    fd1a:	d10d      	bne.n	fd38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd1c:	f7f0 fdf1 	bl	902 <Port_schm_read_msr>
    fd20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd22:	9b00      	ldr	r3, [sp, #0]
    fd24:	f003 0301 	and.w	r3, r3, #1
    fd28:	2b00      	cmp	r3, #0
    fd2a:	d100      	bne.n	fd2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    fd2e:	490a      	ldr	r1, [pc, #40]	; (fd58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    fd30:	9b01      	ldr	r3, [sp, #4]
    fd32:	9a00      	ldr	r2, [sp, #0]
    fd34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    fd38:	4a06      	ldr	r2, [pc, #24]	; (fd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fd3a:	9b01      	ldr	r3, [sp, #4]
    fd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd40:	1c5a      	adds	r2, r3, #1
    fd42:	4904      	ldr	r1, [pc, #16]	; (fd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fd44:	9b01      	ldr	r3, [sp, #4]
    fd46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd4a:	bf00      	nop
    fd4c:	b003      	add	sp, #12
    fd4e:	f85d fb04 	ldr.w	pc, [sp], #4
    fd52:	bf00      	nop
    fd54:	1fff91c4 	.word	0x1fff91c4
    fd58:	1fff91c0 	.word	0x1fff91c0

0000fd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    fd5c:	b500      	push	{lr}
    fd5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd60:	f7f1 fb84 	bl	146c <Sys_GetCoreID>
    fd64:	4603      	mov	r3, r0
    fd66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    fd68:	4a0d      	ldr	r2, [pc, #52]	; (fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fd6a:	9b01      	ldr	r3, [sp, #4]
    fd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd70:	1e5a      	subs	r2, r3, #1
    fd72:	490b      	ldr	r1, [pc, #44]	; (fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    fd7a:	4a0a      	ldr	r2, [pc, #40]	; (fda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    fd7c:	9b01      	ldr	r3, [sp, #4]
    fd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd82:	f003 0301 	and.w	r3, r3, #1
    fd86:	2b00      	cmp	r3, #0
    fd88:	d106      	bne.n	fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    fd8a:	4a05      	ldr	r2, [pc, #20]	; (fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fd8c:	9b01      	ldr	r3, [sp, #4]
    fd8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd92:	2b00      	cmp	r3, #0
    fd94:	d100      	bne.n	fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd98:	bf00      	nop
    fd9a:	b003      	add	sp, #12
    fd9c:	f85d fb04 	ldr.w	pc, [sp], #4
    fda0:	1fff91c4 	.word	0x1fff91c4
    fda4:	1fff91c0 	.word	0x1fff91c0

0000fda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fda8:	b500      	push	{lr}
    fdaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdac:	f7f1 fb5e 	bl	146c <Sys_GetCoreID>
    fdb0:	4603      	mov	r3, r0
    fdb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    fdb4:	4a10      	ldr	r2, [pc, #64]	; (fdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fdb6:	9b01      	ldr	r3, [sp, #4]
    fdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d10d      	bne.n	fddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdc0:	f7f0 fd9f 	bl	902 <Port_schm_read_msr>
    fdc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdc6:	9b00      	ldr	r3, [sp, #0]
    fdc8:	f003 0301 	and.w	r3, r3, #1
    fdcc:	2b00      	cmp	r3, #0
    fdce:	d100      	bne.n	fdd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fdd2:	490a      	ldr	r1, [pc, #40]	; (fdfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    fdd4:	9b01      	ldr	r3, [sp, #4]
    fdd6:	9a00      	ldr	r2, [sp, #0]
    fdd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    fddc:	4a06      	ldr	r2, [pc, #24]	; (fdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fdde:	9b01      	ldr	r3, [sp, #4]
    fde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fde4:	1c5a      	adds	r2, r3, #1
    fde6:	4904      	ldr	r1, [pc, #16]	; (fdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fde8:	9b01      	ldr	r3, [sp, #4]
    fdea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdee:	bf00      	nop
    fdf0:	b003      	add	sp, #12
    fdf2:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf6:	bf00      	nop
    fdf8:	1fff91cc 	.word	0x1fff91cc
    fdfc:	1fff91c8 	.word	0x1fff91c8

0000fe00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fe00:	b500      	push	{lr}
    fe02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe04:	f7f1 fb32 	bl	146c <Sys_GetCoreID>
    fe08:	4603      	mov	r3, r0
    fe0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    fe0c:	4a0d      	ldr	r2, [pc, #52]	; (fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fe0e:	9b01      	ldr	r3, [sp, #4]
    fe10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe14:	1e5a      	subs	r2, r3, #1
    fe16:	490b      	ldr	r1, [pc, #44]	; (fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fe18:	9b01      	ldr	r3, [sp, #4]
    fe1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fe1e:	4a0a      	ldr	r2, [pc, #40]	; (fe48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    fe20:	9b01      	ldr	r3, [sp, #4]
    fe22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe26:	f003 0301 	and.w	r3, r3, #1
    fe2a:	2b00      	cmp	r3, #0
    fe2c:	d106      	bne.n	fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    fe2e:	4a05      	ldr	r2, [pc, #20]	; (fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fe30:	9b01      	ldr	r3, [sp, #4]
    fe32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe36:	2b00      	cmp	r3, #0
    fe38:	d100      	bne.n	fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe3c:	bf00      	nop
    fe3e:	b003      	add	sp, #12
    fe40:	f85d fb04 	ldr.w	pc, [sp], #4
    fe44:	1fff91cc 	.word	0x1fff91cc
    fe48:	1fff91c8 	.word	0x1fff91c8

0000fe4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fe4c:	b500      	push	{lr}
    fe4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe50:	f7f1 fb0c 	bl	146c <Sys_GetCoreID>
    fe54:	4603      	mov	r3, r0
    fe56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    fe58:	4a10      	ldr	r2, [pc, #64]	; (fe9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fe5a:	9b01      	ldr	r3, [sp, #4]
    fe5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe60:	2b00      	cmp	r3, #0
    fe62:	d10d      	bne.n	fe80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe64:	f7f0 fd4d 	bl	902 <Port_schm_read_msr>
    fe68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe6a:	9b00      	ldr	r3, [sp, #0]
    fe6c:	f003 0301 	and.w	r3, r3, #1
    fe70:	2b00      	cmp	r3, #0
    fe72:	d100      	bne.n	fe76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fe76:	490a      	ldr	r1, [pc, #40]	; (fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    fe78:	9b01      	ldr	r3, [sp, #4]
    fe7a:	9a00      	ldr	r2, [sp, #0]
    fe7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    fe80:	4a06      	ldr	r2, [pc, #24]	; (fe9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fe82:	9b01      	ldr	r3, [sp, #4]
    fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe88:	1c5a      	adds	r2, r3, #1
    fe8a:	4904      	ldr	r1, [pc, #16]	; (fe9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fe8c:	9b01      	ldr	r3, [sp, #4]
    fe8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe92:	bf00      	nop
    fe94:	b003      	add	sp, #12
    fe96:	f85d fb04 	ldr.w	pc, [sp], #4
    fe9a:	bf00      	nop
    fe9c:	1fff91d4 	.word	0x1fff91d4
    fea0:	1fff91d0 	.word	0x1fff91d0

0000fea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fea4:	b500      	push	{lr}
    fea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fea8:	f7f1 fae0 	bl	146c <Sys_GetCoreID>
    feac:	4603      	mov	r3, r0
    feae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    feb0:	4a0d      	ldr	r2, [pc, #52]	; (fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    feb2:	9b01      	ldr	r3, [sp, #4]
    feb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feb8:	1e5a      	subs	r2, r3, #1
    feba:	490b      	ldr	r1, [pc, #44]	; (fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    febc:	9b01      	ldr	r3, [sp, #4]
    febe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fec2:	4a0a      	ldr	r2, [pc, #40]	; (feec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feca:	f003 0301 	and.w	r3, r3, #1
    fece:	2b00      	cmp	r3, #0
    fed0:	d106      	bne.n	fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    fed2:	4a05      	ldr	r2, [pc, #20]	; (fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fed4:	9b01      	ldr	r3, [sp, #4]
    fed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feda:	2b00      	cmp	r3, #0
    fedc:	d100      	bne.n	fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fee0:	bf00      	nop
    fee2:	b003      	add	sp, #12
    fee4:	f85d fb04 	ldr.w	pc, [sp], #4
    fee8:	1fff91d4 	.word	0x1fff91d4
    feec:	1fff91d0 	.word	0x1fff91d0

0000fef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fef0:	b500      	push	{lr}
    fef2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fef4:	f7f1 faba 	bl	146c <Sys_GetCoreID>
    fef8:	4603      	mov	r3, r0
    fefa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    fefc:	4a10      	ldr	r2, [pc, #64]	; (ff40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fefe:	9b01      	ldr	r3, [sp, #4]
    ff00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff04:	2b00      	cmp	r3, #0
    ff06:	d10d      	bne.n	ff24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff08:	f7f0 fcfb 	bl	902 <Port_schm_read_msr>
    ff0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff0e:	9b00      	ldr	r3, [sp, #0]
    ff10:	f003 0301 	and.w	r3, r3, #1
    ff14:	2b00      	cmp	r3, #0
    ff16:	d100      	bne.n	ff1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ff1a:	490a      	ldr	r1, [pc, #40]	; (ff44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    ff1c:	9b01      	ldr	r3, [sp, #4]
    ff1e:	9a00      	ldr	r2, [sp, #0]
    ff20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    ff24:	4a06      	ldr	r2, [pc, #24]	; (ff40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ff26:	9b01      	ldr	r3, [sp, #4]
    ff28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff2c:	1c5a      	adds	r2, r3, #1
    ff2e:	4904      	ldr	r1, [pc, #16]	; (ff40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ff30:	9b01      	ldr	r3, [sp, #4]
    ff32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff36:	bf00      	nop
    ff38:	b003      	add	sp, #12
    ff3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ff3e:	bf00      	nop
    ff40:	1fff91dc 	.word	0x1fff91dc
    ff44:	1fff91d8 	.word	0x1fff91d8

0000ff48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    ff48:	b500      	push	{lr}
    ff4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff4c:	f7f1 fa8e 	bl	146c <Sys_GetCoreID>
    ff50:	4603      	mov	r3, r0
    ff52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    ff54:	4a0d      	ldr	r2, [pc, #52]	; (ff8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    ff56:	9b01      	ldr	r3, [sp, #4]
    ff58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff5c:	1e5a      	subs	r2, r3, #1
    ff5e:	490b      	ldr	r1, [pc, #44]	; (ff8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    ff60:	9b01      	ldr	r3, [sp, #4]
    ff62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    ff66:	4a0a      	ldr	r2, [pc, #40]	; (ff90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    ff68:	9b01      	ldr	r3, [sp, #4]
    ff6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff6e:	f003 0301 	and.w	r3, r3, #1
    ff72:	2b00      	cmp	r3, #0
    ff74:	d106      	bne.n	ff84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    ff76:	4a05      	ldr	r2, [pc, #20]	; (ff8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    ff78:	9b01      	ldr	r3, [sp, #4]
    ff7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff7e:	2b00      	cmp	r3, #0
    ff80:	d100      	bne.n	ff84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff84:	bf00      	nop
    ff86:	b003      	add	sp, #12
    ff88:	f85d fb04 	ldr.w	pc, [sp], #4
    ff8c:	1fff91dc 	.word	0x1fff91dc
    ff90:	1fff91d8 	.word	0x1fff91d8

0000ff94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    ff94:	b500      	push	{lr}
    ff96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff98:	f7f1 fa68 	bl	146c <Sys_GetCoreID>
    ff9c:	4603      	mov	r3, r0
    ff9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    ffa0:	4a10      	ldr	r2, [pc, #64]	; (ffe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ffa2:	9b01      	ldr	r3, [sp, #4]
    ffa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa8:	2b00      	cmp	r3, #0
    ffaa:	d10d      	bne.n	ffc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffac:	f7f0 fca9 	bl	902 <Port_schm_read_msr>
    ffb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffb2:	9b00      	ldr	r3, [sp, #0]
    ffb4:	f003 0301 	and.w	r3, r3, #1
    ffb8:	2b00      	cmp	r3, #0
    ffba:	d100      	bne.n	ffbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ffbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ffbe:	490a      	ldr	r1, [pc, #40]	; (ffe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    ffc0:	9b01      	ldr	r3, [sp, #4]
    ffc2:	9a00      	ldr	r2, [sp, #0]
    ffc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    ffc8:	4a06      	ldr	r2, [pc, #24]	; (ffe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ffca:	9b01      	ldr	r3, [sp, #4]
    ffcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd0:	1c5a      	adds	r2, r3, #1
    ffd2:	4904      	ldr	r1, [pc, #16]	; (ffe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ffd4:	9b01      	ldr	r3, [sp, #4]
    ffd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffda:	bf00      	nop
    ffdc:	b003      	add	sp, #12
    ffde:	f85d fb04 	ldr.w	pc, [sp], #4
    ffe2:	bf00      	nop
    ffe4:	1fff91e4 	.word	0x1fff91e4
    ffe8:	1fff91e0 	.word	0x1fff91e0

0000ffec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    ffec:	b500      	push	{lr}
    ffee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fff0:	f7f1 fa3c 	bl	146c <Sys_GetCoreID>
    fff4:	4603      	mov	r3, r0
    fff6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    fff8:	4a0d      	ldr	r2, [pc, #52]	; (10030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fffa:	9b01      	ldr	r3, [sp, #4]
    fffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10000:	1e5a      	subs	r2, r3, #1
   10002:	490b      	ldr	r1, [pc, #44]	; (10030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10004:	9b01      	ldr	r3, [sp, #4]
   10006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   1000a:	4a0a      	ldr	r2, [pc, #40]	; (10034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   1000c:	9b01      	ldr	r3, [sp, #4]
   1000e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10012:	f003 0301 	and.w	r3, r3, #1
   10016:	2b00      	cmp	r3, #0
   10018:	d106      	bne.n	10028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   1001a:	4a05      	ldr	r2, [pc, #20]	; (10030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   1001c:	9b01      	ldr	r3, [sp, #4]
   1001e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10022:	2b00      	cmp	r3, #0
   10024:	d100      	bne.n	10028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10026:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10028:	bf00      	nop
   1002a:	b003      	add	sp, #12
   1002c:	f85d fb04 	ldr.w	pc, [sp], #4
   10030:	1fff91e4 	.word	0x1fff91e4
   10034:	1fff91e0 	.word	0x1fff91e0

00010038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   10038:	b500      	push	{lr}
   1003a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1003c:	f7f1 fa16 	bl	146c <Sys_GetCoreID>
   10040:	4603      	mov	r3, r0
   10042:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   10044:	4a10      	ldr	r2, [pc, #64]	; (10088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   10046:	9b01      	ldr	r3, [sp, #4]
   10048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1004c:	2b00      	cmp	r3, #0
   1004e:	d10d      	bne.n	1006c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10050:	f7f0 fc57 	bl	902 <Port_schm_read_msr>
   10054:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10056:	9b00      	ldr	r3, [sp, #0]
   10058:	f003 0301 	and.w	r3, r3, #1
   1005c:	2b00      	cmp	r3, #0
   1005e:	d100      	bne.n	10062 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10060:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10062:	490a      	ldr	r1, [pc, #40]	; (1008c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   10064:	9b01      	ldr	r3, [sp, #4]
   10066:	9a00      	ldr	r2, [sp, #0]
   10068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   1006c:	4a06      	ldr	r2, [pc, #24]	; (10088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   1006e:	9b01      	ldr	r3, [sp, #4]
   10070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10074:	1c5a      	adds	r2, r3, #1
   10076:	4904      	ldr	r1, [pc, #16]	; (10088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   10078:	9b01      	ldr	r3, [sp, #4]
   1007a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1007e:	bf00      	nop
   10080:	b003      	add	sp, #12
   10082:	f85d fb04 	ldr.w	pc, [sp], #4
   10086:	bf00      	nop
   10088:	1fff91ec 	.word	0x1fff91ec
   1008c:	1fff91e8 	.word	0x1fff91e8

00010090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   10090:	b500      	push	{lr}
   10092:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10094:	f7f1 f9ea 	bl	146c <Sys_GetCoreID>
   10098:	4603      	mov	r3, r0
   1009a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   1009c:	4a0d      	ldr	r2, [pc, #52]	; (100d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   1009e:	9b01      	ldr	r3, [sp, #4]
   100a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100a4:	1e5a      	subs	r2, r3, #1
   100a6:	490b      	ldr	r1, [pc, #44]	; (100d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   100a8:	9b01      	ldr	r3, [sp, #4]
   100aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   100ae:	4a0a      	ldr	r2, [pc, #40]	; (100d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   100b0:	9b01      	ldr	r3, [sp, #4]
   100b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b6:	f003 0301 	and.w	r3, r3, #1
   100ba:	2b00      	cmp	r3, #0
   100bc:	d106      	bne.n	100cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   100be:	4a05      	ldr	r2, [pc, #20]	; (100d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   100c0:	9b01      	ldr	r3, [sp, #4]
   100c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100c6:	2b00      	cmp	r3, #0
   100c8:	d100      	bne.n	100cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   100ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100cc:	bf00      	nop
   100ce:	b003      	add	sp, #12
   100d0:	f85d fb04 	ldr.w	pc, [sp], #4
   100d4:	1fff91ec 	.word	0x1fff91ec
   100d8:	1fff91e8 	.word	0x1fff91e8

000100dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   100dc:	b500      	push	{lr}
   100de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100e0:	f7f1 f9c4 	bl	146c <Sys_GetCoreID>
   100e4:	4603      	mov	r3, r0
   100e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   100e8:	4a10      	ldr	r2, [pc, #64]	; (1012c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   100ea:	9b01      	ldr	r3, [sp, #4]
   100ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d10d      	bne.n	10110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100f4:	f7f0 fc05 	bl	902 <Port_schm_read_msr>
   100f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100fa:	9b00      	ldr	r3, [sp, #0]
   100fc:	f003 0301 	and.w	r3, r3, #1
   10100:	2b00      	cmp	r3, #0
   10102:	d100      	bne.n	10106 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10104:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10106:	490a      	ldr	r1, [pc, #40]	; (10130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   10108:	9b01      	ldr	r3, [sp, #4]
   1010a:	9a00      	ldr	r2, [sp, #0]
   1010c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   10110:	4a06      	ldr	r2, [pc, #24]	; (1012c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10112:	9b01      	ldr	r3, [sp, #4]
   10114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10118:	1c5a      	adds	r2, r3, #1
   1011a:	4904      	ldr	r1, [pc, #16]	; (1012c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1011c:	9b01      	ldr	r3, [sp, #4]
   1011e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10122:	bf00      	nop
   10124:	b003      	add	sp, #12
   10126:	f85d fb04 	ldr.w	pc, [sp], #4
   1012a:	bf00      	nop
   1012c:	1fff91f4 	.word	0x1fff91f4
   10130:	1fff91f0 	.word	0x1fff91f0

00010134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   10134:	b500      	push	{lr}
   10136:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10138:	f7f1 f998 	bl	146c <Sys_GetCoreID>
   1013c:	4603      	mov	r3, r0
   1013e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   10140:	4a0d      	ldr	r2, [pc, #52]	; (10178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   10142:	9b01      	ldr	r3, [sp, #4]
   10144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10148:	1e5a      	subs	r2, r3, #1
   1014a:	490b      	ldr	r1, [pc, #44]	; (10178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1014c:	9b01      	ldr	r3, [sp, #4]
   1014e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10152:	4a0a      	ldr	r2, [pc, #40]	; (1017c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   10154:	9b01      	ldr	r3, [sp, #4]
   10156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1015a:	f003 0301 	and.w	r3, r3, #1
   1015e:	2b00      	cmp	r3, #0
   10160:	d106      	bne.n	10170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   10162:	4a05      	ldr	r2, [pc, #20]	; (10178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1016a:	2b00      	cmp	r3, #0
   1016c:	d100      	bne.n	10170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1016e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10170:	bf00      	nop
   10172:	b003      	add	sp, #12
   10174:	f85d fb04 	ldr.w	pc, [sp], #4
   10178:	1fff91f4 	.word	0x1fff91f4
   1017c:	1fff91f0 	.word	0x1fff91f0

00010180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   10180:	b500      	push	{lr}
   10182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10184:	f7f1 f972 	bl	146c <Sys_GetCoreID>
   10188:	4603      	mov	r3, r0
   1018a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   1018c:	4a10      	ldr	r2, [pc, #64]	; (101d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1018e:	9b01      	ldr	r3, [sp, #4]
   10190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10194:	2b00      	cmp	r3, #0
   10196:	d10d      	bne.n	101b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10198:	f7f0 fbb3 	bl	902 <Port_schm_read_msr>
   1019c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1019e:	9b00      	ldr	r3, [sp, #0]
   101a0:	f003 0301 	and.w	r3, r3, #1
   101a4:	2b00      	cmp	r3, #0
   101a6:	d100      	bne.n	101aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   101aa:	490a      	ldr	r1, [pc, #40]	; (101d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   101ac:	9b01      	ldr	r3, [sp, #4]
   101ae:	9a00      	ldr	r2, [sp, #0]
   101b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   101b4:	4a06      	ldr	r2, [pc, #24]	; (101d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   101b6:	9b01      	ldr	r3, [sp, #4]
   101b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101bc:	1c5a      	adds	r2, r3, #1
   101be:	4904      	ldr	r1, [pc, #16]	; (101d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   101c0:	9b01      	ldr	r3, [sp, #4]
   101c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101c6:	bf00      	nop
   101c8:	b003      	add	sp, #12
   101ca:	f85d fb04 	ldr.w	pc, [sp], #4
   101ce:	bf00      	nop
   101d0:	1fff91fc 	.word	0x1fff91fc
   101d4:	1fff91f8 	.word	0x1fff91f8

000101d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   101d8:	b500      	push	{lr}
   101da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101dc:	f7f1 f946 	bl	146c <Sys_GetCoreID>
   101e0:	4603      	mov	r3, r0
   101e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   101e4:	4a0d      	ldr	r2, [pc, #52]	; (1021c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   101e6:	9b01      	ldr	r3, [sp, #4]
   101e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ec:	1e5a      	subs	r2, r3, #1
   101ee:	490b      	ldr	r1, [pc, #44]	; (1021c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   101f0:	9b01      	ldr	r3, [sp, #4]
   101f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   101f6:	4a0a      	ldr	r2, [pc, #40]	; (10220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   101f8:	9b01      	ldr	r3, [sp, #4]
   101fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101fe:	f003 0301 	and.w	r3, r3, #1
   10202:	2b00      	cmp	r3, #0
   10204:	d106      	bne.n	10214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   10206:	4a05      	ldr	r2, [pc, #20]	; (1021c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10208:	9b01      	ldr	r3, [sp, #4]
   1020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1020e:	2b00      	cmp	r3, #0
   10210:	d100      	bne.n	10214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10214:	bf00      	nop
   10216:	b003      	add	sp, #12
   10218:	f85d fb04 	ldr.w	pc, [sp], #4
   1021c:	1fff91fc 	.word	0x1fff91fc
   10220:	1fff91f8 	.word	0x1fff91f8

00010224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   10224:	b500      	push	{lr}
   10226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10228:	f7f1 f920 	bl	146c <Sys_GetCoreID>
   1022c:	4603      	mov	r3, r0
   1022e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   10230:	4a10      	ldr	r2, [pc, #64]	; (10274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   10232:	9b01      	ldr	r3, [sp, #4]
   10234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10238:	2b00      	cmp	r3, #0
   1023a:	d10d      	bne.n	10258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1023c:	f7f0 fb61 	bl	902 <Port_schm_read_msr>
   10240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10242:	9b00      	ldr	r3, [sp, #0]
   10244:	f003 0301 	and.w	r3, r3, #1
   10248:	2b00      	cmp	r3, #0
   1024a:	d100      	bne.n	1024e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1024c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1024e:	490a      	ldr	r1, [pc, #40]	; (10278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   10250:	9b01      	ldr	r3, [sp, #4]
   10252:	9a00      	ldr	r2, [sp, #0]
   10254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   10258:	4a06      	ldr	r2, [pc, #24]	; (10274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1025a:	9b01      	ldr	r3, [sp, #4]
   1025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10260:	1c5a      	adds	r2, r3, #1
   10262:	4904      	ldr	r1, [pc, #16]	; (10274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   10264:	9b01      	ldr	r3, [sp, #4]
   10266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1026a:	bf00      	nop
   1026c:	b003      	add	sp, #12
   1026e:	f85d fb04 	ldr.w	pc, [sp], #4
   10272:	bf00      	nop
   10274:	1fff9204 	.word	0x1fff9204
   10278:	1fff9200 	.word	0x1fff9200

0001027c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   1027c:	b500      	push	{lr}
   1027e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10280:	f7f1 f8f4 	bl	146c <Sys_GetCoreID>
   10284:	4603      	mov	r3, r0
   10286:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   10288:	4a0d      	ldr	r2, [pc, #52]	; (102c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1028a:	9b01      	ldr	r3, [sp, #4]
   1028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10290:	1e5a      	subs	r2, r3, #1
   10292:	490b      	ldr	r1, [pc, #44]	; (102c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10294:	9b01      	ldr	r3, [sp, #4]
   10296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1029a:	4a0a      	ldr	r2, [pc, #40]	; (102c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   1029c:	9b01      	ldr	r3, [sp, #4]
   1029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a2:	f003 0301 	and.w	r3, r3, #1
   102a6:	2b00      	cmp	r3, #0
   102a8:	d106      	bne.n	102b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   102aa:	4a05      	ldr	r2, [pc, #20]	; (102c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   102ac:	9b01      	ldr	r3, [sp, #4]
   102ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b2:	2b00      	cmp	r3, #0
   102b4:	d100      	bne.n	102b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102b8:	bf00      	nop
   102ba:	b003      	add	sp, #12
   102bc:	f85d fb04 	ldr.w	pc, [sp], #4
   102c0:	1fff9204 	.word	0x1fff9204
   102c4:	1fff9200 	.word	0x1fff9200

000102c8 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   102c8:	bf00      	nop
   102ca:	4770      	bx	lr

000102cc <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   102cc:	b510      	push	{r4, lr}
   102ce:	b084      	sub	sp, #16
   102d0:	4604      	mov	r4, r0
   102d2:	4608      	mov	r0, r1
   102d4:	4611      	mov	r1, r2
   102d6:	461a      	mov	r2, r3
   102d8:	4623      	mov	r3, r4
   102da:	f8ad 3006 	strh.w	r3, [sp, #6]
   102de:	4603      	mov	r3, r0
   102e0:	f88d 3005 	strb.w	r3, [sp, #5]
   102e4:	460b      	mov	r3, r1
   102e6:	f88d 3004 	strb.w	r3, [sp, #4]
   102ea:	4613      	mov	r3, r2
   102ec:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102f0:	f7f1 f8bc 	bl	146c <Sys_GetCoreID>
   102f4:	4603      	mov	r3, r0
   102f6:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   102f8:	490d      	ldr	r1, [pc, #52]	; (10330 <Det_ReportError+0x64>)
   102fa:	9b03      	ldr	r3, [sp, #12]
   102fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10300:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   10304:	4a0b      	ldr	r2, [pc, #44]	; (10334 <Det_ReportError+0x68>)
   10306:	9b03      	ldr	r3, [sp, #12]
   10308:	4413      	add	r3, r2
   1030a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1030e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   10310:	4a09      	ldr	r2, [pc, #36]	; (10338 <Det_ReportError+0x6c>)
   10312:	9b03      	ldr	r3, [sp, #12]
   10314:	4413      	add	r3, r2
   10316:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1031a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   1031c:	4a07      	ldr	r2, [pc, #28]	; (1033c <Det_ReportError+0x70>)
   1031e:	9b03      	ldr	r3, [sp, #12]
   10320:	4413      	add	r3, r2
   10322:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10326:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10328:	2300      	movs	r3, #0
}
   1032a:	4618      	mov	r0, r3
   1032c:	b004      	add	sp, #16
   1032e:	bd10      	pop	{r4, pc}
   10330:	1fff9230 	.word	0x1fff9230
   10334:	1fff9208 	.word	0x1fff9208
   10338:	1fff920c 	.word	0x1fff920c
   1033c:	1fff9210 	.word	0x1fff9210

00010340 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   10340:	b510      	push	{r4, lr}
   10342:	b084      	sub	sp, #16
   10344:	4604      	mov	r4, r0
   10346:	4608      	mov	r0, r1
   10348:	4611      	mov	r1, r2
   1034a:	461a      	mov	r2, r3
   1034c:	4623      	mov	r3, r4
   1034e:	f8ad 3006 	strh.w	r3, [sp, #6]
   10352:	4603      	mov	r3, r0
   10354:	f88d 3005 	strb.w	r3, [sp, #5]
   10358:	460b      	mov	r3, r1
   1035a:	f88d 3004 	strb.w	r3, [sp, #4]
   1035e:	4613      	mov	r3, r2
   10360:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10364:	f7f1 f882 	bl	146c <Sys_GetCoreID>
   10368:	4603      	mov	r3, r0
   1036a:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   1036c:	490d      	ldr	r1, [pc, #52]	; (103a4 <Det_ReportRuntimeError+0x64>)
   1036e:	9b03      	ldr	r3, [sp, #12]
   10370:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10374:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   10378:	4a0b      	ldr	r2, [pc, #44]	; (103a8 <Det_ReportRuntimeError+0x68>)
   1037a:	9b03      	ldr	r3, [sp, #12]
   1037c:	4413      	add	r3, r2
   1037e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10382:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   10384:	4a09      	ldr	r2, [pc, #36]	; (103ac <Det_ReportRuntimeError+0x6c>)
   10386:	9b03      	ldr	r3, [sp, #12]
   10388:	4413      	add	r3, r2
   1038a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1038e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   10390:	4a07      	ldr	r2, [pc, #28]	; (103b0 <Det_ReportRuntimeError+0x70>)
   10392:	9b03      	ldr	r3, [sp, #12]
   10394:	4413      	add	r3, r2
   10396:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1039a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   1039c:	2300      	movs	r3, #0
}
   1039e:	4618      	mov	r0, r3
   103a0:	b004      	add	sp, #16
   103a2:	bd10      	pop	{r4, pc}
   103a4:	1fff9234 	.word	0x1fff9234
   103a8:	1fff9214 	.word	0x1fff9214
   103ac:	1fff9218 	.word	0x1fff9218
   103b0:	1fff921c 	.word	0x1fff921c

000103b4 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   103b4:	b510      	push	{r4, lr}
   103b6:	b084      	sub	sp, #16
   103b8:	4604      	mov	r4, r0
   103ba:	4608      	mov	r0, r1
   103bc:	4611      	mov	r1, r2
   103be:	461a      	mov	r2, r3
   103c0:	4623      	mov	r3, r4
   103c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   103c6:	4603      	mov	r3, r0
   103c8:	f88d 3005 	strb.w	r3, [sp, #5]
   103cc:	460b      	mov	r3, r1
   103ce:	f88d 3004 	strb.w	r3, [sp, #4]
   103d2:	4613      	mov	r3, r2
   103d4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103d8:	f7f1 f848 	bl	146c <Sys_GetCoreID>
   103dc:	4603      	mov	r3, r0
   103de:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   103e0:	490d      	ldr	r1, [pc, #52]	; (10418 <Det_ReportTransientFault+0x64>)
   103e2:	9b03      	ldr	r3, [sp, #12]
   103e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   103e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   103ec:	4a0b      	ldr	r2, [pc, #44]	; (1041c <Det_ReportTransientFault+0x68>)
   103ee:	9b03      	ldr	r3, [sp, #12]
   103f0:	4413      	add	r3, r2
   103f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   103f6:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   103f8:	4a09      	ldr	r2, [pc, #36]	; (10420 <Det_ReportTransientFault+0x6c>)
   103fa:	9b03      	ldr	r3, [sp, #12]
   103fc:	4413      	add	r3, r2
   103fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10402:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   10404:	4a07      	ldr	r2, [pc, #28]	; (10424 <Det_ReportTransientFault+0x70>)
   10406:	9b03      	ldr	r3, [sp, #12]
   10408:	4413      	add	r3, r2
   1040a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1040e:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10410:	2300      	movs	r3, #0
}
   10412:	4618      	mov	r0, r3
   10414:	b004      	add	sp, #16
   10416:	bd10      	pop	{r4, pc}
   10418:	1fff922c 	.word	0x1fff922c
   1041c:	1fff9220 	.word	0x1fff9220
   10420:	1fff9224 	.word	0x1fff9224
   10424:	1fff9228 	.word	0x1fff9228

00010428 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   10428:	bf00      	nop
   1042a:	4770      	bx	lr

0001042c <Clock_Ip_au8DividerCallbackIndex>:
   1042c:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0001043c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0001044c <Clock_Ip_au8XoscCallbackIndex>:
   1044c:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0001045c <Clock_Ip_au8IrcoscCallbackIndex>:
   1045c:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0001046c <Clock_Ip_au8GateCallbackIndex>:
   1046c:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0001047c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0001048c <Clock_Ip_au8PllCallbackIndex>:
   1048c:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0001049c <Clock_Ip_au8SelectorCallbackIndex>:
   1049c:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

000104ac <Clock_Ip_au8PcfsCallbackIndex>:
	...

000104bc <Clock_Ip_au8CmuCallbackIndex>:
	...

000104cc <Clock_Ip_au8ClockFeatures>:
	...
   104dc:	0000 0100 0000 0000 0000 0000 0002 0000     ................
   104ec:	0000 0000 0300 0000 0000 0000 0000 0004     ................
   104fc:	0000 0000 0000 0500 0000 0000 0000 0000     ................
   1050c:	0006 0000 0000 0000 0100 0000 0000 0000     ................
   1051c:	0000 0001 0000 0000 0000 0400 0000 0000     ................
   1052c:	0000 0000 0005 0000 0001 0000 0401 0000     ................
   1053c:	0200 0000 0100 0005 0000 0003 0000 0402     ................
   1054c:	0000 0400 0000 0200 0005 0000 0005 0000     ................
   1055c:	0403 0000 0600 0000 0300 0005 0000 0007     ................
   1056c:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
   105ac:	0000 0005 0000 0000 0000 0600 0100 0000     ................
   105bc:	0000 0000 0007 0003 0000 0000 0000 0000     ................
   105cc:	0000 0000 0000 0006 0000 0000 0000 0700     ................
   105dc:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
   105f4:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
   10604:	0000 0000 000b 0003 0000 0000 0000 0000     ................
   10614:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
   10624:	0100 0000 0000 0000 000e 0003 0000 0000     ................
   10634:	0800 0000 0000 0000 0000 0009 0000 0000     ................
   10644:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
   10654:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
   10664:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
   1067c:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
   1068c:	0000 0100 0000 0000 0000 0000 0007 0000     ................
   1069c:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
   106ac:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
   106bc:	0009 0000 0400 0000 0900 0000 0000 0003     ................
   106cc:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
   106dc:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
   106ec:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
   106fc:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
   1070c:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
   1071c:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
   1072c:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
   1073c:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
   1074c:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
   1075c:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
   1076c:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
   1077c:	0000 0001 0000 0009 0000 0000 0000 0700     ................
   1078c:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
   1079c:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
   107ac:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
   107bc:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
   107cc:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

000107dc <Clock_Ip_au16SelectorEntryHardwareValue>:
   107dc:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
   107ec:	0810 0001 0100 0202 0000 0000 0007 0000     ................
   107fc:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

00010834 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   10834:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

00010864 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   10864:	0700 0000 0000 0000 0000 0202 0303 0101     ................
   10874:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

00010894 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10894:	0001 0000 0000 0000 0000 0202 0303 0101     ................
   108a4:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

000108c4 <Clock_Ip_au8DividerValueHardwareValue>:
   108c4:	0100 0002 0003 0000 0004 0000 0000 0000     ................
   108d4:	0005 0000 0000 0000 0000 0000 0000 0000     ................
   108e4:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
   10904:	0007 0000                                   ....

00010908 <Clock_Ip_apxScgPeriphAsyncDivs>:
   10908:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

00010918 <Clock_Ip_aeSourceTypeClockName>:
   10918:	0000 0000 0001 0000 0001 0000 0001 0000     ................
   10928:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   10938:	0002 0000 0003 0000 0001 0000 0001 0000     ................
   10948:	0001 0000 0001 0000 0002 0000 0002 0000     ................
   10958:	0003 0000 0003 0000 0001 0000 0001 0000     ................
   10968:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

000109d4 <Clock_Ip_aeHwPllName>:
   109d4:	0009 0000                                   ....

000109d8 <Clock_Ip_aeHwDfsName>:
   109d8:	0057 0000                                   W...

000109dc <Clock_Ip_axDividerCallbacks>:
   109dc:	2ae5 0000 2aef 0000 2b09 0000 2b23 0000     .*...*...+..#+..
   109ec:	2b3d 0000 2b57 0000 2b71 0000 2b8b 0000     =+..W+..q+...+..
   109fc:	2ba5 0000 2bbf 0000 2bd9 0000 2bf3 0000     .+...+...+...+..
   10a0c:	2c0d 0000 2c27 0000 2c41 0000               .,..',..A,..

00010a18 <Clock_Ip_axDividerTriggerCallbacks>:
   10a18:	2fb5 0000 2fb5 0000                         ./.../..

00010a20 <Clock_Ip_axExtOscCallbacks>:
   10a20:	2fc1 0000 2fc1 0000 2fc1 0000 2fcb 0000     ./.../.../.../..
   10a30:	2fc1 0000 2fd5 0000 2fef 0000 3009 0000     ./.../.../...0..
   10a40:	308d 0000 30a1 0000                         .0...0..

00010a48 <Clock_Ip_axFracDivCallbacks>:
   10a48:	3261 0000 3261 0000 326b 0000               a2..a2..k2..

00010a54 <Clock_Ip_axGateCallbacks>:
   10a54:	3285 0000 328f 0000 338f 0000 33a9 0000     .2...2...3...3..
   10a64:	333f 0000 3359 0000 32ef 0000 3309 0000     ?3..Y3...2...3..
   10a74:	329f 0000 32b9 0000 33df 0000 33f9 0000     .2...2...3...3..
   10a84:	342f 0000 3449 0000                         /4..I4..

00010a8c <Clock_Ip_axIntOscCallbacks>:
   10a8c:	35f5 0000 35f5 0000 35ff 0000 3609 0000     .5...5...5...6..
   10a9c:	3623 0000 363d 0000 3651 0000 366b 0000     #6..=6..Q6..k6..
   10aac:	3685 0000 3699 0000 36b3 0000 36cd 0000     .6...6...6...6..
   10abc:	3775 0000 378f 0000 37a9 0000               u7...7...7..

00010ac8 <Clock_Ip_axCmuCallbacks>:
   10ac8:	3d45 0000 3d4f 0000 3d5b 0000 3d45 0000     E=..O=..[=..E=..

00010ad8 <Clock_Ip_axPllCallbacks>:
   10ad8:	3d65 0000 3d65 0000 3d6f 0000 3d65 0000     e=..e=..o=..e=..
   10ae8:	3d7b 0000 3d85 0000 3d9f 0000 3db9 0000     {=...=...=...=..
   10af8:	3e5d 0000 3e49 0000                         ]>..I>..

00010b00 <Clock_Ip_axPcfsCallbacks>:
   10b00:	3fb9 0000                                   .?..

00010b04 <Clock_Ip_axSelectorCallbacks>:
   10b04:	3fc5 0000 3fc5 0000 3fcf 0000 3fe9 0000     .?...?...?...?..
   10b14:	3fc5 0000 4003 0000 401d 0000 4037 0000     .?...@...@..7@..
   10b24:	4051 0000 406b 0000 4085 0000 409f 0000     Q@..k@...@...@..
   10b34:	40b9 0000 40d3 0000 40ed 0000 4107 0000     .@...@...@...A..
   10b44:	4121 0000 413b 0000 4155 0000 416f 0000     !A..;A..UA..oA..
   10b54:	4189 0000 41a3 0000                         .A...A..

00010b5c <ClockSource>:
   10b5c:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
   10b74:	0009 0000                                   ....

00010b78 <ResetReasonArray>:
   10b78:	0000 0000 0001 0000 0002 0000 0003 0000     ................
   10b88:	0004 0000 0005 0000 0006 0000 0007 0000     ................
   10b98:	0008 0000 0009 0000 000a 0000 000b 0000     ................
   10ba8:	000c 0000 000d 0000 000e 0000               ............

00010bb4 <Port_au32PortCiPortBaseAddr>:
   10bb4:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
   10bc4:	d000 4004                                   ...@

00010bc8 <Port_au32PortCiGpioBaseAddr>:
   10bc8:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
   10bd8:	f100 400f                                   ...@

00010bdc <Adc_Ip_apxBase>:
   10bdc:	b000 4003 7000 4002                         ...@.p.@

00010be4 <Pdb_Adc_Ip_apxBase>:
   10be4:	6000 4003 1000 4003                         .`.@...@

00010bec <Queue_Config>:
   10bec:	0002 0000 0001 0000 8b50 1fff               ........P...

00010bf8 <Task_Config>:
   10bf8:	0032 0000 0001 0000 0d51 0000 0064 0000     2.......Q...d...
   10c08:	0001 0000 0d5d 0000                         ....]...

00010c10 <Timer_Config>:
   10c10:	0064 0000 0000 0000 0e7d 0000               d.......}...

00010c1c <Scheduler_Config>:
   10c1c:	000a 0000 0002 0000 0bf8 0001 0001 0000     ................
   10c2c:	0c10 0001 0001 0000 0bec 0001               ............

00010c38 <ButtonsCfg>:
   10c38:	008c 0000 012c 0000 0071 0000 012c 0000     ....,...q...,...
   10c48:	000c 0000 012c 0000                         ....,...

00010c50 <LedsCfg>:
   10c50:	0048 0001 0049 0001 004a 0001 004b 0001     H...I...J...K...
   10c60:	004d 0001 004e 0001                         M...N...

00010c68 <AdcIpChansConfig_0>:
   10c68:	0000 0000 0005 0000 0000 0000 0001 0000     ................
   10c78:	0008 0000 0000 0000                         ........

00010c80 <AdcIpChansConfig_1>:
   10c80:	0000 0000 000f 0000 0000 0000 0001 0000     ................
   10c90:	0008 0000 0000 0000                         ........

00010c98 <AdcIpConfig_0>:
   10c98:	0000 0000 0003 0000 0000 0000 000c 0000     ................
   10ca8:	0000 0000 0001 0000 0001 0000 0000 0000     ................
	...
   10cc0:	0000 00ff 0000 0000 0000 0000 0c68 0001     ............h...
   10cd0:	a4f5 0000                                   ....

00010cd4 <AdcIpConfig_1>:
   10cd4:	0000 0000 0003 0000 0000 0000 000c 0000     ................
   10ce4:	0000 0000 0001 0000 0001 0000 0000 0000     ................
	...
   10cfc:	0000 00ff 0000 0000 0000 0000 0c80 0001     ................
   10d0c:	a517 0000                                   ....

00010d10 <AdcIpwCfg>:
   10d10:	0c98 0001 0cd4 0001 1230 0001 1250 0001     ........0...P...
   10d20:	0100 0101 0001 0001 0002 0002 ffff 0101     ................
   10d30:	0100 0000                                   ....

00010d34 <AdcIpwGroupConfig_0>:
   10d34:	0001 0000 0000 0000 00c8 0000 0000 0001     ................
   10d44:	0000 0000                                   ....

00010d48 <AdcIpwGroupConfig_1>:
   10d48:	0001 0000 0000 0000 00c8 0000 0000 0001     ................
   10d58:	0000 0000                                   ....

00010d5c <Adc_Group0_Assignment_0>:
   10d5c:	0000 0001                                   ....

00010d60 <Adc_Group1_Assignment_1>:
   10d60:	0000 0001                                   ....

00010d64 <Adc_GroupsCfg>:
	...
   10d80:	0001 0000 0d5c 0001 0002 0008 0005 0000     ....\...........
   10d90:	0000 0000 0d34 0001 0001 0001 0000 0000     ....4...........
	...
   10db4:	0001 0000 0d60 0001 0002 000f 0008 0000     ....`...........
   10dc4:	0000 0000 0d48 0001                         ....H...

00010dcc <Adc_au16GroupIdToIndexMap>:
   10dcc:	0000 0001                                   ....

00010dd0 <Adc_Partition_Assignment>:
   10dd0:	0000 0000                                   ....

00010dd4 <Adc_Config>:
   10dd4:	0d10 0001 0d64 0001 0002 0000 0dcc 0001     ....d...........
   10de4:	0000 0000 0dd0 0001 0001 0000               ............

00010df0 <Mcu_aClockConfigPB>:
	...
   10df8:	0002 1400 000e 0400 0020 0100 0002 0000     ........ .......
   10e08:	0001 0100 0001 0000 0005 0000 0001 0000     ................
   10e18:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
	...
   10e30:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
	...
   10e58:	0019 0000 0005 0000 001a 0000 0002 0000     ................
   10e68:	001b 0000 0005 0000 002a 0000 0002 0000     ........*.......
   10e78:	003f 0000 000a 0000 0040 0000 0000 0000     ?.......@.......
   10e88:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
   10e98:	0031 0000 000b 0000 0045 0000 0000 0000     1.......E.......
   10ea8:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
   10eb8:	0044 0000 0000 0000 0030 0000 000b 0000     D.......0.......
   10ec8:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
   10ed8:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
   10ee8:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
   10ef8:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   10f08:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   10f18:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   10f28:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   10f38:	000a 0000 0001 0000 0000 0000 000b 0000     ................
   10f48:	0001 0000 0000 0000 000c 0000 0001 0000     ................
   10f58:	0000 0000 000d 0000 0002 0000 0000 0000     ................
   10f68:	001d 0000 0001 0000 0000 0000 001e 0000     ................
   10f78:	0002 0000 0000 0000 001f 0000 0001 0000     ................
   10f88:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
   10f98:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
   10fa8:	0001 0000 0000 0000 0025 0000 0002 0000     ........%.......
   10fb8:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
   10fc8:	0027 0000 0002 0000 0000 0000 0048 0000     '...........H...
   10fd8:	0001 0000 0001 0000 0057 0000 0000 0000     ........W.......
   10fe8:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
   10ff8:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
   11010:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
   11028:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
   11044:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
   11054:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
   11064:	0030 0000 0001 0000 0031 0000 0001 0000     0.......1.......
   11074:	0033 0000 0000 0000 0034 0000 0000 0000     3.......4.......
   11084:	0036 0000 0000 0000 0039 0000 0000 0000     6.......9.......
   11094:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
   110a4:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
   110b4:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
   110c4:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
   110d4:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
   110e4:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
   110f4:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
   11104:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
   11114:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
   11124:	004e 0000 0001 0000 004f 0000 0001 0000     N.......O.......
   11134:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
   11144:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
   11154:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
   11164:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   11174:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   11184:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   11194:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   111a4:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   111b4:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

000111e8 <aIrqConfiguration>:
   111e8:	0027 0000 0001 0000 8e39 0000 0028 0000     '.......9...(...
   111f8:	0001 0000 8e49 0000                         ....I...

00011200 <intCtrlConfig>:
   11200:	0002 0000 11e8 0001                         ........

00011208 <Mcu_Config>:
   11208:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
   11218:	1618 0001 0df0 0001 1624 0001               ........$...

00011224 <OsIf_xPredefinedConfig>:
   11224:	0000 0000 6c00 02dc                         .....l..

0001122c <OsIf_apxPredefinedConfig>:
   1122c:	1224 0001                                   $...

00011230 <PdbAdcIpConfig_0>:
	...
   1123c:	000f 0000 0000 ffff 0000 0000 0000 0000     ................
   1124c:	0000 0000                                   ....

00011250 <PdbAdcIpConfig_1>:
	...
   1125c:	000f 0000 0000 ffff 0000 0000 0000 0000     ................
   1126c:	0000 0000                                   ....

00011270 <Platform_uConfiguration>:
   11270:	1278 0001                                   x...

00011274 <Platform_Config>:
   11274:	1270 0001                                   p...

00011278 <ipwConfig>:
   11278:	1200 0001 0000 0000                         ........

00011280 <g_pin_mux_InitConfigArr>:
   11280:	b000 4004 f080 400f 0008 0000 0002 0000     ...@...@........
   11290:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   112a8:	b000 4004 f080 400f 0009 0000 0002 0000     ...@...@........
   112b8:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   112d0:	b000 4004 f080 400f 000a 0000 0002 0000     ...@...@........
   112e0:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   112f8:	b000 4004 f080 400f 000b 0000 0002 0000     ...@...@........
   11308:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   11320:	b000 4004 f080 400f 000d 0000 0002 0000     ...@...@........
   11330:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   11348:	b000 4004 f080 400f 000e 0000 0002 0000     ...@...@........
   11358:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   11370:	d000 4004 f100 400f 000c 0000 0002 0000     ...@...@........
   11380:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...
   11398:	c000 4004 f0c0 400f 0011 0000 0002 0000     ...@...@........
   113a8:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...
   113c0:	9000 4004 f000 400f 000c 0000 0002 0000     ...@...@........
   113d0:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...
   113e8:	a000 4004 0000 0000 0001 0000 0002 0000     ...@............
   113f8:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...
   11410:	a000 4004 0000 0000 000d 0000 0002 0000     ...@............
   11420:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...

00011438 <au8Port_PartitionList>:
   11438:	0001 0000                                   ....

0001143c <au32Port_PinToPartitionMap>:
   1143c:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   1144c:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   1145c:	0001 0000 0001 0000 0001 0000               ............

00011468 <Port_au16NoUnUsedPadsArrayDefault>:
   11468:	0000 0001 0002 0003 0006 0007 0008 0009     ................
   11478:	000b 000d 000e 000f 0010 0011 0020 0022     ............ .".
   11488:	0023 0024 0025 0026 0027 0028 0029 002a     #.$.%.&.'.(.).*.
   11498:	002b 002c 002e 002f 0030 0031 0040 0041     +.,.../.0.1.@.A.
   114a8:	0042 0043 0046 0047 004c 004f 0050 0051     B.C.F.G.L.O.P.Q.
   114b8:	0060 0061 0062 0063 0064 0065 0066 0067     `.a.b.c.d.e.f.g.
   114c8:	0068 0069 006a 006b 006c 006d 006e 006f     h.i.j.k.l.m.n.o.
   114d8:	0070 0080 0081 0082 0083 0084 0085 0086     p...............
   114e8:	0087 0088 0089 008a 008b 008d 008e 008f     ................
   114f8:	0090 0000                                   ....

000114fc <Port_UnUsedPin>:
   114fc:	0000 0000 0001 0000 0000 0000               ............

00011508 <Port_aPinConfigDefault>:
   11508:	0048 0000 0100 0000 0000 0000 0002 0000     H...............
   11518:	0001 0001 0049 0000 0100 0000 0000 0000     ....I...........
   11528:	0002 0000 0101 0001 004a 0000 0100 0000     ........J.......
   11538:	0000 0000 0002 0000 0101 0001 008c 0000     ................
   11548:	0100 0000 0000 0000 0001 0000 0101 0001     ................
   11558:	004b 0000 0100 0000 0000 0000 0002 0000     K...............
   11568:	0101 0001 004d 0000 0100 0000 0000 0000     ....M...........
   11578:	0002 0000 0101 0001 004e 0000 0100 0000     ........N.......
   11588:	0000 0000 0002 0000 0101 0001 0071 0000     ............q...
   11598:	0100 0000 0000 0000 0001 0000 0101 0001     ................
   115a8:	000c 0000 0100 0000 0000 0000 0001 0000     ................
   115b8:	0101 0001 0021 0000 0000 0000 0002 0000     ....!...........
   115c8:	0000 0000 0000 0001 002d 0000 0000 0000     ........-.......
   115d8:	0002 0000 0000 0000 0000 0001               ............

000115e4 <Port_Config>:
   115e4:	000b 0049 1468 0001 14fc 0001 1508 0001     ..I.h...........
	...
   115fc:	143c 0001 1438 0001 1280 0001               <...8.......

00011608 <Power_Ip_RCM_ConfigPB>:
	...

00011610 <Power_Ip_PMC_ConfigPB>:
   11610:	0000 0000                                   ....

00011614 <Power_Ip_SMC_ConfigPB>:
   11614:	0000 0000                                   ....

00011618 <Power_Ip_aModeConfigPB>:
	...

00011624 <Power_Ip_HwIPsConfigPB>:
   11624:	1608 0001 1610 0001 1614 0001               ............

00011630 <__INIT_TABLE>:
   11630:	00000002 	.word	0x00000002
   11634:	1fff8b10 	.word	0x1fff8b10
   11638:	00011658 	.word	0x00011658
   1163c:	00011694 	.word	0x00011694
   11640:	1fff8800 	.word	0x1fff8800
   11644:	00000000 	.word	0x00000000
   11648:	00000310 	.word	0x00000310

0001164c <__ZERO_TABLE>:
   1164c:	00000001 	.word	0x00000001
   11650:	1fff8b50 	.word	0x1fff8b50
   11654:	1fff92b0 	.word	0x1fff92b0
