
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000182b 	.word	0x0000182b
  10:	0000182d 	.word	0x0000182d
  14:	0000182f 	.word	0x0000182f
  18:	00001831 	.word	0x00001831
	...
  2c:	00001833 	.word	0x00001833
  30:	00001835 	.word	0x00001835
  34:	00000000 	.word	0x00000000
  38:	00001837 	.word	0x00001837
  3c:	00001839 	.word	0x00001839
  40:	0000183b 	.word	0x0000183b
  44:	0000183b 	.word	0x0000183b
  48:	0000183b 	.word	0x0000183b
  4c:	0000183b 	.word	0x0000183b
  50:	0000183b 	.word	0x0000183b
  54:	0000183b 	.word	0x0000183b
  58:	0000183b 	.word	0x0000183b
  5c:	0000183b 	.word	0x0000183b
  60:	0000183b 	.word	0x0000183b
  64:	0000183b 	.word	0x0000183b
  68:	0000183b 	.word	0x0000183b
  6c:	0000183b 	.word	0x0000183b
  70:	0000183b 	.word	0x0000183b
  74:	0000183b 	.word	0x0000183b
  78:	0000183b 	.word	0x0000183b
  7c:	0000183b 	.word	0x0000183b
  80:	0000183b 	.word	0x0000183b
  84:	0000183b 	.word	0x0000183b
  88:	0000183b 	.word	0x0000183b
  8c:	0000183b 	.word	0x0000183b
  90:	0000183b 	.word	0x0000183b
  94:	0000183b 	.word	0x0000183b
  98:	0000183b 	.word	0x0000183b
  9c:	0000183b 	.word	0x0000183b
  a0:	0000183b 	.word	0x0000183b
  a4:	0000183b 	.word	0x0000183b
  a8:	0000183b 	.word	0x0000183b
  ac:	0000183b 	.word	0x0000183b
  b0:	0000183b 	.word	0x0000183b
  b4:	0000183b 	.word	0x0000183b
  b8:	0000183b 	.word	0x0000183b
  bc:	0000183b 	.word	0x0000183b
  c0:	0000183b 	.word	0x0000183b
  c4:	0000183b 	.word	0x0000183b
  c8:	0000183b 	.word	0x0000183b
  cc:	0000183b 	.word	0x0000183b
  d0:	0000183b 	.word	0x0000183b
  d4:	0000183b 	.word	0x0000183b
  d8:	0000183b 	.word	0x0000183b
  dc:	0000183b 	.word	0x0000183b
  e0:	0000183b 	.word	0x0000183b
  e4:	0000183b 	.word	0x0000183b
  e8:	0000183b 	.word	0x0000183b
  ec:	0000183b 	.word	0x0000183b
  f0:	0000183b 	.word	0x0000183b
  f4:	0000183b 	.word	0x0000183b
  f8:	0000183b 	.word	0x0000183b
  fc:	0000183b 	.word	0x0000183b
 100:	0000183b 	.word	0x0000183b
 104:	0000183b 	.word	0x0000183b
 108:	0000183b 	.word	0x0000183b
 10c:	0000183b 	.word	0x0000183b
 110:	0000183b 	.word	0x0000183b
 114:	0000183b 	.word	0x0000183b
 118:	0000183b 	.word	0x0000183b
 11c:	0000183b 	.word	0x0000183b
 120:	0000183b 	.word	0x0000183b
 124:	0000183b 	.word	0x0000183b
 128:	0000183b 	.word	0x0000183b
 12c:	0000183b 	.word	0x0000183b
 130:	0000183b 	.word	0x0000183b
 134:	0000183b 	.word	0x0000183b
 138:	0000183b 	.word	0x0000183b
 13c:	0000183b 	.word	0x0000183b
 140:	0000183b 	.word	0x0000183b
 144:	0000183b 	.word	0x0000183b
 148:	0000183b 	.word	0x0000183b
 14c:	0000183b 	.word	0x0000183b
 150:	0000183b 	.word	0x0000183b
 154:	0000183b 	.word	0x0000183b
 158:	0000183b 	.word	0x0000183b
 15c:	0000183b 	.word	0x0000183b
 160:	0000183b 	.word	0x0000183b
 164:	0000183b 	.word	0x0000183b
 168:	0000183b 	.word	0x0000183b
 16c:	0000183b 	.word	0x0000183b
 170:	0000183b 	.word	0x0000183b
 174:	0000183b 	.word	0x0000183b
 178:	0000183b 	.word	0x0000183b
 17c:	0000183b 	.word	0x0000183b
 180:	0000183b 	.word	0x0000183b
 184:	0000183b 	.word	0x0000183b
 188:	0000183b 	.word	0x0000183b
 18c:	0000183b 	.word	0x0000183b
 190:	0000183b 	.word	0x0000183b
 194:	0000183b 	.word	0x0000183b
 198:	0000183b 	.word	0x0000183b
 19c:	0000183b 	.word	0x0000183b
 1a0:	0000183b 	.word	0x0000183b
 1a4:	0000183b 	.word	0x0000183b
 1a8:	0000183b 	.word	0x0000183b
 1ac:	0000183b 	.word	0x0000183b
 1b0:	0000183b 	.word	0x0000183b
 1b4:	0000183b 	.word	0x0000183b
 1b8:	0000183b 	.word	0x0000183b
 1bc:	0000183b 	.word	0x0000183b
 1c0:	0000183b 	.word	0x0000183b
 1c4:	0000183b 	.word	0x0000183b
 1c8:	0000183b 	.word	0x0000183b
 1cc:	0000183b 	.word	0x0000183b
 1d0:	0000183b 	.word	0x0000183b
 1d4:	0000183b 	.word	0x0000183b
 1d8:	0000183b 	.word	0x0000183b
 1dc:	0000183b 	.word	0x0000183b
 1e0:	0000183b 	.word	0x0000183b
 1e4:	0000183b 	.word	0x0000183b
 1e8:	0000183b 	.word	0x0000183b
 1ec:	0000183b 	.word	0x0000183b
 1f0:	0000183b 	.word	0x0000183b
 1f4:	0000183b 	.word	0x0000183b
 1f8:	0000183b 	.word	0x0000183b
 1fc:	0000183b 	.word	0x0000183b
 200:	0000183b 	.word	0x0000183b
 204:	0000183b 	.word	0x0000183b
 208:	0000183b 	.word	0x0000183b
 20c:	0000183b 	.word	0x0000183b
 210:	0000183b 	.word	0x0000183b
 214:	0000183b 	.word	0x0000183b
 218:	0000183b 	.word	0x0000183b
 21c:	0000183b 	.word	0x0000183b
 220:	0000183b 	.word	0x0000183b
 224:	0000183b 	.word	0x0000183b
 228:	0000183b 	.word	0x0000183b
 22c:	0000183b 	.word	0x0000183b
 230:	0000183b 	.word	0x0000183b
 234:	0000183b 	.word	0x0000183b
 238:	0000183b 	.word	0x0000183b
 23c:	0000183b 	.word	0x0000183b
 240:	0000183b 	.word	0x0000183b
 244:	0000183b 	.word	0x0000183b
 248:	0000183b 	.word	0x0000183b
 24c:	0000183b 	.word	0x0000183b
 250:	0000183b 	.word	0x0000183b
 254:	0000183b 	.word	0x0000183b
 258:	0000183b 	.word	0x0000183b
 25c:	0000183b 	.word	0x0000183b
 260:	0000183b 	.word	0x0000183b
 264:	0000183b 	.word	0x0000183b
 268:	0000183b 	.word	0x0000183b
 26c:	0000183b 	.word	0x0000183b
 270:	0000183b 	.word	0x0000183b
 274:	0000183b 	.word	0x0000183b
 278:	0000183b 	.word	0x0000183b
 27c:	0000183b 	.word	0x0000183b
 280:	0000183b 	.word	0x0000183b
 284:	0000183b 	.word	0x0000183b
 288:	0000183b 	.word	0x0000183b
 28c:	0000183b 	.word	0x0000183b
 290:	0000183b 	.word	0x0000183b
 294:	0000183b 	.word	0x0000183b
 298:	0000183b 	.word	0x0000183b
 29c:	0000183b 	.word	0x0000183b
 2a0:	0000183b 	.word	0x0000183b
 2a4:	0000183b 	.word	0x0000183b
 2a8:	0000183b 	.word	0x0000183b
 2ac:	0000183b 	.word	0x0000183b
 2b0:	0000183b 	.word	0x0000183b
 2b4:	0000183b 	.word	0x0000183b
 2b8:	0000183b 	.word	0x0000183b
 2bc:	0000183b 	.word	0x0000183b
 2c0:	0000183b 	.word	0x0000183b
 2c4:	0000183b 	.word	0x0000183b
 2c8:	0000183b 	.word	0x0000183b
 2cc:	0000183b 	.word	0x0000183b
 2d0:	0000183b 	.word	0x0000183b
 2d4:	0000183b 	.word	0x0000183b
 2d8:	0000183b 	.word	0x0000183b
 2dc:	0000183b 	.word	0x0000183b
 2e0:	0000183b 	.word	0x0000183b
 2e4:	0000183b 	.word	0x0000183b
 2e8:	0000183b 	.word	0x0000183b
 2ec:	0000183b 	.word	0x0000183b
 2f0:	0000183b 	.word	0x0000183b
 2f4:	0000183b 	.word	0x0000183b
 2f8:	0000183b 	.word	0x0000183b
 2fc:	0000183b 	.word	0x0000183b
 300:	0000183b 	.word	0x0000183b
 304:	0000183b 	.word	0x0000183b
 308:	0000183b 	.word	0x0000183b
 30c:	0000183b 	.word	0x0000183b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f909 	bl	1698 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f9c8 	bl	1820 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97ec 	.word	0x1fff97ec

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f913 	bl	17c4 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f001 fcdf 	bl	2274 <EcuM_Init>
    IoHwAb_Init0( NULL_PTR );  //Initializing IO hardware abstractions.
     8b6:	2000      	movs	r0, #0
     8b8:	f000 fed6 	bl	1668 <IoHwAb_Init0>
    SEGGER_RTT_Init();  //Initializing RTT library.
     8bc:	f001 f950 	bl	1b60 <SEGGER_RTT_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8c0:	4802      	ldr	r0, [pc, #8]	; (8cc <main+0x1c>)
     8c2:	f000 f8eb 	bl	a9c <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8c6:	f000 f9ad 	bl	c24 <Scheduler_MainFunction>
     8ca:	e7fc      	b.n	8c6 <main+0x16>
     8cc:	1fff9780 	.word	0x1fff9780

000008d0 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     8d0:	b082      	sub	sp, #8
     8d2:	4603      	mov	r3, r0
     8d4:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8dc:	b2db      	uxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d101      	bne.n	8e6 <DevAssert+0x16>
     8e2:	be00      	bkpt	0x0000
     8e4:	e7fd      	b.n	8e2 <DevAssert+0x12>
}
     8e6:	bf00      	nop
     8e8:	b002      	add	sp, #8
     8ea:	4770      	bx	lr

000008ec <DevAssert>:
{
     8ec:	b082      	sub	sp, #8
     8ee:	4603      	mov	r3, r0
     8f0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8f8:	b2db      	uxtb	r3, r3
     8fa:	2b00      	cmp	r3, #0
     8fc:	d101      	bne.n	902 <DevAssert+0x16>
     8fe:	be00      	bkpt	0x0000
     900:	e7fd      	b.n	8fe <DevAssert+0x12>
}
     902:	bf00      	nop
     904:	b002      	add	sp, #8
     906:	4770      	bx	lr

00000908 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     908:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     90a:	f3ef 8310 	mrs	r3, PRIMASK
     90e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     910:	4623      	mov	r3, r4
}
     912:	4618      	mov	r0, r3
     914:	f85d 4b04 	ldr.w	r4, [sp], #4
     918:	4770      	bx	lr

0000091a <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     91a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     91c:	f3ef 8310 	mrs	r3, PRIMASK
     920:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     922:	4623      	mov	r3, r4
}
     924:	4618      	mov	r0, r3
     926:	f85d 4b04 	ldr.w	r4, [sp], #4
     92a:	4770      	bx	lr

0000092c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     92c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     934:	4623      	mov	r3, r4
}
     936:	4618      	mov	r0, r3
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
     93c:	4770      	bx	lr

0000093e <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     93e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     940:	f3ef 8310 	mrs	r3, PRIMASK
     944:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     946:	4623      	mov	r3, r4
}
     948:	4618      	mov	r0, r3
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr

00000950 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     950:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     952:	f3ef 8310 	mrs	r3, PRIMASK
     956:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     958:	4623      	mov	r3, r4
}
     95a:	4618      	mov	r0, r3
     95c:	f85d 4b04 	ldr.w	r4, [sp], #4
     960:	4770      	bx	lr

00000962 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     962:	b082      	sub	sp, #8
     964:	9001      	str	r0, [sp, #4]
     966:	460b      	mov	r3, r1
     968:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     96c:	9b01      	ldr	r3, [sp, #4]
     96e:	681b      	ldr	r3, [r3, #0]
     970:	f89d 2003 	ldrb.w	r2, [sp, #3]
     974:	2101      	movs	r1, #1
     976:	fa01 f202 	lsl.w	r2, r1, r2
     97a:	431a      	orrs	r2, r3
     97c:	9b01      	ldr	r3, [sp, #4]
     97e:	601a      	str	r2, [r3, #0]
}
     980:	bf00      	nop
     982:	b002      	add	sp, #8
     984:	4770      	bx	lr

00000986 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     986:	b082      	sub	sp, #8
     988:	9001      	str	r0, [sp, #4]
     98a:	460b      	mov	r3, r1
     98c:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     990:	9b01      	ldr	r3, [sp, #4]
     992:	681b      	ldr	r3, [r3, #0]
     994:	f89d 2003 	ldrb.w	r2, [sp, #3]
     998:	2101      	movs	r1, #1
     99a:	fa01 f202 	lsl.w	r2, r1, r2
     99e:	43d2      	mvns	r2, r2
     9a0:	401a      	ands	r2, r3
     9a2:	9b01      	ldr	r3, [sp, #4]
     9a4:	601a      	str	r2, [r3, #0]
}
     9a6:	bf00      	nop
     9a8:	b002      	add	sp, #8
     9aa:	4770      	bx	lr

000009ac <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     9ac:	b084      	sub	sp, #16
     9ae:	9001      	str	r0, [sp, #4]
     9b0:	460b      	mov	r3, r1
     9b2:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     9b6:	2300      	movs	r3, #0
     9b8:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     9bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9c0:	2201      	movs	r2, #1
     9c2:	fa02 f303 	lsl.w	r3, r2, r3
     9c6:	461a      	mov	r2, r3
     9c8:	9b01      	ldr	r3, [sp, #4]
     9ca:	4013      	ands	r3, r2
     9cc:	2b00      	cmp	r3, #0
     9ce:	bf14      	ite	ne
     9d0:	2301      	movne	r3, #1
     9d2:	2300      	moveq	r3, #0
     9d4:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9dc:	4618      	mov	r0, r3
     9de:	b004      	add	sp, #16
     9e0:	4770      	bx	lr

000009e2 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9e2:	b082      	sub	sp, #8
     9e4:	9001      	str	r0, [sp, #4]
     9e6:	460b      	mov	r3, r1
     9e8:	f88d 3003 	strb.w	r3, [sp, #3]
     9ec:	4613      	mov	r3, r2
     9ee:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d00a      	beq.n	a10 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a02:	2101      	movs	r1, #1
     a04:	fa01 f202 	lsl.w	r2, r1, r2
     a08:	431a      	orrs	r2, r3
     a0a:	9b01      	ldr	r3, [sp, #4]
     a0c:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     a0e:	e00a      	b.n	a26 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     a10:	9b01      	ldr	r3, [sp, #4]
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a18:	2101      	movs	r1, #1
     a1a:	fa01 f202 	lsl.w	r2, r1, r2
     a1e:	43d2      	mvns	r2, r2
     a20:	401a      	ands	r2, r3
     a22:	9b01      	ldr	r3, [sp, #4]
     a24:	601a      	str	r2, [r3, #0]
}
     a26:	bf00      	nop
     a28:	b002      	add	sp, #8
     a2a:	4770      	bx	lr

00000a2c <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     a2c:	b500      	push	{lr}
     a2e:	b085      	sub	sp, #20
     a30:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     a32:	2300      	movs	r3, #0
     a34:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a38:	2300      	movs	r3, #0
     a3a:	f88d 300f 	strb.w	r3, [sp, #15]
     a3e:	e023      	b.n	a88 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a40:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a44:	9b01      	ldr	r3, [sp, #4]
     a46:	3208      	adds	r2, #8
     a48:	2100      	movs	r1, #0
     a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a52:	9a01      	ldr	r2, [sp, #4]
     a54:	3308      	adds	r3, #8
     a56:	009b      	lsls	r3, r3, #2
     a58:	4413      	add	r3, r2
     a5a:	2200      	movs	r2, #0
     a5c:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a5e:	9b01      	ldr	r3, [sp, #4]
     a60:	332c      	adds	r3, #44	; 0x2c
     a62:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a66:	4611      	mov	r1, r2
     a68:	4618      	mov	r0, r3
     a6a:	f7ff ff8c 	bl	986 <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a6e:	9b01      	ldr	r3, [sp, #4]
     a70:	3328      	adds	r3, #40	; 0x28
     a72:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a76:	4611      	mov	r1, r2
     a78:	4618      	mov	r0, r3
     a7a:	f7ff ff72 	bl	962 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a82:	3301      	adds	r3, #1
     a84:	f88d 300f 	strb.w	r3, [sp, #15]
     a88:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d0d7      	beq.n	a40 <Scheduler_InitQueue+0x14>
    }
}
     a90:	bf00      	nop
     a92:	bf00      	nop
     a94:	b005      	add	sp, #20
     a96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a9c <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a9c:	b500      	push	{lr}
     a9e:	b085      	sub	sp, #20
     aa0:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     aa2:	2301      	movs	r3, #1
     aa4:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     aa8:	2300      	movs	r3, #0
     aaa:	f88d 300f 	strb.w	r3, [sp, #15]
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_INIT_ID, SCHEDULER_E_PARAM_CONFIG );
            status = FALSE;
        }
    #endif

    if ( status == TRUE ) {
     aae:	f89d 300e 	ldrb.w	r3, [sp, #14]
     ab2:	2b01      	cmp	r3, #1
     ab4:	f040 8087 	bne.w	bc6 <Scheduler_Init+0x12a>
        //Initializing tasks related parameters.
        for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     ab8:	2300      	movs	r3, #0
     aba:	f88d 300f 	strb.w	r3, [sp, #15]
     abe:	e033      	b.n	b28 <Scheduler_Init+0x8c>
            SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     ac0:	4b44      	ldr	r3, [pc, #272]	; (bd4 <Scheduler_Init+0x138>)
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	6899      	ldr	r1, [r3, #8]
     ac6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aca:	4613      	mov	r3, r2
     acc:	005b      	lsls	r3, r3, #1
     ace:	4413      	add	r3, r2
     ad0:	009b      	lsls	r3, r3, #2
     ad2:	440b      	add	r3, r1
     ad4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ad8:	6819      	ldr	r1, [r3, #0]
     ada:	9b01      	ldr	r3, [sp, #4]
     adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     ae0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ae4:	9b01      	ldr	r3, [sp, #4]
     ae6:	3202      	adds	r2, #2
     ae8:	2100      	movs	r1, #0
     aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     aee:	9b01      	ldr	r3, [sp, #4]
     af0:	f103 0018 	add.w	r0, r3, #24
     af4:	4b37      	ldr	r3, [pc, #220]	; (bd4 <Scheduler_Init+0x138>)
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	6899      	ldr	r1, [r3, #8]
     afa:	f89d 200f 	ldrb.w	r2, [sp, #15]
     afe:	4613      	mov	r3, r2
     b00:	005b      	lsls	r3, r3, #1
     b02:	4413      	add	r3, r2
     b04:	009b      	lsls	r3, r3, #2
     b06:	440b      	add	r3, r1
     b08:	791b      	ldrb	r3, [r3, #4]
     b0a:	2b00      	cmp	r3, #0
     b0c:	bf14      	ite	ne
     b0e:	2301      	movne	r3, #1
     b10:	2300      	moveq	r3, #0
     b12:	b2da      	uxtb	r2, r3
     b14:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b18:	4619      	mov	r1, r3
     b1a:	f7ff ff62 	bl	9e2 <Bfx_PutBit_u32u8u8>
        for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     b1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b22:	3301      	adds	r3, #1
     b24:	f88d 300f 	strb.w	r3, [sp, #15]
     b28:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b2c:	2b01      	cmp	r3, #1
     b2e:	d9c7      	bls.n	ac0 <Scheduler_Init+0x24>
        }

        //Initializing timers related parameters.
        for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b30:	2300      	movs	r3, #0
     b32:	f88d 300f 	strb.w	r3, [sp, #15]
     b36:	e03f      	b.n	bb8 <Scheduler_Init+0x11c>
            SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     b38:	4b26      	ldr	r3, [pc, #152]	; (bd4 <Scheduler_Init+0x138>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	6919      	ldr	r1, [r3, #16]
     b3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b42:	4613      	mov	r3, r2
     b44:	005b      	lsls	r3, r3, #1
     b46:	4413      	add	r3, r2
     b48:	009b      	lsls	r3, r3, #2
     b4a:	440b      	add	r3, r1
     b4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b50:	6819      	ldr	r1, [r3, #0]
     b52:	9b01      	ldr	r3, [sp, #4]
     b54:	3204      	adds	r2, #4
     b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b5a:	4b1e      	ldr	r3, [pc, #120]	; (bd4 <Scheduler_Init+0x138>)
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	6919      	ldr	r1, [r3, #16]
     b60:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b64:	4613      	mov	r3, r2
     b66:	005b      	lsls	r3, r3, #1
     b68:	4413      	add	r3, r2
     b6a:	009b      	lsls	r3, r3, #2
     b6c:	18ca      	adds	r2, r1, r3
     b6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b72:	6812      	ldr	r2, [r2, #0]
     b74:	9901      	ldr	r1, [sp, #4]
     b76:	3304      	adds	r3, #4
     b78:	009b      	lsls	r3, r3, #2
     b7a:	440b      	add	r3, r1
     b7c:	605a      	str	r2, [r3, #4]
            Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b7e:	9b01      	ldr	r3, [sp, #4]
     b80:	f103 001c 	add.w	r0, r3, #28
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <Scheduler_Init+0x138>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	6919      	ldr	r1, [r3, #16]
     b8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b8e:	4613      	mov	r3, r2
     b90:	005b      	lsls	r3, r3, #1
     b92:	4413      	add	r3, r2
     b94:	009b      	lsls	r3, r3, #2
     b96:	440b      	add	r3, r1
     b98:	791b      	ldrb	r3, [r3, #4]
     b9a:	2b00      	cmp	r3, #0
     b9c:	bf14      	ite	ne
     b9e:	2301      	movne	r3, #1
     ba0:	2300      	moveq	r3, #0
     ba2:	b2da      	uxtb	r2, r3
     ba4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ba8:	4619      	mov	r1, r3
     baa:	f7ff ff1a 	bl	9e2 <Bfx_PutBit_u32u8u8>
        for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     bae:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bb2:	3301      	adds	r3, #1
     bb4:	f88d 300f 	strb.w	r3, [sp, #15]
     bb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d0bb      	beq.n	b38 <Scheduler_Init+0x9c>
        } 

        Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     bc0:	9801      	ldr	r0, [sp, #4]
     bc2:	f7ff ff33 	bl	a2c <Scheduler_InitQueue>
    }

    return status;
     bc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     bca:	4618      	mov	r0, r3
     bcc:	b005      	add	sp, #20
     bce:	f85d fb04 	ldr.w	pc, [sp], #4
     bd2:	bf00      	nop
     bd4:	1fff8b54 	.word	0x1fff8b54

00000bd8 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     bd8:	b084      	sub	sp, #16
     bda:	4603      	mov	r3, r0
     bdc:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     be0:	2300      	movs	r3, #0
     be2:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     be4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     be8:	2b00      	cmp	r3, #0
     bea:	d011      	beq.n	c10 <Scheduler_GetTimer+0x38>
     bec:	4b0b      	ldr	r3, [pc, #44]	; (c1c <Scheduler_GetTimer+0x44>)
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	7b1b      	ldrb	r3, [r3, #12]
     bf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bf6:	429a      	cmp	r2, r3
     bf8:	d80a      	bhi.n	c10 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     bfa:	4b09      	ldr	r3, [pc, #36]	; (c20 <Scheduler_GetTimer+0x48>)
     bfc:	681a      	ldr	r2, [r3, #0]
     bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c02:	3b01      	subs	r3, #1
     c04:	3304      	adds	r3, #4
     c06:	009b      	lsls	r3, r3, #2
     c08:	4413      	add	r3, r2
     c0a:	685b      	ldr	r3, [r3, #4]
     c0c:	9303      	str	r3, [sp, #12]
     c0e:	e001      	b.n	c14 <Scheduler_GetTimer+0x3c>

    else {
        #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_GETTIMER_ID, SCHEDULER_E_TIMER_ID );
        #endif
        counter_value = FALSE;  //invalid ID.
     c10:	2300      	movs	r3, #0
     c12:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     c14:	9b03      	ldr	r3, [sp, #12]
}
     c16:	4618      	mov	r0, r3
     c18:	b004      	add	sp, #16
     c1a:	4770      	bx	lr
     c1c:	1fff8b54 	.word	0x1fff8b54
     c20:	1fff8b58 	.word	0x1fff8b58

00000c24 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     c24:	b500      	push	{lr}
     c26:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     c28:	4b5e      	ldr	r3, [pc, #376]	; (da4 <Scheduler_MainFunction+0x180>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     c32:	fb02 f303 	mul.w	r3, r2, r3
     c36:	2101      	movs	r1, #1
     c38:	4618      	mov	r0, r3
     c3a:	f001 ff27 	bl	2a8c <OsIf_MicrosToTicks>
     c3e:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     c40:	2001      	movs	r0, #1
     c42:	f001 fed7 	bl	29f4 <OsIf_GetCounter>
     c46:	4603      	mov	r3, r0
     c48:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     c4a:	2300      	movs	r3, #0
     c4c:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     c4e:	2300      	movs	r3, #0
     c50:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     c54:	466b      	mov	r3, sp
     c56:	2101      	movs	r1, #1
     c58:	4618      	mov	r0, r3
     c5a:	f001 fee4 	bl	2a26 <OsIf_GetElapsed>
     c5e:	4602      	mov	r2, r0
     c60:	9b03      	ldr	r3, [sp, #12]
     c62:	4413      	add	r3, r2
     c64:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c66:	9a03      	ldr	r2, [sp, #12]
     c68:	9b01      	ldr	r3, [sp, #4]
     c6a:	429a      	cmp	r2, r3
     c6c:	d3f2      	bcc.n	c54 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c6e:	2300      	movs	r3, #0
     c70:	f88d 300b 	strb.w	r3, [sp, #11]
     c74:	e03a      	b.n	cec <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c76:	4b4c      	ldr	r3, [pc, #304]	; (da8 <Scheduler_MainFunction+0x184>)
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	69db      	ldr	r3, [r3, #28]
     c7c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c80:	4611      	mov	r1, r2
     c82:	4618      	mov	r0, r3
     c84:	f7ff fe92 	bl	9ac <Bfx_GetBit_u32u8_u8>
     c88:	4603      	mov	r3, r0
     c8a:	2b00      	cmp	r3, #0
     c8c:	d029      	beq.n	ce2 <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c8e:	4b46      	ldr	r3, [pc, #280]	; (da8 <Scheduler_MainFunction+0x184>)
     c90:	681a      	ldr	r2, [r3, #0]
     c92:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c96:	3304      	adds	r3, #4
     c98:	009b      	lsls	r3, r3, #2
     c9a:	4413      	add	r3, r2
     c9c:	6858      	ldr	r0, [r3, #4]
     c9e:	4b41      	ldr	r3, [pc, #260]	; (da4 <Scheduler_MainFunction+0x180>)
     ca0:	681b      	ldr	r3, [r3, #0]
     ca2:	681a      	ldr	r2, [r3, #0]
     ca4:	4b40      	ldr	r3, [pc, #256]	; (da8 <Scheduler_MainFunction+0x184>)
     ca6:	6819      	ldr	r1, [r3, #0]
     ca8:	f89d 300b 	ldrb.w	r3, [sp, #11]
     cac:	1a82      	subs	r2, r0, r2
     cae:	3304      	adds	r3, #4
     cb0:	009b      	lsls	r3, r3, #2
     cb2:	440b      	add	r3, r1
     cb4:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     cb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
     cba:	3301      	adds	r3, #1
     cbc:	b2db      	uxtb	r3, r3
     cbe:	4618      	mov	r0, r3
     cc0:	f7ff ff8a 	bl	bd8 <Scheduler_GetTimer>
     cc4:	4603      	mov	r3, r0
     cc6:	2b00      	cmp	r3, #0
     cc8:	d10b      	bne.n	ce2 <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     cca:	4b36      	ldr	r3, [pc, #216]	; (da4 <Scheduler_MainFunction+0x180>)
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	6919      	ldr	r1, [r3, #16]
     cd0:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cd4:	4613      	mov	r3, r2
     cd6:	005b      	lsls	r3, r3, #1
     cd8:	4413      	add	r3, r2
     cda:	009b      	lsls	r3, r3, #2
     cdc:	440b      	add	r3, r1
     cde:	689b      	ldr	r3, [r3, #8]
     ce0:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     ce2:	f89d 300b 	ldrb.w	r3, [sp, #11]
     ce6:	3301      	adds	r3, #1
     ce8:	f88d 300b 	strb.w	r3, [sp, #11]
     cec:	4b2d      	ldr	r3, [pc, #180]	; (da4 <Scheduler_MainFunction+0x180>)
     cee:	681b      	ldr	r3, [r3, #0]
     cf0:	7b1b      	ldrb	r3, [r3, #12]
     cf2:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cf6:	429a      	cmp	r2, r3
     cf8:	d3bd      	bcc.n	c76 <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     cfa:	2300      	movs	r3, #0
     cfc:	f88d 300b 	strb.w	r3, [sp, #11]
     d00:	e045      	b.n	d8e <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     d02:	4b29      	ldr	r3, [pc, #164]	; (da8 <Scheduler_MainFunction+0x184>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	699b      	ldr	r3, [r3, #24]
     d08:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d0c:	4611      	mov	r1, r2
     d0e:	4618      	mov	r0, r3
     d10:	f7ff fe4c 	bl	9ac <Bfx_GetBit_u32u8_u8>
     d14:	4603      	mov	r3, r0
     d16:	2b00      	cmp	r3, #0
     d18:	d034      	beq.n	d84 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     d1a:	4b23      	ldr	r3, [pc, #140]	; (da8 <Scheduler_MainFunction+0x184>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d22:	3202      	adds	r2, #2
     d24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     d28:	4b1e      	ldr	r3, [pc, #120]	; (da4 <Scheduler_MainFunction+0x180>)
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	6819      	ldr	r1, [r3, #0]
     d2e:	4b1e      	ldr	r3, [pc, #120]	; (da8 <Scheduler_MainFunction+0x184>)
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d36:	4401      	add	r1, r0
     d38:	3202      	adds	r2, #2
     d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     d3e:	4b1a      	ldr	r3, [pc, #104]	; (da8 <Scheduler_MainFunction+0x184>)
     d40:	681b      	ldr	r3, [r3, #0]
     d42:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d46:	3202      	adds	r2, #2
     d48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d4c:	4b16      	ldr	r3, [pc, #88]	; (da8 <Scheduler_MainFunction+0x184>)
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	f89d 100b 	ldrb.w	r1, [sp, #11]
     d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     d58:	429a      	cmp	r2, r3
     d5a:	d313      	bcc.n	d84 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d5c:	4b11      	ldr	r3, [pc, #68]	; (da4 <Scheduler_MainFunction+0x180>)
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	6899      	ldr	r1, [r3, #8]
     d62:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d66:	4613      	mov	r3, r2
     d68:	005b      	lsls	r3, r3, #1
     d6a:	4413      	add	r3, r2
     d6c:	009b      	lsls	r3, r3, #2
     d6e:	440b      	add	r3, r1
     d70:	689b      	ldr	r3, [r3, #8]
     d72:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d74:	4b0c      	ldr	r3, [pc, #48]	; (da8 <Scheduler_MainFunction+0x184>)
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d7c:	3202      	adds	r2, #2
     d7e:	2100      	movs	r1, #0
     d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d84:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d88:	3301      	adds	r3, #1
     d8a:	f88d 300b 	strb.w	r3, [sp, #11]
     d8e:	4b05      	ldr	r3, [pc, #20]	; (da4 <Scheduler_MainFunction+0x180>)
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	791b      	ldrb	r3, [r3, #4]
     d94:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d98:	429a      	cmp	r2, r3
     d9a:	d3b2      	bcc.n	d02 <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d9c:	2300      	movs	r3, #0
     d9e:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     da0:	e758      	b.n	c54 <Scheduler_MainFunction+0x30>
     da2:	bf00      	nop
     da4:	1fff8b54 	.word	0x1fff8b54
     da8:	1fff8b58 	.word	0x1fff8b58

00000dac <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     dac:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     dae:	f000 f971 	bl	1094 <HwIoAb_Buttons_MainFunction>
}
     db2:	bf00      	nop
     db4:	bd08      	pop	{r3, pc}
	...

00000db8 <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click prints ohms value of pot 1 main, hold click tone 1 for buzzer, release stops buzzer.
 * @note Button 2, Single click toggle only led1 (PTC9), double click prints ohms value of pot 2 main, hold click tone 2 for buzzer, release stops buzzer.
 * @note Button 3, Single click toggle only led2 (PTC10), double click prints ohms values of pot1 and pot 2 alter , hold click tone 3 for buzzer, release stops buzzer.
 * @note The tone of the buzzer is always the last activated.
 */
void Task2_callback( void ) {
     db8:	b500      	push	{lr}
     dba:	b083      	sub	sp, #12
    //local data.
    static boolean flags[3] = { TRUE, TRUE, TRUE }; //Flags for executing buzzer tones.
    uint8 i = 0;
     dbc:	2300      	movs	r3, #0
     dbe:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     dc2:	2300      	movs	r3, #0
     dc4:	f88d 3006 	strb.w	r3, [sp, #6]


    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     dc8:	2300      	movs	r3, #0
     dca:	f88d 3007 	strb.w	r3, [sp, #7]
     dce:	e0e0      	b.n	f92 <Task2_callback+0x1da>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     dd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dd4:	3301      	adds	r3, #1
     dd6:	b2db      	uxtb	r3, r3
     dd8:	4618      	mov	r0, r3
     dda:	f000 f92d 	bl	1038 <HwIoAb_Buttons_GetEvent>
     dde:	4603      	mov	r3, r0
     de0:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     de4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     de8:	2b00      	cmp	r3, #0
     dea:	f000 80ca 	beq.w	f82 <Task2_callback+0x1ca>
            switch ( i ) {    
     dee:	f89d 3007 	ldrb.w	r3, [sp, #7]
     df2:	2b02      	cmp	r3, #2
     df4:	f000 8084 	beq.w	f00 <Task2_callback+0x148>
     df8:	2b02      	cmp	r3, #2
     dfa:	f300 80c4 	bgt.w	f86 <Task2_callback+0x1ce>
     dfe:	2b00      	cmp	r3, #0
     e00:	d002      	beq.n	e08 <Task2_callback+0x50>
     e02:	2b01      	cmp	r3, #1
     e04:	d03e      	beq.n	e84 <Task2_callback+0xcc>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     e06:	e0be      	b.n	f86 <Task2_callback+0x1ce>
                    switch ( actual_event ) {
     e08:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e0c:	3b01      	subs	r3, #1
     e0e:	2b03      	cmp	r3, #3
     e10:	d834      	bhi.n	e7c <Task2_callback+0xc4>
     e12:	a201      	add	r2, pc, #4	; (adr r2, e18 <Task2_callback+0x60>)
     e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e18:	00000e29 	.word	0x00000e29
     e1c:	00000e31 	.word	0x00000e31
     e20:	00000e4f 	.word	0x00000e4f
     e24:	00000e6d 	.word	0x00000e6d
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     e28:	2000      	movs	r0, #0
     e2a:	f000 fad1 	bl	13d0 <HwIoAb_Leds_TurnToggle>
                        break;
     e2e:	e028      	b.n	e82 <Task2_callback+0xca>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     e30:	4b5e      	ldr	r3, [pc, #376]	; (fac <Task2_callback+0x1f4>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	330a      	adds	r3, #10
     e36:	4618      	mov	r0, r3
     e38:	f000 fb0e 	bl	1458 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     e3c:	4b5b      	ldr	r3, [pc, #364]	; (fac <Task2_callback+0x1f4>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	895b      	ldrh	r3, [r3, #10]
     e42:	461a      	mov	r2, r3
     e44:	495a      	ldr	r1, [pc, #360]	; (fb0 <Task2_callback+0x1f8>)
     e46:	2000      	movs	r0, #0
     e48:	f001 f9f2 	bl	2230 <SEGGER_RTT_printf>
                        break;
     e4c:	e019      	b.n	e82 <Task2_callback+0xca>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e52:	4a58      	ldr	r2, [pc, #352]	; (fb4 <Task2_callback+0x1fc>)
     e54:	5cd3      	ldrb	r3, [r2, r3]
     e56:	2b00      	cmp	r3, #0
     e58:	d012      	beq.n	e80 <Task2_callback+0xc8>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     e5a:	2000      	movs	r0, #0
     e5c:	f000 fbd1 	bl	1602 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e64:	4a53      	ldr	r2, [pc, #332]	; (fb4 <Task2_callback+0x1fc>)
     e66:	2100      	movs	r1, #0
     e68:	54d1      	strb	r1, [r2, r3]
                        break;
     e6a:	e009      	b.n	e80 <Task2_callback+0xc8>
                            HwIoAb_Buzzer_Stop();
     e6c:	f000 fbf6 	bl	165c <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e74:	4a4f      	ldr	r2, [pc, #316]	; (fb4 <Task2_callback+0x1fc>)
     e76:	2101      	movs	r1, #1
     e78:	54d1      	strb	r1, [r2, r3]
                        break;
     e7a:	e002      	b.n	e82 <Task2_callback+0xca>
                        break;
     e7c:	bf00      	nop
     e7e:	e083      	b.n	f88 <Task2_callback+0x1d0>
                        break;
     e80:	bf00      	nop
                break;
     e82:	e081      	b.n	f88 <Task2_callback+0x1d0>
                    switch ( actual_event ) {
     e84:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e88:	3b01      	subs	r3, #1
     e8a:	2b03      	cmp	r3, #3
     e8c:	d834      	bhi.n	ef8 <Task2_callback+0x140>
     e8e:	a201      	add	r2, pc, #4	; (adr r2, e94 <Task2_callback+0xdc>)
     e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e94:	00000ea5 	.word	0x00000ea5
     e98:	00000ead 	.word	0x00000ead
     e9c:	00000ecb 	.word	0x00000ecb
     ea0:	00000ee9 	.word	0x00000ee9
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     ea4:	2001      	movs	r0, #1
     ea6:	f000 fa93 	bl	13d0 <HwIoAb_Leds_TurnToggle>
                        break;
     eaa:	e028      	b.n	efe <Task2_callback+0x146>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     eac:	4b3f      	ldr	r3, [pc, #252]	; (fac <Task2_callback+0x1f4>)
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	330a      	adds	r3, #10
     eb2:	4618      	mov	r0, r3
     eb4:	f000 fad0 	bl	1458 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     eb8:	4b3c      	ldr	r3, [pc, #240]	; (fac <Task2_callback+0x1f4>)
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	899b      	ldrh	r3, [r3, #12]
     ebe:	461a      	mov	r2, r3
     ec0:	493d      	ldr	r1, [pc, #244]	; (fb8 <Task2_callback+0x200>)
     ec2:	2000      	movs	r0, #0
     ec4:	f001 f9b4 	bl	2230 <SEGGER_RTT_printf>
                        break;
     ec8:	e019      	b.n	efe <Task2_callback+0x146>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     eca:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ece:	4a39      	ldr	r2, [pc, #228]	; (fb4 <Task2_callback+0x1fc>)
     ed0:	5cd3      	ldrb	r3, [r2, r3]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d012      	beq.n	efc <Task2_callback+0x144>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     ed6:	2001      	movs	r0, #1
     ed8:	f000 fb93 	bl	1602 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ee0:	4a34      	ldr	r2, [pc, #208]	; (fb4 <Task2_callback+0x1fc>)
     ee2:	2100      	movs	r1, #0
     ee4:	54d1      	strb	r1, [r2, r3]
                        break;
     ee6:	e009      	b.n	efc <Task2_callback+0x144>
                            HwIoAb_Buzzer_Stop();
     ee8:	f000 fbb8 	bl	165c <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef0:	4a30      	ldr	r2, [pc, #192]	; (fb4 <Task2_callback+0x1fc>)
     ef2:	2101      	movs	r1, #1
     ef4:	54d1      	strb	r1, [r2, r3]
                        break;
     ef6:	e002      	b.n	efe <Task2_callback+0x146>
                        break;
     ef8:	bf00      	nop
     efa:	e045      	b.n	f88 <Task2_callback+0x1d0>
                        break;
     efc:	bf00      	nop
                break;
     efe:	e043      	b.n	f88 <Task2_callback+0x1d0>
                        switch ( actual_event ) {
     f00:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f04:	3b01      	subs	r3, #1
     f06:	2b03      	cmp	r3, #3
     f08:	d837      	bhi.n	f7a <Task2_callback+0x1c2>
     f0a:	a201      	add	r2, pc, #4	; (adr r2, f10 <Task2_callback+0x158>)
     f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f10:	00000f21 	.word	0x00000f21
     f14:	00000f29 	.word	0x00000f29
     f18:	00000f4d 	.word	0x00000f4d
     f1c:	00000f6b 	.word	0x00000f6b
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     f20:	2002      	movs	r0, #2
     f22:	f000 fa55 	bl	13d0 <HwIoAb_Leds_TurnToggle>
                            break;
     f26:	e02b      	b.n	f80 <Task2_callback+0x1c8>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_RESULTS );
     f28:	4b20      	ldr	r3, [pc, #128]	; (fac <Task2_callback+0x1f4>)
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	330e      	adds	r3, #14
     f2e:	4618      	mov	r0, r3
     f30:	f000 fafa 	bl	1528 <HwIoAb_Pots_GetAltValue>
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     f34:	4b1d      	ldr	r3, [pc, #116]	; (fac <Task2_callback+0x1f4>)
     f36:	681b      	ldr	r3, [r3, #0]
     f38:	89db      	ldrh	r3, [r3, #14]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     f3a:	461a      	mov	r2, r3
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     f3c:	4b1b      	ldr	r3, [pc, #108]	; (fac <Task2_callback+0x1f4>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	8a1b      	ldrh	r3, [r3, #16]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     f42:	491e      	ldr	r1, [pc, #120]	; (fbc <Task2_callback+0x204>)
     f44:	2000      	movs	r0, #0
     f46:	f001 f973 	bl	2230 <SEGGER_RTT_printf>
                            break;
     f4a:	e019      	b.n	f80 <Task2_callback+0x1c8>
                                if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f50:	4a18      	ldr	r2, [pc, #96]	; (fb4 <Task2_callback+0x1fc>)
     f52:	5cd3      	ldrb	r3, [r2, r3]
     f54:	2b00      	cmp	r3, #0
     f56:	d012      	beq.n	f7e <Task2_callback+0x1c6>
                                    HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     f58:	2002      	movs	r0, #2
     f5a:	f000 fb52 	bl	1602 <HwIoAb_Buzzer_Beep>
                                    flags[i] = FALSE;
     f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f62:	4a14      	ldr	r2, [pc, #80]	; (fb4 <Task2_callback+0x1fc>)
     f64:	2100      	movs	r1, #0
     f66:	54d1      	strb	r1, [r2, r3]
                            break;
     f68:	e009      	b.n	f7e <Task2_callback+0x1c6>
                                HwIoAb_Buzzer_Stop();
     f6a:	f000 fb77 	bl	165c <HwIoAb_Buzzer_Stop>
                                flags[i] = TRUE;
     f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f72:	4a10      	ldr	r2, [pc, #64]	; (fb4 <Task2_callback+0x1fc>)
     f74:	2101      	movs	r1, #1
     f76:	54d1      	strb	r1, [r2, r3]
                            break;
     f78:	e002      	b.n	f80 <Task2_callback+0x1c8>
                            break;
     f7a:	bf00      	nop
     f7c:	e004      	b.n	f88 <Task2_callback+0x1d0>
                            break;
     f7e:	bf00      	nop
                break;
     f80:	e002      	b.n	f88 <Task2_callback+0x1d0>
            }
        }
     f82:	bf00      	nop
     f84:	e000      	b.n	f88 <Task2_callback+0x1d0>
                break;
     f86:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f8c:	3301      	adds	r3, #1
     f8e:	f88d 3007 	strb.w	r3, [sp, #7]
     f92:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <Task2_callback+0x208>)
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	781b      	ldrb	r3, [r3, #0]
     f98:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f9c:	429a      	cmp	r2, r3
     f9e:	f4ff af17 	bcc.w	dd0 <Task2_callback+0x18>
    }
}
     fa2:	bf00      	nop
     fa4:	bf00      	nop
     fa6:	b003      	add	sp, #12
     fa8:	f85d fb04 	ldr.w	pc, [sp], #4
     fac:	1fff8b68 	.word	0x1fff8b68
     fb0:	0001975c 	.word	0x0001975c
     fb4:	1fff8b5c 	.word	0x1fff8b5c
     fb8:	00019780 	.word	0x00019780
     fbc:	000197a4 	.word	0x000197a4
     fc0:	1fff8b60 	.word	0x1fff8b60

00000fc4 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
     fc4:	bf00      	nop
     fc6:	4770      	bx	lr

00000fc8 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     fc8:	b084      	sub	sp, #16
     fca:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     fcc:	2300      	movs	r3, #0
     fce:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean status = TRUE;
     fd2:	2301      	movs	r3, #1
     fd4:	f88d 300e 	strb.w	r3, [sp, #14]
                Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_INIT_ID, HWIOAB_BUTTONS_E_CONFIG );
                status = FALSE;
            }
    #endif

    if ( status == TRUE ) {
     fd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
     fdc:	2b00      	cmp	r3, #0
     fde:	d025      	beq.n	102c <HwIoAb_Buttons_Init+0x64>
        //Initializing members.
        ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     fe0:	4b14      	ldr	r3, [pc, #80]	; (1034 <HwIoAb_Buttons_Init+0x6c>)
     fe2:	681b      	ldr	r3, [r3, #0]
     fe4:	2203      	movs	r2, #3
     fe6:	701a      	strb	r2, [r3, #0]
        ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     fe8:	4b12      	ldr	r3, [pc, #72]	; (1034 <HwIoAb_Buttons_Init+0x6c>)
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	9a01      	ldr	r2, [sp, #4]
     fee:	605a      	str	r2, [r3, #4]

        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     ff0:	2300      	movs	r3, #0
     ff2:	f88d 300f 	strb.w	r3, [sp, #15]
     ff6:	e012      	b.n	101e <HwIoAb_Buttons_Init+0x56>
            ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ff8:	4b0e      	ldr	r3, [pc, #56]	; (1034 <HwIoAb_Buttons_Init+0x6c>)
     ffa:	681a      	ldr	r2, [r3, #0]
     ffc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1000:	4413      	add	r3, r2
    1002:	2200      	movs	r2, #0
    1004:	721a      	strb	r2, [r3, #8]
            ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
    1006:	4b0b      	ldr	r3, [pc, #44]	; (1034 <HwIoAb_Buttons_Init+0x6c>)
    1008:	681a      	ldr	r2, [r3, #0]
    100a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    100e:	4413      	add	r3, r2
    1010:	2200      	movs	r2, #0
    1012:	72da      	strb	r2, [r3, #11]
        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
    1014:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1018:	3301      	adds	r3, #1
    101a:	f88d 300f 	strb.w	r3, [sp, #15]
    101e:	4b05      	ldr	r3, [pc, #20]	; (1034 <HwIoAb_Buttons_Init+0x6c>)
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	781b      	ldrb	r3, [r3, #0]
    1024:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1028:	429a      	cmp	r2, r3
    102a:	d3e5      	bcc.n	ff8 <HwIoAb_Buttons_Init+0x30>
        }
    }

}
    102c:	bf00      	nop
    102e:	b004      	add	sp, #16
    1030:	4770      	bx	lr
    1032:	bf00      	nop
    1034:	1fff8b60 	.word	0x1fff8b60

00001038 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
    1038:	b084      	sub	sp, #16
    103a:	4603      	mov	r3, r0
    103c:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
    1040:	2300      	movs	r3, #0
    1042:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
    1046:	f89d 3007 	ldrb.w	r3, [sp, #7]
    104a:	2b00      	cmp	r3, #0
    104c:	d018      	beq.n	1080 <HwIoAb_Buttons_GetEvent+0x48>
    104e:	4b10      	ldr	r3, [pc, #64]	; (1090 <HwIoAb_Buttons_GetEvent+0x58>)
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	781b      	ldrb	r3, [r3, #0]
    1054:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1058:	429a      	cmp	r2, r3
    105a:	d811      	bhi.n	1080 <HwIoAb_Buttons_GetEvent+0x48>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
    105c:	4b0c      	ldr	r3, [pc, #48]	; (1090 <HwIoAb_Buttons_GetEvent+0x58>)
    105e:	681a      	ldr	r2, [r3, #0]
    1060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1064:	3b01      	subs	r3, #1
    1066:	4413      	add	r3, r2
    1068:	7adb      	ldrb	r3, [r3, #11]
    106a:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
    106e:	4b08      	ldr	r3, [pc, #32]	; (1090 <HwIoAb_Buttons_GetEvent+0x58>)
    1070:	681a      	ldr	r2, [r3, #0]
    1072:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1076:	3b01      	subs	r3, #1
    1078:	4413      	add	r3, r2
    107a:	2200      	movs	r2, #0
    107c:	72da      	strb	r2, [r3, #11]
    107e:	e002      	b.n	1086 <HwIoAb_Buttons_GetEvent+0x4e>

    else {  //Invalid ID.
        #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
            Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_GETEVENT_ID, HWIOAB_BUTTONS_E_BUTTON_ID );
        #endif
        event = 50;
    1080:	2332      	movs	r3, #50	; 0x32
    1082:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return event;
    1086:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    108a:	4618      	mov	r0, r3
    108c:	b004      	add	sp, #16
    108e:	4770      	bx	lr
    1090:	1fff8b60 	.word	0x1fff8b60

00001094 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
    1094:	b500      	push	{lr}
    1096:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
    1098:	2300      	movs	r3, #0
    109a:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
    109e:	2300      	movs	r3, #0
    10a0:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    10a4:	2300      	movs	r3, #0
    10a6:	f88d 3007 	strb.w	r3, [sp, #7]
    10aa:	e029      	b.n	1100 <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
    10ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10b0:	4ab9      	ldr	r2, [pc, #740]	; (1398 <__BSS_SRAM_SIZE+0x258>)
    10b2:	5cd3      	ldrb	r3, [r2, r3]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d01e      	beq.n	10f6 <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
    10b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10bc:	4ab7      	ldr	r2, [pc, #732]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    10be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c6:	3232      	adds	r2, #50	; 0x32
    10c8:	49b4      	ldr	r1, [pc, #720]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    10ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
    10ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10d2:	4ab2      	ldr	r2, [pc, #712]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    10d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10d8:	4bb1      	ldr	r3, [pc, #708]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	6859      	ldr	r1, [r3, #4]
    10de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e2:	00db      	lsls	r3, r3, #3
    10e4:	440b      	add	r3, r1
    10e6:	685b      	ldr	r3, [r3, #4]
    10e8:	429a      	cmp	r2, r3
    10ea:	d104      	bne.n	10f6 <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
    10ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10f0:	4aa9      	ldr	r2, [pc, #676]	; (1398 <__BSS_SRAM_SIZE+0x258>)
    10f2:	2100      	movs	r1, #0
    10f4:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    10f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10fa:	3301      	adds	r3, #1
    10fc:	f88d 3007 	strb.w	r3, [sp, #7]
    1100:	4ba7      	ldr	r3, [pc, #668]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1102:	681b      	ldr	r3, [r3, #0]
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	f89d 2007 	ldrb.w	r2, [sp, #7]
    110a:	429a      	cmp	r2, r3
    110c:	d3ce      	bcc.n	10ac <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    110e:	2300      	movs	r3, #0
    1110:	f88d 3007 	strb.w	r3, [sp, #7]
    1114:	e132      	b.n	137c <__BSS_SRAM_SIZE+0x23c>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
    1116:	4ba2      	ldr	r3, [pc, #648]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1118:	681b      	ldr	r3, [r3, #0]
    111a:	685a      	ldr	r2, [r3, #4]
    111c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1120:	00db      	lsls	r3, r3, #3
    1122:	4413      	add	r3, r2
    1124:	789b      	ldrb	r3, [r3, #2]
    1126:	2b01      	cmp	r3, #1
    1128:	d103      	bne.n	1132 <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
    112a:	2301      	movs	r3, #1
    112c:	f88d 3006 	strb.w	r3, [sp, #6]
    1130:	e002      	b.n	1138 <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
    1132:	2300      	movs	r3, #0
    1134:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
    1138:	4b99      	ldr	r3, [pc, #612]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    113a:	681a      	ldr	r2, [r3, #0]
    113c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1140:	4413      	add	r3, r2
    1142:	7a1b      	ldrb	r3, [r3, #8]
    1144:	2b04      	cmp	r3, #4
    1146:	f200 8109 	bhi.w	135c <__BSS_SRAM_SIZE+0x21c>
    114a:	a201      	add	r2, pc, #4	; (adr r2, 1150 <__BSS_SRAM_SIZE+0x10>)
    114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1150:	00001165 	.word	0x00001165
    1154:	000011af 	.word	0x000011af
    1158:	00001297 	.word	0x00001297
    115c:	00001309 	.word	0x00001309
    1160:	00001215 	.word	0x00001215
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    1164:	4b8e      	ldr	r3, [pc, #568]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	685a      	ldr	r2, [r3, #4]
    116a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    116e:	00db      	lsls	r3, r3, #3
    1170:	4413      	add	r3, r2
    1172:	881b      	ldrh	r3, [r3, #0]
    1174:	4618      	mov	r0, r3
    1176:	f007 f98f 	bl	8498 <Dio_ReadChannel>
    117a:	4603      	mov	r3, r0
    117c:	461a      	mov	r2, r3
    117e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1182:	429a      	cmp	r2, r3
    1184:	f040 80ec 	bne.w	1360 <__BSS_SRAM_SIZE+0x220>
                    count_flags[i] = TRUE;  //Starting count.
    1188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    118c:	4a82      	ldr	r2, [pc, #520]	; (1398 <__BSS_SRAM_SIZE+0x258>)
    118e:	2101      	movs	r1, #1
    1190:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1192:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1196:	4a81      	ldr	r2, [pc, #516]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    1198:	2100      	movs	r1, #0
    119a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    119e:	4b80      	ldr	r3, [pc, #512]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    11a0:	681a      	ldr	r2, [r3, #0]
    11a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11a6:	4413      	add	r3, r2
    11a8:	2201      	movs	r2, #1
    11aa:	721a      	strb	r2, [r3, #8]
                }
            break;
    11ac:	e0d8      	b.n	1360 <__BSS_SRAM_SIZE+0x220>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    11ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11b2:	4a7a      	ldr	r2, [pc, #488]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    11b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    11b8:	4b79      	ldr	r3, [pc, #484]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	6859      	ldr	r1, [r3, #4]
    11be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c2:	00db      	lsls	r3, r3, #3
    11c4:	440b      	add	r3, r1
    11c6:	685b      	ldr	r3, [r3, #4]
    11c8:	429a      	cmp	r2, r3
    11ca:	d106      	bne.n	11da <__BSS_SRAM_SIZE+0x9a>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    11cc:	4b74      	ldr	r3, [pc, #464]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    11ce:	681a      	ldr	r2, [r3, #0]
    11d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11d4:	4413      	add	r3, r2
    11d6:	2203      	movs	r2, #3
    11d8:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    11da:	4b71      	ldr	r3, [pc, #452]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	685a      	ldr	r2, [r3, #4]
    11e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11e4:	00db      	lsls	r3, r3, #3
    11e6:	4413      	add	r3, r2
    11e8:	881b      	ldrh	r3, [r3, #0]
    11ea:	4618      	mov	r0, r3
    11ec:	f007 f954 	bl	8498 <Dio_ReadChannel>
    11f0:	4603      	mov	r3, r0
    11f2:	461a      	mov	r2, r3
    11f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11f8:	f083 0301 	eor.w	r3, r3, #1
    11fc:	b2db      	uxtb	r3, r3
    11fe:	429a      	cmp	r2, r3
    1200:	f040 80b0 	bne.w	1364 <__BSS_SRAM_SIZE+0x224>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    1204:	4b66      	ldr	r3, [pc, #408]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1206:	681a      	ldr	r2, [r3, #0]
    1208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    120c:	4413      	add	r3, r2
    120e:	2204      	movs	r2, #4
    1210:	721a      	strb	r2, [r3, #8]
                }
            break;
    1212:	e0a7      	b.n	1364 <__BSS_SRAM_SIZE+0x224>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    1214:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1218:	4a60      	ldr	r2, [pc, #384]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    121a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    121e:	4b60      	ldr	r3, [pc, #384]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	6859      	ldr	r1, [r3, #4]
    1224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1228:	00db      	lsls	r3, r3, #3
    122a:	440b      	add	r3, r1
    122c:	685b      	ldr	r3, [r3, #4]
    122e:	429a      	cmp	r2, r3
    1230:	d10d      	bne.n	124e <__BSS_SRAM_SIZE+0x10e>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    1232:	4b5b      	ldr	r3, [pc, #364]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1234:	681a      	ldr	r2, [r3, #0]
    1236:	f89d 3007 	ldrb.w	r3, [sp, #7]
    123a:	4413      	add	r3, r2
    123c:	2201      	movs	r2, #1
    123e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1240:	4b57      	ldr	r3, [pc, #348]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1242:	681a      	ldr	r2, [r3, #0]
    1244:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1248:	4413      	add	r3, r2
    124a:	2200      	movs	r2, #0
    124c:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    124e:	4b54      	ldr	r3, [pc, #336]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	685a      	ldr	r2, [r3, #4]
    1254:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1258:	00db      	lsls	r3, r3, #3
    125a:	4413      	add	r3, r2
    125c:	881b      	ldrh	r3, [r3, #0]
    125e:	4618      	mov	r0, r3
    1260:	f007 f91a 	bl	8498 <Dio_ReadChannel>
    1264:	4603      	mov	r3, r0
    1266:	461a      	mov	r2, r3
    1268:	f89d 3006 	ldrb.w	r3, [sp, #6]
    126c:	429a      	cmp	r2, r3
    126e:	d17b      	bne.n	1368 <__BSS_SRAM_SIZE+0x228>
                    count_flags[i] = TRUE;  //Starting count.
    1270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1274:	4a48      	ldr	r2, [pc, #288]	; (1398 <__BSS_SRAM_SIZE+0x258>)
    1276:	2101      	movs	r1, #1
    1278:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    127a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    127e:	4a47      	ldr	r2, [pc, #284]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    1280:	2100      	movs	r1, #0
    1282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    1286:	4b46      	ldr	r3, [pc, #280]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1288:	681a      	ldr	r2, [r3, #0]
    128a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    128e:	4413      	add	r3, r2
    1290:	2202      	movs	r2, #2
    1292:	721a      	strb	r2, [r3, #8]
                }
            break;
    1294:	e068      	b.n	1368 <__BSS_SRAM_SIZE+0x228>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1296:	f89d 3007 	ldrb.w	r3, [sp, #7]
    129a:	4a40      	ldr	r2, [pc, #256]	; (139c <__BSS_SRAM_SIZE+0x25c>)
    129c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    12a0:	4b3f      	ldr	r3, [pc, #252]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	6859      	ldr	r1, [r3, #4]
    12a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12aa:	00db      	lsls	r3, r3, #3
    12ac:	440b      	add	r3, r1
    12ae:	685b      	ldr	r3, [r3, #4]
    12b0:	429a      	cmp	r2, r3
    12b2:	d106      	bne.n	12c2 <__BSS_SRAM_SIZE+0x182>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    12b4:	4b3a      	ldr	r3, [pc, #232]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    12b6:	681a      	ldr	r2, [r3, #0]
    12b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12bc:	4413      	add	r3, r2
    12be:	2203      	movs	r2, #3
    12c0:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    12c2:	4b37      	ldr	r3, [pc, #220]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	685a      	ldr	r2, [r3, #4]
    12c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12cc:	00db      	lsls	r3, r3, #3
    12ce:	4413      	add	r3, r2
    12d0:	881b      	ldrh	r3, [r3, #0]
    12d2:	4618      	mov	r0, r3
    12d4:	f007 f8e0 	bl	8498 <Dio_ReadChannel>
    12d8:	4603      	mov	r3, r0
    12da:	461a      	mov	r2, r3
    12dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    12e0:	f083 0301 	eor.w	r3, r3, #1
    12e4:	b2db      	uxtb	r3, r3
    12e6:	429a      	cmp	r2, r3
    12e8:	d140      	bne.n	136c <__BSS_SRAM_SIZE+0x22c>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    12ea:	4b2d      	ldr	r3, [pc, #180]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    12ec:	681a      	ldr	r2, [r3, #0]
    12ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12f2:	4413      	add	r3, r2
    12f4:	2202      	movs	r2, #2
    12f6:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12f8:	4b29      	ldr	r3, [pc, #164]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    12fa:	681a      	ldr	r2, [r3, #0]
    12fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1300:	4413      	add	r3, r2
    1302:	2200      	movs	r2, #0
    1304:	721a      	strb	r2, [r3, #8]
                }
            break;
    1306:	e031      	b.n	136c <__BSS_SRAM_SIZE+0x22c>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    1308:	4b25      	ldr	r3, [pc, #148]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    130a:	681a      	ldr	r2, [r3, #0]
    130c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1310:	4413      	add	r3, r2
    1312:	2203      	movs	r2, #3
    1314:	72da      	strb	r2, [r3, #11]
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1316:	4b22      	ldr	r3, [pc, #136]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	685a      	ldr	r2, [r3, #4]
    131c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1320:	00db      	lsls	r3, r3, #3
    1322:	4413      	add	r3, r2
    1324:	881b      	ldrh	r3, [r3, #0]
    1326:	4618      	mov	r0, r3
    1328:	f007 f8b6 	bl	8498 <Dio_ReadChannel>
    132c:	4603      	mov	r3, r0
    132e:	461a      	mov	r2, r3
    1330:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1334:	f083 0301 	eor.w	r3, r3, #1
    1338:	b2db      	uxtb	r3, r3
    133a:	429a      	cmp	r2, r3
    133c:	d118      	bne.n	1370 <__BSS_SRAM_SIZE+0x230>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    133e:	4b18      	ldr	r3, [pc, #96]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    1340:	681a      	ldr	r2, [r3, #0]
    1342:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1346:	4413      	add	r3, r2
    1348:	2204      	movs	r2, #4
    134a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    134c:	4b14      	ldr	r3, [pc, #80]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    134e:	681a      	ldr	r2, [r3, #0]
    1350:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1354:	4413      	add	r3, r2
    1356:	2200      	movs	r2, #0
    1358:	721a      	strb	r2, [r3, #8]
                }
            break;
    135a:	e009      	b.n	1370 <__BSS_SRAM_SIZE+0x230>
        
            default: //Invalid state
                #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
                    Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_MAINFUNCTION_ID, HWIOAB_BUTTONS_E_STATE );
                #endif
            break;
    135c:	bf00      	nop
    135e:	e008      	b.n	1372 <__BSS_SRAM_SIZE+0x232>
            break;
    1360:	bf00      	nop
    1362:	e006      	b.n	1372 <__BSS_SRAM_SIZE+0x232>
            break;
    1364:	bf00      	nop
    1366:	e004      	b.n	1372 <__BSS_SRAM_SIZE+0x232>
            break;
    1368:	bf00      	nop
    136a:	e002      	b.n	1372 <__BSS_SRAM_SIZE+0x232>
            break;
    136c:	bf00      	nop
    136e:	e000      	b.n	1372 <__BSS_SRAM_SIZE+0x232>
            break;
    1370:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    1372:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1376:	3301      	adds	r3, #1
    1378:	f88d 3007 	strb.w	r3, [sp, #7]
    137c:	4b08      	ldr	r3, [pc, #32]	; (13a0 <__BSS_SRAM_SIZE+0x260>)
    137e:	681b      	ldr	r3, [r3, #0]
    1380:	781b      	ldrb	r3, [r3, #0]
    1382:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1386:	429a      	cmp	r2, r3
    1388:	f4ff aec5 	bcc.w	1116 <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    138c:	bf00      	nop
    138e:	bf00      	nop
    1390:	b003      	add	sp, #12
    1392:	f85d fb04 	ldr.w	pc, [sp], #4
    1396:	bf00      	nop
    1398:	1fff97b0 	.word	0x1fff97b0
    139c:	1fff97b4 	.word	0x1fff97b4
    13a0:	1fff8b60 	.word	0x1fff8b60

000013a4 <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    13a4:	b084      	sub	sp, #16
    13a6:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 status = TRUE;
    13a8:	2301      	movs	r3, #1
    13aa:	f88d 300f 	strb.w	r3, [sp, #15]
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_INIT_ID, HWIOAB_LEDS_E_CONFIG );
            status = FALSE;
        }
    #endif
    
    if ( status == TRUE ) {
    13ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13b2:	2b01      	cmp	r3, #1
    13b4:	d107      	bne.n	13c6 <HwIoAb_Leds_Init+0x22>
        //Initializing members.
        LedsControl_Ptr->Leds = HWIOAB_LEDS;
    13b6:	4b05      	ldr	r3, [pc, #20]	; (13cc <HwIoAb_Leds_Init+0x28>)
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	2203      	movs	r2, #3
    13bc:	701a      	strb	r2, [r3, #0]
        LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    13be:	4b03      	ldr	r3, [pc, #12]	; (13cc <HwIoAb_Leds_Init+0x28>)
    13c0:	681b      	ldr	r3, [r3, #0]
    13c2:	9a01      	ldr	r2, [sp, #4]
    13c4:	605a      	str	r2, [r3, #4]
    }
}
    13c6:	bf00      	nop
    13c8:	b004      	add	sp, #16
    13ca:	4770      	bx	lr
    13cc:	1fff8b64 	.word	0x1fff8b64

000013d0 <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    13d0:	b500      	push	{lr}
    13d2:	b083      	sub	sp, #12
    13d4:	4603      	mov	r3, r0
    13d6:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    13da:	4b0b      	ldr	r3, [pc, #44]	; (1408 <HwIoAb_Leds_TurnToggle+0x38>)
    13dc:	681b      	ldr	r3, [r3, #0]
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    13e4:	429a      	cmp	r2, r3
    13e6:	d20a      	bcs.n	13fe <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    13e8:	4b07      	ldr	r3, [pc, #28]	; (1408 <HwIoAb_Leds_TurnToggle+0x38>)
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	685a      	ldr	r2, [r3, #4]
    13ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13f2:	009b      	lsls	r3, r3, #2
    13f4:	4413      	add	r3, r2
    13f6:	881b      	ldrh	r3, [r3, #0]
    13f8:	4618      	mov	r0, r3
    13fa:	f007 f89e 	bl	853a <Dio_FlipChannel>
    else {  //Invalid id.
        #if ( HWIOAB_LEDS_DEV_ERROR_DETECT == STD_ON )
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_TURNTOGGLE_ID, HWIOAB_LEDS_E_LED_ID );
        #endif
    }
}
    13fe:	bf00      	nop
    1400:	b003      	add	sp, #12
    1402:	f85d fb04 	ldr.w	pc, [sp], #4
    1406:	bf00      	nop
    1408:	1fff8b64 	.word	0x1fff8b64

0000140c <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    140c:	b500      	push	{lr}
    140e:	b085      	sub	sp, #20
    1410:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    1412:	ab03      	add	r3, sp, #12
    1414:	4619      	mov	r1, r3
    1416:	2000      	movs	r0, #0
    1418:	f008 ffe5 	bl	a3e6 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    141c:	ab02      	add	r3, sp, #8
    141e:	4619      	mov	r1, r3
    1420:	2001      	movs	r0, #1
    1422:	f008 ffe0 	bl	a3e6 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <HwIoAb_Pots_Init+0x48>)
    1428:	681b      	ldr	r3, [r3, #0]
    142a:	3302      	adds	r3, #2
    142c:	4619      	mov	r1, r3
    142e:	2000      	movs	r0, #0
    1430:	f008 fcd2 	bl	9dd8 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    1434:	4b07      	ldr	r3, [pc, #28]	; (1454 <HwIoAb_Pots_Init+0x48>)
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	3306      	adds	r3, #6
    143a:	4619      	mov	r1, r3
    143c:	2001      	movs	r0, #1
    143e:	f008 fccb 	bl	9dd8 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    1442:	4b04      	ldr	r3, [pc, #16]	; (1454 <HwIoAb_Pots_Init+0x48>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	2202      	movs	r2, #2
    1448:	701a      	strb	r2, [r3, #0]
}
    144a:	bf00      	nop
    144c:	b005      	add	sp, #20
    144e:	f85d fb04 	ldr.w	pc, [sp], #4
    1452:	bf00      	nop
    1454:	1fff8b68 	.word	0x1fff8b68

00001458 <HwIoAb_Pots_GetValue>:
 * @param Pots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) {
    1458:	b500      	push	{lr}
    145a:	b085      	sub	sp, #20
    145c:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    145e:	2300      	movs	r3, #0
    1460:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = TRUE;
    1464:	2301      	movs	r3, #1
    1466:	f88d 300e 	strb.w	r3, [sp, #14]
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETVALUE_ID, HWIOAB_POTS_E_PARAM );
            status = FALSE;
        }
    #endif

    if ( status == TRUE ) {
    146a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    146e:	2b01      	cmp	r3, #1
    1470:	d150      	bne.n	1514 <HwIoAb_Pots_GetValue+0xbc>
        Adc_StartGroupConversion( Adc0Group_0 );    //Triggering group conversion.
    1472:	2000      	movs	r0, #0
    1474:	f008 fd7e 	bl	9f74 <Adc_StartGroupConversion>
        while( Adc_GetGroupStatus( Adc0Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1478:	bf00      	nop
    147a:	2000      	movs	r0, #0
    147c:	f008 fe9a 	bl	a1b4 <Adc_GetGroupStatus>
    1480:	4603      	mov	r3, r0
    1482:	2b01      	cmp	r3, #1
    1484:	d0f9      	beq.n	147a <HwIoAb_Pots_GetValue+0x22>
        Adc_ReadGroup( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1486:	4b25      	ldr	r3, [pc, #148]	; (151c <HwIoAb_Pots_GetValue+0xc4>)
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	3302      	adds	r3, #2
    148c:	4619      	mov	r1, r3
    148e:	2000      	movs	r0, #0
    1490:	f008 fe38 	bl	a104 <Adc_ReadGroup>

        //Calculating resistance of each Pot.
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1494:	2300      	movs	r3, #0
    1496:	f88d 300f 	strb.w	r3, [sp, #15]
    149a:	e034      	b.n	1506 <HwIoAb_Pots_GetValue+0xae>
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
            ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    149c:	4b1f      	ldr	r3, [pc, #124]	; (151c <HwIoAb_Pots_GetValue+0xc4>)
    149e:	681a      	ldr	r2, [r3, #0]
    14a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14a4:	005b      	lsls	r3, r3, #1
    14a6:	4413      	add	r3, r2
    14a8:	885b      	ldrh	r3, [r3, #2]
    14aa:	ee07 3a90 	vmov	s15, r3
    14ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    14b2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1520 <HwIoAb_Pots_GetValue+0xc8>
    14b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    14ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1524 <HwIoAb_Pots_GetValue+0xcc>
    14be:	ee67 7a87 	vmul.f32	s15, s15, s14
    14c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14c6:	005b      	lsls	r3, r3, #1
    14c8:	9a01      	ldr	r2, [sp, #4]
    14ca:	4413      	add	r3, r2
    14cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    14d0:	ee17 2a90 	vmov	r2, s15
    14d4:	b292      	uxth	r2, r2
    14d6:	801a      	strh	r2, [r3, #0]

            if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    14d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14dc:	005b      	lsls	r3, r3, #1
    14de:	9a01      	ldr	r2, [sp, #4]
    14e0:	4413      	add	r3, r2
    14e2:	881b      	ldrh	r3, [r3, #0]
    14e4:	f242 7210 	movw	r2, #10000	; 0x2710
    14e8:	4293      	cmp	r3, r2
    14ea:	d907      	bls.n	14fc <HwIoAb_Pots_GetValue+0xa4>
                Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    14ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14f0:	005b      	lsls	r3, r3, #1
    14f2:	9a01      	ldr	r2, [sp, #4]
    14f4:	4413      	add	r3, r2
    14f6:	f242 7210 	movw	r2, #10000	; 0x2710
    14fa:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    14fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1500:	3301      	adds	r3, #1
    1502:	f88d 300f 	strb.w	r3, [sp, #15]
    1506:	4b05      	ldr	r3, [pc, #20]	; (151c <HwIoAb_Pots_GetValue+0xc4>)
    1508:	681b      	ldr	r3, [r3, #0]
    150a:	781b      	ldrb	r3, [r3, #0]
    150c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1510:	429a      	cmp	r2, r3
    1512:	d3c3      	bcc.n	149c <HwIoAb_Pots_GetValue+0x44>
            }
        }
    }
}
    1514:	bf00      	nop
    1516:	b005      	add	sp, #20
    1518:	f85d fb04 	ldr.w	pc, [sp], #4
    151c:	1fff8b68 	.word	0x1fff8b68
    1520:	45310000 	.word	0x45310000
    1524:	461c4000 	.word	0x461c4000

00001528 <HwIoAb_Pots_GetAltValue>:
 * @param AltPots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples.
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) {
    1528:	b500      	push	{lr}
    152a:	b085      	sub	sp, #20
    152c:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    152e:	2300      	movs	r3, #0
    1530:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = TRUE;
    1534:	2301      	movs	r3, #1
    1536:	f88d 300e 	strb.w	r3, [sp, #14]
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETALTVALUE_ID, HWIOAB_POTS_E_PARAM );
            status = FALSE;
        }
    #endif

    if ( status == TRUE ) {
    153a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    153e:	2b01      	cmp	r3, #1
    1540:	d150      	bne.n	15e4 <HwIoAb_Pots_GetAltValue+0xbc>
        Adc_StartGroupConversion( Adc1Group_0 );    //Triggering group conversion.
    1542:	2001      	movs	r0, #1
    1544:	f008 fd16 	bl	9f74 <Adc_StartGroupConversion>
        while( Adc_GetGroupStatus( Adc1Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1548:	bf00      	nop
    154a:	2001      	movs	r0, #1
    154c:	f008 fe32 	bl	a1b4 <Adc_GetGroupStatus>
    1550:	4603      	mov	r3, r0
    1552:	2b01      	cmp	r3, #1
    1554:	d0f9      	beq.n	154a <HwIoAb_Pots_GetAltValue+0x22>
        Adc_ReadGroup( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1556:	4b25      	ldr	r3, [pc, #148]	; (15ec <HwIoAb_Pots_GetAltValue+0xc4>)
    1558:	681b      	ldr	r3, [r3, #0]
    155a:	3306      	adds	r3, #6
    155c:	4619      	mov	r1, r3
    155e:	2001      	movs	r0, #1
    1560:	f008 fdd0 	bl	a104 <Adc_ReadGroup>

        //Calculating resistance of each Pot.
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1564:	2300      	movs	r3, #0
    1566:	f88d 300f 	strb.w	r3, [sp, #15]
    156a:	e034      	b.n	15d6 <HwIoAb_Pots_GetAltValue+0xae>
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
            ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    156c:	4b1f      	ldr	r3, [pc, #124]	; (15ec <HwIoAb_Pots_GetAltValue+0xc4>)
    156e:	681a      	ldr	r2, [r3, #0]
    1570:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1574:	005b      	lsls	r3, r3, #1
    1576:	4413      	add	r3, r2
    1578:	88db      	ldrh	r3, [r3, #6]
    157a:	ee07 3a90 	vmov	s15, r3
    157e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1582:	eddf 6a1b 	vldr	s13, [pc, #108]	; 15f0 <HwIoAb_Pots_GetAltValue+0xc8>
    1586:	eec7 7a26 	vdiv.f32	s15, s14, s13
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
    158a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 15f4 <HwIoAb_Pots_GetAltValue+0xcc>
    158e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1592:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1596:	005b      	lsls	r3, r3, #1
    1598:	9a01      	ldr	r2, [sp, #4]
    159a:	4413      	add	r3, r2
    159c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    15a0:	ee17 2a90 	vmov	r2, s15
    15a4:	b292      	uxth	r2, r2
    15a6:	801a      	strh	r2, [r3, #0]

            if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    15a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    15ac:	005b      	lsls	r3, r3, #1
    15ae:	9a01      	ldr	r2, [sp, #4]
    15b0:	4413      	add	r3, r2
    15b2:	881b      	ldrh	r3, [r3, #0]
    15b4:	f242 7210 	movw	r2, #10000	; 0x2710
    15b8:	4293      	cmp	r3, r2
    15ba:	d907      	bls.n	15cc <HwIoAb_Pots_GetAltValue+0xa4>
                AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    15bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    15c0:	005b      	lsls	r3, r3, #1
    15c2:	9a01      	ldr	r2, [sp, #4]
    15c4:	4413      	add	r3, r2
    15c6:	f242 7210 	movw	r2, #10000	; 0x2710
    15ca:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    15cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    15d0:	3301      	adds	r3, #1
    15d2:	f88d 300f 	strb.w	r3, [sp, #15]
    15d6:	4b05      	ldr	r3, [pc, #20]	; (15ec <HwIoAb_Pots_GetAltValue+0xc4>)
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	781b      	ldrb	r3, [r3, #0]
    15dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    15e0:	429a      	cmp	r2, r3
    15e2:	d3c3      	bcc.n	156c <HwIoAb_Pots_GetAltValue+0x44>
            }
        }
    }
    15e4:	bf00      	nop
    15e6:	b005      	add	sp, #20
    15e8:	f85d fb04 	ldr.w	pc, [sp], #4
    15ec:	1fff8b68 	.word	0x1fff8b68
    15f0:	45310000 	.word	0x45310000
    15f4:	461c4000 	.word	0x461c4000

000015f8 <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    15f8:	b082      	sub	sp, #8
    15fa:	9001      	str	r0, [sp, #4]

}
    15fc:	bf00      	nop
    15fe:	b002      	add	sp, #8
    1600:	4770      	bx	lr

00001602 <HwIoAb_Buzzer_Beep>:
/**
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) {
    1602:	b500      	push	{lr}
    1604:	b083      	sub	sp, #12
    1606:	4603      	mov	r3, r0
    1608:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) {
    160c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1610:	2b02      	cmp	r3, #2
    1612:	d016      	beq.n	1642 <HwIoAb_Buzzer_Beep+0x40>
    1614:	2b02      	cmp	r3, #2
    1616:	dc1c      	bgt.n	1652 <HwIoAb_Buzzer_Beep+0x50>
    1618:	2b00      	cmp	r3, #0
    161a:	d002      	beq.n	1622 <HwIoAb_Buzzer_Beep+0x20>
    161c:	2b01      	cmp	r3, #1
    161e:	d008      	beq.n	1632 <HwIoAb_Buzzer_Beep+0x30>
        break;
        default:    //Invalid tone.
            #if ( HWIOAB_BUZZER_DEV_ERROR_DETECT == STD_ON )
                Det_ReportError( HWIOAB_BUZZER_MODULE_ID, HWIOAB_BUZZER_INSTANCE_ID, HWIOAB_BUZZER_BEEP_ID, HWIOAB_BUZZER_E_TONE );
           #endif
        break;
    1620:	e017      	b.n	1652 <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_25_DUTY_CYCLE );
    1622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1626:	f241 41d5 	movw	r1, #5333	; 0x14d5
    162a:	2000      	movs	r0, #0
    162c:	f00f fcc6 	bl	10fbc <Pwm_SetPeriodAndDuty>
        break;
    1630:	e010      	b.n	1654 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_25_DUTY_CYCLE );
    1632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1636:	f640 216a 	movw	r1, #2666	; 0xa6a
    163a:	2000      	movs	r0, #0
    163c:	f00f fcbe 	bl	10fbc <Pwm_SetPeriodAndDuty>
        break;
    1640:	e008      	b.n	1654 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
    1642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1646:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    164a:	2000      	movs	r0, #0
    164c:	f00f fcb6 	bl	10fbc <Pwm_SetPeriodAndDuty>
        break;
    1650:	e000      	b.n	1654 <HwIoAb_Buzzer_Beep+0x52>
        break;
    1652:	bf00      	nop
    }
}
    1654:	bf00      	nop
    1656:	b003      	add	sp, #12
    1658:	f85d fb04 	ldr.w	pc, [sp], #4

0000165c <HwIoAb_Buzzer_Stop>:

/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) {
    165c:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    //Stopping buzzer.
    165e:	2000      	movs	r0, #0
    1660:	f00f fd16 	bl	11090 <Pwm_SetOutputToIdle>
}
    1664:	bf00      	nop
    1666:	bd08      	pop	{r3, pc}

00001668 <IoHwAb_Init0>:
/**
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) {
    1668:	b500      	push	{lr}
    166a:	b083      	sub	sp, #12
    166c:	9001      	str	r0, [sp, #4]
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    166e:	4808      	ldr	r0, [pc, #32]	; (1690 <IoHwAb_Init0+0x28>)
    1670:	f7ff fcaa 	bl	fc8 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    1674:	4807      	ldr	r0, [pc, #28]	; (1694 <IoHwAb_Init0+0x2c>)
    1676:	f7ff fe95 	bl	13a4 <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    167a:	2000      	movs	r0, #0
    167c:	f7ff fec6 	bl	140c <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    1680:	2000      	movs	r0, #0
    1682:	f7ff ffb9 	bl	15f8 <HwIoAb_Buzzer_Init>
}
    1686:	bf00      	nop
    1688:	b003      	add	sp, #12
    168a:	f85d fb04 	ldr.w	pc, [sp], #4
    168e:	bf00      	nop
    1690:	0001a01c 	.word	0x0001a01c
    1694:	0001a034 	.word	0x0001a034

00001698 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1698:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    169a:	2300      	movs	r3, #0
    169c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    169e:	2300      	movs	r3, #0
    16a0:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    16a2:	2300      	movs	r3, #0
    16a4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    16a6:	2300      	movs	r3, #0
    16a8:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    16aa:	4b44      	ldr	r3, [pc, #272]	; (17bc <init_data_bss+0x124>)
    16ac:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    16ae:	4b44      	ldr	r3, [pc, #272]	; (17c0 <init_data_bss+0x128>)
    16b0:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    16b2:	9b05      	ldr	r3, [sp, #20]
    16b4:	681b      	ldr	r3, [r3, #0]
    16b6:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    16b8:	9b05      	ldr	r3, [sp, #20]
    16ba:	3304      	adds	r3, #4
    16bc:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    16be:	9b05      	ldr	r3, [sp, #20]
    16c0:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    16c2:	2300      	movs	r3, #0
    16c4:	9309      	str	r3, [sp, #36]	; 0x24
    16c6:	e03d      	b.n	1744 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    16c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16ca:	4613      	mov	r3, r2
    16cc:	005b      	lsls	r3, r3, #1
    16ce:	4413      	add	r3, r2
    16d0:	009b      	lsls	r3, r3, #2
    16d2:	461a      	mov	r2, r3
    16d4:	9b03      	ldr	r3, [sp, #12]
    16d6:	4413      	add	r3, r2
    16d8:	685b      	ldr	r3, [r3, #4]
    16da:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    16dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16de:	4613      	mov	r3, r2
    16e0:	005b      	lsls	r3, r3, #1
    16e2:	4413      	add	r3, r2
    16e4:	009b      	lsls	r3, r3, #2
    16e6:	461a      	mov	r2, r3
    16e8:	9b03      	ldr	r3, [sp, #12]
    16ea:	4413      	add	r3, r2
    16ec:	681b      	ldr	r3, [r3, #0]
    16ee:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    16f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16f2:	4613      	mov	r3, r2
    16f4:	005b      	lsls	r3, r3, #1
    16f6:	4413      	add	r3, r2
    16f8:	009b      	lsls	r3, r3, #2
    16fa:	461a      	mov	r2, r3
    16fc:	9b03      	ldr	r3, [sp, #12]
    16fe:	4413      	add	r3, r2
    1700:	689b      	ldr	r3, [r3, #8]
    1702:	4619      	mov	r1, r3
    1704:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1706:	4613      	mov	r3, r2
    1708:	005b      	lsls	r3, r3, #1
    170a:	4413      	add	r3, r2
    170c:	009b      	lsls	r3, r3, #2
    170e:	461a      	mov	r2, r3
    1710:	9b03      	ldr	r3, [sp, #12]
    1712:	4413      	add	r3, r2
    1714:	685b      	ldr	r3, [r3, #4]
    1716:	1acb      	subs	r3, r1, r3
    1718:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    171a:	2300      	movs	r3, #0
    171c:	9308      	str	r3, [sp, #32]
    171e:	e00a      	b.n	1736 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1720:	9a00      	ldr	r2, [sp, #0]
    1722:	9b08      	ldr	r3, [sp, #32]
    1724:	441a      	add	r2, r3
    1726:	9901      	ldr	r1, [sp, #4]
    1728:	9b08      	ldr	r3, [sp, #32]
    172a:	440b      	add	r3, r1
    172c:	7812      	ldrb	r2, [r2, #0]
    172e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1730:	9b08      	ldr	r3, [sp, #32]
    1732:	3301      	adds	r3, #1
    1734:	9308      	str	r3, [sp, #32]
    1736:	9a08      	ldr	r2, [sp, #32]
    1738:	9b06      	ldr	r3, [sp, #24]
    173a:	429a      	cmp	r2, r3
    173c:	d3f0      	bcc.n	1720 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1740:	3301      	adds	r3, #1
    1742:	9309      	str	r3, [sp, #36]	; 0x24
    1744:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1746:	9b07      	ldr	r3, [sp, #28]
    1748:	429a      	cmp	r2, r3
    174a:	d3bd      	bcc.n	16c8 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    174c:	9b04      	ldr	r3, [sp, #16]
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    1752:	9b04      	ldr	r3, [sp, #16]
    1754:	3304      	adds	r3, #4
    1756:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1758:	9b04      	ldr	r3, [sp, #16]
    175a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    175c:	2300      	movs	r3, #0
    175e:	9309      	str	r3, [sp, #36]	; 0x24
    1760:	e024      	b.n	17ac <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    1762:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1764:	00db      	lsls	r3, r3, #3
    1766:	9a02      	ldr	r2, [sp, #8]
    1768:	4413      	add	r3, r2
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    176e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1770:	00db      	lsls	r3, r3, #3
    1772:	9a02      	ldr	r2, [sp, #8]
    1774:	4413      	add	r3, r2
    1776:	685b      	ldr	r3, [r3, #4]
    1778:	4619      	mov	r1, r3
    177a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    177c:	00db      	lsls	r3, r3, #3
    177e:	9a02      	ldr	r2, [sp, #8]
    1780:	4413      	add	r3, r2
    1782:	681b      	ldr	r3, [r3, #0]
    1784:	1acb      	subs	r3, r1, r3
    1786:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1788:	2300      	movs	r3, #0
    178a:	9308      	str	r3, [sp, #32]
    178c:	e007      	b.n	179e <init_data_bss+0x106>
        {
            ram[j] = 0U;
    178e:	9a01      	ldr	r2, [sp, #4]
    1790:	9b08      	ldr	r3, [sp, #32]
    1792:	4413      	add	r3, r2
    1794:	2200      	movs	r2, #0
    1796:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1798:	9b08      	ldr	r3, [sp, #32]
    179a:	3301      	adds	r3, #1
    179c:	9308      	str	r3, [sp, #32]
    179e:	9a08      	ldr	r2, [sp, #32]
    17a0:	9b06      	ldr	r3, [sp, #24]
    17a2:	429a      	cmp	r2, r3
    17a4:	d3f3      	bcc.n	178e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    17a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17a8:	3301      	adds	r3, #1
    17aa:	9309      	str	r3, [sp, #36]	; 0x24
    17ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17ae:	9b07      	ldr	r3, [sp, #28]
    17b0:	429a      	cmp	r2, r3
    17b2:	d3d6      	bcc.n	1762 <init_data_bss+0xca>
        }
    }
}
    17b4:	bf00      	nop
    17b6:	bf00      	nop
    17b8:	b00a      	add	sp, #40	; 0x28
    17ba:	4770      	bx	lr
    17bc:	0001ae7c 	.word	0x0001ae7c
    17c0:	0001ae98 	.word	0x0001ae98

000017c4 <sys_m4_cache_init>:
{
    17c4:	b084      	sub	sp, #16
    17c6:	4603      	mov	r3, r0
    17c8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    17cc:	2300      	movs	r3, #0
    17ce:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    17d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d118      	bne.n	180c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    17da:	4b10      	ldr	r3, [pc, #64]	; (181c <sys_m4_cache_init+0x58>)
    17dc:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    17e0:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    17e2:	4b0e      	ldr	r3, [pc, #56]	; (181c <sys_m4_cache_init+0x58>)
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	4a0d      	ldr	r2, [pc, #52]	; (181c <sys_m4_cache_init+0x58>)
    17e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    17ec:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    17ee:	bf00      	nop
    17f0:	4b0a      	ldr	r3, [pc, #40]	; (181c <sys_m4_cache_init+0x58>)
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    17f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    17fc:	d0f8      	beq.n	17f0 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    17fe:	4b07      	ldr	r3, [pc, #28]	; (181c <sys_m4_cache_init+0x58>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	4a06      	ldr	r2, [pc, #24]	; (181c <sys_m4_cache_init+0x58>)
    1804:	f043 0301 	orr.w	r3, r3, #1
    1808:	6013      	str	r3, [r2, #0]
    180a:	e002      	b.n	1812 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    180c:	2301      	movs	r3, #1
    180e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1812:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1816:	4618      	mov	r0, r3
    1818:	b004      	add	sp, #16
    181a:	4770      	bx	lr
    181c:	e0082000 	.word	0xe0082000

00001820 <startup_go_to_user_mode>:
}
    1820:	bf00      	nop
    1822:	4770      	bx	lr

00001824 <Sys_GetCoreID>:
    return 0U;
    1824:	2300      	movs	r3, #0
}
    1826:	4618      	mov	r0, r3
    1828:	4770      	bx	lr

0000182a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    182a:	e7fe      	b.n	182a <HardFault_Handler>

0000182c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    182c:	e7fe      	b.n	182c <MemManage_Handler>

0000182e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    182e:	e7fe      	b.n	182e <BusFault_Handler>

00001830 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1830:	e7fe      	b.n	1830 <UsageFault_Handler>

00001832 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1832:	e7fe      	b.n	1832 <SVC_Handler>

00001834 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1834:	e7fe      	b.n	1834 <DebugMon_Handler>

00001836 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1836:	e7fe      	b.n	1836 <PendSV_Handler>

00001838 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1838:	e7fe      	b.n	1838 <SysTick_Handler>

0000183a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    183a:	e7fe      	b.n	183a <undefined_handler>

0000183c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    183c:	b500      	push	{lr}
    183e:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1840:	4b26      	ldr	r3, [pc, #152]	; (18dc <_DoInit+0xa0>)
    1842:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1844:	22a8      	movs	r2, #168	; 0xa8
    1846:	2100      	movs	r1, #0
    1848:	9800      	ldr	r0, [sp, #0]
    184a:	f000 fd47 	bl	22dc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    184e:	9b00      	ldr	r3, [sp, #0]
    1850:	2203      	movs	r2, #3
    1852:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1854:	9b00      	ldr	r3, [sp, #0]
    1856:	2203      	movs	r2, #3
    1858:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    185a:	9b00      	ldr	r3, [sp, #0]
    185c:	4a20      	ldr	r2, [pc, #128]	; (18e0 <_DoInit+0xa4>)
    185e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1860:	9b00      	ldr	r3, [sp, #0]
    1862:	4a20      	ldr	r2, [pc, #128]	; (18e4 <_DoInit+0xa8>)
    1864:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    1866:	9b00      	ldr	r3, [sp, #0]
    1868:	f44f 6280 	mov.w	r2, #1024	; 0x400
    186c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    186e:	9b00      	ldr	r3, [sp, #0]
    1870:	2200      	movs	r2, #0
    1872:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1874:	9b00      	ldr	r3, [sp, #0]
    1876:	2200      	movs	r2, #0
    1878:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    187a:	9b00      	ldr	r3, [sp, #0]
    187c:	2200      	movs	r2, #0
    187e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1880:	9b00      	ldr	r3, [sp, #0]
    1882:	4a17      	ldr	r2, [pc, #92]	; (18e0 <_DoInit+0xa4>)
    1884:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    1886:	9b00      	ldr	r3, [sp, #0]
    1888:	4a17      	ldr	r2, [pc, #92]	; (18e8 <_DoInit+0xac>)
    188a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    188c:	9b00      	ldr	r3, [sp, #0]
    188e:	2210      	movs	r2, #16
    1890:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    1892:	9b00      	ldr	r3, [sp, #0]
    1894:	2200      	movs	r2, #0
    1896:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1898:	9b00      	ldr	r3, [sp, #0]
    189a:	2200      	movs	r2, #0
    189c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    189e:	9b00      	ldr	r3, [sp, #0]
    18a0:	2200      	movs	r2, #0
    18a2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    18a4:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    18a8:	2300      	movs	r3, #0
    18aa:	9301      	str	r3, [sp, #4]
    18ac:	e00c      	b.n	18c8 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    18ae:	9b01      	ldr	r3, [sp, #4]
    18b0:	f1c3 030f 	rsb	r3, r3, #15
    18b4:	4a0d      	ldr	r2, [pc, #52]	; (18ec <_DoInit+0xb0>)
    18b6:	5cd1      	ldrb	r1, [r2, r3]
    18b8:	9a00      	ldr	r2, [sp, #0]
    18ba:	9b01      	ldr	r3, [sp, #4]
    18bc:	4413      	add	r3, r2
    18be:	460a      	mov	r2, r1
    18c0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    18c2:	9b01      	ldr	r3, [sp, #4]
    18c4:	3301      	adds	r3, #1
    18c6:	9301      	str	r3, [sp, #4]
    18c8:	9b01      	ldr	r3, [sp, #4]
    18ca:	2b0f      	cmp	r3, #15
    18cc:	d9ef      	bls.n	18ae <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    18ce:	f3bf 8f5f 	dmb	sy
}
    18d2:	bf00      	nop
    18d4:	b003      	add	sp, #12
    18d6:	f85d fb04 	ldr.w	pc, [sp], #4
    18da:	bf00      	nop
    18dc:	1fff97f0 	.word	0x1fff97f0
    18e0:	000197ec 	.word	0x000197ec
    18e4:	1fff9898 	.word	0x1fff9898
    18e8:	1fff9c98 	.word	0x1fff9c98
    18ec:	0001ae58 	.word	0x0001ae58

000018f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    18f0:	b500      	push	{lr}
    18f2:	b08b      	sub	sp, #44	; 0x2c
    18f4:	9003      	str	r0, [sp, #12]
    18f6:	9102      	str	r1, [sp, #8]
    18f8:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    18fa:	2300      	movs	r3, #0
    18fc:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    18fe:	9b03      	ldr	r3, [sp, #12]
    1900:	68db      	ldr	r3, [r3, #12]
    1902:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1904:	9b03      	ldr	r3, [sp, #12]
    1906:	691b      	ldr	r3, [r3, #16]
    1908:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    190a:	9a06      	ldr	r2, [sp, #24]
    190c:	9b07      	ldr	r3, [sp, #28]
    190e:	429a      	cmp	r2, r3
    1910:	d905      	bls.n	191e <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1912:	9a06      	ldr	r2, [sp, #24]
    1914:	9b07      	ldr	r3, [sp, #28]
    1916:	1ad3      	subs	r3, r2, r3
    1918:	3b01      	subs	r3, #1
    191a:	9309      	str	r3, [sp, #36]	; 0x24
    191c:	e007      	b.n	192e <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    191e:	9b03      	ldr	r3, [sp, #12]
    1920:	689a      	ldr	r2, [r3, #8]
    1922:	9906      	ldr	r1, [sp, #24]
    1924:	9b07      	ldr	r3, [sp, #28]
    1926:	1acb      	subs	r3, r1, r3
    1928:	4413      	add	r3, r2
    192a:	3b01      	subs	r3, #1
    192c:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    192e:	9b03      	ldr	r3, [sp, #12]
    1930:	689a      	ldr	r2, [r3, #8]
    1932:	9b07      	ldr	r3, [sp, #28]
    1934:	1ad3      	subs	r3, r2, r3
    1936:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1938:	4293      	cmp	r3, r2
    193a:	bf28      	it	cs
    193c:	4613      	movcs	r3, r2
    193e:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1940:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1942:	9b01      	ldr	r3, [sp, #4]
    1944:	4293      	cmp	r3, r2
    1946:	bf28      	it	cs
    1948:	4613      	movcs	r3, r2
    194a:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    194c:	9b03      	ldr	r3, [sp, #12]
    194e:	685a      	ldr	r2, [r3, #4]
    1950:	9b07      	ldr	r3, [sp, #28]
    1952:	4413      	add	r3, r2
    1954:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1956:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1958:	9902      	ldr	r1, [sp, #8]
    195a:	9805      	ldr	r0, [sp, #20]
    195c:	f000 fcb0 	bl	22c0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    1960:	9a08      	ldr	r2, [sp, #32]
    1962:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1964:	4413      	add	r3, r2
    1966:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1968:	9a02      	ldr	r2, [sp, #8]
    196a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    196c:	4413      	add	r3, r2
    196e:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    1970:	9a01      	ldr	r2, [sp, #4]
    1972:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1974:	1ad3      	subs	r3, r2, r3
    1976:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1978:	9a07      	ldr	r2, [sp, #28]
    197a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    197c:	4413      	add	r3, r2
    197e:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    1980:	9b03      	ldr	r3, [sp, #12]
    1982:	689b      	ldr	r3, [r3, #8]
    1984:	9a07      	ldr	r2, [sp, #28]
    1986:	429a      	cmp	r2, r3
    1988:	d101      	bne.n	198e <_WriteBlocking+0x9e>
      WrOff = 0u;
    198a:	2300      	movs	r3, #0
    198c:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    198e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    1992:	9b03      	ldr	r3, [sp, #12]
    1994:	9a07      	ldr	r2, [sp, #28]
    1996:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1998:	9b01      	ldr	r3, [sp, #4]
    199a:	2b00      	cmp	r3, #0
    199c:	d1b2      	bne.n	1904 <_WriteBlocking+0x14>
  return NumBytesWritten;
    199e:	9b08      	ldr	r3, [sp, #32]
}
    19a0:	4618      	mov	r0, r3
    19a2:	b00b      	add	sp, #44	; 0x2c
    19a4:	f85d fb04 	ldr.w	pc, [sp], #4

000019a8 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    19a8:	b500      	push	{lr}
    19aa:	b089      	sub	sp, #36	; 0x24
    19ac:	9003      	str	r0, [sp, #12]
    19ae:	9102      	str	r1, [sp, #8]
    19b0:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    19b2:	9b03      	ldr	r3, [sp, #12]
    19b4:	68db      	ldr	r3, [r3, #12]
    19b6:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    19b8:	9b03      	ldr	r3, [sp, #12]
    19ba:	689a      	ldr	r2, [r3, #8]
    19bc:	9b07      	ldr	r3, [sp, #28]
    19be:	1ad3      	subs	r3, r2, r3
    19c0:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    19c2:	9a06      	ldr	r2, [sp, #24]
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	429a      	cmp	r2, r3
    19c8:	d911      	bls.n	19ee <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    19ca:	9b03      	ldr	r3, [sp, #12]
    19cc:	685a      	ldr	r2, [r3, #4]
    19ce:	9b07      	ldr	r3, [sp, #28]
    19d0:	4413      	add	r3, r2
    19d2:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    19d4:	9a01      	ldr	r2, [sp, #4]
    19d6:	9902      	ldr	r1, [sp, #8]
    19d8:	9804      	ldr	r0, [sp, #16]
    19da:	f000 fc71 	bl	22c0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    19de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    19e2:	9a07      	ldr	r2, [sp, #28]
    19e4:	9b01      	ldr	r3, [sp, #4]
    19e6:	441a      	add	r2, r3
    19e8:	9b03      	ldr	r3, [sp, #12]
    19ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    19ec:	e01f      	b.n	1a2e <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    19ee:	9b06      	ldr	r3, [sp, #24]
    19f0:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    19f2:	9b03      	ldr	r3, [sp, #12]
    19f4:	685a      	ldr	r2, [r3, #4]
    19f6:	9b07      	ldr	r3, [sp, #28]
    19f8:	4413      	add	r3, r2
    19fa:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    19fc:	9a05      	ldr	r2, [sp, #20]
    19fe:	9902      	ldr	r1, [sp, #8]
    1a00:	9804      	ldr	r0, [sp, #16]
    1a02:	f000 fc5d 	bl	22c0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1a06:	9a01      	ldr	r2, [sp, #4]
    1a08:	9b06      	ldr	r3, [sp, #24]
    1a0a:	1ad3      	subs	r3, r2, r3
    1a0c:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1a0e:	9b03      	ldr	r3, [sp, #12]
    1a10:	685b      	ldr	r3, [r3, #4]
    1a12:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1a14:	9a02      	ldr	r2, [sp, #8]
    1a16:	9b06      	ldr	r3, [sp, #24]
    1a18:	4413      	add	r3, r2
    1a1a:	9a05      	ldr	r2, [sp, #20]
    1a1c:	4619      	mov	r1, r3
    1a1e:	9804      	ldr	r0, [sp, #16]
    1a20:	f000 fc4e 	bl	22c0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a24:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1a28:	9b03      	ldr	r3, [sp, #12]
    1a2a:	9a05      	ldr	r2, [sp, #20]
    1a2c:	60da      	str	r2, [r3, #12]
}
    1a2e:	bf00      	nop
    1a30:	b009      	add	sp, #36	; 0x24
    1a32:	f85d fb04 	ldr.w	pc, [sp], #4

00001a36 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1a36:	b086      	sub	sp, #24
    1a38:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1a3a:	9b01      	ldr	r3, [sp, #4]
    1a3c:	691b      	ldr	r3, [r3, #16]
    1a3e:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	68db      	ldr	r3, [r3, #12]
    1a44:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1a46:	9a04      	ldr	r2, [sp, #16]
    1a48:	9b03      	ldr	r3, [sp, #12]
    1a4a:	429a      	cmp	r2, r3
    1a4c:	d808      	bhi.n	1a60 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1a4e:	9b01      	ldr	r3, [sp, #4]
    1a50:	689a      	ldr	r2, [r3, #8]
    1a52:	9b03      	ldr	r3, [sp, #12]
    1a54:	1ad2      	subs	r2, r2, r3
    1a56:	9b04      	ldr	r3, [sp, #16]
    1a58:	4413      	add	r3, r2
    1a5a:	3b01      	subs	r3, #1
    1a5c:	9305      	str	r3, [sp, #20]
    1a5e:	e004      	b.n	1a6a <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1a60:	9a04      	ldr	r2, [sp, #16]
    1a62:	9b03      	ldr	r3, [sp, #12]
    1a64:	1ad3      	subs	r3, r2, r3
    1a66:	3b01      	subs	r3, #1
    1a68:	9305      	str	r3, [sp, #20]
  }
  return r;
    1a6a:	9b05      	ldr	r3, [sp, #20]
}
    1a6c:	4618      	mov	r0, r3
    1a6e:	b006      	add	sp, #24
    1a70:	4770      	bx	lr
	...

00001a74 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a74:	b500      	push	{lr}
    1a76:	b089      	sub	sp, #36	; 0x24
    1a78:	9003      	str	r0, [sp, #12]
    1a7a:	9102      	str	r1, [sp, #8]
    1a7c:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1a7e:	9b02      	ldr	r3, [sp, #8]
    1a80:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1a82:	9b03      	ldr	r3, [sp, #12]
    1a84:	1c5a      	adds	r2, r3, #1
    1a86:	4613      	mov	r3, r2
    1a88:	005b      	lsls	r3, r3, #1
    1a8a:	4413      	add	r3, r2
    1a8c:	00db      	lsls	r3, r3, #3
    1a8e:	4a20      	ldr	r2, [pc, #128]	; (1b10 <SEGGER_RTT_WriteNoLock+0x9c>)
    1a90:	4413      	add	r3, r2
    1a92:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1a94:	9b05      	ldr	r3, [sp, #20]
    1a96:	695b      	ldr	r3, [r3, #20]
    1a98:	2b02      	cmp	r3, #2
    1a9a:	d029      	beq.n	1af0 <SEGGER_RTT_WriteNoLock+0x7c>
    1a9c:	2b02      	cmp	r3, #2
    1a9e:	d82e      	bhi.n	1afe <SEGGER_RTT_WriteNoLock+0x8a>
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d002      	beq.n	1aaa <SEGGER_RTT_WriteNoLock+0x36>
    1aa4:	2b01      	cmp	r3, #1
    1aa6:	d013      	beq.n	1ad0 <SEGGER_RTT_WriteNoLock+0x5c>
    1aa8:	e029      	b.n	1afe <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1aaa:	9805      	ldr	r0, [sp, #20]
    1aac:	f7ff ffc3 	bl	1a36 <_GetAvailWriteSpace>
    1ab0:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1ab2:	9a04      	ldr	r2, [sp, #16]
    1ab4:	9b01      	ldr	r3, [sp, #4]
    1ab6:	429a      	cmp	r2, r3
    1ab8:	d202      	bcs.n	1ac0 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1aba:	2300      	movs	r3, #0
    1abc:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1abe:	e021      	b.n	1b04 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1ac0:	9b01      	ldr	r3, [sp, #4]
    1ac2:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1ac4:	9a01      	ldr	r2, [sp, #4]
    1ac6:	9906      	ldr	r1, [sp, #24]
    1ac8:	9805      	ldr	r0, [sp, #20]
    1aca:	f7ff ff6d 	bl	19a8 <_WriteNoCheck>
    break;
    1ace:	e019      	b.n	1b04 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1ad0:	9805      	ldr	r0, [sp, #20]
    1ad2:	f7ff ffb0 	bl	1a36 <_GetAvailWriteSpace>
    1ad6:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1ad8:	9a01      	ldr	r2, [sp, #4]
    1ada:	9b04      	ldr	r3, [sp, #16]
    1adc:	4293      	cmp	r3, r2
    1ade:	bf28      	it	cs
    1ae0:	4613      	movcs	r3, r2
    1ae2:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1ae4:	9a07      	ldr	r2, [sp, #28]
    1ae6:	9906      	ldr	r1, [sp, #24]
    1ae8:	9805      	ldr	r0, [sp, #20]
    1aea:	f7ff ff5d 	bl	19a8 <_WriteNoCheck>
    break;
    1aee:	e009      	b.n	1b04 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1af0:	9a01      	ldr	r2, [sp, #4]
    1af2:	9906      	ldr	r1, [sp, #24]
    1af4:	9805      	ldr	r0, [sp, #20]
    1af6:	f7ff fefb 	bl	18f0 <_WriteBlocking>
    1afa:	9007      	str	r0, [sp, #28]
    break;
    1afc:	e002      	b.n	1b04 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1afe:	2300      	movs	r3, #0
    1b00:	9307      	str	r3, [sp, #28]
    break;
    1b02:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1b04:	9b07      	ldr	r3, [sp, #28]
}
    1b06:	4618      	mov	r0, r3
    1b08:	b009      	add	sp, #36	; 0x24
    1b0a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b0e:	bf00      	nop
    1b10:	1fff97f0 	.word	0x1fff97f0

00001b14 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1b14:	b500      	push	{lr}
    1b16:	b089      	sub	sp, #36	; 0x24
    1b18:	9003      	str	r0, [sp, #12]
    1b1a:	9102      	str	r1, [sp, #8]
    1b1c:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1b1e:	4b0f      	ldr	r3, [pc, #60]	; (1b5c <SEGGER_RTT_Write+0x48>)
    1b20:	9307      	str	r3, [sp, #28]
    1b22:	9b07      	ldr	r3, [sp, #28]
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	b2db      	uxtb	r3, r3
    1b28:	2b53      	cmp	r3, #83	; 0x53
    1b2a:	d001      	beq.n	1b30 <SEGGER_RTT_Write+0x1c>
    1b2c:	f7ff fe86 	bl	183c <_DoInit>
  SEGGER_RTT_LOCK();
    1b30:	f3ef 8311 	mrs	r3, BASEPRI
    1b34:	f04f 0120 	mov.w	r1, #32
    1b38:	f381 8811 	msr	BASEPRI, r1
    1b3c:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1b3e:	9a01      	ldr	r2, [sp, #4]
    1b40:	9902      	ldr	r1, [sp, #8]
    1b42:	9803      	ldr	r0, [sp, #12]
    1b44:	f7ff ff96 	bl	1a74 <SEGGER_RTT_WriteNoLock>
    1b48:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1b4a:	9b06      	ldr	r3, [sp, #24]
    1b4c:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1b50:	9b05      	ldr	r3, [sp, #20]
}
    1b52:	4618      	mov	r0, r3
    1b54:	b009      	add	sp, #36	; 0x24
    1b56:	f85d fb04 	ldr.w	pc, [sp], #4
    1b5a:	bf00      	nop
    1b5c:	1fff97f0 	.word	0x1fff97f0

00001b60 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1b60:	b508      	push	{r3, lr}
  _DoInit();
    1b62:	f7ff fe6b 	bl	183c <_DoInit>
}
    1b66:	bf00      	nop
    1b68:	bd08      	pop	{r3, pc}

00001b6a <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1b6a:	b500      	push	{lr}
    1b6c:	b085      	sub	sp, #20
    1b6e:	9001      	str	r0, [sp, #4]
    1b70:	460b      	mov	r3, r1
    1b72:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1b76:	9b01      	ldr	r3, [sp, #4]
    1b78:	689b      	ldr	r3, [r3, #8]
    1b7a:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1b7c:	9b03      	ldr	r3, [sp, #12]
    1b7e:	1c5a      	adds	r2, r3, #1
    1b80:	9b01      	ldr	r3, [sp, #4]
    1b82:	685b      	ldr	r3, [r3, #4]
    1b84:	429a      	cmp	r2, r3
    1b86:	d80f      	bhi.n	1ba8 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1b88:	9b01      	ldr	r3, [sp, #4]
    1b8a:	681a      	ldr	r2, [r3, #0]
    1b8c:	9b03      	ldr	r3, [sp, #12]
    1b8e:	4413      	add	r3, r2
    1b90:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1b94:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1b96:	9b03      	ldr	r3, [sp, #12]
    1b98:	1c5a      	adds	r2, r3, #1
    1b9a:	9b01      	ldr	r3, [sp, #4]
    1b9c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1b9e:	9b01      	ldr	r3, [sp, #4]
    1ba0:	68db      	ldr	r3, [r3, #12]
    1ba2:	1c5a      	adds	r2, r3, #1
    1ba4:	9b01      	ldr	r3, [sp, #4]
    1ba6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1ba8:	9b01      	ldr	r3, [sp, #4]
    1baa:	689a      	ldr	r2, [r3, #8]
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	685b      	ldr	r3, [r3, #4]
    1bb0:	429a      	cmp	r2, r3
    1bb2:	d115      	bne.n	1be0 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1bb4:	9b01      	ldr	r3, [sp, #4]
    1bb6:	6918      	ldr	r0, [r3, #16]
    1bb8:	9b01      	ldr	r3, [sp, #4]
    1bba:	6819      	ldr	r1, [r3, #0]
    1bbc:	9b01      	ldr	r3, [sp, #4]
    1bbe:	689b      	ldr	r3, [r3, #8]
    1bc0:	461a      	mov	r2, r3
    1bc2:	f7ff ffa7 	bl	1b14 <SEGGER_RTT_Write>
    1bc6:	4602      	mov	r2, r0
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	689b      	ldr	r3, [r3, #8]
    1bcc:	429a      	cmp	r2, r3
    1bce:	d004      	beq.n	1bda <_StoreChar+0x70>
      p->ReturnValue = -1;
    1bd0:	9b01      	ldr	r3, [sp, #4]
    1bd2:	f04f 32ff 	mov.w	r2, #4294967295
    1bd6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1bd8:	e002      	b.n	1be0 <_StoreChar+0x76>
      p->Cnt = 0u;
    1bda:	9b01      	ldr	r3, [sp, #4]
    1bdc:	2200      	movs	r2, #0
    1bde:	609a      	str	r2, [r3, #8]
}
    1be0:	bf00      	nop
    1be2:	b005      	add	sp, #20
    1be4:	f85d fb04 	ldr.w	pc, [sp], #4

00001be8 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1be8:	b500      	push	{lr}
    1bea:	b08b      	sub	sp, #44	; 0x2c
    1bec:	9003      	str	r0, [sp, #12]
    1bee:	9102      	str	r1, [sp, #8]
    1bf0:	9201      	str	r2, [sp, #4]
    1bf2:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1bf4:	9b02      	ldr	r3, [sp, #8]
    1bf6:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1bf8:	2301      	movs	r3, #1
    1bfa:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1bfc:	2301      	movs	r3, #1
    1bfe:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c00:	e007      	b.n	1c12 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1c02:	9a08      	ldr	r2, [sp, #32]
    1c04:	9b01      	ldr	r3, [sp, #4]
    1c06:	fbb2 f3f3 	udiv	r3, r2, r3
    1c0a:	9308      	str	r3, [sp, #32]
    Width++;
    1c0c:	9b07      	ldr	r3, [sp, #28]
    1c0e:	3301      	adds	r3, #1
    1c10:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c12:	9a08      	ldr	r2, [sp, #32]
    1c14:	9b01      	ldr	r3, [sp, #4]
    1c16:	429a      	cmp	r2, r3
    1c18:	d2f3      	bcs.n	1c02 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1c1a:	9a00      	ldr	r2, [sp, #0]
    1c1c:	9b07      	ldr	r3, [sp, #28]
    1c1e:	429a      	cmp	r2, r3
    1c20:	d901      	bls.n	1c26 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1c22:	9b00      	ldr	r3, [sp, #0]
    1c24:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c28:	f003 0301 	and.w	r3, r3, #1
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d128      	bne.n	1c82 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c32:	2b00      	cmp	r3, #0
    1c34:	d025      	beq.n	1c82 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c38:	f003 0302 	and.w	r3, r3, #2
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d006      	beq.n	1c4e <_PrintUnsigned+0x66>
    1c40:	9b00      	ldr	r3, [sp, #0]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d103      	bne.n	1c4e <_PrintUnsigned+0x66>
        c = '0';
    1c46:	2330      	movs	r3, #48	; 0x30
    1c48:	f88d 301b 	strb.w	r3, [sp, #27]
    1c4c:	e002      	b.n	1c54 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1c4e:	2320      	movs	r3, #32
    1c50:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c54:	e00c      	b.n	1c70 <_PrintUnsigned+0x88>
        FieldWidth--;
    1c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c58:	3b01      	subs	r3, #1
    1c5a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1c5c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1c60:	4619      	mov	r1, r3
    1c62:	9803      	ldr	r0, [sp, #12]
    1c64:	f7ff ff81 	bl	1b6a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1c68:	9b03      	ldr	r3, [sp, #12]
    1c6a:	68db      	ldr	r3, [r3, #12]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	db07      	blt.n	1c80 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c72:	2b00      	cmp	r3, #0
    1c74:	d005      	beq.n	1c82 <_PrintUnsigned+0x9a>
    1c76:	9a07      	ldr	r2, [sp, #28]
    1c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c7a:	429a      	cmp	r2, r3
    1c7c:	d3eb      	bcc.n	1c56 <_PrintUnsigned+0x6e>
    1c7e:	e000      	b.n	1c82 <_PrintUnsigned+0x9a>
          break;
    1c80:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1c82:	9b03      	ldr	r3, [sp, #12]
    1c84:	68db      	ldr	r3, [r3, #12]
    1c86:	2b00      	cmp	r3, #0
    1c88:	db55      	blt.n	1d36 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1c8a:	9b00      	ldr	r3, [sp, #0]
    1c8c:	2b01      	cmp	r3, #1
    1c8e:	d903      	bls.n	1c98 <_PrintUnsigned+0xb0>
        NumDigits--;
    1c90:	9b00      	ldr	r3, [sp, #0]
    1c92:	3b01      	subs	r3, #1
    1c94:	9300      	str	r3, [sp, #0]
    1c96:	e009      	b.n	1cac <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1c98:	9a02      	ldr	r2, [sp, #8]
    1c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c9c:	fbb2 f3f3 	udiv	r3, r2, r3
    1ca0:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1ca2:	9a05      	ldr	r2, [sp, #20]
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	429a      	cmp	r2, r3
    1ca8:	d200      	bcs.n	1cac <_PrintUnsigned+0xc4>
          break;
    1caa:	e005      	b.n	1cb8 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cae:	9a01      	ldr	r2, [sp, #4]
    1cb0:	fb02 f303 	mul.w	r3, r2, r3
    1cb4:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1cb6:	e7e8      	b.n	1c8a <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1cb8:	9a02      	ldr	r2, [sp, #8]
    1cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cbc:	fbb2 f3f3 	udiv	r3, r2, r3
    1cc0:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1cc2:	9b05      	ldr	r3, [sp, #20]
    1cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1cc6:	fb02 f303 	mul.w	r3, r2, r3
    1cca:	9a02      	ldr	r2, [sp, #8]
    1ccc:	1ad3      	subs	r3, r2, r3
    1cce:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1cd0:	4a1b      	ldr	r2, [pc, #108]	; (1d40 <_PrintUnsigned+0x158>)
    1cd2:	9b05      	ldr	r3, [sp, #20]
    1cd4:	4413      	add	r3, r2
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	4619      	mov	r1, r3
    1cda:	9803      	ldr	r0, [sp, #12]
    1cdc:	f7ff ff45 	bl	1b6a <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1ce0:	9b03      	ldr	r3, [sp, #12]
    1ce2:	68db      	ldr	r3, [r3, #12]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	db08      	blt.n	1cfa <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1cea:	9b01      	ldr	r3, [sp, #4]
    1cec:	fbb2 f3f3 	udiv	r3, r2, r3
    1cf0:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d1df      	bne.n	1cb8 <_PrintUnsigned+0xd0>
    1cf8:	e000      	b.n	1cfc <_PrintUnsigned+0x114>
        break;
    1cfa:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cfe:	f003 0301 	and.w	r3, r3, #1
    1d02:	2b00      	cmp	r3, #0
    1d04:	d017      	beq.n	1d36 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d014      	beq.n	1d36 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d0c:	e00a      	b.n	1d24 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d10:	3b01      	subs	r3, #1
    1d12:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1d14:	2120      	movs	r1, #32
    1d16:	9803      	ldr	r0, [sp, #12]
    1d18:	f7ff ff27 	bl	1b6a <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1d1c:	9b03      	ldr	r3, [sp, #12]
    1d1e:	68db      	ldr	r3, [r3, #12]
    1d20:	2b00      	cmp	r3, #0
    1d22:	db07      	blt.n	1d34 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d26:	2b00      	cmp	r3, #0
    1d28:	d005      	beq.n	1d36 <_PrintUnsigned+0x14e>
    1d2a:	9a07      	ldr	r2, [sp, #28]
    1d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d2e:	429a      	cmp	r2, r3
    1d30:	d3ed      	bcc.n	1d0e <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1d32:	e000      	b.n	1d36 <_PrintUnsigned+0x14e>
            break;
    1d34:	bf00      	nop
}
    1d36:	bf00      	nop
    1d38:	b00b      	add	sp, #44	; 0x2c
    1d3a:	f85d fb04 	ldr.w	pc, [sp], #4
    1d3e:	bf00      	nop
    1d40:	0001ae6c 	.word	0x0001ae6c

00001d44 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1d44:	b500      	push	{lr}
    1d46:	b089      	sub	sp, #36	; 0x24
    1d48:	9005      	str	r0, [sp, #20]
    1d4a:	9104      	str	r1, [sp, #16]
    1d4c:	9203      	str	r2, [sp, #12]
    1d4e:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1d50:	9b04      	ldr	r3, [sp, #16]
    1d52:	2b00      	cmp	r3, #0
    1d54:	bfb8      	it	lt
    1d56:	425b      	neglt	r3, r3
    1d58:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1d5a:	2301      	movs	r3, #1
    1d5c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1d5e:	e007      	b.n	1d70 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1d60:	9b03      	ldr	r3, [sp, #12]
    1d62:	9a06      	ldr	r2, [sp, #24]
    1d64:	fb92 f3f3 	sdiv	r3, r2, r3
    1d68:	9306      	str	r3, [sp, #24]
    Width++;
    1d6a:	9b07      	ldr	r3, [sp, #28]
    1d6c:	3301      	adds	r3, #1
    1d6e:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1d70:	9b03      	ldr	r3, [sp, #12]
    1d72:	9a06      	ldr	r2, [sp, #24]
    1d74:	429a      	cmp	r2, r3
    1d76:	daf3      	bge.n	1d60 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1d78:	9a02      	ldr	r2, [sp, #8]
    1d7a:	9b07      	ldr	r3, [sp, #28]
    1d7c:	429a      	cmp	r2, r3
    1d7e:	d901      	bls.n	1d84 <_PrintInt+0x40>
    Width = NumDigits;
    1d80:	9b02      	ldr	r3, [sp, #8]
    1d82:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d86:	2b00      	cmp	r3, #0
    1d88:	d00a      	beq.n	1da0 <_PrintInt+0x5c>
    1d8a:	9b04      	ldr	r3, [sp, #16]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	db04      	blt.n	1d9a <_PrintInt+0x56>
    1d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d92:	f003 0304 	and.w	r3, r3, #4
    1d96:	2b00      	cmp	r3, #0
    1d98:	d002      	beq.n	1da0 <_PrintInt+0x5c>
    FieldWidth--;
    1d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d9c:	3b01      	subs	r3, #1
    1d9e:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1da2:	f003 0302 	and.w	r3, r3, #2
    1da6:	2b00      	cmp	r3, #0
    1da8:	d002      	beq.n	1db0 <_PrintInt+0x6c>
    1daa:	9b02      	ldr	r3, [sp, #8]
    1dac:	2b00      	cmp	r3, #0
    1dae:	d01c      	beq.n	1dea <_PrintInt+0xa6>
    1db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1db2:	f003 0301 	and.w	r3, r3, #1
    1db6:	2b00      	cmp	r3, #0
    1db8:	d117      	bne.n	1dea <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d014      	beq.n	1dea <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dc0:	e00a      	b.n	1dd8 <_PrintInt+0x94>
        FieldWidth--;
    1dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dc4:	3b01      	subs	r3, #1
    1dc6:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1dc8:	2120      	movs	r1, #32
    1dca:	9805      	ldr	r0, [sp, #20]
    1dcc:	f7ff fecd 	bl	1b6a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1dd0:	9b05      	ldr	r3, [sp, #20]
    1dd2:	68db      	ldr	r3, [r3, #12]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	db07      	blt.n	1de8 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d005      	beq.n	1dea <_PrintInt+0xa6>
    1dde:	9a07      	ldr	r2, [sp, #28]
    1de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de2:	429a      	cmp	r2, r3
    1de4:	d3ed      	bcc.n	1dc2 <_PrintInt+0x7e>
    1de6:	e000      	b.n	1dea <_PrintInt+0xa6>
          break;
    1de8:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1dea:	9b05      	ldr	r3, [sp, #20]
    1dec:	68db      	ldr	r3, [r3, #12]
    1dee:	2b00      	cmp	r3, #0
    1df0:	db4a      	blt.n	1e88 <_PrintInt+0x144>
    if (v < 0) {
    1df2:	9b04      	ldr	r3, [sp, #16]
    1df4:	2b00      	cmp	r3, #0
    1df6:	da07      	bge.n	1e08 <_PrintInt+0xc4>
      v = -v;
    1df8:	9b04      	ldr	r3, [sp, #16]
    1dfa:	425b      	negs	r3, r3
    1dfc:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1dfe:	212d      	movs	r1, #45	; 0x2d
    1e00:	9805      	ldr	r0, [sp, #20]
    1e02:	f7ff feb2 	bl	1b6a <_StoreChar>
    1e06:	e008      	b.n	1e1a <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e0a:	f003 0304 	and.w	r3, r3, #4
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d003      	beq.n	1e1a <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1e12:	212b      	movs	r1, #43	; 0x2b
    1e14:	9805      	ldr	r0, [sp, #20]
    1e16:	f7ff fea8 	bl	1b6a <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1e1a:	9b05      	ldr	r3, [sp, #20]
    1e1c:	68db      	ldr	r3, [r3, #12]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	db32      	blt.n	1e88 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e24:	f003 0302 	and.w	r3, r3, #2
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d01f      	beq.n	1e6c <_PrintInt+0x128>
    1e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e2e:	f003 0301 	and.w	r3, r3, #1
    1e32:	2b00      	cmp	r3, #0
    1e34:	d11a      	bne.n	1e6c <_PrintInt+0x128>
    1e36:	9b02      	ldr	r3, [sp, #8]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d117      	bne.n	1e6c <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d014      	beq.n	1e6c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e42:	e00a      	b.n	1e5a <_PrintInt+0x116>
            FieldWidth--;
    1e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e46:	3b01      	subs	r3, #1
    1e48:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1e4a:	2130      	movs	r1, #48	; 0x30
    1e4c:	9805      	ldr	r0, [sp, #20]
    1e4e:	f7ff fe8c 	bl	1b6a <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1e52:	9b05      	ldr	r3, [sp, #20]
    1e54:	68db      	ldr	r3, [r3, #12]
    1e56:	2b00      	cmp	r3, #0
    1e58:	db07      	blt.n	1e6a <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d005      	beq.n	1e6c <_PrintInt+0x128>
    1e60:	9a07      	ldr	r2, [sp, #28]
    1e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e64:	429a      	cmp	r2, r3
    1e66:	d3ed      	bcc.n	1e44 <_PrintInt+0x100>
    1e68:	e000      	b.n	1e6c <_PrintInt+0x128>
              break;
    1e6a:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1e6c:	9b05      	ldr	r3, [sp, #20]
    1e6e:	68db      	ldr	r3, [r3, #12]
    1e70:	2b00      	cmp	r3, #0
    1e72:	db09      	blt.n	1e88 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1e74:	9904      	ldr	r1, [sp, #16]
    1e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e78:	9301      	str	r3, [sp, #4]
    1e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e7c:	9300      	str	r3, [sp, #0]
    1e7e:	9b02      	ldr	r3, [sp, #8]
    1e80:	9a03      	ldr	r2, [sp, #12]
    1e82:	9805      	ldr	r0, [sp, #20]
    1e84:	f7ff feb0 	bl	1be8 <_PrintUnsigned>
      }
    }
  }
}
    1e88:	bf00      	nop
    1e8a:	b009      	add	sp, #36	; 0x24
    1e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001e90 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1e90:	b500      	push	{lr}
    1e92:	b0a3      	sub	sp, #140	; 0x8c
    1e94:	9005      	str	r0, [sp, #20]
    1e96:	9104      	str	r1, [sp, #16]
    1e98:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1e9a:	ab06      	add	r3, sp, #24
    1e9c:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1e9e:	2340      	movs	r3, #64	; 0x40
    1ea0:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1ea2:	2300      	movs	r3, #0
    1ea4:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1ea6:	9b05      	ldr	r3, [sp, #20]
    1ea8:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1eaa:	2300      	movs	r3, #0
    1eac:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1eae:	9b04      	ldr	r3, [sp, #16]
    1eb0:	781b      	ldrb	r3, [r3, #0]
    1eb2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1eb6:	9b04      	ldr	r3, [sp, #16]
    1eb8:	3301      	adds	r3, #1
    1eba:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1ebc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	f000 819c 	beq.w	21fe <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1ec6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1eca:	2b25      	cmp	r3, #37	; 0x25
    1ecc:	f040 818b 	bne.w	21e6 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1ed0:	2300      	movs	r3, #0
    1ed2:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1ed4:	2301      	movs	r3, #1
    1ed6:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1ed8:	9b04      	ldr	r3, [sp, #16]
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1ee0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ee4:	3b23      	subs	r3, #35	; 0x23
    1ee6:	2b0d      	cmp	r3, #13
    1ee8:	d83e      	bhi.n	1f68 <SEGGER_RTT_vprintf+0xd8>
    1eea:	a201      	add	r2, pc, #4	; (adr r2, 1ef0 <SEGGER_RTT_vprintf+0x60>)
    1eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ef0:	00001f59 	.word	0x00001f59
    1ef4:	00001f69 	.word	0x00001f69
    1ef8:	00001f69 	.word	0x00001f69
    1efc:	00001f69 	.word	0x00001f69
    1f00:	00001f69 	.word	0x00001f69
    1f04:	00001f69 	.word	0x00001f69
    1f08:	00001f69 	.word	0x00001f69
    1f0c:	00001f69 	.word	0x00001f69
    1f10:	00001f49 	.word	0x00001f49
    1f14:	00001f69 	.word	0x00001f69
    1f18:	00001f29 	.word	0x00001f29
    1f1c:	00001f69 	.word	0x00001f69
    1f20:	00001f69 	.word	0x00001f69
    1f24:	00001f39 	.word	0x00001f39
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1f28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f2a:	f043 0301 	orr.w	r3, r3, #1
    1f2e:	931e      	str	r3, [sp, #120]	; 0x78
    1f30:	9b04      	ldr	r3, [sp, #16]
    1f32:	3301      	adds	r3, #1
    1f34:	9304      	str	r3, [sp, #16]
    1f36:	e01a      	b.n	1f6e <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1f38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f3a:	f043 0302 	orr.w	r3, r3, #2
    1f3e:	931e      	str	r3, [sp, #120]	; 0x78
    1f40:	9b04      	ldr	r3, [sp, #16]
    1f42:	3301      	adds	r3, #1
    1f44:	9304      	str	r3, [sp, #16]
    1f46:	e012      	b.n	1f6e <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1f48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f4a:	f043 0304 	orr.w	r3, r3, #4
    1f4e:	931e      	str	r3, [sp, #120]	; 0x78
    1f50:	9b04      	ldr	r3, [sp, #16]
    1f52:	3301      	adds	r3, #1
    1f54:	9304      	str	r3, [sp, #16]
    1f56:	e00a      	b.n	1f6e <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1f58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f5a:	f043 0308 	orr.w	r3, r3, #8
    1f5e:	931e      	str	r3, [sp, #120]	; 0x78
    1f60:	9b04      	ldr	r3, [sp, #16]
    1f62:	3301      	adds	r3, #1
    1f64:	9304      	str	r3, [sp, #16]
    1f66:	e002      	b.n	1f6e <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1f68:	2300      	movs	r3, #0
    1f6a:	9320      	str	r3, [sp, #128]	; 0x80
    1f6c:	bf00      	nop
        }
      } while (v);
    1f6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1f70:	2b00      	cmp	r3, #0
    1f72:	d1b1      	bne.n	1ed8 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1f74:	2300      	movs	r3, #0
    1f76:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1f78:	9b04      	ldr	r3, [sp, #16]
    1f7a:	781b      	ldrb	r3, [r3, #0]
    1f7c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1f80:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f84:	2b2f      	cmp	r3, #47	; 0x2f
    1f86:	d912      	bls.n	1fae <SEGGER_RTT_vprintf+0x11e>
    1f88:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f8c:	2b39      	cmp	r3, #57	; 0x39
    1f8e:	d80e      	bhi.n	1fae <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1f90:	9b04      	ldr	r3, [sp, #16]
    1f92:	3301      	adds	r3, #1
    1f94:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1f96:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1f98:	4613      	mov	r3, r2
    1f9a:	009b      	lsls	r3, r3, #2
    1f9c:	4413      	add	r3, r2
    1f9e:	005b      	lsls	r3, r3, #1
    1fa0:	461a      	mov	r2, r3
    1fa2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fa6:	4413      	add	r3, r2
    1fa8:	3b30      	subs	r3, #48	; 0x30
    1faa:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1fac:	e7e4      	b.n	1f78 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1fae:	2300      	movs	r3, #0
    1fb0:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1fb2:	9b04      	ldr	r3, [sp, #16]
    1fb4:	781b      	ldrb	r3, [r3, #0]
    1fb6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1fba:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fbe:	2b2e      	cmp	r3, #46	; 0x2e
    1fc0:	d11d      	bne.n	1ffe <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1fc2:	9b04      	ldr	r3, [sp, #16]
    1fc4:	3301      	adds	r3, #1
    1fc6:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1fc8:	9b04      	ldr	r3, [sp, #16]
    1fca:	781b      	ldrb	r3, [r3, #0]
    1fcc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1fd0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fd4:	2b2f      	cmp	r3, #47	; 0x2f
    1fd6:	d912      	bls.n	1ffe <SEGGER_RTT_vprintf+0x16e>
    1fd8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fdc:	2b39      	cmp	r3, #57	; 0x39
    1fde:	d80e      	bhi.n	1ffe <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1fe0:	9b04      	ldr	r3, [sp, #16]
    1fe2:	3301      	adds	r3, #1
    1fe4:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1fe6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1fe8:	4613      	mov	r3, r2
    1fea:	009b      	lsls	r3, r3, #2
    1fec:	4413      	add	r3, r2
    1fee:	005b      	lsls	r3, r3, #1
    1ff0:	461a      	mov	r2, r3
    1ff2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ff6:	4413      	add	r3, r2
    1ff8:	3b30      	subs	r3, #48	; 0x30
    1ffa:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1ffc:	e7e4      	b.n	1fc8 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1ffe:	9b04      	ldr	r3, [sp, #16]
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    2006:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    200a:	2b6c      	cmp	r3, #108	; 0x6c
    200c:	d003      	beq.n	2016 <SEGGER_RTT_vprintf+0x186>
    200e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2012:	2b68      	cmp	r3, #104	; 0x68
    2014:	d107      	bne.n	2026 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    2016:	9b04      	ldr	r3, [sp, #16]
    2018:	3301      	adds	r3, #1
    201a:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    201c:	9b04      	ldr	r3, [sp, #16]
    201e:	781b      	ldrb	r3, [r3, #0]
    2020:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    2024:	e7ef      	b.n	2006 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    2026:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    202a:	2b25      	cmp	r3, #37	; 0x25
    202c:	f000 80d0 	beq.w	21d0 <SEGGER_RTT_vprintf+0x340>
    2030:	2b25      	cmp	r3, #37	; 0x25
    2032:	f2c0 80d3 	blt.w	21dc <SEGGER_RTT_vprintf+0x34c>
    2036:	2b78      	cmp	r3, #120	; 0x78
    2038:	f300 80d0 	bgt.w	21dc <SEGGER_RTT_vprintf+0x34c>
    203c:	2b58      	cmp	r3, #88	; 0x58
    203e:	f2c0 80cd 	blt.w	21dc <SEGGER_RTT_vprintf+0x34c>
    2042:	3b58      	subs	r3, #88	; 0x58
    2044:	2b20      	cmp	r3, #32
    2046:	f200 80c9 	bhi.w	21dc <SEGGER_RTT_vprintf+0x34c>
    204a:	a201      	add	r2, pc, #4	; (adr r2, 2050 <SEGGER_RTT_vprintf+0x1c0>)
    204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2050:	00002141 	.word	0x00002141
    2054:	000021dd 	.word	0x000021dd
    2058:	000021dd 	.word	0x000021dd
    205c:	000021dd 	.word	0x000021dd
    2060:	000021dd 	.word	0x000021dd
    2064:	000021dd 	.word	0x000021dd
    2068:	000021dd 	.word	0x000021dd
    206c:	000021dd 	.word	0x000021dd
    2070:	000021dd 	.word	0x000021dd
    2074:	000021dd 	.word	0x000021dd
    2078:	000021dd 	.word	0x000021dd
    207c:	000020d5 	.word	0x000020d5
    2080:	000020f9 	.word	0x000020f9
    2084:	000021dd 	.word	0x000021dd
    2088:	000021dd 	.word	0x000021dd
    208c:	000021dd 	.word	0x000021dd
    2090:	000021dd 	.word	0x000021dd
    2094:	000021dd 	.word	0x000021dd
    2098:	000021dd 	.word	0x000021dd
    209c:	000021dd 	.word	0x000021dd
    20a0:	000021dd 	.word	0x000021dd
    20a4:	000021dd 	.word	0x000021dd
    20a8:	000021dd 	.word	0x000021dd
    20ac:	000021dd 	.word	0x000021dd
    20b0:	000021ad 	.word	0x000021ad
    20b4:	000021dd 	.word	0x000021dd
    20b8:	000021dd 	.word	0x000021dd
    20bc:	00002165 	.word	0x00002165
    20c0:	000021dd 	.word	0x000021dd
    20c4:	0000211d 	.word	0x0000211d
    20c8:	000021dd 	.word	0x000021dd
    20cc:	000021dd 	.word	0x000021dd
    20d0:	00002141 	.word	0x00002141
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    20d4:	9b03      	ldr	r3, [sp, #12]
    20d6:	681b      	ldr	r3, [r3, #0]
    20d8:	1d19      	adds	r1, r3, #4
    20da:	9a03      	ldr	r2, [sp, #12]
    20dc:	6011      	str	r1, [r2, #0]
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    20e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    20e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    20e8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    20ec:	ab16      	add	r3, sp, #88	; 0x58
    20ee:	4611      	mov	r1, r2
    20f0:	4618      	mov	r0, r3
    20f2:	f7ff fd3a 	bl	1b6a <_StoreChar>
        break;
    20f6:	e072      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    20f8:	9b03      	ldr	r3, [sp, #12]
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	1d19      	adds	r1, r3, #4
    20fe:	9a03      	ldr	r2, [sp, #12]
    2100:	6011      	str	r1, [r2, #0]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    2106:	a816      	add	r0, sp, #88	; 0x58
    2108:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    210a:	9301      	str	r3, [sp, #4]
    210c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    210e:	9300      	str	r3, [sp, #0]
    2110:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2112:	220a      	movs	r2, #10
    2114:	9920      	ldr	r1, [sp, #128]	; 0x80
    2116:	f7ff fe15 	bl	1d44 <_PrintInt>
        break;
    211a:	e060      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    211c:	9b03      	ldr	r3, [sp, #12]
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	1d19      	adds	r1, r3, #4
    2122:	9a03      	ldr	r2, [sp, #12]
    2124:	6011      	str	r1, [r2, #0]
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    212a:	9920      	ldr	r1, [sp, #128]	; 0x80
    212c:	a816      	add	r0, sp, #88	; 0x58
    212e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2130:	9301      	str	r3, [sp, #4]
    2132:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2134:	9300      	str	r3, [sp, #0]
    2136:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2138:	220a      	movs	r2, #10
    213a:	f7ff fd55 	bl	1be8 <_PrintUnsigned>
        break;
    213e:	e04e      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    2140:	9b03      	ldr	r3, [sp, #12]
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	1d19      	adds	r1, r3, #4
    2146:	9a03      	ldr	r2, [sp, #12]
    2148:	6011      	str	r1, [r2, #0]
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    214e:	9920      	ldr	r1, [sp, #128]	; 0x80
    2150:	a816      	add	r0, sp, #88	; 0x58
    2152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2154:	9301      	str	r3, [sp, #4]
    2156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2158:	9300      	str	r3, [sp, #0]
    215a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    215c:	2210      	movs	r2, #16
    215e:	f7ff fd43 	bl	1be8 <_PrintUnsigned>
        break;
    2162:	e03c      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    2164:	9b03      	ldr	r3, [sp, #12]
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	1d19      	adds	r1, r3, #4
    216a:	9a03      	ldr	r2, [sp, #12]
    216c:	6011      	str	r1, [r2, #0]
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    2172:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2174:	2b00      	cmp	r3, #0
    2176:	d101      	bne.n	217c <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    2178:	4b2c      	ldr	r3, [pc, #176]	; (222c <SEGGER_RTT_vprintf+0x39c>)
    217a:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    217c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    217e:	781b      	ldrb	r3, [r3, #0]
    2180:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    2184:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2186:	3301      	adds	r3, #1
    2188:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    218a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    218e:	2b00      	cmp	r3, #0
    2190:	d00a      	beq.n	21a8 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    2192:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    2196:	ab16      	add	r3, sp, #88	; 0x58
    2198:	4611      	mov	r1, r2
    219a:	4618      	mov	r0, r3
    219c:	f7ff fce5 	bl	1b6a <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    21a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21a2:	2b00      	cmp	r3, #0
    21a4:	daea      	bge.n	217c <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    21a6:	e01a      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
              break;
    21a8:	bf00      	nop
        break;
    21aa:	e018      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    21ac:	9b03      	ldr	r3, [sp, #12]
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	1d19      	adds	r1, r3, #4
    21b2:	9a03      	ldr	r2, [sp, #12]
    21b4:	6011      	str	r1, [r2, #0]
    21b6:	681b      	ldr	r3, [r3, #0]
    21b8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    21ba:	9920      	ldr	r1, [sp, #128]	; 0x80
    21bc:	a816      	add	r0, sp, #88	; 0x58
    21be:	2300      	movs	r3, #0
    21c0:	9301      	str	r3, [sp, #4]
    21c2:	2308      	movs	r3, #8
    21c4:	9300      	str	r3, [sp, #0]
    21c6:	2308      	movs	r3, #8
    21c8:	2210      	movs	r2, #16
    21ca:	f7ff fd0d 	bl	1be8 <_PrintUnsigned>
        break;
    21ce:	e006      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    21d0:	ab16      	add	r3, sp, #88	; 0x58
    21d2:	2125      	movs	r1, #37	; 0x25
    21d4:	4618      	mov	r0, r3
    21d6:	f7ff fcc8 	bl	1b6a <_StoreChar>
        break;
    21da:	e000      	b.n	21de <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    21dc:	bf00      	nop
      }
      sFormat++;
    21de:	9b04      	ldr	r3, [sp, #16]
    21e0:	3301      	adds	r3, #1
    21e2:	9304      	str	r3, [sp, #16]
    21e4:	e006      	b.n	21f4 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    21e6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    21ea:	ab16      	add	r3, sp, #88	; 0x58
    21ec:	4611      	mov	r1, r2
    21ee:	4618      	mov	r0, r3
    21f0:	f7ff fcbb 	bl	1b6a <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    21f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21f6:	2b00      	cmp	r3, #0
    21f8:	f6bf ae59 	bge.w	1eae <SEGGER_RTT_vprintf+0x1e>
    21fc:	e000      	b.n	2200 <SEGGER_RTT_vprintf+0x370>
      break;
    21fe:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    2200:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2202:	2b00      	cmp	r3, #0
    2204:	dd0c      	ble.n	2220 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    2206:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2208:	2b00      	cmp	r3, #0
    220a:	d005      	beq.n	2218 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    220c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    220e:	ab06      	add	r3, sp, #24
    2210:	4619      	mov	r1, r3
    2212:	9805      	ldr	r0, [sp, #20]
    2214:	f7ff fc7e 	bl	1b14 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    2218:	9b19      	ldr	r3, [sp, #100]	; 0x64
    221a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    221c:	4413      	add	r3, r2
    221e:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    2220:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    2222:	4618      	mov	r0, r3
    2224:	b023      	add	sp, #140	; 0x8c
    2226:	f85d fb04 	ldr.w	pc, [sp], #4
    222a:	bf00      	nop
    222c:	000197f8 	.word	0x000197f8

00002230 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    2230:	b40e      	push	{r1, r2, r3}
    2232:	b500      	push	{lr}
    2234:	b084      	sub	sp, #16
    2236:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    2238:	ab06      	add	r3, sp, #24
    223a:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    223c:	ab02      	add	r3, sp, #8
    223e:	461a      	mov	r2, r3
    2240:	9905      	ldr	r1, [sp, #20]
    2242:	9801      	ldr	r0, [sp, #4]
    2244:	f7ff fe24 	bl	1e90 <SEGGER_RTT_vprintf>
    2248:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    224a:	9b03      	ldr	r3, [sp, #12]
}
    224c:	4618      	mov	r0, r3
    224e:	b004      	add	sp, #16
    2250:	f85d eb04 	ldr.w	lr, [sp], #4
    2254:	b003      	add	sp, #12
    2256:	4770      	bx	lr

00002258 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    2258:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    225a:	4805      	ldr	r0, [pc, #20]	; (2270 <MCU_clocks+0x18>)
    225c:	f004 fa18 	bl	6690 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    2260:	2000      	movs	r0, #0
    2262:	f004 fac9 	bl	67f8 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    2266:	2000      	movs	r0, #0
    2268:	f004 fa90 	bl	678c <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    226c:	bf00      	nop
    226e:	bd08      	pop	{r3, pc}
    2270:	0001a920 	.word	0x0001a920

00002274 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    2274:	b508      	push	{r3, lr}
    MCU_clocks();
    2276:	f7ff ffef 	bl	2258 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    227a:	2000      	movs	r0, #0
    227c:	f000 fbb1 	bl	29e2 <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    2280:	2000      	movs	r0, #0
    2282:	f000 fa51 	bl	2728 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    2286:	480a      	ldr	r0, [pc, #40]	; (22b0 <EcuM_Init+0x3c>)
    2288:	f004 fe9a 	bl	6fc0 <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    228c:	4809      	ldr	r0, [pc, #36]	; (22b4 <EcuM_Init+0x40>)
    228e:	f007 fd29 	bl	9ce4 <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    2292:	4809      	ldr	r0, [pc, #36]	; (22b8 <EcuM_Init+0x44>)
    2294:	f00e fce6 	bl	10c64 <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    2298:	2208      	movs	r2, #8
    229a:	2101      	movs	r1, #1
    229c:	4807      	ldr	r0, [pc, #28]	; (22bc <EcuM_Init+0x48>)
    229e:	f005 f91b 	bl	74d8 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    22a2:	2208      	movs	r2, #8
    22a4:	210d      	movs	r1, #13
    22a6:	4805      	ldr	r0, [pc, #20]	; (22bc <EcuM_Init+0x48>)
    22a8:	f005 f916 	bl	74d8 <Port_Ci_Port_Ip_SetMuxModeSel>
}
    22ac:	bf00      	nop
    22ae:	bd08      	pop	{r3, pc}
    22b0:	0001add8 	.word	0x0001add8
    22b4:	0001a1ac 	.word	0x0001a1ac
    22b8:	0001ae48 	.word	0x0001ae48
    22bc:	4004a000 	.word	0x4004a000

000022c0 <memcpy>:
    22c0:	440a      	add	r2, r1
    22c2:	4291      	cmp	r1, r2
    22c4:	f100 33ff 	add.w	r3, r0, #4294967295
    22c8:	d100      	bne.n	22cc <memcpy+0xc>
    22ca:	4770      	bx	lr
    22cc:	b510      	push	{r4, lr}
    22ce:	f811 4b01 	ldrb.w	r4, [r1], #1
    22d2:	f803 4f01 	strb.w	r4, [r3, #1]!
    22d6:	4291      	cmp	r1, r2
    22d8:	d1f9      	bne.n	22ce <memcpy+0xe>
    22da:	bd10      	pop	{r4, pc}

000022dc <memset>:
    22dc:	4402      	add	r2, r0
    22de:	4603      	mov	r3, r0
    22e0:	4293      	cmp	r3, r2
    22e2:	d100      	bne.n	22e6 <memset+0xa>
    22e4:	4770      	bx	lr
    22e6:	f803 1b01 	strb.w	r1, [r3], #1
    22ea:	e7f9      	b.n	22e0 <memset+0x4>

000022ec <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    22ec:	b500      	push	{lr}
    22ee:	b087      	sub	sp, #28
    22f0:	9003      	str	r0, [sp, #12]
    22f2:	9102      	str	r1, [sp, #8]
    22f4:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    22f6:	9b03      	ldr	r3, [sp, #12]
    22f8:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    22fa:	9b05      	ldr	r3, [sp, #20]
    22fc:	43db      	mvns	r3, r3
    22fe:	0fdb      	lsrs	r3, r3, #31
    2300:	b2db      	uxtb	r3, r3
    2302:	4618      	mov	r0, r3
    2304:	f7fe fae4 	bl	8d0 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2308:	9b05      	ldr	r3, [sp, #20]
    230a:	2b7a      	cmp	r3, #122	; 0x7a
    230c:	bfd4      	ite	le
    230e:	2301      	movle	r3, #1
    2310:	2300      	movgt	r3, #0
    2312:	b2db      	uxtb	r3, r3
    2314:	4618      	mov	r0, r3
    2316:	f7fe fadb 	bl	8d0 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    231a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    231e:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    2322:	4a14      	ldr	r2, [pc, #80]	; (2374 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    2324:	4293      	cmp	r3, r2
    2326:	bf2c      	ite	cs
    2328:	2301      	movcs	r3, #1
    232a:	2300      	movcc	r3, #0
    232c:	b2db      	uxtb	r3, r3
    232e:	4618      	mov	r0, r3
    2330:	f7fe face 	bl	8d0 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    2334:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2338:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    233c:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    233e:	9b01      	ldr	r3, [sp, #4]
    2340:	2b00      	cmp	r3, #0
    2342:	d007      	beq.n	2354 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    2344:	9b03      	ldr	r3, [sp, #12]
    2346:	3310      	adds	r3, #16
    2348:	009b      	lsls	r3, r3, #2
    234a:	9a04      	ldr	r2, [sp, #16]
    234c:	4413      	add	r3, r2
    234e:	681a      	ldr	r2, [r3, #0]
    2350:	9b01      	ldr	r3, [sp, #4]
    2352:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    2354:	9b03      	ldr	r3, [sp, #12]
    2356:	3310      	adds	r3, #16
    2358:	009b      	lsls	r3, r3, #2
    235a:	9a04      	ldr	r2, [sp, #16]
    235c:	4413      	add	r3, r2
    235e:	9a02      	ldr	r2, [sp, #8]
    2360:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    2362:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    2366:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    236a:	bf00      	nop
    236c:	b007      	add	sp, #28
    236e:	f85d fb04 	ldr.w	pc, [sp], #4
    2372:	bf00      	nop
    2374:	1fff8000 	.word	0x1fff8000

00002378 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2378:	b500      	push	{lr}
    237a:	b083      	sub	sp, #12
    237c:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    237e:	9b01      	ldr	r3, [sp, #4]
    2380:	43db      	mvns	r3, r3
    2382:	0fdb      	lsrs	r3, r3, #31
    2384:	b2db      	uxtb	r3, r3
    2386:	4618      	mov	r0, r3
    2388:	f7fe faa2 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	2b7a      	cmp	r3, #122	; 0x7a
    2390:	bfd4      	ite	le
    2392:	2301      	movle	r3, #1
    2394:	2300      	movgt	r3, #0
    2396:	b2db      	uxtb	r3, r3
    2398:	4618      	mov	r0, r3
    239a:	f7fe fa99 	bl	8d0 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    239e:	9b01      	ldr	r3, [sp, #4]
    23a0:	f003 021f 	and.w	r2, r3, #31
    23a4:	4905      	ldr	r1, [pc, #20]	; (23bc <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    23a6:	9b01      	ldr	r3, [sp, #4]
    23a8:	095b      	lsrs	r3, r3, #5
    23aa:	2001      	movs	r0, #1
    23ac:	fa00 f202 	lsl.w	r2, r0, r2
    23b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    23b4:	bf00      	nop
    23b6:	b003      	add	sp, #12
    23b8:	f85d fb04 	ldr.w	pc, [sp], #4
    23bc:	e000e100 	.word	0xe000e100

000023c0 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    23c0:	b500      	push	{lr}
    23c2:	b083      	sub	sp, #12
    23c4:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    23c6:	9b01      	ldr	r3, [sp, #4]
    23c8:	43db      	mvns	r3, r3
    23ca:	0fdb      	lsrs	r3, r3, #31
    23cc:	b2db      	uxtb	r3, r3
    23ce:	4618      	mov	r0, r3
    23d0:	f7fe fa7e 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	2b7a      	cmp	r3, #122	; 0x7a
    23d8:	bfd4      	ite	le
    23da:	2301      	movle	r3, #1
    23dc:	2300      	movgt	r3, #0
    23de:	b2db      	uxtb	r3, r3
    23e0:	4618      	mov	r0, r3
    23e2:	f7fe fa75 	bl	8d0 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    23e6:	9b01      	ldr	r3, [sp, #4]
    23e8:	f003 021f 	and.w	r2, r3, #31
    23ec:	4906      	ldr	r1, [pc, #24]	; (2408 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	095b      	lsrs	r3, r3, #5
    23f2:	2001      	movs	r0, #1
    23f4:	fa00 f202 	lsl.w	r2, r0, r2
    23f8:	3320      	adds	r3, #32
    23fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    23fe:	bf00      	nop
    2400:	b003      	add	sp, #12
    2402:	f85d fb04 	ldr.w	pc, [sp], #4
    2406:	bf00      	nop
    2408:	e000e100 	.word	0xe000e100

0000240c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    240c:	b500      	push	{lr}
    240e:	b085      	sub	sp, #20
    2410:	9001      	str	r0, [sp, #4]
    2412:	460b      	mov	r3, r1
    2414:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    2418:	9b01      	ldr	r3, [sp, #4]
    241a:	43db      	mvns	r3, r3
    241c:	0fdb      	lsrs	r3, r3, #31
    241e:	b2db      	uxtb	r3, r3
    2420:	4618      	mov	r0, r3
    2422:	f7fe fa55 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2426:	9b01      	ldr	r3, [sp, #4]
    2428:	2b7a      	cmp	r3, #122	; 0x7a
    242a:	bfd4      	ite	le
    242c:	2301      	movle	r3, #1
    242e:	2300      	movgt	r3, #0
    2430:	b2db      	uxtb	r3, r3
    2432:	4618      	mov	r0, r3
    2434:	f7fe fa4c 	bl	8d0 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    2438:	f89d 3003 	ldrb.w	r3, [sp, #3]
    243c:	2b0f      	cmp	r3, #15
    243e:	bf94      	ite	ls
    2440:	2301      	movls	r3, #1
    2442:	2300      	movhi	r3, #0
    2444:	b2db      	uxtb	r3, r3
    2446:	4618      	mov	r0, r3
    2448:	f7fe fa42 	bl	8d0 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    244c:	2304      	movs	r3, #4
    244e:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    2452:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2456:	f89d 300f 	ldrb.w	r3, [sp, #15]
    245a:	fa02 f103 	lsl.w	r1, r2, r3
    245e:	4a05      	ldr	r2, [pc, #20]	; (2474 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	b2c9      	uxtb	r1, r1
    2464:	4413      	add	r3, r2
    2466:	460a      	mov	r2, r1
    2468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    246c:	bf00      	nop
    246e:	b005      	add	sp, #20
    2470:	f85d fb04 	ldr.w	pc, [sp], #4
    2474:	e000e100 	.word	0xe000e100

00002478 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    2478:	b500      	push	{lr}
    247a:	b085      	sub	sp, #20
    247c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    247e:	9b01      	ldr	r3, [sp, #4]
    2480:	43db      	mvns	r3, r3
    2482:	0fdb      	lsrs	r3, r3, #31
    2484:	b2db      	uxtb	r3, r3
    2486:	4618      	mov	r0, r3
    2488:	f7fe fa22 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    248c:	9b01      	ldr	r3, [sp, #4]
    248e:	2b7a      	cmp	r3, #122	; 0x7a
    2490:	bfd4      	ite	le
    2492:	2301      	movle	r3, #1
    2494:	2300      	movgt	r3, #0
    2496:	b2db      	uxtb	r3, r3
    2498:	4618      	mov	r0, r3
    249a:	f7fe fa19 	bl	8d0 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    249e:	2304      	movs	r3, #4
    24a0:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    24a4:	4a09      	ldr	r2, [pc, #36]	; (24cc <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    24a6:	9b01      	ldr	r3, [sp, #4]
    24a8:	4413      	add	r3, r2
    24aa:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    24ae:	b2db      	uxtb	r3, r3
    24b0:	461a      	mov	r2, r3
    24b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    24b6:	fa42 f303 	asr.w	r3, r2, r3
    24ba:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    24be:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    24c2:	4618      	mov	r0, r3
    24c4:	b005      	add	sp, #20
    24c6:	f85d fb04 	ldr.w	pc, [sp], #4
    24ca:	bf00      	nop
    24cc:	e000e100 	.word	0xe000e100

000024d0 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    24d0:	b500      	push	{lr}
    24d2:	b083      	sub	sp, #12
    24d4:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    24d6:	9b01      	ldr	r3, [sp, #4]
    24d8:	43db      	mvns	r3, r3
    24da:	0fdb      	lsrs	r3, r3, #31
    24dc:	b2db      	uxtb	r3, r3
    24de:	4618      	mov	r0, r3
    24e0:	f7fe f9f6 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    24e4:	9b01      	ldr	r3, [sp, #4]
    24e6:	2b7a      	cmp	r3, #122	; 0x7a
    24e8:	bfd4      	ite	le
    24ea:	2301      	movle	r3, #1
    24ec:	2300      	movgt	r3, #0
    24ee:	b2db      	uxtb	r3, r3
    24f0:	4618      	mov	r0, r3
    24f2:	f7fe f9ed 	bl	8d0 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    24f6:	9b01      	ldr	r3, [sp, #4]
    24f8:	f003 021f 	and.w	r2, r3, #31
    24fc:	4906      	ldr	r1, [pc, #24]	; (2518 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    24fe:	9b01      	ldr	r3, [sp, #4]
    2500:	095b      	lsrs	r3, r3, #5
    2502:	2001      	movs	r0, #1
    2504:	fa00 f202 	lsl.w	r2, r0, r2
    2508:	3360      	adds	r3, #96	; 0x60
    250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    250e:	bf00      	nop
    2510:	b003      	add	sp, #12
    2512:	f85d fb04 	ldr.w	pc, [sp], #4
    2516:	bf00      	nop
    2518:	e000e100 	.word	0xe000e100

0000251c <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    251c:	b500      	push	{lr}
    251e:	b085      	sub	sp, #20
    2520:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    2522:	9b01      	ldr	r3, [sp, #4]
    2524:	2b00      	cmp	r3, #0
    2526:	bf14      	ite	ne
    2528:	2301      	movne	r3, #1
    252a:	2300      	moveq	r3, #0
    252c:	b2db      	uxtb	r3, r3
    252e:	4618      	mov	r0, r3
    2530:	f7fe f9ce 	bl	8d0 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    2534:	9b01      	ldr	r3, [sp, #4]
    2536:	681b      	ldr	r3, [r3, #0]
    2538:	2b59      	cmp	r3, #89	; 0x59
    253a:	bf94      	ite	ls
    253c:	2301      	movls	r3, #1
    253e:	2300      	movhi	r3, #0
    2540:	b2db      	uxtb	r3, r3
    2542:	4618      	mov	r0, r3
    2544:	f7fe f9c4 	bl	8d0 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2548:	2300      	movs	r3, #0
    254a:	9303      	str	r3, [sp, #12]
    254c:	e05d      	b.n	260a <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    254e:	9b01      	ldr	r3, [sp, #4]
    2550:	6859      	ldr	r1, [r3, #4]
    2552:	9a03      	ldr	r2, [sp, #12]
    2554:	4613      	mov	r3, r2
    2556:	005b      	lsls	r3, r3, #1
    2558:	4413      	add	r3, r2
    255a:	009b      	lsls	r3, r3, #2
    255c:	440b      	add	r3, r1
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	4618      	mov	r0, r3
    2562:	f000 f899 	bl	2698 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2566:	9b01      	ldr	r3, [sp, #4]
    2568:	6859      	ldr	r1, [r3, #4]
    256a:	9a03      	ldr	r2, [sp, #12]
    256c:	4613      	mov	r3, r2
    256e:	005b      	lsls	r3, r3, #1
    2570:	4413      	add	r3, r2
    2572:	009b      	lsls	r3, r3, #2
    2574:	440b      	add	r3, r1
    2576:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	6859      	ldr	r1, [r3, #4]
    257c:	9a03      	ldr	r2, [sp, #12]
    257e:	4613      	mov	r3, r2
    2580:	005b      	lsls	r3, r3, #1
    2582:	4413      	add	r3, r2
    2584:	009b      	lsls	r3, r3, #2
    2586:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2588:	795b      	ldrb	r3, [r3, #5]
    258a:	4619      	mov	r1, r3
    258c:	f000 f869 	bl	2662 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2590:	9b01      	ldr	r3, [sp, #4]
    2592:	6859      	ldr	r1, [r3, #4]
    2594:	9a03      	ldr	r2, [sp, #12]
    2596:	4613      	mov	r3, r2
    2598:	005b      	lsls	r3, r3, #1
    259a:	4413      	add	r3, r2
    259c:	009b      	lsls	r3, r3, #2
    259e:	440b      	add	r3, r1
    25a0:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    25a2:	9b01      	ldr	r3, [sp, #4]
    25a4:	6859      	ldr	r1, [r3, #4]
    25a6:	9a03      	ldr	r2, [sp, #12]
    25a8:	4613      	mov	r3, r2
    25aa:	005b      	lsls	r3, r3, #1
    25ac:	4413      	add	r3, r2
    25ae:	009b      	lsls	r3, r3, #2
    25b0:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    25b2:	689b      	ldr	r3, [r3, #8]
    25b4:	2200      	movs	r2, #0
    25b6:	4619      	mov	r1, r3
    25b8:	f000 f831 	bl	261e <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    25bc:	9b01      	ldr	r3, [sp, #4]
    25be:	6859      	ldr	r1, [r3, #4]
    25c0:	9a03      	ldr	r2, [sp, #12]
    25c2:	4613      	mov	r3, r2
    25c4:	005b      	lsls	r3, r3, #1
    25c6:	4413      	add	r3, r2
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	440b      	add	r3, r1
    25cc:	791b      	ldrb	r3, [r3, #4]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d00c      	beq.n	25ec <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	6859      	ldr	r1, [r3, #4]
    25d6:	9a03      	ldr	r2, [sp, #12]
    25d8:	4613      	mov	r3, r2
    25da:	005b      	lsls	r3, r3, #1
    25dc:	4413      	add	r3, r2
    25de:	009b      	lsls	r3, r3, #2
    25e0:	440b      	add	r3, r1
    25e2:	681b      	ldr	r3, [r3, #0]
    25e4:	4618      	mov	r0, r3
    25e6:	f000 f828 	bl	263a <IntCtrl_Ip_EnableIrq>
    25ea:	e00b      	b.n	2604 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    25ec:	9b01      	ldr	r3, [sp, #4]
    25ee:	6859      	ldr	r1, [r3, #4]
    25f0:	9a03      	ldr	r2, [sp, #12]
    25f2:	4613      	mov	r3, r2
    25f4:	005b      	lsls	r3, r3, #1
    25f6:	4413      	add	r3, r2
    25f8:	009b      	lsls	r3, r3, #2
    25fa:	440b      	add	r3, r1
    25fc:	681b      	ldr	r3, [r3, #0]
    25fe:	4618      	mov	r0, r3
    2600:	f000 f825 	bl	264e <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2604:	9b03      	ldr	r3, [sp, #12]
    2606:	3301      	adds	r3, #1
    2608:	9303      	str	r3, [sp, #12]
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	9a03      	ldr	r2, [sp, #12]
    2610:	429a      	cmp	r2, r3
    2612:	d39c      	bcc.n	254e <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    2614:	2300      	movs	r3, #0
}
    2616:	4618      	mov	r0, r3
    2618:	b005      	add	sp, #20
    261a:	f85d fb04 	ldr.w	pc, [sp], #4

0000261e <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    261e:	b500      	push	{lr}
    2620:	b085      	sub	sp, #20
    2622:	9003      	str	r0, [sp, #12]
    2624:	9102      	str	r1, [sp, #8]
    2626:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    2628:	9a01      	ldr	r2, [sp, #4]
    262a:	9902      	ldr	r1, [sp, #8]
    262c:	9803      	ldr	r0, [sp, #12]
    262e:	f7ff fe5d 	bl	22ec <IntCtrl_Ip_InstallHandlerPrivileged>
}
    2632:	bf00      	nop
    2634:	b005      	add	sp, #20
    2636:	f85d fb04 	ldr.w	pc, [sp], #4

0000263a <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    263a:	b500      	push	{lr}
    263c:	b083      	sub	sp, #12
    263e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    2640:	9801      	ldr	r0, [sp, #4]
    2642:	f7ff fe99 	bl	2378 <IntCtrl_Ip_EnableIrqPrivileged>
}
    2646:	bf00      	nop
    2648:	b003      	add	sp, #12
    264a:	f85d fb04 	ldr.w	pc, [sp], #4

0000264e <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    264e:	b500      	push	{lr}
    2650:	b083      	sub	sp, #12
    2652:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    2654:	9801      	ldr	r0, [sp, #4]
    2656:	f7ff feb3 	bl	23c0 <IntCtrl_Ip_DisableIrqPrivileged>
}
    265a:	bf00      	nop
    265c:	b003      	add	sp, #12
    265e:	f85d fb04 	ldr.w	pc, [sp], #4

00002662 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2662:	b500      	push	{lr}
    2664:	b083      	sub	sp, #12
    2666:	9001      	str	r0, [sp, #4]
    2668:	460b      	mov	r3, r1
    266a:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    266e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2672:	4619      	mov	r1, r3
    2674:	9801      	ldr	r0, [sp, #4]
    2676:	f7ff fec9 	bl	240c <IntCtrl_Ip_SetPriorityPrivileged>
}
    267a:	bf00      	nop
    267c:	b003      	add	sp, #12
    267e:	f85d fb04 	ldr.w	pc, [sp], #4

00002682 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    2682:	b500      	push	{lr}
    2684:	b083      	sub	sp, #12
    2686:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    2688:	9801      	ldr	r0, [sp, #4]
    268a:	f7ff fef5 	bl	2478 <IntCtrl_Ip_GetPriorityPrivileged>
    268e:	4603      	mov	r3, r0
}
    2690:	4618      	mov	r0, r3
    2692:	b003      	add	sp, #12
    2694:	f85d fb04 	ldr.w	pc, [sp], #4

00002698 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    2698:	b500      	push	{lr}
    269a:	b083      	sub	sp, #12
    269c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    269e:	9801      	ldr	r0, [sp, #4]
    26a0:	f7ff ff16 	bl	24d0 <IntCtrl_Ip_ClearPendingPrivileged>
}
    26a4:	bf00      	nop
    26a6:	b003      	add	sp, #12
    26a8:	f85d fb04 	ldr.w	pc, [sp], #4

000026ac <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    26ac:	b500      	push	{lr}
    26ae:	b083      	sub	sp, #12
    26b0:	9001      	str	r0, [sp, #4]
    26b2:	460b      	mov	r3, r1
    26b4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    26b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    26bc:	2b00      	cmp	r3, #0
    26be:	d003      	beq.n	26c8 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    26c0:	9801      	ldr	r0, [sp, #4]
    26c2:	f7ff ffba 	bl	263a <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    26c6:	e002      	b.n	26ce <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    26c8:	9801      	ldr	r0, [sp, #4]
    26ca:	f7ff ffc0 	bl	264e <IntCtrl_Ip_DisableIrq>
}
    26ce:	bf00      	nop
    26d0:	b003      	add	sp, #12
    26d2:	f85d fb04 	ldr.w	pc, [sp], #4

000026d6 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    26d6:	b500      	push	{lr}
    26d8:	b083      	sub	sp, #12
    26da:	9001      	str	r0, [sp, #4]
    26dc:	460b      	mov	r3, r1
    26de:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    26e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    26e6:	4619      	mov	r1, r3
    26e8:	9801      	ldr	r0, [sp, #4]
    26ea:	f7ff ffba 	bl	2662 <IntCtrl_Ip_SetPriority>
}
    26ee:	bf00      	nop
    26f0:	b003      	add	sp, #12
    26f2:	f85d fb04 	ldr.w	pc, [sp], #4

000026f6 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    26f6:	b500      	push	{lr}
    26f8:	b083      	sub	sp, #12
    26fa:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    26fc:	9801      	ldr	r0, [sp, #4]
    26fe:	f7ff ffc0 	bl	2682 <IntCtrl_Ip_GetPriority>
    2702:	4603      	mov	r3, r0
}
    2704:	4618      	mov	r0, r3
    2706:	b003      	add	sp, #12
    2708:	f85d fb04 	ldr.w	pc, [sp], #4

0000270c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    270c:	b500      	push	{lr}
    270e:	b085      	sub	sp, #20
    2710:	9003      	str	r0, [sp, #12]
    2712:	9102      	str	r1, [sp, #8]
    2714:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2716:	9a01      	ldr	r2, [sp, #4]
    2718:	9902      	ldr	r1, [sp, #8]
    271a:	9803      	ldr	r0, [sp, #12]
    271c:	f7ff ff7f 	bl	261e <IntCtrl_Ip_InstallHandler>
}
    2720:	bf00      	nop
    2722:	b005      	add	sp, #20
    2724:	f85d fb04 	ldr.w	pc, [sp], #4

00002728 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    2728:	b500      	push	{lr}
    272a:	b085      	sub	sp, #20
    272c:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    272e:	2300      	movs	r3, #0
    2730:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    2734:	9b01      	ldr	r3, [sp, #4]
    2736:	2b00      	cmp	r3, #0
    2738:	d006      	beq.n	2748 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    273a:	2301      	movs	r3, #1
    273c:	2220      	movs	r2, #32
    273e:	2100      	movs	r1, #0
    2740:	20ff      	movs	r0, #255	; 0xff
    2742:	f016 fa75 	bl	18c30 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    2746:	e008      	b.n	275a <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    2748:	f89d 300f 	ldrb.w	r3, [sp, #15]
    274c:	4a05      	ldr	r2, [pc, #20]	; (2764 <Platform_Init+0x3c>)
    274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2752:	681b      	ldr	r3, [r3, #0]
    2754:	4618      	mov	r0, r3
    2756:	f000 f917 	bl	2988 <Platform_Ipw_Init>
}
    275a:	bf00      	nop
    275c:	b005      	add	sp, #20
    275e:	f85d fb04 	ldr.w	pc, [sp], #4
    2762:	bf00      	nop
    2764:	0001a98c 	.word	0x0001a98c

00002768 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2768:	b500      	push	{lr}
    276a:	b085      	sub	sp, #20
    276c:	9001      	str	r0, [sp, #4]
    276e:	460b      	mov	r3, r1
    2770:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2774:	2300      	movs	r3, #0
    2776:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    277a:	9b01      	ldr	r3, [sp, #4]
    277c:	2b7a      	cmp	r3, #122	; 0x7a
    277e:	dc02      	bgt.n	2786 <Platform_SetIrq+0x1e>
    2780:	9b01      	ldr	r3, [sp, #4]
    2782:	2b00      	cmp	r3, #0
    2784:	da09      	bge.n	279a <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2786:	2302      	movs	r3, #2
    2788:	2221      	movs	r2, #33	; 0x21
    278a:	2100      	movs	r1, #0
    278c:	20ff      	movs	r0, #255	; 0xff
    278e:	f016 fa4f 	bl	18c30 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2792:	2301      	movs	r3, #1
    2794:	f88d 300f 	strb.w	r3, [sp, #15]
    2798:	e005      	b.n	27a6 <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    279a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    279e:	4619      	mov	r1, r3
    27a0:	9801      	ldr	r0, [sp, #4]
    27a2:	f7ff ff83 	bl	26ac <Platform_Ipw_SetIrq>
    }
    return RetValue;
    27a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    27aa:	4618      	mov	r0, r3
    27ac:	b005      	add	sp, #20
    27ae:	f85d fb04 	ldr.w	pc, [sp], #4

000027b2 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    27b2:	b500      	push	{lr}
    27b4:	b085      	sub	sp, #20
    27b6:	9001      	str	r0, [sp, #4]
    27b8:	460b      	mov	r3, r1
    27ba:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    27be:	2300      	movs	r3, #0
    27c0:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    27c4:	9b01      	ldr	r3, [sp, #4]
    27c6:	2b7a      	cmp	r3, #122	; 0x7a
    27c8:	dc06      	bgt.n	27d8 <Platform_SetIrqPriority+0x26>
    27ca:	9b01      	ldr	r3, [sp, #4]
    27cc:	2b00      	cmp	r3, #0
    27ce:	db03      	blt.n	27d8 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    27d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    27d4:	2b0f      	cmp	r3, #15
    27d6:	d909      	bls.n	27ec <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    27d8:	2302      	movs	r3, #2
    27da:	2222      	movs	r2, #34	; 0x22
    27dc:	2100      	movs	r1, #0
    27de:	20ff      	movs	r0, #255	; 0xff
    27e0:	f016 fa26 	bl	18c30 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    27e4:	2301      	movs	r3, #1
    27e6:	f88d 300f 	strb.w	r3, [sp, #15]
    27ea:	e005      	b.n	27f8 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    27ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    27f0:	4619      	mov	r1, r3
    27f2:	9801      	ldr	r0, [sp, #4]
    27f4:	f7ff ff6f 	bl	26d6 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    27f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    27fc:	4618      	mov	r0, r3
    27fe:	b005      	add	sp, #20
    2800:	f85d fb04 	ldr.w	pc, [sp], #4

00002804 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    2804:	b500      	push	{lr}
    2806:	b085      	sub	sp, #20
    2808:	9001      	str	r0, [sp, #4]
    280a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    280c:	2300      	movs	r3, #0
    280e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2812:	9b01      	ldr	r3, [sp, #4]
    2814:	2b7a      	cmp	r3, #122	; 0x7a
    2816:	dc02      	bgt.n	281e <Platform_GetIrqPriority+0x1a>
    2818:	9b01      	ldr	r3, [sp, #4]
    281a:	2b00      	cmp	r3, #0
    281c:	da09      	bge.n	2832 <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    281e:	2302      	movs	r3, #2
    2820:	2223      	movs	r2, #35	; 0x23
    2822:	2100      	movs	r1, #0
    2824:	20ff      	movs	r0, #255	; 0xff
    2826:	f016 fa03 	bl	18c30 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    282a:	2301      	movs	r3, #1
    282c:	f88d 300f 	strb.w	r3, [sp, #15]
    2830:	e013      	b.n	285a <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    2832:	9b00      	ldr	r3, [sp, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	d109      	bne.n	284c <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    2838:	2301      	movs	r3, #1
    283a:	2223      	movs	r2, #35	; 0x23
    283c:	2100      	movs	r1, #0
    283e:	20ff      	movs	r0, #255	; 0xff
    2840:	f016 f9f6 	bl	18c30 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2844:	2301      	movs	r3, #1
    2846:	f88d 300f 	strb.w	r3, [sp, #15]
    284a:	e006      	b.n	285a <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    284c:	9801      	ldr	r0, [sp, #4]
    284e:	f7ff ff52 	bl	26f6 <Platform_Ipw_GetIrqPriority>
    2852:	4603      	mov	r3, r0
    2854:	461a      	mov	r2, r3
    2856:	9b00      	ldr	r3, [sp, #0]
    2858:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    285a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    285e:	4618      	mov	r0, r3
    2860:	b005      	add	sp, #20
    2862:	f85d fb04 	ldr.w	pc, [sp], #4

00002866 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2866:	b500      	push	{lr}
    2868:	b087      	sub	sp, #28
    286a:	9003      	str	r0, [sp, #12]
    286c:	9102      	str	r1, [sp, #8]
    286e:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2870:	2300      	movs	r3, #0
    2872:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2876:	9b03      	ldr	r3, [sp, #12]
    2878:	2b7a      	cmp	r3, #122	; 0x7a
    287a:	dc02      	bgt.n	2882 <Platform_InstallIrqHandler+0x1c>
    287c:	9b03      	ldr	r3, [sp, #12]
    287e:	2b00      	cmp	r3, #0
    2880:	da09      	bge.n	2896 <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2882:	2302      	movs	r3, #2
    2884:	2224      	movs	r2, #36	; 0x24
    2886:	2100      	movs	r1, #0
    2888:	20ff      	movs	r0, #255	; 0xff
    288a:	f016 f9d1 	bl	18c30 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    288e:	2301      	movs	r3, #1
    2890:	f88d 3017 	strb.w	r3, [sp, #23]
    2894:	e004      	b.n	28a0 <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2896:	9a01      	ldr	r2, [sp, #4]
    2898:	9902      	ldr	r1, [sp, #8]
    289a:	9803      	ldr	r0, [sp, #12]
    289c:	f7ff ff36 	bl	270c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    28a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    28a4:	4618      	mov	r0, r3
    28a6:	b007      	add	sp, #28
    28a8:	f85d fb04 	ldr.w	pc, [sp], #4

000028ac <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    28ac:	b500      	push	{lr}
    28ae:	b085      	sub	sp, #20
    28b0:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    28b2:	2300      	movs	r3, #0
    28b4:	9303      	str	r3, [sp, #12]
    28b6:	e05d      	b.n	2974 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    28b8:	9b01      	ldr	r3, [sp, #4]
    28ba:	6859      	ldr	r1, [r3, #4]
    28bc:	9a03      	ldr	r2, [sp, #12]
    28be:	4613      	mov	r3, r2
    28c0:	005b      	lsls	r3, r3, #1
    28c2:	4413      	add	r3, r2
    28c4:	009b      	lsls	r3, r3, #2
    28c6:	440b      	add	r3, r1
    28c8:	681b      	ldr	r3, [r3, #0]
    28ca:	4618      	mov	r0, r3
    28cc:	f7ff fee4 	bl	2698 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	6859      	ldr	r1, [r3, #4]
    28d4:	9a03      	ldr	r2, [sp, #12]
    28d6:	4613      	mov	r3, r2
    28d8:	005b      	lsls	r3, r3, #1
    28da:	4413      	add	r3, r2
    28dc:	009b      	lsls	r3, r3, #2
    28de:	440b      	add	r3, r1
    28e0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    28e2:	9b01      	ldr	r3, [sp, #4]
    28e4:	6859      	ldr	r1, [r3, #4]
    28e6:	9a03      	ldr	r2, [sp, #12]
    28e8:	4613      	mov	r3, r2
    28ea:	005b      	lsls	r3, r3, #1
    28ec:	4413      	add	r3, r2
    28ee:	009b      	lsls	r3, r3, #2
    28f0:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    28f2:	795b      	ldrb	r3, [r3, #5]
    28f4:	4619      	mov	r1, r3
    28f6:	f7ff feb4 	bl	2662 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    28fa:	9b01      	ldr	r3, [sp, #4]
    28fc:	6859      	ldr	r1, [r3, #4]
    28fe:	9a03      	ldr	r2, [sp, #12]
    2900:	4613      	mov	r3, r2
    2902:	005b      	lsls	r3, r3, #1
    2904:	4413      	add	r3, r2
    2906:	009b      	lsls	r3, r3, #2
    2908:	440b      	add	r3, r1
    290a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    290c:	9b01      	ldr	r3, [sp, #4]
    290e:	6859      	ldr	r1, [r3, #4]
    2910:	9a03      	ldr	r2, [sp, #12]
    2912:	4613      	mov	r3, r2
    2914:	005b      	lsls	r3, r3, #1
    2916:	4413      	add	r3, r2
    2918:	009b      	lsls	r3, r3, #2
    291a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    291c:	689b      	ldr	r3, [r3, #8]
    291e:	2200      	movs	r2, #0
    2920:	4619      	mov	r1, r3
    2922:	f7ff fe7c 	bl	261e <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2926:	9b01      	ldr	r3, [sp, #4]
    2928:	6859      	ldr	r1, [r3, #4]
    292a:	9a03      	ldr	r2, [sp, #12]
    292c:	4613      	mov	r3, r2
    292e:	005b      	lsls	r3, r3, #1
    2930:	4413      	add	r3, r2
    2932:	009b      	lsls	r3, r3, #2
    2934:	440b      	add	r3, r1
    2936:	791b      	ldrb	r3, [r3, #4]
    2938:	2b00      	cmp	r3, #0
    293a:	d00c      	beq.n	2956 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	6859      	ldr	r1, [r3, #4]
    2940:	9a03      	ldr	r2, [sp, #12]
    2942:	4613      	mov	r3, r2
    2944:	005b      	lsls	r3, r3, #1
    2946:	4413      	add	r3, r2
    2948:	009b      	lsls	r3, r3, #2
    294a:	440b      	add	r3, r1
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	4618      	mov	r0, r3
    2950:	f7ff fe73 	bl	263a <IntCtrl_Ip_EnableIrq>
    2954:	e00b      	b.n	296e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2956:	9b01      	ldr	r3, [sp, #4]
    2958:	6859      	ldr	r1, [r3, #4]
    295a:	9a03      	ldr	r2, [sp, #12]
    295c:	4613      	mov	r3, r2
    295e:	005b      	lsls	r3, r3, #1
    2960:	4413      	add	r3, r2
    2962:	009b      	lsls	r3, r3, #2
    2964:	440b      	add	r3, r1
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	4618      	mov	r0, r3
    296a:	f7ff fe70 	bl	264e <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    296e:	9b03      	ldr	r3, [sp, #12]
    2970:	3301      	adds	r3, #1
    2972:	9303      	str	r3, [sp, #12]
    2974:	9b01      	ldr	r3, [sp, #4]
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	9a03      	ldr	r2, [sp, #12]
    297a:	429a      	cmp	r2, r3
    297c:	d39c      	bcc.n	28b8 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    297e:	2300      	movs	r3, #0
}
    2980:	4618      	mov	r0, r3
    2982:	b005      	add	sp, #20
    2984:	f85d fb04 	ldr.w	pc, [sp], #4

00002988 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2988:	b500      	push	{lr}
    298a:	b085      	sub	sp, #20
    298c:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    298e:	2300      	movs	r3, #0
    2990:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2994:	9b01      	ldr	r3, [sp, #4]
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	2b00      	cmp	r3, #0
    299a:	d007      	beq.n	29ac <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    299c:	9b01      	ldr	r3, [sp, #4]
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	4618      	mov	r0, r3
    29a2:	f7ff ff83 	bl	28ac <Platform_Ipw_InitIntCtrl>
    29a6:	4603      	mov	r3, r0
    29a8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    29ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    29b0:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    29b2:	bf00      	nop
    29b4:	b005      	add	sp, #20
    29b6:	f85d fb04 	ldr.w	pc, [sp], #4

000029ba <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    29ba:	2300      	movs	r3, #0
}
    29bc:	4618      	mov	r0, r3
    29be:	4770      	bx	lr

000029c0 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    29c0:	b082      	sub	sp, #8
    29c2:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    29c4:	2301      	movs	r3, #1
}
    29c6:	4618      	mov	r0, r3
    29c8:	b002      	add	sp, #8
    29ca:	4770      	bx	lr

000029cc <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    29cc:	b082      	sub	sp, #8
    29ce:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    29d0:	bf00      	nop
    29d2:	b002      	add	sp, #8
    29d4:	4770      	bx	lr

000029d6 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    29d6:	b082      	sub	sp, #8
    29d8:	9001      	str	r0, [sp, #4]
    return Micros;
    29da:	9b01      	ldr	r3, [sp, #4]
}
    29dc:	4618      	mov	r0, r3
    29de:	b002      	add	sp, #8
    29e0:	4770      	bx	lr

000029e2 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    29e2:	b500      	push	{lr}
    29e4:	b083      	sub	sp, #12
    29e6:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    29e8:	f000 f86c 	bl	2ac4 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    29ec:	bf00      	nop
    29ee:	b003      	add	sp, #12
    29f0:	f85d fb04 	ldr.w	pc, [sp], #4

000029f4 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    29f4:	b500      	push	{lr}
    29f6:	b085      	sub	sp, #20
    29f8:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    29fa:	2300      	movs	r3, #0
    29fc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    29fe:	9b01      	ldr	r3, [sp, #4]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d003      	beq.n	2a0c <OsIf_GetCounter+0x18>
    2a04:	9b01      	ldr	r3, [sp, #4]
    2a06:	2b01      	cmp	r3, #1
    2a08:	d004      	beq.n	2a14 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2a0a:	e007      	b.n	2a1c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    2a0c:	f7ff ffd5 	bl	29ba <OsIf_Timer_Dummy_GetCounter>
    2a10:	9003      	str	r0, [sp, #12]
            break;
    2a12:	e003      	b.n	2a1c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    2a14:	f000 f872 	bl	2afc <OsIf_Timer_System_GetCounter>
    2a18:	9003      	str	r0, [sp, #12]
            break;
    2a1a:	bf00      	nop
    }

    return Value;
    2a1c:	9b03      	ldr	r3, [sp, #12]
}
    2a1e:	4618      	mov	r0, r3
    2a20:	b005      	add	sp, #20
    2a22:	f85d fb04 	ldr.w	pc, [sp], #4

00002a26 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    2a26:	b500      	push	{lr}
    2a28:	b085      	sub	sp, #20
    2a2a:	9001      	str	r0, [sp, #4]
    2a2c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2a2e:	2300      	movs	r3, #0
    2a30:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2a32:	9b00      	ldr	r3, [sp, #0]
    2a34:	2b00      	cmp	r3, #0
    2a36:	d003      	beq.n	2a40 <OsIf_GetElapsed+0x1a>
    2a38:	9b00      	ldr	r3, [sp, #0]
    2a3a:	2b01      	cmp	r3, #1
    2a3c:	d005      	beq.n	2a4a <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2a3e:	e009      	b.n	2a54 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2a40:	9801      	ldr	r0, [sp, #4]
    2a42:	f7ff ffbd 	bl	29c0 <OsIf_Timer_Dummy_GetElapsed>
    2a46:	9003      	str	r0, [sp, #12]
            break;
    2a48:	e004      	b.n	2a54 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2a4a:	9801      	ldr	r0, [sp, #4]
    2a4c:	f000 f864 	bl	2b18 <OsIf_Timer_System_GetElapsed>
    2a50:	9003      	str	r0, [sp, #12]
            break;
    2a52:	bf00      	nop
    }

    return Value;
    2a54:	9b03      	ldr	r3, [sp, #12]
}
    2a56:	4618      	mov	r0, r3
    2a58:	b005      	add	sp, #20
    2a5a:	f85d fb04 	ldr.w	pc, [sp], #4

00002a5e <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2a5e:	b500      	push	{lr}
    2a60:	b083      	sub	sp, #12
    2a62:	9001      	str	r0, [sp, #4]
    2a64:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    2a66:	9b00      	ldr	r3, [sp, #0]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d003      	beq.n	2a74 <OsIf_SetTimerFrequency+0x16>
    2a6c:	9b00      	ldr	r3, [sp, #0]
    2a6e:	2b01      	cmp	r3, #1
    2a70:	d004      	beq.n	2a7c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2a72:	e007      	b.n	2a84 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2a74:	9801      	ldr	r0, [sp, #4]
    2a76:	f7ff ffa9 	bl	29cc <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2a7a:	e003      	b.n	2a84 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2a7c:	9801      	ldr	r0, [sp, #4]
    2a7e:	f000 f85b 	bl	2b38 <OsIf_Timer_System_SetTimerFrequency>
            break;
    2a82:	bf00      	nop
    }
}
    2a84:	bf00      	nop
    2a86:	b003      	add	sp, #12
    2a88:	f85d fb04 	ldr.w	pc, [sp], #4

00002a8c <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2a8c:	b500      	push	{lr}
    2a8e:	b085      	sub	sp, #20
    2a90:	9001      	str	r0, [sp, #4]
    2a92:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2a94:	2300      	movs	r3, #0
    2a96:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2a98:	9b00      	ldr	r3, [sp, #0]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d003      	beq.n	2aa6 <OsIf_MicrosToTicks+0x1a>
    2a9e:	9b00      	ldr	r3, [sp, #0]
    2aa0:	2b01      	cmp	r3, #1
    2aa2:	d005      	beq.n	2ab0 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2aa4:	e009      	b.n	2aba <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    2aa6:	9801      	ldr	r0, [sp, #4]
    2aa8:	f7ff ff95 	bl	29d6 <OsIf_Timer_Dummy_MicrosToTicks>
    2aac:	9003      	str	r0, [sp, #12]
            break;
    2aae:	e004      	b.n	2aba <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2ab0:	9801      	ldr	r0, [sp, #4]
    2ab2:	f000 f84f 	bl	2b54 <OsIf_Timer_System_MicrosToTicks>
    2ab6:	9003      	str	r0, [sp, #12]
            break;
    2ab8:	bf00      	nop
    }

    return Value;
    2aba:	9b03      	ldr	r3, [sp, #12]
}
    2abc:	4618      	mov	r0, r3
    2abe:	b005      	add	sp, #20
    2ac0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ac4 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2ac4:	b500      	push	{lr}
    2ac6:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2ac8:	2300      	movs	r3, #0
    2aca:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2acc:	4a09      	ldr	r2, [pc, #36]	; (2af4 <OsIf_Timer_System_Init+0x30>)
    2ace:	9b01      	ldr	r3, [sp, #4]
    2ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ad4:	685a      	ldr	r2, [r3, #4]
    2ad6:	4908      	ldr	r1, [pc, #32]	; (2af8 <OsIf_Timer_System_Init+0x34>)
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2ade:	4a06      	ldr	r2, [pc, #24]	; (2af8 <OsIf_Timer_System_Init+0x34>)
    2ae0:	9b01      	ldr	r3, [sp, #4]
    2ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ae6:	4618      	mov	r0, r3
    2ae8:	f000 f868 	bl	2bbc <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2aec:	bf00      	nop
    2aee:	b003      	add	sp, #12
    2af0:	f85d fb04 	ldr.w	pc, [sp], #4
    2af4:	0001a944 	.word	0x0001a944
    2af8:	1fff8b74 	.word	0x1fff8b74

00002afc <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2afc:	b500      	push	{lr}
    2afe:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2b00:	2300      	movs	r3, #0
    2b02:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2b04:	2300      	movs	r3, #0
    2b06:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2b08:	f000 f86c 	bl	2be4 <OsIf_Timer_System_Internal_GetCounter>
    2b0c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    2b0e:	9b01      	ldr	r3, [sp, #4]
}
    2b10:	4618      	mov	r0, r3
    2b12:	b003      	add	sp, #12
    2b14:	f85d fb04 	ldr.w	pc, [sp], #4

00002b18 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2b18:	b500      	push	{lr}
    2b1a:	b085      	sub	sp, #20
    2b1c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2b1e:	2300      	movs	r3, #0
    2b20:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    2b22:	2300      	movs	r3, #0
    2b24:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    2b26:	9801      	ldr	r0, [sp, #4]
    2b28:	f000 f864 	bl	2bf4 <OsIf_Timer_System_Internal_GetElapsed>
    2b2c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2b2e:	9b03      	ldr	r3, [sp, #12]
}
    2b30:	4618      	mov	r0, r3
    2b32:	b005      	add	sp, #20
    2b34:	f85d fb04 	ldr.w	pc, [sp], #4

00002b38 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2b38:	b084      	sub	sp, #16
    2b3a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2b3c:	2300      	movs	r3, #0
    2b3e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2b40:	4903      	ldr	r1, [pc, #12]	; (2b50 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2b42:	9b03      	ldr	r3, [sp, #12]
    2b44:	9a01      	ldr	r2, [sp, #4]
    2b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2b4a:	bf00      	nop
    2b4c:	b004      	add	sp, #16
    2b4e:	4770      	bx	lr
    2b50:	1fff8b74 	.word	0x1fff8b74

00002b54 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b56:	b087      	sub	sp, #28
    2b58:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2b5a:	2100      	movs	r1, #0
    2b5c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2b5e:	2100      	movs	r1, #0
    2b60:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2b62:	9901      	ldr	r1, [sp, #4]
    2b64:	2000      	movs	r0, #0
    2b66:	460e      	mov	r6, r1
    2b68:	4607      	mov	r7, r0
    2b6a:	4812      	ldr	r0, [pc, #72]	; (2bb4 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2b6c:	9904      	ldr	r1, [sp, #16]
    2b6e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2b72:	2000      	movs	r0, #0
    2b74:	460c      	mov	r4, r1
    2b76:	4605      	mov	r5, r0
    2b78:	fb04 f007 	mul.w	r0, r4, r7
    2b7c:	fb06 f105 	mul.w	r1, r6, r5
    2b80:	4401      	add	r1, r0
    2b82:	fba6 2304 	umull	r2, r3, r6, r4
    2b86:	4419      	add	r1, r3
    2b88:	460b      	mov	r3, r1
    2b8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2b8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2b96:	4a08      	ldr	r2, [pc, #32]	; (2bb8 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2b98:	f04f 0300 	mov.w	r3, #0
    2b9c:	f7fd fd02 	bl	5a4 <__aeabi_uldivmod>
    2ba0:	4602      	mov	r2, r0
    2ba2:	460b      	mov	r3, r1
    2ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2ba8:	9b02      	ldr	r3, [sp, #8]
    2baa:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2bac:	9b05      	ldr	r3, [sp, #20]
}
    2bae:	4618      	mov	r0, r3
    2bb0:	b007      	add	sp, #28
    2bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bb4:	1fff8b74 	.word	0x1fff8b74
    2bb8:	000f4240 	.word	0x000f4240

00002bbc <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2bbc:	b082      	sub	sp, #8
    2bbe:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2bc0:	4b07      	ldr	r3, [pc, #28]	; (2be0 <OsIf_Timer_System_Internal_Init+0x24>)
    2bc2:	2200      	movs	r2, #0
    2bc4:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2bc6:	4b06      	ldr	r3, [pc, #24]	; (2be0 <OsIf_Timer_System_Internal_Init+0x24>)
    2bc8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2bcc:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2bce:	4b04      	ldr	r3, [pc, #16]	; (2be0 <OsIf_Timer_System_Internal_Init+0x24>)
    2bd0:	2200      	movs	r2, #0
    2bd2:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2bd4:	4b02      	ldr	r3, [pc, #8]	; (2be0 <OsIf_Timer_System_Internal_Init+0x24>)
    2bd6:	2205      	movs	r2, #5
    2bd8:	601a      	str	r2, [r3, #0]
}
    2bda:	bf00      	nop
    2bdc:	b002      	add	sp, #8
    2bde:	4770      	bx	lr
    2be0:	e000e010 	.word	0xe000e010

00002be4 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2be4:	4b02      	ldr	r3, [pc, #8]	; (2bf0 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    2be6:	689b      	ldr	r3, [r3, #8]
    2be8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2bec:	4618      	mov	r0, r3
    2bee:	4770      	bx	lr
    2bf0:	e000e010 	.word	0xe000e010

00002bf4 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2bf4:	b084      	sub	sp, #16
    2bf6:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2bf8:	4b10      	ldr	r3, [pc, #64]	; (2c3c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2bfa:	689b      	ldr	r3, [r3, #8]
    2bfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c00:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    2c02:	2300      	movs	r3, #0
    2c04:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	9a02      	ldr	r2, [sp, #8]
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d909      	bls.n	2c24 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2c10:	9b01      	ldr	r3, [sp, #4]
    2c12:	681a      	ldr	r2, [r3, #0]
    2c14:	9b02      	ldr	r3, [sp, #8]
    2c16:	1ad3      	subs	r3, r2, r3
    2c18:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2c1c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2c20:	9303      	str	r3, [sp, #12]
    2c22:	e004      	b.n	2c2e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2c24:	9b01      	ldr	r3, [sp, #4]
    2c26:	681a      	ldr	r2, [r3, #0]
    2c28:	9b02      	ldr	r3, [sp, #8]
    2c2a:	1ad3      	subs	r3, r2, r3
    2c2c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2c2e:	9b01      	ldr	r3, [sp, #4]
    2c30:	9a02      	ldr	r2, [sp, #8]
    2c32:	601a      	str	r2, [r3, #0]

    return dif;
    2c34:	9b03      	ldr	r3, [sp, #12]
}
    2c36:	4618      	mov	r0, r3
    2c38:	b004      	add	sp, #16
    2c3a:	4770      	bx	lr
    2c3c:	e000e010 	.word	0xe000e010

00002c40 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2c40:	b082      	sub	sp, #8
    2c42:	9001      	str	r0, [sp, #4]
    2c44:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2c46:	bf00      	nop
    2c48:	b002      	add	sp, #8
    2c4a:	4770      	bx	lr

00002c4c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2c4c:	b500      	push	{lr}
    2c4e:	b085      	sub	sp, #20
    2c50:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2c52:	4b24      	ldr	r3, [pc, #144]	; (2ce4 <Clock_Ip_UpdateDriverContext+0x98>)
    2c54:	2201      	movs	r2, #1
    2c56:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2c58:	4b23      	ldr	r3, [pc, #140]	; (2ce8 <Clock_Ip_UpdateDriverContext+0x9c>)
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	2102      	movs	r1, #2
    2c5e:	4618      	mov	r0, r3
    2c60:	f003 fc32 	bl	64c8 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2c64:	2300      	movs	r3, #0
    2c66:	f88d 300f 	strb.w	r3, [sp, #15]
    2c6a:	e015      	b.n	2c98 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c70:	9a01      	ldr	r2, [sp, #4]
    2c72:	334a      	adds	r3, #74	; 0x4a
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	4413      	add	r3, r2
    2c78:	6858      	ldr	r0, [r3, #4]
    2c7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c7e:	9a01      	ldr	r2, [sp, #4]
    2c80:	334a      	adds	r3, #74	; 0x4a
    2c82:	00db      	lsls	r3, r3, #3
    2c84:	4413      	add	r3, r2
    2c86:	689b      	ldr	r3, [r3, #8]
    2c88:	4619      	mov	r1, r3
    2c8a:	f001 fadc 	bl	4246 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2c8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c92:	3301      	adds	r3, #1
    2c94:	f88d 300f 	strb.w	r3, [sp, #15]
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	7bdb      	ldrb	r3, [r3, #15]
    2c9c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2ca0:	429a      	cmp	r2, r3
    2ca2:	d3e3      	bcc.n	2c6c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2ca4:	f000 f824 	bl	2cf0 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2ca8:	2301      	movs	r3, #1
    2caa:	f88d 300f 	strb.w	r3, [sp, #15]
    2cae:	e00e      	b.n	2cce <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2cb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	327e      	adds	r2, #126	; 0x7e
    2cb8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2cbc:	490b      	ldr	r1, [pc, #44]	; (2cec <Clock_Ip_UpdateDriverContext+0xa0>)
    2cbe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2cc2:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2cc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2cc8:	3301      	adds	r3, #1
    2cca:	f88d 300f 	strb.w	r3, [sp, #15]
    2cce:	9b01      	ldr	r3, [sp, #4]
    2cd0:	7cdb      	ldrb	r3, [r3, #19]
    2cd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2cd6:	429a      	cmp	r2, r3
    2cd8:	d3ea      	bcc.n	2cb0 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2cda:	bf00      	nop
    2cdc:	bf00      	nop
    2cde:	b005      	add	sp, #20
    2ce0:	f85d fb04 	ldr.w	pc, [sp], #4
    2ce4:	1fff8b10 	.word	0x1fff8b10
    2ce8:	1fff8b78 	.word	0x1fff8b78
    2cec:	1fff8b84 	.word	0x1fff8b84

00002cf0 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2cf0:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2cf2:	4b23      	ldr	r3, [pc, #140]	; (2d80 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2cf4:	781b      	ldrb	r3, [r3, #0]
    2cf6:	f083 0301 	eor.w	r3, r3, #1
    2cfa:	b2db      	uxtb	r3, r3
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d03d      	beq.n	2d7c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2d00:	4b1f      	ldr	r3, [pc, #124]	; (2d80 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2d02:	2201      	movs	r2, #1
    2d04:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2d06:	4b1f      	ldr	r3, [pc, #124]	; (2d84 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2d08:	685b      	ldr	r3, [r3, #4]
    2d0a:	2100      	movs	r1, #0
    2d0c:	2000      	movs	r0, #0
    2d0e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2d10:	4b1c      	ldr	r3, [pc, #112]	; (2d84 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2d12:	689b      	ldr	r3, [r3, #8]
    2d14:	2057      	movs	r0, #87	; 0x57
    2d16:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d18:	4b1b      	ldr	r3, [pc, #108]	; (2d88 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2d1a:	681b      	ldr	r3, [r3, #0]
    2d1c:	2000      	movs	r0, #0
    2d1e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2d20:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2d22:	681b      	ldr	r3, [r3, #0]
    2d24:	2000      	movs	r0, #0
    2d26:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2d28:	4b19      	ldr	r3, [pc, #100]	; (2d90 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2d2a:	681b      	ldr	r3, [r3, #0]
    2d2c:	2000      	movs	r0, #0
    2d2e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d30:	4b18      	ldr	r3, [pc, #96]	; (2d94 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2d32:	685b      	ldr	r3, [r3, #4]
    2d34:	2000      	movs	r0, #0
    2d36:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2d38:	4b16      	ldr	r3, [pc, #88]	; (2d94 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2d3a:	689b      	ldr	r3, [r3, #8]
    2d3c:	2057      	movs	r0, #87	; 0x57
    2d3e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d40:	4b15      	ldr	r3, [pc, #84]	; (2d98 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2d42:	681b      	ldr	r3, [r3, #0]
    2d44:	2000      	movs	r0, #0
    2d46:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2d48:	4b13      	ldr	r3, [pc, #76]	; (2d98 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2d4a:	685b      	ldr	r3, [r3, #4]
    2d4c:	2100      	movs	r1, #0
    2d4e:	2057      	movs	r0, #87	; 0x57
    2d50:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d52:	4b12      	ldr	r3, [pc, #72]	; (2d9c <Clock_Ip_CallEmptyCallbacks+0xac>)
    2d54:	681b      	ldr	r3, [r3, #0]
    2d56:	2000      	movs	r0, #0
    2d58:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d5a:	4b11      	ldr	r3, [pc, #68]	; (2da0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2d5c:	685b      	ldr	r3, [r3, #4]
    2d5e:	2000      	movs	r0, #0
    2d60:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2d62:	4b0f      	ldr	r3, [pc, #60]	; (2da0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2d64:	689b      	ldr	r3, [r3, #8]
    2d66:	2057      	movs	r0, #87	; 0x57
    2d68:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d6a:	4b0e      	ldr	r3, [pc, #56]	; (2da4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2d6c:	685b      	ldr	r3, [r3, #4]
    2d6e:	2000      	movs	r0, #0
    2d70:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2d72:	4b0d      	ldr	r3, [pc, #52]	; (2da8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2d74:	681b      	ldr	r3, [r3, #0]
    2d76:	2100      	movs	r1, #0
    2d78:	2000      	movs	r0, #0
    2d7a:	4798      	blx	r3
    }
}
    2d7c:	bf00      	nop
    2d7e:	bd08      	pop	{r3, pc}
    2d80:	1fff8b7c 	.word	0x1fff8b7c
    2d84:	00019e9c 	.word	0x00019e9c
    2d88:	00019db0 	.word	0x00019db0
    2d8c:	00019dec 	.word	0x00019dec
    2d90:	00019df4 	.word	0x00019df4
    2d94:	00019e1c 	.word	0x00019e1c
    2d98:	00019e28 	.word	0x00019e28
    2d9c:	00019e60 	.word	0x00019e60
    2da0:	00019eac 	.word	0x00019eac
    2da4:	00019ed8 	.word	0x00019ed8
    2da8:	00019ed4 	.word	0x00019ed4

00002dac <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2dac:	b500      	push	{lr}
    2dae:	b085      	sub	sp, #20
    2db0:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2db2:	9b01      	ldr	r3, [sp, #4]
    2db4:	7adb      	ldrb	r3, [r3, #11]
    2db6:	9303      	str	r3, [sp, #12]
    2db8:	e01f      	b.n	2dfa <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2dba:	9b03      	ldr	r3, [sp, #12]
    2dbc:	1e5a      	subs	r2, r3, #1
    2dbe:	9b01      	ldr	r3, [sp, #4]
    2dc0:	320d      	adds	r2, #13
    2dc2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2dc6:	495a      	ldr	r1, [pc, #360]	; (2f30 <Clock_Ip_ResetClockConfiguration+0x184>)
    2dc8:	4613      	mov	r3, r2
    2dca:	00db      	lsls	r3, r3, #3
    2dcc:	4413      	add	r3, r2
    2dce:	440b      	add	r3, r1
    2dd0:	3301      	adds	r3, #1
    2dd2:	781b      	ldrb	r3, [r3, #0]
    2dd4:	461a      	mov	r2, r3
    2dd6:	4b57      	ldr	r3, [pc, #348]	; (2f34 <Clock_Ip_ResetClockConfiguration+0x188>)
    2dd8:	5c9b      	ldrb	r3, [r3, r2]
    2dda:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2ddc:	4a56      	ldr	r2, [pc, #344]	; (2f38 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2dde:	9b02      	ldr	r3, [sp, #8]
    2de0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2de4:	9a03      	ldr	r2, [sp, #12]
    2de6:	3a01      	subs	r2, #1
    2de8:	320d      	adds	r2, #13
    2dea:	00d2      	lsls	r2, r2, #3
    2dec:	9901      	ldr	r1, [sp, #4]
    2dee:	440a      	add	r2, r1
    2df0:	4610      	mov	r0, r2
    2df2:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2df4:	9b03      	ldr	r3, [sp, #12]
    2df6:	3b01      	subs	r3, #1
    2df8:	9303      	str	r3, [sp, #12]
    2dfa:	9b03      	ldr	r3, [sp, #12]
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d1dc      	bne.n	2dba <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2e00:	9b01      	ldr	r3, [sp, #4]
    2e02:	7b9b      	ldrb	r3, [r3, #14]
    2e04:	9303      	str	r3, [sp, #12]
    2e06:	e026      	b.n	2e56 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2e08:	9b03      	ldr	r3, [sp, #12]
    2e0a:	3b01      	subs	r3, #1
    2e0c:	9a01      	ldr	r2, [sp, #4]
    2e0e:	3324      	adds	r3, #36	; 0x24
    2e10:	011b      	lsls	r3, r3, #4
    2e12:	4413      	add	r3, r2
    2e14:	3304      	adds	r3, #4
    2e16:	681a      	ldr	r2, [r3, #0]
    2e18:	4945      	ldr	r1, [pc, #276]	; (2f30 <Clock_Ip_ResetClockConfiguration+0x184>)
    2e1a:	4613      	mov	r3, r2
    2e1c:	00db      	lsls	r3, r3, #3
    2e1e:	4413      	add	r3, r2
    2e20:	440b      	add	r3, r1
    2e22:	3301      	adds	r3, #1
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	461a      	mov	r2, r3
    2e28:	4b44      	ldr	r3, [pc, #272]	; (2f3c <Clock_Ip_ResetClockConfiguration+0x190>)
    2e2a:	5c9b      	ldrb	r3, [r3, r2]
    2e2c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2e2e:	4944      	ldr	r1, [pc, #272]	; (2f40 <Clock_Ip_ResetClockConfiguration+0x194>)
    2e30:	9a02      	ldr	r2, [sp, #8]
    2e32:	4613      	mov	r3, r2
    2e34:	005b      	lsls	r3, r3, #1
    2e36:	4413      	add	r3, r2
    2e38:	009b      	lsls	r3, r3, #2
    2e3a:	440b      	add	r3, r1
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	9a03      	ldr	r2, [sp, #12]
    2e40:	3a01      	subs	r2, #1
    2e42:	3224      	adds	r2, #36	; 0x24
    2e44:	0112      	lsls	r2, r2, #4
    2e46:	9901      	ldr	r1, [sp, #4]
    2e48:	440a      	add	r2, r1
    2e4a:	3204      	adds	r2, #4
    2e4c:	4610      	mov	r0, r2
    2e4e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2e50:	9b03      	ldr	r3, [sp, #12]
    2e52:	3b01      	subs	r3, #1
    2e54:	9303      	str	r3, [sp, #12]
    2e56:	9b03      	ldr	r3, [sp, #12]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d1d5      	bne.n	2e08 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2e5c:	9b01      	ldr	r3, [sp, #4]
    2e5e:	7a9b      	ldrb	r3, [r3, #10]
    2e60:	9303      	str	r3, [sp, #12]
    2e62:	e02a      	b.n	2eba <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2e64:	9b03      	ldr	r3, [sp, #12]
    2e66:	1e5a      	subs	r2, r3, #1
    2e68:	9901      	ldr	r1, [sp, #4]
    2e6a:	4613      	mov	r3, r2
    2e6c:	009b      	lsls	r3, r3, #2
    2e6e:	4413      	add	r3, r2
    2e70:	00db      	lsls	r3, r3, #3
    2e72:	440b      	add	r3, r1
    2e74:	3340      	adds	r3, #64	; 0x40
    2e76:	681a      	ldr	r2, [r3, #0]
    2e78:	492d      	ldr	r1, [pc, #180]	; (2f30 <Clock_Ip_ResetClockConfiguration+0x184>)
    2e7a:	4613      	mov	r3, r2
    2e7c:	00db      	lsls	r3, r3, #3
    2e7e:	4413      	add	r3, r2
    2e80:	440b      	add	r3, r1
    2e82:	3301      	adds	r3, #1
    2e84:	781b      	ldrb	r3, [r3, #0]
    2e86:	461a      	mov	r2, r3
    2e88:	4b2e      	ldr	r3, [pc, #184]	; (2f44 <Clock_Ip_ResetClockConfiguration+0x198>)
    2e8a:	5c9b      	ldrb	r3, [r3, r2]
    2e8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2e8e:	492e      	ldr	r1, [pc, #184]	; (2f48 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2e90:	9a02      	ldr	r2, [sp, #8]
    2e92:	4613      	mov	r3, r2
    2e94:	009b      	lsls	r3, r3, #2
    2e96:	4413      	add	r3, r2
    2e98:	009b      	lsls	r3, r3, #2
    2e9a:	440b      	add	r3, r1
    2e9c:	6819      	ldr	r1, [r3, #0]
    2e9e:	9b03      	ldr	r3, [sp, #12]
    2ea0:	1e5a      	subs	r2, r3, #1
    2ea2:	4613      	mov	r3, r2
    2ea4:	009b      	lsls	r3, r3, #2
    2ea6:	4413      	add	r3, r2
    2ea8:	00db      	lsls	r3, r3, #3
    2eaa:	3340      	adds	r3, #64	; 0x40
    2eac:	9a01      	ldr	r2, [sp, #4]
    2eae:	4413      	add	r3, r2
    2eb0:	4618      	mov	r0, r3
    2eb2:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2eb4:	9b03      	ldr	r3, [sp, #12]
    2eb6:	3b01      	subs	r3, #1
    2eb8:	9303      	str	r3, [sp, #12]
    2eba:	9b03      	ldr	r3, [sp, #12]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d1d1      	bne.n	2e64 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2ec0:	9b01      	ldr	r3, [sp, #4]
    2ec2:	7a5b      	ldrb	r3, [r3, #9]
    2ec4:	9303      	str	r3, [sp, #12]
    2ec6:	e02b      	b.n	2f20 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2ec8:	9b03      	ldr	r3, [sp, #12]
    2eca:	1e5a      	subs	r2, r3, #1
    2ecc:	9901      	ldr	r1, [sp, #4]
    2ece:	4613      	mov	r3, r2
    2ed0:	009b      	lsls	r3, r3, #2
    2ed2:	4413      	add	r3, r2
    2ed4:	009b      	lsls	r3, r3, #2
    2ed6:	440b      	add	r3, r1
    2ed8:	332c      	adds	r3, #44	; 0x2c
    2eda:	681a      	ldr	r2, [r3, #0]
    2edc:	4914      	ldr	r1, [pc, #80]	; (2f30 <Clock_Ip_ResetClockConfiguration+0x184>)
    2ede:	4613      	mov	r3, r2
    2ee0:	00db      	lsls	r3, r3, #3
    2ee2:	4413      	add	r3, r2
    2ee4:	440b      	add	r3, r1
    2ee6:	3301      	adds	r3, #1
    2ee8:	781b      	ldrb	r3, [r3, #0]
    2eea:	461a      	mov	r2, r3
    2eec:	4b17      	ldr	r3, [pc, #92]	; (2f4c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2eee:	5c9b      	ldrb	r3, [r3, r2]
    2ef0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2ef2:	4917      	ldr	r1, [pc, #92]	; (2f50 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2ef4:	9a02      	ldr	r2, [sp, #8]
    2ef6:	4613      	mov	r3, r2
    2ef8:	009b      	lsls	r3, r3, #2
    2efa:	4413      	add	r3, r2
    2efc:	009b      	lsls	r3, r3, #2
    2efe:	440b      	add	r3, r1
    2f00:	6819      	ldr	r1, [r3, #0]
    2f02:	9b03      	ldr	r3, [sp, #12]
    2f04:	1e5a      	subs	r2, r3, #1
    2f06:	4613      	mov	r3, r2
    2f08:	009b      	lsls	r3, r3, #2
    2f0a:	4413      	add	r3, r2
    2f0c:	009b      	lsls	r3, r3, #2
    2f0e:	3328      	adds	r3, #40	; 0x28
    2f10:	9a01      	ldr	r2, [sp, #4]
    2f12:	4413      	add	r3, r2
    2f14:	3304      	adds	r3, #4
    2f16:	4618      	mov	r0, r3
    2f18:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2f1a:	9b03      	ldr	r3, [sp, #12]
    2f1c:	3b01      	subs	r3, #1
    2f1e:	9303      	str	r3, [sp, #12]
    2f20:	9b03      	ldr	r3, [sp, #12]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d1d0      	bne.n	2ec8 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2f26:	bf00      	nop
    2f28:	bf00      	nop
    2f2a:	b005      	add	sp, #20
    2f2c:	f85d fb04 	ldr.w	pc, [sp], #4
    2f30:	000198a0 	.word	0x000198a0
    2f34:	00019870 	.word	0x00019870
    2f38:	00019ed8 	.word	0x00019ed8
    2f3c:	00019850 	.word	0x00019850
    2f40:	00019e1c 	.word	0x00019e1c
    2f44:	00019860 	.word	0x00019860
    2f48:	00019eac 	.word	0x00019eac
    2f4c:	00019820 	.word	0x00019820
    2f50:	00019df4 	.word	0x00019df4

00002f54 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2f54:	b500      	push	{lr}
    2f56:	b085      	sub	sp, #20
    2f58:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2f5a:	2301      	movs	r3, #1
    2f5c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2f5e:	9801      	ldr	r0, [sp, #4]
    2f60:	f000 f818 	bl	2f94 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2f64:	4b0a      	ldr	r3, [pc, #40]	; (2f90 <Clock_Ip_Init+0x3c>)
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d00a      	beq.n	2f82 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2f6c:	f000 fb74 	bl	3658 <Clock_Ip_GetPllStatus>
    2f70:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2f72:	9b02      	ldr	r3, [sp, #8]
    2f74:	2b00      	cmp	r3, #0
    2f76:	d106      	bne.n	2f86 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2f78:	f000 fbf2 	bl	3760 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2f7c:	2300      	movs	r3, #0
    2f7e:	9303      	str	r3, [sp, #12]
    2f80:	e001      	b.n	2f86 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2f82:	2300      	movs	r3, #0
    2f84:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2f86:	9b03      	ldr	r3, [sp, #12]
}
    2f88:	4618      	mov	r0, r3
    2f8a:	b005      	add	sp, #20
    2f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    2f90:	1fff8b80 	.word	0x1fff8b80

00002f94 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2f94:	b510      	push	{r4, lr}
    2f96:	b084      	sub	sp, #16
    2f98:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2f9a:	4a9f      	ldr	r2, [pc, #636]	; (3218 <Clock_Ip_InitClock+0x284>)
    2f9c:	9b01      	ldr	r3, [sp, #4]
    2f9e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2fa0:	2101      	movs	r1, #1
    2fa2:	9801      	ldr	r0, [sp, #4]
    2fa4:	f003 fa90 	bl	64c8 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2fa8:	4b9b      	ldr	r3, [pc, #620]	; (3218 <Clock_Ip_InitClock+0x284>)
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d030      	beq.n	3012 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2fb0:	2300      	movs	r3, #0
    2fb2:	9303      	str	r3, [sp, #12]
    2fb4:	e027      	b.n	3006 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2fb6:	9901      	ldr	r1, [sp, #4]
    2fb8:	9a03      	ldr	r2, [sp, #12]
    2fba:	4613      	mov	r3, r2
    2fbc:	009b      	lsls	r3, r3, #2
    2fbe:	4413      	add	r3, r2
    2fc0:	009b      	lsls	r3, r3, #2
    2fc2:	440b      	add	r3, r1
    2fc4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2fc8:	681a      	ldr	r2, [r3, #0]
    2fca:	4994      	ldr	r1, [pc, #592]	; (321c <Clock_Ip_InitClock+0x288>)
    2fcc:	4613      	mov	r3, r2
    2fce:	00db      	lsls	r3, r3, #3
    2fd0:	4413      	add	r3, r2
    2fd2:	440b      	add	r3, r1
    2fd4:	3301      	adds	r3, #1
    2fd6:	781b      	ldrb	r3, [r3, #0]
    2fd8:	461a      	mov	r2, r3
    2fda:	4b91      	ldr	r3, [pc, #580]	; (3220 <Clock_Ip_InitClock+0x28c>)
    2fdc:	5c9b      	ldrb	r3, [r3, r2]
    2fde:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2fe0:	4a90      	ldr	r2, [pc, #576]	; (3224 <Clock_Ip_InitClock+0x290>)
    2fe2:	9b02      	ldr	r3, [sp, #8]
    2fe4:	011b      	lsls	r3, r3, #4
    2fe6:	4413      	add	r3, r2
    2fe8:	6819      	ldr	r1, [r3, #0]
    2fea:	9a03      	ldr	r2, [sp, #12]
    2fec:	4613      	mov	r3, r2
    2fee:	009b      	lsls	r3, r3, #2
    2ff0:	4413      	add	r3, r2
    2ff2:	009b      	lsls	r3, r3, #2
    2ff4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2ff8:	9a01      	ldr	r2, [sp, #4]
    2ffa:	4413      	add	r3, r2
    2ffc:	4618      	mov	r0, r3
    2ffe:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    3000:	9b03      	ldr	r3, [sp, #12]
    3002:	3301      	adds	r3, #1
    3004:	9303      	str	r3, [sp, #12]
    3006:	9b01      	ldr	r3, [sp, #4]
    3008:	7c9b      	ldrb	r3, [r3, #18]
    300a:	461a      	mov	r2, r3
    300c:	9b03      	ldr	r3, [sp, #12]
    300e:	4293      	cmp	r3, r2
    3010:	d3d1      	bcc.n	2fb6 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    3012:	9801      	ldr	r0, [sp, #4]
    3014:	f7ff feca 	bl	2dac <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    3018:	2300      	movs	r3, #0
    301a:	9303      	str	r3, [sp, #12]
    301c:	e029      	b.n	3072 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    301e:	9901      	ldr	r1, [sp, #4]
    3020:	9a03      	ldr	r2, [sp, #12]
    3022:	4613      	mov	r3, r2
    3024:	005b      	lsls	r3, r3, #1
    3026:	4413      	add	r3, r2
    3028:	009b      	lsls	r3, r3, #2
    302a:	440b      	add	r3, r1
    302c:	3314      	adds	r3, #20
    302e:	681a      	ldr	r2, [r3, #0]
    3030:	497a      	ldr	r1, [pc, #488]	; (321c <Clock_Ip_InitClock+0x288>)
    3032:	4613      	mov	r3, r2
    3034:	00db      	lsls	r3, r3, #3
    3036:	4413      	add	r3, r2
    3038:	440b      	add	r3, r1
    303a:	3301      	adds	r3, #1
    303c:	781b      	ldrb	r3, [r3, #0]
    303e:	461a      	mov	r2, r3
    3040:	4b79      	ldr	r3, [pc, #484]	; (3228 <Clock_Ip_InitClock+0x294>)
    3042:	5c9b      	ldrb	r3, [r3, r2]
    3044:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    3046:	4979      	ldr	r1, [pc, #484]	; (322c <Clock_Ip_InitClock+0x298>)
    3048:	9a02      	ldr	r2, [sp, #8]
    304a:	4613      	mov	r3, r2
    304c:	005b      	lsls	r3, r3, #1
    304e:	4413      	add	r3, r2
    3050:	009b      	lsls	r3, r3, #2
    3052:	440b      	add	r3, r1
    3054:	6819      	ldr	r1, [r3, #0]
    3056:	9a03      	ldr	r2, [sp, #12]
    3058:	4613      	mov	r3, r2
    305a:	005b      	lsls	r3, r3, #1
    305c:	4413      	add	r3, r2
    305e:	009b      	lsls	r3, r3, #2
    3060:	3310      	adds	r3, #16
    3062:	9a01      	ldr	r2, [sp, #4]
    3064:	4413      	add	r3, r2
    3066:	3304      	adds	r3, #4
    3068:	4618      	mov	r0, r3
    306a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    306c:	9b03      	ldr	r3, [sp, #12]
    306e:	3301      	adds	r3, #1
    3070:	9303      	str	r3, [sp, #12]
    3072:	9b01      	ldr	r3, [sp, #4]
    3074:	7a1b      	ldrb	r3, [r3, #8]
    3076:	461a      	mov	r2, r3
    3078:	9b03      	ldr	r3, [sp, #12]
    307a:	4293      	cmp	r3, r2
    307c:	d3cf      	bcc.n	301e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    307e:	2300      	movs	r3, #0
    3080:	9303      	str	r3, [sp, #12]
    3082:	e02a      	b.n	30da <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    3084:	9901      	ldr	r1, [sp, #4]
    3086:	9a03      	ldr	r2, [sp, #12]
    3088:	4613      	mov	r3, r2
    308a:	009b      	lsls	r3, r3, #2
    308c:	4413      	add	r3, r2
    308e:	009b      	lsls	r3, r3, #2
    3090:	440b      	add	r3, r1
    3092:	332c      	adds	r3, #44	; 0x2c
    3094:	681a      	ldr	r2, [r3, #0]
    3096:	4961      	ldr	r1, [pc, #388]	; (321c <Clock_Ip_InitClock+0x288>)
    3098:	4613      	mov	r3, r2
    309a:	00db      	lsls	r3, r3, #3
    309c:	4413      	add	r3, r2
    309e:	440b      	add	r3, r1
    30a0:	3301      	adds	r3, #1
    30a2:	781b      	ldrb	r3, [r3, #0]
    30a4:	461a      	mov	r2, r3
    30a6:	4b62      	ldr	r3, [pc, #392]	; (3230 <Clock_Ip_InitClock+0x29c>)
    30a8:	5c9b      	ldrb	r3, [r3, r2]
    30aa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    30ac:	4961      	ldr	r1, [pc, #388]	; (3234 <Clock_Ip_InitClock+0x2a0>)
    30ae:	9a02      	ldr	r2, [sp, #8]
    30b0:	4613      	mov	r3, r2
    30b2:	009b      	lsls	r3, r3, #2
    30b4:	4413      	add	r3, r2
    30b6:	009b      	lsls	r3, r3, #2
    30b8:	440b      	add	r3, r1
    30ba:	3304      	adds	r3, #4
    30bc:	6819      	ldr	r1, [r3, #0]
    30be:	9a03      	ldr	r2, [sp, #12]
    30c0:	4613      	mov	r3, r2
    30c2:	009b      	lsls	r3, r3, #2
    30c4:	4413      	add	r3, r2
    30c6:	009b      	lsls	r3, r3, #2
    30c8:	3328      	adds	r3, #40	; 0x28
    30ca:	9a01      	ldr	r2, [sp, #4]
    30cc:	4413      	add	r3, r2
    30ce:	3304      	adds	r3, #4
    30d0:	4618      	mov	r0, r3
    30d2:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    30d4:	9b03      	ldr	r3, [sp, #12]
    30d6:	3301      	adds	r3, #1
    30d8:	9303      	str	r3, [sp, #12]
    30da:	9b01      	ldr	r3, [sp, #4]
    30dc:	7a5b      	ldrb	r3, [r3, #9]
    30de:	461a      	mov	r2, r3
    30e0:	9b03      	ldr	r3, [sp, #12]
    30e2:	4293      	cmp	r3, r2
    30e4:	d3ce      	bcc.n	3084 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    30e6:	9801      	ldr	r0, [sp, #4]
    30e8:	f7ff fdb0 	bl	2c4c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    30ec:	2300      	movs	r3, #0
    30ee:	9303      	str	r3, [sp, #12]
    30f0:	e028      	b.n	3144 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    30f2:	9901      	ldr	r1, [sp, #4]
    30f4:	9a03      	ldr	r2, [sp, #12]
    30f6:	4613      	mov	r3, r2
    30f8:	009b      	lsls	r3, r3, #2
    30fa:	4413      	add	r3, r2
    30fc:	009b      	lsls	r3, r3, #2
    30fe:	440b      	add	r3, r1
    3100:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    3104:	681a      	ldr	r2, [r3, #0]
    3106:	4945      	ldr	r1, [pc, #276]	; (321c <Clock_Ip_InitClock+0x288>)
    3108:	4613      	mov	r3, r2
    310a:	00db      	lsls	r3, r3, #3
    310c:	4413      	add	r3, r2
    310e:	440b      	add	r3, r1
    3110:	3301      	adds	r3, #1
    3112:	781b      	ldrb	r3, [r3, #0]
    3114:	461a      	mov	r2, r3
    3116:	4b48      	ldr	r3, [pc, #288]	; (3238 <Clock_Ip_InitClock+0x2a4>)
    3118:	5c9b      	ldrb	r3, [r3, r2]
    311a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    311c:	4a47      	ldr	r2, [pc, #284]	; (323c <Clock_Ip_InitClock+0x2a8>)
    311e:	9b02      	ldr	r3, [sp, #8]
    3120:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    3124:	9a03      	ldr	r2, [sp, #12]
    3126:	4613      	mov	r3, r2
    3128:	009b      	lsls	r3, r3, #2
    312a:	4413      	add	r3, r2
    312c:	009b      	lsls	r3, r3, #2
    312e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    3132:	9a01      	ldr	r2, [sp, #4]
    3134:	4413      	add	r3, r2
    3136:	3304      	adds	r3, #4
    3138:	9903      	ldr	r1, [sp, #12]
    313a:	4618      	mov	r0, r3
    313c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    313e:	9b03      	ldr	r3, [sp, #12]
    3140:	3301      	adds	r3, #1
    3142:	9303      	str	r3, [sp, #12]
    3144:	9b01      	ldr	r3, [sp, #4]
    3146:	7c5b      	ldrb	r3, [r3, #17]
    3148:	461a      	mov	r2, r3
    314a:	9b03      	ldr	r3, [sp, #12]
    314c:	4293      	cmp	r3, r2
    314e:	d3d0      	bcc.n	30f2 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3150:	2300      	movs	r3, #0
    3152:	9303      	str	r3, [sp, #12]
    3154:	e026      	b.n	31a4 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    3156:	9901      	ldr	r1, [sp, #4]
    3158:	9a03      	ldr	r2, [sp, #12]
    315a:	4613      	mov	r3, r2
    315c:	005b      	lsls	r3, r3, #1
    315e:	4413      	add	r3, r2
    3160:	009b      	lsls	r3, r3, #2
    3162:	440b      	add	r3, r1
    3164:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3168:	681a      	ldr	r2, [r3, #0]
    316a:	492c      	ldr	r1, [pc, #176]	; (321c <Clock_Ip_InitClock+0x288>)
    316c:	4613      	mov	r3, r2
    316e:	00db      	lsls	r3, r3, #3
    3170:	4413      	add	r3, r2
    3172:	440b      	add	r3, r1
    3174:	3301      	adds	r3, #1
    3176:	781b      	ldrb	r3, [r3, #0]
    3178:	461a      	mov	r2, r3
    317a:	4b31      	ldr	r3, [pc, #196]	; (3240 <Clock_Ip_InitClock+0x2ac>)
    317c:	5c9b      	ldrb	r3, [r3, r2]
    317e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    3180:	4a30      	ldr	r2, [pc, #192]	; (3244 <Clock_Ip_InitClock+0x2b0>)
    3182:	9b02      	ldr	r3, [sp, #8]
    3184:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    3188:	9a03      	ldr	r2, [sp, #12]
    318a:	4613      	mov	r3, r2
    318c:	005b      	lsls	r3, r3, #1
    318e:	4413      	add	r3, r2
    3190:	009b      	lsls	r3, r3, #2
    3192:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3196:	9a01      	ldr	r2, [sp, #4]
    3198:	4413      	add	r3, r2
    319a:	4618      	mov	r0, r3
    319c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    319e:	9b03      	ldr	r3, [sp, #12]
    31a0:	3301      	adds	r3, #1
    31a2:	9303      	str	r3, [sp, #12]
    31a4:	9b01      	ldr	r3, [sp, #4]
    31a6:	7b5b      	ldrb	r3, [r3, #13]
    31a8:	461a      	mov	r2, r3
    31aa:	9b03      	ldr	r3, [sp, #12]
    31ac:	4293      	cmp	r3, r2
    31ae:	d3d2      	bcc.n	3156 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    31b0:	2300      	movs	r3, #0
    31b2:	9303      	str	r3, [sp, #12]
    31b4:	e026      	b.n	3204 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    31b6:	9901      	ldr	r1, [sp, #4]
    31b8:	9a03      	ldr	r2, [sp, #12]
    31ba:	4613      	mov	r3, r2
    31bc:	005b      	lsls	r3, r3, #1
    31be:	4413      	add	r3, r2
    31c0:	009b      	lsls	r3, r3, #2
    31c2:	440b      	add	r3, r1
    31c4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    31c8:	681a      	ldr	r2, [r3, #0]
    31ca:	4914      	ldr	r1, [pc, #80]	; (321c <Clock_Ip_InitClock+0x288>)
    31cc:	4613      	mov	r3, r2
    31ce:	00db      	lsls	r3, r3, #3
    31d0:	4413      	add	r3, r2
    31d2:	440b      	add	r3, r1
    31d4:	3301      	adds	r3, #1
    31d6:	781b      	ldrb	r3, [r3, #0]
    31d8:	461a      	mov	r2, r3
    31da:	4b1b      	ldr	r3, [pc, #108]	; (3248 <Clock_Ip_InitClock+0x2b4>)
    31dc:	5c9b      	ldrb	r3, [r3, r2]
    31de:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    31e0:	4a1a      	ldr	r2, [pc, #104]	; (324c <Clock_Ip_InitClock+0x2b8>)
    31e2:	9b02      	ldr	r3, [sp, #8]
    31e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    31e8:	9a03      	ldr	r2, [sp, #12]
    31ea:	4613      	mov	r3, r2
    31ec:	005b      	lsls	r3, r3, #1
    31ee:	4413      	add	r3, r2
    31f0:	009b      	lsls	r3, r3, #2
    31f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    31f6:	9a01      	ldr	r2, [sp, #4]
    31f8:	4413      	add	r3, r2
    31fa:	4618      	mov	r0, r3
    31fc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    31fe:	9b03      	ldr	r3, [sp, #12]
    3200:	3301      	adds	r3, #1
    3202:	9303      	str	r3, [sp, #12]
    3204:	9b01      	ldr	r3, [sp, #4]
    3206:	7b1b      	ldrb	r3, [r3, #12]
    3208:	461a      	mov	r2, r3
    320a:	9b03      	ldr	r3, [sp, #12]
    320c:	4293      	cmp	r3, r2
    320e:	d3d2      	bcc.n	31b6 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3210:	2300      	movs	r3, #0
    3212:	9303      	str	r3, [sp, #12]
    3214:	e044      	b.n	32a0 <Clock_Ip_InitClock+0x30c>
    3216:	bf00      	nop
    3218:	1fff8b78 	.word	0x1fff8b78
    321c:	000198a0 	.word	0x000198a0
    3220:	00019890 	.word	0x00019890
    3224:	00019e9c 	.word	0x00019e9c
    3228:	00019830 	.word	0x00019830
    322c:	00019e60 	.word	0x00019e60
    3230:	00019820 	.word	0x00019820
    3234:	00019df4 	.word	0x00019df4
    3238:	00019880 	.word	0x00019880
    323c:	00019ed4 	.word	0x00019ed4
    3240:	00019810 	.word	0x00019810
    3244:	00019dec 	.word	0x00019dec
    3248:	00019800 	.word	0x00019800
    324c:	00019db0 	.word	0x00019db0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    3250:	9901      	ldr	r1, [sp, #4]
    3252:	9a03      	ldr	r2, [sp, #12]
    3254:	4613      	mov	r3, r2
    3256:	005b      	lsls	r3, r3, #1
    3258:	4413      	add	r3, r2
    325a:	009b      	lsls	r3, r3, #2
    325c:	440b      	add	r3, r1
    325e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3262:	681a      	ldr	r2, [r3, #0]
    3264:	49ac      	ldr	r1, [pc, #688]	; (3518 <Clock_Ip_InitClock+0x584>)
    3266:	4613      	mov	r3, r2
    3268:	00db      	lsls	r3, r3, #3
    326a:	4413      	add	r3, r2
    326c:	440b      	add	r3, r1
    326e:	3301      	adds	r3, #1
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	461a      	mov	r2, r3
    3274:	4ba9      	ldr	r3, [pc, #676]	; (351c <Clock_Ip_InitClock+0x588>)
    3276:	5c9b      	ldrb	r3, [r3, r2]
    3278:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    327a:	4aa9      	ldr	r2, [pc, #676]	; (3520 <Clock_Ip_InitClock+0x58c>)
    327c:	9b02      	ldr	r3, [sp, #8]
    327e:	00db      	lsls	r3, r3, #3
    3280:	4413      	add	r3, r2
    3282:	6859      	ldr	r1, [r3, #4]
    3284:	9a03      	ldr	r2, [sp, #12]
    3286:	4613      	mov	r3, r2
    3288:	005b      	lsls	r3, r3, #1
    328a:	4413      	add	r3, r2
    328c:	009b      	lsls	r3, r3, #2
    328e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3292:	9a01      	ldr	r2, [sp, #4]
    3294:	4413      	add	r3, r2
    3296:	4618      	mov	r0, r3
    3298:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    329a:	9b03      	ldr	r3, [sp, #12]
    329c:	3301      	adds	r3, #1
    329e:	9303      	str	r3, [sp, #12]
    32a0:	9b01      	ldr	r3, [sp, #4]
    32a2:	7b5b      	ldrb	r3, [r3, #13]
    32a4:	461a      	mov	r2, r3
    32a6:	9b03      	ldr	r3, [sp, #12]
    32a8:	4293      	cmp	r3, r2
    32aa:	d3d1      	bcc.n	3250 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    32ac:	2300      	movs	r3, #0
    32ae:	9303      	str	r3, [sp, #12]
    32b0:	e029      	b.n	3306 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    32b2:	9901      	ldr	r1, [sp, #4]
    32b4:	9a03      	ldr	r2, [sp, #12]
    32b6:	4613      	mov	r3, r2
    32b8:	009b      	lsls	r3, r3, #2
    32ba:	4413      	add	r3, r2
    32bc:	00db      	lsls	r3, r3, #3
    32be:	440b      	add	r3, r1
    32c0:	3340      	adds	r3, #64	; 0x40
    32c2:	681a      	ldr	r2, [r3, #0]
    32c4:	4994      	ldr	r1, [pc, #592]	; (3518 <Clock_Ip_InitClock+0x584>)
    32c6:	4613      	mov	r3, r2
    32c8:	00db      	lsls	r3, r3, #3
    32ca:	4413      	add	r3, r2
    32cc:	440b      	add	r3, r1
    32ce:	3301      	adds	r3, #1
    32d0:	781b      	ldrb	r3, [r3, #0]
    32d2:	461a      	mov	r2, r3
    32d4:	4b93      	ldr	r3, [pc, #588]	; (3524 <Clock_Ip_InitClock+0x590>)
    32d6:	5c9b      	ldrb	r3, [r3, r2]
    32d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    32da:	4993      	ldr	r1, [pc, #588]	; (3528 <Clock_Ip_InitClock+0x594>)
    32dc:	9a02      	ldr	r2, [sp, #8]
    32de:	4613      	mov	r3, r2
    32e0:	009b      	lsls	r3, r3, #2
    32e2:	4413      	add	r3, r2
    32e4:	009b      	lsls	r3, r3, #2
    32e6:	440b      	add	r3, r1
    32e8:	3304      	adds	r3, #4
    32ea:	6819      	ldr	r1, [r3, #0]
    32ec:	9a03      	ldr	r2, [sp, #12]
    32ee:	4613      	mov	r3, r2
    32f0:	009b      	lsls	r3, r3, #2
    32f2:	4413      	add	r3, r2
    32f4:	00db      	lsls	r3, r3, #3
    32f6:	3340      	adds	r3, #64	; 0x40
    32f8:	9a01      	ldr	r2, [sp, #4]
    32fa:	4413      	add	r3, r2
    32fc:	4618      	mov	r0, r3
    32fe:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3300:	9b03      	ldr	r3, [sp, #12]
    3302:	3301      	adds	r3, #1
    3304:	9303      	str	r3, [sp, #12]
    3306:	9b01      	ldr	r3, [sp, #4]
    3308:	7a9b      	ldrb	r3, [r3, #10]
    330a:	461a      	mov	r2, r3
    330c:	9b03      	ldr	r3, [sp, #12]
    330e:	4293      	cmp	r3, r2
    3310:	d3cf      	bcc.n	32b2 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    3312:	2300      	movs	r3, #0
    3314:	9303      	str	r3, [sp, #12]
    3316:	e029      	b.n	336c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3318:	9901      	ldr	r1, [sp, #4]
    331a:	9a03      	ldr	r2, [sp, #12]
    331c:	4613      	mov	r3, r2
    331e:	009b      	lsls	r3, r3, #2
    3320:	4413      	add	r3, r2
    3322:	009b      	lsls	r3, r3, #2
    3324:	440b      	add	r3, r1
    3326:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    332a:	681a      	ldr	r2, [r3, #0]
    332c:	497a      	ldr	r1, [pc, #488]	; (3518 <Clock_Ip_InitClock+0x584>)
    332e:	4613      	mov	r3, r2
    3330:	00db      	lsls	r3, r3, #3
    3332:	4413      	add	r3, r2
    3334:	440b      	add	r3, r1
    3336:	3301      	adds	r3, #1
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	461a      	mov	r2, r3
    333c:	4b7b      	ldr	r3, [pc, #492]	; (352c <Clock_Ip_InitClock+0x598>)
    333e:	5c9b      	ldrb	r3, [r3, r2]
    3340:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    3342:	4a7b      	ldr	r2, [pc, #492]	; (3530 <Clock_Ip_InitClock+0x59c>)
    3344:	9b02      	ldr	r3, [sp, #8]
    3346:	011b      	lsls	r3, r3, #4
    3348:	4413      	add	r3, r2
    334a:	3304      	adds	r3, #4
    334c:	681c      	ldr	r4, [r3, #0]
    334e:	9a03      	ldr	r2, [sp, #12]
    3350:	4613      	mov	r3, r2
    3352:	009b      	lsls	r3, r3, #2
    3354:	4413      	add	r3, r2
    3356:	009b      	lsls	r3, r3, #2
    3358:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    335c:	9a01      	ldr	r2, [sp, #4]
    335e:	4413      	add	r3, r2
    3360:	9903      	ldr	r1, [sp, #12]
    3362:	4618      	mov	r0, r3
    3364:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    3366:	9b03      	ldr	r3, [sp, #12]
    3368:	3301      	adds	r3, #1
    336a:	9303      	str	r3, [sp, #12]
    336c:	9b01      	ldr	r3, [sp, #4]
    336e:	7c9b      	ldrb	r3, [r3, #18]
    3370:	461a      	mov	r2, r3
    3372:	9b03      	ldr	r3, [sp, #12]
    3374:	4293      	cmp	r3, r2
    3376:	d3cf      	bcc.n	3318 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    3378:	2300      	movs	r3, #0
    337a:	9303      	str	r3, [sp, #12]
    337c:	e02a      	b.n	33d4 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    337e:	9901      	ldr	r1, [sp, #4]
    3380:	9a03      	ldr	r2, [sp, #12]
    3382:	4613      	mov	r3, r2
    3384:	009b      	lsls	r3, r3, #2
    3386:	4413      	add	r3, r2
    3388:	009b      	lsls	r3, r3, #2
    338a:	440b      	add	r3, r1
    338c:	332c      	adds	r3, #44	; 0x2c
    338e:	681a      	ldr	r2, [r3, #0]
    3390:	4961      	ldr	r1, [pc, #388]	; (3518 <Clock_Ip_InitClock+0x584>)
    3392:	4613      	mov	r3, r2
    3394:	00db      	lsls	r3, r3, #3
    3396:	4413      	add	r3, r2
    3398:	440b      	add	r3, r1
    339a:	3301      	adds	r3, #1
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	461a      	mov	r2, r3
    33a0:	4b64      	ldr	r3, [pc, #400]	; (3534 <Clock_Ip_InitClock+0x5a0>)
    33a2:	5c9b      	ldrb	r3, [r3, r2]
    33a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    33a6:	4964      	ldr	r1, [pc, #400]	; (3538 <Clock_Ip_InitClock+0x5a4>)
    33a8:	9a02      	ldr	r2, [sp, #8]
    33aa:	4613      	mov	r3, r2
    33ac:	009b      	lsls	r3, r3, #2
    33ae:	4413      	add	r3, r2
    33b0:	009b      	lsls	r3, r3, #2
    33b2:	440b      	add	r3, r1
    33b4:	3308      	adds	r3, #8
    33b6:	6819      	ldr	r1, [r3, #0]
    33b8:	9a03      	ldr	r2, [sp, #12]
    33ba:	4613      	mov	r3, r2
    33bc:	009b      	lsls	r3, r3, #2
    33be:	4413      	add	r3, r2
    33c0:	009b      	lsls	r3, r3, #2
    33c2:	3328      	adds	r3, #40	; 0x28
    33c4:	9a01      	ldr	r2, [sp, #4]
    33c6:	4413      	add	r3, r2
    33c8:	3304      	adds	r3, #4
    33ca:	4618      	mov	r0, r3
    33cc:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    33ce:	9b03      	ldr	r3, [sp, #12]
    33d0:	3301      	adds	r3, #1
    33d2:	9303      	str	r3, [sp, #12]
    33d4:	9b01      	ldr	r3, [sp, #4]
    33d6:	7a5b      	ldrb	r3, [r3, #9]
    33d8:	461a      	mov	r2, r3
    33da:	9b03      	ldr	r3, [sp, #12]
    33dc:	4293      	cmp	r3, r2
    33de:	d3ce      	bcc.n	337e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    33e0:	2300      	movs	r3, #0
    33e2:	9303      	str	r3, [sp, #12]
    33e4:	e029      	b.n	343a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    33e6:	9901      	ldr	r1, [sp, #4]
    33e8:	9a03      	ldr	r2, [sp, #12]
    33ea:	4613      	mov	r3, r2
    33ec:	009b      	lsls	r3, r3, #2
    33ee:	4413      	add	r3, r2
    33f0:	00db      	lsls	r3, r3, #3
    33f2:	440b      	add	r3, r1
    33f4:	3340      	adds	r3, #64	; 0x40
    33f6:	681a      	ldr	r2, [r3, #0]
    33f8:	4947      	ldr	r1, [pc, #284]	; (3518 <Clock_Ip_InitClock+0x584>)
    33fa:	4613      	mov	r3, r2
    33fc:	00db      	lsls	r3, r3, #3
    33fe:	4413      	add	r3, r2
    3400:	440b      	add	r3, r1
    3402:	3301      	adds	r3, #1
    3404:	781b      	ldrb	r3, [r3, #0]
    3406:	461a      	mov	r2, r3
    3408:	4b46      	ldr	r3, [pc, #280]	; (3524 <Clock_Ip_InitClock+0x590>)
    340a:	5c9b      	ldrb	r3, [r3, r2]
    340c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    340e:	4946      	ldr	r1, [pc, #280]	; (3528 <Clock_Ip_InitClock+0x594>)
    3410:	9a02      	ldr	r2, [sp, #8]
    3412:	4613      	mov	r3, r2
    3414:	009b      	lsls	r3, r3, #2
    3416:	4413      	add	r3, r2
    3418:	009b      	lsls	r3, r3, #2
    341a:	440b      	add	r3, r1
    341c:	330c      	adds	r3, #12
    341e:	6819      	ldr	r1, [r3, #0]
    3420:	9a03      	ldr	r2, [sp, #12]
    3422:	4613      	mov	r3, r2
    3424:	009b      	lsls	r3, r3, #2
    3426:	4413      	add	r3, r2
    3428:	00db      	lsls	r3, r3, #3
    342a:	3340      	adds	r3, #64	; 0x40
    342c:	9a01      	ldr	r2, [sp, #4]
    342e:	4413      	add	r3, r2
    3430:	4618      	mov	r0, r3
    3432:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    3434:	9b03      	ldr	r3, [sp, #12]
    3436:	3301      	adds	r3, #1
    3438:	9303      	str	r3, [sp, #12]
    343a:	9b01      	ldr	r3, [sp, #4]
    343c:	7a9b      	ldrb	r3, [r3, #10]
    343e:	461a      	mov	r2, r3
    3440:	9b03      	ldr	r3, [sp, #12]
    3442:	4293      	cmp	r3, r2
    3444:	d3cf      	bcc.n	33e6 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    3446:	2300      	movs	r3, #0
    3448:	9303      	str	r3, [sp, #12]
    344a:	e025      	b.n	3498 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    344c:	9a01      	ldr	r2, [sp, #4]
    344e:	9b03      	ldr	r3, [sp, #12]
    3450:	3324      	adds	r3, #36	; 0x24
    3452:	011b      	lsls	r3, r3, #4
    3454:	4413      	add	r3, r2
    3456:	3304      	adds	r3, #4
    3458:	681a      	ldr	r2, [r3, #0]
    345a:	492f      	ldr	r1, [pc, #188]	; (3518 <Clock_Ip_InitClock+0x584>)
    345c:	4613      	mov	r3, r2
    345e:	00db      	lsls	r3, r3, #3
    3460:	4413      	add	r3, r2
    3462:	440b      	add	r3, r1
    3464:	3301      	adds	r3, #1
    3466:	781b      	ldrb	r3, [r3, #0]
    3468:	461a      	mov	r2, r3
    346a:	4b34      	ldr	r3, [pc, #208]	; (353c <Clock_Ip_InitClock+0x5a8>)
    346c:	5c9b      	ldrb	r3, [r3, r2]
    346e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    3470:	4933      	ldr	r1, [pc, #204]	; (3540 <Clock_Ip_InitClock+0x5ac>)
    3472:	9a02      	ldr	r2, [sp, #8]
    3474:	4613      	mov	r3, r2
    3476:	005b      	lsls	r3, r3, #1
    3478:	4413      	add	r3, r2
    347a:	009b      	lsls	r3, r3, #2
    347c:	440b      	add	r3, r1
    347e:	3304      	adds	r3, #4
    3480:	681b      	ldr	r3, [r3, #0]
    3482:	9a03      	ldr	r2, [sp, #12]
    3484:	3224      	adds	r2, #36	; 0x24
    3486:	0112      	lsls	r2, r2, #4
    3488:	9901      	ldr	r1, [sp, #4]
    348a:	440a      	add	r2, r1
    348c:	3204      	adds	r2, #4
    348e:	4610      	mov	r0, r2
    3490:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    3492:	9b03      	ldr	r3, [sp, #12]
    3494:	3301      	adds	r3, #1
    3496:	9303      	str	r3, [sp, #12]
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	7b9b      	ldrb	r3, [r3, #14]
    349c:	461a      	mov	r2, r3
    349e:	9b03      	ldr	r3, [sp, #12]
    34a0:	4293      	cmp	r3, r2
    34a2:	d3d3      	bcc.n	344c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    34a4:	4b27      	ldr	r3, [pc, #156]	; (3544 <Clock_Ip_InitClock+0x5b0>)
    34a6:	2200      	movs	r2, #0
    34a8:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    34aa:	4b26      	ldr	r3, [pc, #152]	; (3544 <Clock_Ip_InitClock+0x5b0>)
    34ac:	2200      	movs	r2, #0
    34ae:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    34b0:	4b24      	ldr	r3, [pc, #144]	; (3544 <Clock_Ip_InitClock+0x5b0>)
    34b2:	2201      	movs	r2, #1
    34b4:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    34b6:	4b23      	ldr	r3, [pc, #140]	; (3544 <Clock_Ip_InitClock+0x5b0>)
    34b8:	2200      	movs	r2, #0
    34ba:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    34bc:	f000 fa9c 	bl	39f8 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    34c0:	2300      	movs	r3, #0
    34c2:	9303      	str	r3, [sp, #12]
    34c4:	e04c      	b.n	3560 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    34c6:	9a01      	ldr	r2, [sp, #4]
    34c8:	9b03      	ldr	r3, [sp, #12]
    34ca:	330d      	adds	r3, #13
    34cc:	00db      	lsls	r3, r3, #3
    34ce:	4413      	add	r3, r2
    34d0:	685b      	ldr	r3, [r3, #4]
    34d2:	4a1d      	ldr	r2, [pc, #116]	; (3548 <Clock_Ip_InitClock+0x5b4>)
    34d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    34d8:	2b03      	cmp	r3, #3
    34da:	d03b      	beq.n	3554 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    34dc:	9b01      	ldr	r3, [sp, #4]
    34de:	9a03      	ldr	r2, [sp, #12]
    34e0:	320d      	adds	r2, #13
    34e2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    34e6:	490c      	ldr	r1, [pc, #48]	; (3518 <Clock_Ip_InitClock+0x584>)
    34e8:	4613      	mov	r3, r2
    34ea:	00db      	lsls	r3, r3, #3
    34ec:	4413      	add	r3, r2
    34ee:	440b      	add	r3, r1
    34f0:	3301      	adds	r3, #1
    34f2:	781b      	ldrb	r3, [r3, #0]
    34f4:	461a      	mov	r2, r3
    34f6:	4b15      	ldr	r3, [pc, #84]	; (354c <Clock_Ip_InitClock+0x5b8>)
    34f8:	5c9b      	ldrb	r3, [r3, r2]
    34fa:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    34fc:	4a14      	ldr	r2, [pc, #80]	; (3550 <Clock_Ip_InitClock+0x5bc>)
    34fe:	9b02      	ldr	r3, [sp, #8]
    3500:	00db      	lsls	r3, r3, #3
    3502:	4413      	add	r3, r2
    3504:	685b      	ldr	r3, [r3, #4]
    3506:	9a03      	ldr	r2, [sp, #12]
    3508:	320d      	adds	r2, #13
    350a:	00d2      	lsls	r2, r2, #3
    350c:	9901      	ldr	r1, [sp, #4]
    350e:	440a      	add	r2, r1
    3510:	4610      	mov	r0, r2
    3512:	4798      	blx	r3
    3514:	e021      	b.n	355a <Clock_Ip_InitClock+0x5c6>
    3516:	bf00      	nop
    3518:	000198a0 	.word	0x000198a0
    351c:	00019810 	.word	0x00019810
    3520:	00019dec 	.word	0x00019dec
    3524:	00019860 	.word	0x00019860
    3528:	00019eac 	.word	0x00019eac
    352c:	00019890 	.word	0x00019890
    3530:	00019e9c 	.word	0x00019e9c
    3534:	00019820 	.word	0x00019820
    3538:	00019df4 	.word	0x00019df4
    353c:	00019850 	.word	0x00019850
    3540:	00019e1c 	.word	0x00019e1c
    3544:	1fff8b80 	.word	0x1fff8b80
    3548:	00019cec 	.word	0x00019cec
    354c:	00019870 	.word	0x00019870
    3550:	00019ed8 	.word	0x00019ed8
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    3554:	4b3a      	ldr	r3, [pc, #232]	; (3640 <Clock_Ip_InitClock+0x6ac>)
    3556:	2201      	movs	r2, #1
    3558:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    355a:	9b03      	ldr	r3, [sp, #12]
    355c:	3301      	adds	r3, #1
    355e:	9303      	str	r3, [sp, #12]
    3560:	9b01      	ldr	r3, [sp, #4]
    3562:	7adb      	ldrb	r3, [r3, #11]
    3564:	461a      	mov	r2, r3
    3566:	9b03      	ldr	r3, [sp, #12]
    3568:	4293      	cmp	r3, r2
    356a:	d3ac      	bcc.n	34c6 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    356c:	4b34      	ldr	r3, [pc, #208]	; (3640 <Clock_Ip_InitClock+0x6ac>)
    356e:	781b      	ldrb	r3, [r3, #0]
    3570:	f083 0301 	eor.w	r3, r3, #1
    3574:	b2db      	uxtb	r3, r3
    3576:	2b00      	cmp	r3, #0
    3578:	d05e      	beq.n	3638 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    357a:	2300      	movs	r3, #0
    357c:	9303      	str	r3, [sp, #12]
    357e:	e01f      	b.n	35c0 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3580:	9a01      	ldr	r2, [sp, #4]
    3582:	9b03      	ldr	r3, [sp, #12]
    3584:	334e      	adds	r3, #78	; 0x4e
    3586:	00db      	lsls	r3, r3, #3
    3588:	4413      	add	r3, r2
    358a:	685a      	ldr	r2, [r3, #4]
    358c:	492d      	ldr	r1, [pc, #180]	; (3644 <Clock_Ip_InitClock+0x6b0>)
    358e:	4613      	mov	r3, r2
    3590:	00db      	lsls	r3, r3, #3
    3592:	4413      	add	r3, r2
    3594:	440b      	add	r3, r1
    3596:	3301      	adds	r3, #1
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	461a      	mov	r2, r3
    359c:	4b2a      	ldr	r3, [pc, #168]	; (3648 <Clock_Ip_InitClock+0x6b4>)
    359e:	5c9b      	ldrb	r3, [r3, r2]
    35a0:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    35a2:	4a2a      	ldr	r2, [pc, #168]	; (364c <Clock_Ip_InitClock+0x6b8>)
    35a4:	9b02      	ldr	r3, [sp, #8]
    35a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    35aa:	9a03      	ldr	r2, [sp, #12]
    35ac:	324e      	adds	r2, #78	; 0x4e
    35ae:	00d2      	lsls	r2, r2, #3
    35b0:	9901      	ldr	r1, [sp, #4]
    35b2:	440a      	add	r2, r1
    35b4:	3204      	adds	r2, #4
    35b6:	4610      	mov	r0, r2
    35b8:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    35ba:	9b03      	ldr	r3, [sp, #12]
    35bc:	3301      	adds	r3, #1
    35be:	9303      	str	r3, [sp, #12]
    35c0:	9b01      	ldr	r3, [sp, #4]
    35c2:	7c1b      	ldrb	r3, [r3, #16]
    35c4:	461a      	mov	r2, r3
    35c6:	9b03      	ldr	r3, [sp, #12]
    35c8:	4293      	cmp	r3, r2
    35ca:	d3d9      	bcc.n	3580 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    35cc:	2300      	movs	r3, #0
    35ce:	9303      	str	r3, [sp, #12]
    35d0:	e028      	b.n	3624 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    35d2:	9901      	ldr	r1, [sp, #4]
    35d4:	9a03      	ldr	r2, [sp, #12]
    35d6:	4613      	mov	r3, r2
    35d8:	009b      	lsls	r3, r3, #2
    35da:	4413      	add	r3, r2
    35dc:	009b      	lsls	r3, r3, #2
    35de:	440b      	add	r3, r1
    35e0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    35e4:	681a      	ldr	r2, [r3, #0]
    35e6:	4917      	ldr	r1, [pc, #92]	; (3644 <Clock_Ip_InitClock+0x6b0>)
    35e8:	4613      	mov	r3, r2
    35ea:	00db      	lsls	r3, r3, #3
    35ec:	4413      	add	r3, r2
    35ee:	440b      	add	r3, r1
    35f0:	3301      	adds	r3, #1
    35f2:	781b      	ldrb	r3, [r3, #0]
    35f4:	461a      	mov	r2, r3
    35f6:	4b16      	ldr	r3, [pc, #88]	; (3650 <Clock_Ip_InitClock+0x6bc>)
    35f8:	5c9b      	ldrb	r3, [r3, r2]
    35fa:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    35fc:	4a15      	ldr	r2, [pc, #84]	; (3654 <Clock_Ip_InitClock+0x6c0>)
    35fe:	9b02      	ldr	r3, [sp, #8]
    3600:	011b      	lsls	r3, r3, #4
    3602:	4413      	add	r3, r2
    3604:	330c      	adds	r3, #12
    3606:	6819      	ldr	r1, [r3, #0]
    3608:	9a03      	ldr	r2, [sp, #12]
    360a:	4613      	mov	r3, r2
    360c:	009b      	lsls	r3, r3, #2
    360e:	4413      	add	r3, r2
    3610:	009b      	lsls	r3, r3, #2
    3612:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3616:	9a01      	ldr	r2, [sp, #4]
    3618:	4413      	add	r3, r2
    361a:	4618      	mov	r0, r3
    361c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    361e:	9b03      	ldr	r3, [sp, #12]
    3620:	3301      	adds	r3, #1
    3622:	9303      	str	r3, [sp, #12]
    3624:	9b01      	ldr	r3, [sp, #4]
    3626:	7c9b      	ldrb	r3, [r3, #18]
    3628:	461a      	mov	r2, r3
    362a:	9b03      	ldr	r3, [sp, #12]
    362c:	4293      	cmp	r3, r2
    362e:	d3d0      	bcc.n	35d2 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3630:	2104      	movs	r1, #4
    3632:	9801      	ldr	r0, [sp, #4]
    3634:	f002 ff48 	bl	64c8 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    3638:	bf00      	nop
    363a:	b004      	add	sp, #16
    363c:	bd10      	pop	{r4, pc}
    363e:	bf00      	nop
    3640:	1fff8b80 	.word	0x1fff8b80
    3644:	000198a0 	.word	0x000198a0
    3648:	00019840 	.word	0x00019840
    364c:	00019e28 	.word	0x00019e28
    3650:	00019890 	.word	0x00019890
    3654:	00019e9c 	.word	0x00019e9c

00003658 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    3658:	b500      	push	{lr}
    365a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    365c:	2302      	movs	r3, #2
    365e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3660:	2300      	movs	r3, #0
    3662:	9304      	str	r3, [sp, #16]
    3664:	e02c      	b.n	36c0 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    3666:	4a36      	ldr	r2, [pc, #216]	; (3740 <Clock_Ip_GetPllStatus+0xe8>)
    3668:	9b04      	ldr	r3, [sp, #16]
    366a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    366e:	4935      	ldr	r1, [pc, #212]	; (3744 <Clock_Ip_GetPllStatus+0xec>)
    3670:	4613      	mov	r3, r2
    3672:	00db      	lsls	r3, r3, #3
    3674:	4413      	add	r3, r2
    3676:	440b      	add	r3, r1
    3678:	3301      	adds	r3, #1
    367a:	781b      	ldrb	r3, [r3, #0]
    367c:	461a      	mov	r2, r3
    367e:	4b32      	ldr	r3, [pc, #200]	; (3748 <Clock_Ip_GetPllStatus+0xf0>)
    3680:	5c9b      	ldrb	r3, [r3, r2]
    3682:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3684:	4931      	ldr	r1, [pc, #196]	; (374c <Clock_Ip_GetPllStatus+0xf4>)
    3686:	9a03      	ldr	r2, [sp, #12]
    3688:	4613      	mov	r3, r2
    368a:	009b      	lsls	r3, r3, #2
    368c:	4413      	add	r3, r2
    368e:	009b      	lsls	r3, r3, #2
    3690:	440b      	add	r3, r1
    3692:	3308      	adds	r3, #8
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	492a      	ldr	r1, [pc, #168]	; (3740 <Clock_Ip_GetPllStatus+0xe8>)
    3698:	9a04      	ldr	r2, [sp, #16]
    369a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    369e:	4610      	mov	r0, r2
    36a0:	4798      	blx	r3
    36a2:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    36a4:	9b02      	ldr	r3, [sp, #8]
    36a6:	2b01      	cmp	r3, #1
    36a8:	d102      	bne.n	36b0 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    36aa:	2301      	movs	r3, #1
    36ac:	9305      	str	r3, [sp, #20]
            break;
    36ae:	e00d      	b.n	36cc <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    36b0:	9b02      	ldr	r3, [sp, #8]
    36b2:	2b02      	cmp	r3, #2
    36b4:	d101      	bne.n	36ba <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    36b6:	2300      	movs	r3, #0
    36b8:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    36ba:	9b04      	ldr	r3, [sp, #16]
    36bc:	3301      	adds	r3, #1
    36be:	9304      	str	r3, [sp, #16]
    36c0:	4b23      	ldr	r3, [pc, #140]	; (3750 <Clock_Ip_GetPllStatus+0xf8>)
    36c2:	789b      	ldrb	r3, [r3, #2]
    36c4:	461a      	mov	r2, r3
    36c6:	9b04      	ldr	r3, [sp, #16]
    36c8:	4293      	cmp	r3, r2
    36ca:	d3cc      	bcc.n	3666 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    36cc:	9b05      	ldr	r3, [sp, #20]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d130      	bne.n	3734 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    36d2:	2300      	movs	r3, #0
    36d4:	9304      	str	r3, [sp, #16]
    36d6:	e027      	b.n	3728 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    36d8:	4a1e      	ldr	r2, [pc, #120]	; (3754 <Clock_Ip_GetPllStatus+0xfc>)
    36da:	9b04      	ldr	r3, [sp, #16]
    36dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    36e0:	4918      	ldr	r1, [pc, #96]	; (3744 <Clock_Ip_GetPllStatus+0xec>)
    36e2:	4613      	mov	r3, r2
    36e4:	00db      	lsls	r3, r3, #3
    36e6:	4413      	add	r3, r2
    36e8:	440b      	add	r3, r1
    36ea:	3301      	adds	r3, #1
    36ec:	781b      	ldrb	r3, [r3, #0]
    36ee:	461a      	mov	r2, r3
    36f0:	4b19      	ldr	r3, [pc, #100]	; (3758 <Clock_Ip_GetPllStatus+0x100>)
    36f2:	5c9b      	ldrb	r3, [r3, r2]
    36f4:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    36f6:	4919      	ldr	r1, [pc, #100]	; (375c <Clock_Ip_GetPllStatus+0x104>)
    36f8:	9a03      	ldr	r2, [sp, #12]
    36fa:	4613      	mov	r3, r2
    36fc:	005b      	lsls	r3, r3, #1
    36fe:	4413      	add	r3, r2
    3700:	009b      	lsls	r3, r3, #2
    3702:	440b      	add	r3, r1
    3704:	3308      	adds	r3, #8
    3706:	681b      	ldr	r3, [r3, #0]
    3708:	4912      	ldr	r1, [pc, #72]	; (3754 <Clock_Ip_GetPllStatus+0xfc>)
    370a:	9a04      	ldr	r2, [sp, #16]
    370c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    3710:	4610      	mov	r0, r2
    3712:	4798      	blx	r3
    3714:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    3716:	9b01      	ldr	r3, [sp, #4]
    3718:	2b01      	cmp	r3, #1
    371a:	d102      	bne.n	3722 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    371c:	2301      	movs	r3, #1
    371e:	9305      	str	r3, [sp, #20]
                break;
    3720:	e008      	b.n	3734 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    3722:	9b04      	ldr	r3, [sp, #16]
    3724:	3301      	adds	r3, #1
    3726:	9304      	str	r3, [sp, #16]
    3728:	4b09      	ldr	r3, [pc, #36]	; (3750 <Clock_Ip_GetPllStatus+0xf8>)
    372a:	78db      	ldrb	r3, [r3, #3]
    372c:	461a      	mov	r2, r3
    372e:	9b04      	ldr	r3, [sp, #16]
    3730:	4293      	cmp	r3, r2
    3732:	d3d1      	bcc.n	36d8 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    3734:	9b05      	ldr	r3, [sp, #20]
}
    3736:	4618      	mov	r0, r3
    3738:	b007      	add	sp, #28
    373a:	f85d fb04 	ldr.w	pc, [sp], #4
    373e:	bf00      	nop
    3740:	00019da8 	.word	0x00019da8
    3744:	000198a0 	.word	0x000198a0
    3748:	00019860 	.word	0x00019860
    374c:	00019eac 	.word	0x00019eac
    3750:	1fff8b80 	.word	0x1fff8b80
    3754:	00019dac 	.word	0x00019dac
    3758:	00019850 	.word	0x00019850
    375c:	00019e1c 	.word	0x00019e1c

00003760 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    3760:	b500      	push	{lr}
    3762:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3764:	4b55      	ldr	r3, [pc, #340]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    3766:	681b      	ldr	r3, [r3, #0]
    3768:	2b00      	cmp	r3, #0
    376a:	f000 80a2 	beq.w	38b2 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    376e:	2300      	movs	r3, #0
    3770:	9301      	str	r3, [sp, #4]
    3772:	e02c      	b.n	37ce <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    3774:	4b51      	ldr	r3, [pc, #324]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    3776:	681a      	ldr	r2, [r3, #0]
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	330d      	adds	r3, #13
    377c:	00db      	lsls	r3, r3, #3
    377e:	4413      	add	r3, r2
    3780:	685b      	ldr	r3, [r3, #4]
    3782:	4a4f      	ldr	r2, [pc, #316]	; (38c0 <Clock_Ip_DistributePll+0x160>)
    3784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3788:	2b03      	cmp	r3, #3
    378a:	d11d      	bne.n	37c8 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    378c:	4b4b      	ldr	r3, [pc, #300]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	9a01      	ldr	r2, [sp, #4]
    3792:	320d      	adds	r2, #13
    3794:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3798:	494a      	ldr	r1, [pc, #296]	; (38c4 <Clock_Ip_DistributePll+0x164>)
    379a:	4613      	mov	r3, r2
    379c:	00db      	lsls	r3, r3, #3
    379e:	4413      	add	r3, r2
    37a0:	440b      	add	r3, r1
    37a2:	3301      	adds	r3, #1
    37a4:	781b      	ldrb	r3, [r3, #0]
    37a6:	461a      	mov	r2, r3
    37a8:	4b47      	ldr	r3, [pc, #284]	; (38c8 <Clock_Ip_DistributePll+0x168>)
    37aa:	5c9b      	ldrb	r3, [r3, r2]
    37ac:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    37ae:	4a47      	ldr	r2, [pc, #284]	; (38cc <Clock_Ip_DistributePll+0x16c>)
    37b0:	9b00      	ldr	r3, [sp, #0]
    37b2:	00db      	lsls	r3, r3, #3
    37b4:	4413      	add	r3, r2
    37b6:	685b      	ldr	r3, [r3, #4]
    37b8:	4a40      	ldr	r2, [pc, #256]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    37ba:	6811      	ldr	r1, [r2, #0]
    37bc:	9a01      	ldr	r2, [sp, #4]
    37be:	320d      	adds	r2, #13
    37c0:	00d2      	lsls	r2, r2, #3
    37c2:	440a      	add	r2, r1
    37c4:	4610      	mov	r0, r2
    37c6:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	3301      	adds	r3, #1
    37cc:	9301      	str	r3, [sp, #4]
    37ce:	4b3b      	ldr	r3, [pc, #236]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	7adb      	ldrb	r3, [r3, #11]
    37d4:	461a      	mov	r2, r3
    37d6:	9b01      	ldr	r3, [sp, #4]
    37d8:	4293      	cmp	r3, r2
    37da:	d3cb      	bcc.n	3774 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    37dc:	4b3c      	ldr	r3, [pc, #240]	; (38d0 <Clock_Ip_DistributePll+0x170>)
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d066      	beq.n	38b2 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    37e4:	2300      	movs	r3, #0
    37e6:	9301      	str	r3, [sp, #4]
    37e8:	e021      	b.n	382e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    37ea:	4b34      	ldr	r3, [pc, #208]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    37ec:	681a      	ldr	r2, [r3, #0]
    37ee:	9b01      	ldr	r3, [sp, #4]
    37f0:	334e      	adds	r3, #78	; 0x4e
    37f2:	00db      	lsls	r3, r3, #3
    37f4:	4413      	add	r3, r2
    37f6:	685a      	ldr	r2, [r3, #4]
    37f8:	4932      	ldr	r1, [pc, #200]	; (38c4 <Clock_Ip_DistributePll+0x164>)
    37fa:	4613      	mov	r3, r2
    37fc:	00db      	lsls	r3, r3, #3
    37fe:	4413      	add	r3, r2
    3800:	440b      	add	r3, r1
    3802:	3301      	adds	r3, #1
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	461a      	mov	r2, r3
    3808:	4b32      	ldr	r3, [pc, #200]	; (38d4 <Clock_Ip_DistributePll+0x174>)
    380a:	5c9b      	ldrb	r3, [r3, r2]
    380c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    380e:	4a32      	ldr	r2, [pc, #200]	; (38d8 <Clock_Ip_DistributePll+0x178>)
    3810:	9b00      	ldr	r3, [sp, #0]
    3812:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3816:	4a29      	ldr	r2, [pc, #164]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    3818:	6811      	ldr	r1, [r2, #0]
    381a:	9a01      	ldr	r2, [sp, #4]
    381c:	324e      	adds	r2, #78	; 0x4e
    381e:	00d2      	lsls	r2, r2, #3
    3820:	440a      	add	r2, r1
    3822:	3204      	adds	r2, #4
    3824:	4610      	mov	r0, r2
    3826:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	3301      	adds	r3, #1
    382c:	9301      	str	r3, [sp, #4]
    382e:	4b23      	ldr	r3, [pc, #140]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	7c1b      	ldrb	r3, [r3, #16]
    3834:	461a      	mov	r2, r3
    3836:	9b01      	ldr	r3, [sp, #4]
    3838:	4293      	cmp	r3, r2
    383a:	d3d6      	bcc.n	37ea <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    383c:	2300      	movs	r3, #0
    383e:	9301      	str	r3, [sp, #4]
    3840:	e02a      	b.n	3898 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3842:	4b1e      	ldr	r3, [pc, #120]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    3844:	6819      	ldr	r1, [r3, #0]
    3846:	9a01      	ldr	r2, [sp, #4]
    3848:	4613      	mov	r3, r2
    384a:	009b      	lsls	r3, r3, #2
    384c:	4413      	add	r3, r2
    384e:	009b      	lsls	r3, r3, #2
    3850:	440b      	add	r3, r1
    3852:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3856:	681a      	ldr	r2, [r3, #0]
    3858:	491a      	ldr	r1, [pc, #104]	; (38c4 <Clock_Ip_DistributePll+0x164>)
    385a:	4613      	mov	r3, r2
    385c:	00db      	lsls	r3, r3, #3
    385e:	4413      	add	r3, r2
    3860:	440b      	add	r3, r1
    3862:	3301      	adds	r3, #1
    3864:	781b      	ldrb	r3, [r3, #0]
    3866:	461a      	mov	r2, r3
    3868:	4b1c      	ldr	r3, [pc, #112]	; (38dc <Clock_Ip_DistributePll+0x17c>)
    386a:	5c9b      	ldrb	r3, [r3, r2]
    386c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    386e:	4a1c      	ldr	r2, [pc, #112]	; (38e0 <Clock_Ip_DistributePll+0x180>)
    3870:	9b00      	ldr	r3, [sp, #0]
    3872:	011b      	lsls	r3, r3, #4
    3874:	4413      	add	r3, r2
    3876:	330c      	adds	r3, #12
    3878:	6819      	ldr	r1, [r3, #0]
    387a:	4b10      	ldr	r3, [pc, #64]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    387c:	6818      	ldr	r0, [r3, #0]
    387e:	9a01      	ldr	r2, [sp, #4]
    3880:	4613      	mov	r3, r2
    3882:	009b      	lsls	r3, r3, #2
    3884:	4413      	add	r3, r2
    3886:	009b      	lsls	r3, r3, #2
    3888:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    388c:	4403      	add	r3, r0
    388e:	4618      	mov	r0, r3
    3890:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3892:	9b01      	ldr	r3, [sp, #4]
    3894:	3301      	adds	r3, #1
    3896:	9301      	str	r3, [sp, #4]
    3898:	4b08      	ldr	r3, [pc, #32]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	7c9b      	ldrb	r3, [r3, #18]
    389e:	461a      	mov	r2, r3
    38a0:	9b01      	ldr	r3, [sp, #4]
    38a2:	4293      	cmp	r3, r2
    38a4:	d3cd      	bcc.n	3842 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    38a6:	4b05      	ldr	r3, [pc, #20]	; (38bc <Clock_Ip_DistributePll+0x15c>)
    38a8:	681b      	ldr	r3, [r3, #0]
    38aa:	2104      	movs	r1, #4
    38ac:	4618      	mov	r0, r3
    38ae:	f002 fe0b 	bl	64c8 <Clock_Ip_Command>
        }
    }
}
    38b2:	bf00      	nop
    38b4:	b003      	add	sp, #12
    38b6:	f85d fb04 	ldr.w	pc, [sp], #4
    38ba:	bf00      	nop
    38bc:	1fff8b78 	.word	0x1fff8b78
    38c0:	00019cec 	.word	0x00019cec
    38c4:	000198a0 	.word	0x000198a0
    38c8:	00019870 	.word	0x00019870
    38cc:	00019ed8 	.word	0x00019ed8
    38d0:	1fff8b80 	.word	0x1fff8b80
    38d4:	00019840 	.word	0x00019840
    38d8:	00019e28 	.word	0x00019e28
    38dc:	00019890 	.word	0x00019890
    38e0:	00019e9c 	.word	0x00019e9c

000038e4 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    38e4:	b500      	push	{lr}
    38e6:	b085      	sub	sp, #20
    38e8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    38ea:	490c      	ldr	r1, [pc, #48]	; (391c <Clock_Ip_DisableClockMonitor+0x38>)
    38ec:	9a01      	ldr	r2, [sp, #4]
    38ee:	4613      	mov	r3, r2
    38f0:	00db      	lsls	r3, r3, #3
    38f2:	4413      	add	r3, r2
    38f4:	440b      	add	r3, r1
    38f6:	3301      	adds	r3, #1
    38f8:	781b      	ldrb	r3, [r3, #0]
    38fa:	461a      	mov	r2, r3
    38fc:	4b08      	ldr	r3, [pc, #32]	; (3920 <Clock_Ip_DisableClockMonitor+0x3c>)
    38fe:	5c9b      	ldrb	r3, [r3, r2]
    3900:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    3902:	4a08      	ldr	r2, [pc, #32]	; (3924 <Clock_Ip_DisableClockMonitor+0x40>)
    3904:	9b03      	ldr	r3, [sp, #12]
    3906:	011b      	lsls	r3, r3, #4
    3908:	4413      	add	r3, r2
    390a:	3308      	adds	r3, #8
    390c:	681b      	ldr	r3, [r3, #0]
    390e:	9801      	ldr	r0, [sp, #4]
    3910:	4798      	blx	r3
}
    3912:	bf00      	nop
    3914:	b005      	add	sp, #20
    3916:	f85d fb04 	ldr.w	pc, [sp], #4
    391a:	bf00      	nop
    391c:	000198a0 	.word	0x000198a0
    3920:	00019890 	.word	0x00019890
    3924:	00019e9c 	.word	0x00019e9c

00003928 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    3928:	b082      	sub	sp, #8
    392a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    392c:	4a02      	ldr	r2, [pc, #8]	; (3938 <Clock_Ip_InstallNotificationsCallback+0x10>)
    392e:	9b01      	ldr	r3, [sp, #4]
    3930:	6013      	str	r3, [r2, #0]
}
    3932:	bf00      	nop
    3934:	b002      	add	sp, #8
    3936:	4770      	bx	lr
    3938:	1fff8b14 	.word	0x1fff8b14

0000393c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    393c:	b500      	push	{lr}
    393e:	b085      	sub	sp, #20
    3940:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3942:	490c      	ldr	r1, [pc, #48]	; (3974 <Clock_Ip_DisableModuleClock+0x38>)
    3944:	9a01      	ldr	r2, [sp, #4]
    3946:	4613      	mov	r3, r2
    3948:	00db      	lsls	r3, r3, #3
    394a:	4413      	add	r3, r2
    394c:	440b      	add	r3, r1
    394e:	3301      	adds	r3, #1
    3950:	781b      	ldrb	r3, [r3, #0]
    3952:	461a      	mov	r2, r3
    3954:	4b08      	ldr	r3, [pc, #32]	; (3978 <Clock_Ip_DisableModuleClock+0x3c>)
    3956:	5c9b      	ldrb	r3, [r3, r2]
    3958:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    395a:	4a08      	ldr	r2, [pc, #32]	; (397c <Clock_Ip_DisableModuleClock+0x40>)
    395c:	9b03      	ldr	r3, [sp, #12]
    395e:	00db      	lsls	r3, r3, #3
    3960:	4413      	add	r3, r2
    3962:	685b      	ldr	r3, [r3, #4]
    3964:	2101      	movs	r1, #1
    3966:	9801      	ldr	r0, [sp, #4]
    3968:	4798      	blx	r3
}
    396a:	bf00      	nop
    396c:	b005      	add	sp, #20
    396e:	f85d fb04 	ldr.w	pc, [sp], #4
    3972:	bf00      	nop
    3974:	000198a0 	.word	0x000198a0
    3978:	00019840 	.word	0x00019840
    397c:	00019e28 	.word	0x00019e28

00003980 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3980:	b500      	push	{lr}
    3982:	b085      	sub	sp, #20
    3984:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3986:	490c      	ldr	r1, [pc, #48]	; (39b8 <Clock_Ip_EnableModuleClock+0x38>)
    3988:	9a01      	ldr	r2, [sp, #4]
    398a:	4613      	mov	r3, r2
    398c:	00db      	lsls	r3, r3, #3
    398e:	4413      	add	r3, r2
    3990:	440b      	add	r3, r1
    3992:	3301      	adds	r3, #1
    3994:	781b      	ldrb	r3, [r3, #0]
    3996:	461a      	mov	r2, r3
    3998:	4b08      	ldr	r3, [pc, #32]	; (39bc <Clock_Ip_EnableModuleClock+0x3c>)
    399a:	5c9b      	ldrb	r3, [r3, r2]
    399c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    399e:	4a08      	ldr	r2, [pc, #32]	; (39c0 <Clock_Ip_EnableModuleClock+0x40>)
    39a0:	9b03      	ldr	r3, [sp, #12]
    39a2:	00db      	lsls	r3, r3, #3
    39a4:	4413      	add	r3, r2
    39a6:	685b      	ldr	r3, [r3, #4]
    39a8:	2100      	movs	r1, #0
    39aa:	9801      	ldr	r0, [sp, #4]
    39ac:	4798      	blx	r3
}
    39ae:	bf00      	nop
    39b0:	b005      	add	sp, #20
    39b2:	f85d fb04 	ldr.w	pc, [sp], #4
    39b6:	bf00      	nop
    39b8:	000198a0 	.word	0x000198a0
    39bc:	00019840 	.word	0x00019840
    39c0:	00019e28 	.word	0x00019e28

000039c4 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    39c4:	b500      	push	{lr}
    39c6:	b083      	sub	sp, #12
    39c8:	9001      	str	r0, [sp, #4]
    39ca:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    39cc:	4b08      	ldr	r3, [pc, #32]	; (39f0 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    39ce:	2200      	movs	r2, #0
    39d0:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    39d2:	4b08      	ldr	r3, [pc, #32]	; (39f4 <Clock_Ip_PowerModeChangeNotification+0x30>)
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	2102      	movs	r1, #2
    39d8:	4618      	mov	r0, r3
    39da:	f002 fd75 	bl	64c8 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    39de:	9900      	ldr	r1, [sp, #0]
    39e0:	9801      	ldr	r0, [sp, #4]
    39e2:	f002 fc51 	bl	6288 <Clock_Ip_ClockPowerModeChangeNotification>
}
    39e6:	bf00      	nop
    39e8:	b003      	add	sp, #12
    39ea:	f85d fb04 	ldr.w	pc, [sp], #4
    39ee:	bf00      	nop
    39f0:	1fff8b10 	.word	0x1fff8b10
    39f4:	1fff8b78 	.word	0x1fff8b78

000039f8 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    39f8:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    39fa:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    39fe:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    3a00:	4b06      	ldr	r3, [pc, #24]	; (3a1c <Clock_Ip_SetWaitStates+0x24>)
    3a02:	785b      	ldrb	r3, [r3, #1]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d005      	beq.n	3a14 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    3a08:	9b01      	ldr	r3, [sp, #4]
    3a0a:	3b01      	subs	r3, #1
    3a0c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    3a0e:	9b01      	ldr	r3, [sp, #4]
    3a10:	2b00      	cmp	r3, #0
    3a12:	d1f9      	bne.n	3a08 <Clock_Ip_SetWaitStates+0x10>
    }
}
    3a14:	bf00      	nop
    3a16:	b002      	add	sp, #8
    3a18:	4770      	bx	lr
    3a1a:	bf00      	nop
    3a1c:	1fff8b80 	.word	0x1fff8b80

00003a20 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    3a20:	b500      	push	{lr}
    3a22:	b083      	sub	sp, #12
    3a24:	9001      	str	r0, [sp, #4]
    3a26:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    3a28:	4b04      	ldr	r3, [pc, #16]	; (3a3c <Clock_Ip_ReportClockErrors+0x1c>)
    3a2a:	681b      	ldr	r3, [r3, #0]
    3a2c:	9900      	ldr	r1, [sp, #0]
    3a2e:	9801      	ldr	r0, [sp, #4]
    3a30:	4798      	blx	r3
}
    3a32:	bf00      	nop
    3a34:	b003      	add	sp, #12
    3a36:	f85d fb04 	ldr.w	pc, [sp], #4
    3a3a:	bf00      	nop
    3a3c:	1fff8b14 	.word	0x1fff8b14

00003a40 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3a40:	b500      	push	{lr}
    3a42:	b085      	sub	sp, #20
    3a44:	9003      	str	r0, [sp, #12]
    3a46:	9102      	str	r1, [sp, #8]
    3a48:	9201      	str	r2, [sp, #4]
    3a4a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3a4c:	2000      	movs	r0, #0
    3a4e:	f7fe ffd1 	bl	29f4 <OsIf_GetCounter>
    3a52:	4602      	mov	r2, r0
    3a54:	9b03      	ldr	r3, [sp, #12]
    3a56:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3a58:	9b02      	ldr	r3, [sp, #8]
    3a5a:	2200      	movs	r2, #0
    3a5c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3a5e:	2100      	movs	r1, #0
    3a60:	9800      	ldr	r0, [sp, #0]
    3a62:	f7ff f813 	bl	2a8c <OsIf_MicrosToTicks>
    3a66:	4602      	mov	r2, r0
    3a68:	9b01      	ldr	r3, [sp, #4]
    3a6a:	601a      	str	r2, [r3, #0]
}
    3a6c:	bf00      	nop
    3a6e:	b005      	add	sp, #20
    3a70:	f85d fb04 	ldr.w	pc, [sp], #4

00003a74 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3a74:	b500      	push	{lr}
    3a76:	b087      	sub	sp, #28
    3a78:	9003      	str	r0, [sp, #12]
    3a7a:	9102      	str	r1, [sp, #8]
    3a7c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3a7e:	2300      	movs	r3, #0
    3a80:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3a84:	2100      	movs	r1, #0
    3a86:	9803      	ldr	r0, [sp, #12]
    3a88:	f7fe ffcd 	bl	2a26 <OsIf_GetElapsed>
    3a8c:	4602      	mov	r2, r0
    3a8e:	9b02      	ldr	r3, [sp, #8]
    3a90:	681b      	ldr	r3, [r3, #0]
    3a92:	441a      	add	r2, r3
    3a94:	9b02      	ldr	r3, [sp, #8]
    3a96:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3a98:	9b02      	ldr	r3, [sp, #8]
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	9a01      	ldr	r2, [sp, #4]
    3a9e:	429a      	cmp	r2, r3
    3aa0:	d802      	bhi.n	3aa8 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    3aa2:	2301      	movs	r3, #1
    3aa4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3aa8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3aac:	4618      	mov	r0, r3
    3aae:	b007      	add	sp, #28
    3ab0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ab4 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3ab4:	b082      	sub	sp, #8
    3ab6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ab8:	bf00      	nop
    3aba:	b002      	add	sp, #8
    3abc:	4770      	bx	lr

00003abe <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3abe:	b500      	push	{lr}
    3ac0:	b083      	sub	sp, #12
    3ac2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ac4:	9b01      	ldr	r3, [sp, #4]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d002      	beq.n	3ad0 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3aca:	9801      	ldr	r0, [sp, #4]
    3acc:	f000 f8ad 	bl	3c2a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ad0:	bf00      	nop
    3ad2:	b003      	add	sp, #12
    3ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ad8 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3ad8:	b500      	push	{lr}
    3ada:	b083      	sub	sp, #12
    3adc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ade:	9b01      	ldr	r3, [sp, #4]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d002      	beq.n	3aea <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3ae4:	9801      	ldr	r0, [sp, #4]
    3ae6:	f000 f8cd 	bl	3c84 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aea:	bf00      	nop
    3aec:	b003      	add	sp, #12
    3aee:	f85d fb04 	ldr.w	pc, [sp], #4

00003af2 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3af2:	b500      	push	{lr}
    3af4:	b083      	sub	sp, #12
    3af6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3af8:	9b01      	ldr	r3, [sp, #4]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d002      	beq.n	3b04 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    3afe:	9801      	ldr	r0, [sp, #4]
    3b00:	f000 f8ee 	bl	3ce0 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b04:	bf00      	nop
    3b06:	b003      	add	sp, #12
    3b08:	f85d fb04 	ldr.w	pc, [sp], #4

00003b0c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3b0c:	b500      	push	{lr}
    3b0e:	b083      	sub	sp, #12
    3b10:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b12:	9b01      	ldr	r3, [sp, #4]
    3b14:	2b00      	cmp	r3, #0
    3b16:	d002      	beq.n	3b1e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3b18:	9801      	ldr	r0, [sp, #4]
    3b1a:	f000 f8f9 	bl	3d10 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b1e:	bf00      	nop
    3b20:	b003      	add	sp, #12
    3b22:	f85d fb04 	ldr.w	pc, [sp], #4

00003b26 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3b26:	b500      	push	{lr}
    3b28:	b083      	sub	sp, #12
    3b2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b2c:	9b01      	ldr	r3, [sp, #4]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d002      	beq.n	3b38 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3b32:	9801      	ldr	r0, [sp, #4]
    3b34:	f000 f904 	bl	3d40 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b38:	bf00      	nop
    3b3a:	b003      	add	sp, #12
    3b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b40 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3b40:	b500      	push	{lr}
    3b42:	b083      	sub	sp, #12
    3b44:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b46:	9b01      	ldr	r3, [sp, #4]
    3b48:	2b00      	cmp	r3, #0
    3b4a:	d002      	beq.n	3b52 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3b4c:	9801      	ldr	r0, [sp, #4]
    3b4e:	f000 f90f 	bl	3d70 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b52:	bf00      	nop
    3b54:	b003      	add	sp, #12
    3b56:	f85d fb04 	ldr.w	pc, [sp], #4

00003b5a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3b5a:	b500      	push	{lr}
    3b5c:	b083      	sub	sp, #12
    3b5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b60:	9b01      	ldr	r3, [sp, #4]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d002      	beq.n	3b6c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3b66:	9801      	ldr	r0, [sp, #4]
    3b68:	f000 f91a 	bl	3da0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b6c:	bf00      	nop
    3b6e:	b003      	add	sp, #12
    3b70:	f85d fb04 	ldr.w	pc, [sp], #4

00003b74 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3b74:	b500      	push	{lr}
    3b76:	b083      	sub	sp, #12
    3b78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b7a:	9b01      	ldr	r3, [sp, #4]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d002      	beq.n	3b86 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3b80:	9801      	ldr	r0, [sp, #4]
    3b82:	f000 f925 	bl	3dd0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b86:	bf00      	nop
    3b88:	b003      	add	sp, #12
    3b8a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b8e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3b8e:	b500      	push	{lr}
    3b90:	b083      	sub	sp, #12
    3b92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b94:	9b01      	ldr	r3, [sp, #4]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d002      	beq.n	3ba0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3b9a:	9801      	ldr	r0, [sp, #4]
    3b9c:	f000 f930 	bl	3e00 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ba0:	bf00      	nop
    3ba2:	b003      	add	sp, #12
    3ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba8 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3ba8:	b500      	push	{lr}
    3baa:	b083      	sub	sp, #12
    3bac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bae:	9b01      	ldr	r3, [sp, #4]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d002      	beq.n	3bba <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3bb4:	9801      	ldr	r0, [sp, #4]
    3bb6:	f000 f93b 	bl	3e30 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bba:	bf00      	nop
    3bbc:	b003      	add	sp, #12
    3bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00003bc2 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3bc2:	b500      	push	{lr}
    3bc4:	b083      	sub	sp, #12
    3bc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bc8:	9b01      	ldr	r3, [sp, #4]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d002      	beq.n	3bd4 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3bce:	9801      	ldr	r0, [sp, #4]
    3bd0:	f000 f946 	bl	3e60 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bd4:	bf00      	nop
    3bd6:	b003      	add	sp, #12
    3bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00003bdc <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3bdc:	b500      	push	{lr}
    3bde:	b083      	sub	sp, #12
    3be0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3be2:	9b01      	ldr	r3, [sp, #4]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d002      	beq.n	3bee <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3be8:	9801      	ldr	r0, [sp, #4]
    3bea:	f000 f951 	bl	3e90 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bee:	bf00      	nop
    3bf0:	b003      	add	sp, #12
    3bf2:	f85d fb04 	ldr.w	pc, [sp], #4

00003bf6 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3bf6:	b500      	push	{lr}
    3bf8:	b083      	sub	sp, #12
    3bfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bfc:	9b01      	ldr	r3, [sp, #4]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d002      	beq.n	3c08 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    3c02:	9801      	ldr	r0, [sp, #4]
    3c04:	f000 f95e 	bl	3ec4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c08:	bf00      	nop
    3c0a:	b003      	add	sp, #12
    3c0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003c10 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3c10:	b500      	push	{lr}
    3c12:	b083      	sub	sp, #12
    3c14:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d002      	beq.n	3c22 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3c1c:	9801      	ldr	r0, [sp, #4]
    3c1e:	f000 f98b 	bl	3f38 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c22:	bf00      	nop
    3c24:	b003      	add	sp, #12
    3c26:	f85d fb04 	ldr.w	pc, [sp], #4

00003c2a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c2a:	b086      	sub	sp, #24
    3c2c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c2e:	9b01      	ldr	r3, [sp, #4]
    3c30:	681a      	ldr	r2, [r3, #0]
    3c32:	4911      	ldr	r1, [pc, #68]	; (3c78 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3c34:	4613      	mov	r3, r2
    3c36:	00db      	lsls	r3, r3, #3
    3c38:	4413      	add	r3, r2
    3c3a:	440b      	add	r3, r1
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3c40:	9b01      	ldr	r3, [sp, #4]
    3c42:	685b      	ldr	r3, [r3, #4]
    3c44:	4a0d      	ldr	r2, [pc, #52]	; (3c7c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3c46:	5cd3      	ldrb	r3, [r2, r3]
    3c48:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3c4a:	4a0d      	ldr	r2, [pc, #52]	; (3c80 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3c4c:	9b05      	ldr	r3, [sp, #20]
    3c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c52:	681b      	ldr	r3, [r3, #0]
    3c54:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3c56:	9b03      	ldr	r3, [sp, #12]
    3c58:	f023 0307 	bic.w	r3, r3, #7
    3c5c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3c5e:	9a03      	ldr	r2, [sp, #12]
    3c60:	9b04      	ldr	r3, [sp, #16]
    3c62:	4313      	orrs	r3, r2
    3c64:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3c66:	4a06      	ldr	r2, [pc, #24]	; (3c80 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3c68:	9b05      	ldr	r3, [sp, #20]
    3c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c6e:	9a03      	ldr	r2, [sp, #12]
    3c70:	601a      	str	r2, [r3, #0]
}
    3c72:	bf00      	nop
    3c74:	b006      	add	sp, #24
    3c76:	4770      	bx	lr
    3c78:	000198a0 	.word	0x000198a0
    3c7c:	00019c98 	.word	0x00019c98
    3c80:	00019cdc 	.word	0x00019cdc

00003c84 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c84:	b086      	sub	sp, #24
    3c86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c88:	9b01      	ldr	r3, [sp, #4]
    3c8a:	681a      	ldr	r2, [r3, #0]
    3c8c:	4911      	ldr	r1, [pc, #68]	; (3cd4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3c8e:	4613      	mov	r3, r2
    3c90:	00db      	lsls	r3, r3, #3
    3c92:	4413      	add	r3, r2
    3c94:	440b      	add	r3, r1
    3c96:	781b      	ldrb	r3, [r3, #0]
    3c98:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	685b      	ldr	r3, [r3, #4]
    3c9e:	4a0e      	ldr	r2, [pc, #56]	; (3cd8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3ca0:	5cd3      	ldrb	r3, [r2, r3]
    3ca2:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3ca4:	4a0d      	ldr	r2, [pc, #52]	; (3cdc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3ca6:	9b05      	ldr	r3, [sp, #20]
    3ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3cb0:	9b03      	ldr	r3, [sp, #12]
    3cb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3cb6:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3cb8:	9b04      	ldr	r3, [sp, #16]
    3cba:	021b      	lsls	r3, r3, #8
    3cbc:	9a03      	ldr	r2, [sp, #12]
    3cbe:	4313      	orrs	r3, r2
    3cc0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3cc2:	4a06      	ldr	r2, [pc, #24]	; (3cdc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3cc4:	9b05      	ldr	r3, [sp, #20]
    3cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cca:	9a03      	ldr	r2, [sp, #12]
    3ccc:	601a      	str	r2, [r3, #0]
}
    3cce:	bf00      	nop
    3cd0:	b006      	add	sp, #24
    3cd2:	4770      	bx	lr
    3cd4:	000198a0 	.word	0x000198a0
    3cd8:	00019c98 	.word	0x00019c98
    3cdc:	00019cdc 	.word	0x00019cdc

00003ce0 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ce0:	b084      	sub	sp, #16
    3ce2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ce4:	4b09      	ldr	r3, [pc, #36]	; (3d0c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3ce6:	695b      	ldr	r3, [r3, #20]
    3ce8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3cea:	9b03      	ldr	r3, [sp, #12]
    3cec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3cf0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3cf2:	9b01      	ldr	r3, [sp, #4]
    3cf4:	685b      	ldr	r3, [r3, #4]
    3cf6:	3b01      	subs	r3, #1
    3cf8:	041b      	lsls	r3, r3, #16
    3cfa:	9a03      	ldr	r2, [sp, #12]
    3cfc:	4313      	orrs	r3, r2
    3cfe:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3d00:	4a02      	ldr	r2, [pc, #8]	; (3d0c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3d02:	9b03      	ldr	r3, [sp, #12]
    3d04:	6153      	str	r3, [r2, #20]
}
    3d06:	bf00      	nop
    3d08:	b004      	add	sp, #16
    3d0a:	4770      	bx	lr
    3d0c:	40064000 	.word	0x40064000

00003d10 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d10:	b084      	sub	sp, #16
    3d12:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3d14:	4b09      	ldr	r3, [pc, #36]	; (3d3c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3d16:	695b      	ldr	r3, [r3, #20]
    3d18:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3d1a:	9b03      	ldr	r3, [sp, #12]
    3d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3d20:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3d22:	9b01      	ldr	r3, [sp, #4]
    3d24:	685b      	ldr	r3, [r3, #4]
    3d26:	3b01      	subs	r3, #1
    3d28:	011b      	lsls	r3, r3, #4
    3d2a:	9a03      	ldr	r2, [sp, #12]
    3d2c:	4313      	orrs	r3, r2
    3d2e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3d30:	4a02      	ldr	r2, [pc, #8]	; (3d3c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3d32:	9b03      	ldr	r3, [sp, #12]
    3d34:	6153      	str	r3, [r2, #20]
}
    3d36:	bf00      	nop
    3d38:	b004      	add	sp, #16
    3d3a:	4770      	bx	lr
    3d3c:	40064000 	.word	0x40064000

00003d40 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d40:	b084      	sub	sp, #16
    3d42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3d44:	4b09      	ldr	r3, [pc, #36]	; (3d6c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3d46:	695b      	ldr	r3, [r3, #20]
    3d48:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3d4a:	9b03      	ldr	r3, [sp, #12]
    3d4c:	f023 030f 	bic.w	r3, r3, #15
    3d50:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3d52:	9b01      	ldr	r3, [sp, #4]
    3d54:	685b      	ldr	r3, [r3, #4]
    3d56:	3b01      	subs	r3, #1
    3d58:	9a03      	ldr	r2, [sp, #12]
    3d5a:	4313      	orrs	r3, r2
    3d5c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3d5e:	4a03      	ldr	r2, [pc, #12]	; (3d6c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3d60:	9b03      	ldr	r3, [sp, #12]
    3d62:	6153      	str	r3, [r2, #20]
}
    3d64:	bf00      	nop
    3d66:	b004      	add	sp, #16
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop
    3d6c:	40064000 	.word	0x40064000

00003d70 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d70:	b084      	sub	sp, #16
    3d72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3d74:	4b09      	ldr	r3, [pc, #36]	; (3d9c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3d76:	699b      	ldr	r3, [r3, #24]
    3d78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3d7a:	9b03      	ldr	r3, [sp, #12]
    3d7c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3d80:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3d82:	9b01      	ldr	r3, [sp, #4]
    3d84:	685b      	ldr	r3, [r3, #4]
    3d86:	3b01      	subs	r3, #1
    3d88:	041b      	lsls	r3, r3, #16
    3d8a:	9a03      	ldr	r2, [sp, #12]
    3d8c:	4313      	orrs	r3, r2
    3d8e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3d90:	4a02      	ldr	r2, [pc, #8]	; (3d9c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3d92:	9b03      	ldr	r3, [sp, #12]
    3d94:	6193      	str	r3, [r2, #24]
}
    3d96:	bf00      	nop
    3d98:	b004      	add	sp, #16
    3d9a:	4770      	bx	lr
    3d9c:	40064000 	.word	0x40064000

00003da0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3da0:	b084      	sub	sp, #16
    3da2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3da4:	4b09      	ldr	r3, [pc, #36]	; (3dcc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3da6:	699b      	ldr	r3, [r3, #24]
    3da8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3daa:	9b03      	ldr	r3, [sp, #12]
    3dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3db0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3db2:	9b01      	ldr	r3, [sp, #4]
    3db4:	685b      	ldr	r3, [r3, #4]
    3db6:	3b01      	subs	r3, #1
    3db8:	011b      	lsls	r3, r3, #4
    3dba:	9a03      	ldr	r2, [sp, #12]
    3dbc:	4313      	orrs	r3, r2
    3dbe:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3dc0:	4a02      	ldr	r2, [pc, #8]	; (3dcc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3dc2:	9b03      	ldr	r3, [sp, #12]
    3dc4:	6193      	str	r3, [r2, #24]
}
    3dc6:	bf00      	nop
    3dc8:	b004      	add	sp, #16
    3dca:	4770      	bx	lr
    3dcc:	40064000 	.word	0x40064000

00003dd0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3dd0:	b084      	sub	sp, #16
    3dd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3dd4:	4b09      	ldr	r3, [pc, #36]	; (3dfc <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3dd6:	699b      	ldr	r3, [r3, #24]
    3dd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3dda:	9b03      	ldr	r3, [sp, #12]
    3ddc:	f023 030f 	bic.w	r3, r3, #15
    3de0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3de2:	9b01      	ldr	r3, [sp, #4]
    3de4:	685b      	ldr	r3, [r3, #4]
    3de6:	3b01      	subs	r3, #1
    3de8:	9a03      	ldr	r2, [sp, #12]
    3dea:	4313      	orrs	r3, r2
    3dec:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3dee:	4a03      	ldr	r2, [pc, #12]	; (3dfc <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3df0:	9b03      	ldr	r3, [sp, #12]
    3df2:	6193      	str	r3, [r2, #24]
}
    3df4:	bf00      	nop
    3df6:	b004      	add	sp, #16
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop
    3dfc:	40064000 	.word	0x40064000

00003e00 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e00:	b084      	sub	sp, #16
    3e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3e04:	4b09      	ldr	r3, [pc, #36]	; (3e2c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3e06:	69db      	ldr	r3, [r3, #28]
    3e08:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3e0a:	9b03      	ldr	r3, [sp, #12]
    3e0c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3e10:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	685b      	ldr	r3, [r3, #4]
    3e16:	3b01      	subs	r3, #1
    3e18:	041b      	lsls	r3, r3, #16
    3e1a:	9a03      	ldr	r2, [sp, #12]
    3e1c:	4313      	orrs	r3, r2
    3e1e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3e20:	4a02      	ldr	r2, [pc, #8]	; (3e2c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3e22:	9b03      	ldr	r3, [sp, #12]
    3e24:	61d3      	str	r3, [r2, #28]
}
    3e26:	bf00      	nop
    3e28:	b004      	add	sp, #16
    3e2a:	4770      	bx	lr
    3e2c:	40064000 	.word	0x40064000

00003e30 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e30:	b084      	sub	sp, #16
    3e32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3e34:	4b09      	ldr	r3, [pc, #36]	; (3e5c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3e36:	69db      	ldr	r3, [r3, #28]
    3e38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3e3a:	9b03      	ldr	r3, [sp, #12]
    3e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3e40:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3e42:	9b01      	ldr	r3, [sp, #4]
    3e44:	685b      	ldr	r3, [r3, #4]
    3e46:	3b01      	subs	r3, #1
    3e48:	011b      	lsls	r3, r3, #4
    3e4a:	9a03      	ldr	r2, [sp, #12]
    3e4c:	4313      	orrs	r3, r2
    3e4e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3e50:	4a02      	ldr	r2, [pc, #8]	; (3e5c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3e52:	9b03      	ldr	r3, [sp, #12]
    3e54:	61d3      	str	r3, [r2, #28]
}
    3e56:	bf00      	nop
    3e58:	b004      	add	sp, #16
    3e5a:	4770      	bx	lr
    3e5c:	40064000 	.word	0x40064000

00003e60 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e60:	b084      	sub	sp, #16
    3e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3e64:	4b09      	ldr	r3, [pc, #36]	; (3e8c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3e66:	69db      	ldr	r3, [r3, #28]
    3e68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3e6a:	9b03      	ldr	r3, [sp, #12]
    3e6c:	f023 030f 	bic.w	r3, r3, #15
    3e70:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3e72:	9b01      	ldr	r3, [sp, #4]
    3e74:	685b      	ldr	r3, [r3, #4]
    3e76:	3b01      	subs	r3, #1
    3e78:	9a03      	ldr	r2, [sp, #12]
    3e7a:	4313      	orrs	r3, r2
    3e7c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3e7e:	4a03      	ldr	r2, [pc, #12]	; (3e8c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3e80:	9b03      	ldr	r3, [sp, #12]
    3e82:	61d3      	str	r3, [r2, #28]
}
    3e84:	bf00      	nop
    3e86:	b004      	add	sp, #16
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop
    3e8c:	40064000 	.word	0x40064000

00003e90 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3e90:	b084      	sub	sp, #16
    3e92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3e94:	4b0a      	ldr	r3, [pc, #40]	; (3ec0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3e96:	685b      	ldr	r3, [r3, #4]
    3e98:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3e9a:	9b03      	ldr	r3, [sp, #12]
    3e9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3ea0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3ea2:	9b01      	ldr	r3, [sp, #4]
    3ea4:	685b      	ldr	r3, [r3, #4]
    3ea6:	3b01      	subs	r3, #1
    3ea8:	021b      	lsls	r3, r3, #8
    3eaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3eae:	9a03      	ldr	r2, [sp, #12]
    3eb0:	4313      	orrs	r3, r2
    3eb2:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3eb4:	4a02      	ldr	r2, [pc, #8]	; (3ec0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3eb6:	9b03      	ldr	r3, [sp, #12]
    3eb8:	6053      	str	r3, [r2, #4]
}
    3eba:	bf00      	nop
    3ebc:	b004      	add	sp, #16
    3ebe:	4770      	bx	lr
    3ec0:	40048000 	.word	0x40048000

00003ec4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ec4:	b084      	sub	sp, #16
    3ec6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3ec8:	4919      	ldr	r1, [pc, #100]	; (3f30 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3eca:	9b01      	ldr	r3, [sp, #4]
    3ecc:	681a      	ldr	r2, [r3, #0]
    3ece:	4819      	ldr	r0, [pc, #100]	; (3f34 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3ed0:	4613      	mov	r3, r2
    3ed2:	00db      	lsls	r3, r3, #3
    3ed4:	4413      	add	r3, r2
    3ed6:	4403      	add	r3, r0
    3ed8:	3305      	adds	r3, #5
    3eda:	781b      	ldrb	r3, [r3, #0]
    3edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3ee0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3ee2:	9b03      	ldr	r3, [sp, #12]
    3ee4:	f023 030f 	bic.w	r3, r3, #15
    3ee8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3eea:	9b01      	ldr	r3, [sp, #4]
    3eec:	685b      	ldr	r3, [r3, #4]
    3eee:	3b01      	subs	r3, #1
    3ef0:	f003 0307 	and.w	r3, r3, #7
    3ef4:	9a03      	ldr	r2, [sp, #12]
    3ef6:	4313      	orrs	r3, r2
    3ef8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	7a1b      	ldrb	r3, [r3, #8]
    3efe:	3b01      	subs	r3, #1
    3f00:	00db      	lsls	r3, r3, #3
    3f02:	f003 0308 	and.w	r3, r3, #8
    3f06:	9a03      	ldr	r2, [sp, #12]
    3f08:	4313      	orrs	r3, r2
    3f0a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3f0c:	4908      	ldr	r1, [pc, #32]	; (3f30 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3f0e:	9b01      	ldr	r3, [sp, #4]
    3f10:	681a      	ldr	r2, [r3, #0]
    3f12:	4808      	ldr	r0, [pc, #32]	; (3f34 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3f14:	4613      	mov	r3, r2
    3f16:	00db      	lsls	r3, r3, #3
    3f18:	4413      	add	r3, r2
    3f1a:	4403      	add	r3, r0
    3f1c:	3305      	adds	r3, #5
    3f1e:	781b      	ldrb	r3, [r3, #0]
    3f20:	461a      	mov	r2, r3
    3f22:	9b03      	ldr	r3, [sp, #12]
    3f24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3f28:	bf00      	nop
    3f2a:	b004      	add	sp, #16
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	40065000 	.word	0x40065000
    3f34:	000198a0 	.word	0x000198a0

00003f38 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3f38:	b084      	sub	sp, #16
    3f3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3f3c:	4b10      	ldr	r3, [pc, #64]	; (3f80 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3f40:	4a0f      	ldr	r2, [pc, #60]	; (3f80 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3f46:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3f48:	4b0d      	ldr	r3, [pc, #52]	; (3f80 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3f4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3f4e:	9b03      	ldr	r3, [sp, #12]
    3f50:	f023 030f 	bic.w	r3, r3, #15
    3f54:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3f56:	9b01      	ldr	r3, [sp, #4]
    3f58:	685b      	ldr	r3, [r3, #4]
    3f5a:	3b01      	subs	r3, #1
    3f5c:	005b      	lsls	r3, r3, #1
    3f5e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3f62:	9b01      	ldr	r3, [sp, #4]
    3f64:	7a1b      	ldrb	r3, [r3, #8]
    3f66:	3b01      	subs	r3, #1
    3f68:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3f6c:	4313      	orrs	r3, r2
    3f6e:	9a03      	ldr	r2, [sp, #12]
    3f70:	4313      	orrs	r3, r2
    3f72:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3f74:	4a02      	ldr	r2, [pc, #8]	; (3f80 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3f76:	9b03      	ldr	r3, [sp, #12]
    3f78:	6693      	str	r3, [r2, #104]	; 0x68
}
    3f7a:	bf00      	nop
    3f7c:	b004      	add	sp, #16
    3f7e:	4770      	bx	lr
    3f80:	40048000 	.word	0x40048000

00003f84 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3f84:	b082      	sub	sp, #8
    3f86:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f88:	bf00      	nop
    3f8a:	b002      	add	sp, #8
    3f8c:	4770      	bx	lr
	...

00003f90 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3f90:	b082      	sub	sp, #8
    3f92:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f94:	bf00      	nop
    3f96:	b002      	add	sp, #8
    3f98:	4770      	bx	lr

00003f9a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3f9a:	b082      	sub	sp, #8
    3f9c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3f9e:	bf00      	nop
    3fa0:	b002      	add	sp, #8
    3fa2:	4770      	bx	lr

00003fa4 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3fa4:	b500      	push	{lr}
    3fa6:	b083      	sub	sp, #12
    3fa8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3faa:	9b01      	ldr	r3, [sp, #4]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d002      	beq.n	3fb6 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3fb0:	9801      	ldr	r0, [sp, #4]
    3fb2:	f000 f86a 	bl	408a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fb6:	bf00      	nop
    3fb8:	b003      	add	sp, #12
    3fba:	f85d fb04 	ldr.w	pc, [sp], #4

00003fbe <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3fbe:	b500      	push	{lr}
    3fc0:	b083      	sub	sp, #12
    3fc2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d002      	beq.n	3fd0 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3fca:	9801      	ldr	r0, [sp, #4]
    3fcc:	f000 f884 	bl	40d8 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3fd0:	bf00      	nop
    3fd2:	b003      	add	sp, #12
    3fd4:	f85d fb04 	ldr.w	pc, [sp], #4

00003fd8 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3fd8:	b500      	push	{lr}
    3fda:	b089      	sub	sp, #36	; 0x24
    3fdc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fde:	2300      	movs	r3, #0
    3fe0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3fe4:	9b01      	ldr	r3, [sp, #4]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d031      	beq.n	404e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3fea:	4b1b      	ldr	r3, [pc, #108]	; (4058 <Clock_Ip_CompleteSOSC+0x80>)
    3fec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3ff0:	f003 0301 	and.w	r3, r3, #1
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d02a      	beq.n	404e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ff8:	aa03      	add	r2, sp, #12
    3ffa:	a904      	add	r1, sp, #16
    3ffc:	a805      	add	r0, sp, #20
    3ffe:	f24c 3350 	movw	r3, #50000	; 0xc350
    4002:	f7ff fd1d 	bl	3a40 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    4006:	4b14      	ldr	r3, [pc, #80]	; (4058 <Clock_Ip_CompleteSOSC+0x80>)
    4008:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    400c:	0e1b      	lsrs	r3, r3, #24
    400e:	f003 0301 	and.w	r3, r3, #1
    4012:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4014:	9a03      	ldr	r2, [sp, #12]
    4016:	a904      	add	r1, sp, #16
    4018:	ab05      	add	r3, sp, #20
    401a:	4618      	mov	r0, r3
    401c:	f7ff fd2a 	bl	3a74 <Clock_Ip_TimeoutExpired>
    4020:	4603      	mov	r3, r0
    4022:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    4026:	9b06      	ldr	r3, [sp, #24]
    4028:	2b00      	cmp	r3, #0
    402a:	d106      	bne.n	403a <Clock_Ip_CompleteSOSC+0x62>
    402c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4030:	f083 0301 	eor.w	r3, r3, #1
    4034:	b2db      	uxtb	r3, r3
    4036:	2b00      	cmp	r3, #0
    4038:	d1e5      	bne.n	4006 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    403a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    403e:	2b00      	cmp	r3, #0
    4040:	d005      	beq.n	404e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4042:	9b01      	ldr	r3, [sp, #4]
    4044:	681b      	ldr	r3, [r3, #0]
    4046:	4619      	mov	r1, r3
    4048:	2001      	movs	r0, #1
    404a:	f7ff fce9 	bl	3a20 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    404e:	bf00      	nop
    4050:	b009      	add	sp, #36	; 0x24
    4052:	f85d fb04 	ldr.w	pc, [sp], #4
    4056:	bf00      	nop
    4058:	40064000 	.word	0x40064000

0000405c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    405c:	b500      	push	{lr}
    405e:	b083      	sub	sp, #12
    4060:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    4062:	9801      	ldr	r0, [sp, #4]
    4064:	f000 f8c0 	bl	41e8 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4068:	bf00      	nop
    406a:	b003      	add	sp, #12
    406c:	f85d fb04 	ldr.w	pc, [sp], #4

00004070 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    4070:	b500      	push	{lr}
    4072:	b083      	sub	sp, #12
    4074:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4076:	9b01      	ldr	r3, [sp, #4]
    4078:	2b00      	cmp	r3, #0
    407a:	d002      	beq.n	4082 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    407c:	9801      	ldr	r0, [sp, #4]
    407e:	f000 f8c3 	bl	4208 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4082:	bf00      	nop
    4084:	b003      	add	sp, #12
    4086:	f85d fb04 	ldr.w	pc, [sp], #4

0000408a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    408a:	b082      	sub	sp, #8
    408c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    408e:	4b11      	ldr	r3, [pc, #68]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4090:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4094:	4a0f      	ldr	r2, [pc, #60]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4096:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    409a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    409e:	4b0d      	ldr	r3, [pc, #52]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    40a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    40a4:	4a0b      	ldr	r2, [pc, #44]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    40a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    40aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    40ae:	4b09      	ldr	r3, [pc, #36]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    40b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    40b4:	4a07      	ldr	r2, [pc, #28]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    40b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    40ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    40c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    40c4:	4a03      	ldr	r2, [pc, #12]	; (40d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    40c6:	f023 0301 	bic.w	r3, r3, #1
    40ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    40ce:	bf00      	nop
    40d0:	b002      	add	sp, #8
    40d2:	4770      	bx	lr
    40d4:	40064000 	.word	0x40064000

000040d8 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    40d8:	b082      	sub	sp, #8
    40da:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    40dc:	9b01      	ldr	r3, [sp, #4]
    40de:	891b      	ldrh	r3, [r3, #8]
    40e0:	2b01      	cmp	r3, #1
    40e2:	d174      	bne.n	41ce <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    40e4:	9b01      	ldr	r3, [sp, #4]
    40e6:	7bdb      	ldrb	r3, [r3, #15]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d002      	beq.n	40f2 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    40ec:	2b01      	cmp	r3, #1
    40ee:	d009      	beq.n	4104 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    40f0:	e011      	b.n	4116 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    40f2:	4b39      	ldr	r3, [pc, #228]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    40f8:	4a37      	ldr	r2, [pc, #220]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40fa:	f023 0308 	bic.w	r3, r3, #8
    40fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    4102:	e008      	b.n	4116 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    4104:	4b34      	ldr	r3, [pc, #208]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    410a:	4a33      	ldr	r2, [pc, #204]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    410c:	f043 0308 	orr.w	r3, r3, #8
    4110:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    4114:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    4116:	4b30      	ldr	r3, [pc, #192]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4118:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    411c:	4a2e      	ldr	r2, [pc, #184]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    411e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4122:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    4126:	9b01      	ldr	r3, [sp, #4]
    4128:	685b      	ldr	r3, [r3, #4]
    412a:	4a2c      	ldr	r2, [pc, #176]	; (41dc <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    412c:	4293      	cmp	r3, r2
    412e:	d90d      	bls.n	414c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    4130:	9b01      	ldr	r3, [sp, #4]
    4132:	685b      	ldr	r3, [r3, #4]
    4134:	4a2a      	ldr	r2, [pc, #168]	; (41e0 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    4136:	4293      	cmp	r3, r2
    4138:	d208      	bcs.n	414c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    413a:	4b27      	ldr	r3, [pc, #156]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    413c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4140:	4a25      	ldr	r2, [pc, #148]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4142:	f043 0320 	orr.w	r3, r3, #32
    4146:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    414a:	e007      	b.n	415c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    414c:	4b22      	ldr	r3, [pc, #136]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    414e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4152:	4a21      	ldr	r2, [pc, #132]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4154:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    4158:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    415c:	9b01      	ldr	r3, [sp, #4]
    415e:	7b1b      	ldrb	r3, [r3, #12]
    4160:	2b00      	cmp	r3, #0
    4162:	d108      	bne.n	4176 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    4164:	4b1c      	ldr	r3, [pc, #112]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4166:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    416a:	4a1b      	ldr	r2, [pc, #108]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    416c:	f043 0304 	orr.w	r3, r3, #4
    4170:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    4174:	e007      	b.n	4186 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    4176:	4b18      	ldr	r3, [pc, #96]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4178:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    417c:	4a16      	ldr	r2, [pc, #88]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    417e:	f023 0304 	bic.w	r3, r3, #4
    4182:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4186:	9b01      	ldr	r3, [sp, #4]
    4188:	7c1b      	ldrb	r3, [r3, #16]
    418a:	2b02      	cmp	r3, #2
    418c:	d011      	beq.n	41b2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    418e:	2b02      	cmp	r3, #2
    4190:	dc14      	bgt.n	41bc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    4192:	2b00      	cmp	r3, #0
    4194:	d002      	beq.n	419c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    4196:	2b01      	cmp	r3, #1
    4198:	d005      	beq.n	41a6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    419a:	e00f      	b.n	41bc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    419c:	4b0e      	ldr	r3, [pc, #56]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    419e:	2201      	movs	r2, #1
    41a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    41a4:	e014      	b.n	41d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    41a6:	4b0c      	ldr	r3, [pc, #48]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41a8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    41ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    41b0:	e00e      	b.n	41d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    41b2:	4b09      	ldr	r3, [pc, #36]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41b4:	4a0b      	ldr	r2, [pc, #44]	; (41e4 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    41b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    41ba:	e009      	b.n	41d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    41bc:	4b06      	ldr	r3, [pc, #24]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    41c2:	4a05      	ldr	r2, [pc, #20]	; (41d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41c4:	f043 0301 	orr.w	r3, r3, #1
    41c8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    41cc:	e000      	b.n	41d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    41ce:	bf00      	nop
}
    41d0:	bf00      	nop
    41d2:	b002      	add	sp, #8
    41d4:	4770      	bx	lr
    41d6:	bf00      	nop
    41d8:	40064000 	.word	0x40064000
    41dc:	003d08ff 	.word	0x003d08ff
    41e0:	007a1200 	.word	0x007a1200
    41e4:	00030001 	.word	0x00030001

000041e8 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    41e8:	b082      	sub	sp, #8
    41ea:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    41ec:	4b05      	ldr	r3, [pc, #20]	; (4204 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    41ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    41f2:	4a04      	ldr	r2, [pc, #16]	; (4204 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    41f4:	f023 0301 	bic.w	r3, r3, #1
    41f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    41fc:	bf00      	nop
    41fe:	b002      	add	sp, #8
    4200:	4770      	bx	lr
    4202:	bf00      	nop
    4204:	40064000 	.word	0x40064000

00004208 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4208:	b082      	sub	sp, #8
    420a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    420c:	9b01      	ldr	r3, [sp, #4]
    420e:	891b      	ldrh	r3, [r3, #8]
    4210:	2b01      	cmp	r3, #1
    4212:	d107      	bne.n	4224 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    4214:	4b05      	ldr	r3, [pc, #20]	; (422c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    4216:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    421a:	4a04      	ldr	r2, [pc, #16]	; (422c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    421c:	f043 0301 	orr.w	r3, r3, #1
    4220:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    4224:	bf00      	nop
    4226:	b002      	add	sp, #8
    4228:	4770      	bx	lr
    422a:	bf00      	nop
    422c:	40064000 	.word	0x40064000

00004230 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    4230:	b082      	sub	sp, #8
    4232:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4234:	bf00      	nop
    4236:	b002      	add	sp, #8
    4238:	4770      	bx	lr

0000423a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    423a:	b082      	sub	sp, #8
    423c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    423e:	2300      	movs	r3, #0
}
    4240:	4618      	mov	r0, r3
    4242:	b002      	add	sp, #8
    4244:	4770      	bx	lr

00004246 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    4246:	b082      	sub	sp, #8
    4248:	9001      	str	r0, [sp, #4]
    424a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    424c:	bf00      	nop
    424e:	b002      	add	sp, #8
    4250:	4770      	bx	lr
	...

00004254 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    4254:	b082      	sub	sp, #8
    4256:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4258:	bf00      	nop
    425a:	b002      	add	sp, #8
    425c:	4770      	bx	lr

0000425e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    425e:	b082      	sub	sp, #8
    4260:	9001      	str	r0, [sp, #4]
    4262:	460b      	mov	r3, r1
    4264:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    4268:	bf00      	nop
    426a:	b002      	add	sp, #8
    426c:	4770      	bx	lr

0000426e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    426e:	b500      	push	{lr}
    4270:	b083      	sub	sp, #12
    4272:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	2b00      	cmp	r3, #0
    4278:	d002      	beq.n	4280 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    427a:	9801      	ldr	r0, [sp, #4]
    427c:	f000 f8e7 	bl	444e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4280:	bf00      	nop
    4282:	b003      	add	sp, #12
    4284:	f85d fb04 	ldr.w	pc, [sp], #4

00004288 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4288:	b500      	push	{lr}
    428a:	b085      	sub	sp, #20
    428c:	9001      	str	r0, [sp, #4]
    428e:	460b      	mov	r3, r1
    4290:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4294:	9b01      	ldr	r3, [sp, #4]
    4296:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4298:	f89d 3003 	ldrb.w	r3, [sp, #3]
    429c:	2b00      	cmp	r3, #0
    429e:	d003      	beq.n	42a8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    42a0:	2300      	movs	r3, #0
    42a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    42a6:	e002      	b.n	42ae <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    42a8:	2301      	movs	r3, #1
    42aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    42ae:	ab02      	add	r3, sp, #8
    42b0:	4618      	mov	r0, r3
    42b2:	f7ff ffdc 	bl	426e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    42b6:	bf00      	nop
    42b8:	b005      	add	sp, #20
    42ba:	f85d fb04 	ldr.w	pc, [sp], #4

000042be <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    42be:	b500      	push	{lr}
    42c0:	b083      	sub	sp, #12
    42c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42c4:	9b01      	ldr	r3, [sp, #4]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d002      	beq.n	42d0 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    42ca:	9801      	ldr	r0, [sp, #4]
    42cc:	f000 f8d6 	bl	447c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42d0:	bf00      	nop
    42d2:	b003      	add	sp, #12
    42d4:	f85d fb04 	ldr.w	pc, [sp], #4

000042d8 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    42d8:	b500      	push	{lr}
    42da:	b085      	sub	sp, #20
    42dc:	9001      	str	r0, [sp, #4]
    42de:	460b      	mov	r3, r1
    42e0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    42e4:	9b01      	ldr	r3, [sp, #4]
    42e6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    42e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    42ec:	2b00      	cmp	r3, #0
    42ee:	d003      	beq.n	42f8 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    42f0:	2300      	movs	r3, #0
    42f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    42f6:	e002      	b.n	42fe <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    42f8:	2301      	movs	r3, #1
    42fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    42fe:	ab02      	add	r3, sp, #8
    4300:	4618      	mov	r0, r3
    4302:	f7ff ffdc 	bl	42be <Clock_Ip_ClockSetSimLPO32KEnable>
}
    4306:	bf00      	nop
    4308:	b005      	add	sp, #20
    430a:	f85d fb04 	ldr.w	pc, [sp], #4

0000430e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    430e:	b500      	push	{lr}
    4310:	b083      	sub	sp, #12
    4312:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4314:	9b01      	ldr	r3, [sp, #4]
    4316:	2b00      	cmp	r3, #0
    4318:	d002      	beq.n	4320 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    431a:	9801      	ldr	r0, [sp, #4]
    431c:	f000 f8c6 	bl	44ac <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4320:	bf00      	nop
    4322:	b003      	add	sp, #12
    4324:	f85d fb04 	ldr.w	pc, [sp], #4

00004328 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4328:	b500      	push	{lr}
    432a:	b085      	sub	sp, #20
    432c:	9001      	str	r0, [sp, #4]
    432e:	460b      	mov	r3, r1
    4330:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4334:	9b01      	ldr	r3, [sp, #4]
    4336:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4338:	f89d 3003 	ldrb.w	r3, [sp, #3]
    433c:	2b00      	cmp	r3, #0
    433e:	d003      	beq.n	4348 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    4340:	2300      	movs	r3, #0
    4342:	f8ad 300c 	strh.w	r3, [sp, #12]
    4346:	e002      	b.n	434e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4348:	2301      	movs	r3, #1
    434a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    434e:	ab02      	add	r3, sp, #8
    4350:	4618      	mov	r0, r3
    4352:	f7ff ffdc 	bl	430e <Clock_Ip_ClockSetSimClkoutEnable>
}
    4356:	bf00      	nop
    4358:	b005      	add	sp, #20
    435a:	f85d fb04 	ldr.w	pc, [sp], #4

0000435e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    435e:	b500      	push	{lr}
    4360:	b083      	sub	sp, #12
    4362:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4364:	9b01      	ldr	r3, [sp, #4]
    4366:	2b00      	cmp	r3, #0
    4368:	d002      	beq.n	4370 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    436a:	9801      	ldr	r0, [sp, #4]
    436c:	f000 f8b6 	bl	44dc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4370:	bf00      	nop
    4372:	b003      	add	sp, #12
    4374:	f85d fb04 	ldr.w	pc, [sp], #4

00004378 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4378:	b500      	push	{lr}
    437a:	b085      	sub	sp, #20
    437c:	9001      	str	r0, [sp, #4]
    437e:	460b      	mov	r3, r1
    4380:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4384:	9b01      	ldr	r3, [sp, #4]
    4386:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4388:	f89d 3003 	ldrb.w	r3, [sp, #3]
    438c:	2b00      	cmp	r3, #0
    438e:	d003      	beq.n	4398 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    4390:	2300      	movs	r3, #0
    4392:	f8ad 300c 	strh.w	r3, [sp, #12]
    4396:	e002      	b.n	439e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4398:	2301      	movs	r3, #1
    439a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    439e:	ab02      	add	r3, sp, #8
    43a0:	4618      	mov	r0, r3
    43a2:	f7ff ffdc 	bl	435e <Clock_Ip_ClockSetPccCgcEnable>
}
    43a6:	bf00      	nop
    43a8:	b005      	add	sp, #20
    43aa:	f85d fb04 	ldr.w	pc, [sp], #4

000043ae <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    43ae:	b500      	push	{lr}
    43b0:	b083      	sub	sp, #12
    43b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43b4:	9b01      	ldr	r3, [sp, #4]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d002      	beq.n	43c0 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    43ba:	9801      	ldr	r0, [sp, #4]
    43bc:	f000 f8bc 	bl	4538 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43c0:	bf00      	nop
    43c2:	b003      	add	sp, #12
    43c4:	f85d fb04 	ldr.w	pc, [sp], #4

000043c8 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    43c8:	b500      	push	{lr}
    43ca:	b085      	sub	sp, #20
    43cc:	9001      	str	r0, [sp, #4]
    43ce:	460b      	mov	r3, r1
    43d0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    43d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    43dc:	2b00      	cmp	r3, #0
    43de:	d003      	beq.n	43e8 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    43e0:	2300      	movs	r3, #0
    43e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    43e6:	e002      	b.n	43ee <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    43e8:	2301      	movs	r3, #1
    43ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    43ee:	ab02      	add	r3, sp, #8
    43f0:	4618      	mov	r0, r3
    43f2:	f7ff ffdc 	bl	43ae <Clock_Ip_ClockSetSimGate>
}
    43f6:	bf00      	nop
    43f8:	b005      	add	sp, #20
    43fa:	f85d fb04 	ldr.w	pc, [sp], #4

000043fe <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    43fe:	b500      	push	{lr}
    4400:	b083      	sub	sp, #12
    4402:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4404:	9b01      	ldr	r3, [sp, #4]
    4406:	2b00      	cmp	r3, #0
    4408:	d002      	beq.n	4410 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    440a:	9801      	ldr	r0, [sp, #4]
    440c:	f000 f8c0 	bl	4590 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4410:	bf00      	nop
    4412:	b003      	add	sp, #12
    4414:	f85d fb04 	ldr.w	pc, [sp], #4

00004418 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4418:	b500      	push	{lr}
    441a:	b085      	sub	sp, #20
    441c:	9001      	str	r0, [sp, #4]
    441e:	460b      	mov	r3, r1
    4420:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4424:	9b01      	ldr	r3, [sp, #4]
    4426:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4428:	f89d 3003 	ldrb.w	r3, [sp, #3]
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    4430:	2300      	movs	r3, #0
    4432:	f8ad 300c 	strh.w	r3, [sp, #12]
    4436:	e002      	b.n	443e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4438:	2301      	movs	r3, #1
    443a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    443e:	ab02      	add	r3, sp, #8
    4440:	4618      	mov	r0, r3
    4442:	f7ff ffdc 	bl	43fe <Clock_Ip_ClockSetSimTraceEnable>
}
    4446:	bf00      	nop
    4448:	b005      	add	sp, #20
    444a:	f85d fb04 	ldr.w	pc, [sp], #4

0000444e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    444e:	b084      	sub	sp, #16
    4450:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    4452:	4b09      	ldr	r3, [pc, #36]	; (4478 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4454:	691b      	ldr	r3, [r3, #16]
    4456:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    4458:	9b03      	ldr	r3, [sp, #12]
    445a:	f023 0301 	bic.w	r3, r3, #1
    445e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4460:	9b01      	ldr	r3, [sp, #4]
    4462:	889b      	ldrh	r3, [r3, #4]
    4464:	461a      	mov	r2, r3
    4466:	9b03      	ldr	r3, [sp, #12]
    4468:	4313      	orrs	r3, r2
    446a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    446c:	4a02      	ldr	r2, [pc, #8]	; (4478 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    446e:	9b03      	ldr	r3, [sp, #12]
    4470:	6113      	str	r3, [r2, #16]
}
    4472:	bf00      	nop
    4474:	b004      	add	sp, #16
    4476:	4770      	bx	lr
    4478:	40048000 	.word	0x40048000

0000447c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    447c:	b084      	sub	sp, #16
    447e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    4480:	4b09      	ldr	r3, [pc, #36]	; (44a8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4482:	691b      	ldr	r3, [r3, #16]
    4484:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    4486:	9b03      	ldr	r3, [sp, #12]
    4488:	f023 0302 	bic.w	r3, r3, #2
    448c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    448e:	9b01      	ldr	r3, [sp, #4]
    4490:	889b      	ldrh	r3, [r3, #4]
    4492:	005b      	lsls	r3, r3, #1
    4494:	9a03      	ldr	r2, [sp, #12]
    4496:	4313      	orrs	r3, r2
    4498:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    449a:	4a03      	ldr	r2, [pc, #12]	; (44a8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    449c:	9b03      	ldr	r3, [sp, #12]
    449e:	6113      	str	r3, [r2, #16]
}
    44a0:	bf00      	nop
    44a2:	b004      	add	sp, #16
    44a4:	4770      	bx	lr
    44a6:	bf00      	nop
    44a8:	40048000 	.word	0x40048000

000044ac <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    44ac:	b084      	sub	sp, #16
    44ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    44b0:	4b09      	ldr	r3, [pc, #36]	; (44d8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    44b2:	685b      	ldr	r3, [r3, #4]
    44b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    44b6:	9b03      	ldr	r3, [sp, #12]
    44b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    44bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    44be:	9b01      	ldr	r3, [sp, #4]
    44c0:	889b      	ldrh	r3, [r3, #4]
    44c2:	02db      	lsls	r3, r3, #11
    44c4:	9a03      	ldr	r2, [sp, #12]
    44c6:	4313      	orrs	r3, r2
    44c8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    44ca:	4a03      	ldr	r2, [pc, #12]	; (44d8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    44cc:	9b03      	ldr	r3, [sp, #12]
    44ce:	6053      	str	r3, [r2, #4]
}
    44d0:	bf00      	nop
    44d2:	b004      	add	sp, #16
    44d4:	4770      	bx	lr
    44d6:	bf00      	nop
    44d8:	40048000 	.word	0x40048000

000044dc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    44dc:	b084      	sub	sp, #16
    44de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    44e0:	4913      	ldr	r1, [pc, #76]	; (4530 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    44e2:	9b01      	ldr	r3, [sp, #4]
    44e4:	681a      	ldr	r2, [r3, #0]
    44e6:	4813      	ldr	r0, [pc, #76]	; (4534 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    44e8:	4613      	mov	r3, r2
    44ea:	00db      	lsls	r3, r3, #3
    44ec:	4413      	add	r3, r2
    44ee:	4403      	add	r3, r0
    44f0:	3306      	adds	r3, #6
    44f2:	781b      	ldrb	r3, [r3, #0]
    44f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    44f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    44fa:	9b03      	ldr	r3, [sp, #12]
    44fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    4500:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    4502:	9b01      	ldr	r3, [sp, #4]
    4504:	889b      	ldrh	r3, [r3, #4]
    4506:	079b      	lsls	r3, r3, #30
    4508:	9a03      	ldr	r2, [sp, #12]
    450a:	4313      	orrs	r3, r2
    450c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    450e:	4908      	ldr	r1, [pc, #32]	; (4530 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    4510:	9b01      	ldr	r3, [sp, #4]
    4512:	681a      	ldr	r2, [r3, #0]
    4514:	4807      	ldr	r0, [pc, #28]	; (4534 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4516:	4613      	mov	r3, r2
    4518:	00db      	lsls	r3, r3, #3
    451a:	4413      	add	r3, r2
    451c:	4403      	add	r3, r0
    451e:	3306      	adds	r3, #6
    4520:	781b      	ldrb	r3, [r3, #0]
    4522:	461a      	mov	r2, r3
    4524:	9b03      	ldr	r3, [sp, #12]
    4526:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    452a:	bf00      	nop
    452c:	b004      	add	sp, #16
    452e:	4770      	bx	lr
    4530:	40065000 	.word	0x40065000
    4534:	000198a0 	.word	0x000198a0

00004538 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4538:	b086      	sub	sp, #24
    453a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    453c:	9b01      	ldr	r3, [sp, #4]
    453e:	889b      	ldrh	r3, [r3, #4]
    4540:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    4542:	9b01      	ldr	r3, [sp, #4]
    4544:	681a      	ldr	r2, [r3, #0]
    4546:	4910      	ldr	r1, [pc, #64]	; (4588 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    4548:	4613      	mov	r3, r2
    454a:	00db      	lsls	r3, r3, #3
    454c:	4413      	add	r3, r2
    454e:	440b      	add	r3, r1
    4550:	3306      	adds	r3, #6
    4552:	781b      	ldrb	r3, [r3, #0]
    4554:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    4556:	4b0d      	ldr	r3, [pc, #52]	; (458c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    455a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    455c:	2201      	movs	r2, #1
    455e:	9b04      	ldr	r3, [sp, #16]
    4560:	fa02 f303 	lsl.w	r3, r2, r3
    4564:	43db      	mvns	r3, r3
    4566:	9a03      	ldr	r2, [sp, #12]
    4568:	4013      	ands	r3, r2
    456a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    456c:	9a05      	ldr	r2, [sp, #20]
    456e:	9b04      	ldr	r3, [sp, #16]
    4570:	fa02 f303 	lsl.w	r3, r2, r3
    4574:	9a03      	ldr	r2, [sp, #12]
    4576:	4313      	orrs	r3, r2
    4578:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    457a:	4a04      	ldr	r2, [pc, #16]	; (458c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    457c:	9b03      	ldr	r3, [sp, #12]
    457e:	6413      	str	r3, [r2, #64]	; 0x40
}
    4580:	bf00      	nop
    4582:	b006      	add	sp, #24
    4584:	4770      	bx	lr
    4586:	bf00      	nop
    4588:	000198a0 	.word	0x000198a0
    458c:	40048000 	.word	0x40048000

00004590 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4590:	b084      	sub	sp, #16
    4592:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4594:	4b0a      	ldr	r3, [pc, #40]	; (45c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4598:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    459a:	9b01      	ldr	r3, [sp, #4]
    459c:	889b      	ldrh	r3, [r3, #4]
    459e:	2b01      	cmp	r3, #1
    45a0:	d104      	bne.n	45ac <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    45a2:	9b03      	ldr	r3, [sp, #12]
    45a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    45a8:	9303      	str	r3, [sp, #12]
    45aa:	e003      	b.n	45b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    45ac:	9b03      	ldr	r3, [sp, #12]
    45ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    45b2:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    45b4:	4a02      	ldr	r2, [pc, #8]	; (45c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    45b6:	9b03      	ldr	r3, [sp, #12]
    45b8:	6693      	str	r3, [r2, #104]	; 0x68
}
    45ba:	bf00      	nop
    45bc:	b004      	add	sp, #16
    45be:	4770      	bx	lr
    45c0:	40048000 	.word	0x40048000

000045c4 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    45c4:	b082      	sub	sp, #8
    45c6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    45c8:	bf00      	nop
    45ca:	b002      	add	sp, #8
    45cc:	4770      	bx	lr

000045ce <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    45ce:	b082      	sub	sp, #8
    45d0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    45d2:	bf00      	nop
    45d4:	b002      	add	sp, #8
    45d6:	4770      	bx	lr

000045d8 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    45d8:	b500      	push	{lr}
    45da:	b083      	sub	sp, #12
    45dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45de:	9b01      	ldr	r3, [sp, #4]
    45e0:	2b00      	cmp	r3, #0
    45e2:	d002      	beq.n	45ea <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    45e4:	9801      	ldr	r0, [sp, #4]
    45e6:	f000 f8d1 	bl	478c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45ea:	bf00      	nop
    45ec:	b003      	add	sp, #12
    45ee:	f85d fb04 	ldr.w	pc, [sp], #4

000045f2 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    45f2:	b500      	push	{lr}
    45f4:	b083      	sub	sp, #12
    45f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45f8:	9b01      	ldr	r3, [sp, #4]
    45fa:	2b00      	cmp	r3, #0
    45fc:	d002      	beq.n	4604 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    45fe:	9801      	ldr	r0, [sp, #4]
    4600:	f000 f950 	bl	48a4 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4604:	bf00      	nop
    4606:	b003      	add	sp, #12
    4608:	f85d fb04 	ldr.w	pc, [sp], #4

0000460c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    460c:	b500      	push	{lr}
    460e:	b083      	sub	sp, #12
    4610:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    4612:	9801      	ldr	r0, [sp, #4]
    4614:	f000 f98e 	bl	4934 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4618:	bf00      	nop
    461a:	b003      	add	sp, #12
    461c:	f85d fb04 	ldr.w	pc, [sp], #4

00004620 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    4620:	b500      	push	{lr}
    4622:	b083      	sub	sp, #12
    4624:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4626:	9b01      	ldr	r3, [sp, #4]
    4628:	2b00      	cmp	r3, #0
    462a:	d002      	beq.n	4632 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    462c:	9801      	ldr	r0, [sp, #4]
    462e:	f000 f999 	bl	4964 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4632:	bf00      	nop
    4634:	b003      	add	sp, #12
    4636:	f85d fb04 	ldr.w	pc, [sp], #4

0000463a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    463a:	b500      	push	{lr}
    463c:	b083      	sub	sp, #12
    463e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4640:	9b01      	ldr	r3, [sp, #4]
    4642:	2b00      	cmp	r3, #0
    4644:	d002      	beq.n	464c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    4646:	9801      	ldr	r0, [sp, #4]
    4648:	f000 f9b0 	bl	49ac <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    464c:	bf00      	nop
    464e:	b003      	add	sp, #12
    4650:	f85d fb04 	ldr.w	pc, [sp], #4

00004654 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    4654:	b500      	push	{lr}
    4656:	b083      	sub	sp, #12
    4658:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    465a:	9801      	ldr	r0, [sp, #4]
    465c:	f000 f9ba 	bl	49d4 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4660:	bf00      	nop
    4662:	b003      	add	sp, #12
    4664:	f85d fb04 	ldr.w	pc, [sp], #4

00004668 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4668:	b500      	push	{lr}
    466a:	b083      	sub	sp, #12
    466c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    466e:	9b01      	ldr	r3, [sp, #4]
    4670:	2b00      	cmp	r3, #0
    4672:	d002      	beq.n	467a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    4674:	9801      	ldr	r0, [sp, #4]
    4676:	f000 f9bd 	bl	49f4 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    467a:	bf00      	nop
    467c:	b003      	add	sp, #12
    467e:	f85d fb04 	ldr.w	pc, [sp], #4

00004682 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4682:	b500      	push	{lr}
    4684:	b083      	sub	sp, #12
    4686:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4688:	9b01      	ldr	r3, [sp, #4]
    468a:	2b00      	cmp	r3, #0
    468c:	d002      	beq.n	4694 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    468e:	9801      	ldr	r0, [sp, #4]
    4690:	f000 f9d4 	bl	4a3c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4694:	bf00      	nop
    4696:	b003      	add	sp, #12
    4698:	f85d fb04 	ldr.w	pc, [sp], #4

0000469c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    469c:	b500      	push	{lr}
    469e:	b083      	sub	sp, #12
    46a0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    46a2:	9801      	ldr	r0, [sp, #4]
    46a4:	f000 f9de 	bl	4a64 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    46a8:	bf00      	nop
    46aa:	b003      	add	sp, #12
    46ac:	f85d fb04 	ldr.w	pc, [sp], #4

000046b0 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    46b0:	b500      	push	{lr}
    46b2:	b089      	sub	sp, #36	; 0x24
    46b4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    46b6:	2300      	movs	r3, #0
    46b8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    46bc:	4b20      	ldr	r3, [pc, #128]	; (4740 <SetInputSouceSytemClock+0x90>)
    46be:	695b      	ldr	r3, [r3, #20]
    46c0:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    46c2:	9b06      	ldr	r3, [sp, #24]
    46c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46c8:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    46ca:	9b01      	ldr	r3, [sp, #4]
    46cc:	061b      	lsls	r3, r3, #24
    46ce:	9a06      	ldr	r2, [sp, #24]
    46d0:	4313      	orrs	r3, r2
    46d2:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    46d4:	4a1a      	ldr	r2, [pc, #104]	; (4740 <SetInputSouceSytemClock+0x90>)
    46d6:	9b06      	ldr	r3, [sp, #24]
    46d8:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    46da:	aa02      	add	r2, sp, #8
    46dc:	a903      	add	r1, sp, #12
    46de:	a804      	add	r0, sp, #16
    46e0:	f24c 3350 	movw	r3, #50000	; 0xc350
    46e4:	f7ff f9ac 	bl	3a40 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    46e8:	4b15      	ldr	r3, [pc, #84]	; (4740 <SetInputSouceSytemClock+0x90>)
    46ea:	691b      	ldr	r3, [r3, #16]
    46ec:	0e1b      	lsrs	r3, r3, #24
    46ee:	f003 030f 	and.w	r3, r3, #15
    46f2:	9a01      	ldr	r2, [sp, #4]
    46f4:	429a      	cmp	r2, r3
    46f6:	bf0c      	ite	eq
    46f8:	2301      	moveq	r3, #1
    46fa:	2300      	movne	r3, #0
    46fc:	b2db      	uxtb	r3, r3
    46fe:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4700:	9a02      	ldr	r2, [sp, #8]
    4702:	a903      	add	r1, sp, #12
    4704:	ab04      	add	r3, sp, #16
    4706:	4618      	mov	r0, r3
    4708:	f7ff f9b4 	bl	3a74 <Clock_Ip_TimeoutExpired>
    470c:	4603      	mov	r3, r0
    470e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    4712:	9b05      	ldr	r3, [sp, #20]
    4714:	2b00      	cmp	r3, #0
    4716:	d106      	bne.n	4726 <SetInputSouceSytemClock+0x76>
    4718:	f89d 301f 	ldrb.w	r3, [sp, #31]
    471c:	f083 0301 	eor.w	r3, r3, #1
    4720:	b2db      	uxtb	r3, r3
    4722:	2b00      	cmp	r3, #0
    4724:	d1e0      	bne.n	46e8 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    4726:	f89d 301f 	ldrb.w	r3, [sp, #31]
    472a:	2b00      	cmp	r3, #0
    472c:	d003      	beq.n	4736 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    472e:	2105      	movs	r1, #5
    4730:	2001      	movs	r0, #1
    4732:	f7ff f975 	bl	3a20 <Clock_Ip_ReportClockErrors>
    }
}
    4736:	bf00      	nop
    4738:	b009      	add	sp, #36	; 0x24
    473a:	f85d fb04 	ldr.w	pc, [sp], #4
    473e:	bf00      	nop
    4740:	40064000 	.word	0x40064000

00004744 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4744:	b500      	push	{lr}
    4746:	b083      	sub	sp, #12
    4748:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    474a:	9b01      	ldr	r3, [sp, #4]
    474c:	2b00      	cmp	r3, #0
    474e:	d002      	beq.n	4756 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    4750:	9801      	ldr	r0, [sp, #4]
    4752:	f000 f997 	bl	4a84 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4756:	bf00      	nop
    4758:	b003      	add	sp, #12
    475a:	f85d fb04 	ldr.w	pc, [sp], #4

0000475e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    475e:	b500      	push	{lr}
    4760:	b083      	sub	sp, #12
    4762:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4764:	9b01      	ldr	r3, [sp, #4]
    4766:	2b00      	cmp	r3, #0
    4768:	d002      	beq.n	4770 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    476a:	9801      	ldr	r0, [sp, #4]
    476c:	f000 fa7e 	bl	4c6c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4770:	bf00      	nop
    4772:	b003      	add	sp, #12
    4774:	f85d fb04 	ldr.w	pc, [sp], #4

00004778 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    4778:	b500      	push	{lr}
    477a:	b083      	sub	sp, #12
    477c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    477e:	9801      	ldr	r0, [sp, #4]
    4780:	f000 fab8 	bl	4cf4 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4784:	bf00      	nop
    4786:	b003      	add	sp, #12
    4788:	f85d fb04 	ldr.w	pc, [sp], #4

0000478c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    478c:	b500      	push	{lr}
    478e:	b08b      	sub	sp, #44	; 0x2c
    4790:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4792:	2300      	movs	r3, #0
    4794:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    4798:	9b01      	ldr	r3, [sp, #4]
    479a:	2b00      	cmp	r3, #0
    479c:	d10b      	bne.n	47b6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    479e:	2305      	movs	r3, #5
    47a0:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    47a2:	2301      	movs	r3, #1
    47a4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    47a8:	2301      	movs	r3, #1
    47aa:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    47ae:	2301      	movs	r3, #1
    47b0:	f88d 3010 	strb.w	r3, [sp, #16]
    47b4:	e00e      	b.n	47d4 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    47b6:	9b01      	ldr	r3, [sp, #4]
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    47bc:	9b01      	ldr	r3, [sp, #4]
    47be:	79db      	ldrb	r3, [r3, #7]
    47c0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    47c4:	9b01      	ldr	r3, [sp, #4]
    47c6:	889b      	ldrh	r3, [r3, #4]
    47c8:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    47cc:	9b01      	ldr	r3, [sp, #4]
    47ce:	7a1b      	ldrb	r3, [r3, #8]
    47d0:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    47d4:	4b32      	ldr	r3, [pc, #200]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47da:	4a31      	ldr	r2, [pc, #196]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    47e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    47e4:	4b2e      	ldr	r3, [pc, #184]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47ea:	4a2d      	ldr	r2, [pc, #180]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47ec:	f023 0301 	bic.w	r3, r3, #1
    47f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    47f4:	4b2a      	ldr	r3, [pc, #168]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47fa:	4a29      	ldr	r2, [pc, #164]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47fc:	f023 0304 	bic.w	r3, r3, #4
    4800:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    4804:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4808:	2b01      	cmp	r3, #1
    480a:	d144      	bne.n	4896 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    480c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4810:	4a23      	ldr	r2, [pc, #140]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4812:	f003 0301 	and.w	r3, r3, #1
    4816:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    481a:	4b21      	ldr	r3, [pc, #132]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    481c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4820:	4a1f      	ldr	r2, [pc, #124]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4822:	f043 0301 	orr.w	r3, r3, #1
    4826:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    482a:	4b1d      	ldr	r3, [pc, #116]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    482c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4830:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4834:	009b      	lsls	r3, r3, #2
    4836:	f003 0304 	and.w	r3, r3, #4
    483a:	4919      	ldr	r1, [pc, #100]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    483c:	4313      	orrs	r3, r2
    483e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4842:	aa05      	add	r2, sp, #20
    4844:	a906      	add	r1, sp, #24
    4846:	a807      	add	r0, sp, #28
    4848:	f24c 3350 	movw	r3, #50000	; 0xc350
    484c:	f7ff f8f8 	bl	3a40 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4850:	4b13      	ldr	r3, [pc, #76]	; (48a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4856:	0e1b      	lsrs	r3, r3, #24
    4858:	f003 0301 	and.w	r3, r3, #1
    485c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    485e:	9a05      	ldr	r2, [sp, #20]
    4860:	a906      	add	r1, sp, #24
    4862:	ab07      	add	r3, sp, #28
    4864:	4618      	mov	r0, r3
    4866:	f7ff f905 	bl	3a74 <Clock_Ip_TimeoutExpired>
    486a:	4603      	mov	r3, r0
    486c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4870:	9b08      	ldr	r3, [sp, #32]
    4872:	2b00      	cmp	r3, #0
    4874:	d106      	bne.n	4884 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    4876:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    487a:	f083 0301 	eor.w	r3, r3, #1
    487e:	b2db      	uxtb	r3, r3
    4880:	2b00      	cmp	r3, #0
    4882:	d1e5      	bne.n	4850 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4884:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4888:	2b00      	cmp	r3, #0
    488a:	d004      	beq.n	4896 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    488c:	9b02      	ldr	r3, [sp, #8]
    488e:	4619      	mov	r1, r3
    4890:	2001      	movs	r0, #1
    4892:	f7ff f8c5 	bl	3a20 <Clock_Ip_ReportClockErrors>
        }
    }
}
    4896:	bf00      	nop
    4898:	b00b      	add	sp, #44	; 0x2c
    489a:	f85d fb04 	ldr.w	pc, [sp], #4
    489e:	bf00      	nop
    48a0:	40064000 	.word	0x40064000

000048a4 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    48a4:	b500      	push	{lr}
    48a6:	b089      	sub	sp, #36	; 0x24
    48a8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    48aa:	2300      	movs	r3, #0
    48ac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    48b0:	4b1f      	ldr	r3, [pc, #124]	; (4930 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    48b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48b6:	4a1e      	ldr	r2, [pc, #120]	; (4930 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    48b8:	f043 0301 	orr.w	r3, r3, #1
    48bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    48c0:	4b1b      	ldr	r3, [pc, #108]	; (4930 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    48c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48c6:	4a1a      	ldr	r2, [pc, #104]	; (4930 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    48c8:	f043 0304 	orr.w	r3, r3, #4
    48cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    48d0:	aa03      	add	r2, sp, #12
    48d2:	a904      	add	r1, sp, #16
    48d4:	a805      	add	r0, sp, #20
    48d6:	f24c 3350 	movw	r3, #50000	; 0xc350
    48da:	f7ff f8b1 	bl	3a40 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    48de:	4b14      	ldr	r3, [pc, #80]	; (4930 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    48e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48e4:	0e1b      	lsrs	r3, r3, #24
    48e6:	f003 0301 	and.w	r3, r3, #1
    48ea:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    48ec:	9a03      	ldr	r2, [sp, #12]
    48ee:	a904      	add	r1, sp, #16
    48f0:	ab05      	add	r3, sp, #20
    48f2:	4618      	mov	r0, r3
    48f4:	f7ff f8be 	bl	3a74 <Clock_Ip_TimeoutExpired>
    48f8:	4603      	mov	r3, r0
    48fa:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    48fe:	9b06      	ldr	r3, [sp, #24]
    4900:	2b00      	cmp	r3, #0
    4902:	d106      	bne.n	4912 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    4904:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4908:	f083 0301 	eor.w	r3, r3, #1
    490c:	b2db      	uxtb	r3, r3
    490e:	2b00      	cmp	r3, #0
    4910:	d1e5      	bne.n	48de <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    4912:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4916:	2b00      	cmp	r3, #0
    4918:	d005      	beq.n	4926 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    491a:	9b01      	ldr	r3, [sp, #4]
    491c:	681b      	ldr	r3, [r3, #0]
    491e:	4619      	mov	r1, r3
    4920:	2001      	movs	r0, #1
    4922:	f7ff f87d 	bl	3a20 <Clock_Ip_ReportClockErrors>
    }
}
    4926:	bf00      	nop
    4928:	b009      	add	sp, #36	; 0x24
    492a:	f85d fb04 	ldr.w	pc, [sp], #4
    492e:	bf00      	nop
    4930:	40064000 	.word	0x40064000

00004934 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    4934:	b082      	sub	sp, #8
    4936:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    4938:	4b09      	ldr	r3, [pc, #36]	; (4960 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    493a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    493e:	4a08      	ldr	r2, [pc, #32]	; (4960 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4940:	f023 0301 	bic.w	r3, r3, #1
    4944:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4948:	4b05      	ldr	r3, [pc, #20]	; (4960 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    494a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    494e:	4a04      	ldr	r2, [pc, #16]	; (4960 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4950:	f023 0304 	bic.w	r3, r3, #4
    4954:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4958:	bf00      	nop
    495a:	b002      	add	sp, #8
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	40064000 	.word	0x40064000

00004964 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4964:	b082      	sub	sp, #8
    4966:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4968:	4b0f      	ldr	r3, [pc, #60]	; (49a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    496a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    496e:	4a0e      	ldr	r2, [pc, #56]	; (49a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4970:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4974:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4978:	4b0b      	ldr	r3, [pc, #44]	; (49a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    497a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    497e:	4a0a      	ldr	r2, [pc, #40]	; (49a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4980:	f023 0304 	bic.w	r3, r3, #4
    4984:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4988:	4b07      	ldr	r3, [pc, #28]	; (49a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    498a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    498e:	9b01      	ldr	r3, [sp, #4]
    4990:	7a1b      	ldrb	r3, [r3, #8]
    4992:	009b      	lsls	r3, r3, #2
    4994:	f003 0304 	and.w	r3, r3, #4
    4998:	4903      	ldr	r1, [pc, #12]	; (49a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    499a:	4313      	orrs	r3, r2
    499c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    49a0:	bf00      	nop
    49a2:	b002      	add	sp, #8
    49a4:	4770      	bx	lr
    49a6:	bf00      	nop
    49a8:	40064000 	.word	0x40064000

000049ac <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    49ac:	b082      	sub	sp, #8
    49ae:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    49b0:	9b01      	ldr	r3, [sp, #4]
    49b2:	889b      	ldrh	r3, [r3, #4]
    49b4:	2b01      	cmp	r3, #1
    49b6:	d107      	bne.n	49c8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    49b8:	4b05      	ldr	r3, [pc, #20]	; (49d0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    49ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49be:	4a04      	ldr	r2, [pc, #16]	; (49d0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    49c0:	f043 0304 	orr.w	r3, r3, #4
    49c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    49c8:	bf00      	nop
    49ca:	b002      	add	sp, #8
    49cc:	4770      	bx	lr
    49ce:	bf00      	nop
    49d0:	40064000 	.word	0x40064000

000049d4 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    49d4:	b082      	sub	sp, #8
    49d6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    49d8:	4b05      	ldr	r3, [pc, #20]	; (49f0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    49da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49de:	4a04      	ldr	r2, [pc, #16]	; (49f0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    49e0:	f023 0304 	bic.w	r3, r3, #4
    49e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    49e8:	bf00      	nop
    49ea:	b002      	add	sp, #8
    49ec:	4770      	bx	lr
    49ee:	bf00      	nop
    49f0:	40064000 	.word	0x40064000

000049f4 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    49f4:	b082      	sub	sp, #8
    49f6:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    49f8:	4b0f      	ldr	r3, [pc, #60]	; (4a38 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49fe:	4a0e      	ldr	r2, [pc, #56]	; (4a38 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4a04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4a08:	4b0b      	ldr	r3, [pc, #44]	; (4a38 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a0e:	4a0a      	ldr	r2, [pc, #40]	; (4a38 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a10:	f023 0302 	bic.w	r3, r3, #2
    4a14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4a18:	4b07      	ldr	r3, [pc, #28]	; (4a38 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4a1e:	9b01      	ldr	r3, [sp, #4]
    4a20:	7a5b      	ldrb	r3, [r3, #9]
    4a22:	005b      	lsls	r3, r3, #1
    4a24:	f003 0302 	and.w	r3, r3, #2
    4a28:	4903      	ldr	r1, [pc, #12]	; (4a38 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a2a:	4313      	orrs	r3, r2
    4a2c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4a30:	bf00      	nop
    4a32:	b002      	add	sp, #8
    4a34:	4770      	bx	lr
    4a36:	bf00      	nop
    4a38:	40064000 	.word	0x40064000

00004a3c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a3c:	b082      	sub	sp, #8
    4a3e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4a40:	9b01      	ldr	r3, [sp, #4]
    4a42:	889b      	ldrh	r3, [r3, #4]
    4a44:	2b01      	cmp	r3, #1
    4a46:	d107      	bne.n	4a58 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4a48:	4b05      	ldr	r3, [pc, #20]	; (4a60 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a4e:	4a04      	ldr	r2, [pc, #16]	; (4a60 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4a50:	f043 0302 	orr.w	r3, r3, #2
    4a54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4a58:	bf00      	nop
    4a5a:	b002      	add	sp, #8
    4a5c:	4770      	bx	lr
    4a5e:	bf00      	nop
    4a60:	40064000 	.word	0x40064000

00004a64 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4a64:	b082      	sub	sp, #8
    4a66:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4a68:	4b05      	ldr	r3, [pc, #20]	; (4a80 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4a6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a6e:	4a04      	ldr	r2, [pc, #16]	; (4a80 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4a70:	f023 0302 	bic.w	r3, r3, #2
    4a74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4a78:	bf00      	nop
    4a7a:	b002      	add	sp, #8
    4a7c:	4770      	bx	lr
    4a7e:	bf00      	nop
    4a80:	40064000 	.word	0x40064000

00004a84 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a84:	b500      	push	{lr}
    4a86:	b08b      	sub	sp, #44	; 0x2c
    4a88:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4a8a:	9b01      	ldr	r3, [sp, #4]
    4a8c:	681a      	ldr	r2, [r3, #0]
    4a8e:	4975      	ldr	r1, [pc, #468]	; (4c64 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4a90:	4613      	mov	r3, r2
    4a92:	00db      	lsls	r3, r3, #3
    4a94:	4413      	add	r3, r2
    4a96:	440b      	add	r3, r1
    4a98:	781b      	ldrb	r3, [r3, #0]
    4a9a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4a9c:	2300      	movs	r3, #0
    4a9e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    4aa2:	2300      	movs	r3, #0
    4aa4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4aa8:	4b6f      	ldr	r3, [pc, #444]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4aaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4aae:	4a6e      	ldr	r2, [pc, #440]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ab0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4ab4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4ab8:	4b6b      	ldr	r3, [pc, #428]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4aba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d07d      	beq.n	4bc2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4ac6:	9b01      	ldr	r3, [sp, #4]
    4ac8:	79db      	ldrb	r3, [r3, #7]
    4aca:	461a      	mov	r2, r3
    4acc:	4b66      	ldr	r3, [pc, #408]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ace:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ad2:	f003 0303 	and.w	r3, r3, #3
    4ad6:	429a      	cmp	r2, r3
    4ad8:	d10b      	bne.n	4af2 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4ada:	9b01      	ldr	r3, [sp, #4]
    4adc:	799b      	ldrb	r3, [r3, #6]
    4ade:	461a      	mov	r2, r3
    4ae0:	4b61      	ldr	r3, [pc, #388]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ae2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ae6:	08db      	lsrs	r3, r3, #3
    4ae8:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4aec:	429a      	cmp	r2, r3
    4aee:	f000 80b4 	beq.w	4c5a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    4af2:	4b5d      	ldr	r3, [pc, #372]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4af8:	f003 0301 	and.w	r3, r3, #1
    4afc:	2b00      	cmp	r3, #0
    4afe:	d105      	bne.n	4b0c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4b00:	2301      	movs	r3, #1
    4b02:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4b06:	2000      	movs	r0, #0
    4b08:	f7ff fd66 	bl	45d8 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4b0c:	2002      	movs	r0, #2
    4b0e:	f7ff fdcf 	bl	46b0 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4b12:	4b55      	ldr	r3, [pc, #340]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b14:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b18:	4a53      	ldr	r2, [pc, #332]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b1a:	f023 0301 	bic.w	r3, r3, #1
    4b1e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    4b22:	9b01      	ldr	r3, [sp, #4]
    4b24:	889b      	ldrh	r3, [r3, #4]
    4b26:	2b01      	cmp	r3, #1
    4b28:	f040 8097 	bne.w	4c5a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4b2c:	9b01      	ldr	r3, [sp, #4]
    4b2e:	79db      	ldrb	r3, [r3, #7]
    4b30:	4a4d      	ldr	r2, [pc, #308]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b32:	f003 0303 	and.w	r3, r3, #3
    4b36:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4b3a:	4b4b      	ldr	r3, [pc, #300]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b3c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4b40:	9b01      	ldr	r3, [sp, #4]
    4b42:	799b      	ldrb	r3, [r3, #6]
    4b44:	00db      	lsls	r3, r3, #3
    4b46:	f003 0308 	and.w	r3, r3, #8
    4b4a:	4313      	orrs	r3, r2
    4b4c:	4a46      	ldr	r2, [pc, #280]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b4e:	f043 0301 	orr.w	r3, r3, #1
    4b52:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4b56:	aa03      	add	r2, sp, #12
    4b58:	a904      	add	r1, sp, #16
    4b5a:	a805      	add	r0, sp, #20
    4b5c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4b60:	f7fe ff6e 	bl	3a40 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4b64:	4b40      	ldr	r3, [pc, #256]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b6a:	0e1b      	lsrs	r3, r3, #24
    4b6c:	f003 0301 	and.w	r3, r3, #1
    4b70:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4b72:	9a03      	ldr	r2, [sp, #12]
    4b74:	a904      	add	r1, sp, #16
    4b76:	ab05      	add	r3, sp, #20
    4b78:	4618      	mov	r0, r3
    4b7a:	f7fe ff7b 	bl	3a74 <Clock_Ip_TimeoutExpired>
    4b7e:	4603      	mov	r3, r0
    4b80:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4b84:	9b06      	ldr	r3, [sp, #24]
    4b86:	2b00      	cmp	r3, #0
    4b88:	d106      	bne.n	4b98 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4b8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b8e:	f083 0301 	eor.w	r3, r3, #1
    4b92:	b2db      	uxtb	r3, r3
    4b94:	2b00      	cmp	r3, #0
    4b96:	d1e5      	bne.n	4b64 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4b98:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d005      	beq.n	4bac <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4ba0:	9b01      	ldr	r3, [sp, #4]
    4ba2:	681b      	ldr	r3, [r3, #0]
    4ba4:	4619      	mov	r1, r3
    4ba6:	2001      	movs	r0, #1
    4ba8:	f7fe ff3a 	bl	3a20 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4bac:	2003      	movs	r0, #3
    4bae:	f7ff fd7f 	bl	46b0 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4bb2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d04f      	beq.n	4c5a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4bba:	2002      	movs	r0, #2
    4bbc:	f7ff fd26 	bl	460c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4bc0:	e04b      	b.n	4c5a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4bc2:	4b29      	ldr	r3, [pc, #164]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bc4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bc8:	4a27      	ldr	r2, [pc, #156]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bca:	f023 0301 	bic.w	r3, r3, #1
    4bce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    4bd2:	9b01      	ldr	r3, [sp, #4]
    4bd4:	889b      	ldrh	r3, [r3, #4]
    4bd6:	2b01      	cmp	r3, #1
    4bd8:	d13f      	bne.n	4c5a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4bda:	9b01      	ldr	r3, [sp, #4]
    4bdc:	79db      	ldrb	r3, [r3, #7]
    4bde:	4a22      	ldr	r2, [pc, #136]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4be0:	f003 0303 	and.w	r3, r3, #3
    4be4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4be8:	4b1f      	ldr	r3, [pc, #124]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bea:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4bee:	9b01      	ldr	r3, [sp, #4]
    4bf0:	799b      	ldrb	r3, [r3, #6]
    4bf2:	00db      	lsls	r3, r3, #3
    4bf4:	f003 0308 	and.w	r3, r3, #8
    4bf8:	4313      	orrs	r3, r2
    4bfa:	4a1b      	ldr	r2, [pc, #108]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bfc:	f043 0301 	orr.w	r3, r3, #1
    4c00:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4c04:	aa03      	add	r2, sp, #12
    4c06:	a904      	add	r1, sp, #16
    4c08:	a805      	add	r0, sp, #20
    4c0a:	f24c 3350 	movw	r3, #50000	; 0xc350
    4c0e:	f7fe ff17 	bl	3a40 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4c12:	4b15      	ldr	r3, [pc, #84]	; (4c68 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c14:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c18:	0e1b      	lsrs	r3, r3, #24
    4c1a:	f003 0301 	and.w	r3, r3, #1
    4c1e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4c20:	9a03      	ldr	r2, [sp, #12]
    4c22:	a904      	add	r1, sp, #16
    4c24:	ab05      	add	r3, sp, #20
    4c26:	4618      	mov	r0, r3
    4c28:	f7fe ff24 	bl	3a74 <Clock_Ip_TimeoutExpired>
    4c2c:	4603      	mov	r3, r0
    4c2e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4c32:	9b06      	ldr	r3, [sp, #24]
    4c34:	2b00      	cmp	r3, #0
    4c36:	d106      	bne.n	4c46 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4c38:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c3c:	f083 0301 	eor.w	r3, r3, #1
    4c40:	b2db      	uxtb	r3, r3
    4c42:	2b00      	cmp	r3, #0
    4c44:	d1e5      	bne.n	4c12 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4c46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d005      	beq.n	4c5a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4c4e:	9b01      	ldr	r3, [sp, #4]
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	4619      	mov	r1, r3
    4c54:	2001      	movs	r0, #1
    4c56:	f7fe fee3 	bl	3a20 <Clock_Ip_ReportClockErrors>
}
    4c5a:	bf00      	nop
    4c5c:	b00b      	add	sp, #44	; 0x2c
    4c5e:	f85d fb04 	ldr.w	pc, [sp], #4
    4c62:	bf00      	nop
    4c64:	000198a0 	.word	0x000198a0
    4c68:	40064000 	.word	0x40064000

00004c6c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4c6c:	b500      	push	{lr}
    4c6e:	b089      	sub	sp, #36	; 0x24
    4c70:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4c72:	2300      	movs	r3, #0
    4c74:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4c78:	9b01      	ldr	r3, [sp, #4]
    4c7a:	889b      	ldrh	r3, [r3, #4]
    4c7c:	2b01      	cmp	r3, #1
    4c7e:	d132      	bne.n	4ce6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4c80:	4b1b      	ldr	r3, [pc, #108]	; (4cf0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4c82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c86:	4a1a      	ldr	r2, [pc, #104]	; (4cf0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4c88:	f043 0301 	orr.w	r3, r3, #1
    4c8c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4c90:	aa03      	add	r2, sp, #12
    4c92:	a904      	add	r1, sp, #16
    4c94:	a805      	add	r0, sp, #20
    4c96:	f24c 3350 	movw	r3, #50000	; 0xc350
    4c9a:	f7fe fed1 	bl	3a40 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4c9e:	4b14      	ldr	r3, [pc, #80]	; (4cf0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4ca0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ca4:	0e1b      	lsrs	r3, r3, #24
    4ca6:	f003 0301 	and.w	r3, r3, #1
    4caa:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4cac:	9a03      	ldr	r2, [sp, #12]
    4cae:	a904      	add	r1, sp, #16
    4cb0:	ab05      	add	r3, sp, #20
    4cb2:	4618      	mov	r0, r3
    4cb4:	f7fe fede 	bl	3a74 <Clock_Ip_TimeoutExpired>
    4cb8:	4603      	mov	r3, r0
    4cba:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4cbe:	9b06      	ldr	r3, [sp, #24]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d106      	bne.n	4cd2 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4cc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cc8:	f083 0301 	eor.w	r3, r3, #1
    4ccc:	b2db      	uxtb	r3, r3
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d1e5      	bne.n	4c9e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4cd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d005      	beq.n	4ce6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4cda:	9b01      	ldr	r3, [sp, #4]
    4cdc:	681b      	ldr	r3, [r3, #0]
    4cde:	4619      	mov	r1, r3
    4ce0:	2001      	movs	r0, #1
    4ce2:	f7fe fe9d 	bl	3a20 <Clock_Ip_ReportClockErrors>
        }
    }
}
    4ce6:	bf00      	nop
    4ce8:	b009      	add	sp, #36	; 0x24
    4cea:	f85d fb04 	ldr.w	pc, [sp], #4
    4cee:	bf00      	nop
    4cf0:	40064000 	.word	0x40064000

00004cf4 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4cf4:	b082      	sub	sp, #8
    4cf6:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4cf8:	4b05      	ldr	r3, [pc, #20]	; (4d10 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4cfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cfe:	4a04      	ldr	r2, [pc, #16]	; (4d10 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4d00:	f023 0301 	bic.w	r3, r3, #1
    4d04:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4d08:	bf00      	nop
    4d0a:	b002      	add	sp, #8
    4d0c:	4770      	bx	lr
    4d0e:	bf00      	nop
    4d10:	40064000 	.word	0x40064000

00004d14 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4d14:	b082      	sub	sp, #8
    4d16:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4d18:	bf00      	nop
    4d1a:	b002      	add	sp, #8
    4d1c:	4770      	bx	lr

00004d1e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4d1e:	b082      	sub	sp, #8
    4d20:	9001      	str	r0, [sp, #4]
    4d22:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4d24:	bf00      	nop
    4d26:	b002      	add	sp, #8
    4d28:	4770      	bx	lr

00004d2a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4d2a:	b082      	sub	sp, #8
    4d2c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4d2e:	bf00      	nop
    4d30:	b002      	add	sp, #8
    4d32:	4770      	bx	lr

00004d34 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4d34:	b082      	sub	sp, #8
    4d36:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4d38:	bf00      	nop
    4d3a:	b002      	add	sp, #8
    4d3c:	4770      	bx	lr

00004d3e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4d3e:	b082      	sub	sp, #8
    4d40:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4d42:	2302      	movs	r3, #2
}
    4d44:	4618      	mov	r0, r3
    4d46:	b002      	add	sp, #8
    4d48:	4770      	bx	lr

00004d4a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4d4a:	b082      	sub	sp, #8
    4d4c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4d4e:	bf00      	nop
    4d50:	b002      	add	sp, #8
    4d52:	4770      	bx	lr

00004d54 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4d54:	b500      	push	{lr}
    4d56:	b083      	sub	sp, #12
    4d58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d5a:	9b01      	ldr	r3, [sp, #4]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d002      	beq.n	4d66 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4d60:	9801      	ldr	r0, [sp, #4]
    4d62:	f000 f870 	bl	4e46 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d66:	bf00      	nop
    4d68:	b003      	add	sp, #12
    4d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00004d6e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4d6e:	b500      	push	{lr}
    4d70:	b083      	sub	sp, #12
    4d72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d74:	9b01      	ldr	r3, [sp, #4]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d002      	beq.n	4d80 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4d7a:	9801      	ldr	r0, [sp, #4]
    4d7c:	f000 f89a 	bl	4eb4 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d80:	bf00      	nop
    4d82:	b003      	add	sp, #12
    4d84:	f85d fb04 	ldr.w	pc, [sp], #4

00004d88 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4d88:	b500      	push	{lr}
    4d8a:	b089      	sub	sp, #36	; 0x24
    4d8c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4d8e:	2301      	movs	r3, #1
    4d90:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4d92:	2300      	movs	r3, #0
    4d94:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4d98:	4b1e      	ldr	r3, [pc, #120]	; (4e14 <Clock_Ip_CompleteSpll+0x8c>)
    4d9a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d9e:	f003 0301 	and.w	r3, r3, #1
    4da2:	2b00      	cmp	r3, #0
    4da4:	d02f      	beq.n	4e06 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4da6:	aa02      	add	r2, sp, #8
    4da8:	a903      	add	r1, sp, #12
    4daa:	a804      	add	r0, sp, #16
    4dac:	f24c 3350 	movw	r3, #50000	; 0xc350
    4db0:	f7fe fe46 	bl	3a40 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4db4:	4b17      	ldr	r3, [pc, #92]	; (4e14 <Clock_Ip_CompleteSpll+0x8c>)
    4db6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4dba:	0e1b      	lsrs	r3, r3, #24
    4dbc:	f003 0301 	and.w	r3, r3, #1
    4dc0:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4dc2:	9a02      	ldr	r2, [sp, #8]
    4dc4:	a903      	add	r1, sp, #12
    4dc6:	ab04      	add	r3, sp, #16
    4dc8:	4618      	mov	r0, r3
    4dca:	f7fe fe53 	bl	3a74 <Clock_Ip_TimeoutExpired>
    4dce:	4603      	mov	r3, r0
    4dd0:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4dd4:	9b05      	ldr	r3, [sp, #20]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d106      	bne.n	4de8 <Clock_Ip_CompleteSpll+0x60>
    4dda:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4dde:	f083 0301 	eor.w	r3, r3, #1
    4de2:	b2db      	uxtb	r3, r3
    4de4:	2b00      	cmp	r3, #0
    4de6:	d1e5      	bne.n	4db4 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4de8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4dec:	f083 0301 	eor.w	r3, r3, #1
    4df0:	b2db      	uxtb	r3, r3
    4df2:	2b00      	cmp	r3, #0
    4df4:	d002      	beq.n	4dfc <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4df6:	2302      	movs	r3, #2
    4df8:	9307      	str	r3, [sp, #28]
    4dfa:	e006      	b.n	4e0a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4dfc:	9901      	ldr	r1, [sp, #4]
    4dfe:	2001      	movs	r0, #1
    4e00:	f7fe fe0e 	bl	3a20 <Clock_Ip_ReportClockErrors>
    4e04:	e001      	b.n	4e0a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4e06:	2300      	movs	r3, #0
    4e08:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4e0a:	9b07      	ldr	r3, [sp, #28]
}
    4e0c:	4618      	mov	r0, r3
    4e0e:	b009      	add	sp, #36	; 0x24
    4e10:	f85d fb04 	ldr.w	pc, [sp], #4
    4e14:	40064000 	.word	0x40064000

00004e18 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4e18:	b500      	push	{lr}
    4e1a:	b083      	sub	sp, #12
    4e1c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4e1e:	9801      	ldr	r0, [sp, #4]
    4e20:	f000 f886 	bl	4f30 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4e24:	bf00      	nop
    4e26:	b003      	add	sp, #12
    4e28:	f85d fb04 	ldr.w	pc, [sp], #4

00004e2c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4e2c:	b500      	push	{lr}
    4e2e:	b083      	sub	sp, #12
    4e30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e32:	9b01      	ldr	r3, [sp, #4]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d002      	beq.n	4e3e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4e38:	9801      	ldr	r0, [sp, #4]
    4e3a:	f000 f891 	bl	4f60 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e3e:	bf00      	nop
    4e40:	b003      	add	sp, #12
    4e42:	f85d fb04 	ldr.w	pc, [sp], #4

00004e46 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4e46:	b082      	sub	sp, #8
    4e48:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4e4a:	4b19      	ldr	r3, [pc, #100]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e4c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e50:	4a17      	ldr	r2, [pc, #92]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4e56:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4e5a:	4b15      	ldr	r3, [pc, #84]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e5c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e60:	4a13      	ldr	r2, [pc, #76]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4e66:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4e6a:	4b11      	ldr	r3, [pc, #68]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e6c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e70:	4a0f      	ldr	r2, [pc, #60]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4e76:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4e7a:	4b0d      	ldr	r3, [pc, #52]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e7c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e80:	4a0b      	ldr	r2, [pc, #44]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e82:	f023 0301 	bic.w	r3, r3, #1
    4e86:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4e8a:	4b09      	ldr	r3, [pc, #36]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e8c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4e90:	4a07      	ldr	r2, [pc, #28]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4e96:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4e9a:	4b05      	ldr	r3, [pc, #20]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e9c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4ea0:	4a03      	ldr	r2, [pc, #12]	; (4eb0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4ea2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4ea6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4eaa:	bf00      	nop
    4eac:	b002      	add	sp, #8
    4eae:	4770      	bx	lr
    4eb0:	40064000 	.word	0x40064000

00004eb4 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4eb4:	b082      	sub	sp, #8
    4eb6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4eb8:	9b01      	ldr	r3, [sp, #4]
    4eba:	889b      	ldrh	r3, [r3, #4]
    4ebc:	2b01      	cmp	r3, #1
    4ebe:	d12f      	bne.n	4f20 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4ec0:	4b1a      	ldr	r3, [pc, #104]	; (4f2c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4ec2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	7b5b      	ldrb	r3, [r3, #13]
    4eca:	3b01      	subs	r3, #1
    4ecc:	021b      	lsls	r3, r3, #8
    4ece:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4ed2:	9b01      	ldr	r3, [sp, #4]
    4ed4:	7d1b      	ldrb	r3, [r3, #20]
    4ed6:	3b10      	subs	r3, #16
    4ed8:	041b      	lsls	r3, r3, #16
    4eda:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4ede:	430b      	orrs	r3, r1
    4ee0:	4912      	ldr	r1, [pc, #72]	; (4f2c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4ee2:	4313      	orrs	r3, r2
    4ee4:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4ee8:	9b01      	ldr	r3, [sp, #4]
    4eea:	7fdb      	ldrb	r3, [r3, #31]
    4eec:	2b02      	cmp	r3, #2
    4eee:	d011      	beq.n	4f14 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4ef0:	2b02      	cmp	r3, #2
    4ef2:	dc17      	bgt.n	4f24 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d002      	beq.n	4efe <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4ef8:	2b01      	cmp	r3, #1
    4efa:	d005      	beq.n	4f08 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4efc:	e012      	b.n	4f24 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4efe:	4b0b      	ldr	r3, [pc, #44]	; (4f2c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4f00:	2200      	movs	r2, #0
    4f02:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4f06:	e00e      	b.n	4f26 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4f08:	4b08      	ldr	r3, [pc, #32]	; (4f2c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4f0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4f0e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4f12:	e008      	b.n	4f26 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4f14:	4b05      	ldr	r3, [pc, #20]	; (4f2c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4f16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4f1a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4f1e:	e002      	b.n	4f26 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4f20:	bf00      	nop
    4f22:	e000      	b.n	4f26 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4f24:	bf00      	nop
}
    4f26:	bf00      	nop
    4f28:	b002      	add	sp, #8
    4f2a:	4770      	bx	lr
    4f2c:	40064000 	.word	0x40064000

00004f30 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4f30:	b082      	sub	sp, #8
    4f32:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4f34:	4b09      	ldr	r3, [pc, #36]	; (4f5c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4f36:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f3a:	4a08      	ldr	r2, [pc, #32]	; (4f5c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4f3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4f40:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4f44:	4b05      	ldr	r3, [pc, #20]	; (4f5c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4f46:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f4a:	4a04      	ldr	r2, [pc, #16]	; (4f5c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4f4c:	f023 0301 	bic.w	r3, r3, #1
    4f50:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4f54:	bf00      	nop
    4f56:	b002      	add	sp, #8
    4f58:	4770      	bx	lr
    4f5a:	bf00      	nop
    4f5c:	40064000 	.word	0x40064000

00004f60 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4f60:	b082      	sub	sp, #8
    4f62:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	889b      	ldrh	r3, [r3, #4]
    4f68:	2b01      	cmp	r3, #1
    4f6a:	d107      	bne.n	4f7c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4f6c:	4b05      	ldr	r3, [pc, #20]	; (4f84 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4f6e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f72:	4a04      	ldr	r2, [pc, #16]	; (4f84 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4f74:	f043 0301 	orr.w	r3, r3, #1
    4f78:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4f7c:	bf00      	nop
    4f7e:	b002      	add	sp, #8
    4f80:	4770      	bx	lr
    4f82:	bf00      	nop
    4f84:	40064000 	.word	0x40064000

00004f88 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4f88:	b082      	sub	sp, #8
    4f8a:	9001      	str	r0, [sp, #4]
    4f8c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4f8e:	bf00      	nop
    4f90:	b002      	add	sp, #8
    4f92:	4770      	bx	lr

00004f94 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4f94:	b082      	sub	sp, #8
    4f96:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4f98:	bf00      	nop
    4f9a:	b002      	add	sp, #8
    4f9c:	4770      	bx	lr

00004f9e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f9e:	b500      	push	{lr}
    4fa0:	b083      	sub	sp, #12
    4fa2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fa4:	9b01      	ldr	r3, [sp, #4]
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	d002      	beq.n	4fb0 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4faa:	9801      	ldr	r0, [sp, #4]
    4fac:	f000 f8ee 	bl	518c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fb0:	bf00      	nop
    4fb2:	b003      	add	sp, #12
    4fb4:	f85d fb04 	ldr.w	pc, [sp], #4

00004fb8 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4fb8:	b500      	push	{lr}
    4fba:	b083      	sub	sp, #12
    4fbc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fbe:	9b01      	ldr	r3, [sp, #4]
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d002      	beq.n	4fca <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4fc4:	9801      	ldr	r0, [sp, #4]
    4fc6:	f000 f8ff 	bl	51c8 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fca:	bf00      	nop
    4fcc:	b003      	add	sp, #12
    4fce:	f85d fb04 	ldr.w	pc, [sp], #4

00004fd2 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4fd2:	b500      	push	{lr}
    4fd4:	b083      	sub	sp, #12
    4fd6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fd8:	9b01      	ldr	r3, [sp, #4]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d002      	beq.n	4fe4 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4fde:	9801      	ldr	r0, [sp, #4]
    4fe0:	f000 f912 	bl	5208 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fe4:	bf00      	nop
    4fe6:	b003      	add	sp, #12
    4fe8:	f85d fb04 	ldr.w	pc, [sp], #4

00004fec <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4fec:	b500      	push	{lr}
    4fee:	b083      	sub	sp, #12
    4ff0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d002      	beq.n	4ffe <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4ff8:	9801      	ldr	r0, [sp, #4]
    4ffa:	f000 f925 	bl	5248 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ffe:	bf00      	nop
    5000:	b003      	add	sp, #12
    5002:	f85d fb04 	ldr.w	pc, [sp], #4

00005006 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    5006:	b500      	push	{lr}
    5008:	b083      	sub	sp, #12
    500a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    500c:	9b01      	ldr	r3, [sp, #4]
    500e:	2b00      	cmp	r3, #0
    5010:	d002      	beq.n	5018 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    5012:	9801      	ldr	r0, [sp, #4]
    5014:	f000 f936 	bl	5284 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5018:	bf00      	nop
    501a:	b003      	add	sp, #12
    501c:	f85d fb04 	ldr.w	pc, [sp], #4

00005020 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    5020:	b500      	push	{lr}
    5022:	b083      	sub	sp, #12
    5024:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5026:	9b01      	ldr	r3, [sp, #4]
    5028:	2b00      	cmp	r3, #0
    502a:	d002      	beq.n	5032 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    502c:	9801      	ldr	r0, [sp, #4]
    502e:	f000 f949 	bl	52c4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5032:	bf00      	nop
    5034:	b003      	add	sp, #12
    5036:	f85d fb04 	ldr.w	pc, [sp], #4

0000503a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    503a:	b500      	push	{lr}
    503c:	b083      	sub	sp, #12
    503e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5040:	9b01      	ldr	r3, [sp, #4]
    5042:	2b00      	cmp	r3, #0
    5044:	d002      	beq.n	504c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    5046:	9801      	ldr	r0, [sp, #4]
    5048:	f000 f958 	bl	52fc <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    504c:	bf00      	nop
    504e:	b003      	add	sp, #12
    5050:	f85d fb04 	ldr.w	pc, [sp], #4

00005054 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    5054:	b500      	push	{lr}
    5056:	b083      	sub	sp, #12
    5058:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	2b00      	cmp	r3, #0
    505e:	d002      	beq.n	5066 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    5060:	9801      	ldr	r0, [sp, #4]
    5062:	f000 f969 	bl	5338 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5066:	bf00      	nop
    5068:	b003      	add	sp, #12
    506a:	f85d fb04 	ldr.w	pc, [sp], #4

0000506e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    506e:	b500      	push	{lr}
    5070:	b083      	sub	sp, #12
    5072:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5074:	9b01      	ldr	r3, [sp, #4]
    5076:	2b00      	cmp	r3, #0
    5078:	d002      	beq.n	5080 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    507a:	9801      	ldr	r0, [sp, #4]
    507c:	f000 f978 	bl	5370 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5080:	bf00      	nop
    5082:	b003      	add	sp, #12
    5084:	f85d fb04 	ldr.w	pc, [sp], #4

00005088 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    5088:	b500      	push	{lr}
    508a:	b083      	sub	sp, #12
    508c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	2b00      	cmp	r3, #0
    5092:	d002      	beq.n	509a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    5094:	9801      	ldr	r0, [sp, #4]
    5096:	f000 f989 	bl	53ac <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    509a:	bf00      	nop
    509c:	b003      	add	sp, #12
    509e:	f85d fb04 	ldr.w	pc, [sp], #4

000050a2 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    50a2:	b500      	push	{lr}
    50a4:	b083      	sub	sp, #12
    50a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d002      	beq.n	50b4 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    50ae:	9801      	ldr	r0, [sp, #4]
    50b0:	f000 f998 	bl	53e4 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50b4:	bf00      	nop
    50b6:	b003      	add	sp, #12
    50b8:	f85d fb04 	ldr.w	pc, [sp], #4

000050bc <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    50bc:	b500      	push	{lr}
    50be:	b083      	sub	sp, #12
    50c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	2b00      	cmp	r3, #0
    50c6:	d002      	beq.n	50ce <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    50c8:	9801      	ldr	r0, [sp, #4]
    50ca:	f000 f9a9 	bl	5420 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50ce:	bf00      	nop
    50d0:	b003      	add	sp, #12
    50d2:	f85d fb04 	ldr.w	pc, [sp], #4

000050d6 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    50d6:	b500      	push	{lr}
    50d8:	b083      	sub	sp, #12
    50da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50dc:	9b01      	ldr	r3, [sp, #4]
    50de:	2b00      	cmp	r3, #0
    50e0:	d002      	beq.n	50e8 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    50e2:	9801      	ldr	r0, [sp, #4]
    50e4:	f000 f9e6 	bl	54b4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50e8:	bf00      	nop
    50ea:	b003      	add	sp, #12
    50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000050f0 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    50f0:	b500      	push	{lr}
    50f2:	b083      	sub	sp, #12
    50f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	2b00      	cmp	r3, #0
    50fa:	d002      	beq.n	5102 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    50fc:	9801      	ldr	r0, [sp, #4]
    50fe:	f000 fa25 	bl	554c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5102:	bf00      	nop
    5104:	b003      	add	sp, #12
    5106:	f85d fb04 	ldr.w	pc, [sp], #4

0000510a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    510a:	b500      	push	{lr}
    510c:	b083      	sub	sp, #12
    510e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5110:	9b01      	ldr	r3, [sp, #4]
    5112:	2b00      	cmp	r3, #0
    5114:	d002      	beq.n	511c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    5116:	9801      	ldr	r0, [sp, #4]
    5118:	f000 fa2a 	bl	5570 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    511c:	bf00      	nop
    511e:	b003      	add	sp, #12
    5120:	f85d fb04 	ldr.w	pc, [sp], #4

00005124 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    5124:	b500      	push	{lr}
    5126:	b083      	sub	sp, #12
    5128:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    512a:	9b01      	ldr	r3, [sp, #4]
    512c:	2b00      	cmp	r3, #0
    512e:	d002      	beq.n	5136 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    5130:	9801      	ldr	r0, [sp, #4]
    5132:	f000 fa3b 	bl	55ac <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5136:	bf00      	nop
    5138:	b003      	add	sp, #12
    513a:	f85d fb04 	ldr.w	pc, [sp], #4

0000513e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    513e:	b500      	push	{lr}
    5140:	b083      	sub	sp, #12
    5142:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5144:	9b01      	ldr	r3, [sp, #4]
    5146:	2b00      	cmp	r3, #0
    5148:	d002      	beq.n	5150 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    514a:	9801      	ldr	r0, [sp, #4]
    514c:	f000 fa56 	bl	55fc <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5150:	bf00      	nop
    5152:	b003      	add	sp, #12
    5154:	f85d fb04 	ldr.w	pc, [sp], #4

00005158 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    5158:	b500      	push	{lr}
    515a:	b083      	sub	sp, #12
    515c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    515e:	9b01      	ldr	r3, [sp, #4]
    5160:	2b00      	cmp	r3, #0
    5162:	d002      	beq.n	516a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    5164:	9801      	ldr	r0, [sp, #4]
    5166:	f000 fa79 	bl	565c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    516a:	bf00      	nop
    516c:	b003      	add	sp, #12
    516e:	f85d fb04 	ldr.w	pc, [sp], #4

00005172 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    5172:	b500      	push	{lr}
    5174:	b083      	sub	sp, #12
    5176:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5178:	9b01      	ldr	r3, [sp, #4]
    517a:	2b00      	cmp	r3, #0
    517c:	d002      	beq.n	5184 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    517e:	9801      	ldr	r0, [sp, #4]
    5180:	f000 fa8a 	bl	5698 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5184:	bf00      	nop
    5186:	b003      	add	sp, #12
    5188:	f85d fb04 	ldr.w	pc, [sp], #4

0000518c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    518c:	b084      	sub	sp, #16
    518e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5190:	4b0b      	ldr	r3, [pc, #44]	; (51c0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    5192:	795b      	ldrb	r3, [r3, #5]
    5194:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    5196:	4b0b      	ldr	r3, [pc, #44]	; (51c4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    5198:	695b      	ldr	r3, [r3, #20]
    519a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    519c:	9b02      	ldr	r3, [sp, #8]
    519e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    51a2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    51a4:	9b03      	ldr	r3, [sp, #12]
    51a6:	061b      	lsls	r3, r3, #24
    51a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    51ac:	9a02      	ldr	r2, [sp, #8]
    51ae:	4313      	orrs	r3, r2
    51b0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    51b2:	4a04      	ldr	r2, [pc, #16]	; (51c4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    51b4:	9b02      	ldr	r3, [sp, #8]
    51b6:	6153      	str	r3, [r2, #20]
}
    51b8:	bf00      	nop
    51ba:	b004      	add	sp, #16
    51bc:	4770      	bx	lr
    51be:	bf00      	nop
    51c0:	00019c08 	.word	0x00019c08
    51c4:	40064000 	.word	0x40064000

000051c8 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51c8:	b084      	sub	sp, #16
    51ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51cc:	9b01      	ldr	r3, [sp, #4]
    51ce:	685b      	ldr	r3, [r3, #4]
    51d0:	4a0b      	ldr	r2, [pc, #44]	; (5200 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    51d2:	5cd3      	ldrb	r3, [r2, r3]
    51d4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    51d6:	4b0b      	ldr	r3, [pc, #44]	; (5204 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    51d8:	695b      	ldr	r3, [r3, #20]
    51da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    51dc:	9b02      	ldr	r3, [sp, #8]
    51de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    51e2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    51e4:	9b03      	ldr	r3, [sp, #12]
    51e6:	061b      	lsls	r3, r3, #24
    51e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    51ec:	9a02      	ldr	r2, [sp, #8]
    51ee:	4313      	orrs	r3, r2
    51f0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    51f2:	4a04      	ldr	r2, [pc, #16]	; (5204 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    51f4:	9b02      	ldr	r3, [sp, #8]
    51f6:	6153      	str	r3, [r2, #20]
}
    51f8:	bf00      	nop
    51fa:	b004      	add	sp, #16
    51fc:	4770      	bx	lr
    51fe:	bf00      	nop
    5200:	00019c08 	.word	0x00019c08
    5204:	40064000 	.word	0x40064000

00005208 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5208:	b084      	sub	sp, #16
    520a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    520c:	9b01      	ldr	r3, [sp, #4]
    520e:	685b      	ldr	r3, [r3, #4]
    5210:	4a0b      	ldr	r2, [pc, #44]	; (5240 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    5212:	5cd3      	ldrb	r3, [r2, r3]
    5214:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    5216:	4b0b      	ldr	r3, [pc, #44]	; (5244 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    5218:	699b      	ldr	r3, [r3, #24]
    521a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    521c:	9b02      	ldr	r3, [sp, #8]
    521e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5222:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    5224:	9b03      	ldr	r3, [sp, #12]
    5226:	061b      	lsls	r3, r3, #24
    5228:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    522c:	9a02      	ldr	r2, [sp, #8]
    522e:	4313      	orrs	r3, r2
    5230:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    5232:	4a04      	ldr	r2, [pc, #16]	; (5244 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    5234:	9b02      	ldr	r3, [sp, #8]
    5236:	6193      	str	r3, [r2, #24]
}
    5238:	bf00      	nop
    523a:	b004      	add	sp, #16
    523c:	4770      	bx	lr
    523e:	bf00      	nop
    5240:	00019c08 	.word	0x00019c08
    5244:	40064000 	.word	0x40064000

00005248 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5248:	b084      	sub	sp, #16
    524a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    524c:	4b0b      	ldr	r3, [pc, #44]	; (527c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    524e:	795b      	ldrb	r3, [r3, #5]
    5250:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    5252:	4b0b      	ldr	r3, [pc, #44]	; (5280 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5254:	69db      	ldr	r3, [r3, #28]
    5256:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5258:	9b02      	ldr	r3, [sp, #8]
    525a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    525e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    5260:	9b03      	ldr	r3, [sp, #12]
    5262:	061b      	lsls	r3, r3, #24
    5264:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5268:	9a02      	ldr	r2, [sp, #8]
    526a:	4313      	orrs	r3, r2
    526c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    526e:	4a04      	ldr	r2, [pc, #16]	; (5280 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5270:	9b02      	ldr	r3, [sp, #8]
    5272:	61d3      	str	r3, [r2, #28]
}
    5274:	bf00      	nop
    5276:	b004      	add	sp, #16
    5278:	4770      	bx	lr
    527a:	bf00      	nop
    527c:	00019c08 	.word	0x00019c08
    5280:	40064000 	.word	0x40064000

00005284 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5284:	b084      	sub	sp, #16
    5286:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5288:	9b01      	ldr	r3, [sp, #4]
    528a:	685b      	ldr	r3, [r3, #4]
    528c:	4a0b      	ldr	r2, [pc, #44]	; (52bc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    528e:	5cd3      	ldrb	r3, [r2, r3]
    5290:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    5292:	4b0b      	ldr	r3, [pc, #44]	; (52c0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5294:	69db      	ldr	r3, [r3, #28]
    5296:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5298:	9b02      	ldr	r3, [sp, #8]
    529a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    529e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    52a0:	9b03      	ldr	r3, [sp, #12]
    52a2:	061b      	lsls	r3, r3, #24
    52a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    52a8:	9a02      	ldr	r2, [sp, #8]
    52aa:	4313      	orrs	r3, r2
    52ac:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    52ae:	4a04      	ldr	r2, [pc, #16]	; (52c0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    52b0:	9b02      	ldr	r3, [sp, #8]
    52b2:	61d3      	str	r3, [r2, #28]
}
    52b4:	bf00      	nop
    52b6:	b004      	add	sp, #16
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop
    52bc:	00019c08 	.word	0x00019c08
    52c0:	40064000 	.word	0x40064000

000052c4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52c4:	b084      	sub	sp, #16
    52c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    52c8:	4b0a      	ldr	r3, [pc, #40]	; (52f4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    52ca:	7b9b      	ldrb	r3, [r3, #14]
    52cc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    52ce:	4b0a      	ldr	r3, [pc, #40]	; (52f8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    52d0:	691b      	ldr	r3, [r3, #16]
    52d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    52d4:	9b02      	ldr	r3, [sp, #8]
    52d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    52da:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    52dc:	9b03      	ldr	r3, [sp, #12]
    52de:	011b      	lsls	r3, r3, #4
    52e0:	9a02      	ldr	r2, [sp, #8]
    52e2:	4313      	orrs	r3, r2
    52e4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    52e6:	4a04      	ldr	r2, [pc, #16]	; (52f8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    52e8:	9b02      	ldr	r3, [sp, #8]
    52ea:	6113      	str	r3, [r2, #16]
}
    52ec:	bf00      	nop
    52ee:	b004      	add	sp, #16
    52f0:	4770      	bx	lr
    52f2:	bf00      	nop
    52f4:	00019bb0 	.word	0x00019bb0
    52f8:	40048000 	.word	0x40048000

000052fc <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52fc:	b084      	sub	sp, #16
    52fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5300:	9b01      	ldr	r3, [sp, #4]
    5302:	685b      	ldr	r3, [r3, #4]
    5304:	4a0a      	ldr	r2, [pc, #40]	; (5330 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    5306:	5cd3      	ldrb	r3, [r2, r3]
    5308:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    530a:	4b0a      	ldr	r3, [pc, #40]	; (5334 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    530c:	691b      	ldr	r3, [r3, #16]
    530e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5310:	9b02      	ldr	r3, [sp, #8]
    5312:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5316:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5318:	9b03      	ldr	r3, [sp, #12]
    531a:	011b      	lsls	r3, r3, #4
    531c:	9a02      	ldr	r2, [sp, #8]
    531e:	4313      	orrs	r3, r2
    5320:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5322:	4a04      	ldr	r2, [pc, #16]	; (5334 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    5324:	9b02      	ldr	r3, [sp, #8]
    5326:	6113      	str	r3, [r2, #16]
}
    5328:	bf00      	nop
    532a:	b004      	add	sp, #16
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	00019bb0 	.word	0x00019bb0
    5334:	40048000 	.word	0x40048000

00005338 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5338:	b084      	sub	sp, #16
    533a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    533c:	4b0a      	ldr	r3, [pc, #40]	; (5368 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    533e:	785b      	ldrb	r3, [r3, #1]
    5340:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    5342:	4b0a      	ldr	r3, [pc, #40]	; (536c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5344:	691b      	ldr	r3, [r3, #16]
    5346:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5348:	9b02      	ldr	r3, [sp, #8]
    534a:	f023 030c 	bic.w	r3, r3, #12
    534e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5350:	9b03      	ldr	r3, [sp, #12]
    5352:	009b      	lsls	r3, r3, #2
    5354:	9a02      	ldr	r2, [sp, #8]
    5356:	4313      	orrs	r3, r2
    5358:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    535a:	4a04      	ldr	r2, [pc, #16]	; (536c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    535c:	9b02      	ldr	r3, [sp, #8]
    535e:	6113      	str	r3, [r2, #16]
}
    5360:	bf00      	nop
    5362:	b004      	add	sp, #16
    5364:	4770      	bx	lr
    5366:	bf00      	nop
    5368:	00019c68 	.word	0x00019c68
    536c:	40048000 	.word	0x40048000

00005370 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5370:	b084      	sub	sp, #16
    5372:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5374:	9b01      	ldr	r3, [sp, #4]
    5376:	685b      	ldr	r3, [r3, #4]
    5378:	4a0a      	ldr	r2, [pc, #40]	; (53a4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    537a:	5cd3      	ldrb	r3, [r2, r3]
    537c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    537e:	4b0a      	ldr	r3, [pc, #40]	; (53a8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5380:	691b      	ldr	r3, [r3, #16]
    5382:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5384:	9b02      	ldr	r3, [sp, #8]
    5386:	f023 030c 	bic.w	r3, r3, #12
    538a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    538c:	9b03      	ldr	r3, [sp, #12]
    538e:	009b      	lsls	r3, r3, #2
    5390:	9a02      	ldr	r2, [sp, #8]
    5392:	4313      	orrs	r3, r2
    5394:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5396:	4a04      	ldr	r2, [pc, #16]	; (53a8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5398:	9b02      	ldr	r3, [sp, #8]
    539a:	6113      	str	r3, [r2, #16]
}
    539c:	bf00      	nop
    539e:	b004      	add	sp, #16
    53a0:	4770      	bx	lr
    53a2:	bf00      	nop
    53a4:	00019c68 	.word	0x00019c68
    53a8:	40048000 	.word	0x40048000

000053ac <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53ac:	b084      	sub	sp, #16
    53ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53b0:	4b0a      	ldr	r3, [pc, #40]	; (53dc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    53b2:	795b      	ldrb	r3, [r3, #5]
    53b4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    53b6:	4b0a      	ldr	r3, [pc, #40]	; (53e0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    53b8:	6a1b      	ldr	r3, [r3, #32]
    53ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    53bc:	9b02      	ldr	r3, [sp, #8]
    53be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    53c2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    53c4:	9b03      	ldr	r3, [sp, #12]
    53c6:	061b      	lsls	r3, r3, #24
    53c8:	9a02      	ldr	r2, [sp, #8]
    53ca:	4313      	orrs	r3, r2
    53cc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    53ce:	4a04      	ldr	r2, [pc, #16]	; (53e0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    53d0:	9b02      	ldr	r3, [sp, #8]
    53d2:	6213      	str	r3, [r2, #32]
}
    53d4:	bf00      	nop
    53d6:	b004      	add	sp, #16
    53d8:	4770      	bx	lr
    53da:	bf00      	nop
    53dc:	00019c08 	.word	0x00019c08
    53e0:	40064000 	.word	0x40064000

000053e4 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53e4:	b084      	sub	sp, #16
    53e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53e8:	9b01      	ldr	r3, [sp, #4]
    53ea:	685b      	ldr	r3, [r3, #4]
    53ec:	4a0a      	ldr	r2, [pc, #40]	; (5418 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    53ee:	5cd3      	ldrb	r3, [r2, r3]
    53f0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    53f2:	4b0a      	ldr	r3, [pc, #40]	; (541c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    53f4:	6a1b      	ldr	r3, [r3, #32]
    53f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    53f8:	9b02      	ldr	r3, [sp, #8]
    53fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    53fe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5400:	9b03      	ldr	r3, [sp, #12]
    5402:	061b      	lsls	r3, r3, #24
    5404:	9a02      	ldr	r2, [sp, #8]
    5406:	4313      	orrs	r3, r2
    5408:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    540a:	4a04      	ldr	r2, [pc, #16]	; (541c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    540c:	9b02      	ldr	r3, [sp, #8]
    540e:	6213      	str	r3, [r2, #32]
}
    5410:	bf00      	nop
    5412:	b004      	add	sp, #16
    5414:	4770      	bx	lr
    5416:	bf00      	nop
    5418:	00019c08 	.word	0x00019c08
    541c:	40064000 	.word	0x40064000

00005420 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5420:	b086      	sub	sp, #24
    5422:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5424:	4b20      	ldr	r3, [pc, #128]	; (54a8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    5426:	795b      	ldrb	r3, [r3, #5]
    5428:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    542a:	9b01      	ldr	r3, [sp, #4]
    542c:	681a      	ldr	r2, [r3, #0]
    542e:	491f      	ldr	r1, [pc, #124]	; (54ac <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    5430:	4613      	mov	r3, r2
    5432:	00db      	lsls	r3, r3, #3
    5434:	4413      	add	r3, r2
    5436:	440b      	add	r3, r1
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    543c:	4b1c      	ldr	r3, [pc, #112]	; (54b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    543e:	68db      	ldr	r3, [r3, #12]
    5440:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5442:	9b03      	ldr	r3, [sp, #12]
    5444:	2b03      	cmp	r3, #3
    5446:	d813      	bhi.n	5470 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    5448:	9b03      	ldr	r3, [sp, #12]
    544a:	005b      	lsls	r3, r3, #1
    544c:	3318      	adds	r3, #24
    544e:	2203      	movs	r2, #3
    5450:	fa02 f303 	lsl.w	r3, r2, r3
    5454:	43db      	mvns	r3, r3
    5456:	9a05      	ldr	r2, [sp, #20]
    5458:	4013      	ands	r3, r2
    545a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    545c:	9b03      	ldr	r3, [sp, #12]
    545e:	005b      	lsls	r3, r3, #1
    5460:	3318      	adds	r3, #24
    5462:	9a04      	ldr	r2, [sp, #16]
    5464:	fa02 f303 	lsl.w	r3, r2, r3
    5468:	9a05      	ldr	r2, [sp, #20]
    546a:	4313      	orrs	r3, r2
    546c:	9305      	str	r3, [sp, #20]
    546e:	e014      	b.n	549a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5470:	9b03      	ldr	r3, [sp, #12]
    5472:	3b04      	subs	r3, #4
    5474:	005b      	lsls	r3, r3, #1
    5476:	3310      	adds	r3, #16
    5478:	2203      	movs	r2, #3
    547a:	fa02 f303 	lsl.w	r3, r2, r3
    547e:	43db      	mvns	r3, r3
    5480:	9a05      	ldr	r2, [sp, #20]
    5482:	4013      	ands	r3, r2
    5484:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    5486:	9b03      	ldr	r3, [sp, #12]
    5488:	3b04      	subs	r3, #4
    548a:	005b      	lsls	r3, r3, #1
    548c:	3310      	adds	r3, #16
    548e:	9a04      	ldr	r2, [sp, #16]
    5490:	fa02 f303 	lsl.w	r3, r2, r3
    5494:	9a05      	ldr	r2, [sp, #20]
    5496:	4313      	orrs	r3, r2
    5498:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    549a:	4a05      	ldr	r2, [pc, #20]	; (54b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    549c:	9b05      	ldr	r3, [sp, #20]
    549e:	60d3      	str	r3, [r2, #12]
}
    54a0:	bf00      	nop
    54a2:	b006      	add	sp, #24
    54a4:	4770      	bx	lr
    54a6:	bf00      	nop
    54a8:	00019bb0 	.word	0x00019bb0
    54ac:	000198a0 	.word	0x000198a0
    54b0:	40048000 	.word	0x40048000

000054b4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    54b4:	b086      	sub	sp, #24
    54b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    54b8:	9b01      	ldr	r3, [sp, #4]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	4a20      	ldr	r2, [pc, #128]	; (5540 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    54be:	5cd3      	ldrb	r3, [r2, r3]
    54c0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    54c2:	9b01      	ldr	r3, [sp, #4]
    54c4:	681a      	ldr	r2, [r3, #0]
    54c6:	491f      	ldr	r1, [pc, #124]	; (5544 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    54c8:	4613      	mov	r3, r2
    54ca:	00db      	lsls	r3, r3, #3
    54cc:	4413      	add	r3, r2
    54ce:	440b      	add	r3, r1
    54d0:	781b      	ldrb	r3, [r3, #0]
    54d2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    54d4:	4b1c      	ldr	r3, [pc, #112]	; (5548 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    54d6:	68db      	ldr	r3, [r3, #12]
    54d8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    54da:	9b03      	ldr	r3, [sp, #12]
    54dc:	2b03      	cmp	r3, #3
    54de:	d813      	bhi.n	5508 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    54e0:	9b03      	ldr	r3, [sp, #12]
    54e2:	005b      	lsls	r3, r3, #1
    54e4:	3318      	adds	r3, #24
    54e6:	2203      	movs	r2, #3
    54e8:	fa02 f303 	lsl.w	r3, r2, r3
    54ec:	43db      	mvns	r3, r3
    54ee:	9a05      	ldr	r2, [sp, #20]
    54f0:	4013      	ands	r3, r2
    54f2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    54f4:	9b03      	ldr	r3, [sp, #12]
    54f6:	005b      	lsls	r3, r3, #1
    54f8:	3318      	adds	r3, #24
    54fa:	9a04      	ldr	r2, [sp, #16]
    54fc:	fa02 f303 	lsl.w	r3, r2, r3
    5500:	9a05      	ldr	r2, [sp, #20]
    5502:	4313      	orrs	r3, r2
    5504:	9305      	str	r3, [sp, #20]
    5506:	e014      	b.n	5532 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5508:	9b03      	ldr	r3, [sp, #12]
    550a:	3b04      	subs	r3, #4
    550c:	005b      	lsls	r3, r3, #1
    550e:	3310      	adds	r3, #16
    5510:	2203      	movs	r2, #3
    5512:	fa02 f303 	lsl.w	r3, r2, r3
    5516:	43db      	mvns	r3, r3
    5518:	9a05      	ldr	r2, [sp, #20]
    551a:	4013      	ands	r3, r2
    551c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    551e:	9b03      	ldr	r3, [sp, #12]
    5520:	3b04      	subs	r3, #4
    5522:	005b      	lsls	r3, r3, #1
    5524:	3310      	adds	r3, #16
    5526:	9a04      	ldr	r2, [sp, #16]
    5528:	fa02 f303 	lsl.w	r3, r2, r3
    552c:	9a05      	ldr	r2, [sp, #20]
    552e:	4313      	orrs	r3, r2
    5530:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5532:	4a05      	ldr	r2, [pc, #20]	; (5548 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5534:	9b05      	ldr	r3, [sp, #20]
    5536:	60d3      	str	r3, [r2, #12]
}
    5538:	bf00      	nop
    553a:	b006      	add	sp, #24
    553c:	4770      	bx	lr
    553e:	bf00      	nop
    5540:	00019bb0 	.word	0x00019bb0
    5544:	000198a0 	.word	0x000198a0
    5548:	40048000 	.word	0x40048000

0000554c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    554c:	b084      	sub	sp, #16
    554e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    5550:	4b06      	ldr	r3, [pc, #24]	; (556c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    5552:	685b      	ldr	r3, [r3, #4]
    5554:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    5556:	9b03      	ldr	r3, [sp, #12]
    5558:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    555c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    555e:	4a03      	ldr	r2, [pc, #12]	; (556c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    5560:	9b03      	ldr	r3, [sp, #12]
    5562:	6053      	str	r3, [r2, #4]
}
    5564:	bf00      	nop
    5566:	b004      	add	sp, #16
    5568:	4770      	bx	lr
    556a:	bf00      	nop
    556c:	40048000 	.word	0x40048000

00005570 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5570:	b084      	sub	sp, #16
    5572:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5574:	9b01      	ldr	r3, [sp, #4]
    5576:	685b      	ldr	r3, [r3, #4]
    5578:	4a0a      	ldr	r2, [pc, #40]	; (55a4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    557a:	5cd3      	ldrb	r3, [r2, r3]
    557c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    557e:	4b0a      	ldr	r3, [pc, #40]	; (55a8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5580:	685b      	ldr	r3, [r3, #4]
    5582:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5584:	9b02      	ldr	r3, [sp, #8]
    5586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    558a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    558c:	9b03      	ldr	r3, [sp, #12]
    558e:	011b      	lsls	r3, r3, #4
    5590:	9a02      	ldr	r2, [sp, #8]
    5592:	4313      	orrs	r3, r2
    5594:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    5596:	4a04      	ldr	r2, [pc, #16]	; (55a8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5598:	9b02      	ldr	r3, [sp, #8]
    559a:	6053      	str	r3, [r2, #4]
}
    559c:	bf00      	nop
    559e:	b004      	add	sp, #16
    55a0:	4770      	bx	lr
    55a2:	bf00      	nop
    55a4:	00019bb0 	.word	0x00019bb0
    55a8:	40048000 	.word	0x40048000

000055ac <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    55ac:	b084      	sub	sp, #16
    55ae:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    55b0:	9b01      	ldr	r3, [sp, #4]
    55b2:	681a      	ldr	r2, [r3, #0]
    55b4:	490f      	ldr	r1, [pc, #60]	; (55f4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    55b6:	4613      	mov	r3, r2
    55b8:	00db      	lsls	r3, r3, #3
    55ba:	4413      	add	r3, r2
    55bc:	440b      	add	r3, r1
    55be:	3304      	adds	r3, #4
    55c0:	781b      	ldrb	r3, [r3, #0]
    55c2:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    55c4:	4a0c      	ldr	r2, [pc, #48]	; (55f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    55c6:	9b03      	ldr	r3, [sp, #12]
    55c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55cc:	490a      	ldr	r1, [pc, #40]	; (55f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    55ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    55d2:	9b03      	ldr	r3, [sp, #12]
    55d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    55d8:	4a07      	ldr	r2, [pc, #28]	; (55f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    55da:	9b03      	ldr	r3, [sp, #12]
    55dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55e0:	4905      	ldr	r1, [pc, #20]	; (55f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    55e2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    55e6:	9b03      	ldr	r3, [sp, #12]
    55e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    55ec:	bf00      	nop
    55ee:	b004      	add	sp, #16
    55f0:	4770      	bx	lr
    55f2:	bf00      	nop
    55f4:	000198a0 	.word	0x000198a0
    55f8:	40065000 	.word	0x40065000

000055fc <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    55fc:	b086      	sub	sp, #24
    55fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    5600:	9b01      	ldr	r3, [sp, #4]
    5602:	681a      	ldr	r2, [r3, #0]
    5604:	4912      	ldr	r1, [pc, #72]	; (5650 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    5606:	4613      	mov	r3, r2
    5608:	00db      	lsls	r3, r3, #3
    560a:	4413      	add	r3, r2
    560c:	440b      	add	r3, r1
    560e:	3304      	adds	r3, #4
    5610:	781b      	ldrb	r3, [r3, #0]
    5612:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5614:	9b01      	ldr	r3, [sp, #4]
    5616:	685b      	ldr	r3, [r3, #4]
    5618:	4a0e      	ldr	r2, [pc, #56]	; (5654 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    561a:	5cd3      	ldrb	r3, [r2, r3]
    561c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    561e:	4a0e      	ldr	r2, [pc, #56]	; (5658 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    5620:	9b05      	ldr	r3, [sp, #20]
    5622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5626:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    5628:	9b03      	ldr	r3, [sp, #12]
    562a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    562e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    5630:	9b04      	ldr	r3, [sp, #16]
    5632:	061b      	lsls	r3, r3, #24
    5634:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    5638:	9a03      	ldr	r2, [sp, #12]
    563a:	4313      	orrs	r3, r2
    563c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    563e:	4906      	ldr	r1, [pc, #24]	; (5658 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    5640:	9b05      	ldr	r3, [sp, #20]
    5642:	9a03      	ldr	r2, [sp, #12]
    5644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5648:	bf00      	nop
    564a:	b006      	add	sp, #24
    564c:	4770      	bx	lr
    564e:	bf00      	nop
    5650:	000198a0 	.word	0x000198a0
    5654:	00019c38 	.word	0x00019c38
    5658:	40065000 	.word	0x40065000

0000565c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    565c:	b084      	sub	sp, #16
    565e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5660:	4b0b      	ldr	r3, [pc, #44]	; (5690 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    5662:	7f1b      	ldrb	r3, [r3, #28]
    5664:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    5666:	4b0b      	ldr	r3, [pc, #44]	; (5694 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5668:	685b      	ldr	r3, [r3, #4]
    566a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    566c:	9b02      	ldr	r3, [sp, #8]
    566e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5672:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5674:	9b03      	ldr	r3, [sp, #12]
    5676:	031b      	lsls	r3, r3, #12
    5678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    567c:	9a02      	ldr	r2, [sp, #8]
    567e:	4313      	orrs	r3, r2
    5680:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    5682:	4a04      	ldr	r2, [pc, #16]	; (5694 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5684:	9b02      	ldr	r3, [sp, #8]
    5686:	6053      	str	r3, [r2, #4]
}
    5688:	bf00      	nop
    568a:	b004      	add	sp, #16
    568c:	4770      	bx	lr
    568e:	bf00      	nop
    5690:	00019bb0 	.word	0x00019bb0
    5694:	40048000 	.word	0x40048000

00005698 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5698:	b084      	sub	sp, #16
    569a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    569c:	9b01      	ldr	r3, [sp, #4]
    569e:	685b      	ldr	r3, [r3, #4]
    56a0:	4a0b      	ldr	r2, [pc, #44]	; (56d0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    56a2:	5cd3      	ldrb	r3, [r2, r3]
    56a4:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    56a6:	4b0b      	ldr	r3, [pc, #44]	; (56d4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    56a8:	685b      	ldr	r3, [r3, #4]
    56aa:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    56ac:	9b02      	ldr	r3, [sp, #8]
    56ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    56b2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    56b4:	9b03      	ldr	r3, [sp, #12]
    56b6:	031b      	lsls	r3, r3, #12
    56b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    56bc:	9a02      	ldr	r2, [sp, #8]
    56be:	4313      	orrs	r3, r2
    56c0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    56c2:	4a04      	ldr	r2, [pc, #16]	; (56d4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    56c4:	9b02      	ldr	r3, [sp, #8]
    56c6:	6053      	str	r3, [r2, #4]
}
    56c8:	bf00      	nop
    56ca:	b004      	add	sp, #16
    56cc:	4770      	bx	lr
    56ce:	bf00      	nop
    56d0:	00019bb0 	.word	0x00019bb0
    56d4:	40048000 	.word	0x40048000

000056d8 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    56d8:	b500      	push	{lr}
    56da:	b085      	sub	sp, #20
    56dc:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    56de:	2300      	movs	r3, #0
    56e0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d037      	beq.n	575a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    56ea:	2300      	movs	r3, #0
    56ec:	9303      	str	r3, [sp, #12]
    56ee:	e02b      	b.n	5748 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    56f0:	4b29      	ldr	r3, [pc, #164]	; (5798 <DisableSafeClock+0xc0>)
    56f2:	6819      	ldr	r1, [r3, #0]
    56f4:	9a03      	ldr	r2, [sp, #12]
    56f6:	4613      	mov	r3, r2
    56f8:	005b      	lsls	r3, r3, #1
    56fa:	4413      	add	r3, r2
    56fc:	009b      	lsls	r3, r3, #2
    56fe:	440b      	add	r3, r1
    5700:	3314      	adds	r3, #20
    5702:	681b      	ldr	r3, [r3, #0]
    5704:	2b05      	cmp	r3, #5
    5706:	d11c      	bne.n	5742 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    5708:	2301      	movs	r3, #1
    570a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    570e:	4b22      	ldr	r3, [pc, #136]	; (5798 <DisableSafeClock+0xc0>)
    5710:	6819      	ldr	r1, [r3, #0]
    5712:	9a03      	ldr	r2, [sp, #12]
    5714:	4613      	mov	r3, r2
    5716:	005b      	lsls	r3, r3, #1
    5718:	4413      	add	r3, r2
    571a:	009b      	lsls	r3, r3, #2
    571c:	440b      	add	r3, r1
    571e:	3318      	adds	r3, #24
    5720:	881b      	ldrh	r3, [r3, #0]
    5722:	2b00      	cmp	r3, #0
    5724:	d118      	bne.n	5758 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    5726:	4b1d      	ldr	r3, [pc, #116]	; (579c <DisableSafeClock+0xc4>)
    5728:	791b      	ldrb	r3, [r3, #4]
    572a:	4619      	mov	r1, r3
    572c:	4a1c      	ldr	r2, [pc, #112]	; (57a0 <DisableSafeClock+0xc8>)
    572e:	460b      	mov	r3, r1
    5730:	005b      	lsls	r3, r3, #1
    5732:	440b      	add	r3, r1
    5734:	009b      	lsls	r3, r3, #2
    5736:	4413      	add	r3, r2
    5738:	3308      	adds	r3, #8
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	2005      	movs	r0, #5
    573e:	4798      	blx	r3
                }
                break;
    5740:	e00a      	b.n	5758 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5742:	9b03      	ldr	r3, [sp, #12]
    5744:	3301      	adds	r3, #1
    5746:	9303      	str	r3, [sp, #12]
    5748:	4b13      	ldr	r3, [pc, #76]	; (5798 <DisableSafeClock+0xc0>)
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	7a1b      	ldrb	r3, [r3, #8]
    574e:	461a      	mov	r2, r3
    5750:	9b03      	ldr	r3, [sp, #12]
    5752:	4293      	cmp	r3, r2
    5754:	d3cc      	bcc.n	56f0 <DisableSafeClock+0x18>
    5756:	e000      	b.n	575a <DisableSafeClock+0x82>
                break;
    5758:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    575a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    575e:	f083 0301 	eor.w	r3, r3, #1
    5762:	b2db      	uxtb	r3, r3
    5764:	2b00      	cmp	r3, #0
    5766:	d013      	beq.n	5790 <DisableSafeClock+0xb8>
    5768:	4b0e      	ldr	r3, [pc, #56]	; (57a4 <DisableSafeClock+0xcc>)
    576a:	781b      	ldrb	r3, [r3, #0]
    576c:	f083 0301 	eor.w	r3, r3, #1
    5770:	b2db      	uxtb	r3, r3
    5772:	2b00      	cmp	r3, #0
    5774:	d00c      	beq.n	5790 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    5776:	4b09      	ldr	r3, [pc, #36]	; (579c <DisableSafeClock+0xc4>)
    5778:	791b      	ldrb	r3, [r3, #4]
    577a:	4619      	mov	r1, r3
    577c:	4a08      	ldr	r2, [pc, #32]	; (57a0 <DisableSafeClock+0xc8>)
    577e:	460b      	mov	r3, r1
    5780:	005b      	lsls	r3, r3, #1
    5782:	440b      	add	r3, r1
    5784:	009b      	lsls	r3, r3, #2
    5786:	4413      	add	r3, r2
    5788:	3308      	adds	r3, #8
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	2005      	movs	r0, #5
    578e:	4798      	blx	r3
    }
}
    5790:	bf00      	nop
    5792:	b005      	add	sp, #20
    5794:	f85d fb04 	ldr.w	pc, [sp], #4
    5798:	1fff8bdc 	.word	0x1fff8bdc
    579c:	00019830 	.word	0x00019830
    57a0:	00019e60 	.word	0x00019e60
    57a4:	1fff8b18 	.word	0x1fff8b18

000057a8 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    57a8:	4b06      	ldr	r3, [pc, #24]	; (57c4 <SetFircToResetValue_TrustedCall+0x1c>)
    57aa:	2200      	movs	r2, #0
    57ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    57b0:	4b04      	ldr	r3, [pc, #16]	; (57c4 <SetFircToResetValue_TrustedCall+0x1c>)
    57b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    57b6:	4a03      	ldr	r2, [pc, #12]	; (57c4 <SetFircToResetValue_TrustedCall+0x1c>)
    57b8:	f043 0301 	orr.w	r3, r3, #1
    57bc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    57c0:	bf00      	nop
    57c2:	4770      	bx	lr
    57c4:	40064000 	.word	0x40064000

000057c8 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    57c8:	b084      	sub	sp, #16
    57ca:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    57cc:	2303      	movs	r3, #3
    57ce:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    57d0:	2300      	movs	r3, #0
    57d2:	9302      	str	r3, [sp, #8]
    57d4:	e028      	b.n	5828 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    57d6:	9b01      	ldr	r3, [sp, #4]
    57d8:	9a02      	ldr	r2, [sp, #8]
    57da:	320d      	adds	r2, #13
    57dc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    57e0:	2b28      	cmp	r3, #40	; 0x28
    57e2:	d10b      	bne.n	57fc <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    57e4:	9a01      	ldr	r2, [sp, #4]
    57e6:	9b02      	ldr	r3, [sp, #8]
    57e8:	330d      	adds	r3, #13
    57ea:	00db      	lsls	r3, r3, #3
    57ec:	4413      	add	r3, r2
    57ee:	685b      	ldr	r3, [r3, #4]
    57f0:	4a2b      	ldr	r2, [pc, #172]	; (58a0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    57f2:	5cd3      	ldrb	r3, [r2, r3]
    57f4:	011b      	lsls	r3, r3, #4
    57f6:	9a03      	ldr	r2, [sp, #12]
    57f8:	4313      	orrs	r3, r2
    57fa:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    57fc:	9b01      	ldr	r3, [sp, #4]
    57fe:	9a02      	ldr	r2, [sp, #8]
    5800:	320d      	adds	r2, #13
    5802:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5806:	2b29      	cmp	r3, #41	; 0x29
    5808:	d10b      	bne.n	5822 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    580a:	9a01      	ldr	r2, [sp, #4]
    580c:	9b02      	ldr	r3, [sp, #8]
    580e:	330d      	adds	r3, #13
    5810:	00db      	lsls	r3, r3, #3
    5812:	4413      	add	r3, r2
    5814:	685b      	ldr	r3, [r3, #4]
    5816:	4a23      	ldr	r2, [pc, #140]	; (58a4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    5818:	5cd3      	ldrb	r3, [r2, r3]
    581a:	009b      	lsls	r3, r3, #2
    581c:	9a03      	ldr	r2, [sp, #12]
    581e:	4313      	orrs	r3, r2
    5820:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    5822:	9b02      	ldr	r3, [sp, #8]
    5824:	3301      	adds	r3, #1
    5826:	9302      	str	r3, [sp, #8]
    5828:	9b01      	ldr	r3, [sp, #4]
    582a:	7adb      	ldrb	r3, [r3, #11]
    582c:	461a      	mov	r2, r3
    582e:	9b02      	ldr	r3, [sp, #8]
    5830:	4293      	cmp	r3, r2
    5832:	d3d0      	bcc.n	57d6 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5834:	2300      	movs	r3, #0
    5836:	9302      	str	r3, [sp, #8]
    5838:	e026      	b.n	5888 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    583a:	9a01      	ldr	r2, [sp, #4]
    583c:	9b02      	ldr	r3, [sp, #8]
    583e:	334e      	adds	r3, #78	; 0x4e
    5840:	00db      	lsls	r3, r3, #3
    5842:	4413      	add	r3, r2
    5844:	685b      	ldr	r3, [r3, #4]
    5846:	2b12      	cmp	r3, #18
    5848:	d109      	bne.n	585e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    584a:	9a01      	ldr	r2, [sp, #4]
    584c:	9b02      	ldr	r3, [sp, #8]
    584e:	334e      	adds	r3, #78	; 0x4e
    5850:	00db      	lsls	r3, r3, #3
    5852:	4413      	add	r3, r2
    5854:	891b      	ldrh	r3, [r3, #8]
    5856:	005b      	lsls	r3, r3, #1
    5858:	9a03      	ldr	r2, [sp, #12]
    585a:	4313      	orrs	r3, r2
    585c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    585e:	9a01      	ldr	r2, [sp, #4]
    5860:	9b02      	ldr	r3, [sp, #8]
    5862:	334e      	adds	r3, #78	; 0x4e
    5864:	00db      	lsls	r3, r3, #3
    5866:	4413      	add	r3, r2
    5868:	685b      	ldr	r3, [r3, #4]
    586a:	2b13      	cmp	r3, #19
    586c:	d109      	bne.n	5882 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    586e:	9a01      	ldr	r2, [sp, #4]
    5870:	9b02      	ldr	r3, [sp, #8]
    5872:	334e      	adds	r3, #78	; 0x4e
    5874:	00db      	lsls	r3, r3, #3
    5876:	4413      	add	r3, r2
    5878:	891b      	ldrh	r3, [r3, #8]
    587a:	461a      	mov	r2, r3
    587c:	9b03      	ldr	r3, [sp, #12]
    587e:	4313      	orrs	r3, r2
    5880:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5882:	9b02      	ldr	r3, [sp, #8]
    5884:	3301      	adds	r3, #1
    5886:	9302      	str	r3, [sp, #8]
    5888:	9b01      	ldr	r3, [sp, #4]
    588a:	7c1b      	ldrb	r3, [r3, #16]
    588c:	461a      	mov	r2, r3
    588e:	9b02      	ldr	r3, [sp, #8]
    5890:	4293      	cmp	r3, r2
    5892:	d3d2      	bcc.n	583a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5894:	4a04      	ldr	r2, [pc, #16]	; (58a8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5896:	9b03      	ldr	r3, [sp, #12]
    5898:	6113      	str	r3, [r2, #16]
}
    589a:	bf00      	nop
    589c:	b004      	add	sp, #16
    589e:	4770      	bx	lr
    58a0:	00019bb0 	.word	0x00019bb0
    58a4:	00019c68 	.word	0x00019c68
    58a8:	40048000 	.word	0x40048000

000058ac <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    58ac:	b500      	push	{lr}
    58ae:	b089      	sub	sp, #36	; 0x24
    58b0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    58b2:	2300      	movs	r3, #0
    58b4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    58b8:	4a21      	ldr	r2, [pc, #132]	; (5940 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    58be:	4b21      	ldr	r3, [pc, #132]	; (5944 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    58c0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    58c4:	f003 0301 	and.w	r3, r3, #1
    58c8:	2b00      	cmp	r3, #0
    58ca:	d12e      	bne.n	592a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    58cc:	4b1e      	ldr	r3, [pc, #120]	; (5948 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    58ce:	2200      	movs	r2, #0
    58d0:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    58d2:	f7ff ff69 	bl	57a8 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    58d6:	aa03      	add	r2, sp, #12
    58d8:	a904      	add	r1, sp, #16
    58da:	a805      	add	r0, sp, #20
    58dc:	f24c 3350 	movw	r3, #50000	; 0xc350
    58e0:	f7fe f8ae 	bl	3a40 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    58e4:	4b17      	ldr	r3, [pc, #92]	; (5944 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    58e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    58ea:	0e1b      	lsrs	r3, r3, #24
    58ec:	f003 0301 	and.w	r3, r3, #1
    58f0:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    58f2:	9a03      	ldr	r2, [sp, #12]
    58f4:	a904      	add	r1, sp, #16
    58f6:	ab05      	add	r3, sp, #20
    58f8:	4618      	mov	r0, r3
    58fa:	f7fe f8bb 	bl	3a74 <Clock_Ip_TimeoutExpired>
    58fe:	4603      	mov	r3, r0
    5900:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    5904:	9b06      	ldr	r3, [sp, #24]
    5906:	2b00      	cmp	r3, #0
    5908:	d106      	bne.n	5918 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    590a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    590e:	f083 0301 	eor.w	r3, r3, #1
    5912:	b2db      	uxtb	r3, r3
    5914:	2b00      	cmp	r3, #0
    5916:	d1e5      	bne.n	58e4 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    5918:	f89d 301f 	ldrb.w	r3, [sp, #31]
    591c:	2b00      	cmp	r3, #0
    591e:	d007      	beq.n	5930 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    5920:	2105      	movs	r1, #5
    5922:	2001      	movs	r0, #1
    5924:	f7fe f87c 	bl	3a20 <Clock_Ip_ReportClockErrors>
    5928:	e002      	b.n	5930 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    592a:	4b07      	ldr	r3, [pc, #28]	; (5948 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    592c:	2201      	movs	r2, #1
    592e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    5930:	9801      	ldr	r0, [sp, #4]
    5932:	f7ff ff49 	bl	57c8 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    5936:	bf00      	nop
    5938:	b009      	add	sp, #36	; 0x24
    593a:	f85d fb04 	ldr.w	pc, [sp], #4
    593e:	bf00      	nop
    5940:	1fff8bdc 	.word	0x1fff8bdc
    5944:	40064000 	.word	0x40064000
    5948:	1fff8b18 	.word	0x1fff8b18

0000594c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    594c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    594e:	2300      	movs	r3, #0
    5950:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5952:	4b29      	ldr	r3, [pc, #164]	; (59f8 <getFircConfig+0xac>)
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	2b00      	cmp	r3, #0
    5958:	d024      	beq.n	59a4 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    595a:	2300      	movs	r3, #0
    595c:	9301      	str	r3, [sp, #4]
    595e:	e01a      	b.n	5996 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5960:	4b25      	ldr	r3, [pc, #148]	; (59f8 <getFircConfig+0xac>)
    5962:	6819      	ldr	r1, [r3, #0]
    5964:	9a01      	ldr	r2, [sp, #4]
    5966:	4613      	mov	r3, r2
    5968:	005b      	lsls	r3, r3, #1
    596a:	4413      	add	r3, r2
    596c:	009b      	lsls	r3, r3, #2
    596e:	440b      	add	r3, r1
    5970:	3314      	adds	r3, #20
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	2b05      	cmp	r3, #5
    5976:	d10b      	bne.n	5990 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5978:	4b1f      	ldr	r3, [pc, #124]	; (59f8 <getFircConfig+0xac>)
    597a:	6819      	ldr	r1, [r3, #0]
    597c:	9a01      	ldr	r2, [sp, #4]
    597e:	4613      	mov	r3, r2
    5980:	005b      	lsls	r3, r3, #1
    5982:	4413      	add	r3, r2
    5984:	009b      	lsls	r3, r3, #2
    5986:	3310      	adds	r3, #16
    5988:	440b      	add	r3, r1
    598a:	3304      	adds	r3, #4
    598c:	9300      	str	r3, [sp, #0]
                break;
    598e:	e009      	b.n	59a4 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	3301      	adds	r3, #1
    5994:	9301      	str	r3, [sp, #4]
    5996:	4b18      	ldr	r3, [pc, #96]	; (59f8 <getFircConfig+0xac>)
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	7a1b      	ldrb	r3, [r3, #8]
    599c:	461a      	mov	r2, r3
    599e:	9b01      	ldr	r3, [sp, #4]
    59a0:	4293      	cmp	r3, r2
    59a2:	d3dd      	bcc.n	5960 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    59a4:	9b00      	ldr	r3, [sp, #0]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d121      	bne.n	59ee <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    59aa:	4b14      	ldr	r3, [pc, #80]	; (59fc <getFircConfig+0xb0>)
    59ac:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    59ae:	4b13      	ldr	r3, [pc, #76]	; (59fc <getFircConfig+0xb0>)
    59b0:	2205      	movs	r2, #5
    59b2:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    59b4:	4b12      	ldr	r3, [pc, #72]	; (5a00 <getFircConfig+0xb4>)
    59b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    59ba:	b29b      	uxth	r3, r3
    59bc:	f003 0301 	and.w	r3, r3, #1
    59c0:	b29a      	uxth	r2, r3
    59c2:	4b0e      	ldr	r3, [pc, #56]	; (59fc <getFircConfig+0xb0>)
    59c4:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    59c6:	4b0e      	ldr	r3, [pc, #56]	; (5a00 <getFircConfig+0xb4>)
    59c8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    59cc:	b2db      	uxtb	r3, r3
    59ce:	f003 0303 	and.w	r3, r3, #3
    59d2:	b2da      	uxtb	r2, r3
    59d4:	4b09      	ldr	r3, [pc, #36]	; (59fc <getFircConfig+0xb0>)
    59d6:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    59d8:	4b09      	ldr	r3, [pc, #36]	; (5a00 <getFircConfig+0xb4>)
    59da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    59de:	b2db      	uxtb	r3, r3
    59e0:	10db      	asrs	r3, r3, #3
    59e2:	b2db      	uxtb	r3, r3
    59e4:	f003 0301 	and.w	r3, r3, #1
    59e8:	b2da      	uxtb	r2, r3
    59ea:	4b04      	ldr	r3, [pc, #16]	; (59fc <getFircConfig+0xb0>)
    59ec:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    59ee:	9b00      	ldr	r3, [sp, #0]
}
    59f0:	4618      	mov	r0, r3
    59f2:	b002      	add	sp, #8
    59f4:	4770      	bx	lr
    59f6:	bf00      	nop
    59f8:	1fff8bdc 	.word	0x1fff8bdc
    59fc:	1fff8c48 	.word	0x1fff8c48
    5a00:	40064000 	.word	0x40064000

00005a04 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    5a04:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    5a06:	2300      	movs	r3, #0
    5a08:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5a0a:	4b20      	ldr	r3, [pc, #128]	; (5a8c <getSoscConfig+0x88>)
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d024      	beq.n	5a5c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5a12:	2300      	movs	r3, #0
    5a14:	9301      	str	r3, [sp, #4]
    5a16:	e01a      	b.n	5a4e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5a18:	4b1c      	ldr	r3, [pc, #112]	; (5a8c <getSoscConfig+0x88>)
    5a1a:	6819      	ldr	r1, [r3, #0]
    5a1c:	9a01      	ldr	r2, [sp, #4]
    5a1e:	4613      	mov	r3, r2
    5a20:	009b      	lsls	r3, r3, #2
    5a22:	4413      	add	r3, r2
    5a24:	009b      	lsls	r3, r3, #2
    5a26:	440b      	add	r3, r1
    5a28:	332c      	adds	r3, #44	; 0x2c
    5a2a:	681b      	ldr	r3, [r3, #0]
    5a2c:	2b08      	cmp	r3, #8
    5a2e:	d10b      	bne.n	5a48 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5a30:	4b16      	ldr	r3, [pc, #88]	; (5a8c <getSoscConfig+0x88>)
    5a32:	6819      	ldr	r1, [r3, #0]
    5a34:	9a01      	ldr	r2, [sp, #4]
    5a36:	4613      	mov	r3, r2
    5a38:	009b      	lsls	r3, r3, #2
    5a3a:	4413      	add	r3, r2
    5a3c:	009b      	lsls	r3, r3, #2
    5a3e:	3328      	adds	r3, #40	; 0x28
    5a40:	440b      	add	r3, r1
    5a42:	3304      	adds	r3, #4
    5a44:	9300      	str	r3, [sp, #0]
                break;
    5a46:	e009      	b.n	5a5c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5a48:	9b01      	ldr	r3, [sp, #4]
    5a4a:	3301      	adds	r3, #1
    5a4c:	9301      	str	r3, [sp, #4]
    5a4e:	4b0f      	ldr	r3, [pc, #60]	; (5a8c <getSoscConfig+0x88>)
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	7a5b      	ldrb	r3, [r3, #9]
    5a54:	461a      	mov	r2, r3
    5a56:	9b01      	ldr	r3, [sp, #4]
    5a58:	4293      	cmp	r3, r2
    5a5a:	d3dd      	bcc.n	5a18 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5a5c:	9b00      	ldr	r3, [sp, #0]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d110      	bne.n	5a84 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    5a62:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <getSoscConfig+0x8c>)
    5a64:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    5a66:	4b0a      	ldr	r3, [pc, #40]	; (5a90 <getSoscConfig+0x8c>)
    5a68:	2208      	movs	r2, #8
    5a6a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5a6c:	4b09      	ldr	r3, [pc, #36]	; (5a94 <getSoscConfig+0x90>)
    5a6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5a72:	b29b      	uxth	r3, r3
    5a74:	f003 0301 	and.w	r3, r3, #1
    5a78:	b29a      	uxth	r2, r3
    5a7a:	4b05      	ldr	r3, [pc, #20]	; (5a90 <getSoscConfig+0x8c>)
    5a7c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5a7e:	4b04      	ldr	r3, [pc, #16]	; (5a90 <getSoscConfig+0x8c>)
    5a80:	4a05      	ldr	r2, [pc, #20]	; (5a98 <getSoscConfig+0x94>)
    5a82:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5a84:	9b00      	ldr	r3, [sp, #0]
}
    5a86:	4618      	mov	r0, r3
    5a88:	b002      	add	sp, #8
    5a8a:	4770      	bx	lr
    5a8c:	1fff8bdc 	.word	0x1fff8bdc
    5a90:	1fff8c54 	.word	0x1fff8c54
    5a94:	40064000 	.word	0x40064000
    5a98:	02625a00 	.word	0x02625a00

00005a9c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5a9c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5a9e:	2300      	movs	r3, #0
    5aa0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5aa2:	4b28      	ldr	r3, [pc, #160]	; (5b44 <getSpllConfig+0xa8>)
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d023      	beq.n	5af2 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5aaa:	2300      	movs	r3, #0
    5aac:	9301      	str	r3, [sp, #4]
    5aae:	e019      	b.n	5ae4 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5ab0:	4b24      	ldr	r3, [pc, #144]	; (5b44 <getSpllConfig+0xa8>)
    5ab2:	6819      	ldr	r1, [r3, #0]
    5ab4:	9a01      	ldr	r2, [sp, #4]
    5ab6:	4613      	mov	r3, r2
    5ab8:	009b      	lsls	r3, r3, #2
    5aba:	4413      	add	r3, r2
    5abc:	00db      	lsls	r3, r3, #3
    5abe:	440b      	add	r3, r1
    5ac0:	3340      	adds	r3, #64	; 0x40
    5ac2:	681b      	ldr	r3, [r3, #0]
    5ac4:	2b09      	cmp	r3, #9
    5ac6:	d10a      	bne.n	5ade <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5ac8:	4b1e      	ldr	r3, [pc, #120]	; (5b44 <getSpllConfig+0xa8>)
    5aca:	6819      	ldr	r1, [r3, #0]
    5acc:	9a01      	ldr	r2, [sp, #4]
    5ace:	4613      	mov	r3, r2
    5ad0:	009b      	lsls	r3, r3, #2
    5ad2:	4413      	add	r3, r2
    5ad4:	00db      	lsls	r3, r3, #3
    5ad6:	3340      	adds	r3, #64	; 0x40
    5ad8:	440b      	add	r3, r1
    5ada:	9300      	str	r3, [sp, #0]
                break;
    5adc:	e009      	b.n	5af2 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5ade:	9b01      	ldr	r3, [sp, #4]
    5ae0:	3301      	adds	r3, #1
    5ae2:	9301      	str	r3, [sp, #4]
    5ae4:	4b17      	ldr	r3, [pc, #92]	; (5b44 <getSpllConfig+0xa8>)
    5ae6:	681b      	ldr	r3, [r3, #0]
    5ae8:	7a9b      	ldrb	r3, [r3, #10]
    5aea:	461a      	mov	r2, r3
    5aec:	9b01      	ldr	r3, [sp, #4]
    5aee:	4293      	cmp	r3, r2
    5af0:	d3de      	bcc.n	5ab0 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5af2:	9b00      	ldr	r3, [sp, #0]
    5af4:	2b00      	cmp	r3, #0
    5af6:	d121      	bne.n	5b3c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5af8:	4b13      	ldr	r3, [pc, #76]	; (5b48 <getSpllConfig+0xac>)
    5afa:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5afc:	4b12      	ldr	r3, [pc, #72]	; (5b48 <getSpllConfig+0xac>)
    5afe:	2209      	movs	r2, #9
    5b00:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    5b02:	4b12      	ldr	r3, [pc, #72]	; (5b4c <getSpllConfig+0xb0>)
    5b04:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5b08:	b29b      	uxth	r3, r3
    5b0a:	f003 0301 	and.w	r3, r3, #1
    5b0e:	b29a      	uxth	r2, r3
    5b10:	4b0d      	ldr	r3, [pc, #52]	; (5b48 <getSpllConfig+0xac>)
    5b12:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5b14:	4b0d      	ldr	r3, [pc, #52]	; (5b4c <getSpllConfig+0xb0>)
    5b16:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5b1a:	0a1b      	lsrs	r3, r3, #8
    5b1c:	b2db      	uxtb	r3, r3
    5b1e:	f003 0307 	and.w	r3, r3, #7
    5b22:	b2da      	uxtb	r2, r3
    5b24:	4b08      	ldr	r3, [pc, #32]	; (5b48 <getSpllConfig+0xac>)
    5b26:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5b28:	4b08      	ldr	r3, [pc, #32]	; (5b4c <getSpllConfig+0xb0>)
    5b2a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5b2e:	0c1b      	lsrs	r3, r3, #16
    5b30:	b2db      	uxtb	r3, r3
    5b32:	f003 031f 	and.w	r3, r3, #31
    5b36:	b2da      	uxtb	r2, r3
    5b38:	4b03      	ldr	r3, [pc, #12]	; (5b48 <getSpllConfig+0xac>)
    5b3a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5b3c:	9b00      	ldr	r3, [sp, #0]
}
    5b3e:	4618      	mov	r0, r3
    5b40:	b002      	add	sp, #8
    5b42:	4770      	bx	lr
    5b44:	1fff8bdc 	.word	0x1fff8bdc
    5b48:	1fff8c68 	.word	0x1fff8c68
    5b4c:	40064000 	.word	0x40064000

00005b50 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5b50:	b086      	sub	sp, #24
    5b52:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5b54:	2300      	movs	r3, #0
    5b56:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5b58:	9b01      	ldr	r3, [sp, #4]
    5b5a:	2b1b      	cmp	r3, #27
    5b5c:	d00f      	beq.n	5b7e <getSelectorConfig+0x2e>
    5b5e:	9b01      	ldr	r3, [sp, #4]
    5b60:	2b1b      	cmp	r3, #27
    5b62:	d80f      	bhi.n	5b84 <getSelectorConfig+0x34>
    5b64:	9b01      	ldr	r3, [sp, #4]
    5b66:	2b19      	cmp	r3, #25
    5b68:	d003      	beq.n	5b72 <getSelectorConfig+0x22>
    5b6a:	9b01      	ldr	r3, [sp, #4]
    5b6c:	2b1a      	cmp	r3, #26
    5b6e:	d003      	beq.n	5b78 <getSelectorConfig+0x28>
    5b70:	e008      	b.n	5b84 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5b72:	2300      	movs	r3, #0
    5b74:	9304      	str	r3, [sp, #16]
            break;
    5b76:	e008      	b.n	5b8a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5b78:	2301      	movs	r3, #1
    5b7a:	9304      	str	r3, [sp, #16]
            break;
    5b7c:	e005      	b.n	5b8a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5b7e:	2302      	movs	r3, #2
    5b80:	9304      	str	r3, [sp, #16]
            break;
    5b82:	e002      	b.n	5b8a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5b84:	2300      	movs	r3, #0
    5b86:	9304      	str	r3, [sp, #16]
            break;
    5b88:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5b8a:	4b36      	ldr	r3, [pc, #216]	; (5c64 <getSelectorConfig+0x114>)
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d01d      	beq.n	5bce <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5b92:	2300      	movs	r3, #0
    5b94:	9303      	str	r3, [sp, #12]
    5b96:	e013      	b.n	5bc0 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5b98:	4b32      	ldr	r3, [pc, #200]	; (5c64 <getSelectorConfig+0x114>)
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	9a03      	ldr	r2, [sp, #12]
    5b9e:	320d      	adds	r2, #13
    5ba0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5ba4:	9a01      	ldr	r2, [sp, #4]
    5ba6:	429a      	cmp	r2, r3
    5ba8:	d107      	bne.n	5bba <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5baa:	4b2e      	ldr	r3, [pc, #184]	; (5c64 <getSelectorConfig+0x114>)
    5bac:	681a      	ldr	r2, [r3, #0]
    5bae:	9b03      	ldr	r3, [sp, #12]
    5bb0:	330d      	adds	r3, #13
    5bb2:	00db      	lsls	r3, r3, #3
    5bb4:	4413      	add	r3, r2
    5bb6:	9305      	str	r3, [sp, #20]
                break;
    5bb8:	e009      	b.n	5bce <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5bba:	9b03      	ldr	r3, [sp, #12]
    5bbc:	3301      	adds	r3, #1
    5bbe:	9303      	str	r3, [sp, #12]
    5bc0:	4b28      	ldr	r3, [pc, #160]	; (5c64 <getSelectorConfig+0x114>)
    5bc2:	681b      	ldr	r3, [r3, #0]
    5bc4:	7adb      	ldrb	r3, [r3, #11]
    5bc6:	461a      	mov	r2, r3
    5bc8:	9b03      	ldr	r3, [sp, #12]
    5bca:	4293      	cmp	r3, r2
    5bcc:	d3e4      	bcc.n	5b98 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5bce:	9b05      	ldr	r3, [sp, #20]
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d140      	bne.n	5c56 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5bd4:	9b04      	ldr	r3, [sp, #16]
    5bd6:	00db      	lsls	r3, r3, #3
    5bd8:	4a23      	ldr	r2, [pc, #140]	; (5c68 <getSelectorConfig+0x118>)
    5bda:	4413      	add	r3, r2
    5bdc:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5bde:	4922      	ldr	r1, [pc, #136]	; (5c68 <getSelectorConfig+0x118>)
    5be0:	9b04      	ldr	r3, [sp, #16]
    5be2:	9a01      	ldr	r2, [sp, #4]
    5be4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5be8:	9b01      	ldr	r3, [sp, #4]
    5bea:	2b1b      	cmp	r3, #27
    5bec:	d025      	beq.n	5c3a <getSelectorConfig+0xea>
    5bee:	9b01      	ldr	r3, [sp, #4]
    5bf0:	2b1b      	cmp	r3, #27
    5bf2:	d832      	bhi.n	5c5a <getSelectorConfig+0x10a>
    5bf4:	9b01      	ldr	r3, [sp, #4]
    5bf6:	2b19      	cmp	r3, #25
    5bf8:	d003      	beq.n	5c02 <getSelectorConfig+0xb2>
    5bfa:	9b01      	ldr	r3, [sp, #4]
    5bfc:	2b1a      	cmp	r3, #26
    5bfe:	d00e      	beq.n	5c1e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c00:	e02b      	b.n	5c5a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    5c02:	4b1a      	ldr	r3, [pc, #104]	; (5c6c <getSelectorConfig+0x11c>)
    5c04:	695b      	ldr	r3, [r3, #20]
    5c06:	0e1b      	lsrs	r3, r3, #24
    5c08:	f003 030f 	and.w	r3, r3, #15
    5c0c:	4a18      	ldr	r2, [pc, #96]	; (5c70 <getSelectorConfig+0x120>)
    5c0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5c12:	4915      	ldr	r1, [pc, #84]	; (5c68 <getSelectorConfig+0x118>)
    5c14:	9b04      	ldr	r3, [sp, #16]
    5c16:	00db      	lsls	r3, r3, #3
    5c18:	440b      	add	r3, r1
    5c1a:	605a      	str	r2, [r3, #4]
                break;
    5c1c:	e01e      	b.n	5c5c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5c1e:	4b13      	ldr	r3, [pc, #76]	; (5c6c <getSelectorConfig+0x11c>)
    5c20:	699b      	ldr	r3, [r3, #24]
    5c22:	0e1b      	lsrs	r3, r3, #24
    5c24:	f003 030f 	and.w	r3, r3, #15
    5c28:	4a11      	ldr	r2, [pc, #68]	; (5c70 <getSelectorConfig+0x120>)
    5c2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5c2e:	490e      	ldr	r1, [pc, #56]	; (5c68 <getSelectorConfig+0x118>)
    5c30:	9b04      	ldr	r3, [sp, #16]
    5c32:	00db      	lsls	r3, r3, #3
    5c34:	440b      	add	r3, r1
    5c36:	605a      	str	r2, [r3, #4]
                break;
    5c38:	e010      	b.n	5c5c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5c3a:	4b0c      	ldr	r3, [pc, #48]	; (5c6c <getSelectorConfig+0x11c>)
    5c3c:	69db      	ldr	r3, [r3, #28]
    5c3e:	0e1b      	lsrs	r3, r3, #24
    5c40:	f003 030f 	and.w	r3, r3, #15
    5c44:	4a0a      	ldr	r2, [pc, #40]	; (5c70 <getSelectorConfig+0x120>)
    5c46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5c4a:	4907      	ldr	r1, [pc, #28]	; (5c68 <getSelectorConfig+0x118>)
    5c4c:	9b04      	ldr	r3, [sp, #16]
    5c4e:	00db      	lsls	r3, r3, #3
    5c50:	440b      	add	r3, r1
    5c52:	605a      	str	r2, [r3, #4]
                break;
    5c54:	e002      	b.n	5c5c <getSelectorConfig+0x10c>
        }
    }
    5c56:	bf00      	nop
    5c58:	e000      	b.n	5c5c <getSelectorConfig+0x10c>
                break;
    5c5a:	bf00      	nop

    return ReturnValue;
    5c5c:	9b05      	ldr	r3, [sp, #20]
}
    5c5e:	4618      	mov	r0, r3
    5c60:	b006      	add	sp, #24
    5c62:	4770      	bx	lr
    5c64:	1fff8bdc 	.word	0x1fff8bdc
    5c68:	1fff8c90 	.word	0x1fff8c90
    5c6c:	40064000 	.word	0x40064000
    5c70:	00019f30 	.word	0x00019f30

00005c74 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5c74:	b086      	sub	sp, #24
    5c76:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5c78:	2300      	movs	r3, #0
    5c7a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5c7c:	2300      	movs	r3, #0
    5c7e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5c80:	9b01      	ldr	r3, [sp, #4]
    5c82:	2b1f      	cmp	r3, #31
    5c84:	d00f      	beq.n	5ca6 <getCoreDividerConfig+0x32>
    5c86:	9b01      	ldr	r3, [sp, #4]
    5c88:	2b1f      	cmp	r3, #31
    5c8a:	d80f      	bhi.n	5cac <getCoreDividerConfig+0x38>
    5c8c:	9b01      	ldr	r3, [sp, #4]
    5c8e:	2b1d      	cmp	r3, #29
    5c90:	d003      	beq.n	5c9a <getCoreDividerConfig+0x26>
    5c92:	9b01      	ldr	r3, [sp, #4]
    5c94:	2b1e      	cmp	r3, #30
    5c96:	d003      	beq.n	5ca0 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c98:	e008      	b.n	5cac <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5c9a:	2300      	movs	r3, #0
    5c9c:	9304      	str	r3, [sp, #16]
            break;
    5c9e:	e006      	b.n	5cae <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5ca0:	2301      	movs	r3, #1
    5ca2:	9304      	str	r3, [sp, #16]
            break;
    5ca4:	e003      	b.n	5cae <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5ca6:	2302      	movs	r3, #2
    5ca8:	9304      	str	r3, [sp, #16]
            break;
    5caa:	e000      	b.n	5cae <getCoreDividerConfig+0x3a>
                break;
    5cac:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5cae:	4b41      	ldr	r3, [pc, #260]	; (5db4 <getCoreDividerConfig+0x140>)
    5cb0:	681b      	ldr	r3, [r3, #0]
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d026      	beq.n	5d04 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5cb6:	2300      	movs	r3, #0
    5cb8:	9303      	str	r3, [sp, #12]
    5cba:	e01c      	b.n	5cf6 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5cbc:	4b3d      	ldr	r3, [pc, #244]	; (5db4 <getCoreDividerConfig+0x140>)
    5cbe:	6819      	ldr	r1, [r3, #0]
    5cc0:	9a03      	ldr	r2, [sp, #12]
    5cc2:	4613      	mov	r3, r2
    5cc4:	005b      	lsls	r3, r3, #1
    5cc6:	4413      	add	r3, r2
    5cc8:	009b      	lsls	r3, r3, #2
    5cca:	440b      	add	r3, r1
    5ccc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5cd0:	681b      	ldr	r3, [r3, #0]
    5cd2:	9a01      	ldr	r2, [sp, #4]
    5cd4:	429a      	cmp	r2, r3
    5cd6:	d10b      	bne.n	5cf0 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5cd8:	4b36      	ldr	r3, [pc, #216]	; (5db4 <getCoreDividerConfig+0x140>)
    5cda:	6819      	ldr	r1, [r3, #0]
    5cdc:	9a03      	ldr	r2, [sp, #12]
    5cde:	4613      	mov	r3, r2
    5ce0:	005b      	lsls	r3, r3, #1
    5ce2:	4413      	add	r3, r2
    5ce4:	009b      	lsls	r3, r3, #2
    5ce6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5cea:	440b      	add	r3, r1
    5cec:	9305      	str	r3, [sp, #20]
                break;
    5cee:	e009      	b.n	5d04 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5cf0:	9b03      	ldr	r3, [sp, #12]
    5cf2:	3301      	adds	r3, #1
    5cf4:	9303      	str	r3, [sp, #12]
    5cf6:	4b2f      	ldr	r3, [pc, #188]	; (5db4 <getCoreDividerConfig+0x140>)
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	7b1b      	ldrb	r3, [r3, #12]
    5cfc:	461a      	mov	r2, r3
    5cfe:	9b03      	ldr	r3, [sp, #12]
    5d00:	4293      	cmp	r3, r2
    5d02:	d3db      	bcc.n	5cbc <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5d04:	9b05      	ldr	r3, [sp, #20]
    5d06:	2b00      	cmp	r3, #0
    5d08:	d14d      	bne.n	5da6 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5d0a:	9a04      	ldr	r2, [sp, #16]
    5d0c:	4613      	mov	r3, r2
    5d0e:	005b      	lsls	r3, r3, #1
    5d10:	4413      	add	r3, r2
    5d12:	009b      	lsls	r3, r3, #2
    5d14:	4a28      	ldr	r2, [pc, #160]	; (5db8 <getCoreDividerConfig+0x144>)
    5d16:	4413      	add	r3, r2
    5d18:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5d1a:	4927      	ldr	r1, [pc, #156]	; (5db8 <getCoreDividerConfig+0x144>)
    5d1c:	9a04      	ldr	r2, [sp, #16]
    5d1e:	4613      	mov	r3, r2
    5d20:	005b      	lsls	r3, r3, #1
    5d22:	4413      	add	r3, r2
    5d24:	009b      	lsls	r3, r3, #2
    5d26:	440b      	add	r3, r1
    5d28:	9a01      	ldr	r2, [sp, #4]
    5d2a:	601a      	str	r2, [r3, #0]
        switch(Name)
    5d2c:	9b01      	ldr	r3, [sp, #4]
    5d2e:	2b1f      	cmp	r3, #31
    5d30:	d029      	beq.n	5d86 <getCoreDividerConfig+0x112>
    5d32:	9b01      	ldr	r3, [sp, #4]
    5d34:	2b1f      	cmp	r3, #31
    5d36:	d838      	bhi.n	5daa <getCoreDividerConfig+0x136>
    5d38:	9b01      	ldr	r3, [sp, #4]
    5d3a:	2b1d      	cmp	r3, #29
    5d3c:	d003      	beq.n	5d46 <getCoreDividerConfig+0xd2>
    5d3e:	9b01      	ldr	r3, [sp, #4]
    5d40:	2b1e      	cmp	r3, #30
    5d42:	d010      	beq.n	5d66 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d44:	e031      	b.n	5daa <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5d46:	4b1d      	ldr	r3, [pc, #116]	; (5dbc <getCoreDividerConfig+0x148>)
    5d48:	695b      	ldr	r3, [r3, #20]
    5d4a:	0c1b      	lsrs	r3, r3, #16
    5d4c:	f003 030f 	and.w	r3, r3, #15
    5d50:	1c59      	adds	r1, r3, #1
    5d52:	4819      	ldr	r0, [pc, #100]	; (5db8 <getCoreDividerConfig+0x144>)
    5d54:	9a04      	ldr	r2, [sp, #16]
    5d56:	4613      	mov	r3, r2
    5d58:	005b      	lsls	r3, r3, #1
    5d5a:	4413      	add	r3, r2
    5d5c:	009b      	lsls	r3, r3, #2
    5d5e:	4403      	add	r3, r0
    5d60:	3304      	adds	r3, #4
    5d62:	6019      	str	r1, [r3, #0]
                break;
    5d64:	e022      	b.n	5dac <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5d66:	4b15      	ldr	r3, [pc, #84]	; (5dbc <getCoreDividerConfig+0x148>)
    5d68:	699b      	ldr	r3, [r3, #24]
    5d6a:	0c1b      	lsrs	r3, r3, #16
    5d6c:	f003 030f 	and.w	r3, r3, #15
    5d70:	1c59      	adds	r1, r3, #1
    5d72:	4811      	ldr	r0, [pc, #68]	; (5db8 <getCoreDividerConfig+0x144>)
    5d74:	9a04      	ldr	r2, [sp, #16]
    5d76:	4613      	mov	r3, r2
    5d78:	005b      	lsls	r3, r3, #1
    5d7a:	4413      	add	r3, r2
    5d7c:	009b      	lsls	r3, r3, #2
    5d7e:	4403      	add	r3, r0
    5d80:	3304      	adds	r3, #4
    5d82:	6019      	str	r1, [r3, #0]
                break;
    5d84:	e012      	b.n	5dac <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5d86:	4b0d      	ldr	r3, [pc, #52]	; (5dbc <getCoreDividerConfig+0x148>)
    5d88:	69db      	ldr	r3, [r3, #28]
    5d8a:	0c1b      	lsrs	r3, r3, #16
    5d8c:	f003 030f 	and.w	r3, r3, #15
    5d90:	1c59      	adds	r1, r3, #1
    5d92:	4809      	ldr	r0, [pc, #36]	; (5db8 <getCoreDividerConfig+0x144>)
    5d94:	9a04      	ldr	r2, [sp, #16]
    5d96:	4613      	mov	r3, r2
    5d98:	005b      	lsls	r3, r3, #1
    5d9a:	4413      	add	r3, r2
    5d9c:	009b      	lsls	r3, r3, #2
    5d9e:	4403      	add	r3, r0
    5da0:	3304      	adds	r3, #4
    5da2:	6019      	str	r1, [r3, #0]
                break;
    5da4:	e002      	b.n	5dac <getCoreDividerConfig+0x138>
        }
    }
    5da6:	bf00      	nop
    5da8:	e000      	b.n	5dac <getCoreDividerConfig+0x138>
                break;
    5daa:	bf00      	nop

    return ReturnValue;
    5dac:	9b05      	ldr	r3, [sp, #20]
}
    5dae:	4618      	mov	r0, r3
    5db0:	b006      	add	sp, #24
    5db2:	4770      	bx	lr
    5db4:	1fff8bdc 	.word	0x1fff8bdc
    5db8:	1fff8ca8 	.word	0x1fff8ca8
    5dbc:	40064000 	.word	0x40064000

00005dc0 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5dc0:	b086      	sub	sp, #24
    5dc2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5dc4:	2300      	movs	r3, #0
    5dc6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5dc8:	2300      	movs	r3, #0
    5dca:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5dcc:	9b01      	ldr	r3, [sp, #4]
    5dce:	2b23      	cmp	r3, #35	; 0x23
    5dd0:	d00f      	beq.n	5df2 <getBusDividerConfig+0x32>
    5dd2:	9b01      	ldr	r3, [sp, #4]
    5dd4:	2b23      	cmp	r3, #35	; 0x23
    5dd6:	d80f      	bhi.n	5df8 <getBusDividerConfig+0x38>
    5dd8:	9b01      	ldr	r3, [sp, #4]
    5dda:	2b21      	cmp	r3, #33	; 0x21
    5ddc:	d003      	beq.n	5de6 <getBusDividerConfig+0x26>
    5dde:	9b01      	ldr	r3, [sp, #4]
    5de0:	2b22      	cmp	r3, #34	; 0x22
    5de2:	d003      	beq.n	5dec <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5de4:	e008      	b.n	5df8 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5de6:	2300      	movs	r3, #0
    5de8:	9304      	str	r3, [sp, #16]
            break;
    5dea:	e006      	b.n	5dfa <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5dec:	2301      	movs	r3, #1
    5dee:	9304      	str	r3, [sp, #16]
            break;
    5df0:	e003      	b.n	5dfa <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5df2:	2302      	movs	r3, #2
    5df4:	9304      	str	r3, [sp, #16]
            break;
    5df6:	e000      	b.n	5dfa <getBusDividerConfig+0x3a>
                break;
    5df8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5dfa:	4b41      	ldr	r3, [pc, #260]	; (5f00 <getBusDividerConfig+0x140>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d026      	beq.n	5e50 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5e02:	2300      	movs	r3, #0
    5e04:	9303      	str	r3, [sp, #12]
    5e06:	e01c      	b.n	5e42 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5e08:	4b3d      	ldr	r3, [pc, #244]	; (5f00 <getBusDividerConfig+0x140>)
    5e0a:	6819      	ldr	r1, [r3, #0]
    5e0c:	9a03      	ldr	r2, [sp, #12]
    5e0e:	4613      	mov	r3, r2
    5e10:	005b      	lsls	r3, r3, #1
    5e12:	4413      	add	r3, r2
    5e14:	009b      	lsls	r3, r3, #2
    5e16:	440b      	add	r3, r1
    5e18:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5e1c:	681b      	ldr	r3, [r3, #0]
    5e1e:	9a01      	ldr	r2, [sp, #4]
    5e20:	429a      	cmp	r2, r3
    5e22:	d10b      	bne.n	5e3c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5e24:	4b36      	ldr	r3, [pc, #216]	; (5f00 <getBusDividerConfig+0x140>)
    5e26:	6819      	ldr	r1, [r3, #0]
    5e28:	9a03      	ldr	r2, [sp, #12]
    5e2a:	4613      	mov	r3, r2
    5e2c:	005b      	lsls	r3, r3, #1
    5e2e:	4413      	add	r3, r2
    5e30:	009b      	lsls	r3, r3, #2
    5e32:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5e36:	440b      	add	r3, r1
    5e38:	9305      	str	r3, [sp, #20]
                break;
    5e3a:	e009      	b.n	5e50 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5e3c:	9b03      	ldr	r3, [sp, #12]
    5e3e:	3301      	adds	r3, #1
    5e40:	9303      	str	r3, [sp, #12]
    5e42:	4b2f      	ldr	r3, [pc, #188]	; (5f00 <getBusDividerConfig+0x140>)
    5e44:	681b      	ldr	r3, [r3, #0]
    5e46:	7b1b      	ldrb	r3, [r3, #12]
    5e48:	461a      	mov	r2, r3
    5e4a:	9b03      	ldr	r3, [sp, #12]
    5e4c:	4293      	cmp	r3, r2
    5e4e:	d3db      	bcc.n	5e08 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5e50:	9b05      	ldr	r3, [sp, #20]
    5e52:	2b00      	cmp	r3, #0
    5e54:	d14d      	bne.n	5ef2 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5e56:	9a04      	ldr	r2, [sp, #16]
    5e58:	4613      	mov	r3, r2
    5e5a:	005b      	lsls	r3, r3, #1
    5e5c:	4413      	add	r3, r2
    5e5e:	009b      	lsls	r3, r3, #2
    5e60:	4a28      	ldr	r2, [pc, #160]	; (5f04 <getBusDividerConfig+0x144>)
    5e62:	4413      	add	r3, r2
    5e64:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5e66:	4927      	ldr	r1, [pc, #156]	; (5f04 <getBusDividerConfig+0x144>)
    5e68:	9a04      	ldr	r2, [sp, #16]
    5e6a:	4613      	mov	r3, r2
    5e6c:	005b      	lsls	r3, r3, #1
    5e6e:	4413      	add	r3, r2
    5e70:	009b      	lsls	r3, r3, #2
    5e72:	440b      	add	r3, r1
    5e74:	9a01      	ldr	r2, [sp, #4]
    5e76:	601a      	str	r2, [r3, #0]
        switch(Name)
    5e78:	9b01      	ldr	r3, [sp, #4]
    5e7a:	2b23      	cmp	r3, #35	; 0x23
    5e7c:	d029      	beq.n	5ed2 <getBusDividerConfig+0x112>
    5e7e:	9b01      	ldr	r3, [sp, #4]
    5e80:	2b23      	cmp	r3, #35	; 0x23
    5e82:	d838      	bhi.n	5ef6 <getBusDividerConfig+0x136>
    5e84:	9b01      	ldr	r3, [sp, #4]
    5e86:	2b21      	cmp	r3, #33	; 0x21
    5e88:	d003      	beq.n	5e92 <getBusDividerConfig+0xd2>
    5e8a:	9b01      	ldr	r3, [sp, #4]
    5e8c:	2b22      	cmp	r3, #34	; 0x22
    5e8e:	d010      	beq.n	5eb2 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5e90:	e031      	b.n	5ef6 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5e92:	4b1d      	ldr	r3, [pc, #116]	; (5f08 <getBusDividerConfig+0x148>)
    5e94:	695b      	ldr	r3, [r3, #20]
    5e96:	091b      	lsrs	r3, r3, #4
    5e98:	f003 030f 	and.w	r3, r3, #15
    5e9c:	1c59      	adds	r1, r3, #1
    5e9e:	4819      	ldr	r0, [pc, #100]	; (5f04 <getBusDividerConfig+0x144>)
    5ea0:	9a04      	ldr	r2, [sp, #16]
    5ea2:	4613      	mov	r3, r2
    5ea4:	005b      	lsls	r3, r3, #1
    5ea6:	4413      	add	r3, r2
    5ea8:	009b      	lsls	r3, r3, #2
    5eaa:	4403      	add	r3, r0
    5eac:	3304      	adds	r3, #4
    5eae:	6019      	str	r1, [r3, #0]
                break;
    5eb0:	e022      	b.n	5ef8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5eb2:	4b15      	ldr	r3, [pc, #84]	; (5f08 <getBusDividerConfig+0x148>)
    5eb4:	699b      	ldr	r3, [r3, #24]
    5eb6:	091b      	lsrs	r3, r3, #4
    5eb8:	f003 030f 	and.w	r3, r3, #15
    5ebc:	1c59      	adds	r1, r3, #1
    5ebe:	4811      	ldr	r0, [pc, #68]	; (5f04 <getBusDividerConfig+0x144>)
    5ec0:	9a04      	ldr	r2, [sp, #16]
    5ec2:	4613      	mov	r3, r2
    5ec4:	005b      	lsls	r3, r3, #1
    5ec6:	4413      	add	r3, r2
    5ec8:	009b      	lsls	r3, r3, #2
    5eca:	4403      	add	r3, r0
    5ecc:	3304      	adds	r3, #4
    5ece:	6019      	str	r1, [r3, #0]
                break;
    5ed0:	e012      	b.n	5ef8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5ed2:	4b0d      	ldr	r3, [pc, #52]	; (5f08 <getBusDividerConfig+0x148>)
    5ed4:	69db      	ldr	r3, [r3, #28]
    5ed6:	091b      	lsrs	r3, r3, #4
    5ed8:	f003 030f 	and.w	r3, r3, #15
    5edc:	1c59      	adds	r1, r3, #1
    5ede:	4809      	ldr	r0, [pc, #36]	; (5f04 <getBusDividerConfig+0x144>)
    5ee0:	9a04      	ldr	r2, [sp, #16]
    5ee2:	4613      	mov	r3, r2
    5ee4:	005b      	lsls	r3, r3, #1
    5ee6:	4413      	add	r3, r2
    5ee8:	009b      	lsls	r3, r3, #2
    5eea:	4403      	add	r3, r0
    5eec:	3304      	adds	r3, #4
    5eee:	6019      	str	r1, [r3, #0]
                break;
    5ef0:	e002      	b.n	5ef8 <getBusDividerConfig+0x138>
        }
    }
    5ef2:	bf00      	nop
    5ef4:	e000      	b.n	5ef8 <getBusDividerConfig+0x138>
                break;
    5ef6:	bf00      	nop

    return ReturnValue;
    5ef8:	9b05      	ldr	r3, [sp, #20]
}
    5efa:	4618      	mov	r0, r3
    5efc:	b006      	add	sp, #24
    5efe:	4770      	bx	lr
    5f00:	1fff8bdc 	.word	0x1fff8bdc
    5f04:	1fff8ccc 	.word	0x1fff8ccc
    5f08:	40064000 	.word	0x40064000

00005f0c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5f0c:	b086      	sub	sp, #24
    5f0e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5f10:	2300      	movs	r3, #0
    5f12:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5f14:	2300      	movs	r3, #0
    5f16:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5f18:	9b01      	ldr	r3, [sp, #4]
    5f1a:	2b27      	cmp	r3, #39	; 0x27
    5f1c:	d00f      	beq.n	5f3e <getSlowDividerConfig+0x32>
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	2b27      	cmp	r3, #39	; 0x27
    5f22:	d80f      	bhi.n	5f44 <getSlowDividerConfig+0x38>
    5f24:	9b01      	ldr	r3, [sp, #4]
    5f26:	2b25      	cmp	r3, #37	; 0x25
    5f28:	d003      	beq.n	5f32 <getSlowDividerConfig+0x26>
    5f2a:	9b01      	ldr	r3, [sp, #4]
    5f2c:	2b26      	cmp	r3, #38	; 0x26
    5f2e:	d003      	beq.n	5f38 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5f30:	e008      	b.n	5f44 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5f32:	2300      	movs	r3, #0
    5f34:	9304      	str	r3, [sp, #16]
            break;
    5f36:	e006      	b.n	5f46 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5f38:	2301      	movs	r3, #1
    5f3a:	9304      	str	r3, [sp, #16]
            break;
    5f3c:	e003      	b.n	5f46 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5f3e:	2302      	movs	r3, #2
    5f40:	9304      	str	r3, [sp, #16]
            break;
    5f42:	e000      	b.n	5f46 <getSlowDividerConfig+0x3a>
                break;
    5f44:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5f46:	4b40      	ldr	r3, [pc, #256]	; (6048 <getSlowDividerConfig+0x13c>)
    5f48:	681b      	ldr	r3, [r3, #0]
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	d026      	beq.n	5f9c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5f4e:	2300      	movs	r3, #0
    5f50:	9303      	str	r3, [sp, #12]
    5f52:	e01c      	b.n	5f8e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5f54:	4b3c      	ldr	r3, [pc, #240]	; (6048 <getSlowDividerConfig+0x13c>)
    5f56:	6819      	ldr	r1, [r3, #0]
    5f58:	9a03      	ldr	r2, [sp, #12]
    5f5a:	4613      	mov	r3, r2
    5f5c:	005b      	lsls	r3, r3, #1
    5f5e:	4413      	add	r3, r2
    5f60:	009b      	lsls	r3, r3, #2
    5f62:	440b      	add	r3, r1
    5f64:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5f68:	681b      	ldr	r3, [r3, #0]
    5f6a:	9a01      	ldr	r2, [sp, #4]
    5f6c:	429a      	cmp	r2, r3
    5f6e:	d10b      	bne.n	5f88 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5f70:	4b35      	ldr	r3, [pc, #212]	; (6048 <getSlowDividerConfig+0x13c>)
    5f72:	6819      	ldr	r1, [r3, #0]
    5f74:	9a03      	ldr	r2, [sp, #12]
    5f76:	4613      	mov	r3, r2
    5f78:	005b      	lsls	r3, r3, #1
    5f7a:	4413      	add	r3, r2
    5f7c:	009b      	lsls	r3, r3, #2
    5f7e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5f82:	440b      	add	r3, r1
    5f84:	9305      	str	r3, [sp, #20]
                break;
    5f86:	e009      	b.n	5f9c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5f88:	9b03      	ldr	r3, [sp, #12]
    5f8a:	3301      	adds	r3, #1
    5f8c:	9303      	str	r3, [sp, #12]
    5f8e:	4b2e      	ldr	r3, [pc, #184]	; (6048 <getSlowDividerConfig+0x13c>)
    5f90:	681b      	ldr	r3, [r3, #0]
    5f92:	7b1b      	ldrb	r3, [r3, #12]
    5f94:	461a      	mov	r2, r3
    5f96:	9b03      	ldr	r3, [sp, #12]
    5f98:	4293      	cmp	r3, r2
    5f9a:	d3db      	bcc.n	5f54 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5f9c:	9b05      	ldr	r3, [sp, #20]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d14a      	bne.n	6038 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5fa2:	9a04      	ldr	r2, [sp, #16]
    5fa4:	4613      	mov	r3, r2
    5fa6:	005b      	lsls	r3, r3, #1
    5fa8:	4413      	add	r3, r2
    5faa:	009b      	lsls	r3, r3, #2
    5fac:	4a27      	ldr	r2, [pc, #156]	; (604c <getSlowDividerConfig+0x140>)
    5fae:	4413      	add	r3, r2
    5fb0:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5fb2:	4926      	ldr	r1, [pc, #152]	; (604c <getSlowDividerConfig+0x140>)
    5fb4:	9a04      	ldr	r2, [sp, #16]
    5fb6:	4613      	mov	r3, r2
    5fb8:	005b      	lsls	r3, r3, #1
    5fba:	4413      	add	r3, r2
    5fbc:	009b      	lsls	r3, r3, #2
    5fbe:	440b      	add	r3, r1
    5fc0:	9a01      	ldr	r2, [sp, #4]
    5fc2:	601a      	str	r2, [r3, #0]
        switch(Name)
    5fc4:	9b01      	ldr	r3, [sp, #4]
    5fc6:	2b27      	cmp	r3, #39	; 0x27
    5fc8:	d027      	beq.n	601a <getSlowDividerConfig+0x10e>
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	2b27      	cmp	r3, #39	; 0x27
    5fce:	d835      	bhi.n	603c <getSlowDividerConfig+0x130>
    5fd0:	9b01      	ldr	r3, [sp, #4]
    5fd2:	2b25      	cmp	r3, #37	; 0x25
    5fd4:	d003      	beq.n	5fde <getSlowDividerConfig+0xd2>
    5fd6:	9b01      	ldr	r3, [sp, #4]
    5fd8:	2b26      	cmp	r3, #38	; 0x26
    5fda:	d00f      	beq.n	5ffc <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5fdc:	e02e      	b.n	603c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5fde:	4b1c      	ldr	r3, [pc, #112]	; (6050 <getSlowDividerConfig+0x144>)
    5fe0:	695b      	ldr	r3, [r3, #20]
    5fe2:	f003 030f 	and.w	r3, r3, #15
    5fe6:	1c59      	adds	r1, r3, #1
    5fe8:	4818      	ldr	r0, [pc, #96]	; (604c <getSlowDividerConfig+0x140>)
    5fea:	9a04      	ldr	r2, [sp, #16]
    5fec:	4613      	mov	r3, r2
    5fee:	005b      	lsls	r3, r3, #1
    5ff0:	4413      	add	r3, r2
    5ff2:	009b      	lsls	r3, r3, #2
    5ff4:	4403      	add	r3, r0
    5ff6:	3304      	adds	r3, #4
    5ff8:	6019      	str	r1, [r3, #0]
                break;
    5ffa:	e020      	b.n	603e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5ffc:	4b14      	ldr	r3, [pc, #80]	; (6050 <getSlowDividerConfig+0x144>)
    5ffe:	699b      	ldr	r3, [r3, #24]
    6000:	f003 030f 	and.w	r3, r3, #15
    6004:	1c59      	adds	r1, r3, #1
    6006:	4811      	ldr	r0, [pc, #68]	; (604c <getSlowDividerConfig+0x140>)
    6008:	9a04      	ldr	r2, [sp, #16]
    600a:	4613      	mov	r3, r2
    600c:	005b      	lsls	r3, r3, #1
    600e:	4413      	add	r3, r2
    6010:	009b      	lsls	r3, r3, #2
    6012:	4403      	add	r3, r0
    6014:	3304      	adds	r3, #4
    6016:	6019      	str	r1, [r3, #0]
                break;
    6018:	e011      	b.n	603e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    601a:	4b0d      	ldr	r3, [pc, #52]	; (6050 <getSlowDividerConfig+0x144>)
    601c:	69db      	ldr	r3, [r3, #28]
    601e:	f003 030f 	and.w	r3, r3, #15
    6022:	1c59      	adds	r1, r3, #1
    6024:	4809      	ldr	r0, [pc, #36]	; (604c <getSlowDividerConfig+0x140>)
    6026:	9a04      	ldr	r2, [sp, #16]
    6028:	4613      	mov	r3, r2
    602a:	005b      	lsls	r3, r3, #1
    602c:	4413      	add	r3, r2
    602e:	009b      	lsls	r3, r3, #2
    6030:	4403      	add	r3, r0
    6032:	3304      	adds	r3, #4
    6034:	6019      	str	r1, [r3, #0]
                break;
    6036:	e002      	b.n	603e <getSlowDividerConfig+0x132>
        }
    }
    6038:	bf00      	nop
    603a:	e000      	b.n	603e <getSlowDividerConfig+0x132>
                break;
    603c:	bf00      	nop

    return ReturnValue;
    603e:	9b05      	ldr	r3, [sp, #20]
}
    6040:	4618      	mov	r0, r3
    6042:	b006      	add	sp, #24
    6044:	4770      	bx	lr
    6046:	bf00      	nop
    6048:	1fff8bdc 	.word	0x1fff8bdc
    604c:	1fff8cf0 	.word	0x1fff8cf0
    6050:	40064000 	.word	0x40064000

00006054 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    6054:	b500      	push	{lr}
    6056:	b083      	sub	sp, #12
    6058:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    605a:	4b64      	ldr	r3, [pc, #400]	; (61ec <Clock_Ip_ClockInitializeObjects+0x198>)
    605c:	781b      	ldrb	r3, [r3, #0]
    605e:	f083 0301 	eor.w	r3, r3, #1
    6062:	b2db      	uxtb	r3, r3
    6064:	2b00      	cmp	r3, #0
    6066:	d05b      	beq.n	6120 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    6068:	4b60      	ldr	r3, [pc, #384]	; (61ec <Clock_Ip_ClockInitializeObjects+0x198>)
    606a:	2201      	movs	r2, #1
    606c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    606e:	4b60      	ldr	r3, [pc, #384]	; (61f0 <Clock_Ip_ClockInitializeObjects+0x19c>)
    6070:	785b      	ldrb	r3, [r3, #1]
    6072:	461a      	mov	r2, r3
    6074:	4613      	mov	r3, r2
    6076:	009b      	lsls	r3, r3, #2
    6078:	4413      	add	r3, r2
    607a:	009b      	lsls	r3, r3, #2
    607c:	4a5d      	ldr	r2, [pc, #372]	; (61f4 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    607e:	4413      	add	r3, r2
    6080:	4a5d      	ldr	r2, [pc, #372]	; (61f8 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    6082:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    6084:	4b5d      	ldr	r3, [pc, #372]	; (61fc <Clock_Ip_ClockInitializeObjects+0x1a8>)
    6086:	785b      	ldrb	r3, [r3, #1]
    6088:	461a      	mov	r2, r3
    608a:	4613      	mov	r3, r2
    608c:	009b      	lsls	r3, r3, #2
    608e:	4413      	add	r3, r2
    6090:	009b      	lsls	r3, r3, #2
    6092:	4a5b      	ldr	r2, [pc, #364]	; (6200 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    6094:	4413      	add	r3, r2
    6096:	4a5b      	ldr	r2, [pc, #364]	; (6204 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    6098:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    609a:	4b5b      	ldr	r3, [pc, #364]	; (6208 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    609c:	791b      	ldrb	r3, [r3, #4]
    609e:	461a      	mov	r2, r3
    60a0:	4613      	mov	r3, r2
    60a2:	005b      	lsls	r3, r3, #1
    60a4:	4413      	add	r3, r2
    60a6:	009b      	lsls	r3, r3, #2
    60a8:	4a58      	ldr	r2, [pc, #352]	; (620c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    60aa:	4413      	add	r3, r2
    60ac:	4a58      	ldr	r2, [pc, #352]	; (6210 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    60ae:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    60b0:	4b58      	ldr	r3, [pc, #352]	; (6214 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    60b2:	795b      	ldrb	r3, [r3, #5]
    60b4:	00db      	lsls	r3, r3, #3
    60b6:	4a58      	ldr	r2, [pc, #352]	; (6218 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    60b8:	4413      	add	r3, r2
    60ba:	4a58      	ldr	r2, [pc, #352]	; (621c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    60bc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    60be:	4b55      	ldr	r3, [pc, #340]	; (6214 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    60c0:	79db      	ldrb	r3, [r3, #7]
    60c2:	00db      	lsls	r3, r3, #3
    60c4:	4a54      	ldr	r2, [pc, #336]	; (6218 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    60c6:	4413      	add	r3, r2
    60c8:	4a55      	ldr	r2, [pc, #340]	; (6220 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    60ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    60cc:	4b55      	ldr	r3, [pc, #340]	; (6224 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60ce:	799b      	ldrb	r3, [r3, #6]
    60d0:	009b      	lsls	r3, r3, #2
    60d2:	4a55      	ldr	r2, [pc, #340]	; (6228 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60d4:	4413      	add	r3, r2
    60d6:	4a55      	ldr	r2, [pc, #340]	; (622c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    60d8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    60da:	4b52      	ldr	r3, [pc, #328]	; (6224 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60dc:	7a1b      	ldrb	r3, [r3, #8]
    60de:	009b      	lsls	r3, r3, #2
    60e0:	4a51      	ldr	r2, [pc, #324]	; (6228 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60e2:	4413      	add	r3, r2
    60e4:	4a52      	ldr	r2, [pc, #328]	; (6230 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    60e6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    60e8:	4b4e      	ldr	r3, [pc, #312]	; (6224 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60ea:	7a5b      	ldrb	r3, [r3, #9]
    60ec:	009b      	lsls	r3, r3, #2
    60ee:	4a4e      	ldr	r2, [pc, #312]	; (6228 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60f0:	4413      	add	r3, r2
    60f2:	4a50      	ldr	r2, [pc, #320]	; (6234 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    60f4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    60f6:	4b4b      	ldr	r3, [pc, #300]	; (6224 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60f8:	7adb      	ldrb	r3, [r3, #11]
    60fa:	009b      	lsls	r3, r3, #2
    60fc:	4a4a      	ldr	r2, [pc, #296]	; (6228 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60fe:	4413      	add	r3, r2
    6100:	4a4d      	ldr	r2, [pc, #308]	; (6238 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    6102:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    6104:	4b47      	ldr	r3, [pc, #284]	; (6224 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6106:	7b1b      	ldrb	r3, [r3, #12]
    6108:	009b      	lsls	r3, r3, #2
    610a:	4a47      	ldr	r2, [pc, #284]	; (6228 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    610c:	4413      	add	r3, r2
    610e:	4a4b      	ldr	r2, [pc, #300]	; (623c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    6110:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    6112:	4b44      	ldr	r3, [pc, #272]	; (6224 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6114:	7b9b      	ldrb	r3, [r3, #14]
    6116:	009b      	lsls	r3, r3, #2
    6118:	4a43      	ldr	r2, [pc, #268]	; (6228 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    611a:	4413      	add	r3, r2
    611c:	4a48      	ldr	r2, [pc, #288]	; (6240 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    611e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    6120:	4b48      	ldr	r3, [pc, #288]	; (6244 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2b00      	cmp	r3, #0
    6126:	d002      	beq.n	612e <Clock_Ip_ClockInitializeObjects+0xda>
    6128:	9b01      	ldr	r3, [sp, #4]
    612a:	2b00      	cmp	r3, #0
    612c:	d003      	beq.n	6136 <Clock_Ip_ClockInitializeObjects+0xe2>
    612e:	4b46      	ldr	r3, [pc, #280]	; (6248 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	2b00      	cmp	r3, #0
    6134:	d056      	beq.n	61e4 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    6136:	f7ff fc09 	bl	594c <getFircConfig>
    613a:	4603      	mov	r3, r0
    613c:	4a43      	ldr	r2, [pc, #268]	; (624c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    613e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    6140:	f7ff fc60 	bl	5a04 <getSoscConfig>
    6144:	4603      	mov	r3, r0
    6146:	4a42      	ldr	r2, [pc, #264]	; (6250 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    6148:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    614a:	f7ff fca7 	bl	5a9c <getSpllConfig>
    614e:	4603      	mov	r3, r0
    6150:	4a40      	ldr	r2, [pc, #256]	; (6254 <Clock_Ip_ClockInitializeObjects+0x200>)
    6152:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    6154:	2019      	movs	r0, #25
    6156:	f7ff fcfb 	bl	5b50 <getSelectorConfig>
    615a:	4603      	mov	r3, r0
    615c:	4a3e      	ldr	r2, [pc, #248]	; (6258 <Clock_Ip_ClockInitializeObjects+0x204>)
    615e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    6160:	201a      	movs	r0, #26
    6162:	f7ff fcf5 	bl	5b50 <getSelectorConfig>
    6166:	4603      	mov	r3, r0
    6168:	4a3c      	ldr	r2, [pc, #240]	; (625c <Clock_Ip_ClockInitializeObjects+0x208>)
    616a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    616c:	201b      	movs	r0, #27
    616e:	f7ff fcef 	bl	5b50 <getSelectorConfig>
    6172:	4603      	mov	r3, r0
    6174:	4a3a      	ldr	r2, [pc, #232]	; (6260 <Clock_Ip_ClockInitializeObjects+0x20c>)
    6176:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    6178:	201d      	movs	r0, #29
    617a:	f7ff fd7b 	bl	5c74 <getCoreDividerConfig>
    617e:	4603      	mov	r3, r0
    6180:	4a38      	ldr	r2, [pc, #224]	; (6264 <Clock_Ip_ClockInitializeObjects+0x210>)
    6182:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    6184:	201e      	movs	r0, #30
    6186:	f7ff fd75 	bl	5c74 <getCoreDividerConfig>
    618a:	4603      	mov	r3, r0
    618c:	4a36      	ldr	r2, [pc, #216]	; (6268 <Clock_Ip_ClockInitializeObjects+0x214>)
    618e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    6190:	201f      	movs	r0, #31
    6192:	f7ff fd6f 	bl	5c74 <getCoreDividerConfig>
    6196:	4603      	mov	r3, r0
    6198:	4a34      	ldr	r2, [pc, #208]	; (626c <Clock_Ip_ClockInitializeObjects+0x218>)
    619a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    619c:	2021      	movs	r0, #33	; 0x21
    619e:	f7ff fe0f 	bl	5dc0 <getBusDividerConfig>
    61a2:	4603      	mov	r3, r0
    61a4:	4a32      	ldr	r2, [pc, #200]	; (6270 <Clock_Ip_ClockInitializeObjects+0x21c>)
    61a6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    61a8:	2022      	movs	r0, #34	; 0x22
    61aa:	f7ff fe09 	bl	5dc0 <getBusDividerConfig>
    61ae:	4603      	mov	r3, r0
    61b0:	4a30      	ldr	r2, [pc, #192]	; (6274 <Clock_Ip_ClockInitializeObjects+0x220>)
    61b2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    61b4:	2023      	movs	r0, #35	; 0x23
    61b6:	f7ff fe03 	bl	5dc0 <getBusDividerConfig>
    61ba:	4603      	mov	r3, r0
    61bc:	4a2e      	ldr	r2, [pc, #184]	; (6278 <Clock_Ip_ClockInitializeObjects+0x224>)
    61be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    61c0:	2025      	movs	r0, #37	; 0x25
    61c2:	f7ff fea3 	bl	5f0c <getSlowDividerConfig>
    61c6:	4603      	mov	r3, r0
    61c8:	4a2c      	ldr	r2, [pc, #176]	; (627c <Clock_Ip_ClockInitializeObjects+0x228>)
    61ca:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    61cc:	2026      	movs	r0, #38	; 0x26
    61ce:	f7ff fe9d 	bl	5f0c <getSlowDividerConfig>
    61d2:	4603      	mov	r3, r0
    61d4:	4a2a      	ldr	r2, [pc, #168]	; (6280 <Clock_Ip_ClockInitializeObjects+0x22c>)
    61d6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    61d8:	2027      	movs	r0, #39	; 0x27
    61da:	f7ff fe97 	bl	5f0c <getSlowDividerConfig>
    61de:	4603      	mov	r3, r0
    61e0:	4a28      	ldr	r2, [pc, #160]	; (6284 <Clock_Ip_ClockInitializeObjects+0x230>)
    61e2:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    61e4:	bf00      	nop
    61e6:	b003      	add	sp, #12
    61e8:	f85d fb04 	ldr.w	pc, [sp], #4
    61ec:	1fff8d14 	.word	0x1fff8d14
    61f0:	00019860 	.word	0x00019860
    61f4:	00019eac 	.word	0x00019eac
    61f8:	1fff8be0 	.word	0x1fff8be0
    61fc:	00019820 	.word	0x00019820
    6200:	00019df4 	.word	0x00019df4
    6204:	1fff8be4 	.word	0x1fff8be4
    6208:	00019830 	.word	0x00019830
    620c:	00019e60 	.word	0x00019e60
    6210:	1fff8be8 	.word	0x1fff8be8
    6214:	00019870 	.word	0x00019870
    6218:	00019ed8 	.word	0x00019ed8
    621c:	1fff8bec 	.word	0x1fff8bec
    6220:	1fff8c28 	.word	0x1fff8c28
    6224:	00019800 	.word	0x00019800
    6228:	00019db0 	.word	0x00019db0
    622c:	1fff8bf0 	.word	0x1fff8bf0
    6230:	1fff8c2c 	.word	0x1fff8c2c
    6234:	1fff8bf4 	.word	0x1fff8bf4
    6238:	1fff8c30 	.word	0x1fff8c30
    623c:	1fff8bf8 	.word	0x1fff8bf8
    6240:	1fff8c34 	.word	0x1fff8c34
    6244:	1fff8b19 	.word	0x1fff8b19
    6248:	1fff8b10 	.word	0x1fff8b10
    624c:	1fff8bfc 	.word	0x1fff8bfc
    6250:	1fff8c00 	.word	0x1fff8c00
    6254:	1fff8c04 	.word	0x1fff8c04
    6258:	1fff8c08 	.word	0x1fff8c08
    625c:	1fff8c0c 	.word	0x1fff8c0c
    6260:	1fff8c38 	.word	0x1fff8c38
    6264:	1fff8c10 	.word	0x1fff8c10
    6268:	1fff8c14 	.word	0x1fff8c14
    626c:	1fff8c3c 	.word	0x1fff8c3c
    6270:	1fff8c18 	.word	0x1fff8c18
    6274:	1fff8c1c 	.word	0x1fff8c1c
    6278:	1fff8c40 	.word	0x1fff8c40
    627c:	1fff8c20 	.word	0x1fff8c20
    6280:	1fff8c24 	.word	0x1fff8c24
    6284:	1fff8c44 	.word	0x1fff8c44

00006288 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    6288:	b500      	push	{lr}
    628a:	b083      	sub	sp, #12
    628c:	9001      	str	r0, [sp, #4]
    628e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    6290:	9b01      	ldr	r3, [sp, #4]
    6292:	2b03      	cmp	r3, #3
    6294:	f000 8090 	beq.w	63b8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    6298:	9b01      	ldr	r3, [sp, #4]
    629a:	2b03      	cmp	r3, #3
    629c:	f200 80d3 	bhi.w	6446 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    62a0:	9b01      	ldr	r3, [sp, #4]
    62a2:	2b00      	cmp	r3, #0
    62a4:	d040      	beq.n	6328 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    62a6:	9b01      	ldr	r3, [sp, #4]
    62a8:	3b01      	subs	r3, #1
    62aa:	2b01      	cmp	r3, #1
    62ac:	f200 80cb 	bhi.w	6446 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    62b0:	9b00      	ldr	r3, [sp, #0]
    62b2:	2b00      	cmp	r3, #0
    62b4:	f040 80c9 	bne.w	644a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    62b8:	4b68      	ldr	r3, [pc, #416]	; (645c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    62ba:	2200      	movs	r2, #0
    62bc:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    62be:	4b68      	ldr	r3, [pc, #416]	; (6460 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    62c0:	681b      	ldr	r3, [r3, #0]
    62c2:	685b      	ldr	r3, [r3, #4]
    62c4:	4a67      	ldr	r2, [pc, #412]	; (6464 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    62c6:	6812      	ldr	r2, [r2, #0]
    62c8:	4610      	mov	r0, r2
    62ca:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    62cc:	4b66      	ldr	r3, [pc, #408]	; (6468 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    62ce:	681b      	ldr	r3, [r3, #0]
    62d0:	681b      	ldr	r3, [r3, #0]
    62d2:	4a66      	ldr	r2, [pc, #408]	; (646c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    62d4:	6812      	ldr	r2, [r2, #0]
    62d6:	4610      	mov	r0, r2
    62d8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    62da:	4b65      	ldr	r3, [pc, #404]	; (6470 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    62dc:	681b      	ldr	r3, [r3, #0]
    62de:	681b      	ldr	r3, [r3, #0]
    62e0:	4a64      	ldr	r2, [pc, #400]	; (6474 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    62e2:	6812      	ldr	r2, [r2, #0]
    62e4:	4610      	mov	r0, r2
    62e6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    62e8:	4b63      	ldr	r3, [pc, #396]	; (6478 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    62ea:	681b      	ldr	r3, [r3, #0]
    62ec:	681b      	ldr	r3, [r3, #0]
    62ee:	4a63      	ldr	r2, [pc, #396]	; (647c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    62f0:	6812      	ldr	r2, [r2, #0]
    62f2:	4610      	mov	r0, r2
    62f4:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    62f6:	4b62      	ldr	r3, [pc, #392]	; (6480 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    62f8:	681b      	ldr	r3, [r3, #0]
    62fa:	691b      	ldr	r3, [r3, #16]
    62fc:	4a61      	ldr	r2, [pc, #388]	; (6484 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    62fe:	6812      	ldr	r2, [r2, #0]
    6300:	6812      	ldr	r2, [r2, #0]
    6302:	4610      	mov	r0, r2
    6304:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    6306:	4b60      	ldr	r3, [pc, #384]	; (6488 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6308:	681b      	ldr	r3, [r3, #0]
    630a:	68db      	ldr	r3, [r3, #12]
    630c:	4a5f      	ldr	r2, [pc, #380]	; (648c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    630e:	6812      	ldr	r2, [r2, #0]
    6310:	6812      	ldr	r2, [r2, #0]
    6312:	4610      	mov	r0, r2
    6314:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    6316:	4b5e      	ldr	r3, [pc, #376]	; (6490 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6318:	681b      	ldr	r3, [r3, #0]
    631a:	689b      	ldr	r3, [r3, #8]
    631c:	4a5d      	ldr	r2, [pc, #372]	; (6494 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    631e:	6812      	ldr	r2, [r2, #0]
    6320:	6812      	ldr	r2, [r2, #0]
    6322:	4610      	mov	r0, r2
    6324:	4798      	blx	r3
            }
        }
        break;
    6326:	e090      	b.n	644a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    6328:	9b00      	ldr	r3, [sp, #0]
    632a:	2b02      	cmp	r3, #2
    632c:	f040 808f 	bne.w	644e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    6330:	4b4a      	ldr	r3, [pc, #296]	; (645c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6332:	2201      	movs	r2, #1
    6334:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6336:	4b56      	ldr	r3, [pc, #344]	; (6490 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	685b      	ldr	r3, [r3, #4]
    633c:	4a55      	ldr	r2, [pc, #340]	; (6494 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    633e:	6812      	ldr	r2, [r2, #0]
    6340:	4610      	mov	r0, r2
    6342:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    6344:	4b50      	ldr	r3, [pc, #320]	; (6488 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6346:	681b      	ldr	r3, [r3, #0]
    6348:	691b      	ldr	r3, [r3, #16]
    634a:	4a50      	ldr	r2, [pc, #320]	; (648c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    634c:	6812      	ldr	r2, [r2, #0]
    634e:	4610      	mov	r0, r2
    6350:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    6352:	4b4d      	ldr	r3, [pc, #308]	; (6488 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6354:	681b      	ldr	r3, [r3, #0]
    6356:	689b      	ldr	r3, [r3, #8]
    6358:	4a4c      	ldr	r2, [pc, #304]	; (648c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    635a:	6812      	ldr	r2, [r2, #0]
    635c:	4610      	mov	r0, r2
    635e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    6360:	4b47      	ldr	r3, [pc, #284]	; (6480 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6362:	681b      	ldr	r3, [r3, #0]
    6364:	68db      	ldr	r3, [r3, #12]
    6366:	4a47      	ldr	r2, [pc, #284]	; (6484 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6368:	6812      	ldr	r2, [r2, #0]
    636a:	4610      	mov	r0, r2
    636c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    636e:	4b44      	ldr	r3, [pc, #272]	; (6480 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6370:	681b      	ldr	r3, [r3, #0]
    6372:	689b      	ldr	r3, [r3, #8]
    6374:	4a43      	ldr	r2, [pc, #268]	; (6484 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6376:	6812      	ldr	r2, [r2, #0]
    6378:	6812      	ldr	r2, [r2, #0]
    637a:	4610      	mov	r0, r2
    637c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    637e:	4b38      	ldr	r3, [pc, #224]	; (6460 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    6380:	681b      	ldr	r3, [r3, #0]
    6382:	685b      	ldr	r3, [r3, #4]
    6384:	4a44      	ldr	r2, [pc, #272]	; (6498 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    6386:	6812      	ldr	r2, [r2, #0]
    6388:	4610      	mov	r0, r2
    638a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    638c:	4b36      	ldr	r3, [pc, #216]	; (6468 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    638e:	681b      	ldr	r3, [r3, #0]
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	4a42      	ldr	r2, [pc, #264]	; (649c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    6394:	6812      	ldr	r2, [r2, #0]
    6396:	4610      	mov	r0, r2
    6398:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    639a:	4b35      	ldr	r3, [pc, #212]	; (6470 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    639c:	681b      	ldr	r3, [r3, #0]
    639e:	681b      	ldr	r3, [r3, #0]
    63a0:	4a3f      	ldr	r2, [pc, #252]	; (64a0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    63a2:	6812      	ldr	r2, [r2, #0]
    63a4:	4610      	mov	r0, r2
    63a6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    63a8:	4b33      	ldr	r3, [pc, #204]	; (6478 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    63aa:	681b      	ldr	r3, [r3, #0]
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	4a3d      	ldr	r2, [pc, #244]	; (64a4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    63b0:	6812      	ldr	r2, [r2, #0]
    63b2:	4610      	mov	r0, r2
    63b4:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    63b6:	e04a      	b.n	644e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    63b8:	9b00      	ldr	r3, [sp, #0]
    63ba:	2b02      	cmp	r3, #2
    63bc:	d149      	bne.n	6452 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    63be:	4b27      	ldr	r3, [pc, #156]	; (645c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    63c0:	2201      	movs	r2, #1
    63c2:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    63c4:	4b32      	ldr	r3, [pc, #200]	; (6490 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    63c6:	681b      	ldr	r3, [r3, #0]
    63c8:	685b      	ldr	r3, [r3, #4]
    63ca:	4a32      	ldr	r2, [pc, #200]	; (6494 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    63cc:	6812      	ldr	r2, [r2, #0]
    63ce:	4610      	mov	r0, r2
    63d0:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    63d2:	4b2d      	ldr	r3, [pc, #180]	; (6488 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    63d4:	681b      	ldr	r3, [r3, #0]
    63d6:	691b      	ldr	r3, [r3, #16]
    63d8:	4a2c      	ldr	r2, [pc, #176]	; (648c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    63da:	6812      	ldr	r2, [r2, #0]
    63dc:	4610      	mov	r0, r2
    63de:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    63e0:	4b29      	ldr	r3, [pc, #164]	; (6488 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    63e2:	681b      	ldr	r3, [r3, #0]
    63e4:	689b      	ldr	r3, [r3, #8]
    63e6:	4a29      	ldr	r2, [pc, #164]	; (648c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    63e8:	6812      	ldr	r2, [r2, #0]
    63ea:	4610      	mov	r0, r2
    63ec:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    63ee:	4b24      	ldr	r3, [pc, #144]	; (6480 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	68db      	ldr	r3, [r3, #12]
    63f4:	4a23      	ldr	r2, [pc, #140]	; (6484 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    63f6:	6812      	ldr	r2, [r2, #0]
    63f8:	4610      	mov	r0, r2
    63fa:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    63fc:	4b20      	ldr	r3, [pc, #128]	; (6480 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	689b      	ldr	r3, [r3, #8]
    6402:	4a20      	ldr	r2, [pc, #128]	; (6484 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6404:	6812      	ldr	r2, [r2, #0]
    6406:	6812      	ldr	r2, [r2, #0]
    6408:	4610      	mov	r0, r2
    640a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    640c:	4b26      	ldr	r3, [pc, #152]	; (64a8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	685b      	ldr	r3, [r3, #4]
    6412:	4a26      	ldr	r2, [pc, #152]	; (64ac <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    6414:	6812      	ldr	r2, [r2, #0]
    6416:	4610      	mov	r0, r2
    6418:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    641a:	4b25      	ldr	r3, [pc, #148]	; (64b0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    641c:	681b      	ldr	r3, [r3, #0]
    641e:	681b      	ldr	r3, [r3, #0]
    6420:	4a24      	ldr	r2, [pc, #144]	; (64b4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    6422:	6812      	ldr	r2, [r2, #0]
    6424:	4610      	mov	r0, r2
    6426:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    6428:	4b23      	ldr	r3, [pc, #140]	; (64b8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	681b      	ldr	r3, [r3, #0]
    642e:	4a23      	ldr	r2, [pc, #140]	; (64bc <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    6430:	6812      	ldr	r2, [r2, #0]
    6432:	4610      	mov	r0, r2
    6434:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    6436:	4b22      	ldr	r3, [pc, #136]	; (64c0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    6438:	681b      	ldr	r3, [r3, #0]
    643a:	681b      	ldr	r3, [r3, #0]
    643c:	4a21      	ldr	r2, [pc, #132]	; (64c4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    643e:	6812      	ldr	r2, [r2, #0]
    6440:	4610      	mov	r0, r2
    6442:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6444:	e005      	b.n	6452 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    6446:	bf00      	nop
    6448:	e004      	b.n	6454 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    644a:	bf00      	nop
    644c:	e002      	b.n	6454 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    644e:	bf00      	nop
    6450:	e000      	b.n	6454 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6452:	bf00      	nop
    }

}
    6454:	bf00      	nop
    6456:	b003      	add	sp, #12
    6458:	f85d fb04 	ldr.w	pc, [sp], #4
    645c:	1fff8b19 	.word	0x1fff8b19
    6460:	1fff8bec 	.word	0x1fff8bec
    6464:	1fff8c0c 	.word	0x1fff8c0c
    6468:	1fff8bf0 	.word	0x1fff8bf0
    646c:	1fff8c14 	.word	0x1fff8c14
    6470:	1fff8bf4 	.word	0x1fff8bf4
    6474:	1fff8c1c 	.word	0x1fff8c1c
    6478:	1fff8bf8 	.word	0x1fff8bf8
    647c:	1fff8c24 	.word	0x1fff8c24
    6480:	1fff8be0 	.word	0x1fff8be0
    6484:	1fff8c04 	.word	0x1fff8c04
    6488:	1fff8be4 	.word	0x1fff8be4
    648c:	1fff8c00 	.word	0x1fff8c00
    6490:	1fff8be8 	.word	0x1fff8be8
    6494:	1fff8bfc 	.word	0x1fff8bfc
    6498:	1fff8c08 	.word	0x1fff8c08
    649c:	1fff8c10 	.word	0x1fff8c10
    64a0:	1fff8c18 	.word	0x1fff8c18
    64a4:	1fff8c20 	.word	0x1fff8c20
    64a8:	1fff8c28 	.word	0x1fff8c28
    64ac:	1fff8c38 	.word	0x1fff8c38
    64b0:	1fff8c2c 	.word	0x1fff8c2c
    64b4:	1fff8c3c 	.word	0x1fff8c3c
    64b8:	1fff8c30 	.word	0x1fff8c30
    64bc:	1fff8c40 	.word	0x1fff8c40
    64c0:	1fff8c34 	.word	0x1fff8c34
    64c4:	1fff8c44 	.word	0x1fff8c44

000064c8 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    64c8:	b500      	push	{lr}
    64ca:	b083      	sub	sp, #12
    64cc:	9001      	str	r0, [sp, #4]
    64ce:	9100      	str	r1, [sp, #0]
    switch(Command)
    64d0:	9b00      	ldr	r3, [sp, #0]
    64d2:	2b04      	cmp	r3, #4
    64d4:	d010      	beq.n	64f8 <Clock_Ip_Command+0x30>
    64d6:	9b00      	ldr	r3, [sp, #0]
    64d8:	2b04      	cmp	r3, #4
    64da:	d811      	bhi.n	6500 <Clock_Ip_Command+0x38>
    64dc:	9b00      	ldr	r3, [sp, #0]
    64de:	2b01      	cmp	r3, #1
    64e0:	d006      	beq.n	64f0 <Clock_Ip_Command+0x28>
    64e2:	9b00      	ldr	r3, [sp, #0]
    64e4:	2b02      	cmp	r3, #2
    64e6:	d10b      	bne.n	6500 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    64e8:	9801      	ldr	r0, [sp, #4]
    64ea:	f7ff fdb3 	bl	6054 <Clock_Ip_ClockInitializeObjects>
            break;
    64ee:	e008      	b.n	6502 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    64f0:	9801      	ldr	r0, [sp, #4]
    64f2:	f7ff f9db 	bl	58ac <Clock_Ip_SpecificPlatformInitClock>
            break;
    64f6:	e004      	b.n	6502 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    64f8:	9801      	ldr	r0, [sp, #4]
    64fa:	f7ff f8ed 	bl	56d8 <DisableSafeClock>
            break;
    64fe:	e000      	b.n	6502 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    6500:	bf00      	nop
    }
}
    6502:	bf00      	nop
    6504:	b003      	add	sp, #12
    6506:	f85d fb04 	ldr.w	pc, [sp], #4
    650a:	bf00      	nop

0000650c <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    650c:	b500      	push	{lr}
    650e:	b085      	sub	sp, #20
    6510:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    6512:	2300      	movs	r3, #0
    6514:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    6518:	9b01      	ldr	r3, [sp, #4]
    651a:	2b00      	cmp	r3, #0
    651c:	d108      	bne.n	6530 <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    651e:	2301      	movs	r3, #1
    6520:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    6524:	2311      	movs	r3, #17
    6526:	2200      	movs	r2, #0
    6528:	2100      	movs	r1, #0
    652a:	2065      	movs	r0, #101	; 0x65
    652c:	f012 fb80 	bl	18c30 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    6530:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6534:	4618      	mov	r0, r3
    6536:	b005      	add	sp, #20
    6538:	f85d fb04 	ldr.w	pc, [sp], #4

0000653c <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    653c:	b500      	push	{lr}
    653e:	b085      	sub	sp, #20
    6540:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    6542:	2300      	movs	r3, #0
    6544:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    6548:	4b0a      	ldr	r3, [pc, #40]	; (6574 <Mcu_CheckInitClock+0x38>)
    654a:	681b      	ldr	r3, [r3, #0]
    654c:	68db      	ldr	r3, [r3, #12]
    654e:	9a01      	ldr	r2, [sp, #4]
    6550:	429a      	cmp	r2, r3
    6552:	d308      	bcc.n	6566 <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    6554:	2301      	movs	r3, #1
    6556:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    655a:	230b      	movs	r3, #11
    655c:	2202      	movs	r2, #2
    655e:	2100      	movs	r1, #0
    6560:	2065      	movs	r0, #101	; 0x65
    6562:	f012 fb65 	bl	18c30 <Det_ReportError>
    }

    return CheckStatus;
    6566:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    656a:	4618      	mov	r0, r3
    656c:	b005      	add	sp, #20
    656e:	f85d fb04 	ldr.w	pc, [sp], #4
    6572:	bf00      	nop
    6574:	1fff8d20 	.word	0x1fff8d20

00006578 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    6578:	b500      	push	{lr}
    657a:	b085      	sub	sp, #20
    657c:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    657e:	2300      	movs	r3, #0
    6580:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    6584:	4b0a      	ldr	r3, [pc, #40]	; (65b0 <Mcu_CheckSetMode+0x38>)
    6586:	681b      	ldr	r3, [r3, #0]
    6588:	689b      	ldr	r3, [r3, #8]
    658a:	9a01      	ldr	r2, [sp, #4]
    658c:	429a      	cmp	r2, r3
    658e:	d308      	bcc.n	65a2 <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    6590:	2301      	movs	r3, #1
    6592:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    6596:	230c      	movs	r3, #12
    6598:	2208      	movs	r2, #8
    659a:	2100      	movs	r1, #0
    659c:	2065      	movs	r0, #101	; 0x65
    659e:	f012 fb47 	bl	18c30 <Det_ReportError>
    }

    return CheckStatus;
    65a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    65a6:	4618      	mov	r0, r3
    65a8:	b005      	add	sp, #20
    65aa:	f85d fb04 	ldr.w	pc, [sp], #4
    65ae:	bf00      	nop
    65b0:	1fff8d20 	.word	0x1fff8d20

000065b4 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    65b4:	b500      	push	{lr}
    65b6:	b085      	sub	sp, #20
    65b8:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    65ba:	2300      	movs	r3, #0
    65bc:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    65c0:	9b01      	ldr	r3, [sp, #4]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d108      	bne.n	65d8 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    65c6:	2301      	movs	r3, #1
    65c8:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    65cc:	2310      	movs	r3, #16
    65ce:	2209      	movs	r2, #9
    65d0:	2100      	movs	r1, #0
    65d2:	2065      	movs	r0, #101	; 0x65
    65d4:	f012 fb2c 	bl	18c30 <Det_ReportError>
    }

    return CheckStatus;
    65d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    65dc:	4618      	mov	r0, r3
    65de:	b005      	add	sp, #20
    65e0:	f85d fb04 	ldr.w	pc, [sp], #4

000065e4 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    65e4:	b500      	push	{lr}
    65e6:	b085      	sub	sp, #20
    65e8:	4603      	mov	r3, r0
    65ea:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    65ee:	2300      	movs	r3, #0
    65f0:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    65f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65f8:	2b00      	cmp	r3, #0
    65fa:	d10e      	bne.n	661a <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    65fc:	4b13      	ldr	r3, [pc, #76]	; (664c <Mcu_HLDChecksEntry+0x68>)
    65fe:	681b      	ldr	r3, [r3, #0]
    6600:	2b03      	cmp	r3, #3
    6602:	d01c      	beq.n	663e <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    6604:	2301      	movs	r3, #1
    6606:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    660a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    660e:	2313      	movs	r3, #19
    6610:	2100      	movs	r1, #0
    6612:	2065      	movs	r0, #101	; 0x65
    6614:	f012 fb0c 	bl	18c30 <Det_ReportError>
    6618:	e011      	b.n	663e <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    661a:	4b0c      	ldr	r3, [pc, #48]	; (664c <Mcu_HLDChecksEntry+0x68>)
    661c:	681b      	ldr	r3, [r3, #0]
    661e:	2b03      	cmp	r3, #3
    6620:	d10a      	bne.n	6638 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    6622:	2301      	movs	r3, #1
    6624:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    6628:	f89d 2007 	ldrb.w	r2, [sp, #7]
    662c:	230f      	movs	r3, #15
    662e:	2100      	movs	r1, #0
    6630:	2065      	movs	r0, #101	; 0x65
    6632:	f012 fafd 	bl	18c30 <Det_ReportError>
    6636:	e002      	b.n	663e <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    6638:	4b04      	ldr	r3, [pc, #16]	; (664c <Mcu_HLDChecksEntry+0x68>)
    663a:	220a      	movs	r2, #10
    663c:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    663e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6642:	4618      	mov	r0, r3
    6644:	b005      	add	sp, #20
    6646:	f85d fb04 	ldr.w	pc, [sp], #4
    664a:	bf00      	nop
    664c:	1fff8b1c 	.word	0x1fff8b1c

00006650 <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    6650:	b082      	sub	sp, #8
    6652:	4603      	mov	r3, r0
    6654:	460a      	mov	r2, r1
    6656:	f88d 3007 	strb.w	r3, [sp, #7]
    665a:	4613      	mov	r3, r2
    665c:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    6660:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6664:	2b00      	cmp	r3, #0
    6666:	d10b      	bne.n	6680 <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    6668:	f89d 3007 	ldrb.w	r3, [sp, #7]
    666c:	2b00      	cmp	r3, #0
    666e:	d103      	bne.n	6678 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    6670:	4b06      	ldr	r3, [pc, #24]	; (668c <Mcu_HLDChecksExit+0x3c>)
    6672:	220c      	movs	r2, #12
    6674:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    6676:	e006      	b.n	6686 <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    6678:	4b04      	ldr	r3, [pc, #16]	; (668c <Mcu_HLDChecksExit+0x3c>)
    667a:	2203      	movs	r2, #3
    667c:	601a      	str	r2, [r3, #0]
}
    667e:	e002      	b.n	6686 <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    6680:	4b02      	ldr	r3, [pc, #8]	; (668c <Mcu_HLDChecksExit+0x3c>)
    6682:	220c      	movs	r2, #12
    6684:	601a      	str	r2, [r3, #0]
}
    6686:	bf00      	nop
    6688:	b002      	add	sp, #8
    668a:	4770      	bx	lr
    668c:	1fff8b1c 	.word	0x1fff8b1c

00006690 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    6690:	b500      	push	{lr}
    6692:	b085      	sub	sp, #20
    6694:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    6696:	2000      	movs	r0, #0
    6698:	f7ff ffa4 	bl	65e4 <Mcu_HLDChecksEntry>
    669c:	4603      	mov	r3, r0
    669e:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    66a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    66a6:	2b00      	cmp	r3, #0
    66a8:	d150      	bne.n	674c <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    66aa:	9801      	ldr	r0, [sp, #4]
    66ac:	f7ff ff2e 	bl	650c <Mcu_CheckInit>
    66b0:	4603      	mov	r3, r0
    66b2:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    66b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    66ba:	2b00      	cmp	r3, #0
    66bc:	d13d      	bne.n	673a <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    66be:	4a25      	ldr	r2, [pc, #148]	; (6754 <Mcu_Init+0xc4>)
    66c0:	9b01      	ldr	r3, [sp, #4]
    66c2:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    66c4:	2300      	movs	r3, #0
    66c6:	9303      	str	r3, [sp, #12]
    66c8:	e010      	b.n	66ec <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    66ca:	4b22      	ldr	r3, [pc, #136]	; (6754 <Mcu_Init+0xc4>)
    66cc:	681b      	ldr	r3, [r3, #0]
    66ce:	6919      	ldr	r1, [r3, #16]
    66d0:	9a03      	ldr	r2, [sp, #12]
    66d2:	4613      	mov	r3, r2
    66d4:	005b      	lsls	r3, r3, #1
    66d6:	4413      	add	r3, r2
    66d8:	009b      	lsls	r3, r3, #2
    66da:	440b      	add	r3, r1
    66dc:	681b      	ldr	r3, [r3, #0]
    66de:	9a03      	ldr	r2, [sp, #12]
    66e0:	b2d1      	uxtb	r1, r2
    66e2:	4a1d      	ldr	r2, [pc, #116]	; (6758 <Mcu_Init+0xc8>)
    66e4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    66e6:	9b03      	ldr	r3, [sp, #12]
    66e8:	3301      	adds	r3, #1
    66ea:	9303      	str	r3, [sp, #12]
    66ec:	4b19      	ldr	r3, [pc, #100]	; (6754 <Mcu_Init+0xc4>)
    66ee:	681b      	ldr	r3, [r3, #0]
    66f0:	689b      	ldr	r3, [r3, #8]
    66f2:	9a03      	ldr	r2, [sp, #12]
    66f4:	429a      	cmp	r2, r3
    66f6:	d3e8      	bcc.n	66ca <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    66f8:	2300      	movs	r3, #0
    66fa:	9303      	str	r3, [sp, #12]
    66fc:	e010      	b.n	6720 <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    66fe:	4b15      	ldr	r3, [pc, #84]	; (6754 <Mcu_Init+0xc4>)
    6700:	681b      	ldr	r3, [r3, #0]
    6702:	6959      	ldr	r1, [r3, #20]
    6704:	9a03      	ldr	r2, [sp, #12]
    6706:	4613      	mov	r3, r2
    6708:	01db      	lsls	r3, r3, #7
    670a:	1a9b      	subs	r3, r3, r2
    670c:	00db      	lsls	r3, r3, #3
    670e:	440b      	add	r3, r1
    6710:	681b      	ldr	r3, [r3, #0]
    6712:	9a03      	ldr	r2, [sp, #12]
    6714:	b2d1      	uxtb	r1, r2
    6716:	4a11      	ldr	r2, [pc, #68]	; (675c <Mcu_Init+0xcc>)
    6718:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    671a:	9b03      	ldr	r3, [sp, #12]
    671c:	3301      	adds	r3, #1
    671e:	9303      	str	r3, [sp, #12]
    6720:	4b0c      	ldr	r3, [pc, #48]	; (6754 <Mcu_Init+0xc4>)
    6722:	681b      	ldr	r3, [r3, #0]
    6724:	68db      	ldr	r3, [r3, #12]
    6726:	9a03      	ldr	r2, [sp, #12]
    6728:	429a      	cmp	r2, r3
    672a:	d3e8      	bcc.n	66fe <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    672c:	4b09      	ldr	r3, [pc, #36]	; (6754 <Mcu_Init+0xc4>)
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	699b      	ldr	r3, [r3, #24]
    6732:	4618      	mov	r0, r3
    6734:	f000 f90c 	bl	6950 <Mcu_Ipw_Init>
    6738:	e002      	b.n	6740 <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    673a:	4b06      	ldr	r3, [pc, #24]	; (6754 <Mcu_Init+0xc4>)
    673c:	2200      	movs	r2, #0
    673e:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    6740:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6744:	2100      	movs	r1, #0
    6746:	4618      	mov	r0, r3
    6748:	f7ff ff82 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    674c:	bf00      	nop
    674e:	b005      	add	sp, #20
    6750:	f85d fb04 	ldr.w	pc, [sp], #4
    6754:	1fff8d20 	.word	0x1fff8d20
    6758:	1fff8d1c 	.word	0x1fff8d1c
    675c:	1fff8d18 	.word	0x1fff8d18

00006760 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    6760:	b500      	push	{lr}
    6762:	b085      	sub	sp, #20
    6764:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6766:	2301      	movs	r3, #1
    6768:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    676c:	2001      	movs	r0, #1
    676e:	f7ff ff39 	bl	65e4 <Mcu_HLDChecksEntry>
    6772:	4603      	mov	r3, r0
    6774:	2b00      	cmp	r3, #0
    6776:	d103      	bne.n	6780 <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    6778:	2101      	movs	r1, #1
    677a:	2000      	movs	r0, #0
    677c:	f7ff ff68 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    6780:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6784:	4618      	mov	r0, r3
    6786:	b005      	add	sp, #20
    6788:	f85d fb04 	ldr.w	pc, [sp], #4

0000678c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    678c:	b500      	push	{lr}
    678e:	b085      	sub	sp, #20
    6790:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    6792:	4a17      	ldr	r2, [pc, #92]	; (67f0 <Mcu_InitClock+0x64>)
    6794:	9b01      	ldr	r3, [sp, #4]
    6796:	4413      	add	r3, r2
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    679e:	2301      	movs	r3, #1
    67a0:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    67a4:	2002      	movs	r0, #2
    67a6:	f7ff ff1d 	bl	65e4 <Mcu_HLDChecksEntry>
    67aa:	4603      	mov	r3, r0
    67ac:	2b00      	cmp	r3, #0
    67ae:	d119      	bne.n	67e4 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    67b0:	9801      	ldr	r0, [sp, #4]
    67b2:	f7ff fec3 	bl	653c <Mcu_CheckInitClock>
    67b6:	4603      	mov	r3, r0
    67b8:	2b00      	cmp	r3, #0
    67ba:	d10f      	bne.n	67dc <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    67bc:	4b0d      	ldr	r3, [pc, #52]	; (67f4 <Mcu_InitClock+0x68>)
    67be:	681b      	ldr	r3, [r3, #0]
    67c0:	6959      	ldr	r1, [r3, #20]
    67c2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    67c6:	4613      	mov	r3, r2
    67c8:	01db      	lsls	r3, r3, #7
    67ca:	1a9b      	subs	r3, r3, r2
    67cc:	00db      	lsls	r3, r3, #3
    67ce:	440b      	add	r3, r1
    67d0:	4618      	mov	r0, r3
    67d2:	f000 f8c7 	bl	6964 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    67d6:	2300      	movs	r3, #0
    67d8:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    67dc:	2102      	movs	r1, #2
    67de:	2000      	movs	r0, #0
    67e0:	f7ff ff36 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    67e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    67e8:	4618      	mov	r0, r3
    67ea:	b005      	add	sp, #20
    67ec:	f85d fb04 	ldr.w	pc, [sp], #4
    67f0:	1fff8d18 	.word	0x1fff8d18
    67f4:	1fff8d20 	.word	0x1fff8d20

000067f8 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    67f8:	b500      	push	{lr}
    67fa:	b085      	sub	sp, #20
    67fc:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    67fe:	4a15      	ldr	r2, [pc, #84]	; (6854 <Mcu_SetMode+0x5c>)
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	4413      	add	r3, r2
    6804:	781b      	ldrb	r3, [r3, #0]
    6806:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    680a:	2008      	movs	r0, #8
    680c:	f7ff feea 	bl	65e4 <Mcu_HLDChecksEntry>
    6810:	4603      	mov	r3, r0
    6812:	2b00      	cmp	r3, #0
    6814:	d11a      	bne.n	684c <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    6816:	9801      	ldr	r0, [sp, #4]
    6818:	f7ff feae 	bl	6578 <Mcu_CheckSetMode>
    681c:	4603      	mov	r3, r0
    681e:	2b00      	cmp	r3, #0
    6820:	d110      	bne.n	6844 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    6822:	f00e fe79 	bl	15518 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    6826:	4b0c      	ldr	r3, [pc, #48]	; (6858 <Mcu_SetMode+0x60>)
    6828:	681b      	ldr	r3, [r3, #0]
    682a:	6919      	ldr	r1, [r3, #16]
    682c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6830:	4613      	mov	r3, r2
    6832:	005b      	lsls	r3, r3, #1
    6834:	4413      	add	r3, r2
    6836:	009b      	lsls	r3, r3, #2
    6838:	440b      	add	r3, r1
    683a:	4618      	mov	r0, r3
    683c:	f000 f89c 	bl	6978 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    6840:	f00e fe96 	bl	15570 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    6844:	2108      	movs	r1, #8
    6846:	2000      	movs	r0, #0
    6848:	f7ff ff02 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    684c:	bf00      	nop
    684e:	b005      	add	sp, #20
    6850:	f85d fb04 	ldr.w	pc, [sp], #4
    6854:	1fff8d1c 	.word	0x1fff8d1c
    6858:	1fff8d20 	.word	0x1fff8d20

0000685c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    685c:	b500      	push	{lr}
    685e:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    6860:	2302      	movs	r3, #2
    6862:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    6864:	2004      	movs	r0, #4
    6866:	f7ff febd 	bl	65e4 <Mcu_HLDChecksEntry>
    686a:	4603      	mov	r3, r0
    686c:	2b00      	cmp	r3, #0
    686e:	d103      	bne.n	6878 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    6870:	2104      	movs	r1, #4
    6872:	2000      	movs	r0, #0
    6874:	f7ff feec 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    6878:	9b01      	ldr	r3, [sp, #4]
}
    687a:	4618      	mov	r0, r3
    687c:	b003      	add	sp, #12
    687e:	f85d fb04 	ldr.w	pc, [sp], #4

00006882 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    6882:	b500      	push	{lr}
    6884:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    6886:	230e      	movs	r3, #14
    6888:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    688a:	2005      	movs	r0, #5
    688c:	f7ff feaa 	bl	65e4 <Mcu_HLDChecksEntry>
    6890:	4603      	mov	r3, r0
    6892:	2b00      	cmp	r3, #0
    6894:	d106      	bne.n	68a4 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    6896:	f000 f879 	bl	698c <Mcu_Ipw_GetResetReason>
    689a:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    689c:	2105      	movs	r1, #5
    689e:	2000      	movs	r0, #0
    68a0:	f7ff fed6 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    68a4:	9b01      	ldr	r3, [sp, #4]
}
    68a6:	4618      	mov	r0, r3
    68a8:	b003      	add	sp, #12
    68aa:	f85d fb04 	ldr.w	pc, [sp], #4

000068ae <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    68ae:	b500      	push	{lr}
    68b0:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    68b2:	f04f 33ff 	mov.w	r3, #4294967295
    68b6:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    68b8:	2006      	movs	r0, #6
    68ba:	f7ff fe93 	bl	65e4 <Mcu_HLDChecksEntry>
    68be:	4603      	mov	r3, r0
    68c0:	2b00      	cmp	r3, #0
    68c2:	d106      	bne.n	68d2 <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    68c4:	f000 f868 	bl	6998 <Mcu_Ipw_GetResetRawValue>
    68c8:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    68ca:	2106      	movs	r1, #6
    68cc:	2000      	movs	r0, #0
    68ce:	f7ff febf 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    68d2:	9b01      	ldr	r3, [sp, #4]
}
    68d4:	4618      	mov	r0, r3
    68d6:	b003      	add	sp, #12
    68d8:	f85d fb04 	ldr.w	pc, [sp], #4

000068dc <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    68dc:	b500      	push	{lr}
    68de:	b083      	sub	sp, #12
    68e0:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    68e2:	9801      	ldr	r0, [sp, #4]
    68e4:	f7ff fe66 	bl	65b4 <Mcu_CheckGetVersionInfo>
    68e8:	4603      	mov	r3, r0
    68ea:	2b00      	cmp	r3, #0
    68ec:	d10e      	bne.n	690c <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    68ee:	9b01      	ldr	r3, [sp, #4]
    68f0:	222b      	movs	r2, #43	; 0x2b
    68f2:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    68f4:	9b01      	ldr	r3, [sp, #4]
    68f6:	2265      	movs	r2, #101	; 0x65
    68f8:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    68fa:	9b01      	ldr	r3, [sp, #4]
    68fc:	2202      	movs	r2, #2
    68fe:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    6900:	9b01      	ldr	r3, [sp, #4]
    6902:	2200      	movs	r2, #0
    6904:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    6906:	9b01      	ldr	r3, [sp, #4]
    6908:	2200      	movs	r2, #0
    690a:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    690c:	bf00      	nop
    690e:	b003      	add	sp, #12
    6910:	f85d fb04 	ldr.w	pc, [sp], #4

00006914 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6914:	b500      	push	{lr}
    6916:	b083      	sub	sp, #12
    6918:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    691a:	201a      	movs	r0, #26
    691c:	f7ff fe62 	bl	65e4 <Mcu_HLDChecksEntry>
    6920:	4603      	mov	r3, r0
    6922:	2b00      	cmp	r3, #0
    6924:	d106      	bne.n	6934 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    6926:	9801      	ldr	r0, [sp, #4]
    6928:	f000 f83c 	bl	69a4 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    692c:	211a      	movs	r1, #26
    692e:	2000      	movs	r0, #0
    6930:	f7ff fe8e 	bl	6650 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    6934:	bf00      	nop
    6936:	b003      	add	sp, #12
    6938:	f85d fb04 	ldr.w	pc, [sp], #4

0000693c <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    693c:	b082      	sub	sp, #8
    693e:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    6940:	4b02      	ldr	r3, [pc, #8]	; (694c <Mcu_ClkSrcFailureNotification+0x10>)
    6942:	681b      	ldr	r3, [r3, #0]
    6944:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6946:	bf00      	nop
    6948:	b002      	add	sp, #8
    694a:	4770      	bx	lr
    694c:	1fff8d20 	.word	0x1fff8d20

00006950 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    6950:	b500      	push	{lr}
    6952:	b083      	sub	sp, #12
    6954:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    6956:	9801      	ldr	r0, [sp, #4]
    6958:	f000 f882 	bl	6a60 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    695c:	bf00      	nop
    695e:	b003      	add	sp, #12
    6960:	f85d fb04 	ldr.w	pc, [sp], #4

00006964 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6964:	b500      	push	{lr}
    6966:	b083      	sub	sp, #12
    6968:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    696a:	9801      	ldr	r0, [sp, #4]
    696c:	f7fc fb12 	bl	2f94 <Clock_Ip_InitClock>
}
    6970:	bf00      	nop
    6972:	b003      	add	sp, #12
    6974:	f85d fb04 	ldr.w	pc, [sp], #4

00006978 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    6978:	b500      	push	{lr}
    697a:	b083      	sub	sp, #12
    697c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    697e:	9801      	ldr	r0, [sp, #4]
    6980:	f000 f820 	bl	69c4 <Power_Ip_SetMode>
}
    6984:	bf00      	nop
    6986:	b003      	add	sp, #12
    6988:	f85d fb04 	ldr.w	pc, [sp], #4

0000698c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    698c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    698e:	f000 f84f 	bl	6a30 <Power_Ip_GetResetReason>
    6992:	4603      	mov	r3, r0
}
    6994:	4618      	mov	r0, r3
    6996:	bd08      	pop	{r3, pc}

00006998 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    6998:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    699a:	f000 f857 	bl	6a4c <Power_Ip_GetResetRawValue>
    699e:	4603      	mov	r3, r0
}
    69a0:	4618      	mov	r0, r3
    69a2:	bd08      	pop	{r3, pc}

000069a4 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    69a4:	b500      	push	{lr}
    69a6:	b083      	sub	sp, #12
    69a8:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	2b00      	cmp	r3, #0
    69ae:	d102      	bne.n	69b6 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    69b0:	f000 f86c 	bl	6a8c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    69b4:	e001      	b.n	69ba <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    69b6:	f000 f86e 	bl	6a96 <Power_Ip_EnableSleepOnExit>
}
    69ba:	bf00      	nop
    69bc:	b003      	add	sp, #12
    69be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000069c4 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    69c4:	b500      	push	{lr}
    69c6:	b085      	sub	sp, #20
    69c8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    69ca:	9b01      	ldr	r3, [sp, #4]
    69cc:	685b      	ldr	r3, [r3, #4]
    69ce:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    69d0:	9802      	ldr	r0, [sp, #8]
    69d2:	f000 f9f5 	bl	6dc0 <Power_Ip_SMC_ModeCheckEntry>
    69d6:	4603      	mov	r3, r0
    69d8:	2b00      	cmp	r3, #0
    69da:	d002      	beq.n	69e2 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    69dc:	2301      	movs	r3, #1
    69de:	9303      	str	r3, [sp, #12]
    69e0:	e003      	b.n	69ea <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    69e2:	9801      	ldr	r0, [sp, #4]
    69e4:	f000 fa1e 	bl	6e24 <Power_Ip_SMC_ModeConfig>
    69e8:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    69ea:	9b03      	ldr	r3, [sp, #12]
    69ec:	2b01      	cmp	r3, #1
    69ee:	d103      	bne.n	69f8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    69f0:	21ff      	movs	r1, #255	; 0xff
    69f2:	2003      	movs	r0, #3
    69f4:	f000 f8f4 	bl	6be0 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    69f8:	bf00      	nop
    69fa:	b005      	add	sp, #20
    69fc:	f85d fb04 	ldr.w	pc, [sp], #4

00006a00 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    6a00:	b084      	sub	sp, #16
    6a02:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    6a04:	230c      	movs	r3, #12
    6a06:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    6a08:	4a08      	ldr	r2, [pc, #32]	; (6a2c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6a0a:	9b01      	ldr	r3, [sp, #4]
    6a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a10:	2b0e      	cmp	r3, #14
    6a12:	d805      	bhi.n	6a20 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    6a14:	4a05      	ldr	r2, [pc, #20]	; (6a2c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6a16:	9b01      	ldr	r3, [sp, #4]
    6a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a1c:	9303      	str	r3, [sp, #12]
    6a1e:	e001      	b.n	6a24 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    6a20:	230c      	movs	r3, #12
    6a22:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    6a24:	9b03      	ldr	r3, [sp, #12]
}
    6a26:	4618      	mov	r0, r3
    6a28:	b004      	add	sp, #16
    6a2a:	4770      	bx	lr
    6a2c:	00019f4c 	.word	0x00019f4c

00006a30 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    6a30:	b500      	push	{lr}
    6a32:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6a34:	f000 f940 	bl	6cb8 <Power_Ip_RCM_GetResetReason>
    6a38:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    6a3a:	9801      	ldr	r0, [sp, #4]
    6a3c:	f7ff ffe0 	bl	6a00 <Power_Ip_ConvertIntergeToResetType>
    6a40:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    6a42:	9b00      	ldr	r3, [sp, #0]
}
    6a44:	4618      	mov	r0, r3
    6a46:	b003      	add	sp, #12
    6a48:	f85d fb04 	ldr.w	pc, [sp], #4

00006a4c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6a4c:	b500      	push	{lr}
    6a4e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6a50:	f000 f98a 	bl	6d68 <Power_Ip_RCM_GetResetRawValue>
    6a54:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    6a56:	9b01      	ldr	r3, [sp, #4]
}
    6a58:	4618      	mov	r0, r3
    6a5a:	b003      	add	sp, #12
    6a5c:	f85d fb04 	ldr.w	pc, [sp], #4

00006a60 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    6a60:	b500      	push	{lr}
    6a62:	b083      	sub	sp, #12
    6a64:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    6a66:	9b01      	ldr	r3, [sp, #4]
    6a68:	681b      	ldr	r3, [r3, #0]
    6a6a:	4618      	mov	r0, r3
    6a6c:	f000 f90e 	bl	6c8c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    6a70:	9b01      	ldr	r3, [sp, #4]
    6a72:	685b      	ldr	r3, [r3, #4]
    6a74:	4618      	mov	r0, r3
    6a76:	f000 f86d 	bl	6b54 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	689b      	ldr	r3, [r3, #8]
    6a7e:	4618      	mov	r0, r3
    6a80:	f000 f990 	bl	6da4 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6a84:	bf00      	nop
    6a86:	b003      	add	sp, #12
    6a88:	f85d fb04 	ldr.w	pc, [sp], #4

00006a8c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6a8c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    6a8e:	f000 f811 	bl	6ab4 <Power_Ip_CM4_DisableSleepOnExit>
}
    6a92:	bf00      	nop
    6a94:	bd08      	pop	{r3, pc}

00006a96 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    6a96:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    6a98:	f000 f820 	bl	6adc <Power_Ip_CM4_EnableSleepOnExit>
}
    6a9c:	bf00      	nop
    6a9e:	bd08      	pop	{r3, pc}

00006aa0 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    6aa0:	b082      	sub	sp, #8
    6aa2:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6aa4:	4a02      	ldr	r2, [pc, #8]	; (6ab0 <Power_Ip_InstallNotificationsCallback+0x10>)
    6aa6:	9b01      	ldr	r3, [sp, #4]
    6aa8:	6013      	str	r3, [r2, #0]
}
    6aaa:	bf00      	nop
    6aac:	b002      	add	sp, #8
    6aae:	4770      	bx	lr
    6ab0:	1fff8b20 	.word	0x1fff8b20

00006ab4 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6ab4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6ab6:	2300      	movs	r3, #0
    6ab8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6aba:	4b07      	ldr	r3, [pc, #28]	; (6ad8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6abc:	681b      	ldr	r3, [r3, #0]
    6abe:	685b      	ldr	r3, [r3, #4]
    6ac0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    6ac2:	9b01      	ldr	r3, [sp, #4]
    6ac4:	f023 0302 	bic.w	r3, r3, #2
    6ac8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6aca:	4b03      	ldr	r3, [pc, #12]	; (6ad8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6acc:	681b      	ldr	r3, [r3, #0]
    6ace:	9a01      	ldr	r2, [sp, #4]
    6ad0:	605a      	str	r2, [r3, #4]
}
    6ad2:	bf00      	nop
    6ad4:	b002      	add	sp, #8
    6ad6:	4770      	bx	lr
    6ad8:	1fff8b24 	.word	0x1fff8b24

00006adc <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6adc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6ade:	2300      	movs	r3, #0
    6ae0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6ae2:	4b07      	ldr	r3, [pc, #28]	; (6b00 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6ae4:	681b      	ldr	r3, [r3, #0]
    6ae6:	685b      	ldr	r3, [r3, #4]
    6ae8:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    6aea:	9b01      	ldr	r3, [sp, #4]
    6aec:	f043 0302 	orr.w	r3, r3, #2
    6af0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6af2:	4b03      	ldr	r3, [pc, #12]	; (6b00 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6af4:	681b      	ldr	r3, [r3, #0]
    6af6:	9a01      	ldr	r2, [sp, #4]
    6af8:	605a      	str	r2, [r3, #4]
}
    6afa:	bf00      	nop
    6afc:	b002      	add	sp, #8
    6afe:	4770      	bx	lr
    6b00:	1fff8b24 	.word	0x1fff8b24

00006b04 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    6b04:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6b06:	2300      	movs	r3, #0
    6b08:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6b0a:	4b07      	ldr	r3, [pc, #28]	; (6b28 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6b0c:	681b      	ldr	r3, [r3, #0]
    6b0e:	685b      	ldr	r3, [r3, #4]
    6b10:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6b12:	9b01      	ldr	r3, [sp, #4]
    6b14:	f043 0304 	orr.w	r3, r3, #4
    6b18:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6b1a:	4b03      	ldr	r3, [pc, #12]	; (6b28 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6b1c:	681b      	ldr	r3, [r3, #0]
    6b1e:	9a01      	ldr	r2, [sp, #4]
    6b20:	605a      	str	r2, [r3, #4]
}
    6b22:	bf00      	nop
    6b24:	b002      	add	sp, #8
    6b26:	4770      	bx	lr
    6b28:	1fff8b24 	.word	0x1fff8b24

00006b2c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6b2c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6b2e:	2300      	movs	r3, #0
    6b30:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6b32:	4b07      	ldr	r3, [pc, #28]	; (6b50 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6b34:	681b      	ldr	r3, [r3, #0]
    6b36:	685b      	ldr	r3, [r3, #4]
    6b38:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6b3a:	9b01      	ldr	r3, [sp, #4]
    6b3c:	f023 0304 	bic.w	r3, r3, #4
    6b40:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6b42:	4b03      	ldr	r3, [pc, #12]	; (6b50 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6b44:	681b      	ldr	r3, [r3, #0]
    6b46:	9a01      	ldr	r2, [sp, #4]
    6b48:	605a      	str	r2, [r3, #4]
}
    6b4a:	bf00      	nop
    6b4c:	b002      	add	sp, #8
    6b4e:	4770      	bx	lr
    6b50:	1fff8b24 	.word	0x1fff8b24

00006b54 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6b54:	b084      	sub	sp, #16
    6b56:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6b58:	4b20      	ldr	r3, [pc, #128]	; (6bdc <Power_Ip_PMC_PowerInit+0x88>)
    6b5a:	781b      	ldrb	r3, [r3, #0]
    6b5c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6b60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b64:	f003 030f 	and.w	r3, r3, #15
    6b68:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6b6c:	9b01      	ldr	r3, [sp, #4]
    6b6e:	781a      	ldrb	r2, [r3, #0]
    6b70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b74:	4313      	orrs	r3, r2
    6b76:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6b7a:	4a18      	ldr	r2, [pc, #96]	; (6bdc <Power_Ip_PMC_PowerInit+0x88>)
    6b7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b80:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6b82:	4b16      	ldr	r3, [pc, #88]	; (6bdc <Power_Ip_PMC_PowerInit+0x88>)
    6b84:	785b      	ldrb	r3, [r3, #1]
    6b86:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6b8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b8e:	f003 031f 	and.w	r3, r3, #31
    6b92:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6b96:	9b01      	ldr	r3, [sp, #4]
    6b98:	785a      	ldrb	r2, [r3, #1]
    6b9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b9e:	4313      	orrs	r3, r2
    6ba0:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6ba4:	4a0d      	ldr	r2, [pc, #52]	; (6bdc <Power_Ip_PMC_PowerInit+0x88>)
    6ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6baa:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6bac:	4b0b      	ldr	r3, [pc, #44]	; (6bdc <Power_Ip_PMC_PowerInit+0x88>)
    6bae:	789b      	ldrb	r3, [r3, #2]
    6bb0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6bb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6bbc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6bc0:	9b01      	ldr	r3, [sp, #4]
    6bc2:	789a      	ldrb	r2, [r3, #2]
    6bc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6bc8:	4313      	orrs	r3, r2
    6bca:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6bce:	4a03      	ldr	r2, [pc, #12]	; (6bdc <Power_Ip_PMC_PowerInit+0x88>)
    6bd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6bd4:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    6bd6:	bf00      	nop
    6bd8:	b004      	add	sp, #16
    6bda:	4770      	bx	lr
    6bdc:	4007d000 	.word	0x4007d000

00006be0 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6be0:	b500      	push	{lr}
    6be2:	b083      	sub	sp, #12
    6be4:	9001      	str	r0, [sp, #4]
    6be6:	460b      	mov	r3, r1
    6be8:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6bec:	4b05      	ldr	r3, [pc, #20]	; (6c04 <Power_Ip_ReportPowerErrors+0x24>)
    6bee:	681b      	ldr	r3, [r3, #0]
    6bf0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6bf4:	4611      	mov	r1, r2
    6bf6:	9801      	ldr	r0, [sp, #4]
    6bf8:	4798      	blx	r3
}
    6bfa:	bf00      	nop
    6bfc:	b003      	add	sp, #12
    6bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    6c02:	bf00      	nop
    6c04:	1fff8b20 	.word	0x1fff8b20

00006c08 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6c08:	b082      	sub	sp, #8
    6c0a:	9001      	str	r0, [sp, #4]
    6c0c:	460b      	mov	r3, r1
    6c0e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6c12:	bf00      	nop
    6c14:	b002      	add	sp, #8
    6c16:	4770      	bx	lr

00006c18 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6c18:	b500      	push	{lr}
    6c1a:	b085      	sub	sp, #20
    6c1c:	9003      	str	r0, [sp, #12]
    6c1e:	9102      	str	r1, [sp, #8]
    6c20:	9201      	str	r2, [sp, #4]
    6c22:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6c24:	2000      	movs	r0, #0
    6c26:	f7fb fee5 	bl	29f4 <OsIf_GetCounter>
    6c2a:	4602      	mov	r2, r0
    6c2c:	9b03      	ldr	r3, [sp, #12]
    6c2e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6c30:	9b02      	ldr	r3, [sp, #8]
    6c32:	2200      	movs	r2, #0
    6c34:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6c36:	2100      	movs	r1, #0
    6c38:	9800      	ldr	r0, [sp, #0]
    6c3a:	f7fb ff27 	bl	2a8c <OsIf_MicrosToTicks>
    6c3e:	4602      	mov	r2, r0
    6c40:	9b01      	ldr	r3, [sp, #4]
    6c42:	601a      	str	r2, [r3, #0]
}
    6c44:	bf00      	nop
    6c46:	b005      	add	sp, #20
    6c48:	f85d fb04 	ldr.w	pc, [sp], #4

00006c4c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6c4c:	b500      	push	{lr}
    6c4e:	b087      	sub	sp, #28
    6c50:	9003      	str	r0, [sp, #12]
    6c52:	9102      	str	r1, [sp, #8]
    6c54:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6c56:	2300      	movs	r3, #0
    6c58:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6c5c:	2100      	movs	r1, #0
    6c5e:	9803      	ldr	r0, [sp, #12]
    6c60:	f7fb fee1 	bl	2a26 <OsIf_GetElapsed>
    6c64:	4602      	mov	r2, r0
    6c66:	9b02      	ldr	r3, [sp, #8]
    6c68:	681b      	ldr	r3, [r3, #0]
    6c6a:	441a      	add	r2, r3
    6c6c:	9b02      	ldr	r3, [sp, #8]
    6c6e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6c70:	9b02      	ldr	r3, [sp, #8]
    6c72:	681b      	ldr	r3, [r3, #0]
    6c74:	9a01      	ldr	r2, [sp, #4]
    6c76:	429a      	cmp	r2, r3
    6c78:	d802      	bhi.n	6c80 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6c7a:	2301      	movs	r3, #1
    6c7c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6c80:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6c84:	4618      	mov	r0, r3
    6c86:	b007      	add	sp, #28
    6c88:	f85d fb04 	ldr.w	pc, [sp], #4

00006c8c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6c8c:	b082      	sub	sp, #8
    6c8e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6c90:	9b01      	ldr	r3, [sp, #4]
    6c92:	681a      	ldr	r2, [r3, #0]
    6c94:	4907      	ldr	r1, [pc, #28]	; (6cb4 <Power_Ip_RCM_ResetInit+0x28>)
    6c96:	f641 7307 	movw	r3, #7943	; 0x1f07
    6c9a:	4013      	ands	r3, r2
    6c9c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6c9e:	9b01      	ldr	r3, [sp, #4]
    6ca0:	685a      	ldr	r2, [r3, #4]
    6ca2:	4904      	ldr	r1, [pc, #16]	; (6cb4 <Power_Ip_RCM_ResetInit+0x28>)
    6ca4:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6ca8:	4013      	ands	r3, r2
    6caa:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6cac:	bf00      	nop
    6cae:	b002      	add	sp, #8
    6cb0:	4770      	bx	lr
    6cb2:	bf00      	nop
    6cb4:	4007f000 	.word	0x4007f000

00006cb8 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6cb8:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6cba:	230c      	movs	r3, #12
    6cbc:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    6cbe:	2300      	movs	r3, #0
    6cc0:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    6cc2:	2300      	movs	r3, #0
    6cc4:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6cc6:	2300      	movs	r3, #0
    6cc8:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6cca:	4b25      	ldr	r3, [pc, #148]	; (6d60 <Power_Ip_RCM_GetResetReason+0xa8>)
    6ccc:	699a      	ldr	r2, [r3, #24]
    6cce:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6cd2:	4013      	ands	r3, r2
    6cd4:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6cd6:	9b03      	ldr	r3, [sp, #12]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d008      	beq.n	6cee <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6cdc:	4920      	ldr	r1, [pc, #128]	; (6d60 <Power_Ip_RCM_GetResetReason+0xa8>)
    6cde:	9a03      	ldr	r2, [sp, #12]
    6ce0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6ce4:	4013      	ands	r3, r2
    6ce6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6ce8:	4a1e      	ldr	r2, [pc, #120]	; (6d64 <Power_Ip_RCM_GetResetReason+0xac>)
    6cea:	9b03      	ldr	r3, [sp, #12]
    6cec:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6cee:	4b1d      	ldr	r3, [pc, #116]	; (6d64 <Power_Ip_RCM_GetResetReason+0xac>)
    6cf0:	681b      	ldr	r3, [r3, #0]
    6cf2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    6cf4:	9a02      	ldr	r2, [sp, #8]
    6cf6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6cfa:	4013      	ands	r3, r2
    6cfc:	2b82      	cmp	r3, #130	; 0x82
    6cfe:	d102      	bne.n	6d06 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6d00:	2305      	movs	r3, #5
    6d02:	9307      	str	r3, [sp, #28]
    6d04:	e027      	b.n	6d56 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    6d06:	2300      	movs	r3, #0
    6d08:	9306      	str	r3, [sp, #24]
    6d0a:	e021      	b.n	6d50 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6d0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6d10:	9b06      	ldr	r3, [sp, #24]
    6d12:	fa22 f303 	lsr.w	r3, r2, r3
    6d16:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6d18:	9a01      	ldr	r2, [sp, #4]
    6d1a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6d1e:	4013      	ands	r3, r2
    6d20:	2b00      	cmp	r3, #0
    6d22:	d012      	beq.n	6d4a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6d24:	9a01      	ldr	r2, [sp, #4]
    6d26:	9b02      	ldr	r3, [sp, #8]
    6d28:	4013      	ands	r3, r2
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d00a      	beq.n	6d44 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6d2e:	9b05      	ldr	r3, [sp, #20]
    6d30:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6d32:	9b04      	ldr	r3, [sp, #16]
    6d34:	3301      	adds	r3, #1
    6d36:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6d38:	9b04      	ldr	r3, [sp, #16]
    6d3a:	2b01      	cmp	r3, #1
    6d3c:	d902      	bls.n	6d44 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6d3e:	230d      	movs	r3, #13
    6d40:	9307      	str	r3, [sp, #28]
                        break;
    6d42:	e008      	b.n	6d56 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6d44:	9b05      	ldr	r3, [sp, #20]
    6d46:	3301      	adds	r3, #1
    6d48:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6d4a:	9b06      	ldr	r3, [sp, #24]
    6d4c:	3301      	adds	r3, #1
    6d4e:	9306      	str	r3, [sp, #24]
    6d50:	9b06      	ldr	r3, [sp, #24]
    6d52:	2b1f      	cmp	r3, #31
    6d54:	d9da      	bls.n	6d0c <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6d56:	9b07      	ldr	r3, [sp, #28]
}
    6d58:	4618      	mov	r0, r3
    6d5a:	b008      	add	sp, #32
    6d5c:	4770      	bx	lr
    6d5e:	bf00      	nop
    6d60:	4007f000 	.word	0x4007f000
    6d64:	1fff8d24 	.word	0x1fff8d24

00006d68 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6d68:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6d6a:	4b0c      	ldr	r3, [pc, #48]	; (6d9c <Power_Ip_RCM_GetResetRawValue+0x34>)
    6d6c:	699a      	ldr	r2, [r3, #24]
    6d6e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d72:	4013      	ands	r3, r2
    6d74:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6d76:	9b01      	ldr	r3, [sp, #4]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d008      	beq.n	6d8e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6d7c:	4907      	ldr	r1, [pc, #28]	; (6d9c <Power_Ip_RCM_GetResetRawValue+0x34>)
    6d7e:	9a01      	ldr	r2, [sp, #4]
    6d80:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d84:	4013      	ands	r3, r2
    6d86:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6d88:	4a05      	ldr	r2, [pc, #20]	; (6da0 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6d8a:	9b01      	ldr	r3, [sp, #4]
    6d8c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6d8e:	4b04      	ldr	r3, [pc, #16]	; (6da0 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6d90:	681b      	ldr	r3, [r3, #0]
    6d92:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6d94:	9b00      	ldr	r3, [sp, #0]
}
    6d96:	4618      	mov	r0, r3
    6d98:	b002      	add	sp, #8
    6d9a:	4770      	bx	lr
    6d9c:	4007f000 	.word	0x4007f000
    6da0:	1fff8d24 	.word	0x1fff8d24

00006da4 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6da4:	b082      	sub	sp, #8
    6da6:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6da8:	9b01      	ldr	r3, [sp, #4]
    6daa:	681b      	ldr	r3, [r3, #0]
    6dac:	4a03      	ldr	r2, [pc, #12]	; (6dbc <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6dae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6db2:	6093      	str	r3, [r2, #8]
}
    6db4:	bf00      	nop
    6db6:	b002      	add	sp, #8
    6db8:	4770      	bx	lr
    6dba:	bf00      	nop
    6dbc:	4007e000 	.word	0x4007e000

00006dc0 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6dc0:	b084      	sub	sp, #16
    6dc2:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6dc4:	2301      	movs	r3, #1
    6dc6:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6dc8:	4b15      	ldr	r3, [pc, #84]	; (6e20 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6dca:	695b      	ldr	r3, [r3, #20]
    6dcc:	b2db      	uxtb	r3, r3
    6dce:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6dd0:	9b01      	ldr	r3, [sp, #4]
    6dd2:	2b02      	cmp	r3, #2
    6dd4:	d012      	beq.n	6dfc <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6dd6:	9b01      	ldr	r3, [sp, #4]
    6dd8:	2b02      	cmp	r3, #2
    6dda:	d818      	bhi.n	6e0e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6ddc:	9b01      	ldr	r3, [sp, #4]
    6dde:	2b00      	cmp	r3, #0
    6de0:	d003      	beq.n	6dea <Power_Ip_SMC_ModeCheckEntry+0x2a>
    6de2:	9b01      	ldr	r3, [sp, #4]
    6de4:	2b01      	cmp	r3, #1
    6de6:	d003      	beq.n	6df0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6de8:	e011      	b.n	6e0e <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6dea:	2300      	movs	r3, #0
    6dec:	9303      	str	r3, [sp, #12]
            break;
    6dee:	e013      	b.n	6e18 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6df0:	9b02      	ldr	r3, [sp, #8]
    6df2:	2b01      	cmp	r3, #1
    6df4:	d10d      	bne.n	6e12 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    6df6:	2300      	movs	r3, #0
    6df8:	9303      	str	r3, [sp, #12]
            break;
    6dfa:	e00a      	b.n	6e12 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6dfc:	9b02      	ldr	r3, [sp, #8]
    6dfe:	2b01      	cmp	r3, #1
    6e00:	d002      	beq.n	6e08 <Power_Ip_SMC_ModeCheckEntry+0x48>
    6e02:	9b02      	ldr	r3, [sp, #8]
    6e04:	2b10      	cmp	r3, #16
    6e06:	d106      	bne.n	6e16 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6e08:	2300      	movs	r3, #0
    6e0a:	9303      	str	r3, [sp, #12]
            break;
    6e0c:	e003      	b.n	6e16 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6e0e:	bf00      	nop
    6e10:	e002      	b.n	6e18 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6e12:	bf00      	nop
    6e14:	e000      	b.n	6e18 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6e16:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6e18:	9b03      	ldr	r3, [sp, #12]
}
    6e1a:	4618      	mov	r0, r3
    6e1c:	b004      	add	sp, #16
    6e1e:	4770      	bx	lr
    6e20:	4007e000 	.word	0x4007e000

00006e24 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6e24:	b500      	push	{lr}
    6e26:	b08b      	sub	sp, #44	; 0x2c
    6e28:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6e2a:	2300      	movs	r3, #0
    6e2c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6e2e:	2300      	movs	r3, #0
    6e30:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6e32:	2300      	movs	r3, #0
    6e34:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6e38:	9b01      	ldr	r3, [sp, #4]
    6e3a:	685b      	ldr	r3, [r3, #4]
    6e3c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6e3e:	9b08      	ldr	r3, [sp, #32]
    6e40:	2b02      	cmp	r3, #2
    6e42:	d076      	beq.n	6f32 <Power_Ip_SMC_ModeConfig+0x10e>
    6e44:	9b08      	ldr	r3, [sp, #32]
    6e46:	2b02      	cmp	r3, #2
    6e48:	f200 80ab 	bhi.w	6fa2 <Power_Ip_SMC_ModeConfig+0x17e>
    6e4c:	9b08      	ldr	r3, [sp, #32]
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d003      	beq.n	6e5a <Power_Ip_SMC_ModeConfig+0x36>
    6e52:	9b08      	ldr	r3, [sp, #32]
    6e54:	2b01      	cmp	r3, #1
    6e56:	d034      	beq.n	6ec2 <Power_Ip_SMC_ModeConfig+0x9e>
    6e58:	e0a3      	b.n	6fa2 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6e5a:	4b58      	ldr	r3, [pc, #352]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6e5c:	68db      	ldr	r3, [r3, #12]
    6e5e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6e60:	9b06      	ldr	r3, [sp, #24]
    6e62:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6e66:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6e68:	4a54      	ldr	r2, [pc, #336]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6e6a:	9b06      	ldr	r3, [sp, #24]
    6e6c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6e6e:	aa02      	add	r2, sp, #8
    6e70:	a903      	add	r1, sp, #12
    6e72:	a804      	add	r0, sp, #16
    6e74:	f24c 3350 	movw	r3, #50000	; 0xc350
    6e78:	f7ff fece 	bl	6c18 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6e7c:	9a02      	ldr	r2, [sp, #8]
    6e7e:	a903      	add	r1, sp, #12
    6e80:	ab04      	add	r3, sp, #16
    6e82:	4618      	mov	r0, r3
    6e84:	f7ff fee2 	bl	6c4c <Power_Ip_TimeoutExpired>
    6e88:	4603      	mov	r3, r0
    6e8a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6e8e:	4b4b      	ldr	r3, [pc, #300]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6e90:	695b      	ldr	r3, [r3, #20]
    6e92:	f003 0301 	and.w	r3, r3, #1
    6e96:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6e98:	9b05      	ldr	r3, [sp, #20]
    6e9a:	2b01      	cmp	r3, #1
    6e9c:	d006      	beq.n	6eac <Power_Ip_SMC_ModeConfig+0x88>
    6e9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6ea2:	f083 0301 	eor.w	r3, r3, #1
    6ea6:	b2db      	uxtb	r3, r3
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d1e7      	bne.n	6e7c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6eac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d079      	beq.n	6fa8 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6eb4:	2301      	movs	r3, #1
    6eb6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6eb8:	21ff      	movs	r1, #255	; 0xff
    6eba:	2000      	movs	r0, #0
    6ebc:	f7ff fe90 	bl	6be0 <Power_Ip_ReportPowerErrors>
            }

            break;
    6ec0:	e072      	b.n	6fa8 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    6ec2:	4b3e      	ldr	r3, [pc, #248]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6ec4:	68db      	ldr	r3, [r3, #12]
    6ec6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6ec8:	9b06      	ldr	r3, [sp, #24]
    6eca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6ece:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6ed0:	9b06      	ldr	r3, [sp, #24]
    6ed2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6ed6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6ed8:	4a38      	ldr	r2, [pc, #224]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6eda:	9b06      	ldr	r3, [sp, #24]
    6edc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6ede:	aa02      	add	r2, sp, #8
    6ee0:	a903      	add	r1, sp, #12
    6ee2:	a804      	add	r0, sp, #16
    6ee4:	f24c 3350 	movw	r3, #50000	; 0xc350
    6ee8:	f7ff fe96 	bl	6c18 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6eec:	9a02      	ldr	r2, [sp, #8]
    6eee:	a903      	add	r1, sp, #12
    6ef0:	ab04      	add	r3, sp, #16
    6ef2:	4618      	mov	r0, r3
    6ef4:	f7ff feaa 	bl	6c4c <Power_Ip_TimeoutExpired>
    6ef8:	4603      	mov	r3, r0
    6efa:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6efe:	4b2f      	ldr	r3, [pc, #188]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6f00:	695b      	ldr	r3, [r3, #20]
    6f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6f06:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6f08:	9b05      	ldr	r3, [sp, #20]
    6f0a:	2b80      	cmp	r3, #128	; 0x80
    6f0c:	d006      	beq.n	6f1c <Power_Ip_SMC_ModeConfig+0xf8>
    6f0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f12:	f083 0301 	eor.w	r3, r3, #1
    6f16:	b2db      	uxtb	r3, r3
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d1e7      	bne.n	6eec <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6f1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f20:	2b00      	cmp	r3, #0
    6f22:	d043      	beq.n	6fac <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6f24:	2301      	movs	r3, #1
    6f26:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6f28:	21ff      	movs	r1, #255	; 0xff
    6f2a:	2000      	movs	r0, #0
    6f2c:	f7ff fe58 	bl	6be0 <Power_Ip_ReportPowerErrors>
            }

            break;
    6f30:	e03c      	b.n	6fac <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6f32:	4b22      	ldr	r3, [pc, #136]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6f34:	68db      	ldr	r3, [r3, #12]
    6f36:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6f38:	9b06      	ldr	r3, [sp, #24]
    6f3a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6f3e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6f40:	9b06      	ldr	r3, [sp, #24]
    6f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6f46:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6f48:	4a1c      	ldr	r2, [pc, #112]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6f4a:	9b06      	ldr	r3, [sp, #24]
    6f4c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6f4e:	aa02      	add	r2, sp, #8
    6f50:	a903      	add	r1, sp, #12
    6f52:	a804      	add	r0, sp, #16
    6f54:	f24c 3350 	movw	r3, #50000	; 0xc350
    6f58:	f7ff fe5e 	bl	6c18 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6f5c:	9a02      	ldr	r2, [sp, #8]
    6f5e:	a903      	add	r1, sp, #12
    6f60:	ab04      	add	r3, sp, #16
    6f62:	4618      	mov	r0, r3
    6f64:	f7ff fe72 	bl	6c4c <Power_Ip_TimeoutExpired>
    6f68:	4603      	mov	r3, r0
    6f6a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6f6e:	4b13      	ldr	r3, [pc, #76]	; (6fbc <Power_Ip_SMC_ModeConfig+0x198>)
    6f70:	695b      	ldr	r3, [r3, #20]
    6f72:	f003 0304 	and.w	r3, r3, #4
    6f76:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6f78:	9b05      	ldr	r3, [sp, #20]
    6f7a:	2b04      	cmp	r3, #4
    6f7c:	d006      	beq.n	6f8c <Power_Ip_SMC_ModeConfig+0x168>
    6f7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f82:	f083 0301 	eor.w	r3, r3, #1
    6f86:	b2db      	uxtb	r3, r3
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d1e7      	bne.n	6f5c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6f8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f90:	2b00      	cmp	r3, #0
    6f92:	d00d      	beq.n	6fb0 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6f94:	2301      	movs	r3, #1
    6f96:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6f98:	21ff      	movs	r1, #255	; 0xff
    6f9a:	2000      	movs	r0, #0
    6f9c:	f7ff fe20 	bl	6be0 <Power_Ip_ReportPowerErrors>
            }

            break;
    6fa0:	e006      	b.n	6fb0 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6fa2:	2301      	movs	r3, #1
    6fa4:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6fa6:	e004      	b.n	6fb2 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6fa8:	bf00      	nop
    6faa:	e002      	b.n	6fb2 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6fac:	bf00      	nop
    6fae:	e000      	b.n	6fb2 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6fb0:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6fb4:	4618      	mov	r0, r3
    6fb6:	b00b      	add	sp, #44	; 0x2c
    6fb8:	f85d fb04 	ldr.w	pc, [sp], #4
    6fbc:	4007e000 	.word	0x4007e000

00006fc0 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6fc0:	b500      	push	{lr}
    6fc2:	b085      	sub	sp, #20
    6fc4:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6fc6:	9b01      	ldr	r3, [sp, #4]
    6fc8:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    6fca:	2300      	movs	r3, #0
    6fcc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    6fd0:	9b01      	ldr	r3, [sp, #4]
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d106      	bne.n	6fe4 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    6fd6:	230c      	movs	r3, #12
    6fd8:	2200      	movs	r2, #0
    6fda:	2100      	movs	r1, #0
    6fdc:	207c      	movs	r0, #124	; 0x7c
    6fde:	f011 fe27 	bl	18c30 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    6fe2:	e014      	b.n	700e <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    6fe4:	9b03      	ldr	r3, [sp, #12]
    6fe6:	69da      	ldr	r2, [r3, #28]
    6fe8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6fec:	4413      	add	r3, r2
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	2b01      	cmp	r3, #1
    6ff2:	d006      	beq.n	7002 <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    6ff4:	23f0      	movs	r3, #240	; 0xf0
    6ff6:	2200      	movs	r2, #0
    6ff8:	2100      	movs	r1, #0
    6ffa:	207c      	movs	r0, #124	; 0x7c
    6ffc:	f011 fe18 	bl	18c30 <Det_ReportError>
}
    7000:	e005      	b.n	700e <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    7002:	9803      	ldr	r0, [sp, #12]
    7004:	f000 fc64 	bl	78d0 <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    7008:	4a03      	ldr	r2, [pc, #12]	; (7018 <Port_Init+0x58>)
    700a:	9b03      	ldr	r3, [sp, #12]
    700c:	6013      	str	r3, [r2, #0]
}
    700e:	bf00      	nop
    7010:	b005      	add	sp, #20
    7012:	f85d fb04 	ldr.w	pc, [sp], #4
    7016:	bf00      	nop
    7018:	1fff8d28 	.word	0x1fff8d28

0000701c <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    701c:	b500      	push	{lr}
    701e:	b085      	sub	sp, #20
    7020:	9001      	str	r0, [sp, #4]
    7022:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    7024:	4b11      	ldr	r3, [pc, #68]	; (706c <Port_SetPinDirection+0x50>)
    7026:	681b      	ldr	r3, [r3, #0]
    7028:	2b00      	cmp	r3, #0
    702a:	d106      	bne.n	703a <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    702c:	230f      	movs	r3, #15
    702e:	2201      	movs	r2, #1
    7030:	2100      	movs	r1, #0
    7032:	207c      	movs	r0, #124	; 0x7c
    7034:	f011 fdfc 	bl	18c30 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    7038:	e013      	b.n	7062 <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    703a:	4b0c      	ldr	r3, [pc, #48]	; (706c <Port_SetPinDirection+0x50>)
    703c:	681b      	ldr	r3, [r3, #0]
    703e:	461a      	mov	r2, r3
    7040:	9900      	ldr	r1, [sp, #0]
    7042:	9801      	ldr	r0, [sp, #4]
    7044:	f000 fcb2 	bl	79ac <Port_Ipw_SetPinDirection>
    7048:	4603      	mov	r3, r0
    704a:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    704e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7052:	2b01      	cmp	r3, #1
    7054:	d105      	bne.n	7062 <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    7056:	230b      	movs	r3, #11
    7058:	2201      	movs	r2, #1
    705a:	2100      	movs	r1, #0
    705c:	207c      	movs	r0, #124	; 0x7c
    705e:	f011 fde7 	bl	18c30 <Det_ReportError>
}
    7062:	bf00      	nop
    7064:	b005      	add	sp, #20
    7066:	f85d fb04 	ldr.w	pc, [sp], #4
    706a:	bf00      	nop
    706c:	1fff8d28 	.word	0x1fff8d28

00007070 <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    7070:	b500      	push	{lr}
    7072:	b085      	sub	sp, #20
    7074:	9001      	str	r0, [sp, #4]
    7076:	460b      	mov	r3, r1
    7078:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    707c:	2300      	movs	r3, #0
    707e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    7082:	4b12      	ldr	r3, [pc, #72]	; (70cc <Port_SetPinMode+0x5c>)
    7084:	681b      	ldr	r3, [r3, #0]
    7086:	2b00      	cmp	r3, #0
    7088:	d106      	bne.n	7098 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    708a:	230f      	movs	r3, #15
    708c:	2204      	movs	r2, #4
    708e:	2100      	movs	r1, #0
    7090:	207c      	movs	r0, #124	; 0x7c
    7092:	f011 fdcd 	bl	18c30 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    7096:	e014      	b.n	70c2 <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    7098:	4b0c      	ldr	r3, [pc, #48]	; (70cc <Port_SetPinMode+0x5c>)
    709a:	681a      	ldr	r2, [r3, #0]
    709c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    70a0:	4619      	mov	r1, r3
    70a2:	9801      	ldr	r0, [sp, #4]
    70a4:	f000 fd7a 	bl	7b9c <Port_Ipw_SetPinMode>
    70a8:	4603      	mov	r3, r0
    70aa:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    70ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70b2:	2b0d      	cmp	r3, #13
    70b4:	d105      	bne.n	70c2 <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    70b6:	230d      	movs	r3, #13
    70b8:	2204      	movs	r2, #4
    70ba:	2100      	movs	r1, #0
    70bc:	207c      	movs	r0, #124	; 0x7c
    70be:	f011 fdb7 	bl	18c30 <Det_ReportError>
}
    70c2:	bf00      	nop
    70c4:	b005      	add	sp, #20
    70c6:	f85d fb04 	ldr.w	pc, [sp], #4
    70ca:	bf00      	nop
    70cc:	1fff8d28 	.word	0x1fff8d28

000070d0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    70d0:	b500      	push	{lr}
    70d2:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    70d4:	2300      	movs	r3, #0
    70d6:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    70da:	4b12      	ldr	r3, [pc, #72]	; (7124 <Port_RefreshPortDirection+0x54>)
    70dc:	681b      	ldr	r3, [r3, #0]
    70de:	2b00      	cmp	r3, #0
    70e0:	d106      	bne.n	70f0 <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    70e2:	230f      	movs	r3, #15
    70e4:	2202      	movs	r2, #2
    70e6:	2100      	movs	r1, #0
    70e8:	207c      	movs	r0, #124	; 0x7c
    70ea:	f011 fda1 	bl	18c30 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    70ee:	e014      	b.n	711a <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    70f0:	4b0c      	ldr	r3, [pc, #48]	; (7124 <Port_RefreshPortDirection+0x54>)
    70f2:	681b      	ldr	r3, [r3, #0]
    70f4:	69da      	ldr	r2, [r3, #28]
    70f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70fa:	4413      	add	r3, r2
    70fc:	781b      	ldrb	r3, [r3, #0]
    70fe:	2b01      	cmp	r3, #1
    7100:	d006      	beq.n	7110 <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    7102:	23f0      	movs	r3, #240	; 0xf0
    7104:	2202      	movs	r2, #2
    7106:	2100      	movs	r1, #0
    7108:	207c      	movs	r0, #124	; 0x7c
    710a:	f011 fd91 	bl	18c30 <Det_ReportError>
}
    710e:	e004      	b.n	711a <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    7110:	4b04      	ldr	r3, [pc, #16]	; (7124 <Port_RefreshPortDirection+0x54>)
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	4618      	mov	r0, r3
    7116:	f000 febf 	bl	7e98 <Port_Ipw_RefreshPortDirection>
}
    711a:	bf00      	nop
    711c:	b003      	add	sp, #12
    711e:	f85d fb04 	ldr.w	pc, [sp], #4
    7122:	bf00      	nop
    7124:	1fff8d28 	.word	0x1fff8d28

00007128 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    7128:	b500      	push	{lr}
    712a:	b083      	sub	sp, #12
    712c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    712e:	9b01      	ldr	r3, [sp, #4]
    7130:	2b00      	cmp	r3, #0
    7132:	d106      	bne.n	7142 <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    7134:	2310      	movs	r3, #16
    7136:	2203      	movs	r2, #3
    7138:	2100      	movs	r1, #0
    713a:	207c      	movs	r0, #124	; 0x7c
    713c:	f011 fd78 	bl	18c30 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    7140:	e00e      	b.n	7160 <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    7142:	9b01      	ldr	r3, [sp, #4]
    7144:	222b      	movs	r2, #43	; 0x2b
    7146:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    7148:	9b01      	ldr	r3, [sp, #4]
    714a:	227c      	movs	r2, #124	; 0x7c
    714c:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    714e:	9b01      	ldr	r3, [sp, #4]
    7150:	2202      	movs	r2, #2
    7152:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    7154:	9b01      	ldr	r3, [sp, #4]
    7156:	2200      	movs	r2, #0
    7158:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    715a:	9b01      	ldr	r3, [sp, #4]
    715c:	2200      	movs	r2, #0
    715e:	719a      	strb	r2, [r3, #6]
}
    7160:	bf00      	nop
    7162:	b003      	add	sp, #12
    7164:	f85d fb04 	ldr.w	pc, [sp], #4

00007168 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    7168:	b086      	sub	sp, #24
    716a:	9003      	str	r0, [sp, #12]
    716c:	9102      	str	r1, [sp, #8]
    716e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    7170:	23ff      	movs	r3, #255	; 0xff
    7172:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    7174:	9b03      	ldr	r3, [sp, #12]
    7176:	4a39      	ldr	r2, [pc, #228]	; (725c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    7178:	4293      	cmp	r3, r2
    717a:	d151      	bne.n	7220 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    717c:	9b02      	ldr	r3, [sp, #8]
    717e:	2b10      	cmp	r3, #16
    7180:	d867      	bhi.n	7252 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    7182:	a201      	add	r2, pc, #4	; (adr r2, 7188 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    7184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7188:	000071cd 	.word	0x000071cd
    718c:	000071db 	.word	0x000071db
    7190:	00007253 	.word	0x00007253
    7194:	00007253 	.word	0x00007253
    7198:	00007253 	.word	0x00007253
    719c:	00007253 	.word	0x00007253
    71a0:	00007253 	.word	0x00007253
    71a4:	00007253 	.word	0x00007253
    71a8:	00007253 	.word	0x00007253
    71ac:	00007253 	.word	0x00007253
    71b0:	00007253 	.word	0x00007253
    71b4:	00007253 	.word	0x00007253
    71b8:	00007253 	.word	0x00007253
    71bc:	000071e9 	.word	0x000071e9
    71c0:	000071f7 	.word	0x000071f7
    71c4:	00007205 	.word	0x00007205
    71c8:	00007213 	.word	0x00007213
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    71cc:	2301      	movs	r3, #1
    71ce:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    71d0:	9a05      	ldr	r2, [sp, #20]
    71d2:	9b01      	ldr	r3, [sp, #4]
    71d4:	4313      	orrs	r3, r2
    71d6:	9305      	str	r3, [sp, #20]
                break;
    71d8:	e03c      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    71da:	2302      	movs	r3, #2
    71dc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    71de:	9a05      	ldr	r2, [sp, #20]
    71e0:	9b01      	ldr	r3, [sp, #4]
    71e2:	4313      	orrs	r3, r2
    71e4:	9305      	str	r3, [sp, #20]
                break;
    71e6:	e035      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    71e8:	2304      	movs	r3, #4
    71ea:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    71ec:	9a05      	ldr	r2, [sp, #20]
    71ee:	9b01      	ldr	r3, [sp, #4]
    71f0:	4313      	orrs	r3, r2
    71f2:	9305      	str	r3, [sp, #20]
                break;
    71f4:	e02e      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    71f6:	2308      	movs	r3, #8
    71f8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    71fa:	9a05      	ldr	r2, [sp, #20]
    71fc:	9b01      	ldr	r3, [sp, #4]
    71fe:	4313      	orrs	r3, r2
    7200:	9305      	str	r3, [sp, #20]
                break;
    7202:	e027      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    7204:	230e      	movs	r3, #14
    7206:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7208:	9a05      	ldr	r2, [sp, #20]
    720a:	9b01      	ldr	r3, [sp, #4]
    720c:	4013      	ands	r3, r2
    720e:	9305      	str	r3, [sp, #20]
                break;
    7210:	e020      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    7212:	230d      	movs	r3, #13
    7214:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7216:	9a05      	ldr	r2, [sp, #20]
    7218:	9b01      	ldr	r3, [sp, #4]
    721a:	4013      	ands	r3, r2
    721c:	9305      	str	r3, [sp, #20]
                break;
    721e:	e019      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    7220:	9b03      	ldr	r3, [sp, #12]
    7222:	4a0f      	ldr	r2, [pc, #60]	; (7260 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    7224:	4293      	cmp	r3, r2
    7226:	d115      	bne.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    7228:	9b02      	ldr	r3, [sp, #8]
    722a:	2b00      	cmp	r3, #0
    722c:	d003      	beq.n	7236 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    722e:	9b02      	ldr	r3, [sp, #8]
    7230:	2b01      	cmp	r3, #1
    7232:	d007      	beq.n	7244 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    7234:	e00e      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    7236:	230b      	movs	r3, #11
    7238:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    723a:	9a05      	ldr	r2, [sp, #20]
    723c:	9b01      	ldr	r3, [sp, #4]
    723e:	4013      	ands	r3, r2
    7240:	9305      	str	r3, [sp, #20]
                break;
    7242:	e007      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    7244:	2307      	movs	r3, #7
    7246:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7248:	9a05      	ldr	r2, [sp, #20]
    724a:	9b01      	ldr	r3, [sp, #4]
    724c:	4013      	ands	r3, r2
    724e:	9305      	str	r3, [sp, #20]
                break;
    7250:	e000      	b.n	7254 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    7252:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    7254:	9b05      	ldr	r3, [sp, #20]
}
    7256:	4618      	mov	r0, r3
    7258:	b006      	add	sp, #24
    725a:	4770      	bx	lr
    725c:	4004a000 	.word	0x4004a000
    7260:	4004b000 	.word	0x4004b000

00007264 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    7264:	b500      	push	{lr}
    7266:	b089      	sub	sp, #36	; 0x24
    7268:	9003      	str	r0, [sp, #12]
    726a:	9102      	str	r1, [sp, #8]
    726c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    7272:	9b01      	ldr	r3, [sp, #4]
    7274:	2b08      	cmp	r3, #8
    7276:	d121      	bne.n	72bc <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    7278:	4b13      	ldr	r3, [pc, #76]	; (72c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    727a:	685b      	ldr	r3, [r3, #4]
    727c:	f003 030f 	and.w	r3, r3, #15
    7280:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    7282:	9a06      	ldr	r2, [sp, #24]
    7284:	9902      	ldr	r1, [sp, #8]
    7286:	9803      	ldr	r0, [sp, #12]
    7288:	f7ff ff6e 	bl	7168 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    728c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    728e:	9b05      	ldr	r3, [sp, #20]
    7290:	2bff      	cmp	r3, #255	; 0xff
    7292:	d011      	beq.n	72b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    7294:	f00e fbd0 	bl	15a38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    7298:	4b0b      	ldr	r3, [pc, #44]	; (72c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    729a:	685b      	ldr	r3, [r3, #4]
    729c:	4a0a      	ldr	r2, [pc, #40]	; (72c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    729e:	f023 030f 	bic.w	r3, r3, #15
    72a2:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    72a4:	4b08      	ldr	r3, [pc, #32]	; (72c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    72a6:	685a      	ldr	r2, [r3, #4]
    72a8:	9b05      	ldr	r3, [sp, #20]
    72aa:	f003 030f 	and.w	r3, r3, #15
    72ae:	4906      	ldr	r1, [pc, #24]	; (72c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    72b0:	4313      	orrs	r3, r2
    72b2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    72b4:	f00e fbec 	bl	15a90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    72b8:	2300      	movs	r3, #0
    72ba:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    72bc:	9b07      	ldr	r3, [sp, #28]
}
    72be:	4618      	mov	r0, r3
    72c0:	b009      	add	sp, #36	; 0x24
    72c2:	f85d fb04 	ldr.w	pc, [sp], #4
    72c6:	bf00      	nop
    72c8:	40048000 	.word	0x40048000

000072cc <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    72cc:	b500      	push	{lr}
    72ce:	b087      	sub	sp, #28
    72d0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    72d2:	2300      	movs	r3, #0
    72d4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    72d6:	2300      	movs	r3, #0
    72d8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    72da:	2300      	movs	r3, #0
    72dc:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    72de:	9b01      	ldr	r3, [sp, #4]
    72e0:	68db      	ldr	r3, [r3, #12]
    72e2:	2b02      	cmp	r3, #2
    72e4:	d00a      	beq.n	72fc <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    72e6:	9b05      	ldr	r3, [sp, #20]
    72e8:	f043 0302 	orr.w	r3, r3, #2
    72ec:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    72ee:	9b01      	ldr	r3, [sp, #4]
    72f0:	68db      	ldr	r3, [r3, #12]
    72f2:	f003 0301 	and.w	r3, r3, #1
    72f6:	9a05      	ldr	r2, [sp, #20]
    72f8:	4313      	orrs	r3, r2
    72fa:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    72fc:	9b01      	ldr	r3, [sp, #4]
    72fe:	699b      	ldr	r3, [r3, #24]
    7300:	019b      	lsls	r3, r3, #6
    7302:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7306:	9a05      	ldr	r2, [sp, #20]
    7308:	4313      	orrs	r3, r2
    730a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    730c:	9b01      	ldr	r3, [sp, #4]
    730e:	6a1b      	ldr	r3, [r3, #32]
    7310:	03db      	lsls	r3, r3, #15
    7312:	b29b      	uxth	r3, r3
    7314:	9a05      	ldr	r2, [sp, #20]
    7316:	4313      	orrs	r3, r2
    7318:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    731a:	9b01      	ldr	r3, [sp, #4]
    731c:	7f1b      	ldrb	r3, [r3, #28]
    731e:	2b00      	cmp	r3, #0
    7320:	d001      	beq.n	7326 <Port_Ci_Port_Ip_PinInit+0x5a>
    7322:	2310      	movs	r3, #16
    7324:	e000      	b.n	7328 <Port_Ci_Port_Ip_PinInit+0x5c>
    7326:	2300      	movs	r3, #0
    7328:	9a05      	ldr	r2, [sp, #20]
    732a:	4313      	orrs	r3, r2
    732c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    732e:	9b01      	ldr	r3, [sp, #4]
    7330:	691b      	ldr	r3, [r3, #16]
    7332:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    7334:	9b01      	ldr	r3, [sp, #4]
    7336:	6818      	ldr	r0, [r3, #0]
    7338:	9b01      	ldr	r3, [sp, #4]
    733a:	689b      	ldr	r3, [r3, #8]
    733c:	9a04      	ldr	r2, [sp, #16]
    733e:	4619      	mov	r1, r3
    7340:	f7ff ff90 	bl	7264 <Port_Ci_Port_Ip_ConfigureInterleave>
    7344:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    7346:	9b03      	ldr	r3, [sp, #12]
    7348:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    734a:	9b04      	ldr	r3, [sp, #16]
    734c:	021b      	lsls	r3, r3, #8
    734e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    7352:	9a05      	ldr	r2, [sp, #20]
    7354:	4313      	orrs	r3, r2
    7356:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    7358:	f00e f9d4 	bl	15704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    735c:	9b01      	ldr	r3, [sp, #4]
    735e:	681b      	ldr	r3, [r3, #0]
    7360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7364:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    7366:	9b01      	ldr	r3, [sp, #4]
    7368:	689b      	ldr	r3, [r3, #8]
    736a:	2201      	movs	r2, #1
    736c:	fa02 f303 	lsl.w	r3, r2, r3
    7370:	43db      	mvns	r3, r3
    7372:	9a02      	ldr	r2, [sp, #8]
    7374:	4013      	ands	r3, r2
    7376:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    7378:	9b01      	ldr	r3, [sp, #4]
    737a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    737e:	2b00      	cmp	r3, #0
    7380:	d001      	beq.n	7386 <Port_Ci_Port_Ip_PinInit+0xba>
    7382:	2201      	movs	r2, #1
    7384:	e000      	b.n	7388 <Port_Ci_Port_Ip_PinInit+0xbc>
    7386:	2200      	movs	r2, #0
    7388:	9b01      	ldr	r3, [sp, #4]
    738a:	689b      	ldr	r3, [r3, #8]
    738c:	fa02 f303 	lsl.w	r3, r2, r3
    7390:	9a02      	ldr	r2, [sp, #8]
    7392:	4313      	orrs	r3, r2
    7394:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    7396:	9b01      	ldr	r3, [sp, #4]
    7398:	681b      	ldr	r3, [r3, #0]
    739a:	9a02      	ldr	r2, [sp, #8]
    739c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    73a0:	f00e f9dc 	bl	1575c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    73a4:	9b04      	ldr	r3, [sp, #16]
    73a6:	2b01      	cmp	r3, #1
    73a8:	d16d      	bne.n	7486 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    73aa:	9b01      	ldr	r3, [sp, #4]
    73ac:	695b      	ldr	r3, [r3, #20]
    73ae:	2b02      	cmp	r3, #2
    73b0:	d138      	bne.n	7424 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    73b2:	9b01      	ldr	r3, [sp, #4]
    73b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    73b8:	2b01      	cmp	r3, #1
    73ba:	d10f      	bne.n	73dc <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    73bc:	f00e f9f4 	bl	157a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    73c0:	9b01      	ldr	r3, [sp, #4]
    73c2:	685b      	ldr	r3, [r3, #4]
    73c4:	6859      	ldr	r1, [r3, #4]
    73c6:	9b01      	ldr	r3, [sp, #4]
    73c8:	689b      	ldr	r3, [r3, #8]
    73ca:	2201      	movs	r2, #1
    73cc:	409a      	lsls	r2, r3
    73ce:	9b01      	ldr	r3, [sp, #4]
    73d0:	685b      	ldr	r3, [r3, #4]
    73d2:	430a      	orrs	r2, r1
    73d4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    73d6:	f00e fa13 	bl	15800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    73da:	e013      	b.n	7404 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    73dc:	9b01      	ldr	r3, [sp, #4]
    73de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    73e2:	2b00      	cmp	r3, #0
    73e4:	d10e      	bne.n	7404 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    73e6:	f00e fa31 	bl	1584c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    73ea:	9b01      	ldr	r3, [sp, #4]
    73ec:	685b      	ldr	r3, [r3, #4]
    73ee:	6899      	ldr	r1, [r3, #8]
    73f0:	9b01      	ldr	r3, [sp, #4]
    73f2:	689b      	ldr	r3, [r3, #8]
    73f4:	2201      	movs	r2, #1
    73f6:	409a      	lsls	r2, r3
    73f8:	9b01      	ldr	r3, [sp, #4]
    73fa:	685b      	ldr	r3, [r3, #4]
    73fc:	430a      	orrs	r2, r1
    73fe:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    7400:	f00e fa50 	bl	158a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    7404:	f00e fa74 	bl	158f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    7408:	9b01      	ldr	r3, [sp, #4]
    740a:	685b      	ldr	r3, [r3, #4]
    740c:	6959      	ldr	r1, [r3, #20]
    740e:	9b01      	ldr	r3, [sp, #4]
    7410:	689b      	ldr	r3, [r3, #8]
    7412:	2201      	movs	r2, #1
    7414:	409a      	lsls	r2, r3
    7416:	9b01      	ldr	r3, [sp, #4]
    7418:	685b      	ldr	r3, [r3, #4]
    741a:	430a      	orrs	r2, r1
    741c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    741e:	f00e fa93 	bl	15948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    7422:	e030      	b.n	7486 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    7424:	f00e fa64 	bl	158f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    7428:	9b01      	ldr	r3, [sp, #4]
    742a:	685b      	ldr	r3, [r3, #4]
    742c:	6959      	ldr	r1, [r3, #20]
    742e:	9b01      	ldr	r3, [sp, #4]
    7430:	689b      	ldr	r3, [r3, #8]
    7432:	2201      	movs	r2, #1
    7434:	fa02 f303 	lsl.w	r3, r2, r3
    7438:	43da      	mvns	r2, r3
    743a:	9b01      	ldr	r3, [sp, #4]
    743c:	685b      	ldr	r3, [r3, #4]
    743e:	400a      	ands	r2, r1
    7440:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    7442:	f00e fa81 	bl	15948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    7446:	f00e faa5 	bl	15994 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    744a:	9b01      	ldr	r3, [sp, #4]
    744c:	685b      	ldr	r3, [r3, #4]
    744e:	6999      	ldr	r1, [r3, #24]
    7450:	9b01      	ldr	r3, [sp, #4]
    7452:	689b      	ldr	r3, [r3, #8]
    7454:	2201      	movs	r2, #1
    7456:	fa02 f303 	lsl.w	r3, r2, r3
    745a:	43da      	mvns	r2, r3
    745c:	9b01      	ldr	r3, [sp, #4]
    745e:	685b      	ldr	r3, [r3, #4]
    7460:	400a      	ands	r2, r1
    7462:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    7464:	9b01      	ldr	r3, [sp, #4]
    7466:	695b      	ldr	r3, [r3, #20]
    7468:	2b03      	cmp	r3, #3
    746a:	d10a      	bne.n	7482 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    746c:	9b01      	ldr	r3, [sp, #4]
    746e:	685b      	ldr	r3, [r3, #4]
    7470:	6999      	ldr	r1, [r3, #24]
    7472:	9b01      	ldr	r3, [sp, #4]
    7474:	689b      	ldr	r3, [r3, #8]
    7476:	2201      	movs	r2, #1
    7478:	409a      	lsls	r2, r3
    747a:	9b01      	ldr	r3, [sp, #4]
    747c:	685b      	ldr	r3, [r3, #4]
    747e:	430a      	orrs	r2, r1
    7480:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    7482:	f00e fab3 	bl	159ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    7486:	9b01      	ldr	r3, [sp, #4]
    7488:	681b      	ldr	r3, [r3, #0]
    748a:	9a01      	ldr	r2, [sp, #4]
    748c:	6892      	ldr	r2, [r2, #8]
    748e:	9905      	ldr	r1, [sp, #20]
    7490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7494:	bf00      	nop
    7496:	b007      	add	sp, #28
    7498:	f85d fb04 	ldr.w	pc, [sp], #4

0000749c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    749c:	b500      	push	{lr}
    749e:	b085      	sub	sp, #20
    74a0:	9001      	str	r0, [sp, #4]
    74a2:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    74a4:	2300      	movs	r3, #0
    74a6:	9303      	str	r3, [sp, #12]
    74a8:	e00d      	b.n	74c6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    74aa:	9a03      	ldr	r2, [sp, #12]
    74ac:	4613      	mov	r3, r2
    74ae:	009b      	lsls	r3, r3, #2
    74b0:	4413      	add	r3, r2
    74b2:	00db      	lsls	r3, r3, #3
    74b4:	461a      	mov	r2, r3
    74b6:	9b00      	ldr	r3, [sp, #0]
    74b8:	4413      	add	r3, r2
    74ba:	4618      	mov	r0, r3
    74bc:	f7ff ff06 	bl	72cc <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    74c0:	9b03      	ldr	r3, [sp, #12]
    74c2:	3301      	adds	r3, #1
    74c4:	9303      	str	r3, [sp, #12]
    74c6:	9a03      	ldr	r2, [sp, #12]
    74c8:	9b01      	ldr	r3, [sp, #4]
    74ca:	429a      	cmp	r2, r3
    74cc:	d3ed      	bcc.n	74aa <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    74ce:	2300      	movs	r3, #0
}
    74d0:	4618      	mov	r0, r3
    74d2:	b005      	add	sp, #20
    74d4:	f85d fb04 	ldr.w	pc, [sp], #4

000074d8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    74d8:	b500      	push	{lr}
    74da:	b087      	sub	sp, #28
    74dc:	9003      	str	r0, [sp, #12]
    74de:	9102      	str	r1, [sp, #8]
    74e0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    74e2:	9a01      	ldr	r2, [sp, #4]
    74e4:	9902      	ldr	r1, [sp, #8]
    74e6:	9803      	ldr	r0, [sp, #12]
    74e8:	f7ff febc 	bl	7264 <Port_Ci_Port_Ip_ConfigureInterleave>
    74ec:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    74ee:	f00e faf5 	bl	15adc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    74f2:	9b03      	ldr	r3, [sp, #12]
    74f4:	9a02      	ldr	r2, [sp, #8]
    74f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74fa:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    74fc:	9b04      	ldr	r3, [sp, #16]
    74fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7502:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    7504:	9b05      	ldr	r3, [sp, #20]
    7506:	021b      	lsls	r3, r3, #8
    7508:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    750c:	9a04      	ldr	r2, [sp, #16]
    750e:	4313      	orrs	r3, r2
    7510:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    7512:	9b03      	ldr	r3, [sp, #12]
    7514:	9a02      	ldr	r2, [sp, #8]
    7516:	9904      	ldr	r1, [sp, #16]
    7518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    751c:	f00e fb0a 	bl	15b34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    7520:	bf00      	nop
    7522:	b007      	add	sp, #28
    7524:	f85d fb04 	ldr.w	pc, [sp], #4

00007528 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    7528:	b500      	push	{lr}
    752a:	b083      	sub	sp, #12
    752c:	9001      	str	r0, [sp, #4]
    752e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    7530:	f00e fb26 	bl	15b80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    7534:	9b01      	ldr	r3, [sp, #4]
    7536:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    753a:	2101      	movs	r1, #1
    753c:	9b00      	ldr	r3, [sp, #0]
    753e:	fa01 f303 	lsl.w	r3, r1, r3
    7542:	431a      	orrs	r2, r3
    7544:	9b01      	ldr	r3, [sp, #4]
    7546:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    754a:	f00e fb45 	bl	15bd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    754e:	bf00      	nop
    7550:	b003      	add	sp, #12
    7552:	f85d fb04 	ldr.w	pc, [sp], #4

00007556 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    7556:	b500      	push	{lr}
    7558:	b083      	sub	sp, #12
    755a:	9001      	str	r0, [sp, #4]
    755c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    755e:	f00e fb61 	bl	15c24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    7562:	9b01      	ldr	r3, [sp, #4]
    7564:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    7568:	2101      	movs	r1, #1
    756a:	9b00      	ldr	r3, [sp, #0]
    756c:	fa01 f303 	lsl.w	r3, r1, r3
    7570:	43db      	mvns	r3, r3
    7572:	401a      	ands	r2, r3
    7574:	9b01      	ldr	r3, [sp, #4]
    7576:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    757a:	f00e fb7f 	bl	15c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    757e:	bf00      	nop
    7580:	b003      	add	sp, #12
    7582:	f85d fb04 	ldr.w	pc, [sp], #4

00007586 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    7586:	b082      	sub	sp, #8
    7588:	9001      	str	r0, [sp, #4]
    758a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    758c:	9b00      	ldr	r3, [sp, #0]
    758e:	785b      	ldrb	r3, [r3, #1]
    7590:	f003 0201 	and.w	r2, r3, #1
    7594:	9b01      	ldr	r3, [sp, #4]
    7596:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    759a:	9b00      	ldr	r3, [sp, #0]
    759c:	789b      	ldrb	r3, [r3, #2]
    759e:	f003 021f 	and.w	r2, r3, #31
    75a2:	9b01      	ldr	r3, [sp, #4]
    75a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    75a8:	bf00      	nop
    75aa:	b002      	add	sp, #8
    75ac:	4770      	bx	lr

000075ae <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    75ae:	b086      	sub	sp, #24
    75b0:	9003      	str	r0, [sp, #12]
    75b2:	9301      	str	r3, [sp, #4]
    75b4:	460b      	mov	r3, r1
    75b6:	f8ad 300a 	strh.w	r3, [sp, #10]
    75ba:	4613      	mov	r3, r2
    75bc:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    75c0:	2300      	movs	r3, #0
    75c2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    75c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75ca:	f043 0301 	orr.w	r3, r3, #1
    75ce:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    75d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75d6:	f043 0302 	orr.w	r3, r3, #2
    75da:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    75de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75e2:	f043 0310 	orr.w	r3, r3, #16
    75e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    75ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    75f2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    75f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    75fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    7602:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    760a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    760e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    7612:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7616:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    761a:	4013      	ands	r3, r2
    761c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    7620:	9b01      	ldr	r3, [sp, #4]
    7622:	2b00      	cmp	r3, #0
    7624:	d003      	beq.n	762e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    7626:	9b01      	ldr	r3, [sp, #4]
    7628:	2b01      	cmp	r3, #1
    762a:	d00a      	beq.n	7642 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    762c:	e013      	b.n	7656 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    762e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7632:	041a      	lsls	r2, r3, #16
    7634:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7638:	431a      	orrs	r2, r3
    763a:	9b03      	ldr	r3, [sp, #12]
    763c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    7640:	e009      	b.n	7656 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    7642:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7646:	041a      	lsls	r2, r3, #16
    7648:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    764c:	431a      	orrs	r2, r3
    764e:	9b03      	ldr	r3, [sp, #12]
    7650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    7654:	bf00      	nop
    }
}
    7656:	bf00      	nop
    7658:	b006      	add	sp, #24
    765a:	4770      	bx	lr

0000765c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    765c:	b500      	push	{lr}
    765e:	b087      	sub	sp, #28
    7660:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    7662:	9b01      	ldr	r3, [sp, #4]
    7664:	885b      	ldrh	r3, [r3, #2]
    7666:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    766a:	9b01      	ldr	r3, [sp, #4]
    766c:	689b      	ldr	r3, [r3, #8]
    766e:	7a1b      	ldrb	r3, [r3, #8]
    7670:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    7674:	9b01      	ldr	r3, [sp, #4]
    7676:	689b      	ldr	r3, [r3, #8]
    7678:	681b      	ldr	r3, [r3, #0]
    767a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    767c:	9b01      	ldr	r3, [sp, #4]
    767e:	689b      	ldr	r3, [r3, #8]
    7680:	685b      	ldr	r3, [r3, #4]
    7682:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7684:	2300      	movs	r3, #0
    7686:	f8ad 3016 	strh.w	r3, [sp, #22]
    768a:	e111      	b.n	78b0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    768c:	9b02      	ldr	r3, [sp, #8]
    768e:	2b02      	cmp	r3, #2
    7690:	d169      	bne.n	7766 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7692:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7696:	2b01      	cmp	r3, #1
    7698:	d11a      	bne.n	76d0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    769a:	9b01      	ldr	r3, [sp, #4]
    769c:	685a      	ldr	r2, [r3, #4]
    769e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76a2:	005b      	lsls	r3, r3, #1
    76a4:	4413      	add	r3, r2
    76a6:	881b      	ldrh	r3, [r3, #0]
    76a8:	f003 021f 	and.w	r2, r3, #31
    76ac:	9b01      	ldr	r3, [sp, #4]
    76ae:	6859      	ldr	r1, [r3, #4]
    76b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76b4:	005b      	lsls	r3, r3, #1
    76b6:	440b      	add	r3, r1
    76b8:	881b      	ldrh	r3, [r3, #0]
    76ba:	095b      	lsrs	r3, r3, #5
    76bc:	b29b      	uxth	r3, r3
    76be:	4619      	mov	r1, r3
    76c0:	4b81      	ldr	r3, [pc, #516]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    76c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    76c6:	2101      	movs	r1, #1
    76c8:	fa01 f202 	lsl.w	r2, r1, r2
    76cc:	605a      	str	r2, [r3, #4]
    76ce:	e01d      	b.n	770c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    76d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    76d4:	2b00      	cmp	r3, #0
    76d6:	d119      	bne.n	770c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    76d8:	9b01      	ldr	r3, [sp, #4]
    76da:	685a      	ldr	r2, [r3, #4]
    76dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76e0:	005b      	lsls	r3, r3, #1
    76e2:	4413      	add	r3, r2
    76e4:	881b      	ldrh	r3, [r3, #0]
    76e6:	f003 021f 	and.w	r2, r3, #31
    76ea:	9b01      	ldr	r3, [sp, #4]
    76ec:	6859      	ldr	r1, [r3, #4]
    76ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76f2:	005b      	lsls	r3, r3, #1
    76f4:	440b      	add	r3, r1
    76f6:	881b      	ldrh	r3, [r3, #0]
    76f8:	095b      	lsrs	r3, r3, #5
    76fa:	b29b      	uxth	r3, r3
    76fc:	4619      	mov	r1, r3
    76fe:	4b72      	ldr	r3, [pc, #456]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7700:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7704:	2101      	movs	r1, #1
    7706:	fa01 f202 	lsl.w	r2, r1, r2
    770a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    770c:	f00e fadc 	bl	15cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7710:	9b01      	ldr	r3, [sp, #4]
    7712:	685a      	ldr	r2, [r3, #4]
    7714:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7718:	005b      	lsls	r3, r3, #1
    771a:	4413      	add	r3, r2
    771c:	881b      	ldrh	r3, [r3, #0]
    771e:	095b      	lsrs	r3, r3, #5
    7720:	b29b      	uxth	r3, r3
    7722:	461a      	mov	r2, r3
    7724:	4b68      	ldr	r3, [pc, #416]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    772a:	6959      	ldr	r1, [r3, #20]
    772c:	9b01      	ldr	r3, [sp, #4]
    772e:	685a      	ldr	r2, [r3, #4]
    7730:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7734:	005b      	lsls	r3, r3, #1
    7736:	4413      	add	r3, r2
    7738:	881b      	ldrh	r3, [r3, #0]
    773a:	f003 031f 	and.w	r3, r3, #31
    773e:	2201      	movs	r2, #1
    7740:	409a      	lsls	r2, r3
    7742:	9b01      	ldr	r3, [sp, #4]
    7744:	6858      	ldr	r0, [r3, #4]
    7746:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    774a:	005b      	lsls	r3, r3, #1
    774c:	4403      	add	r3, r0
    774e:	881b      	ldrh	r3, [r3, #0]
    7750:	095b      	lsrs	r3, r3, #5
    7752:	b29b      	uxth	r3, r3
    7754:	4618      	mov	r0, r3
    7756:	4b5c      	ldr	r3, [pc, #368]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7758:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    775c:	430a      	orrs	r2, r1
    775e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7760:	f00e fade 	bl	15d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    7764:	e086      	b.n	7874 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7766:	f00e faaf 	bl	15cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    776a:	9b01      	ldr	r3, [sp, #4]
    776c:	685a      	ldr	r2, [r3, #4]
    776e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7772:	005b      	lsls	r3, r3, #1
    7774:	4413      	add	r3, r2
    7776:	881b      	ldrh	r3, [r3, #0]
    7778:	095b      	lsrs	r3, r3, #5
    777a:	b29b      	uxth	r3, r3
    777c:	461a      	mov	r2, r3
    777e:	4b52      	ldr	r3, [pc, #328]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7784:	6959      	ldr	r1, [r3, #20]
    7786:	9b01      	ldr	r3, [sp, #4]
    7788:	685a      	ldr	r2, [r3, #4]
    778a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    778e:	005b      	lsls	r3, r3, #1
    7790:	4413      	add	r3, r2
    7792:	881b      	ldrh	r3, [r3, #0]
    7794:	f003 031f 	and.w	r3, r3, #31
    7798:	2201      	movs	r2, #1
    779a:	fa02 f303 	lsl.w	r3, r2, r3
    779e:	43da      	mvns	r2, r3
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	6858      	ldr	r0, [r3, #4]
    77a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77a8:	005b      	lsls	r3, r3, #1
    77aa:	4403      	add	r3, r0
    77ac:	881b      	ldrh	r3, [r3, #0]
    77ae:	095b      	lsrs	r3, r3, #5
    77b0:	b29b      	uxth	r3, r3
    77b2:	4618      	mov	r0, r3
    77b4:	4b44      	ldr	r3, [pc, #272]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    77b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    77ba:	400a      	ands	r2, r1
    77bc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    77be:	f00e faaf 	bl	15d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    77c2:	f00e fad3 	bl	15d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    77c6:	9b01      	ldr	r3, [sp, #4]
    77c8:	685a      	ldr	r2, [r3, #4]
    77ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77ce:	005b      	lsls	r3, r3, #1
    77d0:	4413      	add	r3, r2
    77d2:	881b      	ldrh	r3, [r3, #0]
    77d4:	095b      	lsrs	r3, r3, #5
    77d6:	b29b      	uxth	r3, r3
    77d8:	461a      	mov	r2, r3
    77da:	4b3b      	ldr	r3, [pc, #236]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    77dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77e0:	6999      	ldr	r1, [r3, #24]
    77e2:	9b01      	ldr	r3, [sp, #4]
    77e4:	685a      	ldr	r2, [r3, #4]
    77e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77ea:	005b      	lsls	r3, r3, #1
    77ec:	4413      	add	r3, r2
    77ee:	881b      	ldrh	r3, [r3, #0]
    77f0:	f003 031f 	and.w	r3, r3, #31
    77f4:	2201      	movs	r2, #1
    77f6:	fa02 f303 	lsl.w	r3, r2, r3
    77fa:	43da      	mvns	r2, r3
    77fc:	9b01      	ldr	r3, [sp, #4]
    77fe:	6858      	ldr	r0, [r3, #4]
    7800:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7804:	005b      	lsls	r3, r3, #1
    7806:	4403      	add	r3, r0
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	095b      	lsrs	r3, r3, #5
    780c:	b29b      	uxth	r3, r3
    780e:	4618      	mov	r0, r3
    7810:	4b2d      	ldr	r3, [pc, #180]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7812:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7816:	400a      	ands	r2, r1
    7818:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    781a:	9b02      	ldr	r3, [sp, #8]
    781c:	2b03      	cmp	r3, #3
    781e:	d127      	bne.n	7870 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7820:	9b01      	ldr	r3, [sp, #4]
    7822:	685a      	ldr	r2, [r3, #4]
    7824:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7828:	005b      	lsls	r3, r3, #1
    782a:	4413      	add	r3, r2
    782c:	881b      	ldrh	r3, [r3, #0]
    782e:	095b      	lsrs	r3, r3, #5
    7830:	b29b      	uxth	r3, r3
    7832:	461a      	mov	r2, r3
    7834:	4b24      	ldr	r3, [pc, #144]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    783a:	6999      	ldr	r1, [r3, #24]
    783c:	9b01      	ldr	r3, [sp, #4]
    783e:	685a      	ldr	r2, [r3, #4]
    7840:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7844:	005b      	lsls	r3, r3, #1
    7846:	4413      	add	r3, r2
    7848:	881b      	ldrh	r3, [r3, #0]
    784a:	f003 031f 	and.w	r3, r3, #31
    784e:	2201      	movs	r2, #1
    7850:	409a      	lsls	r2, r3
    7852:	9b01      	ldr	r3, [sp, #4]
    7854:	6858      	ldr	r0, [r3, #4]
    7856:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    785a:	005b      	lsls	r3, r3, #1
    785c:	4403      	add	r3, r0
    785e:	881b      	ldrh	r3, [r3, #0]
    7860:	095b      	lsrs	r3, r3, #5
    7862:	b29b      	uxth	r3, r3
    7864:	4618      	mov	r0, r3
    7866:	4b18      	ldr	r3, [pc, #96]	; (78c8 <Port_Ipw_Init_UnusedPins+0x26c>)
    7868:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    786c:	430a      	orrs	r2, r1
    786e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    7870:	f00e faa8 	bl	15dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    7874:	9b01      	ldr	r3, [sp, #4]
    7876:	685a      	ldr	r2, [r3, #4]
    7878:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    787c:	005b      	lsls	r3, r3, #1
    787e:	4413      	add	r3, r2
    7880:	881b      	ldrh	r3, [r3, #0]
    7882:	095b      	lsrs	r3, r3, #5
    7884:	b29b      	uxth	r3, r3
    7886:	461a      	mov	r2, r3
    7888:	4b10      	ldr	r3, [pc, #64]	; (78cc <Port_Ipw_Init_UnusedPins+0x270>)
    788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    788e:	9a01      	ldr	r2, [sp, #4]
    7890:	6851      	ldr	r1, [r2, #4]
    7892:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7896:	0052      	lsls	r2, r2, #1
    7898:	440a      	add	r2, r1
    789a:	8812      	ldrh	r2, [r2, #0]
    789c:	f002 021f 	and.w	r2, r2, #31
    78a0:	9903      	ldr	r1, [sp, #12]
    78a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    78a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78aa:	3301      	adds	r3, #1
    78ac:	f8ad 3016 	strh.w	r3, [sp, #22]
    78b0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    78b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    78b8:	429a      	cmp	r2, r3
    78ba:	f4ff aee7 	bcc.w	768c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    78be:	bf00      	nop
    78c0:	bf00      	nop
    78c2:	b007      	add	sp, #28
    78c4:	f85d fb04 	ldr.w	pc, [sp], #4
    78c8:	00019f9c 	.word	0x00019f9c
    78cc:	00019f88 	.word	0x00019f88

000078d0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    78d0:	b500      	push	{lr}
    78d2:	b085      	sub	sp, #20
    78d4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    78d6:	9b01      	ldr	r3, [sp, #4]
    78d8:	7c1b      	ldrb	r3, [r3, #16]
    78da:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    78de:	2300      	movs	r3, #0
    78e0:	f8ad 300e 	strh.w	r3, [sp, #14]
    78e4:	e035      	b.n	7952 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    78e6:	9b01      	ldr	r3, [sp, #4]
    78e8:	695a      	ldr	r2, [r3, #20]
    78ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78ee:	00db      	lsls	r3, r3, #3
    78f0:	4413      	add	r3, r2
    78f2:	781b      	ldrb	r3, [r3, #0]
    78f4:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    78f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78fc:	4a29      	ldr	r2, [pc, #164]	; (79a4 <Port_Ipw_Init+0xd4>)
    78fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    7902:	9b01      	ldr	r3, [sp, #4]
    7904:	695a      	ldr	r2, [r3, #20]
    7906:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    790a:	00db      	lsls	r3, r3, #3
    790c:	4413      	add	r3, r2
    790e:	4619      	mov	r1, r3
    7910:	f7ff fe39 	bl	7586 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    7914:	f00e fbc4 	bl	160a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    7918:	f89d 300c 	ldrb.w	r3, [sp, #12]
    791c:	4a21      	ldr	r2, [pc, #132]	; (79a4 <Port_Ipw_Init+0xd4>)
    791e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7922:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    7926:	9b01      	ldr	r3, [sp, #4]
    7928:	695a      	ldr	r2, [r3, #20]
    792a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    792e:	00db      	lsls	r3, r3, #3
    7930:	4413      	add	r3, r2
    7932:	685a      	ldr	r2, [r3, #4]
    7934:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7938:	481a      	ldr	r0, [pc, #104]	; (79a4 <Port_Ipw_Init+0xd4>)
    793a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    793e:	430a      	orrs	r2, r1
    7940:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    7944:	f00e fbd8 	bl	160f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7948:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    794c:	3301      	adds	r3, #1
    794e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7952:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7956:	b29b      	uxth	r3, r3
    7958:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    795c:	429a      	cmp	r2, r3
    795e:	d3c2      	bcc.n	78e6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    7960:	9b01      	ldr	r3, [sp, #4]
    7962:	6a1b      	ldr	r3, [r3, #32]
    7964:	4619      	mov	r1, r3
    7966:	200c      	movs	r0, #12
    7968:	f7ff fd98 	bl	749c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    796c:	9801      	ldr	r0, [sp, #4]
    796e:	f7ff fe75 	bl	765c <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7972:	2300      	movs	r3, #0
    7974:	f8ad 300e 	strh.w	r3, [sp, #14]
    7978:	e00a      	b.n	7990 <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    797a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    797e:	4a0a      	ldr	r2, [pc, #40]	; (79a8 <Port_Ipw_Init+0xd8>)
    7980:	2100      	movs	r1, #0
    7982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7986:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    798a:	3301      	adds	r3, #1
    798c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7990:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7994:	2b09      	cmp	r3, #9
    7996:	d9f0      	bls.n	797a <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    7998:	bf00      	nop
    799a:	bf00      	nop
    799c:	b005      	add	sp, #20
    799e:	f85d fb04 	ldr.w	pc, [sp], #4
    79a2:	bf00      	nop
    79a4:	00019f88 	.word	0x00019f88
    79a8:	1fff8d2c 	.word	0x1fff8d2c

000079ac <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    79ac:	b500      	push	{lr}
    79ae:	b087      	sub	sp, #28
    79b0:	9003      	str	r0, [sp, #12]
    79b2:	9102      	str	r1, [sp, #8]
    79b4:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    79b6:	9b01      	ldr	r3, [sp, #4]
    79b8:	68d9      	ldr	r1, [r3, #12]
    79ba:	9a03      	ldr	r2, [sp, #12]
    79bc:	4613      	mov	r3, r2
    79be:	009b      	lsls	r3, r3, #2
    79c0:	4413      	add	r3, r2
    79c2:	009b      	lsls	r3, r3, #2
    79c4:	440b      	add	r3, r1
    79c6:	881b      	ldrh	r3, [r3, #0]
    79c8:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    79cc:	2300      	movs	r3, #0
    79ce:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    79d2:	2300      	movs	r3, #0
    79d4:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    79d8:	9b01      	ldr	r3, [sp, #4]
    79da:	881b      	ldrh	r3, [r3, #0]
    79dc:	461a      	mov	r2, r3
    79de:	9b03      	ldr	r3, [sp, #12]
    79e0:	4293      	cmp	r3, r2
    79e2:	d306      	bcc.n	79f2 <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    79e4:	230a      	movs	r3, #10
    79e6:	2201      	movs	r2, #1
    79e8:	2100      	movs	r1, #0
    79ea:	207c      	movs	r0, #124	; 0x7c
    79ec:	f011 f920 	bl	18c30 <Det_ReportError>
    79f0:	e0c9      	b.n	7b86 <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    79f2:	9b01      	ldr	r3, [sp, #4]
    79f4:	699a      	ldr	r2, [r3, #24]
    79f6:	9b03      	ldr	r3, [sp, #12]
    79f8:	009b      	lsls	r3, r3, #2
    79fa:	4413      	add	r3, r2
    79fc:	681a      	ldr	r2, [r3, #0]
    79fe:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7a02:	2101      	movs	r1, #1
    7a04:	fa01 f303 	lsl.w	r3, r1, r3
    7a08:	401a      	ands	r2, r3
    7a0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7a0e:	fa22 f303 	lsr.w	r3, r2, r3
    7a12:	2b01      	cmp	r3, #1
    7a14:	d006      	beq.n	7a24 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    7a16:	23f0      	movs	r3, #240	; 0xf0
    7a18:	2201      	movs	r2, #1
    7a1a:	2100      	movs	r1, #0
    7a1c:	207c      	movs	r0, #124	; 0x7c
    7a1e:	f011 f907 	bl	18c30 <Det_ReportError>
    7a22:	e0b0      	b.n	7b86 <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    7a24:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a28:	b2db      	uxtb	r3, r3
    7a2a:	f003 030f 	and.w	r3, r3, #15
    7a2e:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    7a32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a36:	091b      	lsrs	r3, r3, #4
    7a38:	b29b      	uxth	r3, r3
    7a3a:	b2db      	uxtb	r3, r3
    7a3c:	461a      	mov	r2, r3
    7a3e:	4b55      	ldr	r3, [pc, #340]	; (7b94 <Port_Ipw_SetPinDirection+0x1e8>)
    7a40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7a44:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    7a48:	9b01      	ldr	r3, [sp, #4]
    7a4a:	68d9      	ldr	r1, [r3, #12]
    7a4c:	9a03      	ldr	r2, [sp, #12]
    7a4e:	4613      	mov	r3, r2
    7a50:	009b      	lsls	r3, r3, #2
    7a52:	4413      	add	r3, r2
    7a54:	009b      	lsls	r3, r3, #2
    7a56:	440b      	add	r3, r1
    7a58:	7c5b      	ldrb	r3, [r3, #17]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d10c      	bne.n	7a78 <Port_Ipw_SetPinDirection+0xcc>
    7a5e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7a62:	2201      	movs	r2, #1
    7a64:	fa02 f303 	lsl.w	r3, r2, r3
    7a68:	b29a      	uxth	r2, r3
    7a6a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7a6e:	4013      	ands	r3, r2
    7a70:	b29b      	uxth	r3, r3
    7a72:	2b00      	cmp	r3, #0
    7a74:	f000 8082 	beq.w	7b7c <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    7a78:	9b02      	ldr	r3, [sp, #8]
    7a7a:	2b02      	cmp	r3, #2
    7a7c:	d11d      	bne.n	7aba <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7a7e:	f00e fb61 	bl	16144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    7a82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a86:	095b      	lsrs	r3, r3, #5
    7a88:	b29b      	uxth	r3, r3
    7a8a:	461a      	mov	r2, r3
    7a8c:	4b42      	ldr	r3, [pc, #264]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a92:	6959      	ldr	r1, [r3, #20]
    7a94:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a98:	f003 031f 	and.w	r3, r3, #31
    7a9c:	2201      	movs	r2, #1
    7a9e:	409a      	lsls	r2, r3
    7aa0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7aa4:	095b      	lsrs	r3, r3, #5
    7aa6:	b29b      	uxth	r3, r3
    7aa8:	4618      	mov	r0, r3
    7aaa:	4b3b      	ldr	r3, [pc, #236]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7aac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7ab0:	430a      	orrs	r2, r1
    7ab2:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7ab4:	f00e fb72 	bl	1619c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    7ab8:	e064      	b.n	7b84 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    7aba:	9b02      	ldr	r3, [sp, #8]
    7abc:	2b01      	cmp	r3, #1
    7abe:	d002      	beq.n	7ac6 <Port_Ipw_SetPinDirection+0x11a>
    7ac0:	9b02      	ldr	r3, [sp, #8]
    7ac2:	2b03      	cmp	r3, #3
    7ac4:	d15e      	bne.n	7b84 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7ac6:	f00e fb3d 	bl	16144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7aca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ace:	095b      	lsrs	r3, r3, #5
    7ad0:	b29b      	uxth	r3, r3
    7ad2:	461a      	mov	r2, r3
    7ad4:	4b30      	ldr	r3, [pc, #192]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ada:	6959      	ldr	r1, [r3, #20]
    7adc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ae0:	f003 031f 	and.w	r3, r3, #31
    7ae4:	2201      	movs	r2, #1
    7ae6:	fa02 f303 	lsl.w	r3, r2, r3
    7aea:	43da      	mvns	r2, r3
    7aec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7af0:	095b      	lsrs	r3, r3, #5
    7af2:	b29b      	uxth	r3, r3
    7af4:	4618      	mov	r0, r3
    7af6:	4b28      	ldr	r3, [pc, #160]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7af8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7afc:	400a      	ands	r2, r1
    7afe:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7b00:	f00e fb4c 	bl	1619c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    7b04:	f00e fb70 	bl	161e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7b08:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b0c:	095b      	lsrs	r3, r3, #5
    7b0e:	b29b      	uxth	r3, r3
    7b10:	461a      	mov	r2, r3
    7b12:	4b21      	ldr	r3, [pc, #132]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b18:	6999      	ldr	r1, [r3, #24]
    7b1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b1e:	f003 031f 	and.w	r3, r3, #31
    7b22:	2201      	movs	r2, #1
    7b24:	fa02 f303 	lsl.w	r3, r2, r3
    7b28:	43da      	mvns	r2, r3
    7b2a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b2e:	095b      	lsrs	r3, r3, #5
    7b30:	b29b      	uxth	r3, r3
    7b32:	4618      	mov	r0, r3
    7b34:	4b18      	ldr	r3, [pc, #96]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7b36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7b3a:	400a      	ands	r2, r1
    7b3c:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    7b3e:	9b02      	ldr	r3, [sp, #8]
    7b40:	2b03      	cmp	r3, #3
    7b42:	d118      	bne.n	7b76 <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7b44:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b48:	095b      	lsrs	r3, r3, #5
    7b4a:	b29b      	uxth	r3, r3
    7b4c:	461a      	mov	r2, r3
    7b4e:	4b12      	ldr	r3, [pc, #72]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b54:	6999      	ldr	r1, [r3, #24]
    7b56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b5a:	f003 031f 	and.w	r3, r3, #31
    7b5e:	2201      	movs	r2, #1
    7b60:	409a      	lsls	r2, r3
    7b62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b66:	095b      	lsrs	r3, r3, #5
    7b68:	b29b      	uxth	r3, r3
    7b6a:	4618      	mov	r0, r3
    7b6c:	4b0a      	ldr	r3, [pc, #40]	; (7b98 <Port_Ipw_SetPinDirection+0x1ec>)
    7b6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7b72:	430a      	orrs	r2, r1
    7b74:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    7b76:	f00e fb63 	bl	16240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    7b7a:	e003      	b.n	7b84 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    7b7c:	2301      	movs	r3, #1
    7b7e:	f88d 3017 	strb.w	r3, [sp, #23]
    7b82:	e000      	b.n	7b86 <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    7b84:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    7b86:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7b8a:	4618      	mov	r0, r3
    7b8c:	b007      	add	sp, #28
    7b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b92:	bf00      	nop
    7b94:	1fff8d2c 	.word	0x1fff8d2c
    7b98:	00019f9c 	.word	0x00019f9c

00007b9c <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    7b9c:	b500      	push	{lr}
    7b9e:	b08b      	sub	sp, #44	; 0x2c
    7ba0:	9003      	str	r0, [sp, #12]
    7ba2:	460b      	mov	r3, r1
    7ba4:	9201      	str	r2, [sp, #4]
    7ba6:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    7baa:	2300      	movs	r3, #0
    7bac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7bb0:	9b01      	ldr	r3, [sp, #4]
    7bb2:	68d9      	ldr	r1, [r3, #12]
    7bb4:	9a03      	ldr	r2, [sp, #12]
    7bb6:	4613      	mov	r3, r2
    7bb8:	009b      	lsls	r3, r3, #2
    7bba:	4413      	add	r3, r2
    7bbc:	009b      	lsls	r3, r3, #2
    7bbe:	440b      	add	r3, r1
    7bc0:	881b      	ldrh	r3, [r3, #0]
    7bc2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    7bc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7bca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7bce:	2300      	movs	r3, #0
    7bd0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7bd4:	9b01      	ldr	r3, [sp, #4]
    7bd6:	881b      	ldrh	r3, [r3, #0]
    7bd8:	461a      	mov	r2, r3
    7bda:	9b03      	ldr	r3, [sp, #12]
    7bdc:	4293      	cmp	r3, r2
    7bde:	d306      	bcc.n	7bee <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    7be0:	230a      	movs	r3, #10
    7be2:	2204      	movs	r2, #4
    7be4:	2100      	movs	r1, #0
    7be6:	207c      	movs	r0, #124	; 0x7c
    7be8:	f011 f822 	bl	18c30 <Det_ReportError>
    7bec:	e0b3      	b.n	7d56 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7bee:	9b01      	ldr	r3, [sp, #4]
    7bf0:	699a      	ldr	r2, [r3, #24]
    7bf2:	9b03      	ldr	r3, [sp, #12]
    7bf4:	009b      	lsls	r3, r3, #2
    7bf6:	4413      	add	r3, r2
    7bf8:	681a      	ldr	r2, [r3, #0]
    7bfa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7bfe:	2101      	movs	r1, #1
    7c00:	fa01 f303 	lsl.w	r3, r1, r3
    7c04:	401a      	ands	r2, r3
    7c06:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7c0a:	fa22 f303 	lsr.w	r3, r2, r3
    7c0e:	2b01      	cmp	r3, #1
    7c10:	d006      	beq.n	7c20 <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    7c12:	23f0      	movs	r3, #240	; 0xf0
    7c14:	2204      	movs	r2, #4
    7c16:	2100      	movs	r1, #0
    7c18:	207c      	movs	r0, #124	; 0x7c
    7c1a:	f011 f809 	bl	18c30 <Det_ReportError>
    7c1e:	e09a      	b.n	7d56 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7c20:	9b01      	ldr	r3, [sp, #4]
    7c22:	68d9      	ldr	r1, [r3, #12]
    7c24:	9a03      	ldr	r2, [sp, #12]
    7c26:	4613      	mov	r3, r2
    7c28:	009b      	lsls	r3, r3, #2
    7c2a:	4413      	add	r3, r2
    7c2c:	009b      	lsls	r3, r3, #2
    7c2e:	440b      	add	r3, r1
    7c30:	7c9b      	ldrb	r3, [r3, #18]
    7c32:	f083 0301 	eor.w	r3, r3, #1
    7c36:	b2db      	uxtb	r3, r3
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d006      	beq.n	7c4a <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7c3c:	230e      	movs	r3, #14
    7c3e:	2204      	movs	r2, #4
    7c40:	2100      	movs	r1, #0
    7c42:	207c      	movs	r0, #124	; 0x7c
    7c44:	f010 fff4 	bl	18c30 <Det_ReportError>
    7c48:	e085      	b.n	7d56 <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7c4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c4e:	2b07      	cmp	r3, #7
    7c50:	d903      	bls.n	7c5a <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    7c52:	230d      	movs	r3, #13
    7c54:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7c58:	e07d      	b.n	7d56 <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7c5a:	2300      	movs	r3, #0
    7c5c:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7c5e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7c62:	f003 030f 	and.w	r3, r3, #15
    7c66:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7c6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7c6e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7c72:	091b      	lsrs	r3, r3, #4
    7c74:	b29b      	uxth	r3, r3
    7c76:	4618      	mov	r0, r3
    7c78:	493a      	ldr	r1, [pc, #232]	; (7d64 <Port_Ipw_SetPinMode+0x1c8>)
    7c7a:	4613      	mov	r3, r2
    7c7c:	009b      	lsls	r3, r3, #2
    7c7e:	4413      	add	r3, r2
    7c80:	005b      	lsls	r3, r3, #1
    7c82:	4403      	add	r3, r0
    7c84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7c88:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7c8c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7c90:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7c94:	fa42 f303 	asr.w	r3, r2, r3
    7c98:	f003 0301 	and.w	r3, r3, #1
    7c9c:	2b00      	cmp	r3, #0
    7c9e:	d057      	beq.n	7d50 <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7ca0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ca4:	2b01      	cmp	r3, #1
    7ca6:	d11f      	bne.n	7ce8 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7ca8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7cac:	2101      	movs	r1, #1
    7cae:	4618      	mov	r0, r3
    7cb0:	f000 f85c 	bl	7d6c <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    7cb4:	9b01      	ldr	r3, [sp, #4]
    7cb6:	68d9      	ldr	r1, [r3, #12]
    7cb8:	9a03      	ldr	r2, [sp, #12]
    7cba:	4613      	mov	r3, r2
    7cbc:	009b      	lsls	r3, r3, #2
    7cbe:	4413      	add	r3, r2
    7cc0:	009b      	lsls	r3, r3, #2
    7cc2:	440b      	add	r3, r1
    7cc4:	68db      	ldr	r3, [r3, #12]
    7cc6:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7cc8:	9b07      	ldr	r3, [sp, #28]
    7cca:	2b01      	cmp	r3, #1
    7ccc:	d006      	beq.n	7cdc <Port_Ipw_SetPinMode+0x140>
    7cce:	9b07      	ldr	r3, [sp, #28]
    7cd0:	2b03      	cmp	r3, #3
    7cd2:	d003      	beq.n	7cdc <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    7cd4:	9901      	ldr	r1, [sp, #4]
    7cd6:	9803      	ldr	r0, [sp, #12]
    7cd8:	f000 f896 	bl	7e08 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7cdc:	9a01      	ldr	r2, [sp, #4]
    7cde:	9907      	ldr	r1, [sp, #28]
    7ce0:	9803      	ldr	r0, [sp, #12]
    7ce2:	f7ff fe63 	bl	79ac <Port_Ipw_SetPinDirection>
                        break;
    7ce6:	e006      	b.n	7cf6 <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    7ce8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7cec:	2100      	movs	r1, #0
    7cee:	4618      	mov	r0, r3
    7cf0:	f000 f83c 	bl	7d6c <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    7cf4:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    7cf6:	f00e fdab 	bl	16850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7cfa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7cfe:	095b      	lsrs	r3, r3, #5
    7d00:	b29b      	uxth	r3, r3
    7d02:	461a      	mov	r2, r3
    7d04:	4b18      	ldr	r3, [pc, #96]	; (7d68 <Port_Ipw_SetPinMode+0x1cc>)
    7d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d0a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7d0e:	f002 021f 	and.w	r2, r2, #31
    7d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d16:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7d18:	9b05      	ldr	r3, [sp, #20]
    7d1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7d1e:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7d20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7d24:	021b      	lsls	r3, r3, #8
    7d26:	9a05      	ldr	r2, [sp, #20]
    7d28:	4313      	orrs	r3, r2
    7d2a:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7d2c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7d30:	095b      	lsrs	r3, r3, #5
    7d32:	b29b      	uxth	r3, r3
    7d34:	461a      	mov	r2, r3
    7d36:	4b0c      	ldr	r3, [pc, #48]	; (7d68 <Port_Ipw_SetPinMode+0x1cc>)
    7d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7d40:	f002 021f 	and.w	r2, r2, #31
    7d44:	9905      	ldr	r1, [sp, #20]
    7d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7d4a:	f00e fdad 	bl	168a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7d4e:	e002      	b.n	7d56 <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7d50:	230d      	movs	r3, #13
    7d52:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    7d56:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7d5a:	4618      	mov	r0, r3
    7d5c:	b00b      	add	sp, #44	; 0x2c
    7d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    7d62:	bf00      	nop
    7d64:	0001a998 	.word	0x0001a998
    7d68:	00019f88 	.word	0x00019f88

00007d6c <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7d6c:	b500      	push	{lr}
    7d6e:	b085      	sub	sp, #20
    7d70:	4603      	mov	r3, r0
    7d72:	460a      	mov	r2, r1
    7d74:	f8ad 3006 	strh.w	r3, [sp, #6]
    7d78:	4613      	mov	r3, r2
    7d7a:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    7d7e:	f00e fa85 	bl	1628c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    7d82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d86:	b2db      	uxtb	r3, r3
    7d88:	f003 030f 	and.w	r3, r3, #15
    7d8c:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7d90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d94:	b2db      	uxtb	r3, r3
    7d96:	091b      	lsrs	r3, r3, #4
    7d98:	b2db      	uxtb	r3, r3
    7d9a:	461a      	mov	r2, r3
    7d9c:	4b19      	ldr	r3, [pc, #100]	; (7e04 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7d9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7da2:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    7da6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7daa:	2b00      	cmp	r3, #0
    7dac:	d00b      	beq.n	7dc6 <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    7dae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7db2:	2201      	movs	r2, #1
    7db4:	fa02 f303 	lsl.w	r3, r2, r3
    7db8:	b29a      	uxth	r2, r3
    7dba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7dbe:	4313      	orrs	r3, r2
    7dc0:	f8ad 300e 	strh.w	r3, [sp, #14]
    7dc4:	e00c      	b.n	7de0 <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    7dc6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7dca:	2201      	movs	r2, #1
    7dcc:	fa02 f303 	lsl.w	r3, r2, r3
    7dd0:	b29b      	uxth	r3, r3
    7dd2:	43db      	mvns	r3, r3
    7dd4:	b29a      	uxth	r2, r3
    7dd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7dda:	4013      	ands	r3, r2
    7ddc:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    7de0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7de4:	b2db      	uxtb	r3, r3
    7de6:	091b      	lsrs	r3, r3, #4
    7de8:	b2db      	uxtb	r3, r3
    7dea:	4619      	mov	r1, r3
    7dec:	4a05      	ldr	r2, [pc, #20]	; (7e04 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7dee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7df2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    7df6:	f00e fa75 	bl	162e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    7dfa:	bf00      	nop
    7dfc:	b005      	add	sp, #20
    7dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    7e02:	bf00      	nop
    7e04:	1fff8d2c 	.word	0x1fff8d2c

00007e08 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    7e08:	b084      	sub	sp, #16
    7e0a:	9001      	str	r0, [sp, #4]
    7e0c:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7e0e:	9b00      	ldr	r3, [sp, #0]
    7e10:	68d9      	ldr	r1, [r3, #12]
    7e12:	9a01      	ldr	r2, [sp, #4]
    7e14:	4613      	mov	r3, r2
    7e16:	009b      	lsls	r3, r3, #2
    7e18:	4413      	add	r3, r2
    7e1a:	009b      	lsls	r3, r3, #2
    7e1c:	440b      	add	r3, r1
    7e1e:	881b      	ldrh	r3, [r3, #0]
    7e20:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    7e24:	9b00      	ldr	r3, [sp, #0]
    7e26:	68d9      	ldr	r1, [r3, #12]
    7e28:	9a01      	ldr	r2, [sp, #4]
    7e2a:	4613      	mov	r3, r2
    7e2c:	009b      	lsls	r3, r3, #2
    7e2e:	4413      	add	r3, r2
    7e30:	009b      	lsls	r3, r3, #2
    7e32:	440b      	add	r3, r1
    7e34:	7a1b      	ldrb	r3, [r3, #8]
    7e36:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7e3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7e3e:	2b01      	cmp	r3, #1
    7e40:	d110      	bne.n	7e64 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7e42:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e46:	f003 021f 	and.w	r2, r3, #31
    7e4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e4e:	095b      	lsrs	r3, r3, #5
    7e50:	b29b      	uxth	r3, r3
    7e52:	4619      	mov	r1, r3
    7e54:	4b0f      	ldr	r3, [pc, #60]	; (7e94 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7e56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7e5a:	2101      	movs	r1, #1
    7e5c:	fa01 f202 	lsl.w	r2, r1, r2
    7e60:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    7e62:	e013      	b.n	7e8c <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7e64:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d10f      	bne.n	7e8c <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7e6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e70:	f003 021f 	and.w	r2, r3, #31
    7e74:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e78:	095b      	lsrs	r3, r3, #5
    7e7a:	b29b      	uxth	r3, r3
    7e7c:	4619      	mov	r1, r3
    7e7e:	4b05      	ldr	r3, [pc, #20]	; (7e94 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7e84:	2101      	movs	r1, #1
    7e86:	fa01 f202 	lsl.w	r2, r1, r2
    7e8a:	609a      	str	r2, [r3, #8]
}
    7e8c:	bf00      	nop
    7e8e:	b004      	add	sp, #16
    7e90:	4770      	bx	lr
    7e92:	bf00      	nop
    7e94:	00019f9c 	.word	0x00019f9c

00007e98 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7e98:	b500      	push	{lr}
    7e9a:	b085      	sub	sp, #20
    7e9c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    7e9e:	9b01      	ldr	r3, [sp, #4]
    7ea0:	881b      	ldrh	r3, [r3, #0]
    7ea2:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7ea6:	2300      	movs	r3, #0
    7ea8:	f8ad 300e 	strh.w	r3, [sp, #14]
    7eac:	e0d2      	b.n	8054 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    7eae:	9b01      	ldr	r3, [sp, #4]
    7eb0:	68d9      	ldr	r1, [r3, #12]
    7eb2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7eb6:	4613      	mov	r3, r2
    7eb8:	009b      	lsls	r3, r3, #2
    7eba:	4413      	add	r3, r2
    7ebc:	009b      	lsls	r3, r3, #2
    7ebe:	440b      	add	r3, r1
    7ec0:	7c5b      	ldrb	r3, [r3, #17]
    7ec2:	f083 0301 	eor.w	r3, r3, #1
    7ec6:	b2db      	uxtb	r3, r3
    7ec8:	2b00      	cmp	r3, #0
    7eca:	f000 80be 	beq.w	804a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    7ece:	9b01      	ldr	r3, [sp, #4]
    7ed0:	68d9      	ldr	r1, [r3, #12]
    7ed2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ed6:	4613      	mov	r3, r2
    7ed8:	009b      	lsls	r3, r3, #2
    7eda:	4413      	add	r3, r2
    7edc:	009b      	lsls	r3, r3, #2
    7ede:	440b      	add	r3, r1
    7ee0:	7c1b      	ldrb	r3, [r3, #16]
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	f000 80b1 	beq.w	804a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7ee8:	9b01      	ldr	r3, [sp, #4]
    7eea:	68d9      	ldr	r1, [r3, #12]
    7eec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ef0:	4613      	mov	r3, r2
    7ef2:	009b      	lsls	r3, r3, #2
    7ef4:	4413      	add	r3, r2
    7ef6:	009b      	lsls	r3, r3, #2
    7ef8:	440b      	add	r3, r1
    7efa:	881b      	ldrh	r3, [r3, #0]
    7efc:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7f00:	9b01      	ldr	r3, [sp, #4]
    7f02:	68d9      	ldr	r1, [r3, #12]
    7f04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f08:	4613      	mov	r3, r2
    7f0a:	009b      	lsls	r3, r3, #2
    7f0c:	4413      	add	r3, r2
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	440b      	add	r3, r1
    7f12:	68db      	ldr	r3, [r3, #12]
    7f14:	2b02      	cmp	r3, #2
    7f16:	d11d      	bne.n	7f54 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7f18:	f00e fa0a 	bl	16330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7f1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f20:	095b      	lsrs	r3, r3, #5
    7f22:	b29b      	uxth	r3, r3
    7f24:	461a      	mov	r2, r3
    7f26:	4b51      	ldr	r3, [pc, #324]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f2c:	6959      	ldr	r1, [r3, #20]
    7f2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f32:	f003 031f 	and.w	r3, r3, #31
    7f36:	2201      	movs	r2, #1
    7f38:	409a      	lsls	r2, r3
    7f3a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f3e:	095b      	lsrs	r3, r3, #5
    7f40:	b29b      	uxth	r3, r3
    7f42:	4618      	mov	r0, r3
    7f44:	4b49      	ldr	r3, [pc, #292]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7f4a:	430a      	orrs	r2, r1
    7f4c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7f4e:	f00e fa1b 	bl	16388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7f52:	e07a      	b.n	804a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7f54:	9b01      	ldr	r3, [sp, #4]
    7f56:	68d9      	ldr	r1, [r3, #12]
    7f58:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f5c:	4613      	mov	r3, r2
    7f5e:	009b      	lsls	r3, r3, #2
    7f60:	4413      	add	r3, r2
    7f62:	009b      	lsls	r3, r3, #2
    7f64:	440b      	add	r3, r1
    7f66:	68db      	ldr	r3, [r3, #12]
    7f68:	2b01      	cmp	r3, #1
    7f6a:	d00b      	beq.n	7f84 <Port_Ipw_RefreshPortDirection+0xec>
    7f6c:	9b01      	ldr	r3, [sp, #4]
    7f6e:	68d9      	ldr	r1, [r3, #12]
    7f70:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f74:	4613      	mov	r3, r2
    7f76:	009b      	lsls	r3, r3, #2
    7f78:	4413      	add	r3, r2
    7f7a:	009b      	lsls	r3, r3, #2
    7f7c:	440b      	add	r3, r1
    7f7e:	68db      	ldr	r3, [r3, #12]
    7f80:	2b03      	cmp	r3, #3
    7f82:	d162      	bne.n	804a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7f84:	f00e f9d4 	bl	16330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7f88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f8c:	095b      	lsrs	r3, r3, #5
    7f8e:	b29b      	uxth	r3, r3
    7f90:	461a      	mov	r2, r3
    7f92:	4b36      	ldr	r3, [pc, #216]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f98:	6959      	ldr	r1, [r3, #20]
    7f9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f9e:	f003 031f 	and.w	r3, r3, #31
    7fa2:	2201      	movs	r2, #1
    7fa4:	fa02 f303 	lsl.w	r3, r2, r3
    7fa8:	43da      	mvns	r2, r3
    7faa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fae:	095b      	lsrs	r3, r3, #5
    7fb0:	b29b      	uxth	r3, r3
    7fb2:	4618      	mov	r0, r3
    7fb4:	4b2d      	ldr	r3, [pc, #180]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7fb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7fba:	400a      	ands	r2, r1
    7fbc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7fbe:	f00e f9e3 	bl	16388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7fc2:	f00e fa07 	bl	163d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7fc6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fca:	095b      	lsrs	r3, r3, #5
    7fcc:	b29b      	uxth	r3, r3
    7fce:	461a      	mov	r2, r3
    7fd0:	4b26      	ldr	r3, [pc, #152]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fd6:	6999      	ldr	r1, [r3, #24]
    7fd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fdc:	f003 031f 	and.w	r3, r3, #31
    7fe0:	2201      	movs	r2, #1
    7fe2:	fa02 f303 	lsl.w	r3, r2, r3
    7fe6:	43da      	mvns	r2, r3
    7fe8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fec:	095b      	lsrs	r3, r3, #5
    7fee:	b29b      	uxth	r3, r3
    7ff0:	4618      	mov	r0, r3
    7ff2:	4b1e      	ldr	r3, [pc, #120]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7ff4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7ff8:	400a      	ands	r2, r1
    7ffa:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7ffc:	9b01      	ldr	r3, [sp, #4]
    7ffe:	68d9      	ldr	r1, [r3, #12]
    8000:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8004:	4613      	mov	r3, r2
    8006:	009b      	lsls	r3, r3, #2
    8008:	4413      	add	r3, r2
    800a:	009b      	lsls	r3, r3, #2
    800c:	440b      	add	r3, r1
    800e:	68db      	ldr	r3, [r3, #12]
    8010:	2b03      	cmp	r3, #3
    8012:	d118      	bne.n	8046 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    8014:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8018:	095b      	lsrs	r3, r3, #5
    801a:	b29b      	uxth	r3, r3
    801c:	461a      	mov	r2, r3
    801e:	4b13      	ldr	r3, [pc, #76]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    8020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8024:	6999      	ldr	r1, [r3, #24]
    8026:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    802a:	f003 031f 	and.w	r3, r3, #31
    802e:	2201      	movs	r2, #1
    8030:	409a      	lsls	r2, r3
    8032:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8036:	095b      	lsrs	r3, r3, #5
    8038:	b29b      	uxth	r3, r3
    803a:	4618      	mov	r0, r3
    803c:	4b0b      	ldr	r3, [pc, #44]	; (806c <Port_Ipw_RefreshPortDirection+0x1d4>)
    803e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8042:	430a      	orrs	r2, r1
    8044:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    8046:	f00e f9f1 	bl	1642c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    804a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    804e:	3301      	adds	r3, #1
    8050:	f8ad 300e 	strh.w	r3, [sp, #14]
    8054:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8058:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    805c:	429a      	cmp	r2, r3
    805e:	f4ff af26 	bcc.w	7eae <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    8062:	bf00      	nop
    8064:	bf00      	nop
    8066:	b005      	add	sp, #20
    8068:	f85d fb04 	ldr.w	pc, [sp], #4
    806c:	00019f9c 	.word	0x00019f9c

00008070 <Dio_ValidateChannelLevel>:
 */
static inline Std_ReturnType Dio_ValidateChannelLevel
(
    Dio_LevelType Level
)
{
    8070:	b500      	push	{lr}
    8072:	b085      	sub	sp, #20
    8074:	4603      	mov	r3, r0
    8076:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    807a:	2301      	movs	r3, #1
    807c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (((Dio_LevelType)STD_HIGH == Level) || ((Dio_LevelType)STD_LOW == Level))
    8080:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8084:	2b01      	cmp	r3, #1
    8086:	d003      	beq.n	8090 <Dio_ValidateChannelLevel+0x20>
    8088:	f89d 3007 	ldrb.w	r3, [sp, #7]
    808c:	2b00      	cmp	r3, #0
    808e:	d103      	bne.n	8098 <Dio_ValidateChannelLevel+0x28>
    {
        Valid = (Std_ReturnType)E_OK;
    8090:	2300      	movs	r3, #0
    8092:	f88d 300f 	strb.w	r3, [sp, #15]
    8096:	e005      	b.n	80a4 <Dio_ValidateChannelLevel+0x34>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNEL_ID, DIO_E_PARAM_LEVEL);
    8098:	2321      	movs	r3, #33	; 0x21
    809a:	2201      	movs	r2, #1
    809c:	2100      	movs	r1, #0
    809e:	2078      	movs	r0, #120	; 0x78
    80a0:	f010 fdc6 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    80a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    80a8:	4618      	mov	r0, r3
    80aa:	b005      	add	sp, #20
    80ac:	f85d fb04 	ldr.w	pc, [sp], #4

000080b0 <Dio_ValidateChannelForWrite>:
static inline Std_ReturnType Dio_ValidateChannelForWrite
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    80b0:	b500      	push	{lr}
    80b2:	b085      	sub	sp, #20
    80b4:	4603      	mov	r3, r0
    80b6:	460a      	mov	r2, r1
    80b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    80bc:	4613      	mov	r3, r2
    80be:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    80c2:	2301      	movs	r3, #1
    80c4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    80c8:	2300      	movs	r3, #0
    80ca:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    80ce:	2390      	movs	r3, #144	; 0x90
    80d0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (SIUL2_DIO_IP_MAX_MSCR_REGISTERS <= ChannelId)
    {
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    80d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    80d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80dc:	429a      	cmp	r2, r3
    80de:	d831      	bhi.n	8144 <Dio_ValidateChannelForWrite+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    80e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80e4:	095b      	lsrs	r3, r3, #5
    80e6:	b29b      	uxth	r3, r3
    80e8:	461a      	mov	r2, r3
    80ea:	4b1d      	ldr	r3, [pc, #116]	; (8160 <Dio_ValidateChannelForWrite+0xb0>)
    80ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                                    (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    80f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80f4:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    80f8:	fa22 f303 	lsr.w	r3, r2, r3
    80fc:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8100:	2b00      	cmp	r3, #0
    8102:	d01f      	beq.n	8144 <Dio_ValidateChannelForWrite+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    8104:	4b17      	ldr	r3, [pc, #92]	; (8164 <Dio_ValidateChannelForWrite+0xb4>)
    8106:	689a      	ldr	r2, [r3, #8]
    8108:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    810c:	009b      	lsls	r3, r3, #2
    810e:	4413      	add	r3, r2
    8110:	681b      	ldr	r3, [r3, #0]
    8112:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8114:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8118:	2201      	movs	r2, #1
    811a:	409a      	lsls	r2, r3
    811c:	9b02      	ldr	r3, [sp, #8]
    811e:	401a      	ands	r2, r3
    8120:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8124:	fa22 f303 	lsr.w	r3, r2, r3
    8128:	2b01      	cmp	r3, #1
    812a:	d103      	bne.n	8134 <Dio_ValidateChannelForWrite+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    812c:	2300      	movs	r3, #0
    812e:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8132:	e00e      	b.n	8152 <Dio_ValidateChannelForWrite+0xa2>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8134:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8138:	23f0      	movs	r3, #240	; 0xf0
    813a:	2100      	movs	r1, #0
    813c:	2078      	movs	r0, #120	; 0x78
    813e:	f010 fd77 	bl	18c30 <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8142:	e006      	b.n	8152 <Dio_ValidateChannelForWrite+0xa2>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    8144:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8148:	230a      	movs	r3, #10
    814a:	2100      	movs	r1, #0
    814c:	2078      	movs	r0, #120	; 0x78
    814e:	f010 fd6f 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    8152:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8156:	4618      	mov	r0, r3
    8158:	b005      	add	sp, #20
    815a:	f85d fb04 	ldr.w	pc, [sp], #4
    815e:	bf00      	nop
    8160:	0001a818 	.word	0x0001a818
    8164:	0001a840 	.word	0x0001a840

00008168 <Dio_ValidateChannelForRead>:
static inline Std_ReturnType Dio_ValidateChannelForRead
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    8168:	b500      	push	{lr}
    816a:	b085      	sub	sp, #20
    816c:	4603      	mov	r3, r0
    816e:	460a      	mov	r2, r1
    8170:	f8ad 3006 	strh.w	r3, [sp, #6]
    8174:	4613      	mov	r3, r2
    8176:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    817a:	2301      	movs	r3, #1
    817c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8180:	2300      	movs	r3, #0
    8182:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    8186:	2390      	movs	r3, #144	; 0x90
    8188:	f8ad 300c 	strh.w	r3, [sp, #12]
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */

    /* Check if that channel ID is available for read */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    818c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8190:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8194:	429a      	cmp	r2, r3
    8196:	d831      	bhi.n	81fc <Dio_ValidateChannelForRead+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    8198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    819c:	095b      	lsrs	r3, r3, #5
    819e:	b29b      	uxth	r3, r3
    81a0:	461a      	mov	r2, r3
    81a2:	4b1d      	ldr	r3, [pc, #116]	; (8218 <Dio_ValidateChannelForRead+0xb0>)
    81a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                  (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    81a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    81ac:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    81b0:	fa22 f303 	lsr.w	r3, r2, r3
    81b4:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    81b8:	2b00      	cmp	r3, #0
    81ba:	d01f      	beq.n	81fc <Dio_ValidateChannelForRead+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    81bc:	4b17      	ldr	r3, [pc, #92]	; (821c <Dio_ValidateChannelForRead+0xb4>)
    81be:	689a      	ldr	r2, [r3, #8]
    81c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    81c4:	009b      	lsls	r3, r3, #2
    81c6:	4413      	add	r3, r2
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        /* Check if port was assigned to the current coreID */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81d0:	2201      	movs	r2, #1
    81d2:	409a      	lsls	r2, r3
    81d4:	9b02      	ldr	r3, [sp, #8]
    81d6:	401a      	ands	r2, r3
    81d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81dc:	fa22 f303 	lsr.w	r3, r2, r3
    81e0:	2b01      	cmp	r3, #1
    81e2:	d103      	bne.n	81ec <Dio_ValidateChannelForRead+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    81e4:	2300      	movs	r3, #0
    81e6:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81ea:	e00e      	b.n	820a <Dio_ValidateChannelForRead+0xa2>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    81ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81f0:	23f0      	movs	r3, #240	; 0xf0
    81f2:	2100      	movs	r1, #0
    81f4:	2078      	movs	r0, #120	; 0x78
    81f6:	f010 fd1b 	bl	18c30 <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81fa:	e006      	b.n	820a <Dio_ValidateChannelForRead+0xa2>
        }
    }
    else
    {
        /* Raise Det error when invalid channel ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    81fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8200:	230a      	movs	r3, #10
    8202:	2100      	movs	r1, #0
    8204:	2078      	movs	r0, #120	; 0x78
    8206:	f010 fd13 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    820a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    820e:	4618      	mov	r0, r3
    8210:	b005      	add	sp, #20
    8212:	f85d fb04 	ldr.w	pc, [sp], #4
    8216:	bf00      	nop
    8218:	0001a82c 	.word	0x0001a82c
    821c:	0001a840 	.word	0x0001a840

00008220 <Dio_ValidatePortForWrite>:
static inline Std_ReturnType Dio_ValidatePortForWrite
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    8220:	b500      	push	{lr}
    8222:	b085      	sub	sp, #20
    8224:	4603      	mov	r3, r0
    8226:	460a      	mov	r2, r1
    8228:	f88d 3007 	strb.w	r3, [sp, #7]
    822c:	4613      	mov	r3, r2
    822e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    8232:	2301      	movs	r3, #1
    8234:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8238:	2300      	movs	r3, #0
    823a:	f88d 300e 	strb.w	r3, [sp, #14]

    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    823e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8242:	2b04      	cmp	r3, #4
    8244:	d825      	bhi.n	8292 <Dio_ValidatePortForWrite+0x72>
        (Dio_aAvailablePinsForWrite[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    8246:	f89d 3007 	ldrb.w	r3, [sp, #7]
    824a:	4a18      	ldr	r2, [pc, #96]	; (82ac <Dio_ValidatePortForWrite+0x8c>)
    824c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    8250:	2b00      	cmp	r3, #0
    8252:	d01e      	beq.n	8292 <Dio_ValidatePortForWrite+0x72>
       )
    {
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8254:	4b16      	ldr	r3, [pc, #88]	; (82b0 <Dio_ValidatePortForWrite+0x90>)
    8256:	68da      	ldr	r2, [r3, #12]
    8258:	f89d 3007 	ldrb.w	r3, [sp, #7]
    825c:	009b      	lsls	r3, r3, #2
    825e:	4413      	add	r3, r2
    8260:	681a      	ldr	r2, [r3, #0]
    8262:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8266:	2101      	movs	r1, #1
    8268:	fa01 f303 	lsl.w	r3, r1, r3
    826c:	401a      	ands	r2, r3
    826e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8272:	fa22 f303 	lsr.w	r3, r2, r3
    8276:	2b01      	cmp	r3, #1
    8278:	d103      	bne.n	8282 <Dio_ValidatePortForWrite+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    827a:	2300      	movs	r3, #0
    827c:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8280:	e00e      	b.n	82a0 <Dio_ValidatePortForWrite+0x80>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8282:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8286:	23f0      	movs	r3, #240	; 0xf0
    8288:	2100      	movs	r1, #0
    828a:	2078      	movs	r0, #120	; 0x78
    828c:	f010 fcd0 	bl	18c30 <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8290:	e006      	b.n	82a0 <Dio_ValidatePortForWrite+0x80>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    8292:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8296:	2314      	movs	r3, #20
    8298:	2100      	movs	r1, #0
    829a:	2078      	movs	r0, #120	; 0x78
    829c:	f010 fcc8 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    82a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    82a4:	4618      	mov	r0, r3
    82a6:	b005      	add	sp, #20
    82a8:	f85d fb04 	ldr.w	pc, [sp], #4
    82ac:	0001a818 	.word	0x0001a818
    82b0:	0001a840 	.word	0x0001a840

000082b4 <Dio_ValidatePortForRead>:
static inline Std_ReturnType Dio_ValidatePortForRead
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    82b4:	b500      	push	{lr}
    82b6:	b085      	sub	sp, #20
    82b8:	4603      	mov	r3, r0
    82ba:	460a      	mov	r2, r1
    82bc:	f88d 3007 	strb.w	r3, [sp, #7]
    82c0:	4613      	mov	r3, r2
    82c2:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    82c6:	2301      	movs	r3, #1
    82c8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    82cc:	2300      	movs	r3, #0
    82ce:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Check input parameters are available for read */
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    82d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82d6:	2b04      	cmp	r3, #4
    82d8:	d825      	bhi.n	8326 <Dio_ValidatePortForRead+0x72>
        (Dio_aAvailablePinsForRead[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    82da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82de:	4a18      	ldr	r2, [pc, #96]	; (8340 <Dio_ValidatePortForRead+0x8c>)
    82e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    82e4:	2b00      	cmp	r3, #0
    82e6:	d01e      	beq.n	8326 <Dio_ValidatePortForRead+0x72>
       )
    {
        /* Check if Port was assigned to the current coreID */
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    82e8:	4b16      	ldr	r3, [pc, #88]	; (8344 <Dio_ValidatePortForRead+0x90>)
    82ea:	68da      	ldr	r2, [r3, #12]
    82ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82f0:	009b      	lsls	r3, r3, #2
    82f2:	4413      	add	r3, r2
    82f4:	681a      	ldr	r2, [r3, #0]
    82f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    82fa:	2101      	movs	r1, #1
    82fc:	fa01 f303 	lsl.w	r3, r1, r3
    8300:	401a      	ands	r2, r3
    8302:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8306:	fa22 f303 	lsr.w	r3, r2, r3
    830a:	2b01      	cmp	r3, #1
    830c:	d103      	bne.n	8316 <Dio_ValidatePortForRead+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    830e:	2300      	movs	r3, #0
    8310:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8314:	e00e      	b.n	8334 <Dio_ValidatePortForRead+0x80>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8316:	f89d 2006 	ldrb.w	r2, [sp, #6]
    831a:	23f0      	movs	r3, #240	; 0xf0
    831c:	2100      	movs	r1, #0
    831e:	2078      	movs	r0, #120	; 0x78
    8320:	f010 fc86 	bl	18c30 <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8324:	e006      	b.n	8334 <Dio_ValidatePortForRead+0x80>
        }
    }
    else
    {
        /* Raise Det error when invalid port ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    8326:	f89d 2006 	ldrb.w	r2, [sp, #6]
    832a:	2314      	movs	r3, #20
    832c:	2100      	movs	r1, #0
    832e:	2078      	movs	r0, #120	; 0x78
    8330:	f010 fc7e 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    8334:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8338:	4618      	mov	r0, r3
    833a:	b005      	add	sp, #20
    833c:	f85d fb04 	ldr.w	pc, [sp], #4
    8340:	0001a82c 	.word	0x0001a82c
    8344:	0001a840 	.word	0x0001a840

00008348 <Dio_ValidateChannelGroupForWrite>:
static inline Std_ReturnType Dio_ValidateChannelGroupForWrite
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                u8ServiceId
)
{
    8348:	b500      	push	{lr}
    834a:	b085      	sub	sp, #20
    834c:	9001      	str	r0, [sp, #4]
    834e:	460b      	mov	r3, r1
    8350:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8354:	2301      	movs	r3, #1
    8356:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    835a:	9b01      	ldr	r3, [sp, #4]
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8362:	4b19      	ldr	r3, [pc, #100]	; (83c8 <Dio_ValidateChannelGroupForWrite+0x80>)
    8364:	685b      	ldr	r3, [r3, #4]
    8366:	461a      	mov	r2, r3
    8368:	9b01      	ldr	r3, [sp, #4]
    836a:	429a      	cmp	r2, r3
    836c:	d81f      	bhi.n	83ae <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    836e:	4b16      	ldr	r3, [pc, #88]	; (83c8 <Dio_ValidateChannelGroupForWrite+0x80>)
    8370:	685a      	ldr	r2, [r3, #4]
    8372:	4b15      	ldr	r3, [pc, #84]	; (83c8 <Dio_ValidateChannelGroupForWrite+0x80>)
    8374:	781b      	ldrb	r3, [r3, #0]
    8376:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    837a:	3b01      	subs	r3, #1
    837c:	00db      	lsls	r3, r3, #3
    837e:	4413      	add	r3, r2
    8380:	461a      	mov	r2, r3
    8382:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8384:	429a      	cmp	r2, r3
    8386:	d312      	bcc.n	83ae <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    8388:	f89d 300e 	ldrb.w	r3, [sp, #14]
    838c:	2b04      	cmp	r3, #4
    838e:	d80e      	bhi.n	83ae <Dio_ValidateChannelGroupForWrite+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    8390:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8394:	4a0d      	ldr	r2, [pc, #52]	; (83cc <Dio_ValidateChannelGroupForWrite+0x84>)
    8396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    839a:	2b00      	cmp	r3, #0
    839c:	d007      	beq.n	83ae <Dio_ValidateChannelGroupForWrite+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    839e:	9b01      	ldr	r3, [sp, #4]
    83a0:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    83a2:	2b1f      	cmp	r3, #31
    83a4:	d803      	bhi.n	83ae <Dio_ValidateChannelGroupForWrite+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    83a6:	2300      	movs	r3, #0
    83a8:	f88d 300f 	strb.w	r3, [sp, #15]
    83ac:	e006      	b.n	83bc <Dio_ValidateChannelGroupForWrite+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    83ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    83b2:	231f      	movs	r3, #31
    83b4:	2100      	movs	r1, #0
    83b6:	2078      	movs	r0, #120	; 0x78
    83b8:	f010 fc3a 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    83bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    83c0:	4618      	mov	r0, r3
    83c2:	b005      	add	sp, #20
    83c4:	f85d fb04 	ldr.w	pc, [sp], #4
    83c8:	0001a840 	.word	0x0001a840
    83cc:	0001a818 	.word	0x0001a818

000083d0 <Dio_ValidateChannelGroupForRead>:
static inline Std_ReturnType Dio_ValidateChannelGroupForRead
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                 u8ServiceId
)
{
    83d0:	b500      	push	{lr}
    83d2:	b085      	sub	sp, #20
    83d4:	9001      	str	r0, [sp, #4]
    83d6:	460b      	mov	r3, r1
    83d8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    83dc:	2301      	movs	r3, #1
    83de:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    83e2:	9b01      	ldr	r3, [sp, #4]
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    83ea:	4b19      	ldr	r3, [pc, #100]	; (8450 <Dio_ValidateChannelGroupForRead+0x80>)
    83ec:	685b      	ldr	r3, [r3, #4]
    83ee:	461a      	mov	r2, r3
    83f0:	9b01      	ldr	r3, [sp, #4]
    83f2:	429a      	cmp	r2, r3
    83f4:	d81f      	bhi.n	8436 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    83f6:	4b16      	ldr	r3, [pc, #88]	; (8450 <Dio_ValidateChannelGroupForRead+0x80>)
    83f8:	685a      	ldr	r2, [r3, #4]
    83fa:	4b15      	ldr	r3, [pc, #84]	; (8450 <Dio_ValidateChannelGroupForRead+0x80>)
    83fc:	781b      	ldrb	r3, [r3, #0]
    83fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    8402:	3b01      	subs	r3, #1
    8404:	00db      	lsls	r3, r3, #3
    8406:	4413      	add	r3, r2
    8408:	461a      	mov	r2, r3
    840a:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    840c:	429a      	cmp	r2, r3
    840e:	d312      	bcc.n	8436 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    8410:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8414:	2b04      	cmp	r3, #4
    8416:	d80e      	bhi.n	8436 <Dio_ValidateChannelGroupForRead+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    8418:	f89d 300e 	ldrb.w	r3, [sp, #14]
    841c:	4a0d      	ldr	r2, [pc, #52]	; (8454 <Dio_ValidateChannelGroupForRead+0x84>)
    841e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    8422:	2b00      	cmp	r3, #0
    8424:	d007      	beq.n	8436 <Dio_ValidateChannelGroupForRead+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    8426:	9b01      	ldr	r3, [sp, #4]
    8428:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    842a:	2b1f      	cmp	r3, #31
    842c:	d803      	bhi.n	8436 <Dio_ValidateChannelGroupForRead+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    842e:	2300      	movs	r3, #0
    8430:	f88d 300f 	strb.w	r3, [sp, #15]
    8434:	e006      	b.n	8444 <Dio_ValidateChannelGroupForRead+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    8436:	f89d 2003 	ldrb.w	r2, [sp, #3]
    843a:	231f      	movs	r3, #31
    843c:	2100      	movs	r1, #0
    843e:	2078      	movs	r0, #120	; 0x78
    8440:	f010 fbf6 	bl	18c30 <Det_ReportError>
    }

    return Valid;
    8444:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8448:	4618      	mov	r0, r3
    844a:	b005      	add	sp, #20
    844c:	f85d fb04 	ldr.w	pc, [sp], #4
    8450:	0001a840 	.word	0x0001a840
    8454:	0001a82c 	.word	0x0001a82c

00008458 <Dio_GetVersionInfo>:
*/
void Dio_GetVersionInfo
(
    Std_VersionInfoType * VersionInfo
)
{
    8458:	b500      	push	{lr}
    845a:	b083      	sub	sp, #12
    845c:	9001      	str	r0, [sp, #4]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    if (NULL_PTR == VersionInfo)
    845e:	9b01      	ldr	r3, [sp, #4]
    8460:	2b00      	cmp	r3, #0
    8462:	d106      	bne.n	8472 <Dio_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_GETVERSIONINFO_ID, DIO_E_PARAM_POINTER);
    8464:	2320      	movs	r3, #32
    8466:	2212      	movs	r2, #18
    8468:	2100      	movs	r1, #0
    846a:	2078      	movs	r0, #120	; 0x78
    846c:	f010 fbe0 	bl	18c30 <Det_ReportError>
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    }
}
    8470:	e00e      	b.n	8490 <Dio_GetVersionInfo+0x38>
        VersionInfo->vendorID         = (uint16)DIO_VENDOR_ID;
    8472:	9b01      	ldr	r3, [sp, #4]
    8474:	222b      	movs	r2, #43	; 0x2b
    8476:	801a      	strh	r2, [r3, #0]
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
    8478:	9b01      	ldr	r3, [sp, #4]
    847a:	2278      	movs	r2, #120	; 0x78
    847c:	805a      	strh	r2, [r3, #2]
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
    847e:	9b01      	ldr	r3, [sp, #4]
    8480:	2202      	movs	r2, #2
    8482:	711a      	strb	r2, [r3, #4]
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
    8484:	9b01      	ldr	r3, [sp, #4]
    8486:	2200      	movs	r2, #0
    8488:	715a      	strb	r2, [r3, #5]
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    848a:	9b01      	ldr	r3, [sp, #4]
    848c:	2200      	movs	r2, #0
    848e:	719a      	strb	r2, [r3, #6]
}
    8490:	bf00      	nop
    8492:	b003      	add	sp, #12
    8494:	f85d fb04 	ldr.w	pc, [sp], #4

00008498 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    8498:	b500      	push	{lr}
    849a:	b085      	sub	sp, #20
    849c:	4603      	mov	r3, r0
    849e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    84a2:	2300      	movs	r3, #0
    84a4:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);
    84a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84ac:	2100      	movs	r1, #0
    84ae:	4618      	mov	r0, r3
    84b0:	f7ff fe5a 	bl	8168 <Dio_ValidateChannelForRead>
    84b4:	4603      	mov	r3, r0
    84b6:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    84ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    84be:	2b00      	cmp	r3, #0
    84c0:	d107      	bne.n	84d2 <Dio_ReadChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    84c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84c6:	4618      	mov	r0, r3
    84c8:	f000 f8c6 	bl	8658 <Dio_Ipw_ReadChannel>
    84cc:	4603      	mov	r3, r0
    84ce:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    84d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    84d6:	4618      	mov	r0, r3
    84d8:	b005      	add	sp, #20
    84da:	f85d fb04 	ldr.w	pc, [sp], #4

000084de <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    84de:	b500      	push	{lr}
    84e0:	b085      	sub	sp, #20
    84e2:	4603      	mov	r3, r0
    84e4:	460a      	mov	r2, r1
    84e6:	f8ad 3006 	strh.w	r3, [sp, #6]
    84ea:	4613      	mov	r3, r2
    84ec:	f88d 3005 	strb.w	r3, [sp, #5]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_WRITECHANNEL_ID);
    84f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84f4:	2101      	movs	r1, #1
    84f6:	4618      	mov	r0, r3
    84f8:	f7ff fdda 	bl	80b0 <Dio_ValidateChannelForWrite>
    84fc:	4603      	mov	r3, r0
    84fe:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType) E_OK == Valid)
    8502:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8506:	2b00      	cmp	r3, #0
    8508:	d113      	bne.n	8532 <Dio_WriteChannel+0x54>
    {
        Valid = Dio_ValidateChannelLevel(Level);
    850a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    850e:	4618      	mov	r0, r3
    8510:	f7ff fdae 	bl	8070 <Dio_ValidateChannelLevel>
    8514:	4603      	mov	r3, r0
    8516:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType) E_OK == Valid)
    851a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    851e:	2b00      	cmp	r3, #0
    8520:	d107      	bne.n	8532 <Dio_WriteChannel+0x54>
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    8522:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8526:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    852a:	4611      	mov	r1, r2
    852c:	4618      	mov	r0, r3
    852e:	f000 f8b9 	bl	86a4 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    8532:	bf00      	nop
    8534:	b005      	add	sp, #20
    8536:	f85d fb04 	ldr.w	pc, [sp], #4

0000853a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    853a:	b500      	push	{lr}
    853c:	b085      	sub	sp, #20
    853e:	4603      	mov	r3, r0
    8540:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    8544:	2300      	movs	r3, #0
    8546:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);
    854a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    854e:	2111      	movs	r1, #17
    8550:	4618      	mov	r0, r3
    8552:	f7ff fdad 	bl	80b0 <Dio_ValidateChannelForWrite>
    8556:	4603      	mov	r3, r0
    8558:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    855c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8560:	2b00      	cmp	r3, #0
    8562:	d107      	bne.n	8574 <Dio_FlipChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    8564:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8568:	4618      	mov	r0, r3
    856a:	f000 f8c1 	bl	86f0 <Dio_Ipw_FlipChannel>
    856e:	4603      	mov	r3, r0
    8570:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    8574:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8578:	4618      	mov	r0, r3
    857a:	b005      	add	sp, #20
    857c:	f85d fb04 	ldr.w	pc, [sp], #4

00008580 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    8580:	b500      	push	{lr}
    8582:	b085      	sub	sp, #20
    8584:	4603      	mov	r3, r0
    8586:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    858a:	2300      	movs	r3, #0
    858c:	9303      	str	r3, [sp, #12]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);
    858e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8592:	2102      	movs	r1, #2
    8594:	4618      	mov	r0, r3
    8596:	f7ff fe8d 	bl	82b4 <Dio_ValidatePortForRead>
    859a:	4603      	mov	r3, r0
    859c:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType) E_OK == Valid)
    85a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    85a4:	2b00      	cmp	r3, #0
    85a6:	d105      	bne.n	85b4 <Dio_ReadPort+0x34>
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    85a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85ac:	4618      	mov	r0, r3
    85ae:	f000 f8d5 	bl	875c <Dio_Ipw_ReadPort>
    85b2:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    85b4:	9b03      	ldr	r3, [sp, #12]
}
    85b6:	4618      	mov	r0, r3
    85b8:	b005      	add	sp, #20
    85ba:	f85d fb04 	ldr.w	pc, [sp], #4

000085be <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    85be:	b500      	push	{lr}
    85c0:	b085      	sub	sp, #20
    85c2:	4603      	mov	r3, r0
    85c4:	9100      	str	r1, [sp, #0]
    85c6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);
    85ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85ce:	2103      	movs	r1, #3
    85d0:	4618      	mov	r0, r3
    85d2:	f7ff fe25 	bl	8220 <Dio_ValidatePortForWrite>
    85d6:	4603      	mov	r3, r0
    85d8:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    85dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85e0:	2b00      	cmp	r3, #0
    85e2:	d105      	bne.n	85f0 <Dio_WritePort+0x32>
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    85e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85e8:	9900      	ldr	r1, [sp, #0]
    85ea:	4618      	mov	r0, r3
    85ec:	f000 f8ce 	bl	878c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    85f0:	bf00      	nop
    85f2:	b005      	add	sp, #20
    85f4:	f85d fb04 	ldr.w	pc, [sp], #4

000085f8 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    85f8:	b500      	push	{lr}
    85fa:	b085      	sub	sp, #20
    85fc:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    85fe:	2300      	movs	r3, #0
    8600:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid;

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    Valid = Dio_ValidateChannelGroupForRead(ChannelGroupIdPtr, DIO_READCHANNELGROUP_ID);
    8602:	2104      	movs	r1, #4
    8604:	9801      	ldr	r0, [sp, #4]
    8606:	f7ff fee3 	bl	83d0 <Dio_ValidateChannelGroupForRead>
    860a:	4603      	mov	r3, r0
    860c:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType)E_OK == Valid)
    8610:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8614:	2b00      	cmp	r3, #0
    8616:	d103      	bne.n	8620 <Dio_ReadChannelGroup+0x28>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    8618:	9801      	ldr	r0, [sp, #4]
    861a:	f000 f8cf 	bl	87bc <Dio_Ipw_ReadChannelGroup>
    861e:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    8620:	9b03      	ldr	r3, [sp, #12]
}
    8622:	4618      	mov	r0, r3
    8624:	b005      	add	sp, #20
    8626:	f85d fb04 	ldr.w	pc, [sp], #4

0000862a <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    862a:	b500      	push	{lr}
    862c:	b085      	sub	sp, #20
    862e:	9001      	str	r0, [sp, #4]
    8630:	9100      	str	r1, [sp, #0]

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */

    Valid = Dio_ValidateChannelGroupForWrite(ChannelGroupIdPtr, DIO_WRITECHANNELGROUP_ID);
    8632:	2105      	movs	r1, #5
    8634:	9801      	ldr	r0, [sp, #4]
    8636:	f7ff fe87 	bl	8348 <Dio_ValidateChannelGroupForWrite>
    863a:	4603      	mov	r3, r0
    863c:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    8640:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8644:	2b00      	cmp	r3, #0
    8646:	d103      	bne.n	8650 <Dio_WriteChannelGroup+0x26>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    8648:	9900      	ldr	r1, [sp, #0]
    864a:	9801      	ldr	r0, [sp, #4]
    864c:	f000 f8d6 	bl	87fc <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    8650:	bf00      	nop
    8652:	b005      	add	sp, #20
    8654:	f85d fb04 	ldr.w	pc, [sp], #4

00008658 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    8658:	b500      	push	{lr}
    865a:	b087      	sub	sp, #28
    865c:	4603      	mov	r3, r0
    865e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    8662:	2300      	movs	r3, #0
    8664:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8668:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    866c:	095b      	lsrs	r3, r3, #5
    866e:	b29b      	uxth	r3, r3
    8670:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    8672:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8676:	f003 031f 	and.w	r3, r3, #31
    867a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    867c:	4a08      	ldr	r2, [pc, #32]	; (86a0 <Dio_Ipw_ReadChannel+0x48>)
    867e:	9b04      	ldr	r3, [sp, #16]
    8680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8684:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    8686:	9903      	ldr	r1, [sp, #12]
    8688:	9802      	ldr	r0, [sp, #8]
    868a:	f000 f940 	bl	890e <Gpio_Dio_Ip_ReadPin>
    868e:	4603      	mov	r3, r0
    8690:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    8694:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8698:	4618      	mov	r0, r3
    869a:	b007      	add	sp, #28
    869c:	f85d fb04 	ldr.w	pc, [sp], #4
    86a0:	1fff8b28 	.word	0x1fff8b28

000086a4 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    86a4:	b500      	push	{lr}
    86a6:	b087      	sub	sp, #28
    86a8:	4603      	mov	r3, r0
    86aa:	460a      	mov	r2, r1
    86ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    86b0:	4613      	mov	r3, r2
    86b2:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    86b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86ba:	095b      	lsrs	r3, r3, #5
    86bc:	b29b      	uxth	r3, r3
    86be:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    86c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86c4:	f003 031f 	and.w	r3, r3, #31
    86c8:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    86ca:	4a08      	ldr	r2, [pc, #32]	; (86ec <Dio_Ipw_WriteChannel+0x48>)
    86cc:	9b05      	ldr	r3, [sp, #20]
    86ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86d2:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    86d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86d8:	461a      	mov	r2, r3
    86da:	9904      	ldr	r1, [sp, #16]
    86dc:	9803      	ldr	r0, [sp, #12]
    86de:	f000 f8b7 	bl	8850 <Gpio_Dio_Ip_WritePin>
}
    86e2:	bf00      	nop
    86e4:	b007      	add	sp, #28
    86e6:	f85d fb04 	ldr.w	pc, [sp], #4
    86ea:	bf00      	nop
    86ec:	1fff8b28 	.word	0x1fff8b28

000086f0 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    86f0:	b500      	push	{lr}
    86f2:	b089      	sub	sp, #36	; 0x24
    86f4:	4603      	mov	r3, r0
    86f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    86fa:	2300      	movs	r3, #0
    86fc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8700:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8704:	095b      	lsrs	r3, r3, #5
    8706:	b29b      	uxth	r3, r3
    8708:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    870a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    870e:	f003 031f 	and.w	r3, r3, #31
    8712:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    8714:	4a10      	ldr	r2, [pc, #64]	; (8758 <Dio_Ipw_FlipChannel+0x68>)
    8716:	9b06      	ldr	r3, [sp, #24]
    8718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    871c:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    871e:	2201      	movs	r2, #1
    8720:	9b05      	ldr	r3, [sp, #20]
    8722:	fa02 f303 	lsl.w	r3, r2, r3
    8726:	4619      	mov	r1, r3
    8728:	9804      	ldr	r0, [sp, #16]
    872a:	f000 f8dc 	bl	88e6 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    872e:	9804      	ldr	r0, [sp, #16]
    8730:	f000 f8bc 	bl	88ac <Gpio_Dio_Ip_GetPinsOutput>
    8734:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    8736:	2201      	movs	r2, #1
    8738:	9b05      	ldr	r3, [sp, #20]
    873a:	409a      	lsls	r2, r3
    873c:	9b03      	ldr	r3, [sp, #12]
    873e:	401a      	ands	r2, r3
    8740:	9b05      	ldr	r3, [sp, #20]
    8742:	fa22 f303 	lsr.w	r3, r2, r3
    8746:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    874a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    874e:	4618      	mov	r0, r3
    8750:	b009      	add	sp, #36	; 0x24
    8752:	f85d fb04 	ldr.w	pc, [sp], #4
    8756:	bf00      	nop
    8758:	1fff8b28 	.word	0x1fff8b28

0000875c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    875c:	b500      	push	{lr}
    875e:	b085      	sub	sp, #20
    8760:	4603      	mov	r3, r0
    8762:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    8766:	2300      	movs	r3, #0
    8768:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    876a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    876e:	4a06      	ldr	r2, [pc, #24]	; (8788 <Dio_Ipw_ReadPort+0x2c>)
    8770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8774:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    8776:	9802      	ldr	r0, [sp, #8]
    8778:	f000 f8be 	bl	88f8 <Gpio_Dio_Ip_ReadPins>
    877c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    877e:	9b03      	ldr	r3, [sp, #12]
}
    8780:	4618      	mov	r0, r3
    8782:	b005      	add	sp, #20
    8784:	f85d fb04 	ldr.w	pc, [sp], #4
    8788:	1fff8b28 	.word	0x1fff8b28

0000878c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    878c:	b500      	push	{lr}
    878e:	b085      	sub	sp, #20
    8790:	4603      	mov	r3, r0
    8792:	9100      	str	r1, [sp, #0]
    8794:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    8798:	9b00      	ldr	r3, [sp, #0]
    879a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    879c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87a0:	4a05      	ldr	r2, [pc, #20]	; (87b8 <Dio_Ipw_WritePort+0x2c>)
    87a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87a6:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    87a8:	9903      	ldr	r1, [sp, #12]
    87aa:	9802      	ldr	r0, [sp, #8]
    87ac:	f000 f875 	bl	889a <Gpio_Dio_Ip_WritePins>
}
    87b0:	bf00      	nop
    87b2:	b005      	add	sp, #20
    87b4:	f85d fb04 	ldr.w	pc, [sp], #4
    87b8:	1fff8b28 	.word	0x1fff8b28

000087bc <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    87bc:	b500      	push	{lr}
    87be:	b087      	sub	sp, #28
    87c0:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    87c2:	2300      	movs	r3, #0
    87c4:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    87c6:	9b01      	ldr	r3, [sp, #4]
    87c8:	781b      	ldrb	r3, [r3, #0]
    87ca:	461a      	mov	r2, r3
    87cc:	4b0a      	ldr	r3, [pc, #40]	; (87f8 <Dio_Ipw_ReadChannelGroup+0x3c>)
    87ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    87d2:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    87d4:	9804      	ldr	r0, [sp, #16]
    87d6:	f000 f88f 	bl	88f8 <Gpio_Dio_Ip_ReadPins>
    87da:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    87dc:	9b01      	ldr	r3, [sp, #4]
    87de:	685a      	ldr	r2, [r3, #4]
    87e0:	9b03      	ldr	r3, [sp, #12]
    87e2:	4013      	ands	r3, r2
    87e4:	9a01      	ldr	r2, [sp, #4]
    87e6:	7852      	ldrb	r2, [r2, #1]
    87e8:	40d3      	lsrs	r3, r2
    87ea:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    87ec:	9b05      	ldr	r3, [sp, #20]
}
    87ee:	4618      	mov	r0, r3
    87f0:	b007      	add	sp, #28
    87f2:	f85d fb04 	ldr.w	pc, [sp], #4
    87f6:	bf00      	nop
    87f8:	1fff8b28 	.word	0x1fff8b28

000087fc <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    87fc:	b500      	push	{lr}
    87fe:	b087      	sub	sp, #28
    8800:	9001      	str	r0, [sp, #4]
    8802:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    8804:	9b01      	ldr	r3, [sp, #4]
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	461a      	mov	r2, r3
    880a:	4b10      	ldr	r3, [pc, #64]	; (884c <Dio_Ipw_WriteChannelGroup+0x50>)
    880c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8810:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    8812:	9b01      	ldr	r3, [sp, #4]
    8814:	785b      	ldrb	r3, [r3, #1]
    8816:	461a      	mov	r2, r3
    8818:	9b00      	ldr	r3, [sp, #0]
    881a:	fa03 f202 	lsl.w	r2, r3, r2
    881e:	9b01      	ldr	r3, [sp, #4]
    8820:	685b      	ldr	r3, [r3, #4]
    8822:	4013      	ands	r3, r2
    8824:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    8826:	9904      	ldr	r1, [sp, #16]
    8828:	9805      	ldr	r0, [sp, #20]
    882a:	f000 f84a 	bl	88c2 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    882e:	9b04      	ldr	r3, [sp, #16]
    8830:	43da      	mvns	r2, r3
    8832:	9b01      	ldr	r3, [sp, #4]
    8834:	685b      	ldr	r3, [r3, #4]
    8836:	4013      	ands	r3, r2
    8838:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    883a:	9903      	ldr	r1, [sp, #12]
    883c:	9805      	ldr	r0, [sp, #20]
    883e:	f000 f849 	bl	88d4 <Gpio_Dio_Ip_ClearPins>

}
    8842:	bf00      	nop
    8844:	b007      	add	sp, #28
    8846:	f85d fb04 	ldr.w	pc, [sp], #4
    884a:	bf00      	nop
    884c:	1fff8b28 	.word	0x1fff8b28

00008850 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    8850:	b500      	push	{lr}
    8852:	b087      	sub	sp, #28
    8854:	9003      	str	r0, [sp, #12]
    8856:	9102      	str	r1, [sp, #8]
    8858:	4613      	mov	r3, r2
    885a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    885e:	f00c fdb7 	bl	153d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    8862:	9b03      	ldr	r3, [sp, #12]
    8864:	681b      	ldr	r3, [r3, #0]
    8866:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    8868:	2201      	movs	r2, #1
    886a:	9b02      	ldr	r3, [sp, #8]
    886c:	fa02 f303 	lsl.w	r3, r2, r3
    8870:	43db      	mvns	r3, r3
    8872:	9a05      	ldr	r2, [sp, #20]
    8874:	4013      	ands	r3, r2
    8876:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    8878:	f89d 2007 	ldrb.w	r2, [sp, #7]
    887c:	9b02      	ldr	r3, [sp, #8]
    887e:	fa02 f303 	lsl.w	r3, r2, r3
    8882:	9a05      	ldr	r2, [sp, #20]
    8884:	4313      	orrs	r3, r2
    8886:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    8888:	9b03      	ldr	r3, [sp, #12]
    888a:	9a05      	ldr	r2, [sp, #20]
    888c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    888e:	f00c fdcb 	bl	15428 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    8892:	bf00      	nop
    8894:	b007      	add	sp, #28
    8896:	f85d fb04 	ldr.w	pc, [sp], #4

0000889a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    889a:	b082      	sub	sp, #8
    889c:	9001      	str	r0, [sp, #4]
    889e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    88a0:	9b01      	ldr	r3, [sp, #4]
    88a2:	9a00      	ldr	r2, [sp, #0]
    88a4:	601a      	str	r2, [r3, #0]
}
    88a6:	bf00      	nop
    88a8:	b002      	add	sp, #8
    88aa:	4770      	bx	lr

000088ac <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    88ac:	b084      	sub	sp, #16
    88ae:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    88b0:	2300      	movs	r3, #0
    88b2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    88b4:	9b01      	ldr	r3, [sp, #4]
    88b6:	681b      	ldr	r3, [r3, #0]
    88b8:	9303      	str	r3, [sp, #12]
    return returnValue;
    88ba:	9b03      	ldr	r3, [sp, #12]
}
    88bc:	4618      	mov	r0, r3
    88be:	b004      	add	sp, #16
    88c0:	4770      	bx	lr

000088c2 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    88c2:	b082      	sub	sp, #8
    88c4:	9001      	str	r0, [sp, #4]
    88c6:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    88c8:	9b01      	ldr	r3, [sp, #4]
    88ca:	9a00      	ldr	r2, [sp, #0]
    88cc:	605a      	str	r2, [r3, #4]
}
    88ce:	bf00      	nop
    88d0:	b002      	add	sp, #8
    88d2:	4770      	bx	lr

000088d4 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    88d4:	b082      	sub	sp, #8
    88d6:	9001      	str	r0, [sp, #4]
    88d8:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    88da:	9b01      	ldr	r3, [sp, #4]
    88dc:	9a00      	ldr	r2, [sp, #0]
    88de:	609a      	str	r2, [r3, #8]
}
    88e0:	bf00      	nop
    88e2:	b002      	add	sp, #8
    88e4:	4770      	bx	lr

000088e6 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    88e6:	b082      	sub	sp, #8
    88e8:	9001      	str	r0, [sp, #4]
    88ea:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    88ec:	9b01      	ldr	r3, [sp, #4]
    88ee:	9a00      	ldr	r2, [sp, #0]
    88f0:	60da      	str	r2, [r3, #12]
}
    88f2:	bf00      	nop
    88f4:	b002      	add	sp, #8
    88f6:	4770      	bx	lr

000088f8 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    88f8:	b084      	sub	sp, #16
    88fa:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    88fc:	2300      	movs	r3, #0
    88fe:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    8900:	9b01      	ldr	r3, [sp, #4]
    8902:	691b      	ldr	r3, [r3, #16]
    8904:	9303      	str	r3, [sp, #12]
    return returnValue;
    8906:	9b03      	ldr	r3, [sp, #12]
}
    8908:	4618      	mov	r0, r3
    890a:	b004      	add	sp, #16
    890c:	4770      	bx	lr

0000890e <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    890e:	b084      	sub	sp, #16
    8910:	9001      	str	r0, [sp, #4]
    8912:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    8914:	2300      	movs	r3, #0
    8916:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    891a:	9b01      	ldr	r3, [sp, #4]
    891c:	691a      	ldr	r2, [r3, #16]
    891e:	2101      	movs	r1, #1
    8920:	9b00      	ldr	r3, [sp, #0]
    8922:	fa01 f303 	lsl.w	r3, r1, r3
    8926:	401a      	ands	r2, r3
    8928:	9b00      	ldr	r3, [sp, #0]
    892a:	fa22 f303 	lsr.w	r3, r2, r3
    892e:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    8932:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8936:	4618      	mov	r0, r3
    8938:	b004      	add	sp, #16
    893a:	4770      	bx	lr

0000893c <Adc_ReportDetError>:
* @return     void
* SWS_Adc_00377
*/
static inline void Adc_ReportDetError(uint8 ServiceId,
                                      uint8 ErrorId)
{
    893c:	b500      	push	{lr}
    893e:	b083      	sub	sp, #12
    8940:	4603      	mov	r3, r0
    8942:	460a      	mov	r2, r1
    8944:	f88d 3007 	strb.w	r3, [sp, #7]
    8948:	4613      	mov	r3, r2
    894a:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    894e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8952:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8956:	2100      	movs	r1, #0
    8958:	207b      	movs	r0, #123	; 0x7b
    895a:	f010 f969 	bl	18c30 <Det_ReportError>
}
    895e:	bf00      	nop
    8960:	b003      	add	sp, #12
    8962:	f85d fb04 	ldr.w	pc, [sp], #4

00008966 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    8966:	b500      	push	{lr}
    8968:	b083      	sub	sp, #12
    896a:	4603      	mov	r3, r0
    896c:	460a      	mov	r2, r1
    896e:	f88d 3007 	strb.w	r3, [sp, #7]
    8972:	4613      	mov	r3, r2
    8974:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    8978:	f89d 3006 	ldrb.w	r3, [sp, #6]
    897c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8980:	2100      	movs	r1, #0
    8982:	207b      	movs	r0, #123	; 0x7b
    8984:	f010 f9b8 	bl	18cf8 <Det_ReportRuntimeError>
}
    8988:	bf00      	nop
    898a:	b003      	add	sp, #12
    898c:	f85d fb04 	ldr.w	pc, [sp], #4

00008990 <Adc_ReportValidationError>:
* @return     void
*/
static void Adc_ReportValidationError(Adc_ValidationResultType * Result,
                                      uint8 ServiceId,
                                      uint8 ErrorId)
{
    8990:	b500      	push	{lr}
    8992:	b083      	sub	sp, #12
    8994:	9001      	str	r0, [sp, #4]
    8996:	460b      	mov	r3, r1
    8998:	f88d 3003 	strb.w	r3, [sp, #3]
    899c:	4613      	mov	r3, r2
    899e:	f88d 3002 	strb.w	r3, [sp, #2]
    Result->EndValidations = TRUE;
    89a2:	9b01      	ldr	r3, [sp, #4]
    89a4:	2201      	movs	r2, #1
    89a6:	701a      	strb	r2, [r3, #0]
    Result->ValidParams = (Std_ReturnType)E_NOT_OK;
    89a8:	9b01      	ldr	r3, [sp, #4]
    89aa:	2201      	movs	r2, #1
    89ac:	705a      	strb	r2, [r3, #1]

    Adc_ReportDetError(ServiceId, ErrorId);
    89ae:	f89d 2002 	ldrb.w	r2, [sp, #2]
    89b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    89b6:	4611      	mov	r1, r2
    89b8:	4618      	mov	r0, r3
    89ba:	f7ff ffbf 	bl	893c <Adc_ReportDetError>
}
    89be:	bf00      	nop
    89c0:	b003      	add	sp, #12
    89c2:	f85d fb04 	ldr.w	pc, [sp], #4

000089c6 <Adc_ValidateGloballCall>:
* @implements  Adc_ValidateGlobalCall_Activity
*
*/
static inline Std_ReturnType Adc_ValidateGloballCall(uint8 ServiceId,
                                                     uint8 CoreId)
{
    89c6:	b500      	push	{lr}
    89c8:	b085      	sub	sp, #20
    89ca:	4603      	mov	r3, r0
    89cc:	460a      	mov	r2, r1
    89ce:	f88d 3007 	strb.w	r3, [sp, #7]
    89d2:	4613      	mov	r3, r2
    89d4:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    89d8:	2301      	movs	r3, #1
    89da:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_STATE_UNINIT == Adc_aeGlobalState[CoreId])
    89de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    89e2:	4a14      	ldr	r2, [pc, #80]	; (8a34 <Adc_ValidateGloballCall+0x6e>)
    89e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e8:	2b00      	cmp	r3, #0
    89ea:	d10e      	bne.n	8a0a <Adc_ValidateGloballCall+0x44>
    {
        if (ADC_INIT_ID == ServiceId)
    89ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89f0:	2b00      	cmp	r3, #0
    89f2:	d103      	bne.n	89fc <Adc_ValidateGloballCall+0x36>
        {
            ValidState = (Std_ReturnType)E_OK;
    89f4:	2300      	movs	r3, #0
    89f6:	f88d 300f 	strb.w	r3, [sp, #15]
    89fa:	e014      	b.n	8a26 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            /* SWS_Adc_00154 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    89fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a00:	210a      	movs	r1, #10
    8a02:	4618      	mov	r0, r3
    8a04:	f7ff ff9a 	bl	893c <Adc_ReportDetError>
    8a08:	e00d      	b.n	8a26 <Adc_ValidateGloballCall+0x60>
        }
    }
    else
    {
        if (ADC_INIT_ID == ServiceId)
    8a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a0e:	2b00      	cmp	r3, #0
    8a10:	d106      	bne.n	8a20 <Adc_ValidateGloballCall+0x5a>
        {
            /* Error: ADC already initialized */
            /* SWS_Adc_00107 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_ALREADY_INITIALIZED);
    8a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a16:	210d      	movs	r1, #13
    8a18:	4618      	mov	r0, r3
    8a1a:	f7ff ff8f 	bl	893c <Adc_ReportDetError>
    8a1e:	e002      	b.n	8a26 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            ValidState = (Std_ReturnType)E_OK;
    8a20:	2300      	movs	r3, #0
    8a22:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return ValidState;
    8a26:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a2a:	4618      	mov	r0, r3
    8a2c:	b005      	add	sp, #20
    8a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a32:	bf00      	nop
    8a34:	1fff8d44 	.word	0x1fff8d44

00008a38 <Adc_ValidatePtrInit>:
*
* @note       Non Reentrant function.
*
*/
static inline Std_ReturnType Adc_ValidatePtrInit(const Adc_ConfigType * ConfigPtr)
{
    8a38:	b500      	push	{lr}
    8a3a:	b085      	sub	sp, #20
    8a3c:	9001      	str	r0, [sp, #4]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8a3e:	2300      	movs	r3, #0
    8a40:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
    /* ADC344 */
    if (NULL_PTR != ConfigPtr)
#else
    /* ADC343 */
    if (NULL_PTR == ConfigPtr)
    8a44:	9b01      	ldr	r3, [sp, #4]
    8a46:	2b00      	cmp	r3, #0
    8a48:	d106      	bne.n	8a58 <Adc_ValidatePtrInit+0x20>
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8a4a:	2301      	movs	r3, #1
    8a4c:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8) ADC_E_PARAM_POINTER);
    8a50:	2114      	movs	r1, #20
    8a52:	2000      	movs	r0, #0
    8a54:	f7ff ff72 	bl	893c <Adc_ReportDetError>
    }
    return ValidPtr;
    8a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a5c:	4618      	mov	r0, r3
    8a5e:	b005      	add	sp, #20
    8a60:	f85d fb04 	ldr.w	pc, [sp], #4

00008a64 <Adc_ValidatePtr>:
* @note       ...
* ADC_VALUEREADGROUP_ID
*/
static inline Std_ReturnType Adc_ValidatePtr(uint8 ServiceId,
                                             const void * PtrVal)
{
    8a64:	b500      	push	{lr}
    8a66:	b085      	sub	sp, #20
    8a68:	4603      	mov	r3, r0
    8a6a:	9100      	str	r1, [sp, #0]
    8a6c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8a70:	2300      	movs	r3, #0
    8a72:	f88d 300f 	strb.w	r3, [sp, #15]

    /* SWS_Adc_00458, SWS_Adc_00457, CPR_RTD_00264.adc */
    if (NULL_PTR == PtrVal)
    8a76:	9b00      	ldr	r3, [sp, #0]
    8a78:	2b00      	cmp	r3, #0
    8a7a:	d108      	bne.n	8a8e <Adc_ValidatePtr+0x2a>
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8a7c:	2301      	movs	r3, #1
    8a7e:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_POINTER);
    8a82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a86:	2114      	movs	r1, #20
    8a88:	4618      	mov	r0, r3
    8a8a:	f7ff ff57 	bl	893c <Adc_ReportDetError>
    }

    return ValidPtr;
    8a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a92:	4618      	mov	r0, r3
    8a94:	b005      	add	sp, #20
    8a96:	f85d fb04 	ldr.w	pc, [sp], #4

00008a9a <Adc_ValidateBufferUninit>:

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
static inline void Adc_ValidateBufferUninit(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group)
{
    8a9a:	b500      	push	{lr}
    8a9c:	b083      	sub	sp, #12
    8a9e:	9001      	str	r0, [sp, #4]
    8aa0:	460b      	mov	r3, r1
    8aa2:	f88d 3003 	strb.w	r3, [sp, #3]
    8aa6:	4613      	mov	r3, r2
    8aa8:	f8ad 3000 	strh.w	r3, [sp]
    switch (ServiceId)
    8aac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ab0:	2b02      	cmp	r3, #2
    8ab2:	d113      	bne.n	8adc <Adc_ValidateBufferUninit+0x42>
#if (ADC_HW_TRIGGER_API == STD_ON)
        /* fall-through */
        case ADC_ENABLEHARDWARETRIGGER_ID:
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        {
            if (NULL_PTR == Adc_axGroupStatus[Group].ResultsBufferPtr)
    8ab4:	f8bd 2000 	ldrh.w	r2, [sp]
    8ab8:	490c      	ldr	r1, [pc, #48]	; (8aec <Adc_ValidateBufferUninit+0x52>)
    8aba:	4613      	mov	r3, r2
    8abc:	009b      	lsls	r3, r3, #2
    8abe:	4413      	add	r3, r2
    8ac0:	009b      	lsls	r3, r3, #2
    8ac2:	440b      	add	r3, r1
    8ac4:	330c      	adds	r3, #12
    8ac6:	681b      	ldr	r3, [r3, #0]
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d109      	bne.n	8ae0 <Adc_ValidateBufferUninit+0x46>
            {
                /* SWS_Adc_00425, SWS_Adc_00424 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_BUFFER_UNINIT);
    8acc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ad0:	2219      	movs	r2, #25
    8ad2:	4619      	mov	r1, r3
    8ad4:	9801      	ldr	r0, [sp, #4]
    8ad6:	f7ff ff5b 	bl	8990 <Adc_ReportValidationError>
            }
            break;
    8ada:	e001      	b.n	8ae0 <Adc_ValidateBufferUninit+0x46>
        }
        default:
        {
            ; /* no-op */
            break;
    8adc:	bf00      	nop
    8ade:	e000      	b.n	8ae2 <Adc_ValidateBufferUninit+0x48>
            break;
    8ae0:	bf00      	nop
        }
    }
}
    8ae2:	bf00      	nop
    8ae4:	b003      	add	sp, #12
    8ae6:	f85d fb04 	ldr.w	pc, [sp], #4
    8aea:	bf00      	nop
    8aec:	1fff8d48 	.word	0x1fff8d48

00008af0 <Adc_ValidateTriggerSrc>:
    )
static inline void Adc_ValidateTriggerSrc(Adc_ValidationResultType * ReturnValue,
                                          uint8 ServiceId,
                                          Adc_GroupType Group,
                                          uint8 CoreId)
{
    8af0:	b500      	push	{lr}
    8af2:	b085      	sub	sp, #20
    8af4:	9001      	str	r0, [sp, #4]
    8af6:	4608      	mov	r0, r1
    8af8:	4611      	mov	r1, r2
    8afa:	461a      	mov	r2, r3
    8afc:	4603      	mov	r3, r0
    8afe:	f88d 3003 	strb.w	r3, [sp, #3]
    8b02:	460b      	mov	r3, r1
    8b04:	f8ad 3000 	strh.w	r3, [sp]
    8b08:	4613      	mov	r3, r2
    8b0a:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Get the mapping index of group in the current partition */
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b0e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b12:	4a17      	ldr	r2, [pc, #92]	; (8b70 <Adc_ValidateTriggerSrc+0x80>)
    8b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b18:	68da      	ldr	r2, [r3, #12]
    8b1a:	f8bd 3000 	ldrh.w	r3, [sp]
    8b1e:	005b      	lsls	r3, r3, #1
    8b20:	4413      	add	r3, r2
    8b22:	881b      	ldrh	r3, [r3, #0]
    8b24:	f8ad 300e 	strh.w	r3, [sp, #14]

    switch (ServiceId)
    8b28:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b2c:	3b02      	subs	r3, #2
    8b2e:	2b01      	cmp	r3, #1
    8b30:	d816      	bhi.n	8b60 <Adc_ValidateTriggerSrc+0x70>
#if (ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON)
        case ADC_ENABLE_CHANNEL_ID:
        case ADC_DISABLE_CHANNEL_ID:
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */
        {
            if (ADC_TRIGG_SRC_SW != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8b32:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b36:	4a0e      	ldr	r2, [pc, #56]	; (8b70 <Adc_ValidateTriggerSrc+0x80>)
    8b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b3c:	685a      	ldr	r2, [r3, #4]
    8b3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8b42:	2134      	movs	r1, #52	; 0x34
    8b44:	fb01 f303 	mul.w	r3, r1, r3
    8b48:	4413      	add	r3, r2
    8b4a:	695b      	ldr	r3, [r3, #20]
    8b4c:	2b00      	cmp	r3, #0
    8b4e:	d009      	beq.n	8b64 <Adc_ValidateTriggerSrc+0x74>
            {
                /* SWS_Adc_00164, SWS_Adc_00133 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_WRONG_TRIGG_SRC);
    8b50:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b54:	2217      	movs	r2, #23
    8b56:	4619      	mov	r1, r3
    8b58:	9801      	ldr	r0, [sp, #4]
    8b5a:	f7ff ff19 	bl	8990 <Adc_ReportValidationError>
            }
            break;
    8b5e:	e001      	b.n	8b64 <Adc_ValidateTriggerSrc+0x74>
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        default:
        {
            ; /* no-op */
            break;
    8b60:	bf00      	nop
    8b62:	e000      	b.n	8b66 <Adc_ValidateTriggerSrc+0x76>
            break;
    8b64:	bf00      	nop
        }
    }
}
    8b66:	bf00      	nop
    8b68:	b005      	add	sp, #20
    8b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    8b6e:	bf00      	nop
    8b70:	1fff8d40 	.word	0x1fff8d40

00008b74 <Adc_ValidateQueueNotFull>:
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
static inline void Adc_ValidateQueueNotFull(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group,
                                            uint8 CoreId)
{
    8b74:	b500      	push	{lr}
    8b76:	b085      	sub	sp, #20
    8b78:	9001      	str	r0, [sp, #4]
    8b7a:	4608      	mov	r0, r1
    8b7c:	4611      	mov	r1, r2
    8b7e:	461a      	mov	r2, r3
    8b80:	4603      	mov	r3, r0
    8b82:	f88d 3003 	strb.w	r3, [sp, #3]
    8b86:	460b      	mov	r3, r1
    8b88:	f8ad 3000 	strh.w	r3, [sp]
    8b8c:	4613      	mov	r3, r2
    8b8e:	f88d 3002 	strb.w	r3, [sp, #2]
    Adc_GroupType GroupIndex;
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8b92:	2300      	movs	r3, #0
    8b94:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b98:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b9c:	4a21      	ldr	r2, [pc, #132]	; (8c24 <Adc_ValidateQueueNotFull+0xb0>)
    8b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ba2:	68da      	ldr	r2, [r3, #12]
    8ba4:	f8bd 3000 	ldrh.w	r3, [sp]
    8ba8:	005b      	lsls	r3, r3, #1
    8baa:	4413      	add	r3, r2
    8bac:	881b      	ldrh	r3, [r3, #0]
    8bae:	f8ad 300c 	strh.w	r3, [sp, #12]
    LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8bb2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8bb6:	4a1b      	ldr	r2, [pc, #108]	; (8c24 <Adc_ValidateQueueNotFull+0xb0>)
    8bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bbc:	685a      	ldr	r2, [r3, #4]
    8bbe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8bc2:	2134      	movs	r1, #52	; 0x34
    8bc4:	fb01 f303 	mul.w	r3, r1, r3
    8bc8:	4413      	add	r3, r2
    8bca:	789b      	ldrb	r3, [r3, #2]
    8bcc:	f88d 300f 	strb.w	r3, [sp, #15]

    switch (ServiceId)
    8bd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8bd4:	2b02      	cmp	r3, #2
    8bd6:	d11e      	bne.n	8c16 <Adc_ValidateQueueNotFull+0xa2>
    {
        case ADC_STARTGROUPCONVERSION_ID:
        {
            if (ADC_CONV_TYPE_NORMAL == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Type)
    8bd8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8bdc:	4a11      	ldr	r2, [pc, #68]	; (8c24 <Adc_ValidateQueueNotFull+0xb0>)
    8bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be2:	685a      	ldr	r2, [r3, #4]
    8be4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8be8:	2134      	movs	r1, #52	; 0x34
    8bea:	fb01 f303 	mul.w	r3, r1, r3
    8bee:	4413      	add	r3, r2
    8bf0:	68db      	ldr	r3, [r3, #12]
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d111      	bne.n	8c1a <Adc_ValidateQueueNotFull+0xa6>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex >= ADC_QUEUE_MAX_DEPTH_MAX)
    8bf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bfa:	4a0b      	ldr	r2, [pc, #44]	; (8c28 <Adc_ValidateQueueNotFull+0xb4>)
    8bfc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8c00:	b29b      	uxth	r3, r3
    8c02:	2b01      	cmp	r3, #1
    8c04:	d909      	bls.n	8c1a <Adc_ValidateQueueNotFull+0xa6>
                {
                    Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_QUEUE_FULL);
    8c06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c0a:	2220      	movs	r2, #32
    8c0c:	4619      	mov	r1, r3
    8c0e:	9801      	ldr	r0, [sp, #4]
    8c10:	f7ff febe 	bl	8990 <Adc_ReportValidationError>
                }
            }
            break;
    8c14:	e001      	b.n	8c1a <Adc_ValidateQueueNotFull+0xa6>
        }

        default:
        {
            ; /* no-op */
            break;
    8c16:	bf00      	nop
    8c18:	e000      	b.n	8c1c <Adc_ValidateQueueNotFull+0xa8>
            break;
    8c1a:	bf00      	nop
        }
    }
}
    8c1c:	bf00      	nop
    8c1e:	b005      	add	sp, #20
    8c20:	f85d fb04 	ldr.w	pc, [sp], #4
    8c24:	1fff8d40 	.word	0x1fff8d40
    8c28:	1fff8d70 	.word	0x1fff8d70

00008c2c <Adc_ValidateExtraParams>:
    )
static inline Std_ReturnType Adc_ValidateExtraParams(uint8 ServiceId,
                                                     uint32 ErrorIdList,
                                                     Adc_GroupType Group,
                                                     uint8 CoreId)
{
    8c2c:	b500      	push	{lr}
    8c2e:	b085      	sub	sp, #20
    8c30:	9100      	str	r1, [sp, #0]
    8c32:	4611      	mov	r1, r2
    8c34:	461a      	mov	r2, r3
    8c36:	4603      	mov	r3, r0
    8c38:	f88d 3007 	strb.w	r3, [sp, #7]
    8c3c:	460b      	mov	r3, r1
    8c3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    8c42:	4613      	mov	r3, r2
    8c44:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ValidationResultType ValidationStatus;

    ValidationStatus.EndValidations = FALSE;
    8c48:	2300      	movs	r3, #0
    8c4a:	f88d 300c 	strb.w	r3, [sp, #12]
    ValidationStatus.ValidParams = (Std_ReturnType)E_OK;
    8c4e:	2300      	movs	r3, #0
    8c50:	f88d 300d 	strb.w	r3, [sp, #13]

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
    if ((0U != (ErrorIdList&ADC_E_BUFFER_UNINIT_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8c54:	9b00      	ldr	r3, [sp, #0]
    8c56:	f003 0301 	and.w	r3, r3, #1
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d00e      	beq.n	8c7c <Adc_ValidateExtraParams+0x50>
    8c5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8c62:	f083 0301 	eor.w	r3, r3, #1
    8c66:	b2db      	uxtb	r3, r3
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d007      	beq.n	8c7c <Adc_ValidateExtraParams+0x50>
    {
        Adc_ValidateBufferUninit(&ValidationStatus, ServiceId, Group);
    8c6c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8c70:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c74:	ab03      	add	r3, sp, #12
    8c76:	4618      	mov	r0, r3
    8c78:	f7ff ff0f 	bl	8a9a <Adc_ValidateBufferUninit>
    }
#endif
    if ((0U != (ErrorIdList&ADC_E_WRONG_TRIGG_SRC_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8c7c:	9b00      	ldr	r3, [sp, #0]
    8c7e:	f003 0302 	and.w	r3, r3, #2
    8c82:	2b00      	cmp	r3, #0
    8c84:	d00f      	beq.n	8ca6 <Adc_ValidateExtraParams+0x7a>
    8c86:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8c8a:	f083 0301 	eor.w	r3, r3, #1
    8c8e:	b2db      	uxtb	r3, r3
    8c90:	2b00      	cmp	r3, #0
    8c92:	d008      	beq.n	8ca6 <Adc_ValidateExtraParams+0x7a>
    {
       Adc_ValidateTriggerSrc(&ValidationStatus, ServiceId, Group, CoreId);
    8c94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c98:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8c9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8ca0:	a803      	add	r0, sp, #12
    8ca2:	f7ff ff25 	bl	8af0 <Adc_ValidateTriggerSrc>
    }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if ((0U != (ErrorIdList&ADC_E_QUEUE_FULL_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8ca6:	9b00      	ldr	r3, [sp, #0]
    8ca8:	f003 0304 	and.w	r3, r3, #4
    8cac:	2b00      	cmp	r3, #0
    8cae:	d00f      	beq.n	8cd0 <Adc_ValidateExtraParams+0xa4>
    8cb0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8cb4:	f083 0301 	eor.w	r3, r3, #1
    8cb8:	b2db      	uxtb	r3, r3
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d008      	beq.n	8cd0 <Adc_ValidateExtraParams+0xa4>
    {
        Adc_ValidateQueueNotFull(&ValidationStatus, ServiceId, Group, CoreId);
    8cbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8cc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8cc6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8cca:	a803      	add	r0, sp, #12
    8ccc:	f7ff ff52 	bl	8b74 <Adc_ValidateQueueNotFull>
    {
        Adc_ValidateEnableDisbleGroupList(&ValidationStatus, ServiceId, Group, CoreId);
    }
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */

    return ValidationStatus.ValidParams;
    8cd0:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    8cd4:	4618      	mov	r0, r3
    8cd6:	b005      	add	sp, #20
    8cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00008cdc <Adc_EndValidateGloballCall>:
* @return void
*/
static inline void Adc_EndValidateGloballCall(Std_ReturnType ValidCall,
                                              uint8 ServiceId,
                                              uint8 CoreId)
{
    8cdc:	b082      	sub	sp, #8
    8cde:	4603      	mov	r3, r0
    8ce0:	f88d 3007 	strb.w	r3, [sp, #7]
    8ce4:	460b      	mov	r3, r1
    8ce6:	f88d 3006 	strb.w	r3, [sp, #6]
    8cea:	4613      	mov	r3, r2
    8cec:	f88d 3005 	strb.w	r3, [sp, #5]
    if ((Std_ReturnType)E_OK == ValidCall)
    8cf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d110      	bne.n	8d1a <Adc_EndValidateGloballCall+0x3e>
    {
        if (ADC_DEINIT_ID == ServiceId)
    8cf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8cfc:	2b01      	cmp	r3, #1
    8cfe:	d106      	bne.n	8d0e <Adc_EndValidateGloballCall+0x32>
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_UNINIT;
    8d00:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8d04:	4a06      	ldr	r2, [pc, #24]	; (8d20 <Adc_EndValidateGloballCall+0x44>)
    8d06:	2100      	movs	r1, #0
    8d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        else
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
        }
    }
}
    8d0c:	e005      	b.n	8d1a <Adc_EndValidateGloballCall+0x3e>
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
    8d0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8d12:	4a03      	ldr	r2, [pc, #12]	; (8d20 <Adc_EndValidateGloballCall+0x44>)
    8d14:	2102      	movs	r1, #2
    8d16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    8d1a:	bf00      	nop
    8d1c:	b002      	add	sp, #8
    8d1e:	4770      	bx	lr
    8d20:	1fff8d44 	.word	0x1fff8d44

00008d24 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    8d24:	b500      	push	{lr}
    8d26:	b085      	sub	sp, #20
    8d28:	4603      	mov	r3, r0
    8d2a:	460a      	mov	r2, r1
    8d2c:	f88d 3007 	strb.w	r3, [sp, #7]
    8d30:	4613      	mov	r3, r2
    8d32:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8d36:	2300      	movs	r3, #0
    8d38:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d40:	4a0b      	ldr	r2, [pc, #44]	; (8d70 <Adc_ValidateNotBusyNoQueue+0x4c>)
    8d42:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8d46:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    8d4a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d008      	beq.n	8d64 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8d52:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d56:	210b      	movs	r1, #11
    8d58:	4618      	mov	r0, r3
    8d5a:	f7ff fe04 	bl	8966 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    8d5e:	2301      	movs	r3, #1
    8d60:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    8d64:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8d68:	4618      	mov	r0, r3
    8d6a:	b005      	add	sp, #20
    8d6c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d70:	1fff8d70 	.word	0x1fff8d70

00008d74 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    8d74:	b500      	push	{lr}
    8d76:	b085      	sub	sp, #20
    8d78:	4603      	mov	r3, r0
    8d7a:	f8ad 3006 	strh.w	r3, [sp, #6]
    8d7e:	460b      	mov	r3, r1
    8d80:	f88d 3005 	strb.w	r3, [sp, #5]
    8d84:	4613      	mov	r3, r2
    8d86:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8d8a:	2301      	movs	r3, #1
    8d8c:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    8d90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8d94:	4917      	ldr	r1, [pc, #92]	; (8df4 <Adc_ValidateNotBusyNoPrio+0x80>)
    8d96:	4613      	mov	r3, r2
    8d98:	009b      	lsls	r3, r3, #2
    8d9a:	4413      	add	r3, r2
    8d9c:	009b      	lsls	r3, r3, #2
    8d9e:	440b      	add	r3, r1
    8da0:	681b      	ldr	r3, [r3, #0]
    8da2:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    8da4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8da8:	f083 0301 	eor.w	r3, r3, #1
    8dac:	b2db      	uxtb	r3, r3
    8dae:	2b00      	cmp	r3, #0
    8db0:	d007      	beq.n	8dc2 <Adc_ValidateNotBusyNoPrio+0x4e>
    8db2:	9b02      	ldr	r3, [sp, #8]
    8db4:	2b00      	cmp	r3, #0
    8db6:	d004      	beq.n	8dc2 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8db8:	210b      	movs	r1, #11
    8dba:	2002      	movs	r0, #2
    8dbc:	f7ff fdd3 	bl	8966 <Adc_ReportDetRuntimeError>
    8dc0:	e011      	b.n	8de6 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    8dc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d00a      	beq.n	8de0 <Adc_ValidateNotBusyNoPrio+0x6c>
    8dca:	9b02      	ldr	r3, [sp, #8]
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d007      	beq.n	8de0 <Adc_ValidateNotBusyNoPrio+0x6c>
    8dd0:	9b02      	ldr	r3, [sp, #8]
    8dd2:	2b03      	cmp	r3, #3
    8dd4:	d004      	beq.n	8de0 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8dd6:	210b      	movs	r1, #11
    8dd8:	2002      	movs	r0, #2
    8dda:	f7ff fdc4 	bl	8966 <Adc_ReportDetRuntimeError>
    8dde:	e002      	b.n	8de6 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    8de0:	2300      	movs	r3, #0
    8de2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    8de6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8dea:	4618      	mov	r0, r3
    8dec:	b005      	add	sp, #20
    8dee:	f85d fb04 	ldr.w	pc, [sp], #4
    8df2:	bf00      	nop
    8df4:	1fff8d48 	.word	0x1fff8d48

00008df8 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    8df8:	b500      	push	{lr}
    8dfa:	b087      	sub	sp, #28
    8dfc:	4603      	mov	r3, r0
    8dfe:	460a      	mov	r2, r1
    8e00:	f88d 3007 	strb.w	r3, [sp, #7]
    8e04:	4613      	mov	r3, r2
    8e06:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8e0a:	2300      	movs	r3, #0
    8e0c:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    8e10:	2300      	movs	r3, #0
    8e12:	f8ad 3016 	strh.w	r3, [sp, #22]
    8e16:	e02c      	b.n	8e72 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    8e18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e1c:	4a1d      	ldr	r2, [pc, #116]	; (8e94 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    8e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e22:	685a      	ldr	r2, [r3, #4]
    8e24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8e28:	2134      	movs	r1, #52	; 0x34
    8e2a:	fb01 f303 	mul.w	r3, r1, r3
    8e2e:	4413      	add	r3, r2
    8e30:	881b      	ldrh	r3, [r3, #0]
    8e32:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    8e36:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    8e3a:	4917      	ldr	r1, [pc, #92]	; (8e98 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    8e3c:	4613      	mov	r3, r2
    8e3e:	009b      	lsls	r3, r3, #2
    8e40:	4413      	add	r3, r2
    8e42:	009b      	lsls	r3, r3, #2
    8e44:	440b      	add	r3, r1
    8e46:	681b      	ldr	r3, [r3, #0]
    8e48:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    8e4a:	9b03      	ldr	r3, [sp, #12]
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d00b      	beq.n	8e68 <Adc_ValidateCheckGroupNotConversion+0x70>
    8e50:	9b03      	ldr	r3, [sp, #12]
    8e52:	2b03      	cmp	r3, #3
    8e54:	d008      	beq.n	8e68 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8e56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e5a:	210b      	movs	r1, #11
    8e5c:	4618      	mov	r0, r3
    8e5e:	f7ff fd82 	bl	8966 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    8e62:	2301      	movs	r3, #1
    8e64:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    8e68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8e6c:	3301      	adds	r3, #1
    8e6e:	f8ad 3016 	strh.w	r3, [sp, #22]
    8e72:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e76:	4a07      	ldr	r2, [pc, #28]	; (8e94 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    8e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e7c:	891b      	ldrh	r3, [r3, #8]
    8e7e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8e82:	429a      	cmp	r2, r3
    8e84:	d3c8      	bcc.n	8e18 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    8e86:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    8e8a:	4618      	mov	r0, r3
    8e8c:	b007      	add	sp, #28
    8e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    8e92:	bf00      	nop
    8e94:	1fff8d40 	.word	0x1fff8d40
    8e98:	1fff8d48 	.word	0x1fff8d48

00008e9c <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    8e9c:	b500      	push	{lr}
    8e9e:	b085      	sub	sp, #20
    8ea0:	4603      	mov	r3, r0
    8ea2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8ea6:	2300      	movs	r3, #0
    8ea8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8eac:	2301      	movs	r3, #1
    8eae:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8eb2:	2300      	movs	r3, #0
    8eb4:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8eb8:	2300      	movs	r3, #0
    8eba:	f88d 300d 	strb.w	r3, [sp, #13]
    8ebe:	e01d      	b.n	8efc <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    8ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ec4:	4a1b      	ldr	r2, [pc, #108]	; (8f34 <Adc_ValidateDeInitNotBusy+0x98>)
    8ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eca:	681a      	ldr	r2, [r3, #0]
    8ecc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8ed0:	4413      	add	r3, r2
    8ed2:	7f9b      	ldrb	r3, [r3, #30]
    8ed4:	2b01      	cmp	r3, #1
    8ed6:	d10c      	bne.n	8ef2 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    8ed8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8edc:	2101      	movs	r1, #1
    8ede:	4618      	mov	r0, r3
    8ee0:	f7ff ff20 	bl	8d24 <Adc_ValidateNotBusyNoQueue>
    8ee4:	4603      	mov	r3, r0
    8ee6:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    8eea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8eee:	2b01      	cmp	r3, #1
    8ef0:	d009      	beq.n	8f06 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8ef2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8ef6:	3301      	adds	r3, #1
    8ef8:	f88d 300d 	strb.w	r3, [sp, #13]
    8efc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8f00:	2b01      	cmp	r3, #1
    8f02:	d9dd      	bls.n	8ec0 <Adc_ValidateDeInitNotBusy+0x24>
    8f04:	e000      	b.n	8f08 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    8f06:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    8f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d10b      	bne.n	8f28 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    8f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f14:	4619      	mov	r1, r3
    8f16:	2001      	movs	r0, #1
    8f18:	f7ff ff6e 	bl	8df8 <Adc_ValidateCheckGroupNotConversion>
    8f1c:	4603      	mov	r3, r0
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d102      	bne.n	8f28 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    8f22:	2300      	movs	r3, #0
    8f24:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    8f28:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    8f2c:	4618      	mov	r0, r3
    8f2e:	b005      	add	sp, #20
    8f30:	f85d fb04 	ldr.w	pc, [sp], #4
    8f34:	1fff8d40 	.word	0x1fff8d40

00008f38 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    8f38:	b500      	push	{lr}
    8f3a:	b085      	sub	sp, #20
    8f3c:	4603      	mov	r3, r0
    8f3e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8f42:	2301      	movs	r3, #1
    8f44:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    8f48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8f4c:	490b      	ldr	r1, [pc, #44]	; (8f7c <Adc_ValidateSetupBufferNotBusy+0x44>)
    8f4e:	4613      	mov	r3, r2
    8f50:	009b      	lsls	r3, r3, #2
    8f52:	4413      	add	r3, r2
    8f54:	009b      	lsls	r3, r3, #2
    8f56:	440b      	add	r3, r1
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d004      	beq.n	8f68 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    8f5e:	210b      	movs	r1, #11
    8f60:	200c      	movs	r0, #12
    8f62:	f7ff fd00 	bl	8966 <Adc_ReportDetRuntimeError>
    8f66:	e002      	b.n	8f6e <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    8f68:	2300      	movs	r3, #0
    8f6a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    8f6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8f72:	4618      	mov	r0, r3
    8f74:	b005      	add	sp, #20
    8f76:	f85d fb04 	ldr.w	pc, [sp], #4
    8f7a:	bf00      	nop
    8f7c:	1fff8d48 	.word	0x1fff8d48

00008f80 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    8f80:	b500      	push	{lr}
    8f82:	b085      	sub	sp, #20
    8f84:	4603      	mov	r3, r0
    8f86:	460a      	mov	r2, r1
    8f88:	f8ad 3006 	strh.w	r3, [sp, #6]
    8f8c:	4613      	mov	r3, r2
    8f8e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    8f92:	2300      	movs	r3, #0
    8f94:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    8f98:	2300      	movs	r3, #0
    8f9a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8f9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8fa2:	4a32      	ldr	r2, [pc, #200]	; (906c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fa8:	68da      	ldr	r2, [r3, #12]
    8faa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8fae:	005b      	lsls	r3, r3, #1
    8fb0:	4413      	add	r3, r2
    8fb2:	881b      	ldrh	r3, [r3, #0]
    8fb4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8fb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8fbc:	4a2b      	ldr	r2, [pc, #172]	; (906c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fc2:	685a      	ldr	r2, [r3, #4]
    8fc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8fc8:	2134      	movs	r1, #52	; 0x34
    8fca:	fb01 f303 	mul.w	r3, r1, r3
    8fce:	4413      	add	r3, r2
    8fd0:	689b      	ldr	r3, [r3, #8]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d02c      	beq.n	9030 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8fd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8fda:	4a24      	ldr	r2, [pc, #144]	; (906c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe0:	685a      	ldr	r2, [r3, #4]
    8fe2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8fe6:	2134      	movs	r1, #52	; 0x34
    8fe8:	fb01 f303 	mul.w	r3, r1, r3
    8fec:	4413      	add	r3, r2
    8fee:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8ff0:	2b01      	cmp	r3, #1
    8ff2:	d120      	bne.n	9036 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8ff4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8ff8:	4a1c      	ldr	r2, [pc, #112]	; (906c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ffe:	685a      	ldr	r2, [r3, #4]
    9000:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9004:	2134      	movs	r1, #52	; 0x34
    9006:	fb01 f303 	mul.w	r3, r1, r3
    900a:	4413      	add	r3, r2
    900c:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    900e:	2b01      	cmp	r3, #1
    9010:	d111      	bne.n	9036 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    9012:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9016:	4a15      	ldr	r2, [pc, #84]	; (906c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    901c:	685a      	ldr	r2, [r3, #4]
    901e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9022:	2134      	movs	r1, #52	; 0x34
    9024:	fb01 f303 	mul.w	r3, r1, r3
    9028:	4413      	add	r3, r2
    902a:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    902c:	2b00      	cmp	r3, #0
    902e:	d102      	bne.n	9036 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    9030:	2301      	movs	r3, #1
    9032:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    9036:	f89d 300f 	ldrb.w	r3, [sp, #15]
    903a:	2b01      	cmp	r3, #1
    903c:	d104      	bne.n	9048 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    903e:	210b      	movs	r1, #11
    9040:	2002      	movs	r0, #2
    9042:	f7ff fc90 	bl	8966 <Adc_ReportDetRuntimeError>
    9046:	e00b      	b.n	9060 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    9048:	f89d 2005 	ldrb.w	r2, [sp, #5]
    904c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9050:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9054:	4618      	mov	r0, r3
    9056:	f7ff fe8d 	bl	8d74 <Adc_ValidateNotBusyNoPrio>
    905a:	4603      	mov	r3, r0
    905c:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    9060:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9064:	4618      	mov	r0, r3
    9066:	b005      	add	sp, #20
    9068:	f85d fb04 	ldr.w	pc, [sp], #4
    906c:	1fff8d40 	.word	0x1fff8d40

00009070 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    9070:	b500      	push	{lr}
    9072:	b085      	sub	sp, #20
    9074:	4603      	mov	r3, r0
    9076:	f88d 3007 	strb.w	r3, [sp, #7]
    907a:	460b      	mov	r3, r1
    907c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9080:	4613      	mov	r3, r2
    9082:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    9086:	2300      	movs	r3, #0
    9088:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    908c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9090:	2b0b      	cmp	r3, #11
    9092:	d03b      	beq.n	910c <Adc_ValidateStateNotIdle+0x9c>
    9094:	2b0b      	cmp	r3, #11
    9096:	dc4e      	bgt.n	9136 <Adc_ValidateStateNotIdle+0xc6>
    9098:	2b03      	cmp	r3, #3
    909a:	d022      	beq.n	90e2 <Adc_ValidateStateNotIdle+0x72>
    909c:	2b04      	cmp	r3, #4
    909e:	d14a      	bne.n	9136 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    90a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    90a4:	492a      	ldr	r1, [pc, #168]	; (9150 <Adc_ValidateStateNotIdle+0xe0>)
    90a6:	4613      	mov	r3, r2
    90a8:	009b      	lsls	r3, r3, #2
    90aa:	4413      	add	r3, r2
    90ac:	009b      	lsls	r3, r3, #2
    90ae:	440b      	add	r3, r1
    90b0:	681b      	ldr	r3, [r3, #0]
    90b2:	2b00      	cmp	r3, #0
    90b4:	d141      	bne.n	913a <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    90b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    90ba:	4925      	ldr	r1, [pc, #148]	; (9150 <Adc_ValidateStateNotIdle+0xe0>)
    90bc:	4613      	mov	r3, r2
    90be:	009b      	lsls	r3, r3, #2
    90c0:	4413      	add	r3, r2
    90c2:	009b      	lsls	r3, r3, #2
    90c4:	440b      	add	r3, r1
    90c6:	3304      	adds	r3, #4
    90c8:	681b      	ldr	r3, [r3, #0]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d135      	bne.n	913a <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    90ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90d2:	210c      	movs	r1, #12
    90d4:	4618      	mov	r0, r3
    90d6:	f7ff fc46 	bl	8966 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    90da:	2301      	movs	r3, #1
    90dc:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    90e0:	e02b      	b.n	913a <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    90e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    90e6:	491a      	ldr	r1, [pc, #104]	; (9150 <Adc_ValidateStateNotIdle+0xe0>)
    90e8:	4613      	mov	r3, r2
    90ea:	009b      	lsls	r3, r3, #2
    90ec:	4413      	add	r3, r2
    90ee:	009b      	lsls	r3, r3, #2
    90f0:	440b      	add	r3, r1
    90f2:	681b      	ldr	r3, [r3, #0]
    90f4:	2b00      	cmp	r3, #0
    90f6:	d122      	bne.n	913e <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    90f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90fc:	210c      	movs	r1, #12
    90fe:	4618      	mov	r0, r3
    9100:	f7ff fc31 	bl	8966 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    9104:	2301      	movs	r3, #1
    9106:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    910a:	e018      	b.n	913e <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    910c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9110:	490f      	ldr	r1, [pc, #60]	; (9150 <Adc_ValidateStateNotIdle+0xe0>)
    9112:	4613      	mov	r3, r2
    9114:	009b      	lsls	r3, r3, #2
    9116:	4413      	add	r3, r2
    9118:	009b      	lsls	r3, r3, #2
    911a:	440b      	add	r3, r1
    911c:	681b      	ldr	r3, [r3, #0]
    911e:	2b00      	cmp	r3, #0
    9120:	d10f      	bne.n	9142 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    9122:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9126:	210c      	movs	r1, #12
    9128:	4618      	mov	r0, r3
    912a:	f7ff fc1c 	bl	8966 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    912e:	2301      	movs	r3, #1
    9130:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    9134:	e005      	b.n	9142 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    9136:	bf00      	nop
    9138:	e004      	b.n	9144 <Adc_ValidateStateNotIdle+0xd4>
            break;
    913a:	bf00      	nop
    913c:	e002      	b.n	9144 <Adc_ValidateStateNotIdle+0xd4>
            break;
    913e:	bf00      	nop
    9140:	e000      	b.n	9144 <Adc_ValidateStateNotIdle+0xd4>
            break;
    9142:	bf00      	nop
        }
    }

    return ValidState;
    9144:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9148:	4618      	mov	r0, r3
    914a:	b005      	add	sp, #20
    914c:	f85d fb04 	ldr.w	pc, [sp], #4
    9150:	1fff8d48 	.word	0x1fff8d48

00009154 <Adc_ValidateCallAndGroup>:
* @implements     Adc_ValidateCallAndGroup_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndGroup(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    9154:	b500      	push	{lr}
    9156:	b085      	sub	sp, #20
    9158:	4603      	mov	r3, r0
    915a:	f88d 3007 	strb.w	r3, [sp, #7]
    915e:	460b      	mov	r3, r1
    9160:	f8ad 3004 	strh.w	r3, [sp, #4]
    9164:	4613      	mov	r3, r2
    9166:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidCallAndGroup = (Std_ReturnType)E_NOT_OK;
    916a:	2301      	movs	r3, #1
    916c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    9170:	2301      	movs	r3, #1
    9172:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType GroupIndex = 0U;
    9176:	2300      	movs	r3, #0
    9178:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    917c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9180:	4a2e      	ldr	r2, [pc, #184]	; (923c <Adc_ValidateCallAndGroup+0xe8>)
    9182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9186:	2b00      	cmp	r3, #0
    9188:	d106      	bne.n	9198 <Adc_ValidateCallAndGroup+0x44>
    {
        /* SWS_Adc_00300, SWS_Adc_00301, SWS_Adc_00302, SWS_Adc_00299, SWS_Adc_00298, SWS_Adc_00297, SWS_Adc_00296, SWS_Adc_00295, SWS_Adc_00294, SWS_Adc_00434 */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    918a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    918e:	210a      	movs	r1, #10
    9190:	4618      	mov	r0, r3
    9192:	f7ff fbd3 	bl	893c <Adc_ReportDetError>
    9196:	e04b      	b.n	9230 <Adc_ValidateCallAndGroup+0xdc>
        (void)GroupIndex;
        (void)ValidCoreId;
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    9198:	f89d 3006 	ldrb.w	r3, [sp, #6]
    919c:	4a27      	ldr	r2, [pc, #156]	; (923c <Adc_ValidateCallAndGroup+0xe8>)
    919e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    91a6:	4611      	mov	r1, r2
    91a8:	4618      	mov	r0, r3
    91aa:	f000 f961 	bl	9470 <Adc_CheckCurrentCoreId>
    91ae:	4603      	mov	r3, r0
    91b0:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    91b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    91b8:	2b00      	cmp	r3, #0
    91ba:	d133      	bne.n	9224 <Adc_ValidateCallAndGroup+0xd0>
        {
            if (Group >= ADC_MAX_GROUPS)
    91bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    91c0:	2b01      	cmp	r3, #1
    91c2:	d906      	bls.n	91d2 <Adc_ValidateCallAndGroup+0x7e>
            {
                /* SWS_Adc_00218, SWS_Adc_00225, SWS_Adc_00131, SWS_Adc_00130, SWS_Adc_00129, SWS_Adc_00128, SWS_Adc_00152, SWS_Adc_00126, SWS_Adc_00125, SWS_Adc_00423 */
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_GROUP);
    91c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91c8:	2115      	movs	r1, #21
    91ca:	4618      	mov	r0, r3
    91cc:	f7ff fbb6 	bl	893c <Adc_ReportDetError>
    91d0:	e02e      	b.n	9230 <Adc_ValidateCallAndGroup+0xdc>
                (void)GroupIndex;
            }
            else
            {
                /* Get the mapping index of group in the current partition */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    91d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91d6:	4a19      	ldr	r2, [pc, #100]	; (923c <Adc_ValidateCallAndGroup+0xe8>)
    91d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91dc:	68da      	ldr	r2, [r3, #12]
    91de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    91e2:	005b      	lsls	r3, r3, #1
    91e4:	4413      	add	r3, r2
    91e6:	881b      	ldrh	r3, [r3, #0]
    91e8:	f8ad 300c 	strh.w	r3, [sp, #12]
                if (Group != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].GroupId)
    91ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91f0:	4a12      	ldr	r2, [pc, #72]	; (923c <Adc_ValidateCallAndGroup+0xe8>)
    91f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f6:	685a      	ldr	r2, [r3, #4]
    91f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    91fc:	2134      	movs	r1, #52	; 0x34
    91fe:	fb01 f303 	mul.w	r3, r1, r3
    9202:	4413      	add	r3, r2
    9204:	881b      	ldrh	r3, [r3, #0]
    9206:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    920a:	429a      	cmp	r2, r3
    920c:	d006      	beq.n	921c <Adc_ValidateCallAndGroup+0xc8>
                {
                    /* Group doesn't belong to current core */
                    Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    920e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9212:	210e      	movs	r1, #14
    9214:	4618      	mov	r0, r3
    9216:	f7ff fb91 	bl	893c <Adc_ReportDetError>
    921a:	e009      	b.n	9230 <Adc_ValidateCallAndGroup+0xdc>
                }
                else
                {
                    ValidCallAndGroup = (Std_ReturnType)E_OK;
    921c:	2300      	movs	r3, #0
    921e:	f88d 300f 	strb.w	r3, [sp, #15]
    9222:	e005      	b.n	9230 <Adc_ValidateCallAndGroup+0xdc>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    9224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9228:	210e      	movs	r1, #14
    922a:	4618      	mov	r0, r3
    922c:	f7ff fb86 	bl	893c <Adc_ReportDetError>
        }
    }

    return ValidCallAndGroup;
    9230:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9234:	4618      	mov	r0, r3
    9236:	b005      	add	sp, #20
    9238:	f85d fb04 	ldr.w	pc, [sp], #4
    923c:	1fff8d40 	.word	0x1fff8d40

00009240 <Adc_ValidateCallAndUnit>:
* @implements     Adc_ValidateCallAndUnit_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndUnit(uint8 ServiceId,
                                                     Adc_HwUnitType Unit,
                                                     uint8 CoreId)
{
    9240:	b500      	push	{lr}
    9242:	b085      	sub	sp, #20
    9244:	4603      	mov	r3, r0
    9246:	f88d 3007 	strb.w	r3, [sp, #7]
    924a:	460b      	mov	r3, r1
    924c:	f88d 3006 	strb.w	r3, [sp, #6]
    9250:	4613      	mov	r3, r2
    9252:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType ValidCallAndUnit = (Std_ReturnType)E_NOT_OK;
    9256:	2301      	movs	r3, #1
    9258:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId;

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    925c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9260:	4a25      	ldr	r2, [pc, #148]	; (92f8 <Adc_ValidateCallAndUnit+0xb8>)
    9262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9266:	2b00      	cmp	r3, #0
    9268:	d106      	bne.n	9278 <Adc_ValidateCallAndUnit+0x38>
    {
        /* CPR_RTD_00272.adc, CPR_RTD_00273.adc */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    926a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    926e:	210a      	movs	r1, #10
    9270:	4618      	mov	r0, r3
    9272:	f7ff fb63 	bl	893c <Adc_ReportDetError>
    9276:	e039      	b.n	92ec <Adc_ValidateCallAndUnit+0xac>
    }
    else if (Unit >= ADC_IPW_MAX_HW_UNITS_CFG)
    9278:	f89d 3006 	ldrb.w	r3, [sp, #6]
    927c:	2b01      	cmp	r3, #1
    927e:	d906      	bls.n	928e <Adc_ValidateCallAndUnit+0x4e>
    {
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_UNIT);
    9280:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9284:	2126      	movs	r1, #38	; 0x26
    9286:	4618      	mov	r0, r3
    9288:	f7ff fb58 	bl	893c <Adc_ReportDetError>
    928c:	e02e      	b.n	92ec <Adc_ValidateCallAndUnit+0xac>
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    928e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9292:	4a19      	ldr	r2, [pc, #100]	; (92f8 <Adc_ValidateCallAndUnit+0xb8>)
    9294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9298:	f89d 2005 	ldrb.w	r2, [sp, #5]
    929c:	4611      	mov	r1, r2
    929e:	4618      	mov	r0, r3
    92a0:	f000 f8e6 	bl	9470 <Adc_CheckCurrentCoreId>
    92a4:	4603      	mov	r3, r0
    92a6:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    92aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d116      	bne.n	92e0 <Adc_ValidateCallAndUnit+0xa0>
        {
            if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[Unit] == (uint8)STD_ON) /* HW unit enabled on current partition */
    92b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    92b6:	4a10      	ldr	r2, [pc, #64]	; (92f8 <Adc_ValidateCallAndUnit+0xb8>)
    92b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92bc:	681a      	ldr	r2, [r3, #0]
    92be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    92c2:	4413      	add	r3, r2
    92c4:	7f9b      	ldrb	r3, [r3, #30]
    92c6:	2b01      	cmp	r3, #1
    92c8:	d103      	bne.n	92d2 <Adc_ValidateCallAndUnit+0x92>
            {
                ValidCallAndUnit = (Std_ReturnType)E_OK;
    92ca:	2300      	movs	r3, #0
    92cc:	f88d 300f 	strb.w	r3, [sp, #15]
    92d0:	e00c      	b.n	92ec <Adc_ValidateCallAndUnit+0xac>
            }
            else
            {
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    92d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92d6:	210e      	movs	r1, #14
    92d8:	4618      	mov	r0, r3
    92da:	f7ff fb2f 	bl	893c <Adc_ReportDetError>
    92de:	e005      	b.n	92ec <Adc_ValidateCallAndUnit+0xac>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    92e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92e4:	210e      	movs	r1, #14
    92e6:	4618      	mov	r0, r3
    92e8:	f7ff fb28 	bl	893c <Adc_ReportDetError>
        }
    }

    return ValidCallAndUnit;
    92ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    92f0:	4618      	mov	r0, r3
    92f2:	b005      	add	sp, #20
    92f4:	f85d fb04 	ldr.w	pc, [sp], #4
    92f8:	1fff8d40 	.word	0x1fff8d40

000092fc <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    92fc:	b084      	sub	sp, #16
    92fe:	4603      	mov	r3, r0
    9300:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    9304:	2300      	movs	r3, #0
    9306:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    930a:	2300      	movs	r3, #0
    930c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    9310:	2300      	movs	r3, #0
    9312:	f8ad 300e 	strh.w	r3, [sp, #14]
    9316:	e049      	b.n	93ac <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    9318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    931c:	4a2a      	ldr	r2, [pc, #168]	; (93c8 <Adc_InitGroupsStatus+0xcc>)
    931e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9322:	685a      	ldr	r2, [r3, #4]
    9324:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9328:	2134      	movs	r1, #52	; 0x34
    932a:	fb01 f303 	mul.w	r3, r1, r3
    932e:	4413      	add	r3, r2
    9330:	881b      	ldrh	r3, [r3, #0]
    9332:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    9336:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    933a:	4924      	ldr	r1, [pc, #144]	; (93cc <Adc_InitGroupsStatus+0xd0>)
    933c:	4613      	mov	r3, r2
    933e:	009b      	lsls	r3, r3, #2
    9340:	4413      	add	r3, r2
    9342:	009b      	lsls	r3, r3, #2
    9344:	440b      	add	r3, r1
    9346:	2200      	movs	r2, #0
    9348:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    934a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    934e:	491f      	ldr	r1, [pc, #124]	; (93cc <Adc_InitGroupsStatus+0xd0>)
    9350:	4613      	mov	r3, r2
    9352:	009b      	lsls	r3, r3, #2
    9354:	4413      	add	r3, r2
    9356:	009b      	lsls	r3, r3, #2
    9358:	440b      	add	r3, r1
    935a:	3304      	adds	r3, #4
    935c:	2200      	movs	r2, #0
    935e:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    9360:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9364:	4919      	ldr	r1, [pc, #100]	; (93cc <Adc_InitGroupsStatus+0xd0>)
    9366:	4613      	mov	r3, r2
    9368:	009b      	lsls	r3, r3, #2
    936a:	4413      	add	r3, r2
    936c:	009b      	lsls	r3, r3, #2
    936e:	440b      	add	r3, r1
    9370:	3308      	adds	r3, #8
    9372:	2200      	movs	r2, #0
    9374:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9376:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    937a:	4914      	ldr	r1, [pc, #80]	; (93cc <Adc_InitGroupsStatus+0xd0>)
    937c:	4613      	mov	r3, r2
    937e:	009b      	lsls	r3, r3, #2
    9380:	4413      	add	r3, r2
    9382:	009b      	lsls	r3, r3, #2
    9384:	440b      	add	r3, r1
    9386:	330c      	adds	r3, #12
    9388:	2200      	movs	r2, #0
    938a:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    938c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9390:	490e      	ldr	r1, [pc, #56]	; (93cc <Adc_InitGroupsStatus+0xd0>)
    9392:	4613      	mov	r3, r2
    9394:	009b      	lsls	r3, r3, #2
    9396:	4413      	add	r3, r2
    9398:	009b      	lsls	r3, r3, #2
    939a:	440b      	add	r3, r1
    939c:	3310      	adds	r3, #16
    939e:	2200      	movs	r2, #0
    93a0:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    93a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    93a6:	3301      	adds	r3, #1
    93a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    93ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93b0:	4a05      	ldr	r2, [pc, #20]	; (93c8 <Adc_InitGroupsStatus+0xcc>)
    93b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b6:	891b      	ldrh	r3, [r3, #8]
    93b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    93bc:	429a      	cmp	r2, r3
    93be:	d3ab      	bcc.n	9318 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    93c0:	bf00      	nop
    93c2:	bf00      	nop
    93c4:	b004      	add	sp, #16
    93c6:	4770      	bx	lr
    93c8:	1fff8d40 	.word	0x1fff8d40
    93cc:	1fff8d48 	.word	0x1fff8d48

000093d0 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    93d0:	b084      	sub	sp, #16
    93d2:	4603      	mov	r3, r0
    93d4:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    93d8:	2300      	movs	r3, #0
    93da:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    93de:	2300      	movs	r3, #0
    93e0:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    93e4:	2300      	movs	r3, #0
    93e6:	f88d 300f 	strb.w	r3, [sp, #15]
    93ea:	e035      	b.n	9458 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    93ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93f0:	4a1d      	ldr	r2, [pc, #116]	; (9468 <Adc_InitUnitStatus+0x98>)
    93f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f6:	681a      	ldr	r2, [r3, #0]
    93f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    93fc:	4413      	add	r3, r2
    93fe:	7f9b      	ldrb	r3, [r3, #30]
    9400:	2b01      	cmp	r3, #1
    9402:	d124      	bne.n	944e <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    9404:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9408:	4a18      	ldr	r2, [pc, #96]	; (946c <Adc_InitUnitStatus+0x9c>)
    940a:	2100      	movs	r1, #0
    940c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    9410:	2300      	movs	r3, #0
    9412:	f8ad 300c 	strh.w	r3, [sp, #12]
    9416:	e00f      	b.n	9438 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    9418:	f89d 200f 	ldrb.w	r2, [sp, #15]
    941c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9420:	4912      	ldr	r1, [pc, #72]	; (946c <Adc_InitUnitStatus+0x9c>)
    9422:	0092      	lsls	r2, r2, #2
    9424:	4413      	add	r3, r2
    9426:	005b      	lsls	r3, r3, #1
    9428:	440b      	add	r3, r1
    942a:	2200      	movs	r2, #0
    942c:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    942e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9432:	3301      	adds	r3, #1
    9434:	f8ad 300c 	strh.w	r3, [sp, #12]
    9438:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    943c:	2b01      	cmp	r3, #1
    943e:	d9eb      	bls.n	9418 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    9440:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9444:	4a09      	ldr	r2, [pc, #36]	; (946c <Adc_InitUnitStatus+0x9c>)
    9446:	00db      	lsls	r3, r3, #3
    9448:	4413      	add	r3, r2
    944a:	2200      	movs	r2, #0
    944c:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    944e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9452:	3301      	adds	r3, #1
    9454:	f88d 300f 	strb.w	r3, [sp, #15]
    9458:	f89d 300f 	ldrb.w	r3, [sp, #15]
    945c:	2b01      	cmp	r3, #1
    945e:	d9c5      	bls.n	93ec <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    9460:	bf00      	nop
    9462:	bf00      	nop
    9464:	b004      	add	sp, #16
    9466:	4770      	bx	lr
    9468:	1fff8d40 	.word	0x1fff8d40
    946c:	1fff8d70 	.word	0x1fff8d70

00009470 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    9470:	b084      	sub	sp, #16
    9472:	9001      	str	r0, [sp, #4]
    9474:	460b      	mov	r3, r1
    9476:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    947a:	2300      	movs	r3, #0
    947c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    9480:	2301      	movs	r3, #1
    9482:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    9486:	9b01      	ldr	r3, [sp, #4]
    9488:	7c1b      	ldrb	r3, [r3, #16]
    948a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    948e:	429a      	cmp	r2, r3
    9490:	d11c      	bne.n	94cc <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    9492:	2300      	movs	r3, #0
    9494:	f88d 300f 	strb.w	r3, [sp, #15]
    9498:	e012      	b.n	94c0 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    949a:	9b01      	ldr	r3, [sp, #4]
    949c:	695a      	ldr	r2, [r3, #20]
    949e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94a2:	4413      	add	r3, r2
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    94aa:	429a      	cmp	r2, r3
    94ac:	d103      	bne.n	94b6 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    94ae:	2300      	movs	r3, #0
    94b0:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    94b4:	e00a      	b.n	94cc <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    94b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94ba:	3301      	adds	r3, #1
    94bc:	f88d 300f 	strb.w	r3, [sp, #15]
    94c0:	9b01      	ldr	r3, [sp, #4]
    94c2:	7e1b      	ldrb	r3, [r3, #24]
    94c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    94c8:	429a      	cmp	r2, r3
    94ca:	d3e6      	bcc.n	949a <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    94cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    94d0:	4618      	mov	r0, r3
    94d2:	b004      	add	sp, #16
    94d4:	4770      	bx	lr

000094d6 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    94d6:	b500      	push	{lr}
    94d8:	b085      	sub	sp, #20
    94da:	4603      	mov	r3, r0
    94dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    94e0:	460b      	mov	r3, r1
    94e2:	f88d 3005 	strb.w	r3, [sp, #5]
    94e6:	4613      	mov	r3, r2
    94e8:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    94ec:	2300      	movs	r3, #0
    94ee:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    94f2:	2300      	movs	r3, #0
    94f4:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    94f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    94fc:	493e      	ldr	r1, [pc, #248]	; (95f8 <Adc_UpdateStatusStartConversion+0x122>)
    94fe:	4613      	mov	r3, r2
    9500:	009b      	lsls	r3, r3, #2
    9502:	4413      	add	r3, r2
    9504:	009b      	lsls	r3, r3, #2
    9506:	440b      	add	r3, r1
    9508:	2201      	movs	r2, #1
    950a:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    950c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9510:	4939      	ldr	r1, [pc, #228]	; (95f8 <Adc_UpdateStatusStartConversion+0x122>)
    9512:	4613      	mov	r3, r2
    9514:	009b      	lsls	r3, r3, #2
    9516:	4413      	add	r3, r2
    9518:	009b      	lsls	r3, r3, #2
    951a:	440b      	add	r3, r1
    951c:	3308      	adds	r3, #8
    951e:	2200      	movs	r2, #0
    9520:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    9522:	f008 f843 	bl	115ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9526:	f89d 3005 	ldrb.w	r3, [sp, #5]
    952a:	4a34      	ldr	r2, [pc, #208]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    952c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9530:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    9534:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9538:	2b00      	cmp	r3, #0
    953a:	d016      	beq.n	956a <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    953c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9540:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9544:	492d      	ldr	r1, [pc, #180]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    9546:	0092      	lsls	r2, r2, #2
    9548:	4413      	add	r3, r2
    954a:	005b      	lsls	r3, r3, #1
    954c:	440b      	add	r3, r1
    954e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9552:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    9554:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9558:	4a28      	ldr	r2, [pc, #160]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    955a:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    955e:	b292      	uxth	r2, r2
    9560:	3201      	adds	r2, #1
    9562:	b291      	uxth	r1, r2
    9564:	4a25      	ldr	r2, [pc, #148]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    9566:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    956a:	f008 f84b 	bl	11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    956e:	f008 f81d 	bl	115ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9572:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9576:	4a21      	ldr	r2, [pc, #132]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    9578:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    957c:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    9580:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9584:	4a1d      	ldr	r2, [pc, #116]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    9586:	00db      	lsls	r3, r3, #3
    9588:	4413      	add	r3, r2
    958a:	885b      	ldrh	r3, [r3, #2]
    958c:	b29b      	uxth	r3, r3
    958e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9592:	429a      	cmp	r2, r3
    9594:	d003      	beq.n	959e <Adc_UpdateStatusStartConversion+0xc8>
    9596:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    959a:	2b00      	cmp	r3, #0
    959c:	d125      	bne.n	95ea <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    959e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    95a2:	4a16      	ldr	r2, [pc, #88]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    95a4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    95a8:	b29b      	uxth	r3, r3
    95aa:	2b00      	cmp	r3, #0
    95ac:	d112      	bne.n	95d4 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    95ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    95b2:	4a12      	ldr	r2, [pc, #72]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    95b4:	00db      	lsls	r3, r3, #3
    95b6:	4413      	add	r3, r2
    95b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    95bc:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    95be:	f89d 3005 	ldrb.w	r3, [sp, #5]
    95c2:	4a0e      	ldr	r2, [pc, #56]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    95c4:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    95c8:	b292      	uxth	r2, r2
    95ca:	3201      	adds	r2, #1
    95cc:	b291      	uxth	r1, r2
    95ce:	4a0b      	ldr	r2, [pc, #44]	; (95fc <Adc_UpdateStatusStartConversion+0x126>)
    95d0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    95d4:	f008 f816 	bl	11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    95d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    95dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    95e0:	4611      	mov	r1, r2
    95e2:	4618      	mov	r0, r3
    95e4:	f002 fcda 	bl	bf9c <Adc_Ipw_StartNormalConversion>
    95e8:	e002      	b.n	95f0 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    95ea:	f008 f80b 	bl	11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    95ee:	bf00      	nop
    95f0:	bf00      	nop
    95f2:	b005      	add	sp, #20
    95f4:	f85d fb04 	ldr.w	pc, [sp], #4
    95f8:	1fff8d48 	.word	0x1fff8d48
    95fc:	1fff8d70 	.word	0x1fff8d70

00009600 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    9600:	b500      	push	{lr}
    9602:	b085      	sub	sp, #20
    9604:	9001      	str	r0, [sp, #4]
    9606:	4608      	mov	r0, r1
    9608:	4611      	mov	r1, r2
    960a:	461a      	mov	r2, r3
    960c:	4603      	mov	r3, r0
    960e:	f8ad 3002 	strh.w	r3, [sp, #2]
    9612:	460b      	mov	r3, r1
    9614:	f88d 3001 	strb.w	r3, [sp, #1]
    9618:	4613      	mov	r3, r2
    961a:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    961e:	2300      	movs	r3, #0
    9620:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    9624:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9628:	4a26      	ldr	r2, [pc, #152]	; (96c4 <Adc_StopSwGroupConversion+0xc4>)
    962a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    962e:	b29a      	uxth	r2, r3
    9630:	9b01      	ldr	r3, [sp, #4]
    9632:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9634:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9638:	4a22      	ldr	r2, [pc, #136]	; (96c4 <Adc_StopSwGroupConversion+0xc4>)
    963a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    963e:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    9642:	2300      	movs	r3, #0
    9644:	f8ad 300c 	strh.w	r3, [sp, #12]
    9648:	e02f      	b.n	96aa <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    964a:	f89d 2001 	ldrb.w	r2, [sp, #1]
    964e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9652:	491c      	ldr	r1, [pc, #112]	; (96c4 <Adc_StopSwGroupConversion+0xc4>)
    9654:	0092      	lsls	r2, r2, #2
    9656:	4413      	add	r3, r2
    9658:	005b      	lsls	r3, r3, #1
    965a:	440b      	add	r3, r1
    965c:	885b      	ldrh	r3, [r3, #2]
    965e:	b29b      	uxth	r3, r3
    9660:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9664:	429a      	cmp	r2, r3
    9666:	d11b      	bne.n	96a0 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    9668:	9b01      	ldr	r3, [sp, #4]
    966a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    966e:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    9670:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9674:	2b00      	cmp	r3, #0
    9676:	d10b      	bne.n	9690 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    9678:	f89d 2000 	ldrb.w	r2, [sp]
    967c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9680:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9684:	4618      	mov	r0, r3
    9686:	f002 fd33 	bl	c0f0 <Adc_Ipw_StopCurrentConversion>
    968a:	4603      	mov	r3, r0
    968c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    9690:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9694:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9698:	4611      	mov	r1, r2
    969a:	4618      	mov	r0, r3
    969c:	f001 fe70 	bl	b380 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    96a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    96a4:	3301      	adds	r3, #1
    96a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    96aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    96ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    96b2:	429a      	cmp	r2, r3
    96b4:	d3c9      	bcc.n	964a <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    96b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    96ba:	4618      	mov	r0, r3
    96bc:	b005      	add	sp, #20
    96be:	f85d fb04 	ldr.w	pc, [sp], #4
    96c2:	bf00      	nop
    96c4:	1fff8d70 	.word	0x1fff8d70

000096c8 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    96c8:	b500      	push	{lr}
    96ca:	b089      	sub	sp, #36	; 0x24
    96cc:	4603      	mov	r3, r0
    96ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    96d2:	460b      	mov	r3, r1
    96d4:	f88d 3005 	strb.w	r3, [sp, #5]
    96d8:	4613      	mov	r3, r2
    96da:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    96de:	f89d 3004 	ldrb.w	r3, [sp, #4]
    96e2:	4a4f      	ldr	r2, [pc, #316]	; (9820 <Adc_UpdateStatusStopConversion+0x158>)
    96e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e8:	68da      	ldr	r2, [r3, #12]
    96ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    96ee:	005b      	lsls	r3, r3, #1
    96f0:	4413      	add	r3, r2
    96f2:	881b      	ldrh	r3, [r3, #0]
    96f4:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    96f8:	2300      	movs	r3, #0
    96fa:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    96fe:	2300      	movs	r3, #0
    9700:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    9704:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9708:	4a45      	ldr	r2, [pc, #276]	; (9820 <Adc_UpdateStatusStopConversion+0x158>)
    970a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    970e:	685a      	ldr	r2, [r3, #4]
    9710:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9714:	2134      	movs	r1, #52	; 0x34
    9716:	fb01 f303 	mul.w	r3, r1, r3
    971a:	4413      	add	r3, r2
    971c:	689b      	ldr	r3, [r3, #8]
    971e:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    9720:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9724:	4a3e      	ldr	r2, [pc, #248]	; (9820 <Adc_UpdateStatusStopConversion+0x158>)
    9726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    972a:	685a      	ldr	r2, [r3, #4]
    972c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9730:	2134      	movs	r1, #52	; 0x34
    9732:	fb01 f303 	mul.w	r3, r1, r3
    9736:	4413      	add	r3, r2
    9738:	685b      	ldr	r3, [r3, #4]
    973a:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    973c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9740:	4a37      	ldr	r2, [pc, #220]	; (9820 <Adc_UpdateStatusStopConversion+0x158>)
    9742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9746:	685a      	ldr	r2, [r3, #4]
    9748:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    974c:	2134      	movs	r1, #52	; 0x34
    974e:	fb01 f303 	mul.w	r3, r1, r3
    9752:	4413      	add	r3, r2
    9754:	699b      	ldr	r3, [r3, #24]
    9756:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    9758:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    975c:	4931      	ldr	r1, [pc, #196]	; (9824 <Adc_UpdateStatusStopConversion+0x15c>)
    975e:	4613      	mov	r3, r2
    9760:	009b      	lsls	r3, r3, #2
    9762:	4413      	add	r3, r2
    9764:	009b      	lsls	r3, r3, #2
    9766:	440b      	add	r3, r1
    9768:	681b      	ldr	r3, [r3, #0]
    976a:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    976c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9770:	492c      	ldr	r1, [pc, #176]	; (9824 <Adc_UpdateStatusStopConversion+0x15c>)
    9772:	4613      	mov	r3, r2
    9774:	009b      	lsls	r3, r3, #2
    9776:	4413      	add	r3, r2
    9778:	009b      	lsls	r3, r3, #2
    977a:	440b      	add	r3, r1
    977c:	3308      	adds	r3, #8
    977e:	2200      	movs	r2, #0
    9780:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    9782:	9b06      	ldr	r3, [sp, #24]
    9784:	2b00      	cmp	r3, #0
    9786:	d005      	beq.n	9794 <Adc_UpdateStatusStopConversion+0xcc>
    9788:	9b05      	ldr	r3, [sp, #20]
    978a:	2b01      	cmp	r3, #1
    978c:	d110      	bne.n	97b0 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    978e:	9b04      	ldr	r3, [sp, #16]
    9790:	2b00      	cmp	r3, #0
    9792:	d10d      	bne.n	97b0 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    9794:	9b03      	ldr	r3, [sp, #12]
    9796:	2b03      	cmp	r3, #3
    9798:	d10a      	bne.n	97b0 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    979a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    979e:	4921      	ldr	r1, [pc, #132]	; (9824 <Adc_UpdateStatusStopConversion+0x15c>)
    97a0:	4613      	mov	r3, r2
    97a2:	009b      	lsls	r3, r3, #2
    97a4:	4413      	add	r3, r2
    97a6:	009b      	lsls	r3, r3, #2
    97a8:	440b      	add	r3, r1
    97aa:	2200      	movs	r2, #0
    97ac:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    97ae:	e032      	b.n	9816 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    97b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    97b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    97b8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    97bc:	f10d 000a 	add.w	r0, sp, #10
    97c0:	f7ff ff1e 	bl	9600 <Adc_StopSwGroupConversion>
    97c4:	4603      	mov	r3, r0
    97c6:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    97ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    97ce:	4915      	ldr	r1, [pc, #84]	; (9824 <Adc_UpdateStatusStopConversion+0x15c>)
    97d0:	4613      	mov	r3, r2
    97d2:	009b      	lsls	r3, r3, #2
    97d4:	4413      	add	r3, r2
    97d6:	009b      	lsls	r3, r3, #2
    97d8:	440b      	add	r3, r1
    97da:	2200      	movs	r2, #0
    97dc:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    97de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    97e2:	2b00      	cmp	r3, #0
    97e4:	d10f      	bne.n	9806 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    97e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97ea:	4a0f      	ldr	r2, [pc, #60]	; (9828 <Adc_UpdateStatusStopConversion+0x160>)
    97ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    97f0:	b29b      	uxth	r3, r3
    97f2:	2b00      	cmp	r3, #0
    97f4:	d007      	beq.n	9806 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    97f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    97fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97fe:	4611      	mov	r1, r2
    9800:	4618      	mov	r0, r3
    9802:	f002 fbcb 	bl	bf9c <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    9806:	f89d 301d 	ldrb.w	r3, [sp, #29]
    980a:	2b01      	cmp	r3, #1
    980c:	d103      	bne.n	9816 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    980e:	212b      	movs	r1, #43	; 0x2b
    9810:	2003      	movs	r0, #3
    9812:	f7ff f8a8 	bl	8966 <Adc_ReportDetRuntimeError>
}
    9816:	bf00      	nop
    9818:	b009      	add	sp, #36	; 0x24
    981a:	f85d fb04 	ldr.w	pc, [sp], #4
    981e:	bf00      	nop
    9820:	1fff8d40 	.word	0x1fff8d40
    9824:	1fff8d48 	.word	0x1fff8d48
    9828:	1fff8d70 	.word	0x1fff8d70

0000982c <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    982c:	b500      	push	{lr}
    982e:	b085      	sub	sp, #20
    9830:	4603      	mov	r3, r0
    9832:	f8ad 3006 	strh.w	r3, [sp, #6]
    9836:	460b      	mov	r3, r1
    9838:	f88d 3005 	strb.w	r3, [sp, #5]
    983c:	4613      	mov	r3, r2
    983e:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9842:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9846:	4a18      	ldr	r2, [pc, #96]	; (98a8 <Adc_UpdateStatusReadGroup+0x7c>)
    9848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    984c:	68da      	ldr	r2, [r3, #12]
    984e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9852:	005b      	lsls	r3, r3, #1
    9854:	4413      	add	r3, r2
    9856:	881b      	ldrh	r3, [r3, #0]
    9858:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    985c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9860:	4a11      	ldr	r2, [pc, #68]	; (98a8 <Adc_UpdateStatusReadGroup+0x7c>)
    9862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9866:	685a      	ldr	r2, [r3, #4]
    9868:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    986c:	2134      	movs	r1, #52	; 0x34
    986e:	fb01 f303 	mul.w	r3, r1, r3
    9872:	4413      	add	r3, r2
    9874:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9878:	2b01      	cmp	r3, #1
    987a:	d109      	bne.n	9890 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    987c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9880:	f89d 1005 	ldrb.w	r1, [sp, #5]
    9884:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9888:	4618      	mov	r0, r3
    988a:	f000 f80f 	bl	98ac <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    988e:	e007      	b.n	98a0 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    9890:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9894:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9898:	4611      	mov	r1, r2
    989a:	4618      	mov	r0, r3
    989c:	f000 f8e8 	bl	9a70 <Adc_UpdateStatusReadGroupInt>
}
    98a0:	bf00      	nop
    98a2:	b005      	add	sp, #20
    98a4:	f85d fb04 	ldr.w	pc, [sp], #4
    98a8:	1fff8d40 	.word	0x1fff8d40

000098ac <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    98ac:	b500      	push	{lr}
    98ae:	b085      	sub	sp, #20
    98b0:	4603      	mov	r3, r0
    98b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    98b6:	460b      	mov	r3, r1
    98b8:	f88d 3005 	strb.w	r3, [sp, #5]
    98bc:	4613      	mov	r3, r2
    98be:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    98c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98c6:	4a2c      	ldr	r2, [pc, #176]	; (9978 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    98c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98cc:	68da      	ldr	r2, [r3, #12]
    98ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    98d2:	005b      	lsls	r3, r3, #1
    98d4:	4413      	add	r3, r2
    98d6:	881b      	ldrh	r3, [r3, #0]
    98d8:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    98dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    98e0:	4926      	ldr	r1, [pc, #152]	; (997c <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    98e2:	4613      	mov	r3, r2
    98e4:	009b      	lsls	r3, r3, #2
    98e6:	4413      	add	r3, r2
    98e8:	009b      	lsls	r3, r3, #2
    98ea:	440b      	add	r3, r1
    98ec:	3304      	adds	r3, #4
    98ee:	2201      	movs	r2, #1
    98f0:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    98f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    98f6:	2b00      	cmp	r3, #0
    98f8:	d03a      	beq.n	9970 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    98fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98fe:	4a1e      	ldr	r2, [pc, #120]	; (9978 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9904:	685a      	ldr	r2, [r3, #4]
    9906:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    990a:	2134      	movs	r1, #52	; 0x34
    990c:	fb01 f303 	mul.w	r3, r1, r3
    9910:	4413      	add	r3, r2
    9912:	689b      	ldr	r3, [r3, #8]
    9914:	2b01      	cmp	r3, #1
    9916:	d10a      	bne.n	992e <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9918:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    991c:	4917      	ldr	r1, [pc, #92]	; (997c <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    991e:	4613      	mov	r3, r2
    9920:	009b      	lsls	r3, r3, #2
    9922:	4413      	add	r3, r2
    9924:	009b      	lsls	r3, r3, #2
    9926:	440b      	add	r3, r1
    9928:	2201      	movs	r2, #1
    992a:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    992c:	e020      	b.n	9970 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    992e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9932:	4a11      	ldr	r2, [pc, #68]	; (9978 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9938:	685a      	ldr	r2, [r3, #4]
    993a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    993e:	2134      	movs	r1, #52	; 0x34
    9940:	fb01 f303 	mul.w	r3, r1, r3
    9944:	4413      	add	r3, r2
    9946:	695b      	ldr	r3, [r3, #20]
    9948:	2b00      	cmp	r3, #0
    994a:	d111      	bne.n	9970 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    994c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9950:	490a      	ldr	r1, [pc, #40]	; (997c <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    9952:	4613      	mov	r3, r2
    9954:	009b      	lsls	r3, r3, #2
    9956:	4413      	add	r3, r2
    9958:	009b      	lsls	r3, r3, #2
    995a:	440b      	add	r3, r1
    995c:	2200      	movs	r2, #0
    995e:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    9960:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9964:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9968:	4611      	mov	r1, r2
    996a:	4618      	mov	r0, r3
    996c:	f000 f808 	bl	9980 <Adc_UpdateSwQueueIndexNoInt>
}
    9970:	bf00      	nop
    9972:	b005      	add	sp, #20
    9974:	f85d fb04 	ldr.w	pc, [sp], #4
    9978:	1fff8d40 	.word	0x1fff8d40
    997c:	1fff8d48 	.word	0x1fff8d48

00009980 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    9980:	b500      	push	{lr}
    9982:	b085      	sub	sp, #20
    9984:	4603      	mov	r3, r0
    9986:	460a      	mov	r2, r1
    9988:	f8ad 3006 	strh.w	r3, [sp, #6]
    998c:	4613      	mov	r3, r2
    998e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9992:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9996:	4a34      	ldr	r2, [pc, #208]	; (9a68 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    9998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    999c:	68da      	ldr	r2, [r3, #12]
    999e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    99a2:	005b      	lsls	r3, r3, #1
    99a4:	4413      	add	r3, r2
    99a6:	881b      	ldrh	r3, [r3, #0]
    99a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    99ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    99b0:	4a2d      	ldr	r2, [pc, #180]	; (9a68 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    99b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99b6:	685a      	ldr	r2, [r3, #4]
    99b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    99bc:	2134      	movs	r1, #52	; 0x34
    99be:	fb01 f303 	mul.w	r3, r1, r3
    99c2:	4413      	add	r3, r2
    99c4:	789b      	ldrb	r3, [r3, #2]
    99c6:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    99ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99ce:	4a27      	ldr	r2, [pc, #156]	; (9a6c <Adc_UpdateSwQueueIndexNoInt+0xec>)
    99d0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    99d4:	b29b      	uxth	r3, r3
    99d6:	2b00      	cmp	r3, #0
    99d8:	d041      	beq.n	9a5e <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    99da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99de:	4a23      	ldr	r2, [pc, #140]	; (9a6c <Adc_UpdateSwQueueIndexNoInt+0xec>)
    99e0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    99e4:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    99e8:	2300      	movs	r3, #0
    99ea:	f8ad 300e 	strh.w	r3, [sp, #14]
    99ee:	e01c      	b.n	9a2a <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    99f0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    99f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99f8:	491c      	ldr	r1, [pc, #112]	; (9a6c <Adc_UpdateSwQueueIndexNoInt+0xec>)
    99fa:	0092      	lsls	r2, r2, #2
    99fc:	4413      	add	r3, r2
    99fe:	005b      	lsls	r3, r3, #1
    9a00:	440b      	add	r3, r1
    9a02:	885b      	ldrh	r3, [r3, #2]
    9a04:	b29b      	uxth	r3, r3
    9a06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9a0a:	429a      	cmp	r2, r3
    9a0c:	d108      	bne.n	9a20 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    9a0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9a12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a16:	4611      	mov	r1, r2
    9a18:	4618      	mov	r0, r3
    9a1a:	f001 fcb1 	bl	b380 <Adc_Ipw_RemoveFromQueue>
                    break;
    9a1e:	e00a      	b.n	9a36 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    9a20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a24:	3301      	adds	r3, #1
    9a26:	f8ad 300e 	strh.w	r3, [sp, #14]
    9a2a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9a2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    9a32:	429a      	cmp	r2, r3
    9a34:	d3dc      	bcc.n	99f0 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    9a36:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d10f      	bne.n	9a5e <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    9a3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a42:	4a0a      	ldr	r2, [pc, #40]	; (9a6c <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9a44:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9a48:	b29b      	uxth	r3, r3
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d007      	beq.n	9a5e <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    9a4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9a52:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a56:	4611      	mov	r1, r2
    9a58:	4618      	mov	r0, r3
    9a5a:	f002 fa9f 	bl	bf9c <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    9a5e:	bf00      	nop
    9a60:	b005      	add	sp, #20
    9a62:	f85d fb04 	ldr.w	pc, [sp], #4
    9a66:	bf00      	nop
    9a68:	1fff8d40 	.word	0x1fff8d40
    9a6c:	1fff8d70 	.word	0x1fff8d70

00009a70 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    9a70:	b084      	sub	sp, #16
    9a72:	4603      	mov	r3, r0
    9a74:	460a      	mov	r2, r1
    9a76:	f8ad 3006 	strh.w	r3, [sp, #6]
    9a7a:	4613      	mov	r3, r2
    9a7c:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9a80:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a84:	4a47      	ldr	r2, [pc, #284]	; (9ba4 <Adc_UpdateStatusReadGroupInt+0x134>)
    9a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a8a:	68da      	ldr	r2, [r3, #12]
    9a8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a90:	005b      	lsls	r3, r3, #1
    9a92:	4413      	add	r3, r2
    9a94:	881b      	ldrh	r3, [r3, #0]
    9a96:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9a9a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9a9e:	4942      	ldr	r1, [pc, #264]	; (9ba8 <Adc_UpdateStatusReadGroupInt+0x138>)
    9aa0:	4613      	mov	r3, r2
    9aa2:	009b      	lsls	r3, r3, #2
    9aa4:	4413      	add	r3, r2
    9aa6:	009b      	lsls	r3, r3, #2
    9aa8:	440b      	add	r3, r1
    9aaa:	681b      	ldr	r3, [r3, #0]
    9aac:	2b02      	cmp	r3, #2
    9aae:	d10a      	bne.n	9ac6 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9ab0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9ab4:	493c      	ldr	r1, [pc, #240]	; (9ba8 <Adc_UpdateStatusReadGroupInt+0x138>)
    9ab6:	4613      	mov	r3, r2
    9ab8:	009b      	lsls	r3, r3, #2
    9aba:	4413      	add	r3, r2
    9abc:	009b      	lsls	r3, r3, #2
    9abe:	440b      	add	r3, r1
    9ac0:	2201      	movs	r2, #1
    9ac2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    9ac4:	e06a      	b.n	9b9c <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9ac6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9aca:	4937      	ldr	r1, [pc, #220]	; (9ba8 <Adc_UpdateStatusReadGroupInt+0x138>)
    9acc:	4613      	mov	r3, r2
    9ace:	009b      	lsls	r3, r3, #2
    9ad0:	4413      	add	r3, r2
    9ad2:	009b      	lsls	r3, r3, #2
    9ad4:	440b      	add	r3, r1
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	2b03      	cmp	r3, #3
    9ada:	d15f      	bne.n	9b9c <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9adc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9ae0:	4a30      	ldr	r2, [pc, #192]	; (9ba4 <Adc_UpdateStatusReadGroupInt+0x134>)
    9ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae6:	685a      	ldr	r2, [r3, #4]
    9ae8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9aec:	2134      	movs	r1, #52	; 0x34
    9aee:	fb01 f303 	mul.w	r3, r1, r3
    9af2:	4413      	add	r3, r2
    9af4:	695b      	ldr	r3, [r3, #20]
    9af6:	2b00      	cmp	r3, #0
    9af8:	d150      	bne.n	9b9c <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9afa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9afe:	4a29      	ldr	r2, [pc, #164]	; (9ba4 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b04:	685a      	ldr	r2, [r3, #4]
    9b06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b0a:	2134      	movs	r1, #52	; 0x34
    9b0c:	fb01 f303 	mul.w	r3, r1, r3
    9b10:	4413      	add	r3, r2
    9b12:	689b      	ldr	r3, [r3, #8]
    9b14:	2b00      	cmp	r3, #0
    9b16:	d02c      	beq.n	9b72 <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9b18:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b1c:	4a21      	ldr	r2, [pc, #132]	; (9ba4 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b22:	685a      	ldr	r2, [r3, #4]
    9b24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b28:	2134      	movs	r1, #52	; 0x34
    9b2a:	fb01 f303 	mul.w	r3, r1, r3
    9b2e:	4413      	add	r3, r2
    9b30:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9b32:	2b01      	cmp	r3, #1
    9b34:	d128      	bne.n	9b88 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9b36:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b3a:	4a1a      	ldr	r2, [pc, #104]	; (9ba4 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b40:	685a      	ldr	r2, [r3, #4]
    9b42:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b46:	2134      	movs	r1, #52	; 0x34
    9b48:	fb01 f303 	mul.w	r3, r1, r3
    9b4c:	4413      	add	r3, r2
    9b4e:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9b50:	2b01      	cmp	r3, #1
    9b52:	d119      	bne.n	9b88 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9b54:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b58:	4a12      	ldr	r2, [pc, #72]	; (9ba4 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b5e:	685a      	ldr	r2, [r3, #4]
    9b60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b64:	2134      	movs	r1, #52	; 0x34
    9b66:	fb01 f303 	mul.w	r3, r1, r3
    9b6a:	4413      	add	r3, r2
    9b6c:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d10a      	bne.n	9b88 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9b72:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b76:	490c      	ldr	r1, [pc, #48]	; (9ba8 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b78:	4613      	mov	r3, r2
    9b7a:	009b      	lsls	r3, r3, #2
    9b7c:	4413      	add	r3, r2
    9b7e:	009b      	lsls	r3, r3, #2
    9b80:	440b      	add	r3, r1
    9b82:	2200      	movs	r2, #0
    9b84:	601a      	str	r2, [r3, #0]
}
    9b86:	e009      	b.n	9b9c <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9b88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b8c:	4906      	ldr	r1, [pc, #24]	; (9ba8 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b8e:	4613      	mov	r3, r2
    9b90:	009b      	lsls	r3, r3, #2
    9b92:	4413      	add	r3, r2
    9b94:	009b      	lsls	r3, r3, #2
    9b96:	440b      	add	r3, r1
    9b98:	2201      	movs	r2, #1
    9b9a:	601a      	str	r2, [r3, #0]
}
    9b9c:	bf00      	nop
    9b9e:	b004      	add	sp, #16
    9ba0:	4770      	bx	lr
    9ba2:	bf00      	nop
    9ba4:	1fff8d40 	.word	0x1fff8d40
    9ba8:	1fff8d48 	.word	0x1fff8d48

00009bac <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    9bac:	b084      	sub	sp, #16
    9bae:	4603      	mov	r3, r0
    9bb0:	460a      	mov	r2, r1
    9bb2:	f8ad 3006 	strh.w	r3, [sp, #6]
    9bb6:	4613      	mov	r3, r2
    9bb8:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9bbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bc0:	4a46      	ldr	r2, [pc, #280]	; (9cdc <Adc_UpdateStatusAfterGetStream+0x130>)
    9bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc6:	68da      	ldr	r2, [r3, #12]
    9bc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9bcc:	005b      	lsls	r3, r3, #1
    9bce:	4413      	add	r3, r2
    9bd0:	881b      	ldrh	r3, [r3, #0]
    9bd2:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9bd6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9bda:	4941      	ldr	r1, [pc, #260]	; (9ce0 <Adc_UpdateStatusAfterGetStream+0x134>)
    9bdc:	4613      	mov	r3, r2
    9bde:	009b      	lsls	r3, r3, #2
    9be0:	4413      	add	r3, r2
    9be2:	009b      	lsls	r3, r3, #2
    9be4:	440b      	add	r3, r1
    9be6:	681b      	ldr	r3, [r3, #0]
    9be8:	2b02      	cmp	r3, #2
    9bea:	d109      	bne.n	9c00 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9bec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9bf0:	493b      	ldr	r1, [pc, #236]	; (9ce0 <Adc_UpdateStatusAfterGetStream+0x134>)
    9bf2:	4613      	mov	r3, r2
    9bf4:	009b      	lsls	r3, r3, #2
    9bf6:	4413      	add	r3, r2
    9bf8:	009b      	lsls	r3, r3, #2
    9bfa:	440b      	add	r3, r1
    9bfc:	2201      	movs	r2, #1
    9bfe:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9c00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c04:	4936      	ldr	r1, [pc, #216]	; (9ce0 <Adc_UpdateStatusAfterGetStream+0x134>)
    9c06:	4613      	mov	r3, r2
    9c08:	009b      	lsls	r3, r3, #2
    9c0a:	4413      	add	r3, r2
    9c0c:	009b      	lsls	r3, r3, #2
    9c0e:	440b      	add	r3, r1
    9c10:	681b      	ldr	r3, [r3, #0]
    9c12:	2b03      	cmp	r3, #3
    9c14:	d15f      	bne.n	9cd6 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9c16:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c1a:	4a30      	ldr	r2, [pc, #192]	; (9cdc <Adc_UpdateStatusAfterGetStream+0x130>)
    9c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c20:	685a      	ldr	r2, [r3, #4]
    9c22:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c26:	2134      	movs	r1, #52	; 0x34
    9c28:	fb01 f303 	mul.w	r3, r1, r3
    9c2c:	4413      	add	r3, r2
    9c2e:	695b      	ldr	r3, [r3, #20]
    9c30:	2b00      	cmp	r3, #0
    9c32:	d150      	bne.n	9cd6 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9c34:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c38:	4a28      	ldr	r2, [pc, #160]	; (9cdc <Adc_UpdateStatusAfterGetStream+0x130>)
    9c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c3e:	685a      	ldr	r2, [r3, #4]
    9c40:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c44:	2134      	movs	r1, #52	; 0x34
    9c46:	fb01 f303 	mul.w	r3, r1, r3
    9c4a:	4413      	add	r3, r2
    9c4c:	689b      	ldr	r3, [r3, #8]
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d02c      	beq.n	9cac <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9c52:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c56:	4a21      	ldr	r2, [pc, #132]	; (9cdc <Adc_UpdateStatusAfterGetStream+0x130>)
    9c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c5c:	685a      	ldr	r2, [r3, #4]
    9c5e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c62:	2134      	movs	r1, #52	; 0x34
    9c64:	fb01 f303 	mul.w	r3, r1, r3
    9c68:	4413      	add	r3, r2
    9c6a:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9c6c:	2b01      	cmp	r3, #1
    9c6e:	d128      	bne.n	9cc2 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9c70:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c74:	4a19      	ldr	r2, [pc, #100]	; (9cdc <Adc_UpdateStatusAfterGetStream+0x130>)
    9c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7a:	685a      	ldr	r2, [r3, #4]
    9c7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c80:	2134      	movs	r1, #52	; 0x34
    9c82:	fb01 f303 	mul.w	r3, r1, r3
    9c86:	4413      	add	r3, r2
    9c88:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9c8a:	2b01      	cmp	r3, #1
    9c8c:	d119      	bne.n	9cc2 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9c8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c92:	4a12      	ldr	r2, [pc, #72]	; (9cdc <Adc_UpdateStatusAfterGetStream+0x130>)
    9c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c98:	685a      	ldr	r2, [r3, #4]
    9c9a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c9e:	2134      	movs	r1, #52	; 0x34
    9ca0:	fb01 f303 	mul.w	r3, r1, r3
    9ca4:	4413      	add	r3, r2
    9ca6:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d10a      	bne.n	9cc2 <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9cac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9cb0:	490b      	ldr	r1, [pc, #44]	; (9ce0 <Adc_UpdateStatusAfterGetStream+0x134>)
    9cb2:	4613      	mov	r3, r2
    9cb4:	009b      	lsls	r3, r3, #2
    9cb6:	4413      	add	r3, r2
    9cb8:	009b      	lsls	r3, r3, #2
    9cba:	440b      	add	r3, r1
    9cbc:	2200      	movs	r2, #0
    9cbe:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    9cc0:	e009      	b.n	9cd6 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9cc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9cc6:	4906      	ldr	r1, [pc, #24]	; (9ce0 <Adc_UpdateStatusAfterGetStream+0x134>)
    9cc8:	4613      	mov	r3, r2
    9cca:	009b      	lsls	r3, r3, #2
    9ccc:	4413      	add	r3, r2
    9cce:	009b      	lsls	r3, r3, #2
    9cd0:	440b      	add	r3, r1
    9cd2:	2201      	movs	r2, #1
    9cd4:	601a      	str	r2, [r3, #0]
}
    9cd6:	bf00      	nop
    9cd8:	b004      	add	sp, #16
    9cda:	4770      	bx	lr
    9cdc:	1fff8d40 	.word	0x1fff8d40
    9ce0:	1fff8d48 	.word	0x1fff8d48

00009ce4 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    9ce4:	b500      	push	{lr}
    9ce6:	b085      	sub	sp, #20
    9ce8:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    9cea:	f002 fb43 	bl	c374 <Adc_GetCoreID>
    9cee:	4603      	mov	r3, r0
    9cf0:	f88d 300b 	strb.w	r3, [sp, #11]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9cf4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cf8:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        ValidStatus = Adc_ValidateGloballCall(ADC_INIT_ID, CoreId);
    9cfc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d00:	b2db      	uxtb	r3, r3
    9d02:	4619      	mov	r1, r3
    9d04:	2000      	movs	r0, #0
    9d06:	f7fe fe5e 	bl	89c6 <Adc_ValidateGloballCall>
    9d0a:	4603      	mov	r3, r0
    9d0c:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_OK == ValidStatus)
    9d10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d14c      	bne.n	9db2 <Adc_Init+0xce>
        {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON)
            ValidStatus = Adc_ValidatePtrInit(ConfigPtr);
    9d18:	9801      	ldr	r0, [sp, #4]
    9d1a:	f7fe fe8d 	bl	8a38 <Adc_ValidatePtrInit>
    9d1e:	4603      	mov	r3, r0
    9d20:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9d24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d28:	2b00      	cmp	r3, #0
    9d2a:	d142      	bne.n	9db2 <Adc_Init+0xce>
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    9d2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d30:	b2db      	uxtb	r3, r3
    9d32:	4619      	mov	r1, r3
    9d34:	9801      	ldr	r0, [sp, #4]
    9d36:	f7ff fb9b 	bl	9470 <Adc_CheckCurrentCoreId>
    9d3a:	4603      	mov	r3, r0
    9d3c:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    9d40:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d44:	2b00      	cmp	r3, #0
    9d46:	d12d      	bne.n	9da4 <Adc_Init+0xc0>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    9d48:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d4c:	b2db      	uxtb	r3, r3
    9d4e:	4619      	mov	r1, r3
    9d50:	4a20      	ldr	r2, [pc, #128]	; (9dd4 <Adc_Init+0xf0>)
    9d52:	9b01      	ldr	r3, [sp, #4]
    9d54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    9d58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d5c:	b2db      	uxtb	r3, r3
    9d5e:	4618      	mov	r0, r3
    9d60:	f7ff fb36 	bl	93d0 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    9d64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d68:	b2db      	uxtb	r3, r3
    9d6a:	4618      	mov	r0, r3
    9d6c:	f7ff fac6 	bl	92fc <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    9d70:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d74:	b2db      	uxtb	r3, r3
    9d76:	461a      	mov	r2, r3
    9d78:	4b16      	ldr	r3, [pc, #88]	; (9dd4 <Adc_Init+0xf0>)
    9d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d7e:	681b      	ldr	r3, [r3, #0]
    9d80:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9d84:	4611      	mov	r1, r2
    9d86:	4618      	mov	r0, r3
    9d88:	f002 f848 	bl	be1c <Adc_Ipw_Init>
    9d8c:	4603      	mov	r3, r0
    9d8e:	f88d 300c 	strb.w	r3, [sp, #12]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    9d92:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9d96:	2b01      	cmp	r3, #1
    9d98:	d10b      	bne.n	9db2 <Adc_Init+0xce>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    9d9a:	212b      	movs	r1, #43	; 0x2b
    9d9c:	2000      	movs	r0, #0
    9d9e:	f7fe fde2 	bl	8966 <Adc_ReportDetRuntimeError>
    9da2:	e006      	b.n	9db2 <Adc_Init+0xce>
#endif /* ((ADC_ENABLE_TEMPSENSE_API == STD_ON) && (ADC_POWER_ON_TEMPSENSE == STD_ON)) */
                }
#if (ADC_DEV_ERROR_DETECT == STD_ON)
                else
                {
                    ValidStatus = (Std_ReturnType)E_NOT_OK;
    9da4:	2301      	movs	r3, #1
    9da6:	f88d 300f 	strb.w	r3, [sp, #15]
                    /* CPR_RTD_00420.adc */
                    Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9daa:	210e      	movs	r1, #14
    9dac:	2000      	movs	r0, #0
    9dae:	f7fe fdc5 	bl	893c <Adc_ReportDetError>
            }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        }
        if ((Std_ReturnType)E_OK == ValidStatus)
    9db2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d108      	bne.n	9dcc <Adc_Init+0xe8>
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
    9dba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9dbe:	b2da      	uxtb	r2, r3
    9dc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9dc4:	2100      	movs	r1, #0
    9dc6:	4618      	mov	r0, r3
    9dc8:	f7fe ff88 	bl	8cdc <Adc_EndValidateGloballCall>
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    9dcc:	bf00      	nop
    9dce:	b005      	add	sp, #20
    9dd0:	f85d fb04 	ldr.w	pc, [sp], #4
    9dd4:	1fff8d40 	.word	0x1fff8d40

00009dd8 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    9dd8:	b500      	push	{lr}
    9dda:	b085      	sub	sp, #20
    9ddc:	4603      	mov	r3, r0
    9dde:	9100      	str	r1, [sp, #0]
    9de0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    9de4:	2301      	movs	r3, #1
    9de6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_GroupType GroupIndex;
    const Adc_GroupConfigurationType * GroupPtr = NULL_PTR;
#endif /* ADC_DMA_SUPPORTED */
#if ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED)))
    volatile uint8 CoreId;
    CoreId = Adc_GetCoreID();
    9dea:	f002 fac3 	bl	c374 <Adc_GetCoreID>
    9dee:	4603      	mov	r3, r0
    9df0:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED))) */
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_SETUPRESULTBUFFER_ID, Group, CoreId))
    9df4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9df8:	b2da      	uxtb	r2, r3
    9dfa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9dfe:	4619      	mov	r1, r3
    9e00:	200c      	movs	r0, #12
    9e02:	f7ff f9a7 	bl	9154 <Adc_ValidateCallAndGroup>
    9e06:	4603      	mov	r3, r0
    9e08:	2b00      	cmp	r3, #0
    9e0a:	d11c      	bne.n	9e46 <Adc_SetupResultBuffer+0x6e>
           to avoid false detection of CWE AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK */
        GroupPtr = &Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex];
#endif /* ADC_DMA_SUPPORTED */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
    9e0c:	9900      	ldr	r1, [sp, #0]
    9e0e:	200c      	movs	r0, #12
    9e10:	f7fe fe28 	bl	8a64 <Adc_ValidatePtr>
    9e14:	4603      	mov	r3, r0
    9e16:	2b00      	cmp	r3, #0
    9e18:	d115      	bne.n	9e46 <Adc_SetupResultBuffer+0x6e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    9e1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9e1e:	4618      	mov	r0, r3
    9e20:	f7ff f88a 	bl	8f38 <Adc_ValidateSetupBufferNotBusy>
    9e24:	4603      	mov	r3, r0
    9e26:	2b00      	cmp	r3, #0
    9e28:	d10d      	bne.n	9e46 <Adc_SetupResultBuffer+0x6e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    9e2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e2e:	4909      	ldr	r1, [pc, #36]	; (9e54 <Adc_SetupResultBuffer+0x7c>)
    9e30:	4613      	mov	r3, r2
    9e32:	009b      	lsls	r3, r3, #2
    9e34:	4413      	add	r3, r2
    9e36:	009b      	lsls	r3, r3, #2
    9e38:	440b      	add	r3, r1
    9e3a:	330c      	adds	r3, #12
    9e3c:	9a00      	ldr	r2, [sp, #0]
    9e3e:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    9e40:	2300      	movs	r3, #0
    9e42:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    9e46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9e4a:	4618      	mov	r0, r3
    9e4c:	b005      	add	sp, #20
    9e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e52:	bf00      	nop
    9e54:	1fff8d48 	.word	0x1fff8d48

00009e58 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    9e58:	b500      	push	{lr}
    9e5a:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9e5c:	2300      	movs	r3, #0
    9e5e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    9e62:	f002 fa87 	bl	c374 <Adc_GetCoreID>
    9e66:	4603      	mov	r3, r0
    9e68:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9e6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e70:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    9e74:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e78:	b2db      	uxtb	r3, r3
    9e7a:	4619      	mov	r1, r3
    9e7c:	2001      	movs	r0, #1
    9e7e:	f7fe fda2 	bl	89c6 <Adc_ValidateGloballCall>
    9e82:	4603      	mov	r3, r0
    9e84:	f88d 3006 	strb.w	r3, [sp, #6]
    if ((Std_ReturnType)E_OK == ValidStatus)
    9e88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d160      	bne.n	9f52 <Adc_DeInit+0xfa>
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    9e90:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e94:	b2db      	uxtb	r3, r3
    9e96:	461a      	mov	r2, r3
    9e98:	4b34      	ldr	r3, [pc, #208]	; (9f6c <Adc_DeInit+0x114>)
    9e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9ea2:	4611      	mov	r1, r2
    9ea4:	4618      	mov	r0, r3
    9ea6:	f7ff fae3 	bl	9470 <Adc_CheckCurrentCoreId>
    9eaa:	4603      	mov	r3, r0
    9eac:	f88d 3004 	strb.w	r3, [sp, #4]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9eb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d148      	bne.n	9f4a <Adc_DeInit+0xf2>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    9eb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9ebc:	b2db      	uxtb	r3, r3
    9ebe:	4618      	mov	r0, r3
    9ec0:	f7fe ffec 	bl	8e9c <Adc_ValidateDeInitNotBusy>
    9ec4:	4603      	mov	r3, r0
    9ec6:	f88d 3006 	strb.w	r3, [sp, #6]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9eca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d13f      	bne.n	9f52 <Adc_DeInit+0xfa>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    9ed2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9ed6:	b2db      	uxtb	r3, r3
    9ed8:	4618      	mov	r0, r3
    9eda:	f001 ffe4 	bl	bea6 <Adc_Ipw_DeInit>
    9ede:	4603      	mov	r3, r0
    9ee0:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    9ee4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9ee8:	2b01      	cmp	r3, #1
    9eea:	d103      	bne.n	9ef4 <Adc_DeInit+0x9c>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    9eec:	212b      	movs	r1, #43	; 0x2b
    9eee:	2001      	movs	r0, #1
    9ef0:	f7fe fd39 	bl	8966 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9ef4:	2300      	movs	r3, #0
    9ef6:	f88d 3007 	strb.w	r3, [sp, #7]
    9efa:	e019      	b.n	9f30 <Adc_DeInit+0xd8>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9efc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f00:	b2db      	uxtb	r3, r3
    9f02:	461a      	mov	r2, r3
    9f04:	4b19      	ldr	r3, [pc, #100]	; (9f6c <Adc_DeInit+0x114>)
    9f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f0a:	681a      	ldr	r2, [r3, #0]
    9f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f10:	4413      	add	r3, r2
    9f12:	7f9b      	ldrb	r3, [r3, #30]
    9f14:	2b01      	cmp	r3, #1
    9f16:	d106      	bne.n	9f26 <Adc_DeInit+0xce>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    9f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f1c:	4a14      	ldr	r2, [pc, #80]	; (9f70 <Adc_DeInit+0x118>)
    9f1e:	00db      	lsls	r3, r3, #3
    9f20:	4413      	add	r3, r2
    9f22:	2200      	movs	r2, #0
    9f24:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f2a:	3301      	adds	r3, #1
    9f2c:	f88d 3007 	strb.w	r3, [sp, #7]
    9f30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f34:	2b01      	cmp	r3, #1
    9f36:	d9e1      	bls.n	9efc <Adc_DeInit+0xa4>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    9f38:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f3c:	b2db      	uxtb	r3, r3
    9f3e:	4619      	mov	r1, r3
    9f40:	4b0a      	ldr	r3, [pc, #40]	; (9f6c <Adc_DeInit+0x114>)
    9f42:	2200      	movs	r2, #0
    9f44:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    9f48:	e003      	b.n	9f52 <Adc_DeInit+0xfa>
        }
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9f4a:	210e      	movs	r1, #14
    9f4c:	2001      	movs	r0, #1
    9f4e:	f7fe fcf5 	bl	893c <Adc_ReportDetError>
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
    9f52:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f56:	b2da      	uxtb	r2, r3
    9f58:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f5c:	2101      	movs	r1, #1
    9f5e:	4618      	mov	r0, r3
    9f60:	f7fe febc 	bl	8cdc <Adc_EndValidateGloballCall>
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    9f64:	bf00      	nop
    9f66:	b003      	add	sp, #12
    9f68:	f85d fb04 	ldr.w	pc, [sp], #4
    9f6c:	1fff8d40 	.word	0x1fff8d40
    9f70:	1fff8d70 	.word	0x1fff8d70

00009f74 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    9f74:	b500      	push	{lr}
    9f76:	b085      	sub	sp, #20
    9f78:	4603      	mov	r3, r0
    9f7a:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    9f7e:	2300      	movs	r3, #0
    9f80:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9f84:	2300      	movs	r3, #0
    9f86:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    9f8a:	f002 f9f3 	bl	c374 <Adc_GetCoreID>
    9f8e:	4603      	mov	r3, r0
    9f90:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    9f94:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9f98:	b2da      	uxtb	r2, r3
    9f9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9f9e:	4619      	mov	r1, r3
    9fa0:	2002      	movs	r0, #2
    9fa2:	f7ff f8d7 	bl	9154 <Adc_ValidateCallAndGroup>
    9fa6:	4603      	mov	r3, r0
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d141      	bne.n	a030 <Adc_StartGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9fac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	461a      	mov	r2, r3
    9fb4:	4b20      	ldr	r3, [pc, #128]	; (a038 <Adc_StartGroupConversion+0xc4>)
    9fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fba:	68da      	ldr	r2, [r3, #12]
    9fbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9fc0:	005b      	lsls	r3, r3, #1
    9fc2:	4413      	add	r3, r2
    9fc4:	881b      	ldrh	r3, [r3, #0]
    9fc6:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    9fca:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fce:	b2da      	uxtb	r2, r3
    9fd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9fd4:	4611      	mov	r1, r2
    9fd6:	4618      	mov	r0, r3
    9fd8:	f7fe ffd2 	bl	8f80 <Adc_ValidateStateStartGroupConvNotBusy>
    9fdc:	4603      	mov	r3, r0
    9fde:	2b00      	cmp	r3, #0
    9fe0:	d126      	bne.n	a030 <Adc_StartGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STARTGROUPCONVERSION_ID,
    9fe2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fe6:	b2db      	uxtb	r3, r3
    9fe8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9fec:	2107      	movs	r1, #7
    9fee:	2002      	movs	r0, #2
    9ff0:	f7fe fe1c 	bl	8c2c <Adc_ValidateExtraParams>
    9ff4:	4603      	mov	r3, r0
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d11a      	bne.n	a030 <Adc_StartGroupConversion+0xbc>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    9ffa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9ffe:	b2db      	uxtb	r3, r3
    a000:	461a      	mov	r2, r3
    a002:	4b0d      	ldr	r3, [pc, #52]	; (a038 <Adc_StartGroupConversion+0xc4>)
    a004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a008:	685a      	ldr	r2, [r3, #4]
    a00a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a00e:	2134      	movs	r1, #52	; 0x34
    a010:	fb01 f303 	mul.w	r3, r1, r3
    a014:	4413      	add	r3, r2
    a016:	789b      	ldrb	r3, [r3, #2]
    a018:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    a01c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a020:	b2da      	uxtb	r2, r3
    a022:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a026:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a02a:	4618      	mov	r0, r3
    a02c:	f7ff fa53 	bl	94d6 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a030:	bf00      	nop
    a032:	b005      	add	sp, #20
    a034:	f85d fb04 	ldr.w	pc, [sp], #4
    a038:	1fff8d40 	.word	0x1fff8d40

0000a03c <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    a03c:	b500      	push	{lr}
    a03e:	b085      	sub	sp, #20
    a040:	4603      	mov	r3, r0
    a042:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a046:	2300      	movs	r3, #0
    a048:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    a04c:	2300      	movs	r3, #0
    a04e:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    a052:	f002 f98f 	bl	c374 <Adc_GetCoreID>
    a056:	4603      	mov	r3, r0
    a058:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a05c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a060:	b2da      	uxtb	r2, r3
    a062:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a066:	4619      	mov	r1, r3
    a068:	2003      	movs	r0, #3
    a06a:	f7ff f873 	bl	9154 <Adc_ValidateCallAndGroup>
    a06e:	4603      	mov	r3, r0
    a070:	2b00      	cmp	r3, #0
    a072:	d141      	bne.n	a0f8 <Adc_StopGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a074:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a078:	b2da      	uxtb	r2, r3
    a07a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a07e:	4619      	mov	r1, r3
    a080:	2003      	movs	r0, #3
    a082:	f7fe fff5 	bl	9070 <Adc_ValidateStateNotIdle>
    a086:	4603      	mov	r3, r0
    a088:	2b00      	cmp	r3, #0
    a08a:	d135      	bne.n	a0f8 <Adc_StopGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STOPGROUPCONVERSION_ID,
    a08c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a090:	b2db      	uxtb	r3, r3
    a092:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a096:	2102      	movs	r1, #2
    a098:	2003      	movs	r0, #3
    a09a:	f7fe fdc7 	bl	8c2c <Adc_ValidateExtraParams>
    a09e:	4603      	mov	r3, r0
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d129      	bne.n	a0f8 <Adc_StopGroupConversion+0xbc>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0a8:	b2db      	uxtb	r3, r3
    a0aa:	461a      	mov	r2, r3
    a0ac:	4b14      	ldr	r3, [pc, #80]	; (a100 <Adc_StopGroupConversion+0xc4>)
    a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a0b2:	68da      	ldr	r2, [r3, #12]
    a0b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a0b8:	005b      	lsls	r3, r3, #1
    a0ba:	4413      	add	r3, r2
    a0bc:	881b      	ldrh	r3, [r3, #0]
    a0be:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    a0c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0c6:	b2db      	uxtb	r3, r3
    a0c8:	461a      	mov	r2, r3
    a0ca:	4b0d      	ldr	r3, [pc, #52]	; (a100 <Adc_StopGroupConversion+0xc4>)
    a0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a0d0:	685a      	ldr	r2, [r3, #4]
    a0d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a0d6:	2134      	movs	r1, #52	; 0x34
    a0d8:	fb01 f303 	mul.w	r3, r1, r3
    a0dc:	4413      	add	r3, r2
    a0de:	789b      	ldrb	r3, [r3, #2]
    a0e0:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    a0e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0e8:	b2da      	uxtb	r2, r3
    a0ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a0ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a0f2:	4618      	mov	r0, r3
    a0f4:	f7ff fae8 	bl	96c8 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a0f8:	bf00      	nop
    a0fa:	b005      	add	sp, #20
    a0fc:	f85d fb04 	ldr.w	pc, [sp], #4
    a100:	1fff8d40 	.word	0x1fff8d40

0000a104 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    a104:	b500      	push	{lr}
    a106:	b085      	sub	sp, #20
    a108:	4603      	mov	r3, r0
    a10a:	9100      	str	r1, [sp, #0]
    a10c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    a110:	2301      	movs	r3, #1
    a112:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    a116:	2301      	movs	r3, #1
    a118:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    a11c:	f002 f92a 	bl	c374 <Adc_GetCoreID>
    a120:	4603      	mov	r3, r0
    a122:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a126:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a12a:	b2da      	uxtb	r2, r3
    a12c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a130:	4619      	mov	r1, r3
    a132:	2004      	movs	r0, #4
    a134:	f7ff f80e 	bl	9154 <Adc_ValidateCallAndGroup>
    a138:	4603      	mov	r3, r0
    a13a:	2b00      	cmp	r3, #0
    a13c:	d134      	bne.n	a1a8 <Adc_ReadGroup+0xa4>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
    a13e:	9900      	ldr	r1, [sp, #0]
    a140:	2004      	movs	r0, #4
    a142:	f7fe fc8f 	bl	8a64 <Adc_ValidatePtr>
    a146:	4603      	mov	r3, r0
    a148:	2b00      	cmp	r3, #0
    a14a:	d12d      	bne.n	a1a8 <Adc_ReadGroup+0xa4>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a14c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a150:	b2da      	uxtb	r2, r3
    a152:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a156:	4619      	mov	r1, r3
    a158:	2004      	movs	r0, #4
    a15a:	f7fe ff89 	bl	9070 <Adc_ValidateStateNotIdle>
    a15e:	4603      	mov	r3, r0
    a160:	2b00      	cmp	r3, #0
    a162:	d121      	bne.n	a1a8 <Adc_ReadGroup+0xa4>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    a164:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a168:	b2db      	uxtb	r3, r3
    a16a:	f10d 020d 	add.w	r2, sp, #13
    a16e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a172:	9900      	ldr	r1, [sp, #0]
    a174:	f002 f857 	bl	c226 <Adc_Ipw_ReadGroup>
    a178:	4603      	mov	r3, r0
    a17a:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    a17e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a182:	2b00      	cmp	r3, #0
    a184:	d006      	beq.n	a194 <Adc_ReadGroup+0x90>
    a186:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a18a:	f083 0301 	eor.w	r3, r3, #1
    a18e:	b2db      	uxtb	r3, r3
    a190:	2b00      	cmp	r3, #0
    a192:	d009      	beq.n	a1a8 <Adc_ReadGroup+0xa4>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    a194:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a198:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a19c:	b2da      	uxtb	r2, r3
    a19e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1a2:	4618      	mov	r0, r3
    a1a4:	f7ff fb42 	bl	982c <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    a1a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a1ac:	4618      	mov	r0, r3
    a1ae:	b005      	add	sp, #20
    a1b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000a1b4 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    a1b4:	b500      	push	{lr}
    a1b6:	b085      	sub	sp, #20
    a1b8:	4603      	mov	r3, r0
    a1ba:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    a1be:	2300      	movs	r3, #0
    a1c0:	9303      	str	r3, [sp, #12]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    CoreId = Adc_GetCoreID();
    a1c2:	f002 f8d7 	bl	c374 <Adc_GetCoreID>
    a1c6:	4603      	mov	r3, r0
    a1c8:	f88d 300b 	strb.w	r3, [sp, #11]
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    a1cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1d0:	b2da      	uxtb	r2, r3
    a1d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1d6:	4619      	mov	r1, r3
    a1d8:	2009      	movs	r0, #9
    a1da:	f7fe ffbb 	bl	9154 <Adc_ValidateCallAndGroup>
    a1de:	4603      	mov	r3, r0
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	d109      	bne.n	a1f8 <Adc_GetGroupStatus+0x44>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    a1e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a1e8:	4906      	ldr	r1, [pc, #24]	; (a204 <Adc_GetGroupStatus+0x50>)
    a1ea:	4613      	mov	r3, r2
    a1ec:	009b      	lsls	r3, r3, #2
    a1ee:	4413      	add	r3, r2
    a1f0:	009b      	lsls	r3, r3, #2
    a1f2:	440b      	add	r3, r1
    a1f4:	681b      	ldr	r3, [r3, #0]
    a1f6:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    a1f8:	9b03      	ldr	r3, [sp, #12]
}
    a1fa:	4618      	mov	r0, r3
    a1fc:	b005      	add	sp, #20
    a1fe:	f85d fb04 	ldr.w	pc, [sp], #4
    a202:	bf00      	nop
    a204:	1fff8d48 	.word	0x1fff8d48

0000a208 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    a208:	b500      	push	{lr}
    a20a:	b085      	sub	sp, #20
    a20c:	4603      	mov	r3, r0
    a20e:	9100      	str	r1, [sp, #0]
    a210:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    a214:	f002 f8ae 	bl	c374 <Adc_GetCoreID>
    a218:	4603      	mov	r3, r0
    a21a:	f88d 3008 	strb.w	r3, [sp, #8]
    Adc_GroupType GroupIndex = 0U;
    a21e:	2300      	movs	r3, #0
    a220:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    a224:	2300      	movs	r3, #0
    a226:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    a22a:	2300      	movs	r3, #0
    a22c:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    Adc_ChannelIndexType ChannelCount;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    Std_ReturnType ValidStatus = Adc_ValidateCallAndGroup(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId);
    a230:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a234:	b2da      	uxtb	r2, r3
    a236:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a23a:	4619      	mov	r1, r3
    a23c:	200b      	movs	r0, #11
    a23e:	f7fe ff89 	bl	9154 <Adc_ValidateCallAndGroup>
    a242:	4603      	mov	r3, r0
    a244:	f88d 3009 	strb.w	r3, [sp, #9]
    if (ValidStatus == (Std_ReturnType)E_OK)
    a248:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a24c:	2b00      	cmp	r3, #0
    a24e:	f040 809f 	bne.w	a390 <Adc_GetStreamLastPointer+0x188>
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    a252:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a256:	b2da      	uxtb	r2, r3
    a258:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a25c:	4619      	mov	r1, r3
    a25e:	200b      	movs	r0, #11
    a260:	f7fe ff06 	bl	9070 <Adc_ValidateStateNotIdle>
    a264:	4603      	mov	r3, r0
    a266:	2b00      	cmp	r3, #0
    a268:	f040 808e 	bne.w	a388 <Adc_GetStreamLastPointer+0x180>
        {
            *PtrToSamplePtr = NULL_PTR;
    a26c:	9b00      	ldr	r3, [sp, #0]
    a26e:	2200      	movs	r2, #0
    a270:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a272:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a276:	494b      	ldr	r1, [pc, #300]	; (a3a4 <Adc_GetStreamLastPointer+0x19c>)
    a278:	4613      	mov	r3, r2
    a27a:	009b      	lsls	r3, r3, #2
    a27c:	4413      	add	r3, r2
    a27e:	009b      	lsls	r3, r3, #2
    a280:	440b      	add	r3, r1
    a282:	681b      	ldr	r3, [r3, #0]
    a284:	2b00      	cmp	r3, #0
    a286:	f000 8086 	beq.w	a396 <Adc_GetStreamLastPointer+0x18e>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    a28a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a28e:	4945      	ldr	r1, [pc, #276]	; (a3a4 <Adc_GetStreamLastPointer+0x19c>)
    a290:	4613      	mov	r3, r2
    a292:	009b      	lsls	r3, r3, #2
    a294:	4413      	add	r3, r2
    a296:	009b      	lsls	r3, r3, #2
    a298:	440b      	add	r3, r1
    a29a:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a29c:	2b01      	cmp	r3, #1
    a29e:	d07a      	beq.n	a396 <Adc_GetStreamLastPointer+0x18e>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a2a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a2a4:	b2db      	uxtb	r3, r3
    a2a6:	461a      	mov	r2, r3
    a2a8:	4b3f      	ldr	r3, [pc, #252]	; (a3a8 <Adc_GetStreamLastPointer+0x1a0>)
    a2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2ae:	68da      	ldr	r2, [r3, #12]
    a2b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a2b4:	005b      	lsls	r3, r3, #1
    a2b6:	4413      	add	r3, r2
    a2b8:	881b      	ldrh	r3, [r3, #0]
    a2ba:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    a2be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a2c2:	4938      	ldr	r1, [pc, #224]	; (a3a4 <Adc_GetStreamLastPointer+0x19c>)
    a2c4:	4613      	mov	r3, r2
    a2c6:	009b      	lsls	r3, r3, #2
    a2c8:	4413      	add	r3, r2
    a2ca:	009b      	lsls	r3, r3, #2
    a2cc:	440b      	add	r3, r1
    a2ce:	3308      	adds	r3, #8
    a2d0:	881b      	ldrh	r3, [r3, #0]
    a2d2:	b29b      	uxth	r3, r3
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d123      	bne.n	a320 <Adc_GetStreamLastPointer+0x118>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    a2d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a2dc:	b2db      	uxtb	r3, r3
    a2de:	461a      	mov	r2, r3
    a2e0:	4b31      	ldr	r3, [pc, #196]	; (a3a8 <Adc_GetStreamLastPointer+0x1a0>)
    a2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2e6:	685a      	ldr	r2, [r3, #4]
    a2e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a2ec:	2134      	movs	r1, #52	; 0x34
    a2ee:	fb01 f303 	mul.w	r3, r1, r3
    a2f2:	4413      	add	r3, r2
    a2f4:	8b9b      	ldrh	r3, [r3, #28]
    a2f6:	3b01      	subs	r3, #1
    a2f8:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    a2fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a300:	b2db      	uxtb	r3, r3
    a302:	461a      	mov	r2, r3
    a304:	4b28      	ldr	r3, [pc, #160]	; (a3a8 <Adc_GetStreamLastPointer+0x1a0>)
    a306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a30a:	685a      	ldr	r2, [r3, #4]
    a30c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a310:	2134      	movs	r1, #52	; 0x34
    a312:	fb01 f303 	mul.w	r3, r1, r3
    a316:	4413      	add	r3, r2
    a318:	8b9b      	ldrh	r3, [r3, #28]
    a31a:	f8ad 300e 	strh.w	r3, [sp, #14]
    a31e:	e019      	b.n	a354 <Adc_GetStreamLastPointer+0x14c>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    a320:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a324:	491f      	ldr	r1, [pc, #124]	; (a3a4 <Adc_GetStreamLastPointer+0x19c>)
    a326:	4613      	mov	r3, r2
    a328:	009b      	lsls	r3, r3, #2
    a32a:	4413      	add	r3, r2
    a32c:	009b      	lsls	r3, r3, #2
    a32e:	440b      	add	r3, r1
    a330:	3308      	adds	r3, #8
    a332:	881b      	ldrh	r3, [r3, #0]
    a334:	b29b      	uxth	r3, r3
    a336:	3b01      	subs	r3, #1
    a338:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    a33c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a340:	4918      	ldr	r1, [pc, #96]	; (a3a4 <Adc_GetStreamLastPointer+0x19c>)
    a342:	4613      	mov	r3, r2
    a344:	009b      	lsls	r3, r3, #2
    a346:	4413      	add	r3, r2
    a348:	009b      	lsls	r3, r3, #2
    a34a:	440b      	add	r3, r1
    a34c:	3308      	adds	r3, #8
    a34e:	881b      	ldrh	r3, [r3, #0]
    a350:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    a354:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a358:	4912      	ldr	r1, [pc, #72]	; (a3a4 <Adc_GetStreamLastPointer+0x19c>)
    a35a:	4613      	mov	r3, r2
    a35c:	009b      	lsls	r3, r3, #2
    a35e:	4413      	add	r3, r2
    a360:	009b      	lsls	r3, r3, #2
    a362:	440b      	add	r3, r1
    a364:	330c      	adds	r3, #12
    a366:	681a      	ldr	r2, [r3, #0]
    a368:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a36c:	005b      	lsls	r3, r3, #1
    a36e:	441a      	add	r2, r3
    a370:	9b00      	ldr	r3, [sp, #0]
    a372:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    a374:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a378:	b2da      	uxtb	r2, r3
    a37a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a37e:	4611      	mov	r1, r2
    a380:	4618      	mov	r0, r3
    a382:	f7ff fc13 	bl	9bac <Adc_UpdateStatusAfterGetStream>
    a386:	e006      	b.n	a396 <Adc_GetStreamLastPointer+0x18e>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    a388:	9b00      	ldr	r3, [sp, #0]
    a38a:	2200      	movs	r2, #0
    a38c:	601a      	str	r2, [r3, #0]
    a38e:	e002      	b.n	a396 <Adc_GetStreamLastPointer+0x18e>
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
    else
    {
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    a390:	9b00      	ldr	r3, [sp, #0]
    a392:	2200      	movs	r2, #0
    a394:	601a      	str	r2, [r3, #0]
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    a396:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a39a:	4618      	mov	r0, r3
    a39c:	b005      	add	sp, #20
    a39e:	f85d fb04 	ldr.w	pc, [sp], #4
    a3a2:	bf00      	nop
    a3a4:	1fff8d48 	.word	0x1fff8d48
    a3a8:	1fff8d40 	.word	0x1fff8d40

0000a3ac <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    a3ac:	b500      	push	{lr}
    a3ae:	b083      	sub	sp, #12
    a3b0:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    a3b2:	9901      	ldr	r1, [sp, #4]
    a3b4:	200a      	movs	r0, #10
    a3b6:	f7fe fb55 	bl	8a64 <Adc_ValidatePtr>
    a3ba:	4603      	mov	r3, r0
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d10e      	bne.n	a3de <Adc_GetVersionInfo+0x32>
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    a3c0:	9b01      	ldr	r3, [sp, #4]
    a3c2:	222b      	movs	r2, #43	; 0x2b
    a3c4:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    a3c6:	9b01      	ldr	r3, [sp, #4]
    a3c8:	227b      	movs	r2, #123	; 0x7b
    a3ca:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    a3cc:	9b01      	ldr	r3, [sp, #4]
    a3ce:	2202      	movs	r2, #2
    a3d0:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    a3d2:	9b01      	ldr	r3, [sp, #4]
    a3d4:	2200      	movs	r2, #0
    a3d6:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    a3d8:	9b01      	ldr	r3, [sp, #4]
    a3da:	2200      	movs	r2, #0
    a3dc:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    a3de:	bf00      	nop
    a3e0:	b003      	add	sp, #12
    a3e2:	f85d fb04 	ldr.w	pc, [sp], #4

0000a3e6 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    a3e6:	b500      	push	{lr}
    a3e8:	b085      	sub	sp, #20
    a3ea:	4603      	mov	r3, r0
    a3ec:	9100      	str	r1, [sp, #0]
    a3ee:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    a3f2:	2300      	movs	r3, #0
    a3f4:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    a3f8:	f001 ffbc 	bl	c374 <Adc_GetCoreID>
    a3fc:	4603      	mov	r3, r0
    a3fe:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndUnit(ADC_CALIBRATE_ID, Unit, CoreId))
    a402:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a406:	b2da      	uxtb	r2, r3
    a408:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a40c:	4619      	mov	r1, r3
    a40e:	2029      	movs	r0, #41	; 0x29
    a410:	f7fe ff16 	bl	9240 <Adc_ValidateCallAndUnit>
    a414:	4603      	mov	r3, r0
    a416:	2b00      	cmp	r3, #0
    a418:	d134      	bne.n	a484 <Adc_Calibrate+0x9e>
    {
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
    a41a:	9900      	ldr	r1, [sp, #0]
    a41c:	2029      	movs	r0, #41	; 0x29
    a41e:	f7fe fb21 	bl	8a64 <Adc_ValidatePtr>
    a422:	4603      	mov	r3, r0
    a424:	2b00      	cmp	r3, #0
    a426:	d12d      	bne.n	a484 <Adc_Calibrate+0x9e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    a428:	9b00      	ldr	r3, [sp, #0]
    a42a:	2201      	movs	r2, #1
    a42c:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    a42e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a432:	2129      	movs	r1, #41	; 0x29
    a434:	4618      	mov	r0, r3
    a436:	f7fe fc75 	bl	8d24 <Adc_ValidateNotBusyNoQueue>
    a43a:	4603      	mov	r3, r0
    a43c:	2b00      	cmp	r3, #0
    a43e:	d115      	bne.n	a46c <Adc_Calibrate+0x86>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    a440:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a444:	b2db      	uxtb	r3, r3
    a446:	4619      	mov	r1, r3
    a448:	2029      	movs	r0, #41	; 0x29
    a44a:	f7fe fcd5 	bl	8df8 <Adc_ValidateCheckGroupNotConversion>
    a44e:	4603      	mov	r3, r0
    a450:	2b00      	cmp	r3, #0
    a452:	d10b      	bne.n	a46c <Adc_Calibrate+0x86>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    a454:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a458:	b2da      	uxtb	r2, r3
    a45a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a45e:	9900      	ldr	r1, [sp, #0]
    a460:	4618      	mov	r0, r3
    a462:	f001 ff5d 	bl	c320 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    a466:	2301      	movs	r3, #1
    a468:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    a46c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a470:	2b00      	cmp	r3, #0
    a472:	d007      	beq.n	a484 <Adc_Calibrate+0x9e>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    a474:	9b00      	ldr	r3, [sp, #0]
    a476:	781b      	ldrb	r3, [r3, #0]
    a478:	2b01      	cmp	r3, #1
    a47a:	d103      	bne.n	a484 <Adc_Calibrate+0x9e>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    a47c:	212b      	movs	r1, #43	; 0x2b
    a47e:	2029      	movs	r0, #41	; 0x29
    a480:	f7fe fa71 	bl	8966 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    a484:	bf00      	nop
    a486:	b005      	add	sp, #20
    a488:	f85d fb04 	ldr.w	pc, [sp], #4

0000a48c <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    a48c:	b086      	sub	sp, #24
    a48e:	9003      	str	r0, [sp, #12]
    a490:	9102      	str	r1, [sp, #8]
    a492:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    a494:	9b03      	ldr	r3, [sp, #12]
    a496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a49a:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    a49c:	9b02      	ldr	r3, [sp, #8]
    a49e:	43db      	mvns	r3, r3
    a4a0:	9a05      	ldr	r2, [sp, #20]
    a4a2:	4013      	ands	r3, r2
    a4a4:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    a4a6:	9a05      	ldr	r2, [sp, #20]
    a4a8:	9b01      	ldr	r3, [sp, #4]
    a4aa:	4313      	orrs	r3, r2
    a4ac:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    a4ae:	9b03      	ldr	r3, [sp, #12]
    a4b0:	9a05      	ldr	r2, [sp, #20]
    a4b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a4b6:	bf00      	nop
    a4b8:	b006      	add	sp, #24
    a4ba:	4770      	bx	lr

0000a4bc <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    a4bc:	b086      	sub	sp, #24
    a4be:	9003      	str	r0, [sp, #12]
    a4c0:	9102      	str	r1, [sp, #8]
    a4c2:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    a4c4:	9b03      	ldr	r3, [sp, #12]
    a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a4c8:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    a4ca:	9b05      	ldr	r3, [sp, #20]
    a4cc:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    a4d0:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    a4d2:	9b02      	ldr	r3, [sp, #8]
    a4d4:	015b      	lsls	r3, r3, #5
    a4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
    a4da:	9a05      	ldr	r2, [sp, #20]
    a4dc:	4313      	orrs	r3, r2
    a4de:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    a4e0:	9b01      	ldr	r3, [sp, #4]
    a4e2:	f003 0303 	and.w	r3, r3, #3
    a4e6:	9a05      	ldr	r2, [sp, #20]
    a4e8:	4313      	orrs	r3, r2
    a4ea:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    a4ec:	9b03      	ldr	r3, [sp, #12]
    a4ee:	9a05      	ldr	r2, [sp, #20]
    a4f0:	641a      	str	r2, [r3, #64]	; 0x40
}
    a4f2:	bf00      	nop
    a4f4:	b006      	add	sp, #24
    a4f6:	4770      	bx	lr

0000a4f8 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    a4f8:	b084      	sub	sp, #16
    a4fa:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    a4fc:	2300      	movs	r3, #0
    a4fe:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    a500:	9b01      	ldr	r3, [sp, #4]
    a502:	095b      	lsrs	r3, r3, #5
    a504:	f003 0303 	and.w	r3, r3, #3
    a508:	2b03      	cmp	r3, #3
    a50a:	d00c      	beq.n	a526 <Adc_HwAcc_GetClockDivide+0x2e>
    a50c:	2b03      	cmp	r3, #3
    a50e:	d80d      	bhi.n	a52c <Adc_HwAcc_GetClockDivide+0x34>
    a510:	2b01      	cmp	r3, #1
    a512:	d002      	beq.n	a51a <Adc_HwAcc_GetClockDivide+0x22>
    a514:	2b02      	cmp	r3, #2
    a516:	d003      	beq.n	a520 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    a518:	e008      	b.n	a52c <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    a51a:	2301      	movs	r3, #1
    a51c:	9303      	str	r3, [sp, #12]
            break;
    a51e:	e006      	b.n	a52e <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    a520:	2302      	movs	r3, #2
    a522:	9303      	str	r3, [sp, #12]
            break;
    a524:	e003      	b.n	a52e <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    a526:	2303      	movs	r3, #3
    a528:	9303      	str	r3, [sp, #12]
            break;
    a52a:	e000      	b.n	a52e <Adc_HwAcc_GetClockDivide+0x36>
            break;
    a52c:	bf00      	nop
    }
    return ReturnValue;
    a52e:	9b03      	ldr	r3, [sp, #12]
}
    a530:	4618      	mov	r0, r3
    a532:	b004      	add	sp, #16
    a534:	4770      	bx	lr

0000a536 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    a536:	b084      	sub	sp, #16
    a538:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    a53a:	2300      	movs	r3, #0
    a53c:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    a53e:	9b01      	ldr	r3, [sp, #4]
    a540:	f003 0303 	and.w	r3, r3, #3
    a544:	2b03      	cmp	r3, #3
    a546:	d00c      	beq.n	a562 <Adc_HwAcc_GetInputClock+0x2c>
    a548:	2b03      	cmp	r3, #3
    a54a:	d80d      	bhi.n	a568 <Adc_HwAcc_GetInputClock+0x32>
    a54c:	2b01      	cmp	r3, #1
    a54e:	d002      	beq.n	a556 <Adc_HwAcc_GetInputClock+0x20>
    a550:	2b02      	cmp	r3, #2
    a552:	d003      	beq.n	a55c <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    a554:	e008      	b.n	a568 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    a556:	2301      	movs	r3, #1
    a558:	9303      	str	r3, [sp, #12]
            break;
    a55a:	e006      	b.n	a56a <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    a55c:	2302      	movs	r3, #2
    a55e:	9303      	str	r3, [sp, #12]
            break;
    a560:	e003      	b.n	a56a <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    a562:	2303      	movs	r3, #3
    a564:	9303      	str	r3, [sp, #12]
            break;
    a566:	e000      	b.n	a56a <Adc_HwAcc_GetInputClock+0x34>
            break;
    a568:	bf00      	nop
    }
    return ReturnValue;
    a56a:	9b03      	ldr	r3, [sp, #12]
}
    a56c:	4618      	mov	r0, r3
    a56e:	b004      	add	sp, #16
    a570:	4770      	bx	lr

0000a572 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    a572:	b084      	sub	sp, #16
    a574:	9001      	str	r0, [sp, #4]
    a576:	460b      	mov	r3, r1
    a578:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    a57c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a580:	2b00      	cmp	r3, #0
    a582:	d002      	beq.n	a58a <Adc_HwAcc_SetSampleTime+0x18>
    a584:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a588:	e000      	b.n	a58c <Adc_HwAcc_SetSampleTime+0x1a>
    a58a:	2301      	movs	r3, #1
    a58c:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    a590:	9b01      	ldr	r3, [sp, #4]
    a592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a594:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    a596:	9b02      	ldr	r3, [sp, #8]
    a598:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a59c:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    a59e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a5a2:	9a02      	ldr	r2, [sp, #8]
    a5a4:	4313      	orrs	r3, r2
    a5a6:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    a5a8:	9b01      	ldr	r3, [sp, #4]
    a5aa:	9a02      	ldr	r2, [sp, #8]
    a5ac:	645a      	str	r2, [r3, #68]	; 0x44
}
    a5ae:	bf00      	nop
    a5b0:	b004      	add	sp, #16
    a5b2:	4770      	bx	lr

0000a5b4 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    a5b4:	b086      	sub	sp, #24
    a5b6:	9003      	str	r0, [sp, #12]
    a5b8:	460b      	mov	r3, r1
    a5ba:	9201      	str	r2, [sp, #4]
    a5bc:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    a5c0:	9b03      	ldr	r3, [sp, #12]
    a5c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    a5c6:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    a5c8:	9b05      	ldr	r3, [sp, #20]
    a5ca:	f023 0307 	bic.w	r3, r3, #7
    a5ce:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    a5d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d001      	beq.n	a5dc <Adc_HwAcc_SetAveraging+0x28>
    a5d8:	2304      	movs	r3, #4
    a5da:	e000      	b.n	a5de <Adc_HwAcc_SetAveraging+0x2a>
    a5dc:	2300      	movs	r3, #0
    a5de:	9a05      	ldr	r2, [sp, #20]
    a5e0:	4313      	orrs	r3, r2
    a5e2:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    a5e4:	9b01      	ldr	r3, [sp, #4]
    a5e6:	f003 0303 	and.w	r3, r3, #3
    a5ea:	9a05      	ldr	r2, [sp, #20]
    a5ec:	4313      	orrs	r3, r2
    a5ee:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    a5f0:	9b03      	ldr	r3, [sp, #12]
    a5f2:	9a05      	ldr	r2, [sp, #20]
    a5f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a5f8:	bf00      	nop
    a5fa:	b006      	add	sp, #24
    a5fc:	4770      	bx	lr

0000a5fe <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    a5fe:	b084      	sub	sp, #16
    a600:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    a602:	2300      	movs	r3, #0
    a604:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    a606:	9b01      	ldr	r3, [sp, #4]
    a608:	f003 0303 	and.w	r3, r3, #3
    a60c:	2b03      	cmp	r3, #3
    a60e:	d00c      	beq.n	a62a <Adc_HwAcc_GetAverageSelect+0x2c>
    a610:	2b03      	cmp	r3, #3
    a612:	d80d      	bhi.n	a630 <Adc_HwAcc_GetAverageSelect+0x32>
    a614:	2b01      	cmp	r3, #1
    a616:	d002      	beq.n	a61e <Adc_HwAcc_GetAverageSelect+0x20>
    a618:	2b02      	cmp	r3, #2
    a61a:	d003      	beq.n	a624 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    a61c:	e008      	b.n	a630 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    a61e:	2301      	movs	r3, #1
    a620:	9303      	str	r3, [sp, #12]
            break;
    a622:	e006      	b.n	a632 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    a624:	2302      	movs	r3, #2
    a626:	9303      	str	r3, [sp, #12]
            break;
    a628:	e003      	b.n	a632 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    a62a:	2303      	movs	r3, #3
    a62c:	9303      	str	r3, [sp, #12]
            break;
    a62e:	e000      	b.n	a632 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    a630:	bf00      	nop
    }
    return ReturnValue;
    a632:	9b03      	ldr	r3, [sp, #12]
}
    a634:	4618      	mov	r0, r3
    a636:	b004      	add	sp, #16
    a638:	4770      	bx	lr

0000a63a <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    a63a:	b084      	sub	sp, #16
    a63c:	9001      	str	r0, [sp, #4]
    a63e:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    a640:	9b01      	ldr	r3, [sp, #4]
    a642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a646:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    a648:	9b03      	ldr	r3, [sp, #12]
    a64a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a64e:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    a650:	9b00      	ldr	r3, [sp, #0]
    a652:	019b      	lsls	r3, r3, #6
    a654:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a658:	9a03      	ldr	r2, [sp, #12]
    a65a:	4313      	orrs	r3, r2
    a65c:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    a65e:	9b01      	ldr	r3, [sp, #4]
    a660:	9a03      	ldr	r2, [sp, #12]
    a662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a666:	bf00      	nop
    a668:	b004      	add	sp, #16
    a66a:	4770      	bx	lr

0000a66c <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    a66c:	b084      	sub	sp, #16
    a66e:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    a670:	2300      	movs	r3, #0
    a672:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    a674:	9b01      	ldr	r3, [sp, #4]
    a676:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a67a:	2b00      	cmp	r3, #0
    a67c:	d001      	beq.n	a682 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    a67e:	2301      	movs	r3, #1
    a680:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    a682:	9b03      	ldr	r3, [sp, #12]
}
    a684:	4618      	mov	r0, r3
    a686:	b004      	add	sp, #16
    a688:	4770      	bx	lr

0000a68a <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    a68a:	b086      	sub	sp, #24
    a68c:	9003      	str	r0, [sp, #12]
    a68e:	9201      	str	r2, [sp, #4]
    a690:	461a      	mov	r2, r3
    a692:	460b      	mov	r3, r1
    a694:	f88d 300b 	strb.w	r3, [sp, #11]
    a698:	4613      	mov	r3, r2
    a69a:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    a69e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a6a2:	9b03      	ldr	r3, [sp, #12]
    a6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6a8:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    a6aa:	9b05      	ldr	r3, [sp, #20]
    a6ac:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    a6b0:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    a6b2:	9b01      	ldr	r3, [sp, #4]
    a6b4:	f003 031f 	and.w	r3, r3, #31
    a6b8:	9a05      	ldr	r2, [sp, #20]
    a6ba:	4313      	orrs	r3, r2
    a6bc:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    a6be:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d001      	beq.n	a6ca <Adc_HwAcc_SetChannel+0x40>
    a6c6:	2340      	movs	r3, #64	; 0x40
    a6c8:	e000      	b.n	a6cc <Adc_HwAcc_SetChannel+0x42>
    a6ca:	2300      	movs	r3, #0
    a6cc:	9a05      	ldr	r2, [sp, #20]
    a6ce:	4313      	orrs	r3, r2
    a6d0:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    a6d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a6d6:	9b03      	ldr	r3, [sp, #12]
    a6d8:	9905      	ldr	r1, [sp, #20]
    a6da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    a6de:	bf00      	nop
    a6e0:	b006      	add	sp, #24
    a6e2:	4770      	bx	lr

0000a6e4 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    a6e4:	b082      	sub	sp, #8
    a6e6:	9001      	str	r0, [sp, #4]
    a6e8:	460b      	mov	r3, r1
    a6ea:	f8ad 3002 	strh.w	r3, [sp, #2]
    a6ee:	4613      	mov	r3, r2
    a6f0:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    a6f4:	f8bd 3000 	ldrh.w	r3, [sp]
    a6f8:	b2da      	uxtb	r2, r3
    a6fa:	9b01      	ldr	r3, [sp, #4]
    a6fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    a700:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a704:	f3c3 0209 	ubfx	r2, r3, #0, #10
    a708:	9b01      	ldr	r3, [sp, #4]
    a70a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    a70e:	bf00      	nop
    a710:	b002      	add	sp, #8
    a712:	4770      	bx	lr

0000a714 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    a714:	b082      	sub	sp, #8
    a716:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    a718:	9b01      	ldr	r3, [sp, #4]
    a71a:	099b      	lsrs	r3, r3, #6
    a71c:	f003 0301 	and.w	r3, r3, #1
    a720:	2b00      	cmp	r3, #0
    a722:	bf14      	ite	ne
    a724:	2301      	movne	r3, #1
    a726:	2300      	moveq	r3, #0
    a728:	b2db      	uxtb	r3, r3
}
    a72a:	4618      	mov	r0, r3
    a72c:	b002      	add	sp, #8
    a72e:	4770      	bx	lr

0000a730 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    a730:	b082      	sub	sp, #8
    a732:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    a734:	9b01      	ldr	r3, [sp, #4]
    a736:	09db      	lsrs	r3, r3, #7
    a738:	f003 0301 	and.w	r3, r3, #1
    a73c:	2b00      	cmp	r3, #0
    a73e:	bf14      	ite	ne
    a740:	2301      	movne	r3, #1
    a742:	2300      	moveq	r3, #0
    a744:	b2db      	uxtb	r3, r3
}
    a746:	4618      	mov	r0, r3
    a748:	b002      	add	sp, #8
    a74a:	4770      	bx	lr

0000a74c <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    a74c:	b084      	sub	sp, #16
    a74e:	9001      	str	r0, [sp, #4]
    a750:	460b      	mov	r3, r1
    a752:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    a756:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a75a:	9b01      	ldr	r3, [sp, #4]
    a75c:	3212      	adds	r2, #18
    a75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a762:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    a766:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a76a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a76e:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    a772:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a776:	4618      	mov	r0, r3
    a778:	b004      	add	sp, #16
    a77a:	4770      	bx	lr

0000a77c <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    a77c:	b500      	push	{lr}
    a77e:	b085      	sub	sp, #20
    a780:	9003      	str	r0, [sp, #12]
    a782:	9102      	str	r1, [sp, #8]
    a784:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    a786:	f008 f809 	bl	1279c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a78a:	9b02      	ldr	r3, [sp, #8]
    a78c:	7a59      	ldrb	r1, [r3, #9]
    a78e:	9b02      	ldr	r3, [sp, #8]
    a790:	68db      	ldr	r3, [r3, #12]
    a792:	461a      	mov	r2, r3
    a794:	9803      	ldr	r0, [sp, #12]
    a796:	f7ff ff0d 	bl	a5b4 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    a79a:	f008 f82b 	bl	127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    a79e:	f007 fe63 	bl	12468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    a7a2:	9901      	ldr	r1, [sp, #4]
    a7a4:	9803      	ldr	r0, [sp, #12]
    a7a6:	f7ff ff48 	bl	a63a <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    a7aa:	f007 fe89 	bl	124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    a7ae:	f007 fb79 	bl	11ea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a7b2:	9b02      	ldr	r3, [sp, #8]
    a7b4:	7a1b      	ldrb	r3, [r3, #8]
    a7b6:	4619      	mov	r1, r3
    a7b8:	9803      	ldr	r0, [sp, #12]
    a7ba:	f7ff feda 	bl	a572 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    a7be:	f007 fb9d 	bl	11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    a7c2:	f007 facb 	bl	11d5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a7c6:	9b02      	ldr	r3, [sp, #8]
    a7c8:	6819      	ldr	r1, [r3, #0]
    a7ca:	9b02      	ldr	r3, [sp, #8]
    a7cc:	685b      	ldr	r3, [r3, #4]
    a7ce:	461a      	mov	r2, r3
    a7d0:	9803      	ldr	r0, [sp, #12]
    a7d2:	f7ff fe73 	bl	a4bc <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    a7d6:	f007 faed 	bl	11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    a7da:	bf00      	nop
    a7dc:	b005      	add	sp, #20
    a7de:	f85d fb04 	ldr.w	pc, [sp], #4

0000a7e2 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    a7e2:	b500      	push	{lr}
    a7e4:	b087      	sub	sp, #28
    a7e6:	9001      	str	r0, [sp, #4]
    a7e8:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    a7ea:	4a67      	ldr	r2, [pc, #412]	; (a988 <Adc_Ip_Init+0x1a6>)
    a7ec:	9b01      	ldr	r3, [sp, #4]
    a7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f2:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    a7f4:	2300      	movs	r3, #0
    a7f6:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    a7f8:	2300      	movs	r3, #0
    a7fa:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a7fc:	9b00      	ldr	r3, [sp, #0]
    a7fe:	6819      	ldr	r1, [r3, #0]
    a800:	9b00      	ldr	r3, [sp, #0]
    a802:	689b      	ldr	r3, [r3, #8]
    a804:	461a      	mov	r2, r3
    a806:	9802      	ldr	r0, [sp, #8]
    a808:	f7ff fe58 	bl	a4bc <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a80c:	9b00      	ldr	r3, [sp, #0]
    a80e:	7b1b      	ldrb	r3, [r3, #12]
    a810:	4619      	mov	r1, r3
    a812:	9802      	ldr	r0, [sp, #8]
    a814:	f7ff fead 	bl	a572 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a818:	9b00      	ldr	r3, [sp, #0]
    a81a:	7b59      	ldrb	r1, [r3, #13]
    a81c:	9b00      	ldr	r3, [sp, #0]
    a81e:	691b      	ldr	r3, [r3, #16]
    a820:	461a      	mov	r2, r3
    a822:	9802      	ldr	r0, [sp, #8]
    a824:	f7ff fec6 	bl	a5b4 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    a828:	9b00      	ldr	r3, [sp, #0]
    a82a:	695b      	ldr	r3, [r3, #20]
    a82c:	4619      	mov	r1, r3
    a82e:	9801      	ldr	r0, [sp, #4]
    a830:	f000 f9ea 	bl	ac08 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    a834:	9b04      	ldr	r3, [sp, #16]
    a836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a83a:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    a83c:	9b00      	ldr	r3, [sp, #0]
    a83e:	699b      	ldr	r3, [r3, #24]
    a840:	019b      	lsls	r3, r3, #6
    a842:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a846:	9a05      	ldr	r2, [sp, #20]
    a848:	4313      	orrs	r3, r2
    a84a:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    a84c:	9b00      	ldr	r3, [sp, #0]
    a84e:	7f1b      	ldrb	r3, [r3, #28]
    a850:	2b00      	cmp	r3, #0
    a852:	d004      	beq.n	a85e <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    a854:	9b05      	ldr	r3, [sp, #20]
    a856:	f043 0304 	orr.w	r3, r3, #4
    a85a:	9305      	str	r3, [sp, #20]
    a85c:	e003      	b.n	a866 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    a85e:	9b04      	ldr	r3, [sp, #16]
    a860:	f043 0304 	orr.w	r3, r3, #4
    a864:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    a866:	9b04      	ldr	r3, [sp, #16]
    a868:	f043 0303 	orr.w	r3, r3, #3
    a86c:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    a86e:	9b00      	ldr	r3, [sp, #0]
    a870:	6a1b      	ldr	r3, [r3, #32]
    a872:	f003 0303 	and.w	r3, r3, #3
    a876:	9a05      	ldr	r2, [sp, #20]
    a878:	4313      	orrs	r3, r2
    a87a:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    a87c:	9b04      	ldr	r3, [sp, #16]
    a87e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a882:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    a884:	9b00      	ldr	r3, [sp, #0]
    a886:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    a88a:	2b00      	cmp	r3, #0
    a88c:	d001      	beq.n	a892 <Adc_Ip_Init+0xb0>
    a88e:	2320      	movs	r3, #32
    a890:	e000      	b.n	a894 <Adc_Ip_Init+0xb2>
    a892:	2300      	movs	r3, #0
    a894:	9a05      	ldr	r2, [sp, #20]
    a896:	4313      	orrs	r3, r2
    a898:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    a89a:	9b00      	ldr	r3, [sp, #0]
    a89c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d001      	beq.n	a8a8 <Adc_Ip_Init+0xc6>
    a8a4:	2310      	movs	r3, #16
    a8a6:	e000      	b.n	a8aa <Adc_Ip_Init+0xc8>
    a8a8:	2300      	movs	r3, #0
    a8aa:	9a05      	ldr	r2, [sp, #20]
    a8ac:	4313      	orrs	r3, r2
    a8ae:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    a8b0:	9b00      	ldr	r3, [sp, #0]
    a8b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d001      	beq.n	a8be <Adc_Ip_Init+0xdc>
    a8ba:	2308      	movs	r3, #8
    a8bc:	e000      	b.n	a8c0 <Adc_Ip_Init+0xde>
    a8be:	2300      	movs	r3, #0
    a8c0:	9a05      	ldr	r2, [sp, #20]
    a8c2:	4313      	orrs	r3, r2
    a8c4:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    a8c6:	9b00      	ldr	r3, [sp, #0]
    a8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a8ca:	461a      	mov	r2, r3
    a8cc:	9b02      	ldr	r3, [sp, #8]
    a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    a8d2:	9b00      	ldr	r3, [sp, #0]
    a8d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a8d6:	461a      	mov	r2, r3
    a8d8:	9b02      	ldr	r3, [sp, #8]
    a8da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    a8de:	9a05      	ldr	r2, [sp, #20]
    a8e0:	9904      	ldr	r1, [sp, #16]
    a8e2:	9802      	ldr	r0, [sp, #8]
    a8e4:	f7ff fdd2 	bl	a48c <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    a8e8:	9b00      	ldr	r3, [sp, #0]
    a8ea:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    a8ec:	9b00      	ldr	r3, [sp, #0]
    a8ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    a8f0:	461a      	mov	r2, r3
    a8f2:	9802      	ldr	r0, [sp, #8]
    a8f4:	f7ff fef6 	bl	a6e4 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    a8f8:	9b00      	ldr	r3, [sp, #0]
    a8fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a8fe:	4619      	mov	r1, r3
    a900:	9801      	ldr	r0, [sp, #4]
    a902:	f000 f955 	bl	abb0 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    a906:	9b00      	ldr	r3, [sp, #0]
    a908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a90a:	2b00      	cmp	r3, #0
    a90c:	d01c      	beq.n	a948 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    a90e:	2300      	movs	r3, #0
    a910:	f88d 300f 	strb.w	r3, [sp, #15]
    a914:	e011      	b.n	a93a <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    a916:	9b00      	ldr	r3, [sp, #0]
    a918:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a91a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a91e:	4613      	mov	r3, r2
    a920:	005b      	lsls	r3, r3, #1
    a922:	4413      	add	r3, r2
    a924:	009b      	lsls	r3, r3, #2
    a926:	440b      	add	r3, r1
    a928:	4619      	mov	r1, r3
    a92a:	9801      	ldr	r0, [sp, #4]
    a92c:	f000 f9c2 	bl	acb4 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    a930:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a934:	3301      	adds	r3, #1
    a936:	f88d 300f 	strb.w	r3, [sp, #15]
    a93a:	9b00      	ldr	r3, [sp, #0]
    a93c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    a940:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a944:	429a      	cmp	r2, r3
    a946:	d3e6      	bcc.n	a916 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    a948:	9b00      	ldr	r3, [sp, #0]
    a94a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a94c:	490f      	ldr	r1, [pc, #60]	; (a98c <Adc_Ip_Init+0x1aa>)
    a94e:	9b01      	ldr	r3, [sp, #4]
    a950:	204c      	movs	r0, #76	; 0x4c
    a952:	fb00 f303 	mul.w	r3, r0, r3
    a956:	440b      	add	r3, r1
    a958:	3308      	adds	r3, #8
    a95a:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    a95c:	9b00      	ldr	r3, [sp, #0]
    a95e:	685a      	ldr	r2, [r3, #4]
    a960:	490a      	ldr	r1, [pc, #40]	; (a98c <Adc_Ip_Init+0x1aa>)
    a962:	9b01      	ldr	r3, [sp, #4]
    a964:	204c      	movs	r0, #76	; 0x4c
    a966:	fb00 f303 	mul.w	r3, r0, r3
    a96a:	440b      	add	r3, r1
    a96c:	3304      	adds	r3, #4
    a96e:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    a970:	4a06      	ldr	r2, [pc, #24]	; (a98c <Adc_Ip_Init+0x1aa>)
    a972:	9b01      	ldr	r3, [sp, #4]
    a974:	214c      	movs	r1, #76	; 0x4c
    a976:	fb01 f303 	mul.w	r3, r1, r3
    a97a:	4413      	add	r3, r2
    a97c:	2201      	movs	r2, #1
    a97e:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    a980:	bf00      	nop
    a982:	b007      	add	sp, #28
    a984:	f85d fb04 	ldr.w	pc, [sp], #4
    a988:	00019fb0 	.word	0x00019fb0
    a98c:	1fff8d80 	.word	0x1fff8d80

0000a990 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    a990:	b500      	push	{lr}
    a992:	b0c3      	sub	sp, #268	; 0x10c
    a994:	ab42      	add	r3, sp, #264	; 0x108
    a996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    a99a:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    a99c:	2300      	movs	r3, #0
    a99e:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    a9a0:	2303      	movs	r3, #3
    a9a2:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    a9a4:	2300      	movs	r3, #0
    a9a6:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    a9a8:	230c      	movs	r3, #12
    a9aa:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    a9ae:	2300      	movs	r3, #0
    a9b0:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    a9b4:	2300      	movs	r3, #0
    a9b6:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    a9b8:	2300      	movs	r3, #0
    a9ba:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    a9bc:	2300      	movs	r3, #0
    a9be:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    a9c0:	2300      	movs	r3, #0
    a9c2:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    a9c6:	2300      	movs	r3, #0
    a9c8:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    a9ca:	2300      	movs	r3, #0
    a9cc:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    a9d0:	2300      	movs	r3, #0
    a9d2:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    a9d6:	2300      	movs	r3, #0
    a9d8:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    a9dc:	2300      	movs	r3, #0
    a9de:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    a9e2:	2300      	movs	r3, #0
    a9e4:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    a9e8:	2300      	movs	r3, #0
    a9ea:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    a9ee:	2304      	movs	r3, #4
    a9f0:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    a9f4:	2300      	movs	r3, #0
    a9f6:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    a9fa:	2310      	movs	r3, #16
    a9fc:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    aa00:	2300      	movs	r3, #0
    aa02:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    aa06:	e02b      	b.n	aa60 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    aa08:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aa0c:	ab42      	add	r3, sp, #264	; 0x108
    aa0e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aa12:	4613      	mov	r3, r2
    aa14:	005b      	lsls	r3, r3, #1
    aa16:	4413      	add	r3, r2
    aa18:	009b      	lsls	r3, r3, #2
    aa1a:	440b      	add	r3, r1
    aa1c:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aa20:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    aa22:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aa26:	ab42      	add	r3, sp, #264	; 0x108
    aa28:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aa2c:	4613      	mov	r3, r2
    aa2e:	005b      	lsls	r3, r3, #1
    aa30:	4413      	add	r3, r2
    aa32:	009b      	lsls	r3, r3, #2
    aa34:	440b      	add	r3, r1
    aa36:	3304      	adds	r3, #4
    aa38:	221f      	movs	r2, #31
    aa3a:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    aa3c:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aa40:	ab42      	add	r3, sp, #264	; 0x108
    aa42:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aa46:	4613      	mov	r3, r2
    aa48:	005b      	lsls	r3, r3, #1
    aa4a:	4413      	add	r3, r2
    aa4c:	009b      	lsls	r3, r3, #2
    aa4e:	440b      	add	r3, r1
    aa50:	3308      	adds	r3, #8
    aa52:	2200      	movs	r2, #0
    aa54:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    aa56:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    aa5a:	3301      	adds	r3, #1
    aa5c:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    aa60:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    aa64:	2b0f      	cmp	r3, #15
    aa66:	d9cf      	bls.n	aa08 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    aa68:	ab02      	add	r3, sp, #8
    aa6a:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    aa6c:	2300      	movs	r3, #0
    aa6e:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    aa70:	aa32      	add	r2, sp, #200	; 0xc8
    aa72:	ab42      	add	r3, sp, #264	; 0x108
    aa74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    aa78:	4611      	mov	r1, r2
    aa7a:	6818      	ldr	r0, [r3, #0]
    aa7c:	f7ff feb1 	bl	a7e2 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    aa80:	4a07      	ldr	r2, [pc, #28]	; (aaa0 <Adc_Ip_DeInit+0x110>)
    aa82:	ab42      	add	r3, sp, #264	; 0x108
    aa84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    aa88:	681b      	ldr	r3, [r3, #0]
    aa8a:	214c      	movs	r1, #76	; 0x4c
    aa8c:	fb01 f303 	mul.w	r3, r1, r3
    aa90:	4413      	add	r3, r2
    aa92:	2200      	movs	r2, #0
    aa94:	701a      	strb	r2, [r3, #0]
}
    aa96:	bf00      	nop
    aa98:	b043      	add	sp, #268	; 0x10c
    aa9a:	f85d fb04 	ldr.w	pc, [sp], #4
    aa9e:	bf00      	nop
    aaa0:	1fff8d80 	.word	0x1fff8d80

0000aaa4 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    aaa4:	b500      	push	{lr}
    aaa6:	b087      	sub	sp, #28
    aaa8:	9003      	str	r0, [sp, #12]
    aaaa:	460b      	mov	r3, r1
    aaac:	9201      	str	r2, [sp, #4]
    aaae:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aab2:	4a0a      	ldr	r2, [pc, #40]	; (aadc <Adc_Ip_SetAveraging+0x38>)
    aab4:	9b03      	ldr	r3, [sp, #12]
    aab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaba:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    aabc:	f007 fdca 	bl	12654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    aac0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aac4:	9a01      	ldr	r2, [sp, #4]
    aac6:	4619      	mov	r1, r3
    aac8:	9805      	ldr	r0, [sp, #20]
    aaca:	f7ff fd73 	bl	a5b4 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    aace:	f007 fded 	bl	126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    aad2:	bf00      	nop
    aad4:	b007      	add	sp, #28
    aad6:	f85d fb04 	ldr.w	pc, [sp], #4
    aada:	bf00      	nop
    aadc:	00019fb0 	.word	0x00019fb0

0000aae0 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    aae0:	b500      	push	{lr}
    aae2:	b085      	sub	sp, #20
    aae4:	9001      	str	r0, [sp, #4]
    aae6:	460b      	mov	r3, r1
    aae8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aaec:	4a09      	ldr	r2, [pc, #36]	; (ab14 <Adc_Ip_SetSampleTime+0x34>)
    aaee:	9b01      	ldr	r3, [sp, #4]
    aaf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    aaf6:	f007 fa27 	bl	11f48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    aafa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aafe:	4619      	mov	r1, r3
    ab00:	9803      	ldr	r0, [sp, #12]
    ab02:	f7ff fd36 	bl	a572 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    ab06:	f007 fa4b 	bl	11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    ab0a:	bf00      	nop
    ab0c:	b005      	add	sp, #20
    ab0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ab12:	bf00      	nop
    ab14:	00019fb0 	.word	0x00019fb0

0000ab18 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    ab18:	b500      	push	{lr}
    ab1a:	b085      	sub	sp, #20
    ab1c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab1e:	4a0a      	ldr	r2, [pc, #40]	; (ab48 <Adc_Ip_EnableDma+0x30>)
    ab20:	9b01      	ldr	r3, [sp, #4]
    ab22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab26:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    ab28:	f007 fd42 	bl	125b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    ab2c:	9b03      	ldr	r3, [sp, #12]
    ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ab32:	f043 0204 	orr.w	r2, r3, #4
    ab36:	9b03      	ldr	r3, [sp, #12]
    ab38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    ab3c:	f007 fd64 	bl	12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    ab40:	bf00      	nop
    ab42:	b005      	add	sp, #20
    ab44:	f85d fb04 	ldr.w	pc, [sp], #4
    ab48:	00019fb0 	.word	0x00019fb0

0000ab4c <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    ab4c:	b500      	push	{lr}
    ab4e:	b085      	sub	sp, #20
    ab50:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab52:	4a0a      	ldr	r2, [pc, #40]	; (ab7c <Adc_Ip_DisableDma+0x30>)
    ab54:	9b01      	ldr	r3, [sp, #4]
    ab56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab5a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    ab5c:	f007 fbe0 	bl	12320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    ab60:	9b03      	ldr	r3, [sp, #12]
    ab62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ab66:	f023 0204 	bic.w	r2, r3, #4
    ab6a:	9b03      	ldr	r3, [sp, #12]
    ab6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    ab70:	f007 fc02 	bl	12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    ab74:	bf00      	nop
    ab76:	b005      	add	sp, #20
    ab78:	f85d fb04 	ldr.w	pc, [sp], #4
    ab7c:	00019fb0 	.word	0x00019fb0

0000ab80 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    ab80:	b500      	push	{lr}
    ab82:	b085      	sub	sp, #20
    ab84:	9001      	str	r0, [sp, #4]
    ab86:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab88:	4a08      	ldr	r2, [pc, #32]	; (abac <Adc_Ip_SetTriggerMode+0x2c>)
    ab8a:	9b01      	ldr	r3, [sp, #4]
    ab8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab90:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    ab92:	f007 fc17 	bl	123c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    ab96:	9900      	ldr	r1, [sp, #0]
    ab98:	9803      	ldr	r0, [sp, #12]
    ab9a:	f7ff fd4e 	bl	a63a <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    ab9e:	f007 fc3d 	bl	1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    aba2:	bf00      	nop
    aba4:	b005      	add	sp, #20
    aba6:	f85d fb04 	ldr.w	pc, [sp], #4
    abaa:	bf00      	nop
    abac:	00019fb0 	.word	0x00019fb0

0000abb0 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    abb0:	b500      	push	{lr}
    abb2:	b085      	sub	sp, #20
    abb4:	9001      	str	r0, [sp, #4]
    abb6:	460b      	mov	r3, r1
    abb8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    abbc:	4a11      	ldr	r2, [pc, #68]	; (ac04 <Adc_Ip_SetContinuousMode+0x54>)
    abbe:	9b01      	ldr	r3, [sp, #4]
    abc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    abc6:	f007 fe3b 	bl	12840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    abca:	9b03      	ldr	r3, [sp, #12]
    abcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    abd0:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    abd2:	9b02      	ldr	r3, [sp, #8]
    abd4:	f023 0308 	bic.w	r3, r3, #8
    abd8:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    abda:	f89d 3003 	ldrb.w	r3, [sp, #3]
    abde:	2b00      	cmp	r3, #0
    abe0:	d001      	beq.n	abe6 <Adc_Ip_SetContinuousMode+0x36>
    abe2:	2308      	movs	r3, #8
    abe4:	e000      	b.n	abe8 <Adc_Ip_SetContinuousMode+0x38>
    abe6:	2300      	movs	r3, #0
    abe8:	9a02      	ldr	r2, [sp, #8]
    abea:	4313      	orrs	r3, r2
    abec:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    abee:	9b03      	ldr	r3, [sp, #12]
    abf0:	9a02      	ldr	r2, [sp, #8]
    abf2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    abf6:	f007 fe4f 	bl	12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    abfa:	bf00      	nop
    abfc:	b005      	add	sp, #20
    abfe:	f85d fb04 	ldr.w	pc, [sp], #4
    ac02:	bf00      	nop
    ac04:	00019fb0 	.word	0x00019fb0

0000ac08 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    ac08:	b500      	push	{lr}
    ac0a:	b085      	sub	sp, #20
    ac0c:	9001      	str	r0, [sp, #4]
    ac0e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ac10:	4a0e      	ldr	r2, [pc, #56]	; (ac4c <Adc_Ip_SetResolution+0x44>)
    ac12:	9b01      	ldr	r3, [sp, #4]
    ac14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac18:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    ac1a:	f006 fe61 	bl	118e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    ac1e:	9b03      	ldr	r3, [sp, #12]
    ac20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac22:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    ac24:	9b02      	ldr	r3, [sp, #8]
    ac26:	f023 030c 	bic.w	r3, r3, #12
    ac2a:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    ac2c:	9b00      	ldr	r3, [sp, #0]
    ac2e:	009b      	lsls	r3, r3, #2
    ac30:	f003 030c 	and.w	r3, r3, #12
    ac34:	9a02      	ldr	r2, [sp, #8]
    ac36:	4313      	orrs	r3, r2
    ac38:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    ac3a:	9b03      	ldr	r3, [sp, #12]
    ac3c:	9a02      	ldr	r2, [sp, #8]
    ac3e:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    ac40:	f006 fe7a 	bl	11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    ac44:	bf00      	nop
    ac46:	b005      	add	sp, #20
    ac48:	f85d fb04 	ldr.w	pc, [sp], #4
    ac4c:	00019fb0 	.word	0x00019fb0

0000ac50 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    ac50:	b500      	push	{lr}
    ac52:	b085      	sub	sp, #20
    ac54:	9001      	str	r0, [sp, #4]
    ac56:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ac58:	4a15      	ldr	r2, [pc, #84]	; (acb0 <Adc_Ip_SetClockMode+0x60>)
    ac5a:	9b01      	ldr	r3, [sp, #4]
    ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac60:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    ac62:	f006 ffd7 	bl	11c14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    ac66:	9b00      	ldr	r3, [sp, #0]
    ac68:	6819      	ldr	r1, [r3, #0]
    ac6a:	9b00      	ldr	r3, [sp, #0]
    ac6c:	685b      	ldr	r3, [r3, #4]
    ac6e:	461a      	mov	r2, r3
    ac70:	9803      	ldr	r0, [sp, #12]
    ac72:	f7ff fc23 	bl	a4bc <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    ac76:	f006 fff9 	bl	11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    ac7a:	f007 f8c1 	bl	11e00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    ac7e:	9b00      	ldr	r3, [sp, #0]
    ac80:	7a1b      	ldrb	r3, [r3, #8]
    ac82:	4619      	mov	r1, r3
    ac84:	9803      	ldr	r0, [sp, #12]
    ac86:	f7ff fc74 	bl	a572 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    ac8a:	f007 f8e5 	bl	11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    ac8e:	f007 fd33 	bl	126f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    ac92:	9b00      	ldr	r3, [sp, #0]
    ac94:	7a59      	ldrb	r1, [r3, #9]
    ac96:	9b00      	ldr	r3, [sp, #0]
    ac98:	68db      	ldr	r3, [r3, #12]
    ac9a:	461a      	mov	r2, r3
    ac9c:	9803      	ldr	r0, [sp, #12]
    ac9e:	f7ff fc89 	bl	a5b4 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    aca2:	f007 fd55 	bl	12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    aca6:	bf00      	nop
    aca8:	b005      	add	sp, #20
    acaa:	f85d fb04 	ldr.w	pc, [sp], #4
    acae:	bf00      	nop
    acb0:	00019fb0 	.word	0x00019fb0

0000acb4 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    acb4:	b510      	push	{r4, lr}
    acb6:	b084      	sub	sp, #16
    acb8:	9001      	str	r0, [sp, #4]
    acba:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    acbc:	4a13      	ldr	r2, [pc, #76]	; (ad0c <Adc_Ip_ConfigChannel+0x58>)
    acbe:	9b01      	ldr	r3, [sp, #4]
    acc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc4:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    acc6:	9b00      	ldr	r3, [sp, #0]
    acc8:	685b      	ldr	r3, [r3, #4]
    acca:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    accc:	f007 fad6 	bl	1227c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    acd0:	9b00      	ldr	r3, [sp, #0]
    acd2:	7819      	ldrb	r1, [r3, #0]
    acd4:	9b00      	ldr	r3, [sp, #0]
    acd6:	7a1b      	ldrb	r3, [r3, #8]
    acd8:	9a02      	ldr	r2, [sp, #8]
    acda:	9803      	ldr	r0, [sp, #12]
    acdc:	f7ff fcd5 	bl	a68a <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    ace0:	f007 faf8 	bl	122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    ace4:	9b00      	ldr	r3, [sp, #0]
    ace6:	781b      	ldrb	r3, [r3, #0]
    ace8:	461c      	mov	r4, r3
    acea:	9b00      	ldr	r3, [sp, #0]
    acec:	6859      	ldr	r1, [r3, #4]
    acee:	4808      	ldr	r0, [pc, #32]	; (ad10 <Adc_Ip_ConfigChannel+0x5c>)
    acf0:	9a01      	ldr	r2, [sp, #4]
    acf2:	4613      	mov	r3, r2
    acf4:	00db      	lsls	r3, r3, #3
    acf6:	4413      	add	r3, r2
    acf8:	005b      	lsls	r3, r3, #1
    acfa:	4413      	add	r3, r2
    acfc:	4423      	add	r3, r4
    acfe:	3302      	adds	r3, #2
    ad00:	009b      	lsls	r3, r3, #2
    ad02:	4403      	add	r3, r0
    ad04:	6059      	str	r1, [r3, #4]
}
    ad06:	bf00      	nop
    ad08:	b004      	add	sp, #16
    ad0a:	bd10      	pop	{r4, pc}
    ad0c:	00019fb0 	.word	0x00019fb0
    ad10:	1fff8d80 	.word	0x1fff8d80

0000ad14 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    ad14:	b500      	push	{lr}
    ad16:	b089      	sub	sp, #36	; 0x24
    ad18:	9001      	str	r0, [sp, #4]
    ad1a:	460b      	mov	r3, r1
    ad1c:	f88d 3003 	strb.w	r3, [sp, #3]
    ad20:	4613      	mov	r3, r2
    ad22:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ad26:	4a24      	ldr	r2, [pc, #144]	; (adb8 <Adc_Ip_SetDisabledChannel+0xa4>)
    ad28:	9b01      	ldr	r3, [sp, #4]
    ad2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    ad30:	2300      	movs	r3, #0
    ad32:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    ad34:	2100      	movs	r1, #0
    ad36:	4821      	ldr	r0, [pc, #132]	; (adbc <Adc_Ip_SetDisabledChannel+0xa8>)
    ad38:	f7f7 fea8 	bl	2a8c <OsIf_MicrosToTicks>
    ad3c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    ad3e:	2000      	movs	r0, #0
    ad40:	f7f7 fe58 	bl	29f4 <OsIf_GetCounter>
    ad44:	4603      	mov	r3, r0
    ad46:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    ad48:	2300      	movs	r3, #0
    ad4a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    ad4c:	f007 f94e 	bl	11fec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    ad50:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ad54:	9b05      	ldr	r3, [sp, #20]
    ad56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ad5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ad5e:	f043 011f 	orr.w	r1, r3, #31
    ad62:	9b05      	ldr	r3, [sp, #20]
    ad64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    ad68:	f007 f96c 	bl	12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    ad6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ad70:	2b00      	cmp	r3, #0
    ad72:	d01c      	beq.n	adae <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    ad74:	e008      	b.n	ad88 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    ad76:	ab03      	add	r3, sp, #12
    ad78:	2100      	movs	r1, #0
    ad7a:	4618      	mov	r0, r3
    ad7c:	f7f7 fe53 	bl	2a26 <OsIf_GetElapsed>
    ad80:	4602      	mov	r2, r0
    ad82:	9b06      	ldr	r3, [sp, #24]
    ad84:	4413      	add	r3, r2
    ad86:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    ad88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ad8c:	9b05      	ldr	r3, [sp, #20]
    ad8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ad92:	f003 031f 	and.w	r3, r3, #31
    ad96:	2b1f      	cmp	r3, #31
    ad98:	d003      	beq.n	ada2 <Adc_Ip_SetDisabledChannel+0x8e>
    ad9a:	9a06      	ldr	r2, [sp, #24]
    ad9c:	9b04      	ldr	r3, [sp, #16]
    ad9e:	429a      	cmp	r2, r3
    ada0:	d3e9      	bcc.n	ad76 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    ada2:	9a06      	ldr	r2, [sp, #24]
    ada4:	9b04      	ldr	r3, [sp, #16]
    ada6:	429a      	cmp	r2, r3
    ada8:	d301      	bcc.n	adae <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    adaa:	2302      	movs	r3, #2
    adac:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    adae:	9b07      	ldr	r3, [sp, #28]
}
    adb0:	4618      	mov	r0, r3
    adb2:	b009      	add	sp, #36	; 0x24
    adb4:	f85d fb04 	ldr.w	pc, [sp], #4
    adb8:	00019fb0 	.word	0x00019fb0
    adbc:	000186a0 	.word	0x000186a0

0000adc0 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    adc0:	b500      	push	{lr}
    adc2:	b087      	sub	sp, #28
    adc4:	9003      	str	r0, [sp, #12]
    adc6:	9102      	str	r1, [sp, #8]
    adc8:	4613      	mov	r3, r2
    adca:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    adce:	4a0a      	ldr	r2, [pc, #40]	; (adf8 <Adc_Ip_StartConversion+0x38>)
    add0:	9b03      	ldr	r3, [sp, #12]
    add2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    add8:	f007 f95a 	bl	12090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    addc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ade0:	9a02      	ldr	r2, [sp, #8]
    ade2:	2100      	movs	r1, #0
    ade4:	9805      	ldr	r0, [sp, #20]
    ade6:	f7ff fc50 	bl	a68a <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    adea:	f007 f97d 	bl	120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    adee:	bf00      	nop
    adf0:	b007      	add	sp, #28
    adf2:	f85d fb04 	ldr.w	pc, [sp], #4
    adf6:	bf00      	nop
    adf8:	00019fb0 	.word	0x00019fb0

0000adfc <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    adfc:	b084      	sub	sp, #16
    adfe:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae00:	4a0b      	ldr	r2, [pc, #44]	; (ae30 <Adc_Ip_GetConvActiveFlag+0x34>)
    ae02:	9b01      	ldr	r3, [sp, #4]
    ae04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae08:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    ae0a:	9b03      	ldr	r3, [sp, #12]
    ae0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ae10:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    ae12:	9b02      	ldr	r3, [sp, #8]
    ae14:	09db      	lsrs	r3, r3, #7
    ae16:	f003 0301 	and.w	r3, r3, #1
    ae1a:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    ae1c:	9b02      	ldr	r3, [sp, #8]
    ae1e:	2b00      	cmp	r3, #0
    ae20:	bf14      	ite	ne
    ae22:	2301      	movne	r3, #1
    ae24:	2300      	moveq	r3, #0
    ae26:	b2db      	uxtb	r3, r3
}
    ae28:	4618      	mov	r0, r3
    ae2a:	b004      	add	sp, #16
    ae2c:	4770      	bx	lr
    ae2e:	bf00      	nop
    ae30:	00019fb0 	.word	0x00019fb0

0000ae34 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    ae34:	b500      	push	{lr}
    ae36:	b085      	sub	sp, #20
    ae38:	9001      	str	r0, [sp, #4]
    ae3a:	460b      	mov	r3, r1
    ae3c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    ae40:	4a08      	ldr	r2, [pc, #32]	; (ae64 <Adc_Ip_GetChanInterrupt+0x30>)
    ae42:	9b01      	ldr	r3, [sp, #4]
    ae44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae48:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ae50:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    ae52:	9803      	ldr	r0, [sp, #12]
    ae54:	f7ff fc5e 	bl	a714 <Adc_HwAcc_GetAIEN>
    ae58:	4603      	mov	r3, r0
}
    ae5a:	4618      	mov	r0, r3
    ae5c:	b005      	add	sp, #20
    ae5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae62:	bf00      	nop
    ae64:	00019fb0 	.word	0x00019fb0

0000ae68 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    ae68:	b500      	push	{lr}
    ae6a:	b085      	sub	sp, #20
    ae6c:	9001      	str	r0, [sp, #4]
    ae6e:	460b      	mov	r3, r1
    ae70:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    ae74:	4a08      	ldr	r2, [pc, #32]	; (ae98 <Adc_Ip_GetConvCompleteFlag+0x30>)
    ae76:	9b01      	ldr	r3, [sp, #4]
    ae78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ae84:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    ae86:	9803      	ldr	r0, [sp, #12]
    ae88:	f7ff fc52 	bl	a730 <Adc_HwAcc_GetCOCO>
    ae8c:	4603      	mov	r3, r0
}
    ae8e:	4618      	mov	r0, r3
    ae90:	b005      	add	sp, #20
    ae92:	f85d fb04 	ldr.w	pc, [sp], #4
    ae96:	bf00      	nop
    ae98:	00019fb0 	.word	0x00019fb0

0000ae9c <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    ae9c:	b500      	push	{lr}
    ae9e:	b085      	sub	sp, #20
    aea0:	9001      	str	r0, [sp, #4]
    aea2:	460b      	mov	r3, r1
    aea4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aea8:	4a07      	ldr	r2, [pc, #28]	; (aec8 <Adc_Ip_GetConvData+0x2c>)
    aeaa:	9b01      	ldr	r3, [sp, #4]
    aeac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeb0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    aeb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aeb6:	4619      	mov	r1, r3
    aeb8:	9803      	ldr	r0, [sp, #12]
    aeba:	f7ff fc47 	bl	a74c <Adc_HwAcc_GetData>
    aebe:	4603      	mov	r3, r0
}
    aec0:	4618      	mov	r0, r3
    aec2:	b005      	add	sp, #20
    aec4:	f85d fb04 	ldr.w	pc, [sp], #4
    aec8:	00019fb0 	.word	0x00019fb0

0000aecc <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    aecc:	b500      	push	{lr}
    aece:	b093      	sub	sp, #76	; 0x4c
    aed0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aed2:	4a59      	ldr	r2, [pc, #356]	; (b038 <Adc_Ip_DoCalibration+0x16c>)
    aed4:	9b01      	ldr	r3, [sp, #4]
    aed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeda:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    aedc:	2300      	movs	r3, #0
    aede:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    aee0:	2100      	movs	r1, #0
    aee2:	4856      	ldr	r0, [pc, #344]	; (b03c <Adc_Ip_DoCalibration+0x170>)
    aee4:	f7f7 fdd2 	bl	2a8c <OsIf_MicrosToTicks>
    aee8:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    aeea:	2000      	movs	r0, #0
    aeec:	f7f7 fd82 	bl	29f4 <OsIf_GetCounter>
    aef0:	4603      	mov	r3, r0
    aef2:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    aef4:	2300      	movs	r3, #0
    aef6:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    aef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aefa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    aefe:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    af00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af02:	089b      	lsrs	r3, r3, #2
    af04:	f003 0301 	and.w	r3, r3, #1
    af08:	2b00      	cmp	r3, #0
    af0a:	bf14      	ite	ne
    af0c:	2301      	movne	r3, #1
    af0e:	2300      	moveq	r3, #0
    af10:	b2db      	uxtb	r3, r3
    af12:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    af16:	980d      	ldr	r0, [sp, #52]	; 0x34
    af18:	f7ff fb71 	bl	a5fe <Adc_HwAcc_GetAverageSelect>
    af1c:	4603      	mov	r3, r0
    af1e:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    af20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    af24:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    af26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af28:	b2db      	uxtb	r3, r3
    af2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    af2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    af34:	4618      	mov	r0, r3
    af36:	f7ff fb99 	bl	a66c <Adc_HwAcc_GetTriggerMode>
    af3a:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    af3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    af40:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    af42:	980d      	ldr	r0, [sp, #52]	; 0x34
    af44:	f7ff fad8 	bl	a4f8 <Adc_HwAcc_GetClockDivide>
    af48:	4603      	mov	r3, r0
    af4a:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    af4c:	980d      	ldr	r0, [sp, #52]	; 0x34
    af4e:	f7ff faf2 	bl	a536 <Adc_HwAcc_GetInputClock>
    af52:	4603      	mov	r3, r0
    af54:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    af56:	2301      	movs	r3, #1
    af58:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    af5c:	2303      	movs	r3, #3
    af5e:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    af60:	230c      	movs	r3, #12
    af62:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    af66:	4a36      	ldr	r2, [pc, #216]	; (b040 <Adc_Ip_DoCalibration+0x174>)
    af68:	9b01      	ldr	r3, [sp, #4]
    af6a:	214c      	movs	r1, #76	; 0x4c
    af6c:	fb01 f303 	mul.w	r3, r1, r3
    af70:	4413      	add	r3, r2
    af72:	3304      	adds	r3, #4
    af74:	681b      	ldr	r3, [r3, #0]
    af76:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    af78:	9b08      	ldr	r3, [sp, #32]
    af7a:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    af7c:	ab03      	add	r3, sp, #12
    af7e:	2200      	movs	r2, #0
    af80:	4619      	mov	r1, r3
    af82:	980f      	ldr	r0, [sp, #60]	; 0x3c
    af84:	f7ff fbfa 	bl	a77c <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    af88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af8a:	2200      	movs	r2, #0
    af8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    af90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af92:	2200      	movs	r2, #0
    af94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    af98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af9a:	2200      	movs	r2, #0
    af9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    afa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afa2:	2200      	movs	r2, #0
    afa4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    afa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afaa:	2200      	movs	r2, #0
    afac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    afb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afb2:	2200      	movs	r2, #0
    afb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    afb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afba:	2200      	movs	r2, #0
    afbc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    afc0:	f007 fbec 	bl	1279c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    afc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    afca:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    afcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    afce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    afd2:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    afd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    afd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    afda:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    afdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    afe0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    afe4:	f007 fc06 	bl	127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    afe8:	e008      	b.n	affc <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    afea:	ab0b      	add	r3, sp, #44	; 0x2c
    afec:	2100      	movs	r1, #0
    afee:	4618      	mov	r0, r3
    aff0:	f7f7 fd19 	bl	2a26 <OsIf_GetElapsed>
    aff4:	4602      	mov	r2, r0
    aff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aff8:	4413      	add	r3, r2
    affa:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    affc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    affe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b002:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b006:	2b00      	cmp	r3, #0
    b008:	d003      	beq.n	b012 <Adc_Ip_DoCalibration+0x146>
    b00a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b00e:	429a      	cmp	r2, r3
    b010:	d3eb      	bcc.n	afea <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b012:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b016:	429a      	cmp	r2, r3
    b018:	d301      	bcc.n	b01e <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b01a:	2302      	movs	r3, #2
    b01c:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    b01e:	ab07      	add	r3, sp, #28
    b020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b022:	4619      	mov	r1, r3
    b024:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b026:	f7ff fba9 	bl	a77c <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    b02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    b02e:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    b030:	4618      	mov	r0, r3
    b032:	b013      	add	sp, #76	; 0x4c
    b034:	f85d fb04 	ldr.w	pc, [sp], #4
    b038:	00019fb0 	.word	0x00019fb0
    b03c:	000186a0 	.word	0x000186a0
    b040:	1fff8d80 	.word	0x1fff8d80

0000b044 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    b044:	b500      	push	{lr}
    b046:	b089      	sub	sp, #36	; 0x24
    b048:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b04a:	4a1e      	ldr	r2, [pc, #120]	; (b0c4 <Adc_Ip_ClearLatchedTriggers+0x80>)
    b04c:	9b01      	ldr	r3, [sp, #4]
    b04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b052:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b054:	2300      	movs	r3, #0
    b056:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    b058:	2100      	movs	r1, #0
    b05a:	481b      	ldr	r0, [pc, #108]	; (b0c8 <Adc_Ip_ClearLatchedTriggers+0x84>)
    b05c:	f7f7 fd16 	bl	2a8c <OsIf_MicrosToTicks>
    b060:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    b062:	2000      	movs	r0, #0
    b064:	f7f7 fcc6 	bl	29f4 <OsIf_GetCounter>
    b068:	4603      	mov	r3, r0
    b06a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    b06c:	2300      	movs	r3, #0
    b06e:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    b070:	f006 fe22 	bl	11cb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    b074:	9b05      	ldr	r3, [sp, #20]
    b076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b07c:	9b05      	ldr	r3, [sp, #20]
    b07e:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    b080:	f006 fe46 	bl	11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b084:	e008      	b.n	b098 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    b086:	ab03      	add	r3, sp, #12
    b088:	2100      	movs	r1, #0
    b08a:	4618      	mov	r0, r3
    b08c:	f7f7 fccb 	bl	2a26 <OsIf_GetElapsed>
    b090:	4602      	mov	r2, r0
    b092:	9b06      	ldr	r3, [sp, #24]
    b094:	4413      	add	r3, r2
    b096:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b098:	9b05      	ldr	r3, [sp, #20]
    b09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b09e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b0a2:	2b00      	cmp	r3, #0
    b0a4:	d003      	beq.n	b0ae <Adc_Ip_ClearLatchedTriggers+0x6a>
    b0a6:	9a06      	ldr	r2, [sp, #24]
    b0a8:	9b04      	ldr	r3, [sp, #16]
    b0aa:	429a      	cmp	r2, r3
    b0ac:	d3eb      	bcc.n	b086 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b0ae:	9a06      	ldr	r2, [sp, #24]
    b0b0:	9b04      	ldr	r3, [sp, #16]
    b0b2:	429a      	cmp	r2, r3
    b0b4:	d301      	bcc.n	b0ba <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b0b6:	2302      	movs	r3, #2
    b0b8:	9307      	str	r3, [sp, #28]
    }

    return Status;
    b0ba:	9b07      	ldr	r3, [sp, #28]
}
    b0bc:	4618      	mov	r0, r3
    b0be:	b009      	add	sp, #36	; 0x24
    b0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c4:	00019fb0 	.word	0x00019fb0
    b0c8:	000186a0 	.word	0x000186a0

0000b0cc <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    b0cc:	b500      	push	{lr}
    b0ce:	b085      	sub	sp, #20
    b0d0:	9001      	str	r0, [sp, #4]
    b0d2:	460b      	mov	r3, r1
    b0d4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b0d8:	4a0c      	ldr	r2, [pc, #48]	; (b10c <Adc_Ip_EnableChannelNotification+0x40>)
    b0da:	9b01      	ldr	r3, [sp, #4]
    b0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    b0e2:	f007 f827 	bl	12134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    b0e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0ea:	9b03      	ldr	r3, [sp, #12]
    b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b0f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0f4:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    b0f8:	9b03      	ldr	r3, [sp, #12]
    b0fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    b0fe:	f007 f845 	bl	1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    b102:	bf00      	nop
    b104:	b005      	add	sp, #20
    b106:	f85d fb04 	ldr.w	pc, [sp], #4
    b10a:	bf00      	nop
    b10c:	00019fb0 	.word	0x00019fb0

0000b110 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    b110:	b500      	push	{lr}
    b112:	b085      	sub	sp, #20
    b114:	9001      	str	r0, [sp, #4]
    b116:	460b      	mov	r3, r1
    b118:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b11c:	4a0c      	ldr	r2, [pc, #48]	; (b150 <Adc_Ip_DisableChannelNotification+0x40>)
    b11e:	9b01      	ldr	r3, [sp, #4]
    b120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b124:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    b126:	f007 f857 	bl	121d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    b12a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b12e:	9b03      	ldr	r3, [sp, #12]
    b130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b134:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b138:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    b13c:	9b03      	ldr	r3, [sp, #12]
    b13e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    b142:	f007 f875 	bl	12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    b146:	bf00      	nop
    b148:	b005      	add	sp, #20
    b14a:	f85d fb04 	ldr.w	pc, [sp], #4
    b14e:	bf00      	nop
    b150:	00019fb0 	.word	0x00019fb0

0000b154 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    b154:	b500      	push	{lr}
    b156:	b085      	sub	sp, #20
    b158:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b15a:	4a0a      	ldr	r2, [pc, #40]	; (b184 <Adc_Ip_ClearTrigErrReg+0x30>)
    b15c:	9b01      	ldr	r3, [sp, #4]
    b15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b162:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    b164:	f007 f9d2 	bl	1250c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    b168:	9b03      	ldr	r3, [sp, #12]
    b16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b16e:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    b172:	9b03      	ldr	r3, [sp, #12]
    b174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    b178:	f007 f9f4 	bl	12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    b17c:	bf00      	nop
    b17e:	b005      	add	sp, #20
    b180:	f85d fb04 	ldr.w	pc, [sp], #4
    b184:	00019fb0 	.word	0x00019fb0

0000b188 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    b188:	b084      	sub	sp, #16
    b18a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b18c:	4a06      	ldr	r2, [pc, #24]	; (b1a8 <Adc_Ip_GetTrigErrReg+0x20>)
    b18e:	9b01      	ldr	r3, [sp, #4]
    b190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b194:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    b196:	9b03      	ldr	r3, [sp, #12]
    b198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b19c:	0e1b      	lsrs	r3, r3, #24
    b19e:	f003 030f 	and.w	r3, r3, #15
}
    b1a2:	4618      	mov	r0, r3
    b1a4:	b004      	add	sp, #16
    b1a6:	4770      	bx	lr
    b1a8:	00019fb0 	.word	0x00019fb0

0000b1ac <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    b1ac:	b082      	sub	sp, #8
    b1ae:	9001      	str	r0, [sp, #4]
    b1b0:	460b      	mov	r3, r1
    b1b2:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    b1b6:	4a06      	ldr	r2, [pc, #24]	; (b1d0 <Adc_Ip_GetDataAddress+0x24>)
    b1b8:	9b01      	ldr	r3, [sp, #4]
    b1ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    b1be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b1c2:	3312      	adds	r3, #18
    b1c4:	009b      	lsls	r3, r3, #2
    b1c6:	4413      	add	r3, r2
}
    b1c8:	4618      	mov	r0, r3
    b1ca:	b002      	add	sp, #8
    b1cc:	4770      	bx	lr
    b1ce:	bf00      	nop
    b1d0:	00019fb0 	.word	0x00019fb0

0000b1d4 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    b1d4:	b088      	sub	sp, #32
    b1d6:	9003      	str	r0, [sp, #12]
    b1d8:	9102      	str	r1, [sp, #8]
    b1da:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b1dc:	4a25      	ldr	r2, [pc, #148]	; (b274 <Adc_Ip_GetChanData+0xa0>)
    b1de:	9b03      	ldr	r3, [sp, #12]
    b1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1e4:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b1e6:	2300      	movs	r3, #0
    b1e8:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    b1ea:	2300      	movs	r3, #0
    b1ec:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    b1f0:	2300      	movs	r3, #0
    b1f2:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b1f6:	2300      	movs	r3, #0
    b1f8:	f88d 3019 	strb.w	r3, [sp, #25]
    b1fc:	e019      	b.n	b232 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    b1fe:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b202:	481d      	ldr	r0, [pc, #116]	; (b278 <Adc_Ip_GetChanData+0xa4>)
    b204:	9a03      	ldr	r2, [sp, #12]
    b206:	4613      	mov	r3, r2
    b208:	00db      	lsls	r3, r3, #3
    b20a:	4413      	add	r3, r2
    b20c:	005b      	lsls	r3, r3, #1
    b20e:	4413      	add	r3, r2
    b210:	440b      	add	r3, r1
    b212:	3302      	adds	r3, #2
    b214:	009b      	lsls	r3, r3, #2
    b216:	4403      	add	r3, r0
    b218:	685b      	ldr	r3, [r3, #4]
    b21a:	9a02      	ldr	r2, [sp, #8]
    b21c:	429a      	cmp	r2, r3
    b21e:	d103      	bne.n	b228 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    b220:	2301      	movs	r3, #1
    b222:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    b226:	e008      	b.n	b23a <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b228:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b22c:	3301      	adds	r3, #1
    b22e:	f88d 3019 	strb.w	r3, [sp, #25]
    b232:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b236:	2b0f      	cmp	r3, #15
    b238:	d9e1      	bls.n	b1fe <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    b23a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b23e:	2b00      	cmp	r3, #0
    b240:	d00e      	beq.n	b260 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    b242:	f89d 2019 	ldrb.w	r2, [sp, #25]
    b246:	9b05      	ldr	r3, [sp, #20]
    b248:	3212      	adds	r2, #18
    b24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b24e:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    b252:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b256:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b25a:	f8ad 301a 	strh.w	r3, [sp, #26]
    b25e:	e001      	b.n	b264 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    b260:	2301      	movs	r3, #1
    b262:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    b264:	9b01      	ldr	r3, [sp, #4]
    b266:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b26a:	801a      	strh	r2, [r3, #0]

    return Status;
    b26c:	9b07      	ldr	r3, [sp, #28]
}
    b26e:	4618      	mov	r0, r3
    b270:	b008      	add	sp, #32
    b272:	4770      	bx	lr
    b274:	00019fb0 	.word	0x00019fb0
    b278:	1fff8d80 	.word	0x1fff8d80

0000b27c <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    b27c:	b500      	push	{lr}
    b27e:	b085      	sub	sp, #20
    b280:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    b282:	2300      	movs	r3, #0
    b284:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    b288:	2300      	movs	r3, #0
    b28a:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    b28e:	4a32      	ldr	r2, [pc, #200]	; (b358 <Adc_Ip_IRQHandler+0xdc>)
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	214c      	movs	r1, #76	; 0x4c
    b294:	fb01 f303 	mul.w	r3, r1, r3
    b298:	4413      	add	r3, r2
    b29a:	781b      	ldrb	r3, [r3, #0]
    b29c:	2b00      	cmp	r3, #0
    b29e:	d040      	beq.n	b322 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    b2a0:	4a2d      	ldr	r2, [pc, #180]	; (b358 <Adc_Ip_IRQHandler+0xdc>)
    b2a2:	9b01      	ldr	r3, [sp, #4]
    b2a4:	214c      	movs	r1, #76	; 0x4c
    b2a6:	fb01 f303 	mul.w	r3, r1, r3
    b2aa:	4413      	add	r3, r2
    b2ac:	3308      	adds	r3, #8
    b2ae:	681b      	ldr	r3, [r3, #0]
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d04d      	beq.n	b350 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b2b4:	2300      	movs	r3, #0
    b2b6:	f88d 300f 	strb.w	r3, [sp, #15]
    b2ba:	e02d      	b.n	b318 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b2bc:	4a27      	ldr	r2, [pc, #156]	; (b35c <Adc_Ip_IRQHandler+0xe0>)
    b2be:	9b01      	ldr	r3, [sp, #4]
    b2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b2cc:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    b2ce:	9802      	ldr	r0, [sp, #8]
    b2d0:	f7ff fa20 	bl	a714 <Adc_HwAcc_GetAIEN>
    b2d4:	4603      	mov	r3, r0
    b2d6:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    b2da:	9802      	ldr	r0, [sp, #8]
    b2dc:	f7ff fa28 	bl	a730 <Adc_HwAcc_GetCOCO>
    b2e0:	4603      	mov	r3, r0
    b2e2:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    b2e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	d00f      	beq.n	b30e <Adc_Ip_IRQHandler+0x92>
    b2ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d00b      	beq.n	b30e <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    b2f6:	4a18      	ldr	r2, [pc, #96]	; (b358 <Adc_Ip_IRQHandler+0xdc>)
    b2f8:	9b01      	ldr	r3, [sp, #4]
    b2fa:	214c      	movs	r1, #76	; 0x4c
    b2fc:	fb01 f303 	mul.w	r3, r1, r3
    b300:	4413      	add	r3, r2
    b302:	3308      	adds	r3, #8
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b30a:	4610      	mov	r0, r2
    b30c:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b30e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b312:	3301      	adds	r3, #1
    b314:	f88d 300f 	strb.w	r3, [sp, #15]
    b318:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b31c:	2b0f      	cmp	r3, #15
    b31e:	d9cd      	bls.n	b2bc <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    b320:	e016      	b.n	b350 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b322:	2300      	movs	r3, #0
    b324:	f88d 300f 	strb.w	r3, [sp, #15]
    b328:	e00e      	b.n	b348 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b32a:	4a0c      	ldr	r2, [pc, #48]	; (b35c <Adc_Ip_IRQHandler+0xe0>)
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b332:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b336:	4611      	mov	r1, r2
    b338:	4618      	mov	r0, r3
    b33a:	f7ff fa07 	bl	a74c <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b33e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b342:	3301      	adds	r3, #1
    b344:	f88d 300f 	strb.w	r3, [sp, #15]
    b348:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b34c:	2b0f      	cmp	r3, #15
    b34e:	d9ec      	bls.n	b32a <Adc_Ip_IRQHandler+0xae>
}
    b350:	bf00      	nop
    b352:	b005      	add	sp, #20
    b354:	f85d fb04 	ldr.w	pc, [sp], #4
    b358:	1fff8d80 	.word	0x1fff8d80
    b35c:	00019fb0 	.word	0x00019fb0

0000b360 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    b360:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    b362:	2000      	movs	r0, #0
    b364:	f7ff ff8a 	bl	b27c <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b368:	f3bf 8f4f 	dsb	sy
}
    b36c:	bf00      	nop
    b36e:	bd08      	pop	{r3, pc}

0000b370 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    b370:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    b372:	2001      	movs	r0, #1
    b374:	f7ff ff82 	bl	b27c <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b378:	f3bf 8f4f 	dsb	sy
}
    b37c:	bf00      	nop
    b37e:	bd08      	pop	{r3, pc}

0000b380 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    b380:	b510      	push	{r4, lr}
    b382:	b084      	sub	sp, #16
    b384:	4603      	mov	r3, r0
    b386:	460a      	mov	r2, r1
    b388:	f88d 3007 	strb.w	r3, [sp, #7]
    b38c:	4613      	mov	r3, r2
    b38e:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    b392:	2300      	movs	r3, #0
    b394:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    b398:	2300      	movs	r3, #0
    b39a:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    b39e:	f006 f8b3 	bl	11508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    b3a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3a6:	4a24      	ldr	r2, [pc, #144]	; (b438 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3a8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b3ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    b3b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b3b4:	2b01      	cmp	r3, #1
    b3b6:	d806      	bhi.n	b3c6 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    b3b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3bc:	4a1e      	ldr	r2, [pc, #120]	; (b438 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3be:	2100      	movs	r1, #0
    b3c0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    b3c4:	e032      	b.n	b42c <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b3c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b3ca:	3301      	adds	r3, #1
    b3cc:	f8ad 300e 	strh.w	r3, [sp, #14]
    b3d0:	e01b      	b.n	b40a <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    b3d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b3d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b3da:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b3de:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b3e2:	3a01      	subs	r2, #1
    b3e4:	4c14      	ldr	r4, [pc, #80]	; (b438 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3e6:	0080      	lsls	r0, r0, #2
    b3e8:	4403      	add	r3, r0
    b3ea:	005b      	lsls	r3, r3, #1
    b3ec:	4423      	add	r3, r4
    b3ee:	885b      	ldrh	r3, [r3, #2]
    b3f0:	b29c      	uxth	r4, r3
    b3f2:	4811      	ldr	r0, [pc, #68]	; (b438 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3f4:	008b      	lsls	r3, r1, #2
    b3f6:	4413      	add	r3, r2
    b3f8:	005b      	lsls	r3, r3, #1
    b3fa:	4403      	add	r3, r0
    b3fc:	4622      	mov	r2, r4
    b3fe:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b400:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b404:	3301      	adds	r3, #1
    b406:	f8ad 300e 	strh.w	r3, [sp, #14]
    b40a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b40e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b412:	429a      	cmp	r2, r3
    b414:	d3dd      	bcc.n	b3d2 <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    b416:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b41a:	4a07      	ldr	r2, [pc, #28]	; (b438 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b41c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    b420:	b292      	uxth	r2, r2
    b422:	3a01      	subs	r2, #1
    b424:	b291      	uxth	r1, r2
    b426:	4a04      	ldr	r2, [pc, #16]	; (b438 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b428:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    b42c:	f006 f898 	bl	11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    b430:	bf00      	nop
    b432:	b004      	add	sp, #16
    b434:	bd10      	pop	{r4, pc}
    b436:	bf00      	nop
    b438:	1fff8d70 	.word	0x1fff8d70

0000b43c <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    b43c:	b500      	push	{lr}
    b43e:	b087      	sub	sp, #28
    b440:	9003      	str	r0, [sp, #12]
    b442:	9102      	str	r1, [sp, #8]
    b444:	9201      	str	r2, [sp, #4]
    b446:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b44a:	2300      	movs	r3, #0
    b44c:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b450:	9b03      	ldr	r3, [sp, #12]
    b452:	789b      	ldrb	r3, [r3, #2]
    b454:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b458:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b45c:	4a29      	ldr	r2, [pc, #164]	; (b504 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b462:	681a      	ldr	r2, [r3, #0]
    b464:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b468:	4413      	add	r3, r2
    b46a:	7c1b      	ldrb	r3, [r3, #16]
    b46c:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    b470:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b474:	4a23      	ldr	r2, [pc, #140]	; (b504 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47a:	681b      	ldr	r3, [r3, #0]
    b47c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b484:	695b      	ldr	r3, [r3, #20]
    b486:	4618      	mov	r0, r3
    b488:	f000 fbce 	bl	bc28 <Adc_Ipw_CalculateNumsBitShift>
    b48c:	4603      	mov	r3, r0
    b48e:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b492:	9b03      	ldr	r3, [sp, #12]
    b494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b498:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b49c:	2300      	movs	r3, #0
    b49e:	f88d 3017 	strb.w	r3, [sp, #23]
    b4a2:	e022      	b.n	b4ea <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    b4a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b4a8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b4ac:	4611      	mov	r1, r2
    b4ae:	4618      	mov	r0, r3
    b4b0:	f7ff fcf4 	bl	ae9c <Adc_Ip_GetConvData>
    b4b4:	4603      	mov	r3, r0
    b4b6:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    b4ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b4be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b4c2:	fa02 f303 	lsl.w	r3, r2, r3
    b4c6:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    b4ca:	9b01      	ldr	r3, [sp, #4]
    b4cc:	2201      	movs	r2, #1
    b4ce:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    b4d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b4d4:	005b      	lsls	r3, r3, #1
    b4d6:	9a02      	ldr	r2, [sp, #8]
    b4d8:	4413      	add	r3, r2
    b4da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b4de:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b4e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b4e4:	3301      	adds	r3, #1
    b4e6:	f88d 3017 	strb.w	r3, [sp, #23]
    b4ea:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b4ee:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b4f2:	429a      	cmp	r2, r3
    b4f4:	d3d6      	bcc.n	b4a4 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    b4f6:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    b4fa:	4618      	mov	r0, r3
    b4fc:	b007      	add	sp, #28
    b4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b502:	bf00      	nop
    b504:	1fff8d40 	.word	0x1fff8d40

0000b508 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    b508:	b500      	push	{lr}
    b50a:	b087      	sub	sp, #28
    b50c:	9003      	str	r0, [sp, #12]
    b50e:	9102      	str	r1, [sp, #8]
    b510:	9201      	str	r2, [sp, #4]
    b512:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    b516:	2301      	movs	r3, #1
    b518:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b51c:	2300      	movs	r3, #0
    b51e:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b522:	9b03      	ldr	r3, [sp, #12]
    b524:	789b      	ldrb	r3, [r3, #2]
    b526:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b52a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b52e:	4a19      	ldr	r2, [pc, #100]	; (b594 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    b530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b534:	681a      	ldr	r2, [r3, #0]
    b536:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b53a:	4413      	add	r3, r2
    b53c:	7c1b      	ldrb	r3, [r3, #16]
    b53e:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    b542:	9b03      	ldr	r3, [sp, #12]
    b544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b548:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    b54c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    b550:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b554:	2100      	movs	r1, #0
    b556:	4618      	mov	r0, r3
    b558:	f000 fe2a 	bl	c1b0 <Adc_Ipw_CheckValidConversion>
    b55c:	4603      	mov	r3, r0
    b55e:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    b562:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b566:	2b00      	cmp	r3, #0
    b568:	d00a      	beq.n	b580 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    b56a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b56e:	9a01      	ldr	r2, [sp, #4]
    b570:	9902      	ldr	r1, [sp, #8]
    b572:	9803      	ldr	r0, [sp, #12]
    b574:	f7ff ff62 	bl	b43c <Adc_Ipw_ReadGroupConvData>
    b578:	4603      	mov	r3, r0
    b57a:	f88d 3017 	strb.w	r3, [sp, #23]
    b57e:	e002      	b.n	b586 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    b580:	2301      	movs	r3, #1
    b582:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    b586:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    b58a:	4618      	mov	r0, r3
    b58c:	b007      	add	sp, #28
    b58e:	f85d fb04 	ldr.w	pc, [sp], #4
    b592:	bf00      	nop
    b594:	1fff8d40 	.word	0x1fff8d40

0000b598 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    b598:	b088      	sub	sp, #32
    b59a:	4603      	mov	r3, r0
    b59c:	9100      	str	r1, [sp, #0]
    b59e:	f8ad 3006 	strh.w	r3, [sp, #6]
    b5a2:	4613      	mov	r3, r2
    b5a4:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b5a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b5ac:	4a3a      	ldr	r2, [pc, #232]	; (b698 <Adc_Ipw_WriteDataBuffer+0x100>)
    b5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b2:	68da      	ldr	r2, [r3, #12]
    b5b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b5b8:	005b      	lsls	r3, r3, #1
    b5ba:	4413      	add	r3, r2
    b5bc:	881b      	ldrh	r3, [r3, #0]
    b5be:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b5c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b5c6:	4a34      	ldr	r2, [pc, #208]	; (b698 <Adc_Ipw_WriteDataBuffer+0x100>)
    b5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5cc:	685a      	ldr	r2, [r3, #4]
    b5ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    b5d2:	2134      	movs	r1, #52	; 0x34
    b5d4:	fb01 f303 	mul.w	r3, r1, r3
    b5d8:	4413      	add	r3, r2
    b5da:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b5dc:	9b04      	ldr	r3, [sp, #16]
    b5de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b5e2:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    b5e6:	2300      	movs	r3, #0
    b5e8:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    b5ea:	2300      	movs	r3, #0
    b5ec:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    b5f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b5f4:	4929      	ldr	r1, [pc, #164]	; (b69c <Adc_Ipw_WriteDataBuffer+0x104>)
    b5f6:	4613      	mov	r3, r2
    b5f8:	009b      	lsls	r3, r3, #2
    b5fa:	4413      	add	r3, r2
    b5fc:	009b      	lsls	r3, r3, #2
    b5fe:	440b      	add	r3, r1
    b600:	3308      	adds	r3, #8
    b602:	881b      	ldrh	r3, [r3, #0]
    b604:	b29b      	uxth	r3, r3
    b606:	3b01      	subs	r3, #1
    b608:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    b60c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b610:	4922      	ldr	r1, [pc, #136]	; (b69c <Adc_Ipw_WriteDataBuffer+0x104>)
    b612:	4613      	mov	r3, r2
    b614:	009b      	lsls	r3, r3, #2
    b616:	4413      	add	r3, r2
    b618:	009b      	lsls	r3, r3, #2
    b61a:	440b      	add	r3, r1
    b61c:	3308      	adds	r3, #8
    b61e:	881b      	ldrh	r3, [r3, #0]
    b620:	b29b      	uxth	r3, r3
    b622:	2b00      	cmp	r3, #0
    b624:	d104      	bne.n	b630 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    b626:	9b04      	ldr	r3, [sp, #16]
    b628:	8b9b      	ldrh	r3, [r3, #28]
    b62a:	3b01      	subs	r3, #1
    b62c:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    b630:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b634:	4919      	ldr	r1, [pc, #100]	; (b69c <Adc_Ipw_WriteDataBuffer+0x104>)
    b636:	4613      	mov	r3, r2
    b638:	009b      	lsls	r3, r3, #2
    b63a:	4413      	add	r3, r2
    b63c:	009b      	lsls	r3, r3, #2
    b63e:	440b      	add	r3, r1
    b640:	330c      	adds	r3, #12
    b642:	681a      	ldr	r2, [r3, #0]
    b644:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b648:	005b      	lsls	r3, r3, #1
    b64a:	4413      	add	r3, r2
    b64c:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    b64e:	9b04      	ldr	r3, [sp, #16]
    b650:	8b9b      	ldrh	r3, [r3, #28]
    b652:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    b656:	2300      	movs	r3, #0
    b658:	f88d 301f 	strb.w	r3, [sp, #31]
    b65c:	e012      	b.n	b684 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    b65e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b662:	005b      	lsls	r3, r3, #1
    b664:	9a00      	ldr	r2, [sp, #0]
    b666:	4413      	add	r3, r2
    b668:	9a06      	ldr	r2, [sp, #24]
    b66a:	8812      	ldrh	r2, [r2, #0]
    b66c:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    b66e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b672:	005b      	lsls	r3, r3, #1
    b674:	9a06      	ldr	r2, [sp, #24]
    b676:	4413      	add	r3, r2
    b678:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    b67a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b67e:	3301      	adds	r3, #1
    b680:	f88d 301f 	strb.w	r3, [sp, #31]
    b684:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b688:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b68c:	429a      	cmp	r2, r3
    b68e:	d3e6      	bcc.n	b65e <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b690:	bf00      	nop
    b692:	bf00      	nop
    b694:	b008      	add	sp, #32
    b696:	4770      	bx	lr
    b698:	1fff8d40 	.word	0x1fff8d40
    b69c:	1fff8d48 	.word	0x1fff8d48

0000b6a0 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    b6a0:	b500      	push	{lr}
    b6a2:	b089      	sub	sp, #36	; 0x24
    b6a4:	9200      	str	r2, [sp, #0]
    b6a6:	461a      	mov	r2, r3
    b6a8:	4603      	mov	r3, r0
    b6aa:	f88d 3007 	strb.w	r3, [sp, #7]
    b6ae:	460b      	mov	r3, r1
    b6b0:	f8ad 3004 	strh.w	r3, [sp, #4]
    b6b4:	4613      	mov	r3, r2
    b6b6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    b6ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b6be:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b6c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b6c6:	f003 0307 	and.w	r3, r3, #7
    b6ca:	b2db      	uxtb	r3, r3
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	d006      	beq.n	b6de <Adc_Ipw_ConfigurePdbChannels+0x3e>
    b6d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b6d4:	08db      	lsrs	r3, r3, #3
    b6d6:	b2db      	uxtb	r3, r3
    b6d8:	3301      	adds	r3, #1
    b6da:	b2db      	uxtb	r3, r3
    b6dc:	e003      	b.n	b6e6 <Adc_Ipw_ConfigurePdbChannels+0x46>
    b6de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b6e2:	08db      	lsrs	r3, r3, #3
    b6e4:	b2db      	uxtb	r3, r3
    b6e6:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    b6ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b6ee:	4987      	ldr	r1, [pc, #540]	; (b90c <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    b6f0:	4613      	mov	r3, r2
    b6f2:	009b      	lsls	r3, r3, #2
    b6f4:	4413      	add	r3, r2
    b6f6:	009b      	lsls	r3, r3, #2
    b6f8:	440b      	add	r3, r1
    b6fa:	3310      	adds	r3, #16
    b6fc:	781b      	ldrb	r3, [r3, #0]
    b6fe:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b702:	4b83      	ldr	r3, [pc, #524]	; (b910 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    b704:	681b      	ldr	r3, [r3, #0]
    b706:	681a      	ldr	r2, [r3, #0]
    b708:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b70c:	4413      	add	r3, r2
    b70e:	7c1b      	ldrb	r3, [r3, #16]
    b710:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b714:	9b00      	ldr	r3, [sp, #0]
    b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b718:	691b      	ldr	r3, [r3, #16]
    b71a:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b71c:	2300      	movs	r3, #0
    b71e:	f88d 301f 	strb.w	r3, [sp, #31]
    b722:	e0e6      	b.n	b8f2 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    b724:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b728:	08db      	lsrs	r3, r3, #3
    b72a:	b2db      	uxtb	r3, r3
    b72c:	2b00      	cmp	r3, #0
    b72e:	d102      	bne.n	b736 <Adc_Ipw_ConfigurePdbChannels+0x96>
    b730:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b734:	e000      	b.n	b738 <Adc_Ipw_ConfigurePdbChannels+0x98>
    b736:	2308      	movs	r3, #8
    b738:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    b73c:	9b00      	ldr	r3, [sp, #0]
    b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b740:	7bdb      	ldrb	r3, [r3, #15]
    b742:	2b00      	cmp	r3, #0
    b744:	d05e      	beq.n	b804 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b746:	9b00      	ldr	r3, [sp, #0]
    b748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b74a:	7b9b      	ldrb	r3, [r3, #14]
    b74c:	f083 0301 	eor.w	r3, r3, #1
    b750:	b2db      	uxtb	r3, r3
    b752:	2b00      	cmp	r3, #0
    b754:	d02a      	beq.n	b7ac <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b756:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b75a:	f1c3 0308 	rsb	r3, r3, #8
    b75e:	22ff      	movs	r2, #255	; 0xff
    b760:	fa22 f303 	lsr.w	r3, r2, r3
    b764:	b2db      	uxtb	r3, r3
    b766:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b76a:	2300      	movs	r3, #0
    b76c:	f88d 301e 	strb.w	r3, [sp, #30]
    b770:	e015      	b.n	b79e <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    b772:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b776:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b77a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b77e:	4413      	add	r3, r2
    b780:	005b      	lsls	r3, r3, #1
    b782:	9a05      	ldr	r2, [sp, #20]
    b784:	4413      	add	r3, r2
    b786:	881b      	ldrh	r3, [r3, #0]
    b788:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b78c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b790:	f001 fd16 	bl	d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b794:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b798:	3301      	adds	r3, #1
    b79a:	f88d 301e 	strb.w	r3, [sp, #30]
    b79e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b7a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b7a6:	429a      	cmp	r2, r3
    b7a8:	d3e3      	bcc.n	b772 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    b7aa:	e051      	b.n	b850 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    b7ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7b0:	2b00      	cmp	r3, #0
    b7b2:	d110      	bne.n	b7d6 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b7b4:	2301      	movs	r3, #1
    b7b6:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    b7ba:	9b05      	ldr	r3, [sp, #20]
    b7bc:	881b      	ldrh	r3, [r3, #0]
    b7be:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b7c2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b7c6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b7ca:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b7ce:	2200      	movs	r2, #0
    b7d0:	f001 fcf6 	bl	d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b7d4:	e03c      	b.n	b850 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    b7d6:	2301      	movs	r3, #1
    b7d8:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    b7dc:	9b00      	ldr	r3, [sp, #0]
    b7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b7e0:	899a      	ldrh	r2, [r3, #12]
    b7e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7e6:	b29b      	uxth	r3, r3
    b7e8:	fb12 f303 	smulbb	r3, r2, r3
    b7ec:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b7f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b7f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b7f8:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b7fc:	2200      	movs	r2, #0
    b7fe:	f001 fcdf 	bl	d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b802:	e025      	b.n	b850 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    b804:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b808:	2b00      	cmp	r3, #0
    b80a:	d10b      	bne.n	b824 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    b80c:	2301      	movs	r3, #1
    b80e:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    b812:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b816:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b81a:	2300      	movs	r3, #0
    b81c:	2200      	movs	r2, #0
    b81e:	f001 fccf 	bl	d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b822:	e015      	b.n	b850 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b824:	2301      	movs	r3, #1
    b826:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    b82a:	9b00      	ldr	r3, [sp, #0]
    b82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b82e:	899a      	ldrh	r2, [r3, #12]
    b830:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b834:	b29b      	uxth	r3, r3
    b836:	fb12 f303 	smulbb	r3, r2, r3
    b83a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b83e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b842:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b846:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b84a:	2200      	movs	r2, #0
    b84c:	f001 fcb8 	bl	d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    b850:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b854:	4618      	mov	r0, r3
    b856:	f001 fb87 	bl	cf68 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    b85a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    b85e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b862:	1ad3      	subs	r3, r2, r3
    b864:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    b868:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b86c:	b29a      	uxth	r2, r3
    b86e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b872:	4413      	add	r3, r2
    b874:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b878:	9b00      	ldr	r3, [sp, #0]
    b87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b87c:	7b9b      	ldrb	r3, [r3, #14]
    b87e:	2b00      	cmp	r3, #0
    b880:	d01d      	beq.n	b8be <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    b882:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b886:	2b00      	cmp	r3, #0
    b888:	d10c      	bne.n	b8a4 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    b88a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b88e:	f1c3 0308 	rsb	r3, r3, #8
    b892:	22ff      	movs	r2, #255	; 0xff
    b894:	fa22 f303 	lsr.w	r3, r2, r3
    b898:	b2db      	uxtb	r3, r3
    b89a:	3b01      	subs	r3, #1
    b89c:	b2db      	uxtb	r3, r3
    b89e:	f88d 300e 	strb.w	r3, [sp, #14]
    b8a2:	e00f      	b.n	b8c4 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    b8a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b8a8:	f1c3 0308 	rsb	r3, r3, #8
    b8ac:	22ff      	movs	r2, #255	; 0xff
    b8ae:	fa22 f303 	lsr.w	r3, r2, r3
    b8b2:	b2db      	uxtb	r3, r3
    b8b4:	3b01      	subs	r3, #1
    b8b6:	b2db      	uxtb	r3, r3
    b8b8:	f88d 300e 	strb.w	r3, [sp, #14]
    b8bc:	e002      	b.n	b8c4 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    b8be:	2300      	movs	r3, #0
    b8c0:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b8c4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b8c8:	f1c3 0308 	rsb	r3, r3, #8
    b8cc:	22ff      	movs	r2, #255	; 0xff
    b8ce:	fa22 f303 	lsr.w	r3, r2, r3
    b8d2:	b2db      	uxtb	r3, r3
    b8d4:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    b8d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b8dc:	aa03      	add	r2, sp, #12
    b8de:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b8e2:	4618      	mov	r0, r3
    b8e4:	f001 fb7c 	bl	cfe0 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b8e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b8ec:	3301      	adds	r3, #1
    b8ee:	f88d 301f 	strb.w	r3, [sp, #31]
    b8f2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b8f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b8fa:	429a      	cmp	r2, r3
    b8fc:	f4ff af12 	bcc.w	b724 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    b900:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    b904:	4618      	mov	r0, r3
    b906:	b009      	add	sp, #36	; 0x24
    b908:	f85d fb04 	ldr.w	pc, [sp], #4
    b90c:	1fff8d48 	.word	0x1fff8d48
    b910:	1fff8d40 	.word	0x1fff8d40

0000b914 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    b914:	b500      	push	{lr}
    b916:	b089      	sub	sp, #36	; 0x24
    b918:	9202      	str	r2, [sp, #8]
    b91a:	9301      	str	r3, [sp, #4]
    b91c:	4603      	mov	r3, r0
    b91e:	f88d 300f 	strb.w	r3, [sp, #15]
    b922:	460b      	mov	r3, r1
    b924:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    b928:	2300      	movs	r3, #0
    b92a:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b92e:	4b62      	ldr	r3, [pc, #392]	; (bab8 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    b930:	681b      	ldr	r3, [r3, #0]
    b932:	681a      	ldr	r2, [r3, #0]
    b934:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b938:	4413      	add	r3, r2
    b93a:	7c1b      	ldrb	r3, [r3, #16]
    b93c:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b940:	9b02      	ldr	r3, [sp, #8]
    b942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b944:	691b      	ldr	r3, [r3, #16]
    b946:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b948:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b94c:	f003 0307 	and.w	r3, r3, #7
    b950:	b2db      	uxtb	r3, r3
    b952:	2b00      	cmp	r3, #0
    b954:	d006      	beq.n	b964 <Adc_Ipw_ConfigurePdbConversion+0x50>
    b956:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b95a:	08db      	lsrs	r3, r3, #3
    b95c:	b2db      	uxtb	r3, r3
    b95e:	3301      	adds	r3, #1
    b960:	b2db      	uxtb	r3, r3
    b962:	e003      	b.n	b96c <Adc_Ipw_ConfigurePdbConversion+0x58>
    b964:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b968:	08db      	lsrs	r3, r3, #3
    b96a:	b2db      	uxtb	r3, r3
    b96c:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    b970:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b974:	4618      	mov	r0, r3
    b976:	f001 fa61 	bl	ce3c <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    b97a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b97e:	9901      	ldr	r1, [sp, #4]
    b980:	4618      	mov	r0, r3
    b982:	f001 fa89 	bl	ce98 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    b986:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b98a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b98e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b992:	9a02      	ldr	r2, [sp, #8]
    b994:	f7ff fe84 	bl	b6a0 <Adc_Ipw_ConfigurePdbChannels>
    b998:	4603      	mov	r3, r0
    b99a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    b99e:	9b02      	ldr	r3, [sp, #8]
    b9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9a2:	7bdb      	ldrb	r3, [r3, #15]
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d02f      	beq.n	ba08 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b9a8:	9b02      	ldr	r3, [sp, #8]
    b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9ac:	7b9b      	ldrb	r3, [r3, #14]
    b9ae:	f083 0301 	eor.w	r3, r3, #1
    b9b2:	b2db      	uxtb	r3, r3
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	d017      	beq.n	b9e8 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    b9b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b9bc:	493f      	ldr	r1, [pc, #252]	; (babc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    b9be:	4613      	mov	r3, r2
    b9c0:	009b      	lsls	r3, r3, #2
    b9c2:	4413      	add	r3, r2
    b9c4:	009b      	lsls	r3, r3, #2
    b9c6:	440b      	add	r3, r1
    b9c8:	3310      	adds	r3, #16
    b9ca:	781b      	ldrb	r3, [r3, #0]
    b9cc:	461a      	mov	r2, r3
    b9ce:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b9d2:	4413      	add	r3, r2
    b9d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    b9d8:	3b01      	subs	r3, #1
    b9da:	005b      	lsls	r3, r3, #1
    b9dc:	9a05      	ldr	r2, [sp, #20]
    b9de:	4413      	add	r3, r2
    b9e0:	881b      	ldrh	r3, [r3, #0]
    b9e2:	f8ad 301c 	strh.w	r3, [sp, #28]
    b9e6:	e01a      	b.n	ba1e <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    b9e8:	9b05      	ldr	r3, [sp, #20]
    b9ea:	881a      	ldrh	r2, [r3, #0]
    b9ec:	9b02      	ldr	r3, [sp, #8]
    b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9f0:	8999      	ldrh	r1, [r3, #12]
    b9f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b9f6:	3b01      	subs	r3, #1
    b9f8:	b29b      	uxth	r3, r3
    b9fa:	fb11 f303 	smulbb	r3, r1, r3
    b9fe:	b29b      	uxth	r3, r3
    ba00:	4413      	add	r3, r2
    ba02:	f8ad 301c 	strh.w	r3, [sp, #28]
    ba06:	e00a      	b.n	ba1e <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    ba08:	9b02      	ldr	r3, [sp, #8]
    ba0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba0c:	899a      	ldrh	r2, [r3, #12]
    ba0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ba12:	3b01      	subs	r3, #1
    ba14:	b29b      	uxth	r3, r3
    ba16:	fb12 f303 	smulbb	r3, r2, r3
    ba1a:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    ba1e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    ba26:	4611      	mov	r1, r2
    ba28:	4618      	mov	r0, r3
    ba2a:	f001 fab5 	bl	cf98 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    ba2e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba32:	4618      	mov	r0, r3
    ba34:	f001 fa98 	bl	cf68 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    ba38:	2300      	movs	r3, #0
    ba3a:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    ba3e:	2300      	movs	r3, #0
    ba40:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    ba44:	2300      	movs	r3, #0
    ba46:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    ba4a:	e00c      	b.n	ba66 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    ba4c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba50:	aa04      	add	r2, sp, #16
    ba52:	f89d 101f 	ldrb.w	r1, [sp, #31]
    ba56:	4618      	mov	r0, r3
    ba58:	f001 fac2 	bl	cfe0 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    ba5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba60:	3301      	adds	r3, #1
    ba62:	f88d 301f 	strb.w	r3, [sp, #31]
    ba66:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba6a:	2b01      	cmp	r3, #1
    ba6c:	d9ee      	bls.n	ba4c <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    ba6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ba72:	4912      	ldr	r1, [pc, #72]	; (babc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    ba74:	4613      	mov	r3, r2
    ba76:	009b      	lsls	r3, r3, #2
    ba78:	4413      	add	r3, r2
    ba7a:	009b      	lsls	r3, r3, #2
    ba7c:	440b      	add	r3, r1
    ba7e:	3310      	adds	r3, #16
    ba80:	7819      	ldrb	r1, [r3, #0]
    ba82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ba86:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ba8a:	440b      	add	r3, r1
    ba8c:	b2d8      	uxtb	r0, r3
    ba8e:	490b      	ldr	r1, [pc, #44]	; (babc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    ba90:	4613      	mov	r3, r2
    ba92:	009b      	lsls	r3, r3, #2
    ba94:	4413      	add	r3, r2
    ba96:	009b      	lsls	r3, r3, #2
    ba98:	440b      	add	r3, r1
    ba9a:	3310      	adds	r3, #16
    ba9c:	4602      	mov	r2, r0
    ba9e:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    baa0:	9b01      	ldr	r3, [sp, #4]
    baa2:	2b0f      	cmp	r3, #15
    baa4:	d104      	bne.n	bab0 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    baa6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    baaa:	4618      	mov	r0, r3
    baac:	f001 fa34 	bl	cf18 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    bab0:	bf00      	nop
    bab2:	b009      	add	sp, #36	; 0x24
    bab4:	f85d fb04 	ldr.w	pc, [sp], #4
    bab8:	1fff8d40 	.word	0x1fff8d40
    babc:	1fff8d48 	.word	0x1fff8d48

0000bac0 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    bac0:	b500      	push	{lr}
    bac2:	b087      	sub	sp, #28
    bac4:	4603      	mov	r3, r0
    bac6:	f88d 3007 	strb.w	r3, [sp, #7]
    baca:	460b      	mov	r3, r1
    bacc:	f8ad 3004 	strh.w	r3, [sp, #4]
    bad0:	4613      	mov	r3, r2
    bad2:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    bad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bada:	4a36      	ldr	r2, [pc, #216]	; (bbb4 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    badc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae0:	68da      	ldr	r2, [r3, #12]
    bae2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    bae6:	005b      	lsls	r3, r3, #1
    bae8:	4413      	add	r3, r2
    baea:	881b      	ldrh	r3, [r3, #0]
    baec:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    baf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    baf4:	4a2f      	ldr	r2, [pc, #188]	; (bbb4 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    baf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bafa:	681a      	ldr	r2, [r3, #0]
    bafc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bb00:	4413      	add	r3, r2
    bb02:	7c1b      	ldrb	r3, [r3, #16]
    bb04:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    bb08:	2300      	movs	r3, #0
    bb0a:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    bb0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bb12:	4618      	mov	r0, r3
    bb14:	f001 fb7e 	bl	d214 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    bb18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bb1c:	4a25      	ldr	r2, [pc, #148]	; (bbb4 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bb1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb22:	685a      	ldr	r2, [r3, #4]
    bb24:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bb28:	2134      	movs	r1, #52	; 0x34
    bb2a:	fb01 f303 	mul.w	r3, r1, r3
    bb2e:	4413      	add	r3, r2
    bb30:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    bb34:	2b01      	cmp	r3, #1
    bb36:	d114      	bne.n	bb62 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    bb38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bb3c:	4a1d      	ldr	r2, [pc, #116]	; (bbb4 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb42:	685a      	ldr	r2, [r3, #4]
    bb44:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bb48:	2134      	movs	r1, #52	; 0x34
    bb4a:	fb01 f303 	mul.w	r3, r1, r3
    bb4e:	4413      	add	r3, r2
    bb50:	689b      	ldr	r3, [r3, #8]
    bb52:	2b01      	cmp	r3, #1
    bb54:	d105      	bne.n	bb62 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    bb56:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bb5a:	2100      	movs	r1, #0
    bb5c:	4618      	mov	r0, r3
    bb5e:	f7ff f827 	bl	abb0 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bb62:	2300      	movs	r3, #0
    bb64:	f88d 3016 	strb.w	r3, [sp, #22]
    bb68:	e013      	b.n	bb92 <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    bb6a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bb6e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    bb72:	2201      	movs	r2, #1
    bb74:	4618      	mov	r0, r3
    bb76:	f7ff f8cd 	bl	ad14 <Adc_Ip_SetDisabledChannel>
    bb7a:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    bb7c:	9b03      	ldr	r3, [sp, #12]
    bb7e:	2b02      	cmp	r3, #2
    bb80:	d102      	bne.n	bb88 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    bb82:	2301      	movs	r3, #1
    bb84:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bb88:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bb8c:	3301      	adds	r3, #1
    bb8e:	f88d 3016 	strb.w	r3, [sp, #22]
    bb92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bb96:	4a08      	ldr	r2, [pc, #32]	; (bbb8 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    bb98:	00db      	lsls	r3, r3, #3
    bb9a:	4413      	add	r3, r2
    bb9c:	799b      	ldrb	r3, [r3, #6]
    bb9e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    bba2:	429a      	cmp	r2, r3
    bba4:	d3e1      	bcc.n	bb6a <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    bba6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    bbaa:	4618      	mov	r0, r3
    bbac:	b007      	add	sp, #28
    bbae:	f85d fb04 	ldr.w	pc, [sp], #4
    bbb2:	bf00      	nop
    bbb4:	1fff8d40 	.word	0x1fff8d40
    bbb8:	1fff8d70 	.word	0x1fff8d70

0000bbbc <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    bbbc:	b500      	push	{lr}
    bbbe:	b085      	sub	sp, #20
    bbc0:	4603      	mov	r3, r0
    bbc2:	9100      	str	r1, [sp, #0]
    bbc4:	f88d 3007 	strb.w	r3, [sp, #7]
    bbc8:	4613      	mov	r3, r2
    bbca:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bbce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bbd2:	4a14      	ldr	r2, [pc, #80]	; (bc24 <Adc_Ipw_PrepareGroupStart+0x68>)
    bbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbd8:	681a      	ldr	r2, [r3, #0]
    bbda:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bbde:	4413      	add	r3, r2
    bbe0:	7c1b      	ldrb	r3, [r3, #16]
    bbe2:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    bbe6:	9b00      	ldr	r3, [sp, #0]
    bbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbea:	781b      	ldrb	r3, [r3, #0]
    bbec:	2b01      	cmp	r3, #1
    bbee:	d108      	bne.n	bc02 <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    bbf0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    bbf4:	9b00      	ldr	r3, [sp, #0]
    bbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbf8:	685b      	ldr	r3, [r3, #4]
    bbfa:	461a      	mov	r2, r3
    bbfc:	2101      	movs	r1, #1
    bbfe:	f7fe ff51 	bl	aaa4 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    bc02:	9b00      	ldr	r3, [sp, #0]
    bc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bc06:	7a1b      	ldrb	r3, [r3, #8]
    bc08:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    bc0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc10:	f89d 200e 	ldrb.w	r2, [sp, #14]
    bc14:	4611      	mov	r1, r2
    bc16:	4618      	mov	r0, r3
    bc18:	f7fe ff62 	bl	aae0 <Adc_Ip_SetSampleTime>
}
    bc1c:	bf00      	nop
    bc1e:	b005      	add	sp, #20
    bc20:	f85d fb04 	ldr.w	pc, [sp], #4
    bc24:	1fff8d40 	.word	0x1fff8d40

0000bc28 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    bc28:	b084      	sub	sp, #16
    bc2a:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    bc2c:	2300      	movs	r3, #0
    bc2e:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    bc32:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bc36:	4618      	mov	r0, r3
    bc38:	b004      	add	sp, #16
    bc3a:	4770      	bx	lr

0000bc3c <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    bc3c:	b500      	push	{lr}
    bc3e:	b08f      	sub	sp, #60	; 0x3c
    bc40:	9202      	str	r2, [sp, #8]
    bc42:	461a      	mov	r2, r3
    bc44:	4603      	mov	r3, r0
    bc46:	f88d 300f 	strb.w	r3, [sp, #15]
    bc4a:	460b      	mov	r3, r1
    bc4c:	f8ad 300c 	strh.w	r3, [sp, #12]
    bc50:	4613      	mov	r3, r2
    bc52:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    bc56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc5a:	4a6d      	ldr	r2, [pc, #436]	; (be10 <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc60:	68da      	ldr	r2, [r3, #12]
    bc62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    bc66:	005b      	lsls	r3, r3, #1
    bc68:	4413      	add	r3, r2
    bc6a:	881b      	ldrh	r3, [r3, #0]
    bc6c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    bc70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc74:	4a66      	ldr	r2, [pc, #408]	; (be10 <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc7a:	685a      	ldr	r2, [r3, #4]
    bc7c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    bc80:	2134      	movs	r1, #52	; 0x34
    bc82:	fb01 f303 	mul.w	r3, r1, r3
    bc86:	4413      	add	r3, r2
    bc88:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bc8a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc8e:	4a60      	ldr	r2, [pc, #384]	; (be10 <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc94:	681a      	ldr	r2, [r3, #0]
    bc96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc9a:	4413      	add	r3, r2
    bc9c:	7c1b      	ldrb	r3, [r3, #16]
    bc9e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    bca2:	2300      	movs	r3, #0
    bca4:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    bca6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bcaa:	495a      	ldr	r1, [pc, #360]	; (be14 <Adc_Ipw_ConfigureConversion+0x1d8>)
    bcac:	4613      	mov	r3, r2
    bcae:	009b      	lsls	r3, r3, #2
    bcb0:	4413      	add	r3, r2
    bcb2:	009b      	lsls	r3, r3, #2
    bcb4:	440b      	add	r3, r1
    bcb6:	3310      	adds	r3, #16
    bcb8:	781b      	ldrb	r3, [r3, #0]
    bcba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    bcbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bcc0:	6a1b      	ldr	r3, [r3, #32]
    bcc2:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bcc4:	2300      	movs	r3, #0
    bcc6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bcca:	e030      	b.n	bd2e <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bccc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bcd0:	4a4f      	ldr	r2, [pc, #316]	; (be10 <Adc_Ipw_ConfigureConversion+0x1d4>)
    bcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd6:	681b      	ldr	r3, [r3, #0]
    bcd8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bce2:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bce6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bcea:	440b      	add	r3, r1
    bcec:	005b      	lsls	r3, r3, #1
    bcee:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcf0:	440b      	add	r3, r1
    bcf2:	881b      	ldrh	r3, [r3, #0]
    bcf4:	4619      	mov	r1, r3
    bcf6:	460b      	mov	r3, r1
    bcf8:	005b      	lsls	r3, r3, #1
    bcfa:	440b      	add	r3, r1
    bcfc:	009b      	lsls	r3, r3, #2
    bcfe:	4413      	add	r3, r2
    bd00:	685b      	ldr	r3, [r3, #4]
    bd02:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    bd04:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd08:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    bd0c:	9b08      	ldr	r3, [sp, #32]
    bd0e:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    bd10:	2300      	movs	r3, #0
    bd12:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bd16:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bd1a:	aa05      	add	r2, sp, #20
    bd1c:	4611      	mov	r1, r2
    bd1e:	4618      	mov	r0, r3
    bd20:	f7fe ffc8 	bl	acb4 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bd24:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd28:	3301      	adds	r3, #1
    bd2a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bd2e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    bd32:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bd36:	3b01      	subs	r3, #1
    bd38:	429a      	cmp	r2, r3
    bd3a:	d3c7      	bcc.n	bccc <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bd3c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bd40:	4a33      	ldr	r2, [pc, #204]	; (be10 <Adc_Ipw_ConfigureConversion+0x1d4>)
    bd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd46:	681b      	ldr	r3, [r3, #0]
    bd48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bd50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bd52:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bd56:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd5a:	440b      	add	r3, r1
    bd5c:	005b      	lsls	r3, r3, #1
    bd5e:	990a      	ldr	r1, [sp, #40]	; 0x28
    bd60:	440b      	add	r3, r1
    bd62:	881b      	ldrh	r3, [r3, #0]
    bd64:	4619      	mov	r1, r3
    bd66:	460b      	mov	r3, r1
    bd68:	005b      	lsls	r3, r3, #1
    bd6a:	440b      	add	r3, r1
    bd6c:	009b      	lsls	r3, r3, #2
    bd6e:	4413      	add	r3, r2
    bd70:	685b      	ldr	r3, [r3, #4]
    bd72:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    bd74:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd78:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    bd7c:	9b08      	ldr	r3, [sp, #32]
    bd7e:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    bd80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd82:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    bd86:	2b00      	cmp	r3, #0
    bd88:	d103      	bne.n	bd92 <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    bd8a:	2301      	movs	r3, #1
    bd8c:	f88d 301c 	strb.w	r3, [sp, #28]
    bd90:	e002      	b.n	bd98 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    bd92:	2300      	movs	r3, #0
    bd94:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bd98:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bd9c:	aa05      	add	r2, sp, #20
    bd9e:	4611      	mov	r1, r2
    bda0:	4618      	mov	r0, r3
    bda2:	f7fe ff87 	bl	acb4 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    bda6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bdaa:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bdae:	e014      	b.n	bdda <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    bdb0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bdb4:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    bdb8:	231f      	movs	r3, #31
    bdba:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    bdbc:	2300      	movs	r3, #0
    bdbe:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bdc2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bdc6:	aa05      	add	r2, sp, #20
    bdc8:	4611      	mov	r1, r2
    bdca:	4618      	mov	r0, r3
    bdcc:	f7fe ff72 	bl	acb4 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    bdd0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bdd4:	3301      	adds	r3, #1
    bdd6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bdda:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bdde:	2b0f      	cmp	r3, #15
    bde0:	d9e6      	bls.n	bdb0 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    bde2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bde6:	4a0c      	ldr	r2, [pc, #48]	; (be18 <Adc_Ipw_ConfigureConversion+0x1dc>)
    bde8:	00db      	lsls	r3, r3, #3
    bdea:	4413      	add	r3, r2
    bdec:	f89d 200e 	ldrb.w	r2, [sp, #14]
    bdf0:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    bdf2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    bdf6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    bdfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bdfe:	9300      	str	r3, [sp, #0]
    be00:	9b02      	ldr	r3, [sp, #8]
    be02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    be04:	f7ff fd86 	bl	b914 <Adc_Ipw_ConfigurePdbConversion>
}
    be08:	bf00      	nop
    be0a:	b00f      	add	sp, #60	; 0x3c
    be0c:	f85d fb04 	ldr.w	pc, [sp], #4
    be10:	1fff8d40 	.word	0x1fff8d40
    be14:	1fff8d48 	.word	0x1fff8d48
    be18:	1fff8d70 	.word	0x1fff8d70

0000be1c <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    be1c:	b500      	push	{lr}
    be1e:	b085      	sub	sp, #20
    be20:	9001      	str	r0, [sp, #4]
    be22:	460b      	mov	r3, r1
    be24:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    be28:	2300      	movs	r3, #0
    be2a:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    be2e:	2300      	movs	r3, #0
    be30:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    be34:	2300      	movs	r3, #0
    be36:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    be3a:	2300      	movs	r3, #0
    be3c:	f88d 300f 	strb.w	r3, [sp, #15]
    be40:	e027      	b.n	be92 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    be42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be46:	9a01      	ldr	r2, [sp, #4]
    be48:	4413      	add	r3, r2
    be4a:	7f9b      	ldrb	r3, [r3, #30]
    be4c:	2b01      	cmp	r3, #1
    be4e:	d11b      	bne.n	be88 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    be50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be54:	9a01      	ldr	r2, [sp, #4]
    be56:	4413      	add	r3, r2
    be58:	7c1b      	ldrb	r3, [r3, #16]
    be5a:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    be5e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    be62:	f89d 200f 	ldrb.w	r2, [sp, #15]
    be66:	9b01      	ldr	r3, [sp, #4]
    be68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    be6c:	4619      	mov	r1, r3
    be6e:	f7fe fcb8 	bl	a7e2 <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    be72:	f89d 000e 	ldrb.w	r0, [sp, #14]
    be76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    be7a:	9b01      	ldr	r3, [sp, #4]
    be7c:	3202      	adds	r2, #2
    be7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    be82:	4619      	mov	r1, r3
    be84:	f000 fead 	bl	cbe2 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    be88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be8c:	3301      	adds	r3, #1
    be8e:	f88d 300f 	strb.w	r3, [sp, #15]
    be92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be96:	2b01      	cmp	r3, #1
    be98:	d9d3      	bls.n	be42 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    be9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    be9e:	4618      	mov	r0, r3
    bea0:	b005      	add	sp, #20
    bea2:	f85d fb04 	ldr.w	pc, [sp], #4

0000bea6 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    bea6:	b500      	push	{lr}
    bea8:	b087      	sub	sp, #28
    beaa:	4603      	mov	r3, r0
    beac:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    beb0:	2300      	movs	r3, #0
    beb2:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    beb6:	2300      	movs	r3, #0
    beb8:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    bebc:	2300      	movs	r3, #0
    bebe:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    bec2:	2300      	movs	r3, #0
    bec4:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    bec8:	2300      	movs	r3, #0
    beca:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bece:	2300      	movs	r3, #0
    bed0:	f88d 3017 	strb.w	r3, [sp, #23]
    bed4:	e026      	b.n	bf24 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    bed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    beda:	4a2e      	ldr	r2, [pc, #184]	; (bf94 <Adc_Ipw_DeInit+0xee>)
    bedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bee0:	681a      	ldr	r2, [r3, #0]
    bee2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bee6:	4413      	add	r3, r2
    bee8:	7f9b      	ldrb	r3, [r3, #30]
    beea:	2b01      	cmp	r3, #1
    beec:	d115      	bne.n	bf1a <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    beee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bef2:	4a28      	ldr	r2, [pc, #160]	; (bf94 <Adc_Ipw_DeInit+0xee>)
    bef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bef8:	681a      	ldr	r2, [r3, #0]
    befa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    befe:	4413      	add	r3, r2
    bf00:	7c1b      	ldrb	r3, [r3, #16]
    bf02:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    bf06:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bf0a:	4618      	mov	r0, r3
    bf0c:	f7fe fd40 	bl	a990 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    bf10:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bf14:	4618      	mov	r0, r3
    bf16:	f000 ff0d 	bl	cd34 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bf1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bf1e:	3301      	adds	r3, #1
    bf20:	f88d 3017 	strb.w	r3, [sp, #23]
    bf24:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bf28:	2b01      	cmp	r3, #1
    bf2a:	d9d4      	bls.n	bed6 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    bf2c:	2300      	movs	r3, #0
    bf2e:	f8ad 3014 	strh.w	r3, [sp, #20]
    bf32:	e01e      	b.n	bf72 <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    bf34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf38:	4a16      	ldr	r2, [pc, #88]	; (bf94 <Adc_Ipw_DeInit+0xee>)
    bf3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf3e:	685a      	ldr	r2, [r3, #4]
    bf40:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bf44:	2134      	movs	r1, #52	; 0x34
    bf46:	fb01 f303 	mul.w	r3, r1, r3
    bf4a:	4413      	add	r3, r2
    bf4c:	881b      	ldrh	r3, [r3, #0]
    bf4e:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    bf52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    bf56:	4910      	ldr	r1, [pc, #64]	; (bf98 <Adc_Ipw_DeInit+0xf2>)
    bf58:	4613      	mov	r3, r2
    bf5a:	009b      	lsls	r3, r3, #2
    bf5c:	4413      	add	r3, r2
    bf5e:	009b      	lsls	r3, r3, #2
    bf60:	440b      	add	r3, r1
    bf62:	330c      	adds	r3, #12
    bf64:	2200      	movs	r2, #0
    bf66:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    bf68:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bf6c:	3301      	adds	r3, #1
    bf6e:	f8ad 3014 	strh.w	r3, [sp, #20]
    bf72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf76:	4a07      	ldr	r2, [pc, #28]	; (bf94 <Adc_Ipw_DeInit+0xee>)
    bf78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf7c:	891b      	ldrh	r3, [r3, #8]
    bf7e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    bf82:	429a      	cmp	r2, r3
    bf84:	d3d6      	bcc.n	bf34 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    bf86:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bf8a:	4618      	mov	r0, r3
    bf8c:	b007      	add	sp, #28
    bf8e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf92:	bf00      	nop
    bf94:	1fff8d40 	.word	0x1fff8d40
    bf98:	1fff8d48 	.word	0x1fff8d48

0000bf9c <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    bf9c:	b500      	push	{lr}
    bf9e:	b089      	sub	sp, #36	; 0x24
    bfa0:	4603      	mov	r3, r0
    bfa2:	460a      	mov	r2, r1
    bfa4:	f88d 300f 	strb.w	r3, [sp, #15]
    bfa8:	4613      	mov	r3, r2
    bfaa:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    bfae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bfb2:	4a4c      	ldr	r2, [pc, #304]	; (c0e4 <Adc_Ipw_StartNormalConversion+0x148>)
    bfb4:	00db      	lsls	r3, r3, #3
    bfb6:	4413      	add	r3, r2
    bfb8:	885b      	ldrh	r3, [r3, #2]
    bfba:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    bfbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bfc2:	4a49      	ldr	r2, [pc, #292]	; (c0e8 <Adc_Ipw_StartNormalConversion+0x14c>)
    bfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc8:	68da      	ldr	r2, [r3, #12]
    bfca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    bfce:	005b      	lsls	r3, r3, #1
    bfd0:	4413      	add	r3, r2
    bfd2:	881b      	ldrh	r3, [r3, #0]
    bfd4:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    bfd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bfdc:	4a42      	ldr	r2, [pc, #264]	; (c0e8 <Adc_Ipw_StartNormalConversion+0x14c>)
    bfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfe2:	685a      	ldr	r2, [r3, #4]
    bfe4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    bfe8:	2134      	movs	r1, #52	; 0x34
    bfea:	fb01 f303 	mul.w	r3, r1, r3
    bfee:	4413      	add	r3, r2
    bff0:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bff2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bff6:	4a3c      	ldr	r2, [pc, #240]	; (c0e8 <Adc_Ipw_StartNormalConversion+0x14c>)
    bff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bffc:	681a      	ldr	r2, [r3, #0]
    bffe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c002:	4413      	add	r3, r2
    c004:	7c1b      	ldrb	r3, [r3, #16]
    c006:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    c00a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c00e:	4a35      	ldr	r2, [pc, #212]	; (c0e4 <Adc_Ipw_StartNormalConversion+0x148>)
    c010:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c014:	b29b      	uxth	r3, r3
    c016:	2b00      	cmp	r3, #0
    c018:	d05f      	beq.n	c0da <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    c01a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    c01e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c022:	9905      	ldr	r1, [sp, #20]
    c024:	4618      	mov	r0, r3
    c026:	f7ff fdc9 	bl	bbbc <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c02a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c02e:	492f      	ldr	r1, [pc, #188]	; (c0ec <Adc_Ipw_StartNormalConversion+0x150>)
    c030:	4613      	mov	r3, r2
    c032:	009b      	lsls	r3, r3, #2
    c034:	4413      	add	r3, r2
    c036:	009b      	lsls	r3, r3, #2
    c038:	440b      	add	r3, r1
    c03a:	3310      	adds	r3, #16
    c03c:	2200      	movs	r2, #0
    c03e:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    c040:	9b05      	ldr	r3, [sp, #20]
    c042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c046:	2b0f      	cmp	r3, #15
    c048:	d806      	bhi.n	c058 <Adc_Ipw_StartNormalConversion+0xbc>
    c04a:	9b05      	ldr	r3, [sp, #20]
    c04c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c050:	f003 030f 	and.w	r3, r3, #15
    c054:	b2db      	uxtb	r3, r3
    c056:	e000      	b.n	c05a <Adc_Ipw_StartNormalConversion+0xbe>
    c058:	2310      	movs	r3, #16
    c05a:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    c05e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c062:	4a20      	ldr	r2, [pc, #128]	; (c0e4 <Adc_Ipw_StartNormalConversion+0x148>)
    c064:	00db      	lsls	r3, r3, #3
    c066:	4413      	add	r3, r2
    c068:	799b      	ldrb	r3, [r3, #6]
    c06a:	2b00      	cmp	r3, #0
    c06c:	d107      	bne.n	c07e <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    c06e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c072:	4a1c      	ldr	r2, [pc, #112]	; (c0e4 <Adc_Ipw_StartNormalConversion+0x148>)
    c074:	00db      	lsls	r3, r3, #3
    c076:	4413      	add	r3, r2
    c078:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c07c:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c07e:	2300      	movs	r3, #0
    c080:	f88d 301f 	strb.w	r3, [sp, #31]
    c084:	e00c      	b.n	c0a0 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c086:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c08a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c08e:	4611      	mov	r1, r2
    c090:	4618      	mov	r0, r3
    c092:	f7fe ff03 	bl	ae9c <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c096:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c09a:	3301      	adds	r3, #1
    c09c:	f88d 301f 	strb.w	r3, [sp, #31]
    c0a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0a4:	4a0f      	ldr	r2, [pc, #60]	; (c0e4 <Adc_Ipw_StartNormalConversion+0x148>)
    c0a6:	00db      	lsls	r3, r3, #3
    c0a8:	4413      	add	r3, r2
    c0aa:	799b      	ldrb	r3, [r3, #6]
    c0ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c0b0:	429a      	cmp	r2, r3
    c0b2:	d3e8      	bcc.n	c086 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    c0b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c0b8:	2101      	movs	r1, #1
    c0ba:	4618      	mov	r0, r3
    c0bc:	f7fe fd60 	bl	ab80 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c0c0:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c0c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    c0c8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c0cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c0d0:	9300      	str	r3, [sp, #0]
    c0d2:	4613      	mov	r3, r2
    c0d4:	220f      	movs	r2, #15
    c0d6:	f7ff fdb1 	bl	bc3c <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    c0da:	bf00      	nop
    c0dc:	b009      	add	sp, #36	; 0x24
    c0de:	f85d fb04 	ldr.w	pc, [sp], #4
    c0e2:	bf00      	nop
    c0e4:	1fff8d70 	.word	0x1fff8d70
    c0e8:	1fff8d40 	.word	0x1fff8d40
    c0ec:	1fff8d48 	.word	0x1fff8d48

0000c0f0 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c0f0:	b500      	push	{lr}
    c0f2:	b085      	sub	sp, #20
    c0f4:	4603      	mov	r3, r0
    c0f6:	f88d 3007 	strb.w	r3, [sp, #7]
    c0fa:	460b      	mov	r3, r1
    c0fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    c100:	4613      	mov	r3, r2
    c102:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c106:	2300      	movs	r3, #0
    c108:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c10c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c110:	4a24      	ldr	r2, [pc, #144]	; (c1a4 <Adc_Ipw_StopCurrentConversion+0xb4>)
    c112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c116:	681a      	ldr	r2, [r3, #0]
    c118:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c11c:	4413      	add	r3, r2
    c11e:	7c1b      	ldrb	r3, [r3, #16]
    c120:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c124:	2300      	movs	r3, #0
    c126:	f88d 300f 	strb.w	r3, [sp, #15]
    c12a:	e014      	b.n	c156 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    c12c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c130:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c134:	2200      	movs	r2, #0
    c136:	4618      	mov	r0, r3
    c138:	f7fe fdec 	bl	ad14 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c13c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c140:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c144:	4611      	mov	r1, r2
    c146:	4618      	mov	r0, r3
    c148:	f7fe fea8 	bl	ae9c <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c14c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c150:	3301      	adds	r3, #1
    c152:	f88d 300f 	strb.w	r3, [sp, #15]
    c156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c15a:	4a13      	ldr	r2, [pc, #76]	; (c1a8 <Adc_Ipw_StopCurrentConversion+0xb8>)
    c15c:	00db      	lsls	r3, r3, #3
    c15e:	4413      	add	r3, r2
    c160:	799b      	ldrb	r3, [r3, #6]
    c162:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c166:	429a      	cmp	r2, r3
    c168:	d3e0      	bcc.n	c12c <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c16a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c16e:	490f      	ldr	r1, [pc, #60]	; (c1ac <Adc_Ipw_StopCurrentConversion+0xbc>)
    c170:	4613      	mov	r3, r2
    c172:	009b      	lsls	r3, r3, #2
    c174:	4413      	add	r3, r2
    c176:	009b      	lsls	r3, r3, #2
    c178:	440b      	add	r3, r1
    c17a:	3310      	adds	r3, #16
    c17c:	2200      	movs	r2, #0
    c17e:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    c180:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c184:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c18c:	4618      	mov	r0, r3
    c18e:	f7ff fc97 	bl	bac0 <Adc_Ipw_StopConversionCheckTimeout>
    c192:	4603      	mov	r3, r0
    c194:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    c198:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c19c:	4618      	mov	r0, r3
    c19e:	b005      	add	sp, #20
    c1a0:	f85d fb04 	ldr.w	pc, [sp], #4
    c1a4:	1fff8d40 	.word	0x1fff8d40
    c1a8:	1fff8d70 	.word	0x1fff8d70
    c1ac:	1fff8d48 	.word	0x1fff8d48

0000c1b0 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    c1b0:	b500      	push	{lr}
    c1b2:	b085      	sub	sp, #20
    c1b4:	4603      	mov	r3, r0
    c1b6:	f88d 3007 	strb.w	r3, [sp, #7]
    c1ba:	460b      	mov	r3, r1
    c1bc:	f88d 3006 	strb.w	r3, [sp, #6]
    c1c0:	4613      	mov	r3, r2
    c1c2:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    c1c6:	2301      	movs	r3, #1
    c1c8:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    c1cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1d0:	f88d 300f 	strb.w	r3, [sp, #15]
    c1d4:	e019      	b.n	c20a <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    c1d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c1da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c1de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1e2:	1ad3      	subs	r3, r2, r3
    c1e4:	b2db      	uxtb	r3, r3
    c1e6:	4619      	mov	r1, r3
    c1e8:	f7fe fe3e 	bl	ae68 <Adc_Ip_GetConvCompleteFlag>
    c1ec:	4603      	mov	r3, r0
    c1ee:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    c1f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c1f6:	f083 0301 	eor.w	r3, r3, #1
    c1fa:	b2db      	uxtb	r3, r3
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d10b      	bne.n	c218 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    c200:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c204:	3301      	adds	r3, #1
    c206:	f88d 300f 	strb.w	r3, [sp, #15]
    c20a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c20e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c212:	429a      	cmp	r2, r3
    c214:	d3df      	bcc.n	c1d6 <Adc_Ipw_CheckValidConversion+0x26>
    c216:	e000      	b.n	c21a <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    c218:	bf00      	nop
        }
    }

    return ValidConversion;
    c21a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c21e:	4618      	mov	r0, r3
    c220:	b005      	add	sp, #20
    c222:	f85d fb04 	ldr.w	pc, [sp], #4

0000c226 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    c226:	b500      	push	{lr}
    c228:	b089      	sub	sp, #36	; 0x24
    c22a:	9102      	str	r1, [sp, #8]
    c22c:	9201      	str	r2, [sp, #4]
    c22e:	461a      	mov	r2, r3
    c230:	4603      	mov	r3, r0
    c232:	f8ad 300e 	strh.w	r3, [sp, #14]
    c236:	4613      	mov	r3, r2
    c238:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    c23c:	2300      	movs	r3, #0
    c23e:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c242:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c246:	4a33      	ldr	r2, [pc, #204]	; (c314 <Adc_Ipw_ReadGroup+0xee>)
    c248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c24c:	68da      	ldr	r2, [r3, #12]
    c24e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c252:	005b      	lsls	r3, r3, #1
    c254:	4413      	add	r3, r2
    c256:	881b      	ldrh	r3, [r3, #0]
    c258:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c25c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c260:	4a2c      	ldr	r2, [pc, #176]	; (c314 <Adc_Ipw_ReadGroup+0xee>)
    c262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c266:	685a      	ldr	r2, [r3, #4]
    c268:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c26c:	2134      	movs	r1, #52	; 0x34
    c26e:	fb01 f303 	mul.w	r3, r1, r3
    c272:	4413      	add	r3, r2
    c274:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    c276:	9b06      	ldr	r3, [sp, #24]
    c278:	789b      	ldrb	r3, [r3, #2]
    c27a:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    c27e:	9b06      	ldr	r3, [sp, #24]
    c280:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    c284:	2b01      	cmp	r3, #1
    c286:	d124      	bne.n	c2d2 <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    c288:	9b06      	ldr	r3, [sp, #24]
    c28a:	68db      	ldr	r3, [r3, #12]
    c28c:	2b00      	cmp	r3, #0
    c28e:	d111      	bne.n	c2b4 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    c290:	9b06      	ldr	r3, [sp, #24]
    c292:	695b      	ldr	r3, [r3, #20]
    c294:	2b00      	cmp	r3, #0
    c296:	d10d      	bne.n	c2b4 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    c298:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c29c:	4a1e      	ldr	r2, [pc, #120]	; (c318 <Adc_Ipw_ReadGroup+0xf2>)
    c29e:	00db      	lsls	r3, r3, #3
    c2a0:	4413      	add	r3, r2
    c2a2:	885b      	ldrh	r3, [r3, #2]
    c2a4:	b29b      	uxth	r3, r3
    c2a6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c2aa:	429a      	cmp	r2, r3
    c2ac:	d002      	beq.n	c2b4 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c2ae:	2301      	movs	r3, #1
    c2b0:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c2b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d124      	bne.n	c306 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    c2bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c2c0:	9a01      	ldr	r2, [sp, #4]
    c2c2:	9902      	ldr	r1, [sp, #8]
    c2c4:	9806      	ldr	r0, [sp, #24]
    c2c6:	f7ff f91f 	bl	b508 <Adc_Ipw_ReadGroupNoInt>
    c2ca:	4603      	mov	r3, r0
    c2cc:	f88d 301f 	strb.w	r3, [sp, #31]
    c2d0:	e019      	b.n	c306 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c2d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c2d6:	4911      	ldr	r1, [pc, #68]	; (c31c <Adc_Ipw_ReadGroup+0xf6>)
    c2d8:	4613      	mov	r3, r2
    c2da:	009b      	lsls	r3, r3, #2
    c2dc:	4413      	add	r3, r2
    c2de:	009b      	lsls	r3, r3, #2
    c2e0:	440b      	add	r3, r1
    c2e2:	681b      	ldr	r3, [r3, #0]
    c2e4:	2b01      	cmp	r3, #1
    c2e6:	d102      	bne.n	c2ee <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c2e8:	2301      	movs	r3, #1
    c2ea:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c2ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c2f2:	2b00      	cmp	r3, #0
    c2f4:	d107      	bne.n	c306 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    c2f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
    c2fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c2fe:	9902      	ldr	r1, [sp, #8]
    c300:	4618      	mov	r0, r3
    c302:	f7ff f949 	bl	b598 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    c306:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    c30a:	4618      	mov	r0, r3
    c30c:	b009      	add	sp, #36	; 0x24
    c30e:	f85d fb04 	ldr.w	pc, [sp], #4
    c312:	bf00      	nop
    c314:	1fff8d40 	.word	0x1fff8d40
    c318:	1fff8d70 	.word	0x1fff8d70
    c31c:	1fff8d48 	.word	0x1fff8d48

0000c320 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    c320:	b500      	push	{lr}
    c322:	b085      	sub	sp, #20
    c324:	4603      	mov	r3, r0
    c326:	9100      	str	r1, [sp, #0]
    c328:	f88d 3007 	strb.w	r3, [sp, #7]
    c32c:	4613      	mov	r3, r2
    c32e:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c332:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c336:	4a0e      	ldr	r2, [pc, #56]	; (c370 <Adc_Ipw_Calibrate+0x50>)
    c338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33c:	681a      	ldr	r2, [r3, #0]
    c33e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c342:	4413      	add	r3, r2
    c344:	7c1b      	ldrb	r3, [r3, #16]
    c346:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    c34a:	9b00      	ldr	r3, [sp, #0]
    c34c:	2200      	movs	r2, #0
    c34e:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    c350:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c354:	4618      	mov	r0, r3
    c356:	f7fe fdb9 	bl	aecc <Adc_Ip_DoCalibration>
    c35a:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    c35c:	9b02      	ldr	r3, [sp, #8]
    c35e:	2b00      	cmp	r3, #0
    c360:	d002      	beq.n	c368 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    c362:	9b00      	ldr	r3, [sp, #0]
    c364:	2201      	movs	r2, #1
    c366:	701a      	strb	r2, [r3, #0]
    }
}
    c368:	bf00      	nop
    c36a:	b005      	add	sp, #20
    c36c:	f85d fb04 	ldr.w	pc, [sp], #4
    c370:	1fff8d40 	.word	0x1fff8d40

0000c374 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    c374:	2300      	movs	r3, #0
}
    c376:	4618      	mov	r0, r3
    c378:	4770      	bx	lr
    c37a:	bf00      	nop

0000c37c <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    c37c:	b500      	push	{lr}
    c37e:	b083      	sub	sp, #12
    c380:	4603      	mov	r3, r0
    c382:	460a      	mov	r2, r1
    c384:	f88d 3007 	strb.w	r3, [sp, #7]
    c388:	4613      	mov	r3, r2
    c38a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    c38e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c392:	2100      	movs	r1, #0
    c394:	4618      	mov	r0, r3
    c396:	f7fe fff3 	bl	b380 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    c39a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c39e:	4a09      	ldr	r2, [pc, #36]	; (c3c4 <Adc_Ipw_UpdateQueue+0x48>)
    c3a0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c3a4:	b29b      	uxth	r3, r3
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d007      	beq.n	c3ba <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    c3aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c3ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c3b2:	4611      	mov	r1, r2
    c3b4:	4618      	mov	r0, r3
    c3b6:	f7ff fdf1 	bl	bf9c <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    c3ba:	bf00      	nop
    c3bc:	b003      	add	sp, #12
    c3be:	f85d fb04 	ldr.w	pc, [sp], #4
    c3c2:	bf00      	nop
    c3c4:	1fff8d70 	.word	0x1fff8d70

0000c3c8 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    c3c8:	b510      	push	{r4, lr}
    c3ca:	b08a      	sub	sp, #40	; 0x28
    c3cc:	4604      	mov	r4, r0
    c3ce:	4608      	mov	r0, r1
    c3d0:	4611      	mov	r1, r2
    c3d2:	461a      	mov	r2, r3
    c3d4:	4623      	mov	r3, r4
    c3d6:	f88d 300f 	strb.w	r3, [sp, #15]
    c3da:	4603      	mov	r3, r0
    c3dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    c3e0:	460b      	mov	r3, r1
    c3e2:	f8ad 300a 	strh.w	r3, [sp, #10]
    c3e6:	4613      	mov	r3, r2
    c3e8:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c3ec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c3f0:	4a68      	ldr	r2, [pc, #416]	; (c594 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3f6:	68da      	ldr	r2, [r3, #12]
    c3f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c3fc:	005b      	lsls	r3, r3, #1
    c3fe:	4413      	add	r3, r2
    c400:	881b      	ldrh	r3, [r3, #0]
    c402:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    c406:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c40a:	4963      	ldr	r1, [pc, #396]	; (c598 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c40c:	4613      	mov	r3, r2
    c40e:	009b      	lsls	r3, r3, #2
    c410:	4413      	add	r3, r2
    c412:	009b      	lsls	r3, r3, #2
    c414:	440b      	add	r3, r1
    c416:	3310      	adds	r3, #16
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    c41e:	2300      	movs	r3, #0
    c420:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c422:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c426:	4a5b      	ldr	r2, [pc, #364]	; (c594 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c42c:	681a      	ldr	r2, [r3, #0]
    c42e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c432:	4413      	add	r3, r2
    c434:	7c1b      	ldrb	r3, [r3, #16]
    c436:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c43a:	2300      	movs	r3, #0
    c43c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    c440:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c444:	4a53      	ldr	r2, [pc, #332]	; (c594 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c454:	695b      	ldr	r3, [r3, #20]
    c456:	4618      	mov	r0, r3
    c458:	f7ff fbe6 	bl	bc28 <Adc_Ipw_CalculateNumsBitShift>
    c45c:	4603      	mov	r3, r0
    c45e:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c462:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c466:	4a4b      	ldr	r2, [pc, #300]	; (c594 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c46c:	685a      	ldr	r2, [r3, #4]
    c46e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c472:	2134      	movs	r1, #52	; 0x34
    c474:	fb01 f303 	mul.w	r3, r1, r3
    c478:	4413      	add	r3, r2
    c47a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c47e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c482:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c486:	4a43      	ldr	r2, [pc, #268]	; (c594 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c48c:	685a      	ldr	r2, [r3, #4]
    c48e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c492:	2134      	movs	r1, #52	; 0x34
    c494:	fb01 f303 	mul.w	r3, r1, r3
    c498:	4413      	add	r3, r2
    c49a:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    c49c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c4a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c4a4:	429a      	cmp	r2, r3
    c4a6:	d870      	bhi.n	c58a <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    c4a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c4ac:	f003 030f 	and.w	r3, r3, #15
    c4b0:	b2db      	uxtb	r3, r3
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d104      	bne.n	c4c0 <Adc_Ipw_CheckConversionChannels+0xf8>
    c4b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c4ba:	3b10      	subs	r3, #16
    c4bc:	b2db      	uxtb	r3, r3
    c4be:	e004      	b.n	c4ca <Adc_Ipw_CheckConversionChannels+0x102>
    c4c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c4c4:	f023 030f 	bic.w	r3, r3, #15
    c4c8:	b2db      	uxtb	r3, r3
    c4ca:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    c4ce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c4d2:	4931      	ldr	r1, [pc, #196]	; (c598 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c4d4:	4613      	mov	r3, r2
    c4d6:	009b      	lsls	r3, r3, #2
    c4d8:	4413      	add	r3, r2
    c4da:	009b      	lsls	r3, r3, #2
    c4dc:	440b      	add	r3, r1
    c4de:	330c      	adds	r3, #12
    c4e0:	6819      	ldr	r1, [r3, #0]
    c4e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c4e6:	482c      	ldr	r0, [pc, #176]	; (c598 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c4e8:	4613      	mov	r3, r2
    c4ea:	009b      	lsls	r3, r3, #2
    c4ec:	4413      	add	r3, r2
    c4ee:	009b      	lsls	r3, r3, #2
    c4f0:	4403      	add	r3, r0
    c4f2:	3308      	adds	r3, #8
    c4f4:	881b      	ldrh	r3, [r3, #0]
    c4f6:	b29b      	uxth	r3, r3
    c4f8:	005b      	lsls	r3, r3, #1
    c4fa:	440b      	add	r3, r1
    c4fc:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    c4fe:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c502:	f89d 1013 	ldrb.w	r1, [sp, #19]
    c506:	f89d 301b 	ldrb.w	r3, [sp, #27]
    c50a:	4618      	mov	r0, r3
    c50c:	f7ff fe50 	bl	c1b0 <Adc_Ipw_CheckValidConversion>
    c510:	4603      	mov	r3, r0
    c512:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    c516:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c51a:	2b00      	cmp	r3, #0
    c51c:	d032      	beq.n	c584 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    c51e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c522:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c526:	e026      	b.n	c576 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    c528:	f89d 001b 	ldrb.w	r0, [sp, #27]
    c52c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c530:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c534:	1ad3      	subs	r3, r2, r3
    c536:	b2db      	uxtb	r3, r3
    c538:	4619      	mov	r1, r3
    c53a:	f7fe fcaf 	bl	ae9c <Adc_Ip_GetConvData>
    c53e:	4603      	mov	r3, r0
    c540:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    c544:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c548:	f89d 301a 	ldrb.w	r3, [sp, #26]
    c54c:	fa02 f303 	lsl.w	r3, r2, r3
    c550:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    c554:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    c558:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c55c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    c560:	9300      	str	r3, [sp, #0]
    c562:	460b      	mov	r3, r1
    c564:	9907      	ldr	r1, [sp, #28]
    c566:	9805      	ldr	r0, [sp, #20]
    c568:	f000 fa02 	bl	c970 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    c56c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c570:	3301      	adds	r3, #1
    c572:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c576:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c57a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c57e:	429a      	cmp	r2, r3
    c580:	d3d2      	bcc.n	c528 <Adc_Ipw_CheckConversionChannels+0x160>
    c582:	e002      	b.n	c58a <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    c584:	2301      	movs	r3, #1
    c586:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    c58a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    c58e:	4618      	mov	r0, r3
    c590:	b00a      	add	sp, #40	; 0x28
    c592:	bd10      	pop	{r4, pc}
    c594:	1fff8d40 	.word	0x1fff8d40
    c598:	1fff8d48 	.word	0x1fff8d48

0000c59c <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c59c:	b500      	push	{lr}
    c59e:	b087      	sub	sp, #28
    c5a0:	4603      	mov	r3, r0
    c5a2:	f88d 300f 	strb.w	r3, [sp, #15]
    c5a6:	460b      	mov	r3, r1
    c5a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    c5ac:	4613      	mov	r3, r2
    c5ae:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c5b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c5b6:	4a33      	ldr	r2, [pc, #204]	; (c684 <Adc_Ipw_RestartConversion+0xe8>)
    c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5bc:	68da      	ldr	r2, [r3, #12]
    c5be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c5c2:	005b      	lsls	r3, r3, #1
    c5c4:	4413      	add	r3, r2
    c5c6:	881b      	ldrh	r3, [r3, #0]
    c5c8:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c5cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c5d0:	4a2c      	ldr	r2, [pc, #176]	; (c684 <Adc_Ipw_RestartConversion+0xe8>)
    c5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d6:	681a      	ldr	r2, [r3, #0]
    c5d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c5dc:	4413      	add	r3, r2
    c5de:	7c1b      	ldrb	r3, [r3, #16]
    c5e0:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c5e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c5e8:	4a26      	ldr	r2, [pc, #152]	; (c684 <Adc_Ipw_RestartConversion+0xe8>)
    c5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ee:	685a      	ldr	r2, [r3, #4]
    c5f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c5f4:	2134      	movs	r1, #52	; 0x34
    c5f6:	fb01 f303 	mul.w	r3, r1, r3
    c5fa:	4413      	add	r3, r2
    c5fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c600:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    c604:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c608:	2b0f      	cmp	r3, #15
    c60a:	d805      	bhi.n	c618 <Adc_Ipw_RestartConversion+0x7c>
    c60c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c610:	f003 030f 	and.w	r3, r3, #15
    c614:	b2db      	uxtb	r3, r3
    c616:	e000      	b.n	c61a <Adc_Ipw_RestartConversion+0x7e>
    c618:	2310      	movs	r3, #16
    c61a:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    c61e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c622:	2b10      	cmp	r3, #16
    c624:	d811      	bhi.n	c64a <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    c626:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c62a:	4917      	ldr	r1, [pc, #92]	; (c688 <Adc_Ipw_RestartConversion+0xec>)
    c62c:	4613      	mov	r3, r2
    c62e:	009b      	lsls	r3, r3, #2
    c630:	4413      	add	r3, r2
    c632:	009b      	lsls	r3, r3, #2
    c634:	440b      	add	r3, r1
    c636:	3310      	adds	r3, #16
    c638:	f89d 2014 	ldrb.w	r2, [sp, #20]
    c63c:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    c63e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c642:	4618      	mov	r0, r3
    c644:	f000 fc68 	bl	cf18 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    c648:	e017      	b.n	c67a <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c64a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c64e:	490e      	ldr	r1, [pc, #56]	; (c688 <Adc_Ipw_RestartConversion+0xec>)
    c650:	4613      	mov	r3, r2
    c652:	009b      	lsls	r3, r3, #2
    c654:	4413      	add	r3, r2
    c656:	009b      	lsls	r3, r3, #2
    c658:	440b      	add	r3, r1
    c65a:	3310      	adds	r3, #16
    c65c:	2200      	movs	r2, #0
    c65e:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c660:	f89d 2013 	ldrb.w	r2, [sp, #19]
    c664:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c668:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c66c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c670:	9300      	str	r3, [sp, #0]
    c672:	4613      	mov	r3, r2
    c674:	220f      	movs	r2, #15
    c676:	f7ff fae1 	bl	bc3c <Adc_Ipw_ConfigureConversion>
}
    c67a:	bf00      	nop
    c67c:	b007      	add	sp, #28
    c67e:	f85d fb04 	ldr.w	pc, [sp], #4
    c682:	bf00      	nop
    c684:	1fff8d40 	.word	0x1fff8d40
    c688:	1fff8d48 	.word	0x1fff8d48

0000c68c <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    c68c:	b084      	sub	sp, #16
    c68e:	4603      	mov	r3, r0
    c690:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    c694:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c698:	4907      	ldr	r1, [pc, #28]	; (c6b8 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    c69a:	4613      	mov	r3, r2
    c69c:	009b      	lsls	r3, r3, #2
    c69e:	4413      	add	r3, r2
    c6a0:	009b      	lsls	r3, r3, #2
    c6a2:	440b      	add	r3, r1
    c6a4:	3308      	adds	r3, #8
    c6a6:	881b      	ldrh	r3, [r3, #0]
    c6a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    c6ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    c6b0:	4618      	mov	r0, r3
    c6b2:	b004      	add	sp, #16
    c6b4:	4770      	bx	lr
    c6b6:	bf00      	nop
    c6b8:	1fff8d48 	.word	0x1fff8d48

0000c6bc <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    c6bc:	b510      	push	{r4, lr}
    c6be:	b084      	sub	sp, #16
    c6c0:	4604      	mov	r4, r0
    c6c2:	4608      	mov	r0, r1
    c6c4:	4611      	mov	r1, r2
    c6c6:	461a      	mov	r2, r3
    c6c8:	4623      	mov	r3, r4
    c6ca:	f88d 3007 	strb.w	r3, [sp, #7]
    c6ce:	4603      	mov	r3, r0
    c6d0:	f8ad 3004 	strh.w	r3, [sp, #4]
    c6d4:	460b      	mov	r3, r1
    c6d6:	f8ad 3002 	strh.w	r3, [sp, #2]
    c6da:	4613      	mov	r3, r2
    c6dc:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c6e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c6e4:	4a4f      	ldr	r2, [pc, #316]	; (c824 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ea:	68da      	ldr	r2, [r3, #12]
    c6ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c6f0:	005b      	lsls	r3, r3, #1
    c6f2:	4413      	add	r3, r2
    c6f4:	881b      	ldrh	r3, [r3, #0]
    c6f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    c6fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c6fe:	494a      	ldr	r1, [pc, #296]	; (c828 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c700:	4613      	mov	r3, r2
    c702:	009b      	lsls	r3, r3, #2
    c704:	4413      	add	r3, r2
    c706:	009b      	lsls	r3, r3, #2
    c708:	440b      	add	r3, r1
    c70a:	3304      	adds	r3, #4
    c70c:	2201      	movs	r2, #1
    c70e:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c710:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c714:	4944      	ldr	r1, [pc, #272]	; (c828 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c716:	4613      	mov	r3, r2
    c718:	009b      	lsls	r3, r3, #2
    c71a:	4413      	add	r3, r2
    c71c:	009b      	lsls	r3, r3, #2
    c71e:	440b      	add	r3, r1
    c720:	681b      	ldr	r3, [r3, #0]
    c722:	2b01      	cmp	r3, #1
    c724:	d109      	bne.n	c73a <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    c726:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c72a:	493f      	ldr	r1, [pc, #252]	; (c828 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c72c:	4613      	mov	r3, r2
    c72e:	009b      	lsls	r3, r3, #2
    c730:	4413      	add	r3, r2
    c732:	009b      	lsls	r3, r3, #2
    c734:	440b      	add	r3, r1
    c736:	2202      	movs	r2, #2
    c738:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    c73a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c73e:	4618      	mov	r0, r3
    c740:	f7ff ffa4 	bl	c68c <Adc_Ipw_GetCurrentSampleCount>
    c744:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    c746:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c74a:	9a02      	ldr	r2, [sp, #8]
    c74c:	429a      	cmp	r2, r3
    c74e:	d35d      	bcc.n	c80c <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    c750:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c754:	4934      	ldr	r1, [pc, #208]	; (c828 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c756:	4613      	mov	r3, r2
    c758:	009b      	lsls	r3, r3, #2
    c75a:	4413      	add	r3, r2
    c75c:	009b      	lsls	r3, r3, #2
    c75e:	440b      	add	r3, r1
    c760:	2203      	movs	r2, #3
    c762:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c764:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c768:	4a2e      	ldr	r2, [pc, #184]	; (c824 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c76e:	685a      	ldr	r2, [r3, #4]
    c770:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c774:	2134      	movs	r1, #52	; 0x34
    c776:	fb01 f303 	mul.w	r3, r1, r3
    c77a:	4413      	add	r3, r2
    c77c:	699b      	ldr	r3, [r3, #24]
    c77e:	2b00      	cmp	r3, #0
    c780:	d117      	bne.n	c7b2 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    c782:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c786:	4a27      	ldr	r2, [pc, #156]	; (c824 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c78c:	685a      	ldr	r2, [r3, #4]
    c78e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c792:	2134      	movs	r1, #52	; 0x34
    c794:	fb01 f303 	mul.w	r3, r1, r3
    c798:	4413      	add	r3, r2
    c79a:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c79c:	2b01      	cmp	r3, #1
    c79e:	d108      	bne.n	c7b2 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    c7a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c7a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7a8:	4611      	mov	r1, r2
    c7aa:	4618      	mov	r0, r3
    c7ac:	f7ff fde6 	bl	c37c <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    c7b0:	e035      	b.n	c81e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    c7b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c7b6:	4a1b      	ldr	r2, [pc, #108]	; (c824 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7bc:	685a      	ldr	r2, [r3, #4]
    c7be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c7c2:	2134      	movs	r1, #52	; 0x34
    c7c4:	fb01 f303 	mul.w	r3, r1, r3
    c7c8:	4413      	add	r3, r2
    c7ca:	689b      	ldr	r3, [r3, #8]
    c7cc:	2b01      	cmp	r3, #1
    c7ce:	d114      	bne.n	c7fa <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    c7d0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c7d4:	4914      	ldr	r1, [pc, #80]	; (c828 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c7d6:	4613      	mov	r3, r2
    c7d8:	009b      	lsls	r3, r3, #2
    c7da:	4413      	add	r3, r2
    c7dc:	009b      	lsls	r3, r3, #2
    c7de:	440b      	add	r3, r1
    c7e0:	3308      	adds	r3, #8
    c7e2:	2200      	movs	r2, #0
    c7e4:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    c7e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c7ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c7ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7f2:	4618      	mov	r0, r3
    c7f4:	f7ff fed2 	bl	c59c <Adc_Ipw_RestartConversion>
}
    c7f8:	e011      	b.n	c81e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    c7fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c7fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c802:	4611      	mov	r1, r2
    c804:	4618      	mov	r0, r3
    c806:	f7ff fdb9 	bl	c37c <Adc_Ipw_UpdateQueue>
}
    c80a:	e008      	b.n	c81e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    c80c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c810:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c814:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c818:	4618      	mov	r0, r3
    c81a:	f7ff febf 	bl	c59c <Adc_Ipw_RestartConversion>
}
    c81e:	bf00      	nop
    c820:	b004      	add	sp, #16
    c822:	bd10      	pop	{r4, pc}
    c824:	1fff8d40 	.word	0x1fff8d40
    c828:	1fff8d48 	.word	0x1fff8d48

0000c82c <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    c82c:	b510      	push	{r4, lr}
    c82e:	b088      	sub	sp, #32
    c830:	4604      	mov	r4, r0
    c832:	4608      	mov	r0, r1
    c834:	4611      	mov	r1, r2
    c836:	461a      	mov	r2, r3
    c838:	4623      	mov	r3, r4
    c83a:	f88d 300f 	strb.w	r3, [sp, #15]
    c83e:	4603      	mov	r3, r0
    c840:	f8ad 300c 	strh.w	r3, [sp, #12]
    c844:	460b      	mov	r3, r1
    c846:	f88d 300e 	strb.w	r3, [sp, #14]
    c84a:	4613      	mov	r3, r2
    c84c:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c850:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c854:	4a44      	ldr	r2, [pc, #272]	; (c968 <Adc_Ipw_EndConversion+0x13c>)
    c856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c85a:	68da      	ldr	r2, [r3, #12]
    c85c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c860:	005b      	lsls	r3, r3, #1
    c862:	4413      	add	r3, r2
    c864:	881b      	ldrh	r3, [r3, #0]
    c866:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c86a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c86e:	4a3e      	ldr	r2, [pc, #248]	; (c968 <Adc_Ipw_EndConversion+0x13c>)
    c870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c874:	685a      	ldr	r2, [r3, #4]
    c876:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    c87a:	2134      	movs	r1, #52	; 0x34
    c87c:	fb01 f303 	mul.w	r3, r1, r3
    c880:	4413      	add	r3, r2
    c882:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    c884:	9b06      	ldr	r3, [sp, #24]
    c886:	8b9a      	ldrh	r2, [r3, #28]
    c888:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c88c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c890:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c894:	f7ff fd98 	bl	c3c8 <Adc_Ipw_CheckConversionChannels>
    c898:	4603      	mov	r3, r0
    c89a:	2b00      	cmp	r3, #0
    c89c:	d160      	bne.n	c960 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    c89e:	9b06      	ldr	r3, [sp, #24]
    c8a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c8a4:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    c8a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c8ac:	492f      	ldr	r1, [pc, #188]	; (c96c <Adc_Ipw_EndConversion+0x140>)
    c8ae:	4613      	mov	r3, r2
    c8b0:	009b      	lsls	r3, r3, #2
    c8b2:	4413      	add	r3, r2
    c8b4:	009b      	lsls	r3, r3, #2
    c8b6:	440b      	add	r3, r1
    c8b8:	3310      	adds	r3, #16
    c8ba:	781b      	ldrb	r3, [r3, #0]
    c8bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c8c0:	429a      	cmp	r2, r3
    c8c2:	d929      	bls.n	c918 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    c8c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c8c8:	4928      	ldr	r1, [pc, #160]	; (c96c <Adc_Ipw_EndConversion+0x140>)
    c8ca:	4613      	mov	r3, r2
    c8cc:	009b      	lsls	r3, r3, #2
    c8ce:	4413      	add	r3, r2
    c8d0:	009b      	lsls	r3, r3, #2
    c8d2:	440b      	add	r3, r1
    c8d4:	3310      	adds	r3, #16
    c8d6:	781b      	ldrb	r3, [r3, #0]
    c8d8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c8dc:	1ad3      	subs	r3, r2, r3
    c8de:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    c8e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c8e6:	2b0f      	cmp	r3, #15
    c8e8:	d805      	bhi.n	c8f6 <Adc_Ipw_EndConversion+0xca>
    c8ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c8ee:	f003 030f 	and.w	r3, r3, #15
    c8f2:	b2db      	uxtb	r3, r3
    c8f4:	e000      	b.n	c8f8 <Adc_Ipw_EndConversion+0xcc>
    c8f6:	2310      	movs	r3, #16
    c8f8:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    c8fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    c900:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c904:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c908:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c90c:	9300      	str	r3, [sp, #0]
    c90e:	4613      	mov	r3, r2
    c910:	220f      	movs	r2, #15
    c912:	f7ff f993 	bl	bc3c <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    c916:	e023      	b.n	c960 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    c918:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c91c:	4913      	ldr	r1, [pc, #76]	; (c96c <Adc_Ipw_EndConversion+0x140>)
    c91e:	4613      	mov	r3, r2
    c920:	009b      	lsls	r3, r3, #2
    c922:	4413      	add	r3, r2
    c924:	009b      	lsls	r3, r3, #2
    c926:	440b      	add	r3, r1
    c928:	3308      	adds	r3, #8
    c92a:	881b      	ldrh	r3, [r3, #0]
    c92c:	b29b      	uxth	r3, r3
    c92e:	3301      	adds	r3, #1
    c930:	b298      	uxth	r0, r3
    c932:	490e      	ldr	r1, [pc, #56]	; (c96c <Adc_Ipw_EndConversion+0x140>)
    c934:	4613      	mov	r3, r2
    c936:	009b      	lsls	r3, r3, #2
    c938:	4413      	add	r3, r2
    c93a:	009b      	lsls	r3, r3, #2
    c93c:	440b      	add	r3, r1
    c93e:	3308      	adds	r3, #8
    c940:	4602      	mov	r2, r0
    c942:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    c944:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c948:	2b00      	cmp	r3, #0
    c94a:	d009      	beq.n	c960 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    c94c:	9b06      	ldr	r3, [sp, #24]
    c94e:	8b9a      	ldrh	r2, [r3, #28]
    c950:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c954:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c958:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c95c:	f7ff feae 	bl	c6bc <Adc_Ipw_UpdateSoftwareGroupState>
}
    c960:	bf00      	nop
    c962:	b008      	add	sp, #32
    c964:	bd10      	pop	{r4, pc}
    c966:	bf00      	nop
    c968:	1fff8d40 	.word	0x1fff8d40
    c96c:	1fff8d48 	.word	0x1fff8d48

0000c970 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    c970:	b084      	sub	sp, #16
    c972:	9003      	str	r0, [sp, #12]
    c974:	9102      	str	r1, [sp, #8]
    c976:	4611      	mov	r1, r2
    c978:	461a      	mov	r2, r3
    c97a:	460b      	mov	r3, r1
    c97c:	f8ad 3006 	strh.w	r3, [sp, #6]
    c980:	4613      	mov	r3, r2
    c982:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    c986:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c98a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c98e:	fb02 f303 	mul.w	r3, r2, r3
    c992:	005b      	lsls	r3, r3, #1
    c994:	9a02      	ldr	r2, [sp, #8]
    c996:	4413      	add	r3, r2
    c998:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c99c:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    c99e:	bf00      	nop
    c9a0:	b004      	add	sp, #16
    c9a2:	4770      	bx	lr

0000c9a4 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    c9a4:	b500      	push	{lr}
    c9a6:	b085      	sub	sp, #20
    c9a8:	4603      	mov	r3, r0
    c9aa:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    c9ae:	f7ff fce1 	bl	c374 <Adc_GetCoreID>
    c9b2:	4603      	mov	r3, r0
    c9b4:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    c9b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9bc:	b2db      	uxtb	r3, r3
    c9be:	461a      	mov	r2, r3
    c9c0:	4b14      	ldr	r3, [pc, #80]	; (ca14 <Adc_Ipw_EndConversionNotification+0x70>)
    c9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c9c6:	681a      	ldr	r2, [r3, #0]
    c9c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9cc:	4413      	add	r3, r2
    c9ce:	f893 3020 	ldrb.w	r3, [r3, #32]
    c9d2:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    c9d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c9da:	4a0f      	ldr	r2, [pc, #60]	; (ca18 <Adc_Ipw_EndConversionNotification+0x74>)
    c9dc:	00db      	lsls	r3, r3, #3
    c9de:	4413      	add	r3, r2
    c9e0:	885b      	ldrh	r3, [r3, #2]
    c9e2:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    c9e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c9ea:	4a0b      	ldr	r2, [pc, #44]	; (ca18 <Adc_Ipw_EndConversionNotification+0x74>)
    c9ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c9f0:	b29b      	uxth	r3, r3
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d009      	beq.n	ca0a <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    c9f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9fa:	b2db      	uxtb	r3, r3
    c9fc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ca00:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ca04:	2201      	movs	r2, #1
    ca06:	f7ff ff11 	bl	c82c <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    ca0a:	bf00      	nop
    ca0c:	b005      	add	sp, #20
    ca0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ca12:	bf00      	nop
    ca14:	1fff8d40 	.word	0x1fff8d40
    ca18:	1fff8d70 	.word	0x1fff8d70

0000ca1c <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    ca1c:	b500      	push	{lr}
    ca1e:	b085      	sub	sp, #20
    ca20:	4603      	mov	r3, r0
    ca22:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    ca26:	2300      	movs	r3, #0
    ca28:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    ca2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca30:	4618      	mov	r0, r3
    ca32:	f7ff ffb7 	bl	c9a4 <Adc_Ipw_EndConversionNotification>
}
    ca36:	bf00      	nop
    ca38:	b005      	add	sp, #20
    ca3a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca3e <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    ca3e:	b500      	push	{lr}
    ca40:	b085      	sub	sp, #20
    ca42:	4603      	mov	r3, r0
    ca44:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    ca48:	2301      	movs	r3, #1
    ca4a:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    ca4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca52:	4618      	mov	r0, r3
    ca54:	f7ff ffa6 	bl	c9a4 <Adc_Ipw_EndConversionNotification>
}
    ca58:	bf00      	nop
    ca5a:	b005      	add	sp, #20
    ca5c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca60 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    ca60:	b084      	sub	sp, #16
    ca62:	9003      	str	r0, [sp, #12]
    ca64:	9201      	str	r2, [sp, #4]
    ca66:	461a      	mov	r2, r3
    ca68:	460b      	mov	r3, r1
    ca6a:	f88d 300b 	strb.w	r3, [sp, #11]
    ca6e:	4613      	mov	r3, r2
    ca70:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    ca74:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d016      	beq.n	caaa <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    ca7c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca80:	9903      	ldr	r1, [sp, #12]
    ca82:	4613      	mov	r3, r2
    ca84:	009b      	lsls	r3, r3, #2
    ca86:	4413      	add	r3, r2
    ca88:	00db      	lsls	r3, r3, #3
    ca8a:	440b      	add	r3, r1
    ca8c:	3310      	adds	r3, #16
    ca8e:	6819      	ldr	r1, [r3, #0]
    ca90:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca94:	9b01      	ldr	r3, [sp, #4]
    ca96:	4319      	orrs	r1, r3
    ca98:	9803      	ldr	r0, [sp, #12]
    ca9a:	4613      	mov	r3, r2
    ca9c:	009b      	lsls	r3, r3, #2
    ca9e:	4413      	add	r3, r2
    caa0:	00db      	lsls	r3, r3, #3
    caa2:	4403      	add	r3, r0
    caa4:	3310      	adds	r3, #16
    caa6:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    caa8:	e016      	b.n	cad8 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    caaa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    caae:	9903      	ldr	r1, [sp, #12]
    cab0:	4613      	mov	r3, r2
    cab2:	009b      	lsls	r3, r3, #2
    cab4:	4413      	add	r3, r2
    cab6:	00db      	lsls	r3, r3, #3
    cab8:	440b      	add	r3, r1
    caba:	3310      	adds	r3, #16
    cabc:	6819      	ldr	r1, [r3, #0]
    cabe:	9b01      	ldr	r3, [sp, #4]
    cac0:	43db      	mvns	r3, r3
    cac2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cac6:	4019      	ands	r1, r3
    cac8:	9803      	ldr	r0, [sp, #12]
    caca:	4613      	mov	r3, r2
    cacc:	009b      	lsls	r3, r3, #2
    cace:	4413      	add	r3, r2
    cad0:	00db      	lsls	r3, r3, #3
    cad2:	4403      	add	r3, r0
    cad4:	3310      	adds	r3, #16
    cad6:	6019      	str	r1, [r3, #0]
}
    cad8:	bf00      	nop
    cada:	b004      	add	sp, #16
    cadc:	4770      	bx	lr

0000cade <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    cade:	b082      	sub	sp, #8
    cae0:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    cae2:	9b01      	ldr	r3, [sp, #4]
    cae4:	681b      	ldr	r3, [r3, #0]
    cae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    caea:	9b01      	ldr	r3, [sp, #4]
    caec:	601a      	str	r2, [r3, #0]
}
    caee:	bf00      	nop
    caf0:	b002      	add	sp, #8
    caf2:	4770      	bx	lr

0000caf4 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    caf4:	b082      	sub	sp, #8
    caf6:	9001      	str	r0, [sp, #4]
    caf8:	460b      	mov	r3, r1
    cafa:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    cafe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb02:	2b00      	cmp	r3, #0
    cb04:	d006      	beq.n	cb14 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    cb06:	9b01      	ldr	r3, [sp, #4]
    cb08:	681b      	ldr	r3, [r3, #0]
    cb0a:	f043 0202 	orr.w	r2, r3, #2
    cb0e:	9b01      	ldr	r3, [sp, #4]
    cb10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    cb12:	e005      	b.n	cb20 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    cb14:	9b01      	ldr	r3, [sp, #4]
    cb16:	681b      	ldr	r3, [r3, #0]
    cb18:	f023 0202 	bic.w	r2, r3, #2
    cb1c:	9b01      	ldr	r3, [sp, #4]
    cb1e:	601a      	str	r2, [r3, #0]
}
    cb20:	bf00      	nop
    cb22:	b002      	add	sp, #8
    cb24:	4770      	bx	lr

0000cb26 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    cb26:	b086      	sub	sp, #24
    cb28:	9003      	str	r0, [sp, #12]
    cb2a:	460b      	mov	r3, r1
    cb2c:	9201      	str	r2, [sp, #4]
    cb2e:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    cb32:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb36:	9903      	ldr	r1, [sp, #12]
    cb38:	4613      	mov	r3, r2
    cb3a:	009b      	lsls	r3, r3, #2
    cb3c:	4413      	add	r3, r2
    cb3e:	00db      	lsls	r3, r3, #3
    cb40:	440b      	add	r3, r1
    cb42:	3310      	adds	r3, #16
    cb44:	681b      	ldr	r3, [r3, #0]
    cb46:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    cb48:	9b05      	ldr	r3, [sp, #20]
    cb4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    cb4e:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    cb50:	9b01      	ldr	r3, [sp, #4]
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	461a      	mov	r2, r3
    cb56:	9b05      	ldr	r3, [sp, #20]
    cb58:	4313      	orrs	r3, r2
    cb5a:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    cb5c:	9b01      	ldr	r3, [sp, #4]
    cb5e:	785b      	ldrb	r3, [r3, #1]
    cb60:	021b      	lsls	r3, r3, #8
    cb62:	b29b      	uxth	r3, r3
    cb64:	9a05      	ldr	r2, [sp, #20]
    cb66:	4313      	orrs	r3, r2
    cb68:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    cb6a:	9b01      	ldr	r3, [sp, #4]
    cb6c:	789b      	ldrb	r3, [r3, #2]
    cb6e:	041b      	lsls	r3, r3, #16
    cb70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cb74:	9a05      	ldr	r2, [sp, #20]
    cb76:	4313      	orrs	r3, r2
    cb78:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    cb7a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb7e:	9903      	ldr	r1, [sp, #12]
    cb80:	4613      	mov	r3, r2
    cb82:	009b      	lsls	r3, r3, #2
    cb84:	4413      	add	r3, r2
    cb86:	00db      	lsls	r3, r3, #3
    cb88:	440b      	add	r3, r1
    cb8a:	3310      	adds	r3, #16
    cb8c:	9a05      	ldr	r2, [sp, #20]
    cb8e:	601a      	str	r2, [r3, #0]
}
    cb90:	bf00      	nop
    cb92:	b006      	add	sp, #24
    cb94:	4770      	bx	lr

0000cb96 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    cb96:	b082      	sub	sp, #8
    cb98:	9001      	str	r0, [sp, #4]
    cb9a:	460b      	mov	r3, r1
    cb9c:	f88d 3003 	strb.w	r3, [sp, #3]
    cba0:	4613      	mov	r3, r2
    cba2:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    cba6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cbaa:	9901      	ldr	r1, [sp, #4]
    cbac:	4613      	mov	r3, r2
    cbae:	009b      	lsls	r3, r3, #2
    cbb0:	4413      	add	r3, r2
    cbb2:	00db      	lsls	r3, r3, #3
    cbb4:	440b      	add	r3, r1
    cbb6:	3314      	adds	r3, #20
    cbb8:	6819      	ldr	r1, [r3, #0]
    cbba:	f8bd 3000 	ldrh.w	r3, [sp]
    cbbe:	041b      	lsls	r3, r3, #16
    cbc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cbc4:	43db      	mvns	r3, r3
    cbc6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cbca:	4019      	ands	r1, r3
    cbcc:	9801      	ldr	r0, [sp, #4]
    cbce:	4613      	mov	r3, r2
    cbd0:	009b      	lsls	r3, r3, #2
    cbd2:	4413      	add	r3, r2
    cbd4:	00db      	lsls	r3, r3, #3
    cbd6:	4403      	add	r3, r0
    cbd8:	3314      	adds	r3, #20
    cbda:	6019      	str	r1, [r3, #0]
}
    cbdc:	bf00      	nop
    cbde:	b002      	add	sp, #8
    cbe0:	4770      	bx	lr

0000cbe2 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    cbe2:	b500      	push	{lr}
    cbe4:	b087      	sub	sp, #28
    cbe6:	9001      	str	r0, [sp, #4]
    cbe8:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cbea:	4a50      	ldr	r2, [pc, #320]	; (cd2c <Pdb_Adc_Ip_Init+0x14a>)
    cbec:	9b01      	ldr	r3, [sp, #4]
    cbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbf2:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    cbf4:	2300      	movs	r3, #0
    cbf6:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    cbf8:	9b00      	ldr	r3, [sp, #0]
    cbfa:	681b      	ldr	r3, [r3, #0]
    cbfc:	049b      	lsls	r3, r3, #18
    cbfe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    cc02:	9a04      	ldr	r2, [sp, #16]
    cc04:	4313      	orrs	r3, r2
    cc06:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    cc08:	9b00      	ldr	r3, [sp, #0]
    cc0a:	685b      	ldr	r3, [r3, #4]
    cc0c:	031b      	lsls	r3, r3, #12
    cc0e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    cc12:	9a04      	ldr	r2, [sp, #16]
    cc14:	4313      	orrs	r3, r2
    cc16:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    cc18:	9b00      	ldr	r3, [sp, #0]
    cc1a:	689b      	ldr	r3, [r3, #8]
    cc1c:	009b      	lsls	r3, r3, #2
    cc1e:	f003 030c 	and.w	r3, r3, #12
    cc22:	9a04      	ldr	r2, [sp, #16]
    cc24:	4313      	orrs	r3, r2
    cc26:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    cc28:	9b00      	ldr	r3, [sp, #0]
    cc2a:	68db      	ldr	r3, [r3, #12]
    cc2c:	021b      	lsls	r3, r3, #8
    cc2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    cc32:	9a04      	ldr	r2, [sp, #16]
    cc34:	4313      	orrs	r3, r2
    cc36:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    cc38:	9b00      	ldr	r3, [sp, #0]
    cc3a:	7c1b      	ldrb	r3, [r3, #16]
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d003      	beq.n	cc48 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    cc40:	9b04      	ldr	r3, [sp, #16]
    cc42:	f043 0302 	orr.w	r3, r3, #2
    cc46:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    cc48:	9b00      	ldr	r3, [sp, #0]
    cc4a:	7c5b      	ldrb	r3, [r3, #17]
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	d003      	beq.n	cc58 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    cc50:	9b04      	ldr	r3, [sp, #16]
    cc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    cc56:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    cc58:	9b00      	ldr	r3, [sp, #0]
    cc5a:	69db      	ldr	r3, [r3, #28]
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d003      	beq.n	cc68 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    cc60:	9b04      	ldr	r3, [sp, #16]
    cc62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cc66:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    cc68:	9b03      	ldr	r3, [sp, #12]
    cc6a:	9a04      	ldr	r2, [sp, #16]
    cc6c:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    cc6e:	9b00      	ldr	r3, [sp, #0]
    cc70:	8a5b      	ldrh	r3, [r3, #18]
    cc72:	4619      	mov	r1, r3
    cc74:	9801      	ldr	r0, [sp, #4]
    cc76:	f000 f98f 	bl	cf98 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    cc7a:	9b00      	ldr	r3, [sp, #0]
    cc7c:	7d1b      	ldrb	r3, [r3, #20]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d03e      	beq.n	cd00 <Pdb_Adc_Ip_Init+0x11e>
    cc82:	9b00      	ldr	r3, [sp, #0]
    cc84:	699b      	ldr	r3, [r3, #24]
    cc86:	2b00      	cmp	r3, #0
    cc88:	d03a      	beq.n	cd00 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    cc8a:	2300      	movs	r3, #0
    cc8c:	f88d 3017 	strb.w	r3, [sp, #23]
    cc90:	e030      	b.n	ccf4 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    cc92:	9b00      	ldr	r3, [sp, #0]
    cc94:	6999      	ldr	r1, [r3, #24]
    cc96:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cc9a:	4613      	mov	r3, r2
    cc9c:	009b      	lsls	r3, r3, #2
    cc9e:	4413      	add	r3, r2
    cca0:	009b      	lsls	r3, r3, #2
    cca2:	440b      	add	r3, r1
    cca4:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    cca6:	9b02      	ldr	r3, [sp, #8]
    cca8:	7819      	ldrb	r1, [r3, #0]
    ccaa:	9b02      	ldr	r3, [sp, #8]
    ccac:	3301      	adds	r3, #1
    ccae:	461a      	mov	r2, r3
    ccb0:	9803      	ldr	r0, [sp, #12]
    ccb2:	f7ff ff38 	bl	cb26 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ccb6:	2300      	movs	r3, #0
    ccb8:	f88d 3016 	strb.w	r3, [sp, #22]
    ccbc:	e011      	b.n	cce2 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    ccbe:	9b02      	ldr	r3, [sp, #8]
    ccc0:	7819      	ldrb	r1, [r3, #0]
    ccc2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ccc6:	9a02      	ldr	r2, [sp, #8]
    ccc8:	005b      	lsls	r3, r3, #1
    ccca:	4413      	add	r3, r2
    cccc:	889b      	ldrh	r3, [r3, #4]
    ccce:	f89d 2016 	ldrb.w	r2, [sp, #22]
    ccd2:	9801      	ldr	r0, [sp, #4]
    ccd4:	f000 fa74 	bl	d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ccd8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ccdc:	3301      	adds	r3, #1
    ccde:	f88d 3016 	strb.w	r3, [sp, #22]
    cce2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cce6:	2b07      	cmp	r3, #7
    cce8:	d9e9      	bls.n	ccbe <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    ccea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ccee:	3301      	adds	r3, #1
    ccf0:	f88d 3017 	strb.w	r3, [sp, #23]
    ccf4:	9b00      	ldr	r3, [sp, #0]
    ccf6:	7d1b      	ldrb	r3, [r3, #20]
    ccf8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ccfc:	429a      	cmp	r2, r3
    ccfe:	d3c8      	bcc.n	cc92 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    cd00:	9801      	ldr	r0, [sp, #4]
    cd02:	f000 f89b 	bl	ce3c <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    cd06:	9801      	ldr	r0, [sp, #4]
    cd08:	f000 f92e 	bl	cf68 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    cd0c:	9b00      	ldr	r3, [sp, #0]
    cd0e:	69da      	ldr	r2, [r3, #28]
    cd10:	4907      	ldr	r1, [pc, #28]	; (cd30 <Pdb_Adc_Ip_Init+0x14e>)
    cd12:	9b01      	ldr	r3, [sp, #4]
    cd14:	00db      	lsls	r3, r3, #3
    cd16:	440b      	add	r3, r1
    cd18:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    cd1a:	4a05      	ldr	r2, [pc, #20]	; (cd30 <Pdb_Adc_Ip_Init+0x14e>)
    cd1c:	9b01      	ldr	r3, [sp, #4]
    cd1e:	2101      	movs	r1, #1
    cd20:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    cd24:	bf00      	nop
    cd26:	b007      	add	sp, #28
    cd28:	f85d fb04 	ldr.w	pc, [sp], #4
    cd2c:	00019fb8 	.word	0x00019fb8
    cd30:	1fff8e18 	.word	0x1fff8e18

0000cd34 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    cd34:	b500      	push	{lr}
    cd36:	b097      	sub	sp, #92	; 0x5c
    cd38:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    cd3a:	2300      	movs	r3, #0
    cd3c:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    cd3e:	2300      	movs	r3, #0
    cd40:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    cd42:	2300      	movs	r3, #0
    cd44:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    cd46:	2300      	movs	r3, #0
    cd48:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    cd4a:	2300      	movs	r3, #0
    cd4c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    cd50:	2300      	movs	r3, #0
    cd52:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    cd56:	2300      	movs	r3, #0
    cd58:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    cd5c:	2302      	movs	r3, #2
    cd5e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    cd62:	2300      	movs	r3, #0
    cd64:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    cd68:	e04d      	b.n	ce06 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    cd6a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd6e:	4613      	mov	r3, r2
    cd70:	009b      	lsls	r3, r3, #2
    cd72:	4413      	add	r3, r2
    cd74:	009b      	lsls	r3, r3, #2
    cd76:	aa16      	add	r2, sp, #88	; 0x58
    cd78:	4413      	add	r3, r2
    cd7a:	3b4c      	subs	r3, #76	; 0x4c
    cd7c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd80:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    cd82:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd86:	4613      	mov	r3, r2
    cd88:	009b      	lsls	r3, r3, #2
    cd8a:	4413      	add	r3, r2
    cd8c:	009b      	lsls	r3, r3, #2
    cd8e:	aa16      	add	r2, sp, #88	; 0x58
    cd90:	4413      	add	r3, r2
    cd92:	3b4b      	subs	r3, #75	; 0x4b
    cd94:	2200      	movs	r2, #0
    cd96:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    cd98:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd9c:	4613      	mov	r3, r2
    cd9e:	009b      	lsls	r3, r3, #2
    cda0:	4413      	add	r3, r2
    cda2:	009b      	lsls	r3, r3, #2
    cda4:	aa16      	add	r2, sp, #88	; 0x58
    cda6:	4413      	add	r3, r2
    cda8:	3b4a      	subs	r3, #74	; 0x4a
    cdaa:	2200      	movs	r2, #0
    cdac:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    cdae:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cdb2:	4613      	mov	r3, r2
    cdb4:	009b      	lsls	r3, r3, #2
    cdb6:	4413      	add	r3, r2
    cdb8:	009b      	lsls	r3, r3, #2
    cdba:	aa16      	add	r2, sp, #88	; 0x58
    cdbc:	4413      	add	r3, r2
    cdbe:	3b49      	subs	r3, #73	; 0x49
    cdc0:	2200      	movs	r2, #0
    cdc2:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cdc4:	2300      	movs	r3, #0
    cdc6:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    cdca:	e013      	b.n	cdf4 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    cdcc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cdd0:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    cdd4:	4613      	mov	r3, r2
    cdd6:	009b      	lsls	r3, r3, #2
    cdd8:	4413      	add	r3, r2
    cdda:	005b      	lsls	r3, r3, #1
    cddc:	440b      	add	r3, r1
    cdde:	005b      	lsls	r3, r3, #1
    cde0:	aa16      	add	r2, sp, #88	; 0x58
    cde2:	4413      	add	r3, r2
    cde4:	2200      	movs	r2, #0
    cde6:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cdea:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    cdee:	3301      	adds	r3, #1
    cdf0:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    cdf4:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    cdf8:	2b07      	cmp	r3, #7
    cdfa:	d9e7      	bls.n	cdcc <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    cdfc:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    ce00:	3301      	adds	r3, #1
    ce02:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    ce06:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    ce0a:	2b01      	cmp	r3, #1
    ce0c:	d9ad      	bls.n	cd6a <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    ce0e:	ab03      	add	r3, sp, #12
    ce10:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    ce12:	2300      	movs	r3, #0
    ce14:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    ce16:	ab0d      	add	r3, sp, #52	; 0x34
    ce18:	4619      	mov	r1, r3
    ce1a:	9801      	ldr	r0, [sp, #4]
    ce1c:	f7ff fee1 	bl	cbe2 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    ce20:	9801      	ldr	r0, [sp, #4]
    ce22:	f000 f823 	bl	ce6c <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    ce26:	4a04      	ldr	r2, [pc, #16]	; (ce38 <Pdb_Adc_Ip_DeInit+0x104>)
    ce28:	9b01      	ldr	r3, [sp, #4]
    ce2a:	2100      	movs	r1, #0
    ce2c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    ce30:	bf00      	nop
    ce32:	b017      	add	sp, #92	; 0x5c
    ce34:	f85d fb04 	ldr.w	pc, [sp], #4
    ce38:	1fff8e18 	.word	0x1fff8e18

0000ce3c <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    ce3c:	b500      	push	{lr}
    ce3e:	b085      	sub	sp, #20
    ce40:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ce42:	4a09      	ldr	r2, [pc, #36]	; (ce68 <Pdb_Adc_Ip_Enable+0x2c>)
    ce44:	9b01      	ldr	r3, [sp, #4]
    ce46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce4a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    ce4c:	f005 fe40 	bl	12ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    ce50:	9b03      	ldr	r3, [sp, #12]
    ce52:	681b      	ldr	r3, [r3, #0]
    ce54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    ce58:	9b03      	ldr	r3, [sp, #12]
    ce5a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    ce5c:	f005 fe64 	bl	12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    ce60:	bf00      	nop
    ce62:	b005      	add	sp, #20
    ce64:	f85d fb04 	ldr.w	pc, [sp], #4
    ce68:	00019fb8 	.word	0x00019fb8

0000ce6c <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    ce6c:	b500      	push	{lr}
    ce6e:	b085      	sub	sp, #20
    ce70:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ce72:	4a08      	ldr	r2, [pc, #32]	; (ce94 <Pdb_Adc_Ip_Disable+0x28>)
    ce74:	9b01      	ldr	r3, [sp, #4]
    ce76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce7a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    ce7c:	f005 fe7a 	bl	12b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ce80:	9803      	ldr	r0, [sp, #12]
    ce82:	f7ff fe2c 	bl	cade <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    ce86:	f005 fea1 	bl	12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    ce8a:	bf00      	nop
    ce8c:	b005      	add	sp, #20
    ce8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ce92:	bf00      	nop
    ce94:	00019fb8 	.word	0x00019fb8

0000ce98 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    ce98:	b500      	push	{lr}
    ce9a:	b085      	sub	sp, #20
    ce9c:	9001      	str	r0, [sp, #4]
    ce9e:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cea0:	4a0e      	ldr	r2, [pc, #56]	; (cedc <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    cea2:	9b01      	ldr	r3, [sp, #4]
    cea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea8:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    ceaa:	f005 feb5 	bl	12c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    ceae:	9b03      	ldr	r3, [sp, #12]
    ceb0:	681b      	ldr	r3, [r3, #0]
    ceb2:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    ceb4:	9b02      	ldr	r3, [sp, #8]
    ceb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    ceba:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    cebc:	9b00      	ldr	r3, [sp, #0]
    cebe:	021b      	lsls	r3, r3, #8
    cec0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    cec4:	9a02      	ldr	r2, [sp, #8]
    cec6:	4313      	orrs	r3, r2
    cec8:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    ceca:	9b03      	ldr	r3, [sp, #12]
    cecc:	9a02      	ldr	r2, [sp, #8]
    cece:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    ced0:	f005 fece 	bl	12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    ced4:	bf00      	nop
    ced6:	b005      	add	sp, #20
    ced8:	f85d fb04 	ldr.w	pc, [sp], #4
    cedc:	00019fb8 	.word	0x00019fb8

0000cee0 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    cee0:	b500      	push	{lr}
    cee2:	b085      	sub	sp, #20
    cee4:	9001      	str	r0, [sp, #4]
    cee6:	460b      	mov	r3, r1
    cee8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ceec:	4a09      	ldr	r2, [pc, #36]	; (cf14 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    ceee:	9b01      	ldr	r3, [sp, #4]
    cef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    cef6:	f005 fee1 	bl	12cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    cefa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cefe:	4619      	mov	r1, r3
    cf00:	9803      	ldr	r0, [sp, #12]
    cf02:	f7ff fdf7 	bl	caf4 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    cf06:	f005 ff05 	bl	12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    cf0a:	bf00      	nop
    cf0c:	b005      	add	sp, #20
    cf0e:	f85d fb04 	ldr.w	pc, [sp], #4
    cf12:	bf00      	nop
    cf14:	00019fb8 	.word	0x00019fb8

0000cf18 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    cf18:	b500      	push	{lr}
    cf1a:	b085      	sub	sp, #20
    cf1c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf1e:	4a09      	ldr	r2, [pc, #36]	; (cf44 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    cf20:	9b01      	ldr	r3, [sp, #4]
    cf22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf26:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    cf28:	f005 ff1a 	bl	12d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    cf2c:	9b03      	ldr	r3, [sp, #12]
    cf2e:	681b      	ldr	r3, [r3, #0]
    cf30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    cf34:	9b03      	ldr	r3, [sp, #12]
    cf36:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    cf38:	f005 ff3e 	bl	12db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    cf3c:	bf00      	nop
    cf3e:	b005      	add	sp, #20
    cf40:	f85d fb04 	ldr.w	pc, [sp], #4
    cf44:	00019fb8 	.word	0x00019fb8

0000cf48 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    cf48:	b084      	sub	sp, #16
    cf4a:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf4c:	4a05      	ldr	r2, [pc, #20]	; (cf64 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    cf4e:	9b01      	ldr	r3, [sp, #4]
    cf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf54:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    cf56:	9b03      	ldr	r3, [sp, #12]
    cf58:	689b      	ldr	r3, [r3, #8]
    cf5a:	b29b      	uxth	r3, r3
}
    cf5c:	4618      	mov	r0, r3
    cf5e:	b004      	add	sp, #16
    cf60:	4770      	bx	lr
    cf62:	bf00      	nop
    cf64:	00019fb8 	.word	0x00019fb8

0000cf68 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    cf68:	b500      	push	{lr}
    cf6a:	b085      	sub	sp, #20
    cf6c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf6e:	4a09      	ldr	r2, [pc, #36]	; (cf94 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    cf70:	9b01      	ldr	r3, [sp, #4]
    cf72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf76:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    cf78:	f005 ff44 	bl	12e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    cf7c:	9b03      	ldr	r3, [sp, #12]
    cf7e:	681b      	ldr	r3, [r3, #0]
    cf80:	f043 0201 	orr.w	r2, r3, #1
    cf84:	9b03      	ldr	r3, [sp, #12]
    cf86:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    cf88:	f005 ff68 	bl	12e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    cf8c:	bf00      	nop
    cf8e:	b005      	add	sp, #20
    cf90:	f85d fb04 	ldr.w	pc, [sp], #4
    cf94:	00019fb8 	.word	0x00019fb8

0000cf98 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    cf98:	b500      	push	{lr}
    cf9a:	b085      	sub	sp, #20
    cf9c:	9001      	str	r0, [sp, #4]
    cf9e:	460b      	mov	r3, r1
    cfa0:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cfa4:	4a0d      	ldr	r2, [pc, #52]	; (cfdc <Pdb_Adc_Ip_SetModulus+0x44>)
    cfa6:	9b01      	ldr	r3, [sp, #4]
    cfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfac:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    cfae:	f006 fa0b 	bl	133c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    cfb2:	9b03      	ldr	r3, [sp, #12]
    cfb4:	685b      	ldr	r3, [r3, #4]
    cfb6:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    cfb8:	9b02      	ldr	r3, [sp, #8]
    cfba:	0c1b      	lsrs	r3, r3, #16
    cfbc:	041b      	lsls	r3, r3, #16
    cfbe:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    cfc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cfc4:	9a02      	ldr	r2, [sp, #8]
    cfc6:	4313      	orrs	r3, r2
    cfc8:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    cfca:	9b03      	ldr	r3, [sp, #12]
    cfcc:	9a02      	ldr	r2, [sp, #8]
    cfce:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    cfd0:	f006 fa26 	bl	13420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    cfd4:	bf00      	nop
    cfd6:	b005      	add	sp, #20
    cfd8:	f85d fb04 	ldr.w	pc, [sp], #4
    cfdc:	00019fb8 	.word	0x00019fb8

0000cfe0 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b087      	sub	sp, #28
    cfe4:	9003      	str	r0, [sp, #12]
    cfe6:	460b      	mov	r3, r1
    cfe8:	9201      	str	r2, [sp, #4]
    cfea:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cfee:	4a0a      	ldr	r2, [pc, #40]	; (d018 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    cff0:	9b03      	ldr	r3, [sp, #12]
    cff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    cff8:	f005 ffa8 	bl	12f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    cffc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d000:	9a01      	ldr	r2, [sp, #4]
    d002:	4619      	mov	r1, r3
    d004:	9805      	ldr	r0, [sp, #20]
    d006:	f7ff fd8e 	bl	cb26 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    d00a:	f005 ffcb 	bl	12fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    d00e:	bf00      	nop
    d010:	b007      	add	sp, #28
    d012:	f85d fb04 	ldr.w	pc, [sp], #4
    d016:	bf00      	nop
    d018:	00019fb8 	.word	0x00019fb8

0000d01c <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    d01c:	b084      	sub	sp, #16
    d01e:	9001      	str	r0, [sp, #4]
    d020:	460b      	mov	r3, r1
    d022:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d026:	4a0c      	ldr	r2, [pc, #48]	; (d058 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    d028:	9b01      	ldr	r3, [sp, #4]
    d02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d02e:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    d030:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d034:	9903      	ldr	r1, [sp, #12]
    d036:	4613      	mov	r3, r2
    d038:	009b      	lsls	r3, r3, #2
    d03a:	4413      	add	r3, r2
    d03c:	00db      	lsls	r3, r3, #3
    d03e:	440b      	add	r3, r1
    d040:	3314      	adds	r3, #20
    d042:	681b      	ldr	r3, [r3, #0]
    d044:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    d046:	9b02      	ldr	r3, [sp, #8]
    d048:	0c1b      	lsrs	r3, r3, #16
    d04a:	b2db      	uxtb	r3, r3
    d04c:	9302      	str	r3, [sp, #8]

    return Result;
    d04e:	9b02      	ldr	r3, [sp, #8]
}
    d050:	4618      	mov	r0, r3
    d052:	b004      	add	sp, #16
    d054:	4770      	bx	lr
    d056:	bf00      	nop
    d058:	00019fb8 	.word	0x00019fb8

0000d05c <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    d05c:	b500      	push	{lr}
    d05e:	b085      	sub	sp, #20
    d060:	9001      	str	r0, [sp, #4]
    d062:	460b      	mov	r3, r1
    d064:	f88d 3003 	strb.w	r3, [sp, #3]
    d068:	4613      	mov	r3, r2
    d06a:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d06e:	4a0a      	ldr	r2, [pc, #40]	; (d098 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    d070:	9b01      	ldr	r3, [sp, #4]
    d072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d076:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    d078:	f006 f902 	bl	13280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    d07c:	f8bd 2000 	ldrh.w	r2, [sp]
    d080:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d084:	4619      	mov	r1, r3
    d086:	9803      	ldr	r0, [sp, #12]
    d088:	f7ff fd85 	bl	cb96 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    d08c:	f006 f924 	bl	132d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    d090:	bf00      	nop
    d092:	b005      	add	sp, #20
    d094:	f85d fb04 	ldr.w	pc, [sp], #4
    d098:	00019fb8 	.word	0x00019fb8

0000d09c <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    d09c:	b500      	push	{lr}
    d09e:	b085      	sub	sp, #20
    d0a0:	9001      	str	r0, [sp, #4]
    d0a2:	4608      	mov	r0, r1
    d0a4:	4611      	mov	r1, r2
    d0a6:	461a      	mov	r2, r3
    d0a8:	4603      	mov	r3, r0
    d0aa:	f88d 3003 	strb.w	r3, [sp, #3]
    d0ae:	460b      	mov	r3, r1
    d0b0:	f88d 3002 	strb.w	r3, [sp, #2]
    d0b4:	4613      	mov	r3, r2
    d0b6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d0ba:	4a10      	ldr	r2, [pc, #64]	; (d0fc <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    d0bc:	9b01      	ldr	r3, [sp, #4]
    d0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0c2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d0c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d0c8:	2201      	movs	r2, #1
    d0ca:	fa02 f303 	lsl.w	r3, r2, r3
    d0ce:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    d0d0:	9b02      	ldr	r3, [sp, #8]
    d0d2:	041b      	lsls	r3, r3, #16
    d0d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    d0d8:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    d0da:	f005 ff89 	bl	12ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d0de:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d0e2:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d0e6:	9a02      	ldr	r2, [sp, #8]
    d0e8:	9803      	ldr	r0, [sp, #12]
    d0ea:	f7ff fcb9 	bl	ca60 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    d0ee:	f005 ffab 	bl	13048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    d0f2:	bf00      	nop
    d0f4:	b005      	add	sp, #20
    d0f6:	f85d fb04 	ldr.w	pc, [sp], #4
    d0fa:	bf00      	nop
    d0fc:	00019fb8 	.word	0x00019fb8

0000d100 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    d100:	b500      	push	{lr}
    d102:	b085      	sub	sp, #20
    d104:	9001      	str	r0, [sp, #4]
    d106:	4608      	mov	r0, r1
    d108:	4611      	mov	r1, r2
    d10a:	461a      	mov	r2, r3
    d10c:	4603      	mov	r3, r0
    d10e:	f88d 3003 	strb.w	r3, [sp, #3]
    d112:	460b      	mov	r3, r1
    d114:	f88d 3002 	strb.w	r3, [sp, #2]
    d118:	4613      	mov	r3, r2
    d11a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d11e:	4a0f      	ldr	r2, [pc, #60]	; (d15c <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    d120:	9b01      	ldr	r3, [sp, #4]
    d122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d126:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d128:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d12c:	2201      	movs	r2, #1
    d12e:	fa02 f303 	lsl.w	r3, r2, r3
    d132:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    d134:	9b02      	ldr	r3, [sp, #8]
    d136:	b2db      	uxtb	r3, r3
    d138:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    d13a:	f005 ffab 	bl	13094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d13e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d142:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d146:	9a02      	ldr	r2, [sp, #8]
    d148:	9803      	ldr	r0, [sp, #12]
    d14a:	f7ff fc89 	bl	ca60 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    d14e:	f005 ffcd 	bl	130ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    d152:	bf00      	nop
    d154:	b005      	add	sp, #20
    d156:	f85d fb04 	ldr.w	pc, [sp], #4
    d15a:	bf00      	nop
    d15c:	00019fb8 	.word	0x00019fb8

0000d160 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    d160:	b500      	push	{lr}
    d162:	b085      	sub	sp, #20
    d164:	9001      	str	r0, [sp, #4]
    d166:	4608      	mov	r0, r1
    d168:	4611      	mov	r1, r2
    d16a:	461a      	mov	r2, r3
    d16c:	4603      	mov	r3, r0
    d16e:	f88d 3003 	strb.w	r3, [sp, #3]
    d172:	460b      	mov	r3, r1
    d174:	f88d 3002 	strb.w	r3, [sp, #2]
    d178:	4613      	mov	r3, r2
    d17a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d17e:	4a0f      	ldr	r2, [pc, #60]	; (d1bc <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    d180:	9b01      	ldr	r3, [sp, #4]
    d182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d186:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d188:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d18c:	2201      	movs	r2, #1
    d18e:	fa02 f303 	lsl.w	r3, r2, r3
    d192:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    d194:	9b02      	ldr	r3, [sp, #8]
    d196:	021b      	lsls	r3, r3, #8
    d198:	b29b      	uxth	r3, r3
    d19a:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    d19c:	f005 ffcc 	bl	13138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d1a0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d1a4:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d1a8:	9a02      	ldr	r2, [sp, #8]
    d1aa:	9803      	ldr	r0, [sp, #12]
    d1ac:	f7ff fc58 	bl	ca60 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    d1b0:	f005 ffee 	bl	13190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    d1b4:	bf00      	nop
    d1b6:	b005      	add	sp, #20
    d1b8:	f85d fb04 	ldr.w	pc, [sp], #4
    d1bc:	00019fb8 	.word	0x00019fb8

0000d1c0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    d1c0:	b410      	push	{r4}
    d1c2:	b085      	sub	sp, #20
    d1c4:	9001      	str	r0, [sp, #4]
    d1c6:	4608      	mov	r0, r1
    d1c8:	4611      	mov	r1, r2
    d1ca:	461a      	mov	r2, r3
    d1cc:	4603      	mov	r3, r0
    d1ce:	f88d 3003 	strb.w	r3, [sp, #3]
    d1d2:	460b      	mov	r3, r1
    d1d4:	f88d 3002 	strb.w	r3, [sp, #2]
    d1d8:	4613      	mov	r3, r2
    d1da:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d1de:	4a0c      	ldr	r2, [pc, #48]	; (d210 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    d1e0:	9b01      	ldr	r3, [sp, #4]
    d1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e6:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    d1e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d1ec:	f89d 4002 	ldrb.w	r4, [sp, #2]
    d1f0:	f8bd 0000 	ldrh.w	r0, [sp]
    d1f4:	9903      	ldr	r1, [sp, #12]
    d1f6:	4613      	mov	r3, r2
    d1f8:	009b      	lsls	r3, r3, #2
    d1fa:	4413      	add	r3, r2
    d1fc:	005b      	lsls	r3, r3, #1
    d1fe:	4423      	add	r3, r4
    d200:	3306      	adds	r3, #6
    d202:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    d206:	bf00      	nop
    d208:	b005      	add	sp, #20
    d20a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d20e:	4770      	bx	lr
    d210:	00019fb8 	.word	0x00019fb8

0000d214 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    d214:	b500      	push	{lr}
    d216:	b087      	sub	sp, #28
    d218:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d21a:	4a19      	ldr	r2, [pc, #100]	; (d280 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    d21c:	9b01      	ldr	r3, [sp, #4]
    d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d222:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    d224:	2300      	movs	r3, #0
    d226:	f88d 300c 	strb.w	r3, [sp, #12]
    d22a:	2300      	movs	r3, #0
    d22c:	f88d 300d 	strb.w	r3, [sp, #13]
    d230:	2300      	movs	r3, #0
    d232:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    d236:	f005 fe37 	bl	12ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    d23a:	9804      	ldr	r0, [sp, #16]
    d23c:	f7ff fc4f 	bl	cade <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    d240:	2100      	movs	r1, #0
    d242:	9804      	ldr	r0, [sp, #16]
    d244:	f7ff fc56 	bl	caf4 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    d248:	f005 fe5a 	bl	12f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d24c:	2300      	movs	r3, #0
    d24e:	f88d 3017 	strb.w	r3, [sp, #23]
    d252:	e00b      	b.n	d26c <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    d254:	aa03      	add	r2, sp, #12
    d256:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d25a:	4619      	mov	r1, r3
    d25c:	9804      	ldr	r0, [sp, #16]
    d25e:	f000 f899 	bl	d394 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d262:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d266:	3301      	adds	r3, #1
    d268:	f88d 3017 	strb.w	r3, [sp, #23]
    d26c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d270:	2b01      	cmp	r3, #1
    d272:	d9ef      	bls.n	d254 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    d274:	bf00      	nop
    d276:	bf00      	nop
    d278:	b007      	add	sp, #28
    d27a:	f85d fb04 	ldr.w	pc, [sp], #4
    d27e:	bf00      	nop
    d280:	00019fb8 	.word	0x00019fb8

0000d284 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    d284:	b500      	push	{lr}
    d286:	b087      	sub	sp, #28
    d288:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d28a:	4a40      	ldr	r2, [pc, #256]	; (d38c <Pdb_Adc_Ip_IRQHandler+0x108>)
    d28c:	9b01      	ldr	r3, [sp, #4]
    d28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d292:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    d294:	4a3e      	ldr	r2, [pc, #248]	; (d390 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d296:	9b01      	ldr	r3, [sp, #4]
    d298:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    d29c:	2b00      	cmp	r3, #0
    d29e:	d04d      	beq.n	d33c <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    d2a0:	9b04      	ldr	r3, [sp, #16]
    d2a2:	681b      	ldr	r3, [r3, #0]
    d2a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d06a      	beq.n	d382 <Pdb_Adc_Ip_IRQHandler+0xfe>
    d2ac:	4a38      	ldr	r2, [pc, #224]	; (d390 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d2ae:	9b01      	ldr	r3, [sp, #4]
    d2b0:	00db      	lsls	r3, r3, #3
    d2b2:	4413      	add	r3, r2
    d2b4:	685b      	ldr	r3, [r3, #4]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d063      	beq.n	d382 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d2ba:	2300      	movs	r3, #0
    d2bc:	f88d 3017 	strb.w	r3, [sp, #23]
    d2c0:	e037      	b.n	d332 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    d2c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d2c6:	9904      	ldr	r1, [sp, #16]
    d2c8:	4613      	mov	r3, r2
    d2ca:	009b      	lsls	r3, r3, #2
    d2cc:	4413      	add	r3, r2
    d2ce:	00db      	lsls	r3, r3, #3
    d2d0:	440b      	add	r3, r1
    d2d2:	3314      	adds	r3, #20
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	b29b      	uxth	r3, r3
    d2d8:	b2db      	uxtb	r3, r3
    d2da:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    d2de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	d020      	beq.n	d328 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d2e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d2ea:	9904      	ldr	r1, [sp, #16]
    d2ec:	4613      	mov	r3, r2
    d2ee:	009b      	lsls	r3, r3, #2
    d2f0:	4413      	add	r3, r2
    d2f2:	00db      	lsls	r3, r3, #3
    d2f4:	440b      	add	r3, r1
    d2f6:	3314      	adds	r3, #20
    d2f8:	681b      	ldr	r3, [r3, #0]
    d2fa:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d2fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d302:	9804      	ldr	r0, [sp, #16]
    d304:	4613      	mov	r3, r2
    d306:	009b      	lsls	r3, r3, #2
    d308:	4413      	add	r3, r2
    d30a:	00db      	lsls	r3, r3, #3
    d30c:	4403      	add	r3, r0
    d30e:	3314      	adds	r3, #20
    d310:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    d312:	4a1f      	ldr	r2, [pc, #124]	; (d390 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d314:	9b01      	ldr	r3, [sp, #4]
    d316:	00db      	lsls	r3, r3, #3
    d318:	4413      	add	r3, r2
    d31a:	685b      	ldr	r3, [r3, #4]
    d31c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    d320:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d324:	4610      	mov	r0, r2
    d326:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d328:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d32c:	3301      	adds	r3, #1
    d32e:	f88d 3017 	strb.w	r3, [sp, #23]
    d332:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d336:	2b01      	cmp	r3, #1
    d338:	d9c3      	bls.n	d2c2 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    d33a:	e022      	b.n	d382 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d33c:	2300      	movs	r3, #0
    d33e:	f88d 3017 	strb.w	r3, [sp, #23]
    d342:	e01a      	b.n	d37a <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d344:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d348:	9904      	ldr	r1, [sp, #16]
    d34a:	4613      	mov	r3, r2
    d34c:	009b      	lsls	r3, r3, #2
    d34e:	4413      	add	r3, r2
    d350:	00db      	lsls	r3, r3, #3
    d352:	440b      	add	r3, r1
    d354:	3314      	adds	r3, #20
    d356:	681b      	ldr	r3, [r3, #0]
    d358:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d35c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d360:	9804      	ldr	r0, [sp, #16]
    d362:	4613      	mov	r3, r2
    d364:	009b      	lsls	r3, r3, #2
    d366:	4413      	add	r3, r2
    d368:	00db      	lsls	r3, r3, #3
    d36a:	4403      	add	r3, r0
    d36c:	3314      	adds	r3, #20
    d36e:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d370:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d374:	3301      	adds	r3, #1
    d376:	f88d 3017 	strb.w	r3, [sp, #23]
    d37a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d37e:	2b01      	cmp	r3, #1
    d380:	d9e0      	bls.n	d344 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    d382:	bf00      	nop
    d384:	b007      	add	sp, #28
    d386:	f85d fb04 	ldr.w	pc, [sp], #4
    d38a:	bf00      	nop
    d38c:	00019fb8 	.word	0x00019fb8
    d390:	1fff8e18 	.word	0x1fff8e18

0000d394 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    d394:	b500      	push	{lr}
    d396:	b085      	sub	sp, #20
    d398:	9003      	str	r0, [sp, #12]
    d39a:	460b      	mov	r3, r1
    d39c:	9201      	str	r2, [sp, #4]
    d39e:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    d3a2:	f005 ff1b 	bl	131dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    d3a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d3aa:	9a01      	ldr	r2, [sp, #4]
    d3ac:	4619      	mov	r1, r3
    d3ae:	9803      	ldr	r0, [sp, #12]
    d3b0:	f7ff fbb9 	bl	cb26 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    d3b4:	f005 ff3e 	bl	13234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    d3b8:	f005 ffb4 	bl	13324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    d3bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d3c0:	22ff      	movs	r2, #255	; 0xff
    d3c2:	4619      	mov	r1, r3
    d3c4:	9803      	ldr	r0, [sp, #12]
    d3c6:	f7ff fbe6 	bl	cb96 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d3ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d3ce:	9903      	ldr	r1, [sp, #12]
    d3d0:	4613      	mov	r3, r2
    d3d2:	009b      	lsls	r3, r3, #2
    d3d4:	4413      	add	r3, r2
    d3d6:	00db      	lsls	r3, r3, #3
    d3d8:	440b      	add	r3, r1
    d3da:	3314      	adds	r3, #20
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d3e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d3e6:	9803      	ldr	r0, [sp, #12]
    d3e8:	4613      	mov	r3, r2
    d3ea:	009b      	lsls	r3, r3, #2
    d3ec:	4413      	add	r3, r2
    d3ee:	00db      	lsls	r3, r3, #3
    d3f0:	4403      	add	r3, r0
    d3f2:	3314      	adds	r3, #20
    d3f4:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    d3f6:	f005 ffc1 	bl	1337c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    d3fa:	bf00      	nop
    d3fc:	b005      	add	sp, #20
    d3fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d402:	bf00      	nop

0000d404 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    d404:	b082      	sub	sp, #8
    d406:	9001      	str	r0, [sp, #4]
    d408:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    d40a:	9b01      	ldr	r3, [sp, #4]
    d40c:	681b      	ldr	r3, [r3, #0]
    d40e:	f023 0207 	bic.w	r2, r3, #7
    d412:	9b00      	ldr	r3, [sp, #0]
    d414:	f003 0307 	and.w	r3, r3, #7
    d418:	431a      	orrs	r2, r3
    d41a:	9b01      	ldr	r3, [sp, #4]
    d41c:	601a      	str	r2, [r3, #0]
}
    d41e:	bf00      	nop
    d420:	b002      	add	sp, #8
    d422:	4770      	bx	lr

0000d424 <Ftm_Pwm_Ip_GetClockPs>:
 * @param[in] FtmBase The FTM base address pointer
 *
 * @return The FTM clock pre-scale divider
 */
static inline uint8 Ftm_Pwm_Ip_GetClockPs(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d424:	b082      	sub	sp, #8
    d426:	9001      	str	r0, [sp, #4]
    return (uint8)((FtmBase->SC & FTM_SC_PS_MASK) >> FTM_SC_PS_SHIFT);
    d428:	9b01      	ldr	r3, [sp, #4]
    d42a:	681b      	ldr	r3, [r3, #0]
    d42c:	b2db      	uxtb	r3, r3
    d42e:	f003 0307 	and.w	r3, r3, #7
    d432:	b2db      	uxtb	r3, r3
}
    d434:	4618      	mov	r0, r3
    d436:	b002      	add	sp, #8
    d438:	4770      	bx	lr

0000d43a <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    d43a:	b082      	sub	sp, #8
    d43c:	9001      	str	r0, [sp, #4]
    d43e:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    d440:	9b01      	ldr	r3, [sp, #4]
    d442:	681b      	ldr	r3, [r3, #0]
    d444:	f023 0218 	bic.w	r2, r3, #24
    d448:	9b00      	ldr	r3, [sp, #0]
    d44a:	00db      	lsls	r3, r3, #3
    d44c:	f003 0318 	and.w	r3, r3, #24
    d450:	431a      	orrs	r2, r3
    d452:	9b01      	ldr	r3, [sp, #4]
    d454:	601a      	str	r2, [r3, #0]
}
    d456:	bf00      	nop
    d458:	b002      	add	sp, #8
    d45a:	4770      	bx	lr

0000d45c <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    d45c:	b082      	sub	sp, #8
    d45e:	9001      	str	r0, [sp, #4]
    d460:	460b      	mov	r3, r1
    d462:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    d466:	9b01      	ldr	r3, [sp, #4]
    d468:	681b      	ldr	r3, [r3, #0]
    d46a:	f023 0320 	bic.w	r3, r3, #32
    d46e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d472:	2a00      	cmp	r2, #0
    d474:	d001      	beq.n	d47a <Ftm_Pwm_Ip_SetCpwms+0x1e>
    d476:	2220      	movs	r2, #32
    d478:	e000      	b.n	d47c <Ftm_Pwm_Ip_SetCpwms+0x20>
    d47a:	2200      	movs	r2, #0
    d47c:	431a      	orrs	r2, r3
    d47e:	9b01      	ldr	r3, [sp, #4]
    d480:	601a      	str	r2, [r3, #0]
}
    d482:	bf00      	nop
    d484:	b002      	add	sp, #8
    d486:	4770      	bx	lr

0000d488 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d488:	b082      	sub	sp, #8
    d48a:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    d48c:	9b01      	ldr	r3, [sp, #4]
    d48e:	681b      	ldr	r3, [r3, #0]
    d490:	f003 0320 	and.w	r3, r3, #32
    d494:	2b00      	cmp	r3, #0
    d496:	bf14      	ite	ne
    d498:	2301      	movne	r3, #1
    d49a:	2300      	moveq	r3, #0
    d49c:	b2db      	uxtb	r3, r3
}
    d49e:	4618      	mov	r0, r3
    d4a0:	b002      	add	sp, #8
    d4a2:	4770      	bx	lr

0000d4a4 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    d4a4:	b082      	sub	sp, #8
    d4a6:	9001      	str	r0, [sp, #4]
    d4a8:	460b      	mov	r3, r1
    d4aa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    d4ae:	9b01      	ldr	r3, [sp, #4]
    d4b0:	681b      	ldr	r3, [r3, #0]
    d4b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d4b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d4ba:	2a00      	cmp	r2, #0
    d4bc:	d002      	beq.n	d4c4 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    d4be:	f44f 7280 	mov.w	r2, #256	; 0x100
    d4c2:	e000      	b.n	d4c6 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    d4c4:	2200      	movs	r2, #0
    d4c6:	431a      	orrs	r2, r3
    d4c8:	9b01      	ldr	r3, [sp, #4]
    d4ca:	601a      	str	r2, [r3, #0]
}
    d4cc:	bf00      	nop
    d4ce:	b002      	add	sp, #8
    d4d0:	4770      	bx	lr

0000d4d2 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d4d2:	b082      	sub	sp, #8
    d4d4:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    d4d6:	9b01      	ldr	r3, [sp, #4]
    d4d8:	681b      	ldr	r3, [r3, #0]
    d4da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    d4de:	9b01      	ldr	r3, [sp, #4]
    d4e0:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    d4e2:	bf00      	nop
    d4e4:	b002      	add	sp, #8
    d4e6:	4770      	bx	lr

0000d4e8 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    d4e8:	b082      	sub	sp, #8
    d4ea:	9001      	str	r0, [sp, #4]
    d4ec:	460b      	mov	r3, r1
    d4ee:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    d4f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d4f6:	3310      	adds	r3, #16
    d4f8:	2201      	movs	r2, #1
    d4fa:	409a      	lsls	r2, r3
    d4fc:	9b01      	ldr	r3, [sp, #4]
    d4fe:	681b      	ldr	r3, [r3, #0]
    d500:	431a      	orrs	r2, r3
    d502:	9b01      	ldr	r3, [sp, #4]
    d504:	601a      	str	r2, [r3, #0]
}
    d506:	bf00      	nop
    d508:	b002      	add	sp, #8
    d50a:	4770      	bx	lr

0000d50c <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    d50c:	b082      	sub	sp, #8
    d50e:	9001      	str	r0, [sp, #4]
    d510:	460b      	mov	r3, r1
    d512:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    d516:	9b01      	ldr	r3, [sp, #4]
    d518:	685b      	ldr	r3, [r3, #4]
    d51a:	0c1b      	lsrs	r3, r3, #16
    d51c:	041b      	lsls	r3, r3, #16
    d51e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d522:	431a      	orrs	r2, r3
    d524:	9b01      	ldr	r3, [sp, #4]
    d526:	605a      	str	r2, [r3, #4]
}
    d528:	bf00      	nop
    d52a:	b002      	add	sp, #8
    d52c:	4770      	bx	lr

0000d52e <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    d52e:	b082      	sub	sp, #8
    d530:	9001      	str	r0, [sp, #4]
    d532:	460b      	mov	r3, r1
    d534:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    d538:	9b01      	ldr	r3, [sp, #4]
    d53a:	689b      	ldr	r3, [r3, #8]
    d53c:	0c1b      	lsrs	r3, r3, #16
    d53e:	041b      	lsls	r3, r3, #16
    d540:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d544:	431a      	orrs	r2, r3
    d546:	9b01      	ldr	r3, [sp, #4]
    d548:	609a      	str	r2, [r3, #8]
}
    d54a:	bf00      	nop
    d54c:	b002      	add	sp, #8
    d54e:	4770      	bx	lr

0000d550 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d550:	b084      	sub	sp, #16
    d552:	9001      	str	r0, [sp, #4]
    d554:	460b      	mov	r3, r1
    d556:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    d55a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d55e:	9a01      	ldr	r2, [sp, #4]
    d560:	3301      	adds	r3, #1
    d562:	00db      	lsls	r3, r3, #3
    d564:	4413      	add	r3, r2
    d566:	685b      	ldr	r3, [r3, #4]
    d568:	089b      	lsrs	r3, r3, #2
    d56a:	b2db      	uxtb	r3, r3
    d56c:	f003 0301 	and.w	r3, r3, #1
    d570:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    d574:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d578:	9a01      	ldr	r2, [sp, #4]
    d57a:	3301      	adds	r3, #1
    d57c:	00db      	lsls	r3, r3, #3
    d57e:	4413      	add	r3, r2
    d580:	685b      	ldr	r3, [r3, #4]
    d582:	08db      	lsrs	r3, r3, #3
    d584:	b2db      	uxtb	r3, r3
    d586:	005b      	lsls	r3, r3, #1
    d588:	b2db      	uxtb	r3, r3
    d58a:	f003 0302 	and.w	r3, r3, #2
    d58e:	b2da      	uxtb	r2, r3
    d590:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d594:	4313      	orrs	r3, r2
    d596:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d59a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d59e:	4618      	mov	r0, r3
    d5a0:	b004      	add	sp, #16
    d5a2:	4770      	bx	lr

0000d5a4 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    d5a4:	b086      	sub	sp, #24
    d5a6:	9003      	str	r0, [sp, #12]
    d5a8:	460b      	mov	r3, r1
    d5aa:	9201      	str	r2, [sp, #4]
    d5ac:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    d5b0:	9b01      	ldr	r3, [sp, #4]
    d5b2:	009b      	lsls	r3, r3, #2
    d5b4:	f003 0304 	and.w	r3, r3, #4
    d5b8:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    d5ba:	9b01      	ldr	r3, [sp, #4]
    d5bc:	009b      	lsls	r3, r3, #2
    d5be:	f003 0308 	and.w	r3, r3, #8
    d5c2:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    d5c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5c8:	9a03      	ldr	r2, [sp, #12]
    d5ca:	3301      	adds	r3, #1
    d5cc:	00db      	lsls	r3, r3, #3
    d5ce:	4413      	add	r3, r2
    d5d0:	685b      	ldr	r3, [r3, #4]
    d5d2:	f023 0104 	bic.w	r1, r3, #4
    d5d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5da:	9a05      	ldr	r2, [sp, #20]
    d5dc:	430a      	orrs	r2, r1
    d5de:	9903      	ldr	r1, [sp, #12]
    d5e0:	3301      	adds	r3, #1
    d5e2:	00db      	lsls	r3, r3, #3
    d5e4:	440b      	add	r3, r1
    d5e6:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    d5e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5ec:	9a03      	ldr	r2, [sp, #12]
    d5ee:	3301      	adds	r3, #1
    d5f0:	00db      	lsls	r3, r3, #3
    d5f2:	4413      	add	r3, r2
    d5f4:	685b      	ldr	r3, [r3, #4]
    d5f6:	f023 0108 	bic.w	r1, r3, #8
    d5fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5fe:	9a04      	ldr	r2, [sp, #16]
    d600:	430a      	orrs	r2, r1
    d602:	9903      	ldr	r1, [sp, #12]
    d604:	3301      	adds	r3, #1
    d606:	00db      	lsls	r3, r3, #3
    d608:	440b      	add	r3, r1
    d60a:	605a      	str	r2, [r3, #4]
}
    d60c:	bf00      	nop
    d60e:	b006      	add	sp, #24
    d610:	4770      	bx	lr

0000d612 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    d612:	b086      	sub	sp, #24
    d614:	9003      	str	r0, [sp, #12]
    d616:	460b      	mov	r3, r1
    d618:	9201      	str	r2, [sp, #4]
    d61a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    d61e:	9b01      	ldr	r3, [sp, #4]
    d620:	009b      	lsls	r3, r3, #2
    d622:	f003 0310 	and.w	r3, r3, #16
    d626:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	009b      	lsls	r3, r3, #2
    d62c:	f003 0320 	and.w	r3, r3, #32
    d630:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    d632:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d636:	9a03      	ldr	r2, [sp, #12]
    d638:	3301      	adds	r3, #1
    d63a:	00db      	lsls	r3, r3, #3
    d63c:	4413      	add	r3, r2
    d63e:	685b      	ldr	r3, [r3, #4]
    d640:	f023 0110 	bic.w	r1, r3, #16
    d644:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d648:	9a05      	ldr	r2, [sp, #20]
    d64a:	430a      	orrs	r2, r1
    d64c:	9903      	ldr	r1, [sp, #12]
    d64e:	3301      	adds	r3, #1
    d650:	00db      	lsls	r3, r3, #3
    d652:	440b      	add	r3, r1
    d654:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    d656:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d65a:	9a03      	ldr	r2, [sp, #12]
    d65c:	3301      	adds	r3, #1
    d65e:	00db      	lsls	r3, r3, #3
    d660:	4413      	add	r3, r2
    d662:	685b      	ldr	r3, [r3, #4]
    d664:	f023 0120 	bic.w	r1, r3, #32
    d668:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d66c:	9a04      	ldr	r2, [sp, #16]
    d66e:	430a      	orrs	r2, r1
    d670:	9903      	ldr	r1, [sp, #12]
    d672:	3301      	adds	r3, #1
    d674:	00db      	lsls	r3, r3, #3
    d676:	440b      	add	r3, r1
    d678:	605a      	str	r2, [r3, #4]
}
    d67a:	bf00      	nop
    d67c:	b006      	add	sp, #24
    d67e:	4770      	bx	lr

0000d680 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    d680:	b084      	sub	sp, #16
    d682:	9001      	str	r0, [sp, #4]
    d684:	460b      	mov	r3, r1
    d686:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    d68a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d68e:	9a01      	ldr	r2, [sp, #4]
    d690:	3301      	adds	r3, #1
    d692:	00db      	lsls	r3, r3, #3
    d694:	4413      	add	r3, r2
    d696:	685b      	ldr	r3, [r3, #4]
    d698:	091b      	lsrs	r3, r3, #4
    d69a:	b2db      	uxtb	r3, r3
    d69c:	f003 0301 	and.w	r3, r3, #1
    d6a0:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    d6a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6a8:	9a01      	ldr	r2, [sp, #4]
    d6aa:	3301      	adds	r3, #1
    d6ac:	00db      	lsls	r3, r3, #3
    d6ae:	4413      	add	r3, r2
    d6b0:	685b      	ldr	r3, [r3, #4]
    d6b2:	095b      	lsrs	r3, r3, #5
    d6b4:	b2db      	uxtb	r3, r3
    d6b6:	005b      	lsls	r3, r3, #1
    d6b8:	b2db      	uxtb	r3, r3
    d6ba:	f003 0302 	and.w	r3, r3, #2
    d6be:	b2da      	uxtb	r2, r3
    d6c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d6c4:	4313      	orrs	r3, r2
    d6c6:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d6ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d6ce:	4618      	mov	r0, r3
    d6d0:	b004      	add	sp, #16
    d6d2:	4770      	bx	lr

0000d6d4 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    d6d4:	b082      	sub	sp, #8
    d6d6:	9001      	str	r0, [sp, #4]
    d6d8:	460b      	mov	r3, r1
    d6da:	f88d 3003 	strb.w	r3, [sp, #3]
    d6de:	4613      	mov	r3, r2
    d6e0:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    d6e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6e8:	9a01      	ldr	r2, [sp, #4]
    d6ea:	3301      	adds	r3, #1
    d6ec:	00db      	lsls	r3, r3, #3
    d6ee:	4413      	add	r3, r2
    d6f0:	685b      	ldr	r3, [r3, #4]
    d6f2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    d6f6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d6fa:	2b00      	cmp	r3, #0
    d6fc:	d001      	beq.n	d702 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    d6fe:	2140      	movs	r1, #64	; 0x40
    d700:	e000      	b.n	d704 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    d702:	2100      	movs	r1, #0
    d704:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d708:	430a      	orrs	r2, r1
    d70a:	9901      	ldr	r1, [sp, #4]
    d70c:	3301      	adds	r3, #1
    d70e:	00db      	lsls	r3, r3, #3
    d710:	440b      	add	r3, r1
    d712:	605a      	str	r2, [r3, #4]
}
    d714:	bf00      	nop
    d716:	b002      	add	sp, #8
    d718:	4770      	bx	lr

0000d71a <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    d71a:	b082      	sub	sp, #8
    d71c:	9001      	str	r0, [sp, #4]
    d71e:	460b      	mov	r3, r1
    d720:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    d724:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d728:	9a01      	ldr	r2, [sp, #4]
    d72a:	3301      	adds	r3, #1
    d72c:	00db      	lsls	r3, r3, #3
    d72e:	4413      	add	r3, r2
    d730:	685a      	ldr	r2, [r3, #4]
    d732:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d73a:	9901      	ldr	r1, [sp, #4]
    d73c:	3301      	adds	r3, #1
    d73e:	00db      	lsls	r3, r3, #3
    d740:	440b      	add	r3, r1
    d742:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    d744:	bf00      	nop
    d746:	b002      	add	sp, #8
    d748:	4770      	bx	lr

0000d74a <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    d74a:	b082      	sub	sp, #8
    d74c:	9001      	str	r0, [sp, #4]
    d74e:	460b      	mov	r3, r1
    d750:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    d754:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d758:	9a01      	ldr	r2, [sp, #4]
    d75a:	3301      	adds	r3, #1
    d75c:	00db      	lsls	r3, r3, #3
    d75e:	4413      	add	r3, r2
    d760:	685b      	ldr	r3, [r3, #4]
    d762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d766:	2b00      	cmp	r3, #0
    d768:	bf14      	ite	ne
    d76a:	2301      	movne	r3, #1
    d76c:	2300      	moveq	r3, #0
    d76e:	b2db      	uxtb	r3, r3
}
    d770:	4618      	mov	r0, r3
    d772:	b002      	add	sp, #8
    d774:	4770      	bx	lr

0000d776 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    d776:	b082      	sub	sp, #8
    d778:	9001      	str	r0, [sp, #4]
    d77a:	460b      	mov	r3, r1
    d77c:	f88d 3003 	strb.w	r3, [sp, #3]
    d780:	4613      	mov	r3, r2
    d782:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    d786:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d78a:	f8bd 2000 	ldrh.w	r2, [sp]
    d78e:	9901      	ldr	r1, [sp, #4]
    d790:	3301      	adds	r3, #1
    d792:	00db      	lsls	r3, r3, #3
    d794:	440b      	add	r3, r1
    d796:	609a      	str	r2, [r3, #8]
}
    d798:	bf00      	nop
    d79a:	b002      	add	sp, #8
    d79c:	4770      	bx	lr

0000d79e <Ftm_Pwm_Ip_GetChnCountVal>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnCountVal_Activity
 */
static inline uint16 Ftm_Pwm_Ip_GetChnCountVal(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d79e:	b082      	sub	sp, #8
    d7a0:	9001      	str	r0, [sp, #4]
    d7a2:	460b      	mov	r3, r1
    d7a4:	f88d 3003 	strb.w	r3, [sp, #3]
    return (uint16)(FtmBase->CONTROLS[Channel].CV);
    d7a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d7ac:	9a01      	ldr	r2, [sp, #4]
    d7ae:	3301      	adds	r3, #1
    d7b0:	00db      	lsls	r3, r3, #3
    d7b2:	4413      	add	r3, r2
    d7b4:	689b      	ldr	r3, [r3, #8]
    d7b6:	b29b      	uxth	r3, r3
}
    d7b8:	4618      	mov	r0, r3
    d7ba:	b002      	add	sp, #8
    d7bc:	4770      	bx	lr

0000d7be <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    d7be:	b082      	sub	sp, #8
    d7c0:	9001      	str	r0, [sp, #4]
    d7c2:	460b      	mov	r3, r1
    d7c4:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    d7c8:	9b01      	ldr	r3, [sp, #4]
    d7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d7cc:	0c1b      	lsrs	r3, r3, #16
    d7ce:	041b      	lsls	r3, r3, #16
    d7d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d7d4:	431a      	orrs	r2, r3
    d7d6:	9b01      	ldr	r3, [sp, #4]
    d7d8:	64da      	str	r2, [r3, #76]	; 0x4c
}
    d7da:	bf00      	nop
    d7dc:	b002      	add	sp, #8
    d7de:	4770      	bx	lr

0000d7e0 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    d7e0:	b082      	sub	sp, #8
    d7e2:	9001      	str	r0, [sp, #4]
    d7e4:	460b      	mov	r3, r1
    d7e6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    d7ea:	9b01      	ldr	r3, [sp, #4]
    d7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d7ee:	f023 0301 	bic.w	r3, r3, #1
    d7f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d7f6:	2a00      	cmp	r2, #0
    d7f8:	d001      	beq.n	d7fe <Ftm_Pwm_Ip_Enable+0x1e>
    d7fa:	2201      	movs	r2, #1
    d7fc:	e000      	b.n	d800 <Ftm_Pwm_Ip_Enable+0x20>
    d7fe:	2200      	movs	r2, #0
    d800:	431a      	orrs	r2, r3
    d802:	9b01      	ldr	r3, [sp, #4]
    d804:	655a      	str	r2, [r3, #84]	; 0x54
}
    d806:	bf00      	nop
    d808:	b002      	add	sp, #8
    d80a:	4770      	bx	lr

0000d80c <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    d80c:	b082      	sub	sp, #8
    d80e:	9001      	str	r0, [sp, #4]
    d810:	460b      	mov	r3, r1
    d812:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    d816:	9b01      	ldr	r3, [sp, #4]
    d818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d81a:	f023 0308 	bic.w	r3, r3, #8
    d81e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d822:	2a00      	cmp	r2, #0
    d824:	d001      	beq.n	d82a <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    d826:	2208      	movs	r2, #8
    d828:	e000      	b.n	d82c <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    d82a:	2200      	movs	r2, #0
    d82c:	431a      	orrs	r2, r3
    d82e:	9b01      	ldr	r3, [sp, #4]
    d830:	655a      	str	r2, [r3, #84]	; 0x54
}
    d832:	bf00      	nop
    d834:	b002      	add	sp, #8
    d836:	4770      	bx	lr

0000d838 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    d838:	b082      	sub	sp, #8
    d83a:	9001      	str	r0, [sp, #4]
    d83c:	460b      	mov	r3, r1
    d83e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    d842:	9b01      	ldr	r3, [sp, #4]
    d844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d846:	f023 0301 	bic.w	r3, r3, #1
    d84a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d84e:	2a00      	cmp	r2, #0
    d850:	d001      	beq.n	d856 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    d852:	2201      	movs	r2, #1
    d854:	e000      	b.n	d858 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    d856:	2200      	movs	r2, #0
    d858:	431a      	orrs	r2, r3
    d85a:	9b01      	ldr	r3, [sp, #4]
    d85c:	659a      	str	r2, [r3, #88]	; 0x58
}
    d85e:	bf00      	nop
    d860:	b002      	add	sp, #8
    d862:	4770      	bx	lr

0000d864 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    d864:	b082      	sub	sp, #8
    d866:	9001      	str	r0, [sp, #4]
    d868:	460b      	mov	r3, r1
    d86a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    d86e:	9b01      	ldr	r3, [sp, #4]
    d870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d872:	f023 0302 	bic.w	r3, r3, #2
    d876:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d87a:	2a00      	cmp	r2, #0
    d87c:	d001      	beq.n	d882 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    d87e:	2202      	movs	r2, #2
    d880:	e000      	b.n	d884 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    d882:	2200      	movs	r2, #0
    d884:	431a      	orrs	r2, r3
    d886:	9b01      	ldr	r3, [sp, #4]
    d888:	659a      	str	r2, [r3, #88]	; 0x58
}
    d88a:	bf00      	nop
    d88c:	b002      	add	sp, #8
    d88e:	4770      	bx	lr

0000d890 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    d890:	b082      	sub	sp, #8
    d892:	9001      	str	r0, [sp, #4]
    d894:	460b      	mov	r3, r1
    d896:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    d89a:	9b01      	ldr	r3, [sp, #4]
    d89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d89e:	f023 0308 	bic.w	r3, r3, #8
    d8a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d8a6:	2a00      	cmp	r2, #0
    d8a8:	d001      	beq.n	d8ae <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    d8aa:	2208      	movs	r2, #8
    d8ac:	e000      	b.n	d8b0 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    d8ae:	2200      	movs	r2, #0
    d8b0:	431a      	orrs	r2, r3
    d8b2:	9b01      	ldr	r3, [sp, #4]
    d8b4:	659a      	str	r2, [r3, #88]	; 0x58
}
    d8b6:	bf00      	nop
    d8b8:	b002      	add	sp, #8
    d8ba:	4770      	bx	lr

0000d8bc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    d8bc:	b082      	sub	sp, #8
    d8be:	9001      	str	r0, [sp, #4]
    d8c0:	460b      	mov	r3, r1
    d8c2:	f88d 3003 	strb.w	r3, [sp, #3]
    d8c6:	4613      	mov	r3, r2
    d8c8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    d8cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d00a      	beq.n	d8ea <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    d8d4:	9b01      	ldr	r3, [sp, #4]
    d8d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d8d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8dc:	2110      	movs	r1, #16
    d8de:	fa01 f303 	lsl.w	r3, r1, r3
    d8e2:	431a      	orrs	r2, r3
    d8e4:	9b01      	ldr	r3, [sp, #4]
    d8e6:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    d8e8:	e00a      	b.n	d900 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    d8ea:	9b01      	ldr	r3, [sp, #4]
    d8ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d8ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8f2:	2110      	movs	r1, #16
    d8f4:	fa01 f303 	lsl.w	r3, r1, r3
    d8f8:	43db      	mvns	r3, r3
    d8fa:	401a      	ands	r2, r3
    d8fc:	9b01      	ldr	r3, [sp, #4]
    d8fe:	659a      	str	r2, [r3, #88]	; 0x58
}
    d900:	bf00      	nop
    d902:	b002      	add	sp, #8
    d904:	4770      	bx	lr

0000d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    d906:	b082      	sub	sp, #8
    d908:	9001      	str	r0, [sp, #4]
    d90a:	460b      	mov	r3, r1
    d90c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    d910:	9b01      	ldr	r3, [sp, #4]
    d912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d918:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d91c:	2a00      	cmp	r2, #0
    d91e:	d001      	beq.n	d924 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    d920:	2280      	movs	r2, #128	; 0x80
    d922:	e000      	b.n	d926 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    d924:	2200      	movs	r2, #0
    d926:	431a      	orrs	r2, r3
    d928:	9b01      	ldr	r3, [sp, #4]
    d92a:	659a      	str	r2, [r3, #88]	; 0x58
}
    d92c:	bf00      	nop
    d92e:	b002      	add	sp, #8
    d930:	4770      	bx	lr

0000d932 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    d932:	b084      	sub	sp, #16
    d934:	9003      	str	r0, [sp, #12]
    d936:	460b      	mov	r3, r1
    d938:	9201      	str	r2, [sp, #4]
    d93a:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    d93e:	9b01      	ldr	r3, [sp, #4]
    d940:	2b01      	cmp	r3, #1
    d942:	d10a      	bne.n	d95a <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    d944:	9b03      	ldr	r3, [sp, #12]
    d946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d948:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d94c:	2101      	movs	r1, #1
    d94e:	fa01 f303 	lsl.w	r3, r1, r3
    d952:	431a      	orrs	r2, r3
    d954:	9b03      	ldr	r3, [sp, #12]
    d956:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    d958:	e00a      	b.n	d970 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    d95a:	9b03      	ldr	r3, [sp, #12]
    d95c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d95e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d962:	2101      	movs	r1, #1
    d964:	fa01 f303 	lsl.w	r3, r1, r3
    d968:	43db      	mvns	r3, r3
    d96a:	401a      	ands	r2, r3
    d96c:	9b03      	ldr	r3, [sp, #12]
    d96e:	65da      	str	r2, [r3, #92]	; 0x5c
}
    d970:	bf00      	nop
    d972:	b004      	add	sp, #16
    d974:	4770      	bx	lr

0000d976 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    d976:	b082      	sub	sp, #8
    d978:	9001      	str	r0, [sp, #4]
    d97a:	460b      	mov	r3, r1
    d97c:	f88d 3003 	strb.w	r3, [sp, #3]
    d980:	4613      	mov	r3, r2
    d982:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    d986:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d98a:	2b00      	cmp	r3, #0
    d98c:	d00a      	beq.n	d9a4 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    d98e:	9b01      	ldr	r3, [sp, #4]
    d990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d992:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d996:	2101      	movs	r1, #1
    d998:	fa01 f303 	lsl.w	r3, r1, r3
    d99c:	431a      	orrs	r2, r3
    d99e:	9b01      	ldr	r3, [sp, #4]
    d9a0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    d9a2:	e00a      	b.n	d9ba <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d9a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d9ac:	2101      	movs	r1, #1
    d9ae:	fa01 f303 	lsl.w	r3, r1, r3
    d9b2:	43db      	mvns	r3, r3
    d9b4:	401a      	ands	r2, r3
    d9b6:	9b01      	ldr	r3, [sp, #4]
    d9b8:	661a      	str	r2, [r3, #96]	; 0x60
}
    d9ba:	bf00      	nop
    d9bc:	b002      	add	sp, #8
    d9be:	4770      	bx	lr

0000d9c0 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    d9c0:	b082      	sub	sp, #8
    d9c2:	9001      	str	r0, [sp, #4]
    d9c4:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    d9c6:	9b01      	ldr	r3, [sp, #4]
    d9c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d9ca:	9b00      	ldr	r3, [sp, #0]
    d9cc:	43db      	mvns	r3, r3
    d9ce:	401a      	ands	r2, r3
    d9d0:	9b00      	ldr	r3, [sp, #0]
    d9d2:	431a      	orrs	r2, r3
    d9d4:	9b01      	ldr	r3, [sp, #4]
    d9d6:	661a      	str	r2, [r3, #96]	; 0x60
}
    d9d8:	bf00      	nop
    d9da:	b002      	add	sp, #8
    d9dc:	4770      	bx	lr

0000d9de <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    d9de:	b082      	sub	sp, #8
    d9e0:	9001      	str	r0, [sp, #4]
    d9e2:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    d9e4:	9b01      	ldr	r3, [sp, #4]
    d9e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d9e8:	9b00      	ldr	r3, [sp, #0]
    d9ea:	43db      	mvns	r3, r3
    d9ec:	401a      	ands	r2, r3
    d9ee:	9b01      	ldr	r3, [sp, #4]
    d9f0:	661a      	str	r2, [r3, #96]	; 0x60
}
    d9f2:	bf00      	nop
    d9f4:	b002      	add	sp, #8
    d9f6:	4770      	bx	lr

0000d9f8 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    d9f8:	b082      	sub	sp, #8
    d9fa:	9001      	str	r0, [sp, #4]
    d9fc:	460b      	mov	r3, r1
    d9fe:	f88d 3003 	strb.w	r3, [sp, #3]
    da02:	4613      	mov	r3, r2
    da04:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    da08:	f89d 3002 	ldrb.w	r3, [sp, #2]
    da0c:	2b00      	cmp	r3, #0
    da0e:	d00b      	beq.n	da28 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    da10:	9b01      	ldr	r3, [sp, #4]
    da12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da18:	00db      	lsls	r3, r3, #3
    da1a:	2101      	movs	r1, #1
    da1c:	fa01 f303 	lsl.w	r3, r1, r3
    da20:	431a      	orrs	r2, r3
    da22:	9b01      	ldr	r3, [sp, #4]
    da24:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    da26:	e00b      	b.n	da40 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    da28:	9b01      	ldr	r3, [sp, #4]
    da2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da30:	00db      	lsls	r3, r3, #3
    da32:	2101      	movs	r1, #1
    da34:	fa01 f303 	lsl.w	r3, r1, r3
    da38:	43db      	mvns	r3, r3
    da3a:	401a      	ands	r2, r3
    da3c:	9b01      	ldr	r3, [sp, #4]
    da3e:	665a      	str	r2, [r3, #100]	; 0x64
}
    da40:	bf00      	nop
    da42:	b002      	add	sp, #8
    da44:	4770      	bx	lr

0000da46 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    da46:	b082      	sub	sp, #8
    da48:	9001      	str	r0, [sp, #4]
    da4a:	460b      	mov	r3, r1
    da4c:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da58:	00db      	lsls	r3, r3, #3
    da5a:	fa22 f303 	lsr.w	r3, r2, r3
    da5e:	f003 0301 	and.w	r3, r3, #1
    da62:	2b00      	cmp	r3, #0
    da64:	bf14      	ite	ne
    da66:	2301      	movne	r3, #1
    da68:	2300      	moveq	r3, #0
    da6a:	b2db      	uxtb	r3, r3
}
    da6c:	4618      	mov	r0, r3
    da6e:	b002      	add	sp, #8
    da70:	4770      	bx	lr

0000da72 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    da72:	b082      	sub	sp, #8
    da74:	9001      	str	r0, [sp, #4]
    da76:	460b      	mov	r3, r1
    da78:	f88d 3003 	strb.w	r3, [sp, #3]
    da7c:	4613      	mov	r3, r2
    da7e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    da82:	f89d 3002 	ldrb.w	r3, [sp, #2]
    da86:	2b00      	cmp	r3, #0
    da88:	d00b      	beq.n	daa2 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    da8a:	9b01      	ldr	r3, [sp, #4]
    da8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da92:	00db      	lsls	r3, r3, #3
    da94:	2102      	movs	r1, #2
    da96:	fa01 f303 	lsl.w	r3, r1, r3
    da9a:	431a      	orrs	r2, r3
    da9c:	9b01      	ldr	r3, [sp, #4]
    da9e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    daa0:	e00b      	b.n	daba <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    daa2:	9b01      	ldr	r3, [sp, #4]
    daa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    daa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    daaa:	00db      	lsls	r3, r3, #3
    daac:	2102      	movs	r1, #2
    daae:	fa01 f303 	lsl.w	r3, r1, r3
    dab2:	43db      	mvns	r3, r3
    dab4:	401a      	ands	r2, r3
    dab6:	9b01      	ldr	r3, [sp, #4]
    dab8:	665a      	str	r2, [r3, #100]	; 0x64
}
    daba:	bf00      	nop
    dabc:	b002      	add	sp, #8
    dabe:	4770      	bx	lr

0000dac0 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    dac0:	b082      	sub	sp, #8
    dac2:	9001      	str	r0, [sp, #4]
    dac4:	460b      	mov	r3, r1
    dac6:	f88d 3003 	strb.w	r3, [sp, #3]
    daca:	4613      	mov	r3, r2
    dacc:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dad0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dad4:	2b00      	cmp	r3, #0
    dad6:	d00b      	beq.n	daf0 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dad8:	9b01      	ldr	r3, [sp, #4]
    dada:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dadc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dae0:	00db      	lsls	r3, r3, #3
    dae2:	2110      	movs	r1, #16
    dae4:	fa01 f303 	lsl.w	r3, r1, r3
    dae8:	431a      	orrs	r2, r3
    daea:	9b01      	ldr	r3, [sp, #4]
    daec:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    daee:	e00b      	b.n	db08 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    daf0:	9b01      	ldr	r3, [sp, #4]
    daf2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    daf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    daf8:	00db      	lsls	r3, r3, #3
    dafa:	2110      	movs	r1, #16
    dafc:	fa01 f303 	lsl.w	r3, r1, r3
    db00:	43db      	mvns	r3, r3
    db02:	401a      	ands	r2, r3
    db04:	9b01      	ldr	r3, [sp, #4]
    db06:	665a      	str	r2, [r3, #100]	; 0x64
}
    db08:	bf00      	nop
    db0a:	b002      	add	sp, #8
    db0c:	4770      	bx	lr

0000db0e <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    db0e:	b082      	sub	sp, #8
    db10:	9001      	str	r0, [sp, #4]
    db12:	460b      	mov	r3, r1
    db14:	f88d 3003 	strb.w	r3, [sp, #3]
    db18:	4613      	mov	r3, r2
    db1a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    db1e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    db22:	2b00      	cmp	r3, #0
    db24:	d00b      	beq.n	db3e <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db2e:	00db      	lsls	r3, r3, #3
    db30:	2120      	movs	r1, #32
    db32:	fa01 f303 	lsl.w	r3, r1, r3
    db36:	431a      	orrs	r2, r3
    db38:	9b01      	ldr	r3, [sp, #4]
    db3a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    db3c:	e00b      	b.n	db56 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    db3e:	9b01      	ldr	r3, [sp, #4]
    db40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db46:	00db      	lsls	r3, r3, #3
    db48:	2120      	movs	r1, #32
    db4a:	fa01 f303 	lsl.w	r3, r1, r3
    db4e:	43db      	mvns	r3, r3
    db50:	401a      	ands	r2, r3
    db52:	9b01      	ldr	r3, [sp, #4]
    db54:	665a      	str	r2, [r3, #100]	; 0x64
}
    db56:	bf00      	nop
    db58:	b002      	add	sp, #8
    db5a:	4770      	bx	lr

0000db5c <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    db5c:	b082      	sub	sp, #8
    db5e:	9001      	str	r0, [sp, #4]
    db60:	460b      	mov	r3, r1
    db62:	f88d 3003 	strb.w	r3, [sp, #3]
    db66:	4613      	mov	r3, r2
    db68:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    db6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    db70:	2b00      	cmp	r3, #0
    db72:	d00b      	beq.n	db8c <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    db74:	9b01      	ldr	r3, [sp, #4]
    db76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db7c:	00db      	lsls	r3, r3, #3
    db7e:	2180      	movs	r1, #128	; 0x80
    db80:	fa01 f303 	lsl.w	r3, r1, r3
    db84:	431a      	orrs	r2, r3
    db86:	9b01      	ldr	r3, [sp, #4]
    db88:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    db8a:	e00b      	b.n	dba4 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    db8c:	9b01      	ldr	r3, [sp, #4]
    db8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db94:	00db      	lsls	r3, r3, #3
    db96:	2180      	movs	r1, #128	; 0x80
    db98:	fa01 f303 	lsl.w	r3, r1, r3
    db9c:	43db      	mvns	r3, r3
    db9e:	401a      	ands	r2, r3
    dba0:	9b01      	ldr	r3, [sp, #4]
    dba2:	665a      	str	r2, [r3, #100]	; 0x64
}
    dba4:	bf00      	nop
    dba6:	b002      	add	sp, #8
    dba8:	4770      	bx	lr

0000dbaa <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    dbaa:	b082      	sub	sp, #8
    dbac:	9001      	str	r0, [sp, #4]
    dbae:	460b      	mov	r3, r1
    dbb0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    dbb4:	9b01      	ldr	r3, [sp, #4]
    dbb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dbb8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    dbbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dbc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dbc4:	431a      	orrs	r2, r3
    dbc6:	9b01      	ldr	r3, [sp, #4]
    dbc8:	669a      	str	r2, [r3, #104]	; 0x68
}
    dbca:	bf00      	nop
    dbcc:	b002      	add	sp, #8
    dbce:	4770      	bx	lr

0000dbd0 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    dbd0:	b082      	sub	sp, #8
    dbd2:	9001      	str	r0, [sp, #4]
    dbd4:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    dbd6:	9b01      	ldr	r3, [sp, #4]
    dbd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dbda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    dbde:	9b00      	ldr	r3, [sp, #0]
    dbe0:	b2db      	uxtb	r3, r3
    dbe2:	019b      	lsls	r3, r3, #6
    dbe4:	b2db      	uxtb	r3, r3
    dbe6:	431a      	orrs	r2, r3
    dbe8:	9b01      	ldr	r3, [sp, #4]
    dbea:	669a      	str	r2, [r3, #104]	; 0x68
}
    dbec:	bf00      	nop
    dbee:	b002      	add	sp, #8
    dbf0:	4770      	bx	lr

0000dbf2 <Ftm_Pwm_Ip_GetDeadtimePrescaler>:
 * @brief Get the FTM dead time divider.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline uint8 Ftm_Pwm_Ip_GetDeadtimePrescaler(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    dbf2:	b082      	sub	sp, #8
    dbf4:	9001      	str	r0, [sp, #4]
    return (uint8)(FtmBase->DEADTIME & FTM_DEADTIME_DTPS_MASK)>>FTM_DEADTIME_DTPS_SHIFT;
    dbf6:	9b01      	ldr	r3, [sp, #4]
    dbf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dbfa:	b2db      	uxtb	r3, r3
    dbfc:	119b      	asrs	r3, r3, #6
    dbfe:	b2db      	uxtb	r3, r3
    dc00:	f003 0303 	and.w	r3, r3, #3
    dc04:	b2db      	uxtb	r3, r3
}
    dc06:	4618      	mov	r0, r3
    dc08:	b002      	add	sp, #8
    dc0a:	4770      	bx	lr

0000dc0c <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    dc0c:	b082      	sub	sp, #8
    dc0e:	9001      	str	r0, [sp, #4]
    dc10:	460b      	mov	r3, r1
    dc12:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    dc16:	9b01      	ldr	r3, [sp, #4]
    dc18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dc1a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    dc1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc22:	041b      	lsls	r3, r3, #16
    dc24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    dc28:	431a      	orrs	r2, r3
    dc2a:	9b01      	ldr	r3, [sp, #4]
    dc2c:	669a      	str	r2, [r3, #104]	; 0x68
}
    dc2e:	bf00      	nop
    dc30:	b002      	add	sp, #8
    dc32:	4770      	bx	lr

0000dc34 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    dc34:	b082      	sub	sp, #8
    dc36:	9001      	str	r0, [sp, #4]
    dc38:	460b      	mov	r3, r1
    dc3a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    dc3e:	9b01      	ldr	r3, [sp, #4]
    dc40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    dc42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    dc46:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dc4a:	2a00      	cmp	r2, #0
    dc4c:	d001      	beq.n	dc52 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    dc4e:	2240      	movs	r2, #64	; 0x40
    dc50:	e000      	b.n	dc54 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    dc52:	2200      	movs	r2, #0
    dc54:	431a      	orrs	r2, r3
    dc56:	9b01      	ldr	r3, [sp, #4]
    dc58:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dc5a:	bf00      	nop
    dc5c:	b002      	add	sp, #8
    dc5e:	4770      	bx	lr

0000dc60 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    dc60:	b082      	sub	sp, #8
    dc62:	9001      	str	r0, [sp, #4]
    dc64:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    dc66:	9b01      	ldr	r3, [sp, #4]
    dc68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    dc6a:	9b00      	ldr	r3, [sp, #0]
    dc6c:	43db      	mvns	r3, r3
    dc6e:	401a      	ands	r2, r3
    dc70:	9b01      	ldr	r3, [sp, #4]
    dc72:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dc74:	bf00      	nop
    dc76:	b002      	add	sp, #8
    dc78:	4770      	bx	lr

0000dc7a <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    dc7a:	b082      	sub	sp, #8
    dc7c:	9001      	str	r0, [sp, #4]
    dc7e:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    dc80:	9b01      	ldr	r3, [sp, #4]
    dc82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    dc84:	9b00      	ldr	r3, [sp, #0]
    dc86:	43db      	mvns	r3, r3
    dc88:	401a      	ands	r2, r3
    dc8a:	9b00      	ldr	r3, [sp, #0]
    dc8c:	431a      	orrs	r2, r3
    dc8e:	9b01      	ldr	r3, [sp, #4]
    dc90:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dc92:	bf00      	nop
    dc94:	b002      	add	sp, #8
    dc96:	4770      	bx	lr

0000dc98 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    dc98:	b084      	sub	sp, #16
    dc9a:	9003      	str	r0, [sp, #12]
    dc9c:	460b      	mov	r3, r1
    dc9e:	9201      	str	r2, [sp, #4]
    dca0:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    dca4:	9b01      	ldr	r3, [sp, #4]
    dca6:	2b00      	cmp	r3, #0
    dca8:	d10b      	bne.n	dcc2 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    dcaa:	9b03      	ldr	r3, [sp, #12]
    dcac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dcae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcb2:	2101      	movs	r1, #1
    dcb4:	fa01 f303 	lsl.w	r3, r1, r3
    dcb8:	43db      	mvns	r3, r3
    dcba:	401a      	ands	r2, r3
    dcbc:	9b03      	ldr	r3, [sp, #12]
    dcbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    dcc0:	e009      	b.n	dcd6 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    dcc2:	9b03      	ldr	r3, [sp, #12]
    dcc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dcc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcca:	2101      	movs	r1, #1
    dccc:	fa01 f303 	lsl.w	r3, r1, r3
    dcd0:	431a      	orrs	r2, r3
    dcd2:	9b03      	ldr	r3, [sp, #12]
    dcd4:	671a      	str	r2, [r3, #112]	; 0x70
}
    dcd6:	bf00      	nop
    dcd8:	b004      	add	sp, #16
    dcda:	4770      	bx	lr

0000dcdc <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    dcdc:	b082      	sub	sp, #8
    dcde:	9001      	str	r0, [sp, #4]
    dce0:	460b      	mov	r3, r1
    dce2:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    dce6:	9b01      	ldr	r3, [sp, #4]
    dce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dcea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dcee:	fa22 f303 	lsr.w	r3, r2, r3
    dcf2:	f003 0301 	and.w	r3, r3, #1
    dcf6:	2b01      	cmp	r3, #1
    dcf8:	bf0c      	ite	eq
    dcfa:	2301      	moveq	r3, #1
    dcfc:	2300      	movne	r3, #0
    dcfe:	b2db      	uxtb	r3, r3
}
    dd00:	4618      	mov	r0, r3
    dd02:	b002      	add	sp, #8
    dd04:	4770      	bx	lr

0000dd06 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    dd06:	b082      	sub	sp, #8
    dd08:	9001      	str	r0, [sp, #4]
    dd0a:	460b      	mov	r3, r1
    dd0c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    dd10:	9b01      	ldr	r3, [sp, #4]
    dd12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    dd16:	f023 021f 	bic.w	r2, r3, #31
    dd1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dd1e:	f003 031f 	and.w	r3, r3, #31
    dd22:	431a      	orrs	r2, r3
    dd24:	9b01      	ldr	r3, [sp, #4]
    dd26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dd2a:	bf00      	nop
    dd2c:	b002      	add	sp, #8
    dd2e:	4770      	bx	lr

0000dd30 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    dd30:	b082      	sub	sp, #8
    dd32:	9001      	str	r0, [sp, #4]
    dd34:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    dd36:	9b01      	ldr	r3, [sp, #4]
    dd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    dd3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    dd40:	9b00      	ldr	r3, [sp, #0]
    dd42:	019b      	lsls	r3, r3, #6
    dd44:	b2db      	uxtb	r3, r3
    dd46:	431a      	orrs	r2, r3
    dd48:	9b01      	ldr	r3, [sp, #4]
    dd4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dd4e:	bf00      	nop
    dd50:	b002      	add	sp, #8
    dd52:	4770      	bx	lr

0000dd54 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    dd54:	b082      	sub	sp, #8
    dd56:	9001      	str	r0, [sp, #4]
    dd58:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    dd5a:	9b01      	ldr	r3, [sp, #4]
    dd5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    dd60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    dd64:	9b00      	ldr	r3, [sp, #0]
    dd66:	02db      	lsls	r3, r3, #11
    dd68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    dd6c:	431a      	orrs	r2, r3
    dd6e:	9b01      	ldr	r3, [sp, #4]
    dd70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dd74:	bf00      	nop
    dd76:	b002      	add	sp, #8
    dd78:	4770      	bx	lr

0000dd7a <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    dd7a:	b082      	sub	sp, #8
    dd7c:	9001      	str	r0, [sp, #4]
    dd7e:	460b      	mov	r3, r1
    dd80:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    dd84:	9b01      	ldr	r3, [sp, #4]
    dd86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dd8a:	f023 0301 	bic.w	r3, r3, #1
    dd8e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dd92:	2a00      	cmp	r2, #0
    dd94:	d001      	beq.n	dd9a <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    dd96:	2201      	movs	r2, #1
    dd98:	e000      	b.n	dd9c <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    dd9a:	2200      	movs	r2, #0
    dd9c:	431a      	orrs	r2, r3
    dd9e:	9b01      	ldr	r3, [sp, #4]
    dda0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dda4:	bf00      	nop
    dda6:	b002      	add	sp, #8
    dda8:	4770      	bx	lr

0000ddaa <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    ddaa:	b082      	sub	sp, #8
    ddac:	9001      	str	r0, [sp, #4]
    ddae:	460b      	mov	r3, r1
    ddb0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    ddb4:	9b01      	ldr	r3, [sp, #4]
    ddb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    ddba:	f023 0304 	bic.w	r3, r3, #4
    ddbe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ddc2:	2a00      	cmp	r2, #0
    ddc4:	d001      	beq.n	ddca <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    ddc6:	2204      	movs	r2, #4
    ddc8:	e000      	b.n	ddcc <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    ddca:	2200      	movs	r2, #0
    ddcc:	431a      	orrs	r2, r3
    ddce:	9b01      	ldr	r3, [sp, #4]
    ddd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ddd4:	bf00      	nop
    ddd6:	b002      	add	sp, #8
    ddd8:	4770      	bx	lr

0000ddda <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    ddda:	b082      	sub	sp, #8
    dddc:	9001      	str	r0, [sp, #4]
    ddde:	460b      	mov	r3, r1
    dde0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    dde4:	9b01      	ldr	r3, [sp, #4]
    dde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    ddea:	f023 0310 	bic.w	r3, r3, #16
    ddee:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ddf2:	2a00      	cmp	r2, #0
    ddf4:	d001      	beq.n	ddfa <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    ddf6:	2210      	movs	r2, #16
    ddf8:	e000      	b.n	ddfc <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    ddfa:	2200      	movs	r2, #0
    ddfc:	431a      	orrs	r2, r3
    ddfe:	9b01      	ldr	r3, [sp, #4]
    de00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de04:	bf00      	nop
    de06:	b002      	add	sp, #8
    de08:	4770      	bx	lr

0000de0a <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    de0a:	b082      	sub	sp, #8
    de0c:	9001      	str	r0, [sp, #4]
    de0e:	460b      	mov	r3, r1
    de10:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    de14:	9b01      	ldr	r3, [sp, #4]
    de16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de1a:	f023 0320 	bic.w	r3, r3, #32
    de1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de22:	2a00      	cmp	r2, #0
    de24:	d001      	beq.n	de2a <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    de26:	2220      	movs	r2, #32
    de28:	e000      	b.n	de2c <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    de2a:	2200      	movs	r2, #0
    de2c:	431a      	orrs	r2, r3
    de2e:	9b01      	ldr	r3, [sp, #4]
    de30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de34:	bf00      	nop
    de36:	b002      	add	sp, #8
    de38:	4770      	bx	lr

0000de3a <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    de3a:	b082      	sub	sp, #8
    de3c:	9001      	str	r0, [sp, #4]
    de3e:	460b      	mov	r3, r1
    de40:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    de44:	9b01      	ldr	r3, [sp, #4]
    de46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    de4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de52:	2a00      	cmp	r2, #0
    de54:	d001      	beq.n	de5a <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    de56:	2280      	movs	r2, #128	; 0x80
    de58:	e000      	b.n	de5c <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    de5a:	2200      	movs	r2, #0
    de5c:	431a      	orrs	r2, r3
    de5e:	9b01      	ldr	r3, [sp, #4]
    de60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de64:	bf00      	nop
    de66:	b002      	add	sp, #8
    de68:	4770      	bx	lr

0000de6a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    de6a:	b082      	sub	sp, #8
    de6c:	9001      	str	r0, [sp, #4]
    de6e:	460b      	mov	r3, r1
    de70:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    de74:	9b01      	ldr	r3, [sp, #4]
    de76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    de7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de82:	2a00      	cmp	r2, #0
    de84:	d002      	beq.n	de8c <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    de86:	f44f 7280 	mov.w	r2, #256	; 0x100
    de8a:	e000      	b.n	de8e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    de8c:	2200      	movs	r2, #0
    de8e:	431a      	orrs	r2, r3
    de90:	9b01      	ldr	r3, [sp, #4]
    de92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de96:	bf00      	nop
    de98:	b002      	add	sp, #8
    de9a:	4770      	bx	lr

0000de9c <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    de9c:	b082      	sub	sp, #8
    de9e:	9001      	str	r0, [sp, #4]
    dea0:	460b      	mov	r3, r1
    dea2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    dea6:	9b01      	ldr	r3, [sp, #4]
    dea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    deac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    deb0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    deb4:	2a00      	cmp	r2, #0
    deb6:	d002      	beq.n	debe <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    deb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    debc:	e000      	b.n	dec0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    debe:	2200      	movs	r2, #0
    dec0:	431a      	orrs	r2, r3
    dec2:	9b01      	ldr	r3, [sp, #4]
    dec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dec8:	bf00      	nop
    deca:	b002      	add	sp, #8
    decc:	4770      	bx	lr

0000dece <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    dece:	b082      	sub	sp, #8
    ded0:	9001      	str	r0, [sp, #4]
    ded2:	460b      	mov	r3, r1
    ded4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    ded8:	9b01      	ldr	r3, [sp, #4]
    deda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    dee2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dee6:	2a00      	cmp	r2, #0
    dee8:	d002      	beq.n	def0 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    deea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    deee:	e000      	b.n	def2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    def0:	2200      	movs	r2, #0
    def2:	431a      	orrs	r2, r3
    def4:	9b01      	ldr	r3, [sp, #4]
    def6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    defa:	bf00      	nop
    defc:	b002      	add	sp, #8
    defe:	4770      	bx	lr

0000df00 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df00:	b082      	sub	sp, #8
    df02:	9001      	str	r0, [sp, #4]
    df04:	460b      	mov	r3, r1
    df06:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    df0a:	9b01      	ldr	r3, [sp, #4]
    df0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    df14:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df18:	2a00      	cmp	r2, #0
    df1a:	d002      	beq.n	df22 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    df1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    df20:	e000      	b.n	df24 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    df22:	2200      	movs	r2, #0
    df24:	431a      	orrs	r2, r3
    df26:	9b01      	ldr	r3, [sp, #4]
    df28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df2c:	bf00      	nop
    df2e:	b002      	add	sp, #8
    df30:	4770      	bx	lr

0000df32 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df32:	b082      	sub	sp, #8
    df34:	9001      	str	r0, [sp, #4]
    df36:	460b      	mov	r3, r1
    df38:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    df3c:	9b01      	ldr	r3, [sp, #4]
    df3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    df46:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df4a:	2a00      	cmp	r2, #0
    df4c:	d002      	beq.n	df54 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    df4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    df52:	e000      	b.n	df56 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    df54:	2200      	movs	r2, #0
    df56:	431a      	orrs	r2, r3
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df5e:	bf00      	nop
    df60:	b002      	add	sp, #8
    df62:	4770      	bx	lr

0000df64 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df64:	b082      	sub	sp, #8
    df66:	9001      	str	r0, [sp, #4]
    df68:	460b      	mov	r3, r1
    df6a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    df6e:	9b01      	ldr	r3, [sp, #4]
    df70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    df78:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df7c:	2a00      	cmp	r2, #0
    df7e:	d002      	beq.n	df86 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    df80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    df84:	e000      	b.n	df88 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    df86:	2200      	movs	r2, #0
    df88:	431a      	orrs	r2, r3
    df8a:	9b01      	ldr	r3, [sp, #4]
    df8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df90:	bf00      	nop
    df92:	b002      	add	sp, #8
    df94:	4770      	bx	lr

0000df96 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    df96:	b082      	sub	sp, #8
    df98:	9001      	str	r0, [sp, #4]
    df9a:	460b      	mov	r3, r1
    df9c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    dfa0:	9b01      	ldr	r3, [sp, #4]
    dfa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfa6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    dfaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfae:	2a00      	cmp	r2, #0
    dfb0:	d002      	beq.n	dfb8 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    dfb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    dfb6:	e000      	b.n	dfba <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    dfb8:	2200      	movs	r2, #0
    dfba:	431a      	orrs	r2, r3
    dfbc:	9b01      	ldr	r3, [sp, #4]
    dfbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dfc2:	bf00      	nop
    dfc4:	b002      	add	sp, #8
    dfc6:	4770      	bx	lr

0000dfc8 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    dfc8:	b082      	sub	sp, #8
    dfca:	9001      	str	r0, [sp, #4]
    dfcc:	460b      	mov	r3, r1
    dfce:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    dfd2:	9b01      	ldr	r3, [sp, #4]
    dfd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    dfdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfe0:	2a00      	cmp	r2, #0
    dfe2:	d002      	beq.n	dfea <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    dfe4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    dfe8:	e000      	b.n	dfec <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    dfea:	2200      	movs	r2, #0
    dfec:	431a      	orrs	r2, r3
    dfee:	9b01      	ldr	r3, [sp, #4]
    dff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dff4:	bf00      	nop
    dff6:	b002      	add	sp, #8
    dff8:	4770      	bx	lr

0000dffa <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    dffa:	b082      	sub	sp, #8
    dffc:	9001      	str	r0, [sp, #4]
    dffe:	460b      	mov	r3, r1
    e000:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e00a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    e00e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e012:	2a00      	cmp	r2, #0
    e014:	d002      	beq.n	e01c <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    e016:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    e01a:	e000      	b.n	e01e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    e01c:	2200      	movs	r2, #0
    e01e:	431a      	orrs	r2, r3
    e020:	9b01      	ldr	r3, [sp, #4]
    e022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e026:	bf00      	nop
    e028:	b002      	add	sp, #8
    e02a:	4770      	bx	lr

0000e02c <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e02c:	b084      	sub	sp, #16
    e02e:	9001      	str	r0, [sp, #4]
    e030:	460b      	mov	r3, r1
    e032:	f88d 3003 	strb.w	r3, [sp, #3]
    e036:	4613      	mov	r3, r2
    e038:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    e03c:	9b01      	ldr	r3, [sp, #4]
    e03e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    e040:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e044:	fa22 f303 	lsr.w	r3, r2, r3
    e048:	b2db      	uxtb	r3, r3
    e04a:	f003 0301 	and.w	r3, r3, #1
    e04e:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    e052:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e056:	2b00      	cmp	r3, #0
    e058:	bf14      	ite	ne
    e05a:	2301      	movne	r3, #1
    e05c:	2300      	moveq	r3, #0
    e05e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    e062:	f89d 2002 	ldrb.w	r2, [sp, #2]
    e066:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e06a:	429a      	cmp	r2, r3
    e06c:	d00d      	beq.n	e08a <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    e06e:	9b01      	ldr	r3, [sp, #4]
    e070:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e074:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e078:	3308      	adds	r3, #8
    e07a:	2101      	movs	r1, #1
    e07c:	fa01 f303 	lsl.w	r3, r1, r3
    e080:	431a      	orrs	r2, r3
    e082:	9b01      	ldr	r3, [sp, #4]
    e084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    e088:	e00d      	b.n	e0a6 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    e08a:	9b01      	ldr	r3, [sp, #4]
    e08c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e090:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e094:	3308      	adds	r3, #8
    e096:	2101      	movs	r1, #1
    e098:	fa01 f303 	lsl.w	r3, r1, r3
    e09c:	43db      	mvns	r3, r3
    e09e:	401a      	ands	r2, r3
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e0a6:	bf00      	nop
    e0a8:	b004      	add	sp, #16
    e0aa:	4770      	bx	lr

0000e0ac <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e0ac:	b082      	sub	sp, #8
    e0ae:	9001      	str	r0, [sp, #4]
    e0b0:	460b      	mov	r3, r1
    e0b2:	f88d 3003 	strb.w	r3, [sp, #3]
    e0b6:	4613      	mov	r3, r2
    e0b8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e0bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d00c      	beq.n	e0de <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e0ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e0ce:	2101      	movs	r1, #1
    e0d0:	fa01 f303 	lsl.w	r3, r1, r3
    e0d4:	431a      	orrs	r2, r3
    e0d6:	9b01      	ldr	r3, [sp, #4]
    e0d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    e0dc:	e00c      	b.n	e0f8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    e0de:	9b01      	ldr	r3, [sp, #4]
    e0e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e0e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e0e8:	2101      	movs	r1, #1
    e0ea:	fa01 f303 	lsl.w	r3, r1, r3
    e0ee:	43db      	mvns	r3, r3
    e0f0:	401a      	ands	r2, r3
    e0f2:	9b01      	ldr	r3, [sp, #4]
    e0f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e0f8:	bf00      	nop
    e0fa:	b002      	add	sp, #8
    e0fc:	4770      	bx	lr

0000e0fe <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    e0fe:	b082      	sub	sp, #8
    e100:	9001      	str	r0, [sp, #4]
    e102:	460b      	mov	r3, r1
    e104:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    e108:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e10c:	9b01      	ldr	r3, [sp, #4]
    e10e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e112:	bf00      	nop
    e114:	b002      	add	sp, #8
    e116:	4770      	bx	lr

0000e118 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    e118:	b082      	sub	sp, #8
    e11a:	9001      	str	r0, [sp, #4]
    e11c:	460b      	mov	r3, r1
    e11e:	f88d 3003 	strb.w	r3, [sp, #3]
    e122:	4613      	mov	r3, r2
    e124:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e128:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e12c:	2b00      	cmp	r3, #0
    e12e:	d00c      	beq.n	e14a <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    e130:	9b01      	ldr	r3, [sp, #4]
    e132:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e136:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e13a:	2101      	movs	r1, #1
    e13c:	fa01 f303 	lsl.w	r3, r1, r3
    e140:	431a      	orrs	r2, r3
    e142:	9b01      	ldr	r3, [sp, #4]
    e144:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    e148:	e00c      	b.n	e164 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    e14a:	9b01      	ldr	r3, [sp, #4]
    e14c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e150:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e154:	2101      	movs	r1, #1
    e156:	fa01 f303 	lsl.w	r3, r1, r3
    e15a:	43db      	mvns	r3, r3
    e15c:	401a      	ands	r2, r3
    e15e:	9b01      	ldr	r3, [sp, #4]
    e160:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e164:	bf00      	nop
    e166:	b002      	add	sp, #8
    e168:	4770      	bx	lr

0000e16a <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    e16a:	b082      	sub	sp, #8
    e16c:	9001      	str	r0, [sp, #4]
    e16e:	460b      	mov	r3, r1
    e170:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    e174:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e178:	2b00      	cmp	r3, #0
    e17a:	d008      	beq.n	e18e <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    e17c:	9b01      	ldr	r3, [sp, #4]
    e17e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e182:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    e186:	9b01      	ldr	r3, [sp, #4]
    e188:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    e18c:	e007      	b.n	e19e <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    e18e:	9b01      	ldr	r3, [sp, #4]
    e190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    e198:	9b01      	ldr	r3, [sp, #4]
    e19a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e19e:	bf00      	nop
    e1a0:	b002      	add	sp, #8
    e1a2:	4770      	bx	lr

0000e1a4 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    e1a4:	b082      	sub	sp, #8
    e1a6:	9001      	str	r0, [sp, #4]
    e1a8:	460b      	mov	r3, r1
    e1aa:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    e1ae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e1b2:	9b01      	ldr	r3, [sp, #4]
    e1b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    e1b8:	bf00      	nop
    e1ba:	b002      	add	sp, #8
    e1bc:	4770      	bx	lr

0000e1be <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e1be:	b082      	sub	sp, #8
    e1c0:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    e1c2:	9b01      	ldr	r3, [sp, #4]
    e1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e1c8:	b29b      	uxth	r3, r3
}
    e1ca:	4618      	mov	r0, r3
    e1cc:	b002      	add	sp, #8
    e1ce:	4770      	bx	lr

0000e1d0 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e1d0:	b082      	sub	sp, #8
    e1d2:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    e1d4:	9b01      	ldr	r3, [sp, #4]
    e1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    e1d8:	b29b      	uxth	r3, r3
}
    e1da:	4618      	mov	r0, r3
    e1dc:	b002      	add	sp, #8
    e1de:	4770      	bx	lr

0000e1e0 <Ftm_Pwm_Ip_GetDualChnCompCmd>:
 *            - TRUE : The channel (n+1) output is the complement of the channel (n) output
 *            - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCompCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                               Channel)
{
    e1e0:	b084      	sub	sp, #16
    e1e2:	9001      	str	r0, [sp, #4]
    e1e4:	460b      	mov	r3, r1
    e1e6:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e1ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e1ee:	085b      	lsrs	r3, r3, #1
    e1f0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Comp = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e1f4:	9b01      	ldr	r3, [sp, #4]
    e1f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e1f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e1fc:	00db      	lsls	r3, r3, #3
    e1fe:	2102      	movs	r1, #2
    e200:	fa01 f303 	lsl.w	r3, r1, r3
    e204:	401a      	ands	r2, r3
    e206:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e20a:	00db      	lsls	r3, r3, #3
    e20c:	fa22 f303 	lsr.w	r3, r2, r3
    e210:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((Comp == FTM_COMBINE_COMP0_MASK)? TRUE : FALSE);
    e214:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e218:	2b02      	cmp	r3, #2
    e21a:	bf0c      	ite	eq
    e21c:	2301      	moveq	r3, #1
    e21e:	2300      	movne	r3, #0
    e220:	b2db      	uxtb	r3, r3
}
    e222:	4618      	mov	r0, r3
    e224:	b004      	add	sp, #16
    e226:	4770      	bx	lr

0000e228 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>:
 *            - TRUE : The deadtime insertion in this pair of channels is disabled.
 *            - FALSE: The deadtime insertion in this pair of channels is enabled.
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                               Channel)
{
    e228:	b084      	sub	sp, #16
    e22a:	9001      	str	r0, [sp, #4]
    e22c:	460b      	mov	r3, r1
    e22e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e232:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e236:	085b      	lsrs	r3, r3, #1
    e238:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 DetEnable = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_DTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e23c:	9b01      	ldr	r3, [sp, #4]
    e23e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e240:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e244:	00db      	lsls	r3, r3, #3
    e246:	2110      	movs	r1, #16
    e248:	fa01 f303 	lsl.w	r3, r1, r3
    e24c:	401a      	ands	r2, r3
    e24e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e252:	00db      	lsls	r3, r3, #3
    e254:	fa22 f303 	lsr.w	r3, r2, r3
    e258:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((DetEnable == FTM_COMBINE_DTEN0_MASK)? TRUE : FALSE);
    e25c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e260:	2b10      	cmp	r3, #16
    e262:	bf0c      	ite	eq
    e264:	2301      	moveq	r3, #1
    e266:	2300      	movne	r3, #0
    e268:	b2db      	uxtb	r3, r3
}
    e26a:	4618      	mov	r0, r3
    e26c:	b004      	add	sp, #16
    e26e:	4770      	bx	lr

0000e270 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    e270:	b500      	push	{lr}
    e272:	b085      	sub	sp, #20
    e274:	9001      	str	r0, [sp, #4]
    e276:	460b      	mov	r3, r1
    e278:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    e27c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e280:	085b      	lsrs	r3, r3, #1
    e282:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e286:	9b01      	ldr	r3, [sp, #4]
    e288:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e28a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e28e:	00db      	lsls	r3, r3, #3
    e290:	2101      	movs	r1, #1
    e292:	fa01 f303 	lsl.w	r3, r1, r3
    e296:	401a      	ands	r2, r3
    e298:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e29c:	00db      	lsls	r3, r3, #3
    e29e:	fa22 f303 	lsr.w	r3, r2, r3
    e2a2:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e2a6:	9b01      	ldr	r3, [sp, #4]
    e2a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e2aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2ae:	00db      	lsls	r3, r3, #3
    e2b0:	2180      	movs	r1, #128	; 0x80
    e2b2:	fa01 f303 	lsl.w	r3, r1, r3
    e2b6:	401a      	ands	r2, r3
    e2b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2bc:	00db      	lsls	r3, r3, #3
    e2be:	fa22 f303 	lsr.w	r3, r2, r3
    e2c2:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    e2c6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e2ca:	2b80      	cmp	r3, #128	; 0x80
    e2cc:	d101      	bne.n	e2d2 <Ftm_Pwm_Ip_GetChannelMode+0x62>
    e2ce:	2301      	movs	r3, #1
    e2d0:	e000      	b.n	e2d4 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    e2d2:	2300      	movs	r3, #0
    e2d4:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    e2d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2dc:	4619      	mov	r1, r3
    e2de:	9801      	ldr	r0, [sp, #4]
    e2e0:	f7ff f936 	bl	d550 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    e2e4:	4603      	mov	r3, r0
    e2e6:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    e2ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2ee:	4619      	mov	r1, r3
    e2f0:	9801      	ldr	r0, [sp, #4]
    e2f2:	f7ff f9c5 	bl	d680 <Ftm_Pwm_Ip_GetChnMode>
    e2f6:	4603      	mov	r3, r0
    e2f8:	009b      	lsls	r3, r3, #2
    e2fa:	b2da      	uxtb	r2, r3
    e2fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e300:	4313      	orrs	r3, r2
    e302:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    e306:	9801      	ldr	r0, [sp, #4]
    e308:	f7ff f8be 	bl	d488 <Ftm_Pwm_Ip_GetCpwms>
    e30c:	4603      	mov	r3, r0
    e30e:	b2db      	uxtb	r3, r3
    e310:	011b      	lsls	r3, r3, #4
    e312:	b2da      	uxtb	r2, r3
    e314:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e318:	4313      	orrs	r3, r2
    e31a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    e31e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    e322:	015b      	lsls	r3, r3, #5
    e324:	b2da      	uxtb	r2, r3
    e326:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e32a:	4313      	orrs	r3, r2
    e32c:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    e330:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e334:	019b      	lsls	r3, r3, #6
    e336:	b2da      	uxtb	r2, r3
    e338:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e33c:	4313      	orrs	r3, r2
    e33e:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    e342:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e346:	2b62      	cmp	r3, #98	; 0x62
    e348:	d055      	beq.n	e3f6 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    e34a:	2b62      	cmp	r3, #98	; 0x62
    e34c:	dc59      	bgt.n	e402 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e34e:	2b22      	cmp	r3, #34	; 0x22
    e350:	dc3c      	bgt.n	e3cc <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    e352:	2b09      	cmp	r3, #9
    e354:	db55      	blt.n	e402 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e356:	3b09      	subs	r3, #9
    e358:	2b19      	cmp	r3, #25
    e35a:	d852      	bhi.n	e402 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e35c:	a201      	add	r2, pc, #4	; (adr r2, e364 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    e35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e362:	bf00      	nop
    e364:	0000e3d9 	.word	0x0000e3d9
    e368:	0000e3d3 	.word	0x0000e3d3
    e36c:	0000e403 	.word	0x0000e403
    e370:	0000e403 	.word	0x0000e403
    e374:	0000e403 	.word	0x0000e403
    e378:	0000e403 	.word	0x0000e403
    e37c:	0000e403 	.word	0x0000e403
    e380:	0000e403 	.word	0x0000e403
    e384:	0000e3e5 	.word	0x0000e3e5
    e388:	0000e3df 	.word	0x0000e3df
    e38c:	0000e403 	.word	0x0000e403
    e390:	0000e403 	.word	0x0000e403
    e394:	0000e403 	.word	0x0000e403
    e398:	0000e403 	.word	0x0000e403
    e39c:	0000e403 	.word	0x0000e403
    e3a0:	0000e403 	.word	0x0000e403
    e3a4:	0000e403 	.word	0x0000e403
    e3a8:	0000e403 	.word	0x0000e403
    e3ac:	0000e403 	.word	0x0000e403
    e3b0:	0000e403 	.word	0x0000e403
    e3b4:	0000e403 	.word	0x0000e403
    e3b8:	0000e403 	.word	0x0000e403
    e3bc:	0000e403 	.word	0x0000e403
    e3c0:	0000e403 	.word	0x0000e403
    e3c4:	0000e3f1 	.word	0x0000e3f1
    e3c8:	0000e3eb 	.word	0x0000e3eb
    e3cc:	2b61      	cmp	r3, #97	; 0x61
    e3ce:	d015      	beq.n	e3fc <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    e3d0:	e017      	b.n	e402 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    e3d2:	230a      	movs	r3, #10
    e3d4:	9303      	str	r3, [sp, #12]
            break;
    e3d6:	e017      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    e3d8:	2309      	movs	r3, #9
    e3da:	9303      	str	r3, [sp, #12]
            break;
    e3dc:	e014      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    e3de:	2312      	movs	r3, #18
    e3e0:	9303      	str	r3, [sp, #12]
            break;
    e3e2:	e011      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    e3e4:	2311      	movs	r3, #17
    e3e6:	9303      	str	r3, [sp, #12]
            break;
    e3e8:	e00e      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    e3ea:	2322      	movs	r3, #34	; 0x22
    e3ec:	9303      	str	r3, [sp, #12]
            break;
    e3ee:	e00b      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    e3f0:	2321      	movs	r3, #33	; 0x21
    e3f2:	9303      	str	r3, [sp, #12]
            break;
    e3f4:	e008      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    e3f6:	2362      	movs	r3, #98	; 0x62
    e3f8:	9303      	str	r3, [sp, #12]
            break;
    e3fa:	e005      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    e3fc:	2361      	movs	r3, #97	; 0x61
    e3fe:	9303      	str	r3, [sp, #12]
            break;
    e400:	e002      	b.n	e408 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    e402:	23ff      	movs	r3, #255	; 0xff
    e404:	9303      	str	r3, [sp, #12]
            break;
    e406:	bf00      	nop
    }

    return ChMode; 
    e408:	9b03      	ldr	r3, [sp, #12]
}
    e40a:	4618      	mov	r0, r3
    e40c:	b005      	add	sp, #20
    e40e:	f85d fb04 	ldr.w	pc, [sp], #4

0000e412 <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    e412:	b082      	sub	sp, #8
    e414:	9001      	str	r0, [sp, #4]
    e416:	460b      	mov	r3, r1
    e418:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    e41c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e420:	2b00      	cmp	r3, #0
    e422:	d006      	beq.n	e432 <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    e424:	9b01      	ldr	r3, [sp, #4]
    e426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e42c:	9b01      	ldr	r3, [sp, #4]
    e42e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    e430:	e00b      	b.n	e44a <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    e432:	9b01      	ldr	r3, [sp, #4]
    e434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e436:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e43a:	2b00      	cmp	r3, #0
    e43c:	d005      	beq.n	e44a <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    e43e:	9b01      	ldr	r3, [sp, #4]
    e440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e442:	f043 0204 	orr.w	r2, r3, #4
    e446:	9b01      	ldr	r3, [sp, #4]
    e448:	655a      	str	r2, [r3, #84]	; 0x54
}
    e44a:	bf00      	nop
    e44c:	b002      	add	sp, #8
    e44e:	4770      	bx	lr

0000e450 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e450:	b500      	push	{lr}
    e452:	b085      	sub	sp, #20
    e454:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    e456:	2100      	movs	r1, #0
    e458:	9801      	ldr	r0, [sp, #4]
    e45a:	f7ff ffda 	bl	e412 <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    e45e:	9b01      	ldr	r3, [sp, #4]
    e460:	681a      	ldr	r2, [r3, #0]
    e462:	9b01      	ldr	r3, [sp, #4]
    e464:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    e466:	9b01      	ldr	r3, [sp, #4]
    e468:	2200      	movs	r2, #0
    e46a:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    e46c:	9b01      	ldr	r3, [sp, #4]
    e46e:	2200      	movs	r2, #0
    e470:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    e472:	9b01      	ldr	r3, [sp, #4]
    e474:	2200      	movs	r2, #0
    e476:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    e47c:	9b01      	ldr	r3, [sp, #4]
    e47e:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    e480:	9b01      	ldr	r3, [sp, #4]
    e482:	2204      	movs	r2, #4
    e484:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    e486:	9b01      	ldr	r3, [sp, #4]
    e488:	2200      	movs	r2, #0
    e48a:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    e48c:	9b01      	ldr	r3, [sp, #4]
    e48e:	2200      	movs	r2, #0
    e490:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    e492:	9b01      	ldr	r3, [sp, #4]
    e494:	2200      	movs	r2, #0
    e496:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    e498:	9b01      	ldr	r3, [sp, #4]
    e49a:	2200      	movs	r2, #0
    e49c:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    e49e:	9b01      	ldr	r3, [sp, #4]
    e4a0:	2200      	movs	r2, #0
    e4a2:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    e4a4:	9b01      	ldr	r3, [sp, #4]
    e4a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e4a8:	9b01      	ldr	r3, [sp, #4]
    e4aa:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    e4ac:	9b01      	ldr	r3, [sp, #4]
    e4ae:	2200      	movs	r2, #0
    e4b0:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    e4b2:	9b01      	ldr	r3, [sp, #4]
    e4b4:	2200      	movs	r2, #0
    e4b6:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    e4b8:	9b01      	ldr	r3, [sp, #4]
    e4ba:	2200      	movs	r2, #0
    e4bc:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    e4be:	9b01      	ldr	r3, [sp, #4]
    e4c0:	2200      	movs	r2, #0
    e4c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    e4c6:	9b01      	ldr	r3, [sp, #4]
    e4c8:	2200      	movs	r2, #0
    e4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    e4ce:	9b01      	ldr	r3, [sp, #4]
    e4d0:	2200      	movs	r2, #0
    e4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    e4d6:	9b01      	ldr	r3, [sp, #4]
    e4d8:	2200      	movs	r2, #0
    e4da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    e4de:	9b01      	ldr	r3, [sp, #4]
    e4e0:	2200      	movs	r2, #0
    e4e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    e4e6:	9b01      	ldr	r3, [sp, #4]
    e4e8:	2200      	movs	r2, #0
    e4ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    e4ee:	9b01      	ldr	r3, [sp, #4]
    e4f0:	2200      	movs	r2, #0
    e4f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e4f6:	2300      	movs	r3, #0
    e4f8:	f88d 300f 	strb.w	r3, [sp, #15]
    e4fc:	e014      	b.n	e528 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    e4fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e502:	9a01      	ldr	r2, [sp, #4]
    e504:	3301      	adds	r3, #1
    e506:	00db      	lsls	r3, r3, #3
    e508:	4413      	add	r3, r2
    e50a:	2200      	movs	r2, #0
    e50c:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    e50e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e512:	9a01      	ldr	r2, [sp, #4]
    e514:	3301      	adds	r3, #1
    e516:	00db      	lsls	r3, r3, #3
    e518:	4413      	add	r3, r2
    e51a:	2200      	movs	r2, #0
    e51c:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e51e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e522:	3301      	adds	r3, #1
    e524:	f88d 300f 	strb.w	r3, [sp, #15]
    e528:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e52c:	2b07      	cmp	r3, #7
    e52e:	d9e6      	bls.n	e4fe <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    e530:	bf00      	nop
    e532:	bf00      	nop
    e534:	b005      	add	sp, #20
    e536:	f85d fb04 	ldr.w	pc, [sp], #4

0000e53a <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    e53a:	b084      	sub	sp, #16
    e53c:	9001      	str	r0, [sp, #4]
    e53e:	460b      	mov	r3, r1
    e540:	f88d 3003 	strb.w	r3, [sp, #3]
    e544:	4613      	mov	r3, r2
    e546:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    e54a:	2300      	movs	r3, #0
    e54c:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    e54e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e552:	2b01      	cmp	r3, #1
    e554:	d806      	bhi.n	e564 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    e556:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e55a:	2210      	movs	r2, #16
    e55c:	fa02 f303 	lsl.w	r3, r2, r3
    e560:	9303      	str	r3, [sp, #12]
    e562:	e013      	b.n	e58c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    e564:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e568:	2b05      	cmp	r3, #5
    e56a:	d807      	bhi.n	e57c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    e56c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e570:	3b02      	subs	r3, #2
    e572:	2201      	movs	r2, #1
    e574:	fa02 f303 	lsl.w	r3, r2, r3
    e578:	9303      	str	r3, [sp, #12]
    e57a:	e007      	b.n	e58c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    e57c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e580:	3b06      	subs	r3, #6
    e582:	f44f 7280 	mov.w	r2, #256	; 0x100
    e586:	fa02 f303 	lsl.w	r3, r2, r3
    e58a:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    e58c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e590:	2b00      	cmp	r3, #0
    e592:	d006      	beq.n	e5a2 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    e594:	9b01      	ldr	r3, [sp, #4]
    e596:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e598:	9b03      	ldr	r3, [sp, #12]
    e59a:	431a      	orrs	r2, r3
    e59c:	9b01      	ldr	r3, [sp, #4]
    e59e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    e5a0:	e006      	b.n	e5b0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    e5a2:	9b01      	ldr	r3, [sp, #4]
    e5a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e5a6:	9b03      	ldr	r3, [sp, #12]
    e5a8:	43db      	mvns	r3, r3
    e5aa:	401a      	ands	r2, r3
    e5ac:	9b01      	ldr	r3, [sp, #4]
    e5ae:	66da      	str	r2, [r3, #108]	; 0x6c
}
    e5b0:	bf00      	nop
    e5b2:	b004      	add	sp, #16
    e5b4:	4770      	bx	lr

0000e5b6 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    e5b6:	b082      	sub	sp, #8
    e5b8:	9001      	str	r0, [sp, #4]
    e5ba:	9100      	str	r1, [sp, #0]
    e5bc:	9b00      	ldr	r3, [sp, #0]
    e5be:	2b03      	cmp	r3, #3
    e5c0:	d82a      	bhi.n	e618 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    e5c2:	a201      	add	r2, pc, #4	; (adr r2, e5c8 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    e5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e5c8:	0000e5d9 	.word	0x0000e5d9
    e5cc:	0000e5e7 	.word	0x0000e5e7
    e5d0:	0000e5f9 	.word	0x0000e5f9
    e5d4:	0000e60b 	.word	0x0000e60b
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    e5d8:	9b01      	ldr	r3, [sp, #4]
    e5da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e5dc:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    e5e0:	9b01      	ldr	r3, [sp, #4]
    e5e2:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e5e4:	e019      	b.n	e61a <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    e5e6:	9b01      	ldr	r3, [sp, #4]
    e5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e5ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e5ee:	f043 0220 	orr.w	r2, r3, #32
    e5f2:	9b01      	ldr	r3, [sp, #4]
    e5f4:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e5f6:	e010      	b.n	e61a <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    e5f8:	9b01      	ldr	r3, [sp, #4]
    e5fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e5fc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e600:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e604:	9b01      	ldr	r3, [sp, #4]
    e606:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e608:	e007      	b.n	e61a <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    e60a:	9b01      	ldr	r3, [sp, #4]
    e60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e60e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    e612:	9b01      	ldr	r3, [sp, #4]
    e614:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e616:	e000      	b.n	e61a <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    e618:	bf00      	nop
    }
}
    e61a:	bf00      	nop
    e61c:	b002      	add	sp, #8
    e61e:	4770      	bx	lr

0000e620 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    e620:	b082      	sub	sp, #8
    e622:	9001      	str	r0, [sp, #4]
    e624:	460b      	mov	r3, r1
    e626:	f88d 3003 	strb.w	r3, [sp, #3]
    e62a:	4613      	mov	r3, r2
    e62c:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e630:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e634:	2b00      	cmp	r3, #0
    e636:	d00b      	beq.n	e650 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e63c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e640:	00db      	lsls	r3, r3, #3
    e642:	2140      	movs	r1, #64	; 0x40
    e644:	fa01 f303 	lsl.w	r3, r1, r3
    e648:	431a      	orrs	r2, r3
    e64a:	9b01      	ldr	r3, [sp, #4]
    e64c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    e64e:	e00b      	b.n	e668 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e650:	9b01      	ldr	r3, [sp, #4]
    e652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e654:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e658:	00db      	lsls	r3, r3, #3
    e65a:	2140      	movs	r1, #64	; 0x40
    e65c:	fa01 f303 	lsl.w	r3, r1, r3
    e660:	43db      	mvns	r3, r3
    e662:	401a      	ands	r2, r3
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	665a      	str	r2, [r3, #100]	; 0x64
}
    e668:	bf00      	nop
    e66a:	b002      	add	sp, #8
    e66c:	4770      	bx	lr

0000e66e <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    e66e:	b082      	sub	sp, #8
    e670:	9001      	str	r0, [sp, #4]
    e672:	460b      	mov	r3, r1
    e674:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    e678:	9b01      	ldr	r3, [sp, #4]
    e67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e67c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e680:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e684:	2a00      	cmp	r2, #0
    e686:	d001      	beq.n	e68c <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    e688:	2280      	movs	r2, #128	; 0x80
    e68a:	e000      	b.n	e68e <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    e68c:	2200      	movs	r2, #0
    e68e:	431a      	orrs	r2, r3
    e690:	9b01      	ldr	r3, [sp, #4]
    e692:	655a      	str	r2, [r3, #84]	; 0x54
}
    e694:	bf00      	nop
    e696:	b002      	add	sp, #8
    e698:	4770      	bx	lr

0000e69a <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e69a:	b082      	sub	sp, #8
    e69c:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    e69e:	9b01      	ldr	r3, [sp, #4]
    e6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e6a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    e6a6:	9b01      	ldr	r3, [sp, #4]
    e6a8:	675a      	str	r2, [r3, #116]	; 0x74
}
    e6aa:	bf00      	nop
    e6ac:	b002      	add	sp, #8
    e6ae:	4770      	bx	lr

0000e6b0 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    e6b0:	b082      	sub	sp, #8
    e6b2:	9001      	str	r0, [sp, #4]
    e6b4:	460b      	mov	r3, r1
    e6b6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    e6ba:	9b01      	ldr	r3, [sp, #4]
    e6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e6be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    e6c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e6c6:	021b      	lsls	r3, r3, #8
    e6c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    e6cc:	431a      	orrs	r2, r3
    e6ce:	9b01      	ldr	r3, [sp, #4]
    e6d0:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e6d2:	bf00      	nop
    e6d4:	b002      	add	sp, #8
    e6d6:	4770      	bx	lr

0000e6d8 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    e6d8:	b082      	sub	sp, #8
    e6da:	9001      	str	r0, [sp, #4]
    e6dc:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    e6de:	9b01      	ldr	r3, [sp, #4]
    e6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e6e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e6e6:	9a00      	ldr	r2, [sp, #0]
    e6e8:	2a00      	cmp	r2, #0
    e6ea:	d002      	beq.n	e6f2 <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    e6ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e6f0:	e000      	b.n	e6f4 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    e6f2:	2200      	movs	r2, #0
    e6f4:	431a      	orrs	r2, r3
    e6f6:	9b01      	ldr	r3, [sp, #4]
    e6f8:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e6fa:	bf00      	nop
    e6fc:	b002      	add	sp, #8
    e6fe:	4770      	bx	lr

0000e700 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    e700:	b086      	sub	sp, #24
    e702:	9003      	str	r0, [sp, #12]
    e704:	460b      	mov	r3, r1
    e706:	9201      	str	r2, [sp, #4]
    e708:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    e70c:	9b01      	ldr	r3, [sp, #4]
    e70e:	2b00      	cmp	r3, #0
    e710:	bf14      	ite	ne
    e712:	2301      	movne	r3, #1
    e714:	2300      	moveq	r3, #0
    e716:	b2db      	uxtb	r3, r3
    e718:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    e71a:	9b03      	ldr	r3, [sp, #12]
    e71c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e720:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e724:	2101      	movs	r1, #1
    e726:	fa01 f303 	lsl.w	r3, r1, r3
    e72a:	43db      	mvns	r3, r3
    e72c:	401a      	ands	r2, r3
    e72e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e732:	9905      	ldr	r1, [sp, #20]
    e734:	fa01 f303 	lsl.w	r3, r1, r3
    e738:	431a      	orrs	r2, r3
    e73a:	9b03      	ldr	r3, [sp, #12]
    e73c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e740:	bf00      	nop
    e742:	b006      	add	sp, #24
    e744:	4770      	bx	lr

0000e746 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    e746:	b084      	sub	sp, #16
    e748:	9001      	str	r0, [sp, #4]
    e74a:	460b      	mov	r3, r1
    e74c:	f88d 3003 	strb.w	r3, [sp, #3]
    e750:	4613      	mov	r3, r2
    e752:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    e756:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e75a:	2b00      	cmp	r3, #0
    e75c:	d001      	beq.n	e762 <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    e75e:	2301      	movs	r3, #1
    e760:	e000      	b.n	e764 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    e762:	2300      	movs	r3, #0
    e764:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    e766:	9b01      	ldr	r3, [sp, #4]
    e768:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e76a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e76e:	2101      	movs	r1, #1
    e770:	fa01 f303 	lsl.w	r3, r1, r3
    e774:	43db      	mvns	r3, r3
    e776:	401a      	ands	r2, r3
    e778:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e77c:	9903      	ldr	r1, [sp, #12]
    e77e:	fa01 f303 	lsl.w	r3, r1, r3
    e782:	431a      	orrs	r2, r3
    e784:	9b01      	ldr	r3, [sp, #4]
    e786:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e788:	bf00      	nop
    e78a:	b004      	add	sp, #16
    e78c:	4770      	bx	lr

0000e78e <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    e78e:	b084      	sub	sp, #16
    e790:	9001      	str	r0, [sp, #4]
    e792:	460b      	mov	r3, r1
    e794:	f88d 3003 	strb.w	r3, [sp, #3]
    e798:	4613      	mov	r3, r2
    e79a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    e79e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	d001      	beq.n	e7aa <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    e7a6:	2301      	movs	r3, #1
    e7a8:	e000      	b.n	e7ac <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    e7aa:	2300      	movs	r3, #0
    e7ac:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    e7ae:	9b01      	ldr	r3, [sp, #4]
    e7b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e7b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e7b6:	2110      	movs	r1, #16
    e7b8:	fa01 f303 	lsl.w	r3, r1, r3
    e7bc:	43db      	mvns	r3, r3
    e7be:	401a      	ands	r2, r3
    e7c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e7c4:	9903      	ldr	r1, [sp, #12]
    e7c6:	fa01 f303 	lsl.w	r3, r1, r3
    e7ca:	011b      	lsls	r3, r3, #4
    e7cc:	431a      	orrs	r2, r3
    e7ce:	9b01      	ldr	r3, [sp, #4]
    e7d0:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e7d2:	bf00      	nop
    e7d4:	b004      	add	sp, #16
    e7d6:	4770      	bx	lr

0000e7d8 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    e7d8:	b082      	sub	sp, #8
    e7da:	9001      	str	r0, [sp, #4]
    e7dc:	460b      	mov	r3, r1
    e7de:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    e7e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e7e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e7ea:	409a      	lsls	r2, r3
    e7ec:	9b01      	ldr	r3, [sp, #4]
    e7ee:	6a1b      	ldr	r3, [r3, #32]
    e7f0:	431a      	orrs	r2, r3
    e7f2:	9b01      	ldr	r3, [sp, #4]
    e7f4:	621a      	str	r2, [r3, #32]
}
    e7f6:	bf00      	nop
    e7f8:	b002      	add	sp, #8
    e7fa:	4770      	bx	lr

0000e7fc <Ftm_Pwm_Ip_ValidateParamDeadTime>:
 *
 *END**************************************************************************/  
static boolean Ftm_Pwm_Ip_ValidateParamDeadTime(uint8 Instance,
                                                uint8 Channel,
                                                uint16 DeadTimeVal)
{
    e7fc:	b500      	push	{lr}
    e7fe:	b089      	sub	sp, #36	; 0x24
    e800:	4603      	mov	r3, r0
    e802:	f88d 3007 	strb.w	r3, [sp, #7]
    e806:	460b      	mov	r3, r1
    e808:	f88d 3006 	strb.w	r3, [sp, #6]
    e80c:	4613      	mov	r3, r2
    e80e:	f8ad 3004 	strh.w	r3, [sp, #4]
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e816:	4a39      	ldr	r2, [pc, #228]	; (e8fc <Ftm_Pwm_Ip_ValidateParamDeadTime+0x100>)
    e818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81c:	9306      	str	r3, [sp, #24]
    boolean RetVal = FALSE;
    e81e:	2300      	movs	r3, #0
    e820:	f88d 301f 	strb.w	r3, [sp, #31]

    uint8 PairId = Channel >> 1U;
    e824:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e828:	085b      	lsrs	r3, r3, #1
    e82a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint16 EvenCounterVal = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, (PairId * 2U));
    e82e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e832:	005b      	lsls	r3, r3, #1
    e834:	b2db      	uxtb	r3, r3
    e836:	4619      	mov	r1, r3
    e838:	9806      	ldr	r0, [sp, #24]
    e83a:	f7fe ffb0 	bl	d79e <Ftm_Pwm_Ip_GetChnCountVal>
    e83e:	4603      	mov	r3, r0
    e840:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint16 OddCounterVal  = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, ((PairId * 2U) + 1U));
    e844:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e848:	005b      	lsls	r3, r3, #1
    e84a:	b2db      	uxtb	r3, r3
    e84c:	3301      	adds	r3, #1
    e84e:	b2db      	uxtb	r3, r3
    e850:	4619      	mov	r1, r3
    e852:	9806      	ldr	r0, [sp, #24]
    e854:	f7fe ffa3 	bl	d79e <Ftm_Pwm_Ip_GetChnCountVal>
    e858:	4603      	mov	r3, r0
    e85a:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint8 Prescaler = Ftm_Pwm_Ip_GetClockPs(FtmBase);
    e85e:	9806      	ldr	r0, [sp, #24]
    e860:	f7fe fde0 	bl	d424 <Ftm_Pwm_Ip_GetClockPs>
    e864:	4603      	mov	r3, r0
    e866:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8 DeadTimePs = Ftm_Pwm_Ip_GetDeadtimePrescaler(FtmBase);
    e86a:	9806      	ldr	r0, [sp, #24]
    e86c:	f7ff f9c1 	bl	dbf2 <Ftm_Pwm_Ip_GetDeadtimePrescaler>
    e870:	4603      	mov	r3, r0
    e872:	f88d 3010 	strb.w	r3, [sp, #16]

    uint16 CompareEven = (OddCounterVal - EvenCounterVal);
    e876:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e87a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e87e:	1ad3      	subs	r3, r2, r3
    e880:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16 CompareOdd = Ftm_Pwm_Ip_aPeriod[Instance] - CompareEven;
    e884:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e888:	4a1d      	ldr	r2, [pc, #116]	; (e900 <Ftm_Pwm_Ip_ValidateParamDeadTime+0x104>)
    e88a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    e88e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e892:	1ad3      	subs	r3, r2, r3
    e894:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Validate the range deadtime value is less than 1024U and greater than 0U */
    if ((DeadTimeVal < 1024U) && (DeadTimeVal > 0U))
    e898:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e89c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e8a0:	d206      	bcs.n	e8b0 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    e8a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	d002      	beq.n	e8b0 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    {
        RetVal = TRUE;
    e8aa:	2301      	movs	r3, #1
    e8ac:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    /* Deadtime insertion corner cases */
    /* The deadtime delay is less than the channel (n) duty cycle */
    /* The deadtime delay is less than the channel (n+1) duty cycle */
    if ((0U == Prescaler) && ((0U == DeadTimePs) || (1U == DeadTimePs)))
    e8b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	d11a      	bne.n	e8ee <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    e8b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e8bc:	2b00      	cmp	r3, #0
    e8be:	d003      	beq.n	e8c8 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xcc>
    e8c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e8c4:	2b01      	cmp	r3, #1
    e8c6:	d112      	bne.n	e8ee <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    { 
        if ((DeadTimeVal < CompareEven) && (DeadTimeVal < CompareOdd))
    e8c8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e8cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e8d0:	429a      	cmp	r2, r3
    e8d2:	d209      	bcs.n	e8e8 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
    e8d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e8d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e8dc:	429a      	cmp	r2, r3
    e8de:	d203      	bcs.n	e8e8 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
        {
            RetVal = TRUE;
    e8e0:	2301      	movs	r3, #1
    e8e2:	f88d 301f 	strb.w	r3, [sp, #31]
    e8e6:	e002      	b.n	e8ee <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
        }
        else
        {
            RetVal = FALSE;
    e8e8:	2300      	movs	r3, #0
    e8ea:	f88d 301f 	strb.w	r3, [sp, #31]
        }
    }

    return RetVal;
    e8ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    e8f2:	4618      	mov	r0, r3
    e8f4:	b009      	add	sp, #36	; 0x24
    e8f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e8fa:	bf00      	nop
    e8fc:	00019fc0 	.word	0x00019fc0
    e900:	1fff8e2c 	.word	0x1fff8e2c

0000e904 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    e904:	b084      	sub	sp, #16
    e906:	4603      	mov	r3, r0
    e908:	f88d 3007 	strb.w	r3, [sp, #7]
    e90c:	460b      	mov	r3, r1
    e90e:	f8ad 3004 	strh.w	r3, [sp, #4]
    e912:	4613      	mov	r3, r2
    e914:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    e918:	2300      	movs	r3, #0
    e91a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    e91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e922:	4a17      	ldr	r2, [pc, #92]	; (e980 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e928:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e92c:	429a      	cmp	r2, r3
    e92e:	d107      	bne.n	e940 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    e930:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e934:	4a12      	ldr	r2, [pc, #72]	; (e980 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e93a:	f8ad 300e 	strh.w	r3, [sp, #14]
    e93e:	e019      	b.n	e974 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    e940:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e944:	2b00      	cmp	r3, #0
    e946:	d104      	bne.n	e952 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    e948:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e94c:	f8ad 300e 	strh.w	r3, [sp, #14]
    e950:	e010      	b.n	e974 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    e952:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e956:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e95a:	4413      	add	r3, r2
    e95c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e960:	4907      	ldr	r1, [pc, #28]	; (e980 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e962:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e966:	fb93 f1f2 	sdiv	r1, r3, r2
    e96a:	fb01 f202 	mul.w	r2, r1, r2
    e96e:	1a9b      	subs	r3, r3, r2
    e970:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    e974:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    e978:	4618      	mov	r0, r3
    e97a:	b004      	add	sp, #16
    e97c:	4770      	bx	lr
    e97e:	bf00      	nop
    e980:	1fff8e2c 	.word	0x1fff8e2c

0000e984 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    e984:	b500      	push	{lr}
    e986:	b085      	sub	sp, #20
    e988:	4603      	mov	r3, r0
    e98a:	9100      	str	r1, [sp, #0]
    e98c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e990:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e994:	4a53      	ldr	r2, [pc, #332]	; (eae4 <Ftm_Pwm_Ip_InitPair+0x160>)
    e996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e99a:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    e99c:	2300      	movs	r3, #0
    e99e:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    e9a2:	2300      	movs	r3, #0
    e9a4:	f88d 300a 	strb.w	r3, [sp, #10]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    e9a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e9ac:	2b03      	cmp	r3, #3
    e9ae:	bf94      	ite	ls
    e9b0:	2301      	movls	r3, #1
    e9b2:	2300      	movhi	r3, #0
    e9b4:	b2db      	uxtb	r3, r3
    e9b6:	4618      	mov	r0, r3
    e9b8:	f7f1 ff98 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserPairCfg);
    e9bc:	9b00      	ldr	r3, [sp, #0]
    e9be:	2b00      	cmp	r3, #0
    e9c0:	bf14      	ite	ne
    e9c2:	2301      	movne	r3, #1
    e9c4:	2300      	moveq	r3, #0
    e9c6:	b2db      	uxtb	r3, r3
    e9c8:	4618      	mov	r0, r3
    e9ca:	f7f1 ff8f 	bl	8ec <DevAssert>
    DevAssert(FTM_PWM_IP_PAIR_COUNT > UserPairCfg->PairId);
    e9ce:	9b00      	ldr	r3, [sp, #0]
    e9d0:	781b      	ldrb	r3, [r3, #0]
    e9d2:	2b03      	cmp	r3, #3
    e9d4:	bf94      	ite	ls
    e9d6:	2301      	movls	r3, #1
    e9d8:	2300      	movhi	r3, #0
    e9da:	b2db      	uxtb	r3, r3
    e9dc:	4618      	mov	r0, r3
    e9de:	f7f1 ff85 	bl	8ec <DevAssert>
    /* Check that deadtime is used in complementary mode */
    if (TRUE == UserPairCfg->DeadtimeEn)
    e9e2:	9b00      	ldr	r3, [sp, #0]
    e9e4:	785b      	ldrb	r3, [r3, #1]
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	d004      	beq.n	e9f4 <Ftm_Pwm_Ip_InitPair+0x70>
    {
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    e9ea:	9b00      	ldr	r3, [sp, #0]
    e9ec:	789b      	ldrb	r3, [r3, #2]
    e9ee:	4618      	mov	r0, r3
    e9f0:	f7f1 ff7c 	bl	8ec <DevAssert>
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    e9f4:	9b00      	ldr	r3, [sp, #0]
    e9f6:	781b      	ldrb	r3, [r3, #0]
    e9f8:	005b      	lsls	r3, r3, #1
    e9fa:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    e9fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ea02:	3301      	adds	r3, #1
    ea04:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    ea08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea0c:	9a00      	ldr	r2, [sp, #0]
    ea0e:	7812      	ldrb	r2, [r2, #0]
    ea10:	4610      	mov	r0, r2
    ea12:	9a00      	ldr	r2, [sp, #0]
    ea14:	8951      	ldrh	r1, [r2, #10]
    ea16:	4a34      	ldr	r2, [pc, #208]	; (eae8 <Ftm_Pwm_Ip_InitPair+0x164>)
    ea18:	009b      	lsls	r3, r3, #2
    ea1a:	4403      	add	r3, r0
    ea1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    ea20:	9b00      	ldr	r3, [sp, #0]
    ea22:	7819      	ldrb	r1, [r3, #0]
    ea24:	9b00      	ldr	r3, [sp, #0]
    ea26:	789b      	ldrb	r3, [r3, #2]
    ea28:	461a      	mov	r2, r3
    ea2a:	9803      	ldr	r0, [sp, #12]
    ea2c:	f7ff f821 	bl	da72 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    ea30:	9b00      	ldr	r3, [sp, #0]
    ea32:	789b      	ldrb	r3, [r3, #2]
    ea34:	2b00      	cmp	r3, #0
    ea36:	d02f      	beq.n	ea98 <Ftm_Pwm_Ip_InitPair+0x114>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    ea38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ea3c:	4619      	mov	r1, r3
    ea3e:	9803      	ldr	r0, [sp, #12]
    ea40:	f7ff f94c 	bl	dcdc <Ftm_Pwm_Ip_GetChnOutputPolarity>
    ea44:	4603      	mov	r3, r0
    ea46:	2b01      	cmp	r3, #1
    ea48:	d113      	bne.n	ea72 <Ftm_Pwm_Ip_InitPair+0xee>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ea4a:	9b00      	ldr	r3, [sp, #0]
    ea4c:	685b      	ldr	r3, [r3, #4]
    ea4e:	2b01      	cmp	r3, #1
    ea50:	d107      	bne.n	ea62 <Ftm_Pwm_Ip_InitPair+0xde>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ea52:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea56:	2200      	movs	r2, #0
    ea58:	4619      	mov	r1, r3
    ea5a:	9803      	ldr	r0, [sp, #12]
    ea5c:	f7ff f91c 	bl	dc98 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ea60:	e01a      	b.n	ea98 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ea62:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea66:	2201      	movs	r2, #1
    ea68:	4619      	mov	r1, r3
    ea6a:	9803      	ldr	r0, [sp, #12]
    ea6c:	f7ff f914 	bl	dc98 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ea70:	e012      	b.n	ea98 <Ftm_Pwm_Ip_InitPair+0x114>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ea72:	9b00      	ldr	r3, [sp, #0]
    ea74:	685b      	ldr	r3, [r3, #4]
    ea76:	2b01      	cmp	r3, #1
    ea78:	d107      	bne.n	ea8a <Ftm_Pwm_Ip_InitPair+0x106>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ea7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea7e:	2201      	movs	r2, #1
    ea80:	4619      	mov	r1, r3
    ea82:	9803      	ldr	r0, [sp, #12]
    ea84:	f7ff f908 	bl	dc98 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ea88:	e006      	b.n	ea98 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ea8a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea8e:	2200      	movs	r2, #0
    ea90:	4619      	mov	r1, r3
    ea92:	9803      	ldr	r0, [sp, #12]
    ea94:	f7ff f900 	bl	dc98 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    ea98:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea9c:	4619      	mov	r1, r3
    ea9e:	9803      	ldr	r0, [sp, #12]
    eaa0:	f7fe fd22 	bl	d4e8 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    eaa4:	9b00      	ldr	r3, [sp, #0]
    eaa6:	7819      	ldrb	r1, [r3, #0]
    eaa8:	9b00      	ldr	r3, [sp, #0]
    eaaa:	7a5b      	ldrb	r3, [r3, #9]
    eaac:	461a      	mov	r2, r3
    eaae:	9803      	ldr	r0, [sp, #12]
    eab0:	f7ff f82d 	bl	db0e <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    eab4:	9b00      	ldr	r3, [sp, #0]
    eab6:	7819      	ldrb	r1, [r3, #0]
    eab8:	9b00      	ldr	r3, [sp, #0]
    eaba:	785b      	ldrb	r3, [r3, #1]
    eabc:	461a      	mov	r2, r3
    eabe:	9803      	ldr	r0, [sp, #12]
    eac0:	f7fe fffe 	bl	dac0 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    eac4:	9b00      	ldr	r3, [sp, #0]
    eac6:	7a1a      	ldrb	r2, [r3, #8]
    eac8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eacc:	4619      	mov	r1, r3
    eace:	9803      	ldr	r0, [sp, #12]
    ead0:	f7ff fd33 	bl	e53a <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ead4:	2101      	movs	r1, #1
    ead6:	9803      	ldr	r0, [sp, #12]
    ead8:	f7fe ff15 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    eadc:	bf00      	nop
    eade:	b005      	add	sp, #20
    eae0:	f85d fb04 	ldr.w	pc, [sp], #4
    eae4:	00019fc0 	.word	0x00019fc0
    eae8:	1fff8e74 	.word	0x1fff8e74

0000eaec <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    eaec:	b500      	push	{lr}
    eaee:	b085      	sub	sp, #20
    eaf0:	4603      	mov	r3, r0
    eaf2:	460a      	mov	r2, r1
    eaf4:	f88d 3007 	strb.w	r3, [sp, #7]
    eaf8:	4613      	mov	r3, r2
    eafa:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eafe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb02:	4a0a      	ldr	r2, [pc, #40]	; (eb2c <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    eb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb08:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    eb0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    eb0e:	2200      	movs	r2, #0
    eb10:	4619      	mov	r1, r3
    eb12:	9803      	ldr	r0, [sp, #12]
    eb14:	f7fe fdde 	bl	d6d4 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    eb18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    eb1c:	4619      	mov	r1, r3
    eb1e:	9803      	ldr	r0, [sp, #12]
    eb20:	f7fe fdfb 	bl	d71a <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    eb24:	bf00      	nop
    eb26:	b005      	add	sp, #20
    eb28:	f85d fb04 	ldr.w	pc, [sp], #4
    eb2c:	00019fc0 	.word	0x00019fc0

0000eb30 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    eb30:	b500      	push	{lr}
    eb32:	b085      	sub	sp, #20
    eb34:	4603      	mov	r3, r0
    eb36:	9100      	str	r1, [sp, #0]
    eb38:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eb3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb40:	4a53      	ldr	r2, [pc, #332]	; (ec90 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    eb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb46:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    eb48:	9b00      	ldr	r3, [sp, #0]
    eb4a:	681b      	ldr	r3, [r3, #0]
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	d002      	beq.n	eb56 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    eb50:	2b01      	cmp	r3, #1
    eb52:	d04c      	beq.n	ebee <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    eb54:	e097      	b.n	ec86 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    eb56:	9b00      	ldr	r3, [sp, #0]
    eb58:	699b      	ldr	r3, [r3, #24]
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	bf14      	ite	ne
    eb5e:	2301      	movne	r3, #1
    eb60:	2300      	moveq	r3, #0
    eb62:	b2db      	uxtb	r3, r3
    eb64:	4619      	mov	r1, r3
    eb66:	9803      	ldr	r0, [sp, #12]
    eb68:	f7ff f9b1 	bl	dece <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    eb6c:	2100      	movs	r1, #0
    eb6e:	9803      	ldr	r0, [sp, #12]
    eb70:	f7ff fa2a 	bl	dfc8 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    eb74:	9b00      	ldr	r3, [sp, #0]
    eb76:	691b      	ldr	r3, [r3, #16]
    eb78:	2b00      	cmp	r3, #0
    eb7a:	bf14      	ite	ne
    eb7c:	2301      	movne	r3, #1
    eb7e:	2300      	moveq	r3, #0
    eb80:	b2db      	uxtb	r3, r3
    eb82:	4619      	mov	r1, r3
    eb84:	9803      	ldr	r0, [sp, #12]
    eb86:	f7ff f9bb 	bl	df00 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    eb8a:	2100      	movs	r1, #0
    eb8c:	9803      	ldr	r0, [sp, #12]
    eb8e:	f7ff fa34 	bl	dffa <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    eb92:	9b00      	ldr	r3, [sp, #0]
    eb94:	695b      	ldr	r3, [r3, #20]
    eb96:	2b00      	cmp	r3, #0
    eb98:	bf14      	ite	ne
    eb9a:	2301      	movne	r3, #1
    eb9c:	2300      	moveq	r3, #0
    eb9e:	b2db      	uxtb	r3, r3
    eba0:	4619      	mov	r1, r3
    eba2:	9803      	ldr	r0, [sp, #12]
    eba4:	f7ff f9c5 	bl	df32 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    eba8:	2100      	movs	r1, #0
    ebaa:	9803      	ldr	r0, [sp, #12]
    ebac:	f7ff fa25 	bl	dffa <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ebb0:	9b00      	ldr	r3, [sp, #0]
    ebb2:	69db      	ldr	r3, [r3, #28]
    ebb4:	2b00      	cmp	r3, #0
    ebb6:	bf14      	ite	ne
    ebb8:	2301      	movne	r3, #1
    ebba:	2300      	moveq	r3, #0
    ebbc:	b2db      	uxtb	r3, r3
    ebbe:	4619      	mov	r1, r3
    ebc0:	9803      	ldr	r0, [sp, #12]
    ebc2:	f7ff f96b 	bl	de9c <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    ebc6:	2100      	movs	r1, #0
    ebc8:	9803      	ldr	r0, [sp, #12]
    ebca:	f7ff f9e4 	bl	df96 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ebce:	9b00      	ldr	r3, [sp, #0]
    ebd0:	6a1b      	ldr	r3, [r3, #32]
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	bf14      	ite	ne
    ebd6:	2301      	movne	r3, #1
    ebd8:	2300      	moveq	r3, #0
    ebda:	b2db      	uxtb	r3, r3
    ebdc:	4619      	mov	r1, r3
    ebde:	9803      	ldr	r0, [sp, #12]
    ebe0:	f7ff f943 	bl	de6a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    ebe4:	2100      	movs	r1, #0
    ebe6:	9803      	ldr	r0, [sp, #12]
    ebe8:	f7ff f9bc 	bl	df64 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    ebec:	e04b      	b.n	ec86 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    ebee:	2100      	movs	r1, #0
    ebf0:	9803      	ldr	r0, [sp, #12]
    ebf2:	f7ff f96c 	bl	dece <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    ebf6:	9b00      	ldr	r3, [sp, #0]
    ebf8:	699b      	ldr	r3, [r3, #24]
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	bf14      	ite	ne
    ebfe:	2301      	movne	r3, #1
    ec00:	2300      	moveq	r3, #0
    ec02:	b2db      	uxtb	r3, r3
    ec04:	4619      	mov	r1, r3
    ec06:	9803      	ldr	r0, [sp, #12]
    ec08:	f7ff f9de 	bl	dfc8 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ec0c:	2100      	movs	r1, #0
    ec0e:	9803      	ldr	r0, [sp, #12]
    ec10:	f7ff f976 	bl	df00 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec14:	9b00      	ldr	r3, [sp, #0]
    ec16:	691b      	ldr	r3, [r3, #16]
    ec18:	2b00      	cmp	r3, #0
    ec1a:	bf14      	ite	ne
    ec1c:	2301      	movne	r3, #1
    ec1e:	2300      	moveq	r3, #0
    ec20:	b2db      	uxtb	r3, r3
    ec22:	4619      	mov	r1, r3
    ec24:	9803      	ldr	r0, [sp, #12]
    ec26:	f7ff f9e8 	bl	dffa <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ec2a:	2100      	movs	r1, #0
    ec2c:	9803      	ldr	r0, [sp, #12]
    ec2e:	f7ff f980 	bl	df32 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    ec32:	9b00      	ldr	r3, [sp, #0]
    ec34:	695b      	ldr	r3, [r3, #20]
    ec36:	2b00      	cmp	r3, #0
    ec38:	bf14      	ite	ne
    ec3a:	2301      	movne	r3, #1
    ec3c:	2300      	moveq	r3, #0
    ec3e:	b2db      	uxtb	r3, r3
    ec40:	4619      	mov	r1, r3
    ec42:	9803      	ldr	r0, [sp, #12]
    ec44:	f7ff f9d9 	bl	dffa <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    ec48:	2100      	movs	r1, #0
    ec4a:	9803      	ldr	r0, [sp, #12]
    ec4c:	f7ff f926 	bl	de9c <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec50:	9b00      	ldr	r3, [sp, #0]
    ec52:	69db      	ldr	r3, [r3, #28]
    ec54:	2b00      	cmp	r3, #0
    ec56:	bf14      	ite	ne
    ec58:	2301      	movne	r3, #1
    ec5a:	2300      	moveq	r3, #0
    ec5c:	b2db      	uxtb	r3, r3
    ec5e:	4619      	mov	r1, r3
    ec60:	9803      	ldr	r0, [sp, #12]
    ec62:	f7ff f998 	bl	df96 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    ec66:	2100      	movs	r1, #0
    ec68:	9803      	ldr	r0, [sp, #12]
    ec6a:	f7ff f8fe 	bl	de6a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec6e:	9b00      	ldr	r3, [sp, #0]
    ec70:	6a1b      	ldr	r3, [r3, #32]
    ec72:	2b00      	cmp	r3, #0
    ec74:	bf14      	ite	ne
    ec76:	2301      	movne	r3, #1
    ec78:	2300      	moveq	r3, #0
    ec7a:	b2db      	uxtb	r3, r3
    ec7c:	4619      	mov	r1, r3
    ec7e:	9803      	ldr	r0, [sp, #12]
    ec80:	f7ff f970 	bl	df64 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    ec84:	bf00      	nop
    }
}
    ec86:	bf00      	nop
    ec88:	b005      	add	sp, #20
    ec8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ec8e:	bf00      	nop
    ec90:	00019fc0 	.word	0x00019fc0

0000ec94 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ec94:	b500      	push	{lr}
    ec96:	b085      	sub	sp, #20
    ec98:	4603      	mov	r3, r0
    ec9a:	9100      	str	r1, [sp, #0]
    ec9c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eca4:	4a19      	ldr	r2, [pc, #100]	; (ed0c <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    eca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecaa:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ecac:	9b00      	ldr	r3, [sp, #0]
    ecae:	699b      	ldr	r3, [r3, #24]
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	bf14      	ite	ne
    ecb4:	2301      	movne	r3, #1
    ecb6:	2300      	moveq	r3, #0
    ecb8:	b2db      	uxtb	r3, r3
    ecba:	4619      	mov	r1, r3
    ecbc:	9803      	ldr	r0, [sp, #12]
    ecbe:	f7fe fde7 	bl	d890 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ecc2:	9b00      	ldr	r3, [sp, #0]
    ecc4:	691b      	ldr	r3, [r3, #16]
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	bf14      	ite	ne
    ecca:	2301      	movne	r3, #1
    eccc:	2300      	moveq	r3, #0
    ecce:	b2db      	uxtb	r3, r3
    ecd0:	4619      	mov	r1, r3
    ecd2:	9803      	ldr	r0, [sp, #12]
    ecd4:	f7ff f881 	bl	ddda <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ecd8:	9b00      	ldr	r3, [sp, #0]
    ecda:	695b      	ldr	r3, [r3, #20]
    ecdc:	2b00      	cmp	r3, #0
    ecde:	bf14      	ite	ne
    ece0:	2301      	movne	r3, #1
    ece2:	2300      	moveq	r3, #0
    ece4:	b2db      	uxtb	r3, r3
    ece6:	4619      	mov	r1, r3
    ece8:	9803      	ldr	r0, [sp, #12]
    ecea:	f7ff f88e 	bl	de0a <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ecee:	9b00      	ldr	r3, [sp, #0]
    ecf0:	69db      	ldr	r3, [r3, #28]
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	bf14      	ite	ne
    ecf6:	2301      	movne	r3, #1
    ecf8:	2300      	moveq	r3, #0
    ecfa:	b2db      	uxtb	r3, r3
    ecfc:	4619      	mov	r1, r3
    ecfe:	9803      	ldr	r0, [sp, #12]
    ed00:	f7ff f853 	bl	ddaa <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    ed04:	bf00      	nop
    ed06:	b005      	add	sp, #20
    ed08:	f85d fb04 	ldr.w	pc, [sp], #4
    ed0c:	00019fc0 	.word	0x00019fc0

0000ed10 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ed10:	b500      	push	{lr}
    ed12:	b087      	sub	sp, #28
    ed14:	4603      	mov	r3, r0
    ed16:	9100      	str	r1, [sp, #0]
    ed18:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ed1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed20:	4a4b      	ldr	r2, [pc, #300]	; (ee50 <Ftm_Pwm_Ip_UpdateSync+0x140>)
    ed22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed26:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    ed28:	2300      	movs	r3, #0
    ed2a:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    ed2c:	2300      	movs	r3, #0
    ed2e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    ed32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed36:	2b03      	cmp	r3, #3
    ed38:	bf94      	ite	ls
    ed3a:	2301      	movls	r3, #1
    ed3c:	2300      	movhi	r3, #0
    ed3e:	b2db      	uxtb	r3, r3
    ed40:	4618      	mov	r0, r3
    ed42:	f7f1 fdd3 	bl	8ec <DevAssert>
    DevAssert(SyncCfg != NULL_PTR);
    ed46:	9b00      	ldr	r3, [sp, #0]
    ed48:	2b00      	cmp	r3, #0
    ed4a:	bf14      	ite	ne
    ed4c:	2301      	movne	r3, #1
    ed4e:	2300      	moveq	r3, #0
    ed50:	b2db      	uxtb	r3, r3
    ed52:	4618      	mov	r0, r3
    ed54:	f7f1 fdca 	bl	8ec <DevAssert>
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    ed58:	9b00      	ldr	r3, [sp, #0]
    ed5a:	791b      	ldrb	r3, [r3, #4]
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	d107      	bne.n	ed70 <Ftm_Pwm_Ip_UpdateSync+0x60>
    ed60:	9b00      	ldr	r3, [sp, #0]
    ed62:	795b      	ldrb	r3, [r3, #5]
    ed64:	2b00      	cmp	r3, #0
    ed66:	d103      	bne.n	ed70 <Ftm_Pwm_Ip_UpdateSync+0x60>
    ed68:	9b00      	ldr	r3, [sp, #0]
    ed6a:	799b      	ldrb	r3, [r3, #6]
    ed6c:	2b00      	cmp	r3, #0
    ed6e:	d001      	beq.n	ed74 <Ftm_Pwm_Ip_UpdateSync+0x64>
    ed70:	2301      	movs	r3, #1
    ed72:	e000      	b.n	ed76 <Ftm_Pwm_Ip_UpdateSync+0x66>
    ed74:	2300      	movs	r3, #0
    ed76:	f88d 300f 	strb.w	r3, [sp, #15]
    ed7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ed7e:	f003 0301 	and.w	r3, r3, #1
    ed82:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    ed86:	9b00      	ldr	r3, [sp, #0]
    ed88:	681b      	ldr	r3, [r3, #0]
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	d105      	bne.n	ed9a <Ftm_Pwm_Ip_UpdateSync+0x8a>
    ed8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ed92:	2b00      	cmp	r3, #0
    ed94:	d001      	beq.n	ed9a <Ftm_Pwm_Ip_UpdateSync+0x8a>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    ed96:	2301      	movs	r3, #1
    ed98:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    ed9a:	9b00      	ldr	r3, [sp, #0]
    ed9c:	6a1b      	ldr	r3, [r3, #32]
    ed9e:	2b02      	cmp	r3, #2
    eda0:	d101      	bne.n	eda6 <Ftm_Pwm_Ip_UpdateSync+0x96>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    eda2:	2301      	movs	r3, #1
    eda4:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    eda6:	9b05      	ldr	r3, [sp, #20]
    eda8:	2b00      	cmp	r3, #0
    edaa:	d14c      	bne.n	ee46 <Ftm_Pwm_Ip_UpdateSync+0x136>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    edac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    edb0:	9900      	ldr	r1, [sp, #0]
    edb2:	4618      	mov	r0, r3
    edb4:	f7ff febc 	bl	eb30 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    edb8:	2101      	movs	r1, #1
    edba:	9804      	ldr	r0, [sp, #16]
    edbc:	f7ff f83d 	bl	de3a <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    edc0:	9b00      	ldr	r3, [sp, #0]
    edc2:	791b      	ldrb	r3, [r3, #4]
    edc4:	461a      	mov	r2, r3
    edc6:	2100      	movs	r1, #0
    edc8:	9804      	ldr	r0, [sp, #16]
    edca:	f7fe fd77 	bl	d8bc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    edce:	9b00      	ldr	r3, [sp, #0]
    edd0:	795b      	ldrb	r3, [r3, #5]
    edd2:	461a      	mov	r2, r3
    edd4:	2101      	movs	r1, #1
    edd6:	9804      	ldr	r0, [sp, #16]
    edd8:	f7fe fd70 	bl	d8bc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    eddc:	9b00      	ldr	r3, [sp, #0]
    edde:	799b      	ldrb	r3, [r3, #6]
    ede0:	461a      	mov	r2, r3
    ede2:	2102      	movs	r1, #2
    ede4:	9804      	ldr	r0, [sp, #16]
    ede6:	f7fe fd69 	bl	d8bc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    edea:	9b00      	ldr	r3, [sp, #0]
    edec:	79db      	ldrb	r3, [r3, #7]
    edee:	4619      	mov	r1, r3
    edf0:	9804      	ldr	r0, [sp, #16]
    edf2:	f7fe ffc2 	bl	dd7a <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    edf6:	9b00      	ldr	r3, [sp, #0]
    edf8:	7a1b      	ldrb	r3, [r3, #8]
    edfa:	4619      	mov	r1, r3
    edfc:	9804      	ldr	r0, [sp, #16]
    edfe:	f7fe fd31 	bl	d864 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    ee02:	9b00      	ldr	r3, [sp, #0]
    ee04:	7a5b      	ldrb	r3, [r3, #9]
    ee06:	4619      	mov	r1, r3
    ee08:	9804      	ldr	r0, [sp, #16]
    ee0a:	f7fe fd15 	bl	d838 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    ee0e:	9b00      	ldr	r3, [sp, #0]
    ee10:	7a9b      	ldrb	r3, [r3, #10]
    ee12:	2b00      	cmp	r3, #0
    ee14:	d005      	beq.n	ee22 <Ftm_Pwm_Ip_UpdateSync+0x112>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    ee16:	9b00      	ldr	r3, [sp, #0]
    ee18:	899b      	ldrh	r3, [r3, #12]
    ee1a:	4619      	mov	r1, r3
    ee1c:	9804      	ldr	r0, [sp, #16]
    ee1e:	f7ff f9c1 	bl	e1a4 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    ee22:	9b00      	ldr	r3, [sp, #0]
    ee24:	7a9b      	ldrb	r3, [r3, #10]
    ee26:	4619      	mov	r1, r3
    ee28:	9804      	ldr	r0, [sp, #16]
    ee2a:	f7ff f99e 	bl	e16a <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    ee2e:	9b00      	ldr	r3, [sp, #0]
    ee30:	7b9b      	ldrb	r3, [r3, #14]
    ee32:	4619      	mov	r1, r3
    ee34:	9804      	ldr	r0, [sp, #16]
    ee36:	f7fe ff66 	bl	dd06 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    ee3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ee3e:	9900      	ldr	r1, [sp, #0]
    ee40:	4618      	mov	r0, r3
    ee42:	f7ff ff27 	bl	ec94 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    ee46:	9b05      	ldr	r3, [sp, #20]
}
    ee48:	4618      	mov	r0, r3
    ee4a:	b007      	add	sp, #28
    ee4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ee50:	00019fc0 	.word	0x00019fc0

0000ee54 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    ee54:	b500      	push	{lr}
    ee56:	b085      	sub	sp, #20
    ee58:	4603      	mov	r3, r0
    ee5a:	9100      	str	r1, [sp, #0]
    ee5c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ee60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ee64:	4a1f      	ldr	r2, [pc, #124]	; (eee4 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    ee66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee6a:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    ee6c:	9803      	ldr	r0, [sp, #12]
    ee6e:	f7ff faef 	bl	e450 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    ee72:	2100      	movs	r1, #0
    ee74:	9803      	ldr	r0, [sp, #12]
    ee76:	f7fe fae0 	bl	d43a <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    ee7a:	9803      	ldr	r0, [sp, #12]
    ee7c:	f7fe fb29 	bl	d4d2 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    ee80:	9b00      	ldr	r3, [sp, #0]
    ee82:	68db      	ldr	r3, [r3, #12]
    ee84:	2b00      	cmp	r3, #0
    ee86:	bf14      	ite	ne
    ee88:	2301      	movne	r3, #1
    ee8a:	2300      	moveq	r3, #0
    ee8c:	b2db      	uxtb	r3, r3
    ee8e:	4619      	mov	r1, r3
    ee90:	9803      	ldr	r0, [sp, #12]
    ee92:	f7fe fae3 	bl	d45c <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    ee96:	2100      	movs	r1, #0
    ee98:	9803      	ldr	r0, [sp, #12]
    ee9a:	f7fe fca1 	bl	d7e0 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    ee9e:	9b00      	ldr	r3, [sp, #0]
    eea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    eea2:	4619      	mov	r1, r3
    eea4:	9803      	ldr	r0, [sp, #12]
    eea6:	f7fe ff43 	bl	dd30 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    eeaa:	9b00      	ldr	r3, [sp, #0]
    eeac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    eeae:	b2db      	uxtb	r3, r3
    eeb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    eeb4:	b2db      	uxtb	r3, r3
    eeb6:	4619      	mov	r1, r3
    eeb8:	9803      	ldr	r0, [sp, #12]
    eeba:	f7fe fe76 	bl	dbaa <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    eebe:	9b00      	ldr	r3, [sp, #0]
    eec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    eec2:	099b      	lsrs	r3, r3, #6
    eec4:	b29b      	uxth	r3, r3
    eec6:	b2db      	uxtb	r3, r3
    eec8:	4619      	mov	r1, r3
    eeca:	9803      	ldr	r0, [sp, #12]
    eecc:	f7fe fe9e 	bl	dc0c <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    eed0:	9b00      	ldr	r3, [sp, #0]
    eed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    eed4:	4619      	mov	r1, r3
    eed6:	9803      	ldr	r0, [sp, #12]
    eed8:	f7fe fe7a 	bl	dbd0 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    eedc:	bf00      	nop
    eede:	b005      	add	sp, #20
    eee0:	f85d fb04 	ldr.w	pc, [sp], #4
    eee4:	00019fc0 	.word	0x00019fc0

0000eee8 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    eee8:	b500      	push	{lr}
    eeea:	b085      	sub	sp, #20
    eeec:	4603      	mov	r3, r0
    eeee:	9100      	str	r1, [sp, #0]
    eef0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eef8:	4a48      	ldr	r2, [pc, #288]	; (f01c <Ftm_Pwm_Ip_InitInstance+0x134>)
    eefa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eefe:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    ef00:	4b47      	ldr	r3, [pc, #284]	; (f020 <Ftm_Pwm_Ip_InitInstance+0x138>)
    ef02:	9302      	str	r3, [sp, #8]
#endif

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    ef04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef08:	2b03      	cmp	r3, #3
    ef0a:	bf94      	ite	ls
    ef0c:	2301      	movls	r3, #1
    ef0e:	2300      	movhi	r3, #0
    ef10:	b2db      	uxtb	r3, r3
    ef12:	4618      	mov	r0, r3
    ef14:	f7f1 fcea 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    ef18:	9b00      	ldr	r3, [sp, #0]
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	bf14      	ite	ne
    ef1e:	2301      	movne	r3, #1
    ef20:	2300      	moveq	r3, #0
    ef22:	b2db      	uxtb	r3, r3
    ef24:	4618      	mov	r0, r3
    ef26:	f7f1 fce1 	bl	8ec <DevAssert>
    /* Maximum value for Deadtime is 1023 including the extension */
    DevAssert((uint16)0x3FF >= UserInstCfg->DeadTimeValue);
    ef2a:	9b00      	ldr	r3, [sp, #0]
    ef2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    ef2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ef32:	4293      	cmp	r3, r2
    ef34:	bf94      	ite	ls
    ef36:	2301      	movls	r3, #1
    ef38:	2300      	movhi	r3, #0
    ef3a:	b2db      	uxtb	r3, r3
    ef3c:	4618      	mov	r0, r3
    ef3e:	f7f1 fcd5 	bl	8ec <DevAssert>
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    ef42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef46:	4619      	mov	r1, r3
    ef48:	9802      	ldr	r0, [sp, #8]
    ef4a:	f7ff fc45 	bl	e7d8 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    ef4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef52:	9900      	ldr	r1, [sp, #0]
    ef54:	4618      	mov	r0, r3
    ef56:	f7ff ff7d 	bl	ee54 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    ef5a:	9b00      	ldr	r3, [sp, #0]
    ef5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    ef5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef62:	4611      	mov	r1, r2
    ef64:	4618      	mov	r0, r3
    ef66:	f7ff fed3 	bl	ed10 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    ef6a:	2100      	movs	r1, #0
    ef6c:	9803      	ldr	r0, [sp, #12]
    ef6e:	f7fe fc26 	bl	d7be <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    ef72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef76:	9a00      	ldr	r2, [sp, #0]
    ef78:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    ef7a:	4a2a      	ldr	r2, [pc, #168]	; (f024 <Ftm_Pwm_Ip_InitInstance+0x13c>)
    ef7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    ef80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef84:	9a00      	ldr	r2, [sp, #0]
    ef86:	6812      	ldr	r2, [r2, #0]
    ef88:	4927      	ldr	r1, [pc, #156]	; (f028 <Ftm_Pwm_Ip_InitInstance+0x140>)
    ef8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    ef8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef92:	9a00      	ldr	r2, [sp, #0]
    ef94:	6852      	ldr	r2, [r2, #4]
    ef96:	4925      	ldr	r1, [pc, #148]	; (f02c <Ftm_Pwm_Ip_InitInstance+0x144>)
    ef98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    ef9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efa0:	9a00      	ldr	r2, [sp, #0]
    efa2:	6892      	ldr	r2, [r2, #8]
    efa4:	4922      	ldr	r1, [pc, #136]	; (f030 <Ftm_Pwm_Ip_InitInstance+0x148>)
    efa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    efaa:	9b00      	ldr	r3, [sp, #0]
    efac:	7c1b      	ldrb	r3, [r3, #16]
    efae:	2b00      	cmp	r3, #0
    efb0:	d00e      	beq.n	efd0 <Ftm_Pwm_Ip_InitInstance+0xe8>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    efb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efb6:	9a00      	ldr	r2, [sp, #0]
    efb8:	6952      	ldr	r2, [r2, #20]
    efba:	491e      	ldr	r1, [pc, #120]	; (f034 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    efbc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    efc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efc4:	9a00      	ldr	r2, [sp, #0]
    efc6:	6992      	ldr	r2, [r2, #24]
    efc8:	491a      	ldr	r1, [pc, #104]	; (f034 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    efca:	00db      	lsls	r3, r3, #3
    efcc:	440b      	add	r3, r1
    efce:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    efd0:	9b00      	ldr	r3, [sp, #0]
    efd2:	68db      	ldr	r3, [r3, #12]
    efd4:	2b01      	cmp	r3, #1
    efd6:	d108      	bne.n	efea <Ftm_Pwm_Ip_InitInstance+0x102>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    efd8:	9b00      	ldr	r3, [sp, #0]
    efda:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    efdc:	085b      	lsrs	r3, r3, #1
    efde:	b29b      	uxth	r3, r3
    efe0:	4619      	mov	r1, r3
    efe2:	9803      	ldr	r0, [sp, #12]
    efe4:	f7fe faa3 	bl	d52e <Ftm_Pwm_Ip_SetMod>
    efe8:	e007      	b.n	effa <Ftm_Pwm_Ip_InitInstance+0x112>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    efea:	9b00      	ldr	r3, [sp, #0]
    efec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    efee:	3b01      	subs	r3, #1
    eff0:	b29b      	uxth	r3, r3
    eff2:	4619      	mov	r1, r3
    eff4:	9803      	ldr	r0, [sp, #12]
    eff6:	f7fe fa9a 	bl	d52e <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    effa:	9b00      	ldr	r3, [sp, #0]
    effc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f000:	4619      	mov	r1, r3
    f002:	9803      	ldr	r0, [sp, #12]
    f004:	f7fe fe16 	bl	dc34 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    f008:	9b00      	ldr	r3, [sp, #0]
    f00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f00c:	4619      	mov	r1, r3
    f00e:	9803      	ldr	r0, [sp, #12]
    f010:	f7fe fea0 	bl	dd54 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    f014:	bf00      	nop
    f016:	b005      	add	sp, #20
    f018:	f85d fb04 	ldr.w	pc, [sp], #4
    f01c:	00019fc0 	.word	0x00019fc0
    f020:	40048000 	.word	0x40048000
    f024:	1fff8e2c 	.word	0x1fff8e2c
    f028:	1fff9124 	.word	0x1fff9124
    f02c:	1fff9134 	.word	0x1fff9134
    f030:	1fff9144 	.word	0x1fff9144
    f034:	1fff8fd4 	.word	0x1fff8fd4

0000f038 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    f038:	b500      	push	{lr}
    f03a:	b085      	sub	sp, #20
    f03c:	4603      	mov	r3, r0
    f03e:	9100      	str	r1, [sp, #0]
    f040:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f048:	4a23      	ldr	r2, [pc, #140]	; (f0d8 <Ftm_Pwm_Ip_InitInstanceStart+0xa0>)
    f04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f04e:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f050:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f054:	2b03      	cmp	r3, #3
    f056:	bf94      	ite	ls
    f058:	2301      	movls	r3, #1
    f05a:	2300      	movhi	r3, #0
    f05c:	b2db      	uxtb	r3, r3
    f05e:	4618      	mov	r0, r3
    f060:	f7f1 fc44 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    f064:	9b00      	ldr	r3, [sp, #0]
    f066:	2b00      	cmp	r3, #0
    f068:	bf14      	ite	ne
    f06a:	2301      	movne	r3, #1
    f06c:	2300      	moveq	r3, #0
    f06e:	b2db      	uxtb	r3, r3
    f070:	4618      	mov	r0, r3
    f072:	f7f1 fc3b 	bl	8ec <DevAssert>
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    f076:	9b00      	ldr	r3, [sp, #0]
    f078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    f07c:	4619      	mov	r1, r3
    f07e:	9803      	ldr	r0, [sp, #12]
    f080:	f7ff fb16 	bl	e6b0 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    f084:	9b00      	ldr	r3, [sp, #0]
    f086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f088:	4619      	mov	r1, r3
    f08a:	9803      	ldr	r0, [sp, #12]
    f08c:	f7ff fb24 	bl	e6d8 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    f090:	9b00      	ldr	r3, [sp, #0]
    f092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f094:	4619      	mov	r1, r3
    f096:	9803      	ldr	r0, [sp, #12]
    f098:	f7ff fa8d 	bl	e5b6 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    f09c:	2101      	movs	r1, #1
    f09e:	9803      	ldr	r0, [sp, #12]
    f0a0:	f7fe fb9e 	bl	d7e0 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    f0a4:	2101      	movs	r1, #1
    f0a6:	9803      	ldr	r0, [sp, #12]
    f0a8:	f7fe fbb0 	bl	d80c <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    f0ac:	9b00      	ldr	r3, [sp, #0]
    f0ae:	685b      	ldr	r3, [r3, #4]
    f0b0:	4619      	mov	r1, r3
    f0b2:	9803      	ldr	r0, [sp, #12]
    f0b4:	f7fe f9a6 	bl	d404 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    f0b8:	9b00      	ldr	r3, [sp, #0]
    f0ba:	681b      	ldr	r3, [r3, #0]
    f0bc:	4619      	mov	r1, r3
    f0be:	9803      	ldr	r0, [sp, #12]
    f0c0:	f7fe f9bb 	bl	d43a <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f0c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f0c8:	4a04      	ldr	r2, [pc, #16]	; (f0dc <Ftm_Pwm_Ip_InitInstanceStart+0xa4>)
    f0ca:	2101      	movs	r1, #1
    f0cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    f0d0:	bf00      	nop
    f0d2:	b005      	add	sp, #20
    f0d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d8:	00019fc0 	.word	0x00019fc0
    f0dc:	1fff8ff4 	.word	0x1fff8ff4

0000f0e0 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f0e0:	b500      	push	{lr}
    f0e2:	b085      	sub	sp, #20
    f0e4:	4603      	mov	r3, r0
    f0e6:	9100      	str	r1, [sp, #0]
    f0e8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f0ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f0f0:	4a37      	ldr	r2, [pc, #220]	; (f1d0 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    f0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f6:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f0f8:	2300      	movs	r3, #0
    f0fa:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    f0fe:	2300      	movs	r3, #0
    f100:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f104:	9b00      	ldr	r3, [sp, #0]
    f106:	781b      	ldrb	r3, [r3, #0]
    f108:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    f10c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f110:	085b      	lsrs	r3, r3, #1
    f112:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    f116:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f11a:	2201      	movs	r2, #1
    f11c:	4619      	mov	r1, r3
    f11e:	9803      	ldr	r0, [sp, #12]
    f120:	f7fe fcf5 	bl	db0e <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    f124:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f128:	2201      	movs	r2, #1
    f12a:	4619      	mov	r1, r3
    f12c:	9803      	ldr	r0, [sp, #12]
    f12e:	f7ff fa77 	bl	e620 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f132:	9b00      	ldr	r3, [sp, #0]
    f134:	685b      	ldr	r3, [r3, #4]
    f136:	2b22      	cmp	r3, #34	; 0x22
    f138:	d003      	beq.n	f142 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f13a:	9b00      	ldr	r3, [sp, #0]
    f13c:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f13e:	2b21      	cmp	r3, #33	; 0x21
    f140:	d113      	bne.n	f16a <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f142:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f146:	005b      	lsls	r3, r3, #1
    f148:	b2db      	uxtb	r3, r3
    f14a:	3301      	adds	r3, #1
    f14c:	b2d9      	uxtb	r1, r3
    f14e:	9b00      	ldr	r3, [sp, #0]
    f150:	685b      	ldr	r3, [r3, #4]
    f152:	461a      	mov	r2, r3
    f154:	9803      	ldr	r0, [sp, #12]
    f156:	f7fe fa25 	bl	d5a4 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f15a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f15e:	2201      	movs	r2, #1
    f160:	4619      	mov	r1, r3
    f162:	9803      	ldr	r0, [sp, #12]
    f164:	f7fe fc48 	bl	d9f8 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    f168:	e021      	b.n	f1ae <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f16a:	9b00      	ldr	r3, [sp, #0]
    f16c:	685b      	ldr	r3, [r3, #4]
    f16e:	2b62      	cmp	r3, #98	; 0x62
    f170:	d003      	beq.n	f17a <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    f172:	9b00      	ldr	r3, [sp, #0]
    f174:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f176:	2b61      	cmp	r3, #97	; 0x61
    f178:	d119      	bne.n	f1ae <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f17a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f17e:	005b      	lsls	r3, r3, #1
    f180:	b2db      	uxtb	r3, r3
    f182:	3301      	adds	r3, #1
    f184:	b2d9      	uxtb	r1, r3
    f186:	9b00      	ldr	r3, [sp, #0]
    f188:	685b      	ldr	r3, [r3, #4]
    f18a:	461a      	mov	r2, r3
    f18c:	9803      	ldr	r0, [sp, #12]
    f18e:	f7fe fa09 	bl	d5a4 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f192:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f196:	2201      	movs	r2, #1
    f198:	4619      	mov	r1, r3
    f19a:	9803      	ldr	r0, [sp, #12]
    f19c:	f7fe fc2c 	bl	d9f8 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    f1a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f1a4:	2201      	movs	r2, #1
    f1a6:	4619      	mov	r1, r3
    f1a8:	9803      	ldr	r0, [sp, #12]
    f1aa:	f7fe fcd7 	bl	db5c <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    f1ae:	9b00      	ldr	r3, [sp, #0]
    f1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f1b2:	2b00      	cmp	r3, #0
    f1b4:	d007      	beq.n	f1c6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    f1b6:	9b00      	ldr	r3, [sp, #0]
    f1b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f1ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1be:	4611      	mov	r1, r2
    f1c0:	4618      	mov	r0, r3
    f1c2:	f7ff fbdf 	bl	e984 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    f1c6:	bf00      	nop
    f1c8:	b005      	add	sp, #20
    f1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ce:	bf00      	nop
    f1d0:	00019fc0 	.word	0x00019fc0

0000f1d4 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f1d4:	b500      	push	{lr}
    f1d6:	b085      	sub	sp, #20
    f1d8:	4603      	mov	r3, r0
    f1da:	9100      	str	r1, [sp, #0]
    f1dc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f1e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1e4:	4a15      	ldr	r2, [pc, #84]	; (f23c <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    f1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ea:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    f1ec:	9b00      	ldr	r3, [sp, #0]
    f1ee:	7819      	ldrb	r1, [r3, #0]
    f1f0:	9b00      	ldr	r3, [sp, #0]
    f1f2:	7ddb      	ldrb	r3, [r3, #23]
    f1f4:	461a      	mov	r2, r3
    f1f6:	9803      	ldr	r0, [sp, #12]
    f1f8:	f7ff f99f 	bl	e53a <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    f1fc:	9b00      	ldr	r3, [sp, #0]
    f1fe:	7819      	ldrb	r1, [r3, #0]
    f200:	9b00      	ldr	r3, [sp, #0]
    f202:	7e1b      	ldrb	r3, [r3, #24]
    f204:	461a      	mov	r2, r3
    f206:	9803      	ldr	r0, [sp, #12]
    f208:	f7fe ff86 	bl	e118 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    f20c:	9b00      	ldr	r3, [sp, #0]
    f20e:	7819      	ldrb	r1, [r3, #0]
    f210:	9b00      	ldr	r3, [sp, #0]
    f212:	7d5b      	ldrb	r3, [r3, #21]
    f214:	461a      	mov	r2, r3
    f216:	9803      	ldr	r0, [sp, #12]
    f218:	f7fe ff48 	bl	e0ac <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    f21c:	9b00      	ldr	r3, [sp, #0]
    f21e:	7819      	ldrb	r1, [r3, #0]
    f220:	9b00      	ldr	r3, [sp, #0]
    f222:	7d9b      	ldrb	r3, [r3, #22]
    f224:	461a      	mov	r2, r3
    f226:	9803      	ldr	r0, [sp, #12]
    f228:	f7fe ff00 	bl	e02c <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f22c:	2101      	movs	r1, #1
    f22e:	9803      	ldr	r0, [sp, #12]
    f230:	f7fe fb69 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    f234:	bf00      	nop
    f236:	b005      	add	sp, #20
    f238:	f85d fb04 	ldr.w	pc, [sp], #4
    f23c:	00019fc0 	.word	0x00019fc0

0000f240 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f240:	b500      	push	{lr}
    f242:	b085      	sub	sp, #20
    f244:	4603      	mov	r3, r0
    f246:	9100      	str	r1, [sp, #0]
    f248:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f24c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f250:	4a7b      	ldr	r2, [pc, #492]	; (f440 <Ftm_Pwm_Ip_InitChannel+0x200>)
    f252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f256:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f258:	2300      	movs	r3, #0
    f25a:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f25e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f262:	2b03      	cmp	r3, #3
    f264:	bf94      	ite	ls
    f266:	2301      	movls	r3, #1
    f268:	2300      	movhi	r3, #0
    f26a:	b2db      	uxtb	r3, r3
    f26c:	4618      	mov	r0, r3
    f26e:	f7f1 fb3d 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserChCfg);
    f272:	9b00      	ldr	r3, [sp, #0]
    f274:	2b00      	cmp	r3, #0
    f276:	bf14      	ite	ne
    f278:	2301      	movne	r3, #1
    f27a:	2300      	moveq	r3, #0
    f27c:	b2db      	uxtb	r3, r3
    f27e:	4618      	mov	r0, r3
    f280:	f7f1 fb34 	bl	8ec <DevAssert>
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f284:	9b00      	ldr	r3, [sp, #0]
    f286:	781b      	ldrb	r3, [r3, #0]
    f288:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    /* Center Aligned PWM is available only in FTM CPWM counter mode */
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f28c:	9b00      	ldr	r3, [sp, #0]
    f28e:	685b      	ldr	r3, [r3, #4]
    f290:	2b12      	cmp	r3, #18
    f292:	d003      	beq.n	f29c <Ftm_Pwm_Ip_InitChannel+0x5c>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW == UserChCfg->ChannelMode))
    f294:	9b00      	ldr	r3, [sp, #0]
    f296:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f298:	2b11      	cmp	r3, #17
    f29a:	d10b      	bne.n	f2b4 <Ftm_Pwm_Ip_InitChannel+0x74>
    {
        DevAssert(FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase));
    f29c:	9803      	ldr	r0, [sp, #12]
    f29e:	f7fe f8f3 	bl	d488 <Ftm_Pwm_Ip_GetCpwms>
    f2a2:	4603      	mov	r3, r0
    f2a4:	2b01      	cmp	r3, #1
    f2a6:	bf0c      	ite	eq
    f2a8:	2301      	moveq	r3, #1
    f2aa:	2300      	movne	r3, #0
    f2ac:	b2db      	uxtb	r3, r3
    f2ae:	4618      	mov	r0, r3
    f2b0:	f7f1 fb1c 	bl	8ec <DevAssert>
    }
    /* Only the main channel of a pair can have the PairCfg pointer set */
    if (NULL_PTR != UserChCfg->PairCfg)
    f2b4:	9b00      	ldr	r3, [sp, #0]
    f2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f2b8:	2b00      	cmp	r3, #0
    f2ba:	d015      	beq.n	f2e8 <Ftm_Pwm_Ip_InitChannel+0xa8>
    {
        if (0x01U == (ChannelId % 2U))
    f2bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f2c0:	f003 0301 	and.w	r3, r3, #1
    f2c4:	b2db      	uxtb	r3, r3
    f2c6:	2b00      	cmp	r3, #0
    f2c8:	d003      	beq.n	f2d2 <Ftm_Pwm_Ip_InitChannel+0x92>
        {
            DevAssert(FALSE);
    f2ca:	2000      	movs	r0, #0
    f2cc:	f7f1 fb0e 	bl	8ec <DevAssert>
    f2d0:	e00a      	b.n	f2e8 <Ftm_Pwm_Ip_InitChannel+0xa8>
        }/* Check if pair configuration */
        else if ((UserChCfg->PairCfg->PairId * 2U) != ChannelId)
    f2d2:	9b00      	ldr	r3, [sp, #0]
    f2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f2d6:	781b      	ldrb	r3, [r3, #0]
    f2d8:	005a      	lsls	r2, r3, #1
    f2da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f2de:	429a      	cmp	r2, r3
    f2e0:	d002      	beq.n	f2e8 <Ftm_Pwm_Ip_InitChannel+0xa8>
        {
            DevAssert(FALSE);
    f2e2:	2000      	movs	r0, #0
    f2e4:	f7f1 fb02 	bl	8ec <DevAssert>
        {
            /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
        }
    }

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2e8:	9b00      	ldr	r3, [sp, #0]
    f2ea:	685b      	ldr	r3, [r3, #4]
    f2ec:	2b22      	cmp	r3, #34	; 0x22
    f2ee:	d00b      	beq.n	f308 <Ftm_Pwm_Ip_InitChannel+0xc8>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2f0:	9b00      	ldr	r3, [sp, #0]
    f2f2:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2f4:	2b62      	cmp	r3, #98	; 0x62
    f2f6:	d007      	beq.n	f308 <Ftm_Pwm_Ip_InitChannel+0xc8>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f2f8:	9b00      	ldr	r3, [sp, #0]
    f2fa:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2fc:	2b61      	cmp	r3, #97	; 0x61
    f2fe:	d003      	beq.n	f308 <Ftm_Pwm_Ip_InitChannel+0xc8>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f300:	9b00      	ldr	r3, [sp, #0]
    f302:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f304:	2b21      	cmp	r3, #33	; 0x21
    f306:	d114      	bne.n	f332 <Ftm_Pwm_Ip_InitChannel+0xf2>

    {
        DevAssert(NULL_PTR != UserChCfg->PairCfg);
    f308:	9b00      	ldr	r3, [sp, #0]
    f30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f30c:	2b00      	cmp	r3, #0
    f30e:	bf14      	ite	ne
    f310:	2301      	movne	r3, #1
    f312:	2300      	moveq	r3, #0
    f314:	b2db      	uxtb	r3, r3
    f316:	4618      	mov	r0, r3
    f318:	f7f1 fae8 	bl	8ec <DevAssert>
        Ftm_Pwm_Ip_aChannelState[Instance][ChannelId + 1U] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f31c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f320:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f324:	3301      	adds	r3, #1
    f326:	4947      	ldr	r1, [pc, #284]	; (f444 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f328:	00d2      	lsls	r2, r2, #3
    f32a:	4413      	add	r3, r2
    f32c:	2201      	movs	r2, #1
    f32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    f332:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f336:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f33a:	9900      	ldr	r1, [sp, #0]
    f33c:	8b48      	ldrh	r0, [r1, #26]
    f33e:	4942      	ldr	r1, [pc, #264]	; (f448 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f340:	00d2      	lsls	r2, r2, #3
    f342:	4413      	add	r3, r2
    f344:	4602      	mov	r2, r0
    f346:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    f34a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f34e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f352:	9a00      	ldr	r2, [sp, #0]
    f354:	69d2      	ldr	r2, [r2, #28]
    f356:	483d      	ldr	r0, [pc, #244]	; (f44c <Ftm_Pwm_Ip_InitChannel+0x20c>)
    f358:	00c9      	lsls	r1, r1, #3
    f35a:	440b      	add	r3, r1
    f35c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    f360:	9b00      	ldr	r3, [sp, #0]
    f362:	6a1a      	ldr	r2, [r3, #32]
    f364:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f368:	4619      	mov	r1, r3
    f36a:	9803      	ldr	r0, [sp, #12]
    f36c:	f7fe fc94 	bl	dc98 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    f370:	9b00      	ldr	r3, [sp, #0]
    f372:	69da      	ldr	r2, [r3, #28]
    f374:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f378:	4619      	mov	r1, r3
    f37a:	9803      	ldr	r0, [sp, #12]
    f37c:	f7fe fad9 	bl	d932 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f380:	9b00      	ldr	r3, [sp, #0]
    f382:	685a      	ldr	r2, [r3, #4]
    f384:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f388:	4619      	mov	r1, r3
    f38a:	9803      	ldr	r0, [sp, #12]
    f38c:	f7fe f90a 	bl	d5a4 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f390:	9b00      	ldr	r3, [sp, #0]
    f392:	685a      	ldr	r2, [r3, #4]
    f394:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f398:	4619      	mov	r1, r3
    f39a:	9803      	ldr	r0, [sp, #12]
    f39c:	f7fe f939 	bl	d612 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    f3a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f3a4:	9900      	ldr	r1, [sp, #0]
    f3a6:	4618      	mov	r0, r3
    f3a8:	f7ff fe9a 	bl	f0e0 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    f3ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f3b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3b4:	4924      	ldr	r1, [pc, #144]	; (f448 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f3b6:	00d2      	lsls	r2, r2, #3
    f3b8:	4413      	add	r3, r2
    f3ba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f3be:	f89d 100b 	ldrb.w	r1, [sp, #11]
    f3c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f3c6:	2301      	movs	r3, #1
    f3c8:	f000 f9f2 	bl	f7b0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    f3cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f3d0:	9900      	ldr	r1, [sp, #0]
    f3d2:	4618      	mov	r0, r3
    f3d4:	f7ff fefe 	bl	f1d4 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    f3d8:	9b00      	ldr	r3, [sp, #0]
    f3da:	7d1b      	ldrb	r3, [r3, #20]
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d005      	beq.n	f3ec <Ftm_Pwm_Ip_InitChannel+0x1ac>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    f3e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3e4:	4619      	mov	r1, r3
    f3e6:	9803      	ldr	r0, [sp, #12]
    f3e8:	f7fe f87e 	bl	d4e8 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f3ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f3f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3f4:	4913      	ldr	r1, [pc, #76]	; (f444 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f3f6:	00d2      	lsls	r2, r2, #3
    f3f8:	4413      	add	r3, r2
    f3fa:	2201      	movs	r2, #1
    f3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    f400:	9b00      	ldr	r3, [sp, #0]
    f402:	7a1b      	ldrb	r3, [r3, #8]
    f404:	2b00      	cmp	r3, #0
    f406:	d016      	beq.n	f436 <Ftm_Pwm_Ip_InitChannel+0x1f6>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    f408:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f40c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f410:	9a00      	ldr	r2, [sp, #0]
    f412:	68d2      	ldr	r2, [r2, #12]
    f414:	480e      	ldr	r0, [pc, #56]	; (f450 <Ftm_Pwm_Ip_InitChannel+0x210>)
    f416:	00c9      	lsls	r1, r1, #3
    f418:	440b      	add	r3, r1
    f41a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    f41e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f422:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f426:	9a00      	ldr	r2, [sp, #0]
    f428:	6912      	ldr	r2, [r2, #16]
    f42a:	4809      	ldr	r0, [pc, #36]	; (f450 <Ftm_Pwm_Ip_InitChannel+0x210>)
    f42c:	00c9      	lsls	r1, r1, #3
    f42e:	440b      	add	r3, r1
    f430:	00db      	lsls	r3, r3, #3
    f432:	4403      	add	r3, r0
    f434:	605a      	str	r2, [r3, #4]
    }

}
    f436:	bf00      	nop
    f438:	b005      	add	sp, #20
    f43a:	f85d fb04 	ldr.w	pc, [sp], #4
    f43e:	bf00      	nop
    f440:	00019fc0 	.word	0x00019fc0
    f444:	1fff9004 	.word	0x1fff9004
    f448:	1fff8e34 	.word	0x1fff8e34
    f44c:	1fff90a4 	.word	0x1fff90a4
    f450:	1fff8ed4 	.word	0x1fff8ed4

0000f454 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    f454:	b500      	push	{lr}
    f456:	b085      	sub	sp, #20
    f458:	4603      	mov	r3, r0
    f45a:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f45e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f462:	4a1c      	ldr	r2, [pc, #112]	; (f4d4 <Ftm_Pwm_Ip_DeInitInstance+0x80>)
    f464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f468:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f46a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f46e:	2b03      	cmp	r3, #3
    f470:	bf94      	ite	ls
    f472:	2301      	movls	r3, #1
    f474:	2300      	movhi	r3, #0
    f476:	b2db      	uxtb	r3, r3
    f478:	4618      	mov	r0, r3
    f47a:	f7f1 fa37 	bl	8ec <DevAssert>
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    f47e:	2100      	movs	r1, #0
    f480:	9803      	ldr	r0, [sp, #12]
    f482:	f7fd ffda 	bl	d43a <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    f486:	2100      	movs	r1, #0
    f488:	9803      	ldr	r0, [sp, #12]
    f48a:	f7fe fbbf 	bl	dc0c <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    f48e:	2101      	movs	r1, #1
    f490:	9803      	ldr	r0, [sp, #12]
    f492:	f7fe fb9d 	bl	dbd0 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    f496:	2100      	movs	r1, #0
    f498:	9803      	ldr	r0, [sp, #12]
    f49a:	f7fe fb86 	bl	dbaa <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    f49e:	2100      	movs	r1, #0
    f4a0:	9803      	ldr	r0, [sp, #12]
    f4a2:	f7fe fc45 	bl	dd30 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    f4a6:	2100      	movs	r1, #0
    f4a8:	9803      	ldr	r0, [sp, #12]
    f4aa:	f7fd fffb 	bl	d4a4 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    f4ae:	2100      	movs	r1, #0
    f4b0:	9803      	ldr	r0, [sp, #12]
    f4b2:	f7fe f83c 	bl	d52e <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    f4b6:	2100      	movs	r1, #0
    f4b8:	9803      	ldr	r0, [sp, #12]
    f4ba:	f7fe f827 	bl	d50c <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    f4be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4c2:	4a05      	ldr	r2, [pc, #20]	; (f4d8 <Ftm_Pwm_Ip_DeInitInstance+0x84>)
    f4c4:	2100      	movs	r1, #0
    f4c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    f4ca:	bf00      	nop
    f4cc:	b005      	add	sp, #20
    f4ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f4d2:	bf00      	nop
    f4d4:	00019fc0 	.word	0x00019fc0
    f4d8:	1fff8ff4 	.word	0x1fff8ff4

0000f4dc <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    f4dc:	b500      	push	{lr}
    f4de:	b085      	sub	sp, #20
    f4e0:	4603      	mov	r3, r0
    f4e2:	460a      	mov	r2, r1
    f4e4:	f88d 3007 	strb.w	r3, [sp, #7]
    f4e8:	4613      	mov	r3, r2
    f4ea:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f4ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4f2:	4a2e      	ldr	r2, [pc, #184]	; (f5ac <Ftm_Pwm_Ip_DeInitChannel+0xd0>)
    f4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f8:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    f4fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f4fe:	085b      	lsrs	r3, r3, #1
    f500:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f508:	2b03      	cmp	r3, #3
    f50a:	bf94      	ite	ls
    f50c:	2301      	movls	r3, #1
    f50e:	2300      	movhi	r3, #0
    f510:	b2db      	uxtb	r3, r3
    f512:	4618      	mov	r0, r3
    f514:	f7f1 f9ea 	bl	8ec <DevAssert>
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    f518:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f51c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f520:	4611      	mov	r1, r2
    f522:	4618      	mov	r0, r3
    f524:	f7ff fae2 	bl	eaec <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    f528:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f52c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f530:	491f      	ldr	r1, [pc, #124]	; (f5b0 <Ftm_Pwm_Ip_DeInitChannel+0xd4>)
    f532:	00d2      	lsls	r2, r2, #3
    f534:	4413      	add	r3, r2
    f536:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    f53a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f53e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f542:	2301      	movs	r3, #1
    f544:	f000 fa92 	bl	fa6c <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    f548:	2100      	movs	r1, #0
    f54a:	9803      	ldr	r0, [sp, #12]
    f54c:	f7fe f9db 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    f550:	2101      	movs	r1, #1
    f552:	9803      	ldr	r0, [sp, #12]
    f554:	f7fe f99c 	bl	d890 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    f558:	2101      	movs	r1, #1
    f55a:	9803      	ldr	r0, [sp, #12]
    f55c:	f7fe fcb7 	bl	dece <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    f560:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f564:	2200      	movs	r2, #0
    f566:	4619      	mov	r1, r3
    f568:	9803      	ldr	r0, [sp, #12]
    f56a:	f7fe fa04 	bl	d976 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f56e:	2101      	movs	r1, #1
    f570:	9803      	ldr	r0, [sp, #12]
    f572:	f7fe f9c8 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f576:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f57a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f57e:	005b      	lsls	r3, r3, #1
    f580:	490c      	ldr	r1, [pc, #48]	; (f5b4 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f582:	00d2      	lsls	r2, r2, #3
    f584:	440a      	add	r2, r1
    f586:	4413      	add	r3, r2
    f588:	2200      	movs	r2, #0
    f58a:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f58c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f590:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f594:	005b      	lsls	r3, r3, #1
    f596:	3301      	adds	r3, #1
    f598:	4906      	ldr	r1, [pc, #24]	; (f5b4 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f59a:	00d2      	lsls	r2, r2, #3
    f59c:	440a      	add	r2, r1
    f59e:	4413      	add	r3, r2
    f5a0:	2200      	movs	r2, #0
    f5a2:	701a      	strb	r2, [r3, #0]

}
    f5a4:	bf00      	nop
    f5a6:	b005      	add	sp, #20
    f5a8:	f85d fb04 	ldr.w	pc, [sp], #4
    f5ac:	00019fc0 	.word	0x00019fc0
    f5b0:	1fff90a4 	.word	0x1fff90a4
    f5b4:	1fff9084 	.word	0x1fff9084

0000f5b8 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    f5b8:	b500      	push	{lr}
    f5ba:	b085      	sub	sp, #20
    f5bc:	4603      	mov	r3, r0
    f5be:	9100      	str	r1, [sp, #0]
    f5c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f5c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5c8:	4a15      	ldr	r2, [pc, #84]	; (f620 <Ftm_Pwm_Ip_InitChFault+0x68>)
    f5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5ce:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    f5d0:	9b00      	ldr	r3, [sp, #0]
    f5d2:	7819      	ldrb	r1, [r3, #0]
    f5d4:	9b00      	ldr	r3, [sp, #0]
    f5d6:	685b      	ldr	r3, [r3, #4]
    f5d8:	461a      	mov	r2, r3
    f5da:	9803      	ldr	r0, [sp, #12]
    f5dc:	f7ff f890 	bl	e700 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    f5e0:	9b00      	ldr	r3, [sp, #0]
    f5e2:	7819      	ldrb	r1, [r3, #0]
    f5e4:	9b00      	ldr	r3, [sp, #0]
    f5e6:	7a1b      	ldrb	r3, [r3, #8]
    f5e8:	461a      	mov	r2, r3
    f5ea:	9803      	ldr	r0, [sp, #12]
    f5ec:	f7ff f8cf 	bl	e78e <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    f5f0:	9b00      	ldr	r3, [sp, #0]
    f5f2:	781b      	ldrb	r3, [r3, #0]
    f5f4:	2201      	movs	r2, #1
    f5f6:	4619      	mov	r1, r3
    f5f8:	9803      	ldr	r0, [sp, #12]
    f5fa:	f7ff f8a4 	bl	e746 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    f5fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f602:	9a00      	ldr	r2, [sp, #0]
    f604:	7812      	ldrb	r2, [r2, #0]
    f606:	4610      	mov	r0, r2
    f608:	9a00      	ldr	r2, [sp, #0]
    f60a:	68d2      	ldr	r2, [r2, #12]
    f60c:	4905      	ldr	r1, [pc, #20]	; (f624 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    f60e:	009b      	lsls	r3, r3, #2
    f610:	4403      	add	r3, r0
    f612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f616:	bf00      	nop
    f618:	b005      	add	sp, #20
    f61a:	f85d fb04 	ldr.w	pc, [sp], #4
    f61e:	bf00      	nop
    f620:	00019fc0 	.word	0x00019fc0
    f624:	1fff8e94 	.word	0x1fff8e94

0000f628 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    f628:	b500      	push	{lr}
    f62a:	b085      	sub	sp, #20
    f62c:	4603      	mov	r3, r0
    f62e:	9100      	str	r1, [sp, #0]
    f630:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    f634:	2300      	movs	r3, #0
    f636:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f63a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f63e:	2b03      	cmp	r3, #3
    f640:	bf94      	ite	ls
    f642:	2301      	movls	r3, #1
    f644:	2300      	movhi	r3, #0
    f646:	b2db      	uxtb	r3, r3
    f648:	4618      	mov	r0, r3
    f64a:	f7f1 f94f 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserCfg);
    f64e:	9b00      	ldr	r3, [sp, #0]
    f650:	2b00      	cmp	r3, #0
    f652:	bf14      	ite	ne
    f654:	2301      	movne	r3, #1
    f656:	2300      	moveq	r3, #0
    f658:	b2db      	uxtb	r3, r3
    f65a:	4618      	mov	r0, r3
    f65c:	f7f1 f946 	bl	8ec <DevAssert>
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    f660:	4b29      	ldr	r3, [pc, #164]	; (f708 <Ftm_Pwm_Ip_Init+0xe0>)
    f662:	2200      	movs	r2, #0
    f664:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    f666:	9b00      	ldr	r3, [sp, #0]
    f668:	681a      	ldr	r2, [r3, #0]
    f66a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f66e:	4611      	mov	r1, r2
    f670:	4618      	mov	r0, r3
    f672:	f7ff fc39 	bl	eee8 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f676:	2300      	movs	r3, #0
    f678:	f88d 300f 	strb.w	r3, [sp, #15]
    f67c:	e011      	b.n	f6a2 <Ftm_Pwm_Ip_Init+0x7a>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    f67e:	9b00      	ldr	r3, [sp, #0]
    f680:	685a      	ldr	r2, [r3, #4]
    f682:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f686:	009b      	lsls	r3, r3, #2
    f688:	4413      	add	r3, r2
    f68a:	681a      	ldr	r2, [r3, #0]
    f68c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f690:	4611      	mov	r1, r2
    f692:	4618      	mov	r0, r3
    f694:	f7ff fdd4 	bl	f240 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f698:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f69c:	3301      	adds	r3, #1
    f69e:	f88d 300f 	strb.w	r3, [sp, #15]
    f6a2:	9b00      	ldr	r3, [sp, #0]
    f6a4:	7a1b      	ldrb	r3, [r3, #8]
    f6a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f6aa:	429a      	cmp	r2, r3
    f6ac:	d3e7      	bcc.n	f67e <Ftm_Pwm_Ip_Init+0x56>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    f6ae:	9b00      	ldr	r3, [sp, #0]
    f6b0:	7c1b      	ldrb	r3, [r3, #16]
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d01b      	beq.n	f6ee <Ftm_Pwm_Ip_Init+0xc6>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f6b6:	2300      	movs	r3, #0
    f6b8:	f88d 300f 	strb.w	r3, [sp, #15]
    f6bc:	e011      	b.n	f6e2 <Ftm_Pwm_Ip_Init+0xba>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    f6be:	9b00      	ldr	r3, [sp, #0]
    f6c0:	68da      	ldr	r2, [r3, #12]
    f6c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f6c6:	009b      	lsls	r3, r3, #2
    f6c8:	4413      	add	r3, r2
    f6ca:	681a      	ldr	r2, [r3, #0]
    f6cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6d0:	4611      	mov	r1, r2
    f6d2:	4618      	mov	r0, r3
    f6d4:	f7ff ff70 	bl	f5b8 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f6d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f6dc:	3301      	adds	r3, #1
    f6de:	f88d 300f 	strb.w	r3, [sp, #15]
    f6e2:	9b00      	ldr	r3, [sp, #0]
    f6e4:	7c1b      	ldrb	r3, [r3, #16]
    f6e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f6ea:	429a      	cmp	r2, r3
    f6ec:	d3e7      	bcc.n	f6be <Ftm_Pwm_Ip_Init+0x96>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    f6ee:	9b00      	ldr	r3, [sp, #0]
    f6f0:	681a      	ldr	r2, [r3, #0]
    f6f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6f6:	4611      	mov	r1, r2
    f6f8:	4618      	mov	r0, r3
    f6fa:	f7ff fc9d 	bl	f038 <Ftm_Pwm_Ip_InitInstanceStart>
}
    f6fe:	bf00      	nop
    f700:	b005      	add	sp, #20
    f702:	f85d fb04 	ldr.w	pc, [sp], #4
    f706:	bf00      	nop
    f708:	1fff8e28 	.word	0x1fff8e28

0000f70c <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    f70c:	b500      	push	{lr}
    f70e:	b085      	sub	sp, #20
    f710:	4603      	mov	r3, r0
    f712:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f716:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f71a:	4a23      	ldr	r2, [pc, #140]	; (f7a8 <Ftm_Pwm_Ip_DeInit+0x9c>)
    f71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f720:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    f722:	2300      	movs	r3, #0
    f724:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f728:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f72c:	2b03      	cmp	r3, #3
    f72e:	bf94      	ite	ls
    f730:	2301      	movls	r3, #1
    f732:	2300      	movhi	r3, #0
    f734:	b2db      	uxtb	r3, r3
    f736:	4618      	mov	r0, r3
    f738:	f7f1 f8d8 	bl	8ec <DevAssert>
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    f73c:	9802      	ldr	r0, [sp, #8]
    f73e:	f7fe fe87 	bl	e450 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f742:	2300      	movs	r3, #0
    f744:	f88d 300f 	strb.w	r3, [sp, #15]
    f748:	e021      	b.n	f78e <Ftm_Pwm_Ip_DeInit+0x82>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    f74a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f74e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f752:	4916      	ldr	r1, [pc, #88]	; (f7ac <Ftm_Pwm_Ip_DeInit+0xa0>)
    f754:	00d2      	lsls	r2, r2, #3
    f756:	4413      	add	r3, r2
    f758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f75c:	2b00      	cmp	r3, #0
    f75e:	d011      	beq.n	f784 <Ftm_Pwm_Ip_DeInit+0x78>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    f760:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f764:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f768:	4611      	mov	r1, r2
    f76a:	4618      	mov	r0, r3
    f76c:	f7ff feb6 	bl	f4dc <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    f770:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f774:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f778:	490c      	ldr	r1, [pc, #48]	; (f7ac <Ftm_Pwm_Ip_DeInit+0xa0>)
    f77a:	00d2      	lsls	r2, r2, #3
    f77c:	4413      	add	r3, r2
    f77e:	2200      	movs	r2, #0
    f780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f784:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f788:	3301      	adds	r3, #1
    f78a:	f88d 300f 	strb.w	r3, [sp, #15]
    f78e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f792:	2b07      	cmp	r3, #7
    f794:	d9d9      	bls.n	f74a <Ftm_Pwm_Ip_DeInit+0x3e>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    f796:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f79a:	4618      	mov	r0, r3
    f79c:	f7ff fe5a 	bl	f454 <Ftm_Pwm_Ip_DeInitInstance>
}
    f7a0:	bf00      	nop
    f7a2:	b005      	add	sp, #20
    f7a4:	f85d fb04 	ldr.w	pc, [sp], #4
    f7a8:	00019fc0 	.word	0x00019fc0
    f7ac:	1fff9004 	.word	0x1fff9004

0000f7b0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    f7b0:	b510      	push	{r4, lr}
    f7b2:	b088      	sub	sp, #32
    f7b4:	4604      	mov	r4, r0
    f7b6:	4608      	mov	r0, r1
    f7b8:	4611      	mov	r1, r2
    f7ba:	461a      	mov	r2, r3
    f7bc:	4623      	mov	r3, r4
    f7be:	f88d 300f 	strb.w	r3, [sp, #15]
    f7c2:	4603      	mov	r3, r0
    f7c4:	f88d 300e 	strb.w	r3, [sp, #14]
    f7c8:	460b      	mov	r3, r1
    f7ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    f7ce:	4613      	mov	r3, r2
    f7d0:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f7d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f7d8:	4a5e      	ldr	r2, [pc, #376]	; (f954 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a4>)
    f7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7de:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    f7e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    f7e4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    f7e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f7ec:	085b      	lsrs	r3, r3, #1
    f7ee:	f88d 3019 	strb.w	r3, [sp, #25]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f7f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f7f6:	2b03      	cmp	r3, #3
    f7f8:	bf94      	ite	ls
    f7fa:	2301      	movls	r3, #1
    f7fc:	2300      	movhi	r3, #0
    f7fe:	b2db      	uxtb	r3, r3
    f800:	4618      	mov	r0, r3
    f802:	f7f1 f873 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    f806:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f80a:	2b07      	cmp	r3, #7
    f80c:	bf94      	ite	ls
    f80e:	2301      	movls	r3, #1
    f810:	2300      	movhi	r3, #0
    f812:	b2db      	uxtb	r3, r3
    f814:	4618      	mov	r0, r3
    f816:	f7f1 f869 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    f81a:	f007 f86b 	bl	168f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    f81e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f822:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f826:	494c      	ldr	r1, [pc, #304]	; (f958 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a8>)
    f828:	00d2      	lsls	r2, r2, #3
    f82a:	4413      	add	r3, r2
    f82c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f830:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    f834:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f838:	4619      	mov	r1, r3
    f83a:	9807      	ldr	r0, [sp, #28]
    f83c:	f7fe fd18 	bl	e270 <Ftm_Pwm_Ip_GetChannelMode>
    f840:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    f842:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f846:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f84a:	4944      	ldr	r1, [pc, #272]	; (f95c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    f84c:	00d2      	lsls	r2, r2, #3
    f84e:	4413      	add	r3, r2
    f850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f854:	2b02      	cmp	r3, #2
    f856:	d111      	bne.n	f87c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xcc>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f858:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f85c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f860:	493e      	ldr	r1, [pc, #248]	; (f95c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    f862:	00d2      	lsls	r2, r2, #3
    f864:	4413      	add	r3, r2
    f866:	2201      	movs	r2, #1
    f868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    f86c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f870:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f874:	2300      	movs	r3, #0
    f876:	2200      	movs	r2, #0
    f878:	f000 f8f8 	bl	fa6c <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    f87c:	9b05      	ldr	r3, [sp, #20]
    f87e:	2b0a      	cmp	r3, #10
    f880:	d008      	beq.n	f894 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
    f882:	9b05      	ldr	r3, [sp, #20]
    f884:	2b09      	cmp	r3, #9
    f886:	d005      	beq.n	f894 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    f888:	9b05      	ldr	r3, [sp, #20]
    f88a:	2b12      	cmp	r3, #18
    f88c:	d002      	beq.n	f894 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    f88e:	9b05      	ldr	r3, [sp, #20]
    f890:	2b11      	cmp	r3, #17
    f892:	d10c      	bne.n	f8ae <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xfe>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f894:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f898:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f89c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f8a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f8a4:	9300      	str	r3, [sp, #0]
    f8a6:	2300      	movs	r3, #0
    f8a8:	f000 f9ba 	bl	fc20 <Ftm_Pwm_Ip_UpdatePwmChannel>
    f8ac:	e04c      	b.n	f948 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    f8ae:	9b05      	ldr	r3, [sp, #20]
    f8b0:	2b22      	cmp	r3, #34	; 0x22
    f8b2:	d008      	beq.n	f8c6 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
    f8b4:	9b05      	ldr	r3, [sp, #20]
    f8b6:	2b62      	cmp	r3, #98	; 0x62
    f8b8:	d005      	beq.n	f8c6 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    f8ba:	9b05      	ldr	r3, [sp, #20]
    f8bc:	2b61      	cmp	r3, #97	; 0x61
    f8be:	d002      	beq.n	f8c6 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    f8c0:	9b05      	ldr	r3, [sp, #20]
    f8c2:	2b21      	cmp	r3, #33	; 0x21
    f8c4:	d140      	bne.n	f948 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    f8c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8ca:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f8ce:	4924      	ldr	r1, [pc, #144]	; (f960 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f8d0:	0092      	lsls	r2, r2, #2
    f8d2:	4413      	add	r3, r2
    f8d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f8d8:	2b00      	cmp	r3, #0
    f8da:	d10d      	bne.n	f8f8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x148>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f8dc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f8e0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f8e4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f8e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f8ec:	9300      	str	r3, [sp, #0]
    f8ee:	4613      	mov	r3, r2
    f8f0:	2200      	movs	r2, #0
    f8f2:	f000 f995 	bl	fc20 <Ftm_Pwm_Ip_UpdatePwmChannel>
    f8f6:	e027      	b.n	f948 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    f8f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8fc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f900:	4917      	ldr	r1, [pc, #92]	; (f960 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f902:	0092      	lsls	r2, r2, #2
    f904:	4413      	add	r3, r2
    f906:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f90a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f90e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f912:	4618      	mov	r0, r3
    f914:	f7fe fff6 	bl	e904 <Ftm_Pwm_Ip_CalculatePhaseShift>
    f918:	4603      	mov	r3, r0
    f91a:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f91e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f922:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f926:	490e      	ldr	r1, [pc, #56]	; (f960 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f928:	0092      	lsls	r2, r2, #2
    f92a:	4413      	add	r3, r2
    f92c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f930:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    f934:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f938:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f93c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f940:	9300      	str	r3, [sp, #0]
    f942:	4623      	mov	r3, r4
    f944:	f000 f96c 	bl	fc20 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    f948:	f007 f800 	bl	1694c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    f94c:	bf00      	nop
    f94e:	b008      	add	sp, #32
    f950:	bd10      	pop	{r4, pc}
    f952:	bf00      	nop
    f954:	00019fc0 	.word	0x00019fc0
    f958:	1fff8e34 	.word	0x1fff8e34
    f95c:	1fff9004 	.word	0x1fff9004
    f960:	1fff8e74 	.word	0x1fff8e74

0000f964 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    f964:	b510      	push	{r4, lr}
    f966:	b084      	sub	sp, #16
    f968:	4604      	mov	r4, r0
    f96a:	4608      	mov	r0, r1
    f96c:	4611      	mov	r1, r2
    f96e:	461a      	mov	r2, r3
    f970:	4623      	mov	r3, r4
    f972:	f88d 3007 	strb.w	r3, [sp, #7]
    f976:	4603      	mov	r3, r0
    f978:	f88d 3006 	strb.w	r3, [sp, #6]
    f97c:	460b      	mov	r3, r1
    f97e:	f8ad 3004 	strh.w	r3, [sp, #4]
    f982:	4613      	mov	r3, r2
    f984:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    f988:	2300      	movs	r3, #0
    f98a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f98e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f992:	4a33      	ldr	r2, [pc, #204]	; (fa60 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xfc>)
    f994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f998:	9302      	str	r3, [sp, #8]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f99a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f99e:	2b03      	cmp	r3, #3
    f9a0:	bf94      	ite	ls
    f9a2:	2301      	movls	r3, #1
    f9a4:	2300      	movhi	r3, #0
    f9a6:	b2db      	uxtb	r3, r3
    f9a8:	4618      	mov	r0, r3
    f9aa:	f7f0 ff9f 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    f9ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f9b2:	2b07      	cmp	r3, #7
    f9b4:	bf94      	ite	ls
    f9b6:	2301      	movls	r3, #1
    f9b8:	2300      	movhi	r3, #0
    f9ba:	b2db      	uxtb	r3, r3
    f9bc:	4618      	mov	r0, r3
    f9be:	f7f0 ff95 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    f9c2:	f006 ffe9 	bl	16998 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    f9c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f9ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f9ce:	4925      	ldr	r1, [pc, #148]	; (fa64 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    f9d0:	00d2      	lsls	r2, r2, #3
    f9d2:	4413      	add	r3, r2
    f9d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f9d8:	2b02      	cmp	r3, #2
    f9da:	d111      	bne.n	fa00 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x9c>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f9dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f9e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f9e4:	491f      	ldr	r1, [pc, #124]	; (fa64 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    f9e6:	00d2      	lsls	r2, r2, #3
    f9e8:	4413      	add	r3, r2
    f9ea:	2201      	movs	r2, #1
    f9ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    f9f0:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f9f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f9f8:	2300      	movs	r3, #0
    f9fa:	2200      	movs	r2, #0
    f9fc:	f000 f836 	bl	fa6c <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    fa00:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fa04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa08:	2200      	movs	r2, #0
    fa0a:	4618      	mov	r0, r3
    fa0c:	f000 f9b0 	bl	fd70 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    fa10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa14:	4914      	ldr	r1, [pc, #80]	; (fa68 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x104>)
    fa16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fa1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    fa1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fa22:	2b00      	cmp	r3, #0
    fa24:	d103      	bne.n	fa2e <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xca>
    {
        TempDutyCycle = (uint16)0U;
    fa26:	2300      	movs	r3, #0
    fa28:	f8ad 300e 	strh.w	r3, [sp, #14]
    fa2c:	e003      	b.n	fa36 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd2>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    fa2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fa32:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    fa36:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fa3a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fa3e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    fa42:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fa46:	f7ff feb3 	bl	f7b0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fa4a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fa4e:	4619      	mov	r1, r3
    fa50:	9802      	ldr	r0, [sp, #8]
    fa52:	f7fd ff58 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    fa56:	f006 ffcb 	bl	169f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    fa5a:	bf00      	nop
    fa5c:	b004      	add	sp, #16
    fa5e:	bd10      	pop	{r4, pc}
    fa60:	00019fc0 	.word	0x00019fc0
    fa64:	1fff9004 	.word	0x1fff9004
    fa68:	1fff8e2c 	.word	0x1fff8e2c

0000fa6c <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    fa6c:	b500      	push	{lr}
    fa6e:	b089      	sub	sp, #36	; 0x24
    fa70:	9200      	str	r2, [sp, #0]
    fa72:	461a      	mov	r2, r3
    fa74:	4603      	mov	r3, r0
    fa76:	f88d 3007 	strb.w	r3, [sp, #7]
    fa7a:	460b      	mov	r3, r1
    fa7c:	f88d 3006 	strb.w	r3, [sp, #6]
    fa80:	4613      	mov	r3, r2
    fa82:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fa86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa8a:	4a62      	ldr	r2, [pc, #392]	; (fc14 <Ftm_Pwm_Ip_SwOutputControl+0x1a8>)
    fa8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa90:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    fa92:	2300      	movs	r3, #0
    fa94:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    fa98:	2300      	movs	r3, #0
    fa9a:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    fa9e:	2300      	movs	r3, #0
    faa0:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    faa4:	2300      	movs	r3, #0
    faa6:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    faaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    faae:	4619      	mov	r1, r3
    fab0:	9805      	ldr	r0, [sp, #20]
    fab2:	f7fe fbdd 	bl	e270 <Ftm_Pwm_Ip_GetChannelMode>
    fab6:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    fab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fabc:	2b03      	cmp	r3, #3
    fabe:	bf94      	ite	ls
    fac0:	2301      	movls	r3, #1
    fac2:	2300      	movhi	r3, #0
    fac4:	b2db      	uxtb	r3, r3
    fac6:	4618      	mov	r0, r3
    fac8:	f7f0 ff10 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    facc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fad0:	2b07      	cmp	r3, #7
    fad2:	bf94      	ite	ls
    fad4:	2301      	movls	r3, #1
    fad6:	2300      	movhi	r3, #0
    fad8:	b2db      	uxtb	r3, r3
    fada:	4618      	mov	r0, r3
    fadc:	f7f0 ff06 	bl	8ec <DevAssert>
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fae0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fae4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fae8:	494b      	ldr	r1, [pc, #300]	; (fc18 <Ftm_Pwm_Ip_SwOutputControl+0x1ac>)
    faea:	00d2      	lsls	r2, r2, #3
    faec:	4413      	add	r3, r2
    faee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    faf2:	2b02      	cmp	r3, #2
    faf4:	d109      	bne.n	fb0a <Ftm_Pwm_Ip_SwOutputControl+0x9e>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    faf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fafa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fafe:	4947      	ldr	r1, [pc, #284]	; (fc1c <Ftm_Pwm_Ip_SwOutputControl+0x1b0>)
    fb00:	00d2      	lsls	r2, r2, #3
    fb02:	4413      	add	r3, r2
    fb04:	2200      	movs	r2, #0
    fb06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    fb0a:	9805      	ldr	r0, [sp, #20]
    fb0c:	f7fe fb57 	bl	e1be <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    fb10:	4603      	mov	r3, r0
    fb12:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    fb16:	9b03      	ldr	r3, [sp, #12]
    fb18:	2b22      	cmp	r3, #34	; 0x22
    fb1a:	d008      	beq.n	fb2e <Ftm_Pwm_Ip_SwOutputControl+0xc2>
    fb1c:	9b03      	ldr	r3, [sp, #12]
    fb1e:	2b62      	cmp	r3, #98	; 0x62
    fb20:	d005      	beq.n	fb2e <Ftm_Pwm_Ip_SwOutputControl+0xc2>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fb22:	9b03      	ldr	r3, [sp, #12]
    fb24:	2b61      	cmp	r3, #97	; 0x61
    fb26:	d002      	beq.n	fb2e <Ftm_Pwm_Ip_SwOutputControl+0xc2>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    fb28:	9b03      	ldr	r3, [sp, #12]
    fb2a:	2b21      	cmp	r3, #33	; 0x21
    fb2c:	d103      	bne.n	fb36 <Ftm_Pwm_Ip_SwOutputControl+0xca>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    fb2e:	2303      	movs	r3, #3
    fb30:	f8ad 301c 	strh.w	r3, [sp, #28]
    fb34:	e002      	b.n	fb3c <Ftm_Pwm_Ip_SwOutputControl+0xd0>
    }
    else
    {
        ChannelMask = (uint16)1U;
    fb36:	2301      	movs	r3, #1
    fb38:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    fb3c:	9805      	ldr	r0, [sp, #20]
    fb3e:	f7fe fb47 	bl	e1d0 <Ftm_Pwm_Ip_GetPolInstance>
    fb42:	4603      	mov	r3, r0
    fb44:	4619      	mov	r1, r3
    fb46:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb4e:	fa02 f303 	lsl.w	r3, r2, r3
    fb52:	b29b      	uxth	r3, r3
    fb54:	400b      	ands	r3, r1
    fb56:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    fb5a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fb5e:	021b      	lsls	r3, r3, #8
    fb60:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    fb64:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb6c:	3308      	adds	r3, #8
    fb6e:	fa02 f303 	lsl.w	r3, r2, r3
    fb72:	b29b      	uxth	r3, r3
    fb74:	43db      	mvns	r3, r3
    fb76:	b29a      	uxth	r2, r3
    fb78:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fb7c:	4013      	ands	r3, r2
    fb7e:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    fb82:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fb86:	2b00      	cmp	r3, #0
    fb88:	d027      	beq.n	fbda <Ftm_Pwm_Ip_SwOutputControl+0x16e>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    fb8a:	9b00      	ldr	r3, [sp, #0]
    fb8c:	2b01      	cmp	r3, #1
    fb8e:	d109      	bne.n	fba4 <Ftm_Pwm_Ip_SwOutputControl+0x138>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    fb90:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb98:	3308      	adds	r3, #8
    fb9a:	fa02 f303 	lsl.w	r3, r2, r3
    fb9e:	f8ad 301a 	strh.w	r3, [sp, #26]
    fba2:	e002      	b.n	fbaa <Ftm_Pwm_Ip_SwOutputControl+0x13e>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    fba4:	2300      	movs	r3, #0
    fba6:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    fbaa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    fbae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fbb2:	4053      	eors	r3, r2
    fbb4:	b29a      	uxth	r2, r3
    fbb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fbba:	4313      	orrs	r3, r2
    fbbc:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    fbc0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fbc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fbc8:	fa02 f303 	lsl.w	r3, r2, r3
    fbcc:	b29a      	uxth	r2, r3
    fbce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fbd2:	4313      	orrs	r3, r2
    fbd4:	f8ad 301e 	strh.w	r3, [sp, #30]
    fbd8:	e00d      	b.n	fbf6 <Ftm_Pwm_Ip_SwOutputControl+0x18a>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    fbda:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fbde:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fbe2:	fa02 f303 	lsl.w	r3, r2, r3
    fbe6:	b29b      	uxth	r3, r3
    fbe8:	43db      	mvns	r3, r3
    fbea:	b29a      	uxth	r2, r3
    fbec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fbf0:	4013      	ands	r3, r2
    fbf2:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    fbf6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fbfa:	4619      	mov	r1, r3
    fbfc:	9805      	ldr	r0, [sp, #20]
    fbfe:	f7fe fa7e 	bl	e0fe <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    fc02:	2101      	movs	r1, #1
    fc04:	9805      	ldr	r0, [sp, #20]
    fc06:	f7fd fe7e 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    fc0a:	bf00      	nop
    fc0c:	b009      	add	sp, #36	; 0x24
    fc0e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc12:	bf00      	nop
    fc14:	00019fc0 	.word	0x00019fc0
    fc18:	1fff9004 	.word	0x1fff9004
    fc1c:	1fff8e34 	.word	0x1fff8e34

0000fc20 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    fc20:	b510      	push	{r4, lr}
    fc22:	b086      	sub	sp, #24
    fc24:	4604      	mov	r4, r0
    fc26:	4608      	mov	r0, r1
    fc28:	4611      	mov	r1, r2
    fc2a:	461a      	mov	r2, r3
    fc2c:	4623      	mov	r3, r4
    fc2e:	f88d 3007 	strb.w	r3, [sp, #7]
    fc32:	4603      	mov	r3, r0
    fc34:	f88d 3006 	strb.w	r3, [sp, #6]
    fc38:	460b      	mov	r3, r1
    fc3a:	f8ad 3004 	strh.w	r3, [sp, #4]
    fc3e:	4613      	mov	r3, r2
    fc40:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fc44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc48:	4a47      	ldr	r2, [pc, #284]	; (fd68 <Ftm_Pwm_Ip_UpdatePwmChannel+0x148>)
    fc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc4e:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    fc50:	2300      	movs	r3, #0
    fc52:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    fc54:	2300      	movs	r3, #0
    fc56:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    fc5a:	2300      	movs	r3, #0
    fc5c:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    fc60:	2300      	movs	r3, #0
    fc62:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    fc66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc6a:	085b      	lsrs	r3, r3, #1
    fc6c:	f88d 3009 	strb.w	r3, [sp, #9]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fc70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc74:	2b03      	cmp	r3, #3
    fc76:	bf94      	ite	ls
    fc78:	2301      	movls	r3, #1
    fc7a:	2300      	movhi	r3, #0
    fc7c:	b2db      	uxtb	r3, r3
    fc7e:	4618      	mov	r0, r3
    fc80:	f7f0 fe34 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fc84:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc88:	2b07      	cmp	r3, #7
    fc8a:	bf94      	ite	ls
    fc8c:	2301      	movls	r3, #1
    fc8e:	2300      	movhi	r3, #0
    fc90:	b2db      	uxtb	r3, r3
    fc92:	4618      	mov	r0, r3
    fc94:	f7f0 fe2a 	bl	8ec <DevAssert>
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    fc98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc9c:	4a33      	ldr	r2, [pc, #204]	; (fd6c <Ftm_Pwm_Ip_UpdatePwmChannel+0x14c>)
    fc9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    fca2:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    fca6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fcaa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fcae:	429a      	cmp	r2, r3
    fcb0:	d805      	bhi.n	fcbe <Ftm_Pwm_Ip_UpdatePwmChannel+0x9e>
    fcb2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    fcb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fcba:	429a      	cmp	r2, r3
    fcbc:	d903      	bls.n	fcc6 <Ftm_Pwm_Ip_UpdatePwmChannel+0xa6>
    fcbe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d108      	bne.n	fcd8 <Ftm_Pwm_Ip_UpdatePwmChannel+0xb8>
    {
        HwFirstEdge = FirstEdge;
    fcc6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fcca:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    fcce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fcd2:	f8ad 3010 	strh.w	r3, [sp, #16]
    fcd6:	e001      	b.n	fcdc <Ftm_Pwm_Ip_UpdatePwmChannel+0xbc>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    fcd8:	2301      	movs	r3, #1
    fcda:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    fcdc:	9b05      	ldr	r3, [sp, #20]
    fcde:	2b00      	cmp	r3, #0
    fce0:	d13e      	bne.n	fd60 <Ftm_Pwm_Ip_UpdatePwmChannel+0x140>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    fce2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fce6:	4619      	mov	r1, r3
    fce8:	9803      	ldr	r0, [sp, #12]
    fcea:	f7fd feac 	bl	da46 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    fcee:	4603      	mov	r3, r0
    fcf0:	2b00      	cmp	r3, #0
    fcf2:	d016      	beq.n	fd22 <Ftm_Pwm_Ip_UpdatePwmChannel+0x102>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    fcf4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fcf8:	005b      	lsls	r3, r3, #1
    fcfa:	b2db      	uxtb	r3, r3
    fcfc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    fd00:	4619      	mov	r1, r3
    fd02:	9803      	ldr	r0, [sp, #12]
    fd04:	f7fd fd37 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    fd08:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fd0c:	005b      	lsls	r3, r3, #1
    fd0e:	b2db      	uxtb	r3, r3
    fd10:	3301      	adds	r3, #1
    fd12:	b2db      	uxtb	r3, r3
    fd14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    fd18:	4619      	mov	r1, r3
    fd1a:	9803      	ldr	r0, [sp, #12]
    fd1c:	f7fd fd2b 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>
    fd20:	e018      	b.n	fd54 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    fd22:	9803      	ldr	r0, [sp, #12]
    fd24:	f7fd fbb0 	bl	d488 <Ftm_Pwm_Ip_GetCpwms>
    fd28:	4603      	mov	r3, r0
    fd2a:	2b01      	cmp	r3, #1
    fd2c:	d10a      	bne.n	fd44 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    fd2e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fd32:	085b      	lsrs	r3, r3, #1
    fd34:	b29a      	uxth	r2, r3
    fd36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd3a:	4619      	mov	r1, r3
    fd3c:	9803      	ldr	r0, [sp, #12]
    fd3e:	f7fd fd1a 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>
    fd42:	e007      	b.n	fd54 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    fd44:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    fd48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd4c:	4619      	mov	r1, r3
    fd4e:	9803      	ldr	r0, [sp, #12]
    fd50:	f7fd fd11 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fd54:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fd58:	4619      	mov	r1, r3
    fd5a:	9803      	ldr	r0, [sp, #12]
    fd5c:	f7fd fdd3 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    fd60:	9b05      	ldr	r3, [sp, #20]
}
    fd62:	4618      	mov	r0, r3
    fd64:	b006      	add	sp, #24
    fd66:	bd10      	pop	{r4, pc}
    fd68:	00019fc0 	.word	0x00019fc0
    fd6c:	1fff8e2c 	.word	0x1fff8e2c

0000fd70 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    fd70:	b500      	push	{lr}
    fd72:	b085      	sub	sp, #20
    fd74:	4603      	mov	r3, r0
    fd76:	9100      	str	r1, [sp, #0]
    fd78:	f88d 3007 	strb.w	r3, [sp, #7]
    fd7c:	4613      	mov	r3, r2
    fd7e:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fd82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd86:	4a1b      	ldr	r2, [pc, #108]	; (fdf4 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x84>)
    fd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd8c:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    fd8e:	2300      	movs	r3, #0
    fd90:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fd92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd96:	2b03      	cmp	r3, #3
    fd98:	bf94      	ite	ls
    fd9a:	2301      	movls	r3, #1
    fd9c:	2300      	movhi	r3, #0
    fd9e:	b2db      	uxtb	r3, r3
    fda0:	4618      	mov	r0, r3
    fda2:	f7f0 fda3 	bl	8ec <DevAssert>
#endif
    FtmPeriod = NewValue;
    fda6:	9b00      	ldr	r3, [sp, #0]
    fda8:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    fdaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fdae:	9a00      	ldr	r2, [sp, #0]
    fdb0:	b291      	uxth	r1, r2
    fdb2:	4a11      	ldr	r2, [pc, #68]	; (fdf8 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x88>)
    fdb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    fdb8:	9802      	ldr	r0, [sp, #8]
    fdba:	f7fd fb65 	bl	d488 <Ftm_Pwm_Ip_GetCpwms>
    fdbe:	4603      	mov	r3, r0
    fdc0:	2b01      	cmp	r3, #1
    fdc2:	d103      	bne.n	fdcc <Ftm_Pwm_Ip_UpdatePwmPeriod+0x5c>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    fdc4:	9b03      	ldr	r3, [sp, #12]
    fdc6:	085b      	lsrs	r3, r3, #1
    fdc8:	9303      	str	r3, [sp, #12]
    fdca:	e002      	b.n	fdd2 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x62>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    fdcc:	9b03      	ldr	r3, [sp, #12]
    fdce:	3b01      	subs	r3, #1
    fdd0:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    fdd2:	9b03      	ldr	r3, [sp, #12]
    fdd4:	b29b      	uxth	r3, r3
    fdd6:	4619      	mov	r1, r3
    fdd8:	9802      	ldr	r0, [sp, #8]
    fdda:	f7fd fba8 	bl	d52e <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fdde:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fde2:	4619      	mov	r1, r3
    fde4:	9802      	ldr	r0, [sp, #8]
    fde6:	f7fd fd8e 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    fdea:	2300      	movs	r3, #0
}
    fdec:	4618      	mov	r0, r3
    fdee:	b005      	add	sp, #20
    fdf0:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf4:	00019fc0 	.word	0x00019fc0
    fdf8:	1fff8e2c 	.word	0x1fff8e2c

0000fdfc <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    fdfc:	b500      	push	{lr}
    fdfe:	b085      	sub	sp, #20
    fe00:	4603      	mov	r3, r0
    fe02:	460a      	mov	r2, r1
    fe04:	f88d 3007 	strb.w	r3, [sp, #7]
    fe08:	4613      	mov	r3, r2
    fe0a:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fe0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe12:	4a17      	ldr	r2, [pc, #92]	; (fe70 <Ftm_Pwm_Ip_GetOutputState+0x74>)
    fe14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe18:	9302      	str	r3, [sp, #8]
    Ftm_Pwm_Ip_OutputStateType OutputValue;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fe1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe1e:	2b03      	cmp	r3, #3
    fe20:	bf94      	ite	ls
    fe22:	2301      	movls	r3, #1
    fe24:	2300      	movhi	r3, #0
    fe26:	b2db      	uxtb	r3, r3
    fe28:	4618      	mov	r0, r3
    fe2a:	f7f0 fd5f 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fe2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fe32:	2b07      	cmp	r3, #7
    fe34:	bf94      	ite	ls
    fe36:	2301      	movls	r3, #1
    fe38:	2300      	movhi	r3, #0
    fe3a:	b2db      	uxtb	r3, r3
    fe3c:	4618      	mov	r0, r3
    fe3e:	f7f0 fd55 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    fe42:	f006 fe4d 	bl	16ae0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    fe46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fe4a:	4619      	mov	r1, r3
    fe4c:	9802      	ldr	r0, [sp, #8]
    fe4e:	f7fd fc7c 	bl	d74a <Ftm_Pwm_Ip_GetChOutputValue>
    fe52:	4603      	mov	r3, r0
    fe54:	2b00      	cmp	r3, #0
    fe56:	d002      	beq.n	fe5e <Ftm_Pwm_Ip_GetOutputState+0x62>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    fe58:	2301      	movs	r3, #1
    fe5a:	9303      	str	r3, [sp, #12]
    fe5c:	e001      	b.n	fe62 <Ftm_Pwm_Ip_GetOutputState+0x66>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    fe5e:	2300      	movs	r3, #0
    fe60:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    fe62:	f006 fe69 	bl	16b38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    fe66:	9b03      	ldr	r3, [sp, #12]
}
    fe68:	4618      	mov	r0, r3
    fe6a:	b005      	add	sp, #20
    fe6c:	f85d fb04 	ldr.w	pc, [sp], #4
    fe70:	00019fc0 	.word	0x00019fc0

0000fe74 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    fe74:	b500      	push	{lr}
    fe76:	b087      	sub	sp, #28
    fe78:	4603      	mov	r3, r0
    fe7a:	9100      	str	r1, [sp, #0]
    fe7c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fe80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe84:	4a47      	ldr	r2, [pc, #284]	; (ffa4 <Ftm_Pwm_Ip_DisableNotification+0x130>)
    fe86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8a:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    fe8c:	9b00      	ldr	r3, [sp, #0]
    fe8e:	f88d 3013 	strb.w	r3, [sp, #19]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fe92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe96:	2b03      	cmp	r3, #3
    fe98:	bf94      	ite	ls
    fe9a:	2301      	movls	r3, #1
    fe9c:	2300      	movhi	r3, #0
    fe9e:	b2db      	uxtb	r3, r3
    fea0:	4618      	mov	r0, r3
    fea2:	f7f0 fd23 	bl	8ec <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
    fea6:	9b00      	ldr	r3, [sp, #0]
    fea8:	2b08      	cmp	r3, #8
    feaa:	d00f      	beq.n	fecc <Ftm_Pwm_Ip_DisableNotification+0x58>
    feac:	9b00      	ldr	r3, [sp, #0]
    feae:	2b09      	cmp	r3, #9
    feb0:	d00c      	beq.n	fecc <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
    feb2:	9b00      	ldr	r3, [sp, #0]
    feb4:	2b0a      	cmp	r3, #10
    feb6:	d009      	beq.n	fecc <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    feb8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    febc:	2b07      	cmp	r3, #7
    febe:	bf94      	ite	ls
    fec0:	2301      	movls	r3, #1
    fec2:	2300      	movhi	r3, #0
    fec4:	b2db      	uxtb	r3, r3
    fec6:	4618      	mov	r0, r3
    fec8:	f7f0 fd10 	bl	8ec <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    fecc:	f006 fe5a 	bl	16b84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    fed0:	9b00      	ldr	r3, [sp, #0]
    fed2:	2b00      	cmp	r3, #0
    fed4:	d014      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
    fed6:	9b00      	ldr	r3, [sp, #0]
    fed8:	2b01      	cmp	r3, #1
    feda:	d011      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    fedc:	9b00      	ldr	r3, [sp, #0]
    fede:	2b02      	cmp	r3, #2
    fee0:	d00e      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    fee2:	9b00      	ldr	r3, [sp, #0]
    fee4:	2b03      	cmp	r3, #3
    fee6:	d00b      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    fee8:	9b00      	ldr	r3, [sp, #0]
    feea:	2b04      	cmp	r3, #4
    feec:	d008      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    feee:	9b00      	ldr	r3, [sp, #0]
    fef0:	2b05      	cmp	r3, #5
    fef2:	d005      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    fef4:	9b00      	ldr	r3, [sp, #0]
    fef6:	2b06      	cmp	r3, #6
    fef8:	d002      	beq.n	ff00 <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    fefa:	9b00      	ldr	r3, [sp, #0]
    fefc:	2b07      	cmp	r3, #7
    fefe:	d136      	bne.n	ff6e <Ftm_Pwm_Ip_DisableNotification+0xfa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    ff00:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ff04:	085b      	lsrs	r3, r3, #1
    ff06:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    ff0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ff0e:	4619      	mov	r1, r3
    ff10:	9805      	ldr	r0, [sp, #20]
    ff12:	f7fe f9ad 	bl	e270 <Ftm_Pwm_Ip_GetChannelMode>
    ff16:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    ff18:	f89d 2013 	ldrb.w	r2, [sp, #19]
    ff1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff20:	4611      	mov	r1, r2
    ff22:	4618      	mov	r0, r3
    ff24:	f7fe fde2 	bl	eaec <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ff28:	9b03      	ldr	r3, [sp, #12]
    ff2a:	2b22      	cmp	r3, #34	; 0x22
    ff2c:	d008      	beq.n	ff40 <Ftm_Pwm_Ip_DisableNotification+0xcc>
    ff2e:	9b03      	ldr	r3, [sp, #12]
    ff30:	2b62      	cmp	r3, #98	; 0x62
    ff32:	d005      	beq.n	ff40 <Ftm_Pwm_Ip_DisableNotification+0xcc>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    ff34:	9b03      	ldr	r3, [sp, #12]
    ff36:	2b61      	cmp	r3, #97	; 0x61
    ff38:	d002      	beq.n	ff40 <Ftm_Pwm_Ip_DisableNotification+0xcc>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    ff3a:	9b03      	ldr	r3, [sp, #12]
    ff3c:	2b21      	cmp	r3, #33	; 0x21
    ff3e:	d129      	bne.n	ff94 <Ftm_Pwm_Ip_DisableNotification+0x120>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    ff40:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ff44:	005b      	lsls	r3, r3, #1
    ff46:	b2da      	uxtb	r2, r3
    ff48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff4c:	4611      	mov	r1, r2
    ff4e:	4618      	mov	r0, r3
    ff50:	f7fe fdcc 	bl	eaec <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    ff54:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ff58:	005b      	lsls	r3, r3, #1
    ff5a:	b2db      	uxtb	r3, r3
    ff5c:	3301      	adds	r3, #1
    ff5e:	b2da      	uxtb	r2, r3
    ff60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff64:	4611      	mov	r1, r2
    ff66:	4618      	mov	r0, r3
    ff68:	f7fe fdc0 	bl	eaec <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ff6c:	e012      	b.n	ff94 <Ftm_Pwm_Ip_DisableNotification+0x120>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    ff6e:	9b00      	ldr	r3, [sp, #0]
    ff70:	2b0a      	cmp	r3, #10
    ff72:	d107      	bne.n	ff84 <Ftm_Pwm_Ip_DisableNotification+0x110>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    ff74:	2100      	movs	r1, #0
    ff76:	9805      	ldr	r0, [sp, #20]
    ff78:	f7fe fb79 	bl	e66e <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    ff7c:	9805      	ldr	r0, [sp, #20]
    ff7e:	f7fe fb8c 	bl	e69a <Ftm_Pwm_Ip_ClearFaultFlag>
    ff82:	e008      	b.n	ff96 <Ftm_Pwm_Ip_DisableNotification+0x122>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    ff84:	9805      	ldr	r0, [sp, #20]
    ff86:	f7fd faa4 	bl	d4d2 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    ff8a:	2100      	movs	r1, #0
    ff8c:	9805      	ldr	r0, [sp, #20]
    ff8e:	f7fd fa89 	bl	d4a4 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    ff92:	e000      	b.n	ff96 <Ftm_Pwm_Ip_DisableNotification+0x122>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ff94:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    ff96:	f006 fe21 	bl	16bdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    ff9a:	bf00      	nop
    ff9c:	b007      	add	sp, #28
    ff9e:	f85d fb04 	ldr.w	pc, [sp], #4
    ffa2:	bf00      	nop
    ffa4:	00019fc0 	.word	0x00019fc0

0000ffa8 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    ffa8:	b500      	push	{lr}
    ffaa:	b087      	sub	sp, #28
    ffac:	4603      	mov	r3, r0
    ffae:	460a      	mov	r2, r1
    ffb0:	f88d 3007 	strb.w	r3, [sp, #7]
    ffb4:	4613      	mov	r3, r2
    ffb6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ffba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffbe:	4a22      	ldr	r2, [pc, #136]	; (10048 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    ffc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc4:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    ffc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ffca:	085b      	lsrs	r3, r3, #1
    ffcc:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    ffd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ffd4:	4619      	mov	r1, r3
    ffd6:	9805      	ldr	r0, [sp, #20]
    ffd8:	f7fe f94a 	bl	e270 <Ftm_Pwm_Ip_GetChannelMode>
    ffdc:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    ffde:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ffe2:	2201      	movs	r2, #1
    ffe4:	4619      	mov	r1, r3
    ffe6:	9805      	ldr	r0, [sp, #20]
    ffe8:	f7fd fb74 	bl	d6d4 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ffec:	9b03      	ldr	r3, [sp, #12]
    ffee:	2b22      	cmp	r3, #34	; 0x22
    fff0:	d008      	beq.n	10004 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    fff2:	9b03      	ldr	r3, [sp, #12]
    fff4:	2b62      	cmp	r3, #98	; 0x62
    fff6:	d005      	beq.n	10004 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fff8:	9b03      	ldr	r3, [sp, #12]
    fffa:	2b61      	cmp	r3, #97	; 0x61
    fffc:	d002      	beq.n	10004 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    fffe:	9b03      	ldr	r3, [sp, #12]
   10000:	2b21      	cmp	r3, #33	; 0x21
   10002:	d11d      	bne.n	10040 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
   10004:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10008:	005b      	lsls	r3, r3, #1
   1000a:	b2db      	uxtb	r3, r3
   1000c:	3301      	adds	r3, #1
   1000e:	b2db      	uxtb	r3, r3
   10010:	4619      	mov	r1, r3
   10012:	9805      	ldr	r0, [sp, #20]
   10014:	f7fd fb81 	bl	d71a <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
   10018:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1001c:	005b      	lsls	r3, r3, #1
   1001e:	b2db      	uxtb	r3, r3
   10020:	2201      	movs	r2, #1
   10022:	4619      	mov	r1, r3
   10024:	9805      	ldr	r0, [sp, #20]
   10026:	f7fd fb55 	bl	d6d4 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
   1002a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1002e:	005b      	lsls	r3, r3, #1
   10030:	b2db      	uxtb	r3, r3
   10032:	3301      	adds	r3, #1
   10034:	b2db      	uxtb	r3, r3
   10036:	2201      	movs	r2, #1
   10038:	4619      	mov	r1, r3
   1003a:	9805      	ldr	r0, [sp, #20]
   1003c:	f7fd fb4a 	bl	d6d4 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
   10040:	bf00      	nop
   10042:	b007      	add	sp, #28
   10044:	f85d fb04 	ldr.w	pc, [sp], #4
   10048:	00019fc0 	.word	0x00019fc0

0001004c <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
   1004c:	b500      	push	{lr}
   1004e:	b085      	sub	sp, #20
   10050:	4603      	mov	r3, r0
   10052:	9100      	str	r1, [sp, #0]
   10054:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10058:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1005c:	4a32      	ldr	r2, [pc, #200]	; (10128 <Ftm_Pwm_Ip_EnableNotification+0xdc>)
   1005e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10062:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
   10064:	9b00      	ldr	r3, [sp, #0]
   10066:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   1006a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1006e:	2b03      	cmp	r3, #3
   10070:	bf94      	ite	ls
   10072:	2301      	movls	r3, #1
   10074:	2300      	movhi	r3, #0
   10076:	b2db      	uxtb	r3, r3
   10078:	4618      	mov	r0, r3
   1007a:	f7f0 fc37 	bl	8ec <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
   1007e:	9b00      	ldr	r3, [sp, #0]
   10080:	2b08      	cmp	r3, #8
   10082:	d00f      	beq.n	100a4 <Ftm_Pwm_Ip_EnableNotification+0x58>
   10084:	9b00      	ldr	r3, [sp, #0]
   10086:	2b09      	cmp	r3, #9
   10088:	d00c      	beq.n	100a4 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
   1008a:	9b00      	ldr	r3, [sp, #0]
   1008c:	2b0a      	cmp	r3, #10
   1008e:	d009      	beq.n	100a4 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
   10090:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10094:	2b07      	cmp	r3, #7
   10096:	bf94      	ite	ls
   10098:	2301      	movls	r3, #1
   1009a:	2300      	movhi	r3, #0
   1009c:	b2db      	uxtb	r3, r3
   1009e:	4618      	mov	r0, r3
   100a0:	f7f0 fc24 	bl	8ec <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
   100a4:	f006 fdc0 	bl	16c28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
   100a8:	9b00      	ldr	r3, [sp, #0]
   100aa:	2b00      	cmp	r3, #0
   100ac:	d014      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
   100ae:	9b00      	ldr	r3, [sp, #0]
   100b0:	2b01      	cmp	r3, #1
   100b2:	d011      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
   100b4:	9b00      	ldr	r3, [sp, #0]
   100b6:	2b02      	cmp	r3, #2
   100b8:	d00e      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
   100ba:	9b00      	ldr	r3, [sp, #0]
   100bc:	2b03      	cmp	r3, #3
   100be:	d00b      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
   100c0:	9b00      	ldr	r3, [sp, #0]
   100c2:	2b04      	cmp	r3, #4
   100c4:	d008      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
   100c6:	9b00      	ldr	r3, [sp, #0]
   100c8:	2b05      	cmp	r3, #5
   100ca:	d005      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
   100cc:	9b00      	ldr	r3, [sp, #0]
   100ce:	2b06      	cmp	r3, #6
   100d0:	d002      	beq.n	100d8 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
   100d2:	9b00      	ldr	r3, [sp, #0]
   100d4:	2b07      	cmp	r3, #7
   100d6:	d10e      	bne.n	100f6 <Ftm_Pwm_Ip_EnableNotification+0xaa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
   100d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   100dc:	4619      	mov	r1, r3
   100de:	9803      	ldr	r0, [sp, #12]
   100e0:	f7fd fb1b 	bl	d71a <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
   100e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   100e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   100ec:	4611      	mov	r1, r2
   100ee:	4618      	mov	r0, r3
   100f0:	f7ff ff5a 	bl	ffa8 <Ftm_Pwm_Ip_SetNormalNotificationCase>
   100f4:	e011      	b.n	1011a <Ftm_Pwm_Ip_EnableNotification+0xce>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
   100f6:	9b00      	ldr	r3, [sp, #0]
   100f8:	2b0a      	cmp	r3, #10
   100fa:	d107      	bne.n	1010c <Ftm_Pwm_Ip_EnableNotification+0xc0>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
   100fc:	9803      	ldr	r0, [sp, #12]
   100fe:	f7fe facc 	bl	e69a <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
   10102:	2101      	movs	r1, #1
   10104:	9803      	ldr	r0, [sp, #12]
   10106:	f7fe fab2 	bl	e66e <Ftm_Pwm_Ip_SetFaultInterruptEnable>
   1010a:	e006      	b.n	1011a <Ftm_Pwm_Ip_EnableNotification+0xce>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
   1010c:	9803      	ldr	r0, [sp, #12]
   1010e:	f7fd f9e0 	bl	d4d2 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
   10112:	2101      	movs	r1, #1
   10114:	9803      	ldr	r0, [sp, #12]
   10116:	f7fd f9c5 	bl	d4a4 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
   1011a:	f006 fdb1 	bl	16c80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
   1011e:	bf00      	nop
   10120:	b005      	add	sp, #20
   10122:	f85d fb04 	ldr.w	pc, [sp], #4
   10126:	bf00      	nop
   10128:	00019fc0 	.word	0x00019fc0

0001012c <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
   1012c:	b500      	push	{lr}
   1012e:	b085      	sub	sp, #20
   10130:	4603      	mov	r3, r0
   10132:	9100      	str	r1, [sp, #0]
   10134:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10138:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1013c:	4a11      	ldr	r2, [pc, #68]	; (10184 <Ftm_Pwm_Ip_SetPowerState+0x58>)
   1013e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10142:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10144:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10148:	2b03      	cmp	r3, #3
   1014a:	bf94      	ite	ls
   1014c:	2301      	movls	r3, #1
   1014e:	2300      	movhi	r3, #0
   10150:	b2db      	uxtb	r3, r3
   10152:	4618      	mov	r0, r3
   10154:	f7f0 fbca 	bl	8ec <DevAssert>
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
   10158:	9b00      	ldr	r3, [sp, #0]
   1015a:	2b01      	cmp	r3, #1
   1015c:	d104      	bne.n	10168 <Ftm_Pwm_Ip_SetPowerState+0x3c>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
   1015e:	2100      	movs	r1, #0
   10160:	9803      	ldr	r0, [sp, #12]
   10162:	f7fd f96a 	bl	d43a <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
   10166:	e008      	b.n	1017a <Ftm_Pwm_Ip_SetPowerState+0x4e>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
   10168:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1016c:	4a06      	ldr	r2, [pc, #24]	; (10188 <Ftm_Pwm_Ip_SetPowerState+0x5c>)
   1016e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10172:	4619      	mov	r1, r3
   10174:	9803      	ldr	r0, [sp, #12]
   10176:	f7fd f960 	bl	d43a <Ftm_Pwm_Ip_SetClockSource>
}
   1017a:	bf00      	nop
   1017c:	b005      	add	sp, #20
   1017e:	f85d fb04 	ldr.w	pc, [sp], #4
   10182:	bf00      	nop
   10184:	00019fc0 	.word	0x00019fc0
   10188:	1fff9124 	.word	0x1fff9124

0001018c <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
   1018c:	b500      	push	{lr}
   1018e:	b085      	sub	sp, #20
   10190:	4603      	mov	r3, r0
   10192:	9100      	str	r1, [sp, #0]
   10194:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10198:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1019c:	4a13      	ldr	r2, [pc, #76]	; (101ec <Ftm_Pwm_Ip_SetClockMode+0x60>)
   1019e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a2:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   101a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101a8:	2b03      	cmp	r3, #3
   101aa:	bf94      	ite	ls
   101ac:	2301      	movls	r3, #1
   101ae:	2300      	movhi	r3, #0
   101b0:	b2db      	uxtb	r3, r3
   101b2:	4618      	mov	r0, r3
   101b4:	f7f0 fb9a 	bl	8ec <DevAssert>
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
   101b8:	9b00      	ldr	r3, [sp, #0]
   101ba:	2b01      	cmp	r3, #1
   101bc:	d109      	bne.n	101d2 <Ftm_Pwm_Ip_SetClockMode+0x46>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
   101be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101c2:	4a0b      	ldr	r2, [pc, #44]	; (101f0 <Ftm_Pwm_Ip_SetClockMode+0x64>)
   101c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101c8:	4619      	mov	r1, r3
   101ca:	9803      	ldr	r0, [sp, #12]
   101cc:	f7fd f91a 	bl	d404 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
   101d0:	e008      	b.n	101e4 <Ftm_Pwm_Ip_SetClockMode+0x58>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
   101d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101d6:	4a07      	ldr	r2, [pc, #28]	; (101f4 <Ftm_Pwm_Ip_SetClockMode+0x68>)
   101d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101dc:	4619      	mov	r1, r3
   101de:	9803      	ldr	r0, [sp, #12]
   101e0:	f7fd f910 	bl	d404 <Ftm_Pwm_Ip_SetClockPs>
}
   101e4:	bf00      	nop
   101e6:	b005      	add	sp, #20
   101e8:	f85d fb04 	ldr.w	pc, [sp], #4
   101ec:	00019fc0 	.word	0x00019fc0
   101f0:	1fff9144 	.word	0x1fff9144
   101f4:	1fff9134 	.word	0x1fff9134

000101f8 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
   101f8:	b500      	push	{lr}
   101fa:	b085      	sub	sp, #20
   101fc:	4603      	mov	r3, r0
   101fe:	460a      	mov	r2, r1
   10200:	f88d 3007 	strb.w	r3, [sp, #7]
   10204:	4613      	mov	r3, r2
   10206:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1020a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1020e:	4a0c      	ldr	r2, [pc, #48]	; (10240 <Ftm_Pwm_Ip_ResetCounter+0x48>)
   10210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10214:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10216:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1021a:	2b03      	cmp	r3, #3
   1021c:	bf94      	ite	ls
   1021e:	2301      	movls	r3, #1
   10220:	2300      	movhi	r3, #0
   10222:	b2db      	uxtb	r3, r3
   10224:	4618      	mov	r0, r3
   10226:	f7f0 fb61 	bl	8ec <DevAssert>
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
   1022a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1022e:	4619      	mov	r1, r3
   10230:	9803      	ldr	r0, [sp, #12]
   10232:	f7fd fe1a 	bl	de6a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
   10236:	bf00      	nop
   10238:	b005      	add	sp, #20
   1023a:	f85d fb04 	ldr.w	pc, [sp], #4
   1023e:	bf00      	nop
   10240:	00019fc0 	.word	0x00019fc0

00010244 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
   10244:	b500      	push	{lr}
   10246:	b085      	sub	sp, #20
   10248:	4603      	mov	r3, r0
   1024a:	460a      	mov	r2, r1
   1024c:	f88d 3007 	strb.w	r3, [sp, #7]
   10250:	4613      	mov	r3, r2
   10252:	f88d 3006 	strb.w	r3, [sp, #6]
    uint16 DutyCycle;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10256:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1025a:	2b03      	cmp	r3, #3
   1025c:	bf94      	ite	ls
   1025e:	2301      	movls	r3, #1
   10260:	2300      	movhi	r3, #0
   10262:	b2db      	uxtb	r3, r3
   10264:	4618      	mov	r0, r3
   10266:	f7f0 fb41 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   1026a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1026e:	2b07      	cmp	r3, #7
   10270:	bf94      	ite	ls
   10272:	2301      	movls	r3, #1
   10274:	2300      	movhi	r3, #0
   10276:	b2db      	uxtb	r3, r3
   10278:	4618      	mov	r0, r3
   1027a:	f7f0 fb37 	bl	8ec <DevAssert>
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
   1027e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10282:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10286:	4906      	ldr	r1, [pc, #24]	; (102a0 <Ftm_Pwm_Ip_GetChannelState+0x5c>)
   10288:	00d2      	lsls	r2, r2, #3
   1028a:	4413      	add	r3, r2
   1028c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   10290:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
   10294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   10298:	4618      	mov	r0, r3
   1029a:	b005      	add	sp, #20
   1029c:	f85d fb04 	ldr.w	pc, [sp], #4
   102a0:	1fff8e34 	.word	0x1fff8e34

000102a4 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
   102a4:	b500      	push	{lr}
   102a6:	b087      	sub	sp, #28
   102a8:	9202      	str	r2, [sp, #8]
   102aa:	9301      	str	r3, [sp, #4]
   102ac:	4603      	mov	r3, r0
   102ae:	f88d 300f 	strb.w	r3, [sp, #15]
   102b2:	460b      	mov	r3, r1
   102b4:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   102b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   102bc:	4a29      	ldr	r2, [pc, #164]	; (10364 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc0>)
   102be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102c2:	9304      	str	r3, [sp, #16]
    uint8 Index;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   102c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   102c8:	2b03      	cmp	r3, #3
   102ca:	bf94      	ite	ls
   102cc:	2301      	movls	r3, #1
   102ce:	2300      	movhi	r3, #0
   102d0:	b2db      	uxtb	r3, r3
   102d2:	4618      	mov	r0, r3
   102d4:	f7f0 fb0a 	bl	8ec <DevAssert>
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
   102d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   102dc:	2b08      	cmp	r3, #8
   102de:	bf94      	ite	ls
   102e0:	2301      	movls	r3, #1
   102e2:	2300      	movhi	r3, #0
   102e4:	b2db      	uxtb	r3, r3
   102e6:	4618      	mov	r0, r3
   102e8:	f7f0 fb00 	bl	8ec <DevAssert>
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
   102ec:	2300      	movs	r3, #0
   102ee:	f88d 3017 	strb.w	r3, [sp, #23]
   102f2:	e026      	b.n	10342 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9e>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
   102f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   102f8:	9a02      	ldr	r2, [sp, #8]
   102fa:	4413      	add	r3, r2
   102fc:	7819      	ldrb	r1, [r3, #0]
   102fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10302:	005b      	lsls	r3, r3, #1
   10304:	9a01      	ldr	r2, [sp, #4]
   10306:	4413      	add	r3, r2
   10308:	881b      	ldrh	r3, [r3, #0]
   1030a:	461a      	mov	r2, r3
   1030c:	9804      	ldr	r0, [sp, #16]
   1030e:	f7fd fa32 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
   10312:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10316:	005b      	lsls	r3, r3, #1
   10318:	9a01      	ldr	r2, [sp, #4]
   1031a:	441a      	add	r2, r3
   1031c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10320:	f89d 1017 	ldrb.w	r1, [sp, #23]
   10324:	9802      	ldr	r0, [sp, #8]
   10326:	4401      	add	r1, r0
   10328:	7809      	ldrb	r1, [r1, #0]
   1032a:	4608      	mov	r0, r1
   1032c:	8811      	ldrh	r1, [r2, #0]
   1032e:	4a0e      	ldr	r2, [pc, #56]	; (10368 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc4>)
   10330:	00db      	lsls	r3, r3, #3
   10332:	4403      	add	r3, r0
   10334:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
   10338:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1033c:	3301      	adds	r3, #1
   1033e:	f88d 3017 	strb.w	r3, [sp, #23]
   10342:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10346:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1034a:	429a      	cmp	r2, r3
   1034c:	d3d2      	bcc.n	102f4 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x50>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   1034e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10352:	4619      	mov	r1, r3
   10354:	9804      	ldr	r0, [sp, #16]
   10356:	f7fd fad6 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
   1035a:	bf00      	nop
   1035c:	b007      	add	sp, #28
   1035e:	f85d fb04 	ldr.w	pc, [sp], #4
   10362:	bf00      	nop
   10364:	00019fc0 	.word	0x00019fc0
   10368:	1fff8e34 	.word	0x1fff8e34

0001036c <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
   1036c:	b500      	push	{lr}
   1036e:	b085      	sub	sp, #20
   10370:	4603      	mov	r3, r0
   10372:	9100      	str	r1, [sp, #0]
   10374:	f88d 3007 	strb.w	r3, [sp, #7]
   10378:	4613      	mov	r3, r2
   1037a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1037e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10382:	4a10      	ldr	r2, [pc, #64]	; (103c4 <Ftm_Pwm_Ip_MaskOutputChannels+0x58>)
   10384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10388:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   1038a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1038e:	2b03      	cmp	r3, #3
   10390:	bf94      	ite	ls
   10392:	2301      	movls	r3, #1
   10394:	2300      	movhi	r3, #0
   10396:	b2db      	uxtb	r3, r3
   10398:	4618      	mov	r0, r3
   1039a:	f7f0 faa7 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
   1039e:	f006 fce7 	bl	16d70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
   103a2:	9900      	ldr	r1, [sp, #0]
   103a4:	9803      	ldr	r0, [sp, #12]
   103a6:	f7fd fb0b 	bl	d9c0 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   103aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
   103ae:	4619      	mov	r1, r3
   103b0:	9803      	ldr	r0, [sp, #12]
   103b2:	f7fd faa8 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
   103b6:	f006 fd07 	bl	16dc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
   103ba:	bf00      	nop
   103bc:	b005      	add	sp, #20
   103be:	f85d fb04 	ldr.w	pc, [sp], #4
   103c2:	bf00      	nop
   103c4:	00019fc0 	.word	0x00019fc0

000103c8 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
   103c8:	b500      	push	{lr}
   103ca:	b085      	sub	sp, #20
   103cc:	4603      	mov	r3, r0
   103ce:	9100      	str	r1, [sp, #0]
   103d0:	f88d 3007 	strb.w	r3, [sp, #7]
   103d4:	4613      	mov	r3, r2
   103d6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   103da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103de:	4a10      	ldr	r2, [pc, #64]	; (10420 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x58>)
   103e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e4:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   103e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103ea:	2b03      	cmp	r3, #3
   103ec:	bf94      	ite	ls
   103ee:	2301      	movls	r3, #1
   103f0:	2300      	movhi	r3, #0
   103f2:	b2db      	uxtb	r3, r3
   103f4:	4618      	mov	r0, r3
   103f6:	f7f0 fa79 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
   103fa:	f006 fd0b 	bl	16e14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
   103fe:	9900      	ldr	r1, [sp, #0]
   10400:	9803      	ldr	r0, [sp, #12]
   10402:	f7fd faec 	bl	d9de <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   10406:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1040a:	4619      	mov	r1, r3
   1040c:	9803      	ldr	r0, [sp, #12]
   1040e:	f7fd fa7a 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
   10412:	f006 fd2b 	bl	16e6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
   10416:	bf00      	nop
   10418:	b005      	add	sp, #20
   1041a:	f85d fb04 	ldr.w	pc, [sp], #4
   1041e:	bf00      	nop
   10420:	00019fc0 	.word	0x00019fc0

00010424 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
   10424:	b510      	push	{r4, lr}
   10426:	b088      	sub	sp, #32
   10428:	4604      	mov	r4, r0
   1042a:	4608      	mov	r0, r1
   1042c:	4611      	mov	r1, r2
   1042e:	461a      	mov	r2, r3
   10430:	4623      	mov	r3, r4
   10432:	f88d 3007 	strb.w	r3, [sp, #7]
   10436:	4603      	mov	r3, r0
   10438:	f88d 3006 	strb.w	r3, [sp, #6]
   1043c:	460b      	mov	r3, r1
   1043e:	f8ad 3004 	strh.w	r3, [sp, #4]
   10442:	4613      	mov	r3, r2
   10444:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10448:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1044c:	4a59      	ldr	r2, [pc, #356]	; (105b4 <Ftm_Pwm_Ip_SetPhaseShift+0x190>)
   1044e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10452:	9306      	str	r3, [sp, #24]
    uint8 PairChId;
    uint16 DutyCycleVal;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint16  CnVValue = 0U;
   10454:	2300      	movs	r3, #0
   10456:	f8ad 3016 	strh.w	r3, [sp, #22]
    boolean CheckChMode = TRUE;
   1045a:	2301      	movs	r3, #1
   1045c:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean RetVal = TRUE;
   10460:	2301      	movs	r3, #1
   10462:	f88d 301e 	strb.w	r3, [sp, #30]

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10466:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1046a:	2b03      	cmp	r3, #3
   1046c:	bf94      	ite	ls
   1046e:	2301      	movls	r3, #1
   10470:	2300      	movhi	r3, #0
   10472:	b2db      	uxtb	r3, r3
   10474:	4618      	mov	r0, r3
   10476:	f7f0 fa39 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   1047a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1047e:	2b07      	cmp	r3, #7
   10480:	bf94      	ite	ls
   10482:	2301      	movls	r3, #1
   10484:	2300      	movhi	r3, #0
   10486:	b2db      	uxtb	r3, r3
   10488:	4618      	mov	r0, r3
   1048a:	f7f0 fa2f 	bl	8ec <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   1048e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10492:	4619      	mov	r1, r3
   10494:	9806      	ldr	r0, [sp, #24]
   10496:	f7fd feeb 	bl	e270 <Ftm_Pwm_Ip_GetChannelMode>
   1049a:	9004      	str	r0, [sp, #16]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   1049c:	9b04      	ldr	r3, [sp, #16]
   1049e:	2b22      	cmp	r3, #34	; 0x22
   104a0:	d00b      	beq.n	104ba <Ftm_Pwm_Ip_SetPhaseShift+0x96>
   104a2:	9b04      	ldr	r3, [sp, #16]
   104a4:	2b62      	cmp	r3, #98	; 0x62
   104a6:	d008      	beq.n	104ba <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   104a8:	9b04      	ldr	r3, [sp, #16]
   104aa:	2b61      	cmp	r3, #97	; 0x61
   104ac:	d005      	beq.n	104ba <Ftm_Pwm_Ip_SetPhaseShift+0x96>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   104ae:	9b04      	ldr	r3, [sp, #16]
   104b0:	2b21      	cmp	r3, #33	; 0x21
   104b2:	d002      	beq.n	104ba <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   104b4:	2300      	movs	r3, #0
   104b6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    DevAssert(CheckChMode != FALSE);
   104ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
   104be:	4618      	mov	r0, r3
   104c0:	f7f0 fa14 	bl	8ec <DevAssert>
    
    CnVValue = PhaseShift + (uint16)(Period >> 1U);
   104c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   104c8:	085b      	lsrs	r3, r3, #1
   104ca:	b29a      	uxth	r2, r3
   104cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   104d0:	4413      	add	r3, r2
   104d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((CnVValue <= PhaseShift) || (Period <= CnVValue))
   104d6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   104da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   104de:	429a      	cmp	r2, r3
   104e0:	d905      	bls.n	104ee <Ftm_Pwm_Ip_SetPhaseShift+0xca>
   104e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   104e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   104ea:	429a      	cmp	r2, r3
   104ec:	d802      	bhi.n	104f4 <Ftm_Pwm_Ip_SetPhaseShift+0xd0>
    {
        RetVal = FALSE;
   104ee:	2300      	movs	r3, #0
   104f0:	f88d 301e 	strb.w	r3, [sp, #30]
    }
    DevAssert(RetVal != FALSE);
   104f4:	f89d 301e 	ldrb.w	r3, [sp, #30]
   104f8:	4618      	mov	r0, r3
   104fa:	f7f0 f9f7 	bl	8ec <DevAssert>
#endif
    PairChId = Channel >> 1U;
   104fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10502:	085b      	lsrs	r3, r3, #1
   10504:	f88d 300f 	strb.w	r3, [sp, #15]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
   10508:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1050c:	492a      	ldr	r1, [pc, #168]	; (105b8 <Ftm_Pwm_Ip_SetPhaseShift+0x194>)
   1050e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10512:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
   10516:	f006 fccf 	bl	16eb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
   1051a:	9806      	ldr	r0, [sp, #24]
   1051c:	f7fc ffb4 	bl	d488 <Ftm_Pwm_Ip_GetCpwms>
   10520:	4603      	mov	r3, r0
   10522:	2b01      	cmp	r3, #1
   10524:	d108      	bne.n	10538 <Ftm_Pwm_Ip_SetPhaseShift+0x114>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
   10526:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1052a:	085b      	lsrs	r3, r3, #1
   1052c:	b29b      	uxth	r3, r3
   1052e:	4619      	mov	r1, r3
   10530:	9806      	ldr	r0, [sp, #24]
   10532:	f7fc fffc 	bl	d52e <Ftm_Pwm_Ip_SetMod>
   10536:	e007      	b.n	10548 <Ftm_Pwm_Ip_SetPhaseShift+0x124>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
   10538:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1053c:	3b01      	subs	r3, #1
   1053e:	b29b      	uxth	r3, r3
   10540:	4619      	mov	r1, r3
   10542:	9806      	ldr	r0, [sp, #24]
   10544:	f7fc fff3 	bl	d52e <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
   10548:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1054c:	005b      	lsls	r3, r3, #1
   1054e:	b2db      	uxtb	r3, r3
   10550:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10554:	4619      	mov	r1, r3
   10556:	9806      	ldr	r0, [sp, #24]
   10558:	f7fd f90d 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
   1055c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10560:	085b      	lsrs	r3, r3, #1
   10562:	f8ad 300c 	strh.w	r3, [sp, #12]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
   10566:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1056a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1056e:	4913      	ldr	r1, [pc, #76]	; (105bc <Ftm_Pwm_Ip_SetPhaseShift+0x198>)
   10570:	00d2      	lsls	r2, r2, #3
   10572:	4413      	add	r3, r2
   10574:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10578:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
   1057c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10580:	005b      	lsls	r3, r3, #1
   10582:	b2db      	uxtb	r3, r3
   10584:	3301      	adds	r3, #1
   10586:	b2d9      	uxtb	r1, r3
   10588:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1058c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10590:	4413      	add	r3, r2
   10592:	b29b      	uxth	r3, r3
   10594:	461a      	mov	r2, r3
   10596:	9806      	ldr	r0, [sp, #24]
   10598:	f7fd f8ed 	bl	d776 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   1059c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   105a0:	4619      	mov	r1, r3
   105a2:	9806      	ldr	r0, [sp, #24]
   105a4:	f7fd f9af 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
   105a8:	f006 fcb2 	bl	16f10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
   105ac:	bf00      	nop
   105ae:	b008      	add	sp, #32
   105b0:	bd10      	pop	{r4, pc}
   105b2:	bf00      	nop
   105b4:	00019fc0 	.word	0x00019fc0
   105b8:	1fff8e2c 	.word	0x1fff8e2c
   105bc:	1fff8e34 	.word	0x1fff8e34

000105c0 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
   105c0:	b510      	push	{r4, lr}
   105c2:	b08a      	sub	sp, #40	; 0x28
   105c4:	4604      	mov	r4, r0
   105c6:	4608      	mov	r0, r1
   105c8:	4611      	mov	r1, r2
   105ca:	461a      	mov	r2, r3
   105cc:	4623      	mov	r3, r4
   105ce:	f88d 300f 	strb.w	r3, [sp, #15]
   105d2:	4603      	mov	r3, r0
   105d4:	f88d 300e 	strb.w	r3, [sp, #14]
   105d8:	460b      	mov	r3, r1
   105da:	f8ad 300c 	strh.w	r3, [sp, #12]
   105de:	4613      	mov	r3, r2
   105e0:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint16 FirstEdge;
    uint16 SecondEdgeEdge;
    uint8 PairId;
    boolean SoftwareTrigger;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   105e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   105e8:	4a68      	ldr	r2, [pc, #416]	; (1078c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1cc>)
   105ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105ee:	9308      	str	r3, [sp, #32]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    boolean CheckChMode = TRUE;
   105f0:	2301      	movs	r3, #1
   105f2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    boolean RetVal = TRUE;
   105f6:	2301      	movs	r3, #1
   105f8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   105fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10600:	2b03      	cmp	r3, #3
   10602:	bf94      	ite	ls
   10604:	2301      	movls	r3, #1
   10606:	2300      	movhi	r3, #0
   10608:	b2db      	uxtb	r3, r3
   1060a:	4618      	mov	r0, r3
   1060c:	f7f0 f96e 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10610:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10614:	2b07      	cmp	r3, #7
   10616:	bf94      	ite	ls
   10618:	2301      	movls	r3, #1
   1061a:	2300      	movhi	r3, #0
   1061c:	b2db      	uxtb	r3, r3
   1061e:	4618      	mov	r0, r3
   10620:	f7f0 f964 	bl	8ec <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   10624:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10628:	4619      	mov	r1, r3
   1062a:	9808      	ldr	r0, [sp, #32]
   1062c:	f7fd fe20 	bl	e270 <Ftm_Pwm_Ip_GetChannelMode>
   10630:	9007      	str	r0, [sp, #28]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   10632:	9b07      	ldr	r3, [sp, #28]
   10634:	2b22      	cmp	r3, #34	; 0x22
   10636:	d00b      	beq.n	10650 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
   10638:	9b07      	ldr	r3, [sp, #28]
   1063a:	2b62      	cmp	r3, #98	; 0x62
   1063c:	d008      	beq.n	10650 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   1063e:	9b07      	ldr	r3, [sp, #28]
   10640:	2b61      	cmp	r3, #97	; 0x61
   10642:	d005      	beq.n	10650 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   10644:	9b07      	ldr	r3, [sp, #28]
   10646:	2b21      	cmp	r3, #33	; 0x21
   10648:	d002      	beq.n	10650 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   1064a:	2300      	movs	r3, #0
   1064c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }
    DevAssert(CheckChMode != FALSE);
   10650:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   10654:	4618      	mov	r0, r3
   10656:	f7f0 f949 	bl	8ec <DevAssert>

#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    if (((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH          == ChMode) ||
   1065a:	9b07      	ldr	r3, [sp, #28]
   1065c:	2b62      	cmp	r3, #98	; 0x62
   1065e:	d002      	beq.n	10666 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xa6>
   10660:	9b07      	ldr	r3, [sp, #28]
   10662:	2b61      	cmp	r3, #97	; 0x61
   10664:	d106      	bne.n	10674 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
         (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW           == ChMode)) &&
   10666:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1066a:	2b00      	cmp	r3, #0
   1066c:	d002      	beq.n	10674 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
        (TRUE == SyncUpdate))
    {
        RetVal = FALSE;
   1066e:	2300      	movs	r3, #0
   10670:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    }
#endif

    if ((Ftm_Pwm_Ip_aPeriod[Instance] != DutyCycle) && (0U != DutyCycle))
   10674:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10678:	4a45      	ldr	r2, [pc, #276]	; (10790 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   1067a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1067e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10682:	429a      	cmp	r2, r3
   10684:	d018      	beq.n	106b8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
   10686:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1068a:	2b00      	cmp	r3, #0
   1068c:	d014      	beq.n	106b8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
    {
        if ((Ftm_Pwm_Ip_aPeriod[Instance] <= PhaseShift) || (Ftm_Pwm_Ip_aPeriod[Instance] < DutyCycle))
   1068e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10692:	4a3f      	ldr	r2, [pc, #252]	; (10790 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10698:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1069c:	429a      	cmp	r2, r3
   1069e:	d208      	bcs.n	106b2 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf2>
   106a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   106a4:	4a3a      	ldr	r2, [pc, #232]	; (10790 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   106a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   106aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   106ae:	429a      	cmp	r2, r3
   106b0:	d902      	bls.n	106b8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
        {
            RetVal = FALSE;
   106b2:	2300      	movs	r3, #0
   106b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        }
    }
    DevAssert(RetVal != FALSE);
   106b8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   106bc:	4618      	mov	r0, r3
   106be:	f7f0 f915 	bl	8ec <DevAssert>

#endif
    PairId = Channel >> 1U;
   106c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   106c6:	085b      	lsrs	r3, r3, #1
   106c8:	f88d 301b 	strb.w	r3, [sp, #27]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
   106cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   106d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   106d4:	492f      	ldr	r1, [pc, #188]	; (10794 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d4>)
   106d6:	0092      	lsls	r2, r2, #2
   106d8:	4413      	add	r3, r2
   106da:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   106de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
   106e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   106e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   106ea:	492b      	ldr	r1, [pc, #172]	; (10798 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d8>)
   106ec:	00d2      	lsls	r2, r2, #3
   106ee:	4413      	add	r3, r2
   106f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   106f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
   106f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   106fc:	f8ad 3018 	strh.w	r3, [sp, #24]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
   10700:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   10704:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   10708:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1070c:	4618      	mov	r0, r3
   1070e:	f7fe f8f9 	bl	e904 <Ftm_Pwm_Ip_CalculatePhaseShift>
   10712:	4603      	mov	r3, r0
   10714:	f8ad 3016 	strh.w	r3, [sp, #22]

    if (TRUE == SyncUpdate)
   10718:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1071c:	2b00      	cmp	r3, #0
   1071e:	d003      	beq.n	10728 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x168>
    {
        SoftwareTrigger = FALSE;
   10720:	2300      	movs	r3, #0
   10722:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   10726:	e002      	b.n	1072e <Ftm_Pwm_Ip_SetDutyPhaseShift+0x16e>
    }
    else
    {
        SoftwareTrigger = TRUE;
   10728:	2301      	movs	r3, #1
   1072a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   1072e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10732:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10736:	4919      	ldr	r1, [pc, #100]	; (1079c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   10738:	00d2      	lsls	r2, r2, #3
   1073a:	4413      	add	r3, r2
   1073c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   10740:	2b02      	cmp	r3, #2
   10742:	d111      	bne.n	10768 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1a8>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
   10744:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10748:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1074c:	4913      	ldr	r1, [pc, #76]	; (1079c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   1074e:	00d2      	lsls	r2, r2, #3
   10750:	4413      	add	r3, r2
   10752:	2201      	movs	r2, #1
   10754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
   10758:	f89d 100e 	ldrb.w	r1, [sp, #14]
   1075c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10760:	2300      	movs	r3, #0
   10762:	2200      	movs	r2, #0
   10764:	f7ff f982 	bl	fa6c <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
   10768:	f8bd 4016 	ldrh.w	r4, [sp, #22]
   1076c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   10770:	f89d 100e 	ldrb.w	r1, [sp, #14]
   10774:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10778:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1077c:	9300      	str	r3, [sp, #0]
   1077e:	4623      	mov	r3, r4
   10780:	f7ff fa4e 	bl	fc20 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
   10784:	bf00      	nop
   10786:	b00a      	add	sp, #40	; 0x28
   10788:	bd10      	pop	{r4, pc}
   1078a:	bf00      	nop
   1078c:	00019fc0 	.word	0x00019fc0
   10790:	1fff8e2c 	.word	0x1fff8e2c
   10794:	1fff8e74 	.word	0x1fff8e74
   10798:	1fff8e34 	.word	0x1fff8e34
   1079c:	1fff9004 	.word	0x1fff9004

000107a0 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
   107a0:	b500      	push	{lr}
   107a2:	b085      	sub	sp, #20
   107a4:	4603      	mov	r3, r0
   107a6:	9100      	str	r1, [sp, #0]
   107a8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   107ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107b0:	4a0c      	ldr	r2, [pc, #48]	; (107e4 <Ftm_Pwm_Ip_DisableTrigger+0x44>)
   107b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b6:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   107b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107bc:	2b03      	cmp	r3, #3
   107be:	bf94      	ite	ls
   107c0:	2301      	movls	r3, #1
   107c2:	2300      	movhi	r3, #0
   107c4:	b2db      	uxtb	r3, r3
   107c6:	4618      	mov	r0, r3
   107c8:	f7f0 f890 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
   107cc:	f006 fbc6 	bl	16f5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
   107d0:	9900      	ldr	r1, [sp, #0]
   107d2:	9803      	ldr	r0, [sp, #12]
   107d4:	f7fd fa44 	bl	dc60 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
   107d8:	f006 fbec 	bl	16fb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
   107dc:	bf00      	nop
   107de:	b005      	add	sp, #20
   107e0:	f85d fb04 	ldr.w	pc, [sp], #4
   107e4:	00019fc0 	.word	0x00019fc0

000107e8 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
   107e8:	b500      	push	{lr}
   107ea:	b085      	sub	sp, #20
   107ec:	4603      	mov	r3, r0
   107ee:	9100      	str	r1, [sp, #0]
   107f0:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   107f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107f8:	4a0c      	ldr	r2, [pc, #48]	; (1082c <Ftm_Pwm_Ip_EnableTrigger+0x44>)
   107fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107fe:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10800:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10804:	2b03      	cmp	r3, #3
   10806:	bf94      	ite	ls
   10808:	2301      	movls	r3, #1
   1080a:	2300      	movhi	r3, #0
   1080c:	b2db      	uxtb	r3, r3
   1080e:	4618      	mov	r0, r3
   10810:	f7f0 f86c 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
   10814:	f006 fbf4 	bl	17000 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
   10818:	9900      	ldr	r1, [sp, #0]
   1081a:	9803      	ldr	r0, [sp, #12]
   1081c:	f7fd fa2d 	bl	dc7a <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
   10820:	f006 fc1a 	bl	17058 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
   10824:	bf00      	nop
   10826:	b005      	add	sp, #20
   10828:	f85d fb04 	ldr.w	pc, [sp], #4
   1082c:	00019fc0 	.word	0x00019fc0

00010830 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
   10830:	b500      	push	{lr}
   10832:	b085      	sub	sp, #20
   10834:	4603      	mov	r3, r0
   10836:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1083a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1083e:	4a0d      	ldr	r2, [pc, #52]	; (10874 <Ftm_Pwm_Ip_SyncUpdate+0x44>)
   10840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10844:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10846:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1084a:	2b03      	cmp	r3, #3
   1084c:	bf94      	ite	ls
   1084e:	2301      	movls	r3, #1
   10850:	2300      	movhi	r3, #0
   10852:	b2db      	uxtb	r3, r3
   10854:	4618      	mov	r0, r3
   10856:	f7f0 f849 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
   1085a:	f006 fc23 	bl	170a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
   1085e:	2101      	movs	r1, #1
   10860:	9803      	ldr	r0, [sp, #12]
   10862:	f7fd f850 	bl	d906 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
   10866:	f006 fc49 	bl	170fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
   1086a:	bf00      	nop
   1086c:	b005      	add	sp, #20
   1086e:	f85d fb04 	ldr.w	pc, [sp], #4
   10872:	bf00      	nop
   10874:	00019fc0 	.word	0x00019fc0

00010878 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
   10878:	b500      	push	{lr}
   1087a:	b085      	sub	sp, #20
   1087c:	4603      	mov	r3, r0
   1087e:	f88d 3007 	strb.w	r3, [sp, #7]
   10882:	460b      	mov	r3, r1
   10884:	f88d 3006 	strb.w	r3, [sp, #6]
   10888:	4613      	mov	r3, r2
   1088a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1088e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10892:	4a32      	ldr	r2, [pc, #200]	; (1095c <Ftm_Pwm_Ip_SetChannelDeadTime+0xe4>)
   10894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10898:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   1089a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1089e:	2b03      	cmp	r3, #3
   108a0:	bf94      	ite	ls
   108a2:	2301      	movls	r3, #1
   108a4:	2300      	movhi	r3, #0
   108a6:	b2db      	uxtb	r3, r3
   108a8:	4618      	mov	r0, r3
   108aa:	f7f0 f81f 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   108ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
   108b2:	2b07      	cmp	r3, #7
   108b4:	bf94      	ite	ls
   108b6:	2301      	movls	r3, #1
   108b8:	2300      	movhi	r3, #0
   108ba:	b2db      	uxtb	r3, r3
   108bc:	4618      	mov	r0, r3
   108be:	f7f0 f815 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnCompCmd(FtmBase, Channel));
   108c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   108c6:	4619      	mov	r1, r3
   108c8:	9803      	ldr	r0, [sp, #12]
   108ca:	f7fd fc89 	bl	e1e0 <Ftm_Pwm_Ip_GetDualChnCompCmd>
   108ce:	4603      	mov	r3, r0
   108d0:	4618      	mov	r0, r3
   108d2:	f7f0 f80b 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(FtmBase, Channel));
   108d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   108da:	4619      	mov	r1, r3
   108dc:	9803      	ldr	r0, [sp, #12]
   108de:	f7fd fca3 	bl	e228 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>
   108e2:	4603      	mov	r3, r0
   108e4:	4618      	mov	r0, r3
   108e6:	f7f0 f801 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_ValidateParamDeadTime(Instance, Channel, DeadTimeVal));
   108ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   108ee:	f89d 1006 	ldrb.w	r1, [sp, #6]
   108f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   108f6:	4618      	mov	r0, r3
   108f8:	f7fd ff80 	bl	e7fc <Ftm_Pwm_Ip_ValidateParamDeadTime>
   108fc:	4603      	mov	r3, r0
   108fe:	4618      	mov	r0, r3
   10900:	f7ef fff4 	bl	8ec <DevAssert>
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
   10904:	f006 fc20 	bl	17148 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
   10908:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1090c:	2b3f      	cmp	r3, #63	; 0x3f
   1090e:	d80b      	bhi.n	10928 <Ftm_Pwm_Ip_SetChannelDeadTime+0xb0>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
   10910:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10914:	b2db      	uxtb	r3, r3
   10916:	4619      	mov	r1, r3
   10918:	9803      	ldr	r0, [sp, #12]
   1091a:	f7fd f946 	bl	dbaa <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
   1091e:	2100      	movs	r1, #0
   10920:	9803      	ldr	r0, [sp, #12]
   10922:	f7fd f973 	bl	dc0c <Ftm_Pwm_Ip_SetExtDeadtimeValue>
   10926:	e012      	b.n	1094e <Ftm_Pwm_Ip_SetChannelDeadTime+0xd6>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
   10928:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1092c:	b2db      	uxtb	r3, r3
   1092e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10932:	b2db      	uxtb	r3, r3
   10934:	4619      	mov	r1, r3
   10936:	9803      	ldr	r0, [sp, #12]
   10938:	f7fd f937 	bl	dbaa <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
   1093c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10940:	099b      	lsrs	r3, r3, #6
   10942:	b29b      	uxth	r3, r3
   10944:	b2db      	uxtb	r3, r3
   10946:	4619      	mov	r1, r3
   10948:	9803      	ldr	r0, [sp, #12]
   1094a:	f7fd f95f 	bl	dc0c <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
   1094e:	f006 fc27 	bl	171a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
   10952:	bf00      	nop
   10954:	b005      	add	sp, #20
   10956:	f85d fb04 	ldr.w	pc, [sp], #4
   1095a:	bf00      	nop
   1095c:	00019fc0 	.word	0x00019fc0

00010960 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
   10960:	b082      	sub	sp, #8
   10962:	9001      	str	r0, [sp, #4]
   10964:	460b      	mov	r3, r1
   10966:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
   1096a:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
   1096e:	4618      	mov	r0, r3
   10970:	b002      	add	sp, #8
   10972:	4770      	bx	lr

00010974 <Pwm_ValidateGlobalConfigCall>:
* @retval       E_NOT_OK            Caller of the function should drop execution
*
*/
static Std_ReturnType Pwm_ValidateGlobalConfigCall(uint32   CoreId,
                                                   uint8    ServiceId)
{
   10974:	b500      	push	{lr}
   10976:	b085      	sub	sp, #20
   10978:	9001      	str	r0, [sp, #4]
   1097a:	460b      	mov	r3, r1
   1097c:	f88d 3003 	strb.w	r3, [sp, #3]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10980:	2300      	movs	r3, #0
   10982:	f88d 300f 	strb.w	r3, [sp, #15]

    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10986:	4916      	ldr	r1, [pc, #88]	; (109e0 <Pwm_ValidateGlobalConfigCall+0x6c>)
   10988:	9a01      	ldr	r2, [sp, #4]
   1098a:	4613      	mov	r3, r2
   1098c:	005b      	lsls	r3, r3, #1
   1098e:	4413      	add	r3, r2
   10990:	00db      	lsls	r3, r3, #3
   10992:	440b      	add	r3, r1
   10994:	681b      	ldr	r3, [r3, #0]
   10996:	2b00      	cmp	r3, #0
   10998:	d10e      	bne.n	109b8 <Pwm_ValidateGlobalConfigCall+0x44>
    {
        if (PWM_INIT_ID != ServiceId)
   1099a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1099e:	2b00      	cmp	r3, #0
   109a0:	d018      	beq.n	109d4 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   109a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   109a6:	2311      	movs	r3, #17
   109a8:	2100      	movs	r1, #0
   109aa:	2079      	movs	r0, #121	; 0x79
   109ac:	f008 f940 	bl	18c30 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_UNINIT
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   109b0:	2301      	movs	r3, #1
   109b2:	f88d 300f 	strb.w	r3, [sp, #15]
   109b6:	e00d      	b.n	109d4 <Pwm_ValidateGlobalConfigCall+0x60>
        }
    }
    else
    {
        if (PWM_INIT_ID == ServiceId)
   109b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   109bc:	2b00      	cmp	r3, #0
   109be:	d109      	bne.n	109d4 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   109c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   109c4:	2314      	movs	r3, #20
   109c6:	2100      	movs	r1, #0
   109c8:	2079      	movs	r0, #121	; 0x79
   109ca:	f008 f931 	bl	18c30 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_ALREADY_INITIALIZED
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   109ce:	2301      	movs	r3, #1
   109d0:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return RetVal;
   109d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   109d8:	4618      	mov	r0, r3
   109da:	b005      	add	sp, #20
   109dc:	f85d fb04 	ldr.w	pc, [sp], #4
   109e0:	1fff8b3c 	.word	0x1fff8b3c

000109e4 <Pwm_EndValidateGlobalConfigCall>:
*
*/
static inline void Pwm_EndValidateGlobalConfigCall(uint32           CoreId,
                                                   Std_ReturnType   ValidCall,
                                                   uint8            ServiceId)
{
   109e4:	b082      	sub	sp, #8
   109e6:	9001      	str	r0, [sp, #4]
   109e8:	460b      	mov	r3, r1
   109ea:	f88d 3003 	strb.w	r3, [sp, #3]
   109ee:	4613      	mov	r3, r2
   109f0:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Change the state of the driver only if the previous call to
    Pwm_ValidateGlobalConfigCall() stated that the API call is valid */
    if ((Std_ReturnType)E_OK == ValidCall)
   109f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   109f8:	2b00      	cmp	r3, #0
   109fa:	d116      	bne.n	10a2a <Pwm_EndValidateGlobalConfigCall+0x46>
    {
        if (PWM_DEINIT_ID == ServiceId)
   109fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   10a00:	2b01      	cmp	r3, #1
   10a02:	d109      	bne.n	10a18 <Pwm_EndValidateGlobalConfigCall+0x34>
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_UNINIT;
   10a04:	490a      	ldr	r1, [pc, #40]	; (10a30 <Pwm_EndValidateGlobalConfigCall+0x4c>)
   10a06:	9a01      	ldr	r2, [sp, #4]
   10a08:	4613      	mov	r3, r2
   10a0a:	005b      	lsls	r3, r3, #1
   10a0c:	4413      	add	r3, r2
   10a0e:	00db      	lsls	r3, r3, #3
   10a10:	440b      	add	r3, r1
   10a12:	2200      	movs	r2, #0
   10a14:	601a      	str	r2, [r3, #0]
        else
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
        }
    }
}
   10a16:	e008      	b.n	10a2a <Pwm_EndValidateGlobalConfigCall+0x46>
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
   10a18:	4905      	ldr	r1, [pc, #20]	; (10a30 <Pwm_EndValidateGlobalConfigCall+0x4c>)
   10a1a:	9a01      	ldr	r2, [sp, #4]
   10a1c:	4613      	mov	r3, r2
   10a1e:	005b      	lsls	r3, r3, #1
   10a20:	4413      	add	r3, r2
   10a22:	00db      	lsls	r3, r3, #3
   10a24:	440b      	add	r3, r1
   10a26:	2201      	movs	r2, #1
   10a28:	601a      	str	r2, [r3, #0]
}
   10a2a:	bf00      	nop
   10a2c:	b002      	add	sp, #8
   10a2e:	4770      	bx	lr
   10a30:	1fff8b3c 	.word	0x1fff8b3c

00010a34 <Pwm_ValidateChannelConfigCall>:
*
*/
static inline Std_ReturnType Pwm_ValidateChannelConfigCall(uint32          CoreId,
                                                           Pwm_ChannelType ChannelNumber,
                                                           uint8           ServiceId)
{
   10a34:	b500      	push	{lr}
   10a36:	b085      	sub	sp, #20
   10a38:	9001      	str	r0, [sp, #4]
   10a3a:	460b      	mov	r3, r1
   10a3c:	f88d 3003 	strb.w	r3, [sp, #3]
   10a40:	4613      	mov	r3, r2
   10a42:	f88d 3002 	strb.w	r3, [sp, #2]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType          RetVal = (Std_ReturnType)E_OK;
   10a46:	2300      	movs	r3, #0
   10a48:	f88d 300f 	strb.w	r3, [sp, #15]
    Pwm_ChannelType         PartitionChannelIdx;

    /* Check if the driver is initialized */
    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10a4c:	4925      	ldr	r1, [pc, #148]	; (10ae4 <Pwm_ValidateChannelConfigCall+0xb0>)
   10a4e:	9a01      	ldr	r2, [sp, #4]
   10a50:	4613      	mov	r3, r2
   10a52:	005b      	lsls	r3, r3, #1
   10a54:	4413      	add	r3, r2
   10a56:	00db      	lsls	r3, r3, #3
   10a58:	440b      	add	r3, r1
   10a5a:	681b      	ldr	r3, [r3, #0]
   10a5c:	2b00      	cmp	r3, #0
   10a5e:	d10a      	bne.n	10a76 <Pwm_ValidateChannelConfigCall+0x42>
    {
        RetVal = (Std_ReturnType)E_NOT_OK;
   10a60:	2301      	movs	r3, #1
   10a62:	f88d 300f 	strb.w	r3, [sp, #15]

        /* Driver not initialized yet */
        (void)Det_ReportError
   10a66:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10a6a:	2311      	movs	r3, #17
   10a6c:	2100      	movs	r1, #0
   10a6e:	2079      	movs	r0, #121	; 0x79
   10a70:	f008 f8de 	bl	18c30 <Det_ReportError>
   10a74:	e02f      	b.n	10ad6 <Pwm_ValidateChannelConfigCall+0xa2>
        );
    }
    else
    {
        /* Check that the channel is in valid range */
        if (PWM_CONFIG_LOGIC_CHANNELS <= ChannelNumber)
   10a76:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a7a:	2b00      	cmp	r3, #0
   10a7c:	d00a      	beq.n	10a94 <Pwm_ValidateChannelConfigCall+0x60>
        {
            RetVal = (Std_ReturnType)E_NOT_OK;
   10a7e:	2301      	movs	r3, #1
   10a80:	f88d 300f 	strb.w	r3, [sp, #15]

            (void)Det_ReportError
   10a84:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10a88:	2312      	movs	r3, #18
   10a8a:	2100      	movs	r1, #0
   10a8c:	2079      	movs	r0, #121	; 0x79
   10a8e:	f008 f8cf 	bl	18c30 <Det_ReportError>
   10a92:	e020      	b.n	10ad6 <Pwm_ValidateChannelConfigCall+0xa2>
                (uint8)  PWM_E_PARAM_CHANNEL
            );
        }
        else
        {
            PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10a94:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a98:	4619      	mov	r1, r3
   10a9a:	9801      	ldr	r0, [sp, #4]
   10a9c:	f7ff ff60 	bl	10960 <Pwm_GetPartitionChannelIdx>
   10aa0:	4603      	mov	r3, r0
   10aa2:	f88d 300e 	strb.w	r3, [sp, #14]

            /* Check that the channel is not in current partition */
            if (PartitionChannelIdx >= Pwm_aState[CoreId].PwmConfig->NumChannels)
   10aa6:	490f      	ldr	r1, [pc, #60]	; (10ae4 <Pwm_ValidateChannelConfigCall+0xb0>)
   10aa8:	9a01      	ldr	r2, [sp, #4]
   10aaa:	4613      	mov	r3, r2
   10aac:	005b      	lsls	r3, r3, #1
   10aae:	4413      	add	r3, r2
   10ab0:	00db      	lsls	r3, r3, #3
   10ab2:	440b      	add	r3, r1
   10ab4:	3304      	adds	r3, #4
   10ab6:	681b      	ldr	r3, [r3, #0]
   10ab8:	781b      	ldrb	r3, [r3, #0]
   10aba:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10abe:	429a      	cmp	r2, r3
   10ac0:	d309      	bcc.n	10ad6 <Pwm_ValidateChannelConfigCall+0xa2>
            {
                RetVal = (Std_ReturnType)E_NOT_OK;
   10ac2:	2301      	movs	r3, #1
   10ac4:	f88d 300f 	strb.w	r3, [sp, #15]

                (void)Det_ReportError
   10ac8:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10acc:	2340      	movs	r3, #64	; 0x40
   10ace:	2100      	movs	r1, #0
   10ad0:	2079      	movs	r0, #121	; 0x79
   10ad2:	f008 f8ad 	bl	18c30 <Det_ReportError>
            /* Do nothing */
            }
        }
    }

    return RetVal;
   10ad6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10ada:	4618      	mov	r0, r3
   10adc:	b005      	add	sp, #20
   10ade:	f85d fb04 	ldr.w	pc, [sp], #4
   10ae2:	bf00      	nop
   10ae4:	1fff8b3c 	.word	0x1fff8b3c

00010ae8 <Pwm_EndValidateChannelConfigCall>:
*
* @return       void
*
*/
static inline void Pwm_EndValidateChannelConfigCall(Pwm_ChannelType ChannelNumber)
{
   10ae8:	b082      	sub	sp, #8
   10aea:	4603      	mov	r3, r0
   10aec:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Avoid compiler warning */
    (void)ChannelNumber;
}
   10af0:	bf00      	nop
   10af2:	b002      	add	sp, #8
   10af4:	4770      	bx	lr

00010af6 <Pwm_ValidateParamPtrInit>:
* @retval       E_NOT_OK        Pointer is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamPtrInit(uint32                 CoreId,
                                                      const Pwm_ConfigType * ConfigPtr)
{
   10af6:	b500      	push	{lr}
   10af8:	b085      	sub	sp, #20
   10afa:	9001      	str	r0, [sp, #4]
   10afc:	9100      	str	r1, [sp, #0]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   10afe:	2300      	movs	r3, #0
   10b00:	f88d 300f 	strb.w	r3, [sp, #15]
    /* For pre-compile, check DET error if the received config pointer is not NULL_PTR */
    if (NULL_PTR != ConfigPtr)
    {
#else
    /* For post build, check DET error if the received config pointer is NULL_PTR */
    if (NULL_PTR == ConfigPtr)
   10b04:	9b00      	ldr	r3, [sp, #0]
   10b06:	2b00      	cmp	r3, #0
   10b08:	d108      	bne.n	10b1c <Pwm_ValidateParamPtrInit+0x26>
    {
#endif
        /* Avoid compiler warning */
        (void)CoreId;

        (void)Det_ReportError
   10b0a:	2310      	movs	r3, #16
   10b0c:	2200      	movs	r2, #0
   10b0e:	2100      	movs	r1, #0
   10b10:	2079      	movs	r0, #121	; 0x79
   10b12:	f008 f88d 	bl	18c30 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  PWM_INIT_ID,
            (uint8)  PWM_E_INIT_FAILED
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10b16:	2301      	movs	r3, #1
   10b18:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        /* Do nothing */
    }
#endif

    return RetVal;
   10b1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10b20:	4618      	mov	r0, r3
   10b22:	b005      	add	sp, #20
   10b24:	f85d fb04 	ldr.w	pc, [sp], #4

00010b28 <Pwm_ValidateParamDuty>:
* @retval       E_NOT_OK          Duty Cycle is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamDuty(uint16   DutyCycle,
                                                   uint8    ServiceId)
{
   10b28:	b500      	push	{lr}
   10b2a:	b085      	sub	sp, #20
   10b2c:	4603      	mov	r3, r0
   10b2e:	460a      	mov	r2, r1
   10b30:	f8ad 3006 	strh.w	r3, [sp, #6]
   10b34:	4613      	mov	r3, r2
   10b36:	f88d 3005 	strb.w	r3, [sp, #5]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10b3a:	2300      	movs	r3, #0
   10b3c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if the DutyCycle is in valid range */
    if (DutyCycle > PWM_DUTY_CYCLE_100)
   10b40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10b48:	d909      	bls.n	10b5e <Pwm_ValidateParamDuty+0x36>
    {
        (void)Det_ReportError
   10b4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10b4e:	2332      	movs	r3, #50	; 0x32
   10b50:	2100      	movs	r1, #0
   10b52:	2079      	movs	r0, #121	; 0x79
   10b54:	f008 f86c 	bl	18c30 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_DUTYCYCLE_RANGE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10b58:	2301      	movs	r3, #1
   10b5a:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return RetVal;
   10b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10b62:	4618      	mov	r0, r3
   10b64:	b005      	add	sp, #20
   10b66:	f85d fb04 	ldr.w	pc, [sp], #4

00010b6a <Pwm_ValidateParamsPeriodClass>:
static inline Std_ReturnType Pwm_ValidateParamsPeriodClass(uint32                CoreId,
                                                           Pwm_ChannelType       ChannelNumber,
                                                           Pwm_ChannelClassType  ChannelClass,
                                                           Pwm_PeriodType        Period,
                                                           uint8                 ServiceId)
{
   10b6a:	b500      	push	{lr}
   10b6c:	b087      	sub	sp, #28
   10b6e:	9003      	str	r0, [sp, #12]
   10b70:	9201      	str	r2, [sp, #4]
   10b72:	461a      	mov	r2, r3
   10b74:	460b      	mov	r3, r1
   10b76:	f88d 300b 	strb.w	r3, [sp, #11]
   10b7a:	4613      	mov	r3, r2
   10b7c:	f8ad 3008 	strh.w	r3, [sp, #8]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType              RetVal = (Std_ReturnType)E_OK;
   10b80:	2300      	movs	r3, #0
   10b82:	f88d 3017 	strb.w	r3, [sp, #23]
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
    uint32                      PeriodMaxValue = (uint32)0U;
   10b86:	2300      	movs	r3, #0
   10b88:	9304      	str	r3, [sp, #16]
    (void)ChannelNumber;
    (void)CoreId;
#endif

    /* Check if channel supports updates of the period */
    if (PWM_VARIABLE_PERIOD != ChannelClass)
   10b8a:	9b01      	ldr	r3, [sp, #4]
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	d00a      	beq.n	10ba6 <Pwm_ValidateParamsPeriodClass+0x3c>
    {
        (void)Det_ReportError
   10b90:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10b94:	2313      	movs	r3, #19
   10b96:	2100      	movs	r1, #0
   10b98:	2079      	movs	r0, #121	; 0x79
   10b9a:	f008 f849 	bl	18c30 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_PERIOD_UNCHANGEABLE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10b9e:	2301      	movs	r3, #1
   10ba0:	f88d 3017 	strb.w	r3, [sp, #23]
   10ba4:	e023      	b.n	10bee <Pwm_ValidateParamsPeriodClass+0x84>
    }
    else
    {
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
        PeriodMaxValue = (uint32)Pwm_Ipw_GetMaxPeriodValue(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10ba6:	4915      	ldr	r1, [pc, #84]	; (10bfc <Pwm_ValidateParamsPeriodClass+0x92>)
   10ba8:	9a03      	ldr	r2, [sp, #12]
   10baa:	4613      	mov	r3, r2
   10bac:	005b      	lsls	r3, r3, #1
   10bae:	4413      	add	r3, r2
   10bb0:	00db      	lsls	r3, r3, #3
   10bb2:	440b      	add	r3, r1
   10bb4:	3310      	adds	r3, #16
   10bb6:	6819      	ldr	r1, [r3, #0]
   10bb8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10bbc:	4613      	mov	r3, r2
   10bbe:	005b      	lsls	r3, r3, #1
   10bc0:	4413      	add	r3, r2
   10bc2:	00db      	lsls	r3, r3, #3
   10bc4:	440b      	add	r3, r1
   10bc6:	3308      	adds	r3, #8
   10bc8:	4618      	mov	r0, r3
   10bca:	f000 fc8b 	bl	114e4 <Pwm_Ipw_GetMaxPeriodValue>
   10bce:	9004      	str	r0, [sp, #16]

        /* Check if period is in range */
        if ((uint32)Period > PeriodMaxValue)
   10bd0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   10bd4:	9a04      	ldr	r2, [sp, #16]
   10bd6:	429a      	cmp	r2, r3
   10bd8:	d209      	bcs.n	10bee <Pwm_ValidateParamsPeriodClass+0x84>
        {
            (void)Det_ReportError
   10bda:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10bde:	231a      	movs	r3, #26
   10be0:	2100      	movs	r1, #0
   10be2:	2079      	movs	r0, #121	; 0x79
   10be4:	f008 f824 	bl	18c30 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_PERIODVALUE
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10be8:	2301      	movs	r3, #1
   10bea:	f88d 3017 	strb.w	r3, [sp, #23]
#else
        /* Nothing to do in this branch */
#endif
    }

    return RetVal;
   10bee:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   10bf2:	4618      	mov	r0, r3
   10bf4:	b007      	add	sp, #28
   10bf6:	f85d fb04 	ldr.w	pc, [sp], #4
   10bfa:	bf00      	nop
   10bfc:	1fff8b3c 	.word	0x1fff8b3c

00010c00 <Pwm_ValidateSetOutPutToIdle>:
* @retval           RetVal          E_NOT_OK  Set output to idle is not valid
                                    E_OK      Set output to idle is valid
*/
static inline Std_ReturnType Pwm_ValidateSetOutPutToIdle(uint32            CoreId,
                                                         Pwm_ChannelType   ChannelNumber)
{
   10c00:	b500      	push	{lr}
   10c02:	b085      	sub	sp, #20
   10c04:	9001      	str	r0, [sp, #4]
   10c06:	460b      	mov	r3, r1
   10c08:	f88d 3003 	strb.w	r3, [sp, #3]
    
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10c0c:	2300      	movs	r3, #0
   10c0e:	f88d 300f 	strb.w	r3, [sp, #15]

    RetVal = Pwm_Ipw_ValidateSetOutPutToIdle(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10c12:	4913      	ldr	r1, [pc, #76]	; (10c60 <Pwm_ValidateSetOutPutToIdle+0x60>)
   10c14:	9a01      	ldr	r2, [sp, #4]
   10c16:	4613      	mov	r3, r2
   10c18:	005b      	lsls	r3, r3, #1
   10c1a:	4413      	add	r3, r2
   10c1c:	00db      	lsls	r3, r3, #3
   10c1e:	440b      	add	r3, r1
   10c20:	3310      	adds	r3, #16
   10c22:	6819      	ldr	r1, [r3, #0]
   10c24:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10c28:	4613      	mov	r3, r2
   10c2a:	005b      	lsls	r3, r3, #1
   10c2c:	4413      	add	r3, r2
   10c2e:	00db      	lsls	r3, r3, #3
   10c30:	440b      	add	r3, r1
   10c32:	3308      	adds	r3, #8
   10c34:	4618      	mov	r0, r3
   10c36:	f000 fc3f 	bl	114b8 <Pwm_Ipw_ValidateSetOutPutToIdle>
   10c3a:	4603      	mov	r3, r0
   10c3c:	f88d 300f 	strb.w	r3, [sp, #15]

    if((Std_ReturnType)E_OK != RetVal)
   10c40:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c44:	2b00      	cmp	r3, #0
   10c46:	d005      	beq.n	10c54 <Pwm_ValidateSetOutPutToIdle+0x54>
    {
        (void)Det_ReportError
   10c48:	2342      	movs	r3, #66	; 0x42
   10c4a:	2204      	movs	r2, #4
   10c4c:	2100      	movs	r1, #0
   10c4e:	2079      	movs	r0, #121	; 0x79
   10c50:	f007 ffee 	bl	18c30 <Det_ReportError>
            (uint8)  PWM_SETOUTPUTTOIDLE_ID,
            (uint8)  PWM_E_SETOUTPUTTOIDLE_NOT_SUPPORTED
        );
    }

    return RetVal;
   10c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10c58:	4618      	mov	r0, r3
   10c5a:	b005      	add	sp, #20
   10c5c:	f85d fb04 	ldr.w	pc, [sp], #4
   10c60:	1fff8b3c 	.word	0x1fff8b3c

00010c64 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
   10c64:	b510      	push	{r4, lr}
   10c66:	b084      	sub	sp, #16
   10c68:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10c6a:	2300      	movs	r3, #0
   10c6c:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_INIT_ID);
   10c6e:	2100      	movs	r1, #0
   10c70:	9802      	ldr	r0, [sp, #8]
   10c72:	f7ff fe7f 	bl	10974 <Pwm_ValidateGlobalConfigCall>
   10c76:	4603      	mov	r3, r0
   10c78:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10c7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c80:	2b00      	cmp	r3, #0
   10c82:	f040 8089 	bne.w	10d98 <Pwm_Init+0x134>
    {
#endif

#if (PWM_PARAM_CHECK == STD_ON)
        CallIsValid = Pwm_ValidateParamPtrInit(CoreId, ConfigPtr);
   10c86:	9901      	ldr	r1, [sp, #4]
   10c88:	9802      	ldr	r0, [sp, #8]
   10c8a:	f7ff ff34 	bl	10af6 <Pwm_ValidateParamPtrInit>
   10c8e:	4603      	mov	r3, r0
   10c90:	f88d 300f 	strb.w	r3, [sp, #15]

        if ((Std_ReturnType)E_OK == CallIsValid)
   10c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c98:	2b00      	cmp	r3, #0
   10c9a:	d17d      	bne.n	10d98 <Pwm_Init+0x134>
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
   10c9c:	4943      	ldr	r1, [pc, #268]	; (10dac <Pwm_Init+0x148>)
   10c9e:	9a02      	ldr	r2, [sp, #8]
   10ca0:	4613      	mov	r3, r2
   10ca2:	005b      	lsls	r3, r3, #1
   10ca4:	4413      	add	r3, r2
   10ca6:	00db      	lsls	r3, r3, #3
   10ca8:	440b      	add	r3, r1
   10caa:	3304      	adds	r3, #4
   10cac:	9a01      	ldr	r2, [sp, #4]
   10cae:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10cb0:	2300      	movs	r3, #0
   10cb2:	f88d 300e 	strb.w	r3, [sp, #14]
   10cb6:	e018      	b.n	10cea <Pwm_Init+0x86>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
   10cb8:	493c      	ldr	r1, [pc, #240]	; (10dac <Pwm_Init+0x148>)
   10cba:	9a02      	ldr	r2, [sp, #8]
   10cbc:	4613      	mov	r3, r2
   10cbe:	005b      	lsls	r3, r3, #1
   10cc0:	4413      	add	r3, r2
   10cc2:	00db      	lsls	r3, r3, #3
   10cc4:	440b      	add	r3, r1
   10cc6:	3304      	adds	r3, #4
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	68d9      	ldr	r1, [r3, #12]
   10ccc:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10cd0:	4613      	mov	r3, r2
   10cd2:	005b      	lsls	r3, r3, #1
   10cd4:	4413      	add	r3, r2
   10cd6:	009b      	lsls	r3, r3, #2
   10cd8:	440b      	add	r3, r1
   10cda:	4618      	mov	r0, r3
   10cdc:	f000 fa7a 	bl	111d4 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10ce0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10ce4:	3301      	adds	r3, #1
   10ce6:	f88d 300e 	strb.w	r3, [sp, #14]
   10cea:	4930      	ldr	r1, [pc, #192]	; (10dac <Pwm_Init+0x148>)
   10cec:	9a02      	ldr	r2, [sp, #8]
   10cee:	4613      	mov	r3, r2
   10cf0:	005b      	lsls	r3, r3, #1
   10cf2:	4413      	add	r3, r2
   10cf4:	00db      	lsls	r3, r3, #3
   10cf6:	440b      	add	r3, r1
   10cf8:	3304      	adds	r3, #4
   10cfa:	681b      	ldr	r3, [r3, #0]
   10cfc:	7a1b      	ldrb	r3, [r3, #8]
   10cfe:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d02:	429a      	cmp	r2, r3
   10d04:	d3d8      	bcc.n	10cb8 <Pwm_Init+0x54>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10d06:	2300      	movs	r3, #0
   10d08:	f88d 300e 	strb.w	r3, [sp, #14]
   10d0c:	e036      	b.n	10d7c <Pwm_Init+0x118>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
   10d0e:	4927      	ldr	r1, [pc, #156]	; (10dac <Pwm_Init+0x148>)
   10d10:	9a02      	ldr	r2, [sp, #8]
   10d12:	4613      	mov	r3, r2
   10d14:	005b      	lsls	r3, r3, #1
   10d16:	4413      	add	r3, r2
   10d18:	00db      	lsls	r3, r3, #3
   10d1a:	440b      	add	r3, r1
   10d1c:	3304      	adds	r3, #4
   10d1e:	681b      	ldr	r3, [r3, #0]
   10d20:	6859      	ldr	r1, [r3, #4]
   10d22:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d26:	f89d 000e 	ldrb.w	r0, [sp, #14]
   10d2a:	4613      	mov	r3, r2
   10d2c:	005b      	lsls	r3, r3, #1
   10d2e:	4413      	add	r3, r2
   10d30:	00db      	lsls	r3, r3, #3
   10d32:	4419      	add	r1, r3
   10d34:	4c1d      	ldr	r4, [pc, #116]	; (10dac <Pwm_Init+0x148>)
   10d36:	9a02      	ldr	r2, [sp, #8]
   10d38:	4613      	mov	r3, r2
   10d3a:	005b      	lsls	r3, r3, #1
   10d3c:	4413      	add	r3, r2
   10d3e:	005b      	lsls	r3, r3, #1
   10d40:	4403      	add	r3, r0
   10d42:	3304      	adds	r3, #4
   10d44:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
   10d48:	4918      	ldr	r1, [pc, #96]	; (10dac <Pwm_Init+0x148>)
   10d4a:	9a02      	ldr	r2, [sp, #8]
   10d4c:	4613      	mov	r3, r2
   10d4e:	005b      	lsls	r3, r3, #1
   10d50:	4413      	add	r3, r2
   10d52:	00db      	lsls	r3, r3, #3
   10d54:	440b      	add	r3, r1
   10d56:	3304      	adds	r3, #4
   10d58:	681b      	ldr	r3, [r3, #0]
   10d5a:	6859      	ldr	r1, [r3, #4]
   10d5c:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d60:	4613      	mov	r3, r2
   10d62:	005b      	lsls	r3, r3, #1
   10d64:	4413      	add	r3, r2
   10d66:	00db      	lsls	r3, r3, #3
   10d68:	3308      	adds	r3, #8
   10d6a:	440b      	add	r3, r1
   10d6c:	4618      	mov	r0, r3
   10d6e:	f000 fa0f 	bl	11190 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10d72:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10d76:	3301      	adds	r3, #1
   10d78:	f88d 300e 	strb.w	r3, [sp, #14]
   10d7c:	490b      	ldr	r1, [pc, #44]	; (10dac <Pwm_Init+0x148>)
   10d7e:	9a02      	ldr	r2, [sp, #8]
   10d80:	4613      	mov	r3, r2
   10d82:	005b      	lsls	r3, r3, #1
   10d84:	4413      	add	r3, r2
   10d86:	00db      	lsls	r3, r3, #3
   10d88:	440b      	add	r3, r1
   10d8a:	3304      	adds	r3, #4
   10d8c:	681b      	ldr	r3, [r3, #0]
   10d8e:	781b      	ldrb	r3, [r3, #0]
   10d90:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d94:	429a      	cmp	r2, r3
   10d96:	d3ba      	bcc.n	10d0e <Pwm_Init+0xaa>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
   10d98:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10d9c:	2200      	movs	r2, #0
   10d9e:	4619      	mov	r1, r3
   10da0:	9802      	ldr	r0, [sp, #8]
   10da2:	f7ff fe1f 	bl	109e4 <Pwm_EndValidateGlobalConfigCall>
#endif
}
   10da6:	bf00      	nop
   10da8:	b004      	add	sp, #16
   10daa:	bd10      	pop	{r4, pc}
   10dac:	1fff8b3c 	.word	0x1fff8b3c

00010db0 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
   10db0:	b500      	push	{lr}
   10db2:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10db4:	2300      	movs	r3, #0
   10db6:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_DEINIT_ID);
   10db8:	2101      	movs	r1, #1
   10dba:	9802      	ldr	r0, [sp, #8]
   10dbc:	f7ff fdda 	bl	10974 <Pwm_ValidateGlobalConfigCall>
   10dc0:	4603      	mov	r3, r0
   10dc2:	f88d 3007 	strb.w	r3, [sp, #7]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10dca:	2b00      	cmp	r3, #0
   10dcc:	f040 808e 	bne.w	10eec <Pwm_DeInit+0x13c>
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10dd0:	2300      	movs	r3, #0
   10dd2:	f88d 300f 	strb.w	r3, [sp, #15]
   10dd6:	e02a      	b.n	10e2e <Pwm_DeInit+0x7e>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
   10dd8:	494a      	ldr	r1, [pc, #296]	; (10f04 <Pwm_DeInit+0x154>)
   10dda:	9a02      	ldr	r2, [sp, #8]
   10ddc:	4613      	mov	r3, r2
   10dde:	005b      	lsls	r3, r3, #1
   10de0:	4413      	add	r3, r2
   10de2:	00db      	lsls	r3, r3, #3
   10de4:	440b      	add	r3, r1
   10de6:	3310      	adds	r3, #16
   10de8:	6819      	ldr	r1, [r3, #0]
   10dea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10dee:	4613      	mov	r3, r2
   10df0:	005b      	lsls	r3, r3, #1
   10df2:	4413      	add	r3, r2
   10df4:	00db      	lsls	r3, r3, #3
   10df6:	440b      	add	r3, r1
   10df8:	f103 0008 	add.w	r0, r3, #8
   10dfc:	4941      	ldr	r1, [pc, #260]	; (10f04 <Pwm_DeInit+0x154>)
   10dfe:	9a02      	ldr	r2, [sp, #8]
   10e00:	4613      	mov	r3, r2
   10e02:	005b      	lsls	r3, r3, #1
   10e04:	4413      	add	r3, r2
   10e06:	00db      	lsls	r3, r3, #3
   10e08:	440b      	add	r3, r1
   10e0a:	3310      	adds	r3, #16
   10e0c:	6819      	ldr	r1, [r3, #0]
   10e0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e12:	4613      	mov	r3, r2
   10e14:	005b      	lsls	r3, r3, #1
   10e16:	4413      	add	r3, r2
   10e18:	00db      	lsls	r3, r3, #3
   10e1a:	440b      	add	r3, r1
   10e1c:	695b      	ldr	r3, [r3, #20]
   10e1e:	4619      	mov	r1, r3
   10e20:	f000 fa2e 	bl	11280 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10e24:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10e28:	3301      	adds	r3, #1
   10e2a:	f88d 300f 	strb.w	r3, [sp, #15]
   10e2e:	4935      	ldr	r1, [pc, #212]	; (10f04 <Pwm_DeInit+0x154>)
   10e30:	9a02      	ldr	r2, [sp, #8]
   10e32:	4613      	mov	r3, r2
   10e34:	005b      	lsls	r3, r3, #1
   10e36:	4413      	add	r3, r2
   10e38:	00db      	lsls	r3, r3, #3
   10e3a:	440b      	add	r3, r1
   10e3c:	3304      	adds	r3, #4
   10e3e:	681b      	ldr	r3, [r3, #0]
   10e40:	781b      	ldrb	r3, [r3, #0]
   10e42:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e46:	429a      	cmp	r2, r3
   10e48:	d3c6      	bcc.n	10dd8 <Pwm_DeInit+0x28>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
   10e4a:	492e      	ldr	r1, [pc, #184]	; (10f04 <Pwm_DeInit+0x154>)
   10e4c:	9a02      	ldr	r2, [sp, #8]
   10e4e:	4613      	mov	r3, r2
   10e50:	005b      	lsls	r3, r3, #1
   10e52:	4413      	add	r3, r2
   10e54:	00db      	lsls	r3, r3, #3
   10e56:	440b      	add	r3, r1
   10e58:	3304      	adds	r3, #4
   10e5a:	681b      	ldr	r3, [r3, #0]
   10e5c:	9300      	str	r3, [sp, #0]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10e5e:	2300      	movs	r3, #0
   10e60:	f88d 300f 	strb.w	r3, [sp, #15]
   10e64:	e010      	b.n	10e88 <Pwm_DeInit+0xd8>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
   10e66:	9b00      	ldr	r3, [sp, #0]
   10e68:	68d9      	ldr	r1, [r3, #12]
   10e6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e6e:	4613      	mov	r3, r2
   10e70:	005b      	lsls	r3, r3, #1
   10e72:	4413      	add	r3, r2
   10e74:	009b      	lsls	r3, r3, #2
   10e76:	440b      	add	r3, r1
   10e78:	4618      	mov	r0, r3
   10e7a:	f000 fa21 	bl	112c0 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10e7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10e82:	3301      	adds	r3, #1
   10e84:	f88d 300f 	strb.w	r3, [sp, #15]
   10e88:	491e      	ldr	r1, [pc, #120]	; (10f04 <Pwm_DeInit+0x154>)
   10e8a:	9a02      	ldr	r2, [sp, #8]
   10e8c:	4613      	mov	r3, r2
   10e8e:	005b      	lsls	r3, r3, #1
   10e90:	4413      	add	r3, r2
   10e92:	00db      	lsls	r3, r3, #3
   10e94:	440b      	add	r3, r1
   10e96:	3304      	adds	r3, #4
   10e98:	681b      	ldr	r3, [r3, #0]
   10e9a:	7a1b      	ldrb	r3, [r3, #8]
   10e9c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10ea0:	429a      	cmp	r2, r3
   10ea2:	d3e0      	bcc.n	10e66 <Pwm_DeInit+0xb6>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
   10ea4:	4917      	ldr	r1, [pc, #92]	; (10f04 <Pwm_DeInit+0x154>)
   10ea6:	9a02      	ldr	r2, [sp, #8]
   10ea8:	4613      	mov	r3, r2
   10eaa:	005b      	lsls	r3, r3, #1
   10eac:	4413      	add	r3, r2
   10eae:	00db      	lsls	r3, r3, #3
   10eb0:	440b      	add	r3, r1
   10eb2:	3304      	adds	r3, #4
   10eb4:	2200      	movs	r2, #0
   10eb6:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   10eb8:	2300      	movs	r3, #0
   10eba:	f88d 300f 	strb.w	r3, [sp, #15]
   10ebe:	e011      	b.n	10ee4 <Pwm_DeInit+0x134>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
   10ec0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   10ec4:	480f      	ldr	r0, [pc, #60]	; (10f04 <Pwm_DeInit+0x154>)
   10ec6:	9a02      	ldr	r2, [sp, #8]
   10ec8:	4613      	mov	r3, r2
   10eca:	005b      	lsls	r3, r3, #1
   10ecc:	4413      	add	r3, r2
   10ece:	005b      	lsls	r3, r3, #1
   10ed0:	440b      	add	r3, r1
   10ed2:	3304      	adds	r3, #4
   10ed4:	2200      	movs	r2, #0
   10ed6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   10eda:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ede:	3301      	adds	r3, #1
   10ee0:	f88d 300f 	strb.w	r3, [sp, #15]
   10ee4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ee8:	2b00      	cmp	r3, #0
   10eea:	d0e9      	beq.n	10ec0 <Pwm_DeInit+0x110>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
   10eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ef0:	2201      	movs	r2, #1
   10ef2:	4619      	mov	r1, r3
   10ef4:	9802      	ldr	r0, [sp, #8]
   10ef6:	f7ff fd75 	bl	109e4 <Pwm_EndValidateGlobalConfigCall>
#endif

}
   10efa:	bf00      	nop
   10efc:	b005      	add	sp, #20
   10efe:	f85d fb04 	ldr.w	pc, [sp], #4
   10f02:	bf00      	nop
   10f04:	1fff8b3c 	.word	0x1fff8b3c

00010f08 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
   10f08:	b500      	push	{lr}
   10f0a:	b087      	sub	sp, #28
   10f0c:	4603      	mov	r3, r0
   10f0e:	460a      	mov	r2, r1
   10f10:	f88d 3007 	strb.w	r3, [sp, #7]
   10f14:	4613      	mov	r3, r2
   10f16:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
   10f1a:	2300      	movs	r3, #0
   10f1c:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10f20:	2300      	movs	r3, #0
   10f22:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
   10f24:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f28:	2202      	movs	r2, #2
   10f2a:	4619      	mov	r1, r3
   10f2c:	9804      	ldr	r0, [sp, #16]
   10f2e:	f7ff fd81 	bl	10a34 <Pwm_ValidateChannelConfigCall>
   10f32:	4603      	mov	r3, r0
   10f34:	2b00      	cmp	r3, #0
   10f36:	d136      	bne.n	10fa6 <Pwm_SetDutyCycle+0x9e>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10f38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f3c:	4619      	mov	r1, r3
   10f3e:	9804      	ldr	r0, [sp, #16]
   10f40:	f7ff fd0e 	bl	10960 <Pwm_GetPartitionChannelIdx>
   10f44:	4603      	mov	r3, r0
   10f46:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
   10f4a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10f4e:	2102      	movs	r1, #2
   10f50:	4618      	mov	r0, r3
   10f52:	f7ff fde9 	bl	10b28 <Pwm_ValidateParamDuty>
   10f56:	4603      	mov	r3, r0
   10f58:	2b00      	cmp	r3, #0
   10f5a:	d124      	bne.n	10fa6 <Pwm_SetDutyCycle+0x9e>
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   10f5c:	4916      	ldr	r1, [pc, #88]	; (10fb8 <Pwm_SetDutyCycle+0xb0>)
   10f5e:	9a04      	ldr	r2, [sp, #16]
   10f60:	4613      	mov	r3, r2
   10f62:	005b      	lsls	r3, r3, #1
   10f64:	4413      	add	r3, r2
   10f66:	00db      	lsls	r3, r3, #3
   10f68:	440b      	add	r3, r1
   10f6a:	3310      	adds	r3, #16
   10f6c:	6819      	ldr	r1, [r3, #0]
   10f6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10f72:	4613      	mov	r3, r2
   10f74:	005b      	lsls	r3, r3, #1
   10f76:	4413      	add	r3, r2
   10f78:	00db      	lsls	r3, r3, #3
   10f7a:	440b      	add	r3, r1
   10f7c:	f103 0208 	add.w	r2, r3, #8
   10f80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10f84:	4611      	mov	r1, r2
   10f86:	4618      	mov	r0, r3
   10f88:	f000 f9b6 	bl	112f8 <Pwm_Ipw_SetDutyCycle>
   10f8c:	4603      	mov	r3, r0
   10f8e:	f88d 3017 	strb.w	r3, [sp, #23]

            /* Avoid compiler warning */
            (void)RetVal;

#if (PWM_PARAM_CHECK == STD_ON)
            if ((Std_ReturnType)E_OK != RetVal)
   10f92:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10f96:	2b00      	cmp	r3, #0
   10f98:	d005      	beq.n	10fa6 <Pwm_SetDutyCycle+0x9e>
            {
                (void)Det_ReportError
   10f9a:	2334      	movs	r3, #52	; 0x34
   10f9c:	2202      	movs	r2, #2
   10f9e:	2100      	movs	r1, #0
   10fa0:	2079      	movs	r0, #121	; 0x79
   10fa2:	f007 fe45 	bl	18c30 <Det_ReportError>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   10fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10faa:	4618      	mov	r0, r3
   10fac:	f7ff fd9c 	bl	10ae8 <Pwm_EndValidateChannelConfigCall>
#endif

}
   10fb0:	bf00      	nop
   10fb2:	b007      	add	sp, #28
   10fb4:	f85d fb04 	ldr.w	pc, [sp], #4
   10fb8:	1fff8b3c 	.word	0x1fff8b3c

00010fbc <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
   10fbc:	b500      	push	{lr}
   10fbe:	b087      	sub	sp, #28
   10fc0:	4603      	mov	r3, r0
   10fc2:	f88d 300f 	strb.w	r3, [sp, #15]
   10fc6:	460b      	mov	r3, r1
   10fc8:	f8ad 300c 	strh.w	r3, [sp, #12]
   10fcc:	4613      	mov	r3, r2
   10fce:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10fd2:	2300      	movs	r3, #0
   10fd4:	9305      	str	r3, [sp, #20]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
   10fd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10fda:	2203      	movs	r2, #3
   10fdc:	4619      	mov	r1, r3
   10fde:	9805      	ldr	r0, [sp, #20]
   10fe0:	f7ff fd28 	bl	10a34 <Pwm_ValidateChannelConfigCall>
   10fe4:	4603      	mov	r3, r0
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	d147      	bne.n	1107a <Pwm_SetPeriodAndDuty+0xbe>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10fea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10fee:	4619      	mov	r1, r3
   10ff0:	9805      	ldr	r0, [sp, #20]
   10ff2:	f7ff fcb5 	bl	10960 <Pwm_GetPartitionChannelIdx>
   10ff6:	4603      	mov	r3, r0
   10ff8:	f88d 3013 	strb.w	r3, [sp, #19]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamsPeriodClass(CoreId, PartitionChannelIdx, (*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].PwmChannelClass, Period, PWM_SETPERIODANDDUTY_ID))
   10ffc:	4923      	ldr	r1, [pc, #140]	; (1108c <Pwm_SetPeriodAndDuty+0xd0>)
   10ffe:	9a05      	ldr	r2, [sp, #20]
   11000:	4613      	mov	r3, r2
   11002:	005b      	lsls	r3, r3, #1
   11004:	4413      	add	r3, r2
   11006:	00db      	lsls	r3, r3, #3
   11008:	440b      	add	r3, r1
   1100a:	3310      	adds	r3, #16
   1100c:	6819      	ldr	r1, [r3, #0]
   1100e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   11012:	4613      	mov	r3, r2
   11014:	005b      	lsls	r3, r3, #1
   11016:	4413      	add	r3, r2
   11018:	00db      	lsls	r3, r3, #3
   1101a:	440b      	add	r3, r1
   1101c:	685a      	ldr	r2, [r3, #4]
   1101e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11022:	f89d 1013 	ldrb.w	r1, [sp, #19]
   11026:	2003      	movs	r0, #3
   11028:	9000      	str	r0, [sp, #0]
   1102a:	9805      	ldr	r0, [sp, #20]
   1102c:	f7ff fd9d 	bl	10b6a <Pwm_ValidateParamsPeriodClass>
   11030:	4603      	mov	r3, r0
   11032:	2b00      	cmp	r3, #0
   11034:	d121      	bne.n	1107a <Pwm_SetPeriodAndDuty+0xbe>
        {
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
   11036:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1103a:	2103      	movs	r1, #3
   1103c:	4618      	mov	r0, r3
   1103e:	f7ff fd73 	bl	10b28 <Pwm_ValidateParamDuty>
   11042:	4603      	mov	r3, r0
   11044:	2b00      	cmp	r3, #0
   11046:	d118      	bne.n	1107a <Pwm_SetPeriodAndDuty+0xbe>
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11048:	4910      	ldr	r1, [pc, #64]	; (1108c <Pwm_SetPeriodAndDuty+0xd0>)
   1104a:	9a05      	ldr	r2, [sp, #20]
   1104c:	4613      	mov	r3, r2
   1104e:	005b      	lsls	r3, r3, #1
   11050:	4413      	add	r3, r2
   11052:	00db      	lsls	r3, r3, #3
   11054:	440b      	add	r3, r1
   11056:	3310      	adds	r3, #16
   11058:	6819      	ldr	r1, [r3, #0]
   1105a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1105e:	4613      	mov	r3, r2
   11060:	005b      	lsls	r3, r3, #1
   11062:	4413      	add	r3, r2
   11064:	00db      	lsls	r3, r3, #3
   11066:	440b      	add	r3, r1
   11068:	f103 0208 	add.w	r2, r3, #8
   1106c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   11070:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11074:	4618      	mov	r0, r3
   11076:	f000 f98b 	bl	11390 <Pwm_Ipw_SetPeriodAndDuty>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   1107a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1107e:	4618      	mov	r0, r3
   11080:	f7ff fd32 	bl	10ae8 <Pwm_EndValidateChannelConfigCall>
#endif

}
   11084:	bf00      	nop
   11086:	b007      	add	sp, #28
   11088:	f85d fb04 	ldr.w	pc, [sp], #4
   1108c:	1fff8b3c 	.word	0x1fff8b3c

00011090 <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
   11090:	b500      	push	{lr}
   11092:	b085      	sub	sp, #20
   11094:	4603      	mov	r3, r0
   11096:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   1109a:	2300      	movs	r3, #0
   1109c:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
   1109e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   110a2:	2204      	movs	r2, #4
   110a4:	4619      	mov	r1, r3
   110a6:	9803      	ldr	r0, [sp, #12]
   110a8:	f7ff fcc4 	bl	10a34 <Pwm_ValidateChannelConfigCall>
   110ac:	4603      	mov	r3, r0
   110ae:	2b00      	cmp	r3, #0
   110b0:	d143      	bne.n	1113a <Pwm_SetOutputToIdle+0xaa>
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   110b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   110b6:	4619      	mov	r1, r3
   110b8:	9803      	ldr	r0, [sp, #12]
   110ba:	f7ff fc51 	bl	10960 <Pwm_GetPartitionChannelIdx>
   110be:	4603      	mov	r3, r0
   110c0:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(PWM_SETOUTPUTTOIDLE_PLAUSABILITY) && (PWM_SETOUTPUTTOIDLE_PLAUSABILITY == STD_ON) && (PWM_PARAM_CHECK == STD_ON))
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
   110c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   110c8:	4619      	mov	r1, r3
   110ca:	9803      	ldr	r0, [sp, #12]
   110cc:	f7ff fd98 	bl	10c00 <Pwm_ValidateSetOutPutToIdle>
   110d0:	4603      	mov	r3, r0
   110d2:	2b00      	cmp	r3, #0
   110d4:	d131      	bne.n	1113a <Pwm_SetOutputToIdle+0xaa>
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   110d6:	491d      	ldr	r1, [pc, #116]	; (1114c <Pwm_SetOutputToIdle+0xbc>)
   110d8:	9a03      	ldr	r2, [sp, #12]
   110da:	4613      	mov	r3, r2
   110dc:	005b      	lsls	r3, r3, #1
   110de:	4413      	add	r3, r2
   110e0:	00db      	lsls	r3, r3, #3
   110e2:	440b      	add	r3, r1
   110e4:	3310      	adds	r3, #16
   110e6:	6819      	ldr	r1, [r3, #0]
   110e8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   110ec:	4613      	mov	r3, r2
   110ee:	005b      	lsls	r3, r3, #1
   110f0:	4413      	add	r3, r2
   110f2:	00db      	lsls	r3, r3, #3
   110f4:	440b      	add	r3, r1
   110f6:	6958      	ldr	r0, [r3, #20]
   110f8:	4914      	ldr	r1, [pc, #80]	; (1114c <Pwm_SetOutputToIdle+0xbc>)
   110fa:	9a03      	ldr	r2, [sp, #12]
   110fc:	4613      	mov	r3, r2
   110fe:	005b      	lsls	r3, r3, #1
   11100:	4413      	add	r3, r2
   11102:	00db      	lsls	r3, r3, #3
   11104:	440b      	add	r3, r1
   11106:	3310      	adds	r3, #16
   11108:	6819      	ldr	r1, [r3, #0]
   1110a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1110e:	4613      	mov	r3, r2
   11110:	005b      	lsls	r3, r3, #1
   11112:	4413      	add	r3, r2
   11114:	00db      	lsls	r3, r3, #3
   11116:	440b      	add	r3, r1
   11118:	3308      	adds	r3, #8
   1111a:	4619      	mov	r1, r3
   1111c:	f000 f97e 	bl	1141c <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
   11120:	f89d 100b 	ldrb.w	r1, [sp, #11]
   11124:	4809      	ldr	r0, [pc, #36]	; (1114c <Pwm_SetOutputToIdle+0xbc>)
   11126:	9a03      	ldr	r2, [sp, #12]
   11128:	4613      	mov	r3, r2
   1112a:	005b      	lsls	r3, r3, #1
   1112c:	4413      	add	r3, r2
   1112e:	00db      	lsls	r3, r3, #3
   11130:	4403      	add	r3, r0
   11132:	440b      	add	r3, r1
   11134:	3314      	adds	r3, #20
   11136:	2201      	movs	r2, #1
   11138:	701a      	strb	r2, [r3, #0]
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   1113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1113e:	4618      	mov	r0, r3
   11140:	f7ff fcd2 	bl	10ae8 <Pwm_EndValidateChannelConfigCall>
#endif

}
   11144:	bf00      	nop
   11146:	b005      	add	sp, #20
   11148:	f85d fb04 	ldr.w	pc, [sp], #4
   1114c:	1fff8b3c 	.word	0x1fff8b3c

00011150 <Pwm_GetVersionInfo>:
*
* @implements   Pwm_GetVersionInfo_Activity
*
*/
void Pwm_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
   11150:	b500      	push	{lr}
   11152:	b083      	sub	sp, #12
   11154:	9001      	str	r0, [sp, #4]
#if (PWM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != versioninfo)
   11156:	9b01      	ldr	r3, [sp, #4]
   11158:	2b00      	cmp	r3, #0
   1115a:	d00f      	beq.n	1117c <Pwm_GetVersionInfo+0x2c>
    {
#endif

        (versioninfo)->vendorID         = (uint16)PWM_VENDOR_ID;
   1115c:	9b01      	ldr	r3, [sp, #4]
   1115e:	222b      	movs	r2, #43	; 0x2b
   11160:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PWM_MODULE_ID;
   11162:	9b01      	ldr	r3, [sp, #4]
   11164:	2279      	movs	r2, #121	; 0x79
   11166:	805a      	strh	r2, [r3, #2]

        (versioninfo)->sw_major_version = (uint8)PWM_SW_MAJOR_VERSION;
   11168:	9b01      	ldr	r3, [sp, #4]
   1116a:	2202      	movs	r2, #2
   1116c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PWM_SW_MINOR_VERSION;
   1116e:	9b01      	ldr	r3, [sp, #4]
   11170:	2200      	movs	r2, #0
   11172:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PWM_SW_PATCH_VERSION;
   11174:	9b01      	ldr	r3, [sp, #4]
   11176:	2200      	movs	r2, #0
   11178:	719a      	strb	r2, [r3, #6]
            (uint8)  PWM_E_PARAM_POINTER
        );
    }
#endif

}
   1117a:	e005      	b.n	11188 <Pwm_GetVersionInfo+0x38>
        (void)Det_ReportError
   1117c:	2315      	movs	r3, #21
   1117e:	2208      	movs	r2, #8
   11180:	2100      	movs	r1, #0
   11182:	2079      	movs	r0, #121	; 0x79
   11184:	f007 fd54 	bl	18c30 <Det_ReportError>
}
   11188:	bf00      	nop
   1118a:	b003      	add	sp, #12
   1118c:	f85d fb04 	ldr.w	pc, [sp], #4

00011190 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
   11190:	b410      	push	{r4}
   11192:	b083      	sub	sp, #12
   11194:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
   11196:	9b01      	ldr	r3, [sp, #4]
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	2b00      	cmp	r3, #0
   1119c:	d010      	beq.n	111c0 <Pwm_Ipw_Init+0x30>
   1119e:	2b01      	cmp	r3, #1
   111a0:	d110      	bne.n	111c4 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
   111a2:	9b01      	ldr	r3, [sp, #4]
   111a4:	7a1b      	ldrb	r3, [r3, #8]
   111a6:	461c      	mov	r4, r3
   111a8:	9b01      	ldr	r3, [sp, #4]
   111aa:	685b      	ldr	r3, [r3, #4]
   111ac:	781b      	ldrb	r3, [r3, #0]
   111ae:	4618      	mov	r0, r3
   111b0:	9b01      	ldr	r3, [sp, #4]
   111b2:	8959      	ldrh	r1, [r3, #10]
   111b4:	4a06      	ldr	r2, [pc, #24]	; (111d0 <Pwm_Ipw_Init+0x40>)
   111b6:	00e3      	lsls	r3, r4, #3
   111b8:	4403      	add	r3, r0
   111ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   111be:	e002      	b.n	111c6 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   111c0:	bf00      	nop
   111c2:	e000      	b.n	111c6 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
   111c4:	bf00      	nop
    }
}
   111c6:	bf00      	nop
   111c8:	b003      	add	sp, #12
   111ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   111ce:	4770      	bx	lr
   111d0:	1fff91d4 	.word	0x1fff91d4

000111d4 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   111d4:	b500      	push	{lr}
   111d6:	b085      	sub	sp, #20
   111d8:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
   111da:	2300      	movs	r3, #0
   111dc:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
   111e0:	2300      	movs	r3, #0
   111e2:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
   111e6:	9b01      	ldr	r3, [sp, #4]
   111e8:	685b      	ldr	r3, [r3, #4]
   111ea:	2b00      	cmp	r3, #0
   111ec:	d03c      	beq.n	11268 <Pwm_Ipw_InitInstance+0x94>
   111ee:	2b01      	cmp	r3, #1
   111f0:	d13c      	bne.n	1126c <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   111f2:	9b01      	ldr	r3, [sp, #4]
   111f4:	689b      	ldr	r3, [r3, #8]
   111f6:	2b00      	cmp	r3, #0
   111f8:	d03a      	beq.n	11270 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
   111fa:	9b01      	ldr	r3, [sp, #4]
   111fc:	781a      	ldrb	r2, [r3, #0]
   111fe:	9b01      	ldr	r3, [sp, #4]
   11200:	689b      	ldr	r3, [r3, #8]
   11202:	4619      	mov	r1, r3
   11204:	4610      	mov	r0, r2
   11206:	f7fe fa0f 	bl	f628 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   1120a:	2300      	movs	r3, #0
   1120c:	f88d 300f 	strb.w	r3, [sp, #15]
   11210:	e022      	b.n	11258 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
   11212:	9b01      	ldr	r3, [sp, #4]
   11214:	689b      	ldr	r3, [r3, #8]
   11216:	685a      	ldr	r2, [r3, #4]
   11218:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1121c:	009b      	lsls	r3, r3, #2
   1121e:	4413      	add	r3, r2
   11220:	681b      	ldr	r3, [r3, #0]
   11222:	781b      	ldrb	r3, [r3, #0]
   11224:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
   11228:	9b01      	ldr	r3, [sp, #4]
   1122a:	689b      	ldr	r3, [r3, #8]
   1122c:	685a      	ldr	r2, [r3, #4]
   1122e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11232:	009b      	lsls	r3, r3, #2
   11234:	4413      	add	r3, r2
   11236:	681a      	ldr	r2, [r3, #0]
   11238:	9b01      	ldr	r3, [sp, #4]
   1123a:	781b      	ldrb	r3, [r3, #0]
   1123c:	4619      	mov	r1, r3
   1123e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11242:	6a12      	ldr	r2, [r2, #32]
   11244:	480d      	ldr	r0, [pc, #52]	; (1127c <Pwm_Ipw_InitInstance+0xa8>)
   11246:	00c9      	lsls	r1, r1, #3
   11248:	440b      	add	r3, r1
   1124a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   1124e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11252:	3301      	adds	r3, #1
   11254:	f88d 300f 	strb.w	r3, [sp, #15]
   11258:	9b01      	ldr	r3, [sp, #4]
   1125a:	689b      	ldr	r3, [r3, #8]
   1125c:	7a1b      	ldrb	r3, [r3, #8]
   1125e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11262:	429a      	cmp	r2, r3
   11264:	d3d5      	bcc.n	11212 <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
   11266:	e003      	b.n	11270 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   11268:	bf00      	nop
   1126a:	e002      	b.n	11272 <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
   1126c:	bf00      	nop
   1126e:	e000      	b.n	11272 <Pwm_Ipw_InitInstance+0x9e>
            break;
   11270:	bf00      	nop
    }
}
   11272:	bf00      	nop
   11274:	b005      	add	sp, #20
   11276:	f85d fb04 	ldr.w	pc, [sp], #4
   1127a:	bf00      	nop
   1127c:	1fff9154 	.word	0x1fff9154

00011280 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
   11280:	b082      	sub	sp, #8
   11282:	9001      	str	r0, [sp, #4]
   11284:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
   11286:	9b01      	ldr	r3, [sp, #4]
   11288:	681b      	ldr	r3, [r3, #0]
   1128a:	2b00      	cmp	r3, #0
   1128c:	d00f      	beq.n	112ae <Pwm_Ipw_DeInit+0x2e>
   1128e:	2b01      	cmp	r3, #1
   11290:	d10f      	bne.n	112b2 <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   11292:	9b01      	ldr	r3, [sp, #4]
   11294:	7a1b      	ldrb	r3, [r3, #8]
   11296:	4618      	mov	r0, r3
   11298:	9b01      	ldr	r3, [sp, #4]
   1129a:	685b      	ldr	r3, [r3, #4]
   1129c:	781b      	ldrb	r3, [r3, #0]
   1129e:	4619      	mov	r1, r3
   112a0:	4a06      	ldr	r2, [pc, #24]	; (112bc <Pwm_Ipw_DeInit+0x3c>)
   112a2:	00c3      	lsls	r3, r0, #3
   112a4:	440b      	add	r3, r1
   112a6:	2100      	movs	r1, #0
   112a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   112ac:	e002      	b.n	112b4 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   112ae:	bf00      	nop
   112b0:	e000      	b.n	112b4 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
   112b2:	bf00      	nop
    }
    (void) ChannelIdleState;

}
   112b4:	bf00      	nop
   112b6:	b002      	add	sp, #8
   112b8:	4770      	bx	lr
   112ba:	bf00      	nop
   112bc:	1fff91d4 	.word	0x1fff91d4

000112c0 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   112c0:	b500      	push	{lr}
   112c2:	b083      	sub	sp, #12
   112c4:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
   112c6:	9b01      	ldr	r3, [sp, #4]
   112c8:	685b      	ldr	r3, [r3, #4]
   112ca:	2b00      	cmp	r3, #0
   112cc:	d00b      	beq.n	112e6 <Pwm_Ipw_DeInitInstance+0x26>
   112ce:	2b01      	cmp	r3, #1
   112d0:	d10b      	bne.n	112ea <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   112d2:	9b01      	ldr	r3, [sp, #4]
   112d4:	689b      	ldr	r3, [r3, #8]
   112d6:	2b00      	cmp	r3, #0
   112d8:	d009      	beq.n	112ee <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
   112da:	9b01      	ldr	r3, [sp, #4]
   112dc:	781b      	ldrb	r3, [r3, #0]
   112de:	4618      	mov	r0, r3
   112e0:	f7fe fa14 	bl	f70c <Ftm_Pwm_Ip_DeInit>
            }
            break;
   112e4:	e003      	b.n	112ee <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   112e6:	bf00      	nop
   112e8:	e002      	b.n	112f0 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
   112ea:	bf00      	nop
   112ec:	e000      	b.n	112f0 <Pwm_Ipw_DeInitInstance+0x30>
            break;
   112ee:	bf00      	nop
    }
}
   112f0:	bf00      	nop
   112f2:	b003      	add	sp, #12
   112f4:	f85d fb04 	ldr.w	pc, [sp], #4

000112f8 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
   112f8:	b500      	push	{lr}
   112fa:	b085      	sub	sp, #20
   112fc:	4603      	mov	r3, r0
   112fe:	9100      	str	r1, [sp, #0]
   11300:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
   11304:	2300      	movs	r3, #0
   11306:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   1130a:	2300      	movs	r3, #0
   1130c:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
   11310:	9b00      	ldr	r3, [sp, #0]
   11312:	681b      	ldr	r3, [r3, #0]
   11314:	2b00      	cmp	r3, #0
   11316:	d02c      	beq.n	11372 <Pwm_Ipw_SetDutyCycle+0x7a>
   11318:	2b01      	cmp	r3, #1
   1131a:	d12c      	bne.n	11376 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   1131c:	9b00      	ldr	r3, [sp, #0]
   1131e:	685b      	ldr	r3, [r3, #4]
   11320:	2b00      	cmp	r3, #0
   11322:	d02a      	beq.n	1137a <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
   11324:	9b00      	ldr	r3, [sp, #0]
   11326:	7a1b      	ldrb	r3, [r3, #8]
   11328:	461a      	mov	r2, r3
   1132a:	4b17      	ldr	r3, [pc, #92]	; (11388 <Pwm_Ipw_SetDutyCycle+0x90>)
   1132c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11330:	461a      	mov	r2, r3
   11332:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11336:	fb02 f303 	mul.w	r3, r2, r3
   1133a:	0bdb      	lsrs	r3, r3, #15
   1133c:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   11340:	9b00      	ldr	r3, [sp, #0]
   11342:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   11344:	9b00      	ldr	r3, [sp, #0]
   11346:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   11348:	7819      	ldrb	r1, [r3, #0]
   1134a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1134e:	2301      	movs	r3, #1
   11350:	f7fe fa2e 	bl	f7b0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   11354:	9b00      	ldr	r3, [sp, #0]
   11356:	7a1b      	ldrb	r3, [r3, #8]
   11358:	4618      	mov	r0, r3
   1135a:	9b00      	ldr	r3, [sp, #0]
   1135c:	685b      	ldr	r3, [r3, #4]
   1135e:	781b      	ldrb	r3, [r3, #0]
   11360:	461a      	mov	r2, r3
   11362:	490a      	ldr	r1, [pc, #40]	; (1138c <Pwm_Ipw_SetDutyCycle+0x94>)
   11364:	00c3      	lsls	r3, r0, #3
   11366:	4413      	add	r3, r2
   11368:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1136c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   11370:	e003      	b.n	1137a <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   11372:	bf00      	nop
   11374:	e002      	b.n	1137c <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
   11376:	bf00      	nop
   11378:	e000      	b.n	1137c <Pwm_Ipw_SetDutyCycle+0x84>
            break;
   1137a:	bf00      	nop
    }

    return RetVal;
   1137c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   11380:	4618      	mov	r0, r3
   11382:	b005      	add	sp, #20
   11384:	f85d fb04 	ldr.w	pc, [sp], #4
   11388:	1fff8e2c 	.word	0x1fff8e2c
   1138c:	1fff91d4 	.word	0x1fff91d4

00011390 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
   11390:	b510      	push	{r4, lr}
   11392:	b086      	sub	sp, #24
   11394:	4603      	mov	r3, r0
   11396:	9202      	str	r2, [sp, #8]
   11398:	f8ad 300e 	strh.w	r3, [sp, #14]
   1139c:	460b      	mov	r3, r1
   1139e:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   113a2:	2300      	movs	r3, #0
   113a4:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
   113a8:	9b02      	ldr	r3, [sp, #8]
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	2b00      	cmp	r3, #0
   113ae:	d02a      	beq.n	11406 <Pwm_Ipw_SetPeriodAndDuty+0x76>
   113b0:	2b01      	cmp	r3, #1
   113b2:	d12a      	bne.n	1140a <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   113b4:	9b02      	ldr	r3, [sp, #8]
   113b6:	685b      	ldr	r3, [r3, #4]
   113b8:	2b00      	cmp	r3, #0
   113ba:	d028      	beq.n	1140e <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
   113bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   113c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   113c4:	fb02 f303 	mul.w	r3, r2, r3
   113c8:	0bdb      	lsrs	r3, r3, #15
   113ca:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   113ce:	9b02      	ldr	r3, [sp, #8]
   113d0:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   113d2:	9b02      	ldr	r3, [sp, #8]
   113d4:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   113d6:	7819      	ldrb	r1, [r3, #0]
   113d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   113dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   113e0:	2401      	movs	r4, #1
   113e2:	9400      	str	r4, [sp, #0]
   113e4:	f7fe fabe 	bl	f964 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   113e8:	9b02      	ldr	r3, [sp, #8]
   113ea:	7a1b      	ldrb	r3, [r3, #8]
   113ec:	4618      	mov	r0, r3
   113ee:	9b02      	ldr	r3, [sp, #8]
   113f0:	685b      	ldr	r3, [r3, #4]
   113f2:	781b      	ldrb	r3, [r3, #0]
   113f4:	461a      	mov	r2, r3
   113f6:	4908      	ldr	r1, [pc, #32]	; (11418 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
   113f8:	00c3      	lsls	r3, r0, #3
   113fa:	4413      	add	r3, r2
   113fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11400:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   11404:	e003      	b.n	1140e <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   11406:	bf00      	nop
   11408:	e002      	b.n	11410 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
   1140a:	bf00      	nop
   1140c:	e000      	b.n	11410 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
   1140e:	bf00      	nop
    }
}
   11410:	bf00      	nop
   11412:	b006      	add	sp, #24
   11414:	bd10      	pop	{r4, pc}
   11416:	bf00      	nop
   11418:	1fff91d4 	.word	0x1fff91d4

0001141c <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
   1141c:	b500      	push	{lr}
   1141e:	b085      	sub	sp, #20
   11420:	9001      	str	r0, [sp, #4]
   11422:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
   11424:	9b00      	ldr	r3, [sp, #0]
   11426:	7a1b      	ldrb	r3, [r3, #8]
   11428:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
   1142c:	9b00      	ldr	r3, [sp, #0]
   1142e:	685b      	ldr	r3, [r3, #4]
   11430:	781b      	ldrb	r3, [r3, #0]
   11432:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
   11436:	9b00      	ldr	r3, [sp, #0]
   11438:	681b      	ldr	r3, [r3, #0]
   1143a:	2b00      	cmp	r3, #0
   1143c:	d02e      	beq.n	1149c <Pwm_Ipw_SetOutputToIdle+0x80>
   1143e:	2b01      	cmp	r3, #1
   11440:	d12e      	bne.n	114a0 <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   11442:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11446:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1144a:	4919      	ldr	r1, [pc, #100]	; (114b0 <Pwm_Ipw_SetOutputToIdle+0x94>)
   1144c:	00d2      	lsls	r2, r2, #3
   1144e:	4413      	add	r3, r2
   11450:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   11454:	2b01      	cmp	r3, #1
   11456:	d125      	bne.n	114a4 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
   11458:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1145c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11460:	4913      	ldr	r1, [pc, #76]	; (114b0 <Pwm_Ipw_SetOutputToIdle+0x94>)
   11462:	00d2      	lsls	r2, r2, #3
   11464:	4413      	add	r3, r2
   11466:	2202      	movs	r2, #2
   11468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
   1146c:	9b00      	ldr	r3, [sp, #0]
   1146e:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
   11470:	69da      	ldr	r2, [r3, #28]
   11472:	f89d 100e 	ldrb.w	r1, [sp, #14]
   11476:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1147a:	2301      	movs	r3, #1
   1147c:	f7fe faf6 	bl	fa6c <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   11480:	9b00      	ldr	r3, [sp, #0]
   11482:	7a1b      	ldrb	r3, [r3, #8]
   11484:	4618      	mov	r0, r3
   11486:	9b00      	ldr	r3, [sp, #0]
   11488:	685b      	ldr	r3, [r3, #4]
   1148a:	781b      	ldrb	r3, [r3, #0]
   1148c:	4619      	mov	r1, r3
   1148e:	4a09      	ldr	r2, [pc, #36]	; (114b4 <Pwm_Ipw_SetOutputToIdle+0x98>)
   11490:	00c3      	lsls	r3, r0, #3
   11492:	440b      	add	r3, r1
   11494:	2100      	movs	r1, #0
   11496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
   1149a:	e003      	b.n	114a4 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1149c:	bf00      	nop
   1149e:	e002      	b.n	114a6 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
   114a0:	bf00      	nop
   114a2:	e000      	b.n	114a6 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
   114a4:	bf00      	nop
    }

    (void) IdleState;

}
   114a6:	bf00      	nop
   114a8:	b005      	add	sp, #20
   114aa:	f85d fb04 	ldr.w	pc, [sp], #4
   114ae:	bf00      	nop
   114b0:	1fff9004 	.word	0x1fff9004
   114b4:	1fff91d4 	.word	0x1fff91d4

000114b8 <Pwm_Ipw_ValidateSetOutPutToIdle>:
*               E_NOT_OK        The Idle state is not ready
*               E_OK            The Idle state is ready
*
*/
Std_ReturnType Pwm_Ipw_ValidateSetOutPutToIdle(const Pwm_IpwChannelConfigType * const IpConfig)
{
   114b8:	b084      	sub	sp, #16
   114ba:	9001      	str	r0, [sp, #4]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   114bc:	2300      	movs	r3, #0
   114be:	f88d 300f 	strb.w	r3, [sp, #15]
    
    switch(IpConfig->ChannelType)
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	681b      	ldr	r3, [r3, #0]
   114c6:	2b01      	cmp	r3, #1
   114c8:	d103      	bne.n	114d2 <Pwm_Ipw_ValidateSetOutPutToIdle+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (Std_ReturnType)E_OK;
   114ca:	2300      	movs	r3, #0
   114cc:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   114d0:	e003      	b.n	114da <Pwm_Ipw_ValidateSetOutPutToIdle+0x22>
            RetVal = (Std_ReturnType)E_NOT_OK;
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            RetVal = (Std_ReturnType)E_NOT_OK;
   114d2:	2301      	movs	r3, #1
   114d4:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   114d8:	bf00      	nop

    }

    return RetVal; 
   114da:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   114de:	4618      	mov	r0, r3
   114e0:	b004      	add	sp, #16
   114e2:	4770      	bx	lr

000114e4 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
   114e4:	b084      	sub	sp, #16
   114e6:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
   114e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   114ec:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
   114ee:	9b01      	ldr	r3, [sp, #4]
   114f0:	681b      	ldr	r3, [r3, #0]
   114f2:	2b01      	cmp	r3, #1
   114f4:	d103      	bne.n	114fe <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
   114f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   114fa:	9303      	str	r3, [sp, #12]
            break;
   114fc:	e000      	b.n	11500 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
   114fe:	bf00      	nop
    }

    return RetVal;
   11500:	9b03      	ldr	r3, [sp, #12]
}
   11502:	4618      	mov	r0, r3
   11504:	b004      	add	sp, #16
   11506:	4770      	bx	lr

00011508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   11508:	b500      	push	{lr}
   1150a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1150c:	f7f0 f98a 	bl	1824 <Sys_GetCoreID>
   11510:	4603      	mov	r3, r0
   11512:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
   11514:	4a10      	ldr	r2, [pc, #64]	; (11558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   11516:	9b01      	ldr	r3, [sp, #4]
   11518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1151c:	2b00      	cmp	r3, #0
   1151e:	d10d      	bne.n	1153c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11520:	f7ef f9f2 	bl	908 <Adc_schm_read_msr>
   11524:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11526:	9b00      	ldr	r3, [sp, #0]
   11528:	f003 0301 	and.w	r3, r3, #1
   1152c:	2b00      	cmp	r3, #0
   1152e:	d100      	bne.n	11532 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11530:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   11532:	490a      	ldr	r1, [pc, #40]	; (1155c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
   11534:	9b01      	ldr	r3, [sp, #4]
   11536:	9a00      	ldr	r2, [sp, #0]
   11538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
   1153c:	4a06      	ldr	r2, [pc, #24]	; (11558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   1153e:	9b01      	ldr	r3, [sp, #4]
   11540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11544:	1c5a      	adds	r2, r3, #1
   11546:	4904      	ldr	r1, [pc, #16]	; (11558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   11548:	9b01      	ldr	r3, [sp, #4]
   1154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1154e:	bf00      	nop
   11550:	b003      	add	sp, #12
   11552:	f85d fb04 	ldr.w	pc, [sp], #4
   11556:	bf00      	nop
   11558:	1fff9218 	.word	0x1fff9218
   1155c:	1fff9214 	.word	0x1fff9214

00011560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   11560:	b500      	push	{lr}
   11562:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11564:	f7f0 f95e 	bl	1824 <Sys_GetCoreID>
   11568:	4603      	mov	r3, r0
   1156a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
   1156c:	4a0d      	ldr	r2, [pc, #52]	; (115a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   1156e:	9b01      	ldr	r3, [sp, #4]
   11570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11574:	1e5a      	subs	r2, r3, #1
   11576:	490b      	ldr	r1, [pc, #44]	; (115a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   11578:	9b01      	ldr	r3, [sp, #4]
   1157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1157e:	4a0a      	ldr	r2, [pc, #40]	; (115a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
   11580:	9b01      	ldr	r3, [sp, #4]
   11582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11586:	f003 0301 	and.w	r3, r3, #1
   1158a:	2b00      	cmp	r3, #0
   1158c:	d106      	bne.n	1159c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
   1158e:	4a05      	ldr	r2, [pc, #20]	; (115a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   11590:	9b01      	ldr	r3, [sp, #4]
   11592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11596:	2b00      	cmp	r3, #0
   11598:	d100      	bne.n	1159c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1159a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1159c:	bf00      	nop
   1159e:	b003      	add	sp, #12
   115a0:	f85d fb04 	ldr.w	pc, [sp], #4
   115a4:	1fff9218 	.word	0x1fff9218
   115a8:	1fff9214 	.word	0x1fff9214

000115ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   115ac:	b500      	push	{lr}
   115ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115b0:	f7f0 f938 	bl	1824 <Sys_GetCoreID>
   115b4:	4603      	mov	r3, r0
   115b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
   115b8:	4a10      	ldr	r2, [pc, #64]	; (115fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   115ba:	9b01      	ldr	r3, [sp, #4]
   115bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115c0:	2b00      	cmp	r3, #0
   115c2:	d10d      	bne.n	115e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115c4:	f7ef f9a0 	bl	908 <Adc_schm_read_msr>
   115c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115ca:	9b00      	ldr	r3, [sp, #0]
   115cc:	f003 0301 	and.w	r3, r3, #1
   115d0:	2b00      	cmp	r3, #0
   115d2:	d100      	bne.n	115d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   115d6:	490a      	ldr	r1, [pc, #40]	; (11600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
   115d8:	9b01      	ldr	r3, [sp, #4]
   115da:	9a00      	ldr	r2, [sp, #0]
   115dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
   115e0:	4a06      	ldr	r2, [pc, #24]	; (115fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   115e2:	9b01      	ldr	r3, [sp, #4]
   115e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e8:	1c5a      	adds	r2, r3, #1
   115ea:	4904      	ldr	r1, [pc, #16]	; (115fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   115ec:	9b01      	ldr	r3, [sp, #4]
   115ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115f2:	bf00      	nop
   115f4:	b003      	add	sp, #12
   115f6:	f85d fb04 	ldr.w	pc, [sp], #4
   115fa:	bf00      	nop
   115fc:	1fff9220 	.word	0x1fff9220
   11600:	1fff921c 	.word	0x1fff921c

00011604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   11604:	b500      	push	{lr}
   11606:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11608:	f7f0 f90c 	bl	1824 <Sys_GetCoreID>
   1160c:	4603      	mov	r3, r0
   1160e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
   11610:	4a0d      	ldr	r2, [pc, #52]	; (11648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   11612:	9b01      	ldr	r3, [sp, #4]
   11614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11618:	1e5a      	subs	r2, r3, #1
   1161a:	490b      	ldr	r1, [pc, #44]	; (11648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   1161c:	9b01      	ldr	r3, [sp, #4]
   1161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   11622:	4a0a      	ldr	r2, [pc, #40]	; (1164c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
   11624:	9b01      	ldr	r3, [sp, #4]
   11626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1162a:	f003 0301 	and.w	r3, r3, #1
   1162e:	2b00      	cmp	r3, #0
   11630:	d106      	bne.n	11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
   11632:	4a05      	ldr	r2, [pc, #20]	; (11648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   11634:	9b01      	ldr	r3, [sp, #4]
   11636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1163a:	2b00      	cmp	r3, #0
   1163c:	d100      	bne.n	11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1163e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11640:	bf00      	nop
   11642:	b003      	add	sp, #12
   11644:	f85d fb04 	ldr.w	pc, [sp], #4
   11648:	1fff9220 	.word	0x1fff9220
   1164c:	1fff921c 	.word	0x1fff921c

00011650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   11650:	b500      	push	{lr}
   11652:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11654:	f7f0 f8e6 	bl	1824 <Sys_GetCoreID>
   11658:	4603      	mov	r3, r0
   1165a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
   1165c:	4a10      	ldr	r2, [pc, #64]	; (116a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   1165e:	9b01      	ldr	r3, [sp, #4]
   11660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11664:	2b00      	cmp	r3, #0
   11666:	d10d      	bne.n	11684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11668:	f7ef f94e 	bl	908 <Adc_schm_read_msr>
   1166c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1166e:	9b00      	ldr	r3, [sp, #0]
   11670:	f003 0301 	and.w	r3, r3, #1
   11674:	2b00      	cmp	r3, #0
   11676:	d100      	bne.n	1167a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11678:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   1167a:	490a      	ldr	r1, [pc, #40]	; (116a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
   1167c:	9b01      	ldr	r3, [sp, #4]
   1167e:	9a00      	ldr	r2, [sp, #0]
   11680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
   11684:	4a06      	ldr	r2, [pc, #24]	; (116a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   11686:	9b01      	ldr	r3, [sp, #4]
   11688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1168c:	1c5a      	adds	r2, r3, #1
   1168e:	4904      	ldr	r1, [pc, #16]	; (116a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   11690:	9b01      	ldr	r3, [sp, #4]
   11692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11696:	bf00      	nop
   11698:	b003      	add	sp, #12
   1169a:	f85d fb04 	ldr.w	pc, [sp], #4
   1169e:	bf00      	nop
   116a0:	1fff9228 	.word	0x1fff9228
   116a4:	1fff9224 	.word	0x1fff9224

000116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   116a8:	b500      	push	{lr}
   116aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116ac:	f7f0 f8ba 	bl	1824 <Sys_GetCoreID>
   116b0:	4603      	mov	r3, r0
   116b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
   116b4:	4a0d      	ldr	r2, [pc, #52]	; (116ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   116b6:	9b01      	ldr	r3, [sp, #4]
   116b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116bc:	1e5a      	subs	r2, r3, #1
   116be:	490b      	ldr	r1, [pc, #44]	; (116ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   116c6:	4a0a      	ldr	r2, [pc, #40]	; (116f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
   116c8:	9b01      	ldr	r3, [sp, #4]
   116ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116ce:	f003 0301 	and.w	r3, r3, #1
   116d2:	2b00      	cmp	r3, #0
   116d4:	d106      	bne.n	116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
   116d6:	4a05      	ldr	r2, [pc, #20]	; (116ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   116d8:	9b01      	ldr	r3, [sp, #4]
   116da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116de:	2b00      	cmp	r3, #0
   116e0:	d100      	bne.n	116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116e4:	bf00      	nop
   116e6:	b003      	add	sp, #12
   116e8:	f85d fb04 	ldr.w	pc, [sp], #4
   116ec:	1fff9228 	.word	0x1fff9228
   116f0:	1fff9224 	.word	0x1fff9224

000116f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   116f4:	b500      	push	{lr}
   116f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116f8:	f7f0 f894 	bl	1824 <Sys_GetCoreID>
   116fc:	4603      	mov	r3, r0
   116fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   11700:	4a10      	ldr	r2, [pc, #64]	; (11744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   11702:	9b01      	ldr	r3, [sp, #4]
   11704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11708:	2b00      	cmp	r3, #0
   1170a:	d10d      	bne.n	11728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1170c:	f7ef f8fc 	bl	908 <Adc_schm_read_msr>
   11710:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11712:	9b00      	ldr	r3, [sp, #0]
   11714:	f003 0301 	and.w	r3, r3, #1
   11718:	2b00      	cmp	r3, #0
   1171a:	d100      	bne.n	1171e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1171c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1171e:	490a      	ldr	r1, [pc, #40]	; (11748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   11720:	9b01      	ldr	r3, [sp, #4]
   11722:	9a00      	ldr	r2, [sp, #0]
   11724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   11728:	4a06      	ldr	r2, [pc, #24]	; (11744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1172a:	9b01      	ldr	r3, [sp, #4]
   1172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11730:	1c5a      	adds	r2, r3, #1
   11732:	4904      	ldr	r1, [pc, #16]	; (11744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   11734:	9b01      	ldr	r3, [sp, #4]
   11736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1173a:	bf00      	nop
   1173c:	b003      	add	sp, #12
   1173e:	f85d fb04 	ldr.w	pc, [sp], #4
   11742:	bf00      	nop
   11744:	1fff9230 	.word	0x1fff9230
   11748:	1fff922c 	.word	0x1fff922c

0001174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   1174c:	b500      	push	{lr}
   1174e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11750:	f7f0 f868 	bl	1824 <Sys_GetCoreID>
   11754:	4603      	mov	r3, r0
   11756:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   11758:	4a0d      	ldr	r2, [pc, #52]	; (11790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1175a:	9b01      	ldr	r3, [sp, #4]
   1175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11760:	1e5a      	subs	r2, r3, #1
   11762:	490b      	ldr	r1, [pc, #44]	; (11790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11764:	9b01      	ldr	r3, [sp, #4]
   11766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   1176a:	4a0a      	ldr	r2, [pc, #40]	; (11794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   1176c:	9b01      	ldr	r3, [sp, #4]
   1176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11772:	f003 0301 	and.w	r3, r3, #1
   11776:	2b00      	cmp	r3, #0
   11778:	d106      	bne.n	11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   1177a:	4a05      	ldr	r2, [pc, #20]	; (11790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1177c:	9b01      	ldr	r3, [sp, #4]
   1177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11782:	2b00      	cmp	r3, #0
   11784:	d100      	bne.n	11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11786:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11788:	bf00      	nop
   1178a:	b003      	add	sp, #12
   1178c:	f85d fb04 	ldr.w	pc, [sp], #4
   11790:	1fff9230 	.word	0x1fff9230
   11794:	1fff922c 	.word	0x1fff922c

00011798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   11798:	b500      	push	{lr}
   1179a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1179c:	f7f0 f842 	bl	1824 <Sys_GetCoreID>
   117a0:	4603      	mov	r3, r0
   117a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   117a4:	4a10      	ldr	r2, [pc, #64]	; (117e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   117a6:	9b01      	ldr	r3, [sp, #4]
   117a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117ac:	2b00      	cmp	r3, #0
   117ae:	d10d      	bne.n	117cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117b0:	f7ef f8aa 	bl	908 <Adc_schm_read_msr>
   117b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117b6:	9b00      	ldr	r3, [sp, #0]
   117b8:	f003 0301 	and.w	r3, r3, #1
   117bc:	2b00      	cmp	r3, #0
   117be:	d100      	bne.n	117c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   117c2:	490a      	ldr	r1, [pc, #40]	; (117ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   117c4:	9b01      	ldr	r3, [sp, #4]
   117c6:	9a00      	ldr	r2, [sp, #0]
   117c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   117cc:	4a06      	ldr	r2, [pc, #24]	; (117e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   117ce:	9b01      	ldr	r3, [sp, #4]
   117d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117d4:	1c5a      	adds	r2, r3, #1
   117d6:	4904      	ldr	r1, [pc, #16]	; (117e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   117d8:	9b01      	ldr	r3, [sp, #4]
   117da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117de:	bf00      	nop
   117e0:	b003      	add	sp, #12
   117e2:	f85d fb04 	ldr.w	pc, [sp], #4
   117e6:	bf00      	nop
   117e8:	1fff9238 	.word	0x1fff9238
   117ec:	1fff9234 	.word	0x1fff9234

000117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   117f0:	b500      	push	{lr}
   117f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117f4:	f7f0 f816 	bl	1824 <Sys_GetCoreID>
   117f8:	4603      	mov	r3, r0
   117fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   117fc:	4a0d      	ldr	r2, [pc, #52]	; (11834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   117fe:	9b01      	ldr	r3, [sp, #4]
   11800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11804:	1e5a      	subs	r2, r3, #1
   11806:	490b      	ldr	r1, [pc, #44]	; (11834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   11808:	9b01      	ldr	r3, [sp, #4]
   1180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1180e:	4a0a      	ldr	r2, [pc, #40]	; (11838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   11810:	9b01      	ldr	r3, [sp, #4]
   11812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11816:	f003 0301 	and.w	r3, r3, #1
   1181a:	2b00      	cmp	r3, #0
   1181c:	d106      	bne.n	1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   1181e:	4a05      	ldr	r2, [pc, #20]	; (11834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   11820:	9b01      	ldr	r3, [sp, #4]
   11822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11826:	2b00      	cmp	r3, #0
   11828:	d100      	bne.n	1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1182a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1182c:	bf00      	nop
   1182e:	b003      	add	sp, #12
   11830:	f85d fb04 	ldr.w	pc, [sp], #4
   11834:	1fff9238 	.word	0x1fff9238
   11838:	1fff9234 	.word	0x1fff9234

0001183c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   1183c:	b500      	push	{lr}
   1183e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11840:	f7ef fff0 	bl	1824 <Sys_GetCoreID>
   11844:	4603      	mov	r3, r0
   11846:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   11848:	4a10      	ldr	r2, [pc, #64]	; (1188c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1184a:	9b01      	ldr	r3, [sp, #4]
   1184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11850:	2b00      	cmp	r3, #0
   11852:	d10d      	bne.n	11870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11854:	f7ef f858 	bl	908 <Adc_schm_read_msr>
   11858:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1185a:	9b00      	ldr	r3, [sp, #0]
   1185c:	f003 0301 	and.w	r3, r3, #1
   11860:	2b00      	cmp	r3, #0
   11862:	d100      	bne.n	11866 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11864:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   11866:	490a      	ldr	r1, [pc, #40]	; (11890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   11868:	9b01      	ldr	r3, [sp, #4]
   1186a:	9a00      	ldr	r2, [sp, #0]
   1186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   11870:	4a06      	ldr	r2, [pc, #24]	; (1188c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11872:	9b01      	ldr	r3, [sp, #4]
   11874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11878:	1c5a      	adds	r2, r3, #1
   1187a:	4904      	ldr	r1, [pc, #16]	; (1188c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1187c:	9b01      	ldr	r3, [sp, #4]
   1187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11882:	bf00      	nop
   11884:	b003      	add	sp, #12
   11886:	f85d fb04 	ldr.w	pc, [sp], #4
   1188a:	bf00      	nop
   1188c:	1fff9240 	.word	0x1fff9240
   11890:	1fff923c 	.word	0x1fff923c

00011894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   11894:	b500      	push	{lr}
   11896:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11898:	f7ef ffc4 	bl	1824 <Sys_GetCoreID>
   1189c:	4603      	mov	r3, r0
   1189e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   118a0:	4a0d      	ldr	r2, [pc, #52]	; (118d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   118a2:	9b01      	ldr	r3, [sp, #4]
   118a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a8:	1e5a      	subs	r2, r3, #1
   118aa:	490b      	ldr	r1, [pc, #44]	; (118d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   118b2:	4a0a      	ldr	r2, [pc, #40]	; (118dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   118b4:	9b01      	ldr	r3, [sp, #4]
   118b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ba:	f003 0301 	and.w	r3, r3, #1
   118be:	2b00      	cmp	r3, #0
   118c0:	d106      	bne.n	118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   118c2:	4a05      	ldr	r2, [pc, #20]	; (118d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   118c4:	9b01      	ldr	r3, [sp, #4]
   118c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ca:	2b00      	cmp	r3, #0
   118cc:	d100      	bne.n	118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118d0:	bf00      	nop
   118d2:	b003      	add	sp, #12
   118d4:	f85d fb04 	ldr.w	pc, [sp], #4
   118d8:	1fff9240 	.word	0x1fff9240
   118dc:	1fff923c 	.word	0x1fff923c

000118e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   118e0:	b500      	push	{lr}
   118e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118e4:	f7ef ff9e 	bl	1824 <Sys_GetCoreID>
   118e8:	4603      	mov	r3, r0
   118ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   118ec:	4a10      	ldr	r2, [pc, #64]	; (11930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   118ee:	9b01      	ldr	r3, [sp, #4]
   118f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118f4:	2b00      	cmp	r3, #0
   118f6:	d10d      	bne.n	11914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118f8:	f7ef f806 	bl	908 <Adc_schm_read_msr>
   118fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118fe:	9b00      	ldr	r3, [sp, #0]
   11900:	f003 0301 	and.w	r3, r3, #1
   11904:	2b00      	cmp	r3, #0
   11906:	d100      	bne.n	1190a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11908:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1190a:	490a      	ldr	r1, [pc, #40]	; (11934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   1190c:	9b01      	ldr	r3, [sp, #4]
   1190e:	9a00      	ldr	r2, [sp, #0]
   11910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   11914:	4a06      	ldr	r2, [pc, #24]	; (11930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   11916:	9b01      	ldr	r3, [sp, #4]
   11918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1191c:	1c5a      	adds	r2, r3, #1
   1191e:	4904      	ldr	r1, [pc, #16]	; (11930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   11920:	9b01      	ldr	r3, [sp, #4]
   11922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11926:	bf00      	nop
   11928:	b003      	add	sp, #12
   1192a:	f85d fb04 	ldr.w	pc, [sp], #4
   1192e:	bf00      	nop
   11930:	1fff9248 	.word	0x1fff9248
   11934:	1fff9244 	.word	0x1fff9244

00011938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   11938:	b500      	push	{lr}
   1193a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1193c:	f7ef ff72 	bl	1824 <Sys_GetCoreID>
   11940:	4603      	mov	r3, r0
   11942:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   11944:	4a0d      	ldr	r2, [pc, #52]	; (1197c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11946:	9b01      	ldr	r3, [sp, #4]
   11948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1194c:	1e5a      	subs	r2, r3, #1
   1194e:	490b      	ldr	r1, [pc, #44]	; (1197c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11950:	9b01      	ldr	r3, [sp, #4]
   11952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   11956:	4a0a      	ldr	r2, [pc, #40]	; (11980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   11958:	9b01      	ldr	r3, [sp, #4]
   1195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1195e:	f003 0301 	and.w	r3, r3, #1
   11962:	2b00      	cmp	r3, #0
   11964:	d106      	bne.n	11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   11966:	4a05      	ldr	r2, [pc, #20]	; (1197c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11968:	9b01      	ldr	r3, [sp, #4]
   1196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1196e:	2b00      	cmp	r3, #0
   11970:	d100      	bne.n	11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11972:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11974:	bf00      	nop
   11976:	b003      	add	sp, #12
   11978:	f85d fb04 	ldr.w	pc, [sp], #4
   1197c:	1fff9248 	.word	0x1fff9248
   11980:	1fff9244 	.word	0x1fff9244

00011984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11984:	b500      	push	{lr}
   11986:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11988:	f7ef ff4c 	bl	1824 <Sys_GetCoreID>
   1198c:	4603      	mov	r3, r0
   1198e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   11990:	4a10      	ldr	r2, [pc, #64]	; (119d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11992:	9b01      	ldr	r3, [sp, #4]
   11994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11998:	2b00      	cmp	r3, #0
   1199a:	d10d      	bne.n	119b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1199c:	f7ee ffb4 	bl	908 <Adc_schm_read_msr>
   119a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119a2:	9b00      	ldr	r3, [sp, #0]
   119a4:	f003 0301 	and.w	r3, r3, #1
   119a8:	2b00      	cmp	r3, #0
   119aa:	d100      	bne.n	119ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   119ae:	490a      	ldr	r1, [pc, #40]	; (119d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   119b0:	9b01      	ldr	r3, [sp, #4]
   119b2:	9a00      	ldr	r2, [sp, #0]
   119b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   119b8:	4a06      	ldr	r2, [pc, #24]	; (119d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   119ba:	9b01      	ldr	r3, [sp, #4]
   119bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119c0:	1c5a      	adds	r2, r3, #1
   119c2:	4904      	ldr	r1, [pc, #16]	; (119d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   119c4:	9b01      	ldr	r3, [sp, #4]
   119c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119ca:	bf00      	nop
   119cc:	b003      	add	sp, #12
   119ce:	f85d fb04 	ldr.w	pc, [sp], #4
   119d2:	bf00      	nop
   119d4:	1fff9250 	.word	0x1fff9250
   119d8:	1fff924c 	.word	0x1fff924c

000119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   119dc:	b500      	push	{lr}
   119de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119e0:	f7ef ff20 	bl	1824 <Sys_GetCoreID>
   119e4:	4603      	mov	r3, r0
   119e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   119e8:	4a0d      	ldr	r2, [pc, #52]	; (11a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   119ea:	9b01      	ldr	r3, [sp, #4]
   119ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119f0:	1e5a      	subs	r2, r3, #1
   119f2:	490b      	ldr	r1, [pc, #44]	; (11a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   119fa:	4a0a      	ldr	r2, [pc, #40]	; (11a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   119fc:	9b01      	ldr	r3, [sp, #4]
   119fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a02:	f003 0301 	and.w	r3, r3, #1
   11a06:	2b00      	cmp	r3, #0
   11a08:	d106      	bne.n	11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   11a0a:	4a05      	ldr	r2, [pc, #20]	; (11a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11a0c:	9b01      	ldr	r3, [sp, #4]
   11a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a12:	2b00      	cmp	r3, #0
   11a14:	d100      	bne.n	11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a18:	bf00      	nop
   11a1a:	b003      	add	sp, #12
   11a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a20:	1fff9250 	.word	0x1fff9250
   11a24:	1fff924c 	.word	0x1fff924c

00011a28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11a28:	b500      	push	{lr}
   11a2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a2c:	f7ef fefa 	bl	1824 <Sys_GetCoreID>
   11a30:	4603      	mov	r3, r0
   11a32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   11a34:	4a10      	ldr	r2, [pc, #64]	; (11a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11a36:	9b01      	ldr	r3, [sp, #4]
   11a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d10d      	bne.n	11a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a40:	f7ee ff62 	bl	908 <Adc_schm_read_msr>
   11a44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a46:	9b00      	ldr	r3, [sp, #0]
   11a48:	f003 0301 	and.w	r3, r3, #1
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	d100      	bne.n	11a52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   11a52:	490a      	ldr	r1, [pc, #40]	; (11a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   11a54:	9b01      	ldr	r3, [sp, #4]
   11a56:	9a00      	ldr	r2, [sp, #0]
   11a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   11a5c:	4a06      	ldr	r2, [pc, #24]	; (11a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11a5e:	9b01      	ldr	r3, [sp, #4]
   11a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a64:	1c5a      	adds	r2, r3, #1
   11a66:	4904      	ldr	r1, [pc, #16]	; (11a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11a68:	9b01      	ldr	r3, [sp, #4]
   11a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a6e:	bf00      	nop
   11a70:	b003      	add	sp, #12
   11a72:	f85d fb04 	ldr.w	pc, [sp], #4
   11a76:	bf00      	nop
   11a78:	1fff9258 	.word	0x1fff9258
   11a7c:	1fff9254 	.word	0x1fff9254

00011a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11a80:	b500      	push	{lr}
   11a82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a84:	f7ef fece 	bl	1824 <Sys_GetCoreID>
   11a88:	4603      	mov	r3, r0
   11a8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   11a8c:	4a0d      	ldr	r2, [pc, #52]	; (11ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11a8e:	9b01      	ldr	r3, [sp, #4]
   11a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a94:	1e5a      	subs	r2, r3, #1
   11a96:	490b      	ldr	r1, [pc, #44]	; (11ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11a98:	9b01      	ldr	r3, [sp, #4]
   11a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   11a9e:	4a0a      	ldr	r2, [pc, #40]	; (11ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   11aa0:	9b01      	ldr	r3, [sp, #4]
   11aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aa6:	f003 0301 	and.w	r3, r3, #1
   11aaa:	2b00      	cmp	r3, #0
   11aac:	d106      	bne.n	11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   11aae:	4a05      	ldr	r2, [pc, #20]	; (11ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ab6:	2b00      	cmp	r3, #0
   11ab8:	d100      	bne.n	11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11aba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11abc:	bf00      	nop
   11abe:	b003      	add	sp, #12
   11ac0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ac4:	1fff9258 	.word	0x1fff9258
   11ac8:	1fff9254 	.word	0x1fff9254

00011acc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11acc:	b500      	push	{lr}
   11ace:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ad0:	f7ef fea8 	bl	1824 <Sys_GetCoreID>
   11ad4:	4603      	mov	r3, r0
   11ad6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   11ad8:	4a10      	ldr	r2, [pc, #64]	; (11b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11ada:	9b01      	ldr	r3, [sp, #4]
   11adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ae0:	2b00      	cmp	r3, #0
   11ae2:	d10d      	bne.n	11b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ae4:	f7ee ff10 	bl	908 <Adc_schm_read_msr>
   11ae8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11aea:	9b00      	ldr	r3, [sp, #0]
   11aec:	f003 0301 	and.w	r3, r3, #1
   11af0:	2b00      	cmp	r3, #0
   11af2:	d100      	bne.n	11af6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11af4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   11af6:	490a      	ldr	r1, [pc, #40]	; (11b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   11af8:	9b01      	ldr	r3, [sp, #4]
   11afa:	9a00      	ldr	r2, [sp, #0]
   11afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   11b00:	4a06      	ldr	r2, [pc, #24]	; (11b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11b02:	9b01      	ldr	r3, [sp, #4]
   11b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b08:	1c5a      	adds	r2, r3, #1
   11b0a:	4904      	ldr	r1, [pc, #16]	; (11b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11b0c:	9b01      	ldr	r3, [sp, #4]
   11b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b12:	bf00      	nop
   11b14:	b003      	add	sp, #12
   11b16:	f85d fb04 	ldr.w	pc, [sp], #4
   11b1a:	bf00      	nop
   11b1c:	1fff9260 	.word	0x1fff9260
   11b20:	1fff925c 	.word	0x1fff925c

00011b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11b24:	b500      	push	{lr}
   11b26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b28:	f7ef fe7c 	bl	1824 <Sys_GetCoreID>
   11b2c:	4603      	mov	r3, r0
   11b2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   11b30:	4a0d      	ldr	r2, [pc, #52]	; (11b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11b32:	9b01      	ldr	r3, [sp, #4]
   11b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b38:	1e5a      	subs	r2, r3, #1
   11b3a:	490b      	ldr	r1, [pc, #44]	; (11b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   11b42:	4a0a      	ldr	r2, [pc, #40]	; (11b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   11b44:	9b01      	ldr	r3, [sp, #4]
   11b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b4a:	f003 0301 	and.w	r3, r3, #1
   11b4e:	2b00      	cmp	r3, #0
   11b50:	d106      	bne.n	11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   11b52:	4a05      	ldr	r2, [pc, #20]	; (11b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11b54:	9b01      	ldr	r3, [sp, #4]
   11b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b5a:	2b00      	cmp	r3, #0
   11b5c:	d100      	bne.n	11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b60:	bf00      	nop
   11b62:	b003      	add	sp, #12
   11b64:	f85d fb04 	ldr.w	pc, [sp], #4
   11b68:	1fff9260 	.word	0x1fff9260
   11b6c:	1fff925c 	.word	0x1fff925c

00011b70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11b70:	b500      	push	{lr}
   11b72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b74:	f7ef fe56 	bl	1824 <Sys_GetCoreID>
   11b78:	4603      	mov	r3, r0
   11b7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   11b7c:	4a10      	ldr	r2, [pc, #64]	; (11bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11b7e:	9b01      	ldr	r3, [sp, #4]
   11b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b84:	2b00      	cmp	r3, #0
   11b86:	d10d      	bne.n	11ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b88:	f7ee febe 	bl	908 <Adc_schm_read_msr>
   11b8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b8e:	9b00      	ldr	r3, [sp, #0]
   11b90:	f003 0301 	and.w	r3, r3, #1
   11b94:	2b00      	cmp	r3, #0
   11b96:	d100      	bne.n	11b9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   11b9a:	490a      	ldr	r1, [pc, #40]	; (11bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   11b9c:	9b01      	ldr	r3, [sp, #4]
   11b9e:	9a00      	ldr	r2, [sp, #0]
   11ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   11ba4:	4a06      	ldr	r2, [pc, #24]	; (11bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11ba6:	9b01      	ldr	r3, [sp, #4]
   11ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bac:	1c5a      	adds	r2, r3, #1
   11bae:	4904      	ldr	r1, [pc, #16]	; (11bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11bb0:	9b01      	ldr	r3, [sp, #4]
   11bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bb6:	bf00      	nop
   11bb8:	b003      	add	sp, #12
   11bba:	f85d fb04 	ldr.w	pc, [sp], #4
   11bbe:	bf00      	nop
   11bc0:	1fff9268 	.word	0x1fff9268
   11bc4:	1fff9264 	.word	0x1fff9264

00011bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11bc8:	b500      	push	{lr}
   11bca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bcc:	f7ef fe2a 	bl	1824 <Sys_GetCoreID>
   11bd0:	4603      	mov	r3, r0
   11bd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   11bd4:	4a0d      	ldr	r2, [pc, #52]	; (11c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11bd6:	9b01      	ldr	r3, [sp, #4]
   11bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bdc:	1e5a      	subs	r2, r3, #1
   11bde:	490b      	ldr	r1, [pc, #44]	; (11c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   11be6:	4a0a      	ldr	r2, [pc, #40]	; (11c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   11be8:	9b01      	ldr	r3, [sp, #4]
   11bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bee:	f003 0301 	and.w	r3, r3, #1
   11bf2:	2b00      	cmp	r3, #0
   11bf4:	d106      	bne.n	11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   11bf6:	4a05      	ldr	r2, [pc, #20]	; (11c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11bf8:	9b01      	ldr	r3, [sp, #4]
   11bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bfe:	2b00      	cmp	r3, #0
   11c00:	d100      	bne.n	11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c04:	bf00      	nop
   11c06:	b003      	add	sp, #12
   11c08:	f85d fb04 	ldr.w	pc, [sp], #4
   11c0c:	1fff9268 	.word	0x1fff9268
   11c10:	1fff9264 	.word	0x1fff9264

00011c14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11c14:	b500      	push	{lr}
   11c16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c18:	f7ef fe04 	bl	1824 <Sys_GetCoreID>
   11c1c:	4603      	mov	r3, r0
   11c1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   11c20:	4a10      	ldr	r2, [pc, #64]	; (11c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11c22:	9b01      	ldr	r3, [sp, #4]
   11c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d10d      	bne.n	11c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c2c:	f7ee fe6c 	bl	908 <Adc_schm_read_msr>
   11c30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c32:	9b00      	ldr	r3, [sp, #0]
   11c34:	f003 0301 	and.w	r3, r3, #1
   11c38:	2b00      	cmp	r3, #0
   11c3a:	d100      	bne.n	11c3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   11c3e:	490a      	ldr	r1, [pc, #40]	; (11c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   11c40:	9b01      	ldr	r3, [sp, #4]
   11c42:	9a00      	ldr	r2, [sp, #0]
   11c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   11c48:	4a06      	ldr	r2, [pc, #24]	; (11c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11c4a:	9b01      	ldr	r3, [sp, #4]
   11c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c50:	1c5a      	adds	r2, r3, #1
   11c52:	4904      	ldr	r1, [pc, #16]	; (11c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11c54:	9b01      	ldr	r3, [sp, #4]
   11c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c5a:	bf00      	nop
   11c5c:	b003      	add	sp, #12
   11c5e:	f85d fb04 	ldr.w	pc, [sp], #4
   11c62:	bf00      	nop
   11c64:	1fff9270 	.word	0x1fff9270
   11c68:	1fff926c 	.word	0x1fff926c

00011c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11c6c:	b500      	push	{lr}
   11c6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c70:	f7ef fdd8 	bl	1824 <Sys_GetCoreID>
   11c74:	4603      	mov	r3, r0
   11c76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   11c78:	4a0d      	ldr	r2, [pc, #52]	; (11cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11c7a:	9b01      	ldr	r3, [sp, #4]
   11c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c80:	1e5a      	subs	r2, r3, #1
   11c82:	490b      	ldr	r1, [pc, #44]	; (11cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   11c8a:	4a0a      	ldr	r2, [pc, #40]	; (11cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   11c8c:	9b01      	ldr	r3, [sp, #4]
   11c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c92:	f003 0301 	and.w	r3, r3, #1
   11c96:	2b00      	cmp	r3, #0
   11c98:	d106      	bne.n	11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   11c9a:	4a05      	ldr	r2, [pc, #20]	; (11cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11c9c:	9b01      	ldr	r3, [sp, #4]
   11c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ca2:	2b00      	cmp	r3, #0
   11ca4:	d100      	bne.n	11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ca6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ca8:	bf00      	nop
   11caa:	b003      	add	sp, #12
   11cac:	f85d fb04 	ldr.w	pc, [sp], #4
   11cb0:	1fff9270 	.word	0x1fff9270
   11cb4:	1fff926c 	.word	0x1fff926c

00011cb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11cb8:	b500      	push	{lr}
   11cba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cbc:	f7ef fdb2 	bl	1824 <Sys_GetCoreID>
   11cc0:	4603      	mov	r3, r0
   11cc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   11cc4:	4a10      	ldr	r2, [pc, #64]	; (11d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11cc6:	9b01      	ldr	r3, [sp, #4]
   11cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ccc:	2b00      	cmp	r3, #0
   11cce:	d10d      	bne.n	11cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cd0:	f7ee fe1a 	bl	908 <Adc_schm_read_msr>
   11cd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cd6:	9b00      	ldr	r3, [sp, #0]
   11cd8:	f003 0301 	and.w	r3, r3, #1
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d100      	bne.n	11ce2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ce0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   11ce2:	490a      	ldr	r1, [pc, #40]	; (11d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   11ce4:	9b01      	ldr	r3, [sp, #4]
   11ce6:	9a00      	ldr	r2, [sp, #0]
   11ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   11cec:	4a06      	ldr	r2, [pc, #24]	; (11d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11cee:	9b01      	ldr	r3, [sp, #4]
   11cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cf4:	1c5a      	adds	r2, r3, #1
   11cf6:	4904      	ldr	r1, [pc, #16]	; (11d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11cf8:	9b01      	ldr	r3, [sp, #4]
   11cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cfe:	bf00      	nop
   11d00:	b003      	add	sp, #12
   11d02:	f85d fb04 	ldr.w	pc, [sp], #4
   11d06:	bf00      	nop
   11d08:	1fff9278 	.word	0x1fff9278
   11d0c:	1fff9274 	.word	0x1fff9274

00011d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11d10:	b500      	push	{lr}
   11d12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d14:	f7ef fd86 	bl	1824 <Sys_GetCoreID>
   11d18:	4603      	mov	r3, r0
   11d1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   11d1c:	4a0d      	ldr	r2, [pc, #52]	; (11d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11d1e:	9b01      	ldr	r3, [sp, #4]
   11d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d24:	1e5a      	subs	r2, r3, #1
   11d26:	490b      	ldr	r1, [pc, #44]	; (11d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11d28:	9b01      	ldr	r3, [sp, #4]
   11d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   11d2e:	4a0a      	ldr	r2, [pc, #40]	; (11d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   11d30:	9b01      	ldr	r3, [sp, #4]
   11d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d36:	f003 0301 	and.w	r3, r3, #1
   11d3a:	2b00      	cmp	r3, #0
   11d3c:	d106      	bne.n	11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   11d3e:	4a05      	ldr	r2, [pc, #20]	; (11d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11d40:	9b01      	ldr	r3, [sp, #4]
   11d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d46:	2b00      	cmp	r3, #0
   11d48:	d100      	bne.n	11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d4c:	bf00      	nop
   11d4e:	b003      	add	sp, #12
   11d50:	f85d fb04 	ldr.w	pc, [sp], #4
   11d54:	1fff9278 	.word	0x1fff9278
   11d58:	1fff9274 	.word	0x1fff9274

00011d5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11d5c:	b500      	push	{lr}
   11d5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d60:	f7ef fd60 	bl	1824 <Sys_GetCoreID>
   11d64:	4603      	mov	r3, r0
   11d66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   11d68:	4a10      	ldr	r2, [pc, #64]	; (11dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11d6a:	9b01      	ldr	r3, [sp, #4]
   11d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d70:	2b00      	cmp	r3, #0
   11d72:	d10d      	bne.n	11d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d74:	f7ee fdc8 	bl	908 <Adc_schm_read_msr>
   11d78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d7a:	9b00      	ldr	r3, [sp, #0]
   11d7c:	f003 0301 	and.w	r3, r3, #1
   11d80:	2b00      	cmp	r3, #0
   11d82:	d100      	bne.n	11d86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   11d86:	490a      	ldr	r1, [pc, #40]	; (11db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   11d88:	9b01      	ldr	r3, [sp, #4]
   11d8a:	9a00      	ldr	r2, [sp, #0]
   11d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   11d90:	4a06      	ldr	r2, [pc, #24]	; (11dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11d92:	9b01      	ldr	r3, [sp, #4]
   11d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d98:	1c5a      	adds	r2, r3, #1
   11d9a:	4904      	ldr	r1, [pc, #16]	; (11dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11d9c:	9b01      	ldr	r3, [sp, #4]
   11d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11da2:	bf00      	nop
   11da4:	b003      	add	sp, #12
   11da6:	f85d fb04 	ldr.w	pc, [sp], #4
   11daa:	bf00      	nop
   11dac:	1fff9280 	.word	0x1fff9280
   11db0:	1fff927c 	.word	0x1fff927c

00011db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11db4:	b500      	push	{lr}
   11db6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11db8:	f7ef fd34 	bl	1824 <Sys_GetCoreID>
   11dbc:	4603      	mov	r3, r0
   11dbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   11dc0:	4a0d      	ldr	r2, [pc, #52]	; (11df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11dc2:	9b01      	ldr	r3, [sp, #4]
   11dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc8:	1e5a      	subs	r2, r3, #1
   11dca:	490b      	ldr	r1, [pc, #44]	; (11df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   11dd2:	4a0a      	ldr	r2, [pc, #40]	; (11dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   11dd4:	9b01      	ldr	r3, [sp, #4]
   11dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dda:	f003 0301 	and.w	r3, r3, #1
   11dde:	2b00      	cmp	r3, #0
   11de0:	d106      	bne.n	11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   11de2:	4a05      	ldr	r2, [pc, #20]	; (11df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11de4:	9b01      	ldr	r3, [sp, #4]
   11de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dea:	2b00      	cmp	r3, #0
   11dec:	d100      	bne.n	11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11dee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11df0:	bf00      	nop
   11df2:	b003      	add	sp, #12
   11df4:	f85d fb04 	ldr.w	pc, [sp], #4
   11df8:	1fff9280 	.word	0x1fff9280
   11dfc:	1fff927c 	.word	0x1fff927c

00011e00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   11e00:	b500      	push	{lr}
   11e02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e04:	f7ef fd0e 	bl	1824 <Sys_GetCoreID>
   11e08:	4603      	mov	r3, r0
   11e0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   11e0c:	4a10      	ldr	r2, [pc, #64]	; (11e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11e0e:	9b01      	ldr	r3, [sp, #4]
   11e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e14:	2b00      	cmp	r3, #0
   11e16:	d10d      	bne.n	11e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e18:	f7ee fd76 	bl	908 <Adc_schm_read_msr>
   11e1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e1e:	9b00      	ldr	r3, [sp, #0]
   11e20:	f003 0301 	and.w	r3, r3, #1
   11e24:	2b00      	cmp	r3, #0
   11e26:	d100      	bne.n	11e2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   11e2a:	490a      	ldr	r1, [pc, #40]	; (11e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   11e2c:	9b01      	ldr	r3, [sp, #4]
   11e2e:	9a00      	ldr	r2, [sp, #0]
   11e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   11e34:	4a06      	ldr	r2, [pc, #24]	; (11e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11e36:	9b01      	ldr	r3, [sp, #4]
   11e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e3c:	1c5a      	adds	r2, r3, #1
   11e3e:	4904      	ldr	r1, [pc, #16]	; (11e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11e40:	9b01      	ldr	r3, [sp, #4]
   11e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e46:	bf00      	nop
   11e48:	b003      	add	sp, #12
   11e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e4e:	bf00      	nop
   11e50:	1fff9288 	.word	0x1fff9288
   11e54:	1fff9284 	.word	0x1fff9284

00011e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   11e58:	b500      	push	{lr}
   11e5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e5c:	f7ef fce2 	bl	1824 <Sys_GetCoreID>
   11e60:	4603      	mov	r3, r0
   11e62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   11e64:	4a0d      	ldr	r2, [pc, #52]	; (11e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11e66:	9b01      	ldr	r3, [sp, #4]
   11e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e6c:	1e5a      	subs	r2, r3, #1
   11e6e:	490b      	ldr	r1, [pc, #44]	; (11e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   11e76:	4a0a      	ldr	r2, [pc, #40]	; (11ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   11e78:	9b01      	ldr	r3, [sp, #4]
   11e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e7e:	f003 0301 	and.w	r3, r3, #1
   11e82:	2b00      	cmp	r3, #0
   11e84:	d106      	bne.n	11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   11e86:	4a05      	ldr	r2, [pc, #20]	; (11e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11e88:	9b01      	ldr	r3, [sp, #4]
   11e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e8e:	2b00      	cmp	r3, #0
   11e90:	d100      	bne.n	11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e94:	bf00      	nop
   11e96:	b003      	add	sp, #12
   11e98:	f85d fb04 	ldr.w	pc, [sp], #4
   11e9c:	1fff9288 	.word	0x1fff9288
   11ea0:	1fff9284 	.word	0x1fff9284

00011ea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   11ea4:	b500      	push	{lr}
   11ea6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ea8:	f7ef fcbc 	bl	1824 <Sys_GetCoreID>
   11eac:	4603      	mov	r3, r0
   11eae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   11eb0:	4a10      	ldr	r2, [pc, #64]	; (11ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11eb2:	9b01      	ldr	r3, [sp, #4]
   11eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eb8:	2b00      	cmp	r3, #0
   11eba:	d10d      	bne.n	11ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ebc:	f7ee fd24 	bl	908 <Adc_schm_read_msr>
   11ec0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ec2:	9b00      	ldr	r3, [sp, #0]
   11ec4:	f003 0301 	and.w	r3, r3, #1
   11ec8:	2b00      	cmp	r3, #0
   11eca:	d100      	bne.n	11ece <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ecc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   11ece:	490a      	ldr	r1, [pc, #40]	; (11ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   11ed0:	9b01      	ldr	r3, [sp, #4]
   11ed2:	9a00      	ldr	r2, [sp, #0]
   11ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   11ed8:	4a06      	ldr	r2, [pc, #24]	; (11ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11eda:	9b01      	ldr	r3, [sp, #4]
   11edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ee0:	1c5a      	adds	r2, r3, #1
   11ee2:	4904      	ldr	r1, [pc, #16]	; (11ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11ee4:	9b01      	ldr	r3, [sp, #4]
   11ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11eea:	bf00      	nop
   11eec:	b003      	add	sp, #12
   11eee:	f85d fb04 	ldr.w	pc, [sp], #4
   11ef2:	bf00      	nop
   11ef4:	1fff9290 	.word	0x1fff9290
   11ef8:	1fff928c 	.word	0x1fff928c

00011efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   11efc:	b500      	push	{lr}
   11efe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f00:	f7ef fc90 	bl	1824 <Sys_GetCoreID>
   11f04:	4603      	mov	r3, r0
   11f06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   11f08:	4a0d      	ldr	r2, [pc, #52]	; (11f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11f0a:	9b01      	ldr	r3, [sp, #4]
   11f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f10:	1e5a      	subs	r2, r3, #1
   11f12:	490b      	ldr	r1, [pc, #44]	; (11f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11f14:	9b01      	ldr	r3, [sp, #4]
   11f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   11f1a:	4a0a      	ldr	r2, [pc, #40]	; (11f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   11f1c:	9b01      	ldr	r3, [sp, #4]
   11f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f22:	f003 0301 	and.w	r3, r3, #1
   11f26:	2b00      	cmp	r3, #0
   11f28:	d106      	bne.n	11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   11f2a:	4a05      	ldr	r2, [pc, #20]	; (11f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11f2c:	9b01      	ldr	r3, [sp, #4]
   11f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f32:	2b00      	cmp	r3, #0
   11f34:	d100      	bne.n	11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f38:	bf00      	nop
   11f3a:	b003      	add	sp, #12
   11f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f40:	1fff9290 	.word	0x1fff9290
   11f44:	1fff928c 	.word	0x1fff928c

00011f48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   11f48:	b500      	push	{lr}
   11f4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f4c:	f7ef fc6a 	bl	1824 <Sys_GetCoreID>
   11f50:	4603      	mov	r3, r0
   11f52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   11f54:	4a10      	ldr	r2, [pc, #64]	; (11f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11f56:	9b01      	ldr	r3, [sp, #4]
   11f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f5c:	2b00      	cmp	r3, #0
   11f5e:	d10d      	bne.n	11f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f60:	f7ee fcd2 	bl	908 <Adc_schm_read_msr>
   11f64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f66:	9b00      	ldr	r3, [sp, #0]
   11f68:	f003 0301 	and.w	r3, r3, #1
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d100      	bne.n	11f72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   11f72:	490a      	ldr	r1, [pc, #40]	; (11f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   11f74:	9b01      	ldr	r3, [sp, #4]
   11f76:	9a00      	ldr	r2, [sp, #0]
   11f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   11f7c:	4a06      	ldr	r2, [pc, #24]	; (11f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11f7e:	9b01      	ldr	r3, [sp, #4]
   11f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f84:	1c5a      	adds	r2, r3, #1
   11f86:	4904      	ldr	r1, [pc, #16]	; (11f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11f88:	9b01      	ldr	r3, [sp, #4]
   11f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f8e:	bf00      	nop
   11f90:	b003      	add	sp, #12
   11f92:	f85d fb04 	ldr.w	pc, [sp], #4
   11f96:	bf00      	nop
   11f98:	1fff9298 	.word	0x1fff9298
   11f9c:	1fff9294 	.word	0x1fff9294

00011fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   11fa0:	b500      	push	{lr}
   11fa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fa4:	f7ef fc3e 	bl	1824 <Sys_GetCoreID>
   11fa8:	4603      	mov	r3, r0
   11faa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   11fac:	4a0d      	ldr	r2, [pc, #52]	; (11fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   11fae:	9b01      	ldr	r3, [sp, #4]
   11fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fb4:	1e5a      	subs	r2, r3, #1
   11fb6:	490b      	ldr	r1, [pc, #44]	; (11fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   11fbe:	4a0a      	ldr	r2, [pc, #40]	; (11fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   11fc0:	9b01      	ldr	r3, [sp, #4]
   11fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fc6:	f003 0301 	and.w	r3, r3, #1
   11fca:	2b00      	cmp	r3, #0
   11fcc:	d106      	bne.n	11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   11fce:	4a05      	ldr	r2, [pc, #20]	; (11fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   11fd0:	9b01      	ldr	r3, [sp, #4]
   11fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fd6:	2b00      	cmp	r3, #0
   11fd8:	d100      	bne.n	11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fdc:	bf00      	nop
   11fde:	b003      	add	sp, #12
   11fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   11fe4:	1fff9298 	.word	0x1fff9298
   11fe8:	1fff9294 	.word	0x1fff9294

00011fec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   11fec:	b500      	push	{lr}
   11fee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ff0:	f7ef fc18 	bl	1824 <Sys_GetCoreID>
   11ff4:	4603      	mov	r3, r0
   11ff6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   11ff8:	4a10      	ldr	r2, [pc, #64]	; (1203c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   11ffa:	9b01      	ldr	r3, [sp, #4]
   11ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12000:	2b00      	cmp	r3, #0
   12002:	d10d      	bne.n	12020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12004:	f7ee fc80 	bl	908 <Adc_schm_read_msr>
   12008:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1200a:	9b00      	ldr	r3, [sp, #0]
   1200c:	f003 0301 	and.w	r3, r3, #1
   12010:	2b00      	cmp	r3, #0
   12012:	d100      	bne.n	12016 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12014:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   12016:	490a      	ldr	r1, [pc, #40]	; (12040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   12018:	9b01      	ldr	r3, [sp, #4]
   1201a:	9a00      	ldr	r2, [sp, #0]
   1201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   12020:	4a06      	ldr	r2, [pc, #24]	; (1203c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   12022:	9b01      	ldr	r3, [sp, #4]
   12024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12028:	1c5a      	adds	r2, r3, #1
   1202a:	4904      	ldr	r1, [pc, #16]	; (1203c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1202c:	9b01      	ldr	r3, [sp, #4]
   1202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12032:	bf00      	nop
   12034:	b003      	add	sp, #12
   12036:	f85d fb04 	ldr.w	pc, [sp], #4
   1203a:	bf00      	nop
   1203c:	1fff92a0 	.word	0x1fff92a0
   12040:	1fff929c 	.word	0x1fff929c

00012044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   12044:	b500      	push	{lr}
   12046:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12048:	f7ef fbec 	bl	1824 <Sys_GetCoreID>
   1204c:	4603      	mov	r3, r0
   1204e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   12050:	4a0d      	ldr	r2, [pc, #52]	; (12088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   12052:	9b01      	ldr	r3, [sp, #4]
   12054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12058:	1e5a      	subs	r2, r3, #1
   1205a:	490b      	ldr	r1, [pc, #44]	; (12088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   12062:	4a0a      	ldr	r2, [pc, #40]	; (1208c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   12064:	9b01      	ldr	r3, [sp, #4]
   12066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1206a:	f003 0301 	and.w	r3, r3, #1
   1206e:	2b00      	cmp	r3, #0
   12070:	d106      	bne.n	12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   12072:	4a05      	ldr	r2, [pc, #20]	; (12088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   12074:	9b01      	ldr	r3, [sp, #4]
   12076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d100      	bne.n	12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1207e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12080:	bf00      	nop
   12082:	b003      	add	sp, #12
   12084:	f85d fb04 	ldr.w	pc, [sp], #4
   12088:	1fff92a0 	.word	0x1fff92a0
   1208c:	1fff929c 	.word	0x1fff929c

00012090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   12090:	b500      	push	{lr}
   12092:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12094:	f7ef fbc6 	bl	1824 <Sys_GetCoreID>
   12098:	4603      	mov	r3, r0
   1209a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   1209c:	4a10      	ldr	r2, [pc, #64]	; (120e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1209e:	9b01      	ldr	r3, [sp, #4]
   120a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120a4:	2b00      	cmp	r3, #0
   120a6:	d10d      	bne.n	120c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120a8:	f7ee fc2e 	bl	908 <Adc_schm_read_msr>
   120ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120ae:	9b00      	ldr	r3, [sp, #0]
   120b0:	f003 0301 	and.w	r3, r3, #1
   120b4:	2b00      	cmp	r3, #0
   120b6:	d100      	bne.n	120ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   120ba:	490a      	ldr	r1, [pc, #40]	; (120e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   120bc:	9b01      	ldr	r3, [sp, #4]
   120be:	9a00      	ldr	r2, [sp, #0]
   120c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   120c4:	4a06      	ldr	r2, [pc, #24]	; (120e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   120c6:	9b01      	ldr	r3, [sp, #4]
   120c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120cc:	1c5a      	adds	r2, r3, #1
   120ce:	4904      	ldr	r1, [pc, #16]	; (120e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   120d0:	9b01      	ldr	r3, [sp, #4]
   120d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120d6:	bf00      	nop
   120d8:	b003      	add	sp, #12
   120da:	f85d fb04 	ldr.w	pc, [sp], #4
   120de:	bf00      	nop
   120e0:	1fff92a8 	.word	0x1fff92a8
   120e4:	1fff92a4 	.word	0x1fff92a4

000120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   120e8:	b500      	push	{lr}
   120ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120ec:	f7ef fb9a 	bl	1824 <Sys_GetCoreID>
   120f0:	4603      	mov	r3, r0
   120f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   120f4:	4a0d      	ldr	r2, [pc, #52]	; (1212c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   120f6:	9b01      	ldr	r3, [sp, #4]
   120f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120fc:	1e5a      	subs	r2, r3, #1
   120fe:	490b      	ldr	r1, [pc, #44]	; (1212c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   12100:	9b01      	ldr	r3, [sp, #4]
   12102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   12106:	4a0a      	ldr	r2, [pc, #40]	; (12130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   12108:	9b01      	ldr	r3, [sp, #4]
   1210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1210e:	f003 0301 	and.w	r3, r3, #1
   12112:	2b00      	cmp	r3, #0
   12114:	d106      	bne.n	12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   12116:	4a05      	ldr	r2, [pc, #20]	; (1212c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   12118:	9b01      	ldr	r3, [sp, #4]
   1211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1211e:	2b00      	cmp	r3, #0
   12120:	d100      	bne.n	12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12122:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12124:	bf00      	nop
   12126:	b003      	add	sp, #12
   12128:	f85d fb04 	ldr.w	pc, [sp], #4
   1212c:	1fff92a8 	.word	0x1fff92a8
   12130:	1fff92a4 	.word	0x1fff92a4

00012134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   12134:	b500      	push	{lr}
   12136:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12138:	f7ef fb74 	bl	1824 <Sys_GetCoreID>
   1213c:	4603      	mov	r3, r0
   1213e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   12140:	4a10      	ldr	r2, [pc, #64]	; (12184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12142:	9b01      	ldr	r3, [sp, #4]
   12144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12148:	2b00      	cmp	r3, #0
   1214a:	d10d      	bne.n	12168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1214c:	f7ee fbdc 	bl	908 <Adc_schm_read_msr>
   12150:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12152:	9b00      	ldr	r3, [sp, #0]
   12154:	f003 0301 	and.w	r3, r3, #1
   12158:	2b00      	cmp	r3, #0
   1215a:	d100      	bne.n	1215e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1215c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1215e:	490a      	ldr	r1, [pc, #40]	; (12188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   12160:	9b01      	ldr	r3, [sp, #4]
   12162:	9a00      	ldr	r2, [sp, #0]
   12164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   12168:	4a06      	ldr	r2, [pc, #24]	; (12184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   1216a:	9b01      	ldr	r3, [sp, #4]
   1216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12170:	1c5a      	adds	r2, r3, #1
   12172:	4904      	ldr	r1, [pc, #16]	; (12184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12174:	9b01      	ldr	r3, [sp, #4]
   12176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1217a:	bf00      	nop
   1217c:	b003      	add	sp, #12
   1217e:	f85d fb04 	ldr.w	pc, [sp], #4
   12182:	bf00      	nop
   12184:	1fff92b0 	.word	0x1fff92b0
   12188:	1fff92ac 	.word	0x1fff92ac

0001218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   1218c:	b500      	push	{lr}
   1218e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12190:	f7ef fb48 	bl	1824 <Sys_GetCoreID>
   12194:	4603      	mov	r3, r0
   12196:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   12198:	4a0d      	ldr	r2, [pc, #52]	; (121d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   1219a:	9b01      	ldr	r3, [sp, #4]
   1219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121a0:	1e5a      	subs	r2, r3, #1
   121a2:	490b      	ldr	r1, [pc, #44]	; (121d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   121a4:	9b01      	ldr	r3, [sp, #4]
   121a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   121aa:	4a0a      	ldr	r2, [pc, #40]	; (121d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   121ac:	9b01      	ldr	r3, [sp, #4]
   121ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121b2:	f003 0301 	and.w	r3, r3, #1
   121b6:	2b00      	cmp	r3, #0
   121b8:	d106      	bne.n	121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   121ba:	4a05      	ldr	r2, [pc, #20]	; (121d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   121bc:	9b01      	ldr	r3, [sp, #4]
   121be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121c2:	2b00      	cmp	r3, #0
   121c4:	d100      	bne.n	121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121c8:	bf00      	nop
   121ca:	b003      	add	sp, #12
   121cc:	f85d fb04 	ldr.w	pc, [sp], #4
   121d0:	1fff92b0 	.word	0x1fff92b0
   121d4:	1fff92ac 	.word	0x1fff92ac

000121d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   121d8:	b500      	push	{lr}
   121da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121dc:	f7ef fb22 	bl	1824 <Sys_GetCoreID>
   121e0:	4603      	mov	r3, r0
   121e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   121e4:	4a10      	ldr	r2, [pc, #64]	; (12228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   121e6:	9b01      	ldr	r3, [sp, #4]
   121e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ec:	2b00      	cmp	r3, #0
   121ee:	d10d      	bne.n	1220c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121f0:	f7ee fb8a 	bl	908 <Adc_schm_read_msr>
   121f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121f6:	9b00      	ldr	r3, [sp, #0]
   121f8:	f003 0301 	and.w	r3, r3, #1
   121fc:	2b00      	cmp	r3, #0
   121fe:	d100      	bne.n	12202 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12200:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   12202:	490a      	ldr	r1, [pc, #40]	; (1222c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   12204:	9b01      	ldr	r3, [sp, #4]
   12206:	9a00      	ldr	r2, [sp, #0]
   12208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   1220c:	4a06      	ldr	r2, [pc, #24]	; (12228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   1220e:	9b01      	ldr	r3, [sp, #4]
   12210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12214:	1c5a      	adds	r2, r3, #1
   12216:	4904      	ldr	r1, [pc, #16]	; (12228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   12218:	9b01      	ldr	r3, [sp, #4]
   1221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1221e:	bf00      	nop
   12220:	b003      	add	sp, #12
   12222:	f85d fb04 	ldr.w	pc, [sp], #4
   12226:	bf00      	nop
   12228:	1fff92b8 	.word	0x1fff92b8
   1222c:	1fff92b4 	.word	0x1fff92b4

00012230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   12230:	b500      	push	{lr}
   12232:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12234:	f7ef faf6 	bl	1824 <Sys_GetCoreID>
   12238:	4603      	mov	r3, r0
   1223a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   1223c:	4a0d      	ldr	r2, [pc, #52]	; (12274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   1223e:	9b01      	ldr	r3, [sp, #4]
   12240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12244:	1e5a      	subs	r2, r3, #1
   12246:	490b      	ldr	r1, [pc, #44]	; (12274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1224e:	4a0a      	ldr	r2, [pc, #40]	; (12278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   12250:	9b01      	ldr	r3, [sp, #4]
   12252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12256:	f003 0301 	and.w	r3, r3, #1
   1225a:	2b00      	cmp	r3, #0
   1225c:	d106      	bne.n	1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   1225e:	4a05      	ldr	r2, [pc, #20]	; (12274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   12260:	9b01      	ldr	r3, [sp, #4]
   12262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12266:	2b00      	cmp	r3, #0
   12268:	d100      	bne.n	1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1226a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1226c:	bf00      	nop
   1226e:	b003      	add	sp, #12
   12270:	f85d fb04 	ldr.w	pc, [sp], #4
   12274:	1fff92b8 	.word	0x1fff92b8
   12278:	1fff92b4 	.word	0x1fff92b4

0001227c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   1227c:	b500      	push	{lr}
   1227e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12280:	f7ef fad0 	bl	1824 <Sys_GetCoreID>
   12284:	4603      	mov	r3, r0
   12286:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   12288:	4a10      	ldr	r2, [pc, #64]	; (122cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   1228a:	9b01      	ldr	r3, [sp, #4]
   1228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12290:	2b00      	cmp	r3, #0
   12292:	d10d      	bne.n	122b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12294:	f7ee fb38 	bl	908 <Adc_schm_read_msr>
   12298:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1229a:	9b00      	ldr	r3, [sp, #0]
   1229c:	f003 0301 	and.w	r3, r3, #1
   122a0:	2b00      	cmp	r3, #0
   122a2:	d100      	bne.n	122a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   122a6:	490a      	ldr	r1, [pc, #40]	; (122d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   122a8:	9b01      	ldr	r3, [sp, #4]
   122aa:	9a00      	ldr	r2, [sp, #0]
   122ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   122b0:	4a06      	ldr	r2, [pc, #24]	; (122cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   122b2:	9b01      	ldr	r3, [sp, #4]
   122b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b8:	1c5a      	adds	r2, r3, #1
   122ba:	4904      	ldr	r1, [pc, #16]	; (122cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   122bc:	9b01      	ldr	r3, [sp, #4]
   122be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122c2:	bf00      	nop
   122c4:	b003      	add	sp, #12
   122c6:	f85d fb04 	ldr.w	pc, [sp], #4
   122ca:	bf00      	nop
   122cc:	1fff92c0 	.word	0x1fff92c0
   122d0:	1fff92bc 	.word	0x1fff92bc

000122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   122d4:	b500      	push	{lr}
   122d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122d8:	f7ef faa4 	bl	1824 <Sys_GetCoreID>
   122dc:	4603      	mov	r3, r0
   122de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   122e0:	4a0d      	ldr	r2, [pc, #52]	; (12318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   122e2:	9b01      	ldr	r3, [sp, #4]
   122e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e8:	1e5a      	subs	r2, r3, #1
   122ea:	490b      	ldr	r1, [pc, #44]	; (12318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   122ec:	9b01      	ldr	r3, [sp, #4]
   122ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   122f2:	4a0a      	ldr	r2, [pc, #40]	; (1231c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   122f4:	9b01      	ldr	r3, [sp, #4]
   122f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122fa:	f003 0301 	and.w	r3, r3, #1
   122fe:	2b00      	cmp	r3, #0
   12300:	d106      	bne.n	12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   12302:	4a05      	ldr	r2, [pc, #20]	; (12318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   12304:	9b01      	ldr	r3, [sp, #4]
   12306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1230a:	2b00      	cmp	r3, #0
   1230c:	d100      	bne.n	12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1230e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12310:	bf00      	nop
   12312:	b003      	add	sp, #12
   12314:	f85d fb04 	ldr.w	pc, [sp], #4
   12318:	1fff92c0 	.word	0x1fff92c0
   1231c:	1fff92bc 	.word	0x1fff92bc

00012320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   12320:	b500      	push	{lr}
   12322:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12324:	f7ef fa7e 	bl	1824 <Sys_GetCoreID>
   12328:	4603      	mov	r3, r0
   1232a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   1232c:	4a10      	ldr	r2, [pc, #64]	; (12370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   1232e:	9b01      	ldr	r3, [sp, #4]
   12330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12334:	2b00      	cmp	r3, #0
   12336:	d10d      	bne.n	12354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12338:	f7ee fae6 	bl	908 <Adc_schm_read_msr>
   1233c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1233e:	9b00      	ldr	r3, [sp, #0]
   12340:	f003 0301 	and.w	r3, r3, #1
   12344:	2b00      	cmp	r3, #0
   12346:	d100      	bne.n	1234a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12348:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   1234a:	490a      	ldr	r1, [pc, #40]	; (12374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   1234c:	9b01      	ldr	r3, [sp, #4]
   1234e:	9a00      	ldr	r2, [sp, #0]
   12350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   12354:	4a06      	ldr	r2, [pc, #24]	; (12370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   12356:	9b01      	ldr	r3, [sp, #4]
   12358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1235c:	1c5a      	adds	r2, r3, #1
   1235e:	4904      	ldr	r1, [pc, #16]	; (12370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   12360:	9b01      	ldr	r3, [sp, #4]
   12362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12366:	bf00      	nop
   12368:	b003      	add	sp, #12
   1236a:	f85d fb04 	ldr.w	pc, [sp], #4
   1236e:	bf00      	nop
   12370:	1fff92c8 	.word	0x1fff92c8
   12374:	1fff92c4 	.word	0x1fff92c4

00012378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   12378:	b500      	push	{lr}
   1237a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1237c:	f7ef fa52 	bl	1824 <Sys_GetCoreID>
   12380:	4603      	mov	r3, r0
   12382:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   12384:	4a0d      	ldr	r2, [pc, #52]	; (123bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   12386:	9b01      	ldr	r3, [sp, #4]
   12388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1238c:	1e5a      	subs	r2, r3, #1
   1238e:	490b      	ldr	r1, [pc, #44]	; (123bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   12396:	4a0a      	ldr	r2, [pc, #40]	; (123c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   12398:	9b01      	ldr	r3, [sp, #4]
   1239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1239e:	f003 0301 	and.w	r3, r3, #1
   123a2:	2b00      	cmp	r3, #0
   123a4:	d106      	bne.n	123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   123a6:	4a05      	ldr	r2, [pc, #20]	; (123bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   123a8:	9b01      	ldr	r3, [sp, #4]
   123aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123ae:	2b00      	cmp	r3, #0
   123b0:	d100      	bne.n	123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123b4:	bf00      	nop
   123b6:	b003      	add	sp, #12
   123b8:	f85d fb04 	ldr.w	pc, [sp], #4
   123bc:	1fff92c8 	.word	0x1fff92c8
   123c0:	1fff92c4 	.word	0x1fff92c4

000123c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   123c4:	b500      	push	{lr}
   123c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123c8:	f7ef fa2c 	bl	1824 <Sys_GetCoreID>
   123cc:	4603      	mov	r3, r0
   123ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   123d0:	4a10      	ldr	r2, [pc, #64]	; (12414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   123d2:	9b01      	ldr	r3, [sp, #4]
   123d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123d8:	2b00      	cmp	r3, #0
   123da:	d10d      	bne.n	123f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123dc:	f7ee fa94 	bl	908 <Adc_schm_read_msr>
   123e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123e2:	9b00      	ldr	r3, [sp, #0]
   123e4:	f003 0301 	and.w	r3, r3, #1
   123e8:	2b00      	cmp	r3, #0
   123ea:	d100      	bne.n	123ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   123ee:	490a      	ldr	r1, [pc, #40]	; (12418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   123f0:	9b01      	ldr	r3, [sp, #4]
   123f2:	9a00      	ldr	r2, [sp, #0]
   123f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   123f8:	4a06      	ldr	r2, [pc, #24]	; (12414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   123fa:	9b01      	ldr	r3, [sp, #4]
   123fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12400:	1c5a      	adds	r2, r3, #1
   12402:	4904      	ldr	r1, [pc, #16]	; (12414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   12404:	9b01      	ldr	r3, [sp, #4]
   12406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1240a:	bf00      	nop
   1240c:	b003      	add	sp, #12
   1240e:	f85d fb04 	ldr.w	pc, [sp], #4
   12412:	bf00      	nop
   12414:	1fff92d0 	.word	0x1fff92d0
   12418:	1fff92cc 	.word	0x1fff92cc

0001241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   1241c:	b500      	push	{lr}
   1241e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12420:	f7ef fa00 	bl	1824 <Sys_GetCoreID>
   12424:	4603      	mov	r3, r0
   12426:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   12428:	4a0d      	ldr	r2, [pc, #52]	; (12460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   1242a:	9b01      	ldr	r3, [sp, #4]
   1242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12430:	1e5a      	subs	r2, r3, #1
   12432:	490b      	ldr	r1, [pc, #44]	; (12460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   12434:	9b01      	ldr	r3, [sp, #4]
   12436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   1243a:	4a0a      	ldr	r2, [pc, #40]	; (12464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   1243c:	9b01      	ldr	r3, [sp, #4]
   1243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12442:	f003 0301 	and.w	r3, r3, #1
   12446:	2b00      	cmp	r3, #0
   12448:	d106      	bne.n	12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   1244a:	4a05      	ldr	r2, [pc, #20]	; (12460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   1244c:	9b01      	ldr	r3, [sp, #4]
   1244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12452:	2b00      	cmp	r3, #0
   12454:	d100      	bne.n	12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12456:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12458:	bf00      	nop
   1245a:	b003      	add	sp, #12
   1245c:	f85d fb04 	ldr.w	pc, [sp], #4
   12460:	1fff92d0 	.word	0x1fff92d0
   12464:	1fff92cc 	.word	0x1fff92cc

00012468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   12468:	b500      	push	{lr}
   1246a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1246c:	f7ef f9da 	bl	1824 <Sys_GetCoreID>
   12470:	4603      	mov	r3, r0
   12472:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   12474:	4a10      	ldr	r2, [pc, #64]	; (124b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   12476:	9b01      	ldr	r3, [sp, #4]
   12478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1247c:	2b00      	cmp	r3, #0
   1247e:	d10d      	bne.n	1249c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12480:	f7ee fa42 	bl	908 <Adc_schm_read_msr>
   12484:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12486:	9b00      	ldr	r3, [sp, #0]
   12488:	f003 0301 	and.w	r3, r3, #1
   1248c:	2b00      	cmp	r3, #0
   1248e:	d100      	bne.n	12492 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12490:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   12492:	490a      	ldr	r1, [pc, #40]	; (124bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   12494:	9b01      	ldr	r3, [sp, #4]
   12496:	9a00      	ldr	r2, [sp, #0]
   12498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   1249c:	4a06      	ldr	r2, [pc, #24]	; (124b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1249e:	9b01      	ldr	r3, [sp, #4]
   124a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124a4:	1c5a      	adds	r2, r3, #1
   124a6:	4904      	ldr	r1, [pc, #16]	; (124b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   124a8:	9b01      	ldr	r3, [sp, #4]
   124aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124ae:	bf00      	nop
   124b0:	b003      	add	sp, #12
   124b2:	f85d fb04 	ldr.w	pc, [sp], #4
   124b6:	bf00      	nop
   124b8:	1fff92d8 	.word	0x1fff92d8
   124bc:	1fff92d4 	.word	0x1fff92d4

000124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   124c0:	b500      	push	{lr}
   124c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124c4:	f7ef f9ae 	bl	1824 <Sys_GetCoreID>
   124c8:	4603      	mov	r3, r0
   124ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   124cc:	4a0d      	ldr	r2, [pc, #52]	; (12504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   124ce:	9b01      	ldr	r3, [sp, #4]
   124d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124d4:	1e5a      	subs	r2, r3, #1
   124d6:	490b      	ldr	r1, [pc, #44]	; (12504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   124d8:	9b01      	ldr	r3, [sp, #4]
   124da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   124de:	4a0a      	ldr	r2, [pc, #40]	; (12508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   124e0:	9b01      	ldr	r3, [sp, #4]
   124e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124e6:	f003 0301 	and.w	r3, r3, #1
   124ea:	2b00      	cmp	r3, #0
   124ec:	d106      	bne.n	124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   124ee:	4a05      	ldr	r2, [pc, #20]	; (12504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   124f0:	9b01      	ldr	r3, [sp, #4]
   124f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124f6:	2b00      	cmp	r3, #0
   124f8:	d100      	bne.n	124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124fc:	bf00      	nop
   124fe:	b003      	add	sp, #12
   12500:	f85d fb04 	ldr.w	pc, [sp], #4
   12504:	1fff92d8 	.word	0x1fff92d8
   12508:	1fff92d4 	.word	0x1fff92d4

0001250c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   1250c:	b500      	push	{lr}
   1250e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12510:	f7ef f988 	bl	1824 <Sys_GetCoreID>
   12514:	4603      	mov	r3, r0
   12516:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   12518:	4a10      	ldr	r2, [pc, #64]	; (1255c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   1251a:	9b01      	ldr	r3, [sp, #4]
   1251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12520:	2b00      	cmp	r3, #0
   12522:	d10d      	bne.n	12540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12524:	f7ee f9f0 	bl	908 <Adc_schm_read_msr>
   12528:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1252a:	9b00      	ldr	r3, [sp, #0]
   1252c:	f003 0301 	and.w	r3, r3, #1
   12530:	2b00      	cmp	r3, #0
   12532:	d100      	bne.n	12536 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12534:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   12536:	490a      	ldr	r1, [pc, #40]	; (12560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   12538:	9b01      	ldr	r3, [sp, #4]
   1253a:	9a00      	ldr	r2, [sp, #0]
   1253c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   12540:	4a06      	ldr	r2, [pc, #24]	; (1255c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   12542:	9b01      	ldr	r3, [sp, #4]
   12544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12548:	1c5a      	adds	r2, r3, #1
   1254a:	4904      	ldr	r1, [pc, #16]	; (1255c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   1254c:	9b01      	ldr	r3, [sp, #4]
   1254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12552:	bf00      	nop
   12554:	b003      	add	sp, #12
   12556:	f85d fb04 	ldr.w	pc, [sp], #4
   1255a:	bf00      	nop
   1255c:	1fff92e0 	.word	0x1fff92e0
   12560:	1fff92dc 	.word	0x1fff92dc

00012564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   12564:	b500      	push	{lr}
   12566:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12568:	f7ef f95c 	bl	1824 <Sys_GetCoreID>
   1256c:	4603      	mov	r3, r0
   1256e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   12570:	4a0d      	ldr	r2, [pc, #52]	; (125a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   12572:	9b01      	ldr	r3, [sp, #4]
   12574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12578:	1e5a      	subs	r2, r3, #1
   1257a:	490b      	ldr	r1, [pc, #44]	; (125a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   12582:	4a0a      	ldr	r2, [pc, #40]	; (125ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   12584:	9b01      	ldr	r3, [sp, #4]
   12586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1258a:	f003 0301 	and.w	r3, r3, #1
   1258e:	2b00      	cmp	r3, #0
   12590:	d106      	bne.n	125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   12592:	4a05      	ldr	r2, [pc, #20]	; (125a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   12594:	9b01      	ldr	r3, [sp, #4]
   12596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1259a:	2b00      	cmp	r3, #0
   1259c:	d100      	bne.n	125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1259e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125a0:	bf00      	nop
   125a2:	b003      	add	sp, #12
   125a4:	f85d fb04 	ldr.w	pc, [sp], #4
   125a8:	1fff92e0 	.word	0x1fff92e0
   125ac:	1fff92dc 	.word	0x1fff92dc

000125b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   125b0:	b500      	push	{lr}
   125b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125b4:	f7ef f936 	bl	1824 <Sys_GetCoreID>
   125b8:	4603      	mov	r3, r0
   125ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   125bc:	4a10      	ldr	r2, [pc, #64]	; (12600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   125be:	9b01      	ldr	r3, [sp, #4]
   125c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125c4:	2b00      	cmp	r3, #0
   125c6:	d10d      	bne.n	125e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125c8:	f7ee f99e 	bl	908 <Adc_schm_read_msr>
   125cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125ce:	9b00      	ldr	r3, [sp, #0]
   125d0:	f003 0301 	and.w	r3, r3, #1
   125d4:	2b00      	cmp	r3, #0
   125d6:	d100      	bne.n	125da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   125da:	490a      	ldr	r1, [pc, #40]	; (12604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   125dc:	9b01      	ldr	r3, [sp, #4]
   125de:	9a00      	ldr	r2, [sp, #0]
   125e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   125e4:	4a06      	ldr	r2, [pc, #24]	; (12600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   125e6:	9b01      	ldr	r3, [sp, #4]
   125e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ec:	1c5a      	adds	r2, r3, #1
   125ee:	4904      	ldr	r1, [pc, #16]	; (12600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   125f0:	9b01      	ldr	r3, [sp, #4]
   125f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125f6:	bf00      	nop
   125f8:	b003      	add	sp, #12
   125fa:	f85d fb04 	ldr.w	pc, [sp], #4
   125fe:	bf00      	nop
   12600:	1fff92e8 	.word	0x1fff92e8
   12604:	1fff92e4 	.word	0x1fff92e4

00012608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   12608:	b500      	push	{lr}
   1260a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1260c:	f7ef f90a 	bl	1824 <Sys_GetCoreID>
   12610:	4603      	mov	r3, r0
   12612:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   12614:	4a0d      	ldr	r2, [pc, #52]	; (1264c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   12616:	9b01      	ldr	r3, [sp, #4]
   12618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1261c:	1e5a      	subs	r2, r3, #1
   1261e:	490b      	ldr	r1, [pc, #44]	; (1264c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   12620:	9b01      	ldr	r3, [sp, #4]
   12622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   12626:	4a0a      	ldr	r2, [pc, #40]	; (12650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   12628:	9b01      	ldr	r3, [sp, #4]
   1262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1262e:	f003 0301 	and.w	r3, r3, #1
   12632:	2b00      	cmp	r3, #0
   12634:	d106      	bne.n	12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   12636:	4a05      	ldr	r2, [pc, #20]	; (1264c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   12638:	9b01      	ldr	r3, [sp, #4]
   1263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1263e:	2b00      	cmp	r3, #0
   12640:	d100      	bne.n	12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12642:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12644:	bf00      	nop
   12646:	b003      	add	sp, #12
   12648:	f85d fb04 	ldr.w	pc, [sp], #4
   1264c:	1fff92e8 	.word	0x1fff92e8
   12650:	1fff92e4 	.word	0x1fff92e4

00012654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   12654:	b500      	push	{lr}
   12656:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12658:	f7ef f8e4 	bl	1824 <Sys_GetCoreID>
   1265c:	4603      	mov	r3, r0
   1265e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   12660:	4a10      	ldr	r2, [pc, #64]	; (126a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   12662:	9b01      	ldr	r3, [sp, #4]
   12664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12668:	2b00      	cmp	r3, #0
   1266a:	d10d      	bne.n	12688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1266c:	f7ee f94c 	bl	908 <Adc_schm_read_msr>
   12670:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12672:	9b00      	ldr	r3, [sp, #0]
   12674:	f003 0301 	and.w	r3, r3, #1
   12678:	2b00      	cmp	r3, #0
   1267a:	d100      	bne.n	1267e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1267c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1267e:	490a      	ldr	r1, [pc, #40]	; (126a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   12680:	9b01      	ldr	r3, [sp, #4]
   12682:	9a00      	ldr	r2, [sp, #0]
   12684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   12688:	4a06      	ldr	r2, [pc, #24]	; (126a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   1268a:	9b01      	ldr	r3, [sp, #4]
   1268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12690:	1c5a      	adds	r2, r3, #1
   12692:	4904      	ldr	r1, [pc, #16]	; (126a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   12694:	9b01      	ldr	r3, [sp, #4]
   12696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1269a:	bf00      	nop
   1269c:	b003      	add	sp, #12
   1269e:	f85d fb04 	ldr.w	pc, [sp], #4
   126a2:	bf00      	nop
   126a4:	1fff92f0 	.word	0x1fff92f0
   126a8:	1fff92ec 	.word	0x1fff92ec

000126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   126ac:	b500      	push	{lr}
   126ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126b0:	f7ef f8b8 	bl	1824 <Sys_GetCoreID>
   126b4:	4603      	mov	r3, r0
   126b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   126b8:	4a0d      	ldr	r2, [pc, #52]	; (126f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   126ba:	9b01      	ldr	r3, [sp, #4]
   126bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126c0:	1e5a      	subs	r2, r3, #1
   126c2:	490b      	ldr	r1, [pc, #44]	; (126f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   126c4:	9b01      	ldr	r3, [sp, #4]
   126c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   126ca:	4a0a      	ldr	r2, [pc, #40]	; (126f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   126cc:	9b01      	ldr	r3, [sp, #4]
   126ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d2:	f003 0301 	and.w	r3, r3, #1
   126d6:	2b00      	cmp	r3, #0
   126d8:	d106      	bne.n	126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   126da:	4a05      	ldr	r2, [pc, #20]	; (126f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   126dc:	9b01      	ldr	r3, [sp, #4]
   126de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126e2:	2b00      	cmp	r3, #0
   126e4:	d100      	bne.n	126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126e8:	bf00      	nop
   126ea:	b003      	add	sp, #12
   126ec:	f85d fb04 	ldr.w	pc, [sp], #4
   126f0:	1fff92f0 	.word	0x1fff92f0
   126f4:	1fff92ec 	.word	0x1fff92ec

000126f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   126f8:	b500      	push	{lr}
   126fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126fc:	f7ef f892 	bl	1824 <Sys_GetCoreID>
   12700:	4603      	mov	r3, r0
   12702:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   12704:	4a10      	ldr	r2, [pc, #64]	; (12748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   12706:	9b01      	ldr	r3, [sp, #4]
   12708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1270c:	2b00      	cmp	r3, #0
   1270e:	d10d      	bne.n	1272c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12710:	f7ee f8fa 	bl	908 <Adc_schm_read_msr>
   12714:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12716:	9b00      	ldr	r3, [sp, #0]
   12718:	f003 0301 	and.w	r3, r3, #1
   1271c:	2b00      	cmp	r3, #0
   1271e:	d100      	bne.n	12722 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12720:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   12722:	490a      	ldr	r1, [pc, #40]	; (1274c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   12724:	9b01      	ldr	r3, [sp, #4]
   12726:	9a00      	ldr	r2, [sp, #0]
   12728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   1272c:	4a06      	ldr	r2, [pc, #24]	; (12748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1272e:	9b01      	ldr	r3, [sp, #4]
   12730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12734:	1c5a      	adds	r2, r3, #1
   12736:	4904      	ldr	r1, [pc, #16]	; (12748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   12738:	9b01      	ldr	r3, [sp, #4]
   1273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1273e:	bf00      	nop
   12740:	b003      	add	sp, #12
   12742:	f85d fb04 	ldr.w	pc, [sp], #4
   12746:	bf00      	nop
   12748:	1fff92f8 	.word	0x1fff92f8
   1274c:	1fff92f4 	.word	0x1fff92f4

00012750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   12750:	b500      	push	{lr}
   12752:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12754:	f7ef f866 	bl	1824 <Sys_GetCoreID>
   12758:	4603      	mov	r3, r0
   1275a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   1275c:	4a0d      	ldr	r2, [pc, #52]	; (12794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1275e:	9b01      	ldr	r3, [sp, #4]
   12760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12764:	1e5a      	subs	r2, r3, #1
   12766:	490b      	ldr	r1, [pc, #44]	; (12794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   12768:	9b01      	ldr	r3, [sp, #4]
   1276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1276e:	4a0a      	ldr	r2, [pc, #40]	; (12798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   12770:	9b01      	ldr	r3, [sp, #4]
   12772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12776:	f003 0301 	and.w	r3, r3, #1
   1277a:	2b00      	cmp	r3, #0
   1277c:	d106      	bne.n	1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   1277e:	4a05      	ldr	r2, [pc, #20]	; (12794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   12780:	9b01      	ldr	r3, [sp, #4]
   12782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12786:	2b00      	cmp	r3, #0
   12788:	d100      	bne.n	1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1278a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1278c:	bf00      	nop
   1278e:	b003      	add	sp, #12
   12790:	f85d fb04 	ldr.w	pc, [sp], #4
   12794:	1fff92f8 	.word	0x1fff92f8
   12798:	1fff92f4 	.word	0x1fff92f4

0001279c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   1279c:	b500      	push	{lr}
   1279e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127a0:	f7ef f840 	bl	1824 <Sys_GetCoreID>
   127a4:	4603      	mov	r3, r0
   127a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   127a8:	4a10      	ldr	r2, [pc, #64]	; (127ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   127aa:	9b01      	ldr	r3, [sp, #4]
   127ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127b0:	2b00      	cmp	r3, #0
   127b2:	d10d      	bne.n	127d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127b4:	f7ee f8a8 	bl	908 <Adc_schm_read_msr>
   127b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127ba:	9b00      	ldr	r3, [sp, #0]
   127bc:	f003 0301 	and.w	r3, r3, #1
   127c0:	2b00      	cmp	r3, #0
   127c2:	d100      	bne.n	127c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   127c6:	490a      	ldr	r1, [pc, #40]	; (127f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   127c8:	9b01      	ldr	r3, [sp, #4]
   127ca:	9a00      	ldr	r2, [sp, #0]
   127cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   127d0:	4a06      	ldr	r2, [pc, #24]	; (127ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   127d2:	9b01      	ldr	r3, [sp, #4]
   127d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d8:	1c5a      	adds	r2, r3, #1
   127da:	4904      	ldr	r1, [pc, #16]	; (127ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   127dc:	9b01      	ldr	r3, [sp, #4]
   127de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127e2:	bf00      	nop
   127e4:	b003      	add	sp, #12
   127e6:	f85d fb04 	ldr.w	pc, [sp], #4
   127ea:	bf00      	nop
   127ec:	1fff9300 	.word	0x1fff9300
   127f0:	1fff92fc 	.word	0x1fff92fc

000127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   127f4:	b500      	push	{lr}
   127f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127f8:	f7ef f814 	bl	1824 <Sys_GetCoreID>
   127fc:	4603      	mov	r3, r0
   127fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   12800:	4a0d      	ldr	r2, [pc, #52]	; (12838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   12802:	9b01      	ldr	r3, [sp, #4]
   12804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12808:	1e5a      	subs	r2, r3, #1
   1280a:	490b      	ldr	r1, [pc, #44]	; (12838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1280c:	9b01      	ldr	r3, [sp, #4]
   1280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   12812:	4a0a      	ldr	r2, [pc, #40]	; (1283c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   12814:	9b01      	ldr	r3, [sp, #4]
   12816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1281a:	f003 0301 	and.w	r3, r3, #1
   1281e:	2b00      	cmp	r3, #0
   12820:	d106      	bne.n	12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   12822:	4a05      	ldr	r2, [pc, #20]	; (12838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   12824:	9b01      	ldr	r3, [sp, #4]
   12826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1282a:	2b00      	cmp	r3, #0
   1282c:	d100      	bne.n	12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1282e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12830:	bf00      	nop
   12832:	b003      	add	sp, #12
   12834:	f85d fb04 	ldr.w	pc, [sp], #4
   12838:	1fff9300 	.word	0x1fff9300
   1283c:	1fff92fc 	.word	0x1fff92fc

00012840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   12840:	b500      	push	{lr}
   12842:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12844:	f7ee ffee 	bl	1824 <Sys_GetCoreID>
   12848:	4603      	mov	r3, r0
   1284a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   1284c:	4a10      	ldr	r2, [pc, #64]	; (12890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1284e:	9b01      	ldr	r3, [sp, #4]
   12850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12854:	2b00      	cmp	r3, #0
   12856:	d10d      	bne.n	12874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12858:	f7ee f856 	bl	908 <Adc_schm_read_msr>
   1285c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1285e:	9b00      	ldr	r3, [sp, #0]
   12860:	f003 0301 	and.w	r3, r3, #1
   12864:	2b00      	cmp	r3, #0
   12866:	d100      	bne.n	1286a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12868:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   1286a:	490a      	ldr	r1, [pc, #40]	; (12894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   1286c:	9b01      	ldr	r3, [sp, #4]
   1286e:	9a00      	ldr	r2, [sp, #0]
   12870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   12874:	4a06      	ldr	r2, [pc, #24]	; (12890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12876:	9b01      	ldr	r3, [sp, #4]
   12878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287c:	1c5a      	adds	r2, r3, #1
   1287e:	4904      	ldr	r1, [pc, #16]	; (12890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12880:	9b01      	ldr	r3, [sp, #4]
   12882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12886:	bf00      	nop
   12888:	b003      	add	sp, #12
   1288a:	f85d fb04 	ldr.w	pc, [sp], #4
   1288e:	bf00      	nop
   12890:	1fff9308 	.word	0x1fff9308
   12894:	1fff9304 	.word	0x1fff9304

00012898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   12898:	b500      	push	{lr}
   1289a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1289c:	f7ee ffc2 	bl	1824 <Sys_GetCoreID>
   128a0:	4603      	mov	r3, r0
   128a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   128a4:	4a0d      	ldr	r2, [pc, #52]	; (128dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   128a6:	9b01      	ldr	r3, [sp, #4]
   128a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ac:	1e5a      	subs	r2, r3, #1
   128ae:	490b      	ldr	r1, [pc, #44]	; (128dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   128b6:	4a0a      	ldr	r2, [pc, #40]	; (128e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   128b8:	9b01      	ldr	r3, [sp, #4]
   128ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128be:	f003 0301 	and.w	r3, r3, #1
   128c2:	2b00      	cmp	r3, #0
   128c4:	d106      	bne.n	128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   128c6:	4a05      	ldr	r2, [pc, #20]	; (128dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   128c8:	9b01      	ldr	r3, [sp, #4]
   128ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ce:	2b00      	cmp	r3, #0
   128d0:	d100      	bne.n	128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128d4:	bf00      	nop
   128d6:	b003      	add	sp, #12
   128d8:	f85d fb04 	ldr.w	pc, [sp], #4
   128dc:	1fff9308 	.word	0x1fff9308
   128e0:	1fff9304 	.word	0x1fff9304

000128e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   128e4:	b500      	push	{lr}
   128e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128e8:	f7ee ff9c 	bl	1824 <Sys_GetCoreID>
   128ec:	4603      	mov	r3, r0
   128ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   128f0:	4a10      	ldr	r2, [pc, #64]	; (12934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   128f2:	9b01      	ldr	r3, [sp, #4]
   128f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f8:	2b00      	cmp	r3, #0
   128fa:	d10d      	bne.n	12918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128fc:	f7ee f804 	bl	908 <Adc_schm_read_msr>
   12900:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12902:	9b00      	ldr	r3, [sp, #0]
   12904:	f003 0301 	and.w	r3, r3, #1
   12908:	2b00      	cmp	r3, #0
   1290a:	d100      	bne.n	1290e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1290c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1290e:	490a      	ldr	r1, [pc, #40]	; (12938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   12910:	9b01      	ldr	r3, [sp, #4]
   12912:	9a00      	ldr	r2, [sp, #0]
   12914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   12918:	4a06      	ldr	r2, [pc, #24]	; (12934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1291a:	9b01      	ldr	r3, [sp, #4]
   1291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12920:	1c5a      	adds	r2, r3, #1
   12922:	4904      	ldr	r1, [pc, #16]	; (12934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   12924:	9b01      	ldr	r3, [sp, #4]
   12926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1292a:	bf00      	nop
   1292c:	b003      	add	sp, #12
   1292e:	f85d fb04 	ldr.w	pc, [sp], #4
   12932:	bf00      	nop
   12934:	1fff9310 	.word	0x1fff9310
   12938:	1fff930c 	.word	0x1fff930c

0001293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   1293c:	b500      	push	{lr}
   1293e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12940:	f7ee ff70 	bl	1824 <Sys_GetCoreID>
   12944:	4603      	mov	r3, r0
   12946:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   12948:	4a0d      	ldr	r2, [pc, #52]	; (12980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1294a:	9b01      	ldr	r3, [sp, #4]
   1294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12950:	1e5a      	subs	r2, r3, #1
   12952:	490b      	ldr	r1, [pc, #44]	; (12980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   1295a:	4a0a      	ldr	r2, [pc, #40]	; (12984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   1295c:	9b01      	ldr	r3, [sp, #4]
   1295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12962:	f003 0301 	and.w	r3, r3, #1
   12966:	2b00      	cmp	r3, #0
   12968:	d106      	bne.n	12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   1296a:	4a05      	ldr	r2, [pc, #20]	; (12980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1296c:	9b01      	ldr	r3, [sp, #4]
   1296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12972:	2b00      	cmp	r3, #0
   12974:	d100      	bne.n	12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12976:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12978:	bf00      	nop
   1297a:	b003      	add	sp, #12
   1297c:	f85d fb04 	ldr.w	pc, [sp], #4
   12980:	1fff9310 	.word	0x1fff9310
   12984:	1fff930c 	.word	0x1fff930c

00012988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   12988:	b500      	push	{lr}
   1298a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1298c:	f7ee ff4a 	bl	1824 <Sys_GetCoreID>
   12990:	4603      	mov	r3, r0
   12992:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   12994:	4a10      	ldr	r2, [pc, #64]	; (129d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12996:	9b01      	ldr	r3, [sp, #4]
   12998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1299c:	2b00      	cmp	r3, #0
   1299e:	d10d      	bne.n	129bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129a0:	f7ed ffb2 	bl	908 <Adc_schm_read_msr>
   129a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129a6:	9b00      	ldr	r3, [sp, #0]
   129a8:	f003 0301 	and.w	r3, r3, #1
   129ac:	2b00      	cmp	r3, #0
   129ae:	d100      	bne.n	129b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   129b2:	490a      	ldr	r1, [pc, #40]	; (129dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   129b4:	9b01      	ldr	r3, [sp, #4]
   129b6:	9a00      	ldr	r2, [sp, #0]
   129b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   129bc:	4a06      	ldr	r2, [pc, #24]	; (129d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   129be:	9b01      	ldr	r3, [sp, #4]
   129c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c4:	1c5a      	adds	r2, r3, #1
   129c6:	4904      	ldr	r1, [pc, #16]	; (129d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   129c8:	9b01      	ldr	r3, [sp, #4]
   129ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129ce:	bf00      	nop
   129d0:	b003      	add	sp, #12
   129d2:	f85d fb04 	ldr.w	pc, [sp], #4
   129d6:	bf00      	nop
   129d8:	1fff9318 	.word	0x1fff9318
   129dc:	1fff9314 	.word	0x1fff9314

000129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   129e0:	b500      	push	{lr}
   129e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129e4:	f7ee ff1e 	bl	1824 <Sys_GetCoreID>
   129e8:	4603      	mov	r3, r0
   129ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   129ec:	4a0d      	ldr	r2, [pc, #52]	; (12a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   129ee:	9b01      	ldr	r3, [sp, #4]
   129f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129f4:	1e5a      	subs	r2, r3, #1
   129f6:	490b      	ldr	r1, [pc, #44]	; (12a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   129f8:	9b01      	ldr	r3, [sp, #4]
   129fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   129fe:	4a0a      	ldr	r2, [pc, #40]	; (12a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   12a00:	9b01      	ldr	r3, [sp, #4]
   12a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a06:	f003 0301 	and.w	r3, r3, #1
   12a0a:	2b00      	cmp	r3, #0
   12a0c:	d106      	bne.n	12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   12a0e:	4a05      	ldr	r2, [pc, #20]	; (12a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12a10:	9b01      	ldr	r3, [sp, #4]
   12a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a16:	2b00      	cmp	r3, #0
   12a18:	d100      	bne.n	12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a1c:	bf00      	nop
   12a1e:	b003      	add	sp, #12
   12a20:	f85d fb04 	ldr.w	pc, [sp], #4
   12a24:	1fff9318 	.word	0x1fff9318
   12a28:	1fff9314 	.word	0x1fff9314

00012a2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12a2c:	b500      	push	{lr}
   12a2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a30:	f7ee fef8 	bl	1824 <Sys_GetCoreID>
   12a34:	4603      	mov	r3, r0
   12a36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   12a38:	4a10      	ldr	r2, [pc, #64]	; (12a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12a3a:	9b01      	ldr	r3, [sp, #4]
   12a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a40:	2b00      	cmp	r3, #0
   12a42:	d10d      	bne.n	12a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a44:	f7ed ff60 	bl	908 <Adc_schm_read_msr>
   12a48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a4a:	9b00      	ldr	r3, [sp, #0]
   12a4c:	f003 0301 	and.w	r3, r3, #1
   12a50:	2b00      	cmp	r3, #0
   12a52:	d100      	bne.n	12a56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   12a56:	490a      	ldr	r1, [pc, #40]	; (12a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   12a58:	9b01      	ldr	r3, [sp, #4]
   12a5a:	9a00      	ldr	r2, [sp, #0]
   12a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   12a60:	4a06      	ldr	r2, [pc, #24]	; (12a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12a62:	9b01      	ldr	r3, [sp, #4]
   12a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a68:	1c5a      	adds	r2, r3, #1
   12a6a:	4904      	ldr	r1, [pc, #16]	; (12a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12a6c:	9b01      	ldr	r3, [sp, #4]
   12a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a72:	bf00      	nop
   12a74:	b003      	add	sp, #12
   12a76:	f85d fb04 	ldr.w	pc, [sp], #4
   12a7a:	bf00      	nop
   12a7c:	1fff9320 	.word	0x1fff9320
   12a80:	1fff931c 	.word	0x1fff931c

00012a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12a84:	b500      	push	{lr}
   12a86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a88:	f7ee fecc 	bl	1824 <Sys_GetCoreID>
   12a8c:	4603      	mov	r3, r0
   12a8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   12a90:	4a0d      	ldr	r2, [pc, #52]	; (12ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12a92:	9b01      	ldr	r3, [sp, #4]
   12a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a98:	1e5a      	subs	r2, r3, #1
   12a9a:	490b      	ldr	r1, [pc, #44]	; (12ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   12aa2:	4a0a      	ldr	r2, [pc, #40]	; (12acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   12aa4:	9b01      	ldr	r3, [sp, #4]
   12aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aaa:	f003 0301 	and.w	r3, r3, #1
   12aae:	2b00      	cmp	r3, #0
   12ab0:	d106      	bne.n	12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   12ab2:	4a05      	ldr	r2, [pc, #20]	; (12ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12ab4:	9b01      	ldr	r3, [sp, #4]
   12ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aba:	2b00      	cmp	r3, #0
   12abc:	d100      	bne.n	12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12abe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ac0:	bf00      	nop
   12ac2:	b003      	add	sp, #12
   12ac4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ac8:	1fff9320 	.word	0x1fff9320
   12acc:	1fff931c 	.word	0x1fff931c

00012ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12ad0:	b500      	push	{lr}
   12ad2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ad4:	f7ee fea6 	bl	1824 <Sys_GetCoreID>
   12ad8:	4603      	mov	r3, r0
   12ada:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   12adc:	4a10      	ldr	r2, [pc, #64]	; (12b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12ade:	9b01      	ldr	r3, [sp, #4]
   12ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d10d      	bne.n	12b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ae8:	f7ed ff0e 	bl	908 <Adc_schm_read_msr>
   12aec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12aee:	9b00      	ldr	r3, [sp, #0]
   12af0:	f003 0301 	and.w	r3, r3, #1
   12af4:	2b00      	cmp	r3, #0
   12af6:	d100      	bne.n	12afa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12af8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   12afa:	490a      	ldr	r1, [pc, #40]	; (12b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   12afc:	9b01      	ldr	r3, [sp, #4]
   12afe:	9a00      	ldr	r2, [sp, #0]
   12b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   12b04:	4a06      	ldr	r2, [pc, #24]	; (12b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12b06:	9b01      	ldr	r3, [sp, #4]
   12b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b0c:	1c5a      	adds	r2, r3, #1
   12b0e:	4904      	ldr	r1, [pc, #16]	; (12b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12b10:	9b01      	ldr	r3, [sp, #4]
   12b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b16:	bf00      	nop
   12b18:	b003      	add	sp, #12
   12b1a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b1e:	bf00      	nop
   12b20:	1fff9328 	.word	0x1fff9328
   12b24:	1fff9324 	.word	0x1fff9324

00012b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12b28:	b500      	push	{lr}
   12b2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b2c:	f7ee fe7a 	bl	1824 <Sys_GetCoreID>
   12b30:	4603      	mov	r3, r0
   12b32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   12b34:	4a0d      	ldr	r2, [pc, #52]	; (12b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12b36:	9b01      	ldr	r3, [sp, #4]
   12b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b3c:	1e5a      	subs	r2, r3, #1
   12b3e:	490b      	ldr	r1, [pc, #44]	; (12b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12b40:	9b01      	ldr	r3, [sp, #4]
   12b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   12b46:	4a0a      	ldr	r2, [pc, #40]	; (12b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   12b48:	9b01      	ldr	r3, [sp, #4]
   12b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b4e:	f003 0301 	and.w	r3, r3, #1
   12b52:	2b00      	cmp	r3, #0
   12b54:	d106      	bne.n	12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   12b56:	4a05      	ldr	r2, [pc, #20]	; (12b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12b58:	9b01      	ldr	r3, [sp, #4]
   12b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b5e:	2b00      	cmp	r3, #0
   12b60:	d100      	bne.n	12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b64:	bf00      	nop
   12b66:	b003      	add	sp, #12
   12b68:	f85d fb04 	ldr.w	pc, [sp], #4
   12b6c:	1fff9328 	.word	0x1fff9328
   12b70:	1fff9324 	.word	0x1fff9324

00012b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12b74:	b500      	push	{lr}
   12b76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b78:	f7ee fe54 	bl	1824 <Sys_GetCoreID>
   12b7c:	4603      	mov	r3, r0
   12b7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   12b80:	4a10      	ldr	r2, [pc, #64]	; (12bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12b82:	9b01      	ldr	r3, [sp, #4]
   12b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b88:	2b00      	cmp	r3, #0
   12b8a:	d10d      	bne.n	12ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b8c:	f7ed febc 	bl	908 <Adc_schm_read_msr>
   12b90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b92:	9b00      	ldr	r3, [sp, #0]
   12b94:	f003 0301 	and.w	r3, r3, #1
   12b98:	2b00      	cmp	r3, #0
   12b9a:	d100      	bne.n	12b9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   12b9e:	490a      	ldr	r1, [pc, #40]	; (12bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   12ba0:	9b01      	ldr	r3, [sp, #4]
   12ba2:	9a00      	ldr	r2, [sp, #0]
   12ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   12ba8:	4a06      	ldr	r2, [pc, #24]	; (12bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12baa:	9b01      	ldr	r3, [sp, #4]
   12bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bb0:	1c5a      	adds	r2, r3, #1
   12bb2:	4904      	ldr	r1, [pc, #16]	; (12bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12bb4:	9b01      	ldr	r3, [sp, #4]
   12bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bba:	bf00      	nop
   12bbc:	b003      	add	sp, #12
   12bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   12bc2:	bf00      	nop
   12bc4:	1fff9330 	.word	0x1fff9330
   12bc8:	1fff932c 	.word	0x1fff932c

00012bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12bcc:	b500      	push	{lr}
   12bce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bd0:	f7ee fe28 	bl	1824 <Sys_GetCoreID>
   12bd4:	4603      	mov	r3, r0
   12bd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   12bd8:	4a0d      	ldr	r2, [pc, #52]	; (12c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12bda:	9b01      	ldr	r3, [sp, #4]
   12bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12be0:	1e5a      	subs	r2, r3, #1
   12be2:	490b      	ldr	r1, [pc, #44]	; (12c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   12bea:	4a0a      	ldr	r2, [pc, #40]	; (12c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   12bec:	9b01      	ldr	r3, [sp, #4]
   12bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf2:	f003 0301 	and.w	r3, r3, #1
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	d106      	bne.n	12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   12bfa:	4a05      	ldr	r2, [pc, #20]	; (12c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12bfc:	9b01      	ldr	r3, [sp, #4]
   12bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c02:	2b00      	cmp	r3, #0
   12c04:	d100      	bne.n	12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c08:	bf00      	nop
   12c0a:	b003      	add	sp, #12
   12c0c:	f85d fb04 	ldr.w	pc, [sp], #4
   12c10:	1fff9330 	.word	0x1fff9330
   12c14:	1fff932c 	.word	0x1fff932c

00012c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12c18:	b500      	push	{lr}
   12c1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c1c:	f7ee fe02 	bl	1824 <Sys_GetCoreID>
   12c20:	4603      	mov	r3, r0
   12c22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   12c24:	4a10      	ldr	r2, [pc, #64]	; (12c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12c26:	9b01      	ldr	r3, [sp, #4]
   12c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c2c:	2b00      	cmp	r3, #0
   12c2e:	d10d      	bne.n	12c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c30:	f7ed fe6a 	bl	908 <Adc_schm_read_msr>
   12c34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c36:	9b00      	ldr	r3, [sp, #0]
   12c38:	f003 0301 	and.w	r3, r3, #1
   12c3c:	2b00      	cmp	r3, #0
   12c3e:	d100      	bne.n	12c42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   12c42:	490a      	ldr	r1, [pc, #40]	; (12c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   12c44:	9b01      	ldr	r3, [sp, #4]
   12c46:	9a00      	ldr	r2, [sp, #0]
   12c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   12c4c:	4a06      	ldr	r2, [pc, #24]	; (12c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12c4e:	9b01      	ldr	r3, [sp, #4]
   12c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c54:	1c5a      	adds	r2, r3, #1
   12c56:	4904      	ldr	r1, [pc, #16]	; (12c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12c58:	9b01      	ldr	r3, [sp, #4]
   12c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c5e:	bf00      	nop
   12c60:	b003      	add	sp, #12
   12c62:	f85d fb04 	ldr.w	pc, [sp], #4
   12c66:	bf00      	nop
   12c68:	1fff9338 	.word	0x1fff9338
   12c6c:	1fff9334 	.word	0x1fff9334

00012c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12c70:	b500      	push	{lr}
   12c72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c74:	f7ee fdd6 	bl	1824 <Sys_GetCoreID>
   12c78:	4603      	mov	r3, r0
   12c7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   12c7c:	4a0d      	ldr	r2, [pc, #52]	; (12cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12c7e:	9b01      	ldr	r3, [sp, #4]
   12c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c84:	1e5a      	subs	r2, r3, #1
   12c86:	490b      	ldr	r1, [pc, #44]	; (12cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   12c8e:	4a0a      	ldr	r2, [pc, #40]	; (12cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   12c90:	9b01      	ldr	r3, [sp, #4]
   12c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c96:	f003 0301 	and.w	r3, r3, #1
   12c9a:	2b00      	cmp	r3, #0
   12c9c:	d106      	bne.n	12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   12c9e:	4a05      	ldr	r2, [pc, #20]	; (12cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12ca0:	9b01      	ldr	r3, [sp, #4]
   12ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d100      	bne.n	12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12caa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cac:	bf00      	nop
   12cae:	b003      	add	sp, #12
   12cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   12cb4:	1fff9338 	.word	0x1fff9338
   12cb8:	1fff9334 	.word	0x1fff9334

00012cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12cbc:	b500      	push	{lr}
   12cbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cc0:	f7ee fdb0 	bl	1824 <Sys_GetCoreID>
   12cc4:	4603      	mov	r3, r0
   12cc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   12cc8:	4a10      	ldr	r2, [pc, #64]	; (12d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12cca:	9b01      	ldr	r3, [sp, #4]
   12ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d10d      	bne.n	12cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cd4:	f7ed fe18 	bl	908 <Adc_schm_read_msr>
   12cd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cda:	9b00      	ldr	r3, [sp, #0]
   12cdc:	f003 0301 	and.w	r3, r3, #1
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d100      	bne.n	12ce6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ce4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   12ce6:	490a      	ldr	r1, [pc, #40]	; (12d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   12ce8:	9b01      	ldr	r3, [sp, #4]
   12cea:	9a00      	ldr	r2, [sp, #0]
   12cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   12cf0:	4a06      	ldr	r2, [pc, #24]	; (12d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12cf2:	9b01      	ldr	r3, [sp, #4]
   12cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf8:	1c5a      	adds	r2, r3, #1
   12cfa:	4904      	ldr	r1, [pc, #16]	; (12d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12cfc:	9b01      	ldr	r3, [sp, #4]
   12cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d02:	bf00      	nop
   12d04:	b003      	add	sp, #12
   12d06:	f85d fb04 	ldr.w	pc, [sp], #4
   12d0a:	bf00      	nop
   12d0c:	1fff9340 	.word	0x1fff9340
   12d10:	1fff933c 	.word	0x1fff933c

00012d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12d14:	b500      	push	{lr}
   12d16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d18:	f7ee fd84 	bl	1824 <Sys_GetCoreID>
   12d1c:	4603      	mov	r3, r0
   12d1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   12d20:	4a0d      	ldr	r2, [pc, #52]	; (12d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12d22:	9b01      	ldr	r3, [sp, #4]
   12d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d28:	1e5a      	subs	r2, r3, #1
   12d2a:	490b      	ldr	r1, [pc, #44]	; (12d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   12d32:	4a0a      	ldr	r2, [pc, #40]	; (12d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   12d34:	9b01      	ldr	r3, [sp, #4]
   12d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d3a:	f003 0301 	and.w	r3, r3, #1
   12d3e:	2b00      	cmp	r3, #0
   12d40:	d106      	bne.n	12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   12d42:	4a05      	ldr	r2, [pc, #20]	; (12d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12d44:	9b01      	ldr	r3, [sp, #4]
   12d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d4a:	2b00      	cmp	r3, #0
   12d4c:	d100      	bne.n	12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d50:	bf00      	nop
   12d52:	b003      	add	sp, #12
   12d54:	f85d fb04 	ldr.w	pc, [sp], #4
   12d58:	1fff9340 	.word	0x1fff9340
   12d5c:	1fff933c 	.word	0x1fff933c

00012d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12d60:	b500      	push	{lr}
   12d62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d64:	f7ee fd5e 	bl	1824 <Sys_GetCoreID>
   12d68:	4603      	mov	r3, r0
   12d6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   12d6c:	4a10      	ldr	r2, [pc, #64]	; (12db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12d6e:	9b01      	ldr	r3, [sp, #4]
   12d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d74:	2b00      	cmp	r3, #0
   12d76:	d10d      	bne.n	12d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d78:	f7ed fdc6 	bl	908 <Adc_schm_read_msr>
   12d7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d7e:	9b00      	ldr	r3, [sp, #0]
   12d80:	f003 0301 	and.w	r3, r3, #1
   12d84:	2b00      	cmp	r3, #0
   12d86:	d100      	bne.n	12d8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   12d8a:	490a      	ldr	r1, [pc, #40]	; (12db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   12d8c:	9b01      	ldr	r3, [sp, #4]
   12d8e:	9a00      	ldr	r2, [sp, #0]
   12d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   12d94:	4a06      	ldr	r2, [pc, #24]	; (12db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12d96:	9b01      	ldr	r3, [sp, #4]
   12d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d9c:	1c5a      	adds	r2, r3, #1
   12d9e:	4904      	ldr	r1, [pc, #16]	; (12db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12da0:	9b01      	ldr	r3, [sp, #4]
   12da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12da6:	bf00      	nop
   12da8:	b003      	add	sp, #12
   12daa:	f85d fb04 	ldr.w	pc, [sp], #4
   12dae:	bf00      	nop
   12db0:	1fff9348 	.word	0x1fff9348
   12db4:	1fff9344 	.word	0x1fff9344

00012db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12db8:	b500      	push	{lr}
   12dba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dbc:	f7ee fd32 	bl	1824 <Sys_GetCoreID>
   12dc0:	4603      	mov	r3, r0
   12dc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   12dc4:	4a0d      	ldr	r2, [pc, #52]	; (12dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12dc6:	9b01      	ldr	r3, [sp, #4]
   12dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dcc:	1e5a      	subs	r2, r3, #1
   12dce:	490b      	ldr	r1, [pc, #44]	; (12dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   12dd6:	4a0a      	ldr	r2, [pc, #40]	; (12e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   12dd8:	9b01      	ldr	r3, [sp, #4]
   12dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dde:	f003 0301 	and.w	r3, r3, #1
   12de2:	2b00      	cmp	r3, #0
   12de4:	d106      	bne.n	12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   12de6:	4a05      	ldr	r2, [pc, #20]	; (12dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12de8:	9b01      	ldr	r3, [sp, #4]
   12dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dee:	2b00      	cmp	r3, #0
   12df0:	d100      	bne.n	12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12df2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12df4:	bf00      	nop
   12df6:	b003      	add	sp, #12
   12df8:	f85d fb04 	ldr.w	pc, [sp], #4
   12dfc:	1fff9348 	.word	0x1fff9348
   12e00:	1fff9344 	.word	0x1fff9344

00012e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   12e04:	b500      	push	{lr}
   12e06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e08:	f7ee fd0c 	bl	1824 <Sys_GetCoreID>
   12e0c:	4603      	mov	r3, r0
   12e0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   12e10:	4a10      	ldr	r2, [pc, #64]	; (12e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12e12:	9b01      	ldr	r3, [sp, #4]
   12e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e18:	2b00      	cmp	r3, #0
   12e1a:	d10d      	bne.n	12e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e1c:	f7ed fd74 	bl	908 <Adc_schm_read_msr>
   12e20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e22:	9b00      	ldr	r3, [sp, #0]
   12e24:	f003 0301 	and.w	r3, r3, #1
   12e28:	2b00      	cmp	r3, #0
   12e2a:	d100      	bne.n	12e2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   12e2e:	490a      	ldr	r1, [pc, #40]	; (12e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   12e30:	9b01      	ldr	r3, [sp, #4]
   12e32:	9a00      	ldr	r2, [sp, #0]
   12e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   12e38:	4a06      	ldr	r2, [pc, #24]	; (12e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12e3a:	9b01      	ldr	r3, [sp, #4]
   12e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e40:	1c5a      	adds	r2, r3, #1
   12e42:	4904      	ldr	r1, [pc, #16]	; (12e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12e44:	9b01      	ldr	r3, [sp, #4]
   12e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e4a:	bf00      	nop
   12e4c:	b003      	add	sp, #12
   12e4e:	f85d fb04 	ldr.w	pc, [sp], #4
   12e52:	bf00      	nop
   12e54:	1fff9350 	.word	0x1fff9350
   12e58:	1fff934c 	.word	0x1fff934c

00012e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   12e5c:	b500      	push	{lr}
   12e5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e60:	f7ee fce0 	bl	1824 <Sys_GetCoreID>
   12e64:	4603      	mov	r3, r0
   12e66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   12e68:	4a0d      	ldr	r2, [pc, #52]	; (12ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12e6a:	9b01      	ldr	r3, [sp, #4]
   12e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e70:	1e5a      	subs	r2, r3, #1
   12e72:	490b      	ldr	r1, [pc, #44]	; (12ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12e74:	9b01      	ldr	r3, [sp, #4]
   12e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   12e7a:	4a0a      	ldr	r2, [pc, #40]	; (12ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   12e7c:	9b01      	ldr	r3, [sp, #4]
   12e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e82:	f003 0301 	and.w	r3, r3, #1
   12e86:	2b00      	cmp	r3, #0
   12e88:	d106      	bne.n	12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   12e8a:	4a05      	ldr	r2, [pc, #20]	; (12ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12e8c:	9b01      	ldr	r3, [sp, #4]
   12e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e92:	2b00      	cmp	r3, #0
   12e94:	d100      	bne.n	12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e98:	bf00      	nop
   12e9a:	b003      	add	sp, #12
   12e9c:	f85d fb04 	ldr.w	pc, [sp], #4
   12ea0:	1fff9350 	.word	0x1fff9350
   12ea4:	1fff934c 	.word	0x1fff934c

00012ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   12ea8:	b500      	push	{lr}
   12eaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12eac:	f7ee fcba 	bl	1824 <Sys_GetCoreID>
   12eb0:	4603      	mov	r3, r0
   12eb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   12eb4:	4a10      	ldr	r2, [pc, #64]	; (12ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12eb6:	9b01      	ldr	r3, [sp, #4]
   12eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ebc:	2b00      	cmp	r3, #0
   12ebe:	d10d      	bne.n	12edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ec0:	f7ed fd22 	bl	908 <Adc_schm_read_msr>
   12ec4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ec6:	9b00      	ldr	r3, [sp, #0]
   12ec8:	f003 0301 	and.w	r3, r3, #1
   12ecc:	2b00      	cmp	r3, #0
   12ece:	d100      	bne.n	12ed2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ed0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   12ed2:	490a      	ldr	r1, [pc, #40]	; (12efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   12ed4:	9b01      	ldr	r3, [sp, #4]
   12ed6:	9a00      	ldr	r2, [sp, #0]
   12ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   12edc:	4a06      	ldr	r2, [pc, #24]	; (12ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12ede:	9b01      	ldr	r3, [sp, #4]
   12ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee4:	1c5a      	adds	r2, r3, #1
   12ee6:	4904      	ldr	r1, [pc, #16]	; (12ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12ee8:	9b01      	ldr	r3, [sp, #4]
   12eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12eee:	bf00      	nop
   12ef0:	b003      	add	sp, #12
   12ef2:	f85d fb04 	ldr.w	pc, [sp], #4
   12ef6:	bf00      	nop
   12ef8:	1fff9358 	.word	0x1fff9358
   12efc:	1fff9354 	.word	0x1fff9354

00012f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   12f00:	b500      	push	{lr}
   12f02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f04:	f7ee fc8e 	bl	1824 <Sys_GetCoreID>
   12f08:	4603      	mov	r3, r0
   12f0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   12f0c:	4a0d      	ldr	r2, [pc, #52]	; (12f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12f0e:	9b01      	ldr	r3, [sp, #4]
   12f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f14:	1e5a      	subs	r2, r3, #1
   12f16:	490b      	ldr	r1, [pc, #44]	; (12f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12f18:	9b01      	ldr	r3, [sp, #4]
   12f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   12f1e:	4a0a      	ldr	r2, [pc, #40]	; (12f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   12f20:	9b01      	ldr	r3, [sp, #4]
   12f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f26:	f003 0301 	and.w	r3, r3, #1
   12f2a:	2b00      	cmp	r3, #0
   12f2c:	d106      	bne.n	12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   12f2e:	4a05      	ldr	r2, [pc, #20]	; (12f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12f30:	9b01      	ldr	r3, [sp, #4]
   12f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f36:	2b00      	cmp	r3, #0
   12f38:	d100      	bne.n	12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f3c:	bf00      	nop
   12f3e:	b003      	add	sp, #12
   12f40:	f85d fb04 	ldr.w	pc, [sp], #4
   12f44:	1fff9358 	.word	0x1fff9358
   12f48:	1fff9354 	.word	0x1fff9354

00012f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   12f4c:	b500      	push	{lr}
   12f4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f50:	f7ee fc68 	bl	1824 <Sys_GetCoreID>
   12f54:	4603      	mov	r3, r0
   12f56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   12f58:	4a10      	ldr	r2, [pc, #64]	; (12f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12f5a:	9b01      	ldr	r3, [sp, #4]
   12f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f60:	2b00      	cmp	r3, #0
   12f62:	d10d      	bne.n	12f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f64:	f7ed fcd0 	bl	908 <Adc_schm_read_msr>
   12f68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f6a:	9b00      	ldr	r3, [sp, #0]
   12f6c:	f003 0301 	and.w	r3, r3, #1
   12f70:	2b00      	cmp	r3, #0
   12f72:	d100      	bne.n	12f76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   12f76:	490a      	ldr	r1, [pc, #40]	; (12fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   12f78:	9b01      	ldr	r3, [sp, #4]
   12f7a:	9a00      	ldr	r2, [sp, #0]
   12f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   12f80:	4a06      	ldr	r2, [pc, #24]	; (12f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12f82:	9b01      	ldr	r3, [sp, #4]
   12f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f88:	1c5a      	adds	r2, r3, #1
   12f8a:	4904      	ldr	r1, [pc, #16]	; (12f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12f8c:	9b01      	ldr	r3, [sp, #4]
   12f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f92:	bf00      	nop
   12f94:	b003      	add	sp, #12
   12f96:	f85d fb04 	ldr.w	pc, [sp], #4
   12f9a:	bf00      	nop
   12f9c:	1fff9360 	.word	0x1fff9360
   12fa0:	1fff935c 	.word	0x1fff935c

00012fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   12fa4:	b500      	push	{lr}
   12fa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fa8:	f7ee fc3c 	bl	1824 <Sys_GetCoreID>
   12fac:	4603      	mov	r3, r0
   12fae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   12fb0:	4a0d      	ldr	r2, [pc, #52]	; (12fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   12fb2:	9b01      	ldr	r3, [sp, #4]
   12fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb8:	1e5a      	subs	r2, r3, #1
   12fba:	490b      	ldr	r1, [pc, #44]	; (12fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   12fbc:	9b01      	ldr	r3, [sp, #4]
   12fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   12fc2:	4a0a      	ldr	r2, [pc, #40]	; (12fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   12fc4:	9b01      	ldr	r3, [sp, #4]
   12fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fca:	f003 0301 	and.w	r3, r3, #1
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d106      	bne.n	12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   12fd2:	4a05      	ldr	r2, [pc, #20]	; (12fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   12fd4:	9b01      	ldr	r3, [sp, #4]
   12fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fda:	2b00      	cmp	r3, #0
   12fdc:	d100      	bne.n	12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fe0:	bf00      	nop
   12fe2:	b003      	add	sp, #12
   12fe4:	f85d fb04 	ldr.w	pc, [sp], #4
   12fe8:	1fff9360 	.word	0x1fff9360
   12fec:	1fff935c 	.word	0x1fff935c

00012ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   12ff0:	b500      	push	{lr}
   12ff2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ff4:	f7ee fc16 	bl	1824 <Sys_GetCoreID>
   12ff8:	4603      	mov	r3, r0
   12ffa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   12ffc:	4a10      	ldr	r2, [pc, #64]	; (13040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   12ffe:	9b01      	ldr	r3, [sp, #4]
   13000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13004:	2b00      	cmp	r3, #0
   13006:	d10d      	bne.n	13024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13008:	f7ed fc7e 	bl	908 <Adc_schm_read_msr>
   1300c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1300e:	9b00      	ldr	r3, [sp, #0]
   13010:	f003 0301 	and.w	r3, r3, #1
   13014:	2b00      	cmp	r3, #0
   13016:	d100      	bne.n	1301a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13018:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   1301a:	490a      	ldr	r1, [pc, #40]	; (13044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   1301c:	9b01      	ldr	r3, [sp, #4]
   1301e:	9a00      	ldr	r2, [sp, #0]
   13020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   13024:	4a06      	ldr	r2, [pc, #24]	; (13040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   13026:	9b01      	ldr	r3, [sp, #4]
   13028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1302c:	1c5a      	adds	r2, r3, #1
   1302e:	4904      	ldr	r1, [pc, #16]	; (13040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   13030:	9b01      	ldr	r3, [sp, #4]
   13032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13036:	bf00      	nop
   13038:	b003      	add	sp, #12
   1303a:	f85d fb04 	ldr.w	pc, [sp], #4
   1303e:	bf00      	nop
   13040:	1fff9368 	.word	0x1fff9368
   13044:	1fff9364 	.word	0x1fff9364

00013048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   13048:	b500      	push	{lr}
   1304a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1304c:	f7ee fbea 	bl	1824 <Sys_GetCoreID>
   13050:	4603      	mov	r3, r0
   13052:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   13054:	4a0d      	ldr	r2, [pc, #52]	; (1308c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13056:	9b01      	ldr	r3, [sp, #4]
   13058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1305c:	1e5a      	subs	r2, r3, #1
   1305e:	490b      	ldr	r1, [pc, #44]	; (1308c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13060:	9b01      	ldr	r3, [sp, #4]
   13062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   13066:	4a0a      	ldr	r2, [pc, #40]	; (13090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   13068:	9b01      	ldr	r3, [sp, #4]
   1306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1306e:	f003 0301 	and.w	r3, r3, #1
   13072:	2b00      	cmp	r3, #0
   13074:	d106      	bne.n	13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   13076:	4a05      	ldr	r2, [pc, #20]	; (1308c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13078:	9b01      	ldr	r3, [sp, #4]
   1307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1307e:	2b00      	cmp	r3, #0
   13080:	d100      	bne.n	13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13082:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13084:	bf00      	nop
   13086:	b003      	add	sp, #12
   13088:	f85d fb04 	ldr.w	pc, [sp], #4
   1308c:	1fff9368 	.word	0x1fff9368
   13090:	1fff9364 	.word	0x1fff9364

00013094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   13094:	b500      	push	{lr}
   13096:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13098:	f7ee fbc4 	bl	1824 <Sys_GetCoreID>
   1309c:	4603      	mov	r3, r0
   1309e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   130a0:	4a10      	ldr	r2, [pc, #64]	; (130e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   130a2:	9b01      	ldr	r3, [sp, #4]
   130a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130a8:	2b00      	cmp	r3, #0
   130aa:	d10d      	bne.n	130c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130ac:	f7ed fc2c 	bl	908 <Adc_schm_read_msr>
   130b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130b2:	9b00      	ldr	r3, [sp, #0]
   130b4:	f003 0301 	and.w	r3, r3, #1
   130b8:	2b00      	cmp	r3, #0
   130ba:	d100      	bne.n	130be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   130be:	490a      	ldr	r1, [pc, #40]	; (130e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   130c0:	9b01      	ldr	r3, [sp, #4]
   130c2:	9a00      	ldr	r2, [sp, #0]
   130c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   130c8:	4a06      	ldr	r2, [pc, #24]	; (130e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   130ca:	9b01      	ldr	r3, [sp, #4]
   130cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130d0:	1c5a      	adds	r2, r3, #1
   130d2:	4904      	ldr	r1, [pc, #16]	; (130e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   130d4:	9b01      	ldr	r3, [sp, #4]
   130d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130da:	bf00      	nop
   130dc:	b003      	add	sp, #12
   130de:	f85d fb04 	ldr.w	pc, [sp], #4
   130e2:	bf00      	nop
   130e4:	1fff9370 	.word	0x1fff9370
   130e8:	1fff936c 	.word	0x1fff936c

000130ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   130ec:	b500      	push	{lr}
   130ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130f0:	f7ee fb98 	bl	1824 <Sys_GetCoreID>
   130f4:	4603      	mov	r3, r0
   130f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   130f8:	4a0d      	ldr	r2, [pc, #52]	; (13130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   130fa:	9b01      	ldr	r3, [sp, #4]
   130fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13100:	1e5a      	subs	r2, r3, #1
   13102:	490b      	ldr	r1, [pc, #44]	; (13130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   1310a:	4a0a      	ldr	r2, [pc, #40]	; (13134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   1310c:	9b01      	ldr	r3, [sp, #4]
   1310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13112:	f003 0301 	and.w	r3, r3, #1
   13116:	2b00      	cmp	r3, #0
   13118:	d106      	bne.n	13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   1311a:	4a05      	ldr	r2, [pc, #20]	; (13130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   1311c:	9b01      	ldr	r3, [sp, #4]
   1311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13122:	2b00      	cmp	r3, #0
   13124:	d100      	bne.n	13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13126:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13128:	bf00      	nop
   1312a:	b003      	add	sp, #12
   1312c:	f85d fb04 	ldr.w	pc, [sp], #4
   13130:	1fff9370 	.word	0x1fff9370
   13134:	1fff936c 	.word	0x1fff936c

00013138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   13138:	b500      	push	{lr}
   1313a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1313c:	f7ee fb72 	bl	1824 <Sys_GetCoreID>
   13140:	4603      	mov	r3, r0
   13142:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   13144:	4a10      	ldr	r2, [pc, #64]	; (13188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   13146:	9b01      	ldr	r3, [sp, #4]
   13148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1314c:	2b00      	cmp	r3, #0
   1314e:	d10d      	bne.n	1316c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13150:	f7ed fbda 	bl	908 <Adc_schm_read_msr>
   13154:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13156:	9b00      	ldr	r3, [sp, #0]
   13158:	f003 0301 	and.w	r3, r3, #1
   1315c:	2b00      	cmp	r3, #0
   1315e:	d100      	bne.n	13162 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13160:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   13162:	490a      	ldr	r1, [pc, #40]	; (1318c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   13164:	9b01      	ldr	r3, [sp, #4]
   13166:	9a00      	ldr	r2, [sp, #0]
   13168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   1316c:	4a06      	ldr	r2, [pc, #24]	; (13188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   1316e:	9b01      	ldr	r3, [sp, #4]
   13170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13174:	1c5a      	adds	r2, r3, #1
   13176:	4904      	ldr	r1, [pc, #16]	; (13188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   13178:	9b01      	ldr	r3, [sp, #4]
   1317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1317e:	bf00      	nop
   13180:	b003      	add	sp, #12
   13182:	f85d fb04 	ldr.w	pc, [sp], #4
   13186:	bf00      	nop
   13188:	1fff9378 	.word	0x1fff9378
   1318c:	1fff9374 	.word	0x1fff9374

00013190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   13190:	b500      	push	{lr}
   13192:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13194:	f7ee fb46 	bl	1824 <Sys_GetCoreID>
   13198:	4603      	mov	r3, r0
   1319a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   1319c:	4a0d      	ldr	r2, [pc, #52]	; (131d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   1319e:	9b01      	ldr	r3, [sp, #4]
   131a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131a4:	1e5a      	subs	r2, r3, #1
   131a6:	490b      	ldr	r1, [pc, #44]	; (131d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   131ae:	4a0a      	ldr	r2, [pc, #40]	; (131d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   131b0:	9b01      	ldr	r3, [sp, #4]
   131b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b6:	f003 0301 	and.w	r3, r3, #1
   131ba:	2b00      	cmp	r3, #0
   131bc:	d106      	bne.n	131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   131be:	4a05      	ldr	r2, [pc, #20]	; (131d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   131c0:	9b01      	ldr	r3, [sp, #4]
   131c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131c6:	2b00      	cmp	r3, #0
   131c8:	d100      	bne.n	131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131cc:	bf00      	nop
   131ce:	b003      	add	sp, #12
   131d0:	f85d fb04 	ldr.w	pc, [sp], #4
   131d4:	1fff9378 	.word	0x1fff9378
   131d8:	1fff9374 	.word	0x1fff9374

000131dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   131dc:	b500      	push	{lr}
   131de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131e0:	f7ee fb20 	bl	1824 <Sys_GetCoreID>
   131e4:	4603      	mov	r3, r0
   131e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   131e8:	4a10      	ldr	r2, [pc, #64]	; (1322c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   131ea:	9b01      	ldr	r3, [sp, #4]
   131ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131f0:	2b00      	cmp	r3, #0
   131f2:	d10d      	bne.n	13210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131f4:	f7ed fb88 	bl	908 <Adc_schm_read_msr>
   131f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131fa:	9b00      	ldr	r3, [sp, #0]
   131fc:	f003 0301 	and.w	r3, r3, #1
   13200:	2b00      	cmp	r3, #0
   13202:	d100      	bne.n	13206 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13204:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   13206:	490a      	ldr	r1, [pc, #40]	; (13230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   13208:	9b01      	ldr	r3, [sp, #4]
   1320a:	9a00      	ldr	r2, [sp, #0]
   1320c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   13210:	4a06      	ldr	r2, [pc, #24]	; (1322c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   13212:	9b01      	ldr	r3, [sp, #4]
   13214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13218:	1c5a      	adds	r2, r3, #1
   1321a:	4904      	ldr	r1, [pc, #16]	; (1322c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   1321c:	9b01      	ldr	r3, [sp, #4]
   1321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13222:	bf00      	nop
   13224:	b003      	add	sp, #12
   13226:	f85d fb04 	ldr.w	pc, [sp], #4
   1322a:	bf00      	nop
   1322c:	1fff9380 	.word	0x1fff9380
   13230:	1fff937c 	.word	0x1fff937c

00013234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   13234:	b500      	push	{lr}
   13236:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13238:	f7ee faf4 	bl	1824 <Sys_GetCoreID>
   1323c:	4603      	mov	r3, r0
   1323e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   13240:	4a0d      	ldr	r2, [pc, #52]	; (13278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13242:	9b01      	ldr	r3, [sp, #4]
   13244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13248:	1e5a      	subs	r2, r3, #1
   1324a:	490b      	ldr	r1, [pc, #44]	; (13278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   1324c:	9b01      	ldr	r3, [sp, #4]
   1324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   13252:	4a0a      	ldr	r2, [pc, #40]	; (1327c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   13254:	9b01      	ldr	r3, [sp, #4]
   13256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1325a:	f003 0301 	and.w	r3, r3, #1
   1325e:	2b00      	cmp	r3, #0
   13260:	d106      	bne.n	13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   13262:	4a05      	ldr	r2, [pc, #20]	; (13278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13264:	9b01      	ldr	r3, [sp, #4]
   13266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1326a:	2b00      	cmp	r3, #0
   1326c:	d100      	bne.n	13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1326e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13270:	bf00      	nop
   13272:	b003      	add	sp, #12
   13274:	f85d fb04 	ldr.w	pc, [sp], #4
   13278:	1fff9380 	.word	0x1fff9380
   1327c:	1fff937c 	.word	0x1fff937c

00013280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   13280:	b500      	push	{lr}
   13282:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13284:	f7ee face 	bl	1824 <Sys_GetCoreID>
   13288:	4603      	mov	r3, r0
   1328a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   1328c:	4a10      	ldr	r2, [pc, #64]	; (132d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   1328e:	9b01      	ldr	r3, [sp, #4]
   13290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13294:	2b00      	cmp	r3, #0
   13296:	d10d      	bne.n	132b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13298:	f7ed fb36 	bl	908 <Adc_schm_read_msr>
   1329c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1329e:	9b00      	ldr	r3, [sp, #0]
   132a0:	f003 0301 	and.w	r3, r3, #1
   132a4:	2b00      	cmp	r3, #0
   132a6:	d100      	bne.n	132aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   132aa:	490a      	ldr	r1, [pc, #40]	; (132d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   132ac:	9b01      	ldr	r3, [sp, #4]
   132ae:	9a00      	ldr	r2, [sp, #0]
   132b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   132b4:	4a06      	ldr	r2, [pc, #24]	; (132d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   132b6:	9b01      	ldr	r3, [sp, #4]
   132b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132bc:	1c5a      	adds	r2, r3, #1
   132be:	4904      	ldr	r1, [pc, #16]	; (132d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   132c0:	9b01      	ldr	r3, [sp, #4]
   132c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132c6:	bf00      	nop
   132c8:	b003      	add	sp, #12
   132ca:	f85d fb04 	ldr.w	pc, [sp], #4
   132ce:	bf00      	nop
   132d0:	1fff9388 	.word	0x1fff9388
   132d4:	1fff9384 	.word	0x1fff9384

000132d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   132d8:	b500      	push	{lr}
   132da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132dc:	f7ee faa2 	bl	1824 <Sys_GetCoreID>
   132e0:	4603      	mov	r3, r0
   132e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   132e4:	4a0d      	ldr	r2, [pc, #52]	; (1331c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   132e6:	9b01      	ldr	r3, [sp, #4]
   132e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ec:	1e5a      	subs	r2, r3, #1
   132ee:	490b      	ldr	r1, [pc, #44]	; (1331c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   132f0:	9b01      	ldr	r3, [sp, #4]
   132f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   132f6:	4a0a      	ldr	r2, [pc, #40]	; (13320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   132f8:	9b01      	ldr	r3, [sp, #4]
   132fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132fe:	f003 0301 	and.w	r3, r3, #1
   13302:	2b00      	cmp	r3, #0
   13304:	d106      	bne.n	13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   13306:	4a05      	ldr	r2, [pc, #20]	; (1331c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   13308:	9b01      	ldr	r3, [sp, #4]
   1330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1330e:	2b00      	cmp	r3, #0
   13310:	d100      	bne.n	13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13312:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13314:	bf00      	nop
   13316:	b003      	add	sp, #12
   13318:	f85d fb04 	ldr.w	pc, [sp], #4
   1331c:	1fff9388 	.word	0x1fff9388
   13320:	1fff9384 	.word	0x1fff9384

00013324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   13324:	b500      	push	{lr}
   13326:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13328:	f7ee fa7c 	bl	1824 <Sys_GetCoreID>
   1332c:	4603      	mov	r3, r0
   1332e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   13330:	4a10      	ldr	r2, [pc, #64]	; (13374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13332:	9b01      	ldr	r3, [sp, #4]
   13334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13338:	2b00      	cmp	r3, #0
   1333a:	d10d      	bne.n	13358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1333c:	f7ed fae4 	bl	908 <Adc_schm_read_msr>
   13340:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13342:	9b00      	ldr	r3, [sp, #0]
   13344:	f003 0301 	and.w	r3, r3, #1
   13348:	2b00      	cmp	r3, #0
   1334a:	d100      	bne.n	1334e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1334c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   1334e:	490a      	ldr	r1, [pc, #40]	; (13378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   13350:	9b01      	ldr	r3, [sp, #4]
   13352:	9a00      	ldr	r2, [sp, #0]
   13354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   13358:	4a06      	ldr	r2, [pc, #24]	; (13374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   1335a:	9b01      	ldr	r3, [sp, #4]
   1335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13360:	1c5a      	adds	r2, r3, #1
   13362:	4904      	ldr	r1, [pc, #16]	; (13374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13364:	9b01      	ldr	r3, [sp, #4]
   13366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1336a:	bf00      	nop
   1336c:	b003      	add	sp, #12
   1336e:	f85d fb04 	ldr.w	pc, [sp], #4
   13372:	bf00      	nop
   13374:	1fff9390 	.word	0x1fff9390
   13378:	1fff938c 	.word	0x1fff938c

0001337c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   1337c:	b500      	push	{lr}
   1337e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13380:	f7ee fa50 	bl	1824 <Sys_GetCoreID>
   13384:	4603      	mov	r3, r0
   13386:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   13388:	4a0d      	ldr	r2, [pc, #52]	; (133c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   1338a:	9b01      	ldr	r3, [sp, #4]
   1338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13390:	1e5a      	subs	r2, r3, #1
   13392:	490b      	ldr	r1, [pc, #44]	; (133c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   1339a:	4a0a      	ldr	r2, [pc, #40]	; (133c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   1339c:	9b01      	ldr	r3, [sp, #4]
   1339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133a2:	f003 0301 	and.w	r3, r3, #1
   133a6:	2b00      	cmp	r3, #0
   133a8:	d106      	bne.n	133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   133aa:	4a05      	ldr	r2, [pc, #20]	; (133c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   133ac:	9b01      	ldr	r3, [sp, #4]
   133ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133b2:	2b00      	cmp	r3, #0
   133b4:	d100      	bne.n	133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133b8:	bf00      	nop
   133ba:	b003      	add	sp, #12
   133bc:	f85d fb04 	ldr.w	pc, [sp], #4
   133c0:	1fff9390 	.word	0x1fff9390
   133c4:	1fff938c 	.word	0x1fff938c

000133c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   133c8:	b500      	push	{lr}
   133ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133cc:	f7ee fa2a 	bl	1824 <Sys_GetCoreID>
   133d0:	4603      	mov	r3, r0
   133d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   133d4:	4a10      	ldr	r2, [pc, #64]	; (13418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   133d6:	9b01      	ldr	r3, [sp, #4]
   133d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133dc:	2b00      	cmp	r3, #0
   133de:	d10d      	bne.n	133fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133e0:	f7ed fa92 	bl	908 <Adc_schm_read_msr>
   133e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133e6:	9b00      	ldr	r3, [sp, #0]
   133e8:	f003 0301 	and.w	r3, r3, #1
   133ec:	2b00      	cmp	r3, #0
   133ee:	d100      	bne.n	133f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   133f2:	490a      	ldr	r1, [pc, #40]	; (1341c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   133f4:	9b01      	ldr	r3, [sp, #4]
   133f6:	9a00      	ldr	r2, [sp, #0]
   133f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   133fc:	4a06      	ldr	r2, [pc, #24]	; (13418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   133fe:	9b01      	ldr	r3, [sp, #4]
   13400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13404:	1c5a      	adds	r2, r3, #1
   13406:	4904      	ldr	r1, [pc, #16]	; (13418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   13408:	9b01      	ldr	r3, [sp, #4]
   1340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1340e:	bf00      	nop
   13410:	b003      	add	sp, #12
   13412:	f85d fb04 	ldr.w	pc, [sp], #4
   13416:	bf00      	nop
   13418:	1fff9398 	.word	0x1fff9398
   1341c:	1fff9394 	.word	0x1fff9394

00013420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   13420:	b500      	push	{lr}
   13422:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13424:	f7ee f9fe 	bl	1824 <Sys_GetCoreID>
   13428:	4603      	mov	r3, r0
   1342a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   1342c:	4a0d      	ldr	r2, [pc, #52]	; (13464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   1342e:	9b01      	ldr	r3, [sp, #4]
   13430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13434:	1e5a      	subs	r2, r3, #1
   13436:	490b      	ldr	r1, [pc, #44]	; (13464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   1343e:	4a0a      	ldr	r2, [pc, #40]	; (13468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   13440:	9b01      	ldr	r3, [sp, #4]
   13442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13446:	f003 0301 	and.w	r3, r3, #1
   1344a:	2b00      	cmp	r3, #0
   1344c:	d106      	bne.n	1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   1344e:	4a05      	ldr	r2, [pc, #20]	; (13464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   13450:	9b01      	ldr	r3, [sp, #4]
   13452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13456:	2b00      	cmp	r3, #0
   13458:	d100      	bne.n	1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1345a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1345c:	bf00      	nop
   1345e:	b003      	add	sp, #12
   13460:	f85d fb04 	ldr.w	pc, [sp], #4
   13464:	1fff9398 	.word	0x1fff9398
   13468:	1fff9394 	.word	0x1fff9394

0001346c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   1346c:	b500      	push	{lr}
   1346e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13470:	f7ee f9d8 	bl	1824 <Sys_GetCoreID>
   13474:	4603      	mov	r3, r0
   13476:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   13478:	4a10      	ldr	r2, [pc, #64]	; (134bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   1347a:	9b01      	ldr	r3, [sp, #4]
   1347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13480:	2b00      	cmp	r3, #0
   13482:	d10d      	bne.n	134a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13484:	f7ed fa40 	bl	908 <Adc_schm_read_msr>
   13488:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1348a:	9b00      	ldr	r3, [sp, #0]
   1348c:	f003 0301 	and.w	r3, r3, #1
   13490:	2b00      	cmp	r3, #0
   13492:	d100      	bne.n	13496 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13494:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   13496:	490a      	ldr	r1, [pc, #40]	; (134c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   13498:	9b01      	ldr	r3, [sp, #4]
   1349a:	9a00      	ldr	r2, [sp, #0]
   1349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   134a0:	4a06      	ldr	r2, [pc, #24]	; (134bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   134a2:	9b01      	ldr	r3, [sp, #4]
   134a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a8:	1c5a      	adds	r2, r3, #1
   134aa:	4904      	ldr	r1, [pc, #16]	; (134bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   134ac:	9b01      	ldr	r3, [sp, #4]
   134ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134b2:	bf00      	nop
   134b4:	b003      	add	sp, #12
   134b6:	f85d fb04 	ldr.w	pc, [sp], #4
   134ba:	bf00      	nop
   134bc:	1fff93a0 	.word	0x1fff93a0
   134c0:	1fff939c 	.word	0x1fff939c

000134c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   134c4:	b500      	push	{lr}
   134c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134c8:	f7ee f9ac 	bl	1824 <Sys_GetCoreID>
   134cc:	4603      	mov	r3, r0
   134ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   134d0:	4a0d      	ldr	r2, [pc, #52]	; (13508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   134d2:	9b01      	ldr	r3, [sp, #4]
   134d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d8:	1e5a      	subs	r2, r3, #1
   134da:	490b      	ldr	r1, [pc, #44]	; (13508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   134dc:	9b01      	ldr	r3, [sp, #4]
   134de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   134e2:	4a0a      	ldr	r2, [pc, #40]	; (1350c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   134e4:	9b01      	ldr	r3, [sp, #4]
   134e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134ea:	f003 0301 	and.w	r3, r3, #1
   134ee:	2b00      	cmp	r3, #0
   134f0:	d106      	bne.n	13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   134f2:	4a05      	ldr	r2, [pc, #20]	; (13508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   134f4:	9b01      	ldr	r3, [sp, #4]
   134f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134fa:	2b00      	cmp	r3, #0
   134fc:	d100      	bne.n	13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13500:	bf00      	nop
   13502:	b003      	add	sp, #12
   13504:	f85d fb04 	ldr.w	pc, [sp], #4
   13508:	1fff93a0 	.word	0x1fff93a0
   1350c:	1fff939c 	.word	0x1fff939c

00013510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   13510:	b500      	push	{lr}
   13512:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13514:	f7ee f986 	bl	1824 <Sys_GetCoreID>
   13518:	4603      	mov	r3, r0
   1351a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   1351c:	4a10      	ldr	r2, [pc, #64]	; (13560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   1351e:	9b01      	ldr	r3, [sp, #4]
   13520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13524:	2b00      	cmp	r3, #0
   13526:	d10d      	bne.n	13544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13528:	f7ed f9ee 	bl	908 <Adc_schm_read_msr>
   1352c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1352e:	9b00      	ldr	r3, [sp, #0]
   13530:	f003 0301 	and.w	r3, r3, #1
   13534:	2b00      	cmp	r3, #0
   13536:	d100      	bne.n	1353a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13538:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   1353a:	490a      	ldr	r1, [pc, #40]	; (13564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   1353c:	9b01      	ldr	r3, [sp, #4]
   1353e:	9a00      	ldr	r2, [sp, #0]
   13540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   13544:	4a06      	ldr	r2, [pc, #24]	; (13560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   13546:	9b01      	ldr	r3, [sp, #4]
   13548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1354c:	1c5a      	adds	r2, r3, #1
   1354e:	4904      	ldr	r1, [pc, #16]	; (13560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   13550:	9b01      	ldr	r3, [sp, #4]
   13552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13556:	bf00      	nop
   13558:	b003      	add	sp, #12
   1355a:	f85d fb04 	ldr.w	pc, [sp], #4
   1355e:	bf00      	nop
   13560:	1fff93a8 	.word	0x1fff93a8
   13564:	1fff93a4 	.word	0x1fff93a4

00013568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   13568:	b500      	push	{lr}
   1356a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1356c:	f7ee f95a 	bl	1824 <Sys_GetCoreID>
   13570:	4603      	mov	r3, r0
   13572:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   13574:	4a0d      	ldr	r2, [pc, #52]	; (135ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13576:	9b01      	ldr	r3, [sp, #4]
   13578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1357c:	1e5a      	subs	r2, r3, #1
   1357e:	490b      	ldr	r1, [pc, #44]	; (135ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   13586:	4a0a      	ldr	r2, [pc, #40]	; (135b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   13588:	9b01      	ldr	r3, [sp, #4]
   1358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1358e:	f003 0301 	and.w	r3, r3, #1
   13592:	2b00      	cmp	r3, #0
   13594:	d106      	bne.n	135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   13596:	4a05      	ldr	r2, [pc, #20]	; (135ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13598:	9b01      	ldr	r3, [sp, #4]
   1359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1359e:	2b00      	cmp	r3, #0
   135a0:	d100      	bne.n	135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135a4:	bf00      	nop
   135a6:	b003      	add	sp, #12
   135a8:	f85d fb04 	ldr.w	pc, [sp], #4
   135ac:	1fff93a8 	.word	0x1fff93a8
   135b0:	1fff93a4 	.word	0x1fff93a4

000135b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   135b4:	b500      	push	{lr}
   135b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135b8:	f7ee f934 	bl	1824 <Sys_GetCoreID>
   135bc:	4603      	mov	r3, r0
   135be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   135c0:	4a10      	ldr	r2, [pc, #64]	; (13604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   135c2:	9b01      	ldr	r3, [sp, #4]
   135c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135c8:	2b00      	cmp	r3, #0
   135ca:	d10d      	bne.n	135e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135cc:	f7ed f99c 	bl	908 <Adc_schm_read_msr>
   135d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135d2:	9b00      	ldr	r3, [sp, #0]
   135d4:	f003 0301 	and.w	r3, r3, #1
   135d8:	2b00      	cmp	r3, #0
   135da:	d100      	bne.n	135de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   135de:	490a      	ldr	r1, [pc, #40]	; (13608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   135e0:	9b01      	ldr	r3, [sp, #4]
   135e2:	9a00      	ldr	r2, [sp, #0]
   135e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   135e8:	4a06      	ldr	r2, [pc, #24]	; (13604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   135ea:	9b01      	ldr	r3, [sp, #4]
   135ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135f0:	1c5a      	adds	r2, r3, #1
   135f2:	4904      	ldr	r1, [pc, #16]	; (13604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   135f4:	9b01      	ldr	r3, [sp, #4]
   135f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135fa:	bf00      	nop
   135fc:	b003      	add	sp, #12
   135fe:	f85d fb04 	ldr.w	pc, [sp], #4
   13602:	bf00      	nop
   13604:	1fff93b0 	.word	0x1fff93b0
   13608:	1fff93ac 	.word	0x1fff93ac

0001360c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   1360c:	b500      	push	{lr}
   1360e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13610:	f7ee f908 	bl	1824 <Sys_GetCoreID>
   13614:	4603      	mov	r3, r0
   13616:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   13618:	4a0d      	ldr	r2, [pc, #52]	; (13650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   1361a:	9b01      	ldr	r3, [sp, #4]
   1361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13620:	1e5a      	subs	r2, r3, #1
   13622:	490b      	ldr	r1, [pc, #44]	; (13650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   13624:	9b01      	ldr	r3, [sp, #4]
   13626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   1362a:	4a0a      	ldr	r2, [pc, #40]	; (13654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   1362c:	9b01      	ldr	r3, [sp, #4]
   1362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13632:	f003 0301 	and.w	r3, r3, #1
   13636:	2b00      	cmp	r3, #0
   13638:	d106      	bne.n	13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   1363a:	4a05      	ldr	r2, [pc, #20]	; (13650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   1363c:	9b01      	ldr	r3, [sp, #4]
   1363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13642:	2b00      	cmp	r3, #0
   13644:	d100      	bne.n	13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13646:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13648:	bf00      	nop
   1364a:	b003      	add	sp, #12
   1364c:	f85d fb04 	ldr.w	pc, [sp], #4
   13650:	1fff93b0 	.word	0x1fff93b0
   13654:	1fff93ac 	.word	0x1fff93ac

00013658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   13658:	b500      	push	{lr}
   1365a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1365c:	f7ee f8e2 	bl	1824 <Sys_GetCoreID>
   13660:	4603      	mov	r3, r0
   13662:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   13664:	4a10      	ldr	r2, [pc, #64]	; (136a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13666:	9b01      	ldr	r3, [sp, #4]
   13668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1366c:	2b00      	cmp	r3, #0
   1366e:	d10d      	bne.n	1368c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13670:	f7ed f94a 	bl	908 <Adc_schm_read_msr>
   13674:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13676:	9b00      	ldr	r3, [sp, #0]
   13678:	f003 0301 	and.w	r3, r3, #1
   1367c:	2b00      	cmp	r3, #0
   1367e:	d100      	bne.n	13682 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13680:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   13682:	490a      	ldr	r1, [pc, #40]	; (136ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   13684:	9b01      	ldr	r3, [sp, #4]
   13686:	9a00      	ldr	r2, [sp, #0]
   13688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   1368c:	4a06      	ldr	r2, [pc, #24]	; (136a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   1368e:	9b01      	ldr	r3, [sp, #4]
   13690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13694:	1c5a      	adds	r2, r3, #1
   13696:	4904      	ldr	r1, [pc, #16]	; (136a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13698:	9b01      	ldr	r3, [sp, #4]
   1369a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1369e:	bf00      	nop
   136a0:	b003      	add	sp, #12
   136a2:	f85d fb04 	ldr.w	pc, [sp], #4
   136a6:	bf00      	nop
   136a8:	1fff93b8 	.word	0x1fff93b8
   136ac:	1fff93b4 	.word	0x1fff93b4

000136b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   136b0:	b500      	push	{lr}
   136b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136b4:	f7ee f8b6 	bl	1824 <Sys_GetCoreID>
   136b8:	4603      	mov	r3, r0
   136ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   136bc:	4a0d      	ldr	r2, [pc, #52]	; (136f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   136be:	9b01      	ldr	r3, [sp, #4]
   136c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136c4:	1e5a      	subs	r2, r3, #1
   136c6:	490b      	ldr	r1, [pc, #44]	; (136f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   136ce:	4a0a      	ldr	r2, [pc, #40]	; (136f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   136d0:	9b01      	ldr	r3, [sp, #4]
   136d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136d6:	f003 0301 	and.w	r3, r3, #1
   136da:	2b00      	cmp	r3, #0
   136dc:	d106      	bne.n	136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   136de:	4a05      	ldr	r2, [pc, #20]	; (136f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   136e0:	9b01      	ldr	r3, [sp, #4]
   136e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136e6:	2b00      	cmp	r3, #0
   136e8:	d100      	bne.n	136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136ec:	bf00      	nop
   136ee:	b003      	add	sp, #12
   136f0:	f85d fb04 	ldr.w	pc, [sp], #4
   136f4:	1fff93b8 	.word	0x1fff93b8
   136f8:	1fff93b4 	.word	0x1fff93b4

000136fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   136fc:	b500      	push	{lr}
   136fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13700:	f7ee f890 	bl	1824 <Sys_GetCoreID>
   13704:	4603      	mov	r3, r0
   13706:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   13708:	4a10      	ldr	r2, [pc, #64]	; (1374c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1370a:	9b01      	ldr	r3, [sp, #4]
   1370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13710:	2b00      	cmp	r3, #0
   13712:	d10d      	bne.n	13730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13714:	f7ed f8f8 	bl	908 <Adc_schm_read_msr>
   13718:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1371a:	9b00      	ldr	r3, [sp, #0]
   1371c:	f003 0301 	and.w	r3, r3, #1
   13720:	2b00      	cmp	r3, #0
   13722:	d100      	bne.n	13726 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13724:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   13726:	490a      	ldr	r1, [pc, #40]	; (13750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   13728:	9b01      	ldr	r3, [sp, #4]
   1372a:	9a00      	ldr	r2, [sp, #0]
   1372c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   13730:	4a06      	ldr	r2, [pc, #24]	; (1374c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   13732:	9b01      	ldr	r3, [sp, #4]
   13734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13738:	1c5a      	adds	r2, r3, #1
   1373a:	4904      	ldr	r1, [pc, #16]	; (1374c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1373c:	9b01      	ldr	r3, [sp, #4]
   1373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13742:	bf00      	nop
   13744:	b003      	add	sp, #12
   13746:	f85d fb04 	ldr.w	pc, [sp], #4
   1374a:	bf00      	nop
   1374c:	1fff93c0 	.word	0x1fff93c0
   13750:	1fff93bc 	.word	0x1fff93bc

00013754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   13754:	b500      	push	{lr}
   13756:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13758:	f7ee f864 	bl	1824 <Sys_GetCoreID>
   1375c:	4603      	mov	r3, r0
   1375e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   13760:	4a0d      	ldr	r2, [pc, #52]	; (13798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13762:	9b01      	ldr	r3, [sp, #4]
   13764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13768:	1e5a      	subs	r2, r3, #1
   1376a:	490b      	ldr	r1, [pc, #44]	; (13798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   13772:	4a0a      	ldr	r2, [pc, #40]	; (1379c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   13774:	9b01      	ldr	r3, [sp, #4]
   13776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1377a:	f003 0301 	and.w	r3, r3, #1
   1377e:	2b00      	cmp	r3, #0
   13780:	d106      	bne.n	13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   13782:	4a05      	ldr	r2, [pc, #20]	; (13798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13784:	9b01      	ldr	r3, [sp, #4]
   13786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1378a:	2b00      	cmp	r3, #0
   1378c:	d100      	bne.n	13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1378e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13790:	bf00      	nop
   13792:	b003      	add	sp, #12
   13794:	f85d fb04 	ldr.w	pc, [sp], #4
   13798:	1fff93c0 	.word	0x1fff93c0
   1379c:	1fff93bc 	.word	0x1fff93bc

000137a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   137a0:	b500      	push	{lr}
   137a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137a4:	f7ee f83e 	bl	1824 <Sys_GetCoreID>
   137a8:	4603      	mov	r3, r0
   137aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   137ac:	4a10      	ldr	r2, [pc, #64]	; (137f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   137ae:	9b01      	ldr	r3, [sp, #4]
   137b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137b4:	2b00      	cmp	r3, #0
   137b6:	d10d      	bne.n	137d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137b8:	f7ed f8a6 	bl	908 <Adc_schm_read_msr>
   137bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137be:	9b00      	ldr	r3, [sp, #0]
   137c0:	f003 0301 	and.w	r3, r3, #1
   137c4:	2b00      	cmp	r3, #0
   137c6:	d100      	bne.n	137ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   137ca:	490a      	ldr	r1, [pc, #40]	; (137f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   137cc:	9b01      	ldr	r3, [sp, #4]
   137ce:	9a00      	ldr	r2, [sp, #0]
   137d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   137d4:	4a06      	ldr	r2, [pc, #24]	; (137f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   137d6:	9b01      	ldr	r3, [sp, #4]
   137d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137dc:	1c5a      	adds	r2, r3, #1
   137de:	4904      	ldr	r1, [pc, #16]	; (137f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   137e0:	9b01      	ldr	r3, [sp, #4]
   137e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137e6:	bf00      	nop
   137e8:	b003      	add	sp, #12
   137ea:	f85d fb04 	ldr.w	pc, [sp], #4
   137ee:	bf00      	nop
   137f0:	1fff93c8 	.word	0x1fff93c8
   137f4:	1fff93c4 	.word	0x1fff93c4

000137f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   137f8:	b500      	push	{lr}
   137fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137fc:	f7ee f812 	bl	1824 <Sys_GetCoreID>
   13800:	4603      	mov	r3, r0
   13802:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   13804:	4a0d      	ldr	r2, [pc, #52]	; (1383c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   13806:	9b01      	ldr	r3, [sp, #4]
   13808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1380c:	1e5a      	subs	r2, r3, #1
   1380e:	490b      	ldr	r1, [pc, #44]	; (1383c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   13816:	4a0a      	ldr	r2, [pc, #40]	; (13840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   13818:	9b01      	ldr	r3, [sp, #4]
   1381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1381e:	f003 0301 	and.w	r3, r3, #1
   13822:	2b00      	cmp	r3, #0
   13824:	d106      	bne.n	13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   13826:	4a05      	ldr	r2, [pc, #20]	; (1383c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   13828:	9b01      	ldr	r3, [sp, #4]
   1382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1382e:	2b00      	cmp	r3, #0
   13830:	d100      	bne.n	13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13832:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13834:	bf00      	nop
   13836:	b003      	add	sp, #12
   13838:	f85d fb04 	ldr.w	pc, [sp], #4
   1383c:	1fff93c8 	.word	0x1fff93c8
   13840:	1fff93c4 	.word	0x1fff93c4

00013844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   13844:	b500      	push	{lr}
   13846:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13848:	f7ed ffec 	bl	1824 <Sys_GetCoreID>
   1384c:	4603      	mov	r3, r0
   1384e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   13850:	4a10      	ldr	r2, [pc, #64]	; (13894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13852:	9b01      	ldr	r3, [sp, #4]
   13854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13858:	2b00      	cmp	r3, #0
   1385a:	d10d      	bne.n	13878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1385c:	f7ed f854 	bl	908 <Adc_schm_read_msr>
   13860:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13862:	9b00      	ldr	r3, [sp, #0]
   13864:	f003 0301 	and.w	r3, r3, #1
   13868:	2b00      	cmp	r3, #0
   1386a:	d100      	bne.n	1386e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1386c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   1386e:	490a      	ldr	r1, [pc, #40]	; (13898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   13870:	9b01      	ldr	r3, [sp, #4]
   13872:	9a00      	ldr	r2, [sp, #0]
   13874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   13878:	4a06      	ldr	r2, [pc, #24]	; (13894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1387a:	9b01      	ldr	r3, [sp, #4]
   1387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13880:	1c5a      	adds	r2, r3, #1
   13882:	4904      	ldr	r1, [pc, #16]	; (13894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13884:	9b01      	ldr	r3, [sp, #4]
   13886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1388a:	bf00      	nop
   1388c:	b003      	add	sp, #12
   1388e:	f85d fb04 	ldr.w	pc, [sp], #4
   13892:	bf00      	nop
   13894:	1fff93d0 	.word	0x1fff93d0
   13898:	1fff93cc 	.word	0x1fff93cc

0001389c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   1389c:	b500      	push	{lr}
   1389e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138a0:	f7ed ffc0 	bl	1824 <Sys_GetCoreID>
   138a4:	4603      	mov	r3, r0
   138a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   138a8:	4a0d      	ldr	r2, [pc, #52]	; (138e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   138aa:	9b01      	ldr	r3, [sp, #4]
   138ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138b0:	1e5a      	subs	r2, r3, #1
   138b2:	490b      	ldr	r1, [pc, #44]	; (138e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   138ba:	4a0a      	ldr	r2, [pc, #40]	; (138e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   138bc:	9b01      	ldr	r3, [sp, #4]
   138be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138c2:	f003 0301 	and.w	r3, r3, #1
   138c6:	2b00      	cmp	r3, #0
   138c8:	d106      	bne.n	138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   138ca:	4a05      	ldr	r2, [pc, #20]	; (138e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   138cc:	9b01      	ldr	r3, [sp, #4]
   138ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138d2:	2b00      	cmp	r3, #0
   138d4:	d100      	bne.n	138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138d8:	bf00      	nop
   138da:	b003      	add	sp, #12
   138dc:	f85d fb04 	ldr.w	pc, [sp], #4
   138e0:	1fff93d0 	.word	0x1fff93d0
   138e4:	1fff93cc 	.word	0x1fff93cc

000138e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   138e8:	b500      	push	{lr}
   138ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138ec:	f7ed ff9a 	bl	1824 <Sys_GetCoreID>
   138f0:	4603      	mov	r3, r0
   138f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   138f4:	4a10      	ldr	r2, [pc, #64]	; (13938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   138f6:	9b01      	ldr	r3, [sp, #4]
   138f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138fc:	2b00      	cmp	r3, #0
   138fe:	d10d      	bne.n	1391c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13900:	f7ed f802 	bl	908 <Adc_schm_read_msr>
   13904:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13906:	9b00      	ldr	r3, [sp, #0]
   13908:	f003 0301 	and.w	r3, r3, #1
   1390c:	2b00      	cmp	r3, #0
   1390e:	d100      	bne.n	13912 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13910:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   13912:	490a      	ldr	r1, [pc, #40]	; (1393c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   13914:	9b01      	ldr	r3, [sp, #4]
   13916:	9a00      	ldr	r2, [sp, #0]
   13918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   1391c:	4a06      	ldr	r2, [pc, #24]	; (13938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1391e:	9b01      	ldr	r3, [sp, #4]
   13920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13924:	1c5a      	adds	r2, r3, #1
   13926:	4904      	ldr	r1, [pc, #16]	; (13938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   13928:	9b01      	ldr	r3, [sp, #4]
   1392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1392e:	bf00      	nop
   13930:	b003      	add	sp, #12
   13932:	f85d fb04 	ldr.w	pc, [sp], #4
   13936:	bf00      	nop
   13938:	1fff93d8 	.word	0x1fff93d8
   1393c:	1fff93d4 	.word	0x1fff93d4

00013940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   13940:	b500      	push	{lr}
   13942:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13944:	f7ed ff6e 	bl	1824 <Sys_GetCoreID>
   13948:	4603      	mov	r3, r0
   1394a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   1394c:	4a0d      	ldr	r2, [pc, #52]	; (13984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1394e:	9b01      	ldr	r3, [sp, #4]
   13950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13954:	1e5a      	subs	r2, r3, #1
   13956:	490b      	ldr	r1, [pc, #44]	; (13984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   1395e:	4a0a      	ldr	r2, [pc, #40]	; (13988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   13960:	9b01      	ldr	r3, [sp, #4]
   13962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13966:	f003 0301 	and.w	r3, r3, #1
   1396a:	2b00      	cmp	r3, #0
   1396c:	d106      	bne.n	1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   1396e:	4a05      	ldr	r2, [pc, #20]	; (13984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13970:	9b01      	ldr	r3, [sp, #4]
   13972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13976:	2b00      	cmp	r3, #0
   13978:	d100      	bne.n	1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1397a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1397c:	bf00      	nop
   1397e:	b003      	add	sp, #12
   13980:	f85d fb04 	ldr.w	pc, [sp], #4
   13984:	1fff93d8 	.word	0x1fff93d8
   13988:	1fff93d4 	.word	0x1fff93d4

0001398c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   1398c:	b500      	push	{lr}
   1398e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13990:	f7ed ff48 	bl	1824 <Sys_GetCoreID>
   13994:	4603      	mov	r3, r0
   13996:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   13998:	4a10      	ldr	r2, [pc, #64]	; (139dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1399a:	9b01      	ldr	r3, [sp, #4]
   1399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139a0:	2b00      	cmp	r3, #0
   139a2:	d10d      	bne.n	139c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139a4:	f7ec ffb0 	bl	908 <Adc_schm_read_msr>
   139a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139aa:	9b00      	ldr	r3, [sp, #0]
   139ac:	f003 0301 	and.w	r3, r3, #1
   139b0:	2b00      	cmp	r3, #0
   139b2:	d100      	bne.n	139b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   139b6:	490a      	ldr	r1, [pc, #40]	; (139e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   139b8:	9b01      	ldr	r3, [sp, #4]
   139ba:	9a00      	ldr	r2, [sp, #0]
   139bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   139c0:	4a06      	ldr	r2, [pc, #24]	; (139dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   139c2:	9b01      	ldr	r3, [sp, #4]
   139c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c8:	1c5a      	adds	r2, r3, #1
   139ca:	4904      	ldr	r1, [pc, #16]	; (139dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   139cc:	9b01      	ldr	r3, [sp, #4]
   139ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139d2:	bf00      	nop
   139d4:	b003      	add	sp, #12
   139d6:	f85d fb04 	ldr.w	pc, [sp], #4
   139da:	bf00      	nop
   139dc:	1fff93e0 	.word	0x1fff93e0
   139e0:	1fff93dc 	.word	0x1fff93dc

000139e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   139e4:	b500      	push	{lr}
   139e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139e8:	f7ed ff1c 	bl	1824 <Sys_GetCoreID>
   139ec:	4603      	mov	r3, r0
   139ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   139f0:	4a0d      	ldr	r2, [pc, #52]	; (13a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   139f2:	9b01      	ldr	r3, [sp, #4]
   139f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f8:	1e5a      	subs	r2, r3, #1
   139fa:	490b      	ldr	r1, [pc, #44]	; (13a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   13a02:	4a0a      	ldr	r2, [pc, #40]	; (13a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   13a04:	9b01      	ldr	r3, [sp, #4]
   13a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a0a:	f003 0301 	and.w	r3, r3, #1
   13a0e:	2b00      	cmp	r3, #0
   13a10:	d106      	bne.n	13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   13a12:	4a05      	ldr	r2, [pc, #20]	; (13a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13a14:	9b01      	ldr	r3, [sp, #4]
   13a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a1a:	2b00      	cmp	r3, #0
   13a1c:	d100      	bne.n	13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a20:	bf00      	nop
   13a22:	b003      	add	sp, #12
   13a24:	f85d fb04 	ldr.w	pc, [sp], #4
   13a28:	1fff93e0 	.word	0x1fff93e0
   13a2c:	1fff93dc 	.word	0x1fff93dc

00013a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13a30:	b500      	push	{lr}
   13a32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a34:	f7ed fef6 	bl	1824 <Sys_GetCoreID>
   13a38:	4603      	mov	r3, r0
   13a3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   13a3c:	4a10      	ldr	r2, [pc, #64]	; (13a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13a3e:	9b01      	ldr	r3, [sp, #4]
   13a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a44:	2b00      	cmp	r3, #0
   13a46:	d10d      	bne.n	13a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a48:	f7ec ff5e 	bl	908 <Adc_schm_read_msr>
   13a4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a4e:	9b00      	ldr	r3, [sp, #0]
   13a50:	f003 0301 	and.w	r3, r3, #1
   13a54:	2b00      	cmp	r3, #0
   13a56:	d100      	bne.n	13a5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   13a5a:	490a      	ldr	r1, [pc, #40]	; (13a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   13a5c:	9b01      	ldr	r3, [sp, #4]
   13a5e:	9a00      	ldr	r2, [sp, #0]
   13a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   13a64:	4a06      	ldr	r2, [pc, #24]	; (13a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13a66:	9b01      	ldr	r3, [sp, #4]
   13a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a6c:	1c5a      	adds	r2, r3, #1
   13a6e:	4904      	ldr	r1, [pc, #16]	; (13a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13a70:	9b01      	ldr	r3, [sp, #4]
   13a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a76:	bf00      	nop
   13a78:	b003      	add	sp, #12
   13a7a:	f85d fb04 	ldr.w	pc, [sp], #4
   13a7e:	bf00      	nop
   13a80:	1fff93e8 	.word	0x1fff93e8
   13a84:	1fff93e4 	.word	0x1fff93e4

00013a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13a88:	b500      	push	{lr}
   13a8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a8c:	f7ed feca 	bl	1824 <Sys_GetCoreID>
   13a90:	4603      	mov	r3, r0
   13a92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   13a94:	4a0d      	ldr	r2, [pc, #52]	; (13acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13a96:	9b01      	ldr	r3, [sp, #4]
   13a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a9c:	1e5a      	subs	r2, r3, #1
   13a9e:	490b      	ldr	r1, [pc, #44]	; (13acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13aa0:	9b01      	ldr	r3, [sp, #4]
   13aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   13aa6:	4a0a      	ldr	r2, [pc, #40]	; (13ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   13aa8:	9b01      	ldr	r3, [sp, #4]
   13aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aae:	f003 0301 	and.w	r3, r3, #1
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d106      	bne.n	13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   13ab6:	4a05      	ldr	r2, [pc, #20]	; (13acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13ab8:	9b01      	ldr	r3, [sp, #4]
   13aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13abe:	2b00      	cmp	r3, #0
   13ac0:	d100      	bne.n	13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ac2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ac4:	bf00      	nop
   13ac6:	b003      	add	sp, #12
   13ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   13acc:	1fff93e8 	.word	0x1fff93e8
   13ad0:	1fff93e4 	.word	0x1fff93e4

00013ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13ad4:	b500      	push	{lr}
   13ad6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ad8:	f7ed fea4 	bl	1824 <Sys_GetCoreID>
   13adc:	4603      	mov	r3, r0
   13ade:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   13ae0:	4a10      	ldr	r2, [pc, #64]	; (13b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13ae2:	9b01      	ldr	r3, [sp, #4]
   13ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ae8:	2b00      	cmp	r3, #0
   13aea:	d10d      	bne.n	13b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13aec:	f7ec ff0c 	bl	908 <Adc_schm_read_msr>
   13af0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13af2:	9b00      	ldr	r3, [sp, #0]
   13af4:	f003 0301 	and.w	r3, r3, #1
   13af8:	2b00      	cmp	r3, #0
   13afa:	d100      	bne.n	13afe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13afc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   13afe:	490a      	ldr	r1, [pc, #40]	; (13b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   13b00:	9b01      	ldr	r3, [sp, #4]
   13b02:	9a00      	ldr	r2, [sp, #0]
   13b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   13b08:	4a06      	ldr	r2, [pc, #24]	; (13b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13b0a:	9b01      	ldr	r3, [sp, #4]
   13b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b10:	1c5a      	adds	r2, r3, #1
   13b12:	4904      	ldr	r1, [pc, #16]	; (13b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13b14:	9b01      	ldr	r3, [sp, #4]
   13b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b1a:	bf00      	nop
   13b1c:	b003      	add	sp, #12
   13b1e:	f85d fb04 	ldr.w	pc, [sp], #4
   13b22:	bf00      	nop
   13b24:	1fff93f0 	.word	0x1fff93f0
   13b28:	1fff93ec 	.word	0x1fff93ec

00013b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13b2c:	b500      	push	{lr}
   13b2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b30:	f7ed fe78 	bl	1824 <Sys_GetCoreID>
   13b34:	4603      	mov	r3, r0
   13b36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   13b38:	4a0d      	ldr	r2, [pc, #52]	; (13b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13b3a:	9b01      	ldr	r3, [sp, #4]
   13b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b40:	1e5a      	subs	r2, r3, #1
   13b42:	490b      	ldr	r1, [pc, #44]	; (13b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13b44:	9b01      	ldr	r3, [sp, #4]
   13b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   13b4a:	4a0a      	ldr	r2, [pc, #40]	; (13b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   13b4c:	9b01      	ldr	r3, [sp, #4]
   13b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b52:	f003 0301 	and.w	r3, r3, #1
   13b56:	2b00      	cmp	r3, #0
   13b58:	d106      	bne.n	13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   13b5a:	4a05      	ldr	r2, [pc, #20]	; (13b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13b5c:	9b01      	ldr	r3, [sp, #4]
   13b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b62:	2b00      	cmp	r3, #0
   13b64:	d100      	bne.n	13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b68:	bf00      	nop
   13b6a:	b003      	add	sp, #12
   13b6c:	f85d fb04 	ldr.w	pc, [sp], #4
   13b70:	1fff93f0 	.word	0x1fff93f0
   13b74:	1fff93ec 	.word	0x1fff93ec

00013b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13b78:	b500      	push	{lr}
   13b7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b7c:	f7ed fe52 	bl	1824 <Sys_GetCoreID>
   13b80:	4603      	mov	r3, r0
   13b82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   13b84:	4a10      	ldr	r2, [pc, #64]	; (13bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13b86:	9b01      	ldr	r3, [sp, #4]
   13b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b8c:	2b00      	cmp	r3, #0
   13b8e:	d10d      	bne.n	13bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b90:	f7ec feba 	bl	908 <Adc_schm_read_msr>
   13b94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b96:	9b00      	ldr	r3, [sp, #0]
   13b98:	f003 0301 	and.w	r3, r3, #1
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	d100      	bne.n	13ba2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ba0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   13ba2:	490a      	ldr	r1, [pc, #40]	; (13bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   13ba4:	9b01      	ldr	r3, [sp, #4]
   13ba6:	9a00      	ldr	r2, [sp, #0]
   13ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   13bac:	4a06      	ldr	r2, [pc, #24]	; (13bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13bae:	9b01      	ldr	r3, [sp, #4]
   13bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bb4:	1c5a      	adds	r2, r3, #1
   13bb6:	4904      	ldr	r1, [pc, #16]	; (13bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13bb8:	9b01      	ldr	r3, [sp, #4]
   13bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bbe:	bf00      	nop
   13bc0:	b003      	add	sp, #12
   13bc2:	f85d fb04 	ldr.w	pc, [sp], #4
   13bc6:	bf00      	nop
   13bc8:	1fff93f8 	.word	0x1fff93f8
   13bcc:	1fff93f4 	.word	0x1fff93f4

00013bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13bd0:	b500      	push	{lr}
   13bd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bd4:	f7ed fe26 	bl	1824 <Sys_GetCoreID>
   13bd8:	4603      	mov	r3, r0
   13bda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   13bdc:	4a0d      	ldr	r2, [pc, #52]	; (13c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13bde:	9b01      	ldr	r3, [sp, #4]
   13be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13be4:	1e5a      	subs	r2, r3, #1
   13be6:	490b      	ldr	r1, [pc, #44]	; (13c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13be8:	9b01      	ldr	r3, [sp, #4]
   13bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   13bee:	4a0a      	ldr	r2, [pc, #40]	; (13c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   13bf0:	9b01      	ldr	r3, [sp, #4]
   13bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bf6:	f003 0301 	and.w	r3, r3, #1
   13bfa:	2b00      	cmp	r3, #0
   13bfc:	d106      	bne.n	13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   13bfe:	4a05      	ldr	r2, [pc, #20]	; (13c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13c00:	9b01      	ldr	r3, [sp, #4]
   13c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c06:	2b00      	cmp	r3, #0
   13c08:	d100      	bne.n	13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c0c:	bf00      	nop
   13c0e:	b003      	add	sp, #12
   13c10:	f85d fb04 	ldr.w	pc, [sp], #4
   13c14:	1fff93f8 	.word	0x1fff93f8
   13c18:	1fff93f4 	.word	0x1fff93f4

00013c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13c1c:	b500      	push	{lr}
   13c1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c20:	f7ed fe00 	bl	1824 <Sys_GetCoreID>
   13c24:	4603      	mov	r3, r0
   13c26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   13c28:	4a10      	ldr	r2, [pc, #64]	; (13c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13c2a:	9b01      	ldr	r3, [sp, #4]
   13c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c30:	2b00      	cmp	r3, #0
   13c32:	d10d      	bne.n	13c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c34:	f7ec fe68 	bl	908 <Adc_schm_read_msr>
   13c38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c3a:	9b00      	ldr	r3, [sp, #0]
   13c3c:	f003 0301 	and.w	r3, r3, #1
   13c40:	2b00      	cmp	r3, #0
   13c42:	d100      	bne.n	13c46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   13c46:	490a      	ldr	r1, [pc, #40]	; (13c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   13c48:	9b01      	ldr	r3, [sp, #4]
   13c4a:	9a00      	ldr	r2, [sp, #0]
   13c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   13c50:	4a06      	ldr	r2, [pc, #24]	; (13c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13c52:	9b01      	ldr	r3, [sp, #4]
   13c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c58:	1c5a      	adds	r2, r3, #1
   13c5a:	4904      	ldr	r1, [pc, #16]	; (13c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13c5c:	9b01      	ldr	r3, [sp, #4]
   13c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c62:	bf00      	nop
   13c64:	b003      	add	sp, #12
   13c66:	f85d fb04 	ldr.w	pc, [sp], #4
   13c6a:	bf00      	nop
   13c6c:	1fff9400 	.word	0x1fff9400
   13c70:	1fff93fc 	.word	0x1fff93fc

00013c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13c74:	b500      	push	{lr}
   13c76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c78:	f7ed fdd4 	bl	1824 <Sys_GetCoreID>
   13c7c:	4603      	mov	r3, r0
   13c7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   13c80:	4a0d      	ldr	r2, [pc, #52]	; (13cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13c82:	9b01      	ldr	r3, [sp, #4]
   13c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c88:	1e5a      	subs	r2, r3, #1
   13c8a:	490b      	ldr	r1, [pc, #44]	; (13cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   13c92:	4a0a      	ldr	r2, [pc, #40]	; (13cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   13c94:	9b01      	ldr	r3, [sp, #4]
   13c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c9a:	f003 0301 	and.w	r3, r3, #1
   13c9e:	2b00      	cmp	r3, #0
   13ca0:	d106      	bne.n	13cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   13ca2:	4a05      	ldr	r2, [pc, #20]	; (13cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13ca4:	9b01      	ldr	r3, [sp, #4]
   13ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13caa:	2b00      	cmp	r3, #0
   13cac:	d100      	bne.n	13cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cb0:	bf00      	nop
   13cb2:	b003      	add	sp, #12
   13cb4:	f85d fb04 	ldr.w	pc, [sp], #4
   13cb8:	1fff9400 	.word	0x1fff9400
   13cbc:	1fff93fc 	.word	0x1fff93fc

00013cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13cc0:	b500      	push	{lr}
   13cc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cc4:	f7ed fdae 	bl	1824 <Sys_GetCoreID>
   13cc8:	4603      	mov	r3, r0
   13cca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   13ccc:	4a10      	ldr	r2, [pc, #64]	; (13d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13cce:	9b01      	ldr	r3, [sp, #4]
   13cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d10d      	bne.n	13cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cd8:	f7ec fe16 	bl	908 <Adc_schm_read_msr>
   13cdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cde:	9b00      	ldr	r3, [sp, #0]
   13ce0:	f003 0301 	and.w	r3, r3, #1
   13ce4:	2b00      	cmp	r3, #0
   13ce6:	d100      	bne.n	13cea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ce8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   13cea:	490a      	ldr	r1, [pc, #40]	; (13d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   13cec:	9b01      	ldr	r3, [sp, #4]
   13cee:	9a00      	ldr	r2, [sp, #0]
   13cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   13cf4:	4a06      	ldr	r2, [pc, #24]	; (13d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13cf6:	9b01      	ldr	r3, [sp, #4]
   13cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cfc:	1c5a      	adds	r2, r3, #1
   13cfe:	4904      	ldr	r1, [pc, #16]	; (13d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13d00:	9b01      	ldr	r3, [sp, #4]
   13d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d06:	bf00      	nop
   13d08:	b003      	add	sp, #12
   13d0a:	f85d fb04 	ldr.w	pc, [sp], #4
   13d0e:	bf00      	nop
   13d10:	1fff9408 	.word	0x1fff9408
   13d14:	1fff9404 	.word	0x1fff9404

00013d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13d18:	b500      	push	{lr}
   13d1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d1c:	f7ed fd82 	bl	1824 <Sys_GetCoreID>
   13d20:	4603      	mov	r3, r0
   13d22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   13d24:	4a0d      	ldr	r2, [pc, #52]	; (13d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13d26:	9b01      	ldr	r3, [sp, #4]
   13d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d2c:	1e5a      	subs	r2, r3, #1
   13d2e:	490b      	ldr	r1, [pc, #44]	; (13d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13d30:	9b01      	ldr	r3, [sp, #4]
   13d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   13d36:	4a0a      	ldr	r2, [pc, #40]	; (13d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   13d38:	9b01      	ldr	r3, [sp, #4]
   13d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d3e:	f003 0301 	and.w	r3, r3, #1
   13d42:	2b00      	cmp	r3, #0
   13d44:	d106      	bne.n	13d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   13d46:	4a05      	ldr	r2, [pc, #20]	; (13d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13d48:	9b01      	ldr	r3, [sp, #4]
   13d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d4e:	2b00      	cmp	r3, #0
   13d50:	d100      	bne.n	13d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d54:	bf00      	nop
   13d56:	b003      	add	sp, #12
   13d58:	f85d fb04 	ldr.w	pc, [sp], #4
   13d5c:	1fff9408 	.word	0x1fff9408
   13d60:	1fff9404 	.word	0x1fff9404

00013d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13d64:	b500      	push	{lr}
   13d66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d68:	f7ed fd5c 	bl	1824 <Sys_GetCoreID>
   13d6c:	4603      	mov	r3, r0
   13d6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   13d70:	4a10      	ldr	r2, [pc, #64]	; (13db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13d72:	9b01      	ldr	r3, [sp, #4]
   13d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d78:	2b00      	cmp	r3, #0
   13d7a:	d10d      	bne.n	13d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d7c:	f7ec fdc4 	bl	908 <Adc_schm_read_msr>
   13d80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d82:	9b00      	ldr	r3, [sp, #0]
   13d84:	f003 0301 	and.w	r3, r3, #1
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d100      	bne.n	13d8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   13d8e:	490a      	ldr	r1, [pc, #40]	; (13db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   13d90:	9b01      	ldr	r3, [sp, #4]
   13d92:	9a00      	ldr	r2, [sp, #0]
   13d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   13d98:	4a06      	ldr	r2, [pc, #24]	; (13db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13d9a:	9b01      	ldr	r3, [sp, #4]
   13d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13da0:	1c5a      	adds	r2, r3, #1
   13da2:	4904      	ldr	r1, [pc, #16]	; (13db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13da4:	9b01      	ldr	r3, [sp, #4]
   13da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13daa:	bf00      	nop
   13dac:	b003      	add	sp, #12
   13dae:	f85d fb04 	ldr.w	pc, [sp], #4
   13db2:	bf00      	nop
   13db4:	1fff9410 	.word	0x1fff9410
   13db8:	1fff940c 	.word	0x1fff940c

00013dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13dbc:	b500      	push	{lr}
   13dbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dc0:	f7ed fd30 	bl	1824 <Sys_GetCoreID>
   13dc4:	4603      	mov	r3, r0
   13dc6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   13dc8:	4a0d      	ldr	r2, [pc, #52]	; (13e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13dca:	9b01      	ldr	r3, [sp, #4]
   13dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dd0:	1e5a      	subs	r2, r3, #1
   13dd2:	490b      	ldr	r1, [pc, #44]	; (13e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13dd4:	9b01      	ldr	r3, [sp, #4]
   13dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   13dda:	4a0a      	ldr	r2, [pc, #40]	; (13e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   13ddc:	9b01      	ldr	r3, [sp, #4]
   13dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13de2:	f003 0301 	and.w	r3, r3, #1
   13de6:	2b00      	cmp	r3, #0
   13de8:	d106      	bne.n	13df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   13dea:	4a05      	ldr	r2, [pc, #20]	; (13e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13dec:	9b01      	ldr	r3, [sp, #4]
   13dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13df2:	2b00      	cmp	r3, #0
   13df4:	d100      	bne.n	13df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13df6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13df8:	bf00      	nop
   13dfa:	b003      	add	sp, #12
   13dfc:	f85d fb04 	ldr.w	pc, [sp], #4
   13e00:	1fff9410 	.word	0x1fff9410
   13e04:	1fff940c 	.word	0x1fff940c

00013e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   13e08:	b500      	push	{lr}
   13e0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e0c:	f7ed fd0a 	bl	1824 <Sys_GetCoreID>
   13e10:	4603      	mov	r3, r0
   13e12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   13e14:	4a10      	ldr	r2, [pc, #64]	; (13e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13e16:	9b01      	ldr	r3, [sp, #4]
   13e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	d10d      	bne.n	13e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e20:	f7ec fd72 	bl	908 <Adc_schm_read_msr>
   13e24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e26:	9b00      	ldr	r3, [sp, #0]
   13e28:	f003 0301 	and.w	r3, r3, #1
   13e2c:	2b00      	cmp	r3, #0
   13e2e:	d100      	bne.n	13e32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   13e32:	490a      	ldr	r1, [pc, #40]	; (13e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   13e34:	9b01      	ldr	r3, [sp, #4]
   13e36:	9a00      	ldr	r2, [sp, #0]
   13e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   13e3c:	4a06      	ldr	r2, [pc, #24]	; (13e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13e3e:	9b01      	ldr	r3, [sp, #4]
   13e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e44:	1c5a      	adds	r2, r3, #1
   13e46:	4904      	ldr	r1, [pc, #16]	; (13e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13e48:	9b01      	ldr	r3, [sp, #4]
   13e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e4e:	bf00      	nop
   13e50:	b003      	add	sp, #12
   13e52:	f85d fb04 	ldr.w	pc, [sp], #4
   13e56:	bf00      	nop
   13e58:	1fff9418 	.word	0x1fff9418
   13e5c:	1fff9414 	.word	0x1fff9414

00013e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   13e60:	b500      	push	{lr}
   13e62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e64:	f7ed fcde 	bl	1824 <Sys_GetCoreID>
   13e68:	4603      	mov	r3, r0
   13e6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   13e6c:	4a0d      	ldr	r2, [pc, #52]	; (13ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13e6e:	9b01      	ldr	r3, [sp, #4]
   13e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e74:	1e5a      	subs	r2, r3, #1
   13e76:	490b      	ldr	r1, [pc, #44]	; (13ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13e78:	9b01      	ldr	r3, [sp, #4]
   13e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   13e7e:	4a0a      	ldr	r2, [pc, #40]	; (13ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   13e80:	9b01      	ldr	r3, [sp, #4]
   13e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e86:	f003 0301 	and.w	r3, r3, #1
   13e8a:	2b00      	cmp	r3, #0
   13e8c:	d106      	bne.n	13e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   13e8e:	4a05      	ldr	r2, [pc, #20]	; (13ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13e90:	9b01      	ldr	r3, [sp, #4]
   13e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e96:	2b00      	cmp	r3, #0
   13e98:	d100      	bne.n	13e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e9c:	bf00      	nop
   13e9e:	b003      	add	sp, #12
   13ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ea4:	1fff9418 	.word	0x1fff9418
   13ea8:	1fff9414 	.word	0x1fff9414

00013eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   13eac:	b500      	push	{lr}
   13eae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13eb0:	f7ed fcb8 	bl	1824 <Sys_GetCoreID>
   13eb4:	4603      	mov	r3, r0
   13eb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   13eb8:	4a10      	ldr	r2, [pc, #64]	; (13efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13eba:	9b01      	ldr	r3, [sp, #4]
   13ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	d10d      	bne.n	13ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ec4:	f7ec fd20 	bl	908 <Adc_schm_read_msr>
   13ec8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13eca:	9b00      	ldr	r3, [sp, #0]
   13ecc:	f003 0301 	and.w	r3, r3, #1
   13ed0:	2b00      	cmp	r3, #0
   13ed2:	d100      	bne.n	13ed6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ed4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   13ed6:	490a      	ldr	r1, [pc, #40]	; (13f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   13ed8:	9b01      	ldr	r3, [sp, #4]
   13eda:	9a00      	ldr	r2, [sp, #0]
   13edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   13ee0:	4a06      	ldr	r2, [pc, #24]	; (13efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13ee2:	9b01      	ldr	r3, [sp, #4]
   13ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee8:	1c5a      	adds	r2, r3, #1
   13eea:	4904      	ldr	r1, [pc, #16]	; (13efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13eec:	9b01      	ldr	r3, [sp, #4]
   13eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ef2:	bf00      	nop
   13ef4:	b003      	add	sp, #12
   13ef6:	f85d fb04 	ldr.w	pc, [sp], #4
   13efa:	bf00      	nop
   13efc:	1fff9420 	.word	0x1fff9420
   13f00:	1fff941c 	.word	0x1fff941c

00013f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   13f04:	b500      	push	{lr}
   13f06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f08:	f7ed fc8c 	bl	1824 <Sys_GetCoreID>
   13f0c:	4603      	mov	r3, r0
   13f0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   13f10:	4a0d      	ldr	r2, [pc, #52]	; (13f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13f12:	9b01      	ldr	r3, [sp, #4]
   13f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f18:	1e5a      	subs	r2, r3, #1
   13f1a:	490b      	ldr	r1, [pc, #44]	; (13f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13f1c:	9b01      	ldr	r3, [sp, #4]
   13f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   13f22:	4a0a      	ldr	r2, [pc, #40]	; (13f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   13f24:	9b01      	ldr	r3, [sp, #4]
   13f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f2a:	f003 0301 	and.w	r3, r3, #1
   13f2e:	2b00      	cmp	r3, #0
   13f30:	d106      	bne.n	13f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   13f32:	4a05      	ldr	r2, [pc, #20]	; (13f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13f34:	9b01      	ldr	r3, [sp, #4]
   13f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f3a:	2b00      	cmp	r3, #0
   13f3c:	d100      	bne.n	13f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f40:	bf00      	nop
   13f42:	b003      	add	sp, #12
   13f44:	f85d fb04 	ldr.w	pc, [sp], #4
   13f48:	1fff9420 	.word	0x1fff9420
   13f4c:	1fff941c 	.word	0x1fff941c

00013f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   13f50:	b500      	push	{lr}
   13f52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f54:	f7ed fc66 	bl	1824 <Sys_GetCoreID>
   13f58:	4603      	mov	r3, r0
   13f5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   13f5c:	4a10      	ldr	r2, [pc, #64]	; (13fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13f5e:	9b01      	ldr	r3, [sp, #4]
   13f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f64:	2b00      	cmp	r3, #0
   13f66:	d10d      	bne.n	13f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f68:	f7ec fcce 	bl	908 <Adc_schm_read_msr>
   13f6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f6e:	9b00      	ldr	r3, [sp, #0]
   13f70:	f003 0301 	and.w	r3, r3, #1
   13f74:	2b00      	cmp	r3, #0
   13f76:	d100      	bne.n	13f7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   13f7a:	490a      	ldr	r1, [pc, #40]	; (13fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   13f7c:	9b01      	ldr	r3, [sp, #4]
   13f7e:	9a00      	ldr	r2, [sp, #0]
   13f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   13f84:	4a06      	ldr	r2, [pc, #24]	; (13fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13f86:	9b01      	ldr	r3, [sp, #4]
   13f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f8c:	1c5a      	adds	r2, r3, #1
   13f8e:	4904      	ldr	r1, [pc, #16]	; (13fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13f90:	9b01      	ldr	r3, [sp, #4]
   13f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f96:	bf00      	nop
   13f98:	b003      	add	sp, #12
   13f9a:	f85d fb04 	ldr.w	pc, [sp], #4
   13f9e:	bf00      	nop
   13fa0:	1fff9428 	.word	0x1fff9428
   13fa4:	1fff9424 	.word	0x1fff9424

00013fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   13fa8:	b500      	push	{lr}
   13faa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fac:	f7ed fc3a 	bl	1824 <Sys_GetCoreID>
   13fb0:	4603      	mov	r3, r0
   13fb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   13fb4:	4a0d      	ldr	r2, [pc, #52]	; (13fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   13fb6:	9b01      	ldr	r3, [sp, #4]
   13fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fbc:	1e5a      	subs	r2, r3, #1
   13fbe:	490b      	ldr	r1, [pc, #44]	; (13fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   13fc0:	9b01      	ldr	r3, [sp, #4]
   13fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   13fc6:	4a0a      	ldr	r2, [pc, #40]	; (13ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   13fc8:	9b01      	ldr	r3, [sp, #4]
   13fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fce:	f003 0301 	and.w	r3, r3, #1
   13fd2:	2b00      	cmp	r3, #0
   13fd4:	d106      	bne.n	13fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   13fd6:	4a05      	ldr	r2, [pc, #20]	; (13fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   13fd8:	9b01      	ldr	r3, [sp, #4]
   13fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fde:	2b00      	cmp	r3, #0
   13fe0:	d100      	bne.n	13fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fe4:	bf00      	nop
   13fe6:	b003      	add	sp, #12
   13fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   13fec:	1fff9428 	.word	0x1fff9428
   13ff0:	1fff9424 	.word	0x1fff9424

00013ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   13ff4:	b500      	push	{lr}
   13ff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ff8:	f7ed fc14 	bl	1824 <Sys_GetCoreID>
   13ffc:	4603      	mov	r3, r0
   13ffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   14000:	4a10      	ldr	r2, [pc, #64]	; (14044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   14002:	9b01      	ldr	r3, [sp, #4]
   14004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14008:	2b00      	cmp	r3, #0
   1400a:	d10d      	bne.n	14028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1400c:	f7ec fc7c 	bl	908 <Adc_schm_read_msr>
   14010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14012:	9b00      	ldr	r3, [sp, #0]
   14014:	f003 0301 	and.w	r3, r3, #1
   14018:	2b00      	cmp	r3, #0
   1401a:	d100      	bne.n	1401e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1401c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   1401e:	490a      	ldr	r1, [pc, #40]	; (14048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   14020:	9b01      	ldr	r3, [sp, #4]
   14022:	9a00      	ldr	r2, [sp, #0]
   14024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   14028:	4a06      	ldr	r2, [pc, #24]	; (14044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1402a:	9b01      	ldr	r3, [sp, #4]
   1402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14030:	1c5a      	adds	r2, r3, #1
   14032:	4904      	ldr	r1, [pc, #16]	; (14044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   14034:	9b01      	ldr	r3, [sp, #4]
   14036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1403a:	bf00      	nop
   1403c:	b003      	add	sp, #12
   1403e:	f85d fb04 	ldr.w	pc, [sp], #4
   14042:	bf00      	nop
   14044:	1fff9430 	.word	0x1fff9430
   14048:	1fff942c 	.word	0x1fff942c

0001404c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   1404c:	b500      	push	{lr}
   1404e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14050:	f7ed fbe8 	bl	1824 <Sys_GetCoreID>
   14054:	4603      	mov	r3, r0
   14056:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   14058:	4a0d      	ldr	r2, [pc, #52]	; (14090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1405a:	9b01      	ldr	r3, [sp, #4]
   1405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14060:	1e5a      	subs	r2, r3, #1
   14062:	490b      	ldr	r1, [pc, #44]	; (14090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14064:	9b01      	ldr	r3, [sp, #4]
   14066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   1406a:	4a0a      	ldr	r2, [pc, #40]	; (14094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   1406c:	9b01      	ldr	r3, [sp, #4]
   1406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14072:	f003 0301 	and.w	r3, r3, #1
   14076:	2b00      	cmp	r3, #0
   14078:	d106      	bne.n	14088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   1407a:	4a05      	ldr	r2, [pc, #20]	; (14090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1407c:	9b01      	ldr	r3, [sp, #4]
   1407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14082:	2b00      	cmp	r3, #0
   14084:	d100      	bne.n	14088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14088:	bf00      	nop
   1408a:	b003      	add	sp, #12
   1408c:	f85d fb04 	ldr.w	pc, [sp], #4
   14090:	1fff9430 	.word	0x1fff9430
   14094:	1fff942c 	.word	0x1fff942c

00014098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   14098:	b500      	push	{lr}
   1409a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1409c:	f7ed fbc2 	bl	1824 <Sys_GetCoreID>
   140a0:	4603      	mov	r3, r0
   140a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   140a4:	4a10      	ldr	r2, [pc, #64]	; (140e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   140a6:	9b01      	ldr	r3, [sp, #4]
   140a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140ac:	2b00      	cmp	r3, #0
   140ae:	d10d      	bne.n	140cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140b0:	f7ec fc2a 	bl	908 <Adc_schm_read_msr>
   140b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140b6:	9b00      	ldr	r3, [sp, #0]
   140b8:	f003 0301 	and.w	r3, r3, #1
   140bc:	2b00      	cmp	r3, #0
   140be:	d100      	bne.n	140c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   140c2:	490a      	ldr	r1, [pc, #40]	; (140ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   140c4:	9b01      	ldr	r3, [sp, #4]
   140c6:	9a00      	ldr	r2, [sp, #0]
   140c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   140cc:	4a06      	ldr	r2, [pc, #24]	; (140e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   140ce:	9b01      	ldr	r3, [sp, #4]
   140d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140d4:	1c5a      	adds	r2, r3, #1
   140d6:	4904      	ldr	r1, [pc, #16]	; (140e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   140d8:	9b01      	ldr	r3, [sp, #4]
   140da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140de:	bf00      	nop
   140e0:	b003      	add	sp, #12
   140e2:	f85d fb04 	ldr.w	pc, [sp], #4
   140e6:	bf00      	nop
   140e8:	1fff9438 	.word	0x1fff9438
   140ec:	1fff9434 	.word	0x1fff9434

000140f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   140f0:	b500      	push	{lr}
   140f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140f4:	f7ed fb96 	bl	1824 <Sys_GetCoreID>
   140f8:	4603      	mov	r3, r0
   140fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   140fc:	4a0d      	ldr	r2, [pc, #52]	; (14134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   140fe:	9b01      	ldr	r3, [sp, #4]
   14100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14104:	1e5a      	subs	r2, r3, #1
   14106:	490b      	ldr	r1, [pc, #44]	; (14134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   14108:	9b01      	ldr	r3, [sp, #4]
   1410a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   1410e:	4a0a      	ldr	r2, [pc, #40]	; (14138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   14110:	9b01      	ldr	r3, [sp, #4]
   14112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14116:	f003 0301 	and.w	r3, r3, #1
   1411a:	2b00      	cmp	r3, #0
   1411c:	d106      	bne.n	1412c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   1411e:	4a05      	ldr	r2, [pc, #20]	; (14134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   14120:	9b01      	ldr	r3, [sp, #4]
   14122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14126:	2b00      	cmp	r3, #0
   14128:	d100      	bne.n	1412c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1412a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1412c:	bf00      	nop
   1412e:	b003      	add	sp, #12
   14130:	f85d fb04 	ldr.w	pc, [sp], #4
   14134:	1fff9438 	.word	0x1fff9438
   14138:	1fff9434 	.word	0x1fff9434

0001413c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   1413c:	b500      	push	{lr}
   1413e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14140:	f7ed fb70 	bl	1824 <Sys_GetCoreID>
   14144:	4603      	mov	r3, r0
   14146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   14148:	4a10      	ldr	r2, [pc, #64]	; (1418c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   1414a:	9b01      	ldr	r3, [sp, #4]
   1414c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14150:	2b00      	cmp	r3, #0
   14152:	d10d      	bne.n	14170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14154:	f7ec fbd8 	bl	908 <Adc_schm_read_msr>
   14158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1415a:	9b00      	ldr	r3, [sp, #0]
   1415c:	f003 0301 	and.w	r3, r3, #1
   14160:	2b00      	cmp	r3, #0
   14162:	d100      	bne.n	14166 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   14166:	490a      	ldr	r1, [pc, #40]	; (14190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   14168:	9b01      	ldr	r3, [sp, #4]
   1416a:	9a00      	ldr	r2, [sp, #0]
   1416c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   14170:	4a06      	ldr	r2, [pc, #24]	; (1418c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   14172:	9b01      	ldr	r3, [sp, #4]
   14174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14178:	1c5a      	adds	r2, r3, #1
   1417a:	4904      	ldr	r1, [pc, #16]	; (1418c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   1417c:	9b01      	ldr	r3, [sp, #4]
   1417e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14182:	bf00      	nop
   14184:	b003      	add	sp, #12
   14186:	f85d fb04 	ldr.w	pc, [sp], #4
   1418a:	bf00      	nop
   1418c:	1fff9440 	.word	0x1fff9440
   14190:	1fff943c 	.word	0x1fff943c

00014194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   14194:	b500      	push	{lr}
   14196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14198:	f7ed fb44 	bl	1824 <Sys_GetCoreID>
   1419c:	4603      	mov	r3, r0
   1419e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   141a0:	4a0d      	ldr	r2, [pc, #52]	; (141d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   141a2:	9b01      	ldr	r3, [sp, #4]
   141a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a8:	1e5a      	subs	r2, r3, #1
   141aa:	490b      	ldr	r1, [pc, #44]	; (141d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   141ac:	9b01      	ldr	r3, [sp, #4]
   141ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   141b2:	4a0a      	ldr	r2, [pc, #40]	; (141dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   141b4:	9b01      	ldr	r3, [sp, #4]
   141b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ba:	f003 0301 	and.w	r3, r3, #1
   141be:	2b00      	cmp	r3, #0
   141c0:	d106      	bne.n	141d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   141c2:	4a05      	ldr	r2, [pc, #20]	; (141d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   141c4:	9b01      	ldr	r3, [sp, #4]
   141c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ca:	2b00      	cmp	r3, #0
   141cc:	d100      	bne.n	141d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141d0:	bf00      	nop
   141d2:	b003      	add	sp, #12
   141d4:	f85d fb04 	ldr.w	pc, [sp], #4
   141d8:	1fff9440 	.word	0x1fff9440
   141dc:	1fff943c 	.word	0x1fff943c

000141e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   141e0:	b500      	push	{lr}
   141e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141e4:	f7ed fb1e 	bl	1824 <Sys_GetCoreID>
   141e8:	4603      	mov	r3, r0
   141ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   141ec:	4a10      	ldr	r2, [pc, #64]	; (14230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   141ee:	9b01      	ldr	r3, [sp, #4]
   141f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141f4:	2b00      	cmp	r3, #0
   141f6:	d10d      	bne.n	14214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141f8:	f7ec fb86 	bl	908 <Adc_schm_read_msr>
   141fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141fe:	9b00      	ldr	r3, [sp, #0]
   14200:	f003 0301 	and.w	r3, r3, #1
   14204:	2b00      	cmp	r3, #0
   14206:	d100      	bne.n	1420a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   1420a:	490a      	ldr	r1, [pc, #40]	; (14234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   1420c:	9b01      	ldr	r3, [sp, #4]
   1420e:	9a00      	ldr	r2, [sp, #0]
   14210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   14214:	4a06      	ldr	r2, [pc, #24]	; (14230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   14216:	9b01      	ldr	r3, [sp, #4]
   14218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1421c:	1c5a      	adds	r2, r3, #1
   1421e:	4904      	ldr	r1, [pc, #16]	; (14230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   14220:	9b01      	ldr	r3, [sp, #4]
   14222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14226:	bf00      	nop
   14228:	b003      	add	sp, #12
   1422a:	f85d fb04 	ldr.w	pc, [sp], #4
   1422e:	bf00      	nop
   14230:	1fff9448 	.word	0x1fff9448
   14234:	1fff9444 	.word	0x1fff9444

00014238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   14238:	b500      	push	{lr}
   1423a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1423c:	f7ed faf2 	bl	1824 <Sys_GetCoreID>
   14240:	4603      	mov	r3, r0
   14242:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   14244:	4a0d      	ldr	r2, [pc, #52]	; (1427c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14246:	9b01      	ldr	r3, [sp, #4]
   14248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1424c:	1e5a      	subs	r2, r3, #1
   1424e:	490b      	ldr	r1, [pc, #44]	; (1427c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14250:	9b01      	ldr	r3, [sp, #4]
   14252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   14256:	4a0a      	ldr	r2, [pc, #40]	; (14280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   14258:	9b01      	ldr	r3, [sp, #4]
   1425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1425e:	f003 0301 	and.w	r3, r3, #1
   14262:	2b00      	cmp	r3, #0
   14264:	d106      	bne.n	14274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   14266:	4a05      	ldr	r2, [pc, #20]	; (1427c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14268:	9b01      	ldr	r3, [sp, #4]
   1426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1426e:	2b00      	cmp	r3, #0
   14270:	d100      	bne.n	14274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14274:	bf00      	nop
   14276:	b003      	add	sp, #12
   14278:	f85d fb04 	ldr.w	pc, [sp], #4
   1427c:	1fff9448 	.word	0x1fff9448
   14280:	1fff9444 	.word	0x1fff9444

00014284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   14284:	b500      	push	{lr}
   14286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14288:	f7ed facc 	bl	1824 <Sys_GetCoreID>
   1428c:	4603      	mov	r3, r0
   1428e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   14290:	4a10      	ldr	r2, [pc, #64]	; (142d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   14292:	9b01      	ldr	r3, [sp, #4]
   14294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14298:	2b00      	cmp	r3, #0
   1429a:	d10d      	bne.n	142b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1429c:	f7ec fb34 	bl	908 <Adc_schm_read_msr>
   142a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142a2:	9b00      	ldr	r3, [sp, #0]
   142a4:	f003 0301 	and.w	r3, r3, #1
   142a8:	2b00      	cmp	r3, #0
   142aa:	d100      	bne.n	142ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   142ae:	490a      	ldr	r1, [pc, #40]	; (142d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   142b0:	9b01      	ldr	r3, [sp, #4]
   142b2:	9a00      	ldr	r2, [sp, #0]
   142b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   142b8:	4a06      	ldr	r2, [pc, #24]	; (142d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   142ba:	9b01      	ldr	r3, [sp, #4]
   142bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142c0:	1c5a      	adds	r2, r3, #1
   142c2:	4904      	ldr	r1, [pc, #16]	; (142d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   142c4:	9b01      	ldr	r3, [sp, #4]
   142c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142ca:	bf00      	nop
   142cc:	b003      	add	sp, #12
   142ce:	f85d fb04 	ldr.w	pc, [sp], #4
   142d2:	bf00      	nop
   142d4:	1fff9450 	.word	0x1fff9450
   142d8:	1fff944c 	.word	0x1fff944c

000142dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   142dc:	b500      	push	{lr}
   142de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142e0:	f7ed faa0 	bl	1824 <Sys_GetCoreID>
   142e4:	4603      	mov	r3, r0
   142e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   142e8:	4a0d      	ldr	r2, [pc, #52]	; (14320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   142ea:	9b01      	ldr	r3, [sp, #4]
   142ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142f0:	1e5a      	subs	r2, r3, #1
   142f2:	490b      	ldr	r1, [pc, #44]	; (14320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   142f4:	9b01      	ldr	r3, [sp, #4]
   142f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   142fa:	4a0a      	ldr	r2, [pc, #40]	; (14324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   142fc:	9b01      	ldr	r3, [sp, #4]
   142fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14302:	f003 0301 	and.w	r3, r3, #1
   14306:	2b00      	cmp	r3, #0
   14308:	d106      	bne.n	14318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   1430a:	4a05      	ldr	r2, [pc, #20]	; (14320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   1430c:	9b01      	ldr	r3, [sp, #4]
   1430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14312:	2b00      	cmp	r3, #0
   14314:	d100      	bne.n	14318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14318:	bf00      	nop
   1431a:	b003      	add	sp, #12
   1431c:	f85d fb04 	ldr.w	pc, [sp], #4
   14320:	1fff9450 	.word	0x1fff9450
   14324:	1fff944c 	.word	0x1fff944c

00014328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   14328:	b500      	push	{lr}
   1432a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1432c:	f7ed fa7a 	bl	1824 <Sys_GetCoreID>
   14330:	4603      	mov	r3, r0
   14332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   14334:	4a10      	ldr	r2, [pc, #64]	; (14378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   14336:	9b01      	ldr	r3, [sp, #4]
   14338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1433c:	2b00      	cmp	r3, #0
   1433e:	d10d      	bne.n	1435c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14340:	f7ec fae2 	bl	908 <Adc_schm_read_msr>
   14344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14346:	9b00      	ldr	r3, [sp, #0]
   14348:	f003 0301 	and.w	r3, r3, #1
   1434c:	2b00      	cmp	r3, #0
   1434e:	d100      	bne.n	14352 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   14352:	490a      	ldr	r1, [pc, #40]	; (1437c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   14354:	9b01      	ldr	r3, [sp, #4]
   14356:	9a00      	ldr	r2, [sp, #0]
   14358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   1435c:	4a06      	ldr	r2, [pc, #24]	; (14378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   1435e:	9b01      	ldr	r3, [sp, #4]
   14360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14364:	1c5a      	adds	r2, r3, #1
   14366:	4904      	ldr	r1, [pc, #16]	; (14378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   14368:	9b01      	ldr	r3, [sp, #4]
   1436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1436e:	bf00      	nop
   14370:	b003      	add	sp, #12
   14372:	f85d fb04 	ldr.w	pc, [sp], #4
   14376:	bf00      	nop
   14378:	1fff9458 	.word	0x1fff9458
   1437c:	1fff9454 	.word	0x1fff9454

00014380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   14380:	b500      	push	{lr}
   14382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14384:	f7ed fa4e 	bl	1824 <Sys_GetCoreID>
   14388:	4603      	mov	r3, r0
   1438a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   1438c:	4a0d      	ldr	r2, [pc, #52]	; (143c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   1438e:	9b01      	ldr	r3, [sp, #4]
   14390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14394:	1e5a      	subs	r2, r3, #1
   14396:	490b      	ldr	r1, [pc, #44]	; (143c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   14398:	9b01      	ldr	r3, [sp, #4]
   1439a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   1439e:	4a0a      	ldr	r2, [pc, #40]	; (143c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   143a0:	9b01      	ldr	r3, [sp, #4]
   143a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143a6:	f003 0301 	and.w	r3, r3, #1
   143aa:	2b00      	cmp	r3, #0
   143ac:	d106      	bne.n	143bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   143ae:	4a05      	ldr	r2, [pc, #20]	; (143c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   143b0:	9b01      	ldr	r3, [sp, #4]
   143b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143b6:	2b00      	cmp	r3, #0
   143b8:	d100      	bne.n	143bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143bc:	bf00      	nop
   143be:	b003      	add	sp, #12
   143c0:	f85d fb04 	ldr.w	pc, [sp], #4
   143c4:	1fff9458 	.word	0x1fff9458
   143c8:	1fff9454 	.word	0x1fff9454

000143cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   143cc:	b500      	push	{lr}
   143ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143d0:	f7ed fa28 	bl	1824 <Sys_GetCoreID>
   143d4:	4603      	mov	r3, r0
   143d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   143d8:	4a10      	ldr	r2, [pc, #64]	; (1441c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   143da:	9b01      	ldr	r3, [sp, #4]
   143dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143e0:	2b00      	cmp	r3, #0
   143e2:	d10d      	bne.n	14400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143e4:	f7ec fa90 	bl	908 <Adc_schm_read_msr>
   143e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143ea:	9b00      	ldr	r3, [sp, #0]
   143ec:	f003 0301 	and.w	r3, r3, #1
   143f0:	2b00      	cmp	r3, #0
   143f2:	d100      	bne.n	143f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   143f6:	490a      	ldr	r1, [pc, #40]	; (14420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   143f8:	9b01      	ldr	r3, [sp, #4]
   143fa:	9a00      	ldr	r2, [sp, #0]
   143fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   14400:	4a06      	ldr	r2, [pc, #24]	; (1441c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   14402:	9b01      	ldr	r3, [sp, #4]
   14404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14408:	1c5a      	adds	r2, r3, #1
   1440a:	4904      	ldr	r1, [pc, #16]	; (1441c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   1440c:	9b01      	ldr	r3, [sp, #4]
   1440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14412:	bf00      	nop
   14414:	b003      	add	sp, #12
   14416:	f85d fb04 	ldr.w	pc, [sp], #4
   1441a:	bf00      	nop
   1441c:	1fff9460 	.word	0x1fff9460
   14420:	1fff945c 	.word	0x1fff945c

00014424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   14424:	b500      	push	{lr}
   14426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14428:	f7ed f9fc 	bl	1824 <Sys_GetCoreID>
   1442c:	4603      	mov	r3, r0
   1442e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   14430:	4a0d      	ldr	r2, [pc, #52]	; (14468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   14432:	9b01      	ldr	r3, [sp, #4]
   14434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14438:	1e5a      	subs	r2, r3, #1
   1443a:	490b      	ldr	r1, [pc, #44]	; (14468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   14442:	4a0a      	ldr	r2, [pc, #40]	; (1446c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   14444:	9b01      	ldr	r3, [sp, #4]
   14446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1444a:	f003 0301 	and.w	r3, r3, #1
   1444e:	2b00      	cmp	r3, #0
   14450:	d106      	bne.n	14460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   14452:	4a05      	ldr	r2, [pc, #20]	; (14468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   14454:	9b01      	ldr	r3, [sp, #4]
   14456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1445a:	2b00      	cmp	r3, #0
   1445c:	d100      	bne.n	14460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1445e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14460:	bf00      	nop
   14462:	b003      	add	sp, #12
   14464:	f85d fb04 	ldr.w	pc, [sp], #4
   14468:	1fff9460 	.word	0x1fff9460
   1446c:	1fff945c 	.word	0x1fff945c

00014470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   14470:	b500      	push	{lr}
   14472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14474:	f7ed f9d6 	bl	1824 <Sys_GetCoreID>
   14478:	4603      	mov	r3, r0
   1447a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   1447c:	4a10      	ldr	r2, [pc, #64]	; (144c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1447e:	9b01      	ldr	r3, [sp, #4]
   14480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14484:	2b00      	cmp	r3, #0
   14486:	d10d      	bne.n	144a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14488:	f7ec fa3e 	bl	908 <Adc_schm_read_msr>
   1448c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1448e:	9b00      	ldr	r3, [sp, #0]
   14490:	f003 0301 	and.w	r3, r3, #1
   14494:	2b00      	cmp	r3, #0
   14496:	d100      	bne.n	1449a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   1449a:	490a      	ldr	r1, [pc, #40]	; (144c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   1449c:	9b01      	ldr	r3, [sp, #4]
   1449e:	9a00      	ldr	r2, [sp, #0]
   144a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   144a4:	4a06      	ldr	r2, [pc, #24]	; (144c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   144a6:	9b01      	ldr	r3, [sp, #4]
   144a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ac:	1c5a      	adds	r2, r3, #1
   144ae:	4904      	ldr	r1, [pc, #16]	; (144c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   144b0:	9b01      	ldr	r3, [sp, #4]
   144b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144b6:	bf00      	nop
   144b8:	b003      	add	sp, #12
   144ba:	f85d fb04 	ldr.w	pc, [sp], #4
   144be:	bf00      	nop
   144c0:	1fff9468 	.word	0x1fff9468
   144c4:	1fff9464 	.word	0x1fff9464

000144c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   144c8:	b500      	push	{lr}
   144ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144cc:	f7ed f9aa 	bl	1824 <Sys_GetCoreID>
   144d0:	4603      	mov	r3, r0
   144d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   144d4:	4a0d      	ldr	r2, [pc, #52]	; (1450c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   144d6:	9b01      	ldr	r3, [sp, #4]
   144d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144dc:	1e5a      	subs	r2, r3, #1
   144de:	490b      	ldr	r1, [pc, #44]	; (1450c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   144e6:	4a0a      	ldr	r2, [pc, #40]	; (14510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   144e8:	9b01      	ldr	r3, [sp, #4]
   144ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ee:	f003 0301 	and.w	r3, r3, #1
   144f2:	2b00      	cmp	r3, #0
   144f4:	d106      	bne.n	14504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   144f6:	4a05      	ldr	r2, [pc, #20]	; (1450c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   144f8:	9b01      	ldr	r3, [sp, #4]
   144fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144fe:	2b00      	cmp	r3, #0
   14500:	d100      	bne.n	14504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14504:	bf00      	nop
   14506:	b003      	add	sp, #12
   14508:	f85d fb04 	ldr.w	pc, [sp], #4
   1450c:	1fff9468 	.word	0x1fff9468
   14510:	1fff9464 	.word	0x1fff9464

00014514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   14514:	b500      	push	{lr}
   14516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14518:	f7ed f984 	bl	1824 <Sys_GetCoreID>
   1451c:	4603      	mov	r3, r0
   1451e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   14520:	4a10      	ldr	r2, [pc, #64]	; (14564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   14522:	9b01      	ldr	r3, [sp, #4]
   14524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14528:	2b00      	cmp	r3, #0
   1452a:	d10d      	bne.n	14548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1452c:	f7ec f9ec 	bl	908 <Adc_schm_read_msr>
   14530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14532:	9b00      	ldr	r3, [sp, #0]
   14534:	f003 0301 	and.w	r3, r3, #1
   14538:	2b00      	cmp	r3, #0
   1453a:	d100      	bne.n	1453e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1453c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   1453e:	490a      	ldr	r1, [pc, #40]	; (14568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   14540:	9b01      	ldr	r3, [sp, #4]
   14542:	9a00      	ldr	r2, [sp, #0]
   14544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   14548:	4a06      	ldr	r2, [pc, #24]	; (14564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   1454a:	9b01      	ldr	r3, [sp, #4]
   1454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14550:	1c5a      	adds	r2, r3, #1
   14552:	4904      	ldr	r1, [pc, #16]	; (14564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   14554:	9b01      	ldr	r3, [sp, #4]
   14556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1455a:	bf00      	nop
   1455c:	b003      	add	sp, #12
   1455e:	f85d fb04 	ldr.w	pc, [sp], #4
   14562:	bf00      	nop
   14564:	1fff9470 	.word	0x1fff9470
   14568:	1fff946c 	.word	0x1fff946c

0001456c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   1456c:	b500      	push	{lr}
   1456e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14570:	f7ed f958 	bl	1824 <Sys_GetCoreID>
   14574:	4603      	mov	r3, r0
   14576:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   14578:	4a0d      	ldr	r2, [pc, #52]	; (145b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   1457a:	9b01      	ldr	r3, [sp, #4]
   1457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14580:	1e5a      	subs	r2, r3, #1
   14582:	490b      	ldr	r1, [pc, #44]	; (145b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14584:	9b01      	ldr	r3, [sp, #4]
   14586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   1458a:	4a0a      	ldr	r2, [pc, #40]	; (145b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   1458c:	9b01      	ldr	r3, [sp, #4]
   1458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14592:	f003 0301 	and.w	r3, r3, #1
   14596:	2b00      	cmp	r3, #0
   14598:	d106      	bne.n	145a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   1459a:	4a05      	ldr	r2, [pc, #20]	; (145b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   1459c:	9b01      	ldr	r3, [sp, #4]
   1459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145a2:	2b00      	cmp	r3, #0
   145a4:	d100      	bne.n	145a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145a8:	bf00      	nop
   145aa:	b003      	add	sp, #12
   145ac:	f85d fb04 	ldr.w	pc, [sp], #4
   145b0:	1fff9470 	.word	0x1fff9470
   145b4:	1fff946c 	.word	0x1fff946c

000145b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   145b8:	b500      	push	{lr}
   145ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145bc:	f7ed f932 	bl	1824 <Sys_GetCoreID>
   145c0:	4603      	mov	r3, r0
   145c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   145c4:	4a10      	ldr	r2, [pc, #64]	; (14608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   145c6:	9b01      	ldr	r3, [sp, #4]
   145c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145cc:	2b00      	cmp	r3, #0
   145ce:	d10d      	bne.n	145ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145d0:	f7ec f99a 	bl	908 <Adc_schm_read_msr>
   145d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145d6:	9b00      	ldr	r3, [sp, #0]
   145d8:	f003 0301 	and.w	r3, r3, #1
   145dc:	2b00      	cmp	r3, #0
   145de:	d100      	bne.n	145e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   145e2:	490a      	ldr	r1, [pc, #40]	; (1460c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   145e4:	9b01      	ldr	r3, [sp, #4]
   145e6:	9a00      	ldr	r2, [sp, #0]
   145e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   145ec:	4a06      	ldr	r2, [pc, #24]	; (14608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   145ee:	9b01      	ldr	r3, [sp, #4]
   145f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145f4:	1c5a      	adds	r2, r3, #1
   145f6:	4904      	ldr	r1, [pc, #16]	; (14608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   145f8:	9b01      	ldr	r3, [sp, #4]
   145fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145fe:	bf00      	nop
   14600:	b003      	add	sp, #12
   14602:	f85d fb04 	ldr.w	pc, [sp], #4
   14606:	bf00      	nop
   14608:	1fff9478 	.word	0x1fff9478
   1460c:	1fff9474 	.word	0x1fff9474

00014610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   14610:	b500      	push	{lr}
   14612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14614:	f7ed f906 	bl	1824 <Sys_GetCoreID>
   14618:	4603      	mov	r3, r0
   1461a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   1461c:	4a0d      	ldr	r2, [pc, #52]	; (14654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   1461e:	9b01      	ldr	r3, [sp, #4]
   14620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14624:	1e5a      	subs	r2, r3, #1
   14626:	490b      	ldr	r1, [pc, #44]	; (14654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   1462e:	4a0a      	ldr	r2, [pc, #40]	; (14658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   14630:	9b01      	ldr	r3, [sp, #4]
   14632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14636:	f003 0301 	and.w	r3, r3, #1
   1463a:	2b00      	cmp	r3, #0
   1463c:	d106      	bne.n	1464c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   1463e:	4a05      	ldr	r2, [pc, #20]	; (14654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   14640:	9b01      	ldr	r3, [sp, #4]
   14642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14646:	2b00      	cmp	r3, #0
   14648:	d100      	bne.n	1464c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1464a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1464c:	bf00      	nop
   1464e:	b003      	add	sp, #12
   14650:	f85d fb04 	ldr.w	pc, [sp], #4
   14654:	1fff9478 	.word	0x1fff9478
   14658:	1fff9474 	.word	0x1fff9474

0001465c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   1465c:	b500      	push	{lr}
   1465e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14660:	f7ed f8e0 	bl	1824 <Sys_GetCoreID>
   14664:	4603      	mov	r3, r0
   14666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   14668:	4a10      	ldr	r2, [pc, #64]	; (146ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1466a:	9b01      	ldr	r3, [sp, #4]
   1466c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14670:	2b00      	cmp	r3, #0
   14672:	d10d      	bne.n	14690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14674:	f7ec f948 	bl	908 <Adc_schm_read_msr>
   14678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1467a:	9b00      	ldr	r3, [sp, #0]
   1467c:	f003 0301 	and.w	r3, r3, #1
   14680:	2b00      	cmp	r3, #0
   14682:	d100      	bne.n	14686 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   14686:	490a      	ldr	r1, [pc, #40]	; (146b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   14688:	9b01      	ldr	r3, [sp, #4]
   1468a:	9a00      	ldr	r2, [sp, #0]
   1468c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   14690:	4a06      	ldr	r2, [pc, #24]	; (146ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   14692:	9b01      	ldr	r3, [sp, #4]
   14694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14698:	1c5a      	adds	r2, r3, #1
   1469a:	4904      	ldr	r1, [pc, #16]	; (146ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1469c:	9b01      	ldr	r3, [sp, #4]
   1469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146a2:	bf00      	nop
   146a4:	b003      	add	sp, #12
   146a6:	f85d fb04 	ldr.w	pc, [sp], #4
   146aa:	bf00      	nop
   146ac:	1fff9480 	.word	0x1fff9480
   146b0:	1fff947c 	.word	0x1fff947c

000146b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   146b4:	b500      	push	{lr}
   146b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146b8:	f7ed f8b4 	bl	1824 <Sys_GetCoreID>
   146bc:	4603      	mov	r3, r0
   146be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   146c0:	4a0d      	ldr	r2, [pc, #52]	; (146f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   146c2:	9b01      	ldr	r3, [sp, #4]
   146c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c8:	1e5a      	subs	r2, r3, #1
   146ca:	490b      	ldr	r1, [pc, #44]	; (146f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   146d2:	4a0a      	ldr	r2, [pc, #40]	; (146fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   146d4:	9b01      	ldr	r3, [sp, #4]
   146d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146da:	f003 0301 	and.w	r3, r3, #1
   146de:	2b00      	cmp	r3, #0
   146e0:	d106      	bne.n	146f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   146e2:	4a05      	ldr	r2, [pc, #20]	; (146f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   146e4:	9b01      	ldr	r3, [sp, #4]
   146e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146ea:	2b00      	cmp	r3, #0
   146ec:	d100      	bne.n	146f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146f0:	bf00      	nop
   146f2:	b003      	add	sp, #12
   146f4:	f85d fb04 	ldr.w	pc, [sp], #4
   146f8:	1fff9480 	.word	0x1fff9480
   146fc:	1fff947c 	.word	0x1fff947c

00014700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   14700:	b500      	push	{lr}
   14702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14704:	f7ed f88e 	bl	1824 <Sys_GetCoreID>
   14708:	4603      	mov	r3, r0
   1470a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   1470c:	4a10      	ldr	r2, [pc, #64]	; (14750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1470e:	9b01      	ldr	r3, [sp, #4]
   14710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14714:	2b00      	cmp	r3, #0
   14716:	d10d      	bne.n	14734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14718:	f7ec f8f6 	bl	908 <Adc_schm_read_msr>
   1471c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1471e:	9b00      	ldr	r3, [sp, #0]
   14720:	f003 0301 	and.w	r3, r3, #1
   14724:	2b00      	cmp	r3, #0
   14726:	d100      	bne.n	1472a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   1472a:	490a      	ldr	r1, [pc, #40]	; (14754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   1472c:	9b01      	ldr	r3, [sp, #4]
   1472e:	9a00      	ldr	r2, [sp, #0]
   14730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   14734:	4a06      	ldr	r2, [pc, #24]	; (14750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   14736:	9b01      	ldr	r3, [sp, #4]
   14738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1473c:	1c5a      	adds	r2, r3, #1
   1473e:	4904      	ldr	r1, [pc, #16]	; (14750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   14740:	9b01      	ldr	r3, [sp, #4]
   14742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14746:	bf00      	nop
   14748:	b003      	add	sp, #12
   1474a:	f85d fb04 	ldr.w	pc, [sp], #4
   1474e:	bf00      	nop
   14750:	1fff9488 	.word	0x1fff9488
   14754:	1fff9484 	.word	0x1fff9484

00014758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   14758:	b500      	push	{lr}
   1475a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1475c:	f7ed f862 	bl	1824 <Sys_GetCoreID>
   14760:	4603      	mov	r3, r0
   14762:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   14764:	4a0d      	ldr	r2, [pc, #52]	; (1479c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14766:	9b01      	ldr	r3, [sp, #4]
   14768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1476c:	1e5a      	subs	r2, r3, #1
   1476e:	490b      	ldr	r1, [pc, #44]	; (1479c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   14776:	4a0a      	ldr	r2, [pc, #40]	; (147a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   14778:	9b01      	ldr	r3, [sp, #4]
   1477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1477e:	f003 0301 	and.w	r3, r3, #1
   14782:	2b00      	cmp	r3, #0
   14784:	d106      	bne.n	14794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   14786:	4a05      	ldr	r2, [pc, #20]	; (1479c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14788:	9b01      	ldr	r3, [sp, #4]
   1478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1478e:	2b00      	cmp	r3, #0
   14790:	d100      	bne.n	14794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14794:	bf00      	nop
   14796:	b003      	add	sp, #12
   14798:	f85d fb04 	ldr.w	pc, [sp], #4
   1479c:	1fff9488 	.word	0x1fff9488
   147a0:	1fff9484 	.word	0x1fff9484

000147a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   147a4:	b500      	push	{lr}
   147a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147a8:	f7ed f83c 	bl	1824 <Sys_GetCoreID>
   147ac:	4603      	mov	r3, r0
   147ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   147b0:	4a10      	ldr	r2, [pc, #64]	; (147f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   147b2:	9b01      	ldr	r3, [sp, #4]
   147b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147b8:	2b00      	cmp	r3, #0
   147ba:	d10d      	bne.n	147d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147bc:	f7ec f8a4 	bl	908 <Adc_schm_read_msr>
   147c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147c2:	9b00      	ldr	r3, [sp, #0]
   147c4:	f003 0301 	and.w	r3, r3, #1
   147c8:	2b00      	cmp	r3, #0
   147ca:	d100      	bne.n	147ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   147ce:	490a      	ldr	r1, [pc, #40]	; (147f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   147d0:	9b01      	ldr	r3, [sp, #4]
   147d2:	9a00      	ldr	r2, [sp, #0]
   147d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   147d8:	4a06      	ldr	r2, [pc, #24]	; (147f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   147da:	9b01      	ldr	r3, [sp, #4]
   147dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147e0:	1c5a      	adds	r2, r3, #1
   147e2:	4904      	ldr	r1, [pc, #16]	; (147f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   147e4:	9b01      	ldr	r3, [sp, #4]
   147e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147ea:	bf00      	nop
   147ec:	b003      	add	sp, #12
   147ee:	f85d fb04 	ldr.w	pc, [sp], #4
   147f2:	bf00      	nop
   147f4:	1fff9490 	.word	0x1fff9490
   147f8:	1fff948c 	.word	0x1fff948c

000147fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   147fc:	b500      	push	{lr}
   147fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14800:	f7ed f810 	bl	1824 <Sys_GetCoreID>
   14804:	4603      	mov	r3, r0
   14806:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   14808:	4a0d      	ldr	r2, [pc, #52]	; (14840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1480a:	9b01      	ldr	r3, [sp, #4]
   1480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14810:	1e5a      	subs	r2, r3, #1
   14812:	490b      	ldr	r1, [pc, #44]	; (14840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   1481a:	4a0a      	ldr	r2, [pc, #40]	; (14844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   1481c:	9b01      	ldr	r3, [sp, #4]
   1481e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14822:	f003 0301 	and.w	r3, r3, #1
   14826:	2b00      	cmp	r3, #0
   14828:	d106      	bne.n	14838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   1482a:	4a05      	ldr	r2, [pc, #20]	; (14840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1482c:	9b01      	ldr	r3, [sp, #4]
   1482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14832:	2b00      	cmp	r3, #0
   14834:	d100      	bne.n	14838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14838:	bf00      	nop
   1483a:	b003      	add	sp, #12
   1483c:	f85d fb04 	ldr.w	pc, [sp], #4
   14840:	1fff9490 	.word	0x1fff9490
   14844:	1fff948c 	.word	0x1fff948c

00014848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   14848:	b500      	push	{lr}
   1484a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1484c:	f7ec ffea 	bl	1824 <Sys_GetCoreID>
   14850:	4603      	mov	r3, r0
   14852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   14854:	4a10      	ldr	r2, [pc, #64]	; (14898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14856:	9b01      	ldr	r3, [sp, #4]
   14858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1485c:	2b00      	cmp	r3, #0
   1485e:	d10d      	bne.n	1487c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14860:	f7ec f852 	bl	908 <Adc_schm_read_msr>
   14864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14866:	9b00      	ldr	r3, [sp, #0]
   14868:	f003 0301 	and.w	r3, r3, #1
   1486c:	2b00      	cmp	r3, #0
   1486e:	d100      	bne.n	14872 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   14872:	490a      	ldr	r1, [pc, #40]	; (1489c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   14874:	9b01      	ldr	r3, [sp, #4]
   14876:	9a00      	ldr	r2, [sp, #0]
   14878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   1487c:	4a06      	ldr	r2, [pc, #24]	; (14898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1487e:	9b01      	ldr	r3, [sp, #4]
   14880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14884:	1c5a      	adds	r2, r3, #1
   14886:	4904      	ldr	r1, [pc, #16]	; (14898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14888:	9b01      	ldr	r3, [sp, #4]
   1488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1488e:	bf00      	nop
   14890:	b003      	add	sp, #12
   14892:	f85d fb04 	ldr.w	pc, [sp], #4
   14896:	bf00      	nop
   14898:	1fff9498 	.word	0x1fff9498
   1489c:	1fff9494 	.word	0x1fff9494

000148a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   148a0:	b500      	push	{lr}
   148a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148a4:	f7ec ffbe 	bl	1824 <Sys_GetCoreID>
   148a8:	4603      	mov	r3, r0
   148aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   148ac:	4a0d      	ldr	r2, [pc, #52]	; (148e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   148ae:	9b01      	ldr	r3, [sp, #4]
   148b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148b4:	1e5a      	subs	r2, r3, #1
   148b6:	490b      	ldr	r1, [pc, #44]	; (148e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   148be:	4a0a      	ldr	r2, [pc, #40]	; (148e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   148c0:	9b01      	ldr	r3, [sp, #4]
   148c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148c6:	f003 0301 	and.w	r3, r3, #1
   148ca:	2b00      	cmp	r3, #0
   148cc:	d106      	bne.n	148dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   148ce:	4a05      	ldr	r2, [pc, #20]	; (148e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   148d0:	9b01      	ldr	r3, [sp, #4]
   148d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148d6:	2b00      	cmp	r3, #0
   148d8:	d100      	bne.n	148dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148dc:	bf00      	nop
   148de:	b003      	add	sp, #12
   148e0:	f85d fb04 	ldr.w	pc, [sp], #4
   148e4:	1fff9498 	.word	0x1fff9498
   148e8:	1fff9494 	.word	0x1fff9494

000148ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   148ec:	b500      	push	{lr}
   148ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148f0:	f7ec ff98 	bl	1824 <Sys_GetCoreID>
   148f4:	4603      	mov	r3, r0
   148f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   148f8:	4a10      	ldr	r2, [pc, #64]	; (1493c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   148fa:	9b01      	ldr	r3, [sp, #4]
   148fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14900:	2b00      	cmp	r3, #0
   14902:	d10d      	bne.n	14920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14904:	f7ec f800 	bl	908 <Adc_schm_read_msr>
   14908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1490a:	9b00      	ldr	r3, [sp, #0]
   1490c:	f003 0301 	and.w	r3, r3, #1
   14910:	2b00      	cmp	r3, #0
   14912:	d100      	bne.n	14916 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   14916:	490a      	ldr	r1, [pc, #40]	; (14940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   14918:	9b01      	ldr	r3, [sp, #4]
   1491a:	9a00      	ldr	r2, [sp, #0]
   1491c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   14920:	4a06      	ldr	r2, [pc, #24]	; (1493c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   14922:	9b01      	ldr	r3, [sp, #4]
   14924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14928:	1c5a      	adds	r2, r3, #1
   1492a:	4904      	ldr	r1, [pc, #16]	; (1493c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1492c:	9b01      	ldr	r3, [sp, #4]
   1492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14932:	bf00      	nop
   14934:	b003      	add	sp, #12
   14936:	f85d fb04 	ldr.w	pc, [sp], #4
   1493a:	bf00      	nop
   1493c:	1fff94a0 	.word	0x1fff94a0
   14940:	1fff949c 	.word	0x1fff949c

00014944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   14944:	b500      	push	{lr}
   14946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14948:	f7ec ff6c 	bl	1824 <Sys_GetCoreID>
   1494c:	4603      	mov	r3, r0
   1494e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   14950:	4a0d      	ldr	r2, [pc, #52]	; (14988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14952:	9b01      	ldr	r3, [sp, #4]
   14954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14958:	1e5a      	subs	r2, r3, #1
   1495a:	490b      	ldr	r1, [pc, #44]	; (14988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1495c:	9b01      	ldr	r3, [sp, #4]
   1495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   14962:	4a0a      	ldr	r2, [pc, #40]	; (1498c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   14964:	9b01      	ldr	r3, [sp, #4]
   14966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1496a:	f003 0301 	and.w	r3, r3, #1
   1496e:	2b00      	cmp	r3, #0
   14970:	d106      	bne.n	14980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   14972:	4a05      	ldr	r2, [pc, #20]	; (14988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14974:	9b01      	ldr	r3, [sp, #4]
   14976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1497a:	2b00      	cmp	r3, #0
   1497c:	d100      	bne.n	14980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1497e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14980:	bf00      	nop
   14982:	b003      	add	sp, #12
   14984:	f85d fb04 	ldr.w	pc, [sp], #4
   14988:	1fff94a0 	.word	0x1fff94a0
   1498c:	1fff949c 	.word	0x1fff949c

00014990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   14990:	b500      	push	{lr}
   14992:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14994:	f7ec ff46 	bl	1824 <Sys_GetCoreID>
   14998:	4603      	mov	r3, r0
   1499a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   1499c:	4a10      	ldr	r2, [pc, #64]	; (149e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1499e:	9b01      	ldr	r3, [sp, #4]
   149a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149a4:	2b00      	cmp	r3, #0
   149a6:	d10d      	bne.n	149c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149a8:	f7eb ffae 	bl	908 <Adc_schm_read_msr>
   149ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149ae:	9b00      	ldr	r3, [sp, #0]
   149b0:	f003 0301 	and.w	r3, r3, #1
   149b4:	2b00      	cmp	r3, #0
   149b6:	d100      	bne.n	149ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   149ba:	490a      	ldr	r1, [pc, #40]	; (149e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   149bc:	9b01      	ldr	r3, [sp, #4]
   149be:	9a00      	ldr	r2, [sp, #0]
   149c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   149c4:	4a06      	ldr	r2, [pc, #24]	; (149e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   149c6:	9b01      	ldr	r3, [sp, #4]
   149c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149cc:	1c5a      	adds	r2, r3, #1
   149ce:	4904      	ldr	r1, [pc, #16]	; (149e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   149d0:	9b01      	ldr	r3, [sp, #4]
   149d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149d6:	bf00      	nop
   149d8:	b003      	add	sp, #12
   149da:	f85d fb04 	ldr.w	pc, [sp], #4
   149de:	bf00      	nop
   149e0:	1fff94a8 	.word	0x1fff94a8
   149e4:	1fff94a4 	.word	0x1fff94a4

000149e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   149e8:	b500      	push	{lr}
   149ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149ec:	f7ec ff1a 	bl	1824 <Sys_GetCoreID>
   149f0:	4603      	mov	r3, r0
   149f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   149f4:	4a0d      	ldr	r2, [pc, #52]	; (14a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   149f6:	9b01      	ldr	r3, [sp, #4]
   149f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149fc:	1e5a      	subs	r2, r3, #1
   149fe:	490b      	ldr	r1, [pc, #44]	; (14a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   14a06:	4a0a      	ldr	r2, [pc, #40]	; (14a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   14a08:	9b01      	ldr	r3, [sp, #4]
   14a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a0e:	f003 0301 	and.w	r3, r3, #1
   14a12:	2b00      	cmp	r3, #0
   14a14:	d106      	bne.n	14a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   14a16:	4a05      	ldr	r2, [pc, #20]	; (14a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14a18:	9b01      	ldr	r3, [sp, #4]
   14a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a1e:	2b00      	cmp	r3, #0
   14a20:	d100      	bne.n	14a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a24:	bf00      	nop
   14a26:	b003      	add	sp, #12
   14a28:	f85d fb04 	ldr.w	pc, [sp], #4
   14a2c:	1fff94a8 	.word	0x1fff94a8
   14a30:	1fff94a4 	.word	0x1fff94a4

00014a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14a34:	b500      	push	{lr}
   14a36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a38:	f7ec fef4 	bl	1824 <Sys_GetCoreID>
   14a3c:	4603      	mov	r3, r0
   14a3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   14a40:	4a10      	ldr	r2, [pc, #64]	; (14a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14a42:	9b01      	ldr	r3, [sp, #4]
   14a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a48:	2b00      	cmp	r3, #0
   14a4a:	d10d      	bne.n	14a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a4c:	f7eb ff5c 	bl	908 <Adc_schm_read_msr>
   14a50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a52:	9b00      	ldr	r3, [sp, #0]
   14a54:	f003 0301 	and.w	r3, r3, #1
   14a58:	2b00      	cmp	r3, #0
   14a5a:	d100      	bne.n	14a5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   14a5e:	490a      	ldr	r1, [pc, #40]	; (14a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   14a60:	9b01      	ldr	r3, [sp, #4]
   14a62:	9a00      	ldr	r2, [sp, #0]
   14a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   14a68:	4a06      	ldr	r2, [pc, #24]	; (14a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14a6a:	9b01      	ldr	r3, [sp, #4]
   14a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a70:	1c5a      	adds	r2, r3, #1
   14a72:	4904      	ldr	r1, [pc, #16]	; (14a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14a74:	9b01      	ldr	r3, [sp, #4]
   14a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a7a:	bf00      	nop
   14a7c:	b003      	add	sp, #12
   14a7e:	f85d fb04 	ldr.w	pc, [sp], #4
   14a82:	bf00      	nop
   14a84:	1fff94b0 	.word	0x1fff94b0
   14a88:	1fff94ac 	.word	0x1fff94ac

00014a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14a8c:	b500      	push	{lr}
   14a8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a90:	f7ec fec8 	bl	1824 <Sys_GetCoreID>
   14a94:	4603      	mov	r3, r0
   14a96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   14a98:	4a0d      	ldr	r2, [pc, #52]	; (14ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14a9a:	9b01      	ldr	r3, [sp, #4]
   14a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aa0:	1e5a      	subs	r2, r3, #1
   14aa2:	490b      	ldr	r1, [pc, #44]	; (14ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   14aaa:	4a0a      	ldr	r2, [pc, #40]	; (14ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   14aac:	9b01      	ldr	r3, [sp, #4]
   14aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ab2:	f003 0301 	and.w	r3, r3, #1
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d106      	bne.n	14ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   14aba:	4a05      	ldr	r2, [pc, #20]	; (14ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14abc:	9b01      	ldr	r3, [sp, #4]
   14abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ac2:	2b00      	cmp	r3, #0
   14ac4:	d100      	bne.n	14ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ac6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ac8:	bf00      	nop
   14aca:	b003      	add	sp, #12
   14acc:	f85d fb04 	ldr.w	pc, [sp], #4
   14ad0:	1fff94b0 	.word	0x1fff94b0
   14ad4:	1fff94ac 	.word	0x1fff94ac

00014ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14ad8:	b500      	push	{lr}
   14ada:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14adc:	f7ec fea2 	bl	1824 <Sys_GetCoreID>
   14ae0:	4603      	mov	r3, r0
   14ae2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   14ae4:	4a10      	ldr	r2, [pc, #64]	; (14b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14ae6:	9b01      	ldr	r3, [sp, #4]
   14ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aec:	2b00      	cmp	r3, #0
   14aee:	d10d      	bne.n	14b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14af0:	f7eb ff0a 	bl	908 <Adc_schm_read_msr>
   14af4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14af6:	9b00      	ldr	r3, [sp, #0]
   14af8:	f003 0301 	and.w	r3, r3, #1
   14afc:	2b00      	cmp	r3, #0
   14afe:	d100      	bne.n	14b02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   14b02:	490a      	ldr	r1, [pc, #40]	; (14b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   14b04:	9b01      	ldr	r3, [sp, #4]
   14b06:	9a00      	ldr	r2, [sp, #0]
   14b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   14b0c:	4a06      	ldr	r2, [pc, #24]	; (14b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14b0e:	9b01      	ldr	r3, [sp, #4]
   14b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b14:	1c5a      	adds	r2, r3, #1
   14b16:	4904      	ldr	r1, [pc, #16]	; (14b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14b18:	9b01      	ldr	r3, [sp, #4]
   14b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b1e:	bf00      	nop
   14b20:	b003      	add	sp, #12
   14b22:	f85d fb04 	ldr.w	pc, [sp], #4
   14b26:	bf00      	nop
   14b28:	1fff94b8 	.word	0x1fff94b8
   14b2c:	1fff94b4 	.word	0x1fff94b4

00014b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14b30:	b500      	push	{lr}
   14b32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b34:	f7ec fe76 	bl	1824 <Sys_GetCoreID>
   14b38:	4603      	mov	r3, r0
   14b3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   14b3c:	4a0d      	ldr	r2, [pc, #52]	; (14b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14b3e:	9b01      	ldr	r3, [sp, #4]
   14b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b44:	1e5a      	subs	r2, r3, #1
   14b46:	490b      	ldr	r1, [pc, #44]	; (14b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14b48:	9b01      	ldr	r3, [sp, #4]
   14b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   14b4e:	4a0a      	ldr	r2, [pc, #40]	; (14b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   14b50:	9b01      	ldr	r3, [sp, #4]
   14b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b56:	f003 0301 	and.w	r3, r3, #1
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	d106      	bne.n	14b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   14b5e:	4a05      	ldr	r2, [pc, #20]	; (14b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14b60:	9b01      	ldr	r3, [sp, #4]
   14b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b66:	2b00      	cmp	r3, #0
   14b68:	d100      	bne.n	14b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b6c:	bf00      	nop
   14b6e:	b003      	add	sp, #12
   14b70:	f85d fb04 	ldr.w	pc, [sp], #4
   14b74:	1fff94b8 	.word	0x1fff94b8
   14b78:	1fff94b4 	.word	0x1fff94b4

00014b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14b7c:	b500      	push	{lr}
   14b7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b80:	f7ec fe50 	bl	1824 <Sys_GetCoreID>
   14b84:	4603      	mov	r3, r0
   14b86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   14b88:	4a10      	ldr	r2, [pc, #64]	; (14bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14b8a:	9b01      	ldr	r3, [sp, #4]
   14b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b90:	2b00      	cmp	r3, #0
   14b92:	d10d      	bne.n	14bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b94:	f7eb feb8 	bl	908 <Adc_schm_read_msr>
   14b98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b9a:	9b00      	ldr	r3, [sp, #0]
   14b9c:	f003 0301 	and.w	r3, r3, #1
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d100      	bne.n	14ba6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ba4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   14ba6:	490a      	ldr	r1, [pc, #40]	; (14bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   14ba8:	9b01      	ldr	r3, [sp, #4]
   14baa:	9a00      	ldr	r2, [sp, #0]
   14bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   14bb0:	4a06      	ldr	r2, [pc, #24]	; (14bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14bb2:	9b01      	ldr	r3, [sp, #4]
   14bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb8:	1c5a      	adds	r2, r3, #1
   14bba:	4904      	ldr	r1, [pc, #16]	; (14bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14bbc:	9b01      	ldr	r3, [sp, #4]
   14bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bc2:	bf00      	nop
   14bc4:	b003      	add	sp, #12
   14bc6:	f85d fb04 	ldr.w	pc, [sp], #4
   14bca:	bf00      	nop
   14bcc:	1fff94c0 	.word	0x1fff94c0
   14bd0:	1fff94bc 	.word	0x1fff94bc

00014bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14bd4:	b500      	push	{lr}
   14bd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bd8:	f7ec fe24 	bl	1824 <Sys_GetCoreID>
   14bdc:	4603      	mov	r3, r0
   14bde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   14be0:	4a0d      	ldr	r2, [pc, #52]	; (14c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14be2:	9b01      	ldr	r3, [sp, #4]
   14be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be8:	1e5a      	subs	r2, r3, #1
   14bea:	490b      	ldr	r1, [pc, #44]	; (14c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   14bf2:	4a0a      	ldr	r2, [pc, #40]	; (14c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   14bf4:	9b01      	ldr	r3, [sp, #4]
   14bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bfa:	f003 0301 	and.w	r3, r3, #1
   14bfe:	2b00      	cmp	r3, #0
   14c00:	d106      	bne.n	14c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   14c02:	4a05      	ldr	r2, [pc, #20]	; (14c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14c04:	9b01      	ldr	r3, [sp, #4]
   14c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c0a:	2b00      	cmp	r3, #0
   14c0c:	d100      	bne.n	14c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c10:	bf00      	nop
   14c12:	b003      	add	sp, #12
   14c14:	f85d fb04 	ldr.w	pc, [sp], #4
   14c18:	1fff94c0 	.word	0x1fff94c0
   14c1c:	1fff94bc 	.word	0x1fff94bc

00014c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14c20:	b500      	push	{lr}
   14c22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c24:	f7ec fdfe 	bl	1824 <Sys_GetCoreID>
   14c28:	4603      	mov	r3, r0
   14c2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   14c2c:	4a10      	ldr	r2, [pc, #64]	; (14c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14c2e:	9b01      	ldr	r3, [sp, #4]
   14c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c34:	2b00      	cmp	r3, #0
   14c36:	d10d      	bne.n	14c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c38:	f7eb fe66 	bl	908 <Adc_schm_read_msr>
   14c3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c3e:	9b00      	ldr	r3, [sp, #0]
   14c40:	f003 0301 	and.w	r3, r3, #1
   14c44:	2b00      	cmp	r3, #0
   14c46:	d100      	bne.n	14c4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   14c4a:	490a      	ldr	r1, [pc, #40]	; (14c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   14c4c:	9b01      	ldr	r3, [sp, #4]
   14c4e:	9a00      	ldr	r2, [sp, #0]
   14c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   14c54:	4a06      	ldr	r2, [pc, #24]	; (14c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14c56:	9b01      	ldr	r3, [sp, #4]
   14c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c5c:	1c5a      	adds	r2, r3, #1
   14c5e:	4904      	ldr	r1, [pc, #16]	; (14c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14c60:	9b01      	ldr	r3, [sp, #4]
   14c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c66:	bf00      	nop
   14c68:	b003      	add	sp, #12
   14c6a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c6e:	bf00      	nop
   14c70:	1fff94c8 	.word	0x1fff94c8
   14c74:	1fff94c4 	.word	0x1fff94c4

00014c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14c78:	b500      	push	{lr}
   14c7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c7c:	f7ec fdd2 	bl	1824 <Sys_GetCoreID>
   14c80:	4603      	mov	r3, r0
   14c82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   14c84:	4a0d      	ldr	r2, [pc, #52]	; (14cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14c86:	9b01      	ldr	r3, [sp, #4]
   14c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c8c:	1e5a      	subs	r2, r3, #1
   14c8e:	490b      	ldr	r1, [pc, #44]	; (14cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14c90:	9b01      	ldr	r3, [sp, #4]
   14c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   14c96:	4a0a      	ldr	r2, [pc, #40]	; (14cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   14c98:	9b01      	ldr	r3, [sp, #4]
   14c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c9e:	f003 0301 	and.w	r3, r3, #1
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d106      	bne.n	14cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   14ca6:	4a05      	ldr	r2, [pc, #20]	; (14cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14ca8:	9b01      	ldr	r3, [sp, #4]
   14caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cae:	2b00      	cmp	r3, #0
   14cb0:	d100      	bne.n	14cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14cb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cb4:	bf00      	nop
   14cb6:	b003      	add	sp, #12
   14cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   14cbc:	1fff94c8 	.word	0x1fff94c8
   14cc0:	1fff94c4 	.word	0x1fff94c4

00014cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14cc4:	b500      	push	{lr}
   14cc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cc8:	f7ec fdac 	bl	1824 <Sys_GetCoreID>
   14ccc:	4603      	mov	r3, r0
   14cce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   14cd0:	4a10      	ldr	r2, [pc, #64]	; (14d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14cd2:	9b01      	ldr	r3, [sp, #4]
   14cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cd8:	2b00      	cmp	r3, #0
   14cda:	d10d      	bne.n	14cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14cdc:	f7eb fe14 	bl	908 <Adc_schm_read_msr>
   14ce0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ce2:	9b00      	ldr	r3, [sp, #0]
   14ce4:	f003 0301 	and.w	r3, r3, #1
   14ce8:	2b00      	cmp	r3, #0
   14cea:	d100      	bne.n	14cee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14cec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   14cee:	490a      	ldr	r1, [pc, #40]	; (14d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   14cf0:	9b01      	ldr	r3, [sp, #4]
   14cf2:	9a00      	ldr	r2, [sp, #0]
   14cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   14cf8:	4a06      	ldr	r2, [pc, #24]	; (14d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14cfa:	9b01      	ldr	r3, [sp, #4]
   14cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d00:	1c5a      	adds	r2, r3, #1
   14d02:	4904      	ldr	r1, [pc, #16]	; (14d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14d04:	9b01      	ldr	r3, [sp, #4]
   14d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d0a:	bf00      	nop
   14d0c:	b003      	add	sp, #12
   14d0e:	f85d fb04 	ldr.w	pc, [sp], #4
   14d12:	bf00      	nop
   14d14:	1fff94d0 	.word	0x1fff94d0
   14d18:	1fff94cc 	.word	0x1fff94cc

00014d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14d1c:	b500      	push	{lr}
   14d1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d20:	f7ec fd80 	bl	1824 <Sys_GetCoreID>
   14d24:	4603      	mov	r3, r0
   14d26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   14d28:	4a0d      	ldr	r2, [pc, #52]	; (14d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14d2a:	9b01      	ldr	r3, [sp, #4]
   14d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d30:	1e5a      	subs	r2, r3, #1
   14d32:	490b      	ldr	r1, [pc, #44]	; (14d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   14d3a:	4a0a      	ldr	r2, [pc, #40]	; (14d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   14d3c:	9b01      	ldr	r3, [sp, #4]
   14d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d42:	f003 0301 	and.w	r3, r3, #1
   14d46:	2b00      	cmp	r3, #0
   14d48:	d106      	bne.n	14d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   14d4a:	4a05      	ldr	r2, [pc, #20]	; (14d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14d4c:	9b01      	ldr	r3, [sp, #4]
   14d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d52:	2b00      	cmp	r3, #0
   14d54:	d100      	bne.n	14d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d58:	bf00      	nop
   14d5a:	b003      	add	sp, #12
   14d5c:	f85d fb04 	ldr.w	pc, [sp], #4
   14d60:	1fff94d0 	.word	0x1fff94d0
   14d64:	1fff94cc 	.word	0x1fff94cc

00014d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14d68:	b500      	push	{lr}
   14d6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d6c:	f7ec fd5a 	bl	1824 <Sys_GetCoreID>
   14d70:	4603      	mov	r3, r0
   14d72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   14d74:	4a10      	ldr	r2, [pc, #64]	; (14db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14d76:	9b01      	ldr	r3, [sp, #4]
   14d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d7c:	2b00      	cmp	r3, #0
   14d7e:	d10d      	bne.n	14d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d80:	f7eb fdc2 	bl	908 <Adc_schm_read_msr>
   14d84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d86:	9b00      	ldr	r3, [sp, #0]
   14d88:	f003 0301 	and.w	r3, r3, #1
   14d8c:	2b00      	cmp	r3, #0
   14d8e:	d100      	bne.n	14d92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   14d92:	490a      	ldr	r1, [pc, #40]	; (14dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	9a00      	ldr	r2, [sp, #0]
   14d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   14d9c:	4a06      	ldr	r2, [pc, #24]	; (14db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14d9e:	9b01      	ldr	r3, [sp, #4]
   14da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14da4:	1c5a      	adds	r2, r3, #1
   14da6:	4904      	ldr	r1, [pc, #16]	; (14db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14da8:	9b01      	ldr	r3, [sp, #4]
   14daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14dae:	bf00      	nop
   14db0:	b003      	add	sp, #12
   14db2:	f85d fb04 	ldr.w	pc, [sp], #4
   14db6:	bf00      	nop
   14db8:	1fff94d8 	.word	0x1fff94d8
   14dbc:	1fff94d4 	.word	0x1fff94d4

00014dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14dc0:	b500      	push	{lr}
   14dc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dc4:	f7ec fd2e 	bl	1824 <Sys_GetCoreID>
   14dc8:	4603      	mov	r3, r0
   14dca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   14dcc:	4a0d      	ldr	r2, [pc, #52]	; (14e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14dce:	9b01      	ldr	r3, [sp, #4]
   14dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dd4:	1e5a      	subs	r2, r3, #1
   14dd6:	490b      	ldr	r1, [pc, #44]	; (14e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   14dde:	4a0a      	ldr	r2, [pc, #40]	; (14e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   14de0:	9b01      	ldr	r3, [sp, #4]
   14de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14de6:	f003 0301 	and.w	r3, r3, #1
   14dea:	2b00      	cmp	r3, #0
   14dec:	d106      	bne.n	14dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   14dee:	4a05      	ldr	r2, [pc, #20]	; (14e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14df0:	9b01      	ldr	r3, [sp, #4]
   14df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14df6:	2b00      	cmp	r3, #0
   14df8:	d100      	bne.n	14dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14dfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14dfc:	bf00      	nop
   14dfe:	b003      	add	sp, #12
   14e00:	f85d fb04 	ldr.w	pc, [sp], #4
   14e04:	1fff94d8 	.word	0x1fff94d8
   14e08:	1fff94d4 	.word	0x1fff94d4

00014e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   14e0c:	b500      	push	{lr}
   14e0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e10:	f7ec fd08 	bl	1824 <Sys_GetCoreID>
   14e14:	4603      	mov	r3, r0
   14e16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   14e18:	4a10      	ldr	r2, [pc, #64]	; (14e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14e1a:	9b01      	ldr	r3, [sp, #4]
   14e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e20:	2b00      	cmp	r3, #0
   14e22:	d10d      	bne.n	14e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e24:	f7eb fd70 	bl	908 <Adc_schm_read_msr>
   14e28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e2a:	9b00      	ldr	r3, [sp, #0]
   14e2c:	f003 0301 	and.w	r3, r3, #1
   14e30:	2b00      	cmp	r3, #0
   14e32:	d100      	bne.n	14e36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   14e36:	490a      	ldr	r1, [pc, #40]	; (14e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   14e38:	9b01      	ldr	r3, [sp, #4]
   14e3a:	9a00      	ldr	r2, [sp, #0]
   14e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   14e40:	4a06      	ldr	r2, [pc, #24]	; (14e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14e42:	9b01      	ldr	r3, [sp, #4]
   14e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e48:	1c5a      	adds	r2, r3, #1
   14e4a:	4904      	ldr	r1, [pc, #16]	; (14e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14e4c:	9b01      	ldr	r3, [sp, #4]
   14e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e52:	bf00      	nop
   14e54:	b003      	add	sp, #12
   14e56:	f85d fb04 	ldr.w	pc, [sp], #4
   14e5a:	bf00      	nop
   14e5c:	1fff94e0 	.word	0x1fff94e0
   14e60:	1fff94dc 	.word	0x1fff94dc

00014e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   14e64:	b500      	push	{lr}
   14e66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e68:	f7ec fcdc 	bl	1824 <Sys_GetCoreID>
   14e6c:	4603      	mov	r3, r0
   14e6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   14e70:	4a0d      	ldr	r2, [pc, #52]	; (14ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14e72:	9b01      	ldr	r3, [sp, #4]
   14e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e78:	1e5a      	subs	r2, r3, #1
   14e7a:	490b      	ldr	r1, [pc, #44]	; (14ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   14e82:	4a0a      	ldr	r2, [pc, #40]	; (14eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   14e84:	9b01      	ldr	r3, [sp, #4]
   14e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e8a:	f003 0301 	and.w	r3, r3, #1
   14e8e:	2b00      	cmp	r3, #0
   14e90:	d106      	bne.n	14ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   14e92:	4a05      	ldr	r2, [pc, #20]	; (14ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14e94:	9b01      	ldr	r3, [sp, #4]
   14e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e9a:	2b00      	cmp	r3, #0
   14e9c:	d100      	bne.n	14ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ea0:	bf00      	nop
   14ea2:	b003      	add	sp, #12
   14ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ea8:	1fff94e0 	.word	0x1fff94e0
   14eac:	1fff94dc 	.word	0x1fff94dc

00014eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   14eb0:	b500      	push	{lr}
   14eb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14eb4:	f7ec fcb6 	bl	1824 <Sys_GetCoreID>
   14eb8:	4603      	mov	r3, r0
   14eba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   14ebc:	4a10      	ldr	r2, [pc, #64]	; (14f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14ebe:	9b01      	ldr	r3, [sp, #4]
   14ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d10d      	bne.n	14ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ec8:	f7eb fd1e 	bl	908 <Adc_schm_read_msr>
   14ecc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ece:	9b00      	ldr	r3, [sp, #0]
   14ed0:	f003 0301 	and.w	r3, r3, #1
   14ed4:	2b00      	cmp	r3, #0
   14ed6:	d100      	bne.n	14eda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ed8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   14eda:	490a      	ldr	r1, [pc, #40]	; (14f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   14edc:	9b01      	ldr	r3, [sp, #4]
   14ede:	9a00      	ldr	r2, [sp, #0]
   14ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   14ee4:	4a06      	ldr	r2, [pc, #24]	; (14f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14ee6:	9b01      	ldr	r3, [sp, #4]
   14ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eec:	1c5a      	adds	r2, r3, #1
   14eee:	4904      	ldr	r1, [pc, #16]	; (14f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14ef0:	9b01      	ldr	r3, [sp, #4]
   14ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ef6:	bf00      	nop
   14ef8:	b003      	add	sp, #12
   14efa:	f85d fb04 	ldr.w	pc, [sp], #4
   14efe:	bf00      	nop
   14f00:	1fff94e8 	.word	0x1fff94e8
   14f04:	1fff94e4 	.word	0x1fff94e4

00014f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   14f08:	b500      	push	{lr}
   14f0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f0c:	f7ec fc8a 	bl	1824 <Sys_GetCoreID>
   14f10:	4603      	mov	r3, r0
   14f12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   14f14:	4a0d      	ldr	r2, [pc, #52]	; (14f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14f16:	9b01      	ldr	r3, [sp, #4]
   14f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f1c:	1e5a      	subs	r2, r3, #1
   14f1e:	490b      	ldr	r1, [pc, #44]	; (14f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   14f26:	4a0a      	ldr	r2, [pc, #40]	; (14f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   14f28:	9b01      	ldr	r3, [sp, #4]
   14f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f2e:	f003 0301 	and.w	r3, r3, #1
   14f32:	2b00      	cmp	r3, #0
   14f34:	d106      	bne.n	14f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   14f36:	4a05      	ldr	r2, [pc, #20]	; (14f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14f38:	9b01      	ldr	r3, [sp, #4]
   14f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f3e:	2b00      	cmp	r3, #0
   14f40:	d100      	bne.n	14f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f44:	bf00      	nop
   14f46:	b003      	add	sp, #12
   14f48:	f85d fb04 	ldr.w	pc, [sp], #4
   14f4c:	1fff94e8 	.word	0x1fff94e8
   14f50:	1fff94e4 	.word	0x1fff94e4

00014f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   14f54:	b500      	push	{lr}
   14f56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f58:	f7ec fc64 	bl	1824 <Sys_GetCoreID>
   14f5c:	4603      	mov	r3, r0
   14f5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   14f60:	4a10      	ldr	r2, [pc, #64]	; (14fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14f62:	9b01      	ldr	r3, [sp, #4]
   14f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f68:	2b00      	cmp	r3, #0
   14f6a:	d10d      	bne.n	14f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f6c:	f7eb fccc 	bl	908 <Adc_schm_read_msr>
   14f70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f72:	9b00      	ldr	r3, [sp, #0]
   14f74:	f003 0301 	and.w	r3, r3, #1
   14f78:	2b00      	cmp	r3, #0
   14f7a:	d100      	bne.n	14f7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   14f7e:	490a      	ldr	r1, [pc, #40]	; (14fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   14f80:	9b01      	ldr	r3, [sp, #4]
   14f82:	9a00      	ldr	r2, [sp, #0]
   14f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   14f88:	4a06      	ldr	r2, [pc, #24]	; (14fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14f8a:	9b01      	ldr	r3, [sp, #4]
   14f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f90:	1c5a      	adds	r2, r3, #1
   14f92:	4904      	ldr	r1, [pc, #16]	; (14fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14f94:	9b01      	ldr	r3, [sp, #4]
   14f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f9a:	bf00      	nop
   14f9c:	b003      	add	sp, #12
   14f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   14fa2:	bf00      	nop
   14fa4:	1fff94f0 	.word	0x1fff94f0
   14fa8:	1fff94ec 	.word	0x1fff94ec

00014fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   14fac:	b500      	push	{lr}
   14fae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fb0:	f7ec fc38 	bl	1824 <Sys_GetCoreID>
   14fb4:	4603      	mov	r3, r0
   14fb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   14fb8:	4a0d      	ldr	r2, [pc, #52]	; (14ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   14fba:	9b01      	ldr	r3, [sp, #4]
   14fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fc0:	1e5a      	subs	r2, r3, #1
   14fc2:	490b      	ldr	r1, [pc, #44]	; (14ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   14fca:	4a0a      	ldr	r2, [pc, #40]	; (14ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   14fcc:	9b01      	ldr	r3, [sp, #4]
   14fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fd2:	f003 0301 	and.w	r3, r3, #1
   14fd6:	2b00      	cmp	r3, #0
   14fd8:	d106      	bne.n	14fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   14fda:	4a05      	ldr	r2, [pc, #20]	; (14ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   14fdc:	9b01      	ldr	r3, [sp, #4]
   14fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fe2:	2b00      	cmp	r3, #0
   14fe4:	d100      	bne.n	14fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fe8:	bf00      	nop
   14fea:	b003      	add	sp, #12
   14fec:	f85d fb04 	ldr.w	pc, [sp], #4
   14ff0:	1fff94f0 	.word	0x1fff94f0
   14ff4:	1fff94ec 	.word	0x1fff94ec

00014ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   14ff8:	b500      	push	{lr}
   14ffa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ffc:	f7ec fc12 	bl	1824 <Sys_GetCoreID>
   15000:	4603      	mov	r3, r0
   15002:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   15004:	4a10      	ldr	r2, [pc, #64]	; (15048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   15006:	9b01      	ldr	r3, [sp, #4]
   15008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1500c:	2b00      	cmp	r3, #0
   1500e:	d10d      	bne.n	1502c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15010:	f7eb fc7a 	bl	908 <Adc_schm_read_msr>
   15014:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15016:	9b00      	ldr	r3, [sp, #0]
   15018:	f003 0301 	and.w	r3, r3, #1
   1501c:	2b00      	cmp	r3, #0
   1501e:	d100      	bne.n	15022 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15020:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   15022:	490a      	ldr	r1, [pc, #40]	; (1504c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   15024:	9b01      	ldr	r3, [sp, #4]
   15026:	9a00      	ldr	r2, [sp, #0]
   15028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   1502c:	4a06      	ldr	r2, [pc, #24]	; (15048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1502e:	9b01      	ldr	r3, [sp, #4]
   15030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15034:	1c5a      	adds	r2, r3, #1
   15036:	4904      	ldr	r1, [pc, #16]	; (15048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   15038:	9b01      	ldr	r3, [sp, #4]
   1503a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1503e:	bf00      	nop
   15040:	b003      	add	sp, #12
   15042:	f85d fb04 	ldr.w	pc, [sp], #4
   15046:	bf00      	nop
   15048:	1fff94f8 	.word	0x1fff94f8
   1504c:	1fff94f4 	.word	0x1fff94f4

00015050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   15050:	b500      	push	{lr}
   15052:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15054:	f7ec fbe6 	bl	1824 <Sys_GetCoreID>
   15058:	4603      	mov	r3, r0
   1505a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   1505c:	4a0d      	ldr	r2, [pc, #52]	; (15094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1505e:	9b01      	ldr	r3, [sp, #4]
   15060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15064:	1e5a      	subs	r2, r3, #1
   15066:	490b      	ldr	r1, [pc, #44]	; (15094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   1506e:	4a0a      	ldr	r2, [pc, #40]	; (15098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   15070:	9b01      	ldr	r3, [sp, #4]
   15072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15076:	f003 0301 	and.w	r3, r3, #1
   1507a:	2b00      	cmp	r3, #0
   1507c:	d106      	bne.n	1508c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   1507e:	4a05      	ldr	r2, [pc, #20]	; (15094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   15080:	9b01      	ldr	r3, [sp, #4]
   15082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15086:	2b00      	cmp	r3, #0
   15088:	d100      	bne.n	1508c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1508a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1508c:	bf00      	nop
   1508e:	b003      	add	sp, #12
   15090:	f85d fb04 	ldr.w	pc, [sp], #4
   15094:	1fff94f8 	.word	0x1fff94f8
   15098:	1fff94f4 	.word	0x1fff94f4

0001509c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   1509c:	b500      	push	{lr}
   1509e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150a0:	f7ec fbc0 	bl	1824 <Sys_GetCoreID>
   150a4:	4603      	mov	r3, r0
   150a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   150a8:	4a10      	ldr	r2, [pc, #64]	; (150ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   150aa:	9b01      	ldr	r3, [sp, #4]
   150ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150b0:	2b00      	cmp	r3, #0
   150b2:	d10d      	bne.n	150d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150b4:	f7eb fc28 	bl	908 <Adc_schm_read_msr>
   150b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150ba:	9b00      	ldr	r3, [sp, #0]
   150bc:	f003 0301 	and.w	r3, r3, #1
   150c0:	2b00      	cmp	r3, #0
   150c2:	d100      	bne.n	150c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   150c6:	490a      	ldr	r1, [pc, #40]	; (150f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   150c8:	9b01      	ldr	r3, [sp, #4]
   150ca:	9a00      	ldr	r2, [sp, #0]
   150cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   150d0:	4a06      	ldr	r2, [pc, #24]	; (150ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   150d2:	9b01      	ldr	r3, [sp, #4]
   150d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150d8:	1c5a      	adds	r2, r3, #1
   150da:	4904      	ldr	r1, [pc, #16]	; (150ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   150dc:	9b01      	ldr	r3, [sp, #4]
   150de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150e2:	bf00      	nop
   150e4:	b003      	add	sp, #12
   150e6:	f85d fb04 	ldr.w	pc, [sp], #4
   150ea:	bf00      	nop
   150ec:	1fff9500 	.word	0x1fff9500
   150f0:	1fff94fc 	.word	0x1fff94fc

000150f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   150f4:	b500      	push	{lr}
   150f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150f8:	f7ec fb94 	bl	1824 <Sys_GetCoreID>
   150fc:	4603      	mov	r3, r0
   150fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   15100:	4a0d      	ldr	r2, [pc, #52]	; (15138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   15102:	9b01      	ldr	r3, [sp, #4]
   15104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15108:	1e5a      	subs	r2, r3, #1
   1510a:	490b      	ldr	r1, [pc, #44]	; (15138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   15112:	4a0a      	ldr	r2, [pc, #40]	; (1513c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   15114:	9b01      	ldr	r3, [sp, #4]
   15116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1511a:	f003 0301 	and.w	r3, r3, #1
   1511e:	2b00      	cmp	r3, #0
   15120:	d106      	bne.n	15130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   15122:	4a05      	ldr	r2, [pc, #20]	; (15138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   15124:	9b01      	ldr	r3, [sp, #4]
   15126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1512a:	2b00      	cmp	r3, #0
   1512c:	d100      	bne.n	15130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1512e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15130:	bf00      	nop
   15132:	b003      	add	sp, #12
   15134:	f85d fb04 	ldr.w	pc, [sp], #4
   15138:	1fff9500 	.word	0x1fff9500
   1513c:	1fff94fc 	.word	0x1fff94fc

00015140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   15140:	b500      	push	{lr}
   15142:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15144:	f7ec fb6e 	bl	1824 <Sys_GetCoreID>
   15148:	4603      	mov	r3, r0
   1514a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   1514c:	4a10      	ldr	r2, [pc, #64]	; (15190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   1514e:	9b01      	ldr	r3, [sp, #4]
   15150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15154:	2b00      	cmp	r3, #0
   15156:	d10d      	bne.n	15174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15158:	f7eb fbd6 	bl	908 <Adc_schm_read_msr>
   1515c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1515e:	9b00      	ldr	r3, [sp, #0]
   15160:	f003 0301 	and.w	r3, r3, #1
   15164:	2b00      	cmp	r3, #0
   15166:	d100      	bne.n	1516a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15168:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   1516a:	490a      	ldr	r1, [pc, #40]	; (15194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   1516c:	9b01      	ldr	r3, [sp, #4]
   1516e:	9a00      	ldr	r2, [sp, #0]
   15170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   15174:	4a06      	ldr	r2, [pc, #24]	; (15190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   15176:	9b01      	ldr	r3, [sp, #4]
   15178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1517c:	1c5a      	adds	r2, r3, #1
   1517e:	4904      	ldr	r1, [pc, #16]	; (15190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   15180:	9b01      	ldr	r3, [sp, #4]
   15182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15186:	bf00      	nop
   15188:	b003      	add	sp, #12
   1518a:	f85d fb04 	ldr.w	pc, [sp], #4
   1518e:	bf00      	nop
   15190:	1fff9508 	.word	0x1fff9508
   15194:	1fff9504 	.word	0x1fff9504

00015198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   15198:	b500      	push	{lr}
   1519a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1519c:	f7ec fb42 	bl	1824 <Sys_GetCoreID>
   151a0:	4603      	mov	r3, r0
   151a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   151a4:	4a0d      	ldr	r2, [pc, #52]	; (151dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   151a6:	9b01      	ldr	r3, [sp, #4]
   151a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ac:	1e5a      	subs	r2, r3, #1
   151ae:	490b      	ldr	r1, [pc, #44]	; (151dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   151b0:	9b01      	ldr	r3, [sp, #4]
   151b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   151b6:	4a0a      	ldr	r2, [pc, #40]	; (151e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   151b8:	9b01      	ldr	r3, [sp, #4]
   151ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151be:	f003 0301 	and.w	r3, r3, #1
   151c2:	2b00      	cmp	r3, #0
   151c4:	d106      	bne.n	151d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   151c6:	4a05      	ldr	r2, [pc, #20]	; (151dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   151c8:	9b01      	ldr	r3, [sp, #4]
   151ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ce:	2b00      	cmp	r3, #0
   151d0:	d100      	bne.n	151d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151d4:	bf00      	nop
   151d6:	b003      	add	sp, #12
   151d8:	f85d fb04 	ldr.w	pc, [sp], #4
   151dc:	1fff9508 	.word	0x1fff9508
   151e0:	1fff9504 	.word	0x1fff9504

000151e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   151e4:	b500      	push	{lr}
   151e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151e8:	f7ec fb1c 	bl	1824 <Sys_GetCoreID>
   151ec:	4603      	mov	r3, r0
   151ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   151f0:	4a10      	ldr	r2, [pc, #64]	; (15234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   151f2:	9b01      	ldr	r3, [sp, #4]
   151f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151f8:	2b00      	cmp	r3, #0
   151fa:	d10d      	bne.n	15218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151fc:	f7eb fb84 	bl	908 <Adc_schm_read_msr>
   15200:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15202:	9b00      	ldr	r3, [sp, #0]
   15204:	f003 0301 	and.w	r3, r3, #1
   15208:	2b00      	cmp	r3, #0
   1520a:	d100      	bne.n	1520e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1520c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   1520e:	490a      	ldr	r1, [pc, #40]	; (15238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   15210:	9b01      	ldr	r3, [sp, #4]
   15212:	9a00      	ldr	r2, [sp, #0]
   15214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   15218:	4a06      	ldr	r2, [pc, #24]	; (15234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   1521a:	9b01      	ldr	r3, [sp, #4]
   1521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15220:	1c5a      	adds	r2, r3, #1
   15222:	4904      	ldr	r1, [pc, #16]	; (15234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   15224:	9b01      	ldr	r3, [sp, #4]
   15226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1522a:	bf00      	nop
   1522c:	b003      	add	sp, #12
   1522e:	f85d fb04 	ldr.w	pc, [sp], #4
   15232:	bf00      	nop
   15234:	1fff9510 	.word	0x1fff9510
   15238:	1fff950c 	.word	0x1fff950c

0001523c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   1523c:	b500      	push	{lr}
   1523e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15240:	f7ec faf0 	bl	1824 <Sys_GetCoreID>
   15244:	4603      	mov	r3, r0
   15246:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   15248:	4a0d      	ldr	r2, [pc, #52]	; (15280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   1524a:	9b01      	ldr	r3, [sp, #4]
   1524c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15250:	1e5a      	subs	r2, r3, #1
   15252:	490b      	ldr	r1, [pc, #44]	; (15280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   1525a:	4a0a      	ldr	r2, [pc, #40]	; (15284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   1525c:	9b01      	ldr	r3, [sp, #4]
   1525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15262:	f003 0301 	and.w	r3, r3, #1
   15266:	2b00      	cmp	r3, #0
   15268:	d106      	bne.n	15278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   1526a:	4a05      	ldr	r2, [pc, #20]	; (15280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   1526c:	9b01      	ldr	r3, [sp, #4]
   1526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15272:	2b00      	cmp	r3, #0
   15274:	d100      	bne.n	15278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15276:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15278:	bf00      	nop
   1527a:	b003      	add	sp, #12
   1527c:	f85d fb04 	ldr.w	pc, [sp], #4
   15280:	1fff9510 	.word	0x1fff9510
   15284:	1fff950c 	.word	0x1fff950c

00015288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   15288:	b500      	push	{lr}
   1528a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1528c:	f7ec faca 	bl	1824 <Sys_GetCoreID>
   15290:	4603      	mov	r3, r0
   15292:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   15294:	4a10      	ldr	r2, [pc, #64]	; (152d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   15296:	9b01      	ldr	r3, [sp, #4]
   15298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1529c:	2b00      	cmp	r3, #0
   1529e:	d10d      	bne.n	152bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   152a0:	f7eb fb32 	bl	908 <Adc_schm_read_msr>
   152a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   152a6:	9b00      	ldr	r3, [sp, #0]
   152a8:	f003 0301 	and.w	r3, r3, #1
   152ac:	2b00      	cmp	r3, #0
   152ae:	d100      	bne.n	152b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   152b2:	490a      	ldr	r1, [pc, #40]	; (152dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   152b4:	9b01      	ldr	r3, [sp, #4]
   152b6:	9a00      	ldr	r2, [sp, #0]
   152b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   152bc:	4a06      	ldr	r2, [pc, #24]	; (152d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   152be:	9b01      	ldr	r3, [sp, #4]
   152c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152c4:	1c5a      	adds	r2, r3, #1
   152c6:	4904      	ldr	r1, [pc, #16]	; (152d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   152c8:	9b01      	ldr	r3, [sp, #4]
   152ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152ce:	bf00      	nop
   152d0:	b003      	add	sp, #12
   152d2:	f85d fb04 	ldr.w	pc, [sp], #4
   152d6:	bf00      	nop
   152d8:	1fff9518 	.word	0x1fff9518
   152dc:	1fff9514 	.word	0x1fff9514

000152e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   152e0:	b500      	push	{lr}
   152e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152e4:	f7ec fa9e 	bl	1824 <Sys_GetCoreID>
   152e8:	4603      	mov	r3, r0
   152ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   152ec:	4a0d      	ldr	r2, [pc, #52]	; (15324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   152ee:	9b01      	ldr	r3, [sp, #4]
   152f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152f4:	1e5a      	subs	r2, r3, #1
   152f6:	490b      	ldr	r1, [pc, #44]	; (15324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   152f8:	9b01      	ldr	r3, [sp, #4]
   152fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   152fe:	4a0a      	ldr	r2, [pc, #40]	; (15328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   15300:	9b01      	ldr	r3, [sp, #4]
   15302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15306:	f003 0301 	and.w	r3, r3, #1
   1530a:	2b00      	cmp	r3, #0
   1530c:	d106      	bne.n	1531c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   1530e:	4a05      	ldr	r2, [pc, #20]	; (15324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   15310:	9b01      	ldr	r3, [sp, #4]
   15312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15316:	2b00      	cmp	r3, #0
   15318:	d100      	bne.n	1531c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1531a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1531c:	bf00      	nop
   1531e:	b003      	add	sp, #12
   15320:	f85d fb04 	ldr.w	pc, [sp], #4
   15324:	1fff9518 	.word	0x1fff9518
   15328:	1fff9514 	.word	0x1fff9514

0001532c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   1532c:	b500      	push	{lr}
   1532e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15330:	f7ec fa78 	bl	1824 <Sys_GetCoreID>
   15334:	4603      	mov	r3, r0
   15336:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   15338:	4a10      	ldr	r2, [pc, #64]	; (1537c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   1533a:	9b01      	ldr	r3, [sp, #4]
   1533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15340:	2b00      	cmp	r3, #0
   15342:	d10d      	bne.n	15360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15344:	f7eb fae0 	bl	908 <Adc_schm_read_msr>
   15348:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1534a:	9b00      	ldr	r3, [sp, #0]
   1534c:	f003 0301 	and.w	r3, r3, #1
   15350:	2b00      	cmp	r3, #0
   15352:	d100      	bne.n	15356 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15354:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   15356:	490a      	ldr	r1, [pc, #40]	; (15380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   15358:	9b01      	ldr	r3, [sp, #4]
   1535a:	9a00      	ldr	r2, [sp, #0]
   1535c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   15360:	4a06      	ldr	r2, [pc, #24]	; (1537c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   15362:	9b01      	ldr	r3, [sp, #4]
   15364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15368:	1c5a      	adds	r2, r3, #1
   1536a:	4904      	ldr	r1, [pc, #16]	; (1537c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   1536c:	9b01      	ldr	r3, [sp, #4]
   1536e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15372:	bf00      	nop
   15374:	b003      	add	sp, #12
   15376:	f85d fb04 	ldr.w	pc, [sp], #4
   1537a:	bf00      	nop
   1537c:	1fff9520 	.word	0x1fff9520
   15380:	1fff951c 	.word	0x1fff951c

00015384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   15384:	b500      	push	{lr}
   15386:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15388:	f7ec fa4c 	bl	1824 <Sys_GetCoreID>
   1538c:	4603      	mov	r3, r0
   1538e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   15390:	4a0d      	ldr	r2, [pc, #52]	; (153c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   15392:	9b01      	ldr	r3, [sp, #4]
   15394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15398:	1e5a      	subs	r2, r3, #1
   1539a:	490b      	ldr	r1, [pc, #44]	; (153c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   153a2:	4a0a      	ldr	r2, [pc, #40]	; (153cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   153a4:	9b01      	ldr	r3, [sp, #4]
   153a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153aa:	f003 0301 	and.w	r3, r3, #1
   153ae:	2b00      	cmp	r3, #0
   153b0:	d106      	bne.n	153c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   153b2:	4a05      	ldr	r2, [pc, #20]	; (153c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   153b4:	9b01      	ldr	r3, [sp, #4]
   153b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ba:	2b00      	cmp	r3, #0
   153bc:	d100      	bne.n	153c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153c0:	bf00      	nop
   153c2:	b003      	add	sp, #12
   153c4:	f85d fb04 	ldr.w	pc, [sp], #4
   153c8:	1fff9520 	.word	0x1fff9520
   153cc:	1fff951c 	.word	0x1fff951c

000153d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   153d0:	b500      	push	{lr}
   153d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153d4:	f7ec fa26 	bl	1824 <Sys_GetCoreID>
   153d8:	4603      	mov	r3, r0
   153da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   153dc:	4a10      	ldr	r2, [pc, #64]	; (15420 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   153de:	9b01      	ldr	r3, [sp, #4]
   153e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153e4:	2b00      	cmp	r3, #0
   153e6:	d10d      	bne.n	15404 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153e8:	f7eb fa97 	bl	91a <Dio_schm_read_msr>
   153ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153ee:	9b00      	ldr	r3, [sp, #0]
   153f0:	f003 0301 	and.w	r3, r3, #1
   153f4:	2b00      	cmp	r3, #0
   153f6:	d100      	bne.n	153fa <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   153fa:	490a      	ldr	r1, [pc, #40]	; (15424 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   153fc:	9b01      	ldr	r3, [sp, #4]
   153fe:	9a00      	ldr	r2, [sp, #0]
   15400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   15404:	4a06      	ldr	r2, [pc, #24]	; (15420 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   15406:	9b01      	ldr	r3, [sp, #4]
   15408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1540c:	1c5a      	adds	r2, r3, #1
   1540e:	4904      	ldr	r1, [pc, #16]	; (15420 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   15410:	9b01      	ldr	r3, [sp, #4]
   15412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15416:	bf00      	nop
   15418:	b003      	add	sp, #12
   1541a:	f85d fb04 	ldr.w	pc, [sp], #4
   1541e:	bf00      	nop
   15420:	1fff9528 	.word	0x1fff9528
   15424:	1fff9524 	.word	0x1fff9524

00015428 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   15428:	b500      	push	{lr}
   1542a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1542c:	f7ec f9fa 	bl	1824 <Sys_GetCoreID>
   15430:	4603      	mov	r3, r0
   15432:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   15434:	4a0d      	ldr	r2, [pc, #52]	; (1546c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   15436:	9b01      	ldr	r3, [sp, #4]
   15438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1543c:	1e5a      	subs	r2, r3, #1
   1543e:	490b      	ldr	r1, [pc, #44]	; (1546c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   15440:	9b01      	ldr	r3, [sp, #4]
   15442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15446:	4a0a      	ldr	r2, [pc, #40]	; (15470 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   15448:	9b01      	ldr	r3, [sp, #4]
   1544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1544e:	f003 0301 	and.w	r3, r3, #1
   15452:	2b00      	cmp	r3, #0
   15454:	d106      	bne.n	15464 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   15456:	4a05      	ldr	r2, [pc, #20]	; (1546c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   15458:	9b01      	ldr	r3, [sp, #4]
   1545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1545e:	2b00      	cmp	r3, #0
   15460:	d100      	bne.n	15464 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15462:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15464:	bf00      	nop
   15466:	b003      	add	sp, #12
   15468:	f85d fb04 	ldr.w	pc, [sp], #4
   1546c:	1fff9528 	.word	0x1fff9528
   15470:	1fff9524 	.word	0x1fff9524

00015474 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   15474:	b500      	push	{lr}
   15476:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15478:	f7ec f9d4 	bl	1824 <Sys_GetCoreID>
   1547c:	4603      	mov	r3, r0
   1547e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   15480:	4a10      	ldr	r2, [pc, #64]	; (154c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   15482:	9b01      	ldr	r3, [sp, #4]
   15484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15488:	2b00      	cmp	r3, #0
   1548a:	d10d      	bne.n	154a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1548c:	f7eb fa45 	bl	91a <Dio_schm_read_msr>
   15490:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15492:	9b00      	ldr	r3, [sp, #0]
   15494:	f003 0301 	and.w	r3, r3, #1
   15498:	2b00      	cmp	r3, #0
   1549a:	d100      	bne.n	1549e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1549c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1549e:	490a      	ldr	r1, [pc, #40]	; (154c8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   154a0:	9b01      	ldr	r3, [sp, #4]
   154a2:	9a00      	ldr	r2, [sp, #0]
   154a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   154a8:	4a06      	ldr	r2, [pc, #24]	; (154c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   154aa:	9b01      	ldr	r3, [sp, #4]
   154ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154b0:	1c5a      	adds	r2, r3, #1
   154b2:	4904      	ldr	r1, [pc, #16]	; (154c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   154b4:	9b01      	ldr	r3, [sp, #4]
   154b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154ba:	bf00      	nop
   154bc:	b003      	add	sp, #12
   154be:	f85d fb04 	ldr.w	pc, [sp], #4
   154c2:	bf00      	nop
   154c4:	1fff9530 	.word	0x1fff9530
   154c8:	1fff952c 	.word	0x1fff952c

000154cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   154cc:	b500      	push	{lr}
   154ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154d0:	f7ec f9a8 	bl	1824 <Sys_GetCoreID>
   154d4:	4603      	mov	r3, r0
   154d6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   154d8:	4a0d      	ldr	r2, [pc, #52]	; (15510 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   154da:	9b01      	ldr	r3, [sp, #4]
   154dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154e0:	1e5a      	subs	r2, r3, #1
   154e2:	490b      	ldr	r1, [pc, #44]	; (15510 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   154e4:	9b01      	ldr	r3, [sp, #4]
   154e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   154ea:	4a0a      	ldr	r2, [pc, #40]	; (15514 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   154ec:	9b01      	ldr	r3, [sp, #4]
   154ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154f2:	f003 0301 	and.w	r3, r3, #1
   154f6:	2b00      	cmp	r3, #0
   154f8:	d106      	bne.n	15508 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   154fa:	4a05      	ldr	r2, [pc, #20]	; (15510 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   154fc:	9b01      	ldr	r3, [sp, #4]
   154fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15502:	2b00      	cmp	r3, #0
   15504:	d100      	bne.n	15508 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15506:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15508:	bf00      	nop
   1550a:	b003      	add	sp, #12
   1550c:	f85d fb04 	ldr.w	pc, [sp], #4
   15510:	1fff9530 	.word	0x1fff9530
   15514:	1fff952c 	.word	0x1fff952c

00015518 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   15518:	b500      	push	{lr}
   1551a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1551c:	f7ec f982 	bl	1824 <Sys_GetCoreID>
   15520:	4603      	mov	r3, r0
   15522:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   15524:	4a10      	ldr	r2, [pc, #64]	; (15568 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   15526:	9b01      	ldr	r3, [sp, #4]
   15528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1552c:	2b00      	cmp	r3, #0
   1552e:	d10d      	bne.n	1554c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15530:	f7eb f9fc 	bl	92c <Mcu_schm_read_msr>
   15534:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15536:	9b00      	ldr	r3, [sp, #0]
   15538:	f003 0301 	and.w	r3, r3, #1
   1553c:	2b00      	cmp	r3, #0
   1553e:	d100      	bne.n	15542 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15540:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15542:	490a      	ldr	r1, [pc, #40]	; (1556c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   15544:	9b01      	ldr	r3, [sp, #4]
   15546:	9a00      	ldr	r2, [sp, #0]
   15548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   1554c:	4a06      	ldr	r2, [pc, #24]	; (15568 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   1554e:	9b01      	ldr	r3, [sp, #4]
   15550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15554:	1c5a      	adds	r2, r3, #1
   15556:	4904      	ldr	r1, [pc, #16]	; (15568 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   15558:	9b01      	ldr	r3, [sp, #4]
   1555a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1555e:	bf00      	nop
   15560:	b003      	add	sp, #12
   15562:	f85d fb04 	ldr.w	pc, [sp], #4
   15566:	bf00      	nop
   15568:	1fff9538 	.word	0x1fff9538
   1556c:	1fff9534 	.word	0x1fff9534

00015570 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   15570:	b500      	push	{lr}
   15572:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15574:	f7ec f956 	bl	1824 <Sys_GetCoreID>
   15578:	4603      	mov	r3, r0
   1557a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   1557c:	4a0d      	ldr	r2, [pc, #52]	; (155b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1557e:	9b01      	ldr	r3, [sp, #4]
   15580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15584:	1e5a      	subs	r2, r3, #1
   15586:	490b      	ldr	r1, [pc, #44]	; (155b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   15588:	9b01      	ldr	r3, [sp, #4]
   1558a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1558e:	4a0a      	ldr	r2, [pc, #40]	; (155b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   15590:	9b01      	ldr	r3, [sp, #4]
   15592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15596:	f003 0301 	and.w	r3, r3, #1
   1559a:	2b00      	cmp	r3, #0
   1559c:	d106      	bne.n	155ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   1559e:	4a05      	ldr	r2, [pc, #20]	; (155b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   155a0:	9b01      	ldr	r3, [sp, #4]
   155a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155a6:	2b00      	cmp	r3, #0
   155a8:	d100      	bne.n	155ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155ac:	bf00      	nop
   155ae:	b003      	add	sp, #12
   155b0:	f85d fb04 	ldr.w	pc, [sp], #4
   155b4:	1fff9538 	.word	0x1fff9538
   155b8:	1fff9534 	.word	0x1fff9534

000155bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   155bc:	b500      	push	{lr}
   155be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155c0:	f7ec f930 	bl	1824 <Sys_GetCoreID>
   155c4:	4603      	mov	r3, r0
   155c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   155c8:	4a10      	ldr	r2, [pc, #64]	; (1560c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   155ca:	9b01      	ldr	r3, [sp, #4]
   155cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155d0:	2b00      	cmp	r3, #0
   155d2:	d10d      	bne.n	155f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155d4:	f7eb f9aa 	bl	92c <Mcu_schm_read_msr>
   155d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155da:	9b00      	ldr	r3, [sp, #0]
   155dc:	f003 0301 	and.w	r3, r3, #1
   155e0:	2b00      	cmp	r3, #0
   155e2:	d100      	bne.n	155e6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   155e6:	490a      	ldr	r1, [pc, #40]	; (15610 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   155e8:	9b01      	ldr	r3, [sp, #4]
   155ea:	9a00      	ldr	r2, [sp, #0]
   155ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   155f0:	4a06      	ldr	r2, [pc, #24]	; (1560c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   155f2:	9b01      	ldr	r3, [sp, #4]
   155f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f8:	1c5a      	adds	r2, r3, #1
   155fa:	4904      	ldr	r1, [pc, #16]	; (1560c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   155fc:	9b01      	ldr	r3, [sp, #4]
   155fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15602:	bf00      	nop
   15604:	b003      	add	sp, #12
   15606:	f85d fb04 	ldr.w	pc, [sp], #4
   1560a:	bf00      	nop
   1560c:	1fff9540 	.word	0x1fff9540
   15610:	1fff953c 	.word	0x1fff953c

00015614 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   15614:	b500      	push	{lr}
   15616:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15618:	f7ec f904 	bl	1824 <Sys_GetCoreID>
   1561c:	4603      	mov	r3, r0
   1561e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   15620:	4a0d      	ldr	r2, [pc, #52]	; (15658 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   15622:	9b01      	ldr	r3, [sp, #4]
   15624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15628:	1e5a      	subs	r2, r3, #1
   1562a:	490b      	ldr	r1, [pc, #44]	; (15658 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15632:	4a0a      	ldr	r2, [pc, #40]	; (1565c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   15634:	9b01      	ldr	r3, [sp, #4]
   15636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1563a:	f003 0301 	and.w	r3, r3, #1
   1563e:	2b00      	cmp	r3, #0
   15640:	d106      	bne.n	15650 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   15642:	4a05      	ldr	r2, [pc, #20]	; (15658 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   15644:	9b01      	ldr	r3, [sp, #4]
   15646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1564a:	2b00      	cmp	r3, #0
   1564c:	d100      	bne.n	15650 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1564e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15650:	bf00      	nop
   15652:	b003      	add	sp, #12
   15654:	f85d fb04 	ldr.w	pc, [sp], #4
   15658:	1fff9540 	.word	0x1fff9540
   1565c:	1fff953c 	.word	0x1fff953c

00015660 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   15660:	b500      	push	{lr}
   15662:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15664:	f7ec f8de 	bl	1824 <Sys_GetCoreID>
   15668:	4603      	mov	r3, r0
   1566a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   1566c:	4a10      	ldr	r2, [pc, #64]	; (156b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1566e:	9b01      	ldr	r3, [sp, #4]
   15670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15674:	2b00      	cmp	r3, #0
   15676:	d10d      	bne.n	15694 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15678:	f7eb f958 	bl	92c <Mcu_schm_read_msr>
   1567c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1567e:	9b00      	ldr	r3, [sp, #0]
   15680:	f003 0301 	and.w	r3, r3, #1
   15684:	2b00      	cmp	r3, #0
   15686:	d100      	bne.n	1568a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15688:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   1568a:	490a      	ldr	r1, [pc, #40]	; (156b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   1568c:	9b01      	ldr	r3, [sp, #4]
   1568e:	9a00      	ldr	r2, [sp, #0]
   15690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   15694:	4a06      	ldr	r2, [pc, #24]	; (156b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   15696:	9b01      	ldr	r3, [sp, #4]
   15698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1569c:	1c5a      	adds	r2, r3, #1
   1569e:	4904      	ldr	r1, [pc, #16]	; (156b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   156a0:	9b01      	ldr	r3, [sp, #4]
   156a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   156a6:	bf00      	nop
   156a8:	b003      	add	sp, #12
   156aa:	f85d fb04 	ldr.w	pc, [sp], #4
   156ae:	bf00      	nop
   156b0:	1fff9548 	.word	0x1fff9548
   156b4:	1fff9544 	.word	0x1fff9544

000156b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   156b8:	b500      	push	{lr}
   156ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156bc:	f7ec f8b2 	bl	1824 <Sys_GetCoreID>
   156c0:	4603      	mov	r3, r0
   156c2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   156c4:	4a0d      	ldr	r2, [pc, #52]	; (156fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   156c6:	9b01      	ldr	r3, [sp, #4]
   156c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156cc:	1e5a      	subs	r2, r3, #1
   156ce:	490b      	ldr	r1, [pc, #44]	; (156fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   156d0:	9b01      	ldr	r3, [sp, #4]
   156d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   156d6:	4a0a      	ldr	r2, [pc, #40]	; (15700 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   156d8:	9b01      	ldr	r3, [sp, #4]
   156da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156de:	f003 0301 	and.w	r3, r3, #1
   156e2:	2b00      	cmp	r3, #0
   156e4:	d106      	bne.n	156f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   156e6:	4a05      	ldr	r2, [pc, #20]	; (156fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   156e8:	9b01      	ldr	r3, [sp, #4]
   156ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156ee:	2b00      	cmp	r3, #0
   156f0:	d100      	bne.n	156f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156f4:	bf00      	nop
   156f6:	b003      	add	sp, #12
   156f8:	f85d fb04 	ldr.w	pc, [sp], #4
   156fc:	1fff9548 	.word	0x1fff9548
   15700:	1fff9544 	.word	0x1fff9544

00015704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   15704:	b500      	push	{lr}
   15706:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15708:	f7ec f88c 	bl	1824 <Sys_GetCoreID>
   1570c:	4603      	mov	r3, r0
   1570e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   15710:	4a10      	ldr	r2, [pc, #64]	; (15754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   15712:	9b01      	ldr	r3, [sp, #4]
   15714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15718:	2b00      	cmp	r3, #0
   1571a:	d10d      	bne.n	15738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1571c:	f7eb f90f 	bl	93e <Port_schm_read_msr>
   15720:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15722:	9b00      	ldr	r3, [sp, #0]
   15724:	f003 0301 	and.w	r3, r3, #1
   15728:	2b00      	cmp	r3, #0
   1572a:	d100      	bne.n	1572e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1572c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1572e:	490a      	ldr	r1, [pc, #40]	; (15758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	9a00      	ldr	r2, [sp, #0]
   15734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   15738:	4a06      	ldr	r2, [pc, #24]	; (15754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1573a:	9b01      	ldr	r3, [sp, #4]
   1573c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15740:	1c5a      	adds	r2, r3, #1
   15742:	4904      	ldr	r1, [pc, #16]	; (15754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   15744:	9b01      	ldr	r3, [sp, #4]
   15746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1574a:	bf00      	nop
   1574c:	b003      	add	sp, #12
   1574e:	f85d fb04 	ldr.w	pc, [sp], #4
   15752:	bf00      	nop
   15754:	1fff9550 	.word	0x1fff9550
   15758:	1fff954c 	.word	0x1fff954c

0001575c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   1575c:	b500      	push	{lr}
   1575e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15760:	f7ec f860 	bl	1824 <Sys_GetCoreID>
   15764:	4603      	mov	r3, r0
   15766:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   15768:	4a0d      	ldr	r2, [pc, #52]	; (157a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   1576a:	9b01      	ldr	r3, [sp, #4]
   1576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15770:	1e5a      	subs	r2, r3, #1
   15772:	490b      	ldr	r1, [pc, #44]	; (157a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15774:	9b01      	ldr	r3, [sp, #4]
   15776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1577a:	4a0a      	ldr	r2, [pc, #40]	; (157a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   1577c:	9b01      	ldr	r3, [sp, #4]
   1577e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15782:	f003 0301 	and.w	r3, r3, #1
   15786:	2b00      	cmp	r3, #0
   15788:	d106      	bne.n	15798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   1578a:	4a05      	ldr	r2, [pc, #20]	; (157a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   1578c:	9b01      	ldr	r3, [sp, #4]
   1578e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15792:	2b00      	cmp	r3, #0
   15794:	d100      	bne.n	15798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15796:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15798:	bf00      	nop
   1579a:	b003      	add	sp, #12
   1579c:	f85d fb04 	ldr.w	pc, [sp], #4
   157a0:	1fff9550 	.word	0x1fff9550
   157a4:	1fff954c 	.word	0x1fff954c

000157a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   157a8:	b500      	push	{lr}
   157aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157ac:	f7ec f83a 	bl	1824 <Sys_GetCoreID>
   157b0:	4603      	mov	r3, r0
   157b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   157b4:	4a10      	ldr	r2, [pc, #64]	; (157f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   157b6:	9b01      	ldr	r3, [sp, #4]
   157b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157bc:	2b00      	cmp	r3, #0
   157be:	d10d      	bne.n	157dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157c0:	f7eb f8bd 	bl	93e <Port_schm_read_msr>
   157c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157c6:	9b00      	ldr	r3, [sp, #0]
   157c8:	f003 0301 	and.w	r3, r3, #1
   157cc:	2b00      	cmp	r3, #0
   157ce:	d100      	bne.n	157d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   157d2:	490a      	ldr	r1, [pc, #40]	; (157fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   157d4:	9b01      	ldr	r3, [sp, #4]
   157d6:	9a00      	ldr	r2, [sp, #0]
   157d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   157dc:	4a06      	ldr	r2, [pc, #24]	; (157f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   157de:	9b01      	ldr	r3, [sp, #4]
   157e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157e4:	1c5a      	adds	r2, r3, #1
   157e6:	4904      	ldr	r1, [pc, #16]	; (157f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   157e8:	9b01      	ldr	r3, [sp, #4]
   157ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157ee:	bf00      	nop
   157f0:	b003      	add	sp, #12
   157f2:	f85d fb04 	ldr.w	pc, [sp], #4
   157f6:	bf00      	nop
   157f8:	1fff9558 	.word	0x1fff9558
   157fc:	1fff9554 	.word	0x1fff9554

00015800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   15800:	b500      	push	{lr}
   15802:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15804:	f7ec f80e 	bl	1824 <Sys_GetCoreID>
   15808:	4603      	mov	r3, r0
   1580a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   1580c:	4a0d      	ldr	r2, [pc, #52]	; (15844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1580e:	9b01      	ldr	r3, [sp, #4]
   15810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15814:	1e5a      	subs	r2, r3, #1
   15816:	490b      	ldr	r1, [pc, #44]	; (15844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1581e:	4a0a      	ldr	r2, [pc, #40]	; (15848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   15820:	9b01      	ldr	r3, [sp, #4]
   15822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15826:	f003 0301 	and.w	r3, r3, #1
   1582a:	2b00      	cmp	r3, #0
   1582c:	d106      	bne.n	1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   1582e:	4a05      	ldr	r2, [pc, #20]	; (15844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   15830:	9b01      	ldr	r3, [sp, #4]
   15832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15836:	2b00      	cmp	r3, #0
   15838:	d100      	bne.n	1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1583a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1583c:	bf00      	nop
   1583e:	b003      	add	sp, #12
   15840:	f85d fb04 	ldr.w	pc, [sp], #4
   15844:	1fff9558 	.word	0x1fff9558
   15848:	1fff9554 	.word	0x1fff9554

0001584c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   1584c:	b500      	push	{lr}
   1584e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15850:	f7eb ffe8 	bl	1824 <Sys_GetCoreID>
   15854:	4603      	mov	r3, r0
   15856:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   15858:	4a10      	ldr	r2, [pc, #64]	; (1589c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1585a:	9b01      	ldr	r3, [sp, #4]
   1585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15860:	2b00      	cmp	r3, #0
   15862:	d10d      	bne.n	15880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15864:	f7eb f86b 	bl	93e <Port_schm_read_msr>
   15868:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1586a:	9b00      	ldr	r3, [sp, #0]
   1586c:	f003 0301 	and.w	r3, r3, #1
   15870:	2b00      	cmp	r3, #0
   15872:	d100      	bne.n	15876 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15874:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15876:	490a      	ldr	r1, [pc, #40]	; (158a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   15878:	9b01      	ldr	r3, [sp, #4]
   1587a:	9a00      	ldr	r2, [sp, #0]
   1587c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   15880:	4a06      	ldr	r2, [pc, #24]	; (1589c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15882:	9b01      	ldr	r3, [sp, #4]
   15884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15888:	1c5a      	adds	r2, r3, #1
   1588a:	4904      	ldr	r1, [pc, #16]	; (1589c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1588c:	9b01      	ldr	r3, [sp, #4]
   1588e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15892:	bf00      	nop
   15894:	b003      	add	sp, #12
   15896:	f85d fb04 	ldr.w	pc, [sp], #4
   1589a:	bf00      	nop
   1589c:	1fff9560 	.word	0x1fff9560
   158a0:	1fff955c 	.word	0x1fff955c

000158a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   158a4:	b500      	push	{lr}
   158a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158a8:	f7eb ffbc 	bl	1824 <Sys_GetCoreID>
   158ac:	4603      	mov	r3, r0
   158ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   158b0:	4a0d      	ldr	r2, [pc, #52]	; (158e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   158b2:	9b01      	ldr	r3, [sp, #4]
   158b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b8:	1e5a      	subs	r2, r3, #1
   158ba:	490b      	ldr	r1, [pc, #44]	; (158e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   158bc:	9b01      	ldr	r3, [sp, #4]
   158be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   158c2:	4a0a      	ldr	r2, [pc, #40]	; (158ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   158c4:	9b01      	ldr	r3, [sp, #4]
   158c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ca:	f003 0301 	and.w	r3, r3, #1
   158ce:	2b00      	cmp	r3, #0
   158d0:	d106      	bne.n	158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   158d2:	4a05      	ldr	r2, [pc, #20]	; (158e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   158d4:	9b01      	ldr	r3, [sp, #4]
   158d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158da:	2b00      	cmp	r3, #0
   158dc:	d100      	bne.n	158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158e0:	bf00      	nop
   158e2:	b003      	add	sp, #12
   158e4:	f85d fb04 	ldr.w	pc, [sp], #4
   158e8:	1fff9560 	.word	0x1fff9560
   158ec:	1fff955c 	.word	0x1fff955c

000158f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   158f0:	b500      	push	{lr}
   158f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158f4:	f7eb ff96 	bl	1824 <Sys_GetCoreID>
   158f8:	4603      	mov	r3, r0
   158fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   158fc:	4a10      	ldr	r2, [pc, #64]	; (15940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   158fe:	9b01      	ldr	r3, [sp, #4]
   15900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15904:	2b00      	cmp	r3, #0
   15906:	d10d      	bne.n	15924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15908:	f7eb f819 	bl	93e <Port_schm_read_msr>
   1590c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1590e:	9b00      	ldr	r3, [sp, #0]
   15910:	f003 0301 	and.w	r3, r3, #1
   15914:	2b00      	cmp	r3, #0
   15916:	d100      	bne.n	1591a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15918:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1591a:	490a      	ldr	r1, [pc, #40]	; (15944 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   1591c:	9b01      	ldr	r3, [sp, #4]
   1591e:	9a00      	ldr	r2, [sp, #0]
   15920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   15924:	4a06      	ldr	r2, [pc, #24]	; (15940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   15926:	9b01      	ldr	r3, [sp, #4]
   15928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1592c:	1c5a      	adds	r2, r3, #1
   1592e:	4904      	ldr	r1, [pc, #16]	; (15940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   15930:	9b01      	ldr	r3, [sp, #4]
   15932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15936:	bf00      	nop
   15938:	b003      	add	sp, #12
   1593a:	f85d fb04 	ldr.w	pc, [sp], #4
   1593e:	bf00      	nop
   15940:	1fff9568 	.word	0x1fff9568
   15944:	1fff9564 	.word	0x1fff9564

00015948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   15948:	b500      	push	{lr}
   1594a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1594c:	f7eb ff6a 	bl	1824 <Sys_GetCoreID>
   15950:	4603      	mov	r3, r0
   15952:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   15954:	4a0d      	ldr	r2, [pc, #52]	; (1598c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15956:	9b01      	ldr	r3, [sp, #4]
   15958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1595c:	1e5a      	subs	r2, r3, #1
   1595e:	490b      	ldr	r1, [pc, #44]	; (1598c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   15966:	4a0a      	ldr	r2, [pc, #40]	; (15990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   15968:	9b01      	ldr	r3, [sp, #4]
   1596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1596e:	f003 0301 	and.w	r3, r3, #1
   15972:	2b00      	cmp	r3, #0
   15974:	d106      	bne.n	15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   15976:	4a05      	ldr	r2, [pc, #20]	; (1598c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15978:	9b01      	ldr	r3, [sp, #4]
   1597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1597e:	2b00      	cmp	r3, #0
   15980:	d100      	bne.n	15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15982:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15984:	bf00      	nop
   15986:	b003      	add	sp, #12
   15988:	f85d fb04 	ldr.w	pc, [sp], #4
   1598c:	1fff9568 	.word	0x1fff9568
   15990:	1fff9564 	.word	0x1fff9564

00015994 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   15994:	b500      	push	{lr}
   15996:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15998:	f7eb ff44 	bl	1824 <Sys_GetCoreID>
   1599c:	4603      	mov	r3, r0
   1599e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   159a0:	4a10      	ldr	r2, [pc, #64]	; (159e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   159a2:	9b01      	ldr	r3, [sp, #4]
   159a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159a8:	2b00      	cmp	r3, #0
   159aa:	d10d      	bne.n	159c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159ac:	f7ea ffc7 	bl	93e <Port_schm_read_msr>
   159b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159b2:	9b00      	ldr	r3, [sp, #0]
   159b4:	f003 0301 	and.w	r3, r3, #1
   159b8:	2b00      	cmp	r3, #0
   159ba:	d100      	bne.n	159be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   159be:	490a      	ldr	r1, [pc, #40]	; (159e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   159c0:	9b01      	ldr	r3, [sp, #4]
   159c2:	9a00      	ldr	r2, [sp, #0]
   159c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   159c8:	4a06      	ldr	r2, [pc, #24]	; (159e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   159ca:	9b01      	ldr	r3, [sp, #4]
   159cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159d0:	1c5a      	adds	r2, r3, #1
   159d2:	4904      	ldr	r1, [pc, #16]	; (159e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   159d4:	9b01      	ldr	r3, [sp, #4]
   159d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159da:	bf00      	nop
   159dc:	b003      	add	sp, #12
   159de:	f85d fb04 	ldr.w	pc, [sp], #4
   159e2:	bf00      	nop
   159e4:	1fff9570 	.word	0x1fff9570
   159e8:	1fff956c 	.word	0x1fff956c

000159ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   159ec:	b500      	push	{lr}
   159ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159f0:	f7eb ff18 	bl	1824 <Sys_GetCoreID>
   159f4:	4603      	mov	r3, r0
   159f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   159f8:	4a0d      	ldr	r2, [pc, #52]	; (15a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   159fa:	9b01      	ldr	r3, [sp, #4]
   159fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a00:	1e5a      	subs	r2, r3, #1
   15a02:	490b      	ldr	r1, [pc, #44]	; (15a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15a04:	9b01      	ldr	r3, [sp, #4]
   15a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   15a0a:	4a0a      	ldr	r2, [pc, #40]	; (15a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   15a0c:	9b01      	ldr	r3, [sp, #4]
   15a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a12:	f003 0301 	and.w	r3, r3, #1
   15a16:	2b00      	cmp	r3, #0
   15a18:	d106      	bne.n	15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   15a1a:	4a05      	ldr	r2, [pc, #20]	; (15a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15a1c:	9b01      	ldr	r3, [sp, #4]
   15a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a22:	2b00      	cmp	r3, #0
   15a24:	d100      	bne.n	15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a28:	bf00      	nop
   15a2a:	b003      	add	sp, #12
   15a2c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a30:	1fff9570 	.word	0x1fff9570
   15a34:	1fff956c 	.word	0x1fff956c

00015a38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15a38:	b500      	push	{lr}
   15a3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a3c:	f7eb fef2 	bl	1824 <Sys_GetCoreID>
   15a40:	4603      	mov	r3, r0
   15a42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   15a44:	4a10      	ldr	r2, [pc, #64]	; (15a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15a46:	9b01      	ldr	r3, [sp, #4]
   15a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a4c:	2b00      	cmp	r3, #0
   15a4e:	d10d      	bne.n	15a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a50:	f7ea ff75 	bl	93e <Port_schm_read_msr>
   15a54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a56:	9b00      	ldr	r3, [sp, #0]
   15a58:	f003 0301 	and.w	r3, r3, #1
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d100      	bne.n	15a62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   15a62:	490a      	ldr	r1, [pc, #40]	; (15a8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   15a64:	9b01      	ldr	r3, [sp, #4]
   15a66:	9a00      	ldr	r2, [sp, #0]
   15a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   15a6c:	4a06      	ldr	r2, [pc, #24]	; (15a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15a6e:	9b01      	ldr	r3, [sp, #4]
   15a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a74:	1c5a      	adds	r2, r3, #1
   15a76:	4904      	ldr	r1, [pc, #16]	; (15a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15a78:	9b01      	ldr	r3, [sp, #4]
   15a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a7e:	bf00      	nop
   15a80:	b003      	add	sp, #12
   15a82:	f85d fb04 	ldr.w	pc, [sp], #4
   15a86:	bf00      	nop
   15a88:	1fff9578 	.word	0x1fff9578
   15a8c:	1fff9574 	.word	0x1fff9574

00015a90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15a90:	b500      	push	{lr}
   15a92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a94:	f7eb fec6 	bl	1824 <Sys_GetCoreID>
   15a98:	4603      	mov	r3, r0
   15a9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   15a9c:	4a0d      	ldr	r2, [pc, #52]	; (15ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15a9e:	9b01      	ldr	r3, [sp, #4]
   15aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aa4:	1e5a      	subs	r2, r3, #1
   15aa6:	490b      	ldr	r1, [pc, #44]	; (15ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15aa8:	9b01      	ldr	r3, [sp, #4]
   15aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   15aae:	4a0a      	ldr	r2, [pc, #40]	; (15ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   15ab0:	9b01      	ldr	r3, [sp, #4]
   15ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ab6:	f003 0301 	and.w	r3, r3, #1
   15aba:	2b00      	cmp	r3, #0
   15abc:	d106      	bne.n	15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   15abe:	4a05      	ldr	r2, [pc, #20]	; (15ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15ac0:	9b01      	ldr	r3, [sp, #4]
   15ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ac6:	2b00      	cmp	r3, #0
   15ac8:	d100      	bne.n	15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15aca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15acc:	bf00      	nop
   15ace:	b003      	add	sp, #12
   15ad0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ad4:	1fff9578 	.word	0x1fff9578
   15ad8:	1fff9574 	.word	0x1fff9574

00015adc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15adc:	b500      	push	{lr}
   15ade:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ae0:	f7eb fea0 	bl	1824 <Sys_GetCoreID>
   15ae4:	4603      	mov	r3, r0
   15ae6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   15ae8:	4a10      	ldr	r2, [pc, #64]	; (15b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15aea:	9b01      	ldr	r3, [sp, #4]
   15aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15af0:	2b00      	cmp	r3, #0
   15af2:	d10d      	bne.n	15b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15af4:	f7ea ff23 	bl	93e <Port_schm_read_msr>
   15af8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15afa:	9b00      	ldr	r3, [sp, #0]
   15afc:	f003 0301 	and.w	r3, r3, #1
   15b00:	2b00      	cmp	r3, #0
   15b02:	d100      	bne.n	15b06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   15b06:	490a      	ldr	r1, [pc, #40]	; (15b30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   15b08:	9b01      	ldr	r3, [sp, #4]
   15b0a:	9a00      	ldr	r2, [sp, #0]
   15b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   15b10:	4a06      	ldr	r2, [pc, #24]	; (15b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15b12:	9b01      	ldr	r3, [sp, #4]
   15b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b18:	1c5a      	adds	r2, r3, #1
   15b1a:	4904      	ldr	r1, [pc, #16]	; (15b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15b1c:	9b01      	ldr	r3, [sp, #4]
   15b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b22:	bf00      	nop
   15b24:	b003      	add	sp, #12
   15b26:	f85d fb04 	ldr.w	pc, [sp], #4
   15b2a:	bf00      	nop
   15b2c:	1fff9580 	.word	0x1fff9580
   15b30:	1fff957c 	.word	0x1fff957c

00015b34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15b34:	b500      	push	{lr}
   15b36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b38:	f7eb fe74 	bl	1824 <Sys_GetCoreID>
   15b3c:	4603      	mov	r3, r0
   15b3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   15b40:	4a0d      	ldr	r2, [pc, #52]	; (15b78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15b42:	9b01      	ldr	r3, [sp, #4]
   15b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b48:	1e5a      	subs	r2, r3, #1
   15b4a:	490b      	ldr	r1, [pc, #44]	; (15b78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15b4c:	9b01      	ldr	r3, [sp, #4]
   15b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   15b52:	4a0a      	ldr	r2, [pc, #40]	; (15b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15b54:	9b01      	ldr	r3, [sp, #4]
   15b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b5a:	f003 0301 	and.w	r3, r3, #1
   15b5e:	2b00      	cmp	r3, #0
   15b60:	d106      	bne.n	15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   15b62:	4a05      	ldr	r2, [pc, #20]	; (15b78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15b64:	9b01      	ldr	r3, [sp, #4]
   15b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d100      	bne.n	15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b70:	bf00      	nop
   15b72:	b003      	add	sp, #12
   15b74:	f85d fb04 	ldr.w	pc, [sp], #4
   15b78:	1fff9580 	.word	0x1fff9580
   15b7c:	1fff957c 	.word	0x1fff957c

00015b80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15b80:	b500      	push	{lr}
   15b82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b84:	f7eb fe4e 	bl	1824 <Sys_GetCoreID>
   15b88:	4603      	mov	r3, r0
   15b8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15b8c:	4a10      	ldr	r2, [pc, #64]	; (15bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15b8e:	9b01      	ldr	r3, [sp, #4]
   15b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b94:	2b00      	cmp	r3, #0
   15b96:	d10d      	bne.n	15bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b98:	f7ea fed1 	bl	93e <Port_schm_read_msr>
   15b9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b9e:	9b00      	ldr	r3, [sp, #0]
   15ba0:	f003 0301 	and.w	r3, r3, #1
   15ba4:	2b00      	cmp	r3, #0
   15ba6:	d100      	bne.n	15baa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ba8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15baa:	490a      	ldr	r1, [pc, #40]	; (15bd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15bac:	9b01      	ldr	r3, [sp, #4]
   15bae:	9a00      	ldr	r2, [sp, #0]
   15bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15bb4:	4a06      	ldr	r2, [pc, #24]	; (15bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15bb6:	9b01      	ldr	r3, [sp, #4]
   15bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bbc:	1c5a      	adds	r2, r3, #1
   15bbe:	4904      	ldr	r1, [pc, #16]	; (15bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15bc0:	9b01      	ldr	r3, [sp, #4]
   15bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15bc6:	bf00      	nop
   15bc8:	b003      	add	sp, #12
   15bca:	f85d fb04 	ldr.w	pc, [sp], #4
   15bce:	bf00      	nop
   15bd0:	1fff9588 	.word	0x1fff9588
   15bd4:	1fff9584 	.word	0x1fff9584

00015bd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15bd8:	b500      	push	{lr}
   15bda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bdc:	f7eb fe22 	bl	1824 <Sys_GetCoreID>
   15be0:	4603      	mov	r3, r0
   15be2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15be4:	4a0d      	ldr	r2, [pc, #52]	; (15c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15be6:	9b01      	ldr	r3, [sp, #4]
   15be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bec:	1e5a      	subs	r2, r3, #1
   15bee:	490b      	ldr	r1, [pc, #44]	; (15c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15bf0:	9b01      	ldr	r3, [sp, #4]
   15bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   15bf6:	4a0a      	ldr	r2, [pc, #40]	; (15c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   15bf8:	9b01      	ldr	r3, [sp, #4]
   15bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bfe:	f003 0301 	and.w	r3, r3, #1
   15c02:	2b00      	cmp	r3, #0
   15c04:	d106      	bne.n	15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   15c06:	4a05      	ldr	r2, [pc, #20]	; (15c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15c08:	9b01      	ldr	r3, [sp, #4]
   15c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c0e:	2b00      	cmp	r3, #0
   15c10:	d100      	bne.n	15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c14:	bf00      	nop
   15c16:	b003      	add	sp, #12
   15c18:	f85d fb04 	ldr.w	pc, [sp], #4
   15c1c:	1fff9588 	.word	0x1fff9588
   15c20:	1fff9584 	.word	0x1fff9584

00015c24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15c24:	b500      	push	{lr}
   15c26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c28:	f7eb fdfc 	bl	1824 <Sys_GetCoreID>
   15c2c:	4603      	mov	r3, r0
   15c2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   15c30:	4a10      	ldr	r2, [pc, #64]	; (15c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15c32:	9b01      	ldr	r3, [sp, #4]
   15c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c38:	2b00      	cmp	r3, #0
   15c3a:	d10d      	bne.n	15c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c3c:	f7ea fe7f 	bl	93e <Port_schm_read_msr>
   15c40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c42:	9b00      	ldr	r3, [sp, #0]
   15c44:	f003 0301 	and.w	r3, r3, #1
   15c48:	2b00      	cmp	r3, #0
   15c4a:	d100      	bne.n	15c4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   15c4e:	490a      	ldr	r1, [pc, #40]	; (15c78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   15c50:	9b01      	ldr	r3, [sp, #4]
   15c52:	9a00      	ldr	r2, [sp, #0]
   15c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15c58:	4a06      	ldr	r2, [pc, #24]	; (15c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15c5a:	9b01      	ldr	r3, [sp, #4]
   15c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c60:	1c5a      	adds	r2, r3, #1
   15c62:	4904      	ldr	r1, [pc, #16]	; (15c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15c64:	9b01      	ldr	r3, [sp, #4]
   15c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c6a:	bf00      	nop
   15c6c:	b003      	add	sp, #12
   15c6e:	f85d fb04 	ldr.w	pc, [sp], #4
   15c72:	bf00      	nop
   15c74:	1fff9590 	.word	0x1fff9590
   15c78:	1fff958c 	.word	0x1fff958c

00015c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15c7c:	b500      	push	{lr}
   15c7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c80:	f7eb fdd0 	bl	1824 <Sys_GetCoreID>
   15c84:	4603      	mov	r3, r0
   15c86:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15c88:	4a0d      	ldr	r2, [pc, #52]	; (15cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15c8a:	9b01      	ldr	r3, [sp, #4]
   15c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c90:	1e5a      	subs	r2, r3, #1
   15c92:	490b      	ldr	r1, [pc, #44]	; (15cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15c94:	9b01      	ldr	r3, [sp, #4]
   15c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15c9a:	4a0a      	ldr	r2, [pc, #40]	; (15cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15c9c:	9b01      	ldr	r3, [sp, #4]
   15c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ca2:	f003 0301 	and.w	r3, r3, #1
   15ca6:	2b00      	cmp	r3, #0
   15ca8:	d106      	bne.n	15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15caa:	4a05      	ldr	r2, [pc, #20]	; (15cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15cac:	9b01      	ldr	r3, [sp, #4]
   15cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cb2:	2b00      	cmp	r3, #0
   15cb4:	d100      	bne.n	15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15cb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15cb8:	bf00      	nop
   15cba:	b003      	add	sp, #12
   15cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   15cc0:	1fff9590 	.word	0x1fff9590
   15cc4:	1fff958c 	.word	0x1fff958c

00015cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15cc8:	b500      	push	{lr}
   15cca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ccc:	f7eb fdaa 	bl	1824 <Sys_GetCoreID>
   15cd0:	4603      	mov	r3, r0
   15cd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15cd4:	4a10      	ldr	r2, [pc, #64]	; (15d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15cd6:	9b01      	ldr	r3, [sp, #4]
   15cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cdc:	2b00      	cmp	r3, #0
   15cde:	d10d      	bne.n	15cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ce0:	f7ea fe2d 	bl	93e <Port_schm_read_msr>
   15ce4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ce6:	9b00      	ldr	r3, [sp, #0]
   15ce8:	f003 0301 	and.w	r3, r3, #1
   15cec:	2b00      	cmp	r3, #0
   15cee:	d100      	bne.n	15cf2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15cf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   15cf2:	490a      	ldr	r1, [pc, #40]	; (15d1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15cf4:	9b01      	ldr	r3, [sp, #4]
   15cf6:	9a00      	ldr	r2, [sp, #0]
   15cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   15cfc:	4a06      	ldr	r2, [pc, #24]	; (15d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15cfe:	9b01      	ldr	r3, [sp, #4]
   15d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d04:	1c5a      	adds	r2, r3, #1
   15d06:	4904      	ldr	r1, [pc, #16]	; (15d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15d08:	9b01      	ldr	r3, [sp, #4]
   15d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d0e:	bf00      	nop
   15d10:	b003      	add	sp, #12
   15d12:	f85d fb04 	ldr.w	pc, [sp], #4
   15d16:	bf00      	nop
   15d18:	1fff9598 	.word	0x1fff9598
   15d1c:	1fff9594 	.word	0x1fff9594

00015d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15d20:	b500      	push	{lr}
   15d22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d24:	f7eb fd7e 	bl	1824 <Sys_GetCoreID>
   15d28:	4603      	mov	r3, r0
   15d2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   15d2c:	4a0d      	ldr	r2, [pc, #52]	; (15d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15d2e:	9b01      	ldr	r3, [sp, #4]
   15d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d34:	1e5a      	subs	r2, r3, #1
   15d36:	490b      	ldr	r1, [pc, #44]	; (15d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15d38:	9b01      	ldr	r3, [sp, #4]
   15d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   15d3e:	4a0a      	ldr	r2, [pc, #40]	; (15d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   15d40:	9b01      	ldr	r3, [sp, #4]
   15d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d46:	f003 0301 	and.w	r3, r3, #1
   15d4a:	2b00      	cmp	r3, #0
   15d4c:	d106      	bne.n	15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   15d4e:	4a05      	ldr	r2, [pc, #20]	; (15d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15d50:	9b01      	ldr	r3, [sp, #4]
   15d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d56:	2b00      	cmp	r3, #0
   15d58:	d100      	bne.n	15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d5c:	bf00      	nop
   15d5e:	b003      	add	sp, #12
   15d60:	f85d fb04 	ldr.w	pc, [sp], #4
   15d64:	1fff9598 	.word	0x1fff9598
   15d68:	1fff9594 	.word	0x1fff9594

00015d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15d6c:	b500      	push	{lr}
   15d6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d70:	f7eb fd58 	bl	1824 <Sys_GetCoreID>
   15d74:	4603      	mov	r3, r0
   15d76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15d78:	4a10      	ldr	r2, [pc, #64]	; (15dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15d7a:	9b01      	ldr	r3, [sp, #4]
   15d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d80:	2b00      	cmp	r3, #0
   15d82:	d10d      	bne.n	15da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d84:	f7ea fddb 	bl	93e <Port_schm_read_msr>
   15d88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d8a:	9b00      	ldr	r3, [sp, #0]
   15d8c:	f003 0301 	and.w	r3, r3, #1
   15d90:	2b00      	cmp	r3, #0
   15d92:	d100      	bne.n	15d96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15d96:	490a      	ldr	r1, [pc, #40]	; (15dc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15d98:	9b01      	ldr	r3, [sp, #4]
   15d9a:	9a00      	ldr	r2, [sp, #0]
   15d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15da0:	4a06      	ldr	r2, [pc, #24]	; (15dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15da2:	9b01      	ldr	r3, [sp, #4]
   15da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15da8:	1c5a      	adds	r2, r3, #1
   15daa:	4904      	ldr	r1, [pc, #16]	; (15dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15dac:	9b01      	ldr	r3, [sp, #4]
   15dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15db2:	bf00      	nop
   15db4:	b003      	add	sp, #12
   15db6:	f85d fb04 	ldr.w	pc, [sp], #4
   15dba:	bf00      	nop
   15dbc:	1fff95a0 	.word	0x1fff95a0
   15dc0:	1fff959c 	.word	0x1fff959c

00015dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15dc4:	b500      	push	{lr}
   15dc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dc8:	f7eb fd2c 	bl	1824 <Sys_GetCoreID>
   15dcc:	4603      	mov	r3, r0
   15dce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15dd0:	4a0d      	ldr	r2, [pc, #52]	; (15e08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15dd2:	9b01      	ldr	r3, [sp, #4]
   15dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dd8:	1e5a      	subs	r2, r3, #1
   15dda:	490b      	ldr	r1, [pc, #44]	; (15e08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15ddc:	9b01      	ldr	r3, [sp, #4]
   15dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   15de2:	4a0a      	ldr	r2, [pc, #40]	; (15e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   15de4:	9b01      	ldr	r3, [sp, #4]
   15de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dea:	f003 0301 	and.w	r3, r3, #1
   15dee:	2b00      	cmp	r3, #0
   15df0:	d106      	bne.n	15e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   15df2:	4a05      	ldr	r2, [pc, #20]	; (15e08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15df4:	9b01      	ldr	r3, [sp, #4]
   15df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dfa:	2b00      	cmp	r3, #0
   15dfc:	d100      	bne.n	15e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15dfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e00:	bf00      	nop
   15e02:	b003      	add	sp, #12
   15e04:	f85d fb04 	ldr.w	pc, [sp], #4
   15e08:	1fff95a0 	.word	0x1fff95a0
   15e0c:	1fff959c 	.word	0x1fff959c

00015e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15e10:	b500      	push	{lr}
   15e12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e14:	f7eb fd06 	bl	1824 <Sys_GetCoreID>
   15e18:	4603      	mov	r3, r0
   15e1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   15e1c:	4a10      	ldr	r2, [pc, #64]	; (15e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15e1e:	9b01      	ldr	r3, [sp, #4]
   15e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e24:	2b00      	cmp	r3, #0
   15e26:	d10d      	bne.n	15e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e28:	f7ea fd89 	bl	93e <Port_schm_read_msr>
   15e2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e2e:	9b00      	ldr	r3, [sp, #0]
   15e30:	f003 0301 	and.w	r3, r3, #1
   15e34:	2b00      	cmp	r3, #0
   15e36:	d100      	bne.n	15e3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   15e3a:	490a      	ldr	r1, [pc, #40]	; (15e64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   15e3c:	9b01      	ldr	r3, [sp, #4]
   15e3e:	9a00      	ldr	r2, [sp, #0]
   15e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   15e44:	4a06      	ldr	r2, [pc, #24]	; (15e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15e46:	9b01      	ldr	r3, [sp, #4]
   15e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e4c:	1c5a      	adds	r2, r3, #1
   15e4e:	4904      	ldr	r1, [pc, #16]	; (15e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15e50:	9b01      	ldr	r3, [sp, #4]
   15e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e56:	bf00      	nop
   15e58:	b003      	add	sp, #12
   15e5a:	f85d fb04 	ldr.w	pc, [sp], #4
   15e5e:	bf00      	nop
   15e60:	1fff95a8 	.word	0x1fff95a8
   15e64:	1fff95a4 	.word	0x1fff95a4

00015e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15e68:	b500      	push	{lr}
   15e6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e6c:	f7eb fcda 	bl	1824 <Sys_GetCoreID>
   15e70:	4603      	mov	r3, r0
   15e72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   15e74:	4a0d      	ldr	r2, [pc, #52]	; (15eac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15e76:	9b01      	ldr	r3, [sp, #4]
   15e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e7c:	1e5a      	subs	r2, r3, #1
   15e7e:	490b      	ldr	r1, [pc, #44]	; (15eac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15e80:	9b01      	ldr	r3, [sp, #4]
   15e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   15e86:	4a0a      	ldr	r2, [pc, #40]	; (15eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   15e88:	9b01      	ldr	r3, [sp, #4]
   15e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e8e:	f003 0301 	and.w	r3, r3, #1
   15e92:	2b00      	cmp	r3, #0
   15e94:	d106      	bne.n	15ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   15e96:	4a05      	ldr	r2, [pc, #20]	; (15eac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15e98:	9b01      	ldr	r3, [sp, #4]
   15e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e9e:	2b00      	cmp	r3, #0
   15ea0:	d100      	bne.n	15ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ea2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ea4:	bf00      	nop
   15ea6:	b003      	add	sp, #12
   15ea8:	f85d fb04 	ldr.w	pc, [sp], #4
   15eac:	1fff95a8 	.word	0x1fff95a8
   15eb0:	1fff95a4 	.word	0x1fff95a4

00015eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15eb4:	b500      	push	{lr}
   15eb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15eb8:	f7eb fcb4 	bl	1824 <Sys_GetCoreID>
   15ebc:	4603      	mov	r3, r0
   15ebe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   15ec0:	4a10      	ldr	r2, [pc, #64]	; (15f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15ec2:	9b01      	ldr	r3, [sp, #4]
   15ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ec8:	2b00      	cmp	r3, #0
   15eca:	d10d      	bne.n	15ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ecc:	f7ea fd37 	bl	93e <Port_schm_read_msr>
   15ed0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ed2:	9b00      	ldr	r3, [sp, #0]
   15ed4:	f003 0301 	and.w	r3, r3, #1
   15ed8:	2b00      	cmp	r3, #0
   15eda:	d100      	bne.n	15ede <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15edc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   15ede:	490a      	ldr	r1, [pc, #40]	; (15f08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   15ee0:	9b01      	ldr	r3, [sp, #4]
   15ee2:	9a00      	ldr	r2, [sp, #0]
   15ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   15ee8:	4a06      	ldr	r2, [pc, #24]	; (15f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15eea:	9b01      	ldr	r3, [sp, #4]
   15eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ef0:	1c5a      	adds	r2, r3, #1
   15ef2:	4904      	ldr	r1, [pc, #16]	; (15f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15ef4:	9b01      	ldr	r3, [sp, #4]
   15ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15efa:	bf00      	nop
   15efc:	b003      	add	sp, #12
   15efe:	f85d fb04 	ldr.w	pc, [sp], #4
   15f02:	bf00      	nop
   15f04:	1fff95b0 	.word	0x1fff95b0
   15f08:	1fff95ac 	.word	0x1fff95ac

00015f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15f0c:	b500      	push	{lr}
   15f0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f10:	f7eb fc88 	bl	1824 <Sys_GetCoreID>
   15f14:	4603      	mov	r3, r0
   15f16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   15f18:	4a0d      	ldr	r2, [pc, #52]	; (15f50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15f1a:	9b01      	ldr	r3, [sp, #4]
   15f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f20:	1e5a      	subs	r2, r3, #1
   15f22:	490b      	ldr	r1, [pc, #44]	; (15f50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15f24:	9b01      	ldr	r3, [sp, #4]
   15f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   15f2a:	4a0a      	ldr	r2, [pc, #40]	; (15f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   15f2c:	9b01      	ldr	r3, [sp, #4]
   15f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f32:	f003 0301 	and.w	r3, r3, #1
   15f36:	2b00      	cmp	r3, #0
   15f38:	d106      	bne.n	15f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   15f3a:	4a05      	ldr	r2, [pc, #20]	; (15f50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15f3c:	9b01      	ldr	r3, [sp, #4]
   15f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f42:	2b00      	cmp	r3, #0
   15f44:	d100      	bne.n	15f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f48:	bf00      	nop
   15f4a:	b003      	add	sp, #12
   15f4c:	f85d fb04 	ldr.w	pc, [sp], #4
   15f50:	1fff95b0 	.word	0x1fff95b0
   15f54:	1fff95ac 	.word	0x1fff95ac

00015f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15f58:	b500      	push	{lr}
   15f5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f5c:	f7eb fc62 	bl	1824 <Sys_GetCoreID>
   15f60:	4603      	mov	r3, r0
   15f62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   15f64:	4a10      	ldr	r2, [pc, #64]	; (15fa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15f66:	9b01      	ldr	r3, [sp, #4]
   15f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	d10d      	bne.n	15f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f70:	f7ea fce5 	bl	93e <Port_schm_read_msr>
   15f74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f76:	9b00      	ldr	r3, [sp, #0]
   15f78:	f003 0301 	and.w	r3, r3, #1
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d100      	bne.n	15f82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   15f82:	490a      	ldr	r1, [pc, #40]	; (15fac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   15f84:	9b01      	ldr	r3, [sp, #4]
   15f86:	9a00      	ldr	r2, [sp, #0]
   15f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   15f8c:	4a06      	ldr	r2, [pc, #24]	; (15fa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15f8e:	9b01      	ldr	r3, [sp, #4]
   15f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f94:	1c5a      	adds	r2, r3, #1
   15f96:	4904      	ldr	r1, [pc, #16]	; (15fa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15f98:	9b01      	ldr	r3, [sp, #4]
   15f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f9e:	bf00      	nop
   15fa0:	b003      	add	sp, #12
   15fa2:	f85d fb04 	ldr.w	pc, [sp], #4
   15fa6:	bf00      	nop
   15fa8:	1fff95b8 	.word	0x1fff95b8
   15fac:	1fff95b4 	.word	0x1fff95b4

00015fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15fb0:	b500      	push	{lr}
   15fb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fb4:	f7eb fc36 	bl	1824 <Sys_GetCoreID>
   15fb8:	4603      	mov	r3, r0
   15fba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   15fbc:	4a0d      	ldr	r2, [pc, #52]	; (15ff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15fbe:	9b01      	ldr	r3, [sp, #4]
   15fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fc4:	1e5a      	subs	r2, r3, #1
   15fc6:	490b      	ldr	r1, [pc, #44]	; (15ff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15fc8:	9b01      	ldr	r3, [sp, #4]
   15fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   15fce:	4a0a      	ldr	r2, [pc, #40]	; (15ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   15fd0:	9b01      	ldr	r3, [sp, #4]
   15fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fd6:	f003 0301 	and.w	r3, r3, #1
   15fda:	2b00      	cmp	r3, #0
   15fdc:	d106      	bne.n	15fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   15fde:	4a05      	ldr	r2, [pc, #20]	; (15ff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15fe0:	9b01      	ldr	r3, [sp, #4]
   15fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fe6:	2b00      	cmp	r3, #0
   15fe8:	d100      	bne.n	15fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15fea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fec:	bf00      	nop
   15fee:	b003      	add	sp, #12
   15ff0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ff4:	1fff95b8 	.word	0x1fff95b8
   15ff8:	1fff95b4 	.word	0x1fff95b4

00015ffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15ffc:	b500      	push	{lr}
   15ffe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16000:	f7eb fc10 	bl	1824 <Sys_GetCoreID>
   16004:	4603      	mov	r3, r0
   16006:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   16008:	4a10      	ldr	r2, [pc, #64]	; (1604c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1600a:	9b01      	ldr	r3, [sp, #4]
   1600c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16010:	2b00      	cmp	r3, #0
   16012:	d10d      	bne.n	16030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16014:	f7ea fc93 	bl	93e <Port_schm_read_msr>
   16018:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1601a:	9b00      	ldr	r3, [sp, #0]
   1601c:	f003 0301 	and.w	r3, r3, #1
   16020:	2b00      	cmp	r3, #0
   16022:	d100      	bne.n	16026 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16024:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   16026:	490a      	ldr	r1, [pc, #40]	; (16050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   16028:	9b01      	ldr	r3, [sp, #4]
   1602a:	9a00      	ldr	r2, [sp, #0]
   1602c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   16030:	4a06      	ldr	r2, [pc, #24]	; (1604c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   16032:	9b01      	ldr	r3, [sp, #4]
   16034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16038:	1c5a      	adds	r2, r3, #1
   1603a:	4904      	ldr	r1, [pc, #16]	; (1604c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1603c:	9b01      	ldr	r3, [sp, #4]
   1603e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16042:	bf00      	nop
   16044:	b003      	add	sp, #12
   16046:	f85d fb04 	ldr.w	pc, [sp], #4
   1604a:	bf00      	nop
   1604c:	1fff95c0 	.word	0x1fff95c0
   16050:	1fff95bc 	.word	0x1fff95bc

00016054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   16054:	b500      	push	{lr}
   16056:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16058:	f7eb fbe4 	bl	1824 <Sys_GetCoreID>
   1605c:	4603      	mov	r3, r0
   1605e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   16060:	4a0d      	ldr	r2, [pc, #52]	; (16098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16062:	9b01      	ldr	r3, [sp, #4]
   16064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16068:	1e5a      	subs	r2, r3, #1
   1606a:	490b      	ldr	r1, [pc, #44]	; (16098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1606c:	9b01      	ldr	r3, [sp, #4]
   1606e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   16072:	4a0a      	ldr	r2, [pc, #40]	; (1609c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   16074:	9b01      	ldr	r3, [sp, #4]
   16076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1607a:	f003 0301 	and.w	r3, r3, #1
   1607e:	2b00      	cmp	r3, #0
   16080:	d106      	bne.n	16090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   16082:	4a05      	ldr	r2, [pc, #20]	; (16098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16084:	9b01      	ldr	r3, [sp, #4]
   16086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1608a:	2b00      	cmp	r3, #0
   1608c:	d100      	bne.n	16090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1608e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16090:	bf00      	nop
   16092:	b003      	add	sp, #12
   16094:	f85d fb04 	ldr.w	pc, [sp], #4
   16098:	1fff95c0 	.word	0x1fff95c0
   1609c:	1fff95bc 	.word	0x1fff95bc

000160a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   160a0:	b500      	push	{lr}
   160a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160a4:	f7eb fbbe 	bl	1824 <Sys_GetCoreID>
   160a8:	4603      	mov	r3, r0
   160aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   160ac:	4a10      	ldr	r2, [pc, #64]	; (160f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   160ae:	9b01      	ldr	r3, [sp, #4]
   160b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160b4:	2b00      	cmp	r3, #0
   160b6:	d10d      	bne.n	160d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160b8:	f7ea fc41 	bl	93e <Port_schm_read_msr>
   160bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   160be:	9b00      	ldr	r3, [sp, #0]
   160c0:	f003 0301 	and.w	r3, r3, #1
   160c4:	2b00      	cmp	r3, #0
   160c6:	d100      	bne.n	160ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   160c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   160ca:	490a      	ldr	r1, [pc, #40]	; (160f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   160cc:	9b01      	ldr	r3, [sp, #4]
   160ce:	9a00      	ldr	r2, [sp, #0]
   160d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   160d4:	4a06      	ldr	r2, [pc, #24]	; (160f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   160d6:	9b01      	ldr	r3, [sp, #4]
   160d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160dc:	1c5a      	adds	r2, r3, #1
   160de:	4904      	ldr	r1, [pc, #16]	; (160f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   160e0:	9b01      	ldr	r3, [sp, #4]
   160e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160e6:	bf00      	nop
   160e8:	b003      	add	sp, #12
   160ea:	f85d fb04 	ldr.w	pc, [sp], #4
   160ee:	bf00      	nop
   160f0:	1fff95c8 	.word	0x1fff95c8
   160f4:	1fff95c4 	.word	0x1fff95c4

000160f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   160f8:	b500      	push	{lr}
   160fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160fc:	f7eb fb92 	bl	1824 <Sys_GetCoreID>
   16100:	4603      	mov	r3, r0
   16102:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   16104:	4a0d      	ldr	r2, [pc, #52]	; (1613c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   16106:	9b01      	ldr	r3, [sp, #4]
   16108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1610c:	1e5a      	subs	r2, r3, #1
   1610e:	490b      	ldr	r1, [pc, #44]	; (1613c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   16110:	9b01      	ldr	r3, [sp, #4]
   16112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   16116:	4a0a      	ldr	r2, [pc, #40]	; (16140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   16118:	9b01      	ldr	r3, [sp, #4]
   1611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1611e:	f003 0301 	and.w	r3, r3, #1
   16122:	2b00      	cmp	r3, #0
   16124:	d106      	bne.n	16134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   16126:	4a05      	ldr	r2, [pc, #20]	; (1613c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   16128:	9b01      	ldr	r3, [sp, #4]
   1612a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1612e:	2b00      	cmp	r3, #0
   16130:	d100      	bne.n	16134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16132:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16134:	bf00      	nop
   16136:	b003      	add	sp, #12
   16138:	f85d fb04 	ldr.w	pc, [sp], #4
   1613c:	1fff95c8 	.word	0x1fff95c8
   16140:	1fff95c4 	.word	0x1fff95c4

00016144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   16144:	b500      	push	{lr}
   16146:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16148:	f7eb fb6c 	bl	1824 <Sys_GetCoreID>
   1614c:	4603      	mov	r3, r0
   1614e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   16150:	4a10      	ldr	r2, [pc, #64]	; (16194 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   16152:	9b01      	ldr	r3, [sp, #4]
   16154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16158:	2b00      	cmp	r3, #0
   1615a:	d10d      	bne.n	16178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1615c:	f7ea fbef 	bl	93e <Port_schm_read_msr>
   16160:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16162:	9b00      	ldr	r3, [sp, #0]
   16164:	f003 0301 	and.w	r3, r3, #1
   16168:	2b00      	cmp	r3, #0
   1616a:	d100      	bne.n	1616e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1616c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1616e:	490a      	ldr	r1, [pc, #40]	; (16198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   16170:	9b01      	ldr	r3, [sp, #4]
   16172:	9a00      	ldr	r2, [sp, #0]
   16174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   16178:	4a06      	ldr	r2, [pc, #24]	; (16194 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1617a:	9b01      	ldr	r3, [sp, #4]
   1617c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16180:	1c5a      	adds	r2, r3, #1
   16182:	4904      	ldr	r1, [pc, #16]	; (16194 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   16184:	9b01      	ldr	r3, [sp, #4]
   16186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1618a:	bf00      	nop
   1618c:	b003      	add	sp, #12
   1618e:	f85d fb04 	ldr.w	pc, [sp], #4
   16192:	bf00      	nop
   16194:	1fff95d0 	.word	0x1fff95d0
   16198:	1fff95cc 	.word	0x1fff95cc

0001619c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   1619c:	b500      	push	{lr}
   1619e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161a0:	f7eb fb40 	bl	1824 <Sys_GetCoreID>
   161a4:	4603      	mov	r3, r0
   161a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   161a8:	4a0d      	ldr	r2, [pc, #52]	; (161e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   161aa:	9b01      	ldr	r3, [sp, #4]
   161ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161b0:	1e5a      	subs	r2, r3, #1
   161b2:	490b      	ldr	r1, [pc, #44]	; (161e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   161b4:	9b01      	ldr	r3, [sp, #4]
   161b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   161ba:	4a0a      	ldr	r2, [pc, #40]	; (161e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   161bc:	9b01      	ldr	r3, [sp, #4]
   161be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161c2:	f003 0301 	and.w	r3, r3, #1
   161c6:	2b00      	cmp	r3, #0
   161c8:	d106      	bne.n	161d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   161ca:	4a05      	ldr	r2, [pc, #20]	; (161e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   161cc:	9b01      	ldr	r3, [sp, #4]
   161ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161d2:	2b00      	cmp	r3, #0
   161d4:	d100      	bne.n	161d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   161d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   161d8:	bf00      	nop
   161da:	b003      	add	sp, #12
   161dc:	f85d fb04 	ldr.w	pc, [sp], #4
   161e0:	1fff95d0 	.word	0x1fff95d0
   161e4:	1fff95cc 	.word	0x1fff95cc

000161e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   161e8:	b500      	push	{lr}
   161ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161ec:	f7eb fb1a 	bl	1824 <Sys_GetCoreID>
   161f0:	4603      	mov	r3, r0
   161f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   161f4:	4a10      	ldr	r2, [pc, #64]	; (16238 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   161f6:	9b01      	ldr	r3, [sp, #4]
   161f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161fc:	2b00      	cmp	r3, #0
   161fe:	d10d      	bne.n	1621c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16200:	f7ea fb9d 	bl	93e <Port_schm_read_msr>
   16204:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16206:	9b00      	ldr	r3, [sp, #0]
   16208:	f003 0301 	and.w	r3, r3, #1
   1620c:	2b00      	cmp	r3, #0
   1620e:	d100      	bne.n	16212 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16210:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   16212:	490a      	ldr	r1, [pc, #40]	; (1623c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   16214:	9b01      	ldr	r3, [sp, #4]
   16216:	9a00      	ldr	r2, [sp, #0]
   16218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   1621c:	4a06      	ldr	r2, [pc, #24]	; (16238 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1621e:	9b01      	ldr	r3, [sp, #4]
   16220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16224:	1c5a      	adds	r2, r3, #1
   16226:	4904      	ldr	r1, [pc, #16]	; (16238 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   16228:	9b01      	ldr	r3, [sp, #4]
   1622a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1622e:	bf00      	nop
   16230:	b003      	add	sp, #12
   16232:	f85d fb04 	ldr.w	pc, [sp], #4
   16236:	bf00      	nop
   16238:	1fff95d8 	.word	0x1fff95d8
   1623c:	1fff95d4 	.word	0x1fff95d4

00016240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   16240:	b500      	push	{lr}
   16242:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16244:	f7eb faee 	bl	1824 <Sys_GetCoreID>
   16248:	4603      	mov	r3, r0
   1624a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   1624c:	4a0d      	ldr	r2, [pc, #52]	; (16284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1624e:	9b01      	ldr	r3, [sp, #4]
   16250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16254:	1e5a      	subs	r2, r3, #1
   16256:	490b      	ldr	r1, [pc, #44]	; (16284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   16258:	9b01      	ldr	r3, [sp, #4]
   1625a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1625e:	4a0a      	ldr	r2, [pc, #40]	; (16288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   16260:	9b01      	ldr	r3, [sp, #4]
   16262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16266:	f003 0301 	and.w	r3, r3, #1
   1626a:	2b00      	cmp	r3, #0
   1626c:	d106      	bne.n	1627c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1626e:	4a05      	ldr	r2, [pc, #20]	; (16284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   16270:	9b01      	ldr	r3, [sp, #4]
   16272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16276:	2b00      	cmp	r3, #0
   16278:	d100      	bne.n	1627c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1627a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1627c:	bf00      	nop
   1627e:	b003      	add	sp, #12
   16280:	f85d fb04 	ldr.w	pc, [sp], #4
   16284:	1fff95d8 	.word	0x1fff95d8
   16288:	1fff95d4 	.word	0x1fff95d4

0001628c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   1628c:	b500      	push	{lr}
   1628e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16290:	f7eb fac8 	bl	1824 <Sys_GetCoreID>
   16294:	4603      	mov	r3, r0
   16296:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   16298:	4a10      	ldr	r2, [pc, #64]	; (162dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1629a:	9b01      	ldr	r3, [sp, #4]
   1629c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162a0:	2b00      	cmp	r3, #0
   162a2:	d10d      	bne.n	162c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   162a4:	f7ea fb4b 	bl	93e <Port_schm_read_msr>
   162a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   162aa:	9b00      	ldr	r3, [sp, #0]
   162ac:	f003 0301 	and.w	r3, r3, #1
   162b0:	2b00      	cmp	r3, #0
   162b2:	d100      	bne.n	162b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   162b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   162b6:	490a      	ldr	r1, [pc, #40]	; (162e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   162b8:	9b01      	ldr	r3, [sp, #4]
   162ba:	9a00      	ldr	r2, [sp, #0]
   162bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   162c0:	4a06      	ldr	r2, [pc, #24]	; (162dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   162c2:	9b01      	ldr	r3, [sp, #4]
   162c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162c8:	1c5a      	adds	r2, r3, #1
   162ca:	4904      	ldr	r1, [pc, #16]	; (162dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   162cc:	9b01      	ldr	r3, [sp, #4]
   162ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162d2:	bf00      	nop
   162d4:	b003      	add	sp, #12
   162d6:	f85d fb04 	ldr.w	pc, [sp], #4
   162da:	bf00      	nop
   162dc:	1fff95e0 	.word	0x1fff95e0
   162e0:	1fff95dc 	.word	0x1fff95dc

000162e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   162e4:	b500      	push	{lr}
   162e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162e8:	f7eb fa9c 	bl	1824 <Sys_GetCoreID>
   162ec:	4603      	mov	r3, r0
   162ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   162f0:	4a0d      	ldr	r2, [pc, #52]	; (16328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   162f2:	9b01      	ldr	r3, [sp, #4]
   162f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162f8:	1e5a      	subs	r2, r3, #1
   162fa:	490b      	ldr	r1, [pc, #44]	; (16328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   16302:	4a0a      	ldr	r2, [pc, #40]	; (1632c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   16304:	9b01      	ldr	r3, [sp, #4]
   16306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1630a:	f003 0301 	and.w	r3, r3, #1
   1630e:	2b00      	cmp	r3, #0
   16310:	d106      	bne.n	16320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   16312:	4a05      	ldr	r2, [pc, #20]	; (16328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   16314:	9b01      	ldr	r3, [sp, #4]
   16316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1631a:	2b00      	cmp	r3, #0
   1631c:	d100      	bne.n	16320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1631e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16320:	bf00      	nop
   16322:	b003      	add	sp, #12
   16324:	f85d fb04 	ldr.w	pc, [sp], #4
   16328:	1fff95e0 	.word	0x1fff95e0
   1632c:	1fff95dc 	.word	0x1fff95dc

00016330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   16330:	b500      	push	{lr}
   16332:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16334:	f7eb fa76 	bl	1824 <Sys_GetCoreID>
   16338:	4603      	mov	r3, r0
   1633a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   1633c:	4a10      	ldr	r2, [pc, #64]	; (16380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1633e:	9b01      	ldr	r3, [sp, #4]
   16340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16344:	2b00      	cmp	r3, #0
   16346:	d10d      	bne.n	16364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16348:	f7ea faf9 	bl	93e <Port_schm_read_msr>
   1634c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1634e:	9b00      	ldr	r3, [sp, #0]
   16350:	f003 0301 	and.w	r3, r3, #1
   16354:	2b00      	cmp	r3, #0
   16356:	d100      	bne.n	1635a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16358:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1635a:	490a      	ldr	r1, [pc, #40]	; (16384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   1635c:	9b01      	ldr	r3, [sp, #4]
   1635e:	9a00      	ldr	r2, [sp, #0]
   16360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   16364:	4a06      	ldr	r2, [pc, #24]	; (16380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   16366:	9b01      	ldr	r3, [sp, #4]
   16368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1636c:	1c5a      	adds	r2, r3, #1
   1636e:	4904      	ldr	r1, [pc, #16]	; (16380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   16370:	9b01      	ldr	r3, [sp, #4]
   16372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16376:	bf00      	nop
   16378:	b003      	add	sp, #12
   1637a:	f85d fb04 	ldr.w	pc, [sp], #4
   1637e:	bf00      	nop
   16380:	1fff95e8 	.word	0x1fff95e8
   16384:	1fff95e4 	.word	0x1fff95e4

00016388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   16388:	b500      	push	{lr}
   1638a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1638c:	f7eb fa4a 	bl	1824 <Sys_GetCoreID>
   16390:	4603      	mov	r3, r0
   16392:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   16394:	4a0d      	ldr	r2, [pc, #52]	; (163cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   16396:	9b01      	ldr	r3, [sp, #4]
   16398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1639c:	1e5a      	subs	r2, r3, #1
   1639e:	490b      	ldr	r1, [pc, #44]	; (163cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   163a0:	9b01      	ldr	r3, [sp, #4]
   163a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   163a6:	4a0a      	ldr	r2, [pc, #40]	; (163d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   163a8:	9b01      	ldr	r3, [sp, #4]
   163aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163ae:	f003 0301 	and.w	r3, r3, #1
   163b2:	2b00      	cmp	r3, #0
   163b4:	d106      	bne.n	163c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   163b6:	4a05      	ldr	r2, [pc, #20]	; (163cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   163b8:	9b01      	ldr	r3, [sp, #4]
   163ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163be:	2b00      	cmp	r3, #0
   163c0:	d100      	bne.n	163c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   163c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   163c4:	bf00      	nop
   163c6:	b003      	add	sp, #12
   163c8:	f85d fb04 	ldr.w	pc, [sp], #4
   163cc:	1fff95e8 	.word	0x1fff95e8
   163d0:	1fff95e4 	.word	0x1fff95e4

000163d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   163d4:	b500      	push	{lr}
   163d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163d8:	f7eb fa24 	bl	1824 <Sys_GetCoreID>
   163dc:	4603      	mov	r3, r0
   163de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   163e0:	4a10      	ldr	r2, [pc, #64]	; (16424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   163e2:	9b01      	ldr	r3, [sp, #4]
   163e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163e8:	2b00      	cmp	r3, #0
   163ea:	d10d      	bne.n	16408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163ec:	f7ea faa7 	bl	93e <Port_schm_read_msr>
   163f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163f2:	9b00      	ldr	r3, [sp, #0]
   163f4:	f003 0301 	and.w	r3, r3, #1
   163f8:	2b00      	cmp	r3, #0
   163fa:	d100      	bne.n	163fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   163fe:	490a      	ldr	r1, [pc, #40]	; (16428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   16400:	9b01      	ldr	r3, [sp, #4]
   16402:	9a00      	ldr	r2, [sp, #0]
   16404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   16408:	4a06      	ldr	r2, [pc, #24]	; (16424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1640a:	9b01      	ldr	r3, [sp, #4]
   1640c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16410:	1c5a      	adds	r2, r3, #1
   16412:	4904      	ldr	r1, [pc, #16]	; (16424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   16414:	9b01      	ldr	r3, [sp, #4]
   16416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1641a:	bf00      	nop
   1641c:	b003      	add	sp, #12
   1641e:	f85d fb04 	ldr.w	pc, [sp], #4
   16422:	bf00      	nop
   16424:	1fff95f0 	.word	0x1fff95f0
   16428:	1fff95ec 	.word	0x1fff95ec

0001642c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   1642c:	b500      	push	{lr}
   1642e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16430:	f7eb f9f8 	bl	1824 <Sys_GetCoreID>
   16434:	4603      	mov	r3, r0
   16436:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   16438:	4a0d      	ldr	r2, [pc, #52]	; (16470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   1643a:	9b01      	ldr	r3, [sp, #4]
   1643c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16440:	1e5a      	subs	r2, r3, #1
   16442:	490b      	ldr	r1, [pc, #44]	; (16470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   16444:	9b01      	ldr	r3, [sp, #4]
   16446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1644a:	4a0a      	ldr	r2, [pc, #40]	; (16474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   1644c:	9b01      	ldr	r3, [sp, #4]
   1644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16452:	f003 0301 	and.w	r3, r3, #1
   16456:	2b00      	cmp	r3, #0
   16458:	d106      	bne.n	16468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   1645a:	4a05      	ldr	r2, [pc, #20]	; (16470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   1645c:	9b01      	ldr	r3, [sp, #4]
   1645e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16462:	2b00      	cmp	r3, #0
   16464:	d100      	bne.n	16468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16466:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16468:	bf00      	nop
   1646a:	b003      	add	sp, #12
   1646c:	f85d fb04 	ldr.w	pc, [sp], #4
   16470:	1fff95f0 	.word	0x1fff95f0
   16474:	1fff95ec 	.word	0x1fff95ec

00016478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   16478:	b500      	push	{lr}
   1647a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1647c:	f7eb f9d2 	bl	1824 <Sys_GetCoreID>
   16480:	4603      	mov	r3, r0
   16482:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   16484:	4a10      	ldr	r2, [pc, #64]	; (164c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   16486:	9b01      	ldr	r3, [sp, #4]
   16488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1648c:	2b00      	cmp	r3, #0
   1648e:	d10d      	bne.n	164ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16490:	f7ea fa55 	bl	93e <Port_schm_read_msr>
   16494:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16496:	9b00      	ldr	r3, [sp, #0]
   16498:	f003 0301 	and.w	r3, r3, #1
   1649c:	2b00      	cmp	r3, #0
   1649e:	d100      	bne.n	164a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   164a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   164a2:	490a      	ldr	r1, [pc, #40]	; (164cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   164a4:	9b01      	ldr	r3, [sp, #4]
   164a6:	9a00      	ldr	r2, [sp, #0]
   164a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   164ac:	4a06      	ldr	r2, [pc, #24]	; (164c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   164ae:	9b01      	ldr	r3, [sp, #4]
   164b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164b4:	1c5a      	adds	r2, r3, #1
   164b6:	4904      	ldr	r1, [pc, #16]	; (164c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   164b8:	9b01      	ldr	r3, [sp, #4]
   164ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   164be:	bf00      	nop
   164c0:	b003      	add	sp, #12
   164c2:	f85d fb04 	ldr.w	pc, [sp], #4
   164c6:	bf00      	nop
   164c8:	1fff95f8 	.word	0x1fff95f8
   164cc:	1fff95f4 	.word	0x1fff95f4

000164d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   164d0:	b500      	push	{lr}
   164d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164d4:	f7eb f9a6 	bl	1824 <Sys_GetCoreID>
   164d8:	4603      	mov	r3, r0
   164da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   164dc:	4a0d      	ldr	r2, [pc, #52]	; (16514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   164de:	9b01      	ldr	r3, [sp, #4]
   164e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164e4:	1e5a      	subs	r2, r3, #1
   164e6:	490b      	ldr	r1, [pc, #44]	; (16514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   164e8:	9b01      	ldr	r3, [sp, #4]
   164ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   164ee:	4a0a      	ldr	r2, [pc, #40]	; (16518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   164f0:	9b01      	ldr	r3, [sp, #4]
   164f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164f6:	f003 0301 	and.w	r3, r3, #1
   164fa:	2b00      	cmp	r3, #0
   164fc:	d106      	bne.n	1650c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   164fe:	4a05      	ldr	r2, [pc, #20]	; (16514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   16500:	9b01      	ldr	r3, [sp, #4]
   16502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16506:	2b00      	cmp	r3, #0
   16508:	d100      	bne.n	1650c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1650a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1650c:	bf00      	nop
   1650e:	b003      	add	sp, #12
   16510:	f85d fb04 	ldr.w	pc, [sp], #4
   16514:	1fff95f8 	.word	0x1fff95f8
   16518:	1fff95f4 	.word	0x1fff95f4

0001651c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   1651c:	b500      	push	{lr}
   1651e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16520:	f7eb f980 	bl	1824 <Sys_GetCoreID>
   16524:	4603      	mov	r3, r0
   16526:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   16528:	4a10      	ldr	r2, [pc, #64]	; (1656c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1652a:	9b01      	ldr	r3, [sp, #4]
   1652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16530:	2b00      	cmp	r3, #0
   16532:	d10d      	bne.n	16550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16534:	f7ea fa03 	bl	93e <Port_schm_read_msr>
   16538:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1653a:	9b00      	ldr	r3, [sp, #0]
   1653c:	f003 0301 	and.w	r3, r3, #1
   16540:	2b00      	cmp	r3, #0
   16542:	d100      	bne.n	16546 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16544:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   16546:	490a      	ldr	r1, [pc, #40]	; (16570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   16548:	9b01      	ldr	r3, [sp, #4]
   1654a:	9a00      	ldr	r2, [sp, #0]
   1654c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   16550:	4a06      	ldr	r2, [pc, #24]	; (1656c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   16552:	9b01      	ldr	r3, [sp, #4]
   16554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16558:	1c5a      	adds	r2, r3, #1
   1655a:	4904      	ldr	r1, [pc, #16]	; (1656c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1655c:	9b01      	ldr	r3, [sp, #4]
   1655e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16562:	bf00      	nop
   16564:	b003      	add	sp, #12
   16566:	f85d fb04 	ldr.w	pc, [sp], #4
   1656a:	bf00      	nop
   1656c:	1fff9600 	.word	0x1fff9600
   16570:	1fff95fc 	.word	0x1fff95fc

00016574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   16574:	b500      	push	{lr}
   16576:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16578:	f7eb f954 	bl	1824 <Sys_GetCoreID>
   1657c:	4603      	mov	r3, r0
   1657e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   16580:	4a0d      	ldr	r2, [pc, #52]	; (165b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   16582:	9b01      	ldr	r3, [sp, #4]
   16584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16588:	1e5a      	subs	r2, r3, #1
   1658a:	490b      	ldr	r1, [pc, #44]	; (165b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   1658c:	9b01      	ldr	r3, [sp, #4]
   1658e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   16592:	4a0a      	ldr	r2, [pc, #40]	; (165bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   16594:	9b01      	ldr	r3, [sp, #4]
   16596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1659a:	f003 0301 	and.w	r3, r3, #1
   1659e:	2b00      	cmp	r3, #0
   165a0:	d106      	bne.n	165b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   165a2:	4a05      	ldr	r2, [pc, #20]	; (165b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   165a4:	9b01      	ldr	r3, [sp, #4]
   165a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165aa:	2b00      	cmp	r3, #0
   165ac:	d100      	bne.n	165b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   165ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   165b0:	bf00      	nop
   165b2:	b003      	add	sp, #12
   165b4:	f85d fb04 	ldr.w	pc, [sp], #4
   165b8:	1fff9600 	.word	0x1fff9600
   165bc:	1fff95fc 	.word	0x1fff95fc

000165c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   165c0:	b500      	push	{lr}
   165c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165c4:	f7eb f92e 	bl	1824 <Sys_GetCoreID>
   165c8:	4603      	mov	r3, r0
   165ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   165cc:	4a10      	ldr	r2, [pc, #64]	; (16610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   165ce:	9b01      	ldr	r3, [sp, #4]
   165d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165d4:	2b00      	cmp	r3, #0
   165d6:	d10d      	bne.n	165f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   165d8:	f7ea f9b1 	bl	93e <Port_schm_read_msr>
   165dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   165de:	9b00      	ldr	r3, [sp, #0]
   165e0:	f003 0301 	and.w	r3, r3, #1
   165e4:	2b00      	cmp	r3, #0
   165e6:	d100      	bne.n	165ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   165ea:	490a      	ldr	r1, [pc, #40]	; (16614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   165ec:	9b01      	ldr	r3, [sp, #4]
   165ee:	9a00      	ldr	r2, [sp, #0]
   165f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   165f4:	4a06      	ldr	r2, [pc, #24]	; (16610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   165f6:	9b01      	ldr	r3, [sp, #4]
   165f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165fc:	1c5a      	adds	r2, r3, #1
   165fe:	4904      	ldr	r1, [pc, #16]	; (16610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   16600:	9b01      	ldr	r3, [sp, #4]
   16602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16606:	bf00      	nop
   16608:	b003      	add	sp, #12
   1660a:	f85d fb04 	ldr.w	pc, [sp], #4
   1660e:	bf00      	nop
   16610:	1fff9608 	.word	0x1fff9608
   16614:	1fff9604 	.word	0x1fff9604

00016618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   16618:	b500      	push	{lr}
   1661a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1661c:	f7eb f902 	bl	1824 <Sys_GetCoreID>
   16620:	4603      	mov	r3, r0
   16622:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   16624:	4a0d      	ldr	r2, [pc, #52]	; (1665c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   16626:	9b01      	ldr	r3, [sp, #4]
   16628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1662c:	1e5a      	subs	r2, r3, #1
   1662e:	490b      	ldr	r1, [pc, #44]	; (1665c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   16630:	9b01      	ldr	r3, [sp, #4]
   16632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   16636:	4a0a      	ldr	r2, [pc, #40]	; (16660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   16638:	9b01      	ldr	r3, [sp, #4]
   1663a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1663e:	f003 0301 	and.w	r3, r3, #1
   16642:	2b00      	cmp	r3, #0
   16644:	d106      	bne.n	16654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   16646:	4a05      	ldr	r2, [pc, #20]	; (1665c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   16648:	9b01      	ldr	r3, [sp, #4]
   1664a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1664e:	2b00      	cmp	r3, #0
   16650:	d100      	bne.n	16654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16652:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16654:	bf00      	nop
   16656:	b003      	add	sp, #12
   16658:	f85d fb04 	ldr.w	pc, [sp], #4
   1665c:	1fff9608 	.word	0x1fff9608
   16660:	1fff9604 	.word	0x1fff9604

00016664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   16664:	b500      	push	{lr}
   16666:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16668:	f7eb f8dc 	bl	1824 <Sys_GetCoreID>
   1666c:	4603      	mov	r3, r0
   1666e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   16670:	4a10      	ldr	r2, [pc, #64]	; (166b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   16672:	9b01      	ldr	r3, [sp, #4]
   16674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16678:	2b00      	cmp	r3, #0
   1667a:	d10d      	bne.n	16698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1667c:	f7ea f95f 	bl	93e <Port_schm_read_msr>
   16680:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16682:	9b00      	ldr	r3, [sp, #0]
   16684:	f003 0301 	and.w	r3, r3, #1
   16688:	2b00      	cmp	r3, #0
   1668a:	d100      	bne.n	1668e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1668c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1668e:	490a      	ldr	r1, [pc, #40]	; (166b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   16690:	9b01      	ldr	r3, [sp, #4]
   16692:	9a00      	ldr	r2, [sp, #0]
   16694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   16698:	4a06      	ldr	r2, [pc, #24]	; (166b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   1669a:	9b01      	ldr	r3, [sp, #4]
   1669c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166a0:	1c5a      	adds	r2, r3, #1
   166a2:	4904      	ldr	r1, [pc, #16]	; (166b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   166a4:	9b01      	ldr	r3, [sp, #4]
   166a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   166aa:	bf00      	nop
   166ac:	b003      	add	sp, #12
   166ae:	f85d fb04 	ldr.w	pc, [sp], #4
   166b2:	bf00      	nop
   166b4:	1fff9610 	.word	0x1fff9610
   166b8:	1fff960c 	.word	0x1fff960c

000166bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   166bc:	b500      	push	{lr}
   166be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166c0:	f7eb f8b0 	bl	1824 <Sys_GetCoreID>
   166c4:	4603      	mov	r3, r0
   166c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   166c8:	4a0d      	ldr	r2, [pc, #52]	; (16700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   166ca:	9b01      	ldr	r3, [sp, #4]
   166cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166d0:	1e5a      	subs	r2, r3, #1
   166d2:	490b      	ldr	r1, [pc, #44]	; (16700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   166d4:	9b01      	ldr	r3, [sp, #4]
   166d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   166da:	4a0a      	ldr	r2, [pc, #40]	; (16704 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   166dc:	9b01      	ldr	r3, [sp, #4]
   166de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166e2:	f003 0301 	and.w	r3, r3, #1
   166e6:	2b00      	cmp	r3, #0
   166e8:	d106      	bne.n	166f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   166ea:	4a05      	ldr	r2, [pc, #20]	; (16700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   166ec:	9b01      	ldr	r3, [sp, #4]
   166ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166f2:	2b00      	cmp	r3, #0
   166f4:	d100      	bne.n	166f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166f8:	bf00      	nop
   166fa:	b003      	add	sp, #12
   166fc:	f85d fb04 	ldr.w	pc, [sp], #4
   16700:	1fff9610 	.word	0x1fff9610
   16704:	1fff960c 	.word	0x1fff960c

00016708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   16708:	b500      	push	{lr}
   1670a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1670c:	f7eb f88a 	bl	1824 <Sys_GetCoreID>
   16710:	4603      	mov	r3, r0
   16712:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   16714:	4a10      	ldr	r2, [pc, #64]	; (16758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   16716:	9b01      	ldr	r3, [sp, #4]
   16718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1671c:	2b00      	cmp	r3, #0
   1671e:	d10d      	bne.n	1673c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16720:	f7ea f90d 	bl	93e <Port_schm_read_msr>
   16724:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16726:	9b00      	ldr	r3, [sp, #0]
   16728:	f003 0301 	and.w	r3, r3, #1
   1672c:	2b00      	cmp	r3, #0
   1672e:	d100      	bne.n	16732 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16730:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   16732:	490a      	ldr	r1, [pc, #40]	; (1675c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   16734:	9b01      	ldr	r3, [sp, #4]
   16736:	9a00      	ldr	r2, [sp, #0]
   16738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   1673c:	4a06      	ldr	r2, [pc, #24]	; (16758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1673e:	9b01      	ldr	r3, [sp, #4]
   16740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16744:	1c5a      	adds	r2, r3, #1
   16746:	4904      	ldr	r1, [pc, #16]	; (16758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   16748:	9b01      	ldr	r3, [sp, #4]
   1674a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1674e:	bf00      	nop
   16750:	b003      	add	sp, #12
   16752:	f85d fb04 	ldr.w	pc, [sp], #4
   16756:	bf00      	nop
   16758:	1fff9618 	.word	0x1fff9618
   1675c:	1fff9614 	.word	0x1fff9614

00016760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   16760:	b500      	push	{lr}
   16762:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16764:	f7eb f85e 	bl	1824 <Sys_GetCoreID>
   16768:	4603      	mov	r3, r0
   1676a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   1676c:	4a0d      	ldr	r2, [pc, #52]	; (167a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1676e:	9b01      	ldr	r3, [sp, #4]
   16770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16774:	1e5a      	subs	r2, r3, #1
   16776:	490b      	ldr	r1, [pc, #44]	; (167a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   16778:	9b01      	ldr	r3, [sp, #4]
   1677a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1677e:	4a0a      	ldr	r2, [pc, #40]	; (167a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   16780:	9b01      	ldr	r3, [sp, #4]
   16782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16786:	f003 0301 	and.w	r3, r3, #1
   1678a:	2b00      	cmp	r3, #0
   1678c:	d106      	bne.n	1679c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   1678e:	4a05      	ldr	r2, [pc, #20]	; (167a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   16790:	9b01      	ldr	r3, [sp, #4]
   16792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16796:	2b00      	cmp	r3, #0
   16798:	d100      	bne.n	1679c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1679a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1679c:	bf00      	nop
   1679e:	b003      	add	sp, #12
   167a0:	f85d fb04 	ldr.w	pc, [sp], #4
   167a4:	1fff9618 	.word	0x1fff9618
   167a8:	1fff9614 	.word	0x1fff9614

000167ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   167ac:	b500      	push	{lr}
   167ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167b0:	f7eb f838 	bl	1824 <Sys_GetCoreID>
   167b4:	4603      	mov	r3, r0
   167b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   167b8:	4a10      	ldr	r2, [pc, #64]	; (167fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   167ba:	9b01      	ldr	r3, [sp, #4]
   167bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167c0:	2b00      	cmp	r3, #0
   167c2:	d10d      	bne.n	167e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   167c4:	f7ea f8bb 	bl	93e <Port_schm_read_msr>
   167c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   167ca:	9b00      	ldr	r3, [sp, #0]
   167cc:	f003 0301 	and.w	r3, r3, #1
   167d0:	2b00      	cmp	r3, #0
   167d2:	d100      	bne.n	167d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   167d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   167d6:	490a      	ldr	r1, [pc, #40]	; (16800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   167d8:	9b01      	ldr	r3, [sp, #4]
   167da:	9a00      	ldr	r2, [sp, #0]
   167dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   167e0:	4a06      	ldr	r2, [pc, #24]	; (167fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   167e2:	9b01      	ldr	r3, [sp, #4]
   167e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167e8:	1c5a      	adds	r2, r3, #1
   167ea:	4904      	ldr	r1, [pc, #16]	; (167fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   167ec:	9b01      	ldr	r3, [sp, #4]
   167ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167f2:	bf00      	nop
   167f4:	b003      	add	sp, #12
   167f6:	f85d fb04 	ldr.w	pc, [sp], #4
   167fa:	bf00      	nop
   167fc:	1fff9620 	.word	0x1fff9620
   16800:	1fff961c 	.word	0x1fff961c

00016804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   16804:	b500      	push	{lr}
   16806:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16808:	f7eb f80c 	bl	1824 <Sys_GetCoreID>
   1680c:	4603      	mov	r3, r0
   1680e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   16810:	4a0d      	ldr	r2, [pc, #52]	; (16848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   16812:	9b01      	ldr	r3, [sp, #4]
   16814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16818:	1e5a      	subs	r2, r3, #1
   1681a:	490b      	ldr	r1, [pc, #44]	; (16848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1681c:	9b01      	ldr	r3, [sp, #4]
   1681e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   16822:	4a0a      	ldr	r2, [pc, #40]	; (1684c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   16824:	9b01      	ldr	r3, [sp, #4]
   16826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1682a:	f003 0301 	and.w	r3, r3, #1
   1682e:	2b00      	cmp	r3, #0
   16830:	d106      	bne.n	16840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   16832:	4a05      	ldr	r2, [pc, #20]	; (16848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   16834:	9b01      	ldr	r3, [sp, #4]
   16836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1683a:	2b00      	cmp	r3, #0
   1683c:	d100      	bne.n	16840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1683e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16840:	bf00      	nop
   16842:	b003      	add	sp, #12
   16844:	f85d fb04 	ldr.w	pc, [sp], #4
   16848:	1fff9620 	.word	0x1fff9620
   1684c:	1fff961c 	.word	0x1fff961c

00016850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   16850:	b500      	push	{lr}
   16852:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16854:	f7ea ffe6 	bl	1824 <Sys_GetCoreID>
   16858:	4603      	mov	r3, r0
   1685a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   1685c:	4a10      	ldr	r2, [pc, #64]	; (168a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1685e:	9b01      	ldr	r3, [sp, #4]
   16860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16864:	2b00      	cmp	r3, #0
   16866:	d10d      	bne.n	16884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16868:	f7ea f869 	bl	93e <Port_schm_read_msr>
   1686c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1686e:	9b00      	ldr	r3, [sp, #0]
   16870:	f003 0301 	and.w	r3, r3, #1
   16874:	2b00      	cmp	r3, #0
   16876:	d100      	bne.n	1687a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16878:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1687a:	490a      	ldr	r1, [pc, #40]	; (168a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   1687c:	9b01      	ldr	r3, [sp, #4]
   1687e:	9a00      	ldr	r2, [sp, #0]
   16880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   16884:	4a06      	ldr	r2, [pc, #24]	; (168a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16886:	9b01      	ldr	r3, [sp, #4]
   16888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1688c:	1c5a      	adds	r2, r3, #1
   1688e:	4904      	ldr	r1, [pc, #16]	; (168a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16890:	9b01      	ldr	r3, [sp, #4]
   16892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16896:	bf00      	nop
   16898:	b003      	add	sp, #12
   1689a:	f85d fb04 	ldr.w	pc, [sp], #4
   1689e:	bf00      	nop
   168a0:	1fff9628 	.word	0x1fff9628
   168a4:	1fff9624 	.word	0x1fff9624

000168a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   168a8:	b500      	push	{lr}
   168aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168ac:	f7ea ffba 	bl	1824 <Sys_GetCoreID>
   168b0:	4603      	mov	r3, r0
   168b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   168b4:	4a0d      	ldr	r2, [pc, #52]	; (168ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   168b6:	9b01      	ldr	r3, [sp, #4]
   168b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168bc:	1e5a      	subs	r2, r3, #1
   168be:	490b      	ldr	r1, [pc, #44]	; (168ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   168c0:	9b01      	ldr	r3, [sp, #4]
   168c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   168c6:	4a0a      	ldr	r2, [pc, #40]	; (168f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   168c8:	9b01      	ldr	r3, [sp, #4]
   168ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168ce:	f003 0301 	and.w	r3, r3, #1
   168d2:	2b00      	cmp	r3, #0
   168d4:	d106      	bne.n	168e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   168d6:	4a05      	ldr	r2, [pc, #20]	; (168ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   168d8:	9b01      	ldr	r3, [sp, #4]
   168da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168de:	2b00      	cmp	r3, #0
   168e0:	d100      	bne.n	168e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   168e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168e4:	bf00      	nop
   168e6:	b003      	add	sp, #12
   168e8:	f85d fb04 	ldr.w	pc, [sp], #4
   168ec:	1fff9628 	.word	0x1fff9628
   168f0:	1fff9624 	.word	0x1fff9624

000168f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   168f4:	b500      	push	{lr}
   168f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168f8:	f7ea ff94 	bl	1824 <Sys_GetCoreID>
   168fc:	4603      	mov	r3, r0
   168fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   16900:	4a10      	ldr	r2, [pc, #64]	; (16944 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   16902:	9b01      	ldr	r3, [sp, #4]
   16904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16908:	2b00      	cmp	r3, #0
   1690a:	d10d      	bne.n	16928 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1690c:	f7ea f820 	bl	950 <Pwm_schm_read_msr>
   16910:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16912:	9b00      	ldr	r3, [sp, #0]
   16914:	f003 0301 	and.w	r3, r3, #1
   16918:	2b00      	cmp	r3, #0
   1691a:	d100      	bne.n	1691e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1691c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1691e:	490a      	ldr	r1, [pc, #40]	; (16948 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   16920:	9b01      	ldr	r3, [sp, #4]
   16922:	9a00      	ldr	r2, [sp, #0]
   16924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   16928:	4a06      	ldr	r2, [pc, #24]	; (16944 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1692a:	9b01      	ldr	r3, [sp, #4]
   1692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16930:	1c5a      	adds	r2, r3, #1
   16932:	4904      	ldr	r1, [pc, #16]	; (16944 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   16934:	9b01      	ldr	r3, [sp, #4]
   16936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1693a:	bf00      	nop
   1693c:	b003      	add	sp, #12
   1693e:	f85d fb04 	ldr.w	pc, [sp], #4
   16942:	bf00      	nop
   16944:	1fff9630 	.word	0x1fff9630
   16948:	1fff962c 	.word	0x1fff962c

0001694c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   1694c:	b500      	push	{lr}
   1694e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16950:	f7ea ff68 	bl	1824 <Sys_GetCoreID>
   16954:	4603      	mov	r3, r0
   16956:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   16958:	4a0d      	ldr	r2, [pc, #52]	; (16990 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   1695a:	9b01      	ldr	r3, [sp, #4]
   1695c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16960:	1e5a      	subs	r2, r3, #1
   16962:	490b      	ldr	r1, [pc, #44]	; (16990 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16964:	9b01      	ldr	r3, [sp, #4]
   16966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1696a:	4a0a      	ldr	r2, [pc, #40]	; (16994 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   1696c:	9b01      	ldr	r3, [sp, #4]
   1696e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16972:	f003 0301 	and.w	r3, r3, #1
   16976:	2b00      	cmp	r3, #0
   16978:	d106      	bne.n	16988 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   1697a:	4a05      	ldr	r2, [pc, #20]	; (16990 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   1697c:	9b01      	ldr	r3, [sp, #4]
   1697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16982:	2b00      	cmp	r3, #0
   16984:	d100      	bne.n	16988 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16986:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16988:	bf00      	nop
   1698a:	b003      	add	sp, #12
   1698c:	f85d fb04 	ldr.w	pc, [sp], #4
   16990:	1fff9630 	.word	0x1fff9630
   16994:	1fff962c 	.word	0x1fff962c

00016998 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   16998:	b500      	push	{lr}
   1699a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1699c:	f7ea ff42 	bl	1824 <Sys_GetCoreID>
   169a0:	4603      	mov	r3, r0
   169a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   169a4:	4a10      	ldr	r2, [pc, #64]	; (169e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   169a6:	9b01      	ldr	r3, [sp, #4]
   169a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169ac:	2b00      	cmp	r3, #0
   169ae:	d10d      	bne.n	169cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   169b0:	f7e9 ffce 	bl	950 <Pwm_schm_read_msr>
   169b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   169b6:	9b00      	ldr	r3, [sp, #0]
   169b8:	f003 0301 	and.w	r3, r3, #1
   169bc:	2b00      	cmp	r3, #0
   169be:	d100      	bne.n	169c2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   169c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   169c2:	490a      	ldr	r1, [pc, #40]	; (169ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   169c4:	9b01      	ldr	r3, [sp, #4]
   169c6:	9a00      	ldr	r2, [sp, #0]
   169c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   169cc:	4a06      	ldr	r2, [pc, #24]	; (169e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   169ce:	9b01      	ldr	r3, [sp, #4]
   169d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169d4:	1c5a      	adds	r2, r3, #1
   169d6:	4904      	ldr	r1, [pc, #16]	; (169e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   169d8:	9b01      	ldr	r3, [sp, #4]
   169da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   169de:	bf00      	nop
   169e0:	b003      	add	sp, #12
   169e2:	f85d fb04 	ldr.w	pc, [sp], #4
   169e6:	bf00      	nop
   169e8:	1fff9638 	.word	0x1fff9638
   169ec:	1fff9634 	.word	0x1fff9634

000169f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   169f0:	b500      	push	{lr}
   169f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169f4:	f7ea ff16 	bl	1824 <Sys_GetCoreID>
   169f8:	4603      	mov	r3, r0
   169fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   169fc:	4a0d      	ldr	r2, [pc, #52]	; (16a34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   169fe:	9b01      	ldr	r3, [sp, #4]
   16a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a04:	1e5a      	subs	r2, r3, #1
   16a06:	490b      	ldr	r1, [pc, #44]	; (16a34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16a08:	9b01      	ldr	r3, [sp, #4]
   16a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   16a0e:	4a0a      	ldr	r2, [pc, #40]	; (16a38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   16a10:	9b01      	ldr	r3, [sp, #4]
   16a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a16:	f003 0301 	and.w	r3, r3, #1
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d106      	bne.n	16a2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   16a1e:	4a05      	ldr	r2, [pc, #20]	; (16a34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16a20:	9b01      	ldr	r3, [sp, #4]
   16a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a26:	2b00      	cmp	r3, #0
   16a28:	d100      	bne.n	16a2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a2c:	bf00      	nop
   16a2e:	b003      	add	sp, #12
   16a30:	f85d fb04 	ldr.w	pc, [sp], #4
   16a34:	1fff9638 	.word	0x1fff9638
   16a38:	1fff9634 	.word	0x1fff9634

00016a3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16a3c:	b500      	push	{lr}
   16a3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a40:	f7ea fef0 	bl	1824 <Sys_GetCoreID>
   16a44:	4603      	mov	r3, r0
   16a46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   16a48:	4a10      	ldr	r2, [pc, #64]	; (16a8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16a4a:	9b01      	ldr	r3, [sp, #4]
   16a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a50:	2b00      	cmp	r3, #0
   16a52:	d10d      	bne.n	16a70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16a54:	f7e9 ff7c 	bl	950 <Pwm_schm_read_msr>
   16a58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16a5a:	9b00      	ldr	r3, [sp, #0]
   16a5c:	f003 0301 	and.w	r3, r3, #1
   16a60:	2b00      	cmp	r3, #0
   16a62:	d100      	bne.n	16a66 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16a64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   16a66:	490a      	ldr	r1, [pc, #40]	; (16a90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   16a68:	9b01      	ldr	r3, [sp, #4]
   16a6a:	9a00      	ldr	r2, [sp, #0]
   16a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   16a70:	4a06      	ldr	r2, [pc, #24]	; (16a8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16a72:	9b01      	ldr	r3, [sp, #4]
   16a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a78:	1c5a      	adds	r2, r3, #1
   16a7a:	4904      	ldr	r1, [pc, #16]	; (16a8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16a7c:	9b01      	ldr	r3, [sp, #4]
   16a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16a82:	bf00      	nop
   16a84:	b003      	add	sp, #12
   16a86:	f85d fb04 	ldr.w	pc, [sp], #4
   16a8a:	bf00      	nop
   16a8c:	1fff9640 	.word	0x1fff9640
   16a90:	1fff963c 	.word	0x1fff963c

00016a94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16a94:	b500      	push	{lr}
   16a96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a98:	f7ea fec4 	bl	1824 <Sys_GetCoreID>
   16a9c:	4603      	mov	r3, r0
   16a9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   16aa0:	4a0d      	ldr	r2, [pc, #52]	; (16ad8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16aa2:	9b01      	ldr	r3, [sp, #4]
   16aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aa8:	1e5a      	subs	r2, r3, #1
   16aaa:	490b      	ldr	r1, [pc, #44]	; (16ad8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16aac:	9b01      	ldr	r3, [sp, #4]
   16aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   16ab2:	4a0a      	ldr	r2, [pc, #40]	; (16adc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   16ab4:	9b01      	ldr	r3, [sp, #4]
   16ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aba:	f003 0301 	and.w	r3, r3, #1
   16abe:	2b00      	cmp	r3, #0
   16ac0:	d106      	bne.n	16ad0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   16ac2:	4a05      	ldr	r2, [pc, #20]	; (16ad8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16ac4:	9b01      	ldr	r3, [sp, #4]
   16ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aca:	2b00      	cmp	r3, #0
   16acc:	d100      	bne.n	16ad0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16ace:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ad0:	bf00      	nop
   16ad2:	b003      	add	sp, #12
   16ad4:	f85d fb04 	ldr.w	pc, [sp], #4
   16ad8:	1fff9640 	.word	0x1fff9640
   16adc:	1fff963c 	.word	0x1fff963c

00016ae0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16ae0:	b500      	push	{lr}
   16ae2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ae4:	f7ea fe9e 	bl	1824 <Sys_GetCoreID>
   16ae8:	4603      	mov	r3, r0
   16aea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   16aec:	4a10      	ldr	r2, [pc, #64]	; (16b30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16aee:	9b01      	ldr	r3, [sp, #4]
   16af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16af4:	2b00      	cmp	r3, #0
   16af6:	d10d      	bne.n	16b14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16af8:	f7e9 ff2a 	bl	950 <Pwm_schm_read_msr>
   16afc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16afe:	9b00      	ldr	r3, [sp, #0]
   16b00:	f003 0301 	and.w	r3, r3, #1
   16b04:	2b00      	cmp	r3, #0
   16b06:	d100      	bne.n	16b0a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16b08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   16b0a:	490a      	ldr	r1, [pc, #40]	; (16b34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   16b0c:	9b01      	ldr	r3, [sp, #4]
   16b0e:	9a00      	ldr	r2, [sp, #0]
   16b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   16b14:	4a06      	ldr	r2, [pc, #24]	; (16b30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16b16:	9b01      	ldr	r3, [sp, #4]
   16b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b1c:	1c5a      	adds	r2, r3, #1
   16b1e:	4904      	ldr	r1, [pc, #16]	; (16b30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16b20:	9b01      	ldr	r3, [sp, #4]
   16b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16b26:	bf00      	nop
   16b28:	b003      	add	sp, #12
   16b2a:	f85d fb04 	ldr.w	pc, [sp], #4
   16b2e:	bf00      	nop
   16b30:	1fff9648 	.word	0x1fff9648
   16b34:	1fff9644 	.word	0x1fff9644

00016b38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16b38:	b500      	push	{lr}
   16b3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b3c:	f7ea fe72 	bl	1824 <Sys_GetCoreID>
   16b40:	4603      	mov	r3, r0
   16b42:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   16b44:	4a0d      	ldr	r2, [pc, #52]	; (16b7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16b46:	9b01      	ldr	r3, [sp, #4]
   16b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b4c:	1e5a      	subs	r2, r3, #1
   16b4e:	490b      	ldr	r1, [pc, #44]	; (16b7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16b50:	9b01      	ldr	r3, [sp, #4]
   16b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16b56:	4a0a      	ldr	r2, [pc, #40]	; (16b80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   16b58:	9b01      	ldr	r3, [sp, #4]
   16b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b5e:	f003 0301 	and.w	r3, r3, #1
   16b62:	2b00      	cmp	r3, #0
   16b64:	d106      	bne.n	16b74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   16b66:	4a05      	ldr	r2, [pc, #20]	; (16b7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16b68:	9b01      	ldr	r3, [sp, #4]
   16b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b6e:	2b00      	cmp	r3, #0
   16b70:	d100      	bne.n	16b74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16b72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16b74:	bf00      	nop
   16b76:	b003      	add	sp, #12
   16b78:	f85d fb04 	ldr.w	pc, [sp], #4
   16b7c:	1fff9648 	.word	0x1fff9648
   16b80:	1fff9644 	.word	0x1fff9644

00016b84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16b84:	b500      	push	{lr}
   16b86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b88:	f7ea fe4c 	bl	1824 <Sys_GetCoreID>
   16b8c:	4603      	mov	r3, r0
   16b8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   16b90:	4a10      	ldr	r2, [pc, #64]	; (16bd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16b92:	9b01      	ldr	r3, [sp, #4]
   16b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d10d      	bne.n	16bb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16b9c:	f7e9 fed8 	bl	950 <Pwm_schm_read_msr>
   16ba0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16ba2:	9b00      	ldr	r3, [sp, #0]
   16ba4:	f003 0301 	and.w	r3, r3, #1
   16ba8:	2b00      	cmp	r3, #0
   16baa:	d100      	bne.n	16bae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16bac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   16bae:	490a      	ldr	r1, [pc, #40]	; (16bd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   16bb0:	9b01      	ldr	r3, [sp, #4]
   16bb2:	9a00      	ldr	r2, [sp, #0]
   16bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   16bb8:	4a06      	ldr	r2, [pc, #24]	; (16bd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16bba:	9b01      	ldr	r3, [sp, #4]
   16bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bc0:	1c5a      	adds	r2, r3, #1
   16bc2:	4904      	ldr	r1, [pc, #16]	; (16bd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16bc4:	9b01      	ldr	r3, [sp, #4]
   16bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16bca:	bf00      	nop
   16bcc:	b003      	add	sp, #12
   16bce:	f85d fb04 	ldr.w	pc, [sp], #4
   16bd2:	bf00      	nop
   16bd4:	1fff9650 	.word	0x1fff9650
   16bd8:	1fff964c 	.word	0x1fff964c

00016bdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16bdc:	b500      	push	{lr}
   16bde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16be0:	f7ea fe20 	bl	1824 <Sys_GetCoreID>
   16be4:	4603      	mov	r3, r0
   16be6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   16be8:	4a0d      	ldr	r2, [pc, #52]	; (16c20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16bea:	9b01      	ldr	r3, [sp, #4]
   16bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bf0:	1e5a      	subs	r2, r3, #1
   16bf2:	490b      	ldr	r1, [pc, #44]	; (16c20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16bf4:	9b01      	ldr	r3, [sp, #4]
   16bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   16bfa:	4a0a      	ldr	r2, [pc, #40]	; (16c24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   16bfc:	9b01      	ldr	r3, [sp, #4]
   16bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c02:	f003 0301 	and.w	r3, r3, #1
   16c06:	2b00      	cmp	r3, #0
   16c08:	d106      	bne.n	16c18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   16c0a:	4a05      	ldr	r2, [pc, #20]	; (16c20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16c0c:	9b01      	ldr	r3, [sp, #4]
   16c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c12:	2b00      	cmp	r3, #0
   16c14:	d100      	bne.n	16c18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16c16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16c18:	bf00      	nop
   16c1a:	b003      	add	sp, #12
   16c1c:	f85d fb04 	ldr.w	pc, [sp], #4
   16c20:	1fff9650 	.word	0x1fff9650
   16c24:	1fff964c 	.word	0x1fff964c

00016c28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16c28:	b500      	push	{lr}
   16c2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c2c:	f7ea fdfa 	bl	1824 <Sys_GetCoreID>
   16c30:	4603      	mov	r3, r0
   16c32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   16c34:	4a10      	ldr	r2, [pc, #64]	; (16c78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16c36:	9b01      	ldr	r3, [sp, #4]
   16c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c3c:	2b00      	cmp	r3, #0
   16c3e:	d10d      	bne.n	16c5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16c40:	f7e9 fe86 	bl	950 <Pwm_schm_read_msr>
   16c44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16c46:	9b00      	ldr	r3, [sp, #0]
   16c48:	f003 0301 	and.w	r3, r3, #1
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d100      	bne.n	16c52 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16c50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   16c52:	490a      	ldr	r1, [pc, #40]	; (16c7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   16c54:	9b01      	ldr	r3, [sp, #4]
   16c56:	9a00      	ldr	r2, [sp, #0]
   16c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   16c5c:	4a06      	ldr	r2, [pc, #24]	; (16c78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16c5e:	9b01      	ldr	r3, [sp, #4]
   16c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c64:	1c5a      	adds	r2, r3, #1
   16c66:	4904      	ldr	r1, [pc, #16]	; (16c78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16c68:	9b01      	ldr	r3, [sp, #4]
   16c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16c6e:	bf00      	nop
   16c70:	b003      	add	sp, #12
   16c72:	f85d fb04 	ldr.w	pc, [sp], #4
   16c76:	bf00      	nop
   16c78:	1fff9658 	.word	0x1fff9658
   16c7c:	1fff9654 	.word	0x1fff9654

00016c80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16c80:	b500      	push	{lr}
   16c82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c84:	f7ea fdce 	bl	1824 <Sys_GetCoreID>
   16c88:	4603      	mov	r3, r0
   16c8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   16c8c:	4a0d      	ldr	r2, [pc, #52]	; (16cc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16c8e:	9b01      	ldr	r3, [sp, #4]
   16c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c94:	1e5a      	subs	r2, r3, #1
   16c96:	490b      	ldr	r1, [pc, #44]	; (16cc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16c98:	9b01      	ldr	r3, [sp, #4]
   16c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   16c9e:	4a0a      	ldr	r2, [pc, #40]	; (16cc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   16ca0:	9b01      	ldr	r3, [sp, #4]
   16ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ca6:	f003 0301 	and.w	r3, r3, #1
   16caa:	2b00      	cmp	r3, #0
   16cac:	d106      	bne.n	16cbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   16cae:	4a05      	ldr	r2, [pc, #20]	; (16cc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16cb0:	9b01      	ldr	r3, [sp, #4]
   16cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cb6:	2b00      	cmp	r3, #0
   16cb8:	d100      	bne.n	16cbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16cba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16cbc:	bf00      	nop
   16cbe:	b003      	add	sp, #12
   16cc0:	f85d fb04 	ldr.w	pc, [sp], #4
   16cc4:	1fff9658 	.word	0x1fff9658
   16cc8:	1fff9654 	.word	0x1fff9654

00016ccc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16ccc:	b500      	push	{lr}
   16cce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16cd0:	f7ea fda8 	bl	1824 <Sys_GetCoreID>
   16cd4:	4603      	mov	r3, r0
   16cd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   16cd8:	4a10      	ldr	r2, [pc, #64]	; (16d1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16cda:	9b01      	ldr	r3, [sp, #4]
   16cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ce0:	2b00      	cmp	r3, #0
   16ce2:	d10d      	bne.n	16d00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16ce4:	f7e9 fe34 	bl	950 <Pwm_schm_read_msr>
   16ce8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16cea:	9b00      	ldr	r3, [sp, #0]
   16cec:	f003 0301 	and.w	r3, r3, #1
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d100      	bne.n	16cf6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16cf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   16cf6:	490a      	ldr	r1, [pc, #40]	; (16d20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   16cf8:	9b01      	ldr	r3, [sp, #4]
   16cfa:	9a00      	ldr	r2, [sp, #0]
   16cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   16d00:	4a06      	ldr	r2, [pc, #24]	; (16d1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16d02:	9b01      	ldr	r3, [sp, #4]
   16d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d08:	1c5a      	adds	r2, r3, #1
   16d0a:	4904      	ldr	r1, [pc, #16]	; (16d1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16d0c:	9b01      	ldr	r3, [sp, #4]
   16d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16d12:	bf00      	nop
   16d14:	b003      	add	sp, #12
   16d16:	f85d fb04 	ldr.w	pc, [sp], #4
   16d1a:	bf00      	nop
   16d1c:	1fff9660 	.word	0x1fff9660
   16d20:	1fff965c 	.word	0x1fff965c

00016d24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16d24:	b500      	push	{lr}
   16d26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d28:	f7ea fd7c 	bl	1824 <Sys_GetCoreID>
   16d2c:	4603      	mov	r3, r0
   16d2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   16d30:	4a0d      	ldr	r2, [pc, #52]	; (16d68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16d32:	9b01      	ldr	r3, [sp, #4]
   16d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d38:	1e5a      	subs	r2, r3, #1
   16d3a:	490b      	ldr	r1, [pc, #44]	; (16d68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16d3c:	9b01      	ldr	r3, [sp, #4]
   16d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   16d42:	4a0a      	ldr	r2, [pc, #40]	; (16d6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   16d44:	9b01      	ldr	r3, [sp, #4]
   16d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d4a:	f003 0301 	and.w	r3, r3, #1
   16d4e:	2b00      	cmp	r3, #0
   16d50:	d106      	bne.n	16d60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   16d52:	4a05      	ldr	r2, [pc, #20]	; (16d68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16d54:	9b01      	ldr	r3, [sp, #4]
   16d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	d100      	bne.n	16d60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16d5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16d60:	bf00      	nop
   16d62:	b003      	add	sp, #12
   16d64:	f85d fb04 	ldr.w	pc, [sp], #4
   16d68:	1fff9660 	.word	0x1fff9660
   16d6c:	1fff965c 	.word	0x1fff965c

00016d70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16d70:	b500      	push	{lr}
   16d72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d74:	f7ea fd56 	bl	1824 <Sys_GetCoreID>
   16d78:	4603      	mov	r3, r0
   16d7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   16d7c:	4a10      	ldr	r2, [pc, #64]	; (16dc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16d7e:	9b01      	ldr	r3, [sp, #4]
   16d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d84:	2b00      	cmp	r3, #0
   16d86:	d10d      	bne.n	16da4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16d88:	f7e9 fde2 	bl	950 <Pwm_schm_read_msr>
   16d8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16d8e:	9b00      	ldr	r3, [sp, #0]
   16d90:	f003 0301 	and.w	r3, r3, #1
   16d94:	2b00      	cmp	r3, #0
   16d96:	d100      	bne.n	16d9a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16d98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16d9a:	490a      	ldr	r1, [pc, #40]	; (16dc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   16d9c:	9b01      	ldr	r3, [sp, #4]
   16d9e:	9a00      	ldr	r2, [sp, #0]
   16da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   16da4:	4a06      	ldr	r2, [pc, #24]	; (16dc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16da6:	9b01      	ldr	r3, [sp, #4]
   16da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dac:	1c5a      	adds	r2, r3, #1
   16dae:	4904      	ldr	r1, [pc, #16]	; (16dc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16db0:	9b01      	ldr	r3, [sp, #4]
   16db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16db6:	bf00      	nop
   16db8:	b003      	add	sp, #12
   16dba:	f85d fb04 	ldr.w	pc, [sp], #4
   16dbe:	bf00      	nop
   16dc0:	1fff9668 	.word	0x1fff9668
   16dc4:	1fff9664 	.word	0x1fff9664

00016dc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16dc8:	b500      	push	{lr}
   16dca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16dcc:	f7ea fd2a 	bl	1824 <Sys_GetCoreID>
   16dd0:	4603      	mov	r3, r0
   16dd2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   16dd4:	4a0d      	ldr	r2, [pc, #52]	; (16e0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16dd6:	9b01      	ldr	r3, [sp, #4]
   16dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ddc:	1e5a      	subs	r2, r3, #1
   16dde:	490b      	ldr	r1, [pc, #44]	; (16e0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16de0:	9b01      	ldr	r3, [sp, #4]
   16de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   16de6:	4a0a      	ldr	r2, [pc, #40]	; (16e10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   16de8:	9b01      	ldr	r3, [sp, #4]
   16dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dee:	f003 0301 	and.w	r3, r3, #1
   16df2:	2b00      	cmp	r3, #0
   16df4:	d106      	bne.n	16e04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   16df6:	4a05      	ldr	r2, [pc, #20]	; (16e0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16df8:	9b01      	ldr	r3, [sp, #4]
   16dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dfe:	2b00      	cmp	r3, #0
   16e00:	d100      	bne.n	16e04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16e02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16e04:	bf00      	nop
   16e06:	b003      	add	sp, #12
   16e08:	f85d fb04 	ldr.w	pc, [sp], #4
   16e0c:	1fff9668 	.word	0x1fff9668
   16e10:	1fff9664 	.word	0x1fff9664

00016e14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   16e14:	b500      	push	{lr}
   16e16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e18:	f7ea fd04 	bl	1824 <Sys_GetCoreID>
   16e1c:	4603      	mov	r3, r0
   16e1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   16e20:	4a10      	ldr	r2, [pc, #64]	; (16e64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16e22:	9b01      	ldr	r3, [sp, #4]
   16e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e28:	2b00      	cmp	r3, #0
   16e2a:	d10d      	bne.n	16e48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16e2c:	f7e9 fd90 	bl	950 <Pwm_schm_read_msr>
   16e30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16e32:	9b00      	ldr	r3, [sp, #0]
   16e34:	f003 0301 	and.w	r3, r3, #1
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d100      	bne.n	16e3e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16e3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   16e3e:	490a      	ldr	r1, [pc, #40]	; (16e68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   16e40:	9b01      	ldr	r3, [sp, #4]
   16e42:	9a00      	ldr	r2, [sp, #0]
   16e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   16e48:	4a06      	ldr	r2, [pc, #24]	; (16e64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16e4a:	9b01      	ldr	r3, [sp, #4]
   16e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e50:	1c5a      	adds	r2, r3, #1
   16e52:	4904      	ldr	r1, [pc, #16]	; (16e64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16e54:	9b01      	ldr	r3, [sp, #4]
   16e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16e5a:	bf00      	nop
   16e5c:	b003      	add	sp, #12
   16e5e:	f85d fb04 	ldr.w	pc, [sp], #4
   16e62:	bf00      	nop
   16e64:	1fff9670 	.word	0x1fff9670
   16e68:	1fff966c 	.word	0x1fff966c

00016e6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   16e6c:	b500      	push	{lr}
   16e6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e70:	f7ea fcd8 	bl	1824 <Sys_GetCoreID>
   16e74:	4603      	mov	r3, r0
   16e76:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   16e78:	4a0d      	ldr	r2, [pc, #52]	; (16eb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16e7a:	9b01      	ldr	r3, [sp, #4]
   16e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e80:	1e5a      	subs	r2, r3, #1
   16e82:	490b      	ldr	r1, [pc, #44]	; (16eb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16e84:	9b01      	ldr	r3, [sp, #4]
   16e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   16e8a:	4a0a      	ldr	r2, [pc, #40]	; (16eb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   16e8c:	9b01      	ldr	r3, [sp, #4]
   16e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e92:	f003 0301 	and.w	r3, r3, #1
   16e96:	2b00      	cmp	r3, #0
   16e98:	d106      	bne.n	16ea8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   16e9a:	4a05      	ldr	r2, [pc, #20]	; (16eb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16e9c:	9b01      	ldr	r3, [sp, #4]
   16e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ea2:	2b00      	cmp	r3, #0
   16ea4:	d100      	bne.n	16ea8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16ea6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ea8:	bf00      	nop
   16eaa:	b003      	add	sp, #12
   16eac:	f85d fb04 	ldr.w	pc, [sp], #4
   16eb0:	1fff9670 	.word	0x1fff9670
   16eb4:	1fff966c 	.word	0x1fff966c

00016eb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   16eb8:	b500      	push	{lr}
   16eba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ebc:	f7ea fcb2 	bl	1824 <Sys_GetCoreID>
   16ec0:	4603      	mov	r3, r0
   16ec2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   16ec4:	4a10      	ldr	r2, [pc, #64]	; (16f08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16ec6:	9b01      	ldr	r3, [sp, #4]
   16ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ecc:	2b00      	cmp	r3, #0
   16ece:	d10d      	bne.n	16eec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16ed0:	f7e9 fd3e 	bl	950 <Pwm_schm_read_msr>
   16ed4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16ed6:	9b00      	ldr	r3, [sp, #0]
   16ed8:	f003 0301 	and.w	r3, r3, #1
   16edc:	2b00      	cmp	r3, #0
   16ede:	d100      	bne.n	16ee2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16ee0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   16ee2:	490a      	ldr	r1, [pc, #40]	; (16f0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   16ee4:	9b01      	ldr	r3, [sp, #4]
   16ee6:	9a00      	ldr	r2, [sp, #0]
   16ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   16eec:	4a06      	ldr	r2, [pc, #24]	; (16f08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16eee:	9b01      	ldr	r3, [sp, #4]
   16ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ef4:	1c5a      	adds	r2, r3, #1
   16ef6:	4904      	ldr	r1, [pc, #16]	; (16f08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16ef8:	9b01      	ldr	r3, [sp, #4]
   16efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16efe:	bf00      	nop
   16f00:	b003      	add	sp, #12
   16f02:	f85d fb04 	ldr.w	pc, [sp], #4
   16f06:	bf00      	nop
   16f08:	1fff9678 	.word	0x1fff9678
   16f0c:	1fff9674 	.word	0x1fff9674

00016f10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   16f10:	b500      	push	{lr}
   16f12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f14:	f7ea fc86 	bl	1824 <Sys_GetCoreID>
   16f18:	4603      	mov	r3, r0
   16f1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   16f1c:	4a0d      	ldr	r2, [pc, #52]	; (16f54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16f1e:	9b01      	ldr	r3, [sp, #4]
   16f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f24:	1e5a      	subs	r2, r3, #1
   16f26:	490b      	ldr	r1, [pc, #44]	; (16f54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16f28:	9b01      	ldr	r3, [sp, #4]
   16f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   16f2e:	4a0a      	ldr	r2, [pc, #40]	; (16f58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   16f30:	9b01      	ldr	r3, [sp, #4]
   16f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f36:	f003 0301 	and.w	r3, r3, #1
   16f3a:	2b00      	cmp	r3, #0
   16f3c:	d106      	bne.n	16f4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   16f3e:	4a05      	ldr	r2, [pc, #20]	; (16f54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16f40:	9b01      	ldr	r3, [sp, #4]
   16f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f46:	2b00      	cmp	r3, #0
   16f48:	d100      	bne.n	16f4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16f4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16f4c:	bf00      	nop
   16f4e:	b003      	add	sp, #12
   16f50:	f85d fb04 	ldr.w	pc, [sp], #4
   16f54:	1fff9678 	.word	0x1fff9678
   16f58:	1fff9674 	.word	0x1fff9674

00016f5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   16f5c:	b500      	push	{lr}
   16f5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f60:	f7ea fc60 	bl	1824 <Sys_GetCoreID>
   16f64:	4603      	mov	r3, r0
   16f66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   16f68:	4a10      	ldr	r2, [pc, #64]	; (16fac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   16f6a:	9b01      	ldr	r3, [sp, #4]
   16f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f70:	2b00      	cmp	r3, #0
   16f72:	d10d      	bne.n	16f90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16f74:	f7e9 fcec 	bl	950 <Pwm_schm_read_msr>
   16f78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16f7a:	9b00      	ldr	r3, [sp, #0]
   16f7c:	f003 0301 	and.w	r3, r3, #1
   16f80:	2b00      	cmp	r3, #0
   16f82:	d100      	bne.n	16f86 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16f84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   16f86:	490a      	ldr	r1, [pc, #40]	; (16fb0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   16f88:	9b01      	ldr	r3, [sp, #4]
   16f8a:	9a00      	ldr	r2, [sp, #0]
   16f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   16f90:	4a06      	ldr	r2, [pc, #24]	; (16fac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   16f92:	9b01      	ldr	r3, [sp, #4]
   16f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f98:	1c5a      	adds	r2, r3, #1
   16f9a:	4904      	ldr	r1, [pc, #16]	; (16fac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   16f9c:	9b01      	ldr	r3, [sp, #4]
   16f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16fa2:	bf00      	nop
   16fa4:	b003      	add	sp, #12
   16fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   16faa:	bf00      	nop
   16fac:	1fff9680 	.word	0x1fff9680
   16fb0:	1fff967c 	.word	0x1fff967c

00016fb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   16fb4:	b500      	push	{lr}
   16fb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16fb8:	f7ea fc34 	bl	1824 <Sys_GetCoreID>
   16fbc:	4603      	mov	r3, r0
   16fbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   16fc0:	4a0d      	ldr	r2, [pc, #52]	; (16ff8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   16fc2:	9b01      	ldr	r3, [sp, #4]
   16fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fc8:	1e5a      	subs	r2, r3, #1
   16fca:	490b      	ldr	r1, [pc, #44]	; (16ff8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   16fcc:	9b01      	ldr	r3, [sp, #4]
   16fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   16fd2:	4a0a      	ldr	r2, [pc, #40]	; (16ffc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   16fd4:	9b01      	ldr	r3, [sp, #4]
   16fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fda:	f003 0301 	and.w	r3, r3, #1
   16fde:	2b00      	cmp	r3, #0
   16fe0:	d106      	bne.n	16ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   16fe2:	4a05      	ldr	r2, [pc, #20]	; (16ff8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   16fe4:	9b01      	ldr	r3, [sp, #4]
   16fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fea:	2b00      	cmp	r3, #0
   16fec:	d100      	bne.n	16ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16fee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ff0:	bf00      	nop
   16ff2:	b003      	add	sp, #12
   16ff4:	f85d fb04 	ldr.w	pc, [sp], #4
   16ff8:	1fff9680 	.word	0x1fff9680
   16ffc:	1fff967c 	.word	0x1fff967c

00017000 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   17000:	b500      	push	{lr}
   17002:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17004:	f7ea fc0e 	bl	1824 <Sys_GetCoreID>
   17008:	4603      	mov	r3, r0
   1700a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   1700c:	4a10      	ldr	r2, [pc, #64]	; (17050 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   1700e:	9b01      	ldr	r3, [sp, #4]
   17010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17014:	2b00      	cmp	r3, #0
   17016:	d10d      	bne.n	17034 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17018:	f7e9 fc9a 	bl	950 <Pwm_schm_read_msr>
   1701c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1701e:	9b00      	ldr	r3, [sp, #0]
   17020:	f003 0301 	and.w	r3, r3, #1
   17024:	2b00      	cmp	r3, #0
   17026:	d100      	bne.n	1702a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17028:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1702a:	490a      	ldr	r1, [pc, #40]	; (17054 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   1702c:	9b01      	ldr	r3, [sp, #4]
   1702e:	9a00      	ldr	r2, [sp, #0]
   17030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   17034:	4a06      	ldr	r2, [pc, #24]	; (17050 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   17036:	9b01      	ldr	r3, [sp, #4]
   17038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1703c:	1c5a      	adds	r2, r3, #1
   1703e:	4904      	ldr	r1, [pc, #16]	; (17050 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   17040:	9b01      	ldr	r3, [sp, #4]
   17042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17046:	bf00      	nop
   17048:	b003      	add	sp, #12
   1704a:	f85d fb04 	ldr.w	pc, [sp], #4
   1704e:	bf00      	nop
   17050:	1fff9688 	.word	0x1fff9688
   17054:	1fff9684 	.word	0x1fff9684

00017058 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   17058:	b500      	push	{lr}
   1705a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1705c:	f7ea fbe2 	bl	1824 <Sys_GetCoreID>
   17060:	4603      	mov	r3, r0
   17062:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   17064:	4a0d      	ldr	r2, [pc, #52]	; (1709c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17066:	9b01      	ldr	r3, [sp, #4]
   17068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1706c:	1e5a      	subs	r2, r3, #1
   1706e:	490b      	ldr	r1, [pc, #44]	; (1709c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17070:	9b01      	ldr	r3, [sp, #4]
   17072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   17076:	4a0a      	ldr	r2, [pc, #40]	; (170a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   17078:	9b01      	ldr	r3, [sp, #4]
   1707a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1707e:	f003 0301 	and.w	r3, r3, #1
   17082:	2b00      	cmp	r3, #0
   17084:	d106      	bne.n	17094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   17086:	4a05      	ldr	r2, [pc, #20]	; (1709c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17088:	9b01      	ldr	r3, [sp, #4]
   1708a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1708e:	2b00      	cmp	r3, #0
   17090:	d100      	bne.n	17094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17092:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17094:	bf00      	nop
   17096:	b003      	add	sp, #12
   17098:	f85d fb04 	ldr.w	pc, [sp], #4
   1709c:	1fff9688 	.word	0x1fff9688
   170a0:	1fff9684 	.word	0x1fff9684

000170a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   170a4:	b500      	push	{lr}
   170a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   170a8:	f7ea fbbc 	bl	1824 <Sys_GetCoreID>
   170ac:	4603      	mov	r3, r0
   170ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   170b0:	4a10      	ldr	r2, [pc, #64]	; (170f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   170b2:	9b01      	ldr	r3, [sp, #4]
   170b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170b8:	2b00      	cmp	r3, #0
   170ba:	d10d      	bne.n	170d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   170bc:	f7e9 fc48 	bl	950 <Pwm_schm_read_msr>
   170c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   170c2:	9b00      	ldr	r3, [sp, #0]
   170c4:	f003 0301 	and.w	r3, r3, #1
   170c8:	2b00      	cmp	r3, #0
   170ca:	d100      	bne.n	170ce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   170cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   170ce:	490a      	ldr	r1, [pc, #40]	; (170f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   170d0:	9b01      	ldr	r3, [sp, #4]
   170d2:	9a00      	ldr	r2, [sp, #0]
   170d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   170d8:	4a06      	ldr	r2, [pc, #24]	; (170f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   170da:	9b01      	ldr	r3, [sp, #4]
   170dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170e0:	1c5a      	adds	r2, r3, #1
   170e2:	4904      	ldr	r1, [pc, #16]	; (170f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   170e4:	9b01      	ldr	r3, [sp, #4]
   170e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   170ea:	bf00      	nop
   170ec:	b003      	add	sp, #12
   170ee:	f85d fb04 	ldr.w	pc, [sp], #4
   170f2:	bf00      	nop
   170f4:	1fff9690 	.word	0x1fff9690
   170f8:	1fff968c 	.word	0x1fff968c

000170fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   170fc:	b500      	push	{lr}
   170fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17100:	f7ea fb90 	bl	1824 <Sys_GetCoreID>
   17104:	4603      	mov	r3, r0
   17106:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   17108:	4a0d      	ldr	r2, [pc, #52]	; (17140 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   1710a:	9b01      	ldr	r3, [sp, #4]
   1710c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17110:	1e5a      	subs	r2, r3, #1
   17112:	490b      	ldr	r1, [pc, #44]	; (17140 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   17114:	9b01      	ldr	r3, [sp, #4]
   17116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1711a:	4a0a      	ldr	r2, [pc, #40]	; (17144 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   1711c:	9b01      	ldr	r3, [sp, #4]
   1711e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17122:	f003 0301 	and.w	r3, r3, #1
   17126:	2b00      	cmp	r3, #0
   17128:	d106      	bne.n	17138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   1712a:	4a05      	ldr	r2, [pc, #20]	; (17140 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   1712c:	9b01      	ldr	r3, [sp, #4]
   1712e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17132:	2b00      	cmp	r3, #0
   17134:	d100      	bne.n	17138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17136:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17138:	bf00      	nop
   1713a:	b003      	add	sp, #12
   1713c:	f85d fb04 	ldr.w	pc, [sp], #4
   17140:	1fff9690 	.word	0x1fff9690
   17144:	1fff968c 	.word	0x1fff968c

00017148 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   17148:	b500      	push	{lr}
   1714a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1714c:	f7ea fb6a 	bl	1824 <Sys_GetCoreID>
   17150:	4603      	mov	r3, r0
   17152:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   17154:	4a10      	ldr	r2, [pc, #64]	; (17198 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   17156:	9b01      	ldr	r3, [sp, #4]
   17158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1715c:	2b00      	cmp	r3, #0
   1715e:	d10d      	bne.n	1717c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17160:	f7e9 fbf6 	bl	950 <Pwm_schm_read_msr>
   17164:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17166:	9b00      	ldr	r3, [sp, #0]
   17168:	f003 0301 	and.w	r3, r3, #1
   1716c:	2b00      	cmp	r3, #0
   1716e:	d100      	bne.n	17172 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17170:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   17172:	490a      	ldr	r1, [pc, #40]	; (1719c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   17174:	9b01      	ldr	r3, [sp, #4]
   17176:	9a00      	ldr	r2, [sp, #0]
   17178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   1717c:	4a06      	ldr	r2, [pc, #24]	; (17198 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   1717e:	9b01      	ldr	r3, [sp, #4]
   17180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17184:	1c5a      	adds	r2, r3, #1
   17186:	4904      	ldr	r1, [pc, #16]	; (17198 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   17188:	9b01      	ldr	r3, [sp, #4]
   1718a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1718e:	bf00      	nop
   17190:	b003      	add	sp, #12
   17192:	f85d fb04 	ldr.w	pc, [sp], #4
   17196:	bf00      	nop
   17198:	1fff9698 	.word	0x1fff9698
   1719c:	1fff9694 	.word	0x1fff9694

000171a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   171a0:	b500      	push	{lr}
   171a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   171a4:	f7ea fb3e 	bl	1824 <Sys_GetCoreID>
   171a8:	4603      	mov	r3, r0
   171aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   171ac:	4a0d      	ldr	r2, [pc, #52]	; (171e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   171ae:	9b01      	ldr	r3, [sp, #4]
   171b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171b4:	1e5a      	subs	r2, r3, #1
   171b6:	490b      	ldr	r1, [pc, #44]	; (171e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   171b8:	9b01      	ldr	r3, [sp, #4]
   171ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   171be:	4a0a      	ldr	r2, [pc, #40]	; (171e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   171c0:	9b01      	ldr	r3, [sp, #4]
   171c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171c6:	f003 0301 	and.w	r3, r3, #1
   171ca:	2b00      	cmp	r3, #0
   171cc:	d106      	bne.n	171dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   171ce:	4a05      	ldr	r2, [pc, #20]	; (171e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   171d0:	9b01      	ldr	r3, [sp, #4]
   171d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171d6:	2b00      	cmp	r3, #0
   171d8:	d100      	bne.n	171dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   171da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   171dc:	bf00      	nop
   171de:	b003      	add	sp, #12
   171e0:	f85d fb04 	ldr.w	pc, [sp], #4
   171e4:	1fff9698 	.word	0x1fff9698
   171e8:	1fff9694 	.word	0x1fff9694

000171ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   171ec:	b500      	push	{lr}
   171ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   171f0:	f7ea fb18 	bl	1824 <Sys_GetCoreID>
   171f4:	4603      	mov	r3, r0
   171f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   171f8:	4a10      	ldr	r2, [pc, #64]	; (1723c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   171fa:	9b01      	ldr	r3, [sp, #4]
   171fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17200:	2b00      	cmp	r3, #0
   17202:	d10d      	bne.n	17220 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17204:	f7e9 fba4 	bl	950 <Pwm_schm_read_msr>
   17208:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1720a:	9b00      	ldr	r3, [sp, #0]
   1720c:	f003 0301 	and.w	r3, r3, #1
   17210:	2b00      	cmp	r3, #0
   17212:	d100      	bne.n	17216 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17214:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   17216:	490a      	ldr	r1, [pc, #40]	; (17240 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   17218:	9b01      	ldr	r3, [sp, #4]
   1721a:	9a00      	ldr	r2, [sp, #0]
   1721c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   17220:	4a06      	ldr	r2, [pc, #24]	; (1723c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   17222:	9b01      	ldr	r3, [sp, #4]
   17224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17228:	1c5a      	adds	r2, r3, #1
   1722a:	4904      	ldr	r1, [pc, #16]	; (1723c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   1722c:	9b01      	ldr	r3, [sp, #4]
   1722e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17232:	bf00      	nop
   17234:	b003      	add	sp, #12
   17236:	f85d fb04 	ldr.w	pc, [sp], #4
   1723a:	bf00      	nop
   1723c:	1fff96a0 	.word	0x1fff96a0
   17240:	1fff969c 	.word	0x1fff969c

00017244 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   17244:	b500      	push	{lr}
   17246:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17248:	f7ea faec 	bl	1824 <Sys_GetCoreID>
   1724c:	4603      	mov	r3, r0
   1724e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   17250:	4a0d      	ldr	r2, [pc, #52]	; (17288 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   17252:	9b01      	ldr	r3, [sp, #4]
   17254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17258:	1e5a      	subs	r2, r3, #1
   1725a:	490b      	ldr	r1, [pc, #44]	; (17288 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   1725c:	9b01      	ldr	r3, [sp, #4]
   1725e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   17262:	4a0a      	ldr	r2, [pc, #40]	; (1728c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   17264:	9b01      	ldr	r3, [sp, #4]
   17266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1726a:	f003 0301 	and.w	r3, r3, #1
   1726e:	2b00      	cmp	r3, #0
   17270:	d106      	bne.n	17280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   17272:	4a05      	ldr	r2, [pc, #20]	; (17288 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   17274:	9b01      	ldr	r3, [sp, #4]
   17276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1727a:	2b00      	cmp	r3, #0
   1727c:	d100      	bne.n	17280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1727e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17280:	bf00      	nop
   17282:	b003      	add	sp, #12
   17284:	f85d fb04 	ldr.w	pc, [sp], #4
   17288:	1fff96a0 	.word	0x1fff96a0
   1728c:	1fff969c 	.word	0x1fff969c

00017290 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   17290:	b500      	push	{lr}
   17292:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17294:	f7ea fac6 	bl	1824 <Sys_GetCoreID>
   17298:	4603      	mov	r3, r0
   1729a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   1729c:	4a10      	ldr	r2, [pc, #64]	; (172e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   1729e:	9b01      	ldr	r3, [sp, #4]
   172a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172a4:	2b00      	cmp	r3, #0
   172a6:	d10d      	bne.n	172c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   172a8:	f7e9 fb52 	bl	950 <Pwm_schm_read_msr>
   172ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   172ae:	9b00      	ldr	r3, [sp, #0]
   172b0:	f003 0301 	and.w	r3, r3, #1
   172b4:	2b00      	cmp	r3, #0
   172b6:	d100      	bne.n	172ba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   172b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   172ba:	490a      	ldr	r1, [pc, #40]	; (172e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   172bc:	9b01      	ldr	r3, [sp, #4]
   172be:	9a00      	ldr	r2, [sp, #0]
   172c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   172c4:	4a06      	ldr	r2, [pc, #24]	; (172e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   172c6:	9b01      	ldr	r3, [sp, #4]
   172c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172cc:	1c5a      	adds	r2, r3, #1
   172ce:	4904      	ldr	r1, [pc, #16]	; (172e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   172d0:	9b01      	ldr	r3, [sp, #4]
   172d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   172d6:	bf00      	nop
   172d8:	b003      	add	sp, #12
   172da:	f85d fb04 	ldr.w	pc, [sp], #4
   172de:	bf00      	nop
   172e0:	1fff96a8 	.word	0x1fff96a8
   172e4:	1fff96a4 	.word	0x1fff96a4

000172e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   172e8:	b500      	push	{lr}
   172ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   172ec:	f7ea fa9a 	bl	1824 <Sys_GetCoreID>
   172f0:	4603      	mov	r3, r0
   172f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   172f4:	4a0d      	ldr	r2, [pc, #52]	; (1732c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   172f6:	9b01      	ldr	r3, [sp, #4]
   172f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172fc:	1e5a      	subs	r2, r3, #1
   172fe:	490b      	ldr	r1, [pc, #44]	; (1732c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   17300:	9b01      	ldr	r3, [sp, #4]
   17302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   17306:	4a0a      	ldr	r2, [pc, #40]	; (17330 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   17308:	9b01      	ldr	r3, [sp, #4]
   1730a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1730e:	f003 0301 	and.w	r3, r3, #1
   17312:	2b00      	cmp	r3, #0
   17314:	d106      	bne.n	17324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   17316:	4a05      	ldr	r2, [pc, #20]	; (1732c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   17318:	9b01      	ldr	r3, [sp, #4]
   1731a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1731e:	2b00      	cmp	r3, #0
   17320:	d100      	bne.n	17324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17322:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17324:	bf00      	nop
   17326:	b003      	add	sp, #12
   17328:	f85d fb04 	ldr.w	pc, [sp], #4
   1732c:	1fff96a8 	.word	0x1fff96a8
   17330:	1fff96a4 	.word	0x1fff96a4

00017334 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   17334:	b500      	push	{lr}
   17336:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17338:	f7ea fa74 	bl	1824 <Sys_GetCoreID>
   1733c:	4603      	mov	r3, r0
   1733e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   17340:	4a10      	ldr	r2, [pc, #64]	; (17384 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17342:	9b01      	ldr	r3, [sp, #4]
   17344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17348:	2b00      	cmp	r3, #0
   1734a:	d10d      	bne.n	17368 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1734c:	f7e9 fb00 	bl	950 <Pwm_schm_read_msr>
   17350:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17352:	9b00      	ldr	r3, [sp, #0]
   17354:	f003 0301 	and.w	r3, r3, #1
   17358:	2b00      	cmp	r3, #0
   1735a:	d100      	bne.n	1735e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1735c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1735e:	490a      	ldr	r1, [pc, #40]	; (17388 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   17360:	9b01      	ldr	r3, [sp, #4]
   17362:	9a00      	ldr	r2, [sp, #0]
   17364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   17368:	4a06      	ldr	r2, [pc, #24]	; (17384 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   1736a:	9b01      	ldr	r3, [sp, #4]
   1736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17370:	1c5a      	adds	r2, r3, #1
   17372:	4904      	ldr	r1, [pc, #16]	; (17384 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17374:	9b01      	ldr	r3, [sp, #4]
   17376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1737a:	bf00      	nop
   1737c:	b003      	add	sp, #12
   1737e:	f85d fb04 	ldr.w	pc, [sp], #4
   17382:	bf00      	nop
   17384:	1fff96b0 	.word	0x1fff96b0
   17388:	1fff96ac 	.word	0x1fff96ac

0001738c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   1738c:	b500      	push	{lr}
   1738e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17390:	f7ea fa48 	bl	1824 <Sys_GetCoreID>
   17394:	4603      	mov	r3, r0
   17396:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   17398:	4a0d      	ldr	r2, [pc, #52]	; (173d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   1739a:	9b01      	ldr	r3, [sp, #4]
   1739c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173a0:	1e5a      	subs	r2, r3, #1
   173a2:	490b      	ldr	r1, [pc, #44]	; (173d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   173a4:	9b01      	ldr	r3, [sp, #4]
   173a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   173aa:	4a0a      	ldr	r2, [pc, #40]	; (173d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   173ac:	9b01      	ldr	r3, [sp, #4]
   173ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173b2:	f003 0301 	and.w	r3, r3, #1
   173b6:	2b00      	cmp	r3, #0
   173b8:	d106      	bne.n	173c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   173ba:	4a05      	ldr	r2, [pc, #20]	; (173d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   173bc:	9b01      	ldr	r3, [sp, #4]
   173be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173c2:	2b00      	cmp	r3, #0
   173c4:	d100      	bne.n	173c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   173c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   173c8:	bf00      	nop
   173ca:	b003      	add	sp, #12
   173cc:	f85d fb04 	ldr.w	pc, [sp], #4
   173d0:	1fff96b0 	.word	0x1fff96b0
   173d4:	1fff96ac 	.word	0x1fff96ac

000173d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   173d8:	b500      	push	{lr}
   173da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   173dc:	f7ea fa22 	bl	1824 <Sys_GetCoreID>
   173e0:	4603      	mov	r3, r0
   173e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   173e4:	4a10      	ldr	r2, [pc, #64]	; (17428 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   173e6:	9b01      	ldr	r3, [sp, #4]
   173e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173ec:	2b00      	cmp	r3, #0
   173ee:	d10d      	bne.n	1740c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   173f0:	f7e9 faae 	bl	950 <Pwm_schm_read_msr>
   173f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   173f6:	9b00      	ldr	r3, [sp, #0]
   173f8:	f003 0301 	and.w	r3, r3, #1
   173fc:	2b00      	cmp	r3, #0
   173fe:	d100      	bne.n	17402 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17400:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   17402:	490a      	ldr	r1, [pc, #40]	; (1742c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   17404:	9b01      	ldr	r3, [sp, #4]
   17406:	9a00      	ldr	r2, [sp, #0]
   17408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   1740c:	4a06      	ldr	r2, [pc, #24]	; (17428 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   1740e:	9b01      	ldr	r3, [sp, #4]
   17410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17414:	1c5a      	adds	r2, r3, #1
   17416:	4904      	ldr	r1, [pc, #16]	; (17428 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   17418:	9b01      	ldr	r3, [sp, #4]
   1741a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1741e:	bf00      	nop
   17420:	b003      	add	sp, #12
   17422:	f85d fb04 	ldr.w	pc, [sp], #4
   17426:	bf00      	nop
   17428:	1fff96b8 	.word	0x1fff96b8
   1742c:	1fff96b4 	.word	0x1fff96b4

00017430 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   17430:	b500      	push	{lr}
   17432:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17434:	f7ea f9f6 	bl	1824 <Sys_GetCoreID>
   17438:	4603      	mov	r3, r0
   1743a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   1743c:	4a0d      	ldr	r2, [pc, #52]	; (17474 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   1743e:	9b01      	ldr	r3, [sp, #4]
   17440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17444:	1e5a      	subs	r2, r3, #1
   17446:	490b      	ldr	r1, [pc, #44]	; (17474 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   17448:	9b01      	ldr	r3, [sp, #4]
   1744a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1744e:	4a0a      	ldr	r2, [pc, #40]	; (17478 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   17450:	9b01      	ldr	r3, [sp, #4]
   17452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17456:	f003 0301 	and.w	r3, r3, #1
   1745a:	2b00      	cmp	r3, #0
   1745c:	d106      	bne.n	1746c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   1745e:	4a05      	ldr	r2, [pc, #20]	; (17474 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   17460:	9b01      	ldr	r3, [sp, #4]
   17462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17466:	2b00      	cmp	r3, #0
   17468:	d100      	bne.n	1746c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1746a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1746c:	bf00      	nop
   1746e:	b003      	add	sp, #12
   17470:	f85d fb04 	ldr.w	pc, [sp], #4
   17474:	1fff96b8 	.word	0x1fff96b8
   17478:	1fff96b4 	.word	0x1fff96b4

0001747c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   1747c:	b500      	push	{lr}
   1747e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17480:	f7ea f9d0 	bl	1824 <Sys_GetCoreID>
   17484:	4603      	mov	r3, r0
   17486:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   17488:	4a10      	ldr	r2, [pc, #64]	; (174cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   1748a:	9b01      	ldr	r3, [sp, #4]
   1748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17490:	2b00      	cmp	r3, #0
   17492:	d10d      	bne.n	174b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17494:	f7e9 fa5c 	bl	950 <Pwm_schm_read_msr>
   17498:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1749a:	9b00      	ldr	r3, [sp, #0]
   1749c:	f003 0301 	and.w	r3, r3, #1
   174a0:	2b00      	cmp	r3, #0
   174a2:	d100      	bne.n	174a6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   174a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   174a6:	490a      	ldr	r1, [pc, #40]	; (174d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   174a8:	9b01      	ldr	r3, [sp, #4]
   174aa:	9a00      	ldr	r2, [sp, #0]
   174ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   174b0:	4a06      	ldr	r2, [pc, #24]	; (174cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   174b2:	9b01      	ldr	r3, [sp, #4]
   174b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174b8:	1c5a      	adds	r2, r3, #1
   174ba:	4904      	ldr	r1, [pc, #16]	; (174cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   174bc:	9b01      	ldr	r3, [sp, #4]
   174be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   174c2:	bf00      	nop
   174c4:	b003      	add	sp, #12
   174c6:	f85d fb04 	ldr.w	pc, [sp], #4
   174ca:	bf00      	nop
   174cc:	1fff96c0 	.word	0x1fff96c0
   174d0:	1fff96bc 	.word	0x1fff96bc

000174d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   174d4:	b500      	push	{lr}
   174d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   174d8:	f7ea f9a4 	bl	1824 <Sys_GetCoreID>
   174dc:	4603      	mov	r3, r0
   174de:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   174e0:	4a0d      	ldr	r2, [pc, #52]	; (17518 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   174e2:	9b01      	ldr	r3, [sp, #4]
   174e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174e8:	1e5a      	subs	r2, r3, #1
   174ea:	490b      	ldr	r1, [pc, #44]	; (17518 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   174ec:	9b01      	ldr	r3, [sp, #4]
   174ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   174f2:	4a0a      	ldr	r2, [pc, #40]	; (1751c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   174f4:	9b01      	ldr	r3, [sp, #4]
   174f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174fa:	f003 0301 	and.w	r3, r3, #1
   174fe:	2b00      	cmp	r3, #0
   17500:	d106      	bne.n	17510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   17502:	4a05      	ldr	r2, [pc, #20]	; (17518 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   17504:	9b01      	ldr	r3, [sp, #4]
   17506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1750a:	2b00      	cmp	r3, #0
   1750c:	d100      	bne.n	17510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1750e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17510:	bf00      	nop
   17512:	b003      	add	sp, #12
   17514:	f85d fb04 	ldr.w	pc, [sp], #4
   17518:	1fff96c0 	.word	0x1fff96c0
   1751c:	1fff96bc 	.word	0x1fff96bc

00017520 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   17520:	b500      	push	{lr}
   17522:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17524:	f7ea f97e 	bl	1824 <Sys_GetCoreID>
   17528:	4603      	mov	r3, r0
   1752a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   1752c:	4a10      	ldr	r2, [pc, #64]	; (17570 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   1752e:	9b01      	ldr	r3, [sp, #4]
   17530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17534:	2b00      	cmp	r3, #0
   17536:	d10d      	bne.n	17554 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17538:	f7e9 fa0a 	bl	950 <Pwm_schm_read_msr>
   1753c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1753e:	9b00      	ldr	r3, [sp, #0]
   17540:	f003 0301 	and.w	r3, r3, #1
   17544:	2b00      	cmp	r3, #0
   17546:	d100      	bne.n	1754a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17548:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1754a:	490a      	ldr	r1, [pc, #40]	; (17574 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   1754c:	9b01      	ldr	r3, [sp, #4]
   1754e:	9a00      	ldr	r2, [sp, #0]
   17550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   17554:	4a06      	ldr	r2, [pc, #24]	; (17570 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   17556:	9b01      	ldr	r3, [sp, #4]
   17558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1755c:	1c5a      	adds	r2, r3, #1
   1755e:	4904      	ldr	r1, [pc, #16]	; (17570 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   17560:	9b01      	ldr	r3, [sp, #4]
   17562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17566:	bf00      	nop
   17568:	b003      	add	sp, #12
   1756a:	f85d fb04 	ldr.w	pc, [sp], #4
   1756e:	bf00      	nop
   17570:	1fff96c8 	.word	0x1fff96c8
   17574:	1fff96c4 	.word	0x1fff96c4

00017578 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   17578:	b500      	push	{lr}
   1757a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1757c:	f7ea f952 	bl	1824 <Sys_GetCoreID>
   17580:	4603      	mov	r3, r0
   17582:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   17584:	4a0d      	ldr	r2, [pc, #52]	; (175bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   17586:	9b01      	ldr	r3, [sp, #4]
   17588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1758c:	1e5a      	subs	r2, r3, #1
   1758e:	490b      	ldr	r1, [pc, #44]	; (175bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   17590:	9b01      	ldr	r3, [sp, #4]
   17592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   17596:	4a0a      	ldr	r2, [pc, #40]	; (175c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   17598:	9b01      	ldr	r3, [sp, #4]
   1759a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1759e:	f003 0301 	and.w	r3, r3, #1
   175a2:	2b00      	cmp	r3, #0
   175a4:	d106      	bne.n	175b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   175a6:	4a05      	ldr	r2, [pc, #20]	; (175bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   175a8:	9b01      	ldr	r3, [sp, #4]
   175aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175ae:	2b00      	cmp	r3, #0
   175b0:	d100      	bne.n	175b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   175b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   175b4:	bf00      	nop
   175b6:	b003      	add	sp, #12
   175b8:	f85d fb04 	ldr.w	pc, [sp], #4
   175bc:	1fff96c8 	.word	0x1fff96c8
   175c0:	1fff96c4 	.word	0x1fff96c4

000175c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   175c4:	b500      	push	{lr}
   175c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   175c8:	f7ea f92c 	bl	1824 <Sys_GetCoreID>
   175cc:	4603      	mov	r3, r0
   175ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   175d0:	4a10      	ldr	r2, [pc, #64]	; (17614 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   175d2:	9b01      	ldr	r3, [sp, #4]
   175d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175d8:	2b00      	cmp	r3, #0
   175da:	d10d      	bne.n	175f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   175dc:	f7e9 f9b8 	bl	950 <Pwm_schm_read_msr>
   175e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   175e2:	9b00      	ldr	r3, [sp, #0]
   175e4:	f003 0301 	and.w	r3, r3, #1
   175e8:	2b00      	cmp	r3, #0
   175ea:	d100      	bne.n	175ee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   175ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   175ee:	490a      	ldr	r1, [pc, #40]	; (17618 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   175f0:	9b01      	ldr	r3, [sp, #4]
   175f2:	9a00      	ldr	r2, [sp, #0]
   175f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   175f8:	4a06      	ldr	r2, [pc, #24]	; (17614 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   175fa:	9b01      	ldr	r3, [sp, #4]
   175fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17600:	1c5a      	adds	r2, r3, #1
   17602:	4904      	ldr	r1, [pc, #16]	; (17614 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   17604:	9b01      	ldr	r3, [sp, #4]
   17606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1760a:	bf00      	nop
   1760c:	b003      	add	sp, #12
   1760e:	f85d fb04 	ldr.w	pc, [sp], #4
   17612:	bf00      	nop
   17614:	1fff96d0 	.word	0x1fff96d0
   17618:	1fff96cc 	.word	0x1fff96cc

0001761c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   1761c:	b500      	push	{lr}
   1761e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17620:	f7ea f900 	bl	1824 <Sys_GetCoreID>
   17624:	4603      	mov	r3, r0
   17626:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   17628:	4a0d      	ldr	r2, [pc, #52]	; (17660 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   1762a:	9b01      	ldr	r3, [sp, #4]
   1762c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17630:	1e5a      	subs	r2, r3, #1
   17632:	490b      	ldr	r1, [pc, #44]	; (17660 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   17634:	9b01      	ldr	r3, [sp, #4]
   17636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1763a:	4a0a      	ldr	r2, [pc, #40]	; (17664 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   1763c:	9b01      	ldr	r3, [sp, #4]
   1763e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17642:	f003 0301 	and.w	r3, r3, #1
   17646:	2b00      	cmp	r3, #0
   17648:	d106      	bne.n	17658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   1764a:	4a05      	ldr	r2, [pc, #20]	; (17660 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   1764c:	9b01      	ldr	r3, [sp, #4]
   1764e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17652:	2b00      	cmp	r3, #0
   17654:	d100      	bne.n	17658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17656:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17658:	bf00      	nop
   1765a:	b003      	add	sp, #12
   1765c:	f85d fb04 	ldr.w	pc, [sp], #4
   17660:	1fff96d0 	.word	0x1fff96d0
   17664:	1fff96cc 	.word	0x1fff96cc

00017668 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   17668:	b500      	push	{lr}
   1766a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1766c:	f7ea f8da 	bl	1824 <Sys_GetCoreID>
   17670:	4603      	mov	r3, r0
   17672:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   17674:	4a10      	ldr	r2, [pc, #64]	; (176b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   17676:	9b01      	ldr	r3, [sp, #4]
   17678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1767c:	2b00      	cmp	r3, #0
   1767e:	d10d      	bne.n	1769c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17680:	f7e9 f966 	bl	950 <Pwm_schm_read_msr>
   17684:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17686:	9b00      	ldr	r3, [sp, #0]
   17688:	f003 0301 	and.w	r3, r3, #1
   1768c:	2b00      	cmp	r3, #0
   1768e:	d100      	bne.n	17692 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17690:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   17692:	490a      	ldr	r1, [pc, #40]	; (176bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   17694:	9b01      	ldr	r3, [sp, #4]
   17696:	9a00      	ldr	r2, [sp, #0]
   17698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   1769c:	4a06      	ldr	r2, [pc, #24]	; (176b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1769e:	9b01      	ldr	r3, [sp, #4]
   176a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176a4:	1c5a      	adds	r2, r3, #1
   176a6:	4904      	ldr	r1, [pc, #16]	; (176b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   176a8:	9b01      	ldr	r3, [sp, #4]
   176aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   176ae:	bf00      	nop
   176b0:	b003      	add	sp, #12
   176b2:	f85d fb04 	ldr.w	pc, [sp], #4
   176b6:	bf00      	nop
   176b8:	1fff96d8 	.word	0x1fff96d8
   176bc:	1fff96d4 	.word	0x1fff96d4

000176c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   176c0:	b500      	push	{lr}
   176c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   176c4:	f7ea f8ae 	bl	1824 <Sys_GetCoreID>
   176c8:	4603      	mov	r3, r0
   176ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   176cc:	4a0d      	ldr	r2, [pc, #52]	; (17704 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   176ce:	9b01      	ldr	r3, [sp, #4]
   176d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176d4:	1e5a      	subs	r2, r3, #1
   176d6:	490b      	ldr	r1, [pc, #44]	; (17704 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   176d8:	9b01      	ldr	r3, [sp, #4]
   176da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   176de:	4a0a      	ldr	r2, [pc, #40]	; (17708 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   176e0:	9b01      	ldr	r3, [sp, #4]
   176e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176e6:	f003 0301 	and.w	r3, r3, #1
   176ea:	2b00      	cmp	r3, #0
   176ec:	d106      	bne.n	176fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   176ee:	4a05      	ldr	r2, [pc, #20]	; (17704 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   176f0:	9b01      	ldr	r3, [sp, #4]
   176f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176f6:	2b00      	cmp	r3, #0
   176f8:	d100      	bne.n	176fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   176fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   176fc:	bf00      	nop
   176fe:	b003      	add	sp, #12
   17700:	f85d fb04 	ldr.w	pc, [sp], #4
   17704:	1fff96d8 	.word	0x1fff96d8
   17708:	1fff96d4 	.word	0x1fff96d4

0001770c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   1770c:	b500      	push	{lr}
   1770e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17710:	f7ea f888 	bl	1824 <Sys_GetCoreID>
   17714:	4603      	mov	r3, r0
   17716:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   17718:	4a10      	ldr	r2, [pc, #64]	; (1775c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1771a:	9b01      	ldr	r3, [sp, #4]
   1771c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17720:	2b00      	cmp	r3, #0
   17722:	d10d      	bne.n	17740 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17724:	f7e9 f914 	bl	950 <Pwm_schm_read_msr>
   17728:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1772a:	9b00      	ldr	r3, [sp, #0]
   1772c:	f003 0301 	and.w	r3, r3, #1
   17730:	2b00      	cmp	r3, #0
   17732:	d100      	bne.n	17736 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17734:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   17736:	490a      	ldr	r1, [pc, #40]	; (17760 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   17738:	9b01      	ldr	r3, [sp, #4]
   1773a:	9a00      	ldr	r2, [sp, #0]
   1773c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   17740:	4a06      	ldr	r2, [pc, #24]	; (1775c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   17742:	9b01      	ldr	r3, [sp, #4]
   17744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17748:	1c5a      	adds	r2, r3, #1
   1774a:	4904      	ldr	r1, [pc, #16]	; (1775c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1774c:	9b01      	ldr	r3, [sp, #4]
   1774e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17752:	bf00      	nop
   17754:	b003      	add	sp, #12
   17756:	f85d fb04 	ldr.w	pc, [sp], #4
   1775a:	bf00      	nop
   1775c:	1fff96e0 	.word	0x1fff96e0
   17760:	1fff96dc 	.word	0x1fff96dc

00017764 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   17764:	b500      	push	{lr}
   17766:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17768:	f7ea f85c 	bl	1824 <Sys_GetCoreID>
   1776c:	4603      	mov	r3, r0
   1776e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   17770:	4a0d      	ldr	r2, [pc, #52]	; (177a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   17772:	9b01      	ldr	r3, [sp, #4]
   17774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17778:	1e5a      	subs	r2, r3, #1
   1777a:	490b      	ldr	r1, [pc, #44]	; (177a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   1777c:	9b01      	ldr	r3, [sp, #4]
   1777e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   17782:	4a0a      	ldr	r2, [pc, #40]	; (177ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   17784:	9b01      	ldr	r3, [sp, #4]
   17786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1778a:	f003 0301 	and.w	r3, r3, #1
   1778e:	2b00      	cmp	r3, #0
   17790:	d106      	bne.n	177a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   17792:	4a05      	ldr	r2, [pc, #20]	; (177a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   17794:	9b01      	ldr	r3, [sp, #4]
   17796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1779a:	2b00      	cmp	r3, #0
   1779c:	d100      	bne.n	177a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1779e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   177a0:	bf00      	nop
   177a2:	b003      	add	sp, #12
   177a4:	f85d fb04 	ldr.w	pc, [sp], #4
   177a8:	1fff96e0 	.word	0x1fff96e0
   177ac:	1fff96dc 	.word	0x1fff96dc

000177b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   177b0:	b500      	push	{lr}
   177b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   177b4:	f7ea f836 	bl	1824 <Sys_GetCoreID>
   177b8:	4603      	mov	r3, r0
   177ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   177bc:	4a10      	ldr	r2, [pc, #64]	; (17800 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   177be:	9b01      	ldr	r3, [sp, #4]
   177c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177c4:	2b00      	cmp	r3, #0
   177c6:	d10d      	bne.n	177e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   177c8:	f7e9 f8c2 	bl	950 <Pwm_schm_read_msr>
   177cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   177ce:	9b00      	ldr	r3, [sp, #0]
   177d0:	f003 0301 	and.w	r3, r3, #1
   177d4:	2b00      	cmp	r3, #0
   177d6:	d100      	bne.n	177da <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   177d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   177da:	490a      	ldr	r1, [pc, #40]	; (17804 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   177dc:	9b01      	ldr	r3, [sp, #4]
   177de:	9a00      	ldr	r2, [sp, #0]
   177e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   177e4:	4a06      	ldr	r2, [pc, #24]	; (17800 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   177e6:	9b01      	ldr	r3, [sp, #4]
   177e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177ec:	1c5a      	adds	r2, r3, #1
   177ee:	4904      	ldr	r1, [pc, #16]	; (17800 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   177f0:	9b01      	ldr	r3, [sp, #4]
   177f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   177f6:	bf00      	nop
   177f8:	b003      	add	sp, #12
   177fa:	f85d fb04 	ldr.w	pc, [sp], #4
   177fe:	bf00      	nop
   17800:	1fff96e8 	.word	0x1fff96e8
   17804:	1fff96e4 	.word	0x1fff96e4

00017808 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   17808:	b500      	push	{lr}
   1780a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1780c:	f7ea f80a 	bl	1824 <Sys_GetCoreID>
   17810:	4603      	mov	r3, r0
   17812:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   17814:	4a0d      	ldr	r2, [pc, #52]	; (1784c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   17816:	9b01      	ldr	r3, [sp, #4]
   17818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1781c:	1e5a      	subs	r2, r3, #1
   1781e:	490b      	ldr	r1, [pc, #44]	; (1784c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   17820:	9b01      	ldr	r3, [sp, #4]
   17822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   17826:	4a0a      	ldr	r2, [pc, #40]	; (17850 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   17828:	9b01      	ldr	r3, [sp, #4]
   1782a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1782e:	f003 0301 	and.w	r3, r3, #1
   17832:	2b00      	cmp	r3, #0
   17834:	d106      	bne.n	17844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   17836:	4a05      	ldr	r2, [pc, #20]	; (1784c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   17838:	9b01      	ldr	r3, [sp, #4]
   1783a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1783e:	2b00      	cmp	r3, #0
   17840:	d100      	bne.n	17844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17842:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17844:	bf00      	nop
   17846:	b003      	add	sp, #12
   17848:	f85d fb04 	ldr.w	pc, [sp], #4
   1784c:	1fff96e8 	.word	0x1fff96e8
   17850:	1fff96e4 	.word	0x1fff96e4

00017854 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   17854:	b500      	push	{lr}
   17856:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17858:	f7e9 ffe4 	bl	1824 <Sys_GetCoreID>
   1785c:	4603      	mov	r3, r0
   1785e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   17860:	4a10      	ldr	r2, [pc, #64]	; (178a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17862:	9b01      	ldr	r3, [sp, #4]
   17864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17868:	2b00      	cmp	r3, #0
   1786a:	d10d      	bne.n	17888 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1786c:	f7e9 f870 	bl	950 <Pwm_schm_read_msr>
   17870:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17872:	9b00      	ldr	r3, [sp, #0]
   17874:	f003 0301 	and.w	r3, r3, #1
   17878:	2b00      	cmp	r3, #0
   1787a:	d100      	bne.n	1787e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1787c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1787e:	490a      	ldr	r1, [pc, #40]	; (178a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   17880:	9b01      	ldr	r3, [sp, #4]
   17882:	9a00      	ldr	r2, [sp, #0]
   17884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   17888:	4a06      	ldr	r2, [pc, #24]	; (178a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   1788a:	9b01      	ldr	r3, [sp, #4]
   1788c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17890:	1c5a      	adds	r2, r3, #1
   17892:	4904      	ldr	r1, [pc, #16]	; (178a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17894:	9b01      	ldr	r3, [sp, #4]
   17896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1789a:	bf00      	nop
   1789c:	b003      	add	sp, #12
   1789e:	f85d fb04 	ldr.w	pc, [sp], #4
   178a2:	bf00      	nop
   178a4:	1fff96f0 	.word	0x1fff96f0
   178a8:	1fff96ec 	.word	0x1fff96ec

000178ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   178ac:	b500      	push	{lr}
   178ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   178b0:	f7e9 ffb8 	bl	1824 <Sys_GetCoreID>
   178b4:	4603      	mov	r3, r0
   178b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   178b8:	4a0d      	ldr	r2, [pc, #52]	; (178f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   178ba:	9b01      	ldr	r3, [sp, #4]
   178bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178c0:	1e5a      	subs	r2, r3, #1
   178c2:	490b      	ldr	r1, [pc, #44]	; (178f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   178c4:	9b01      	ldr	r3, [sp, #4]
   178c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   178ca:	4a0a      	ldr	r2, [pc, #40]	; (178f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   178cc:	9b01      	ldr	r3, [sp, #4]
   178ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178d2:	f003 0301 	and.w	r3, r3, #1
   178d6:	2b00      	cmp	r3, #0
   178d8:	d106      	bne.n	178e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   178da:	4a05      	ldr	r2, [pc, #20]	; (178f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   178dc:	9b01      	ldr	r3, [sp, #4]
   178de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178e2:	2b00      	cmp	r3, #0
   178e4:	d100      	bne.n	178e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   178e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   178e8:	bf00      	nop
   178ea:	b003      	add	sp, #12
   178ec:	f85d fb04 	ldr.w	pc, [sp], #4
   178f0:	1fff96f0 	.word	0x1fff96f0
   178f4:	1fff96ec 	.word	0x1fff96ec

000178f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   178f8:	b500      	push	{lr}
   178fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   178fc:	f7e9 ff92 	bl	1824 <Sys_GetCoreID>
   17900:	4603      	mov	r3, r0
   17902:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   17904:	4a10      	ldr	r2, [pc, #64]	; (17948 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   17906:	9b01      	ldr	r3, [sp, #4]
   17908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1790c:	2b00      	cmp	r3, #0
   1790e:	d10d      	bne.n	1792c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17910:	f7e9 f81e 	bl	950 <Pwm_schm_read_msr>
   17914:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17916:	9b00      	ldr	r3, [sp, #0]
   17918:	f003 0301 	and.w	r3, r3, #1
   1791c:	2b00      	cmp	r3, #0
   1791e:	d100      	bne.n	17922 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17920:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   17922:	490a      	ldr	r1, [pc, #40]	; (1794c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   17924:	9b01      	ldr	r3, [sp, #4]
   17926:	9a00      	ldr	r2, [sp, #0]
   17928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   1792c:	4a06      	ldr	r2, [pc, #24]	; (17948 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1792e:	9b01      	ldr	r3, [sp, #4]
   17930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17934:	1c5a      	adds	r2, r3, #1
   17936:	4904      	ldr	r1, [pc, #16]	; (17948 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   17938:	9b01      	ldr	r3, [sp, #4]
   1793a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1793e:	bf00      	nop
   17940:	b003      	add	sp, #12
   17942:	f85d fb04 	ldr.w	pc, [sp], #4
   17946:	bf00      	nop
   17948:	1fff96f8 	.word	0x1fff96f8
   1794c:	1fff96f4 	.word	0x1fff96f4

00017950 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   17950:	b500      	push	{lr}
   17952:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17954:	f7e9 ff66 	bl	1824 <Sys_GetCoreID>
   17958:	4603      	mov	r3, r0
   1795a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   1795c:	4a0d      	ldr	r2, [pc, #52]	; (17994 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   1795e:	9b01      	ldr	r3, [sp, #4]
   17960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17964:	1e5a      	subs	r2, r3, #1
   17966:	490b      	ldr	r1, [pc, #44]	; (17994 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17968:	9b01      	ldr	r3, [sp, #4]
   1796a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1796e:	4a0a      	ldr	r2, [pc, #40]	; (17998 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   17970:	9b01      	ldr	r3, [sp, #4]
   17972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17976:	f003 0301 	and.w	r3, r3, #1
   1797a:	2b00      	cmp	r3, #0
   1797c:	d106      	bne.n	1798c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   1797e:	4a05      	ldr	r2, [pc, #20]	; (17994 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17980:	9b01      	ldr	r3, [sp, #4]
   17982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17986:	2b00      	cmp	r3, #0
   17988:	d100      	bne.n	1798c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1798a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1798c:	bf00      	nop
   1798e:	b003      	add	sp, #12
   17990:	f85d fb04 	ldr.w	pc, [sp], #4
   17994:	1fff96f8 	.word	0x1fff96f8
   17998:	1fff96f4 	.word	0x1fff96f4

0001799c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   1799c:	b500      	push	{lr}
   1799e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   179a0:	f7e9 ff40 	bl	1824 <Sys_GetCoreID>
   179a4:	4603      	mov	r3, r0
   179a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   179a8:	4a10      	ldr	r2, [pc, #64]	; (179ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   179aa:	9b01      	ldr	r3, [sp, #4]
   179ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179b0:	2b00      	cmp	r3, #0
   179b2:	d10d      	bne.n	179d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   179b4:	f7e8 ffcc 	bl	950 <Pwm_schm_read_msr>
   179b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   179ba:	9b00      	ldr	r3, [sp, #0]
   179bc:	f003 0301 	and.w	r3, r3, #1
   179c0:	2b00      	cmp	r3, #0
   179c2:	d100      	bne.n	179c6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   179c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   179c6:	490a      	ldr	r1, [pc, #40]	; (179f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   179c8:	9b01      	ldr	r3, [sp, #4]
   179ca:	9a00      	ldr	r2, [sp, #0]
   179cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   179d0:	4a06      	ldr	r2, [pc, #24]	; (179ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   179d2:	9b01      	ldr	r3, [sp, #4]
   179d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179d8:	1c5a      	adds	r2, r3, #1
   179da:	4904      	ldr	r1, [pc, #16]	; (179ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   179dc:	9b01      	ldr	r3, [sp, #4]
   179de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   179e2:	bf00      	nop
   179e4:	b003      	add	sp, #12
   179e6:	f85d fb04 	ldr.w	pc, [sp], #4
   179ea:	bf00      	nop
   179ec:	1fff9700 	.word	0x1fff9700
   179f0:	1fff96fc 	.word	0x1fff96fc

000179f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   179f4:	b500      	push	{lr}
   179f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   179f8:	f7e9 ff14 	bl	1824 <Sys_GetCoreID>
   179fc:	4603      	mov	r3, r0
   179fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   17a00:	4a0d      	ldr	r2, [pc, #52]	; (17a38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17a02:	9b01      	ldr	r3, [sp, #4]
   17a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a08:	1e5a      	subs	r2, r3, #1
   17a0a:	490b      	ldr	r1, [pc, #44]	; (17a38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17a0c:	9b01      	ldr	r3, [sp, #4]
   17a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   17a12:	4a0a      	ldr	r2, [pc, #40]	; (17a3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   17a14:	9b01      	ldr	r3, [sp, #4]
   17a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a1a:	f003 0301 	and.w	r3, r3, #1
   17a1e:	2b00      	cmp	r3, #0
   17a20:	d106      	bne.n	17a30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   17a22:	4a05      	ldr	r2, [pc, #20]	; (17a38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17a24:	9b01      	ldr	r3, [sp, #4]
   17a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a2a:	2b00      	cmp	r3, #0
   17a2c:	d100      	bne.n	17a30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17a2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17a30:	bf00      	nop
   17a32:	b003      	add	sp, #12
   17a34:	f85d fb04 	ldr.w	pc, [sp], #4
   17a38:	1fff9700 	.word	0x1fff9700
   17a3c:	1fff96fc 	.word	0x1fff96fc

00017a40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17a40:	b500      	push	{lr}
   17a42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a44:	f7e9 feee 	bl	1824 <Sys_GetCoreID>
   17a48:	4603      	mov	r3, r0
   17a4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   17a4c:	4a10      	ldr	r2, [pc, #64]	; (17a90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17a4e:	9b01      	ldr	r3, [sp, #4]
   17a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a54:	2b00      	cmp	r3, #0
   17a56:	d10d      	bne.n	17a74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17a58:	f7e8 ff7a 	bl	950 <Pwm_schm_read_msr>
   17a5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17a5e:	9b00      	ldr	r3, [sp, #0]
   17a60:	f003 0301 	and.w	r3, r3, #1
   17a64:	2b00      	cmp	r3, #0
   17a66:	d100      	bne.n	17a6a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17a68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   17a6a:	490a      	ldr	r1, [pc, #40]	; (17a94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   17a6c:	9b01      	ldr	r3, [sp, #4]
   17a6e:	9a00      	ldr	r2, [sp, #0]
   17a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   17a74:	4a06      	ldr	r2, [pc, #24]	; (17a90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17a76:	9b01      	ldr	r3, [sp, #4]
   17a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a7c:	1c5a      	adds	r2, r3, #1
   17a7e:	4904      	ldr	r1, [pc, #16]	; (17a90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17a80:	9b01      	ldr	r3, [sp, #4]
   17a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17a86:	bf00      	nop
   17a88:	b003      	add	sp, #12
   17a8a:	f85d fb04 	ldr.w	pc, [sp], #4
   17a8e:	bf00      	nop
   17a90:	1fff9708 	.word	0x1fff9708
   17a94:	1fff9704 	.word	0x1fff9704

00017a98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17a98:	b500      	push	{lr}
   17a9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a9c:	f7e9 fec2 	bl	1824 <Sys_GetCoreID>
   17aa0:	4603      	mov	r3, r0
   17aa2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   17aa4:	4a0d      	ldr	r2, [pc, #52]	; (17adc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17aa6:	9b01      	ldr	r3, [sp, #4]
   17aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17aac:	1e5a      	subs	r2, r3, #1
   17aae:	490b      	ldr	r1, [pc, #44]	; (17adc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17ab0:	9b01      	ldr	r3, [sp, #4]
   17ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   17ab6:	4a0a      	ldr	r2, [pc, #40]	; (17ae0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   17ab8:	9b01      	ldr	r3, [sp, #4]
   17aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17abe:	f003 0301 	and.w	r3, r3, #1
   17ac2:	2b00      	cmp	r3, #0
   17ac4:	d106      	bne.n	17ad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   17ac6:	4a05      	ldr	r2, [pc, #20]	; (17adc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17ac8:	9b01      	ldr	r3, [sp, #4]
   17aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ace:	2b00      	cmp	r3, #0
   17ad0:	d100      	bne.n	17ad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17ad2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17ad4:	bf00      	nop
   17ad6:	b003      	add	sp, #12
   17ad8:	f85d fb04 	ldr.w	pc, [sp], #4
   17adc:	1fff9708 	.word	0x1fff9708
   17ae0:	1fff9704 	.word	0x1fff9704

00017ae4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17ae4:	b500      	push	{lr}
   17ae6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ae8:	f7e9 fe9c 	bl	1824 <Sys_GetCoreID>
   17aec:	4603      	mov	r3, r0
   17aee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   17af0:	4a10      	ldr	r2, [pc, #64]	; (17b34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17af2:	9b01      	ldr	r3, [sp, #4]
   17af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17af8:	2b00      	cmp	r3, #0
   17afa:	d10d      	bne.n	17b18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17afc:	f7e8 ff28 	bl	950 <Pwm_schm_read_msr>
   17b00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17b02:	9b00      	ldr	r3, [sp, #0]
   17b04:	f003 0301 	and.w	r3, r3, #1
   17b08:	2b00      	cmp	r3, #0
   17b0a:	d100      	bne.n	17b0e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17b0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   17b0e:	490a      	ldr	r1, [pc, #40]	; (17b38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   17b10:	9b01      	ldr	r3, [sp, #4]
   17b12:	9a00      	ldr	r2, [sp, #0]
   17b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   17b18:	4a06      	ldr	r2, [pc, #24]	; (17b34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17b1a:	9b01      	ldr	r3, [sp, #4]
   17b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b20:	1c5a      	adds	r2, r3, #1
   17b22:	4904      	ldr	r1, [pc, #16]	; (17b34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17b24:	9b01      	ldr	r3, [sp, #4]
   17b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17b2a:	bf00      	nop
   17b2c:	b003      	add	sp, #12
   17b2e:	f85d fb04 	ldr.w	pc, [sp], #4
   17b32:	bf00      	nop
   17b34:	1fff9710 	.word	0x1fff9710
   17b38:	1fff970c 	.word	0x1fff970c

00017b3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17b3c:	b500      	push	{lr}
   17b3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b40:	f7e9 fe70 	bl	1824 <Sys_GetCoreID>
   17b44:	4603      	mov	r3, r0
   17b46:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   17b48:	4a0d      	ldr	r2, [pc, #52]	; (17b80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17b4a:	9b01      	ldr	r3, [sp, #4]
   17b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b50:	1e5a      	subs	r2, r3, #1
   17b52:	490b      	ldr	r1, [pc, #44]	; (17b80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17b54:	9b01      	ldr	r3, [sp, #4]
   17b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   17b5a:	4a0a      	ldr	r2, [pc, #40]	; (17b84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   17b5c:	9b01      	ldr	r3, [sp, #4]
   17b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b62:	f003 0301 	and.w	r3, r3, #1
   17b66:	2b00      	cmp	r3, #0
   17b68:	d106      	bne.n	17b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   17b6a:	4a05      	ldr	r2, [pc, #20]	; (17b80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17b6c:	9b01      	ldr	r3, [sp, #4]
   17b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b72:	2b00      	cmp	r3, #0
   17b74:	d100      	bne.n	17b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17b76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17b78:	bf00      	nop
   17b7a:	b003      	add	sp, #12
   17b7c:	f85d fb04 	ldr.w	pc, [sp], #4
   17b80:	1fff9710 	.word	0x1fff9710
   17b84:	1fff970c 	.word	0x1fff970c

00017b88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17b88:	b500      	push	{lr}
   17b8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b8c:	f7e9 fe4a 	bl	1824 <Sys_GetCoreID>
   17b90:	4603      	mov	r3, r0
   17b92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   17b94:	4a10      	ldr	r2, [pc, #64]	; (17bd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17b96:	9b01      	ldr	r3, [sp, #4]
   17b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b9c:	2b00      	cmp	r3, #0
   17b9e:	d10d      	bne.n	17bbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ba0:	f7e8 fed6 	bl	950 <Pwm_schm_read_msr>
   17ba4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17ba6:	9b00      	ldr	r3, [sp, #0]
   17ba8:	f003 0301 	and.w	r3, r3, #1
   17bac:	2b00      	cmp	r3, #0
   17bae:	d100      	bne.n	17bb2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17bb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   17bb2:	490a      	ldr	r1, [pc, #40]	; (17bdc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   17bb4:	9b01      	ldr	r3, [sp, #4]
   17bb6:	9a00      	ldr	r2, [sp, #0]
   17bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   17bbc:	4a06      	ldr	r2, [pc, #24]	; (17bd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17bbe:	9b01      	ldr	r3, [sp, #4]
   17bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bc4:	1c5a      	adds	r2, r3, #1
   17bc6:	4904      	ldr	r1, [pc, #16]	; (17bd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17bc8:	9b01      	ldr	r3, [sp, #4]
   17bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17bce:	bf00      	nop
   17bd0:	b003      	add	sp, #12
   17bd2:	f85d fb04 	ldr.w	pc, [sp], #4
   17bd6:	bf00      	nop
   17bd8:	1fff9718 	.word	0x1fff9718
   17bdc:	1fff9714 	.word	0x1fff9714

00017be0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17be0:	b500      	push	{lr}
   17be2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17be4:	f7e9 fe1e 	bl	1824 <Sys_GetCoreID>
   17be8:	4603      	mov	r3, r0
   17bea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   17bec:	4a0d      	ldr	r2, [pc, #52]	; (17c24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17bee:	9b01      	ldr	r3, [sp, #4]
   17bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bf4:	1e5a      	subs	r2, r3, #1
   17bf6:	490b      	ldr	r1, [pc, #44]	; (17c24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17bf8:	9b01      	ldr	r3, [sp, #4]
   17bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   17bfe:	4a0a      	ldr	r2, [pc, #40]	; (17c28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   17c00:	9b01      	ldr	r3, [sp, #4]
   17c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c06:	f003 0301 	and.w	r3, r3, #1
   17c0a:	2b00      	cmp	r3, #0
   17c0c:	d106      	bne.n	17c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   17c0e:	4a05      	ldr	r2, [pc, #20]	; (17c24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17c10:	9b01      	ldr	r3, [sp, #4]
   17c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c16:	2b00      	cmp	r3, #0
   17c18:	d100      	bne.n	17c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17c1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17c1c:	bf00      	nop
   17c1e:	b003      	add	sp, #12
   17c20:	f85d fb04 	ldr.w	pc, [sp], #4
   17c24:	1fff9718 	.word	0x1fff9718
   17c28:	1fff9714 	.word	0x1fff9714

00017c2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17c2c:	b500      	push	{lr}
   17c2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c30:	f7e9 fdf8 	bl	1824 <Sys_GetCoreID>
   17c34:	4603      	mov	r3, r0
   17c36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   17c38:	4a10      	ldr	r2, [pc, #64]	; (17c7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17c3a:	9b01      	ldr	r3, [sp, #4]
   17c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c40:	2b00      	cmp	r3, #0
   17c42:	d10d      	bne.n	17c60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17c44:	f7e8 fe84 	bl	950 <Pwm_schm_read_msr>
   17c48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17c4a:	9b00      	ldr	r3, [sp, #0]
   17c4c:	f003 0301 	and.w	r3, r3, #1
   17c50:	2b00      	cmp	r3, #0
   17c52:	d100      	bne.n	17c56 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17c54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   17c56:	490a      	ldr	r1, [pc, #40]	; (17c80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   17c58:	9b01      	ldr	r3, [sp, #4]
   17c5a:	9a00      	ldr	r2, [sp, #0]
   17c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   17c60:	4a06      	ldr	r2, [pc, #24]	; (17c7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17c62:	9b01      	ldr	r3, [sp, #4]
   17c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c68:	1c5a      	adds	r2, r3, #1
   17c6a:	4904      	ldr	r1, [pc, #16]	; (17c7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17c6c:	9b01      	ldr	r3, [sp, #4]
   17c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17c72:	bf00      	nop
   17c74:	b003      	add	sp, #12
   17c76:	f85d fb04 	ldr.w	pc, [sp], #4
   17c7a:	bf00      	nop
   17c7c:	1fff9720 	.word	0x1fff9720
   17c80:	1fff971c 	.word	0x1fff971c

00017c84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17c84:	b500      	push	{lr}
   17c86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c88:	f7e9 fdcc 	bl	1824 <Sys_GetCoreID>
   17c8c:	4603      	mov	r3, r0
   17c8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   17c90:	4a0d      	ldr	r2, [pc, #52]	; (17cc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17c92:	9b01      	ldr	r3, [sp, #4]
   17c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c98:	1e5a      	subs	r2, r3, #1
   17c9a:	490b      	ldr	r1, [pc, #44]	; (17cc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17c9c:	9b01      	ldr	r3, [sp, #4]
   17c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   17ca2:	4a0a      	ldr	r2, [pc, #40]	; (17ccc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   17ca4:	9b01      	ldr	r3, [sp, #4]
   17ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17caa:	f003 0301 	and.w	r3, r3, #1
   17cae:	2b00      	cmp	r3, #0
   17cb0:	d106      	bne.n	17cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   17cb2:	4a05      	ldr	r2, [pc, #20]	; (17cc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17cb4:	9b01      	ldr	r3, [sp, #4]
   17cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cba:	2b00      	cmp	r3, #0
   17cbc:	d100      	bne.n	17cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17cbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17cc0:	bf00      	nop
   17cc2:	b003      	add	sp, #12
   17cc4:	f85d fb04 	ldr.w	pc, [sp], #4
   17cc8:	1fff9720 	.word	0x1fff9720
   17ccc:	1fff971c 	.word	0x1fff971c

00017cd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17cd0:	b500      	push	{lr}
   17cd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17cd4:	f7e9 fda6 	bl	1824 <Sys_GetCoreID>
   17cd8:	4603      	mov	r3, r0
   17cda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   17cdc:	4a10      	ldr	r2, [pc, #64]	; (17d20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17cde:	9b01      	ldr	r3, [sp, #4]
   17ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d10d      	bne.n	17d04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ce8:	f7e8 fe32 	bl	950 <Pwm_schm_read_msr>
   17cec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17cee:	9b00      	ldr	r3, [sp, #0]
   17cf0:	f003 0301 	and.w	r3, r3, #1
   17cf4:	2b00      	cmp	r3, #0
   17cf6:	d100      	bne.n	17cfa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17cf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   17cfa:	490a      	ldr	r1, [pc, #40]	; (17d24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   17cfc:	9b01      	ldr	r3, [sp, #4]
   17cfe:	9a00      	ldr	r2, [sp, #0]
   17d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   17d04:	4a06      	ldr	r2, [pc, #24]	; (17d20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17d06:	9b01      	ldr	r3, [sp, #4]
   17d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d0c:	1c5a      	adds	r2, r3, #1
   17d0e:	4904      	ldr	r1, [pc, #16]	; (17d20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17d10:	9b01      	ldr	r3, [sp, #4]
   17d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17d16:	bf00      	nop
   17d18:	b003      	add	sp, #12
   17d1a:	f85d fb04 	ldr.w	pc, [sp], #4
   17d1e:	bf00      	nop
   17d20:	1fff9728 	.word	0x1fff9728
   17d24:	1fff9724 	.word	0x1fff9724

00017d28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17d28:	b500      	push	{lr}
   17d2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d2c:	f7e9 fd7a 	bl	1824 <Sys_GetCoreID>
   17d30:	4603      	mov	r3, r0
   17d32:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   17d34:	4a0d      	ldr	r2, [pc, #52]	; (17d6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17d36:	9b01      	ldr	r3, [sp, #4]
   17d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d3c:	1e5a      	subs	r2, r3, #1
   17d3e:	490b      	ldr	r1, [pc, #44]	; (17d6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17d40:	9b01      	ldr	r3, [sp, #4]
   17d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   17d46:	4a0a      	ldr	r2, [pc, #40]	; (17d70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   17d48:	9b01      	ldr	r3, [sp, #4]
   17d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d4e:	f003 0301 	and.w	r3, r3, #1
   17d52:	2b00      	cmp	r3, #0
   17d54:	d106      	bne.n	17d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   17d56:	4a05      	ldr	r2, [pc, #20]	; (17d6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17d58:	9b01      	ldr	r3, [sp, #4]
   17d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d5e:	2b00      	cmp	r3, #0
   17d60:	d100      	bne.n	17d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17d62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17d64:	bf00      	nop
   17d66:	b003      	add	sp, #12
   17d68:	f85d fb04 	ldr.w	pc, [sp], #4
   17d6c:	1fff9728 	.word	0x1fff9728
   17d70:	1fff9724 	.word	0x1fff9724

00017d74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17d74:	b500      	push	{lr}
   17d76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d78:	f7e9 fd54 	bl	1824 <Sys_GetCoreID>
   17d7c:	4603      	mov	r3, r0
   17d7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   17d80:	4a10      	ldr	r2, [pc, #64]	; (17dc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17d82:	9b01      	ldr	r3, [sp, #4]
   17d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d88:	2b00      	cmp	r3, #0
   17d8a:	d10d      	bne.n	17da8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17d8c:	f7e8 fde0 	bl	950 <Pwm_schm_read_msr>
   17d90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17d92:	9b00      	ldr	r3, [sp, #0]
   17d94:	f003 0301 	and.w	r3, r3, #1
   17d98:	2b00      	cmp	r3, #0
   17d9a:	d100      	bne.n	17d9e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17d9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   17d9e:	490a      	ldr	r1, [pc, #40]	; (17dc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   17da0:	9b01      	ldr	r3, [sp, #4]
   17da2:	9a00      	ldr	r2, [sp, #0]
   17da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   17da8:	4a06      	ldr	r2, [pc, #24]	; (17dc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17daa:	9b01      	ldr	r3, [sp, #4]
   17dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17db0:	1c5a      	adds	r2, r3, #1
   17db2:	4904      	ldr	r1, [pc, #16]	; (17dc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17db4:	9b01      	ldr	r3, [sp, #4]
   17db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17dba:	bf00      	nop
   17dbc:	b003      	add	sp, #12
   17dbe:	f85d fb04 	ldr.w	pc, [sp], #4
   17dc2:	bf00      	nop
   17dc4:	1fff9730 	.word	0x1fff9730
   17dc8:	1fff972c 	.word	0x1fff972c

00017dcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17dcc:	b500      	push	{lr}
   17dce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17dd0:	f7e9 fd28 	bl	1824 <Sys_GetCoreID>
   17dd4:	4603      	mov	r3, r0
   17dd6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   17dd8:	4a0d      	ldr	r2, [pc, #52]	; (17e10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17dda:	9b01      	ldr	r3, [sp, #4]
   17ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17de0:	1e5a      	subs	r2, r3, #1
   17de2:	490b      	ldr	r1, [pc, #44]	; (17e10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17de4:	9b01      	ldr	r3, [sp, #4]
   17de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   17dea:	4a0a      	ldr	r2, [pc, #40]	; (17e14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   17dec:	9b01      	ldr	r3, [sp, #4]
   17dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17df2:	f003 0301 	and.w	r3, r3, #1
   17df6:	2b00      	cmp	r3, #0
   17df8:	d106      	bne.n	17e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   17dfa:	4a05      	ldr	r2, [pc, #20]	; (17e10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17dfc:	9b01      	ldr	r3, [sp, #4]
   17dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e02:	2b00      	cmp	r3, #0
   17e04:	d100      	bne.n	17e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17e06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17e08:	bf00      	nop
   17e0a:	b003      	add	sp, #12
   17e0c:	f85d fb04 	ldr.w	pc, [sp], #4
   17e10:	1fff9730 	.word	0x1fff9730
   17e14:	1fff972c 	.word	0x1fff972c

00017e18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   17e18:	b500      	push	{lr}
   17e1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e1c:	f7e9 fd02 	bl	1824 <Sys_GetCoreID>
   17e20:	4603      	mov	r3, r0
   17e22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   17e24:	4a10      	ldr	r2, [pc, #64]	; (17e68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17e26:	9b01      	ldr	r3, [sp, #4]
   17e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e2c:	2b00      	cmp	r3, #0
   17e2e:	d10d      	bne.n	17e4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17e30:	f7e8 fd8e 	bl	950 <Pwm_schm_read_msr>
   17e34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17e36:	9b00      	ldr	r3, [sp, #0]
   17e38:	f003 0301 	and.w	r3, r3, #1
   17e3c:	2b00      	cmp	r3, #0
   17e3e:	d100      	bne.n	17e42 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17e40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   17e42:	490a      	ldr	r1, [pc, #40]	; (17e6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   17e44:	9b01      	ldr	r3, [sp, #4]
   17e46:	9a00      	ldr	r2, [sp, #0]
   17e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   17e4c:	4a06      	ldr	r2, [pc, #24]	; (17e68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17e4e:	9b01      	ldr	r3, [sp, #4]
   17e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e54:	1c5a      	adds	r2, r3, #1
   17e56:	4904      	ldr	r1, [pc, #16]	; (17e68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17e58:	9b01      	ldr	r3, [sp, #4]
   17e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17e5e:	bf00      	nop
   17e60:	b003      	add	sp, #12
   17e62:	f85d fb04 	ldr.w	pc, [sp], #4
   17e66:	bf00      	nop
   17e68:	1fff9738 	.word	0x1fff9738
   17e6c:	1fff9734 	.word	0x1fff9734

00017e70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   17e70:	b500      	push	{lr}
   17e72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e74:	f7e9 fcd6 	bl	1824 <Sys_GetCoreID>
   17e78:	4603      	mov	r3, r0
   17e7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   17e7c:	4a0d      	ldr	r2, [pc, #52]	; (17eb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17e7e:	9b01      	ldr	r3, [sp, #4]
   17e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e84:	1e5a      	subs	r2, r3, #1
   17e86:	490b      	ldr	r1, [pc, #44]	; (17eb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17e88:	9b01      	ldr	r3, [sp, #4]
   17e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   17e8e:	4a0a      	ldr	r2, [pc, #40]	; (17eb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   17e90:	9b01      	ldr	r3, [sp, #4]
   17e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e96:	f003 0301 	and.w	r3, r3, #1
   17e9a:	2b00      	cmp	r3, #0
   17e9c:	d106      	bne.n	17eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   17e9e:	4a05      	ldr	r2, [pc, #20]	; (17eb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17ea0:	9b01      	ldr	r3, [sp, #4]
   17ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ea6:	2b00      	cmp	r3, #0
   17ea8:	d100      	bne.n	17eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17eaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17eac:	bf00      	nop
   17eae:	b003      	add	sp, #12
   17eb0:	f85d fb04 	ldr.w	pc, [sp], #4
   17eb4:	1fff9738 	.word	0x1fff9738
   17eb8:	1fff9734 	.word	0x1fff9734

00017ebc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   17ebc:	b500      	push	{lr}
   17ebe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ec0:	f7e9 fcb0 	bl	1824 <Sys_GetCoreID>
   17ec4:	4603      	mov	r3, r0
   17ec6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   17ec8:	4a10      	ldr	r2, [pc, #64]	; (17f0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17eca:	9b01      	ldr	r3, [sp, #4]
   17ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ed0:	2b00      	cmp	r3, #0
   17ed2:	d10d      	bne.n	17ef0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ed4:	f7e8 fd3c 	bl	950 <Pwm_schm_read_msr>
   17ed8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17eda:	9b00      	ldr	r3, [sp, #0]
   17edc:	f003 0301 	and.w	r3, r3, #1
   17ee0:	2b00      	cmp	r3, #0
   17ee2:	d100      	bne.n	17ee6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17ee4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   17ee6:	490a      	ldr	r1, [pc, #40]	; (17f10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   17ee8:	9b01      	ldr	r3, [sp, #4]
   17eea:	9a00      	ldr	r2, [sp, #0]
   17eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   17ef0:	4a06      	ldr	r2, [pc, #24]	; (17f0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17ef2:	9b01      	ldr	r3, [sp, #4]
   17ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ef8:	1c5a      	adds	r2, r3, #1
   17efa:	4904      	ldr	r1, [pc, #16]	; (17f0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17efc:	9b01      	ldr	r3, [sp, #4]
   17efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17f02:	bf00      	nop
   17f04:	b003      	add	sp, #12
   17f06:	f85d fb04 	ldr.w	pc, [sp], #4
   17f0a:	bf00      	nop
   17f0c:	1fff9740 	.word	0x1fff9740
   17f10:	1fff973c 	.word	0x1fff973c

00017f14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   17f14:	b500      	push	{lr}
   17f16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17f18:	f7e9 fc84 	bl	1824 <Sys_GetCoreID>
   17f1c:	4603      	mov	r3, r0
   17f1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   17f20:	4a0d      	ldr	r2, [pc, #52]	; (17f58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17f22:	9b01      	ldr	r3, [sp, #4]
   17f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f28:	1e5a      	subs	r2, r3, #1
   17f2a:	490b      	ldr	r1, [pc, #44]	; (17f58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17f2c:	9b01      	ldr	r3, [sp, #4]
   17f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   17f32:	4a0a      	ldr	r2, [pc, #40]	; (17f5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   17f34:	9b01      	ldr	r3, [sp, #4]
   17f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f3a:	f003 0301 	and.w	r3, r3, #1
   17f3e:	2b00      	cmp	r3, #0
   17f40:	d106      	bne.n	17f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   17f42:	4a05      	ldr	r2, [pc, #20]	; (17f58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17f44:	9b01      	ldr	r3, [sp, #4]
   17f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f4a:	2b00      	cmp	r3, #0
   17f4c:	d100      	bne.n	17f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17f4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17f50:	bf00      	nop
   17f52:	b003      	add	sp, #12
   17f54:	f85d fb04 	ldr.w	pc, [sp], #4
   17f58:	1fff9740 	.word	0x1fff9740
   17f5c:	1fff973c 	.word	0x1fff973c

00017f60 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   17f60:	bf00      	nop
   17f62:	4770      	bx	lr

00017f64 <Det_GetModuleName>:
 * @brief This function gets the string name corresponding to a module Id.
 * 
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 */
char* Det_GetModuleName( uint16 ModuleId ) {
   17f64:	b082      	sub	sp, #8
   17f66:	4603      	mov	r3, r0
   17f68:	f8ad 3006 	strh.w	r3, [sp, #6]
    switch ( ModuleId ) {
   17f6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17f70:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   17f74:	dc7d      	bgt.n	18072 <Det_GetModuleName+0x10e>
   17f76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17f7a:	da04      	bge.n	17f86 <Det_GetModuleName+0x22>
   17f7c:	2b7c      	cmp	r3, #124	; 0x7c
   17f7e:	dc49      	bgt.n	18014 <Det_GetModuleName+0xb0>
   17f80:	2b65      	cmp	r3, #101	; 0x65
   17f82:	da11      	bge.n	17fa8 <Det_GetModuleName+0x44>
        case SCHEDULER_MODULE_ID: ErrorString_Ptr[0] = "Scheduler module"; break;
        case HWIOAB_BUTTONS_MODULE_ID: ErrorString_Ptr[0] = "Buttons IO abstraction module"; break;
        case HWIOAB_LEDS_MODULE_ID: ErrorString_Ptr[0] = "Leds IO abstraction module"; break;
        case HWIOAB_POTS_MODULE_ID: ErrorString_Ptr[0] = "Pots IO abstraction module"; break;
        case HWIOAB_BUZZER_MODULE_ID: ErrorString_Ptr[0] = "Buzzer IO abstraction module"; break;
        default: break;    //Module ID is not used in aplication.
   17f84:	e075      	b.n	18072 <Det_GetModuleName+0x10e>
   17f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   17f8a:	2b04      	cmp	r3, #4
   17f8c:	d871      	bhi.n	18072 <Det_GetModuleName+0x10e>
   17f8e:	a201      	add	r2, pc, #4	; (adr r2, 17f94 <Det_GetModuleName+0x30>)
   17f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17f94:	0001804b 	.word	0x0001804b
   17f98:	00018053 	.word	0x00018053
   17f9c:	0001805b 	.word	0x0001805b
   17fa0:	00018063 	.word	0x00018063
   17fa4:	0001806b 	.word	0x0001806b
   17fa8:	3b65      	subs	r3, #101	; 0x65
   17faa:	2b17      	cmp	r3, #23
   17fac:	d861      	bhi.n	18072 <Det_GetModuleName+0x10e>
   17fae:	a201      	add	r2, pc, #4	; (adr r2, 17fb4 <Det_GetModuleName+0x50>)
   17fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17fb4:	0001801b 	.word	0x0001801b
   17fb8:	00018073 	.word	0x00018073
   17fbc:	00018073 	.word	0x00018073
   17fc0:	00018073 	.word	0x00018073
   17fc4:	00018073 	.word	0x00018073
   17fc8:	00018073 	.word	0x00018073
   17fcc:	00018073 	.word	0x00018073
   17fd0:	00018073 	.word	0x00018073
   17fd4:	00018073 	.word	0x00018073
   17fd8:	00018073 	.word	0x00018073
   17fdc:	00018073 	.word	0x00018073
   17fe0:	00018073 	.word	0x00018073
   17fe4:	00018073 	.word	0x00018073
   17fe8:	00018073 	.word	0x00018073
   17fec:	00018073 	.word	0x00018073
   17ff0:	00018073 	.word	0x00018073
   17ff4:	00018073 	.word	0x00018073
   17ff8:	00018073 	.word	0x00018073
   17ffc:	00018073 	.word	0x00018073
   18000:	00018033 	.word	0x00018033
   18004:	0001803b 	.word	0x0001803b
   18008:	00018073 	.word	0x00018073
   1800c:	00018043 	.word	0x00018043
   18010:	0001802b 	.word	0x0001802b
    switch ( ModuleId ) {
   18014:	2bff      	cmp	r3, #255	; 0xff
   18016:	d004      	beq.n	18022 <Det_GetModuleName+0xbe>
        default: break;    //Module ID is not used in aplication.
   18018:	e02b      	b.n	18072 <Det_GetModuleName+0x10e>
        case MCU_MODULE_ID: ErrorString_Ptr[0] = "Mcu module"; break;
   1801a:	4b19      	ldr	r3, [pc, #100]	; (18080 <Det_GetModuleName+0x11c>)
   1801c:	4a19      	ldr	r2, [pc, #100]	; (18084 <Det_GetModuleName+0x120>)
   1801e:	601a      	str	r2, [r3, #0]
   18020:	e028      	b.n	18074 <Det_GetModuleName+0x110>
        case CDD_PLATFORM_MODULE_ID: ErrorString_Ptr[0] = "Platform module"; break;
   18022:	4b17      	ldr	r3, [pc, #92]	; (18080 <Det_GetModuleName+0x11c>)
   18024:	4a18      	ldr	r2, [pc, #96]	; (18088 <Det_GetModuleName+0x124>)
   18026:	601a      	str	r2, [r3, #0]
   18028:	e024      	b.n	18074 <Det_GetModuleName+0x110>
        case PORT_MODULE_ID: ErrorString_Ptr[0] = "Port module"; break;
   1802a:	4b15      	ldr	r3, [pc, #84]	; (18080 <Det_GetModuleName+0x11c>)
   1802c:	4a17      	ldr	r2, [pc, #92]	; (1808c <Det_GetModuleName+0x128>)
   1802e:	601a      	str	r2, [r3, #0]
   18030:	e020      	b.n	18074 <Det_GetModuleName+0x110>
        case DIO_MODULE_ID: ErrorString_Ptr[0] = "Dio module"; break;
   18032:	4b13      	ldr	r3, [pc, #76]	; (18080 <Det_GetModuleName+0x11c>)
   18034:	4a16      	ldr	r2, [pc, #88]	; (18090 <Det_GetModuleName+0x12c>)
   18036:	601a      	str	r2, [r3, #0]
   18038:	e01c      	b.n	18074 <Det_GetModuleName+0x110>
        case PWM_MODULE_ID: ErrorString_Ptr[0] = "Pwm module"; break;
   1803a:	4b11      	ldr	r3, [pc, #68]	; (18080 <Det_GetModuleName+0x11c>)
   1803c:	4a15      	ldr	r2, [pc, #84]	; (18094 <Det_GetModuleName+0x130>)
   1803e:	601a      	str	r2, [r3, #0]
   18040:	e018      	b.n	18074 <Det_GetModuleName+0x110>
        case ADC_MODULE_ID: ErrorString_Ptr[0] = "Adc module"; break;
   18042:	4b0f      	ldr	r3, [pc, #60]	; (18080 <Det_GetModuleName+0x11c>)
   18044:	4a14      	ldr	r2, [pc, #80]	; (18098 <Det_GetModuleName+0x134>)
   18046:	601a      	str	r2, [r3, #0]
   18048:	e014      	b.n	18074 <Det_GetModuleName+0x110>
        case SCHEDULER_MODULE_ID: ErrorString_Ptr[0] = "Scheduler module"; break;
   1804a:	4b0d      	ldr	r3, [pc, #52]	; (18080 <Det_GetModuleName+0x11c>)
   1804c:	4a13      	ldr	r2, [pc, #76]	; (1809c <Det_GetModuleName+0x138>)
   1804e:	601a      	str	r2, [r3, #0]
   18050:	e010      	b.n	18074 <Det_GetModuleName+0x110>
        case HWIOAB_BUTTONS_MODULE_ID: ErrorString_Ptr[0] = "Buttons IO abstraction module"; break;
   18052:	4b0b      	ldr	r3, [pc, #44]	; (18080 <Det_GetModuleName+0x11c>)
   18054:	4a12      	ldr	r2, [pc, #72]	; (180a0 <Det_GetModuleName+0x13c>)
   18056:	601a      	str	r2, [r3, #0]
   18058:	e00c      	b.n	18074 <Det_GetModuleName+0x110>
        case HWIOAB_LEDS_MODULE_ID: ErrorString_Ptr[0] = "Leds IO abstraction module"; break;
   1805a:	4b09      	ldr	r3, [pc, #36]	; (18080 <Det_GetModuleName+0x11c>)
   1805c:	4a11      	ldr	r2, [pc, #68]	; (180a4 <Det_GetModuleName+0x140>)
   1805e:	601a      	str	r2, [r3, #0]
   18060:	e008      	b.n	18074 <Det_GetModuleName+0x110>
        case HWIOAB_POTS_MODULE_ID: ErrorString_Ptr[0] = "Pots IO abstraction module"; break;
   18062:	4b07      	ldr	r3, [pc, #28]	; (18080 <Det_GetModuleName+0x11c>)
   18064:	4a10      	ldr	r2, [pc, #64]	; (180a8 <Det_GetModuleName+0x144>)
   18066:	601a      	str	r2, [r3, #0]
   18068:	e004      	b.n	18074 <Det_GetModuleName+0x110>
        case HWIOAB_BUZZER_MODULE_ID: ErrorString_Ptr[0] = "Buzzer IO abstraction module"; break;
   1806a:	4b05      	ldr	r3, [pc, #20]	; (18080 <Det_GetModuleName+0x11c>)
   1806c:	4a0f      	ldr	r2, [pc, #60]	; (180ac <Det_GetModuleName+0x148>)
   1806e:	601a      	str	r2, [r3, #0]
   18070:	e000      	b.n	18074 <Det_GetModuleName+0x110>
        default: break;    //Module ID is not used in aplication.
   18072:	bf00      	nop
    }

    return ErrorString_Ptr[0];
   18074:	4b02      	ldr	r3, [pc, #8]	; (18080 <Det_GetModuleName+0x11c>)
   18076:	681b      	ldr	r3, [r3, #0]
}
   18078:	4618      	mov	r0, r3
   1807a:	b002      	add	sp, #8
   1807c:	4770      	bx	lr
   1807e:	bf00      	nop
   18080:	1fff9768 	.word	0x1fff9768
   18084:	00018de4 	.word	0x00018de4
   18088:	00018df0 	.word	0x00018df0
   1808c:	00018e00 	.word	0x00018e00
   18090:	00018e0c 	.word	0x00018e0c
   18094:	00018e18 	.word	0x00018e18
   18098:	00018e24 	.word	0x00018e24
   1809c:	00018e30 	.word	0x00018e30
   180a0:	00018e44 	.word	0x00018e44
   180a4:	00018e64 	.word	0x00018e64
   180a8:	00018e80 	.word	0x00018e80
   180ac:	00018e9c 	.word	0x00018e9c

000180b0 <Det_GetApiName>:
 * 
 * @param[in] ModuleId Module Id where error was detected. 
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 */
char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   180b0:	b082      	sub	sp, #8
   180b2:	4603      	mov	r3, r0
   180b4:	460a      	mov	r2, r1
   180b6:	f8ad 3006 	strh.w	r3, [sp, #6]
   180ba:	4613      	mov	r3, r2
   180bc:	f88d 3005 	strb.w	r3, [sp, #5]

    switch ( ModuleId ) {
   180c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   180c4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   180c8:	f300 82de 	bgt.w	18688 <Det_GetApiName+0x5d8>
   180cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   180d0:	da04      	bge.n	180dc <Det_GetApiName+0x2c>
   180d2:	2b7c      	cmp	r3, #124	; 0x7c
   180d4:	dc4c      	bgt.n	18170 <Det_GetApiName+0xc0>
   180d6:	2b65      	cmp	r3, #101	; 0x65
   180d8:	da12      	bge.n	18100 <Det_GetApiName+0x50>
                default: break; //Api doesnt report det error or is not used.
            }
        break;

        default: //Module ID is not used in aplication.
        break;
   180da:	e2d5      	b.n	18688 <Det_GetApiName+0x5d8>
   180dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   180e0:	2b04      	cmp	r3, #4
   180e2:	f200 82d1 	bhi.w	18688 <Det_GetApiName+0x5d8>
   180e6:	a201      	add	r2, pc, #4	; (adr r2, 180ec <Det_GetApiName+0x3c>)
   180e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180ec:	00018509 	.word	0x00018509
   180f0:	000185b1 	.word	0x000185b1
   180f4:	000185e3 	.word	0x000185e3
   180f8:	00018625 	.word	0x00018625
   180fc:	00018657 	.word	0x00018657
   18100:	3b65      	subs	r3, #101	; 0x65
   18102:	2b17      	cmp	r3, #23
   18104:	f200 82c0 	bhi.w	18688 <Det_GetApiName+0x5d8>
   18108:	a201      	add	r2, pc, #4	; (adr r2, 18110 <Det_GetApiName+0x60>)
   1810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1810e:	bf00      	nop
   18110:	00018177 	.word	0x00018177
   18114:	00018689 	.word	0x00018689
   18118:	00018689 	.word	0x00018689
   1811c:	00018689 	.word	0x00018689
   18120:	00018689 	.word	0x00018689
   18124:	00018689 	.word	0x00018689
   18128:	00018689 	.word	0x00018689
   1812c:	00018689 	.word	0x00018689
   18130:	00018689 	.word	0x00018689
   18134:	00018689 	.word	0x00018689
   18138:	00018689 	.word	0x00018689
   1813c:	00018689 	.word	0x00018689
   18140:	00018689 	.word	0x00018689
   18144:	00018689 	.word	0x00018689
   18148:	00018689 	.word	0x00018689
   1814c:	00018689 	.word	0x00018689
   18150:	00018689 	.word	0x00018689
   18154:	00018689 	.word	0x00018689
   18158:	00018689 	.word	0x00018689
   1815c:	00018271 	.word	0x00018271
   18160:	00018311 	.word	0x00018311
   18164:	00018689 	.word	0x00018689
   18168:	00018379 	.word	0x00018379
   1816c:	00018221 	.word	0x00018221
    switch ( ModuleId ) {
   18170:	2bff      	cmp	r3, #255	; 0xff
   18172:	d02d      	beq.n	181d0 <Det_GetApiName+0x120>
        break;
   18174:	e288      	b.n	18688 <Det_GetApiName+0x5d8>
            switch( ApiId ) {   //4 Apis that report det errors.
   18176:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1817a:	2b09      	cmp	r3, #9
   1817c:	d826      	bhi.n	181cc <Det_GetApiName+0x11c>
   1817e:	a201      	add	r2, pc, #4	; (adr r2, 18184 <Det_GetApiName+0xd4>)
   18180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18184:	000181ad 	.word	0x000181ad
   18188:	000181cd 	.word	0x000181cd
   1818c:	000181b5 	.word	0x000181b5
   18190:	000181cd 	.word	0x000181cd
   18194:	000181cd 	.word	0x000181cd
   18198:	000181cd 	.word	0x000181cd
   1819c:	000181cd 	.word	0x000181cd
   181a0:	000181cd 	.word	0x000181cd
   181a4:	000181bd 	.word	0x000181bd
   181a8:	000181c5 	.word	0x000181c5
                case MCU_INIT_ID: ErrorString_Ptr[1] = "Mcu_Init()"; break;
   181ac:	4bac      	ldr	r3, [pc, #688]	; (18460 <Det_GetApiName+0x3b0>)
   181ae:	4aad      	ldr	r2, [pc, #692]	; (18464 <Det_GetApiName+0x3b4>)
   181b0:	605a      	str	r2, [r3, #4]
   181b2:	e00c      	b.n	181ce <Det_GetApiName+0x11e>
                case MCU_INITCLOCK_ID: ErrorString_Ptr[1] = "Mcu_InitClock()"; break;
   181b4:	4baa      	ldr	r3, [pc, #680]	; (18460 <Det_GetApiName+0x3b0>)
   181b6:	4aac      	ldr	r2, [pc, #688]	; (18468 <Det_GetApiName+0x3b8>)
   181b8:	605a      	str	r2, [r3, #4]
   181ba:	e008      	b.n	181ce <Det_GetApiName+0x11e>
                case MCU_SETMODE_ID: ErrorString_Ptr[1] = "Mcu_SetMode()"; break;
   181bc:	4ba8      	ldr	r3, [pc, #672]	; (18460 <Det_GetApiName+0x3b0>)
   181be:	4aab      	ldr	r2, [pc, #684]	; (1846c <Det_GetApiName+0x3bc>)
   181c0:	605a      	str	r2, [r3, #4]
   181c2:	e004      	b.n	181ce <Det_GetApiName+0x11e>
                case MCU_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Mcu_GetVersionInfo()"; break;
   181c4:	4ba6      	ldr	r3, [pc, #664]	; (18460 <Det_GetApiName+0x3b0>)
   181c6:	4aaa      	ldr	r2, [pc, #680]	; (18470 <Det_GetApiName+0x3c0>)
   181c8:	605a      	str	r2, [r3, #4]
   181ca:	e000      	b.n	181ce <Det_GetApiName+0x11e>
                default: break; //Api doesnt report det error or is not used.
   181cc:	bf00      	nop
        break;
   181ce:	e25c      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //5 Apis that report det errors.
   181d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   181d4:	3b20      	subs	r3, #32
   181d6:	2b04      	cmp	r3, #4
   181d8:	d820      	bhi.n	1821c <Det_GetApiName+0x16c>
   181da:	a201      	add	r2, pc, #4	; (adr r2, 181e0 <Det_GetApiName+0x130>)
   181dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   181e0:	000181f5 	.word	0x000181f5
   181e4:	000181fd 	.word	0x000181fd
   181e8:	00018205 	.word	0x00018205
   181ec:	0001820d 	.word	0x0001820d
   181f0:	00018215 	.word	0x00018215
                case PLATFORM_INIT_ID: ErrorString_Ptr[1] = "Platform_Init()"; break;
   181f4:	4b9a      	ldr	r3, [pc, #616]	; (18460 <Det_GetApiName+0x3b0>)
   181f6:	4a9f      	ldr	r2, [pc, #636]	; (18474 <Det_GetApiName+0x3c4>)
   181f8:	605a      	str	r2, [r3, #4]
   181fa:	e010      	b.n	1821e <Det_GetApiName+0x16e>
                case PLATFORM_SET_IRQ_ID: ErrorString_Ptr[1] = "Platform_SetIrq()"; break;
   181fc:	4b98      	ldr	r3, [pc, #608]	; (18460 <Det_GetApiName+0x3b0>)
   181fe:	4a9e      	ldr	r2, [pc, #632]	; (18478 <Det_GetApiName+0x3c8>)
   18200:	605a      	str	r2, [r3, #4]
   18202:	e00c      	b.n	1821e <Det_GetApiName+0x16e>
                case PLATFORM_SET_IRQ_PRIO_ID: ErrorString_Ptr[1] = "Platform_SetIrqPriority()"; break;
   18204:	4b96      	ldr	r3, [pc, #600]	; (18460 <Det_GetApiName+0x3b0>)
   18206:	4a9d      	ldr	r2, [pc, #628]	; (1847c <Det_GetApiName+0x3cc>)
   18208:	605a      	str	r2, [r3, #4]
   1820a:	e008      	b.n	1821e <Det_GetApiName+0x16e>
                case PLATFORM_GET_IRQ_PRIO_ID: ErrorString_Ptr[1] = "Platform_GetIrqPriority()"; break;
   1820c:	4b94      	ldr	r3, [pc, #592]	; (18460 <Det_GetApiName+0x3b0>)
   1820e:	4a9c      	ldr	r2, [pc, #624]	; (18480 <Det_GetApiName+0x3d0>)
   18210:	605a      	str	r2, [r3, #4]
   18212:	e004      	b.n	1821e <Det_GetApiName+0x16e>
                case PLATFORM_INSTALL_HANDLER_ID: ErrorString_Ptr[1] = "Platform_InstallIrqHandler()"; break;
   18214:	4b92      	ldr	r3, [pc, #584]	; (18460 <Det_GetApiName+0x3b0>)
   18216:	4a9b      	ldr	r2, [pc, #620]	; (18484 <Det_GetApiName+0x3d4>)
   18218:	605a      	str	r2, [r3, #4]
   1821a:	e000      	b.n	1821e <Det_GetApiName+0x16e>
                default: break; //Api doesnt report det error or is not used.
   1821c:	bf00      	nop
        break;
   1821e:	e234      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //5 Apis that report det errors.
   18220:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18224:	2b04      	cmp	r3, #4
   18226:	d821      	bhi.n	1826c <Det_GetApiName+0x1bc>
   18228:	a201      	add	r2, pc, #4	; (adr r2, 18230 <Det_GetApiName+0x180>)
   1822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1822e:	bf00      	nop
   18230:	00018245 	.word	0x00018245
   18234:	0001824d 	.word	0x0001824d
   18238:	0001825d 	.word	0x0001825d
   1823c:	00018265 	.word	0x00018265
   18240:	00018255 	.word	0x00018255
                case PORT_INIT_ID: ErrorString_Ptr[1] = "Port_Init()"; break;
   18244:	4b86      	ldr	r3, [pc, #536]	; (18460 <Det_GetApiName+0x3b0>)
   18246:	4a90      	ldr	r2, [pc, #576]	; (18488 <Det_GetApiName+0x3d8>)
   18248:	605a      	str	r2, [r3, #4]
   1824a:	e010      	b.n	1826e <Det_GetApiName+0x1be>
                case PORT_SETPINDIRECTION_ID: ErrorString_Ptr[1] = "Port_SetPinDirection()"; break;
   1824c:	4b84      	ldr	r3, [pc, #528]	; (18460 <Det_GetApiName+0x3b0>)
   1824e:	4a8f      	ldr	r2, [pc, #572]	; (1848c <Det_GetApiName+0x3dc>)
   18250:	605a      	str	r2, [r3, #4]
   18252:	e00c      	b.n	1826e <Det_GetApiName+0x1be>
                case PORT_SETPINMODE_ID: ErrorString_Ptr[1] = "Port_SetPinMode()"; break;
   18254:	4b82      	ldr	r3, [pc, #520]	; (18460 <Det_GetApiName+0x3b0>)
   18256:	4a8e      	ldr	r2, [pc, #568]	; (18490 <Det_GetApiName+0x3e0>)
   18258:	605a      	str	r2, [r3, #4]
   1825a:	e008      	b.n	1826e <Det_GetApiName+0x1be>
                case PORT_REFRESHPINDIRECTION_ID: ErrorString_Ptr[1] = "Port_RefreshPortDirection()"; break;
   1825c:	4b80      	ldr	r3, [pc, #512]	; (18460 <Det_GetApiName+0x3b0>)
   1825e:	4a8d      	ldr	r2, [pc, #564]	; (18494 <Det_GetApiName+0x3e4>)
   18260:	605a      	str	r2, [r3, #4]
   18262:	e004      	b.n	1826e <Det_GetApiName+0x1be>
                case PORT_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Port_GetVersionInfo()"; break;
   18264:	4b7e      	ldr	r3, [pc, #504]	; (18460 <Det_GetApiName+0x3b0>)
   18266:	4a8c      	ldr	r2, [pc, #560]	; (18498 <Det_GetApiName+0x3e8>)
   18268:	605a      	str	r2, [r3, #4]
   1826a:	e000      	b.n	1826e <Det_GetApiName+0x1be>
                default: break; //Api doesnt report det error or is not used.
   1826c:	bf00      	nop
        break;
   1826e:	e20c      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //8 Apis that report det errors.
   18270:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18274:	2b12      	cmp	r3, #18
   18276:	d849      	bhi.n	1830c <Det_GetApiName+0x25c>
   18278:	a201      	add	r2, pc, #4	; (adr r2, 18280 <Det_GetApiName+0x1d0>)
   1827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1827e:	bf00      	nop
   18280:	000182d5 	.word	0x000182d5
   18284:	000182cd 	.word	0x000182cd
   18288:	000182f5 	.word	0x000182f5
   1828c:	000182fd 	.word	0x000182fd
   18290:	000182ed 	.word	0x000182ed
   18294:	000182e5 	.word	0x000182e5
   18298:	0001830d 	.word	0x0001830d
   1829c:	0001830d 	.word	0x0001830d
   182a0:	0001830d 	.word	0x0001830d
   182a4:	0001830d 	.word	0x0001830d
   182a8:	0001830d 	.word	0x0001830d
   182ac:	0001830d 	.word	0x0001830d
   182b0:	0001830d 	.word	0x0001830d
   182b4:	0001830d 	.word	0x0001830d
   182b8:	0001830d 	.word	0x0001830d
   182bc:	0001830d 	.word	0x0001830d
   182c0:	0001830d 	.word	0x0001830d
   182c4:	000182dd 	.word	0x000182dd
   182c8:	00018305 	.word	0x00018305
                case DIO_WRITECHANNEL_ID: ErrorString_Ptr[1] = "Dio_WriteChannel()"; break;
   182cc:	4b64      	ldr	r3, [pc, #400]	; (18460 <Det_GetApiName+0x3b0>)
   182ce:	4a73      	ldr	r2, [pc, #460]	; (1849c <Det_GetApiName+0x3ec>)
   182d0:	605a      	str	r2, [r3, #4]
   182d2:	e01c      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_READCHANNEL_ID: ErrorString_Ptr[1] = "Dio_ReadChannel()"; break;
   182d4:	4b62      	ldr	r3, [pc, #392]	; (18460 <Det_GetApiName+0x3b0>)
   182d6:	4a72      	ldr	r2, [pc, #456]	; (184a0 <Det_GetApiName+0x3f0>)
   182d8:	605a      	str	r2, [r3, #4]
   182da:	e018      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_FLIPCHANNEL_ID: ErrorString_Ptr[1] = "Dio_FlipChannel()"; break;
   182dc:	4b60      	ldr	r3, [pc, #384]	; (18460 <Det_GetApiName+0x3b0>)
   182de:	4a71      	ldr	r2, [pc, #452]	; (184a4 <Det_GetApiName+0x3f4>)
   182e0:	605a      	str	r2, [r3, #4]
   182e2:	e014      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_WRITECHANNELGROUP_ID: ErrorString_Ptr[1] = "Dio_WriteChannelGroup()"; break;
   182e4:	4b5e      	ldr	r3, [pc, #376]	; (18460 <Det_GetApiName+0x3b0>)
   182e6:	4a70      	ldr	r2, [pc, #448]	; (184a8 <Det_GetApiName+0x3f8>)
   182e8:	605a      	str	r2, [r3, #4]
   182ea:	e010      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_READCHANNELGROUP_ID: ErrorString_Ptr[1] = "Dio_ReadChannelGroup()"; break;
   182ec:	4b5c      	ldr	r3, [pc, #368]	; (18460 <Det_GetApiName+0x3b0>)
   182ee:	4a6f      	ldr	r2, [pc, #444]	; (184ac <Det_GetApiName+0x3fc>)
   182f0:	605a      	str	r2, [r3, #4]
   182f2:	e00c      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_READPORT_ID: ErrorString_Ptr[1] = "Dio_ReadPort()"; break;
   182f4:	4b5a      	ldr	r3, [pc, #360]	; (18460 <Det_GetApiName+0x3b0>)
   182f6:	4a6e      	ldr	r2, [pc, #440]	; (184b0 <Det_GetApiName+0x400>)
   182f8:	605a      	str	r2, [r3, #4]
   182fa:	e008      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_WRITEPORT_ID: ErrorString_Ptr[1] = "Dio_WritePort()"; break;
   182fc:	4b58      	ldr	r3, [pc, #352]	; (18460 <Det_GetApiName+0x3b0>)
   182fe:	4a6d      	ldr	r2, [pc, #436]	; (184b4 <Det_GetApiName+0x404>)
   18300:	605a      	str	r2, [r3, #4]
   18302:	e004      	b.n	1830e <Det_GetApiName+0x25e>
                case DIO_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Dio_GetVersionInfo()"; break;
   18304:	4b56      	ldr	r3, [pc, #344]	; (18460 <Det_GetApiName+0x3b0>)
   18306:	4a6c      	ldr	r2, [pc, #432]	; (184b8 <Det_GetApiName+0x408>)
   18308:	605a      	str	r2, [r3, #4]
   1830a:	e000      	b.n	1830e <Det_GetApiName+0x25e>
                default: break; //Api doesnt report det error or is not used.
   1830c:	bf00      	nop
        break;
   1830e:	e1bc      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //6 Apis that report det errors.
   18310:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18314:	2b08      	cmp	r3, #8
   18316:	d82d      	bhi.n	18374 <Det_GetApiName+0x2c4>
   18318:	a201      	add	r2, pc, #4	; (adr r2, 18320 <Det_GetApiName+0x270>)
   1831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1831e:	bf00      	nop
   18320:	00018345 	.word	0x00018345
   18324:	0001834d 	.word	0x0001834d
   18328:	00018355 	.word	0x00018355
   1832c:	0001835d 	.word	0x0001835d
   18330:	00018365 	.word	0x00018365
   18334:	00018375 	.word	0x00018375
   18338:	00018375 	.word	0x00018375
   1833c:	00018375 	.word	0x00018375
   18340:	0001836d 	.word	0x0001836d
                case PWM_INIT_ID: ErrorString_Ptr[1] = "Pwm_Init()"; break;
   18344:	4b46      	ldr	r3, [pc, #280]	; (18460 <Det_GetApiName+0x3b0>)
   18346:	4a5d      	ldr	r2, [pc, #372]	; (184bc <Det_GetApiName+0x40c>)
   18348:	605a      	str	r2, [r3, #4]
   1834a:	e014      	b.n	18376 <Det_GetApiName+0x2c6>
                case PWM_DEINIT_ID: ErrorString_Ptr[1] = "Pwm_DeInit()"; break;
   1834c:	4b44      	ldr	r3, [pc, #272]	; (18460 <Det_GetApiName+0x3b0>)
   1834e:	4a5c      	ldr	r2, [pc, #368]	; (184c0 <Det_GetApiName+0x410>)
   18350:	605a      	str	r2, [r3, #4]
   18352:	e010      	b.n	18376 <Det_GetApiName+0x2c6>
                case PWM_SETDUTYCYCLE_ID: ErrorString_Ptr[1] = "Pwm_SetDutyCycle()"; break;
   18354:	4b42      	ldr	r3, [pc, #264]	; (18460 <Det_GetApiName+0x3b0>)
   18356:	4a5b      	ldr	r2, [pc, #364]	; (184c4 <Det_GetApiName+0x414>)
   18358:	605a      	str	r2, [r3, #4]
   1835a:	e00c      	b.n	18376 <Det_GetApiName+0x2c6>
                case PWM_SETPERIODANDDUTY_ID: ErrorString_Ptr[1] = "Pwm_SetPeriodAndDuty()"; break;
   1835c:	4b40      	ldr	r3, [pc, #256]	; (18460 <Det_GetApiName+0x3b0>)
   1835e:	4a5a      	ldr	r2, [pc, #360]	; (184c8 <Det_GetApiName+0x418>)
   18360:	605a      	str	r2, [r3, #4]
   18362:	e008      	b.n	18376 <Det_GetApiName+0x2c6>
                case PWM_SETOUTPUTTOIDLE_ID: ErrorString_Ptr[1] = "Pwm_SetOutputToIdle()"; break;
   18364:	4b3e      	ldr	r3, [pc, #248]	; (18460 <Det_GetApiName+0x3b0>)
   18366:	4a59      	ldr	r2, [pc, #356]	; (184cc <Det_GetApiName+0x41c>)
   18368:	605a      	str	r2, [r3, #4]
   1836a:	e004      	b.n	18376 <Det_GetApiName+0x2c6>
                case PWM_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Pwm_GetVersionInfo()"; break;
   1836c:	4b3c      	ldr	r3, [pc, #240]	; (18460 <Det_GetApiName+0x3b0>)
   1836e:	4a58      	ldr	r2, [pc, #352]	; (184d0 <Det_GetApiName+0x420>)
   18370:	605a      	str	r2, [r3, #4]
   18372:	e000      	b.n	18376 <Det_GetApiName+0x2c6>
                default: break; //Api doesnt report det error or is not used.
   18374:	bf00      	nop
        break;
   18376:	e188      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //9 Apis that report det errors.
   18378:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1837c:	2b29      	cmp	r3, #41	; 0x29
   1837e:	f200 80c1 	bhi.w	18504 <Det_GetApiName+0x454>
   18382:	a201      	add	r2, pc, #4	; (adr r2, 18388 <Det_GetApiName+0x2d8>)
   18384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18388:	00018431 	.word	0x00018431
   1838c:	00018439 	.word	0x00018439
   18390:	00018441 	.word	0x00018441
   18394:	00018449 	.word	0x00018449
   18398:	00018451 	.word	0x00018451
   1839c:	00018505 	.word	0x00018505
   183a0:	00018505 	.word	0x00018505
   183a4:	00018505 	.word	0x00018505
   183a8:	00018505 	.word	0x00018505
   183ac:	00018459 	.word	0x00018459
   183b0:	000184fd 	.word	0x000184fd
   183b4:	00018505 	.word	0x00018505
   183b8:	000184f5 	.word	0x000184f5
   183bc:	00018505 	.word	0x00018505
   183c0:	00018505 	.word	0x00018505
   183c4:	00018505 	.word	0x00018505
   183c8:	00018505 	.word	0x00018505
   183cc:	00018505 	.word	0x00018505
   183d0:	00018505 	.word	0x00018505
   183d4:	00018505 	.word	0x00018505
   183d8:	00018505 	.word	0x00018505
   183dc:	00018505 	.word	0x00018505
   183e0:	00018505 	.word	0x00018505
   183e4:	00018505 	.word	0x00018505
   183e8:	00018505 	.word	0x00018505
   183ec:	00018505 	.word	0x00018505
   183f0:	00018505 	.word	0x00018505
   183f4:	00018505 	.word	0x00018505
   183f8:	00018505 	.word	0x00018505
   183fc:	00018505 	.word	0x00018505
   18400:	00018505 	.word	0x00018505
   18404:	00018505 	.word	0x00018505
   18408:	00018505 	.word	0x00018505
   1840c:	00018505 	.word	0x00018505
   18410:	00018505 	.word	0x00018505
   18414:	00018505 	.word	0x00018505
   18418:	00018505 	.word	0x00018505
   1841c:	00018505 	.word	0x00018505
   18420:	00018505 	.word	0x00018505
   18424:	00018505 	.word	0x00018505
   18428:	00018505 	.word	0x00018505
   1842c:	000184ed 	.word	0x000184ed
                case ADC_INIT_ID: ErrorString_Ptr[1] = "Adc_Init()"; break;
   18430:	4b0b      	ldr	r3, [pc, #44]	; (18460 <Det_GetApiName+0x3b0>)
   18432:	4a28      	ldr	r2, [pc, #160]	; (184d4 <Det_GetApiName+0x424>)
   18434:	605a      	str	r2, [r3, #4]
   18436:	e066      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_DEINIT_ID: ErrorString_Ptr[1] = "Adc_DeInit()"; break;
   18438:	4b09      	ldr	r3, [pc, #36]	; (18460 <Det_GetApiName+0x3b0>)
   1843a:	4a27      	ldr	r2, [pc, #156]	; (184d8 <Det_GetApiName+0x428>)
   1843c:	605a      	str	r2, [r3, #4]
   1843e:	e062      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_STARTGROUPCONVERSION_ID: ErrorString_Ptr[1] = "Adc_StartGroupConversion()"; break;
   18440:	4b07      	ldr	r3, [pc, #28]	; (18460 <Det_GetApiName+0x3b0>)
   18442:	4a26      	ldr	r2, [pc, #152]	; (184dc <Det_GetApiName+0x42c>)
   18444:	605a      	str	r2, [r3, #4]
   18446:	e05e      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_STOPGROUPCONVERSION_ID: ErrorString_Ptr[1] = "Adc_StopGroupConversion()"; break;
   18448:	4b05      	ldr	r3, [pc, #20]	; (18460 <Det_GetApiName+0x3b0>)
   1844a:	4a25      	ldr	r2, [pc, #148]	; (184e0 <Det_GetApiName+0x430>)
   1844c:	605a      	str	r2, [r3, #4]
   1844e:	e05a      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_VALUEREADGROUP_ID: ErrorString_Ptr[1] = "Adc_ReadGroup()"; break;
   18450:	4b03      	ldr	r3, [pc, #12]	; (18460 <Det_GetApiName+0x3b0>)
   18452:	4a24      	ldr	r2, [pc, #144]	; (184e4 <Det_GetApiName+0x434>)
   18454:	605a      	str	r2, [r3, #4]
   18456:	e056      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_GETGROUPSTATUS_ID: ErrorString_Ptr[1] = "Adc_GetGroupStatus()"; break;
   18458:	4b01      	ldr	r3, [pc, #4]	; (18460 <Det_GetApiName+0x3b0>)
   1845a:	4a23      	ldr	r2, [pc, #140]	; (184e8 <Det_GetApiName+0x438>)
   1845c:	605a      	str	r2, [r3, #4]
   1845e:	e052      	b.n	18506 <Det_GetApiName+0x456>
   18460:	1fff9768 	.word	0x1fff9768
   18464:	00018ebc 	.word	0x00018ebc
   18468:	00018ec8 	.word	0x00018ec8
   1846c:	00018ed8 	.word	0x00018ed8
   18470:	00018ee8 	.word	0x00018ee8
   18474:	00018f00 	.word	0x00018f00
   18478:	00018f10 	.word	0x00018f10
   1847c:	00018f24 	.word	0x00018f24
   18480:	00018f40 	.word	0x00018f40
   18484:	00018f5c 	.word	0x00018f5c
   18488:	00018f7c 	.word	0x00018f7c
   1848c:	00018f88 	.word	0x00018f88
   18490:	00018fa0 	.word	0x00018fa0
   18494:	00018fb4 	.word	0x00018fb4
   18498:	00018fd0 	.word	0x00018fd0
   1849c:	00018fe8 	.word	0x00018fe8
   184a0:	00018ffc 	.word	0x00018ffc
   184a4:	00019010 	.word	0x00019010
   184a8:	00019024 	.word	0x00019024
   184ac:	0001903c 	.word	0x0001903c
   184b0:	00019054 	.word	0x00019054
   184b4:	00019064 	.word	0x00019064
   184b8:	00019074 	.word	0x00019074
   184bc:	0001908c 	.word	0x0001908c
   184c0:	00019098 	.word	0x00019098
   184c4:	000190a8 	.word	0x000190a8
   184c8:	000190bc 	.word	0x000190bc
   184cc:	000190d4 	.word	0x000190d4
   184d0:	000190ec 	.word	0x000190ec
   184d4:	00019104 	.word	0x00019104
   184d8:	00019110 	.word	0x00019110
   184dc:	00019120 	.word	0x00019120
   184e0:	0001913c 	.word	0x0001913c
   184e4:	00019158 	.word	0x00019158
   184e8:	00019168 	.word	0x00019168
                case ADC_CALIBRATE_ID: ErrorString_Ptr[1] = "Adc_Calibrate()"; break;
   184ec:	4b69      	ldr	r3, [pc, #420]	; (18694 <Det_GetApiName+0x5e4>)
   184ee:	4a6a      	ldr	r2, [pc, #424]	; (18698 <Det_GetApiName+0x5e8>)
   184f0:	605a      	str	r2, [r3, #4]
   184f2:	e008      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_SETUPRESULTBUFFER_ID: ErrorString_Ptr[1] = "Adc_SetupResultBuffer()"; break;
   184f4:	4b67      	ldr	r3, [pc, #412]	; (18694 <Det_GetApiName+0x5e4>)
   184f6:	4a69      	ldr	r2, [pc, #420]	; (1869c <Det_GetApiName+0x5ec>)
   184f8:	605a      	str	r2, [r3, #4]
   184fa:	e004      	b.n	18506 <Det_GetApiName+0x456>
                case ADC_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Adc_GetVersionInfo()"; break;
   184fc:	4b65      	ldr	r3, [pc, #404]	; (18694 <Det_GetApiName+0x5e4>)
   184fe:	4a68      	ldr	r2, [pc, #416]	; (186a0 <Det_GetApiName+0x5f0>)
   18500:	605a      	str	r2, [r3, #4]
   18502:	e000      	b.n	18506 <Det_GetApiName+0x456>
                default: break; //Api doesnt report det error or is not used.
   18504:	bf00      	nop
        break;
   18506:	e0c0      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //12 Apis that report det errors.
   18508:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1850c:	2b0c      	cmp	r3, #12
   1850e:	d84d      	bhi.n	185ac <Det_GetApiName+0x4fc>
   18510:	a201      	add	r2, pc, #4	; (adr r2, 18518 <Det_GetApiName+0x468>)
   18512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18516:	bf00      	nop
   18518:	0001854d 	.word	0x0001854d
   1851c:	000185ad 	.word	0x000185ad
   18520:	00018555 	.word	0x00018555
   18524:	0001855d 	.word	0x0001855d
   18528:	00018565 	.word	0x00018565
   1852c:	0001856d 	.word	0x0001856d
   18530:	00018575 	.word	0x00018575
   18534:	0001857d 	.word	0x0001857d
   18538:	00018585 	.word	0x00018585
   1853c:	0001858d 	.word	0x0001858d
   18540:	00018595 	.word	0x00018595
   18544:	0001859d 	.word	0x0001859d
   18548:	000185a5 	.word	0x000185a5
                case SCHEDULER_INIT_ID: ErrorString_Ptr[1] = "Scheduler_Init()"; break;
   1854c:	4b51      	ldr	r3, [pc, #324]	; (18694 <Det_GetApiName+0x5e4>)
   1854e:	4a55      	ldr	r2, [pc, #340]	; (186a4 <Det_GetApiName+0x5f4>)
   18550:	605a      	str	r2, [r3, #4]
   18552:	e02c      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_GETSTATUSQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_GetStatusQueue()"; break;
   18554:	4b4f      	ldr	r3, [pc, #316]	; (18694 <Det_GetApiName+0x5e4>)
   18556:	4a54      	ldr	r2, [pc, #336]	; (186a8 <Det_GetApiName+0x5f8>)
   18558:	605a      	str	r2, [r3, #4]
   1855a:	e028      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_FLUSHQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_FlushQueue()"; break;
   1855c:	4b4d      	ldr	r3, [pc, #308]	; (18694 <Det_GetApiName+0x5e4>)
   1855e:	4a53      	ldr	r2, [pc, #332]	; (186ac <Det_GetApiName+0x5fc>)
   18560:	605a      	str	r2, [r3, #4]
   18562:	e024      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_WRITEQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_WriteQueue()"; break;
   18564:	4b4b      	ldr	r3, [pc, #300]	; (18694 <Det_GetApiName+0x5e4>)
   18566:	4a52      	ldr	r2, [pc, #328]	; (186b0 <Det_GetApiName+0x600>)
   18568:	605a      	str	r2, [r3, #4]
   1856a:	e020      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_READQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_ReadQueue()"; break;
   1856c:	4b49      	ldr	r3, [pc, #292]	; (18694 <Det_GetApiName+0x5e4>)
   1856e:	4a51      	ldr	r2, [pc, #324]	; (186b4 <Det_GetApiName+0x604>)
   18570:	605a      	str	r2, [r3, #4]
   18572:	e01c      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_STARTTASK_ID: ErrorString_Ptr[1] = "Scheduler_StartTask()"; break;
   18574:	4b47      	ldr	r3, [pc, #284]	; (18694 <Det_GetApiName+0x5e4>)
   18576:	4a50      	ldr	r2, [pc, #320]	; (186b8 <Det_GetApiName+0x608>)
   18578:	605a      	str	r2, [r3, #4]
   1857a:	e018      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_STOPTASK_ID: ErrorString_Ptr[1] = "Scheduler_StopTask()"; break;
   1857c:	4b45      	ldr	r3, [pc, #276]	; (18694 <Det_GetApiName+0x5e4>)
   1857e:	4a4f      	ldr	r2, [pc, #316]	; (186bc <Det_GetApiName+0x60c>)
   18580:	605a      	str	r2, [r3, #4]
   18582:	e014      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_PERIODTASK_ID: ErrorString_Ptr[1] = "Scheduler_PeriodTask()"; break;
   18584:	4b43      	ldr	r3, [pc, #268]	; (18694 <Det_GetApiName+0x5e4>)
   18586:	4a4e      	ldr	r2, [pc, #312]	; (186c0 <Det_GetApiName+0x610>)
   18588:	605a      	str	r2, [r3, #4]
   1858a:	e010      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_STARTTIMER_ID: ErrorString_Ptr[1] = "Scheduler_StartTimer()"; break;
   1858c:	4b41      	ldr	r3, [pc, #260]	; (18694 <Det_GetApiName+0x5e4>)
   1858e:	4a4d      	ldr	r2, [pc, #308]	; (186c4 <Det_GetApiName+0x614>)
   18590:	605a      	str	r2, [r3, #4]
   18592:	e00c      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_STOPTIMER_ID: ErrorString_Ptr[1] = "Scheduler_StopTimer()"; break;
   18594:	4b3f      	ldr	r3, [pc, #252]	; (18694 <Det_GetApiName+0x5e4>)
   18596:	4a4c      	ldr	r2, [pc, #304]	; (186c8 <Det_GetApiName+0x618>)
   18598:	605a      	str	r2, [r3, #4]
   1859a:	e008      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_GETTIMER_ID: ErrorString_Ptr[1] = "Scheduler_GetTimer()"; break;
   1859c:	4b3d      	ldr	r3, [pc, #244]	; (18694 <Det_GetApiName+0x5e4>)
   1859e:	4a4b      	ldr	r2, [pc, #300]	; (186cc <Det_GetApiName+0x61c>)
   185a0:	605a      	str	r2, [r3, #4]
   185a2:	e004      	b.n	185ae <Det_GetApiName+0x4fe>
                case SCHEDULER_RELOADTIMER_ID: ErrorString_Ptr[1] = "Scheduler_ReloadTimer()"; break;
   185a4:	4b3b      	ldr	r3, [pc, #236]	; (18694 <Det_GetApiName+0x5e4>)
   185a6:	4a4a      	ldr	r2, [pc, #296]	; (186d0 <Det_GetApiName+0x620>)
   185a8:	605a      	str	r2, [r3, #4]
   185aa:	e000      	b.n	185ae <Det_GetApiName+0x4fe>
                default: break; //Api doesnt report det error or is not used.
   185ac:	bf00      	nop
        break;
   185ae:	e06c      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //3 Apis that report det errors.
   185b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   185b4:	2b02      	cmp	r3, #2
   185b6:	d00e      	beq.n	185d6 <Det_GetApiName+0x526>
   185b8:	2b02      	cmp	r3, #2
   185ba:	dc10      	bgt.n	185de <Det_GetApiName+0x52e>
   185bc:	2b00      	cmp	r3, #0
   185be:	d002      	beq.n	185c6 <Det_GetApiName+0x516>
   185c0:	2b01      	cmp	r3, #1
   185c2:	d004      	beq.n	185ce <Det_GetApiName+0x51e>
                default: break; //Api doesnt report det error or is not used.
   185c4:	e00b      	b.n	185de <Det_GetApiName+0x52e>
                case HWIOAB_BUTTONS_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Buttons_Init()"; break;
   185c6:	4b33      	ldr	r3, [pc, #204]	; (18694 <Det_GetApiName+0x5e4>)
   185c8:	4a42      	ldr	r2, [pc, #264]	; (186d4 <Det_GetApiName+0x624>)
   185ca:	605a      	str	r2, [r3, #4]
   185cc:	e008      	b.n	185e0 <Det_GetApiName+0x530>
                case HWIOAB_BUTTONS_GETEVENT_ID: ErrorString_Ptr[1] = "HwIoAb_Buttons_GetEvent()"; break;
   185ce:	4b31      	ldr	r3, [pc, #196]	; (18694 <Det_GetApiName+0x5e4>)
   185d0:	4a41      	ldr	r2, [pc, #260]	; (186d8 <Det_GetApiName+0x628>)
   185d2:	605a      	str	r2, [r3, #4]
   185d4:	e004      	b.n	185e0 <Det_GetApiName+0x530>
                case HWIOAB_BUTTONS_MAINFUNCTION_ID: ErrorString_Ptr[1] = "HwIoAb_Buttons_MainFunction()"; break;
   185d6:	4b2f      	ldr	r3, [pc, #188]	; (18694 <Det_GetApiName+0x5e4>)
   185d8:	4a40      	ldr	r2, [pc, #256]	; (186dc <Det_GetApiName+0x62c>)
   185da:	605a      	str	r2, [r3, #4]
   185dc:	e000      	b.n	185e0 <Det_GetApiName+0x530>
                default: break; //Api doesnt report det error or is not used.
   185de:	bf00      	nop
        break;
   185e0:	e053      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //4 Apis that report det errors.
   185e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   185e6:	2b03      	cmp	r3, #3
   185e8:	d81a      	bhi.n	18620 <Det_GetApiName+0x570>
   185ea:	a201      	add	r2, pc, #4	; (adr r2, 185f0 <Det_GetApiName+0x540>)
   185ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   185f0:	00018601 	.word	0x00018601
   185f4:	00018609 	.word	0x00018609
   185f8:	00018611 	.word	0x00018611
   185fc:	00018619 	.word	0x00018619
                case HWIOAB_LEDS_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_Init()"; break;
   18600:	4b24      	ldr	r3, [pc, #144]	; (18694 <Det_GetApiName+0x5e4>)
   18602:	4a37      	ldr	r2, [pc, #220]	; (186e0 <Det_GetApiName+0x630>)
   18604:	605a      	str	r2, [r3, #4]
   18606:	e00c      	b.n	18622 <Det_GetApiName+0x572>
                case HWIOAB_LEDS_TURNON_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_TurnOn()"; break;
   18608:	4b22      	ldr	r3, [pc, #136]	; (18694 <Det_GetApiName+0x5e4>)
   1860a:	4a36      	ldr	r2, [pc, #216]	; (186e4 <Det_GetApiName+0x634>)
   1860c:	605a      	str	r2, [r3, #4]
   1860e:	e008      	b.n	18622 <Det_GetApiName+0x572>
                case HWIOAB_LEDS_TURNOFF_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_TurnOff()"; break;
   18610:	4b20      	ldr	r3, [pc, #128]	; (18694 <Det_GetApiName+0x5e4>)
   18612:	4a35      	ldr	r2, [pc, #212]	; (186e8 <Det_GetApiName+0x638>)
   18614:	605a      	str	r2, [r3, #4]
   18616:	e004      	b.n	18622 <Det_GetApiName+0x572>
                case HWIOAB_LEDS_TURNTOGGLE_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_TurnToggle()"; break;
   18618:	4b1e      	ldr	r3, [pc, #120]	; (18694 <Det_GetApiName+0x5e4>)
   1861a:	4a34      	ldr	r2, [pc, #208]	; (186ec <Det_GetApiName+0x63c>)
   1861c:	605a      	str	r2, [r3, #4]
   1861e:	e000      	b.n	18622 <Det_GetApiName+0x572>
                default: break; //Api doesnt report det error or is not used.
   18620:	bf00      	nop
        break;
   18622:	e032      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //3 Apis that report det errors.
   18624:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18628:	2b02      	cmp	r3, #2
   1862a:	d00e      	beq.n	1864a <Det_GetApiName+0x59a>
   1862c:	2b02      	cmp	r3, #2
   1862e:	dc10      	bgt.n	18652 <Det_GetApiName+0x5a2>
   18630:	2b00      	cmp	r3, #0
   18632:	d002      	beq.n	1863a <Det_GetApiName+0x58a>
   18634:	2b01      	cmp	r3, #1
   18636:	d004      	beq.n	18642 <Det_GetApiName+0x592>
                default: break; //Api doesnt report det error or is not used.
   18638:	e00b      	b.n	18652 <Det_GetApiName+0x5a2>
                case HWIOAB_POTS_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Pots_Init()"; break;
   1863a:	4b16      	ldr	r3, [pc, #88]	; (18694 <Det_GetApiName+0x5e4>)
   1863c:	4a2c      	ldr	r2, [pc, #176]	; (186f0 <Det_GetApiName+0x640>)
   1863e:	605a      	str	r2, [r3, #4]
   18640:	e008      	b.n	18654 <Det_GetApiName+0x5a4>
                case HWIOAB_POTS_GETVALUE_ID: ErrorString_Ptr[1] = "HwIoAb_Pots_GetValue()"; break;
   18642:	4b14      	ldr	r3, [pc, #80]	; (18694 <Det_GetApiName+0x5e4>)
   18644:	4a2b      	ldr	r2, [pc, #172]	; (186f4 <Det_GetApiName+0x644>)
   18646:	605a      	str	r2, [r3, #4]
   18648:	e004      	b.n	18654 <Det_GetApiName+0x5a4>
                case HWIOAB_POTS_GETALTVALUE_ID: ErrorString_Ptr[1] = "HwIoAb_Pots_GetAltValue()"; break;
   1864a:	4b12      	ldr	r3, [pc, #72]	; (18694 <Det_GetApiName+0x5e4>)
   1864c:	4a2a      	ldr	r2, [pc, #168]	; (186f8 <Det_GetApiName+0x648>)
   1864e:	605a      	str	r2, [r3, #4]
   18650:	e000      	b.n	18654 <Det_GetApiName+0x5a4>
                default: break; //Api doesnt report det error or is not used.
   18652:	bf00      	nop
        break;
   18654:	e019      	b.n	1868a <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //3 Apis that report det errors.
   18656:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1865a:	2b02      	cmp	r3, #2
   1865c:	d00e      	beq.n	1867c <Det_GetApiName+0x5cc>
   1865e:	2b02      	cmp	r3, #2
   18660:	dc10      	bgt.n	18684 <Det_GetApiName+0x5d4>
   18662:	2b00      	cmp	r3, #0
   18664:	d002      	beq.n	1866c <Det_GetApiName+0x5bc>
   18666:	2b01      	cmp	r3, #1
   18668:	d004      	beq.n	18674 <Det_GetApiName+0x5c4>
                default: break; //Api doesnt report det error or is not used.
   1866a:	e00b      	b.n	18684 <Det_GetApiName+0x5d4>
                case HWIOAB_BUZZER_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Buzzer_Init()"; break;
   1866c:	4b09      	ldr	r3, [pc, #36]	; (18694 <Det_GetApiName+0x5e4>)
   1866e:	4a23      	ldr	r2, [pc, #140]	; (186fc <Det_GetApiName+0x64c>)
   18670:	605a      	str	r2, [r3, #4]
   18672:	e008      	b.n	18686 <Det_GetApiName+0x5d6>
                case HWIOAB_BUZZER_BEEP_ID: ErrorString_Ptr[1] = "HwIoAb_Buzzer_Beep()"; break;
   18674:	4b07      	ldr	r3, [pc, #28]	; (18694 <Det_GetApiName+0x5e4>)
   18676:	4a22      	ldr	r2, [pc, #136]	; (18700 <Det_GetApiName+0x650>)
   18678:	605a      	str	r2, [r3, #4]
   1867a:	e004      	b.n	18686 <Det_GetApiName+0x5d6>
                case HWIOAB_BUZZER_STOP_ID: ErrorString_Ptr[1] = "HwIoAb_Buzzer_Stop()"; break;
   1867c:	4b05      	ldr	r3, [pc, #20]	; (18694 <Det_GetApiName+0x5e4>)
   1867e:	4a21      	ldr	r2, [pc, #132]	; (18704 <Det_GetApiName+0x654>)
   18680:	605a      	str	r2, [r3, #4]
   18682:	e000      	b.n	18686 <Det_GetApiName+0x5d6>
                default: break; //Api doesnt report det error or is not used.
   18684:	bf00      	nop
        break;
   18686:	e000      	b.n	1868a <Det_GetApiName+0x5da>
        break;
   18688:	bf00      	nop
    }

    return ErrorString_Ptr[1];
   1868a:	4b02      	ldr	r3, [pc, #8]	; (18694 <Det_GetApiName+0x5e4>)
   1868c:	685b      	ldr	r3, [r3, #4]
}
   1868e:	4618      	mov	r0, r3
   18690:	b002      	add	sp, #8
   18692:	4770      	bx	lr
   18694:	1fff9768 	.word	0x1fff9768
   18698:	00019180 	.word	0x00019180
   1869c:	00019190 	.word	0x00019190
   186a0:	000191a8 	.word	0x000191a8
   186a4:	000191c0 	.word	0x000191c0
   186a8:	000191d4 	.word	0x000191d4
   186ac:	000191f0 	.word	0x000191f0
   186b0:	00019208 	.word	0x00019208
   186b4:	00019220 	.word	0x00019220
   186b8:	00019238 	.word	0x00019238
   186bc:	00019250 	.word	0x00019250
   186c0:	00019268 	.word	0x00019268
   186c4:	00019280 	.word	0x00019280
   186c8:	00019298 	.word	0x00019298
   186cc:	000192b0 	.word	0x000192b0
   186d0:	000192c8 	.word	0x000192c8
   186d4:	000192e0 	.word	0x000192e0
   186d8:	000192f8 	.word	0x000192f8
   186dc:	00019314 	.word	0x00019314
   186e0:	00019334 	.word	0x00019334
   186e4:	00019348 	.word	0x00019348
   186e8:	00019360 	.word	0x00019360
   186ec:	00019378 	.word	0x00019378
   186f0:	00019394 	.word	0x00019394
   186f4:	000193a8 	.word	0x000193a8
   186f8:	000193c0 	.word	0x000193c0
   186fc:	000193dc 	.word	0x000193dc
   18700:	000193f4 	.word	0x000193f4
   18704:	0001940c 	.word	0x0001940c

00018708 <Det_GetErrorMeaning>:
 * 
 * @param[in] ModuleId Module Id where error was detected.
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 */
char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   18708:	b082      	sub	sp, #8
   1870a:	4603      	mov	r3, r0
   1870c:	460a      	mov	r2, r1
   1870e:	f8ad 3006 	strh.w	r3, [sp, #6]
   18712:	4613      	mov	r3, r2
   18714:	f88d 3005 	strb.w	r3, [sp, #5]

    switch( ModuleId ) {
   18718:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1871c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   18720:	f300 8261 	bgt.w	18be6 <Det_GetErrorMeaning+0x4de>
   18724:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   18728:	da04      	bge.n	18734 <Det_GetErrorMeaning+0x2c>
   1872a:	2b7c      	cmp	r3, #124	; 0x7c
   1872c:	dc4c      	bgt.n	187c8 <Det_GetErrorMeaning+0xc0>
   1872e:	2b65      	cmp	r3, #101	; 0x65
   18730:	da12      	bge.n	18758 <Det_GetErrorMeaning+0x50>
                default: break; //Error ID not registered.
            }
        break;

        default:    //Module Id is no used in aplication.
        break;
   18732:	e258      	b.n	18be6 <Det_GetErrorMeaning+0x4de>
   18734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   18738:	2b04      	cmp	r3, #4
   1873a:	f200 8254 	bhi.w	18be6 <Det_GetErrorMeaning+0x4de>
   1873e:	a201      	add	r2, pc, #4	; (adr r2, 18744 <Det_GetErrorMeaning+0x3c>)
   18740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18744:	00018b11 	.word	0x00018b11
   18748:	00018b6d 	.word	0x00018b6d
   1874c:	00018b9f 	.word	0x00018b9f
   18750:	00018bbf 	.word	0x00018bbf
   18754:	00018bd3 	.word	0x00018bd3
   18758:	3b65      	subs	r3, #101	; 0x65
   1875a:	2b17      	cmp	r3, #23
   1875c:	f200 8243 	bhi.w	18be6 <Det_GetErrorMeaning+0x4de>
   18760:	a201      	add	r2, pc, #4	; (adr r2, 18768 <Det_GetErrorMeaning+0x60>)
   18762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18766:	bf00      	nop
   18768:	000187cf 	.word	0x000187cf
   1876c:	00018be7 	.word	0x00018be7
   18770:	00018be7 	.word	0x00018be7
   18774:	00018be7 	.word	0x00018be7
   18778:	00018be7 	.word	0x00018be7
   1877c:	00018be7 	.word	0x00018be7
   18780:	00018be7 	.word	0x00018be7
   18784:	00018be7 	.word	0x00018be7
   18788:	00018be7 	.word	0x00018be7
   1878c:	00018be7 	.word	0x00018be7
   18790:	00018be7 	.word	0x00018be7
   18794:	00018be7 	.word	0x00018be7
   18798:	00018be7 	.word	0x00018be7
   1879c:	00018be7 	.word	0x00018be7
   187a0:	00018be7 	.word	0x00018be7
   187a4:	00018be7 	.word	0x00018be7
   187a8:	00018be7 	.word	0x00018be7
   187ac:	00018be7 	.word	0x00018be7
   187b0:	00018be7 	.word	0x00018be7
   187b4:	000188e3 	.word	0x000188e3
   187b8:	00018997 	.word	0x00018997
   187bc:	00018be7 	.word	0x00018be7
   187c0:	000189f5 	.word	0x000189f5
   187c4:	0001886b 	.word	0x0001886b
    switch( ModuleId ) {
   187c8:	2bff      	cmp	r3, #255	; 0xff
   187ca:	d035      	beq.n	18838 <Det_GetErrorMeaning+0x130>
        break;
   187cc:	e20b      	b.n	18be6 <Det_GetErrorMeaning+0x4de>
            switch ( ErrorId ) {
   187ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
   187d2:	3b0b      	subs	r3, #11
   187d4:	2b08      	cmp	r3, #8
   187d6:	d82d      	bhi.n	18834 <Det_GetErrorMeaning+0x12c>
   187d8:	a201      	add	r2, pc, #4	; (adr r2, 187e0 <Det_GetErrorMeaning+0xd8>)
   187da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   187de:	bf00      	nop
   187e0:	0001880d 	.word	0x0001880d
   187e4:	00018815 	.word	0x00018815
   187e8:	00018835 	.word	0x00018835
   187ec:	00018835 	.word	0x00018835
   187f0:	00018825 	.word	0x00018825
   187f4:	0001881d 	.word	0x0001881d
   187f8:	00018805 	.word	0x00018805
   187fc:	00018835 	.word	0x00018835
   18800:	0001882d 	.word	0x0001882d
                case MCU_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   18804:	4ba8      	ldr	r3, [pc, #672]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18806:	4aa9      	ldr	r2, [pc, #676]	; (18aac <Det_GetErrorMeaning+0x3a4>)
   18808:	609a      	str	r2, [r3, #8]
   1880a:	e014      	b.n	18836 <Det_GetErrorMeaning+0x12e>
                case MCU_E_PARAM_CLOCK: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   1880c:	4ba6      	ldr	r3, [pc, #664]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   1880e:	4aa8      	ldr	r2, [pc, #672]	; (18ab0 <Det_GetErrorMeaning+0x3a8>)
   18810:	609a      	str	r2, [r3, #8]
   18812:	e010      	b.n	18836 <Det_GetErrorMeaning+0x12e>
                case MCU_E_PARAM_MODE: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18814:	4ba4      	ldr	r3, [pc, #656]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18816:	4aa6      	ldr	r2, [pc, #664]	; (18ab0 <Det_GetErrorMeaning+0x3a8>)
   18818:	609a      	str	r2, [r3, #8]
   1881a:	e00c      	b.n	18836 <Det_GetErrorMeaning+0x12e>
                case MCU_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   1881c:	4ba2      	ldr	r3, [pc, #648]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   1881e:	4aa4      	ldr	r2, [pc, #656]	; (18ab0 <Det_GetErrorMeaning+0x3a8>)
   18820:	609a      	str	r2, [r3, #8]
   18822:	e008      	b.n	18836 <Det_GetErrorMeaning+0x12e>
                case MCU_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   18824:	4ba0      	ldr	r3, [pc, #640]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18826:	4aa3      	ldr	r2, [pc, #652]	; (18ab4 <Det_GetErrorMeaning+0x3ac>)
   18828:	609a      	str	r2, [r3, #8]
   1882a:	e004      	b.n	18836 <Det_GetErrorMeaning+0x12e>
                case MCU_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   1882c:	4b9e      	ldr	r3, [pc, #632]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   1882e:	4aa2      	ldr	r2, [pc, #648]	; (18ab8 <Det_GetErrorMeaning+0x3b0>)
   18830:	609a      	str	r2, [r3, #8]
   18832:	e000      	b.n	18836 <Det_GetErrorMeaning+0x12e>
                default: break; //Error ID not registered.
   18834:	bf00      	nop
        break;
   18836:	e1d7      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18838:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1883c:	2b04      	cmp	r3, #4
   1883e:	d00a      	beq.n	18856 <Det_GetErrorMeaning+0x14e>
   18840:	2b04      	cmp	r3, #4
   18842:	dc10      	bgt.n	18866 <Det_GetErrorMeaning+0x15e>
   18844:	2b01      	cmp	r3, #1
   18846:	d002      	beq.n	1884e <Det_GetErrorMeaning+0x146>
   18848:	2b02      	cmp	r3, #2
   1884a:	d008      	beq.n	1885e <Det_GetErrorMeaning+0x156>
                default: break; //Error ID not registered.
   1884c:	e00b      	b.n	18866 <Det_GetErrorMeaning+0x15e>
                case PLATFORM_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid pointer"; break;
   1884e:	4b96      	ldr	r3, [pc, #600]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18850:	4a9a      	ldr	r2, [pc, #616]	; (18abc <Det_GetErrorMeaning+0x3b4>)
   18852:	609a      	str	r2, [r3, #8]
   18854:	e008      	b.n	18868 <Det_GetErrorMeaning+0x160>
                case PLATFORM_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Call from wrong mapped partition"; break;
   18856:	4b94      	ldr	r3, [pc, #592]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18858:	4a99      	ldr	r2, [pc, #612]	; (18ac0 <Det_GetErrorMeaning+0x3b8>)
   1885a:	609a      	str	r2, [r3, #8]
   1885c:	e004      	b.n	18868 <Det_GetErrorMeaning+0x160>
                case PLATFORM_E_PARAM_OUT_OF_RANGE: ErrorString_Ptr[2] = "Parameter out of range"; break;
   1885e:	4b92      	ldr	r3, [pc, #584]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18860:	4a98      	ldr	r2, [pc, #608]	; (18ac4 <Det_GetErrorMeaning+0x3bc>)
   18862:	609a      	str	r2, [r3, #8]
   18864:	e000      	b.n	18868 <Det_GetErrorMeaning+0x160>
                default: break; //Error ID not registered.
   18866:	bf00      	nop
        break;
   18868:	e1be      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   1886a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1886e:	2b10      	cmp	r3, #16
   18870:	dc16      	bgt.n	188a0 <Det_GetErrorMeaning+0x198>
   18872:	2b0a      	cmp	r3, #10
   18874:	db33      	blt.n	188de <Det_GetErrorMeaning+0x1d6>
   18876:	3b0a      	subs	r3, #10
   18878:	2b06      	cmp	r3, #6
   1887a:	d830      	bhi.n	188de <Det_GetErrorMeaning+0x1d6>
   1887c:	a201      	add	r2, pc, #4	; (adr r2, 18884 <Det_GetErrorMeaning+0x17c>)
   1887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18882:	bf00      	nop
   18884:	000188a7 	.word	0x000188a7
   18888:	000188df 	.word	0x000188df
   1888c:	000188b7 	.word	0x000188b7
   18890:	000188c7 	.word	0x000188c7
   18894:	000188af 	.word	0x000188af
   18898:	000188cf 	.word	0x000188cf
   1889c:	000188d7 	.word	0x000188d7
   188a0:	2bf0      	cmp	r3, #240	; 0xf0
   188a2:	d00c      	beq.n	188be <Det_GetErrorMeaning+0x1b6>
                default: break; //Error ID not registered.
   188a4:	e01b      	b.n	188de <Det_GetErrorMeaning+0x1d6>
                case PORT_E_PARAM_PIN: ErrorString_Ptr[2] = "Invalid Port Pin ID"; break;
   188a6:	4b80      	ldr	r3, [pc, #512]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188a8:	4a87      	ldr	r2, [pc, #540]	; (18ac8 <Det_GetErrorMeaning+0x3c0>)
   188aa:	609a      	str	r2, [r3, #8]
   188ac:	e018      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                case PORT_E_MODE_UNCHANGEABLE: ErrorString_Ptr[2] = "Port pin mode is unchangeable"; break;
   188ae:	4b7e      	ldr	r3, [pc, #504]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188b0:	4a86      	ldr	r2, [pc, #536]	; (18acc <Det_GetErrorMeaning+0x3c4>)
   188b2:	609a      	str	r2, [r3, #8]
   188b4:	e014      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                case PORT_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   188b6:	4b7c      	ldr	r3, [pc, #496]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188b8:	4a7c      	ldr	r2, [pc, #496]	; (18aac <Det_GetErrorMeaning+0x3a4>)
   188ba:	609a      	str	r2, [r3, #8]
   188bc:	e010      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                case PORT_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   188be:	4b7a      	ldr	r3, [pc, #488]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188c0:	4a7a      	ldr	r2, [pc, #488]	; (18aac <Det_GetErrorMeaning+0x3a4>)
   188c2:	609a      	str	r2, [r3, #8]
   188c4:	e00c      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                case PORT_E_PARAM_INVALID_MODE: ErrorString_Ptr[2] = "Invalid port pin mode"; break;
   188c6:	4b78      	ldr	r3, [pc, #480]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188c8:	4a81      	ldr	r2, [pc, #516]	; (18ad0 <Det_GetErrorMeaning+0x3c8>)
   188ca:	609a      	str	r2, [r3, #8]
   188cc:	e008      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                case PORT_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   188ce:	4b76      	ldr	r3, [pc, #472]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188d0:	4a78      	ldr	r2, [pc, #480]	; (18ab4 <Det_GetErrorMeaning+0x3ac>)
   188d2:	609a      	str	r2, [r3, #8]
   188d4:	e004      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                case PORT_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   188d6:	4b74      	ldr	r3, [pc, #464]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   188d8:	4a75      	ldr	r2, [pc, #468]	; (18ab0 <Det_GetErrorMeaning+0x3a8>)
   188da:	609a      	str	r2, [r3, #8]
   188dc:	e000      	b.n	188e0 <Det_GetErrorMeaning+0x1d8>
                default: break; //Error ID not registered.
   188de:	bf00      	nop
        break;
   188e0:	e182      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   188e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   188e6:	2b21      	cmp	r3, #33	; 0x21
   188e8:	dc38      	bgt.n	1895c <Det_GetErrorMeaning+0x254>
   188ea:	2b0a      	cmp	r3, #10
   188ec:	db51      	blt.n	18992 <Det_GetErrorMeaning+0x28a>
   188ee:	3b0a      	subs	r3, #10
   188f0:	2b17      	cmp	r3, #23
   188f2:	d84e      	bhi.n	18992 <Det_GetErrorMeaning+0x28a>
   188f4:	a201      	add	r2, pc, #4	; (adr r2, 188fc <Det_GetErrorMeaning+0x1f4>)
   188f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   188fa:	bf00      	nop
   188fc:	00018973 	.word	0x00018973
   18900:	00018993 	.word	0x00018993
   18904:	00018993 	.word	0x00018993
   18908:	00018993 	.word	0x00018993
   1890c:	00018993 	.word	0x00018993
   18910:	00018993 	.word	0x00018993
   18914:	00018993 	.word	0x00018993
   18918:	00018993 	.word	0x00018993
   1891c:	00018993 	.word	0x00018993
   18920:	00018993 	.word	0x00018993
   18924:	0001897b 	.word	0x0001897b
   18928:	00018993 	.word	0x00018993
   1892c:	00018993 	.word	0x00018993
   18930:	00018993 	.word	0x00018993
   18934:	00018993 	.word	0x00018993
   18938:	00018993 	.word	0x00018993
   1893c:	00018993 	.word	0x00018993
   18940:	00018993 	.word	0x00018993
   18944:	00018993 	.word	0x00018993
   18948:	00018993 	.word	0x00018993
   1894c:	00018993 	.word	0x00018993
   18950:	00018983 	.word	0x00018983
   18954:	0001896b 	.word	0x0001896b
   18958:	00018963 	.word	0x00018963
   1895c:	2bf0      	cmp	r3, #240	; 0xf0
   1895e:	d014      	beq.n	1898a <Det_GetErrorMeaning+0x282>
                default: break; //Error ID not registered.
   18960:	e017      	b.n	18992 <Det_GetErrorMeaning+0x28a>
                case DIO_E_PARAM_LEVEL: ErrorString_Ptr[2] = "Invalid dio channel level"; break;
   18962:	4b51      	ldr	r3, [pc, #324]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18964:	4a5b      	ldr	r2, [pc, #364]	; (18ad4 <Det_GetErrorMeaning+0x3cc>)
   18966:	609a      	str	r2, [r3, #8]
   18968:	e014      	b.n	18994 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   1896a:	4b4f      	ldr	r3, [pc, #316]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   1896c:	4a50      	ldr	r2, [pc, #320]	; (18ab0 <Det_GetErrorMeaning+0x3a8>)
   1896e:	609a      	str	r2, [r3, #8]
   18970:	e010      	b.n	18994 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_INVALID_CHANNEL_ID: ErrorString_Ptr[2] = "Invalid dio channel id"; break;
   18972:	4b4d      	ldr	r3, [pc, #308]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18974:	4a58      	ldr	r2, [pc, #352]	; (18ad8 <Det_GetErrorMeaning+0x3d0>)
   18976:	609a      	str	r2, [r3, #8]
   18978:	e00c      	b.n	18994 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_INVALID_PORT_ID: ErrorString_Ptr[2] = "Invalid port id"; break;
   1897a:	4b4b      	ldr	r3, [pc, #300]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   1897c:	4a57      	ldr	r2, [pc, #348]	; (18adc <Det_GetErrorMeaning+0x3d4>)
   1897e:	609a      	str	r2, [r3, #8]
   18980:	e008      	b.n	18994 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_INVALID_GROUP_ID: ErrorString_Ptr[2] = "Invalid channel group id"; break;
   18982:	4b49      	ldr	r3, [pc, #292]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18984:	4a56      	ldr	r2, [pc, #344]	; (18ae0 <Det_GetErrorMeaning+0x3d8>)
   18986:	609a      	str	r2, [r3, #8]
   18988:	e004      	b.n	18994 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid config parameter"; break;
   1898a:	4b47      	ldr	r3, [pc, #284]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   1898c:	4a55      	ldr	r2, [pc, #340]	; (18ae4 <Det_GetErrorMeaning+0x3dc>)
   1898e:	609a      	str	r2, [r3, #8]
   18990:	e000      	b.n	18994 <Det_GetErrorMeaning+0x28c>
                default: break; //Error ID not registered.
   18992:	bf00      	nop
        break;        
   18994:	e128      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18996:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1899a:	3b10      	subs	r3, #16
   1899c:	2b05      	cmp	r3, #5
   1899e:	d827      	bhi.n	189f0 <Det_GetErrorMeaning+0x2e8>
   189a0:	a201      	add	r2, pc, #4	; (adr r2, 189a8 <Det_GetErrorMeaning+0x2a0>)
   189a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   189a6:	bf00      	nop
   189a8:	000189c1 	.word	0x000189c1
   189ac:	000189c9 	.word	0x000189c9
   189b0:	000189d9 	.word	0x000189d9
   189b4:	000189e1 	.word	0x000189e1
   189b8:	000189d1 	.word	0x000189d1
   189bc:	000189e9 	.word	0x000189e9
                case PWM_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   189c0:	4b39      	ldr	r3, [pc, #228]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   189c2:	4a49      	ldr	r2, [pc, #292]	; (18ae8 <Det_GetErrorMeaning+0x3e0>)
   189c4:	609a      	str	r2, [r3, #8]
   189c6:	e014      	b.n	189f2 <Det_GetErrorMeaning+0x2ea>
                case PWM_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   189c8:	4b37      	ldr	r3, [pc, #220]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   189ca:	4a3a      	ldr	r2, [pc, #232]	; (18ab4 <Det_GetErrorMeaning+0x3ac>)
   189cc:	609a      	str	r2, [r3, #8]
   189ce:	e010      	b.n	189f2 <Det_GetErrorMeaning+0x2ea>
                case PWM_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   189d0:	4b35      	ldr	r3, [pc, #212]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   189d2:	4a39      	ldr	r2, [pc, #228]	; (18ab8 <Det_GetErrorMeaning+0x3b0>)
   189d4:	609a      	str	r2, [r3, #8]
   189d6:	e00c      	b.n	189f2 <Det_GetErrorMeaning+0x2ea>
                case PWM_E_PARAM_CHANNEL: ErrorString_Ptr[2] = "Invalid pwm channel"; break;
   189d8:	4b33      	ldr	r3, [pc, #204]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   189da:	4a44      	ldr	r2, [pc, #272]	; (18aec <Det_GetErrorMeaning+0x3e4>)
   189dc:	609a      	str	r2, [r3, #8]
   189de:	e008      	b.n	189f2 <Det_GetErrorMeaning+0x2ea>
                case PWM_E_PERIOD_UNCHANGEABLE: ErrorString_Ptr[2] = "Pwm channel period is unchangeable"; break;
   189e0:	4b31      	ldr	r3, [pc, #196]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   189e2:	4a43      	ldr	r2, [pc, #268]	; (18af0 <Det_GetErrorMeaning+0x3e8>)
   189e4:	609a      	str	r2, [r3, #8]
   189e6:	e004      	b.n	189f2 <Det_GetErrorMeaning+0x2ea>
                case PWM_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   189e8:	4b2f      	ldr	r3, [pc, #188]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   189ea:	4a31      	ldr	r2, [pc, #196]	; (18ab0 <Det_GetErrorMeaning+0x3a8>)
   189ec:	609a      	str	r2, [r3, #8]
   189ee:	e000      	b.n	189f2 <Det_GetErrorMeaning+0x2ea>
                default: break; //Error ID not registered.
   189f0:	bf00      	nop
        break;
   189f2:	e0f9      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   189f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   189f8:	3b0a      	subs	r3, #10
   189fa:	2b21      	cmp	r3, #33	; 0x21
   189fc:	f200 8086 	bhi.w	18b0c <Det_GetErrorMeaning+0x404>
   18a00:	a201      	add	r2, pc, #4	; (adr r2, 18a08 <Det_GetErrorMeaning+0x300>)
   18a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18a06:	bf00      	nop
   18a08:	00018a91 	.word	0x00018a91
   18a0c:	00018b0d 	.word	0x00018b0d
   18a10:	00018b0d 	.word	0x00018b0d
   18a14:	00018a99 	.word	0x00018a99
   18a18:	00018b0d 	.word	0x00018b0d
   18a1c:	00018b0d 	.word	0x00018b0d
   18a20:	00018b0d 	.word	0x00018b0d
   18a24:	00018b0d 	.word	0x00018b0d
   18a28:	00018b0d 	.word	0x00018b0d
   18a2c:	00018b0d 	.word	0x00018b0d
   18a30:	00018aa1 	.word	0x00018aa1
   18a34:	00018af5 	.word	0x00018af5
   18a38:	00018b0d 	.word	0x00018b0d
   18a3c:	00018b0d 	.word	0x00018b0d
   18a40:	00018b0d 	.word	0x00018b0d
   18a44:	00018afd 	.word	0x00018afd
   18a48:	00018b0d 	.word	0x00018b0d
   18a4c:	00018b0d 	.word	0x00018b0d
   18a50:	00018b0d 	.word	0x00018b0d
   18a54:	00018b0d 	.word	0x00018b0d
   18a58:	00018b0d 	.word	0x00018b0d
   18a5c:	00018b0d 	.word	0x00018b0d
   18a60:	00018b0d 	.word	0x00018b0d
   18a64:	00018b0d 	.word	0x00018b0d
   18a68:	00018b0d 	.word	0x00018b0d
   18a6c:	00018b0d 	.word	0x00018b0d
   18a70:	00018b0d 	.word	0x00018b0d
   18a74:	00018b0d 	.word	0x00018b0d
   18a78:	00018b0d 	.word	0x00018b0d
   18a7c:	00018b0d 	.word	0x00018b0d
   18a80:	00018b0d 	.word	0x00018b0d
   18a84:	00018b0d 	.word	0x00018b0d
   18a88:	00018b0d 	.word	0x00018b0d
   18a8c:	00018b05 	.word	0x00018b05
                case ADC_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   18a90:	4b05      	ldr	r3, [pc, #20]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18a92:	4a08      	ldr	r2, [pc, #32]	; (18ab4 <Det_GetErrorMeaning+0x3ac>)
   18a94:	609a      	str	r2, [r3, #8]
   18a96:	e03a      	b.n	18b0e <Det_GetErrorMeaning+0x406>
                case ADC_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   18a98:	4b03      	ldr	r3, [pc, #12]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18a9a:	4a07      	ldr	r2, [pc, #28]	; (18ab8 <Det_GetErrorMeaning+0x3b0>)
   18a9c:	609a      	str	r2, [r3, #8]
   18a9e:	e036      	b.n	18b0e <Det_GetErrorMeaning+0x406>
                case ADC_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid pointer"; break;
   18aa0:	4b01      	ldr	r3, [pc, #4]	; (18aa8 <Det_GetErrorMeaning+0x3a0>)
   18aa2:	4a06      	ldr	r2, [pc, #24]	; (18abc <Det_GetErrorMeaning+0x3b4>)
   18aa4:	609a      	str	r2, [r3, #8]
   18aa6:	e032      	b.n	18b0e <Det_GetErrorMeaning+0x406>
   18aa8:	1fff9768 	.word	0x1fff9768
   18aac:	00019424 	.word	0x00019424
   18ab0:	0001943c 	.word	0x0001943c
   18ab4:	00019454 	.word	0x00019454
   18ab8:	0001946c 	.word	0x0001946c
   18abc:	00019488 	.word	0x00019488
   18ac0:	00019498 	.word	0x00019498
   18ac4:	000194bc 	.word	0x000194bc
   18ac8:	000194d4 	.word	0x000194d4
   18acc:	000194e8 	.word	0x000194e8
   18ad0:	00019508 	.word	0x00019508
   18ad4:	00019520 	.word	0x00019520
   18ad8:	0001953c 	.word	0x0001953c
   18adc:	00019554 	.word	0x00019554
   18ae0:	00019564 	.word	0x00019564
   18ae4:	00019580 	.word	0x00019580
   18ae8:	0001959c 	.word	0x0001959c
   18aec:	000195b4 	.word	0x000195b4
   18af0:	000195c8 	.word	0x000195c8
                case ADC_E_PARAM_GROUP: ErrorString_Ptr[2] = "Invalid adc group"; break;
   18af4:	4b3f      	ldr	r3, [pc, #252]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18af6:	4a40      	ldr	r2, [pc, #256]	; (18bf8 <Det_GetErrorMeaning+0x4f0>)
   18af8:	609a      	str	r2, [r3, #8]
   18afa:	e008      	b.n	18b0e <Det_GetErrorMeaning+0x406>
                case ADC_E_BUFFER_UNINIT: ErrorString_Ptr[2] = "Buffer pointer not initialized"; break;
   18afc:	4b3d      	ldr	r3, [pc, #244]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18afe:	4a3f      	ldr	r2, [pc, #252]	; (18bfc <Det_GetErrorMeaning+0x4f4>)
   18b00:	609a      	str	r2, [r3, #8]
   18b02:	e004      	b.n	18b0e <Det_GetErrorMeaning+0x406>
                case ADC_E_TIMEOUT: ErrorString_Ptr[2] = "Calibration operation timed out"; break;
   18b04:	4b3b      	ldr	r3, [pc, #236]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b06:	4a3e      	ldr	r2, [pc, #248]	; (18c00 <Det_GetErrorMeaning+0x4f8>)
   18b08:	609a      	str	r2, [r3, #8]
   18b0a:	e000      	b.n	18b0e <Det_GetErrorMeaning+0x406>
                default: break; //Error ID not registered.
   18b0c:	bf00      	nop
        break;
   18b0e:	e06b      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18b10:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18b14:	2b05      	cmp	r3, #5
   18b16:	d827      	bhi.n	18b68 <Det_GetErrorMeaning+0x460>
   18b18:	a201      	add	r2, pc, #4	; (adr r2, 18b20 <Det_GetErrorMeaning+0x418>)
   18b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18b1e:	bf00      	nop
   18b20:	00018b39 	.word	0x00018b39
   18b24:	00018b41 	.word	0x00018b41
   18b28:	00018b49 	.word	0x00018b49
   18b2c:	00018b51 	.word	0x00018b51
   18b30:	00018b59 	.word	0x00018b59
   18b34:	00018b61 	.word	0x00018b61
                case SCHEDULER_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18b38:	4b2e      	ldr	r3, [pc, #184]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b3a:	4a32      	ldr	r2, [pc, #200]	; (18c04 <Det_GetErrorMeaning+0x4fc>)
   18b3c:	609a      	str	r2, [r3, #8]
   18b3e:	e014      	b.n	18b6a <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_QUEUE_ID: ErrorString_Ptr[2] = "Invalid queue id"; break;
   18b40:	4b2c      	ldr	r3, [pc, #176]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b42:	4a31      	ldr	r2, [pc, #196]	; (18c08 <Det_GetErrorMeaning+0x500>)
   18b44:	609a      	str	r2, [r3, #8]
   18b46:	e010      	b.n	18b6a <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_QUEUE_STATUS: ErrorString_Ptr[2] = "Invalid queue status flag"; break;
   18b48:	4b2a      	ldr	r3, [pc, #168]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b4a:	4a30      	ldr	r2, [pc, #192]	; (18c0c <Det_GetErrorMeaning+0x504>)
   18b4c:	609a      	str	r2, [r3, #8]
   18b4e:	e00c      	b.n	18b6a <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_TASK_ID: ErrorString_Ptr[2] = "Invalid task id"; break;
   18b50:	4b28      	ldr	r3, [pc, #160]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b52:	4a2f      	ldr	r2, [pc, #188]	; (18c10 <Det_GetErrorMeaning+0x508>)
   18b54:	609a      	str	r2, [r3, #8]
   18b56:	e008      	b.n	18b6a <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_PERIODICITY: ErrorString_Ptr[2] = "Invalid task or timer periodicity"; break;
   18b58:	4b26      	ldr	r3, [pc, #152]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b5a:	4a2e      	ldr	r2, [pc, #184]	; (18c14 <Det_GetErrorMeaning+0x50c>)
   18b5c:	609a      	str	r2, [r3, #8]
   18b5e:	e004      	b.n	18b6a <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_TIMER_ID : ErrorString_Ptr[2] = "Invalid timer id"; break;
   18b60:	4b24      	ldr	r3, [pc, #144]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b62:	4a2d      	ldr	r2, [pc, #180]	; (18c18 <Det_GetErrorMeaning+0x510>)
   18b64:	609a      	str	r2, [r3, #8]
   18b66:	e000      	b.n	18b6a <Det_GetErrorMeaning+0x462>
                default: break; //Error ID not registered.
   18b68:	bf00      	nop
        break;
   18b6a:	e03d      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18b6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18b70:	2b02      	cmp	r3, #2
   18b72:	d00e      	beq.n	18b92 <Det_GetErrorMeaning+0x48a>
   18b74:	2b02      	cmp	r3, #2
   18b76:	dc10      	bgt.n	18b9a <Det_GetErrorMeaning+0x492>
   18b78:	2b00      	cmp	r3, #0
   18b7a:	d002      	beq.n	18b82 <Det_GetErrorMeaning+0x47a>
   18b7c:	2b01      	cmp	r3, #1
   18b7e:	d004      	beq.n	18b8a <Det_GetErrorMeaning+0x482>
                default: break; //Error ID not registered.
   18b80:	e00b      	b.n	18b9a <Det_GetErrorMeaning+0x492>
                case HWIOAB_BUTTONS_E_CONFIG: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18b82:	4b1c      	ldr	r3, [pc, #112]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b84:	4a1f      	ldr	r2, [pc, #124]	; (18c04 <Det_GetErrorMeaning+0x4fc>)
   18b86:	609a      	str	r2, [r3, #8]
   18b88:	e008      	b.n	18b9c <Det_GetErrorMeaning+0x494>
                case HWIOAB_BUTTONS_E_BUTTON_ID: ErrorString_Ptr[2] = "Invalid button id"; break;
   18b8a:	4b1a      	ldr	r3, [pc, #104]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b8c:	4a23      	ldr	r2, [pc, #140]	; (18c1c <Det_GetErrorMeaning+0x514>)
   18b8e:	609a      	str	r2, [r3, #8]
   18b90:	e004      	b.n	18b9c <Det_GetErrorMeaning+0x494>
                case HWIOAB_BUTTONS_E_STATE: ErrorString_Ptr[2] = "Invalid button state"; break;
   18b92:	4b18      	ldr	r3, [pc, #96]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18b94:	4a22      	ldr	r2, [pc, #136]	; (18c20 <Det_GetErrorMeaning+0x518>)
   18b96:	609a      	str	r2, [r3, #8]
   18b98:	e000      	b.n	18b9c <Det_GetErrorMeaning+0x494>
                default: break; //Error ID not registered.
   18b9a:	bf00      	nop
        break;
   18b9c:	e024      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18b9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18ba2:	2b00      	cmp	r3, #0
   18ba4:	d002      	beq.n	18bac <Det_GetErrorMeaning+0x4a4>
   18ba6:	2b01      	cmp	r3, #1
   18ba8:	d004      	beq.n	18bb4 <Det_GetErrorMeaning+0x4ac>
                default: break; //Error ID not registered.
   18baa:	e007      	b.n	18bbc <Det_GetErrorMeaning+0x4b4>
                case HWIOAB_LEDS_E_CONFIG: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18bac:	4b11      	ldr	r3, [pc, #68]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18bae:	4a15      	ldr	r2, [pc, #84]	; (18c04 <Det_GetErrorMeaning+0x4fc>)
   18bb0:	609a      	str	r2, [r3, #8]
   18bb2:	e003      	b.n	18bbc <Det_GetErrorMeaning+0x4b4>
                case HWIOAB_LEDS_E_LED_ID: ErrorString_Ptr[2] = "Invalid led id"; break;
   18bb4:	4b0f      	ldr	r3, [pc, #60]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18bb6:	4a1b      	ldr	r2, [pc, #108]	; (18c24 <Det_GetErrorMeaning+0x51c>)
   18bb8:	609a      	str	r2, [r3, #8]
   18bba:	bf00      	nop
        break;
   18bbc:	e014      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18bbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18bc2:	2b00      	cmp	r3, #0
   18bc4:	d103      	bne.n	18bce <Det_GetErrorMeaning+0x4c6>
                case HWIOAB_POTS_E_PARAM: ErrorString_Ptr[2] = "Invalid input pointer"; break;
   18bc6:	4b0b      	ldr	r3, [pc, #44]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18bc8:	4a17      	ldr	r2, [pc, #92]	; (18c28 <Det_GetErrorMeaning+0x520>)
   18bca:	609a      	str	r2, [r3, #8]
   18bcc:	e000      	b.n	18bd0 <Det_GetErrorMeaning+0x4c8>
                default: break; //Error ID not registered.
   18bce:	bf00      	nop
        break;
   18bd0:	e00a      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18bd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18bd6:	2b00      	cmp	r3, #0
   18bd8:	d103      	bne.n	18be2 <Det_GetErrorMeaning+0x4da>
                case HWIOAB_BUZZER_E_TONE: ErrorString_Ptr[2] = "Invalid buzzer tone"; break;
   18bda:	4b06      	ldr	r3, [pc, #24]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18bdc:	4a13      	ldr	r2, [pc, #76]	; (18c2c <Det_GetErrorMeaning+0x524>)
   18bde:	609a      	str	r2, [r3, #8]
   18be0:	e000      	b.n	18be4 <Det_GetErrorMeaning+0x4dc>
                default: break; //Error ID not registered.
   18be2:	bf00      	nop
        break;
   18be4:	e000      	b.n	18be8 <Det_GetErrorMeaning+0x4e0>
        break;
   18be6:	bf00      	nop
    }

    return ErrorString_Ptr[2];
   18be8:	4b02      	ldr	r3, [pc, #8]	; (18bf4 <Det_GetErrorMeaning+0x4ec>)
   18bea:	689b      	ldr	r3, [r3, #8]
}
   18bec:	4618      	mov	r0, r3
   18bee:	b002      	add	sp, #8
   18bf0:	4770      	bx	lr
   18bf2:	bf00      	nop
   18bf4:	1fff9768 	.word	0x1fff9768
   18bf8:	000195ec 	.word	0x000195ec
   18bfc:	00019600 	.word	0x00019600
   18c00:	00019620 	.word	0x00019620
   18c04:	0001959c 	.word	0x0001959c
   18c08:	00019640 	.word	0x00019640
   18c0c:	00019654 	.word	0x00019654
   18c10:	00019670 	.word	0x00019670
   18c14:	00019680 	.word	0x00019680
   18c18:	000196a4 	.word	0x000196a4
   18c1c:	000196b8 	.word	0x000196b8
   18c20:	000196cc 	.word	0x000196cc
   18c24:	000196e4 	.word	0x000196e4
   18c28:	000196f4 	.word	0x000196f4
   18c2c:	0001970c 	.word	0x0001970c

00018c30 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   18c30:	b510      	push	{r4, lr}
   18c32:	b088      	sub	sp, #32
   18c34:	4604      	mov	r4, r0
   18c36:	4608      	mov	r0, r1
   18c38:	4611      	mov	r1, r2
   18c3a:	461a      	mov	r2, r3
   18c3c:	4623      	mov	r3, r4
   18c3e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18c42:	4603      	mov	r3, r0
   18c44:	f88d 300d 	strb.w	r3, [sp, #13]
   18c48:	460b      	mov	r3, r1
   18c4a:	f88d 300c 	strb.w	r3, [sp, #12]
   18c4e:	4613      	mov	r3, r2
   18c50:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18c54:	f7e8 fde6 	bl	1824 <Sys_GetCoreID>
   18c58:	4603      	mov	r3, r0
   18c5a:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   18c5c:	4921      	ldr	r1, [pc, #132]	; (18ce4 <Det_ReportError+0xb4>)
   18c5e:	9b07      	ldr	r3, [sp, #28]
   18c60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   18c64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   18c68:	4a1f      	ldr	r2, [pc, #124]	; (18ce8 <Det_ReportError+0xb8>)
   18c6a:	9b07      	ldr	r3, [sp, #28]
   18c6c:	4413      	add	r3, r2
   18c6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
   18c72:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   18c74:	4a1d      	ldr	r2, [pc, #116]	; (18cec <Det_ReportError+0xbc>)
   18c76:	9b07      	ldr	r3, [sp, #28]
   18c78:	4413      	add	r3, r2
   18c7a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   18c7e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   18c80:	4a1b      	ldr	r2, [pc, #108]	; (18cf0 <Det_ReportError+0xc0>)
   18c82:	9b07      	ldr	r3, [sp, #28]
   18c84:	4413      	add	r3, r2
   18c86:	f89d 200b 	ldrb.w	r2, [sp, #11]
   18c8a:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   18c8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18c90:	4618      	mov	r0, r3
   18c92:	f7ff f967 	bl	17f64 <Det_GetModuleName>
   18c96:	4603      	mov	r3, r0
   18c98:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   18c9a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   18c9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18ca2:	4611      	mov	r1, r2
   18ca4:	4618      	mov	r0, r3
   18ca6:	f7ff fa03 	bl	180b0 <Det_GetApiName>
   18caa:	4603      	mov	r3, r0
   18cac:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   18cae:	f89d 200b 	ldrb.w	r2, [sp, #11]
   18cb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18cb6:	4611      	mov	r1, r2
   18cb8:	4618      	mov	r0, r3
   18cba:	f7ff fd25 	bl	18708 <Det_GetErrorMeaning>
   18cbe:	4603      	mov	r3, r0
   18cc0:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   18cc2:	9904      	ldr	r1, [sp, #16]
   18cc4:	9805      	ldr	r0, [sp, #20]
   18cc6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   18cca:	9a06      	ldr	r2, [sp, #24]
   18ccc:	9201      	str	r2, [sp, #4]
   18cce:	9300      	str	r3, [sp, #0]
   18cd0:	4603      	mov	r3, r0
   18cd2:	460a      	mov	r2, r1
   18cd4:	4907      	ldr	r1, [pc, #28]	; (18cf4 <Det_ReportError+0xc4>)
   18cd6:	2000      	movs	r0, #0
   18cd8:	f7e9 faaa 	bl	2230 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   18cdc:	2300      	movs	r3, #0
}
   18cde:	4618      	mov	r0, r3
   18ce0:	b008      	add	sp, #32
   18ce2:	bd10      	pop	{r4, pc}
   18ce4:	1fff9778 	.word	0x1fff9778
   18ce8:	1fff9744 	.word	0x1fff9744
   18cec:	1fff9748 	.word	0x1fff9748
   18cf0:	1fff974c 	.word	0x1fff974c
   18cf4:	00019720 	.word	0x00019720

00018cf8 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   18cf8:	b510      	push	{r4, lr}
   18cfa:	b084      	sub	sp, #16
   18cfc:	4604      	mov	r4, r0
   18cfe:	4608      	mov	r0, r1
   18d00:	4611      	mov	r1, r2
   18d02:	461a      	mov	r2, r3
   18d04:	4623      	mov	r3, r4
   18d06:	f8ad 3006 	strh.w	r3, [sp, #6]
   18d0a:	4603      	mov	r3, r0
   18d0c:	f88d 3005 	strb.w	r3, [sp, #5]
   18d10:	460b      	mov	r3, r1
   18d12:	f88d 3004 	strb.w	r3, [sp, #4]
   18d16:	4613      	mov	r3, r2
   18d18:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18d1c:	f7e8 fd82 	bl	1824 <Sys_GetCoreID>
   18d20:	4603      	mov	r3, r0
   18d22:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   18d24:	490d      	ldr	r1, [pc, #52]	; (18d5c <Det_ReportRuntimeError+0x64>)
   18d26:	9b03      	ldr	r3, [sp, #12]
   18d28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18d2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   18d30:	4a0b      	ldr	r2, [pc, #44]	; (18d60 <Det_ReportRuntimeError+0x68>)
   18d32:	9b03      	ldr	r3, [sp, #12]
   18d34:	4413      	add	r3, r2
   18d36:	f89d 2005 	ldrb.w	r2, [sp, #5]
   18d3a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   18d3c:	4a09      	ldr	r2, [pc, #36]	; (18d64 <Det_ReportRuntimeError+0x6c>)
   18d3e:	9b03      	ldr	r3, [sp, #12]
   18d40:	4413      	add	r3, r2
   18d42:	f89d 2004 	ldrb.w	r2, [sp, #4]
   18d46:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   18d48:	4a07      	ldr	r2, [pc, #28]	; (18d68 <Det_ReportRuntimeError+0x70>)
   18d4a:	9b03      	ldr	r3, [sp, #12]
   18d4c:	4413      	add	r3, r2
   18d4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   18d52:	701a      	strb	r2, [r3, #0]

    return E_OK;
   18d54:	2300      	movs	r3, #0
}
   18d56:	4618      	mov	r0, r3
   18d58:	b004      	add	sp, #16
   18d5a:	bd10      	pop	{r4, pc}
   18d5c:	1fff977c 	.word	0x1fff977c
   18d60:	1fff9750 	.word	0x1fff9750
   18d64:	1fff9754 	.word	0x1fff9754
   18d68:	1fff9758 	.word	0x1fff9758

00018d6c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   18d6c:	b510      	push	{r4, lr}
   18d6e:	b084      	sub	sp, #16
   18d70:	4604      	mov	r4, r0
   18d72:	4608      	mov	r0, r1
   18d74:	4611      	mov	r1, r2
   18d76:	461a      	mov	r2, r3
   18d78:	4623      	mov	r3, r4
   18d7a:	f8ad 3006 	strh.w	r3, [sp, #6]
   18d7e:	4603      	mov	r3, r0
   18d80:	f88d 3005 	strb.w	r3, [sp, #5]
   18d84:	460b      	mov	r3, r1
   18d86:	f88d 3004 	strb.w	r3, [sp, #4]
   18d8a:	4613      	mov	r3, r2
   18d8c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18d90:	f7e8 fd48 	bl	1824 <Sys_GetCoreID>
   18d94:	4603      	mov	r3, r0
   18d96:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   18d98:	490d      	ldr	r1, [pc, #52]	; (18dd0 <Det_ReportTransientFault+0x64>)
   18d9a:	9b03      	ldr	r3, [sp, #12]
   18d9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18da0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   18da4:	4a0b      	ldr	r2, [pc, #44]	; (18dd4 <Det_ReportTransientFault+0x68>)
   18da6:	9b03      	ldr	r3, [sp, #12]
   18da8:	4413      	add	r3, r2
   18daa:	f89d 2005 	ldrb.w	r2, [sp, #5]
   18dae:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   18db0:	4a09      	ldr	r2, [pc, #36]	; (18dd8 <Det_ReportTransientFault+0x6c>)
   18db2:	9b03      	ldr	r3, [sp, #12]
   18db4:	4413      	add	r3, r2
   18db6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   18dba:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   18dbc:	4a07      	ldr	r2, [pc, #28]	; (18ddc <Det_ReportTransientFault+0x70>)
   18dbe:	9b03      	ldr	r3, [sp, #12]
   18dc0:	4413      	add	r3, r2
   18dc2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   18dc6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   18dc8:	2300      	movs	r3, #0
}
   18dca:	4618      	mov	r0, r3
   18dcc:	b004      	add	sp, #16
   18dce:	bd10      	pop	{r4, pc}
   18dd0:	1fff9774 	.word	0x1fff9774
   18dd4:	1fff975c 	.word	0x1fff975c
   18dd8:	1fff9760 	.word	0x1fff9760
   18ddc:	1fff9764 	.word	0x1fff9764

00018de0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   18de0:	bf00      	nop
   18de2:	4770      	bx	lr

00018de4 <Fls_ACEraseRomEnd>:
   18de4:	2075634d 	.word	0x2075634d
   18de8:	75646f6d 	.word	0x75646f6d
   18dec:	0000656c 	.word	0x0000656c
   18df0:	74616c50 	.word	0x74616c50
   18df4:	6d726f66 	.word	0x6d726f66
   18df8:	646f6d20 	.word	0x646f6d20
   18dfc:	00656c75 	.word	0x00656c75
   18e00:	74726f50 	.word	0x74726f50
   18e04:	646f6d20 	.word	0x646f6d20
   18e08:	00656c75 	.word	0x00656c75
   18e0c:	206f6944 	.word	0x206f6944
   18e10:	75646f6d 	.word	0x75646f6d
   18e14:	0000656c 	.word	0x0000656c
   18e18:	206d7750 	.word	0x206d7750
   18e1c:	75646f6d 	.word	0x75646f6d
   18e20:	0000656c 	.word	0x0000656c
   18e24:	20636441 	.word	0x20636441
   18e28:	75646f6d 	.word	0x75646f6d
   18e2c:	0000656c 	.word	0x0000656c
   18e30:	65686353 	.word	0x65686353
   18e34:	656c7564 	.word	0x656c7564
   18e38:	6f6d2072 	.word	0x6f6d2072
   18e3c:	656c7564 	.word	0x656c7564
   18e40:	00000000 	.word	0x00000000
   18e44:	74747542 	.word	0x74747542
   18e48:	20736e6f 	.word	0x20736e6f
   18e4c:	61204f49 	.word	0x61204f49
   18e50:	72747362 	.word	0x72747362
   18e54:	69746361 	.word	0x69746361
   18e58:	6d206e6f 	.word	0x6d206e6f
   18e5c:	6c75646f 	.word	0x6c75646f
   18e60:	00000065 	.word	0x00000065
   18e64:	7364654c 	.word	0x7364654c
   18e68:	204f4920 	.word	0x204f4920
   18e6c:	74736261 	.word	0x74736261
   18e70:	74636172 	.word	0x74636172
   18e74:	206e6f69 	.word	0x206e6f69
   18e78:	75646f6d 	.word	0x75646f6d
   18e7c:	0000656c 	.word	0x0000656c
   18e80:	73746f50 	.word	0x73746f50
   18e84:	204f4920 	.word	0x204f4920
   18e88:	74736261 	.word	0x74736261
   18e8c:	74636172 	.word	0x74636172
   18e90:	206e6f69 	.word	0x206e6f69
   18e94:	75646f6d 	.word	0x75646f6d
   18e98:	0000656c 	.word	0x0000656c
   18e9c:	7a7a7542 	.word	0x7a7a7542
   18ea0:	49207265 	.word	0x49207265
   18ea4:	6261204f 	.word	0x6261204f
   18ea8:	61727473 	.word	0x61727473
   18eac:	6f697463 	.word	0x6f697463
   18eb0:	6f6d206e 	.word	0x6f6d206e
   18eb4:	656c7564 	.word	0x656c7564
   18eb8:	00000000 	.word	0x00000000
   18ebc:	5f75634d 	.word	0x5f75634d
   18ec0:	74696e49 	.word	0x74696e49
   18ec4:	00002928 	.word	0x00002928
   18ec8:	5f75634d 	.word	0x5f75634d
   18ecc:	74696e49 	.word	0x74696e49
   18ed0:	636f6c43 	.word	0x636f6c43
   18ed4:	0029286b 	.word	0x0029286b
   18ed8:	5f75634d 	.word	0x5f75634d
   18edc:	4d746553 	.word	0x4d746553
   18ee0:	2865646f 	.word	0x2865646f
   18ee4:	00000029 	.word	0x00000029
   18ee8:	5f75634d 	.word	0x5f75634d
   18eec:	56746547 	.word	0x56746547
   18ef0:	69737265 	.word	0x69737265
   18ef4:	6e496e6f 	.word	0x6e496e6f
   18ef8:	29286f66 	.word	0x29286f66
   18efc:	00000000 	.word	0x00000000
   18f00:	74616c50 	.word	0x74616c50
   18f04:	6d726f66 	.word	0x6d726f66
   18f08:	696e495f 	.word	0x696e495f
   18f0c:	00292874 	.word	0x00292874
   18f10:	74616c50 	.word	0x74616c50
   18f14:	6d726f66 	.word	0x6d726f66
   18f18:	7465535f 	.word	0x7465535f
   18f1c:	28717249 	.word	0x28717249
   18f20:	00000029 	.word	0x00000029
   18f24:	74616c50 	.word	0x74616c50
   18f28:	6d726f66 	.word	0x6d726f66
   18f2c:	7465535f 	.word	0x7465535f
   18f30:	50717249 	.word	0x50717249
   18f34:	726f6972 	.word	0x726f6972
   18f38:	28797469 	.word	0x28797469
   18f3c:	00000029 	.word	0x00000029
   18f40:	74616c50 	.word	0x74616c50
   18f44:	6d726f66 	.word	0x6d726f66
   18f48:	7465475f 	.word	0x7465475f
   18f4c:	50717249 	.word	0x50717249
   18f50:	726f6972 	.word	0x726f6972
   18f54:	28797469 	.word	0x28797469
   18f58:	00000029 	.word	0x00000029
   18f5c:	74616c50 	.word	0x74616c50
   18f60:	6d726f66 	.word	0x6d726f66
   18f64:	736e495f 	.word	0x736e495f
   18f68:	6c6c6174 	.word	0x6c6c6174
   18f6c:	48717249 	.word	0x48717249
   18f70:	6c646e61 	.word	0x6c646e61
   18f74:	29287265 	.word	0x29287265
   18f78:	00000000 	.word	0x00000000
   18f7c:	74726f50 	.word	0x74726f50
   18f80:	696e495f 	.word	0x696e495f
   18f84:	00292874 	.word	0x00292874
   18f88:	74726f50 	.word	0x74726f50
   18f8c:	7465535f 	.word	0x7465535f
   18f90:	446e6950 	.word	0x446e6950
   18f94:	63657269 	.word	0x63657269
   18f98:	6e6f6974 	.word	0x6e6f6974
   18f9c:	00002928 	.word	0x00002928
   18fa0:	74726f50 	.word	0x74726f50
   18fa4:	7465535f 	.word	0x7465535f
   18fa8:	4d6e6950 	.word	0x4d6e6950
   18fac:	2865646f 	.word	0x2865646f
   18fb0:	00000029 	.word	0x00000029
   18fb4:	74726f50 	.word	0x74726f50
   18fb8:	6665525f 	.word	0x6665525f
   18fbc:	68736572 	.word	0x68736572
   18fc0:	74726f50 	.word	0x74726f50
   18fc4:	65726944 	.word	0x65726944
   18fc8:	6f697463 	.word	0x6f697463
   18fcc:	0029286e 	.word	0x0029286e
   18fd0:	74726f50 	.word	0x74726f50
   18fd4:	7465475f 	.word	0x7465475f
   18fd8:	73726556 	.word	0x73726556
   18fdc:	496e6f69 	.word	0x496e6f69
   18fe0:	286f666e 	.word	0x286f666e
   18fe4:	00000029 	.word	0x00000029
   18fe8:	5f6f6944 	.word	0x5f6f6944
   18fec:	74697257 	.word	0x74697257
   18ff0:	61684365 	.word	0x61684365
   18ff4:	6c656e6e 	.word	0x6c656e6e
   18ff8:	00002928 	.word	0x00002928
   18ffc:	5f6f6944 	.word	0x5f6f6944
   19000:	64616552 	.word	0x64616552
   19004:	6e616843 	.word	0x6e616843
   19008:	286c656e 	.word	0x286c656e
   1900c:	00000029 	.word	0x00000029
   19010:	5f6f6944 	.word	0x5f6f6944
   19014:	70696c46 	.word	0x70696c46
   19018:	6e616843 	.word	0x6e616843
   1901c:	286c656e 	.word	0x286c656e
   19020:	00000029 	.word	0x00000029
   19024:	5f6f6944 	.word	0x5f6f6944
   19028:	74697257 	.word	0x74697257
   1902c:	61684365 	.word	0x61684365
   19030:	6c656e6e 	.word	0x6c656e6e
   19034:	756f7247 	.word	0x756f7247
   19038:	00292870 	.word	0x00292870
   1903c:	5f6f6944 	.word	0x5f6f6944
   19040:	64616552 	.word	0x64616552
   19044:	6e616843 	.word	0x6e616843
   19048:	476c656e 	.word	0x476c656e
   1904c:	70756f72 	.word	0x70756f72
   19050:	00002928 	.word	0x00002928
   19054:	5f6f6944 	.word	0x5f6f6944
   19058:	64616552 	.word	0x64616552
   1905c:	74726f50 	.word	0x74726f50
   19060:	00002928 	.word	0x00002928
   19064:	5f6f6944 	.word	0x5f6f6944
   19068:	74697257 	.word	0x74697257
   1906c:	726f5065 	.word	0x726f5065
   19070:	00292874 	.word	0x00292874
   19074:	5f6f6944 	.word	0x5f6f6944
   19078:	56746547 	.word	0x56746547
   1907c:	69737265 	.word	0x69737265
   19080:	6e496e6f 	.word	0x6e496e6f
   19084:	29286f66 	.word	0x29286f66
   19088:	00000000 	.word	0x00000000
   1908c:	5f6d7750 	.word	0x5f6d7750
   19090:	74696e49 	.word	0x74696e49
   19094:	00002928 	.word	0x00002928
   19098:	5f6d7750 	.word	0x5f6d7750
   1909c:	6e496544 	.word	0x6e496544
   190a0:	29287469 	.word	0x29287469
   190a4:	00000000 	.word	0x00000000
   190a8:	5f6d7750 	.word	0x5f6d7750
   190ac:	44746553 	.word	0x44746553
   190b0:	43797475 	.word	0x43797475
   190b4:	656c6379 	.word	0x656c6379
   190b8:	00002928 	.word	0x00002928
   190bc:	5f6d7750 	.word	0x5f6d7750
   190c0:	50746553 	.word	0x50746553
   190c4:	6f697265 	.word	0x6f697265
   190c8:	646e4164 	.word	0x646e4164
   190cc:	79747544 	.word	0x79747544
   190d0:	00002928 	.word	0x00002928
   190d4:	5f6d7750 	.word	0x5f6d7750
   190d8:	4f746553 	.word	0x4f746553
   190dc:	75707475 	.word	0x75707475
   190e0:	496f5474 	.word	0x496f5474
   190e4:	28656c64 	.word	0x28656c64
   190e8:	00000029 	.word	0x00000029
   190ec:	5f6d7750 	.word	0x5f6d7750
   190f0:	56746547 	.word	0x56746547
   190f4:	69737265 	.word	0x69737265
   190f8:	6e496e6f 	.word	0x6e496e6f
   190fc:	29286f66 	.word	0x29286f66
   19100:	00000000 	.word	0x00000000
   19104:	5f636441 	.word	0x5f636441
   19108:	74696e49 	.word	0x74696e49
   1910c:	00002928 	.word	0x00002928
   19110:	5f636441 	.word	0x5f636441
   19114:	6e496544 	.word	0x6e496544
   19118:	29287469 	.word	0x29287469
   1911c:	00000000 	.word	0x00000000
   19120:	5f636441 	.word	0x5f636441
   19124:	72617453 	.word	0x72617453
   19128:	6f724774 	.word	0x6f724774
   1912c:	6f437075 	.word	0x6f437075
   19130:	7265766e 	.word	0x7265766e
   19134:	6e6f6973 	.word	0x6e6f6973
   19138:	00002928 	.word	0x00002928
   1913c:	5f636441 	.word	0x5f636441
   19140:	706f7453 	.word	0x706f7453
   19144:	756f7247 	.word	0x756f7247
   19148:	6e6f4370 	.word	0x6e6f4370
   1914c:	73726576 	.word	0x73726576
   19150:	286e6f69 	.word	0x286e6f69
   19154:	00000029 	.word	0x00000029
   19158:	5f636441 	.word	0x5f636441
   1915c:	64616552 	.word	0x64616552
   19160:	756f7247 	.word	0x756f7247
   19164:	00292870 	.word	0x00292870
   19168:	5f636441 	.word	0x5f636441
   1916c:	47746547 	.word	0x47746547
   19170:	70756f72 	.word	0x70756f72
   19174:	74617453 	.word	0x74617453
   19178:	29287375 	.word	0x29287375
   1917c:	00000000 	.word	0x00000000
   19180:	5f636441 	.word	0x5f636441
   19184:	696c6143 	.word	0x696c6143
   19188:	74617262 	.word	0x74617262
   1918c:	00292865 	.word	0x00292865
   19190:	5f636441 	.word	0x5f636441
   19194:	75746553 	.word	0x75746553
   19198:	73655270 	.word	0x73655270
   1919c:	42746c75 	.word	0x42746c75
   191a0:	65666675 	.word	0x65666675
   191a4:	00292872 	.word	0x00292872
   191a8:	5f636441 	.word	0x5f636441
   191ac:	56746547 	.word	0x56746547
   191b0:	69737265 	.word	0x69737265
   191b4:	6e496e6f 	.word	0x6e496e6f
   191b8:	29286f66 	.word	0x29286f66
   191bc:	00000000 	.word	0x00000000
   191c0:	65686353 	.word	0x65686353
   191c4:	656c7564 	.word	0x656c7564
   191c8:	6e495f72 	.word	0x6e495f72
   191cc:	29287469 	.word	0x29287469
   191d0:	00000000 	.word	0x00000000
   191d4:	65686353 	.word	0x65686353
   191d8:	656c7564 	.word	0x656c7564
   191dc:	65475f72 	.word	0x65475f72
   191e0:	61745374 	.word	0x61745374
   191e4:	51737574 	.word	0x51737574
   191e8:	65756575 	.word	0x65756575
   191ec:	00002928 	.word	0x00002928
   191f0:	65686353 	.word	0x65686353
   191f4:	656c7564 	.word	0x656c7564
   191f8:	6c465f72 	.word	0x6c465f72
   191fc:	51687375 	.word	0x51687375
   19200:	65756575 	.word	0x65756575
   19204:	00002928 	.word	0x00002928
   19208:	65686353 	.word	0x65686353
   1920c:	656c7564 	.word	0x656c7564
   19210:	72575f72 	.word	0x72575f72
   19214:	51657469 	.word	0x51657469
   19218:	65756575 	.word	0x65756575
   1921c:	00002928 	.word	0x00002928
   19220:	65686353 	.word	0x65686353
   19224:	656c7564 	.word	0x656c7564
   19228:	65525f72 	.word	0x65525f72
   1922c:	75516461 	.word	0x75516461
   19230:	28657565 	.word	0x28657565
   19234:	00000029 	.word	0x00000029
   19238:	65686353 	.word	0x65686353
   1923c:	656c7564 	.word	0x656c7564
   19240:	74535f72 	.word	0x74535f72
   19244:	54747261 	.word	0x54747261
   19248:	286b7361 	.word	0x286b7361
   1924c:	00000029 	.word	0x00000029
   19250:	65686353 	.word	0x65686353
   19254:	656c7564 	.word	0x656c7564
   19258:	74535f72 	.word	0x74535f72
   1925c:	6154706f 	.word	0x6154706f
   19260:	29286b73 	.word	0x29286b73
   19264:	00000000 	.word	0x00000000
   19268:	65686353 	.word	0x65686353
   1926c:	656c7564 	.word	0x656c7564
   19270:	65505f72 	.word	0x65505f72
   19274:	646f6972 	.word	0x646f6972
   19278:	6b736154 	.word	0x6b736154
   1927c:	00002928 	.word	0x00002928
   19280:	65686353 	.word	0x65686353
   19284:	656c7564 	.word	0x656c7564
   19288:	74535f72 	.word	0x74535f72
   1928c:	54747261 	.word	0x54747261
   19290:	72656d69 	.word	0x72656d69
   19294:	00002928 	.word	0x00002928
   19298:	65686353 	.word	0x65686353
   1929c:	656c7564 	.word	0x656c7564
   192a0:	74535f72 	.word	0x74535f72
   192a4:	6954706f 	.word	0x6954706f
   192a8:	2872656d 	.word	0x2872656d
   192ac:	00000029 	.word	0x00000029
   192b0:	65686353 	.word	0x65686353
   192b4:	656c7564 	.word	0x656c7564
   192b8:	65475f72 	.word	0x65475f72
   192bc:	6d695474 	.word	0x6d695474
   192c0:	29287265 	.word	0x29287265
   192c4:	00000000 	.word	0x00000000
   192c8:	65686353 	.word	0x65686353
   192cc:	656c7564 	.word	0x656c7564
   192d0:	65525f72 	.word	0x65525f72
   192d4:	64616f6c 	.word	0x64616f6c
   192d8:	656d6954 	.word	0x656d6954
   192dc:	00292872 	.word	0x00292872
   192e0:	6f497748 	.word	0x6f497748
   192e4:	425f6241 	.word	0x425f6241
   192e8:	6f747475 	.word	0x6f747475
   192ec:	495f736e 	.word	0x495f736e
   192f0:	2874696e 	.word	0x2874696e
   192f4:	00000029 	.word	0x00000029
   192f8:	6f497748 	.word	0x6f497748
   192fc:	425f6241 	.word	0x425f6241
   19300:	6f747475 	.word	0x6f747475
   19304:	475f736e 	.word	0x475f736e
   19308:	76457465 	.word	0x76457465
   1930c:	28746e65 	.word	0x28746e65
   19310:	00000029 	.word	0x00000029
   19314:	6f497748 	.word	0x6f497748
   19318:	425f6241 	.word	0x425f6241
   1931c:	6f747475 	.word	0x6f747475
   19320:	4d5f736e 	.word	0x4d5f736e
   19324:	466e6961 	.word	0x466e6961
   19328:	74636e75 	.word	0x74636e75
   1932c:	286e6f69 	.word	0x286e6f69
   19330:	00000029 	.word	0x00000029
   19334:	6f497748 	.word	0x6f497748
   19338:	4c5f6241 	.word	0x4c5f6241
   1933c:	5f736465 	.word	0x5f736465
   19340:	74696e49 	.word	0x74696e49
   19344:	00002928 	.word	0x00002928
   19348:	6f497748 	.word	0x6f497748
   1934c:	4c5f6241 	.word	0x4c5f6241
   19350:	5f736465 	.word	0x5f736465
   19354:	6e727554 	.word	0x6e727554
   19358:	29286e4f 	.word	0x29286e4f
   1935c:	00000000 	.word	0x00000000
   19360:	6f497748 	.word	0x6f497748
   19364:	4c5f6241 	.word	0x4c5f6241
   19368:	5f736465 	.word	0x5f736465
   1936c:	6e727554 	.word	0x6e727554
   19370:	2866664f 	.word	0x2866664f
   19374:	00000029 	.word	0x00000029
   19378:	6f497748 	.word	0x6f497748
   1937c:	4c5f6241 	.word	0x4c5f6241
   19380:	5f736465 	.word	0x5f736465
   19384:	6e727554 	.word	0x6e727554
   19388:	67676f54 	.word	0x67676f54
   1938c:	2928656c 	.word	0x2928656c
   19390:	00000000 	.word	0x00000000
   19394:	6f497748 	.word	0x6f497748
   19398:	505f6241 	.word	0x505f6241
   1939c:	5f73746f 	.word	0x5f73746f
   193a0:	74696e49 	.word	0x74696e49
   193a4:	00002928 	.word	0x00002928
   193a8:	6f497748 	.word	0x6f497748
   193ac:	505f6241 	.word	0x505f6241
   193b0:	5f73746f 	.word	0x5f73746f
   193b4:	56746547 	.word	0x56746547
   193b8:	65756c61 	.word	0x65756c61
   193bc:	00002928 	.word	0x00002928
   193c0:	6f497748 	.word	0x6f497748
   193c4:	505f6241 	.word	0x505f6241
   193c8:	5f73746f 	.word	0x5f73746f
   193cc:	41746547 	.word	0x41746547
   193d0:	6156746c 	.word	0x6156746c
   193d4:	2865756c 	.word	0x2865756c
   193d8:	00000029 	.word	0x00000029
   193dc:	6f497748 	.word	0x6f497748
   193e0:	425f6241 	.word	0x425f6241
   193e4:	657a7a75 	.word	0x657a7a75
   193e8:	6e495f72 	.word	0x6e495f72
   193ec:	29287469 	.word	0x29287469
   193f0:	00000000 	.word	0x00000000
   193f4:	6f497748 	.word	0x6f497748
   193f8:	425f6241 	.word	0x425f6241
   193fc:	657a7a75 	.word	0x657a7a75
   19400:	65425f72 	.word	0x65425f72
   19404:	29287065 	.word	0x29287065
   19408:	00000000 	.word	0x00000000
   1940c:	6f497748 	.word	0x6f497748
   19410:	425f6241 	.word	0x425f6241
   19414:	657a7a75 	.word	0x657a7a75
   19418:	74535f72 	.word	0x74535f72
   1941c:	2928706f 	.word	0x2928706f
   19420:	00000000 	.word	0x00000000
   19424:	61766e49 	.word	0x61766e49
   19428:	2064696c 	.word	0x2064696c
   1942c:	666e6f63 	.word	0x666e6f63
   19430:	696f7020 	.word	0x696f7020
   19434:	7265746e 	.word	0x7265746e
   19438:	00000000 	.word	0x00000000
   1943c:	61766e49 	.word	0x61766e49
   19440:	2064696c 	.word	0x2064696c
   19444:	75706e69 	.word	0x75706e69
   19448:	61702074 	.word	0x61702074
   1944c:	656d6172 	.word	0x656d6172
   19450:	00726574 	.word	0x00726574
   19454:	76697244 	.word	0x76697244
   19458:	75207265 	.word	0x75207265
   1945c:	696e696e 	.word	0x696e696e
   19460:	6c616974 	.word	0x6c616974
   19464:	64657a69 	.word	0x64657a69
   19468:	00000000 	.word	0x00000000
   1946c:	76697244 	.word	0x76697244
   19470:	61207265 	.word	0x61207265
   19474:	6165726c 	.word	0x6165726c
   19478:	69207964 	.word	0x69207964
   1947c:	6974696e 	.word	0x6974696e
   19480:	7a696c61 	.word	0x7a696c61
   19484:	00006465 	.word	0x00006465
   19488:	61766e49 	.word	0x61766e49
   1948c:	2064696c 	.word	0x2064696c
   19490:	6e696f70 	.word	0x6e696f70
   19494:	00726574 	.word	0x00726574
   19498:	6c6c6143 	.word	0x6c6c6143
   1949c:	6f726620 	.word	0x6f726620
   194a0:	7277206d 	.word	0x7277206d
   194a4:	20676e6f 	.word	0x20676e6f
   194a8:	7070616d 	.word	0x7070616d
   194ac:	70206465 	.word	0x70206465
   194b0:	69747261 	.word	0x69747261
   194b4:	6e6f6974 	.word	0x6e6f6974
   194b8:	00000000 	.word	0x00000000
   194bc:	61726150 	.word	0x61726150
   194c0:	6574656d 	.word	0x6574656d
   194c4:	756f2072 	.word	0x756f2072
   194c8:	666f2074 	.word	0x666f2074
   194cc:	6e617220 	.word	0x6e617220
   194d0:	00006567 	.word	0x00006567
   194d4:	61766e49 	.word	0x61766e49
   194d8:	2064696c 	.word	0x2064696c
   194dc:	74726f50 	.word	0x74726f50
   194e0:	6e695020 	.word	0x6e695020
   194e4:	00444920 	.word	0x00444920
   194e8:	74726f50 	.word	0x74726f50
   194ec:	6e697020 	.word	0x6e697020
   194f0:	646f6d20 	.word	0x646f6d20
   194f4:	73692065 	.word	0x73692065
   194f8:	636e7520 	.word	0x636e7520
   194fc:	676e6168 	.word	0x676e6168
   19500:	6c626165 	.word	0x6c626165
   19504:	00000065 	.word	0x00000065
   19508:	61766e49 	.word	0x61766e49
   1950c:	2064696c 	.word	0x2064696c
   19510:	74726f70 	.word	0x74726f70
   19514:	6e697020 	.word	0x6e697020
   19518:	646f6d20 	.word	0x646f6d20
   1951c:	00000065 	.word	0x00000065
   19520:	61766e49 	.word	0x61766e49
   19524:	2064696c 	.word	0x2064696c
   19528:	206f6964 	.word	0x206f6964
   1952c:	6e616863 	.word	0x6e616863
   19530:	206c656e 	.word	0x206c656e
   19534:	6576656c 	.word	0x6576656c
   19538:	0000006c 	.word	0x0000006c
   1953c:	61766e49 	.word	0x61766e49
   19540:	2064696c 	.word	0x2064696c
   19544:	206f6964 	.word	0x206f6964
   19548:	6e616863 	.word	0x6e616863
   1954c:	206c656e 	.word	0x206c656e
   19550:	00006469 	.word	0x00006469
   19554:	61766e49 	.word	0x61766e49
   19558:	2064696c 	.word	0x2064696c
   1955c:	74726f70 	.word	0x74726f70
   19560:	00646920 	.word	0x00646920
   19564:	61766e49 	.word	0x61766e49
   19568:	2064696c 	.word	0x2064696c
   1956c:	6e616863 	.word	0x6e616863
   19570:	206c656e 	.word	0x206c656e
   19574:	756f7267 	.word	0x756f7267
   19578:	64692070 	.word	0x64692070
   1957c:	00000000 	.word	0x00000000
   19580:	61766e49 	.word	0x61766e49
   19584:	2064696c 	.word	0x2064696c
   19588:	666e6f63 	.word	0x666e6f63
   1958c:	70206769 	.word	0x70206769
   19590:	6d617261 	.word	0x6d617261
   19594:	72657465 	.word	0x72657465
   19598:	00000000 	.word	0x00000000
   1959c:	61766e49 	.word	0x61766e49
   195a0:	2064696c 	.word	0x2064696c
   195a4:	666e6f63 	.word	0x666e6f63
   195a8:	70206769 	.word	0x70206769
   195ac:	746e696f 	.word	0x746e696f
   195b0:	00007265 	.word	0x00007265
   195b4:	61766e49 	.word	0x61766e49
   195b8:	2064696c 	.word	0x2064696c
   195bc:	206d7770 	.word	0x206d7770
   195c0:	6e616863 	.word	0x6e616863
   195c4:	006c656e 	.word	0x006c656e
   195c8:	206d7750 	.word	0x206d7750
   195cc:	6e616863 	.word	0x6e616863
   195d0:	206c656e 	.word	0x206c656e
   195d4:	69726570 	.word	0x69726570
   195d8:	6920646f 	.word	0x6920646f
   195dc:	6e752073 	.word	0x6e752073
   195e0:	6e616863 	.word	0x6e616863
   195e4:	62616567 	.word	0x62616567
   195e8:	0000656c 	.word	0x0000656c
   195ec:	61766e49 	.word	0x61766e49
   195f0:	2064696c 	.word	0x2064696c
   195f4:	20636461 	.word	0x20636461
   195f8:	756f7267 	.word	0x756f7267
   195fc:	00000070 	.word	0x00000070
   19600:	66667542 	.word	0x66667542
   19604:	70207265 	.word	0x70207265
   19608:	746e696f 	.word	0x746e696f
   1960c:	6e207265 	.word	0x6e207265
   19610:	6920746f 	.word	0x6920746f
   19614:	6974696e 	.word	0x6974696e
   19618:	7a696c61 	.word	0x7a696c61
   1961c:	00006465 	.word	0x00006465
   19620:	696c6143 	.word	0x696c6143
   19624:	74617262 	.word	0x74617262
   19628:	206e6f69 	.word	0x206e6f69
   1962c:	7265706f 	.word	0x7265706f
   19630:	6f697461 	.word	0x6f697461
   19634:	6974206e 	.word	0x6974206e
   19638:	2064656d 	.word	0x2064656d
   1963c:	0074756f 	.word	0x0074756f
   19640:	61766e49 	.word	0x61766e49
   19644:	2064696c 	.word	0x2064696c
   19648:	75657571 	.word	0x75657571
   1964c:	64692065 	.word	0x64692065
   19650:	00000000 	.word	0x00000000
   19654:	61766e49 	.word	0x61766e49
   19658:	2064696c 	.word	0x2064696c
   1965c:	75657571 	.word	0x75657571
   19660:	74732065 	.word	0x74732065
   19664:	73757461 	.word	0x73757461
   19668:	616c6620 	.word	0x616c6620
   1966c:	00000067 	.word	0x00000067
   19670:	61766e49 	.word	0x61766e49
   19674:	2064696c 	.word	0x2064696c
   19678:	6b736174 	.word	0x6b736174
   1967c:	00646920 	.word	0x00646920
   19680:	61766e49 	.word	0x61766e49
   19684:	2064696c 	.word	0x2064696c
   19688:	6b736174 	.word	0x6b736174
   1968c:	20726f20 	.word	0x20726f20
   19690:	656d6974 	.word	0x656d6974
   19694:	65702072 	.word	0x65702072
   19698:	646f6972 	.word	0x646f6972
   1969c:	74696369 	.word	0x74696369
   196a0:	00000079 	.word	0x00000079
   196a4:	61766e49 	.word	0x61766e49
   196a8:	2064696c 	.word	0x2064696c
   196ac:	656d6974 	.word	0x656d6974
   196b0:	64692072 	.word	0x64692072
   196b4:	00000000 	.word	0x00000000
   196b8:	61766e49 	.word	0x61766e49
   196bc:	2064696c 	.word	0x2064696c
   196c0:	74747562 	.word	0x74747562
   196c4:	69206e6f 	.word	0x69206e6f
   196c8:	00000064 	.word	0x00000064
   196cc:	61766e49 	.word	0x61766e49
   196d0:	2064696c 	.word	0x2064696c
   196d4:	74747562 	.word	0x74747562
   196d8:	73206e6f 	.word	0x73206e6f
   196dc:	65746174 	.word	0x65746174
   196e0:	00000000 	.word	0x00000000
   196e4:	61766e49 	.word	0x61766e49
   196e8:	2064696c 	.word	0x2064696c
   196ec:	2064656c 	.word	0x2064656c
   196f0:	00006469 	.word	0x00006469
   196f4:	61766e49 	.word	0x61766e49
   196f8:	2064696c 	.word	0x2064696c
   196fc:	75706e69 	.word	0x75706e69
   19700:	6f702074 	.word	0x6f702074
   19704:	65746e69 	.word	0x65746e69
   19708:	00000072 	.word	0x00000072
   1970c:	61766e49 	.word	0x61766e49
   19710:	2064696c 	.word	0x2064696c
   19714:	7a7a7562 	.word	0x7a7a7562
   19718:	74207265 	.word	0x74207265
   1971c:	00656e6f 	.word	0x00656e6f
   19720:	6f727245 	.word	0x6f727245
   19724:	45203a72 	.word	0x45203a72
   19728:	726f7272 	.word	0x726f7272
   1972c:	206e6920 	.word	0x206e6920
   19730:	69207325 	.word	0x69207325
   19734:	7566206e 	.word	0x7566206e
   19738:	6974636e 	.word	0x6974636e
   1973c:	25206e6f 	.word	0x25206e6f
   19740:	69772073 	.word	0x69772073
   19744:	74206874 	.word	0x74206874
   19748:	69206568 	.word	0x69206568
   1974c:	6174736e 	.word	0x6174736e
   19750:	2065636e 	.word	0x2065636e
   19754:	202c6425 	.word	0x202c6425
   19758:	000a7325 	.word	0x000a7325
   1975c:	20746f50 	.word	0x20746f50
   19760:	65722031 	.word	0x65722031
   19764:	74736973 	.word	0x74736973
   19768:	65636e61 	.word	0x65636e61
   1976c:	6c617620 	.word	0x6c617620
   19770:	69206575 	.word	0x69206575
   19774:	686f206e 	.word	0x686f206e
   19778:	203a736d 	.word	0x203a736d
   1977c:	000a6425 	.word	0x000a6425
   19780:	20746f50 	.word	0x20746f50
   19784:	65722032 	.word	0x65722032
   19788:	74736973 	.word	0x74736973
   1978c:	65636e61 	.word	0x65636e61
   19790:	6c617620 	.word	0x6c617620
   19794:	69206575 	.word	0x69206575
   19798:	686f206e 	.word	0x686f206e
   1979c:	203a736d 	.word	0x203a736d
   197a0:	000a6425 	.word	0x000a6425
   197a4:	20746f50 	.word	0x20746f50
   197a8:	65722031 	.word	0x65722031
   197ac:	74736973 	.word	0x74736973
   197b0:	65636e61 	.word	0x65636e61
   197b4:	6c617620 	.word	0x6c617620
   197b8:	69206575 	.word	0x69206575
   197bc:	686f206e 	.word	0x686f206e
   197c0:	203a736d 	.word	0x203a736d
   197c4:	202c6425 	.word	0x202c6425
   197c8:	20746f50 	.word	0x20746f50
   197cc:	65722032 	.word	0x65722032
   197d0:	74736973 	.word	0x74736973
   197d4:	65636e61 	.word	0x65636e61
   197d8:	6c617620 	.word	0x6c617620
   197dc:	69206575 	.word	0x69206575
   197e0:	686f206e 	.word	0x686f206e
   197e4:	203a736d 	.word	0x203a736d
   197e8:	000a6425 	.word	0x000a6425
   197ec:	6d726554 	.word	0x6d726554
   197f0:	6c616e69 	.word	0x6c616e69
   197f4:	00000000 	.word	0x00000000
   197f8:	4c554e28 	.word	0x4c554e28
   197fc:	0000294c 	.word	0x0000294c

00019800 <Clock_Ip_au8DividerCallbackIndex>:
   19800:	0e0d0c00 06030201 0a070409 000b0805     ................

00019810 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00019820 <Clock_Ip_au8XoscCallbackIndex>:
   19820:	00000100 00000000 00000000 00000000     ................

00019830 <Clock_Ip_au8IrcoscCallbackIndex>:
   19830:	03020100 00000004 00000000 00000000     ................

00019840 <Clock_Ip_au8GateCallbackIndex>:
   19840:	06010200 01040301 00000500 00000000     ................

00019850 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00019860 <Clock_Ip_au8PllCallbackIndex>:
   19860:	00000100 00000000 00000000 00000000     ................

00019870 <Clock_Ip_au8SelectorCallbackIndex>:
   19870:	0a090800 03020109 07060504 00000000     ................

00019880 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00019890 <Clock_Ip_au8CmuCallbackIndex>:
	...

000198a0 <Clock_Ip_au8ClockFeatures>:
	...
   198b0:	01000000 00000000 00000000 00000002     ................
   198c0:	00000000 00000300 00000000 00040000     ................
   198d0:	00000000 05000000 00000000 00000000     ................
   198e0:	00000006 00000000 00000100 00000000     ................
   198f0:	00010000 00000000 04000000 00000000     ................
   19900:	00000000 00000005 00000001 00000401     ................
   19910:	00000200 00050100 00030000 04020000     ................
   19920:	04000000 02000000 00000005 00000005     ................
   19930:	00000403 00000600 00050300 00070000     ................
   19940:	05000000 00000000 00000000 00000006     ................
	...
   19980:	00050000 00000000 06000000 00000100     ................
   19990:	00000000 00030007 00000000 00000000     ................
   199a0:	00000000 00060000 00000000 07000000     ................
   199b0:	00000100 00000000 00030008 00000000     ................
	...
   199c8:	00090000 00000000 0a000000 00000100     ................
   199d8:	00000000 0003000b 00000000 00000000     ................
   199e8:	00000000 000c0000 00000000 0d000000     ................
   199f8:	00000100 00000000 0003000e 00000000     ................
   19a08:	00000800 00000000 00090000 00000000     ................
   19a18:	0a000000 00000000 00000000 0000000b     ................
   19a28:	00000000 00000b01 00000000 000b0200     ................
   19a38:	00000000 0b030000 00000000 00000000     ................
	...
   19a50:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   19a60:	01000000 00000000 00000000 00000007     ................
   19a70:	00007300 00000700 00320000 00090000     .s........2.....
   19a80:	02000000 07000000 00000000 00000021     ............!...
   19a90:	00000009 00000400 00000900 00030000     ................
   19aa0:	00070000 61000000 07000000 00000000     .......a........
   19ab0:	00000024 00000007 00002500 00000700     $........%......
   19ac0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   19ad0:	00000000 00000020 38000004 00003800     .... ......8.8..
   19ae0:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   19af0:	04000000 00260000 00000026 66000004     ......&.&......f
   19b00:	00006600 00000400 00370037 00040000     .f......7.7.....
   19b10:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   19b20:	2e000004 00002e00 00000200 00404040     ............@@@.
   19b30:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   19b40:	0000006b 6c000004 00006c00 00000900     k......l.l......
   19b50:	00010000 00090000 00000000 07000000     ................
   19b60:	00000000 00000036 00000007 00003100     ....6........1..
   19b70:	00000700 00490000 00070000 4a000000     ......I........J
   19b80:	07000000 00000000 0000004b 00000007     ........K.......
   19b90:	00004c00 00000700 004d0000 00070000     .L........M.....
   19ba0:	3d000000 03000000 00000000 00000000     ...=............

00019bb0 <Clock_Ip_au16SelectorEntryHardwareValue>:
   19bb0:	01010a03 01010001 04040002 02000603     ................
   19bc0:	00010810 02020100 00000000 00000007     ................
   19bd0:	00000009 00000000 00000c0e 00000000     ................
	...

00019c08 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   19c08:	00020000 00000300 00000601 00000000     ................
	...

00019c38 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   19c38:	00000700 00000000 02020000 01010303     ................
   19c48:	03020606 00000000 00000000 00000000     ................
	...

00019c68 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   19c68:	00000001 00000000 02020000 01010303     ................
   19c78:	03020606 00000000 00000000 00000000     ................
	...

00019c98 <Clock_Ip_au8DividerValueHardwareValue>:
   19c98:	00020100 00000003 00000004 00000000     ................
   19ca8:	00000005 00000000 00000000 00000000     ................
   19cb8:	00000006 00000000 00000000 00000000     ................
	...
   19cd8:	00000007                                ....

00019cdc <Clock_Ip_apxScgPeriphAsyncDivs>:
   19cdc:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00019cec <Clock_Ip_aeSourceTypeClockName>:
   19cec:	00000000 00000001 00000001 00000001     ................
   19cfc:	00000001 00000001 00000001 00000001     ................
   19d0c:	00000002 00000003 00000001 00000001     ................
   19d1c:	00000001 00000001 00000002 00000002     ................
   19d2c:	00000003 00000003 00000001 00000001     ................
   19d3c:	00000004 00000004 00000004 00000004     ................
	...

00019da8 <Clock_Ip_aeHwPllName>:
   19da8:	00000009                                ....

00019dac <Clock_Ip_aeHwDfsName>:
   19dac:	00000057                                W...

00019db0 <Clock_Ip_axDividerCallbacks>:
   19db0:	00003ab5 00003abf 00003ad9 00003af3     .:...:...:...:..
   19dc0:	00003b0d 00003b27 00003b41 00003b5b     .;..';..A;..[;..
   19dd0:	00003b75 00003b8f 00003ba9 00003bc3     u;...;...;...;..
   19de0:	00003bdd 00003bf7 00003c11              .;...;...<..

00019dec <Clock_Ip_axDividerTriggerCallbacks>:
   19dec:	00003f85 00003f85                       .?...?..

00019df4 <Clock_Ip_axExtOscCallbacks>:
   19df4:	00003f91 00003f91 00003f91 00003f9b     .?...?...?...?..
   19e04:	00003f91 00003fa5 00003fbf 00003fd9     .?...?...?...?..
   19e14:	0000405d 00004071                       ]@..q@..

00019e1c <Clock_Ip_axFracDivCallbacks>:
   19e1c:	00004231 00004231 0000423b              1B..1B..;B..

00019e28 <Clock_Ip_axGateCallbacks>:
   19e28:	00004255 0000425f 0000435f 00004379     UB.._B.._C..yC..
   19e38:	0000430f 00004329 000042bf 000042d9     .C..)C...B...B..
   19e48:	0000426f 00004289 000043af 000043c9     oB...B...C...C..
   19e58:	000043ff 00004419                       .C...D..

00019e60 <Clock_Ip_axIntOscCallbacks>:
   19e60:	000045c5 000045c5 000045cf 000045d9     .E...E...E...E..
   19e70:	000045f3 0000460d 00004621 0000463b     .E...F..!F..;F..
   19e80:	00004655 00004669 00004683 0000469d     UF..iF...F...F..
   19e90:	00004745 0000475f 00004779              EG.._G..yG..

00019e9c <Clock_Ip_axCmuCallbacks>:
   19e9c:	00004d15 00004d1f 00004d2b 00004d15     .M...M..+M...M..

00019eac <Clock_Ip_axPllCallbacks>:
   19eac:	00004d35 00004d35 00004d3f 00004d35     5M..5M..?M..5M..
   19ebc:	00004d4b 00004d55 00004d6f 00004d89     KM..UM..oM...M..
   19ecc:	00004e2d 00004e19                       -N...N..

00019ed4 <Clock_Ip_axPcfsCallbacks>:
   19ed4:	00004f89                                .O..

00019ed8 <Clock_Ip_axSelectorCallbacks>:
   19ed8:	00004f95 00004f95 00004f9f 00004fb9     .O...O...O...O..
   19ee8:	00004f95 00004fd3 00004fed 00005007     .O...O...O...P..
   19ef8:	00005021 0000503b 00005055 0000506f     !P..;P..UP..oP..
   19f08:	00005089 000050a3 000050bd 000050d7     .P...P...P...P..
   19f18:	000050f1 0000510b 00005125 0000513f     .P...Q..%Q..?Q..
   19f28:	00005159 00005173                       YQ..sQ..

00019f30 <ClockSource>:
   19f30:	00000000 00000008 00000002 00000005     ................
	...
   19f48:	00000009                                ....

00019f4c <ResetReasonArray>:
   19f4c:	00000000 00000001 00000002 00000003     ................
   19f5c:	00000004 00000005 00000006 00000007     ................
   19f6c:	00000008 00000009 0000000a 0000000b     ................
   19f7c:	0000000c 0000000d 0000000e              ............

00019f88 <Port_au32PortCiPortBaseAddr>:
   19f88:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   19f98:	4004d000                                ...@

00019f9c <Port_au32PortCiGpioBaseAddr>:
   19f9c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   19fac:	400ff100                                ...@

00019fb0 <Adc_Ip_apxBase>:
   19fb0:	4003b000 40027000                       ...@.p.@

00019fb8 <Pdb_Adc_Ip_apxBase>:
   19fb8:	40036000 40031000                       .`.@...@

00019fc0 <Ftm_Pwm_Ip_aFtmBase>:
   19fc0:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

00019fd0 <Queue_Config>:
   19fd0:	00000002 00000001 1fff8b70              ........p...

00019fdc <Task_Config>:
   19fdc:	00000032 00000001 00000dad 00000064     2...........d...
   19fec:	00000001 00000db9                       ........

00019ff4 <Timer_Config>:
   19ff4:	00000064 00000000 00000fc5              d...........

0001a000 <Scheduler_Config>:
   1a000:	0000000a 00000002 00019fdc 00000001     ................
   1a010:	00019ff4 00000001 00019fd0              ............

0001a01c <ButtonsCfg>:
   1a01c:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   1a02c:	0000000c 0000012c                       ....,...

0001a034 <LedsCfg>:
   1a034:	00010048 00010049 0001004a              H...I...J...

0001a040 <AdcIpChansConfig_0>:
   1a040:	00000000 00000005 00000000 00000001     ................
   1a050:	00000008 00000000                       ........

0001a058 <AdcIpChansConfig_1>:
   1a058:	00000000 0000000f 00000000 00000001     ................
   1a068:	00000008 00000000                       ........

0001a070 <AdcIpConfig_0>:
   1a070:	00000000 00000003 00000000 0000000c     ................
   1a080:	00000000 00000001 00000001 00000000     ................
	...
   1a098:	00ff0000 00000000 00000000 0001a040     ............@...
   1a0a8:	0000ca1d                                ....

0001a0ac <AdcIpConfig_1>:
   1a0ac:	00000000 00000003 00000000 0000000c     ................
   1a0bc:	00000000 00000001 00000001 00000000     ................
	...
   1a0d4:	00ff0000 00000000 00000000 0001a058     ............X...
   1a0e4:	0000ca3f                                ?...

0001a0e8 <AdcIpwCfg>:
   1a0e8:	0001a070 0001a0ac 0001a948 0001a968     p.......H...h...
   1a0f8:	01010100 00010001 00020002 0101ffff     ................
   1a108:	00000100                                ....

0001a10c <AdcIpwGroupConfig_0>:
   1a10c:	00000001 00000000 000000c8 00010000     ................
   1a11c:	00000000                                ....

0001a120 <AdcIpwGroupConfig_1>:
   1a120:	00000001 00000000 000000c8 00010000     ................
   1a130:	00000000                                ....

0001a134 <Adc_Group0_Assignment_0>:
   1a134:	00010000                                ....

0001a138 <Adc_Group1_Assignment_1>:
   1a138:	00010000                                ....

0001a13c <Adc_GroupsCfg>:
	...
   1a158:	00000001 0001a134 00080002 00000005     ....4...........
   1a168:	00000000 0001a10c 00010001 00000000     ................
	...
   1a18c:	00000001 0001a138 000f0002 00000008     ....8...........
   1a19c:	00000000 0001a120                       .... ...

0001a1a4 <Adc_au16GroupIdToIndexMap>:
   1a1a4:	00010000                                ....

0001a1a8 <Adc_Partition_Assignment>:
   1a1a8:	00000000                                ....

0001a1ac <Adc_Config>:
   1a1ac:	0001a0e8 0001a13c 00000002 0001a1a4     ....<...........
   1a1bc:	00000000 0001a1a8 00000001              ............

0001a1c8 <Mcu_aClockConfigPB>:
	...
   1a1d0:	14000002 0400000e 01000020 00000002     ........ .......
   1a1e0:	01000001 00000001 00000005 00000001     ................
   1a1f0:	00000000 00000057 00000000 00000000     ....W...........
	...
   1a208:	00000057 00000000 00000057 00000000     W.......W.......
	...
   1a230:	00000019 00000005 0000001a 00000002     ................
   1a240:	0000001b 00000005 0000002a 00000002     ........*.......
   1a250:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   1a260:	00000041 00000000 00000042 00000000     A.......B.......
   1a270:	00000031 0000000b 00000045 00000000     1.......E.......
   1a280:	00000046 00000000 00000047 00000000     F.......G.......
   1a290:	00000044 00000000 00000030 0000000b     D.......0.......
   1a2a0:	0000003d 00000000 00000043 00000000     =.......C.......
   1a2b0:	00000049 00000000 0000004a 00000000     I.......J.......
   1a2c0:	0000004b 00000000 00000048 00000000     K.......H.......
   1a2d0:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a2e0:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a2f0:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a300:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a310:	0000000a 00000001 00000000 0000000b     ................
   1a320:	00000001 00000000 0000000c 00000001     ................
   1a330:	00000000 0000000d 00000002 00000000     ................
   1a340:	0000001d 00000001 00000000 0000001e     ................
   1a350:	00000002 00000000 0000001f 00000001     ................
   1a360:	00000000 00000021 00000001 00000000     ....!...........
   1a370:	00000022 00000002 00000000 00000023     "...........#...
   1a380:	00000001 00000000 00000025 00000002     ........%.......
   1a390:	00000000 00000026 00000004 00000000     ....&...........
   1a3a0:	00000027 00000002 00000000 00000048     '...........H...
   1a3b0:	00000001 00000001 00000057 00000000     ........W.......
   1a3c0:	00000000 00000057 00000000 00000000     ....W...........
   1a3d0:	00000057 00000000 00000000 00000057     W...........W...
	...
   1a3e8:	00000057 00000000 00000000 00000057     W...........W...
	...
   1a400:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   1a41c:	00000014 00007d00 00000015 00007d00     .....}.......}..
   1a42c:	00000016 00007d00 00000017 00008000     .....}..........
   1a43c:	00000030 00000001 00000031 00000001     0.......1.......
   1a44c:	00000033 00000000 00000034 00000000     3.......4.......
   1a45c:	00000036 00000000 00000039 00000000     6.......9.......
   1a46c:	0000003a 00000000 0000003b 00000000     :.......;.......
   1a47c:	0000003c 00000000 0000003d 00000000     <.......=.......
   1a48c:	0000003e 00000000 0000003f 00000000     >.......?.......
   1a49c:	00000040 00000001 00000041 00000000     @.......A.......
   1a4ac:	00000042 00000000 00000043 00000000     B.......C.......
   1a4bc:	00000044 00000000 00000045 00000000     D.......E.......
   1a4cc:	00000046 00000000 00000047 00000000     F.......G.......
   1a4dc:	00000048 00000000 00000049 00000000     H.......I.......
   1a4ec:	0000004a 00000000 0000004b 00000000     J.......K.......
   1a4fc:	0000004e 00000001 0000004f 00000001     N.......O.......
   1a50c:	00000050 00000001 00000051 00000001     P.......Q.......
   1a51c:	00000052 00000001 00000053 00000001     R.......S.......
   1a52c:	00000054 00000001 00000055 00000000     T.......U.......
   1a53c:	00000057 00000000 00000057 00000000     W.......W.......
   1a54c:	00000057 00000000 00000057 00000000     W.......W.......
   1a55c:	00000057 00000000 00000057 00000000     W.......W.......
   1a56c:	00000057 00000000 00000057 00000000     W.......W.......
   1a57c:	00000057 00000000 00000057 00000000     W.......W.......
   1a58c:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0001a5c0 <Dio_au32ChannelToPartitionMap>:
   1a5c0:	00000001 00000001 00000001 00000001     ................
   1a5d0:	00000001 00000001 00000001 00000001     ................
   1a5e0:	00000001 00000001 00000001 00000001     ................
   1a5f0:	00000001 00000001 00000001 00000001     ................
   1a600:	00000001 00000001 00000001 00000001     ................
   1a610:	00000001 00000001 00000001 00000001     ................
   1a620:	00000001 00000001 00000001 00000001     ................
   1a630:	00000001 00000001 00000001 00000001     ................
   1a640:	00000001 00000001 00000001 00000001     ................
   1a650:	00000001 00000001 00000001 00000001     ................
   1a660:	00000001 00000001 00000001 00000001     ................
   1a670:	00000001 00000001 00000001 00000001     ................
   1a680:	00000001 00000001 00000001 00000001     ................
   1a690:	00000001 00000001 00000001 00000001     ................
   1a6a0:	00000001 00000001 00000001 00000001     ................
   1a6b0:	00000001 00000001 00000001 00000001     ................
   1a6c0:	00000001 00000001 00000001 00000001     ................
   1a6d0:	00000001 00000001 00000001 00000001     ................
   1a6e0:	00000001 00000001 00000001 00000001     ................
   1a6f0:	00000001 00000001 00000001 00000001     ................
   1a700:	00000001 00000001 00000001 00000001     ................
   1a710:	00000001 00000001 00000001 00000001     ................
   1a720:	00000001 00000001 00000001 00000001     ................
   1a730:	00000001 00000001 00000001 00000001     ................
   1a740:	00000001 00000001 00000001 00000001     ................
   1a750:	00000001 00000001 00000001 00000001     ................
   1a760:	00000001 00000001 00000001 00000001     ................
   1a770:	00000001 00000001 00000001 00000001     ................
   1a780:	00000001 00000001 00000001 00000001     ................
   1a790:	00000001 00000001 00000001 00000001     ................
   1a7a0:	00000001 00000001 00000001 00000001     ................
   1a7b0:	00000001 00000001 00000001 00000001     ................
   1a7c0:	00000001 00000001 00000001 00000001     ................
   1a7d0:	00000001 00000001 00000001 00000001     ................
   1a7e0:	00000001 00000001 00000001 00000001     ................
   1a7f0:	00000001 00000001 00000001 00000001     ................
   1a800:	00000001                                ....

0001a804 <Dio_au32PortToPartitionMap>:
   1a804:	00000001 00000001 00000001 00000001     ................
   1a814:	00000001                                ....

0001a818 <Dio_aAvailablePinsForWrite>:
   1a818:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a828:	0001ffff                                ....

0001a82c <Dio_aAvailablePinsForRead>:
   1a82c:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a83c:	0001ffff                                ....

0001a840 <Dio_Config>:
	...
   1a848:	0001a5c0 0001a804                       ........

0001a850 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   1a86c:	00000003 00000003                       ........

0001a874 <Ftm_Pwm_Ip_InstCfg1>:
   1a874:	00000003 00000000 00000000 00000000     ................
	...
   1a8a8:	000014d5 00000001 00000000 00000000     ................
   1a8b8:	00000000 0001a850                       ....P...

0001a8c0 <Ftm_Pwm_Ip_I1_Ch7>:
   1a8c0:	00000007 0000000a 00000000 00000000     ................
   1a8d0:	00000000 00000001 00000000 00000000     ................
	...

0001a8e8 <Ftm_Pwm_Ip_I1_ChArray>:
   1a8e8:	0001a8c0                                ....

0001a8ec <Ftm_Pwm_Ip_UserCfg1>:
   1a8ec:	0001a874 0001a8e8 00000001 00000000     t...............
   1a8fc:	00000000                                ....

0001a900 <aIrqConfiguration>:
   1a900:	00000027 00000001 0000b361 00000028     '.......a...(...
   1a910:	00000001 0000b371                       ....q...

0001a918 <intCtrlConfig>:
   1a918:	00000002 0001a900                       ........

0001a920 <Mcu_Config>:
   1a920:	0000005a 00000000 00000001 00000001     Z...............
   1a930:	0001ae0c 0001a1c8 0001ae18              ............

0001a93c <OsIf_xPredefinedConfig>:
   1a93c:	00000000 02dc6c00                       .....l..

0001a944 <OsIf_apxPredefinedConfig>:
   1a944:	0001a93c                                <...

0001a948 <PdbAdcIpConfig_0>:
	...
   1a954:	0000000f ffff0000 00000000 00000000     ................
   1a964:	00000000                                ....

0001a968 <PdbAdcIpConfig_1>:
	...
   1a974:	0000000f ffff0000 00000000 00000000     ................
   1a984:	00000000                                ....

0001a988 <Platform_uConfiguration>:
   1a988:	0001a990                                ....

0001a98c <Platform_Config>:
   1a98c:	0001a988                                ....

0001a990 <ipwConfig>:
   1a990:	0001a918 00000000                       ........

0001a998 <Port_au16PinDescription>:
   1a998:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a9a8:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   1a9b8:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   1a9c8:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   1a9d8:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   1a9e8:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   1a9f8:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   1aa08:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   1aa18:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   1aa28:	00000000 00000030 0000600b 00018c38     ....0....`..8...

0001aa38 <g_pin_mux_InitConfigArr>:
   1aa38:	4004b000 400ff080 00000008 00000002     ...@...@........
   1aa48:	00000001 00000002 00000000 00000000     ................
	...
   1aa60:	4004b000 400ff080 00000009 00000002     ...@...@........
   1aa70:	00000001 00000002 00000000 00000000     ................
	...
   1aa88:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1aa98:	00000001 00000002 00000000 00000000     ................
	...
   1aab0:	4004b000 400ff080 0000000b 00000002     ...@...@........
   1aac0:	00000001 00000002 00000000 00000000     ................
	...
   1aad8:	4004b000 400ff080 0000000d 00000002     ...@...@........
   1aae8:	00000001 00000002 00000000 00000000     ................
	...
   1ab00:	4004b000 400ff080 0000000e 00000002     ...@...@........
   1ab10:	00000001 00000002 00000000 00000000     ................
	...
   1ab28:	4004d000 400ff100 0000000c 00000002     ...@...@........
   1ab38:	00000001 00000001 00000000 00000000     ................
	...
   1ab50:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   1ab60:	00000001 00000001 00000000 00000000     ................
	...
   1ab78:	40049000 400ff000 0000000c 00000002     ...@...@........
   1ab88:	00000001 00000001 00000000 00000000     ................
	...
   1aba0:	40049000 00000000 0000000d 00000002     ...@............
   1abb0:	00000002 00000002 00000000 00000000     ................
	...
   1abc8:	4004a000 00000000 00000001 00000002     ...@............
   1abd8:	00000000 00000001 00000000 00000000     ................
	...
   1abf0:	4004a000 00000000 0000000d 00000002     ...@............
   1ac00:	00000000 00000001 00000000 00000000     ................
	...

0001ac18 <au8Port_PartitionList>:
   1ac18:	00000001                                ....

0001ac1c <au32Port_PinToPartitionMap>:
   1ac1c:	00000001 00000001 00000001 00000001     ................
   1ac2c:	00000001 00000001 00000001 00000001     ................
   1ac3c:	00000001 00000001 00000001 00000001     ................

0001ac4c <Port_au16NoUnUsedPadsArrayDefault>:
   1ac4c:	00010000 00030002 00070006 00090008     ................
   1ac5c:	000e000b 0010000f 00200011 00230022     .......... .".#.
   1ac6c:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   1ac7c:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   1ac8c:	00460043 004c0047 0050004f 00600051     C.F.G.L.O.P.Q.`.
   1ac9c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1acac:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1acbc:	00810080 00830082 00850084 00870086     ................
   1accc:	00890088 008b008a 008e008d 0090008f     ................

0001acdc <Port_UnUsedPin>:
   1acdc:	00000000 00000001 00000000              ............

0001ace8 <Port_aPinConfigDefault>:
   1ace8:	00000048 00000100 00000000 00000002     H...............
   1acf8:	00010001 00000049 00000100 00000000     ....I...........
   1ad08:	00000002 00010101 0000004a 00000100     ........J.......
   1ad18:	00000000 00000002 00010101 0000008c     ................
   1ad28:	00000100 00000000 00000001 00010101     ................
   1ad38:	0000004b 00000100 00000000 00000002     K...............
   1ad48:	00010101 0000004d 00000100 00000000     ....M...........
   1ad58:	00000002 00010101 0000004e 00000100     ........N.......
   1ad68:	00000000 00000002 00010101 00000071     ............q...
   1ad78:	00000100 00000000 00000001 00010101     ................
   1ad88:	0000000c 00000100 00000000 00000001     ................
   1ad98:	00010101 00000021 00000000 00000002     ....!...........
   1ada8:	00000000 00010000 0000002d 00000000     ........-.......
   1adb8:	00000002 00000000 00010000 0000000d     ................
   1adc8:	00000200 00000000 00000002 00010000     ................

0001add8 <Port_Config>:
   1add8:	0048000c 0001ac4c 0001acdc 0001ace8     ..H.L...........
	...
   1adf0:	0001ac1c 0001ac18 0001aa38              ........8...

0001adfc <Power_Ip_RCM_ConfigPB>:
	...

0001ae04 <Power_Ip_PMC_ConfigPB>:
   1ae04:	00000000                                ....

0001ae08 <Power_Ip_SMC_ConfigPB>:
   1ae08:	00000000                                ....

0001ae0c <Power_Ip_aModeConfigPB>:
	...

0001ae18 <Power_Ip_HwIPsConfigPB>:
   1ae18:	0001adfc 0001ae04 0001ae08              ............

0001ae24 <Pwm_Channels_PB>:
	...
   1ae2c:	00000001 0001a8c0 00000001 00000001     ................

0001ae3c <Pwm_Instances_PB>:
   1ae3c:	00000001 00000001 0001a8ec              ............

0001ae48 <Pwm_Config>:
   1ae48:	00000001 0001ae24 00000001 0001ae3c     ....$.......<...

0001ae58 <_aInitStr.0>:
   1ae58:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1ae68:	00000000                                ....

0001ae6c <_aV2C.0>:
   1ae6c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001ae7c <__INIT_TABLE>:
   1ae7c:	00000002 	.word	0x00000002
   1ae80:	1fff8b10 	.word	0x1fff8b10
   1ae84:	0001aea4 	.word	0x0001aea4
   1ae88:	0001af00 	.word	0x0001af00
   1ae8c:	1fff8800 	.word	0x1fff8800
   1ae90:	00000000 	.word	0x00000000
   1ae94:	00000310 	.word	0x00000310

0001ae98 <__ZERO_TABLE>:
   1ae98:	00000001 	.word	0x00000001
   1ae9c:	1fff8b70 	.word	0x1fff8b70
   1aea0:	1fff9cb0 	.word	0x1fff9cb0
