
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001493 	.word	0x00001493
  10:	00001495 	.word	0x00001495
  14:	00001497 	.word	0x00001497
  18:	00001499 	.word	0x00001499
	...
  2c:	0000149b 	.word	0x0000149b
  30:	0000149d 	.word	0x0000149d
  34:	00000000 	.word	0x00000000
  38:	0000149f 	.word	0x0000149f
  3c:	000014a1 	.word	0x000014a1
  40:	000014a3 	.word	0x000014a3
  44:	000014a3 	.word	0x000014a3
  48:	000014a3 	.word	0x000014a3
  4c:	000014a3 	.word	0x000014a3
  50:	000014a3 	.word	0x000014a3
  54:	000014a3 	.word	0x000014a3
  58:	000014a3 	.word	0x000014a3
  5c:	000014a3 	.word	0x000014a3
  60:	000014a3 	.word	0x000014a3
  64:	000014a3 	.word	0x000014a3
  68:	000014a3 	.word	0x000014a3
  6c:	000014a3 	.word	0x000014a3
  70:	000014a3 	.word	0x000014a3
  74:	000014a3 	.word	0x000014a3
  78:	000014a3 	.word	0x000014a3
  7c:	000014a3 	.word	0x000014a3
  80:	000014a3 	.word	0x000014a3
  84:	000014a3 	.word	0x000014a3
  88:	000014a3 	.word	0x000014a3
  8c:	000014a3 	.word	0x000014a3
  90:	000014a3 	.word	0x000014a3
  94:	000014a3 	.word	0x000014a3
  98:	000014a3 	.word	0x000014a3
  9c:	000014a3 	.word	0x000014a3
  a0:	000014a3 	.word	0x000014a3
  a4:	000014a3 	.word	0x000014a3
  a8:	000014a3 	.word	0x000014a3
  ac:	000014a3 	.word	0x000014a3
  b0:	000014a3 	.word	0x000014a3
  b4:	000014a3 	.word	0x000014a3
  b8:	000014a3 	.word	0x000014a3
  bc:	000014a3 	.word	0x000014a3
  c0:	000014a3 	.word	0x000014a3
  c4:	000014a3 	.word	0x000014a3
  c8:	000014a3 	.word	0x000014a3
  cc:	000014a3 	.word	0x000014a3
  d0:	000014a3 	.word	0x000014a3
  d4:	000014a3 	.word	0x000014a3
  d8:	000014a3 	.word	0x000014a3
  dc:	000014a3 	.word	0x000014a3
  e0:	000014a3 	.word	0x000014a3
  e4:	000014a3 	.word	0x000014a3
  e8:	000014a3 	.word	0x000014a3
  ec:	000014a3 	.word	0x000014a3
  f0:	000014a3 	.word	0x000014a3
  f4:	000014a3 	.word	0x000014a3
  f8:	000014a3 	.word	0x000014a3
  fc:	000014a3 	.word	0x000014a3
 100:	000014a3 	.word	0x000014a3
 104:	000014a3 	.word	0x000014a3
 108:	000014a3 	.word	0x000014a3
 10c:	000014a3 	.word	0x000014a3
 110:	000014a3 	.word	0x000014a3
 114:	000014a3 	.word	0x000014a3
 118:	000014a3 	.word	0x000014a3
 11c:	000014a3 	.word	0x000014a3
 120:	000014a3 	.word	0x000014a3
 124:	000014a3 	.word	0x000014a3
 128:	000014a3 	.word	0x000014a3
 12c:	000014a3 	.word	0x000014a3
 130:	000014a3 	.word	0x000014a3
 134:	000014a3 	.word	0x000014a3
 138:	000014a3 	.word	0x000014a3
 13c:	000014a3 	.word	0x000014a3
 140:	000014a3 	.word	0x000014a3
 144:	000014a3 	.word	0x000014a3
 148:	000014a3 	.word	0x000014a3
 14c:	000014a3 	.word	0x000014a3
 150:	000014a3 	.word	0x000014a3
 154:	000014a3 	.word	0x000014a3
 158:	000014a3 	.word	0x000014a3
 15c:	000014a3 	.word	0x000014a3
 160:	000014a3 	.word	0x000014a3
 164:	000014a3 	.word	0x000014a3
 168:	000014a3 	.word	0x000014a3
 16c:	000014a3 	.word	0x000014a3
 170:	000014a3 	.word	0x000014a3
 174:	000014a3 	.word	0x000014a3
 178:	000014a3 	.word	0x000014a3
 17c:	000014a3 	.word	0x000014a3
 180:	000014a3 	.word	0x000014a3
 184:	000014a3 	.word	0x000014a3
 188:	000014a3 	.word	0x000014a3
 18c:	000014a3 	.word	0x000014a3
 190:	000014a3 	.word	0x000014a3
 194:	000014a3 	.word	0x000014a3
 198:	000014a3 	.word	0x000014a3
 19c:	000014a3 	.word	0x000014a3
 1a0:	000014a3 	.word	0x000014a3
 1a4:	000014a3 	.word	0x000014a3
 1a8:	000014a3 	.word	0x000014a3
 1ac:	000014a3 	.word	0x000014a3
 1b0:	000014a3 	.word	0x000014a3
 1b4:	000014a3 	.word	0x000014a3
 1b8:	000014a3 	.word	0x000014a3
 1bc:	000014a3 	.word	0x000014a3
 1c0:	000014a3 	.word	0x000014a3
 1c4:	000014a3 	.word	0x000014a3
 1c8:	000014a3 	.word	0x000014a3
 1cc:	000014a3 	.word	0x000014a3
 1d0:	000014a3 	.word	0x000014a3
 1d4:	000014a3 	.word	0x000014a3
 1d8:	000014a3 	.word	0x000014a3
 1dc:	000014a3 	.word	0x000014a3
 1e0:	000014a3 	.word	0x000014a3
 1e4:	000014a3 	.word	0x000014a3
 1e8:	000014a3 	.word	0x000014a3
 1ec:	000014a3 	.word	0x000014a3
 1f0:	000014a3 	.word	0x000014a3
 1f4:	000014a3 	.word	0x000014a3
 1f8:	000014a3 	.word	0x000014a3
 1fc:	000014a3 	.word	0x000014a3
 200:	000014a3 	.word	0x000014a3
 204:	000014a3 	.word	0x000014a3
 208:	000014a3 	.word	0x000014a3
 20c:	000014a3 	.word	0x000014a3
 210:	000014a3 	.word	0x000014a3
 214:	000014a3 	.word	0x000014a3
 218:	000014a3 	.word	0x000014a3
 21c:	000014a3 	.word	0x000014a3
 220:	000014a3 	.word	0x000014a3
 224:	000014a3 	.word	0x000014a3
 228:	000014a3 	.word	0x000014a3
 22c:	000014a3 	.word	0x000014a3
 230:	000014a3 	.word	0x000014a3
 234:	000014a3 	.word	0x000014a3
 238:	000014a3 	.word	0x000014a3
 23c:	000014a3 	.word	0x000014a3
 240:	000014a3 	.word	0x000014a3
 244:	000014a3 	.word	0x000014a3
 248:	000014a3 	.word	0x000014a3
 24c:	000014a3 	.word	0x000014a3
 250:	000014a3 	.word	0x000014a3
 254:	000014a3 	.word	0x000014a3
 258:	000014a3 	.word	0x000014a3
 25c:	000014a3 	.word	0x000014a3
 260:	000014a3 	.word	0x000014a3
 264:	000014a3 	.word	0x000014a3
 268:	000014a3 	.word	0x000014a3
 26c:	000014a3 	.word	0x000014a3
 270:	000014a3 	.word	0x000014a3
 274:	000014a3 	.word	0x000014a3
 278:	000014a3 	.word	0x000014a3
 27c:	000014a3 	.word	0x000014a3
 280:	000014a3 	.word	0x000014a3
 284:	000014a3 	.word	0x000014a3
 288:	000014a3 	.word	0x000014a3
 28c:	000014a3 	.word	0x000014a3
 290:	000014a3 	.word	0x000014a3
 294:	000014a3 	.word	0x000014a3
 298:	000014a3 	.word	0x000014a3
 29c:	000014a3 	.word	0x000014a3
 2a0:	000014a3 	.word	0x000014a3
 2a4:	000014a3 	.word	0x000014a3
 2a8:	000014a3 	.word	0x000014a3
 2ac:	000014a3 	.word	0x000014a3
 2b0:	000014a3 	.word	0x000014a3
 2b4:	000014a3 	.word	0x000014a3
 2b8:	000014a3 	.word	0x000014a3
 2bc:	000014a3 	.word	0x000014a3
 2c0:	000014a3 	.word	0x000014a3
 2c4:	000014a3 	.word	0x000014a3
 2c8:	000014a3 	.word	0x000014a3
 2cc:	000014a3 	.word	0x000014a3
 2d0:	000014a3 	.word	0x000014a3
 2d4:	000014a3 	.word	0x000014a3
 2d8:	000014a3 	.word	0x000014a3
 2dc:	000014a3 	.word	0x000014a3
 2e0:	000014a3 	.word	0x000014a3
 2e4:	000014a3 	.word	0x000014a3
 2e8:	000014a3 	.word	0x000014a3
 2ec:	000014a3 	.word	0x000014a3
 2f0:	000014a3 	.word	0x000014a3
 2f4:	000014a3 	.word	0x000014a3
 2f8:	000014a3 	.word	0x000014a3
 2fc:	000014a3 	.word	0x000014a3
 300:	000014a3 	.word	0x000014a3
 304:	000014a3 	.word	0x000014a3
 308:	000014a3 	.word	0x000014a3
 30c:	000014a3 	.word	0x000014a3

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ff3d 	bl	1300 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fffc 	bl	1488 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97b8 	.word	0x1fff97b8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ff47 	bl	142c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f000 fe05 	bl	14c0 <EcuM_Init>
    HwIoAb_Init();  //Initializing IO hardware abstractions.
     8b6:	f000 fe29 	bl	150c <HwIoAb_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <main+0x18>)
     8bc:	f000 f8d0 	bl	a60 <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8c0:	f000 f98c 	bl	bdc <Scheduler_MainFunction>
     8c4:	e7fc      	b.n	8c0 <main+0x10>
     8c6:	bf00      	nop
     8c8:	1fff974c 	.word	0x1fff974c

000008cc <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     8cc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ce:	f3ef 8310 	mrs	r3, PRIMASK
     8d2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d4:	4623      	mov	r3, r4
}
     8d6:	4618      	mov	r0, r3
     8d8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8dc:	4770      	bx	lr

000008de <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8de:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8e0:	f3ef 8310 	mrs	r3, PRIMASK
     8e4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e6:	4623      	mov	r3, r4
}
     8e8:	4618      	mov	r0, r3
     8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ee:	4770      	bx	lr

000008f0 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8f0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8f2:	f3ef 8310 	mrs	r3, PRIMASK
     8f6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f8:	4623      	mov	r3, r4
}
     8fa:	4618      	mov	r0, r3
     8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
     900:	4770      	bx	lr

00000902 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     902:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     904:	f3ef 8310 	mrs	r3, PRIMASK
     908:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     90a:	4623      	mov	r3, r4
}
     90c:	4618      	mov	r0, r3
     90e:	f85d 4b04 	ldr.w	r4, [sp], #4
     912:	4770      	bx	lr

00000914 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     914:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     916:	f3ef 8310 	mrs	r3, PRIMASK
     91a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     91c:	4623      	mov	r3, r4
}
     91e:	4618      	mov	r0, r3
     920:	f85d 4b04 	ldr.w	r4, [sp], #4
     924:	4770      	bx	lr

00000926 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     926:	b082      	sub	sp, #8
     928:	9001      	str	r0, [sp, #4]
     92a:	460b      	mov	r3, r1
     92c:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     930:	9b01      	ldr	r3, [sp, #4]
     932:	681b      	ldr	r3, [r3, #0]
     934:	f89d 2003 	ldrb.w	r2, [sp, #3]
     938:	2101      	movs	r1, #1
     93a:	fa01 f202 	lsl.w	r2, r1, r2
     93e:	431a      	orrs	r2, r3
     940:	9b01      	ldr	r3, [sp, #4]
     942:	601a      	str	r2, [r3, #0]
}
     944:	bf00      	nop
     946:	b002      	add	sp, #8
     948:	4770      	bx	lr

0000094a <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     94a:	b082      	sub	sp, #8
     94c:	9001      	str	r0, [sp, #4]
     94e:	460b      	mov	r3, r1
     950:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     954:	9b01      	ldr	r3, [sp, #4]
     956:	681b      	ldr	r3, [r3, #0]
     958:	f89d 2003 	ldrb.w	r2, [sp, #3]
     95c:	2101      	movs	r1, #1
     95e:	fa01 f202 	lsl.w	r2, r1, r2
     962:	43d2      	mvns	r2, r2
     964:	401a      	ands	r2, r3
     966:	9b01      	ldr	r3, [sp, #4]
     968:	601a      	str	r2, [r3, #0]
}
     96a:	bf00      	nop
     96c:	b002      	add	sp, #8
     96e:	4770      	bx	lr

00000970 <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     970:	b084      	sub	sp, #16
     972:	9001      	str	r0, [sp, #4]
     974:	460b      	mov	r3, r1
     976:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     97a:	2300      	movs	r3, #0
     97c:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     980:	f89d 3003 	ldrb.w	r3, [sp, #3]
     984:	2201      	movs	r2, #1
     986:	fa02 f303 	lsl.w	r3, r2, r3
     98a:	461a      	mov	r2, r3
     98c:	9b01      	ldr	r3, [sp, #4]
     98e:	4013      	ands	r3, r2
     990:	2b00      	cmp	r3, #0
     992:	bf14      	ite	ne
     994:	2301      	movne	r3, #1
     996:	2300      	moveq	r3, #0
     998:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     99c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9a0:	4618      	mov	r0, r3
     9a2:	b004      	add	sp, #16
     9a4:	4770      	bx	lr

000009a6 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9a6:	b082      	sub	sp, #8
     9a8:	9001      	str	r0, [sp, #4]
     9aa:	460b      	mov	r3, r1
     9ac:	f88d 3003 	strb.w	r3, [sp, #3]
     9b0:	4613      	mov	r3, r2
     9b2:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9b6:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d00a      	beq.n	9d4 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9be:	9b01      	ldr	r3, [sp, #4]
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9c6:	2101      	movs	r1, #1
     9c8:	fa01 f202 	lsl.w	r2, r1, r2
     9cc:	431a      	orrs	r2, r3
     9ce:	9b01      	ldr	r3, [sp, #4]
     9d0:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     9d2:	e00a      	b.n	9ea <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     9d4:	9b01      	ldr	r3, [sp, #4]
     9d6:	681b      	ldr	r3, [r3, #0]
     9d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9dc:	2101      	movs	r1, #1
     9de:	fa01 f202 	lsl.w	r2, r1, r2
     9e2:	43d2      	mvns	r2, r2
     9e4:	401a      	ands	r2, r3
     9e6:	9b01      	ldr	r3, [sp, #4]
     9e8:	601a      	str	r2, [r3, #0]
}
     9ea:	bf00      	nop
     9ec:	b002      	add	sp, #8
     9ee:	4770      	bx	lr

000009f0 <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     9f0:	b500      	push	{lr}
     9f2:	b085      	sub	sp, #20
     9f4:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     9f6:	2300      	movs	r3, #0
     9f8:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     9fc:	2300      	movs	r3, #0
     9fe:	f88d 300f 	strb.w	r3, [sp, #15]
     a02:	e023      	b.n	a4c <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a04:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a08:	9b01      	ldr	r3, [sp, #4]
     a0a:	3208      	adds	r2, #8
     a0c:	2100      	movs	r1, #0
     a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a12:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a16:	9a01      	ldr	r2, [sp, #4]
     a18:	3308      	adds	r3, #8
     a1a:	009b      	lsls	r3, r3, #2
     a1c:	4413      	add	r3, r2
     a1e:	2200      	movs	r2, #0
     a20:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a22:	9b01      	ldr	r3, [sp, #4]
     a24:	332c      	adds	r3, #44	; 0x2c
     a26:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a2a:	4611      	mov	r1, r2
     a2c:	4618      	mov	r0, r3
     a2e:	f7ff ff8c 	bl	94a <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a32:	9b01      	ldr	r3, [sp, #4]
     a34:	3328      	adds	r3, #40	; 0x28
     a36:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a3a:	4611      	mov	r1, r2
     a3c:	4618      	mov	r0, r3
     a3e:	f7ff ff72 	bl	926 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a42:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a46:	3301      	adds	r3, #1
     a48:	f88d 300f 	strb.w	r3, [sp, #15]
     a4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a50:	2b00      	cmp	r3, #0
     a52:	d0d7      	beq.n	a04 <Scheduler_InitQueue+0x14>
    }
}
     a54:	bf00      	nop
     a56:	bf00      	nop
     a58:	b005      	add	sp, #20
     a5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a60 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a60:	b500      	push	{lr}
     a62:	b085      	sub	sp, #20
     a64:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     a66:	2301      	movs	r3, #1
     a68:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     a6c:	2300      	movs	r3, #0
     a6e:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     a72:	2300      	movs	r3, #0
     a74:	f88d 300f 	strb.w	r3, [sp, #15]
     a78:	e033      	b.n	ae2 <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     a7a:	4b44      	ldr	r3, [pc, #272]	; (b8c <Scheduler_Init+0x12c>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	6899      	ldr	r1, [r3, #8]
     a80:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a84:	4613      	mov	r3, r2
     a86:	005b      	lsls	r3, r3, #1
     a88:	4413      	add	r3, r2
     a8a:	009b      	lsls	r3, r3, #2
     a8c:	440b      	add	r3, r1
     a8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a92:	6819      	ldr	r1, [r3, #0]
     a94:	9b01      	ldr	r3, [sp, #4]
     a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     a9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a9e:	9b01      	ldr	r3, [sp, #4]
     aa0:	3202      	adds	r2, #2
     aa2:	2100      	movs	r1, #0
     aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     aa8:	9b01      	ldr	r3, [sp, #4]
     aaa:	f103 0018 	add.w	r0, r3, #24
     aae:	4b37      	ldr	r3, [pc, #220]	; (b8c <Scheduler_Init+0x12c>)
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	6899      	ldr	r1, [r3, #8]
     ab4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ab8:	4613      	mov	r3, r2
     aba:	005b      	lsls	r3, r3, #1
     abc:	4413      	add	r3, r2
     abe:	009b      	lsls	r3, r3, #2
     ac0:	440b      	add	r3, r1
     ac2:	791b      	ldrb	r3, [r3, #4]
     ac4:	2b00      	cmp	r3, #0
     ac6:	bf14      	ite	ne
     ac8:	2301      	movne	r3, #1
     aca:	2300      	moveq	r3, #0
     acc:	b2da      	uxtb	r2, r3
     ace:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ad2:	4619      	mov	r1, r3
     ad4:	f7ff ff67 	bl	9a6 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     ad8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     adc:	3301      	adds	r3, #1
     ade:	f88d 300f 	strb.w	r3, [sp, #15]
     ae2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ae6:	2b01      	cmp	r3, #1
     ae8:	d9c7      	bls.n	a7a <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     aea:	2300      	movs	r3, #0
     aec:	f88d 300f 	strb.w	r3, [sp, #15]
     af0:	e03f      	b.n	b72 <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     af2:	4b26      	ldr	r3, [pc, #152]	; (b8c <Scheduler_Init+0x12c>)
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	6919      	ldr	r1, [r3, #16]
     af8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     afc:	4613      	mov	r3, r2
     afe:	005b      	lsls	r3, r3, #1
     b00:	4413      	add	r3, r2
     b02:	009b      	lsls	r3, r3, #2
     b04:	440b      	add	r3, r1
     b06:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b0a:	6819      	ldr	r1, [r3, #0]
     b0c:	9b01      	ldr	r3, [sp, #4]
     b0e:	3204      	adds	r2, #4
     b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b14:	4b1d      	ldr	r3, [pc, #116]	; (b8c <Scheduler_Init+0x12c>)
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	6919      	ldr	r1, [r3, #16]
     b1a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b1e:	4613      	mov	r3, r2
     b20:	005b      	lsls	r3, r3, #1
     b22:	4413      	add	r3, r2
     b24:	009b      	lsls	r3, r3, #2
     b26:	18ca      	adds	r2, r1, r3
     b28:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b2c:	6812      	ldr	r2, [r2, #0]
     b2e:	9901      	ldr	r1, [sp, #4]
     b30:	3304      	adds	r3, #4
     b32:	009b      	lsls	r3, r3, #2
     b34:	440b      	add	r3, r1
     b36:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b38:	9b01      	ldr	r3, [sp, #4]
     b3a:	f103 001c 	add.w	r0, r3, #28
     b3e:	4b13      	ldr	r3, [pc, #76]	; (b8c <Scheduler_Init+0x12c>)
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	6919      	ldr	r1, [r3, #16]
     b44:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b48:	4613      	mov	r3, r2
     b4a:	005b      	lsls	r3, r3, #1
     b4c:	4413      	add	r3, r2
     b4e:	009b      	lsls	r3, r3, #2
     b50:	440b      	add	r3, r1
     b52:	791b      	ldrb	r3, [r3, #4]
     b54:	2b00      	cmp	r3, #0
     b56:	bf14      	ite	ne
     b58:	2301      	movne	r3, #1
     b5a:	2300      	moveq	r3, #0
     b5c:	b2da      	uxtb	r2, r3
     b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b62:	4619      	mov	r1, r3
     b64:	f7ff ff1f 	bl	9a6 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b6c:	3301      	adds	r3, #1
     b6e:	f88d 300f 	strb.w	r3, [sp, #15]
     b72:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b76:	2b00      	cmp	r3, #0
     b78:	d0bb      	beq.n	af2 <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     b7a:	9801      	ldr	r0, [sp, #4]
     b7c:	f7ff ff38 	bl	9f0 <Scheduler_InitQueue>

    return status;
     b80:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     b84:	4618      	mov	r0, r3
     b86:	b005      	add	sp, #20
     b88:	f85d fb04 	ldr.w	pc, [sp], #4
     b8c:	1fff8b4c 	.word	0x1fff8b4c

00000b90 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     b90:	b084      	sub	sp, #16
     b92:	4603      	mov	r3, r0
     b94:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     b98:	2300      	movs	r3, #0
     b9a:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     b9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba0:	2b00      	cmp	r3, #0
     ba2:	d011      	beq.n	bc8 <Scheduler_GetTimer+0x38>
     ba4:	4b0b      	ldr	r3, [pc, #44]	; (bd4 <Scheduler_GetTimer+0x44>)
     ba6:	681b      	ldr	r3, [r3, #0]
     ba8:	7b1b      	ldrb	r3, [r3, #12]
     baa:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bae:	429a      	cmp	r2, r3
     bb0:	d80a      	bhi.n	bc8 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     bb2:	4b09      	ldr	r3, [pc, #36]	; (bd8 <Scheduler_GetTimer+0x48>)
     bb4:	681a      	ldr	r2, [r3, #0]
     bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bba:	3b01      	subs	r3, #1
     bbc:	3304      	adds	r3, #4
     bbe:	009b      	lsls	r3, r3, #2
     bc0:	4413      	add	r3, r2
     bc2:	685b      	ldr	r3, [r3, #4]
     bc4:	9303      	str	r3, [sp, #12]
     bc6:	e001      	b.n	bcc <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     bc8:	2300      	movs	r3, #0
     bca:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     bcc:	9b03      	ldr	r3, [sp, #12]
}
     bce:	4618      	mov	r0, r3
     bd0:	b004      	add	sp, #16
     bd2:	4770      	bx	lr
     bd4:	1fff8b4c 	.word	0x1fff8b4c
     bd8:	1fff8b50 	.word	0x1fff8b50

00000bdc <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     bdc:	b500      	push	{lr}
     bde:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     be0:	4b5e      	ldr	r3, [pc, #376]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bea:	fb02 f303 	mul.w	r3, r2, r3
     bee:	2101      	movs	r1, #1
     bf0:	4618      	mov	r0, r3
     bf2:	f000 ff7b 	bl	1aec <OsIf_MicrosToTicks>
     bf6:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     bf8:	2001      	movs	r0, #1
     bfa:	f000 ff2b 	bl	1a54 <OsIf_GetCounter>
     bfe:	4603      	mov	r3, r0
     c00:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     c02:	2300      	movs	r3, #0
     c04:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     c06:	2300      	movs	r3, #0
     c08:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     c0c:	466b      	mov	r3, sp
     c0e:	2101      	movs	r1, #1
     c10:	4618      	mov	r0, r3
     c12:	f000 ff38 	bl	1a86 <OsIf_GetElapsed>
     c16:	4602      	mov	r2, r0
     c18:	9b03      	ldr	r3, [sp, #12]
     c1a:	4413      	add	r3, r2
     c1c:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c1e:	9a03      	ldr	r2, [sp, #12]
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	429a      	cmp	r2, r3
     c24:	d3f2      	bcc.n	c0c <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c26:	2300      	movs	r3, #0
     c28:	f88d 300b 	strb.w	r3, [sp, #11]
     c2c:	e03a      	b.n	ca4 <__BSS_SRAM_SIZE+0x44>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c2e:	4b4c      	ldr	r3, [pc, #304]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	69db      	ldr	r3, [r3, #28]
     c34:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c38:	4611      	mov	r1, r2
     c3a:	4618      	mov	r0, r3
     c3c:	f7ff fe98 	bl	970 <Bfx_GetBit_u32u8_u8>
     c40:	4603      	mov	r3, r0
     c42:	2b00      	cmp	r3, #0
     c44:	d029      	beq.n	c9a <__BSS_SRAM_SIZE+0x3a>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c46:	4b46      	ldr	r3, [pc, #280]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     c48:	681a      	ldr	r2, [r3, #0]
     c4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c4e:	3304      	adds	r3, #4
     c50:	009b      	lsls	r3, r3, #2
     c52:	4413      	add	r3, r2
     c54:	6858      	ldr	r0, [r3, #4]
     c56:	4b41      	ldr	r3, [pc, #260]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	681a      	ldr	r2, [r3, #0]
     c5c:	4b40      	ldr	r3, [pc, #256]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     c5e:	6819      	ldr	r1, [r3, #0]
     c60:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c64:	1a82      	subs	r2, r0, r2
     c66:	3304      	adds	r3, #4
     c68:	009b      	lsls	r3, r3, #2
     c6a:	440b      	add	r3, r1
     c6c:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     c6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c72:	3301      	adds	r3, #1
     c74:	b2db      	uxtb	r3, r3
     c76:	4618      	mov	r0, r3
     c78:	f7ff ff8a 	bl	b90 <Scheduler_GetTimer>
     c7c:	4603      	mov	r3, r0
     c7e:	2b00      	cmp	r3, #0
     c80:	d10b      	bne.n	c9a <__BSS_SRAM_SIZE+0x3a>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     c82:	4b36      	ldr	r3, [pc, #216]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	6919      	ldr	r1, [r3, #16]
     c88:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c8c:	4613      	mov	r3, r2
     c8e:	005b      	lsls	r3, r3, #1
     c90:	4413      	add	r3, r2
     c92:	009b      	lsls	r3, r3, #2
     c94:	440b      	add	r3, r1
     c96:	689b      	ldr	r3, [r3, #8]
     c98:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c9e:	3301      	adds	r3, #1
     ca0:	f88d 300b 	strb.w	r3, [sp, #11]
     ca4:	4b2d      	ldr	r3, [pc, #180]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	7b1b      	ldrb	r3, [r3, #12]
     caa:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cae:	429a      	cmp	r2, r3
     cb0:	d3bd      	bcc.n	c2e <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     cb2:	2300      	movs	r3, #0
     cb4:	f88d 300b 	strb.w	r3, [sp, #11]
     cb8:	e045      	b.n	d46 <__BSS_SRAM_SIZE+0xe6>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     cba:	4b29      	ldr	r3, [pc, #164]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	699b      	ldr	r3, [r3, #24]
     cc0:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cc4:	4611      	mov	r1, r2
     cc6:	4618      	mov	r0, r3
     cc8:	f7ff fe52 	bl	970 <Bfx_GetBit_u32u8_u8>
     ccc:	4603      	mov	r3, r0
     cce:	2b00      	cmp	r3, #0
     cd0:	d034      	beq.n	d3c <__BSS_SRAM_SIZE+0xdc>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     cd2:	4b23      	ldr	r3, [pc, #140]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cda:	3202      	adds	r2, #2
     cdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     ce0:	4b1e      	ldr	r3, [pc, #120]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	6819      	ldr	r1, [r3, #0]
     ce6:	4b1e      	ldr	r3, [pc, #120]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cee:	4401      	add	r1, r0
     cf0:	3202      	adds	r2, #2
     cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     cf6:	4b1a      	ldr	r3, [pc, #104]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cfe:	3202      	adds	r2, #2
     d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d04:	4b16      	ldr	r3, [pc, #88]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     d06:	681b      	ldr	r3, [r3, #0]
     d08:	f89d 100b 	ldrb.w	r1, [sp, #11]
     d0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     d10:	429a      	cmp	r2, r3
     d12:	d313      	bcc.n	d3c <__BSS_SRAM_SIZE+0xdc>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d14:	4b11      	ldr	r3, [pc, #68]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	6899      	ldr	r1, [r3, #8]
     d1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d1e:	4613      	mov	r3, r2
     d20:	005b      	lsls	r3, r3, #1
     d22:	4413      	add	r3, r2
     d24:	009b      	lsls	r3, r3, #2
     d26:	440b      	add	r3, r1
     d28:	689b      	ldr	r3, [r3, #8]
     d2a:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d2c:	4b0c      	ldr	r3, [pc, #48]	; (d60 <__BSS_SRAM_SIZE+0x100>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d34:	3202      	adds	r2, #2
     d36:	2100      	movs	r1, #0
     d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d40:	3301      	adds	r3, #1
     d42:	f88d 300b 	strb.w	r3, [sp, #11]
     d46:	4b05      	ldr	r3, [pc, #20]	; (d5c <__BSS_SRAM_SIZE+0xfc>)
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	791b      	ldrb	r3, [r3, #4]
     d4c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d50:	429a      	cmp	r2, r3
     d52:	d3b2      	bcc.n	cba <__BSS_SRAM_SIZE+0x5a>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d54:	2300      	movs	r3, #0
     d56:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d58:	e758      	b.n	c0c <Scheduler_MainFunction+0x30>
     d5a:	bf00      	nop
     d5c:	1fff8b4c 	.word	0x1fff8b4c
     d60:	1fff8b50 	.word	0x1fff8b50

00000d64 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     d64:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     d66:	f000 f8f1 	bl	f4c <HwIoAb_Buttons_MainFunction>
}
     d6a:	bf00      	nop
     d6c:	bd08      	pop	{r3, pc}
	...

00000d70 <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click toggle only led1 (PTC9), hold click toggle both leds (PTC8-9).
 * @note Button 2, Single click toggle only led2 (PTC10), double click toggle only led3 (PTC11), hold click toggle both leds (PTC10-11).
 * @note Button 3, Single click toggle only led4 (PTC13), double click toggle only led5 (PTC14), hold click toggle both leds (PTC13-14).
 * 
 */
void Task2_callback( void ) {
     d70:	b500      	push	{lr}
     d72:	b083      	sub	sp, #12
    //local data.
    uint8 i = 0;
     d74:	2300      	movs	r3, #0
     d76:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     d7a:	2300      	movs	r3, #0
     d7c:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     d80:	2300      	movs	r3, #0
     d82:	f88d 3007 	strb.w	r3, [sp, #7]
     d86:	e074      	b.n	e72 <Task2_callback+0x102>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d8c:	3301      	adds	r3, #1
     d8e:	b2db      	uxtb	r3, r3
     d90:	4618      	mov	r0, r3
     d92:	f000 f8b1 	bl	ef8 <HwIoAb_Buttons_GetEvent>
     d96:	4603      	mov	r3, r0
     d98:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     d9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     da0:	2b00      	cmp	r3, #0
     da2:	d05e      	beq.n	e62 <Task2_callback+0xf2>
            switch ( i ) {    
     da4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     da8:	2b02      	cmp	r3, #2
     daa:	d03e      	beq.n	e2a <Task2_callback+0xba>
     dac:	2b02      	cmp	r3, #2
     dae:	dc5a      	bgt.n	e66 <Task2_callback+0xf6>
     db0:	2b00      	cmp	r3, #0
     db2:	d002      	beq.n	dba <Task2_callback+0x4a>
     db4:	2b01      	cmp	r3, #1
     db6:	d01c      	beq.n	df2 <Task2_callback+0x82>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     db8:	e055      	b.n	e66 <Task2_callback+0xf6>
                    switch ( actual_event ) {
     dba:	f89d 3006 	ldrb.w	r3, [sp, #6]
     dbe:	2b03      	cmp	r3, #3
     dc0:	d00e      	beq.n	de0 <Task2_callback+0x70>
     dc2:	2b03      	cmp	r3, #3
     dc4:	dc13      	bgt.n	dee <Task2_callback+0x7e>
     dc6:	2b01      	cmp	r3, #1
     dc8:	d002      	beq.n	dd0 <Task2_callback+0x60>
     dca:	2b02      	cmp	r3, #2
     dcc:	d004      	beq.n	dd8 <Task2_callback+0x68>
                        break;
     dce:	e00e      	b.n	dee <Task2_callback+0x7e>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     dd0:	2000      	movs	r0, #0
     dd2:	f000 fa4b 	bl	126c <HwIoAb_Leds_TurnToggle>
                        break;
     dd6:	e00b      	b.n	df0 <Task2_callback+0x80>
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     dd8:	2001      	movs	r0, #1
     dda:	f000 fa47 	bl	126c <HwIoAb_Leds_TurnToggle>
                        break;
     dde:	e007      	b.n	df0 <Task2_callback+0x80>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     de0:	2000      	movs	r0, #0
     de2:	f000 fa43 	bl	126c <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     de6:	2001      	movs	r0, #1
     de8:	f000 fa40 	bl	126c <HwIoAb_Leds_TurnToggle>
                        break;
     dec:	e000      	b.n	df0 <Task2_callback+0x80>
                        break;
     dee:	bf00      	nop
                break;
     df0:	e03a      	b.n	e68 <Task2_callback+0xf8>
                    switch ( actual_event ) {
     df2:	f89d 3006 	ldrb.w	r3, [sp, #6]
     df6:	2b03      	cmp	r3, #3
     df8:	d00e      	beq.n	e18 <Task2_callback+0xa8>
     dfa:	2b03      	cmp	r3, #3
     dfc:	dc13      	bgt.n	e26 <Task2_callback+0xb6>
     dfe:	2b01      	cmp	r3, #1
     e00:	d002      	beq.n	e08 <Task2_callback+0x98>
     e02:	2b02      	cmp	r3, #2
     e04:	d004      	beq.n	e10 <Task2_callback+0xa0>
                        break;
     e06:	e00e      	b.n	e26 <Task2_callback+0xb6>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     e08:	2002      	movs	r0, #2
     e0a:	f000 fa2f 	bl	126c <HwIoAb_Leds_TurnToggle>
                        break;
     e0e:	e00b      	b.n	e28 <Task2_callback+0xb8>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_3_ID );
     e10:	2003      	movs	r0, #3
     e12:	f000 fa2b 	bl	126c <HwIoAb_Leds_TurnToggle>
                        break;
     e16:	e007      	b.n	e28 <Task2_callback+0xb8>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     e18:	2002      	movs	r0, #2
     e1a:	f000 fa27 	bl	126c <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_3_ID );
     e1e:	2003      	movs	r0, #3
     e20:	f000 fa24 	bl	126c <HwIoAb_Leds_TurnToggle>
                        break;
     e24:	e000      	b.n	e28 <Task2_callback+0xb8>
                        break;
     e26:	bf00      	nop
                break;
     e28:	e01e      	b.n	e68 <Task2_callback+0xf8>
                        switch ( actual_event ) {
     e2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e2e:	2b03      	cmp	r3, #3
     e30:	d00e      	beq.n	e50 <Task2_callback+0xe0>
     e32:	2b03      	cmp	r3, #3
     e34:	dc13      	bgt.n	e5e <Task2_callback+0xee>
     e36:	2b01      	cmp	r3, #1
     e38:	d002      	beq.n	e40 <Task2_callback+0xd0>
     e3a:	2b02      	cmp	r3, #2
     e3c:	d004      	beq.n	e48 <Task2_callback+0xd8>
                            break;
     e3e:	e00e      	b.n	e5e <Task2_callback+0xee>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_4_ID );
     e40:	2004      	movs	r0, #4
     e42:	f000 fa13 	bl	126c <HwIoAb_Leds_TurnToggle>
                            break;
     e46:	e00b      	b.n	e60 <Task2_callback+0xf0>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_5_ID );
     e48:	2005      	movs	r0, #5
     e4a:	f000 fa0f 	bl	126c <HwIoAb_Leds_TurnToggle>
                            break;
     e4e:	e007      	b.n	e60 <Task2_callback+0xf0>
                               HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_4_ID );
     e50:	2004      	movs	r0, #4
     e52:	f000 fa0b 	bl	126c <HwIoAb_Leds_TurnToggle>
                               HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_5_ID );
     e56:	2005      	movs	r0, #5
     e58:	f000 fa08 	bl	126c <HwIoAb_Leds_TurnToggle>
                            break;
     e5c:	e000      	b.n	e60 <Task2_callback+0xf0>
                            break;
     e5e:	bf00      	nop
                break;
     e60:	e002      	b.n	e68 <Task2_callback+0xf8>
            }
        }
     e62:	bf00      	nop
     e64:	e000      	b.n	e68 <Task2_callback+0xf8>
                break;
     e66:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e6c:	3301      	adds	r3, #1
     e6e:	f88d 3007 	strb.w	r3, [sp, #7]
     e72:	4b06      	ldr	r3, [pc, #24]	; (e8c <Task2_callback+0x11c>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	f89d 2007 	ldrb.w	r2, [sp, #7]
     e7c:	429a      	cmp	r2, r3
     e7e:	d383      	bcc.n	d88 <Task2_callback+0x18>
    }
}
     e80:	bf00      	nop
     e82:	bf00      	nop
     e84:	b003      	add	sp, #12
     e86:	f85d fb04 	ldr.w	pc, [sp], #4
     e8a:	bf00      	nop
     e8c:	1fff8b54 	.word	0x1fff8b54

00000e90 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
     e90:	bf00      	nop
     e92:	4770      	bx	lr

00000e94 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     e94:	b084      	sub	sp, #16
     e96:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     e98:	2300      	movs	r3, #0
     e9a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     e9e:	4b15      	ldr	r3, [pc, #84]	; (ef4 <HwIoAb_Buttons_Init+0x60>)
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	2203      	movs	r2, #3
     ea4:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     ea6:	4b13      	ldr	r3, [pc, #76]	; (ef4 <HwIoAb_Buttons_Init+0x60>)
     ea8:	681b      	ldr	r3, [r3, #0]
     eaa:	9a01      	ldr	r2, [sp, #4]
     eac:	605a      	str	r2, [r3, #4]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     eae:	2300      	movs	r3, #0
     eb0:	f88d 300f 	strb.w	r3, [sp, #15]
     eb4:	e012      	b.n	edc <HwIoAb_Buttons_Init+0x48>
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     eb6:	4b0f      	ldr	r3, [pc, #60]	; (ef4 <HwIoAb_Buttons_Init+0x60>)
     eb8:	681a      	ldr	r2, [r3, #0]
     eba:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ebe:	4413      	add	r3, r2
     ec0:	2200      	movs	r2, #0
     ec2:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     ec4:	4b0b      	ldr	r3, [pc, #44]	; (ef4 <HwIoAb_Buttons_Init+0x60>)
     ec6:	681a      	ldr	r2, [r3, #0]
     ec8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ecc:	4413      	add	r3, r2
     ece:	2200      	movs	r2, #0
     ed0:	72da      	strb	r2, [r3, #11]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     ed2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ed6:	3301      	adds	r3, #1
     ed8:	f88d 300f 	strb.w	r3, [sp, #15]
     edc:	4b05      	ldr	r3, [pc, #20]	; (ef4 <HwIoAb_Buttons_Init+0x60>)
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	781b      	ldrb	r3, [r3, #0]
     ee2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ee6:	429a      	cmp	r2, r3
     ee8:	d3e5      	bcc.n	eb6 <HwIoAb_Buttons_Init+0x22>
    }
}
     eea:	bf00      	nop
     eec:	bf00      	nop
     eee:	b004      	add	sp, #16
     ef0:	4770      	bx	lr
     ef2:	bf00      	nop
     ef4:	1fff8b54 	.word	0x1fff8b54

00000ef8 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
     ef8:	b084      	sub	sp, #16
     efa:	4603      	mov	r3, r0
     efc:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
     f00:	2300      	movs	r3, #0
     f02:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
     f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d017      	beq.n	f3e <HwIoAb_Buttons_GetEvent+0x46>
     f0e:	4b0e      	ldr	r3, [pc, #56]	; (f48 <HwIoAb_Buttons_GetEvent+0x50>)
     f10:	681b      	ldr	r3, [r3, #0]
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f18:	429a      	cmp	r2, r3
     f1a:	d810      	bhi.n	f3e <HwIoAb_Buttons_GetEvent+0x46>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
     f1c:	4b0a      	ldr	r3, [pc, #40]	; (f48 <HwIoAb_Buttons_GetEvent+0x50>)
     f1e:	681a      	ldr	r2, [r3, #0]
     f20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f24:	3b01      	subs	r3, #1
     f26:	4413      	add	r3, r2
     f28:	7adb      	ldrb	r3, [r3, #11]
     f2a:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
     f2e:	4b06      	ldr	r3, [pc, #24]	; (f48 <HwIoAb_Buttons_GetEvent+0x50>)
     f30:	681a      	ldr	r2, [r3, #0]
     f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f36:	3b01      	subs	r3, #1
     f38:	4413      	add	r3, r2
     f3a:	2200      	movs	r2, #0
     f3c:	72da      	strb	r2, [r3, #11]
    }

    return event;
     f3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f42:	4618      	mov	r0, r3
     f44:	b004      	add	sp, #16
     f46:	4770      	bx	lr
     f48:	1fff8b54 	.word	0x1fff8b54

00000f4c <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
     f4c:	b500      	push	{lr}
     f4e:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
     f50:	2300      	movs	r3, #0
     f52:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
     f56:	2300      	movs	r3, #0
     f58:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
     f5c:	2300      	movs	r3, #0
     f5e:	f88d 3007 	strb.w	r3, [sp, #7]
     f62:	e029      	b.n	fb8 <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
     f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f68:	4ab5      	ldr	r2, [pc, #724]	; (1240 <HwIoAb_Buttons_MainFunction+0x2f4>)
     f6a:	5cd3      	ldrb	r3, [r2, r3]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d01e      	beq.n	fae <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
     f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f74:	4ab3      	ldr	r2, [pc, #716]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f7e:	3232      	adds	r2, #50	; 0x32
     f80:	49b0      	ldr	r1, [pc, #704]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
     f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f8a:	4aae      	ldr	r2, [pc, #696]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
     f8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f90:	4bad      	ldr	r3, [pc, #692]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	6859      	ldr	r1, [r3, #4]
     f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f9a:	00db      	lsls	r3, r3, #3
     f9c:	440b      	add	r3, r1
     f9e:	685b      	ldr	r3, [r3, #4]
     fa0:	429a      	cmp	r2, r3
     fa2:	d104      	bne.n	fae <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
     fa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fa8:	4aa5      	ldr	r2, [pc, #660]	; (1240 <HwIoAb_Buttons_MainFunction+0x2f4>)
     faa:	2100      	movs	r1, #0
     fac:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
     fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fb2:	3301      	adds	r3, #1
     fb4:	f88d 3007 	strb.w	r3, [sp, #7]
     fb8:	4ba3      	ldr	r3, [pc, #652]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
     fba:	681b      	ldr	r3, [r3, #0]
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	f89d 2007 	ldrb.w	r2, [sp, #7]
     fc2:	429a      	cmp	r2, r3
     fc4:	d3ce      	bcc.n	f64 <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
     fc6:	2300      	movs	r3, #0
     fc8:	f88d 3007 	strb.w	r3, [sp, #7]
     fcc:	e12b      	b.n	1226 <HwIoAb_Buttons_MainFunction+0x2da>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
     fce:	4b9e      	ldr	r3, [pc, #632]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	685a      	ldr	r2, [r3, #4]
     fd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fd8:	00db      	lsls	r3, r3, #3
     fda:	4413      	add	r3, r2
     fdc:	789b      	ldrb	r3, [r3, #2]
     fde:	2b01      	cmp	r3, #1
     fe0:	d103      	bne.n	fea <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
     fe2:	2301      	movs	r3, #1
     fe4:	f88d 3006 	strb.w	r3, [sp, #6]
     fe8:	e002      	b.n	ff0 <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
     fea:	2300      	movs	r3, #0
     fec:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
     ff0:	4b95      	ldr	r3, [pc, #596]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
     ff2:	681a      	ldr	r2, [r3, #0]
     ff4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ff8:	4413      	add	r3, r2
     ffa:	7a1b      	ldrb	r3, [r3, #8]
     ffc:	2b04      	cmp	r3, #4
     ffe:	f200 8102 	bhi.w	1206 <HwIoAb_Buttons_MainFunction+0x2ba>
    1002:	a201      	add	r2, pc, #4	; (adr r2, 1008 <HwIoAb_Buttons_MainFunction+0xbc>)
    1004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1008:	0000101d 	.word	0x0000101d
    100c:	00001067 	.word	0x00001067
    1010:	0000114f 	.word	0x0000114f
    1014:	000011c1 	.word	0x000011c1
    1018:	000010cd 	.word	0x000010cd
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    101c:	4b8a      	ldr	r3, [pc, #552]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    101e:	681b      	ldr	r3, [r3, #0]
    1020:	685a      	ldr	r2, [r3, #4]
    1022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1026:	00db      	lsls	r3, r3, #3
    1028:	4413      	add	r3, r2
    102a:	881b      	ldrh	r3, [r3, #0]
    102c:	4618      	mov	r0, r3
    102e:	f005 fbb3 	bl	6798 <Dio_ReadChannel>
    1032:	4603      	mov	r3, r0
    1034:	461a      	mov	r2, r3
    1036:	f89d 3006 	ldrb.w	r3, [sp, #6]
    103a:	429a      	cmp	r2, r3
    103c:	f040 80e5 	bne.w	120a <HwIoAb_Buttons_MainFunction+0x2be>
                    count_flags[i] = TRUE;  //Starting count.
    1040:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1044:	4a7e      	ldr	r2, [pc, #504]	; (1240 <HwIoAb_Buttons_MainFunction+0x2f4>)
    1046:	2101      	movs	r1, #1
    1048:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    104a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    104e:	4a7d      	ldr	r2, [pc, #500]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1050:	2100      	movs	r1, #0
    1052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    1056:	4b7c      	ldr	r3, [pc, #496]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1058:	681a      	ldr	r2, [r3, #0]
    105a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    105e:	4413      	add	r3, r2
    1060:	2201      	movs	r2, #1
    1062:	721a      	strb	r2, [r3, #8]
                }
            break;
    1064:	e0d1      	b.n	120a <HwIoAb_Buttons_MainFunction+0x2be>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1066:	f89d 3007 	ldrb.w	r3, [sp, #7]
    106a:	4a76      	ldr	r2, [pc, #472]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
    106c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1070:	4b75      	ldr	r3, [pc, #468]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	6859      	ldr	r1, [r3, #4]
    1076:	f89d 3007 	ldrb.w	r3, [sp, #7]
    107a:	00db      	lsls	r3, r3, #3
    107c:	440b      	add	r3, r1
    107e:	685b      	ldr	r3, [r3, #4]
    1080:	429a      	cmp	r2, r3
    1082:	d106      	bne.n	1092 <HwIoAb_Buttons_MainFunction+0x146>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1084:	4b70      	ldr	r3, [pc, #448]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1086:	681a      	ldr	r2, [r3, #0]
    1088:	f89d 3007 	ldrb.w	r3, [sp, #7]
    108c:	4413      	add	r3, r2
    108e:	2203      	movs	r2, #3
    1090:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1092:	4b6d      	ldr	r3, [pc, #436]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	685a      	ldr	r2, [r3, #4]
    1098:	f89d 3007 	ldrb.w	r3, [sp, #7]
    109c:	00db      	lsls	r3, r3, #3
    109e:	4413      	add	r3, r2
    10a0:	881b      	ldrh	r3, [r3, #0]
    10a2:	4618      	mov	r0, r3
    10a4:	f005 fb78 	bl	6798 <Dio_ReadChannel>
    10a8:	4603      	mov	r3, r0
    10aa:	461a      	mov	r2, r3
    10ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    10b0:	f083 0301 	eor.w	r3, r3, #1
    10b4:	b2db      	uxtb	r3, r3
    10b6:	429a      	cmp	r2, r3
    10b8:	f040 80a9 	bne.w	120e <HwIoAb_Buttons_MainFunction+0x2c2>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    10bc:	4b62      	ldr	r3, [pc, #392]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10be:	681a      	ldr	r2, [r3, #0]
    10c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c4:	4413      	add	r3, r2
    10c6:	2204      	movs	r2, #4
    10c8:	721a      	strb	r2, [r3, #8]
                }
            break;
    10ca:	e0a0      	b.n	120e <HwIoAb_Buttons_MainFunction+0x2c2>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    10cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10d0:	4a5c      	ldr	r2, [pc, #368]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
    10d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10d6:	4b5c      	ldr	r3, [pc, #368]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	6859      	ldr	r1, [r3, #4]
    10dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e0:	00db      	lsls	r3, r3, #3
    10e2:	440b      	add	r3, r1
    10e4:	685b      	ldr	r3, [r3, #4]
    10e6:	429a      	cmp	r2, r3
    10e8:	d10d      	bne.n	1106 <HwIoAb_Buttons_MainFunction+0x1ba>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    10ea:	4b57      	ldr	r3, [pc, #348]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10ec:	681a      	ldr	r2, [r3, #0]
    10ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10f2:	4413      	add	r3, r2
    10f4:	2201      	movs	r2, #1
    10f6:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    10f8:	4b53      	ldr	r3, [pc, #332]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    10fa:	681a      	ldr	r2, [r3, #0]
    10fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1100:	4413      	add	r3, r2
    1102:	2200      	movs	r2, #0
    1104:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    1106:	4b50      	ldr	r3, [pc, #320]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1108:	681b      	ldr	r3, [r3, #0]
    110a:	685a      	ldr	r2, [r3, #4]
    110c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1110:	00db      	lsls	r3, r3, #3
    1112:	4413      	add	r3, r2
    1114:	881b      	ldrh	r3, [r3, #0]
    1116:	4618      	mov	r0, r3
    1118:	f005 fb3e 	bl	6798 <Dio_ReadChannel>
    111c:	4603      	mov	r3, r0
    111e:	461a      	mov	r2, r3
    1120:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1124:	429a      	cmp	r2, r3
    1126:	d174      	bne.n	1212 <HwIoAb_Buttons_MainFunction+0x2c6>
                    count_flags[i] = TRUE;  //Starting count.
    1128:	f89d 3007 	ldrb.w	r3, [sp, #7]
    112c:	4a44      	ldr	r2, [pc, #272]	; (1240 <HwIoAb_Buttons_MainFunction+0x2f4>)
    112e:	2101      	movs	r1, #1
    1130:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1136:	4a43      	ldr	r2, [pc, #268]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1138:	2100      	movs	r1, #0
    113a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    113e:	4b42      	ldr	r3, [pc, #264]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1140:	681a      	ldr	r2, [r3, #0]
    1142:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1146:	4413      	add	r3, r2
    1148:	2202      	movs	r2, #2
    114a:	721a      	strb	r2, [r3, #8]
                }
            break;
    114c:	e061      	b.n	1212 <HwIoAb_Buttons_MainFunction+0x2c6>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    114e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1152:	4a3c      	ldr	r2, [pc, #240]	; (1244 <HwIoAb_Buttons_MainFunction+0x2f8>)
    1154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1158:	4b3b      	ldr	r3, [pc, #236]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    115a:	681b      	ldr	r3, [r3, #0]
    115c:	6859      	ldr	r1, [r3, #4]
    115e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1162:	00db      	lsls	r3, r3, #3
    1164:	440b      	add	r3, r1
    1166:	685b      	ldr	r3, [r3, #4]
    1168:	429a      	cmp	r2, r3
    116a:	d106      	bne.n	117a <HwIoAb_Buttons_MainFunction+0x22e>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    116c:	4b36      	ldr	r3, [pc, #216]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    116e:	681a      	ldr	r2, [r3, #0]
    1170:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1174:	4413      	add	r3, r2
    1176:	2203      	movs	r2, #3
    1178:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    117a:	4b33      	ldr	r3, [pc, #204]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    117c:	681b      	ldr	r3, [r3, #0]
    117e:	685a      	ldr	r2, [r3, #4]
    1180:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1184:	00db      	lsls	r3, r3, #3
    1186:	4413      	add	r3, r2
    1188:	881b      	ldrh	r3, [r3, #0]
    118a:	4618      	mov	r0, r3
    118c:	f005 fb04 	bl	6798 <Dio_ReadChannel>
    1190:	4603      	mov	r3, r0
    1192:	461a      	mov	r2, r3
    1194:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1198:	f083 0301 	eor.w	r3, r3, #1
    119c:	b2db      	uxtb	r3, r3
    119e:	429a      	cmp	r2, r3
    11a0:	d139      	bne.n	1216 <HwIoAb_Buttons_MainFunction+0x2ca>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    11a2:	4b29      	ldr	r3, [pc, #164]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11aa:	4413      	add	r3, r2
    11ac:	2202      	movs	r2, #2
    11ae:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    11b0:	4b25      	ldr	r3, [pc, #148]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11b2:	681a      	ldr	r2, [r3, #0]
    11b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11b8:	4413      	add	r3, r2
    11ba:	2200      	movs	r2, #0
    11bc:	721a      	strb	r2, [r3, #8]
                }
            break;
    11be:	e02a      	b.n	1216 <HwIoAb_Buttons_MainFunction+0x2ca>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    11c0:	4b21      	ldr	r3, [pc, #132]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	685a      	ldr	r2, [r3, #4]
    11c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11ca:	00db      	lsls	r3, r3, #3
    11cc:	4413      	add	r3, r2
    11ce:	881b      	ldrh	r3, [r3, #0]
    11d0:	4618      	mov	r0, r3
    11d2:	f005 fae1 	bl	6798 <Dio_ReadChannel>
    11d6:	4603      	mov	r3, r0
    11d8:	461a      	mov	r2, r3
    11da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11de:	f083 0301 	eor.w	r3, r3, #1
    11e2:	b2db      	uxtb	r3, r3
    11e4:	429a      	cmp	r2, r3
    11e6:	d118      	bne.n	121a <HwIoAb_Buttons_MainFunction+0x2ce>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    11e8:	4b17      	ldr	r3, [pc, #92]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11ea:	681a      	ldr	r2, [r3, #0]
    11ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11f0:	4413      	add	r3, r2
    11f2:	2203      	movs	r2, #3
    11f4:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    11f6:	4b14      	ldr	r3, [pc, #80]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11f8:	681a      	ldr	r2, [r3, #0]
    11fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11fe:	4413      	add	r3, r2
    1200:	2200      	movs	r2, #0
    1202:	721a      	strb	r2, [r3, #8]
                }
            break;
    1204:	e009      	b.n	121a <HwIoAb_Buttons_MainFunction+0x2ce>
        
            default :
            break;
    1206:	bf00      	nop
    1208:	e008      	b.n	121c <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    120a:	bf00      	nop
    120c:	e006      	b.n	121c <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    120e:	bf00      	nop
    1210:	e004      	b.n	121c <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    1212:	bf00      	nop
    1214:	e002      	b.n	121c <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    1216:	bf00      	nop
    1218:	e000      	b.n	121c <HwIoAb_Buttons_MainFunction+0x2d0>
            break;
    121a:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    121c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1220:	3301      	adds	r3, #1
    1222:	f88d 3007 	strb.w	r3, [sp, #7]
    1226:	4b08      	ldr	r3, [pc, #32]	; (1248 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	781b      	ldrb	r3, [r3, #0]
    122c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1230:	429a      	cmp	r2, r3
    1232:	f4ff aecc 	bcc.w	fce <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    1236:	bf00      	nop
    1238:	bf00      	nop
    123a:	b003      	add	sp, #12
    123c:	f85d fb04 	ldr.w	pc, [sp], #4
    1240:	1fff977c 	.word	0x1fff977c
    1244:	1fff9780 	.word	0x1fff9780
    1248:	1fff8b54 	.word	0x1fff8b54

0000124c <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    124c:	b082      	sub	sp, #8
    124e:	9001      	str	r0, [sp, #4]
    //Initializing members.
    LedsControl_Ptr->Leds = HWIOAB_LEDS;
    1250:	4b05      	ldr	r3, [pc, #20]	; (1268 <HwIoAb_Leds_Init+0x1c>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	2206      	movs	r2, #6
    1256:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1258:	4b03      	ldr	r3, [pc, #12]	; (1268 <HwIoAb_Leds_Init+0x1c>)
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	9a01      	ldr	r2, [sp, #4]
    125e:	605a      	str	r2, [r3, #4]
}
    1260:	bf00      	nop
    1262:	b002      	add	sp, #8
    1264:	4770      	bx	lr
    1266:	bf00      	nop
    1268:	1fff8b58 	.word	0x1fff8b58

0000126c <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    126c:	b500      	push	{lr}
    126e:	b083      	sub	sp, #12
    1270:	4603      	mov	r3, r0
    1272:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    1276:	4b0b      	ldr	r3, [pc, #44]	; (12a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1280:	429a      	cmp	r2, r3
    1282:	d20a      	bcs.n	129a <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1284:	4b07      	ldr	r3, [pc, #28]	; (12a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	685a      	ldr	r2, [r3, #4]
    128a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    128e:	009b      	lsls	r3, r3, #2
    1290:	4413      	add	r3, r2
    1292:	881b      	ldrh	r3, [r3, #0]
    1294:	4618      	mov	r0, r3
    1296:	f005 faaa 	bl	67ee <Dio_FlipChannel>
    }
}
    129a:	bf00      	nop
    129c:	b003      	add	sp, #12
    129e:	f85d fb04 	ldr.w	pc, [sp], #4
    12a2:	bf00      	nop
    12a4:	1fff8b58 	.word	0x1fff8b58

000012a8 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    12a8:	b500      	push	{lr}
    12aa:	b085      	sub	sp, #20
    12ac:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    12ae:	ab03      	add	r3, sp, #12
    12b0:	4619      	mov	r1, r3
    12b2:	2000      	movs	r0, #0
    12b4:	f006 fe2e 	bl	7f14 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    12b8:	ab02      	add	r3, sp, #8
    12ba:	4619      	mov	r1, r3
    12bc:	2001      	movs	r0, #1
    12be:	f006 fe29 	bl	7f14 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    12c2:	4b0b      	ldr	r3, [pc, #44]	; (12f0 <HwIoAb_Pots_Init+0x48>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	3302      	adds	r3, #2
    12c8:	4619      	mov	r1, r3
    12ca:	2000      	movs	r0, #0
    12cc:	f006 fbc4 	bl	7a58 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    12d0:	4b07      	ldr	r3, [pc, #28]	; (12f0 <HwIoAb_Pots_Init+0x48>)
    12d2:	681b      	ldr	r3, [r3, #0]
    12d4:	3306      	adds	r3, #6
    12d6:	4619      	mov	r1, r3
    12d8:	2001      	movs	r0, #1
    12da:	f006 fbbd 	bl	7a58 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    12de:	4b04      	ldr	r3, [pc, #16]	; (12f0 <HwIoAb_Pots_Init+0x48>)
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	2202      	movs	r2, #2
    12e4:	701a      	strb	r2, [r3, #0]
}
    12e6:	bf00      	nop
    12e8:	b005      	add	sp, #20
    12ea:	f85d fb04 	ldr.w	pc, [sp], #4
    12ee:	bf00      	nop
    12f0:	1fff8b5c 	.word	0x1fff8b5c

000012f4 <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    12f4:	b082      	sub	sp, #8
    12f6:	9001      	str	r0, [sp, #4]

}
    12f8:	bf00      	nop
    12fa:	b002      	add	sp, #8
    12fc:	4770      	bx	lr
	...

00001300 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1300:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1302:	2300      	movs	r3, #0
    1304:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    1306:	2300      	movs	r3, #0
    1308:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    130a:	2300      	movs	r3, #0
    130c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    130e:	2300      	movs	r3, #0
    1310:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1312:	4b44      	ldr	r3, [pc, #272]	; (1424 <init_data_bss+0x124>)
    1314:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    1316:	4b44      	ldr	r3, [pc, #272]	; (1428 <init_data_bss+0x128>)
    1318:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    131a:	9b05      	ldr	r3, [sp, #20]
    131c:	681b      	ldr	r3, [r3, #0]
    131e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1320:	9b05      	ldr	r3, [sp, #20]
    1322:	3304      	adds	r3, #4
    1324:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    1326:	9b05      	ldr	r3, [sp, #20]
    1328:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    132a:	2300      	movs	r3, #0
    132c:	9309      	str	r3, [sp, #36]	; 0x24
    132e:	e03d      	b.n	13ac <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1330:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1332:	4613      	mov	r3, r2
    1334:	005b      	lsls	r3, r3, #1
    1336:	4413      	add	r3, r2
    1338:	009b      	lsls	r3, r3, #2
    133a:	461a      	mov	r2, r3
    133c:	9b03      	ldr	r3, [sp, #12]
    133e:	4413      	add	r3, r2
    1340:	685b      	ldr	r3, [r3, #4]
    1342:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1344:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1346:	4613      	mov	r3, r2
    1348:	005b      	lsls	r3, r3, #1
    134a:	4413      	add	r3, r2
    134c:	009b      	lsls	r3, r3, #2
    134e:	461a      	mov	r2, r3
    1350:	9b03      	ldr	r3, [sp, #12]
    1352:	4413      	add	r3, r2
    1354:	681b      	ldr	r3, [r3, #0]
    1356:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1358:	9a09      	ldr	r2, [sp, #36]	; 0x24
    135a:	4613      	mov	r3, r2
    135c:	005b      	lsls	r3, r3, #1
    135e:	4413      	add	r3, r2
    1360:	009b      	lsls	r3, r3, #2
    1362:	461a      	mov	r2, r3
    1364:	9b03      	ldr	r3, [sp, #12]
    1366:	4413      	add	r3, r2
    1368:	689b      	ldr	r3, [r3, #8]
    136a:	4619      	mov	r1, r3
    136c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    136e:	4613      	mov	r3, r2
    1370:	005b      	lsls	r3, r3, #1
    1372:	4413      	add	r3, r2
    1374:	009b      	lsls	r3, r3, #2
    1376:	461a      	mov	r2, r3
    1378:	9b03      	ldr	r3, [sp, #12]
    137a:	4413      	add	r3, r2
    137c:	685b      	ldr	r3, [r3, #4]
    137e:	1acb      	subs	r3, r1, r3
    1380:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1382:	2300      	movs	r3, #0
    1384:	9308      	str	r3, [sp, #32]
    1386:	e00a      	b.n	139e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1388:	9a00      	ldr	r2, [sp, #0]
    138a:	9b08      	ldr	r3, [sp, #32]
    138c:	441a      	add	r2, r3
    138e:	9901      	ldr	r1, [sp, #4]
    1390:	9b08      	ldr	r3, [sp, #32]
    1392:	440b      	add	r3, r1
    1394:	7812      	ldrb	r2, [r2, #0]
    1396:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1398:	9b08      	ldr	r3, [sp, #32]
    139a:	3301      	adds	r3, #1
    139c:	9308      	str	r3, [sp, #32]
    139e:	9a08      	ldr	r2, [sp, #32]
    13a0:	9b06      	ldr	r3, [sp, #24]
    13a2:	429a      	cmp	r2, r3
    13a4:	d3f0      	bcc.n	1388 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    13a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13a8:	3301      	adds	r3, #1
    13aa:	9309      	str	r3, [sp, #36]	; 0x24
    13ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13ae:	9b07      	ldr	r3, [sp, #28]
    13b0:	429a      	cmp	r2, r3
    13b2:	d3bd      	bcc.n	1330 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    13b4:	9b04      	ldr	r3, [sp, #16]
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    13ba:	9b04      	ldr	r3, [sp, #16]
    13bc:	3304      	adds	r3, #4
    13be:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    13c0:	9b04      	ldr	r3, [sp, #16]
    13c2:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    13c4:	2300      	movs	r3, #0
    13c6:	9309      	str	r3, [sp, #36]	; 0x24
    13c8:	e024      	b.n	1414 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    13ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13cc:	00db      	lsls	r3, r3, #3
    13ce:	9a02      	ldr	r2, [sp, #8]
    13d0:	4413      	add	r3, r2
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    13d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13d8:	00db      	lsls	r3, r3, #3
    13da:	9a02      	ldr	r2, [sp, #8]
    13dc:	4413      	add	r3, r2
    13de:	685b      	ldr	r3, [r3, #4]
    13e0:	4619      	mov	r1, r3
    13e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13e4:	00db      	lsls	r3, r3, #3
    13e6:	9a02      	ldr	r2, [sp, #8]
    13e8:	4413      	add	r3, r2
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	1acb      	subs	r3, r1, r3
    13ee:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    13f0:	2300      	movs	r3, #0
    13f2:	9308      	str	r3, [sp, #32]
    13f4:	e007      	b.n	1406 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    13f6:	9a01      	ldr	r2, [sp, #4]
    13f8:	9b08      	ldr	r3, [sp, #32]
    13fa:	4413      	add	r3, r2
    13fc:	2200      	movs	r2, #0
    13fe:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1400:	9b08      	ldr	r3, [sp, #32]
    1402:	3301      	adds	r3, #1
    1404:	9308      	str	r3, [sp, #32]
    1406:	9a08      	ldr	r2, [sp, #32]
    1408:	9b06      	ldr	r3, [sp, #24]
    140a:	429a      	cmp	r2, r3
    140c:	d3f3      	bcc.n	13f6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    140e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1410:	3301      	adds	r3, #1
    1412:	9309      	str	r3, [sp, #36]	; 0x24
    1414:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1416:	9b07      	ldr	r3, [sp, #28]
    1418:	429a      	cmp	r2, r3
    141a:	d3d6      	bcc.n	13ca <init_data_bss+0xca>
        }
    }
}
    141c:	bf00      	nop
    141e:	bf00      	nop
    1420:	b00a      	add	sp, #40	; 0x28
    1422:	4770      	bx	lr
    1424:	00016228 	.word	0x00016228
    1428:	00016244 	.word	0x00016244

0000142c <sys_m4_cache_init>:
{
    142c:	b084      	sub	sp, #16
    142e:	4603      	mov	r3, r0
    1430:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1434:	2300      	movs	r3, #0
    1436:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    143a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    143e:	2b00      	cmp	r3, #0
    1440:	d118      	bne.n	1474 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1442:	4b10      	ldr	r3, [pc, #64]	; (1484 <sys_m4_cache_init+0x58>)
    1444:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1448:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <sys_m4_cache_init+0x58>)
    144c:	681b      	ldr	r3, [r3, #0]
    144e:	4a0d      	ldr	r2, [pc, #52]	; (1484 <sys_m4_cache_init+0x58>)
    1450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1454:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1456:	bf00      	nop
    1458:	4b0a      	ldr	r3, [pc, #40]	; (1484 <sys_m4_cache_init+0x58>)
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1464:	d0f8      	beq.n	1458 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1466:	4b07      	ldr	r3, [pc, #28]	; (1484 <sys_m4_cache_init+0x58>)
    1468:	681b      	ldr	r3, [r3, #0]
    146a:	4a06      	ldr	r2, [pc, #24]	; (1484 <sys_m4_cache_init+0x58>)
    146c:	f043 0301 	orr.w	r3, r3, #1
    1470:	6013      	str	r3, [r2, #0]
    1472:	e002      	b.n	147a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1474:	2301      	movs	r3, #1
    1476:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    147a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    147e:	4618      	mov	r0, r3
    1480:	b004      	add	sp, #16
    1482:	4770      	bx	lr
    1484:	e0082000 	.word	0xe0082000

00001488 <startup_go_to_user_mode>:
}
    1488:	bf00      	nop
    148a:	4770      	bx	lr

0000148c <Sys_GetCoreID>:
    return 0U;
    148c:	2300      	movs	r3, #0
}
    148e:	4618      	mov	r0, r3
    1490:	4770      	bx	lr

00001492 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1492:	e7fe      	b.n	1492 <HardFault_Handler>

00001494 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1494:	e7fe      	b.n	1494 <MemManage_Handler>

00001496 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1496:	e7fe      	b.n	1496 <BusFault_Handler>

00001498 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1498:	e7fe      	b.n	1498 <UsageFault_Handler>

0000149a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    149a:	e7fe      	b.n	149a <SVC_Handler>

0000149c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    149c:	e7fe      	b.n	149c <DebugMon_Handler>

0000149e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    149e:	e7fe      	b.n	149e <PendSV_Handler>

000014a0 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    14a0:	e7fe      	b.n	14a0 <SysTick_Handler>

000014a2 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    14a2:	e7fe      	b.n	14a2 <undefined_handler>

000014a4 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    14a4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    14a6:	4805      	ldr	r0, [pc, #20]	; (14bc <MCU_clocks+0x18>)
    14a8:	f004 f860 	bl	556c <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    14ac:	2000      	movs	r0, #0
    14ae:	f004 f8d5 	bl	565c <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    14b2:	2000      	movs	r0, #0
    14b4:	f004 f8ae 	bl	5614 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    14b8:	bf00      	nop
    14ba:	bd08      	pop	{r3, pc}
    14bc:	00015d90 	.word	0x00015d90

000014c0 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    14c0:	b508      	push	{r3, lr}
    MCU_clocks();
    14c2:	f7ff ffef 	bl	14a4 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    14c6:	2000      	movs	r0, #0
    14c8:	f000 fabb 	bl	1a42 <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    14cc:	2000      	movs	r0, #0
    14ce:	f000 f9b5 	bl	183c <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    14d2:	480a      	ldr	r0, [pc, #40]	; (14fc <EcuM_Init+0x3c>)
    14d4:	f004 fc4c 	bl	5d70 <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    14d8:	4809      	ldr	r0, [pc, #36]	; (1500 <EcuM_Init+0x40>)
    14da:	f006 fa6f 	bl	79bc <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    14de:	4809      	ldr	r0, [pc, #36]	; (1504 <EcuM_Init+0x44>)
    14e0:	f00c fbb4 	bl	dc4c <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    14e4:	2208      	movs	r2, #8
    14e6:	2101      	movs	r1, #1
    14e8:	4807      	ldr	r0, [pc, #28]	; (1508 <EcuM_Init+0x48>)
    14ea:	f004 fe15 	bl	6118 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    14ee:	2208      	movs	r2, #8
    14f0:	210d      	movs	r1, #13
    14f2:	4805      	ldr	r0, [pc, #20]	; (1508 <EcuM_Init+0x48>)
    14f4:	f004 fe10 	bl	6118 <Port_Ci_Port_Ip_SetMuxModeSel>
}
    14f8:	bf00      	nop
    14fa:	bd08      	pop	{r3, pc}
    14fc:	000161a8 	.word	0x000161a8
    1500:	000158ac 	.word	0x000158ac
    1504:	00016218 	.word	0x00016218
    1508:	4004a000 	.word	0x4004a000

0000150c <HwIoAb_Init>:

/**
 * @brief This function initialices the hardware io abstractions.
 * 
 */
void HwIoAb_Init( void ) {
    150c:	b508      	push	{r3, lr}
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    150e:	4807      	ldr	r0, [pc, #28]	; (152c <HwIoAb_Init+0x20>)
    1510:	f7ff fcc0 	bl	e94 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    1514:	4806      	ldr	r0, [pc, #24]	; (1530 <HwIoAb_Init+0x24>)
    1516:	f7ff fe99 	bl	124c <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    151a:	2000      	movs	r0, #0
    151c:	f7ff fec4 	bl	12a8 <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    1520:	2000      	movs	r0, #0
    1522:	f7ff fee7 	bl	12f4 <HwIoAb_Buzzer_Init>
    1526:	bf00      	nop
    1528:	bd08      	pop	{r3, pc}
    152a:	bf00      	nop
    152c:	00015710 	.word	0x00015710
    1530:	00015728 	.word	0x00015728

00001534 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1534:	b086      	sub	sp, #24
    1536:	9003      	str	r0, [sp, #12]
    1538:	9102      	str	r1, [sp, #8]
    153a:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    153c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1540:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1544:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1546:	9b01      	ldr	r3, [sp, #4]
    1548:	2b00      	cmp	r3, #0
    154a:	d007      	beq.n	155c <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    154c:	9b03      	ldr	r3, [sp, #12]
    154e:	3310      	adds	r3, #16
    1550:	009b      	lsls	r3, r3, #2
    1552:	9a05      	ldr	r2, [sp, #20]
    1554:	4413      	add	r3, r2
    1556:	681a      	ldr	r2, [r3, #0]
    1558:	9b01      	ldr	r3, [sp, #4]
    155a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    155c:	9b03      	ldr	r3, [sp, #12]
    155e:	3310      	adds	r3, #16
    1560:	009b      	lsls	r3, r3, #2
    1562:	9a05      	ldr	r2, [sp, #20]
    1564:	4413      	add	r3, r2
    1566:	9a02      	ldr	r2, [sp, #8]
    1568:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    156a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    156e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1572:	bf00      	nop
    1574:	b006      	add	sp, #24
    1576:	4770      	bx	lr

00001578 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1578:	b082      	sub	sp, #8
    157a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    157c:	9b01      	ldr	r3, [sp, #4]
    157e:	f003 021f 	and.w	r2, r3, #31
    1582:	4905      	ldr	r1, [pc, #20]	; (1598 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1584:	9b01      	ldr	r3, [sp, #4]
    1586:	095b      	lsrs	r3, r3, #5
    1588:	2001      	movs	r0, #1
    158a:	fa00 f202 	lsl.w	r2, r0, r2
    158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1592:	bf00      	nop
    1594:	b002      	add	sp, #8
    1596:	4770      	bx	lr
    1598:	e000e100 	.word	0xe000e100

0000159c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    159c:	b082      	sub	sp, #8
    159e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    15a0:	9b01      	ldr	r3, [sp, #4]
    15a2:	f003 021f 	and.w	r2, r3, #31
    15a6:	4906      	ldr	r1, [pc, #24]	; (15c0 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    15a8:	9b01      	ldr	r3, [sp, #4]
    15aa:	095b      	lsrs	r3, r3, #5
    15ac:	2001      	movs	r0, #1
    15ae:	fa00 f202 	lsl.w	r2, r0, r2
    15b2:	3320      	adds	r3, #32
    15b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    15b8:	bf00      	nop
    15ba:	b002      	add	sp, #8
    15bc:	4770      	bx	lr
    15be:	bf00      	nop
    15c0:	e000e100 	.word	0xe000e100

000015c4 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    15c4:	b084      	sub	sp, #16
    15c6:	9001      	str	r0, [sp, #4]
    15c8:	460b      	mov	r3, r1
    15ca:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    15ce:	2304      	movs	r3, #4
    15d0:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    15d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    15d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    15dc:	fa02 f103 	lsl.w	r1, r2, r3
    15e0:	4a04      	ldr	r2, [pc, #16]	; (15f4 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    15e2:	9b01      	ldr	r3, [sp, #4]
    15e4:	b2c9      	uxtb	r1, r1
    15e6:	4413      	add	r3, r2
    15e8:	460a      	mov	r2, r1
    15ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    15ee:	bf00      	nop
    15f0:	b004      	add	sp, #16
    15f2:	4770      	bx	lr
    15f4:	e000e100 	.word	0xe000e100

000015f8 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    15f8:	b084      	sub	sp, #16
    15fa:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    15fc:	2304      	movs	r3, #4
    15fe:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1602:	4a09      	ldr	r2, [pc, #36]	; (1628 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1604:	9b01      	ldr	r3, [sp, #4]
    1606:	4413      	add	r3, r2
    1608:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    160c:	b2db      	uxtb	r3, r3
    160e:	461a      	mov	r2, r3
    1610:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1614:	fa42 f303 	asr.w	r3, r2, r3
    1618:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    161c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1620:	4618      	mov	r0, r3
    1622:	b004      	add	sp, #16
    1624:	4770      	bx	lr
    1626:	bf00      	nop
    1628:	e000e100 	.word	0xe000e100

0000162c <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    162c:	b082      	sub	sp, #8
    162e:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1630:	9b01      	ldr	r3, [sp, #4]
    1632:	f003 021f 	and.w	r2, r3, #31
    1636:	4906      	ldr	r1, [pc, #24]	; (1650 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1638:	9b01      	ldr	r3, [sp, #4]
    163a:	095b      	lsrs	r3, r3, #5
    163c:	2001      	movs	r0, #1
    163e:	fa00 f202 	lsl.w	r2, r0, r2
    1642:	3360      	adds	r3, #96	; 0x60
    1644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1648:	bf00      	nop
    164a:	b002      	add	sp, #8
    164c:	4770      	bx	lr
    164e:	bf00      	nop
    1650:	e000e100 	.word	0xe000e100

00001654 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1654:	b500      	push	{lr}
    1656:	b085      	sub	sp, #20
    1658:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    165a:	2300      	movs	r3, #0
    165c:	9303      	str	r3, [sp, #12]
    165e:	e05d      	b.n	171c <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1660:	9b01      	ldr	r3, [sp, #4]
    1662:	6859      	ldr	r1, [r3, #4]
    1664:	9a03      	ldr	r2, [sp, #12]
    1666:	4613      	mov	r3, r2
    1668:	005b      	lsls	r3, r3, #1
    166a:	4413      	add	r3, r2
    166c:	009b      	lsls	r3, r3, #2
    166e:	440b      	add	r3, r1
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	4618      	mov	r0, r3
    1674:	f000 f899 	bl	17aa <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1678:	9b01      	ldr	r3, [sp, #4]
    167a:	6859      	ldr	r1, [r3, #4]
    167c:	9a03      	ldr	r2, [sp, #12]
    167e:	4613      	mov	r3, r2
    1680:	005b      	lsls	r3, r3, #1
    1682:	4413      	add	r3, r2
    1684:	009b      	lsls	r3, r3, #2
    1686:	440b      	add	r3, r1
    1688:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    168a:	9b01      	ldr	r3, [sp, #4]
    168c:	6859      	ldr	r1, [r3, #4]
    168e:	9a03      	ldr	r2, [sp, #12]
    1690:	4613      	mov	r3, r2
    1692:	005b      	lsls	r3, r3, #1
    1694:	4413      	add	r3, r2
    1696:	009b      	lsls	r3, r3, #2
    1698:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    169a:	795b      	ldrb	r3, [r3, #5]
    169c:	4619      	mov	r1, r3
    169e:	f000 f869 	bl	1774 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    16a2:	9b01      	ldr	r3, [sp, #4]
    16a4:	6859      	ldr	r1, [r3, #4]
    16a6:	9a03      	ldr	r2, [sp, #12]
    16a8:	4613      	mov	r3, r2
    16aa:	005b      	lsls	r3, r3, #1
    16ac:	4413      	add	r3, r2
    16ae:	009b      	lsls	r3, r3, #2
    16b0:	440b      	add	r3, r1
    16b2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	6859      	ldr	r1, [r3, #4]
    16b8:	9a03      	ldr	r2, [sp, #12]
    16ba:	4613      	mov	r3, r2
    16bc:	005b      	lsls	r3, r3, #1
    16be:	4413      	add	r3, r2
    16c0:	009b      	lsls	r3, r3, #2
    16c2:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    16c4:	689b      	ldr	r3, [r3, #8]
    16c6:	2200      	movs	r2, #0
    16c8:	4619      	mov	r1, r3
    16ca:	f000 f831 	bl	1730 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    16ce:	9b01      	ldr	r3, [sp, #4]
    16d0:	6859      	ldr	r1, [r3, #4]
    16d2:	9a03      	ldr	r2, [sp, #12]
    16d4:	4613      	mov	r3, r2
    16d6:	005b      	lsls	r3, r3, #1
    16d8:	4413      	add	r3, r2
    16da:	009b      	lsls	r3, r3, #2
    16dc:	440b      	add	r3, r1
    16de:	791b      	ldrb	r3, [r3, #4]
    16e0:	2b00      	cmp	r3, #0
    16e2:	d00c      	beq.n	16fe <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    16e4:	9b01      	ldr	r3, [sp, #4]
    16e6:	6859      	ldr	r1, [r3, #4]
    16e8:	9a03      	ldr	r2, [sp, #12]
    16ea:	4613      	mov	r3, r2
    16ec:	005b      	lsls	r3, r3, #1
    16ee:	4413      	add	r3, r2
    16f0:	009b      	lsls	r3, r3, #2
    16f2:	440b      	add	r3, r1
    16f4:	681b      	ldr	r3, [r3, #0]
    16f6:	4618      	mov	r0, r3
    16f8:	f000 f828 	bl	174c <IntCtrl_Ip_EnableIrq>
    16fc:	e00b      	b.n	1716 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    16fe:	9b01      	ldr	r3, [sp, #4]
    1700:	6859      	ldr	r1, [r3, #4]
    1702:	9a03      	ldr	r2, [sp, #12]
    1704:	4613      	mov	r3, r2
    1706:	005b      	lsls	r3, r3, #1
    1708:	4413      	add	r3, r2
    170a:	009b      	lsls	r3, r3, #2
    170c:	440b      	add	r3, r1
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	4618      	mov	r0, r3
    1712:	f000 f825 	bl	1760 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1716:	9b03      	ldr	r3, [sp, #12]
    1718:	3301      	adds	r3, #1
    171a:	9303      	str	r3, [sp, #12]
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	9a03      	ldr	r2, [sp, #12]
    1722:	429a      	cmp	r2, r3
    1724:	d39c      	bcc.n	1660 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1726:	2300      	movs	r3, #0
}
    1728:	4618      	mov	r0, r3
    172a:	b005      	add	sp, #20
    172c:	f85d fb04 	ldr.w	pc, [sp], #4

00001730 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1730:	b500      	push	{lr}
    1732:	b085      	sub	sp, #20
    1734:	9003      	str	r0, [sp, #12]
    1736:	9102      	str	r1, [sp, #8]
    1738:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    173a:	9a01      	ldr	r2, [sp, #4]
    173c:	9902      	ldr	r1, [sp, #8]
    173e:	9803      	ldr	r0, [sp, #12]
    1740:	f7ff fef8 	bl	1534 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1744:	bf00      	nop
    1746:	b005      	add	sp, #20
    1748:	f85d fb04 	ldr.w	pc, [sp], #4

0000174c <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    174c:	b500      	push	{lr}
    174e:	b083      	sub	sp, #12
    1750:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1752:	9801      	ldr	r0, [sp, #4]
    1754:	f7ff ff10 	bl	1578 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1758:	bf00      	nop
    175a:	b003      	add	sp, #12
    175c:	f85d fb04 	ldr.w	pc, [sp], #4

00001760 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1760:	b500      	push	{lr}
    1762:	b083      	sub	sp, #12
    1764:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1766:	9801      	ldr	r0, [sp, #4]
    1768:	f7ff ff18 	bl	159c <IntCtrl_Ip_DisableIrqPrivileged>
}
    176c:	bf00      	nop
    176e:	b003      	add	sp, #12
    1770:	f85d fb04 	ldr.w	pc, [sp], #4

00001774 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1774:	b500      	push	{lr}
    1776:	b083      	sub	sp, #12
    1778:	9001      	str	r0, [sp, #4]
    177a:	460b      	mov	r3, r1
    177c:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1780:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1784:	4619      	mov	r1, r3
    1786:	9801      	ldr	r0, [sp, #4]
    1788:	f7ff ff1c 	bl	15c4 <IntCtrl_Ip_SetPriorityPrivileged>
}
    178c:	bf00      	nop
    178e:	b003      	add	sp, #12
    1790:	f85d fb04 	ldr.w	pc, [sp], #4

00001794 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1794:	b500      	push	{lr}
    1796:	b083      	sub	sp, #12
    1798:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    179a:	9801      	ldr	r0, [sp, #4]
    179c:	f7ff ff2c 	bl	15f8 <IntCtrl_Ip_GetPriorityPrivileged>
    17a0:	4603      	mov	r3, r0
}
    17a2:	4618      	mov	r0, r3
    17a4:	b003      	add	sp, #12
    17a6:	f85d fb04 	ldr.w	pc, [sp], #4

000017aa <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    17aa:	b500      	push	{lr}
    17ac:	b083      	sub	sp, #12
    17ae:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    17b0:	9801      	ldr	r0, [sp, #4]
    17b2:	f7ff ff3b 	bl	162c <IntCtrl_Ip_ClearPendingPrivileged>
}
    17b6:	bf00      	nop
    17b8:	b003      	add	sp, #12
    17ba:	f85d fb04 	ldr.w	pc, [sp], #4
    17be:	bf00      	nop

000017c0 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    17c0:	b500      	push	{lr}
    17c2:	b083      	sub	sp, #12
    17c4:	9001      	str	r0, [sp, #4]
    17c6:	460b      	mov	r3, r1
    17c8:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    17cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d003      	beq.n	17dc <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    17d4:	9801      	ldr	r0, [sp, #4]
    17d6:	f7ff ffb9 	bl	174c <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    17da:	e002      	b.n	17e2 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    17dc:	9801      	ldr	r0, [sp, #4]
    17de:	f7ff ffbf 	bl	1760 <IntCtrl_Ip_DisableIrq>
}
    17e2:	bf00      	nop
    17e4:	b003      	add	sp, #12
    17e6:	f85d fb04 	ldr.w	pc, [sp], #4

000017ea <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    17ea:	b500      	push	{lr}
    17ec:	b083      	sub	sp, #12
    17ee:	9001      	str	r0, [sp, #4]
    17f0:	460b      	mov	r3, r1
    17f2:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    17f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17fa:	4619      	mov	r1, r3
    17fc:	9801      	ldr	r0, [sp, #4]
    17fe:	f7ff ffb9 	bl	1774 <IntCtrl_Ip_SetPriority>
}
    1802:	bf00      	nop
    1804:	b003      	add	sp, #12
    1806:	f85d fb04 	ldr.w	pc, [sp], #4

0000180a <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    180a:	b500      	push	{lr}
    180c:	b083      	sub	sp, #12
    180e:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1810:	9801      	ldr	r0, [sp, #4]
    1812:	f7ff ffbf 	bl	1794 <IntCtrl_Ip_GetPriority>
    1816:	4603      	mov	r3, r0
}
    1818:	4618      	mov	r0, r3
    181a:	b003      	add	sp, #12
    181c:	f85d fb04 	ldr.w	pc, [sp], #4

00001820 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1820:	b500      	push	{lr}
    1822:	b085      	sub	sp, #20
    1824:	9003      	str	r0, [sp, #12]
    1826:	9102      	str	r1, [sp, #8]
    1828:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    182a:	9a01      	ldr	r2, [sp, #4]
    182c:	9902      	ldr	r1, [sp, #8]
    182e:	9803      	ldr	r0, [sp, #12]
    1830:	f7ff ff7e 	bl	1730 <IntCtrl_Ip_InstallHandler>
}
    1834:	bf00      	nop
    1836:	b005      	add	sp, #20
    1838:	f85d fb04 	ldr.w	pc, [sp], #4

0000183c <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    183c:	b500      	push	{lr}
    183e:	b085      	sub	sp, #20
    1840:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1842:	2300      	movs	r3, #0
    1844:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1848:	f89d 300f 	ldrb.w	r3, [sp, #15]
    184c:	4a05      	ldr	r2, [pc, #20]	; (1864 <Platform_Init+0x28>)
    184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	4618      	mov	r0, r3
    1856:	f000 f8c7 	bl	19e8 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    185a:	bf00      	nop
    185c:	b005      	add	sp, #20
    185e:	f85d fb04 	ldr.w	pc, [sp], #4
    1862:	bf00      	nop
    1864:	00015dfc 	.word	0x00015dfc

00001868 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1868:	b500      	push	{lr}
    186a:	b085      	sub	sp, #20
    186c:	9001      	str	r0, [sp, #4]
    186e:	460b      	mov	r3, r1
    1870:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1874:	2300      	movs	r3, #0
    1876:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    187a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    187e:	4619      	mov	r1, r3
    1880:	9801      	ldr	r0, [sp, #4]
    1882:	f7ff ff9d 	bl	17c0 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1886:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    188a:	4618      	mov	r0, r3
    188c:	b005      	add	sp, #20
    188e:	f85d fb04 	ldr.w	pc, [sp], #4

00001892 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1892:	b500      	push	{lr}
    1894:	b085      	sub	sp, #20
    1896:	9001      	str	r0, [sp, #4]
    1898:	460b      	mov	r3, r1
    189a:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    189e:	2300      	movs	r3, #0
    18a0:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    18a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18a8:	4619      	mov	r1, r3
    18aa:	9801      	ldr	r0, [sp, #4]
    18ac:	f7ff ff9d 	bl	17ea <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    18b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    18b4:	4618      	mov	r0, r3
    18b6:	b005      	add	sp, #20
    18b8:	f85d fb04 	ldr.w	pc, [sp], #4

000018bc <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    18bc:	b500      	push	{lr}
    18be:	b085      	sub	sp, #20
    18c0:	9001      	str	r0, [sp, #4]
    18c2:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    18c4:	2300      	movs	r3, #0
    18c6:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    18ca:	9801      	ldr	r0, [sp, #4]
    18cc:	f7ff ff9d 	bl	180a <Platform_Ipw_GetIrqPriority>
    18d0:	4603      	mov	r3, r0
    18d2:	461a      	mov	r2, r3
    18d4:	9b00      	ldr	r3, [sp, #0]
    18d6:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    18d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    18dc:	4618      	mov	r0, r3
    18de:	b005      	add	sp, #20
    18e0:	f85d fb04 	ldr.w	pc, [sp], #4

000018e4 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    18e4:	b500      	push	{lr}
    18e6:	b087      	sub	sp, #28
    18e8:	9003      	str	r0, [sp, #12]
    18ea:	9102      	str	r1, [sp, #8]
    18ec:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    18ee:	2300      	movs	r3, #0
    18f0:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    18f4:	9a01      	ldr	r2, [sp, #4]
    18f6:	9902      	ldr	r1, [sp, #8]
    18f8:	9803      	ldr	r0, [sp, #12]
    18fa:	f7ff ff91 	bl	1820 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    18fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1902:	4618      	mov	r0, r3
    1904:	b007      	add	sp, #28
    1906:	f85d fb04 	ldr.w	pc, [sp], #4
    190a:	bf00      	nop

0000190c <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    190c:	b500      	push	{lr}
    190e:	b085      	sub	sp, #20
    1910:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1912:	2300      	movs	r3, #0
    1914:	9303      	str	r3, [sp, #12]
    1916:	e05d      	b.n	19d4 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1918:	9b01      	ldr	r3, [sp, #4]
    191a:	6859      	ldr	r1, [r3, #4]
    191c:	9a03      	ldr	r2, [sp, #12]
    191e:	4613      	mov	r3, r2
    1920:	005b      	lsls	r3, r3, #1
    1922:	4413      	add	r3, r2
    1924:	009b      	lsls	r3, r3, #2
    1926:	440b      	add	r3, r1
    1928:	681b      	ldr	r3, [r3, #0]
    192a:	4618      	mov	r0, r3
    192c:	f7ff ff3d 	bl	17aa <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1930:	9b01      	ldr	r3, [sp, #4]
    1932:	6859      	ldr	r1, [r3, #4]
    1934:	9a03      	ldr	r2, [sp, #12]
    1936:	4613      	mov	r3, r2
    1938:	005b      	lsls	r3, r3, #1
    193a:	4413      	add	r3, r2
    193c:	009b      	lsls	r3, r3, #2
    193e:	440b      	add	r3, r1
    1940:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1942:	9b01      	ldr	r3, [sp, #4]
    1944:	6859      	ldr	r1, [r3, #4]
    1946:	9a03      	ldr	r2, [sp, #12]
    1948:	4613      	mov	r3, r2
    194a:	005b      	lsls	r3, r3, #1
    194c:	4413      	add	r3, r2
    194e:	009b      	lsls	r3, r3, #2
    1950:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1952:	795b      	ldrb	r3, [r3, #5]
    1954:	4619      	mov	r1, r3
    1956:	f7ff ff0d 	bl	1774 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    195a:	9b01      	ldr	r3, [sp, #4]
    195c:	6859      	ldr	r1, [r3, #4]
    195e:	9a03      	ldr	r2, [sp, #12]
    1960:	4613      	mov	r3, r2
    1962:	005b      	lsls	r3, r3, #1
    1964:	4413      	add	r3, r2
    1966:	009b      	lsls	r3, r3, #2
    1968:	440b      	add	r3, r1
    196a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    196c:	9b01      	ldr	r3, [sp, #4]
    196e:	6859      	ldr	r1, [r3, #4]
    1970:	9a03      	ldr	r2, [sp, #12]
    1972:	4613      	mov	r3, r2
    1974:	005b      	lsls	r3, r3, #1
    1976:	4413      	add	r3, r2
    1978:	009b      	lsls	r3, r3, #2
    197a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    197c:	689b      	ldr	r3, [r3, #8]
    197e:	2200      	movs	r2, #0
    1980:	4619      	mov	r1, r3
    1982:	f7ff fed5 	bl	1730 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1986:	9b01      	ldr	r3, [sp, #4]
    1988:	6859      	ldr	r1, [r3, #4]
    198a:	9a03      	ldr	r2, [sp, #12]
    198c:	4613      	mov	r3, r2
    198e:	005b      	lsls	r3, r3, #1
    1990:	4413      	add	r3, r2
    1992:	009b      	lsls	r3, r3, #2
    1994:	440b      	add	r3, r1
    1996:	791b      	ldrb	r3, [r3, #4]
    1998:	2b00      	cmp	r3, #0
    199a:	d00c      	beq.n	19b6 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    199c:	9b01      	ldr	r3, [sp, #4]
    199e:	6859      	ldr	r1, [r3, #4]
    19a0:	9a03      	ldr	r2, [sp, #12]
    19a2:	4613      	mov	r3, r2
    19a4:	005b      	lsls	r3, r3, #1
    19a6:	4413      	add	r3, r2
    19a8:	009b      	lsls	r3, r3, #2
    19aa:	440b      	add	r3, r1
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	4618      	mov	r0, r3
    19b0:	f7ff fecc 	bl	174c <IntCtrl_Ip_EnableIrq>
    19b4:	e00b      	b.n	19ce <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19b6:	9b01      	ldr	r3, [sp, #4]
    19b8:	6859      	ldr	r1, [r3, #4]
    19ba:	9a03      	ldr	r2, [sp, #12]
    19bc:	4613      	mov	r3, r2
    19be:	005b      	lsls	r3, r3, #1
    19c0:	4413      	add	r3, r2
    19c2:	009b      	lsls	r3, r3, #2
    19c4:	440b      	add	r3, r1
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	4618      	mov	r0, r3
    19ca:	f7ff fec9 	bl	1760 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19ce:	9b03      	ldr	r3, [sp, #12]
    19d0:	3301      	adds	r3, #1
    19d2:	9303      	str	r3, [sp, #12]
    19d4:	9b01      	ldr	r3, [sp, #4]
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	9a03      	ldr	r2, [sp, #12]
    19da:	429a      	cmp	r2, r3
    19dc:	d39c      	bcc.n	1918 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    19de:	2300      	movs	r3, #0
}
    19e0:	4618      	mov	r0, r3
    19e2:	b005      	add	sp, #20
    19e4:	f85d fb04 	ldr.w	pc, [sp], #4

000019e8 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    19e8:	b500      	push	{lr}
    19ea:	b085      	sub	sp, #20
    19ec:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    19ee:	2300      	movs	r3, #0
    19f0:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    19f4:	9b01      	ldr	r3, [sp, #4]
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	2b00      	cmp	r3, #0
    19fa:	d007      	beq.n	1a0c <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    19fc:	9b01      	ldr	r3, [sp, #4]
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	4618      	mov	r0, r3
    1a02:	f7ff ff83 	bl	190c <Platform_Ipw_InitIntCtrl>
    1a06:	4603      	mov	r3, r0
    1a08:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1a0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1a10:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1a12:	bf00      	nop
    1a14:	b005      	add	sp, #20
    1a16:	f85d fb04 	ldr.w	pc, [sp], #4

00001a1a <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1a1a:	2300      	movs	r3, #0
}
    1a1c:	4618      	mov	r0, r3
    1a1e:	4770      	bx	lr

00001a20 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1a20:	b082      	sub	sp, #8
    1a22:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1a24:	2301      	movs	r3, #1
}
    1a26:	4618      	mov	r0, r3
    1a28:	b002      	add	sp, #8
    1a2a:	4770      	bx	lr

00001a2c <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1a2c:	b082      	sub	sp, #8
    1a2e:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1a30:	bf00      	nop
    1a32:	b002      	add	sp, #8
    1a34:	4770      	bx	lr

00001a36 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1a36:	b082      	sub	sp, #8
    1a38:	9001      	str	r0, [sp, #4]
    return Micros;
    1a3a:	9b01      	ldr	r3, [sp, #4]
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	b002      	add	sp, #8
    1a40:	4770      	bx	lr

00001a42 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1a42:	b500      	push	{lr}
    1a44:	b083      	sub	sp, #12
    1a46:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1a48:	f000 f86c 	bl	1b24 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1a4c:	bf00      	nop
    1a4e:	b003      	add	sp, #12
    1a50:	f85d fb04 	ldr.w	pc, [sp], #4

00001a54 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1a54:	b500      	push	{lr}
    1a56:	b085      	sub	sp, #20
    1a58:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1a5a:	2300      	movs	r3, #0
    1a5c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d003      	beq.n	1a6c <OsIf_GetCounter+0x18>
    1a64:	9b01      	ldr	r3, [sp, #4]
    1a66:	2b01      	cmp	r3, #1
    1a68:	d004      	beq.n	1a74 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1a6a:	e007      	b.n	1a7c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1a6c:	f7ff ffd5 	bl	1a1a <OsIf_Timer_Dummy_GetCounter>
    1a70:	9003      	str	r0, [sp, #12]
            break;
    1a72:	e003      	b.n	1a7c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1a74:	f000 f872 	bl	1b5c <OsIf_Timer_System_GetCounter>
    1a78:	9003      	str	r0, [sp, #12]
            break;
    1a7a:	bf00      	nop
    }

    return Value;
    1a7c:	9b03      	ldr	r3, [sp, #12]
}
    1a7e:	4618      	mov	r0, r3
    1a80:	b005      	add	sp, #20
    1a82:	f85d fb04 	ldr.w	pc, [sp], #4

00001a86 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1a86:	b500      	push	{lr}
    1a88:	b085      	sub	sp, #20
    1a8a:	9001      	str	r0, [sp, #4]
    1a8c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1a8e:	2300      	movs	r3, #0
    1a90:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1a92:	9b00      	ldr	r3, [sp, #0]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d003      	beq.n	1aa0 <OsIf_GetElapsed+0x1a>
    1a98:	9b00      	ldr	r3, [sp, #0]
    1a9a:	2b01      	cmp	r3, #1
    1a9c:	d005      	beq.n	1aaa <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1a9e:	e009      	b.n	1ab4 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1aa0:	9801      	ldr	r0, [sp, #4]
    1aa2:	f7ff ffbd 	bl	1a20 <OsIf_Timer_Dummy_GetElapsed>
    1aa6:	9003      	str	r0, [sp, #12]
            break;
    1aa8:	e004      	b.n	1ab4 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1aaa:	9801      	ldr	r0, [sp, #4]
    1aac:	f000 f864 	bl	1b78 <OsIf_Timer_System_GetElapsed>
    1ab0:	9003      	str	r0, [sp, #12]
            break;
    1ab2:	bf00      	nop
    }

    return Value;
    1ab4:	9b03      	ldr	r3, [sp, #12]
}
    1ab6:	4618      	mov	r0, r3
    1ab8:	b005      	add	sp, #20
    1aba:	f85d fb04 	ldr.w	pc, [sp], #4

00001abe <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1abe:	b500      	push	{lr}
    1ac0:	b083      	sub	sp, #12
    1ac2:	9001      	str	r0, [sp, #4]
    1ac4:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1ac6:	9b00      	ldr	r3, [sp, #0]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d003      	beq.n	1ad4 <OsIf_SetTimerFrequency+0x16>
    1acc:	9b00      	ldr	r3, [sp, #0]
    1ace:	2b01      	cmp	r3, #1
    1ad0:	d004      	beq.n	1adc <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1ad2:	e007      	b.n	1ae4 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1ad4:	9801      	ldr	r0, [sp, #4]
    1ad6:	f7ff ffa9 	bl	1a2c <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1ada:	e003      	b.n	1ae4 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1adc:	9801      	ldr	r0, [sp, #4]
    1ade:	f000 f85b 	bl	1b98 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1ae2:	bf00      	nop
    }
}
    1ae4:	bf00      	nop
    1ae6:	b003      	add	sp, #12
    1ae8:	f85d fb04 	ldr.w	pc, [sp], #4

00001aec <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1aec:	b500      	push	{lr}
    1aee:	b085      	sub	sp, #20
    1af0:	9001      	str	r0, [sp, #4]
    1af2:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1af4:	2300      	movs	r3, #0
    1af6:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1af8:	9b00      	ldr	r3, [sp, #0]
    1afa:	2b00      	cmp	r3, #0
    1afc:	d003      	beq.n	1b06 <OsIf_MicrosToTicks+0x1a>
    1afe:	9b00      	ldr	r3, [sp, #0]
    1b00:	2b01      	cmp	r3, #1
    1b02:	d005      	beq.n	1b10 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b04:	e009      	b.n	1b1a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1b06:	9801      	ldr	r0, [sp, #4]
    1b08:	f7ff ff95 	bl	1a36 <OsIf_Timer_Dummy_MicrosToTicks>
    1b0c:	9003      	str	r0, [sp, #12]
            break;
    1b0e:	e004      	b.n	1b1a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1b10:	9801      	ldr	r0, [sp, #4]
    1b12:	f000 f84f 	bl	1bb4 <OsIf_Timer_System_MicrosToTicks>
    1b16:	9003      	str	r0, [sp, #12]
            break;
    1b18:	bf00      	nop
    }

    return Value;
    1b1a:	9b03      	ldr	r3, [sp, #12]
}
    1b1c:	4618      	mov	r0, r3
    1b1e:	b005      	add	sp, #20
    1b20:	f85d fb04 	ldr.w	pc, [sp], #4

00001b24 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1b24:	b500      	push	{lr}
    1b26:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1b28:	2300      	movs	r3, #0
    1b2a:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1b2c:	4a09      	ldr	r2, [pc, #36]	; (1b54 <OsIf_Timer_System_Init+0x30>)
    1b2e:	9b01      	ldr	r3, [sp, #4]
    1b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b34:	685a      	ldr	r2, [r3, #4]
    1b36:	4908      	ldr	r1, [pc, #32]	; (1b58 <OsIf_Timer_System_Init+0x34>)
    1b38:	9b01      	ldr	r3, [sp, #4]
    1b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1b3e:	4a06      	ldr	r2, [pc, #24]	; (1b58 <OsIf_Timer_System_Init+0x34>)
    1b40:	9b01      	ldr	r3, [sp, #4]
    1b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b46:	4618      	mov	r0, r3
    1b48:	f000 f868 	bl	1c1c <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1b4c:	bf00      	nop
    1b4e:	b003      	add	sp, #12
    1b50:	f85d fb04 	ldr.w	pc, [sp], #4
    1b54:	00015db4 	.word	0x00015db4
    1b58:	1fff8b64 	.word	0x1fff8b64

00001b5c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1b5c:	b500      	push	{lr}
    1b5e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1b60:	2300      	movs	r3, #0
    1b62:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1b64:	2300      	movs	r3, #0
    1b66:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1b68:	f000 f86c 	bl	1c44 <OsIf_Timer_System_Internal_GetCounter>
    1b6c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1b6e:	9b01      	ldr	r3, [sp, #4]
}
    1b70:	4618      	mov	r0, r3
    1b72:	b003      	add	sp, #12
    1b74:	f85d fb04 	ldr.w	pc, [sp], #4

00001b78 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1b78:	b500      	push	{lr}
    1b7a:	b085      	sub	sp, #20
    1b7c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1b7e:	2300      	movs	r3, #0
    1b80:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1b82:	2300      	movs	r3, #0
    1b84:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1b86:	9801      	ldr	r0, [sp, #4]
    1b88:	f000 f864 	bl	1c54 <OsIf_Timer_System_Internal_GetElapsed>
    1b8c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1b8e:	9b03      	ldr	r3, [sp, #12]
}
    1b90:	4618      	mov	r0, r3
    1b92:	b005      	add	sp, #20
    1b94:	f85d fb04 	ldr.w	pc, [sp], #4

00001b98 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1b98:	b084      	sub	sp, #16
    1b9a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1b9c:	2300      	movs	r3, #0
    1b9e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1ba0:	4903      	ldr	r1, [pc, #12]	; (1bb0 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1ba2:	9b03      	ldr	r3, [sp, #12]
    1ba4:	9a01      	ldr	r2, [sp, #4]
    1ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1baa:	bf00      	nop
    1bac:	b004      	add	sp, #16
    1bae:	4770      	bx	lr
    1bb0:	1fff8b64 	.word	0x1fff8b64

00001bb4 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb6:	b087      	sub	sp, #28
    1bb8:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1bba:	2100      	movs	r1, #0
    1bbc:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1bbe:	2100      	movs	r1, #0
    1bc0:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1bc2:	9901      	ldr	r1, [sp, #4]
    1bc4:	2000      	movs	r0, #0
    1bc6:	460e      	mov	r6, r1
    1bc8:	4607      	mov	r7, r0
    1bca:	4812      	ldr	r0, [pc, #72]	; (1c14 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1bcc:	9904      	ldr	r1, [sp, #16]
    1bce:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1bd2:	2000      	movs	r0, #0
    1bd4:	460c      	mov	r4, r1
    1bd6:	4605      	mov	r5, r0
    1bd8:	fb04 f007 	mul.w	r0, r4, r7
    1bdc:	fb06 f105 	mul.w	r1, r6, r5
    1be0:	4401      	add	r1, r0
    1be2:	fba6 2304 	umull	r2, r3, r6, r4
    1be6:	4419      	add	r1, r3
    1be8:	460b      	mov	r3, r1
    1bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1bf6:	4a08      	ldr	r2, [pc, #32]	; (1c18 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1bf8:	f04f 0300 	mov.w	r3, #0
    1bfc:	f7fe fcd2 	bl	5a4 <__aeabi_uldivmod>
    1c00:	4602      	mov	r2, r0
    1c02:	460b      	mov	r3, r1
    1c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1c08:	9b02      	ldr	r3, [sp, #8]
    1c0a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1c0c:	9b05      	ldr	r3, [sp, #20]
}
    1c0e:	4618      	mov	r0, r3
    1c10:	b007      	add	sp, #28
    1c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c14:	1fff8b64 	.word	0x1fff8b64
    1c18:	000f4240 	.word	0x000f4240

00001c1c <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1c1c:	b082      	sub	sp, #8
    1c1e:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1c20:	4b07      	ldr	r3, [pc, #28]	; (1c40 <OsIf_Timer_System_Internal_Init+0x24>)
    1c22:	2200      	movs	r2, #0
    1c24:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1c26:	4b06      	ldr	r3, [pc, #24]	; (1c40 <OsIf_Timer_System_Internal_Init+0x24>)
    1c28:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1c2c:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1c2e:	4b04      	ldr	r3, [pc, #16]	; (1c40 <OsIf_Timer_System_Internal_Init+0x24>)
    1c30:	2200      	movs	r2, #0
    1c32:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1c34:	4b02      	ldr	r3, [pc, #8]	; (1c40 <OsIf_Timer_System_Internal_Init+0x24>)
    1c36:	2205      	movs	r2, #5
    1c38:	601a      	str	r2, [r3, #0]
}
    1c3a:	bf00      	nop
    1c3c:	b002      	add	sp, #8
    1c3e:	4770      	bx	lr
    1c40:	e000e010 	.word	0xe000e010

00001c44 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1c44:	4b02      	ldr	r3, [pc, #8]	; (1c50 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1c46:	689b      	ldr	r3, [r3, #8]
    1c48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	4770      	bx	lr
    1c50:	e000e010 	.word	0xe000e010

00001c54 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1c54:	b084      	sub	sp, #16
    1c56:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1c58:	4b10      	ldr	r3, [pc, #64]	; (1c9c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1c5a:	689b      	ldr	r3, [r3, #8]
    1c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1c60:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1c62:	2300      	movs	r3, #0
    1c64:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1c66:	9b01      	ldr	r3, [sp, #4]
    1c68:	681b      	ldr	r3, [r3, #0]
    1c6a:	9a02      	ldr	r2, [sp, #8]
    1c6c:	429a      	cmp	r2, r3
    1c6e:	d909      	bls.n	1c84 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1c70:	9b01      	ldr	r3, [sp, #4]
    1c72:	681a      	ldr	r2, [r3, #0]
    1c74:	9b02      	ldr	r3, [sp, #8]
    1c76:	1ad3      	subs	r3, r2, r3
    1c78:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1c7c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1c80:	9303      	str	r3, [sp, #12]
    1c82:	e004      	b.n	1c8e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1c84:	9b01      	ldr	r3, [sp, #4]
    1c86:	681a      	ldr	r2, [r3, #0]
    1c88:	9b02      	ldr	r3, [sp, #8]
    1c8a:	1ad3      	subs	r3, r2, r3
    1c8c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1c8e:	9b01      	ldr	r3, [sp, #4]
    1c90:	9a02      	ldr	r2, [sp, #8]
    1c92:	601a      	str	r2, [r3, #0]

    return dif;
    1c94:	9b03      	ldr	r3, [sp, #12]
}
    1c96:	4618      	mov	r0, r3
    1c98:	b004      	add	sp, #16
    1c9a:	4770      	bx	lr
    1c9c:	e000e010 	.word	0xe000e010

00001ca0 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1ca0:	b082      	sub	sp, #8
    1ca2:	9001      	str	r0, [sp, #4]
    1ca4:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1ca6:	bf00      	nop
    1ca8:	b002      	add	sp, #8
    1caa:	4770      	bx	lr

00001cac <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1cac:	b500      	push	{lr}
    1cae:	b085      	sub	sp, #20
    1cb0:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1cb2:	4b24      	ldr	r3, [pc, #144]	; (1d44 <Clock_Ip_UpdateDriverContext+0x98>)
    1cb4:	2201      	movs	r2, #1
    1cb6:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1cb8:	4b23      	ldr	r3, [pc, #140]	; (1d48 <Clock_Ip_UpdateDriverContext+0x9c>)
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	2102      	movs	r1, #2
    1cbe:	4618      	mov	r0, r3
    1cc0:	f003 fc32 	bl	5528 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1cc4:	2300      	movs	r3, #0
    1cc6:	f88d 300f 	strb.w	r3, [sp, #15]
    1cca:	e015      	b.n	1cf8 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1ccc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cd0:	9a01      	ldr	r2, [sp, #4]
    1cd2:	334a      	adds	r3, #74	; 0x4a
    1cd4:	00db      	lsls	r3, r3, #3
    1cd6:	4413      	add	r3, r2
    1cd8:	6858      	ldr	r0, [r3, #4]
    1cda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cde:	9a01      	ldr	r2, [sp, #4]
    1ce0:	334a      	adds	r3, #74	; 0x4a
    1ce2:	00db      	lsls	r3, r3, #3
    1ce4:	4413      	add	r3, r2
    1ce6:	689b      	ldr	r3, [r3, #8]
    1ce8:	4619      	mov	r1, r3
    1cea:	f001 fadc 	bl	32a6 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1cee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cf2:	3301      	adds	r3, #1
    1cf4:	f88d 300f 	strb.w	r3, [sp, #15]
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	7bdb      	ldrb	r3, [r3, #15]
    1cfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d00:	429a      	cmp	r2, r3
    1d02:	d3e3      	bcc.n	1ccc <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1d04:	f000 f824 	bl	1d50 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1d08:	2301      	movs	r3, #1
    1d0a:	f88d 300f 	strb.w	r3, [sp, #15]
    1d0e:	e00e      	b.n	1d2e <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1d10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	327e      	adds	r2, #126	; 0x7e
    1d18:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1d1c:	490b      	ldr	r1, [pc, #44]	; (1d4c <Clock_Ip_UpdateDriverContext+0xa0>)
    1d1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d22:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1d24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d28:	3301      	adds	r3, #1
    1d2a:	f88d 300f 	strb.w	r3, [sp, #15]
    1d2e:	9b01      	ldr	r3, [sp, #4]
    1d30:	7cdb      	ldrb	r3, [r3, #19]
    1d32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d36:	429a      	cmp	r2, r3
    1d38:	d3ea      	bcc.n	1d10 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1d3a:	bf00      	nop
    1d3c:	bf00      	nop
    1d3e:	b005      	add	sp, #20
    1d40:	f85d fb04 	ldr.w	pc, [sp], #4
    1d44:	1fff8b10 	.word	0x1fff8b10
    1d48:	1fff8b68 	.word	0x1fff8b68
    1d4c:	1fff8b74 	.word	0x1fff8b74

00001d50 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1d50:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1d52:	4b23      	ldr	r3, [pc, #140]	; (1de0 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1d54:	781b      	ldrb	r3, [r3, #0]
    1d56:	f083 0301 	eor.w	r3, r3, #1
    1d5a:	b2db      	uxtb	r3, r3
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d03d      	beq.n	1ddc <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1d60:	4b1f      	ldr	r3, [pc, #124]	; (1de0 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1d62:	2201      	movs	r2, #1
    1d64:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1d66:	4b1f      	ldr	r3, [pc, #124]	; (1de4 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1d68:	685b      	ldr	r3, [r3, #4]
    1d6a:	2100      	movs	r1, #0
    1d6c:	2000      	movs	r0, #0
    1d6e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1d70:	4b1c      	ldr	r3, [pc, #112]	; (1de4 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1d72:	689b      	ldr	r3, [r3, #8]
    1d74:	2057      	movs	r0, #87	; 0x57
    1d76:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d78:	4b1b      	ldr	r3, [pc, #108]	; (1de8 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1d7a:	681b      	ldr	r3, [r3, #0]
    1d7c:	2000      	movs	r0, #0
    1d7e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1d80:	4b1a      	ldr	r3, [pc, #104]	; (1dec <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	2000      	movs	r0, #0
    1d86:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1d88:	4b19      	ldr	r3, [pc, #100]	; (1df0 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	2000      	movs	r0, #0
    1d8e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1d90:	4b18      	ldr	r3, [pc, #96]	; (1df4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1d92:	685b      	ldr	r3, [r3, #4]
    1d94:	2000      	movs	r0, #0
    1d96:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1d98:	4b16      	ldr	r3, [pc, #88]	; (1df4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1d9a:	689b      	ldr	r3, [r3, #8]
    1d9c:	2057      	movs	r0, #87	; 0x57
    1d9e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1da0:	4b15      	ldr	r3, [pc, #84]	; (1df8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1da2:	681b      	ldr	r3, [r3, #0]
    1da4:	2000      	movs	r0, #0
    1da6:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1da8:	4b13      	ldr	r3, [pc, #76]	; (1df8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1daa:	685b      	ldr	r3, [r3, #4]
    1dac:	2100      	movs	r1, #0
    1dae:	2057      	movs	r0, #87	; 0x57
    1db0:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1db2:	4b12      	ldr	r3, [pc, #72]	; (1dfc <Clock_Ip_CallEmptyCallbacks+0xac>)
    1db4:	681b      	ldr	r3, [r3, #0]
    1db6:	2000      	movs	r0, #0
    1db8:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1dba:	4b11      	ldr	r3, [pc, #68]	; (1e00 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1dbc:	685b      	ldr	r3, [r3, #4]
    1dbe:	2000      	movs	r0, #0
    1dc0:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1dc2:	4b0f      	ldr	r3, [pc, #60]	; (1e00 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1dc4:	689b      	ldr	r3, [r3, #8]
    1dc6:	2057      	movs	r0, #87	; 0x57
    1dc8:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1dca:	4b0e      	ldr	r3, [pc, #56]	; (1e04 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1dcc:	685b      	ldr	r3, [r3, #4]
    1dce:	2000      	movs	r0, #0
    1dd0:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1dd2:	4b0d      	ldr	r3, [pc, #52]	; (1e08 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1dd4:	681b      	ldr	r3, [r3, #0]
    1dd6:	2100      	movs	r1, #0
    1dd8:	2000      	movs	r0, #0
    1dda:	4798      	blx	r3
    }
}
    1ddc:	bf00      	nop
    1dde:	bd08      	pop	{r3, pc}
    1de0:	1fff8b6c 	.word	0x1fff8b6c
    1de4:	00015590 	.word	0x00015590
    1de8:	000154a4 	.word	0x000154a4
    1dec:	000154e0 	.word	0x000154e0
    1df0:	000154e8 	.word	0x000154e8
    1df4:	00015510 	.word	0x00015510
    1df8:	0001551c 	.word	0x0001551c
    1dfc:	00015554 	.word	0x00015554
    1e00:	000155a0 	.word	0x000155a0
    1e04:	000155cc 	.word	0x000155cc
    1e08:	000155c8 	.word	0x000155c8

00001e0c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1e0c:	b500      	push	{lr}
    1e0e:	b085      	sub	sp, #20
    1e10:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1e12:	9b01      	ldr	r3, [sp, #4]
    1e14:	7adb      	ldrb	r3, [r3, #11]
    1e16:	9303      	str	r3, [sp, #12]
    1e18:	e01f      	b.n	1e5a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1e1a:	9b03      	ldr	r3, [sp, #12]
    1e1c:	1e5a      	subs	r2, r3, #1
    1e1e:	9b01      	ldr	r3, [sp, #4]
    1e20:	320d      	adds	r2, #13
    1e22:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1e26:	495a      	ldr	r1, [pc, #360]	; (1f90 <Clock_Ip_ResetClockConfiguration+0x184>)
    1e28:	4613      	mov	r3, r2
    1e2a:	00db      	lsls	r3, r3, #3
    1e2c:	4413      	add	r3, r2
    1e2e:	440b      	add	r3, r1
    1e30:	3301      	adds	r3, #1
    1e32:	781b      	ldrb	r3, [r3, #0]
    1e34:	461a      	mov	r2, r3
    1e36:	4b57      	ldr	r3, [pc, #348]	; (1f94 <Clock_Ip_ResetClockConfiguration+0x188>)
    1e38:	5c9b      	ldrb	r3, [r3, r2]
    1e3a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1e3c:	4a56      	ldr	r2, [pc, #344]	; (1f98 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1e3e:	9b02      	ldr	r3, [sp, #8]
    1e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e44:	9a03      	ldr	r2, [sp, #12]
    1e46:	3a01      	subs	r2, #1
    1e48:	320d      	adds	r2, #13
    1e4a:	00d2      	lsls	r2, r2, #3
    1e4c:	9901      	ldr	r1, [sp, #4]
    1e4e:	440a      	add	r2, r1
    1e50:	4610      	mov	r0, r2
    1e52:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1e54:	9b03      	ldr	r3, [sp, #12]
    1e56:	3b01      	subs	r3, #1
    1e58:	9303      	str	r3, [sp, #12]
    1e5a:	9b03      	ldr	r3, [sp, #12]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d1dc      	bne.n	1e1a <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1e60:	9b01      	ldr	r3, [sp, #4]
    1e62:	7b9b      	ldrb	r3, [r3, #14]
    1e64:	9303      	str	r3, [sp, #12]
    1e66:	e026      	b.n	1eb6 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1e68:	9b03      	ldr	r3, [sp, #12]
    1e6a:	3b01      	subs	r3, #1
    1e6c:	9a01      	ldr	r2, [sp, #4]
    1e6e:	3324      	adds	r3, #36	; 0x24
    1e70:	011b      	lsls	r3, r3, #4
    1e72:	4413      	add	r3, r2
    1e74:	3304      	adds	r3, #4
    1e76:	681a      	ldr	r2, [r3, #0]
    1e78:	4945      	ldr	r1, [pc, #276]	; (1f90 <Clock_Ip_ResetClockConfiguration+0x184>)
    1e7a:	4613      	mov	r3, r2
    1e7c:	00db      	lsls	r3, r3, #3
    1e7e:	4413      	add	r3, r2
    1e80:	440b      	add	r3, r1
    1e82:	3301      	adds	r3, #1
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	461a      	mov	r2, r3
    1e88:	4b44      	ldr	r3, [pc, #272]	; (1f9c <Clock_Ip_ResetClockConfiguration+0x190>)
    1e8a:	5c9b      	ldrb	r3, [r3, r2]
    1e8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1e8e:	4944      	ldr	r1, [pc, #272]	; (1fa0 <Clock_Ip_ResetClockConfiguration+0x194>)
    1e90:	9a02      	ldr	r2, [sp, #8]
    1e92:	4613      	mov	r3, r2
    1e94:	005b      	lsls	r3, r3, #1
    1e96:	4413      	add	r3, r2
    1e98:	009b      	lsls	r3, r3, #2
    1e9a:	440b      	add	r3, r1
    1e9c:	681b      	ldr	r3, [r3, #0]
    1e9e:	9a03      	ldr	r2, [sp, #12]
    1ea0:	3a01      	subs	r2, #1
    1ea2:	3224      	adds	r2, #36	; 0x24
    1ea4:	0112      	lsls	r2, r2, #4
    1ea6:	9901      	ldr	r1, [sp, #4]
    1ea8:	440a      	add	r2, r1
    1eaa:	3204      	adds	r2, #4
    1eac:	4610      	mov	r0, r2
    1eae:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1eb0:	9b03      	ldr	r3, [sp, #12]
    1eb2:	3b01      	subs	r3, #1
    1eb4:	9303      	str	r3, [sp, #12]
    1eb6:	9b03      	ldr	r3, [sp, #12]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d1d5      	bne.n	1e68 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1ebc:	9b01      	ldr	r3, [sp, #4]
    1ebe:	7a9b      	ldrb	r3, [r3, #10]
    1ec0:	9303      	str	r3, [sp, #12]
    1ec2:	e02a      	b.n	1f1a <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ec4:	9b03      	ldr	r3, [sp, #12]
    1ec6:	1e5a      	subs	r2, r3, #1
    1ec8:	9901      	ldr	r1, [sp, #4]
    1eca:	4613      	mov	r3, r2
    1ecc:	009b      	lsls	r3, r3, #2
    1ece:	4413      	add	r3, r2
    1ed0:	00db      	lsls	r3, r3, #3
    1ed2:	440b      	add	r3, r1
    1ed4:	3340      	adds	r3, #64	; 0x40
    1ed6:	681a      	ldr	r2, [r3, #0]
    1ed8:	492d      	ldr	r1, [pc, #180]	; (1f90 <Clock_Ip_ResetClockConfiguration+0x184>)
    1eda:	4613      	mov	r3, r2
    1edc:	00db      	lsls	r3, r3, #3
    1ede:	4413      	add	r3, r2
    1ee0:	440b      	add	r3, r1
    1ee2:	3301      	adds	r3, #1
    1ee4:	781b      	ldrb	r3, [r3, #0]
    1ee6:	461a      	mov	r2, r3
    1ee8:	4b2e      	ldr	r3, [pc, #184]	; (1fa4 <Clock_Ip_ResetClockConfiguration+0x198>)
    1eea:	5c9b      	ldrb	r3, [r3, r2]
    1eec:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1eee:	492e      	ldr	r1, [pc, #184]	; (1fa8 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1ef0:	9a02      	ldr	r2, [sp, #8]
    1ef2:	4613      	mov	r3, r2
    1ef4:	009b      	lsls	r3, r3, #2
    1ef6:	4413      	add	r3, r2
    1ef8:	009b      	lsls	r3, r3, #2
    1efa:	440b      	add	r3, r1
    1efc:	6819      	ldr	r1, [r3, #0]
    1efe:	9b03      	ldr	r3, [sp, #12]
    1f00:	1e5a      	subs	r2, r3, #1
    1f02:	4613      	mov	r3, r2
    1f04:	009b      	lsls	r3, r3, #2
    1f06:	4413      	add	r3, r2
    1f08:	00db      	lsls	r3, r3, #3
    1f0a:	3340      	adds	r3, #64	; 0x40
    1f0c:	9a01      	ldr	r2, [sp, #4]
    1f0e:	4413      	add	r3, r2
    1f10:	4618      	mov	r0, r3
    1f12:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f14:	9b03      	ldr	r3, [sp, #12]
    1f16:	3b01      	subs	r3, #1
    1f18:	9303      	str	r3, [sp, #12]
    1f1a:	9b03      	ldr	r3, [sp, #12]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d1d1      	bne.n	1ec4 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1f20:	9b01      	ldr	r3, [sp, #4]
    1f22:	7a5b      	ldrb	r3, [r3, #9]
    1f24:	9303      	str	r3, [sp, #12]
    1f26:	e02b      	b.n	1f80 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f28:	9b03      	ldr	r3, [sp, #12]
    1f2a:	1e5a      	subs	r2, r3, #1
    1f2c:	9901      	ldr	r1, [sp, #4]
    1f2e:	4613      	mov	r3, r2
    1f30:	009b      	lsls	r3, r3, #2
    1f32:	4413      	add	r3, r2
    1f34:	009b      	lsls	r3, r3, #2
    1f36:	440b      	add	r3, r1
    1f38:	332c      	adds	r3, #44	; 0x2c
    1f3a:	681a      	ldr	r2, [r3, #0]
    1f3c:	4914      	ldr	r1, [pc, #80]	; (1f90 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f3e:	4613      	mov	r3, r2
    1f40:	00db      	lsls	r3, r3, #3
    1f42:	4413      	add	r3, r2
    1f44:	440b      	add	r3, r1
    1f46:	3301      	adds	r3, #1
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	461a      	mov	r2, r3
    1f4c:	4b17      	ldr	r3, [pc, #92]	; (1fac <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1f4e:	5c9b      	ldrb	r3, [r3, r2]
    1f50:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1f52:	4917      	ldr	r1, [pc, #92]	; (1fb0 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1f54:	9a02      	ldr	r2, [sp, #8]
    1f56:	4613      	mov	r3, r2
    1f58:	009b      	lsls	r3, r3, #2
    1f5a:	4413      	add	r3, r2
    1f5c:	009b      	lsls	r3, r3, #2
    1f5e:	440b      	add	r3, r1
    1f60:	6819      	ldr	r1, [r3, #0]
    1f62:	9b03      	ldr	r3, [sp, #12]
    1f64:	1e5a      	subs	r2, r3, #1
    1f66:	4613      	mov	r3, r2
    1f68:	009b      	lsls	r3, r3, #2
    1f6a:	4413      	add	r3, r2
    1f6c:	009b      	lsls	r3, r3, #2
    1f6e:	3328      	adds	r3, #40	; 0x28
    1f70:	9a01      	ldr	r2, [sp, #4]
    1f72:	4413      	add	r3, r2
    1f74:	3304      	adds	r3, #4
    1f76:	4618      	mov	r0, r3
    1f78:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1f7a:	9b03      	ldr	r3, [sp, #12]
    1f7c:	3b01      	subs	r3, #1
    1f7e:	9303      	str	r3, [sp, #12]
    1f80:	9b03      	ldr	r3, [sp, #12]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d1d0      	bne.n	1f28 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1f86:	bf00      	nop
    1f88:	bf00      	nop
    1f8a:	b005      	add	sp, #20
    1f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    1f90:	00014f94 	.word	0x00014f94
    1f94:	00014f64 	.word	0x00014f64
    1f98:	000155cc 	.word	0x000155cc
    1f9c:	00014f44 	.word	0x00014f44
    1fa0:	00015510 	.word	0x00015510
    1fa4:	00014f54 	.word	0x00014f54
    1fa8:	000155a0 	.word	0x000155a0
    1fac:	00014f14 	.word	0x00014f14
    1fb0:	000154e8 	.word	0x000154e8

00001fb4 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1fb4:	b500      	push	{lr}
    1fb6:	b085      	sub	sp, #20
    1fb8:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1fba:	2301      	movs	r3, #1
    1fbc:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1fbe:	9801      	ldr	r0, [sp, #4]
    1fc0:	f000 f818 	bl	1ff4 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1fc4:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <Clock_Ip_Init+0x3c>)
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d00a      	beq.n	1fe2 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1fcc:	f000 fb74 	bl	26b8 <Clock_Ip_GetPllStatus>
    1fd0:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1fd2:	9b02      	ldr	r3, [sp, #8]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d106      	bne.n	1fe6 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1fd8:	f000 fbf2 	bl	27c0 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1fdc:	2300      	movs	r3, #0
    1fde:	9303      	str	r3, [sp, #12]
    1fe0:	e001      	b.n	1fe6 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1fe2:	2300      	movs	r3, #0
    1fe4:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1fe6:	9b03      	ldr	r3, [sp, #12]
}
    1fe8:	4618      	mov	r0, r3
    1fea:	b005      	add	sp, #20
    1fec:	f85d fb04 	ldr.w	pc, [sp], #4
    1ff0:	1fff8b70 	.word	0x1fff8b70

00001ff4 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1ff4:	b510      	push	{r4, lr}
    1ff6:	b084      	sub	sp, #16
    1ff8:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1ffa:	4a9f      	ldr	r2, [pc, #636]	; (2278 <Clock_Ip_InitClock+0x284>)
    1ffc:	9b01      	ldr	r3, [sp, #4]
    1ffe:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2000:	2101      	movs	r1, #1
    2002:	9801      	ldr	r0, [sp, #4]
    2004:	f003 fa90 	bl	5528 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2008:	4b9b      	ldr	r3, [pc, #620]	; (2278 <Clock_Ip_InitClock+0x284>)
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d030      	beq.n	2072 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2010:	2300      	movs	r3, #0
    2012:	9303      	str	r3, [sp, #12]
    2014:	e027      	b.n	2066 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2016:	9901      	ldr	r1, [sp, #4]
    2018:	9a03      	ldr	r2, [sp, #12]
    201a:	4613      	mov	r3, r2
    201c:	009b      	lsls	r3, r3, #2
    201e:	4413      	add	r3, r2
    2020:	009b      	lsls	r3, r3, #2
    2022:	440b      	add	r3, r1
    2024:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2028:	681a      	ldr	r2, [r3, #0]
    202a:	4994      	ldr	r1, [pc, #592]	; (227c <Clock_Ip_InitClock+0x288>)
    202c:	4613      	mov	r3, r2
    202e:	00db      	lsls	r3, r3, #3
    2030:	4413      	add	r3, r2
    2032:	440b      	add	r3, r1
    2034:	3301      	adds	r3, #1
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	461a      	mov	r2, r3
    203a:	4b91      	ldr	r3, [pc, #580]	; (2280 <Clock_Ip_InitClock+0x28c>)
    203c:	5c9b      	ldrb	r3, [r3, r2]
    203e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2040:	4a90      	ldr	r2, [pc, #576]	; (2284 <Clock_Ip_InitClock+0x290>)
    2042:	9b02      	ldr	r3, [sp, #8]
    2044:	011b      	lsls	r3, r3, #4
    2046:	4413      	add	r3, r2
    2048:	6819      	ldr	r1, [r3, #0]
    204a:	9a03      	ldr	r2, [sp, #12]
    204c:	4613      	mov	r3, r2
    204e:	009b      	lsls	r3, r3, #2
    2050:	4413      	add	r3, r2
    2052:	009b      	lsls	r3, r3, #2
    2054:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2058:	9a01      	ldr	r2, [sp, #4]
    205a:	4413      	add	r3, r2
    205c:	4618      	mov	r0, r3
    205e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2060:	9b03      	ldr	r3, [sp, #12]
    2062:	3301      	adds	r3, #1
    2064:	9303      	str	r3, [sp, #12]
    2066:	9b01      	ldr	r3, [sp, #4]
    2068:	7c9b      	ldrb	r3, [r3, #18]
    206a:	461a      	mov	r2, r3
    206c:	9b03      	ldr	r3, [sp, #12]
    206e:	4293      	cmp	r3, r2
    2070:	d3d1      	bcc.n	2016 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2072:	9801      	ldr	r0, [sp, #4]
    2074:	f7ff feca 	bl	1e0c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2078:	2300      	movs	r3, #0
    207a:	9303      	str	r3, [sp, #12]
    207c:	e029      	b.n	20d2 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    207e:	9901      	ldr	r1, [sp, #4]
    2080:	9a03      	ldr	r2, [sp, #12]
    2082:	4613      	mov	r3, r2
    2084:	005b      	lsls	r3, r3, #1
    2086:	4413      	add	r3, r2
    2088:	009b      	lsls	r3, r3, #2
    208a:	440b      	add	r3, r1
    208c:	3314      	adds	r3, #20
    208e:	681a      	ldr	r2, [r3, #0]
    2090:	497a      	ldr	r1, [pc, #488]	; (227c <Clock_Ip_InitClock+0x288>)
    2092:	4613      	mov	r3, r2
    2094:	00db      	lsls	r3, r3, #3
    2096:	4413      	add	r3, r2
    2098:	440b      	add	r3, r1
    209a:	3301      	adds	r3, #1
    209c:	781b      	ldrb	r3, [r3, #0]
    209e:	461a      	mov	r2, r3
    20a0:	4b79      	ldr	r3, [pc, #484]	; (2288 <Clock_Ip_InitClock+0x294>)
    20a2:	5c9b      	ldrb	r3, [r3, r2]
    20a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    20a6:	4979      	ldr	r1, [pc, #484]	; (228c <Clock_Ip_InitClock+0x298>)
    20a8:	9a02      	ldr	r2, [sp, #8]
    20aa:	4613      	mov	r3, r2
    20ac:	005b      	lsls	r3, r3, #1
    20ae:	4413      	add	r3, r2
    20b0:	009b      	lsls	r3, r3, #2
    20b2:	440b      	add	r3, r1
    20b4:	6819      	ldr	r1, [r3, #0]
    20b6:	9a03      	ldr	r2, [sp, #12]
    20b8:	4613      	mov	r3, r2
    20ba:	005b      	lsls	r3, r3, #1
    20bc:	4413      	add	r3, r2
    20be:	009b      	lsls	r3, r3, #2
    20c0:	3310      	adds	r3, #16
    20c2:	9a01      	ldr	r2, [sp, #4]
    20c4:	4413      	add	r3, r2
    20c6:	3304      	adds	r3, #4
    20c8:	4618      	mov	r0, r3
    20ca:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    20cc:	9b03      	ldr	r3, [sp, #12]
    20ce:	3301      	adds	r3, #1
    20d0:	9303      	str	r3, [sp, #12]
    20d2:	9b01      	ldr	r3, [sp, #4]
    20d4:	7a1b      	ldrb	r3, [r3, #8]
    20d6:	461a      	mov	r2, r3
    20d8:	9b03      	ldr	r3, [sp, #12]
    20da:	4293      	cmp	r3, r2
    20dc:	d3cf      	bcc.n	207e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    20de:	2300      	movs	r3, #0
    20e0:	9303      	str	r3, [sp, #12]
    20e2:	e02a      	b.n	213a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    20e4:	9901      	ldr	r1, [sp, #4]
    20e6:	9a03      	ldr	r2, [sp, #12]
    20e8:	4613      	mov	r3, r2
    20ea:	009b      	lsls	r3, r3, #2
    20ec:	4413      	add	r3, r2
    20ee:	009b      	lsls	r3, r3, #2
    20f0:	440b      	add	r3, r1
    20f2:	332c      	adds	r3, #44	; 0x2c
    20f4:	681a      	ldr	r2, [r3, #0]
    20f6:	4961      	ldr	r1, [pc, #388]	; (227c <Clock_Ip_InitClock+0x288>)
    20f8:	4613      	mov	r3, r2
    20fa:	00db      	lsls	r3, r3, #3
    20fc:	4413      	add	r3, r2
    20fe:	440b      	add	r3, r1
    2100:	3301      	adds	r3, #1
    2102:	781b      	ldrb	r3, [r3, #0]
    2104:	461a      	mov	r2, r3
    2106:	4b62      	ldr	r3, [pc, #392]	; (2290 <Clock_Ip_InitClock+0x29c>)
    2108:	5c9b      	ldrb	r3, [r3, r2]
    210a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    210c:	4961      	ldr	r1, [pc, #388]	; (2294 <Clock_Ip_InitClock+0x2a0>)
    210e:	9a02      	ldr	r2, [sp, #8]
    2110:	4613      	mov	r3, r2
    2112:	009b      	lsls	r3, r3, #2
    2114:	4413      	add	r3, r2
    2116:	009b      	lsls	r3, r3, #2
    2118:	440b      	add	r3, r1
    211a:	3304      	adds	r3, #4
    211c:	6819      	ldr	r1, [r3, #0]
    211e:	9a03      	ldr	r2, [sp, #12]
    2120:	4613      	mov	r3, r2
    2122:	009b      	lsls	r3, r3, #2
    2124:	4413      	add	r3, r2
    2126:	009b      	lsls	r3, r3, #2
    2128:	3328      	adds	r3, #40	; 0x28
    212a:	9a01      	ldr	r2, [sp, #4]
    212c:	4413      	add	r3, r2
    212e:	3304      	adds	r3, #4
    2130:	4618      	mov	r0, r3
    2132:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2134:	9b03      	ldr	r3, [sp, #12]
    2136:	3301      	adds	r3, #1
    2138:	9303      	str	r3, [sp, #12]
    213a:	9b01      	ldr	r3, [sp, #4]
    213c:	7a5b      	ldrb	r3, [r3, #9]
    213e:	461a      	mov	r2, r3
    2140:	9b03      	ldr	r3, [sp, #12]
    2142:	4293      	cmp	r3, r2
    2144:	d3ce      	bcc.n	20e4 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2146:	9801      	ldr	r0, [sp, #4]
    2148:	f7ff fdb0 	bl	1cac <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    214c:	2300      	movs	r3, #0
    214e:	9303      	str	r3, [sp, #12]
    2150:	e028      	b.n	21a4 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2152:	9901      	ldr	r1, [sp, #4]
    2154:	9a03      	ldr	r2, [sp, #12]
    2156:	4613      	mov	r3, r2
    2158:	009b      	lsls	r3, r3, #2
    215a:	4413      	add	r3, r2
    215c:	009b      	lsls	r3, r3, #2
    215e:	440b      	add	r3, r1
    2160:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2164:	681a      	ldr	r2, [r3, #0]
    2166:	4945      	ldr	r1, [pc, #276]	; (227c <Clock_Ip_InitClock+0x288>)
    2168:	4613      	mov	r3, r2
    216a:	00db      	lsls	r3, r3, #3
    216c:	4413      	add	r3, r2
    216e:	440b      	add	r3, r1
    2170:	3301      	adds	r3, #1
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	461a      	mov	r2, r3
    2176:	4b48      	ldr	r3, [pc, #288]	; (2298 <Clock_Ip_InitClock+0x2a4>)
    2178:	5c9b      	ldrb	r3, [r3, r2]
    217a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    217c:	4a47      	ldr	r2, [pc, #284]	; (229c <Clock_Ip_InitClock+0x2a8>)
    217e:	9b02      	ldr	r3, [sp, #8]
    2180:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2184:	9a03      	ldr	r2, [sp, #12]
    2186:	4613      	mov	r3, r2
    2188:	009b      	lsls	r3, r3, #2
    218a:	4413      	add	r3, r2
    218c:	009b      	lsls	r3, r3, #2
    218e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2192:	9a01      	ldr	r2, [sp, #4]
    2194:	4413      	add	r3, r2
    2196:	3304      	adds	r3, #4
    2198:	9903      	ldr	r1, [sp, #12]
    219a:	4618      	mov	r0, r3
    219c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    219e:	9b03      	ldr	r3, [sp, #12]
    21a0:	3301      	adds	r3, #1
    21a2:	9303      	str	r3, [sp, #12]
    21a4:	9b01      	ldr	r3, [sp, #4]
    21a6:	7c5b      	ldrb	r3, [r3, #17]
    21a8:	461a      	mov	r2, r3
    21aa:	9b03      	ldr	r3, [sp, #12]
    21ac:	4293      	cmp	r3, r2
    21ae:	d3d0      	bcc.n	2152 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    21b0:	2300      	movs	r3, #0
    21b2:	9303      	str	r3, [sp, #12]
    21b4:	e026      	b.n	2204 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    21b6:	9901      	ldr	r1, [sp, #4]
    21b8:	9a03      	ldr	r2, [sp, #12]
    21ba:	4613      	mov	r3, r2
    21bc:	005b      	lsls	r3, r3, #1
    21be:	4413      	add	r3, r2
    21c0:	009b      	lsls	r3, r3, #2
    21c2:	440b      	add	r3, r1
    21c4:	f503 730e 	add.w	r3, r3, #568	; 0x238
    21c8:	681a      	ldr	r2, [r3, #0]
    21ca:	492c      	ldr	r1, [pc, #176]	; (227c <Clock_Ip_InitClock+0x288>)
    21cc:	4613      	mov	r3, r2
    21ce:	00db      	lsls	r3, r3, #3
    21d0:	4413      	add	r3, r2
    21d2:	440b      	add	r3, r1
    21d4:	3301      	adds	r3, #1
    21d6:	781b      	ldrb	r3, [r3, #0]
    21d8:	461a      	mov	r2, r3
    21da:	4b31      	ldr	r3, [pc, #196]	; (22a0 <Clock_Ip_InitClock+0x2ac>)
    21dc:	5c9b      	ldrb	r3, [r3, r2]
    21de:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    21e0:	4a30      	ldr	r2, [pc, #192]	; (22a4 <Clock_Ip_InitClock+0x2b0>)
    21e2:	9b02      	ldr	r3, [sp, #8]
    21e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    21e8:	9a03      	ldr	r2, [sp, #12]
    21ea:	4613      	mov	r3, r2
    21ec:	005b      	lsls	r3, r3, #1
    21ee:	4413      	add	r3, r2
    21f0:	009b      	lsls	r3, r3, #2
    21f2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    21f6:	9a01      	ldr	r2, [sp, #4]
    21f8:	4413      	add	r3, r2
    21fa:	4618      	mov	r0, r3
    21fc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    21fe:	9b03      	ldr	r3, [sp, #12]
    2200:	3301      	adds	r3, #1
    2202:	9303      	str	r3, [sp, #12]
    2204:	9b01      	ldr	r3, [sp, #4]
    2206:	7b5b      	ldrb	r3, [r3, #13]
    2208:	461a      	mov	r2, r3
    220a:	9b03      	ldr	r3, [sp, #12]
    220c:	4293      	cmp	r3, r2
    220e:	d3d2      	bcc.n	21b6 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2210:	2300      	movs	r3, #0
    2212:	9303      	str	r3, [sp, #12]
    2214:	e026      	b.n	2264 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2216:	9901      	ldr	r1, [sp, #4]
    2218:	9a03      	ldr	r2, [sp, #12]
    221a:	4613      	mov	r3, r2
    221c:	005b      	lsls	r3, r3, #1
    221e:	4413      	add	r3, r2
    2220:	009b      	lsls	r3, r3, #2
    2222:	440b      	add	r3, r1
    2224:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2228:	681a      	ldr	r2, [r3, #0]
    222a:	4914      	ldr	r1, [pc, #80]	; (227c <Clock_Ip_InitClock+0x288>)
    222c:	4613      	mov	r3, r2
    222e:	00db      	lsls	r3, r3, #3
    2230:	4413      	add	r3, r2
    2232:	440b      	add	r3, r1
    2234:	3301      	adds	r3, #1
    2236:	781b      	ldrb	r3, [r3, #0]
    2238:	461a      	mov	r2, r3
    223a:	4b1b      	ldr	r3, [pc, #108]	; (22a8 <Clock_Ip_InitClock+0x2b4>)
    223c:	5c9b      	ldrb	r3, [r3, r2]
    223e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2240:	4a1a      	ldr	r2, [pc, #104]	; (22ac <Clock_Ip_InitClock+0x2b8>)
    2242:	9b02      	ldr	r3, [sp, #8]
    2244:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2248:	9a03      	ldr	r2, [sp, #12]
    224a:	4613      	mov	r3, r2
    224c:	005b      	lsls	r3, r3, #1
    224e:	4413      	add	r3, r2
    2250:	009b      	lsls	r3, r3, #2
    2252:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2256:	9a01      	ldr	r2, [sp, #4]
    2258:	4413      	add	r3, r2
    225a:	4618      	mov	r0, r3
    225c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    225e:	9b03      	ldr	r3, [sp, #12]
    2260:	3301      	adds	r3, #1
    2262:	9303      	str	r3, [sp, #12]
    2264:	9b01      	ldr	r3, [sp, #4]
    2266:	7b1b      	ldrb	r3, [r3, #12]
    2268:	461a      	mov	r2, r3
    226a:	9b03      	ldr	r3, [sp, #12]
    226c:	4293      	cmp	r3, r2
    226e:	d3d2      	bcc.n	2216 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2270:	2300      	movs	r3, #0
    2272:	9303      	str	r3, [sp, #12]
    2274:	e044      	b.n	2300 <Clock_Ip_InitClock+0x30c>
    2276:	bf00      	nop
    2278:	1fff8b68 	.word	0x1fff8b68
    227c:	00014f94 	.word	0x00014f94
    2280:	00014f84 	.word	0x00014f84
    2284:	00015590 	.word	0x00015590
    2288:	00014f24 	.word	0x00014f24
    228c:	00015554 	.word	0x00015554
    2290:	00014f14 	.word	0x00014f14
    2294:	000154e8 	.word	0x000154e8
    2298:	00014f74 	.word	0x00014f74
    229c:	000155c8 	.word	0x000155c8
    22a0:	00014f04 	.word	0x00014f04
    22a4:	000154e0 	.word	0x000154e0
    22a8:	00014ef4 	.word	0x00014ef4
    22ac:	000154a4 	.word	0x000154a4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22b0:	9901      	ldr	r1, [sp, #4]
    22b2:	9a03      	ldr	r2, [sp, #12]
    22b4:	4613      	mov	r3, r2
    22b6:	005b      	lsls	r3, r3, #1
    22b8:	4413      	add	r3, r2
    22ba:	009b      	lsls	r3, r3, #2
    22bc:	440b      	add	r3, r1
    22be:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22c2:	681a      	ldr	r2, [r3, #0]
    22c4:	49ac      	ldr	r1, [pc, #688]	; (2578 <Clock_Ip_InitClock+0x584>)
    22c6:	4613      	mov	r3, r2
    22c8:	00db      	lsls	r3, r3, #3
    22ca:	4413      	add	r3, r2
    22cc:	440b      	add	r3, r1
    22ce:	3301      	adds	r3, #1
    22d0:	781b      	ldrb	r3, [r3, #0]
    22d2:	461a      	mov	r2, r3
    22d4:	4ba9      	ldr	r3, [pc, #676]	; (257c <Clock_Ip_InitClock+0x588>)
    22d6:	5c9b      	ldrb	r3, [r3, r2]
    22d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    22da:	4aa9      	ldr	r2, [pc, #676]	; (2580 <Clock_Ip_InitClock+0x58c>)
    22dc:	9b02      	ldr	r3, [sp, #8]
    22de:	00db      	lsls	r3, r3, #3
    22e0:	4413      	add	r3, r2
    22e2:	6859      	ldr	r1, [r3, #4]
    22e4:	9a03      	ldr	r2, [sp, #12]
    22e6:	4613      	mov	r3, r2
    22e8:	005b      	lsls	r3, r3, #1
    22ea:	4413      	add	r3, r2
    22ec:	009b      	lsls	r3, r3, #2
    22ee:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22f2:	9a01      	ldr	r2, [sp, #4]
    22f4:	4413      	add	r3, r2
    22f6:	4618      	mov	r0, r3
    22f8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22fa:	9b03      	ldr	r3, [sp, #12]
    22fc:	3301      	adds	r3, #1
    22fe:	9303      	str	r3, [sp, #12]
    2300:	9b01      	ldr	r3, [sp, #4]
    2302:	7b5b      	ldrb	r3, [r3, #13]
    2304:	461a      	mov	r2, r3
    2306:	9b03      	ldr	r3, [sp, #12]
    2308:	4293      	cmp	r3, r2
    230a:	d3d1      	bcc.n	22b0 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    230c:	2300      	movs	r3, #0
    230e:	9303      	str	r3, [sp, #12]
    2310:	e029      	b.n	2366 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2312:	9901      	ldr	r1, [sp, #4]
    2314:	9a03      	ldr	r2, [sp, #12]
    2316:	4613      	mov	r3, r2
    2318:	009b      	lsls	r3, r3, #2
    231a:	4413      	add	r3, r2
    231c:	00db      	lsls	r3, r3, #3
    231e:	440b      	add	r3, r1
    2320:	3340      	adds	r3, #64	; 0x40
    2322:	681a      	ldr	r2, [r3, #0]
    2324:	4994      	ldr	r1, [pc, #592]	; (2578 <Clock_Ip_InitClock+0x584>)
    2326:	4613      	mov	r3, r2
    2328:	00db      	lsls	r3, r3, #3
    232a:	4413      	add	r3, r2
    232c:	440b      	add	r3, r1
    232e:	3301      	adds	r3, #1
    2330:	781b      	ldrb	r3, [r3, #0]
    2332:	461a      	mov	r2, r3
    2334:	4b93      	ldr	r3, [pc, #588]	; (2584 <Clock_Ip_InitClock+0x590>)
    2336:	5c9b      	ldrb	r3, [r3, r2]
    2338:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    233a:	4993      	ldr	r1, [pc, #588]	; (2588 <Clock_Ip_InitClock+0x594>)
    233c:	9a02      	ldr	r2, [sp, #8]
    233e:	4613      	mov	r3, r2
    2340:	009b      	lsls	r3, r3, #2
    2342:	4413      	add	r3, r2
    2344:	009b      	lsls	r3, r3, #2
    2346:	440b      	add	r3, r1
    2348:	3304      	adds	r3, #4
    234a:	6819      	ldr	r1, [r3, #0]
    234c:	9a03      	ldr	r2, [sp, #12]
    234e:	4613      	mov	r3, r2
    2350:	009b      	lsls	r3, r3, #2
    2352:	4413      	add	r3, r2
    2354:	00db      	lsls	r3, r3, #3
    2356:	3340      	adds	r3, #64	; 0x40
    2358:	9a01      	ldr	r2, [sp, #4]
    235a:	4413      	add	r3, r2
    235c:	4618      	mov	r0, r3
    235e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2360:	9b03      	ldr	r3, [sp, #12]
    2362:	3301      	adds	r3, #1
    2364:	9303      	str	r3, [sp, #12]
    2366:	9b01      	ldr	r3, [sp, #4]
    2368:	7a9b      	ldrb	r3, [r3, #10]
    236a:	461a      	mov	r2, r3
    236c:	9b03      	ldr	r3, [sp, #12]
    236e:	4293      	cmp	r3, r2
    2370:	d3cf      	bcc.n	2312 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2372:	2300      	movs	r3, #0
    2374:	9303      	str	r3, [sp, #12]
    2376:	e029      	b.n	23cc <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2378:	9901      	ldr	r1, [sp, #4]
    237a:	9a03      	ldr	r2, [sp, #12]
    237c:	4613      	mov	r3, r2
    237e:	009b      	lsls	r3, r3, #2
    2380:	4413      	add	r3, r2
    2382:	009b      	lsls	r3, r3, #2
    2384:	440b      	add	r3, r1
    2386:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    238a:	681a      	ldr	r2, [r3, #0]
    238c:	497a      	ldr	r1, [pc, #488]	; (2578 <Clock_Ip_InitClock+0x584>)
    238e:	4613      	mov	r3, r2
    2390:	00db      	lsls	r3, r3, #3
    2392:	4413      	add	r3, r2
    2394:	440b      	add	r3, r1
    2396:	3301      	adds	r3, #1
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	461a      	mov	r2, r3
    239c:	4b7b      	ldr	r3, [pc, #492]	; (258c <Clock_Ip_InitClock+0x598>)
    239e:	5c9b      	ldrb	r3, [r3, r2]
    23a0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    23a2:	4a7b      	ldr	r2, [pc, #492]	; (2590 <Clock_Ip_InitClock+0x59c>)
    23a4:	9b02      	ldr	r3, [sp, #8]
    23a6:	011b      	lsls	r3, r3, #4
    23a8:	4413      	add	r3, r2
    23aa:	3304      	adds	r3, #4
    23ac:	681c      	ldr	r4, [r3, #0]
    23ae:	9a03      	ldr	r2, [sp, #12]
    23b0:	4613      	mov	r3, r2
    23b2:	009b      	lsls	r3, r3, #2
    23b4:	4413      	add	r3, r2
    23b6:	009b      	lsls	r3, r3, #2
    23b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    23bc:	9a01      	ldr	r2, [sp, #4]
    23be:	4413      	add	r3, r2
    23c0:	9903      	ldr	r1, [sp, #12]
    23c2:	4618      	mov	r0, r3
    23c4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    23c6:	9b03      	ldr	r3, [sp, #12]
    23c8:	3301      	adds	r3, #1
    23ca:	9303      	str	r3, [sp, #12]
    23cc:	9b01      	ldr	r3, [sp, #4]
    23ce:	7c9b      	ldrb	r3, [r3, #18]
    23d0:	461a      	mov	r2, r3
    23d2:	9b03      	ldr	r3, [sp, #12]
    23d4:	4293      	cmp	r3, r2
    23d6:	d3cf      	bcc.n	2378 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    23d8:	2300      	movs	r3, #0
    23da:	9303      	str	r3, [sp, #12]
    23dc:	e02a      	b.n	2434 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    23de:	9901      	ldr	r1, [sp, #4]
    23e0:	9a03      	ldr	r2, [sp, #12]
    23e2:	4613      	mov	r3, r2
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	4413      	add	r3, r2
    23e8:	009b      	lsls	r3, r3, #2
    23ea:	440b      	add	r3, r1
    23ec:	332c      	adds	r3, #44	; 0x2c
    23ee:	681a      	ldr	r2, [r3, #0]
    23f0:	4961      	ldr	r1, [pc, #388]	; (2578 <Clock_Ip_InitClock+0x584>)
    23f2:	4613      	mov	r3, r2
    23f4:	00db      	lsls	r3, r3, #3
    23f6:	4413      	add	r3, r2
    23f8:	440b      	add	r3, r1
    23fa:	3301      	adds	r3, #1
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	461a      	mov	r2, r3
    2400:	4b64      	ldr	r3, [pc, #400]	; (2594 <Clock_Ip_InitClock+0x5a0>)
    2402:	5c9b      	ldrb	r3, [r3, r2]
    2404:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2406:	4964      	ldr	r1, [pc, #400]	; (2598 <Clock_Ip_InitClock+0x5a4>)
    2408:	9a02      	ldr	r2, [sp, #8]
    240a:	4613      	mov	r3, r2
    240c:	009b      	lsls	r3, r3, #2
    240e:	4413      	add	r3, r2
    2410:	009b      	lsls	r3, r3, #2
    2412:	440b      	add	r3, r1
    2414:	3308      	adds	r3, #8
    2416:	6819      	ldr	r1, [r3, #0]
    2418:	9a03      	ldr	r2, [sp, #12]
    241a:	4613      	mov	r3, r2
    241c:	009b      	lsls	r3, r3, #2
    241e:	4413      	add	r3, r2
    2420:	009b      	lsls	r3, r3, #2
    2422:	3328      	adds	r3, #40	; 0x28
    2424:	9a01      	ldr	r2, [sp, #4]
    2426:	4413      	add	r3, r2
    2428:	3304      	adds	r3, #4
    242a:	4618      	mov	r0, r3
    242c:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    242e:	9b03      	ldr	r3, [sp, #12]
    2430:	3301      	adds	r3, #1
    2432:	9303      	str	r3, [sp, #12]
    2434:	9b01      	ldr	r3, [sp, #4]
    2436:	7a5b      	ldrb	r3, [r3, #9]
    2438:	461a      	mov	r2, r3
    243a:	9b03      	ldr	r3, [sp, #12]
    243c:	4293      	cmp	r3, r2
    243e:	d3ce      	bcc.n	23de <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2440:	2300      	movs	r3, #0
    2442:	9303      	str	r3, [sp, #12]
    2444:	e029      	b.n	249a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2446:	9901      	ldr	r1, [sp, #4]
    2448:	9a03      	ldr	r2, [sp, #12]
    244a:	4613      	mov	r3, r2
    244c:	009b      	lsls	r3, r3, #2
    244e:	4413      	add	r3, r2
    2450:	00db      	lsls	r3, r3, #3
    2452:	440b      	add	r3, r1
    2454:	3340      	adds	r3, #64	; 0x40
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	4947      	ldr	r1, [pc, #284]	; (2578 <Clock_Ip_InitClock+0x584>)
    245a:	4613      	mov	r3, r2
    245c:	00db      	lsls	r3, r3, #3
    245e:	4413      	add	r3, r2
    2460:	440b      	add	r3, r1
    2462:	3301      	adds	r3, #1
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	461a      	mov	r2, r3
    2468:	4b46      	ldr	r3, [pc, #280]	; (2584 <Clock_Ip_InitClock+0x590>)
    246a:	5c9b      	ldrb	r3, [r3, r2]
    246c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    246e:	4946      	ldr	r1, [pc, #280]	; (2588 <Clock_Ip_InitClock+0x594>)
    2470:	9a02      	ldr	r2, [sp, #8]
    2472:	4613      	mov	r3, r2
    2474:	009b      	lsls	r3, r3, #2
    2476:	4413      	add	r3, r2
    2478:	009b      	lsls	r3, r3, #2
    247a:	440b      	add	r3, r1
    247c:	330c      	adds	r3, #12
    247e:	6819      	ldr	r1, [r3, #0]
    2480:	9a03      	ldr	r2, [sp, #12]
    2482:	4613      	mov	r3, r2
    2484:	009b      	lsls	r3, r3, #2
    2486:	4413      	add	r3, r2
    2488:	00db      	lsls	r3, r3, #3
    248a:	3340      	adds	r3, #64	; 0x40
    248c:	9a01      	ldr	r2, [sp, #4]
    248e:	4413      	add	r3, r2
    2490:	4618      	mov	r0, r3
    2492:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2494:	9b03      	ldr	r3, [sp, #12]
    2496:	3301      	adds	r3, #1
    2498:	9303      	str	r3, [sp, #12]
    249a:	9b01      	ldr	r3, [sp, #4]
    249c:	7a9b      	ldrb	r3, [r3, #10]
    249e:	461a      	mov	r2, r3
    24a0:	9b03      	ldr	r3, [sp, #12]
    24a2:	4293      	cmp	r3, r2
    24a4:	d3cf      	bcc.n	2446 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    24a6:	2300      	movs	r3, #0
    24a8:	9303      	str	r3, [sp, #12]
    24aa:	e025      	b.n	24f8 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    24ac:	9a01      	ldr	r2, [sp, #4]
    24ae:	9b03      	ldr	r3, [sp, #12]
    24b0:	3324      	adds	r3, #36	; 0x24
    24b2:	011b      	lsls	r3, r3, #4
    24b4:	4413      	add	r3, r2
    24b6:	3304      	adds	r3, #4
    24b8:	681a      	ldr	r2, [r3, #0]
    24ba:	492f      	ldr	r1, [pc, #188]	; (2578 <Clock_Ip_InitClock+0x584>)
    24bc:	4613      	mov	r3, r2
    24be:	00db      	lsls	r3, r3, #3
    24c0:	4413      	add	r3, r2
    24c2:	440b      	add	r3, r1
    24c4:	3301      	adds	r3, #1
    24c6:	781b      	ldrb	r3, [r3, #0]
    24c8:	461a      	mov	r2, r3
    24ca:	4b34      	ldr	r3, [pc, #208]	; (259c <Clock_Ip_InitClock+0x5a8>)
    24cc:	5c9b      	ldrb	r3, [r3, r2]
    24ce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    24d0:	4933      	ldr	r1, [pc, #204]	; (25a0 <Clock_Ip_InitClock+0x5ac>)
    24d2:	9a02      	ldr	r2, [sp, #8]
    24d4:	4613      	mov	r3, r2
    24d6:	005b      	lsls	r3, r3, #1
    24d8:	4413      	add	r3, r2
    24da:	009b      	lsls	r3, r3, #2
    24dc:	440b      	add	r3, r1
    24de:	3304      	adds	r3, #4
    24e0:	681b      	ldr	r3, [r3, #0]
    24e2:	9a03      	ldr	r2, [sp, #12]
    24e4:	3224      	adds	r2, #36	; 0x24
    24e6:	0112      	lsls	r2, r2, #4
    24e8:	9901      	ldr	r1, [sp, #4]
    24ea:	440a      	add	r2, r1
    24ec:	3204      	adds	r2, #4
    24ee:	4610      	mov	r0, r2
    24f0:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    24f2:	9b03      	ldr	r3, [sp, #12]
    24f4:	3301      	adds	r3, #1
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	9b01      	ldr	r3, [sp, #4]
    24fa:	7b9b      	ldrb	r3, [r3, #14]
    24fc:	461a      	mov	r2, r3
    24fe:	9b03      	ldr	r3, [sp, #12]
    2500:	4293      	cmp	r3, r2
    2502:	d3d3      	bcc.n	24ac <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2504:	4b27      	ldr	r3, [pc, #156]	; (25a4 <Clock_Ip_InitClock+0x5b0>)
    2506:	2200      	movs	r2, #0
    2508:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    250a:	4b26      	ldr	r3, [pc, #152]	; (25a4 <Clock_Ip_InitClock+0x5b0>)
    250c:	2200      	movs	r2, #0
    250e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2510:	4b24      	ldr	r3, [pc, #144]	; (25a4 <Clock_Ip_InitClock+0x5b0>)
    2512:	2201      	movs	r2, #1
    2514:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2516:	4b23      	ldr	r3, [pc, #140]	; (25a4 <Clock_Ip_InitClock+0x5b0>)
    2518:	2200      	movs	r2, #0
    251a:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    251c:	f000 fa9c 	bl	2a58 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2520:	2300      	movs	r3, #0
    2522:	9303      	str	r3, [sp, #12]
    2524:	e04c      	b.n	25c0 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2526:	9a01      	ldr	r2, [sp, #4]
    2528:	9b03      	ldr	r3, [sp, #12]
    252a:	330d      	adds	r3, #13
    252c:	00db      	lsls	r3, r3, #3
    252e:	4413      	add	r3, r2
    2530:	685b      	ldr	r3, [r3, #4]
    2532:	4a1d      	ldr	r2, [pc, #116]	; (25a8 <Clock_Ip_InitClock+0x5b4>)
    2534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2538:	2b03      	cmp	r3, #3
    253a:	d03b      	beq.n	25b4 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    253c:	9b01      	ldr	r3, [sp, #4]
    253e:	9a03      	ldr	r2, [sp, #12]
    2540:	320d      	adds	r2, #13
    2542:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2546:	490c      	ldr	r1, [pc, #48]	; (2578 <Clock_Ip_InitClock+0x584>)
    2548:	4613      	mov	r3, r2
    254a:	00db      	lsls	r3, r3, #3
    254c:	4413      	add	r3, r2
    254e:	440b      	add	r3, r1
    2550:	3301      	adds	r3, #1
    2552:	781b      	ldrb	r3, [r3, #0]
    2554:	461a      	mov	r2, r3
    2556:	4b15      	ldr	r3, [pc, #84]	; (25ac <Clock_Ip_InitClock+0x5b8>)
    2558:	5c9b      	ldrb	r3, [r3, r2]
    255a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    255c:	4a14      	ldr	r2, [pc, #80]	; (25b0 <Clock_Ip_InitClock+0x5bc>)
    255e:	9b02      	ldr	r3, [sp, #8]
    2560:	00db      	lsls	r3, r3, #3
    2562:	4413      	add	r3, r2
    2564:	685b      	ldr	r3, [r3, #4]
    2566:	9a03      	ldr	r2, [sp, #12]
    2568:	320d      	adds	r2, #13
    256a:	00d2      	lsls	r2, r2, #3
    256c:	9901      	ldr	r1, [sp, #4]
    256e:	440a      	add	r2, r1
    2570:	4610      	mov	r0, r2
    2572:	4798      	blx	r3
    2574:	e021      	b.n	25ba <Clock_Ip_InitClock+0x5c6>
    2576:	bf00      	nop
    2578:	00014f94 	.word	0x00014f94
    257c:	00014f04 	.word	0x00014f04
    2580:	000154e0 	.word	0x000154e0
    2584:	00014f54 	.word	0x00014f54
    2588:	000155a0 	.word	0x000155a0
    258c:	00014f84 	.word	0x00014f84
    2590:	00015590 	.word	0x00015590
    2594:	00014f14 	.word	0x00014f14
    2598:	000154e8 	.word	0x000154e8
    259c:	00014f44 	.word	0x00014f44
    25a0:	00015510 	.word	0x00015510
    25a4:	1fff8b70 	.word	0x1fff8b70
    25a8:	000153e0 	.word	0x000153e0
    25ac:	00014f64 	.word	0x00014f64
    25b0:	000155cc 	.word	0x000155cc
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    25b4:	4b3a      	ldr	r3, [pc, #232]	; (26a0 <Clock_Ip_InitClock+0x6ac>)
    25b6:	2201      	movs	r2, #1
    25b8:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	3301      	adds	r3, #1
    25be:	9303      	str	r3, [sp, #12]
    25c0:	9b01      	ldr	r3, [sp, #4]
    25c2:	7adb      	ldrb	r3, [r3, #11]
    25c4:	461a      	mov	r2, r3
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	4293      	cmp	r3, r2
    25ca:	d3ac      	bcc.n	2526 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    25cc:	4b34      	ldr	r3, [pc, #208]	; (26a0 <Clock_Ip_InitClock+0x6ac>)
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	f083 0301 	eor.w	r3, r3, #1
    25d4:	b2db      	uxtb	r3, r3
    25d6:	2b00      	cmp	r3, #0
    25d8:	d05e      	beq.n	2698 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    25da:	2300      	movs	r3, #0
    25dc:	9303      	str	r3, [sp, #12]
    25de:	e01f      	b.n	2620 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    25e0:	9a01      	ldr	r2, [sp, #4]
    25e2:	9b03      	ldr	r3, [sp, #12]
    25e4:	334e      	adds	r3, #78	; 0x4e
    25e6:	00db      	lsls	r3, r3, #3
    25e8:	4413      	add	r3, r2
    25ea:	685a      	ldr	r2, [r3, #4]
    25ec:	492d      	ldr	r1, [pc, #180]	; (26a4 <Clock_Ip_InitClock+0x6b0>)
    25ee:	4613      	mov	r3, r2
    25f0:	00db      	lsls	r3, r3, #3
    25f2:	4413      	add	r3, r2
    25f4:	440b      	add	r3, r1
    25f6:	3301      	adds	r3, #1
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	461a      	mov	r2, r3
    25fc:	4b2a      	ldr	r3, [pc, #168]	; (26a8 <Clock_Ip_InitClock+0x6b4>)
    25fe:	5c9b      	ldrb	r3, [r3, r2]
    2600:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2602:	4a2a      	ldr	r2, [pc, #168]	; (26ac <Clock_Ip_InitClock+0x6b8>)
    2604:	9b02      	ldr	r3, [sp, #8]
    2606:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    260a:	9a03      	ldr	r2, [sp, #12]
    260c:	324e      	adds	r2, #78	; 0x4e
    260e:	00d2      	lsls	r2, r2, #3
    2610:	9901      	ldr	r1, [sp, #4]
    2612:	440a      	add	r2, r1
    2614:	3204      	adds	r2, #4
    2616:	4610      	mov	r0, r2
    2618:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    261a:	9b03      	ldr	r3, [sp, #12]
    261c:	3301      	adds	r3, #1
    261e:	9303      	str	r3, [sp, #12]
    2620:	9b01      	ldr	r3, [sp, #4]
    2622:	7c1b      	ldrb	r3, [r3, #16]
    2624:	461a      	mov	r2, r3
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	4293      	cmp	r3, r2
    262a:	d3d9      	bcc.n	25e0 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    262c:	2300      	movs	r3, #0
    262e:	9303      	str	r3, [sp, #12]
    2630:	e028      	b.n	2684 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2632:	9901      	ldr	r1, [sp, #4]
    2634:	9a03      	ldr	r2, [sp, #12]
    2636:	4613      	mov	r3, r2
    2638:	009b      	lsls	r3, r3, #2
    263a:	4413      	add	r3, r2
    263c:	009b      	lsls	r3, r3, #2
    263e:	440b      	add	r3, r1
    2640:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2644:	681a      	ldr	r2, [r3, #0]
    2646:	4917      	ldr	r1, [pc, #92]	; (26a4 <Clock_Ip_InitClock+0x6b0>)
    2648:	4613      	mov	r3, r2
    264a:	00db      	lsls	r3, r3, #3
    264c:	4413      	add	r3, r2
    264e:	440b      	add	r3, r1
    2650:	3301      	adds	r3, #1
    2652:	781b      	ldrb	r3, [r3, #0]
    2654:	461a      	mov	r2, r3
    2656:	4b16      	ldr	r3, [pc, #88]	; (26b0 <Clock_Ip_InitClock+0x6bc>)
    2658:	5c9b      	ldrb	r3, [r3, r2]
    265a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    265c:	4a15      	ldr	r2, [pc, #84]	; (26b4 <Clock_Ip_InitClock+0x6c0>)
    265e:	9b02      	ldr	r3, [sp, #8]
    2660:	011b      	lsls	r3, r3, #4
    2662:	4413      	add	r3, r2
    2664:	330c      	adds	r3, #12
    2666:	6819      	ldr	r1, [r3, #0]
    2668:	9a03      	ldr	r2, [sp, #12]
    266a:	4613      	mov	r3, r2
    266c:	009b      	lsls	r3, r3, #2
    266e:	4413      	add	r3, r2
    2670:	009b      	lsls	r3, r3, #2
    2672:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2676:	9a01      	ldr	r2, [sp, #4]
    2678:	4413      	add	r3, r2
    267a:	4618      	mov	r0, r3
    267c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    267e:	9b03      	ldr	r3, [sp, #12]
    2680:	3301      	adds	r3, #1
    2682:	9303      	str	r3, [sp, #12]
    2684:	9b01      	ldr	r3, [sp, #4]
    2686:	7c9b      	ldrb	r3, [r3, #18]
    2688:	461a      	mov	r2, r3
    268a:	9b03      	ldr	r3, [sp, #12]
    268c:	4293      	cmp	r3, r2
    268e:	d3d0      	bcc.n	2632 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2690:	2104      	movs	r1, #4
    2692:	9801      	ldr	r0, [sp, #4]
    2694:	f002 ff48 	bl	5528 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2698:	bf00      	nop
    269a:	b004      	add	sp, #16
    269c:	bd10      	pop	{r4, pc}
    269e:	bf00      	nop
    26a0:	1fff8b70 	.word	0x1fff8b70
    26a4:	00014f94 	.word	0x00014f94
    26a8:	00014f34 	.word	0x00014f34
    26ac:	0001551c 	.word	0x0001551c
    26b0:	00014f84 	.word	0x00014f84
    26b4:	00015590 	.word	0x00015590

000026b8 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    26b8:	b500      	push	{lr}
    26ba:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    26bc:	2302      	movs	r3, #2
    26be:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    26c0:	2300      	movs	r3, #0
    26c2:	9304      	str	r3, [sp, #16]
    26c4:	e02c      	b.n	2720 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    26c6:	4a36      	ldr	r2, [pc, #216]	; (27a0 <Clock_Ip_GetPllStatus+0xe8>)
    26c8:	9b04      	ldr	r3, [sp, #16]
    26ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    26ce:	4935      	ldr	r1, [pc, #212]	; (27a4 <Clock_Ip_GetPllStatus+0xec>)
    26d0:	4613      	mov	r3, r2
    26d2:	00db      	lsls	r3, r3, #3
    26d4:	4413      	add	r3, r2
    26d6:	440b      	add	r3, r1
    26d8:	3301      	adds	r3, #1
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	461a      	mov	r2, r3
    26de:	4b32      	ldr	r3, [pc, #200]	; (27a8 <Clock_Ip_GetPllStatus+0xf0>)
    26e0:	5c9b      	ldrb	r3, [r3, r2]
    26e2:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    26e4:	4931      	ldr	r1, [pc, #196]	; (27ac <Clock_Ip_GetPllStatus+0xf4>)
    26e6:	9a03      	ldr	r2, [sp, #12]
    26e8:	4613      	mov	r3, r2
    26ea:	009b      	lsls	r3, r3, #2
    26ec:	4413      	add	r3, r2
    26ee:	009b      	lsls	r3, r3, #2
    26f0:	440b      	add	r3, r1
    26f2:	3308      	adds	r3, #8
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	492a      	ldr	r1, [pc, #168]	; (27a0 <Clock_Ip_GetPllStatus+0xe8>)
    26f8:	9a04      	ldr	r2, [sp, #16]
    26fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    26fe:	4610      	mov	r0, r2
    2700:	4798      	blx	r3
    2702:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2704:	9b02      	ldr	r3, [sp, #8]
    2706:	2b01      	cmp	r3, #1
    2708:	d102      	bne.n	2710 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    270a:	2301      	movs	r3, #1
    270c:	9305      	str	r3, [sp, #20]
            break;
    270e:	e00d      	b.n	272c <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2710:	9b02      	ldr	r3, [sp, #8]
    2712:	2b02      	cmp	r3, #2
    2714:	d101      	bne.n	271a <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2716:	2300      	movs	r3, #0
    2718:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    271a:	9b04      	ldr	r3, [sp, #16]
    271c:	3301      	adds	r3, #1
    271e:	9304      	str	r3, [sp, #16]
    2720:	4b23      	ldr	r3, [pc, #140]	; (27b0 <Clock_Ip_GetPllStatus+0xf8>)
    2722:	789b      	ldrb	r3, [r3, #2]
    2724:	461a      	mov	r2, r3
    2726:	9b04      	ldr	r3, [sp, #16]
    2728:	4293      	cmp	r3, r2
    272a:	d3cc      	bcc.n	26c6 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    272c:	9b05      	ldr	r3, [sp, #20]
    272e:	2b00      	cmp	r3, #0
    2730:	d130      	bne.n	2794 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2732:	2300      	movs	r3, #0
    2734:	9304      	str	r3, [sp, #16]
    2736:	e027      	b.n	2788 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2738:	4a1e      	ldr	r2, [pc, #120]	; (27b4 <Clock_Ip_GetPllStatus+0xfc>)
    273a:	9b04      	ldr	r3, [sp, #16]
    273c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2740:	4918      	ldr	r1, [pc, #96]	; (27a4 <Clock_Ip_GetPllStatus+0xec>)
    2742:	4613      	mov	r3, r2
    2744:	00db      	lsls	r3, r3, #3
    2746:	4413      	add	r3, r2
    2748:	440b      	add	r3, r1
    274a:	3301      	adds	r3, #1
    274c:	781b      	ldrb	r3, [r3, #0]
    274e:	461a      	mov	r2, r3
    2750:	4b19      	ldr	r3, [pc, #100]	; (27b8 <Clock_Ip_GetPllStatus+0x100>)
    2752:	5c9b      	ldrb	r3, [r3, r2]
    2754:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2756:	4919      	ldr	r1, [pc, #100]	; (27bc <Clock_Ip_GetPllStatus+0x104>)
    2758:	9a03      	ldr	r2, [sp, #12]
    275a:	4613      	mov	r3, r2
    275c:	005b      	lsls	r3, r3, #1
    275e:	4413      	add	r3, r2
    2760:	009b      	lsls	r3, r3, #2
    2762:	440b      	add	r3, r1
    2764:	3308      	adds	r3, #8
    2766:	681b      	ldr	r3, [r3, #0]
    2768:	4912      	ldr	r1, [pc, #72]	; (27b4 <Clock_Ip_GetPllStatus+0xfc>)
    276a:	9a04      	ldr	r2, [sp, #16]
    276c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2770:	4610      	mov	r0, r2
    2772:	4798      	blx	r3
    2774:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2776:	9b01      	ldr	r3, [sp, #4]
    2778:	2b01      	cmp	r3, #1
    277a:	d102      	bne.n	2782 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    277c:	2301      	movs	r3, #1
    277e:	9305      	str	r3, [sp, #20]
                break;
    2780:	e008      	b.n	2794 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2782:	9b04      	ldr	r3, [sp, #16]
    2784:	3301      	adds	r3, #1
    2786:	9304      	str	r3, [sp, #16]
    2788:	4b09      	ldr	r3, [pc, #36]	; (27b0 <Clock_Ip_GetPllStatus+0xf8>)
    278a:	78db      	ldrb	r3, [r3, #3]
    278c:	461a      	mov	r2, r3
    278e:	9b04      	ldr	r3, [sp, #16]
    2790:	4293      	cmp	r3, r2
    2792:	d3d1      	bcc.n	2738 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2794:	9b05      	ldr	r3, [sp, #20]
}
    2796:	4618      	mov	r0, r3
    2798:	b007      	add	sp, #28
    279a:	f85d fb04 	ldr.w	pc, [sp], #4
    279e:	bf00      	nop
    27a0:	0001549c 	.word	0x0001549c
    27a4:	00014f94 	.word	0x00014f94
    27a8:	00014f54 	.word	0x00014f54
    27ac:	000155a0 	.word	0x000155a0
    27b0:	1fff8b70 	.word	0x1fff8b70
    27b4:	000154a0 	.word	0x000154a0
    27b8:	00014f44 	.word	0x00014f44
    27bc:	00015510 	.word	0x00015510

000027c0 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    27c0:	b500      	push	{lr}
    27c2:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    27c4:	4b55      	ldr	r3, [pc, #340]	; (291c <Clock_Ip_DistributePll+0x15c>)
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	2b00      	cmp	r3, #0
    27ca:	f000 80a2 	beq.w	2912 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    27ce:	2300      	movs	r3, #0
    27d0:	9301      	str	r3, [sp, #4]
    27d2:	e02c      	b.n	282e <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    27d4:	4b51      	ldr	r3, [pc, #324]	; (291c <Clock_Ip_DistributePll+0x15c>)
    27d6:	681a      	ldr	r2, [r3, #0]
    27d8:	9b01      	ldr	r3, [sp, #4]
    27da:	330d      	adds	r3, #13
    27dc:	00db      	lsls	r3, r3, #3
    27de:	4413      	add	r3, r2
    27e0:	685b      	ldr	r3, [r3, #4]
    27e2:	4a4f      	ldr	r2, [pc, #316]	; (2920 <Clock_Ip_DistributePll+0x160>)
    27e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27e8:	2b03      	cmp	r3, #3
    27ea:	d11d      	bne.n	2828 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    27ec:	4b4b      	ldr	r3, [pc, #300]	; (291c <Clock_Ip_DistributePll+0x15c>)
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	9a01      	ldr	r2, [sp, #4]
    27f2:	320d      	adds	r2, #13
    27f4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    27f8:	494a      	ldr	r1, [pc, #296]	; (2924 <Clock_Ip_DistributePll+0x164>)
    27fa:	4613      	mov	r3, r2
    27fc:	00db      	lsls	r3, r3, #3
    27fe:	4413      	add	r3, r2
    2800:	440b      	add	r3, r1
    2802:	3301      	adds	r3, #1
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	461a      	mov	r2, r3
    2808:	4b47      	ldr	r3, [pc, #284]	; (2928 <Clock_Ip_DistributePll+0x168>)
    280a:	5c9b      	ldrb	r3, [r3, r2]
    280c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    280e:	4a47      	ldr	r2, [pc, #284]	; (292c <Clock_Ip_DistributePll+0x16c>)
    2810:	9b00      	ldr	r3, [sp, #0]
    2812:	00db      	lsls	r3, r3, #3
    2814:	4413      	add	r3, r2
    2816:	685b      	ldr	r3, [r3, #4]
    2818:	4a40      	ldr	r2, [pc, #256]	; (291c <Clock_Ip_DistributePll+0x15c>)
    281a:	6811      	ldr	r1, [r2, #0]
    281c:	9a01      	ldr	r2, [sp, #4]
    281e:	320d      	adds	r2, #13
    2820:	00d2      	lsls	r2, r2, #3
    2822:	440a      	add	r2, r1
    2824:	4610      	mov	r0, r2
    2826:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2828:	9b01      	ldr	r3, [sp, #4]
    282a:	3301      	adds	r3, #1
    282c:	9301      	str	r3, [sp, #4]
    282e:	4b3b      	ldr	r3, [pc, #236]	; (291c <Clock_Ip_DistributePll+0x15c>)
    2830:	681b      	ldr	r3, [r3, #0]
    2832:	7adb      	ldrb	r3, [r3, #11]
    2834:	461a      	mov	r2, r3
    2836:	9b01      	ldr	r3, [sp, #4]
    2838:	4293      	cmp	r3, r2
    283a:	d3cb      	bcc.n	27d4 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    283c:	4b3c      	ldr	r3, [pc, #240]	; (2930 <Clock_Ip_DistributePll+0x170>)
    283e:	781b      	ldrb	r3, [r3, #0]
    2840:	2b00      	cmp	r3, #0
    2842:	d066      	beq.n	2912 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2844:	2300      	movs	r3, #0
    2846:	9301      	str	r3, [sp, #4]
    2848:	e021      	b.n	288e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    284a:	4b34      	ldr	r3, [pc, #208]	; (291c <Clock_Ip_DistributePll+0x15c>)
    284c:	681a      	ldr	r2, [r3, #0]
    284e:	9b01      	ldr	r3, [sp, #4]
    2850:	334e      	adds	r3, #78	; 0x4e
    2852:	00db      	lsls	r3, r3, #3
    2854:	4413      	add	r3, r2
    2856:	685a      	ldr	r2, [r3, #4]
    2858:	4932      	ldr	r1, [pc, #200]	; (2924 <Clock_Ip_DistributePll+0x164>)
    285a:	4613      	mov	r3, r2
    285c:	00db      	lsls	r3, r3, #3
    285e:	4413      	add	r3, r2
    2860:	440b      	add	r3, r1
    2862:	3301      	adds	r3, #1
    2864:	781b      	ldrb	r3, [r3, #0]
    2866:	461a      	mov	r2, r3
    2868:	4b32      	ldr	r3, [pc, #200]	; (2934 <Clock_Ip_DistributePll+0x174>)
    286a:	5c9b      	ldrb	r3, [r3, r2]
    286c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    286e:	4a32      	ldr	r2, [pc, #200]	; (2938 <Clock_Ip_DistributePll+0x178>)
    2870:	9b00      	ldr	r3, [sp, #0]
    2872:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2876:	4a29      	ldr	r2, [pc, #164]	; (291c <Clock_Ip_DistributePll+0x15c>)
    2878:	6811      	ldr	r1, [r2, #0]
    287a:	9a01      	ldr	r2, [sp, #4]
    287c:	324e      	adds	r2, #78	; 0x4e
    287e:	00d2      	lsls	r2, r2, #3
    2880:	440a      	add	r2, r1
    2882:	3204      	adds	r2, #4
    2884:	4610      	mov	r0, r2
    2886:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2888:	9b01      	ldr	r3, [sp, #4]
    288a:	3301      	adds	r3, #1
    288c:	9301      	str	r3, [sp, #4]
    288e:	4b23      	ldr	r3, [pc, #140]	; (291c <Clock_Ip_DistributePll+0x15c>)
    2890:	681b      	ldr	r3, [r3, #0]
    2892:	7c1b      	ldrb	r3, [r3, #16]
    2894:	461a      	mov	r2, r3
    2896:	9b01      	ldr	r3, [sp, #4]
    2898:	4293      	cmp	r3, r2
    289a:	d3d6      	bcc.n	284a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    289c:	2300      	movs	r3, #0
    289e:	9301      	str	r3, [sp, #4]
    28a0:	e02a      	b.n	28f8 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    28a2:	4b1e      	ldr	r3, [pc, #120]	; (291c <Clock_Ip_DistributePll+0x15c>)
    28a4:	6819      	ldr	r1, [r3, #0]
    28a6:	9a01      	ldr	r2, [sp, #4]
    28a8:	4613      	mov	r3, r2
    28aa:	009b      	lsls	r3, r3, #2
    28ac:	4413      	add	r3, r2
    28ae:	009b      	lsls	r3, r3, #2
    28b0:	440b      	add	r3, r1
    28b2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    28b6:	681a      	ldr	r2, [r3, #0]
    28b8:	491a      	ldr	r1, [pc, #104]	; (2924 <Clock_Ip_DistributePll+0x164>)
    28ba:	4613      	mov	r3, r2
    28bc:	00db      	lsls	r3, r3, #3
    28be:	4413      	add	r3, r2
    28c0:	440b      	add	r3, r1
    28c2:	3301      	adds	r3, #1
    28c4:	781b      	ldrb	r3, [r3, #0]
    28c6:	461a      	mov	r2, r3
    28c8:	4b1c      	ldr	r3, [pc, #112]	; (293c <Clock_Ip_DistributePll+0x17c>)
    28ca:	5c9b      	ldrb	r3, [r3, r2]
    28cc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    28ce:	4a1c      	ldr	r2, [pc, #112]	; (2940 <Clock_Ip_DistributePll+0x180>)
    28d0:	9b00      	ldr	r3, [sp, #0]
    28d2:	011b      	lsls	r3, r3, #4
    28d4:	4413      	add	r3, r2
    28d6:	330c      	adds	r3, #12
    28d8:	6819      	ldr	r1, [r3, #0]
    28da:	4b10      	ldr	r3, [pc, #64]	; (291c <Clock_Ip_DistributePll+0x15c>)
    28dc:	6818      	ldr	r0, [r3, #0]
    28de:	9a01      	ldr	r2, [sp, #4]
    28e0:	4613      	mov	r3, r2
    28e2:	009b      	lsls	r3, r3, #2
    28e4:	4413      	add	r3, r2
    28e6:	009b      	lsls	r3, r3, #2
    28e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    28ec:	4403      	add	r3, r0
    28ee:	4618      	mov	r0, r3
    28f0:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    28f2:	9b01      	ldr	r3, [sp, #4]
    28f4:	3301      	adds	r3, #1
    28f6:	9301      	str	r3, [sp, #4]
    28f8:	4b08      	ldr	r3, [pc, #32]	; (291c <Clock_Ip_DistributePll+0x15c>)
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	7c9b      	ldrb	r3, [r3, #18]
    28fe:	461a      	mov	r2, r3
    2900:	9b01      	ldr	r3, [sp, #4]
    2902:	4293      	cmp	r3, r2
    2904:	d3cd      	bcc.n	28a2 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2906:	4b05      	ldr	r3, [pc, #20]	; (291c <Clock_Ip_DistributePll+0x15c>)
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	2104      	movs	r1, #4
    290c:	4618      	mov	r0, r3
    290e:	f002 fe0b 	bl	5528 <Clock_Ip_Command>
        }
    }
}
    2912:	bf00      	nop
    2914:	b003      	add	sp, #12
    2916:	f85d fb04 	ldr.w	pc, [sp], #4
    291a:	bf00      	nop
    291c:	1fff8b68 	.word	0x1fff8b68
    2920:	000153e0 	.word	0x000153e0
    2924:	00014f94 	.word	0x00014f94
    2928:	00014f64 	.word	0x00014f64
    292c:	000155cc 	.word	0x000155cc
    2930:	1fff8b70 	.word	0x1fff8b70
    2934:	00014f34 	.word	0x00014f34
    2938:	0001551c 	.word	0x0001551c
    293c:	00014f84 	.word	0x00014f84
    2940:	00015590 	.word	0x00015590

00002944 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2944:	b500      	push	{lr}
    2946:	b085      	sub	sp, #20
    2948:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    294a:	490c      	ldr	r1, [pc, #48]	; (297c <Clock_Ip_DisableClockMonitor+0x38>)
    294c:	9a01      	ldr	r2, [sp, #4]
    294e:	4613      	mov	r3, r2
    2950:	00db      	lsls	r3, r3, #3
    2952:	4413      	add	r3, r2
    2954:	440b      	add	r3, r1
    2956:	3301      	adds	r3, #1
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	461a      	mov	r2, r3
    295c:	4b08      	ldr	r3, [pc, #32]	; (2980 <Clock_Ip_DisableClockMonitor+0x3c>)
    295e:	5c9b      	ldrb	r3, [r3, r2]
    2960:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2962:	4a08      	ldr	r2, [pc, #32]	; (2984 <Clock_Ip_DisableClockMonitor+0x40>)
    2964:	9b03      	ldr	r3, [sp, #12]
    2966:	011b      	lsls	r3, r3, #4
    2968:	4413      	add	r3, r2
    296a:	3308      	adds	r3, #8
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	9801      	ldr	r0, [sp, #4]
    2970:	4798      	blx	r3
}
    2972:	bf00      	nop
    2974:	b005      	add	sp, #20
    2976:	f85d fb04 	ldr.w	pc, [sp], #4
    297a:	bf00      	nop
    297c:	00014f94 	.word	0x00014f94
    2980:	00014f84 	.word	0x00014f84
    2984:	00015590 	.word	0x00015590

00002988 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2988:	b082      	sub	sp, #8
    298a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    298c:	4a02      	ldr	r2, [pc, #8]	; (2998 <Clock_Ip_InstallNotificationsCallback+0x10>)
    298e:	9b01      	ldr	r3, [sp, #4]
    2990:	6013      	str	r3, [r2, #0]
}
    2992:	bf00      	nop
    2994:	b002      	add	sp, #8
    2996:	4770      	bx	lr
    2998:	1fff8b14 	.word	0x1fff8b14

0000299c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    299c:	b500      	push	{lr}
    299e:	b085      	sub	sp, #20
    29a0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29a2:	490c      	ldr	r1, [pc, #48]	; (29d4 <Clock_Ip_DisableModuleClock+0x38>)
    29a4:	9a01      	ldr	r2, [sp, #4]
    29a6:	4613      	mov	r3, r2
    29a8:	00db      	lsls	r3, r3, #3
    29aa:	4413      	add	r3, r2
    29ac:	440b      	add	r3, r1
    29ae:	3301      	adds	r3, #1
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	461a      	mov	r2, r3
    29b4:	4b08      	ldr	r3, [pc, #32]	; (29d8 <Clock_Ip_DisableModuleClock+0x3c>)
    29b6:	5c9b      	ldrb	r3, [r3, r2]
    29b8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    29ba:	4a08      	ldr	r2, [pc, #32]	; (29dc <Clock_Ip_DisableModuleClock+0x40>)
    29bc:	9b03      	ldr	r3, [sp, #12]
    29be:	00db      	lsls	r3, r3, #3
    29c0:	4413      	add	r3, r2
    29c2:	685b      	ldr	r3, [r3, #4]
    29c4:	2101      	movs	r1, #1
    29c6:	9801      	ldr	r0, [sp, #4]
    29c8:	4798      	blx	r3
}
    29ca:	bf00      	nop
    29cc:	b005      	add	sp, #20
    29ce:	f85d fb04 	ldr.w	pc, [sp], #4
    29d2:	bf00      	nop
    29d4:	00014f94 	.word	0x00014f94
    29d8:	00014f34 	.word	0x00014f34
    29dc:	0001551c 	.word	0x0001551c

000029e0 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    29e0:	b500      	push	{lr}
    29e2:	b085      	sub	sp, #20
    29e4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29e6:	490c      	ldr	r1, [pc, #48]	; (2a18 <Clock_Ip_EnableModuleClock+0x38>)
    29e8:	9a01      	ldr	r2, [sp, #4]
    29ea:	4613      	mov	r3, r2
    29ec:	00db      	lsls	r3, r3, #3
    29ee:	4413      	add	r3, r2
    29f0:	440b      	add	r3, r1
    29f2:	3301      	adds	r3, #1
    29f4:	781b      	ldrb	r3, [r3, #0]
    29f6:	461a      	mov	r2, r3
    29f8:	4b08      	ldr	r3, [pc, #32]	; (2a1c <Clock_Ip_EnableModuleClock+0x3c>)
    29fa:	5c9b      	ldrb	r3, [r3, r2]
    29fc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    29fe:	4a08      	ldr	r2, [pc, #32]	; (2a20 <Clock_Ip_EnableModuleClock+0x40>)
    2a00:	9b03      	ldr	r3, [sp, #12]
    2a02:	00db      	lsls	r3, r3, #3
    2a04:	4413      	add	r3, r2
    2a06:	685b      	ldr	r3, [r3, #4]
    2a08:	2100      	movs	r1, #0
    2a0a:	9801      	ldr	r0, [sp, #4]
    2a0c:	4798      	blx	r3
}
    2a0e:	bf00      	nop
    2a10:	b005      	add	sp, #20
    2a12:	f85d fb04 	ldr.w	pc, [sp], #4
    2a16:	bf00      	nop
    2a18:	00014f94 	.word	0x00014f94
    2a1c:	00014f34 	.word	0x00014f34
    2a20:	0001551c 	.word	0x0001551c

00002a24 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2a24:	b500      	push	{lr}
    2a26:	b083      	sub	sp, #12
    2a28:	9001      	str	r0, [sp, #4]
    2a2a:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2a2c:	4b08      	ldr	r3, [pc, #32]	; (2a50 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2a2e:	2200      	movs	r2, #0
    2a30:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2a32:	4b08      	ldr	r3, [pc, #32]	; (2a54 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	2102      	movs	r1, #2
    2a38:	4618      	mov	r0, r3
    2a3a:	f002 fd75 	bl	5528 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2a3e:	9900      	ldr	r1, [sp, #0]
    2a40:	9801      	ldr	r0, [sp, #4]
    2a42:	f002 fc51 	bl	52e8 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2a46:	bf00      	nop
    2a48:	b003      	add	sp, #12
    2a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a4e:	bf00      	nop
    2a50:	1fff8b10 	.word	0x1fff8b10
    2a54:	1fff8b68 	.word	0x1fff8b68

00002a58 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2a58:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2a5a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2a5e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2a60:	4b06      	ldr	r3, [pc, #24]	; (2a7c <Clock_Ip_SetWaitStates+0x24>)
    2a62:	785b      	ldrb	r3, [r3, #1]
    2a64:	2b00      	cmp	r3, #0
    2a66:	d005      	beq.n	2a74 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2a68:	9b01      	ldr	r3, [sp, #4]
    2a6a:	3b01      	subs	r3, #1
    2a6c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2a6e:	9b01      	ldr	r3, [sp, #4]
    2a70:	2b00      	cmp	r3, #0
    2a72:	d1f9      	bne.n	2a68 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2a74:	bf00      	nop
    2a76:	b002      	add	sp, #8
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	1fff8b70 	.word	0x1fff8b70

00002a80 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2a80:	b500      	push	{lr}
    2a82:	b083      	sub	sp, #12
    2a84:	9001      	str	r0, [sp, #4]
    2a86:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2a88:	4b04      	ldr	r3, [pc, #16]	; (2a9c <Clock_Ip_ReportClockErrors+0x1c>)
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	9900      	ldr	r1, [sp, #0]
    2a8e:	9801      	ldr	r0, [sp, #4]
    2a90:	4798      	blx	r3
}
    2a92:	bf00      	nop
    2a94:	b003      	add	sp, #12
    2a96:	f85d fb04 	ldr.w	pc, [sp], #4
    2a9a:	bf00      	nop
    2a9c:	1fff8b14 	.word	0x1fff8b14

00002aa0 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2aa0:	b500      	push	{lr}
    2aa2:	b085      	sub	sp, #20
    2aa4:	9003      	str	r0, [sp, #12]
    2aa6:	9102      	str	r1, [sp, #8]
    2aa8:	9201      	str	r2, [sp, #4]
    2aaa:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2aac:	2000      	movs	r0, #0
    2aae:	f7fe ffd1 	bl	1a54 <OsIf_GetCounter>
    2ab2:	4602      	mov	r2, r0
    2ab4:	9b03      	ldr	r3, [sp, #12]
    2ab6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2ab8:	9b02      	ldr	r3, [sp, #8]
    2aba:	2200      	movs	r2, #0
    2abc:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2abe:	2100      	movs	r1, #0
    2ac0:	9800      	ldr	r0, [sp, #0]
    2ac2:	f7ff f813 	bl	1aec <OsIf_MicrosToTicks>
    2ac6:	4602      	mov	r2, r0
    2ac8:	9b01      	ldr	r3, [sp, #4]
    2aca:	601a      	str	r2, [r3, #0]
}
    2acc:	bf00      	nop
    2ace:	b005      	add	sp, #20
    2ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad4 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2ad4:	b500      	push	{lr}
    2ad6:	b087      	sub	sp, #28
    2ad8:	9003      	str	r0, [sp, #12]
    2ada:	9102      	str	r1, [sp, #8]
    2adc:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2ade:	2300      	movs	r3, #0
    2ae0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2ae4:	2100      	movs	r1, #0
    2ae6:	9803      	ldr	r0, [sp, #12]
    2ae8:	f7fe ffcd 	bl	1a86 <OsIf_GetElapsed>
    2aec:	4602      	mov	r2, r0
    2aee:	9b02      	ldr	r3, [sp, #8]
    2af0:	681b      	ldr	r3, [r3, #0]
    2af2:	441a      	add	r2, r3
    2af4:	9b02      	ldr	r3, [sp, #8]
    2af6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2af8:	9b02      	ldr	r3, [sp, #8]
    2afa:	681b      	ldr	r3, [r3, #0]
    2afc:	9a01      	ldr	r2, [sp, #4]
    2afe:	429a      	cmp	r2, r3
    2b00:	d802      	bhi.n	2b08 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2b02:	2301      	movs	r3, #1
    2b04:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2b08:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2b0c:	4618      	mov	r0, r3
    2b0e:	b007      	add	sp, #28
    2b10:	f85d fb04 	ldr.w	pc, [sp], #4

00002b14 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2b14:	b082      	sub	sp, #8
    2b16:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2b18:	bf00      	nop
    2b1a:	b002      	add	sp, #8
    2b1c:	4770      	bx	lr

00002b1e <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2b1e:	b500      	push	{lr}
    2b20:	b083      	sub	sp, #12
    2b22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b24:	9b01      	ldr	r3, [sp, #4]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d002      	beq.n	2b30 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2b2a:	9801      	ldr	r0, [sp, #4]
    2b2c:	f000 f8ad 	bl	2c8a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b30:	bf00      	nop
    2b32:	b003      	add	sp, #12
    2b34:	f85d fb04 	ldr.w	pc, [sp], #4

00002b38 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2b38:	b500      	push	{lr}
    2b3a:	b083      	sub	sp, #12
    2b3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b3e:	9b01      	ldr	r3, [sp, #4]
    2b40:	2b00      	cmp	r3, #0
    2b42:	d002      	beq.n	2b4a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2b44:	9801      	ldr	r0, [sp, #4]
    2b46:	f000 f8cd 	bl	2ce4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b4a:	bf00      	nop
    2b4c:	b003      	add	sp, #12
    2b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b52 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2b52:	b500      	push	{lr}
    2b54:	b083      	sub	sp, #12
    2b56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b58:	9b01      	ldr	r3, [sp, #4]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d002      	beq.n	2b64 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2b5e:	9801      	ldr	r0, [sp, #4]
    2b60:	f000 f8ee 	bl	2d40 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b64:	bf00      	nop
    2b66:	b003      	add	sp, #12
    2b68:	f85d fb04 	ldr.w	pc, [sp], #4

00002b6c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2b6c:	b500      	push	{lr}
    2b6e:	b083      	sub	sp, #12
    2b70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b72:	9b01      	ldr	r3, [sp, #4]
    2b74:	2b00      	cmp	r3, #0
    2b76:	d002      	beq.n	2b7e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2b78:	9801      	ldr	r0, [sp, #4]
    2b7a:	f000 f8f9 	bl	2d70 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b7e:	bf00      	nop
    2b80:	b003      	add	sp, #12
    2b82:	f85d fb04 	ldr.w	pc, [sp], #4

00002b86 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2b86:	b500      	push	{lr}
    2b88:	b083      	sub	sp, #12
    2b8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b8c:	9b01      	ldr	r3, [sp, #4]
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d002      	beq.n	2b98 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2b92:	9801      	ldr	r0, [sp, #4]
    2b94:	f000 f904 	bl	2da0 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b98:	bf00      	nop
    2b9a:	b003      	add	sp, #12
    2b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00002ba0 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2ba0:	b500      	push	{lr}
    2ba2:	b083      	sub	sp, #12
    2ba4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ba6:	9b01      	ldr	r3, [sp, #4]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d002      	beq.n	2bb2 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2bac:	9801      	ldr	r0, [sp, #4]
    2bae:	f000 f90f 	bl	2dd0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bb2:	bf00      	nop
    2bb4:	b003      	add	sp, #12
    2bb6:	f85d fb04 	ldr.w	pc, [sp], #4

00002bba <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2bba:	b500      	push	{lr}
    2bbc:	b083      	sub	sp, #12
    2bbe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bc0:	9b01      	ldr	r3, [sp, #4]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d002      	beq.n	2bcc <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2bc6:	9801      	ldr	r0, [sp, #4]
    2bc8:	f000 f91a 	bl	2e00 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bcc:	bf00      	nop
    2bce:	b003      	add	sp, #12
    2bd0:	f85d fb04 	ldr.w	pc, [sp], #4

00002bd4 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2bd4:	b500      	push	{lr}
    2bd6:	b083      	sub	sp, #12
    2bd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bda:	9b01      	ldr	r3, [sp, #4]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d002      	beq.n	2be6 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2be0:	9801      	ldr	r0, [sp, #4]
    2be2:	f000 f925 	bl	2e30 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2be6:	bf00      	nop
    2be8:	b003      	add	sp, #12
    2bea:	f85d fb04 	ldr.w	pc, [sp], #4

00002bee <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2bee:	b500      	push	{lr}
    2bf0:	b083      	sub	sp, #12
    2bf2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bf4:	9b01      	ldr	r3, [sp, #4]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d002      	beq.n	2c00 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2bfa:	9801      	ldr	r0, [sp, #4]
    2bfc:	f000 f930 	bl	2e60 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c00:	bf00      	nop
    2c02:	b003      	add	sp, #12
    2c04:	f85d fb04 	ldr.w	pc, [sp], #4

00002c08 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c08:	b500      	push	{lr}
    2c0a:	b083      	sub	sp, #12
    2c0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c0e:	9b01      	ldr	r3, [sp, #4]
    2c10:	2b00      	cmp	r3, #0
    2c12:	d002      	beq.n	2c1a <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2c14:	9801      	ldr	r0, [sp, #4]
    2c16:	f000 f93b 	bl	2e90 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c1a:	bf00      	nop
    2c1c:	b003      	add	sp, #12
    2c1e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c22 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c22:	b500      	push	{lr}
    2c24:	b083      	sub	sp, #12
    2c26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c28:	9b01      	ldr	r3, [sp, #4]
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d002      	beq.n	2c34 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2c2e:	9801      	ldr	r0, [sp, #4]
    2c30:	f000 f946 	bl	2ec0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c34:	bf00      	nop
    2c36:	b003      	add	sp, #12
    2c38:	f85d fb04 	ldr.w	pc, [sp], #4

00002c3c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2c3c:	b500      	push	{lr}
    2c3e:	b083      	sub	sp, #12
    2c40:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c42:	9b01      	ldr	r3, [sp, #4]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d002      	beq.n	2c4e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2c48:	9801      	ldr	r0, [sp, #4]
    2c4a:	f000 f951 	bl	2ef0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c4e:	bf00      	nop
    2c50:	b003      	add	sp, #12
    2c52:	f85d fb04 	ldr.w	pc, [sp], #4

00002c56 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2c56:	b500      	push	{lr}
    2c58:	b083      	sub	sp, #12
    2c5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d002      	beq.n	2c68 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2c62:	9801      	ldr	r0, [sp, #4]
    2c64:	f000 f95e 	bl	2f24 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c68:	bf00      	nop
    2c6a:	b003      	add	sp, #12
    2c6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c70 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2c70:	b500      	push	{lr}
    2c72:	b083      	sub	sp, #12
    2c74:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c76:	9b01      	ldr	r3, [sp, #4]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d002      	beq.n	2c82 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2c7c:	9801      	ldr	r0, [sp, #4]
    2c7e:	f000 f98b 	bl	2f98 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c82:	bf00      	nop
    2c84:	b003      	add	sp, #12
    2c86:	f85d fb04 	ldr.w	pc, [sp], #4

00002c8a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2c8a:	b086      	sub	sp, #24
    2c8c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2c8e:	9b01      	ldr	r3, [sp, #4]
    2c90:	681a      	ldr	r2, [r3, #0]
    2c92:	4911      	ldr	r1, [pc, #68]	; (2cd8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2c94:	4613      	mov	r3, r2
    2c96:	00db      	lsls	r3, r3, #3
    2c98:	4413      	add	r3, r2
    2c9a:	440b      	add	r3, r1
    2c9c:	781b      	ldrb	r3, [r3, #0]
    2c9e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2ca0:	9b01      	ldr	r3, [sp, #4]
    2ca2:	685b      	ldr	r3, [r3, #4]
    2ca4:	4a0d      	ldr	r2, [pc, #52]	; (2cdc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2ca6:	5cd3      	ldrb	r3, [r2, r3]
    2ca8:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2caa:	4a0d      	ldr	r2, [pc, #52]	; (2ce0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2cac:	9b05      	ldr	r3, [sp, #20]
    2cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2cb6:	9b03      	ldr	r3, [sp, #12]
    2cb8:	f023 0307 	bic.w	r3, r3, #7
    2cbc:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2cbe:	9a03      	ldr	r2, [sp, #12]
    2cc0:	9b04      	ldr	r3, [sp, #16]
    2cc2:	4313      	orrs	r3, r2
    2cc4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2cc6:	4a06      	ldr	r2, [pc, #24]	; (2ce0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2cc8:	9b05      	ldr	r3, [sp, #20]
    2cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cce:	9a03      	ldr	r2, [sp, #12]
    2cd0:	601a      	str	r2, [r3, #0]
}
    2cd2:	bf00      	nop
    2cd4:	b006      	add	sp, #24
    2cd6:	4770      	bx	lr
    2cd8:	00014f94 	.word	0x00014f94
    2cdc:	0001538c 	.word	0x0001538c
    2ce0:	000153d0 	.word	0x000153d0

00002ce4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ce4:	b086      	sub	sp, #24
    2ce6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2ce8:	9b01      	ldr	r3, [sp, #4]
    2cea:	681a      	ldr	r2, [r3, #0]
    2cec:	4911      	ldr	r1, [pc, #68]	; (2d34 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2cee:	4613      	mov	r3, r2
    2cf0:	00db      	lsls	r3, r3, #3
    2cf2:	4413      	add	r3, r2
    2cf4:	440b      	add	r3, r1
    2cf6:	781b      	ldrb	r3, [r3, #0]
    2cf8:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	685b      	ldr	r3, [r3, #4]
    2cfe:	4a0e      	ldr	r2, [pc, #56]	; (2d38 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2d00:	5cd3      	ldrb	r3, [r2, r3]
    2d02:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d04:	4a0d      	ldr	r2, [pc, #52]	; (2d3c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2d06:	9b05      	ldr	r3, [sp, #20]
    2d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2d10:	9b03      	ldr	r3, [sp, #12]
    2d12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2d16:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2d18:	9b04      	ldr	r3, [sp, #16]
    2d1a:	021b      	lsls	r3, r3, #8
    2d1c:	9a03      	ldr	r2, [sp, #12]
    2d1e:	4313      	orrs	r3, r2
    2d20:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2d22:	4a06      	ldr	r2, [pc, #24]	; (2d3c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2d24:	9b05      	ldr	r3, [sp, #20]
    2d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d2a:	9a03      	ldr	r2, [sp, #12]
    2d2c:	601a      	str	r2, [r3, #0]
}
    2d2e:	bf00      	nop
    2d30:	b006      	add	sp, #24
    2d32:	4770      	bx	lr
    2d34:	00014f94 	.word	0x00014f94
    2d38:	0001538c 	.word	0x0001538c
    2d3c:	000153d0 	.word	0x000153d0

00002d40 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d40:	b084      	sub	sp, #16
    2d42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2d44:	4b09      	ldr	r3, [pc, #36]	; (2d6c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2d46:	695b      	ldr	r3, [r3, #20]
    2d48:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2d4a:	9b03      	ldr	r3, [sp, #12]
    2d4c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2d50:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	685b      	ldr	r3, [r3, #4]
    2d56:	3b01      	subs	r3, #1
    2d58:	041b      	lsls	r3, r3, #16
    2d5a:	9a03      	ldr	r2, [sp, #12]
    2d5c:	4313      	orrs	r3, r2
    2d5e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2d60:	4a02      	ldr	r2, [pc, #8]	; (2d6c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2d62:	9b03      	ldr	r3, [sp, #12]
    2d64:	6153      	str	r3, [r2, #20]
}
    2d66:	bf00      	nop
    2d68:	b004      	add	sp, #16
    2d6a:	4770      	bx	lr
    2d6c:	40064000 	.word	0x40064000

00002d70 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d70:	b084      	sub	sp, #16
    2d72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2d74:	4b09      	ldr	r3, [pc, #36]	; (2d9c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2d76:	695b      	ldr	r3, [r3, #20]
    2d78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2d7a:	9b03      	ldr	r3, [sp, #12]
    2d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2d80:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2d82:	9b01      	ldr	r3, [sp, #4]
    2d84:	685b      	ldr	r3, [r3, #4]
    2d86:	3b01      	subs	r3, #1
    2d88:	011b      	lsls	r3, r3, #4
    2d8a:	9a03      	ldr	r2, [sp, #12]
    2d8c:	4313      	orrs	r3, r2
    2d8e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2d90:	4a02      	ldr	r2, [pc, #8]	; (2d9c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2d92:	9b03      	ldr	r3, [sp, #12]
    2d94:	6153      	str	r3, [r2, #20]
}
    2d96:	bf00      	nop
    2d98:	b004      	add	sp, #16
    2d9a:	4770      	bx	lr
    2d9c:	40064000 	.word	0x40064000

00002da0 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2da0:	b084      	sub	sp, #16
    2da2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2da4:	4b09      	ldr	r3, [pc, #36]	; (2dcc <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2da6:	695b      	ldr	r3, [r3, #20]
    2da8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2daa:	9b03      	ldr	r3, [sp, #12]
    2dac:	f023 030f 	bic.w	r3, r3, #15
    2db0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2db2:	9b01      	ldr	r3, [sp, #4]
    2db4:	685b      	ldr	r3, [r3, #4]
    2db6:	3b01      	subs	r3, #1
    2db8:	9a03      	ldr	r2, [sp, #12]
    2dba:	4313      	orrs	r3, r2
    2dbc:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2dbe:	4a03      	ldr	r2, [pc, #12]	; (2dcc <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2dc0:	9b03      	ldr	r3, [sp, #12]
    2dc2:	6153      	str	r3, [r2, #20]
}
    2dc4:	bf00      	nop
    2dc6:	b004      	add	sp, #16
    2dc8:	4770      	bx	lr
    2dca:	bf00      	nop
    2dcc:	40064000 	.word	0x40064000

00002dd0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dd0:	b084      	sub	sp, #16
    2dd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2dd4:	4b09      	ldr	r3, [pc, #36]	; (2dfc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2dd6:	699b      	ldr	r3, [r3, #24]
    2dd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2dda:	9b03      	ldr	r3, [sp, #12]
    2ddc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2de0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2de2:	9b01      	ldr	r3, [sp, #4]
    2de4:	685b      	ldr	r3, [r3, #4]
    2de6:	3b01      	subs	r3, #1
    2de8:	041b      	lsls	r3, r3, #16
    2dea:	9a03      	ldr	r2, [sp, #12]
    2dec:	4313      	orrs	r3, r2
    2dee:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2df0:	4a02      	ldr	r2, [pc, #8]	; (2dfc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2df2:	9b03      	ldr	r3, [sp, #12]
    2df4:	6193      	str	r3, [r2, #24]
}
    2df6:	bf00      	nop
    2df8:	b004      	add	sp, #16
    2dfa:	4770      	bx	lr
    2dfc:	40064000 	.word	0x40064000

00002e00 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e00:	b084      	sub	sp, #16
    2e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e04:	4b09      	ldr	r3, [pc, #36]	; (2e2c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2e06:	699b      	ldr	r3, [r3, #24]
    2e08:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2e0a:	9b03      	ldr	r3, [sp, #12]
    2e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e10:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2e12:	9b01      	ldr	r3, [sp, #4]
    2e14:	685b      	ldr	r3, [r3, #4]
    2e16:	3b01      	subs	r3, #1
    2e18:	011b      	lsls	r3, r3, #4
    2e1a:	9a03      	ldr	r2, [sp, #12]
    2e1c:	4313      	orrs	r3, r2
    2e1e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e20:	4a02      	ldr	r2, [pc, #8]	; (2e2c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2e22:	9b03      	ldr	r3, [sp, #12]
    2e24:	6193      	str	r3, [r2, #24]
}
    2e26:	bf00      	nop
    2e28:	b004      	add	sp, #16
    2e2a:	4770      	bx	lr
    2e2c:	40064000 	.word	0x40064000

00002e30 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e30:	b084      	sub	sp, #16
    2e32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e34:	4b09      	ldr	r3, [pc, #36]	; (2e5c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2e36:	699b      	ldr	r3, [r3, #24]
    2e38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2e3a:	9b03      	ldr	r3, [sp, #12]
    2e3c:	f023 030f 	bic.w	r3, r3, #15
    2e40:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2e42:	9b01      	ldr	r3, [sp, #4]
    2e44:	685b      	ldr	r3, [r3, #4]
    2e46:	3b01      	subs	r3, #1
    2e48:	9a03      	ldr	r2, [sp, #12]
    2e4a:	4313      	orrs	r3, r2
    2e4c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e4e:	4a03      	ldr	r2, [pc, #12]	; (2e5c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2e50:	9b03      	ldr	r3, [sp, #12]
    2e52:	6193      	str	r3, [r2, #24]
}
    2e54:	bf00      	nop
    2e56:	b004      	add	sp, #16
    2e58:	4770      	bx	lr
    2e5a:	bf00      	nop
    2e5c:	40064000 	.word	0x40064000

00002e60 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e60:	b084      	sub	sp, #16
    2e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2e64:	4b09      	ldr	r3, [pc, #36]	; (2e8c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2e66:	69db      	ldr	r3, [r3, #28]
    2e68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2e6a:	9b03      	ldr	r3, [sp, #12]
    2e6c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e70:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2e72:	9b01      	ldr	r3, [sp, #4]
    2e74:	685b      	ldr	r3, [r3, #4]
    2e76:	3b01      	subs	r3, #1
    2e78:	041b      	lsls	r3, r3, #16
    2e7a:	9a03      	ldr	r2, [sp, #12]
    2e7c:	4313      	orrs	r3, r2
    2e7e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2e80:	4a02      	ldr	r2, [pc, #8]	; (2e8c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2e82:	9b03      	ldr	r3, [sp, #12]
    2e84:	61d3      	str	r3, [r2, #28]
}
    2e86:	bf00      	nop
    2e88:	b004      	add	sp, #16
    2e8a:	4770      	bx	lr
    2e8c:	40064000 	.word	0x40064000

00002e90 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e90:	b084      	sub	sp, #16
    2e92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2e94:	4b09      	ldr	r3, [pc, #36]	; (2ebc <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2e96:	69db      	ldr	r3, [r3, #28]
    2e98:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2e9a:	9b03      	ldr	r3, [sp, #12]
    2e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ea0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2ea2:	9b01      	ldr	r3, [sp, #4]
    2ea4:	685b      	ldr	r3, [r3, #4]
    2ea6:	3b01      	subs	r3, #1
    2ea8:	011b      	lsls	r3, r3, #4
    2eaa:	9a03      	ldr	r2, [sp, #12]
    2eac:	4313      	orrs	r3, r2
    2eae:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2eb0:	4a02      	ldr	r2, [pc, #8]	; (2ebc <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2eb2:	9b03      	ldr	r3, [sp, #12]
    2eb4:	61d3      	str	r3, [r2, #28]
}
    2eb6:	bf00      	nop
    2eb8:	b004      	add	sp, #16
    2eba:	4770      	bx	lr
    2ebc:	40064000 	.word	0x40064000

00002ec0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ec0:	b084      	sub	sp, #16
    2ec2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2ec4:	4b09      	ldr	r3, [pc, #36]	; (2eec <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ec6:	69db      	ldr	r3, [r3, #28]
    2ec8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	f023 030f 	bic.w	r3, r3, #15
    2ed0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2ed2:	9b01      	ldr	r3, [sp, #4]
    2ed4:	685b      	ldr	r3, [r3, #4]
    2ed6:	3b01      	subs	r3, #1
    2ed8:	9a03      	ldr	r2, [sp, #12]
    2eda:	4313      	orrs	r3, r2
    2edc:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ede:	4a03      	ldr	r2, [pc, #12]	; (2eec <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ee0:	9b03      	ldr	r3, [sp, #12]
    2ee2:	61d3      	str	r3, [r2, #28]
}
    2ee4:	bf00      	nop
    2ee6:	b004      	add	sp, #16
    2ee8:	4770      	bx	lr
    2eea:	bf00      	nop
    2eec:	40064000 	.word	0x40064000

00002ef0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2ef0:	b084      	sub	sp, #16
    2ef2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2ef4:	4b0a      	ldr	r3, [pc, #40]	; (2f20 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2ef6:	685b      	ldr	r3, [r3, #4]
    2ef8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2efa:	9b03      	ldr	r3, [sp, #12]
    2efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2f00:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2f02:	9b01      	ldr	r3, [sp, #4]
    2f04:	685b      	ldr	r3, [r3, #4]
    2f06:	3b01      	subs	r3, #1
    2f08:	021b      	lsls	r3, r3, #8
    2f0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2f0e:	9a03      	ldr	r2, [sp, #12]
    2f10:	4313      	orrs	r3, r2
    2f12:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2f14:	4a02      	ldr	r2, [pc, #8]	; (2f20 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2f16:	9b03      	ldr	r3, [sp, #12]
    2f18:	6053      	str	r3, [r2, #4]
}
    2f1a:	bf00      	nop
    2f1c:	b004      	add	sp, #16
    2f1e:	4770      	bx	lr
    2f20:	40048000 	.word	0x40048000

00002f24 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f24:	b084      	sub	sp, #16
    2f26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2f28:	4919      	ldr	r1, [pc, #100]	; (2f90 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2f2a:	9b01      	ldr	r3, [sp, #4]
    2f2c:	681a      	ldr	r2, [r3, #0]
    2f2e:	4819      	ldr	r0, [pc, #100]	; (2f94 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2f30:	4613      	mov	r3, r2
    2f32:	00db      	lsls	r3, r3, #3
    2f34:	4413      	add	r3, r2
    2f36:	4403      	add	r3, r0
    2f38:	3305      	adds	r3, #5
    2f3a:	781b      	ldrb	r3, [r3, #0]
    2f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2f40:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2f42:	9b03      	ldr	r3, [sp, #12]
    2f44:	f023 030f 	bic.w	r3, r3, #15
    2f48:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2f4a:	9b01      	ldr	r3, [sp, #4]
    2f4c:	685b      	ldr	r3, [r3, #4]
    2f4e:	3b01      	subs	r3, #1
    2f50:	f003 0307 	and.w	r3, r3, #7
    2f54:	9a03      	ldr	r2, [sp, #12]
    2f56:	4313      	orrs	r3, r2
    2f58:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2f5a:	9b01      	ldr	r3, [sp, #4]
    2f5c:	7a1b      	ldrb	r3, [r3, #8]
    2f5e:	3b01      	subs	r3, #1
    2f60:	00db      	lsls	r3, r3, #3
    2f62:	f003 0308 	and.w	r3, r3, #8
    2f66:	9a03      	ldr	r2, [sp, #12]
    2f68:	4313      	orrs	r3, r2
    2f6a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2f6c:	4908      	ldr	r1, [pc, #32]	; (2f90 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2f6e:	9b01      	ldr	r3, [sp, #4]
    2f70:	681a      	ldr	r2, [r3, #0]
    2f72:	4808      	ldr	r0, [pc, #32]	; (2f94 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2f74:	4613      	mov	r3, r2
    2f76:	00db      	lsls	r3, r3, #3
    2f78:	4413      	add	r3, r2
    2f7a:	4403      	add	r3, r0
    2f7c:	3305      	adds	r3, #5
    2f7e:	781b      	ldrb	r3, [r3, #0]
    2f80:	461a      	mov	r2, r3
    2f82:	9b03      	ldr	r3, [sp, #12]
    2f84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2f88:	bf00      	nop
    2f8a:	b004      	add	sp, #16
    2f8c:	4770      	bx	lr
    2f8e:	bf00      	nop
    2f90:	40065000 	.word	0x40065000
    2f94:	00014f94 	.word	0x00014f94

00002f98 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f98:	b084      	sub	sp, #16
    2f9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2f9c:	4b10      	ldr	r3, [pc, #64]	; (2fe0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2fa0:	4a0f      	ldr	r2, [pc, #60]	; (2fe0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2fa6:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2fa8:	4b0d      	ldr	r3, [pc, #52]	; (2fe0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2fac:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2fae:	9b03      	ldr	r3, [sp, #12]
    2fb0:	f023 030f 	bic.w	r3, r3, #15
    2fb4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	685b      	ldr	r3, [r3, #4]
    2fba:	3b01      	subs	r3, #1
    2fbc:	005b      	lsls	r3, r3, #1
    2fbe:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2fc2:	9b01      	ldr	r3, [sp, #4]
    2fc4:	7a1b      	ldrb	r3, [r3, #8]
    2fc6:	3b01      	subs	r3, #1
    2fc8:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2fcc:	4313      	orrs	r3, r2
    2fce:	9a03      	ldr	r2, [sp, #12]
    2fd0:	4313      	orrs	r3, r2
    2fd2:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2fd4:	4a02      	ldr	r2, [pc, #8]	; (2fe0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2fd6:	9b03      	ldr	r3, [sp, #12]
    2fd8:	6693      	str	r3, [r2, #104]	; 0x68
}
    2fda:	bf00      	nop
    2fdc:	b004      	add	sp, #16
    2fde:	4770      	bx	lr
    2fe0:	40048000 	.word	0x40048000

00002fe4 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2fe4:	b082      	sub	sp, #8
    2fe6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2fe8:	bf00      	nop
    2fea:	b002      	add	sp, #8
    2fec:	4770      	bx	lr
	...

00002ff0 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2ff0:	b082      	sub	sp, #8
    2ff2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ff4:	bf00      	nop
    2ff6:	b002      	add	sp, #8
    2ff8:	4770      	bx	lr

00002ffa <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2ffa:	b082      	sub	sp, #8
    2ffc:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2ffe:	bf00      	nop
    3000:	b002      	add	sp, #8
    3002:	4770      	bx	lr

00003004 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3004:	b500      	push	{lr}
    3006:	b083      	sub	sp, #12
    3008:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	2b00      	cmp	r3, #0
    300e:	d002      	beq.n	3016 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3010:	9801      	ldr	r0, [sp, #4]
    3012:	f000 f86a 	bl	30ea <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3016:	bf00      	nop
    3018:	b003      	add	sp, #12
    301a:	f85d fb04 	ldr.w	pc, [sp], #4

0000301e <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    301e:	b500      	push	{lr}
    3020:	b083      	sub	sp, #12
    3022:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3024:	9b01      	ldr	r3, [sp, #4]
    3026:	2b00      	cmp	r3, #0
    3028:	d002      	beq.n	3030 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    302a:	9801      	ldr	r0, [sp, #4]
    302c:	f000 f884 	bl	3138 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3030:	bf00      	nop
    3032:	b003      	add	sp, #12
    3034:	f85d fb04 	ldr.w	pc, [sp], #4

00003038 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3038:	b500      	push	{lr}
    303a:	b089      	sub	sp, #36	; 0x24
    303c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    303e:	2300      	movs	r3, #0
    3040:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3044:	9b01      	ldr	r3, [sp, #4]
    3046:	2b00      	cmp	r3, #0
    3048:	d031      	beq.n	30ae <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    304a:	4b1b      	ldr	r3, [pc, #108]	; (30b8 <Clock_Ip_CompleteSOSC+0x80>)
    304c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3050:	f003 0301 	and.w	r3, r3, #1
    3054:	2b00      	cmp	r3, #0
    3056:	d02a      	beq.n	30ae <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3058:	aa03      	add	r2, sp, #12
    305a:	a904      	add	r1, sp, #16
    305c:	a805      	add	r0, sp, #20
    305e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3062:	f7ff fd1d 	bl	2aa0 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3066:	4b14      	ldr	r3, [pc, #80]	; (30b8 <Clock_Ip_CompleteSOSC+0x80>)
    3068:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    306c:	0e1b      	lsrs	r3, r3, #24
    306e:	f003 0301 	and.w	r3, r3, #1
    3072:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3074:	9a03      	ldr	r2, [sp, #12]
    3076:	a904      	add	r1, sp, #16
    3078:	ab05      	add	r3, sp, #20
    307a:	4618      	mov	r0, r3
    307c:	f7ff fd2a 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    3080:	4603      	mov	r3, r0
    3082:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3086:	9b06      	ldr	r3, [sp, #24]
    3088:	2b00      	cmp	r3, #0
    308a:	d106      	bne.n	309a <Clock_Ip_CompleteSOSC+0x62>
    308c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3090:	f083 0301 	eor.w	r3, r3, #1
    3094:	b2db      	uxtb	r3, r3
    3096:	2b00      	cmp	r3, #0
    3098:	d1e5      	bne.n	3066 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    309a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    309e:	2b00      	cmp	r3, #0
    30a0:	d005      	beq.n	30ae <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	681b      	ldr	r3, [r3, #0]
    30a6:	4619      	mov	r1, r3
    30a8:	2001      	movs	r0, #1
    30aa:	f7ff fce9 	bl	2a80 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    30ae:	bf00      	nop
    30b0:	b009      	add	sp, #36	; 0x24
    30b2:	f85d fb04 	ldr.w	pc, [sp], #4
    30b6:	bf00      	nop
    30b8:	40064000 	.word	0x40064000

000030bc <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    30bc:	b500      	push	{lr}
    30be:	b083      	sub	sp, #12
    30c0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    30c2:	9801      	ldr	r0, [sp, #4]
    30c4:	f000 f8c0 	bl	3248 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    30c8:	bf00      	nop
    30ca:	b003      	add	sp, #12
    30cc:	f85d fb04 	ldr.w	pc, [sp], #4

000030d0 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30d0:	b500      	push	{lr}
    30d2:	b083      	sub	sp, #12
    30d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30d6:	9b01      	ldr	r3, [sp, #4]
    30d8:	2b00      	cmp	r3, #0
    30da:	d002      	beq.n	30e2 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    30dc:	9801      	ldr	r0, [sp, #4]
    30de:	f000 f8c3 	bl	3268 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30e2:	bf00      	nop
    30e4:	b003      	add	sp, #12
    30e6:	f85d fb04 	ldr.w	pc, [sp], #4

000030ea <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    30ea:	b082      	sub	sp, #8
    30ec:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    30ee:	4b11      	ldr	r3, [pc, #68]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30f4:	4a0f      	ldr	r2, [pc, #60]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    30f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30fa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3100:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3104:	4a0b      	ldr	r2, [pc, #44]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    310a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    310e:	4b09      	ldr	r3, [pc, #36]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3110:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3114:	4a07      	ldr	r2, [pc, #28]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3116:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    311a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    311e:	4b05      	ldr	r3, [pc, #20]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3120:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3124:	4a03      	ldr	r2, [pc, #12]	; (3134 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3126:	f023 0301 	bic.w	r3, r3, #1
    312a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    312e:	bf00      	nop
    3130:	b002      	add	sp, #8
    3132:	4770      	bx	lr
    3134:	40064000 	.word	0x40064000

00003138 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3138:	b082      	sub	sp, #8
    313a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    313c:	9b01      	ldr	r3, [sp, #4]
    313e:	891b      	ldrh	r3, [r3, #8]
    3140:	2b01      	cmp	r3, #1
    3142:	d174      	bne.n	322e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3144:	9b01      	ldr	r3, [sp, #4]
    3146:	7bdb      	ldrb	r3, [r3, #15]
    3148:	2b00      	cmp	r3, #0
    314a:	d002      	beq.n	3152 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    314c:	2b01      	cmp	r3, #1
    314e:	d009      	beq.n	3164 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3150:	e011      	b.n	3176 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3152:	4b39      	ldr	r3, [pc, #228]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3154:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3158:	4a37      	ldr	r2, [pc, #220]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    315a:	f023 0308 	bic.w	r3, r3, #8
    315e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3162:	e008      	b.n	3176 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3164:	4b34      	ldr	r3, [pc, #208]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3166:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    316a:	4a33      	ldr	r2, [pc, #204]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    316c:	f043 0308 	orr.w	r3, r3, #8
    3170:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3174:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3176:	4b30      	ldr	r3, [pc, #192]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3178:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    317c:	4a2e      	ldr	r2, [pc, #184]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    317e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3182:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3186:	9b01      	ldr	r3, [sp, #4]
    3188:	685b      	ldr	r3, [r3, #4]
    318a:	4a2c      	ldr	r2, [pc, #176]	; (323c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    318c:	4293      	cmp	r3, r2
    318e:	d90d      	bls.n	31ac <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3190:	9b01      	ldr	r3, [sp, #4]
    3192:	685b      	ldr	r3, [r3, #4]
    3194:	4a2a      	ldr	r2, [pc, #168]	; (3240 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3196:	4293      	cmp	r3, r2
    3198:	d208      	bcs.n	31ac <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    319a:	4b27      	ldr	r3, [pc, #156]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    319c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31a0:	4a25      	ldr	r2, [pc, #148]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31a2:	f043 0320 	orr.w	r3, r3, #32
    31a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    31aa:	e007      	b.n	31bc <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    31ac:	4b22      	ldr	r3, [pc, #136]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31b2:	4a21      	ldr	r2, [pc, #132]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    31b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    31bc:	9b01      	ldr	r3, [sp, #4]
    31be:	7b1b      	ldrb	r3, [r3, #12]
    31c0:	2b00      	cmp	r3, #0
    31c2:	d108      	bne.n	31d6 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    31c4:	4b1c      	ldr	r3, [pc, #112]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31ca:	4a1b      	ldr	r2, [pc, #108]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31cc:	f043 0304 	orr.w	r3, r3, #4
    31d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    31d4:	e007      	b.n	31e6 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    31d6:	4b18      	ldr	r3, [pc, #96]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31dc:	4a16      	ldr	r2, [pc, #88]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31de:	f023 0304 	bic.w	r3, r3, #4
    31e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	7c1b      	ldrb	r3, [r3, #16]
    31ea:	2b02      	cmp	r3, #2
    31ec:	d011      	beq.n	3212 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    31ee:	2b02      	cmp	r3, #2
    31f0:	dc14      	bgt.n	321c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    31f2:	2b00      	cmp	r3, #0
    31f4:	d002      	beq.n	31fc <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    31f6:	2b01      	cmp	r3, #1
    31f8:	d005      	beq.n	3206 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    31fa:	e00f      	b.n	321c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    31fc:	4b0e      	ldr	r3, [pc, #56]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31fe:	2201      	movs	r2, #1
    3200:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3204:	e014      	b.n	3230 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3206:	4b0c      	ldr	r3, [pc, #48]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3208:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    320c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3210:	e00e      	b.n	3230 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3212:	4b09      	ldr	r3, [pc, #36]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3214:	4a0b      	ldr	r2, [pc, #44]	; (3244 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3216:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    321a:	e009      	b.n	3230 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    321c:	4b06      	ldr	r3, [pc, #24]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    321e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3222:	4a05      	ldr	r2, [pc, #20]	; (3238 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3224:	f043 0301 	orr.w	r3, r3, #1
    3228:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    322c:	e000      	b.n	3230 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    322e:	bf00      	nop
}
    3230:	bf00      	nop
    3232:	b002      	add	sp, #8
    3234:	4770      	bx	lr
    3236:	bf00      	nop
    3238:	40064000 	.word	0x40064000
    323c:	003d08ff 	.word	0x003d08ff
    3240:	007a1200 	.word	0x007a1200
    3244:	00030001 	.word	0x00030001

00003248 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3248:	b082      	sub	sp, #8
    324a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    324c:	4b05      	ldr	r3, [pc, #20]	; (3264 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    324e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3252:	4a04      	ldr	r2, [pc, #16]	; (3264 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3254:	f023 0301 	bic.w	r3, r3, #1
    3258:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    325c:	bf00      	nop
    325e:	b002      	add	sp, #8
    3260:	4770      	bx	lr
    3262:	bf00      	nop
    3264:	40064000 	.word	0x40064000

00003268 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3268:	b082      	sub	sp, #8
    326a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    326c:	9b01      	ldr	r3, [sp, #4]
    326e:	891b      	ldrh	r3, [r3, #8]
    3270:	2b01      	cmp	r3, #1
    3272:	d107      	bne.n	3284 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3274:	4b05      	ldr	r3, [pc, #20]	; (328c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3276:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    327a:	4a04      	ldr	r2, [pc, #16]	; (328c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    327c:	f043 0301 	orr.w	r3, r3, #1
    3280:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3284:	bf00      	nop
    3286:	b002      	add	sp, #8
    3288:	4770      	bx	lr
    328a:	bf00      	nop
    328c:	40064000 	.word	0x40064000

00003290 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3290:	b082      	sub	sp, #8
    3292:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3294:	bf00      	nop
    3296:	b002      	add	sp, #8
    3298:	4770      	bx	lr

0000329a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    329a:	b082      	sub	sp, #8
    329c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    329e:	2300      	movs	r3, #0
}
    32a0:	4618      	mov	r0, r3
    32a2:	b002      	add	sp, #8
    32a4:	4770      	bx	lr

000032a6 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    32a6:	b082      	sub	sp, #8
    32a8:	9001      	str	r0, [sp, #4]
    32aa:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    32ac:	bf00      	nop
    32ae:	b002      	add	sp, #8
    32b0:	4770      	bx	lr
	...

000032b4 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    32b4:	b082      	sub	sp, #8
    32b6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    32b8:	bf00      	nop
    32ba:	b002      	add	sp, #8
    32bc:	4770      	bx	lr

000032be <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    32be:	b082      	sub	sp, #8
    32c0:	9001      	str	r0, [sp, #4]
    32c2:	460b      	mov	r3, r1
    32c4:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    32c8:	bf00      	nop
    32ca:	b002      	add	sp, #8
    32cc:	4770      	bx	lr

000032ce <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    32ce:	b500      	push	{lr}
    32d0:	b083      	sub	sp, #12
    32d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32d4:	9b01      	ldr	r3, [sp, #4]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d002      	beq.n	32e0 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    32da:	9801      	ldr	r0, [sp, #4]
    32dc:	f000 f8e7 	bl	34ae <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32e0:	bf00      	nop
    32e2:	b003      	add	sp, #12
    32e4:	f85d fb04 	ldr.w	pc, [sp], #4

000032e8 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    32e8:	b500      	push	{lr}
    32ea:	b085      	sub	sp, #20
    32ec:	9001      	str	r0, [sp, #4]
    32ee:	460b      	mov	r3, r1
    32f0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    32f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    32fc:	2b00      	cmp	r3, #0
    32fe:	d003      	beq.n	3308 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3300:	2300      	movs	r3, #0
    3302:	f8ad 300c 	strh.w	r3, [sp, #12]
    3306:	e002      	b.n	330e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3308:	2301      	movs	r3, #1
    330a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    330e:	ab02      	add	r3, sp, #8
    3310:	4618      	mov	r0, r3
    3312:	f7ff ffdc 	bl	32ce <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3316:	bf00      	nop
    3318:	b005      	add	sp, #20
    331a:	f85d fb04 	ldr.w	pc, [sp], #4

0000331e <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    331e:	b500      	push	{lr}
    3320:	b083      	sub	sp, #12
    3322:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3324:	9b01      	ldr	r3, [sp, #4]
    3326:	2b00      	cmp	r3, #0
    3328:	d002      	beq.n	3330 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    332a:	9801      	ldr	r0, [sp, #4]
    332c:	f000 f8d6 	bl	34dc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3330:	bf00      	nop
    3332:	b003      	add	sp, #12
    3334:	f85d fb04 	ldr.w	pc, [sp], #4

00003338 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3338:	b500      	push	{lr}
    333a:	b085      	sub	sp, #20
    333c:	9001      	str	r0, [sp, #4]
    333e:	460b      	mov	r3, r1
    3340:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3348:	f89d 3003 	ldrb.w	r3, [sp, #3]
    334c:	2b00      	cmp	r3, #0
    334e:	d003      	beq.n	3358 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3350:	2300      	movs	r3, #0
    3352:	f8ad 300c 	strh.w	r3, [sp, #12]
    3356:	e002      	b.n	335e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3358:	2301      	movs	r3, #1
    335a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    335e:	ab02      	add	r3, sp, #8
    3360:	4618      	mov	r0, r3
    3362:	f7ff ffdc 	bl	331e <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3366:	bf00      	nop
    3368:	b005      	add	sp, #20
    336a:	f85d fb04 	ldr.w	pc, [sp], #4

0000336e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    336e:	b500      	push	{lr}
    3370:	b083      	sub	sp, #12
    3372:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3374:	9b01      	ldr	r3, [sp, #4]
    3376:	2b00      	cmp	r3, #0
    3378:	d002      	beq.n	3380 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    337a:	9801      	ldr	r0, [sp, #4]
    337c:	f000 f8c6 	bl	350c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3380:	bf00      	nop
    3382:	b003      	add	sp, #12
    3384:	f85d fb04 	ldr.w	pc, [sp], #4

00003388 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3388:	b500      	push	{lr}
    338a:	b085      	sub	sp, #20
    338c:	9001      	str	r0, [sp, #4]
    338e:	460b      	mov	r3, r1
    3390:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3398:	f89d 3003 	ldrb.w	r3, [sp, #3]
    339c:	2b00      	cmp	r3, #0
    339e:	d003      	beq.n	33a8 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    33a0:	2300      	movs	r3, #0
    33a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    33a6:	e002      	b.n	33ae <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33a8:	2301      	movs	r3, #1
    33aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    33ae:	ab02      	add	r3, sp, #8
    33b0:	4618      	mov	r0, r3
    33b2:	f7ff ffdc 	bl	336e <Clock_Ip_ClockSetSimClkoutEnable>
}
    33b6:	bf00      	nop
    33b8:	b005      	add	sp, #20
    33ba:	f85d fb04 	ldr.w	pc, [sp], #4

000033be <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    33be:	b500      	push	{lr}
    33c0:	b083      	sub	sp, #12
    33c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33c4:	9b01      	ldr	r3, [sp, #4]
    33c6:	2b00      	cmp	r3, #0
    33c8:	d002      	beq.n	33d0 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    33ca:	9801      	ldr	r0, [sp, #4]
    33cc:	f000 f8b6 	bl	353c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33d0:	bf00      	nop
    33d2:	b003      	add	sp, #12
    33d4:	f85d fb04 	ldr.w	pc, [sp], #4

000033d8 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33d8:	b500      	push	{lr}
    33da:	b085      	sub	sp, #20
    33dc:	9001      	str	r0, [sp, #4]
    33de:	460b      	mov	r3, r1
    33e0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33e4:	9b01      	ldr	r3, [sp, #4]
    33e6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d003      	beq.n	33f8 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    33f0:	2300      	movs	r3, #0
    33f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    33f6:	e002      	b.n	33fe <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33f8:	2301      	movs	r3, #1
    33fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    33fe:	ab02      	add	r3, sp, #8
    3400:	4618      	mov	r0, r3
    3402:	f7ff ffdc 	bl	33be <Clock_Ip_ClockSetPccCgcEnable>
}
    3406:	bf00      	nop
    3408:	b005      	add	sp, #20
    340a:	f85d fb04 	ldr.w	pc, [sp], #4

0000340e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    340e:	b500      	push	{lr}
    3410:	b083      	sub	sp, #12
    3412:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3414:	9b01      	ldr	r3, [sp, #4]
    3416:	2b00      	cmp	r3, #0
    3418:	d002      	beq.n	3420 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    341a:	9801      	ldr	r0, [sp, #4]
    341c:	f000 f8bc 	bl	3598 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3420:	bf00      	nop
    3422:	b003      	add	sp, #12
    3424:	f85d fb04 	ldr.w	pc, [sp], #4

00003428 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3428:	b500      	push	{lr}
    342a:	b085      	sub	sp, #20
    342c:	9001      	str	r0, [sp, #4]
    342e:	460b      	mov	r3, r1
    3430:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3438:	f89d 3003 	ldrb.w	r3, [sp, #3]
    343c:	2b00      	cmp	r3, #0
    343e:	d003      	beq.n	3448 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3440:	2300      	movs	r3, #0
    3442:	f8ad 300c 	strh.w	r3, [sp, #12]
    3446:	e002      	b.n	344e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3448:	2301      	movs	r3, #1
    344a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    344e:	ab02      	add	r3, sp, #8
    3450:	4618      	mov	r0, r3
    3452:	f7ff ffdc 	bl	340e <Clock_Ip_ClockSetSimGate>
}
    3456:	bf00      	nop
    3458:	b005      	add	sp, #20
    345a:	f85d fb04 	ldr.w	pc, [sp], #4

0000345e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    345e:	b500      	push	{lr}
    3460:	b083      	sub	sp, #12
    3462:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3464:	9b01      	ldr	r3, [sp, #4]
    3466:	2b00      	cmp	r3, #0
    3468:	d002      	beq.n	3470 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    346a:	9801      	ldr	r0, [sp, #4]
    346c:	f000 f8c0 	bl	35f0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3470:	bf00      	nop
    3472:	b003      	add	sp, #12
    3474:	f85d fb04 	ldr.w	pc, [sp], #4

00003478 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3478:	b500      	push	{lr}
    347a:	b085      	sub	sp, #20
    347c:	9001      	str	r0, [sp, #4]
    347e:	460b      	mov	r3, r1
    3480:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3488:	f89d 3003 	ldrb.w	r3, [sp, #3]
    348c:	2b00      	cmp	r3, #0
    348e:	d003      	beq.n	3498 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3490:	2300      	movs	r3, #0
    3492:	f8ad 300c 	strh.w	r3, [sp, #12]
    3496:	e002      	b.n	349e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3498:	2301      	movs	r3, #1
    349a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    349e:	ab02      	add	r3, sp, #8
    34a0:	4618      	mov	r0, r3
    34a2:	f7ff ffdc 	bl	345e <Clock_Ip_ClockSetSimTraceEnable>
}
    34a6:	bf00      	nop
    34a8:	b005      	add	sp, #20
    34aa:	f85d fb04 	ldr.w	pc, [sp], #4

000034ae <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    34ae:	b084      	sub	sp, #16
    34b0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    34b2:	4b09      	ldr	r3, [pc, #36]	; (34d8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    34b4:	691b      	ldr	r3, [r3, #16]
    34b6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    34b8:	9b03      	ldr	r3, [sp, #12]
    34ba:	f023 0301 	bic.w	r3, r3, #1
    34be:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    34c0:	9b01      	ldr	r3, [sp, #4]
    34c2:	889b      	ldrh	r3, [r3, #4]
    34c4:	461a      	mov	r2, r3
    34c6:	9b03      	ldr	r3, [sp, #12]
    34c8:	4313      	orrs	r3, r2
    34ca:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    34cc:	4a02      	ldr	r2, [pc, #8]	; (34d8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    34ce:	9b03      	ldr	r3, [sp, #12]
    34d0:	6113      	str	r3, [r2, #16]
}
    34d2:	bf00      	nop
    34d4:	b004      	add	sp, #16
    34d6:	4770      	bx	lr
    34d8:	40048000 	.word	0x40048000

000034dc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    34dc:	b084      	sub	sp, #16
    34de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    34e0:	4b09      	ldr	r3, [pc, #36]	; (3508 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    34e2:	691b      	ldr	r3, [r3, #16]
    34e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    34e6:	9b03      	ldr	r3, [sp, #12]
    34e8:	f023 0302 	bic.w	r3, r3, #2
    34ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    34ee:	9b01      	ldr	r3, [sp, #4]
    34f0:	889b      	ldrh	r3, [r3, #4]
    34f2:	005b      	lsls	r3, r3, #1
    34f4:	9a03      	ldr	r2, [sp, #12]
    34f6:	4313      	orrs	r3, r2
    34f8:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    34fa:	4a03      	ldr	r2, [pc, #12]	; (3508 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    34fc:	9b03      	ldr	r3, [sp, #12]
    34fe:	6113      	str	r3, [r2, #16]
}
    3500:	bf00      	nop
    3502:	b004      	add	sp, #16
    3504:	4770      	bx	lr
    3506:	bf00      	nop
    3508:	40048000 	.word	0x40048000

0000350c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    350c:	b084      	sub	sp, #16
    350e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3510:	4b09      	ldr	r3, [pc, #36]	; (3538 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3512:	685b      	ldr	r3, [r3, #4]
    3514:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3516:	9b03      	ldr	r3, [sp, #12]
    3518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    351c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    351e:	9b01      	ldr	r3, [sp, #4]
    3520:	889b      	ldrh	r3, [r3, #4]
    3522:	02db      	lsls	r3, r3, #11
    3524:	9a03      	ldr	r2, [sp, #12]
    3526:	4313      	orrs	r3, r2
    3528:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    352a:	4a03      	ldr	r2, [pc, #12]	; (3538 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    352c:	9b03      	ldr	r3, [sp, #12]
    352e:	6053      	str	r3, [r2, #4]
}
    3530:	bf00      	nop
    3532:	b004      	add	sp, #16
    3534:	4770      	bx	lr
    3536:	bf00      	nop
    3538:	40048000 	.word	0x40048000

0000353c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    353c:	b084      	sub	sp, #16
    353e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3540:	4913      	ldr	r1, [pc, #76]	; (3590 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	681a      	ldr	r2, [r3, #0]
    3546:	4813      	ldr	r0, [pc, #76]	; (3594 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3548:	4613      	mov	r3, r2
    354a:	00db      	lsls	r3, r3, #3
    354c:	4413      	add	r3, r2
    354e:	4403      	add	r3, r0
    3550:	3306      	adds	r3, #6
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3558:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    355a:	9b03      	ldr	r3, [sp, #12]
    355c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3560:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3562:	9b01      	ldr	r3, [sp, #4]
    3564:	889b      	ldrh	r3, [r3, #4]
    3566:	079b      	lsls	r3, r3, #30
    3568:	9a03      	ldr	r2, [sp, #12]
    356a:	4313      	orrs	r3, r2
    356c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    356e:	4908      	ldr	r1, [pc, #32]	; (3590 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3570:	9b01      	ldr	r3, [sp, #4]
    3572:	681a      	ldr	r2, [r3, #0]
    3574:	4807      	ldr	r0, [pc, #28]	; (3594 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3576:	4613      	mov	r3, r2
    3578:	00db      	lsls	r3, r3, #3
    357a:	4413      	add	r3, r2
    357c:	4403      	add	r3, r0
    357e:	3306      	adds	r3, #6
    3580:	781b      	ldrb	r3, [r3, #0]
    3582:	461a      	mov	r2, r3
    3584:	9b03      	ldr	r3, [sp, #12]
    3586:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    358a:	bf00      	nop
    358c:	b004      	add	sp, #16
    358e:	4770      	bx	lr
    3590:	40065000 	.word	0x40065000
    3594:	00014f94 	.word	0x00014f94

00003598 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3598:	b086      	sub	sp, #24
    359a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	889b      	ldrh	r3, [r3, #4]
    35a0:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    35a2:	9b01      	ldr	r3, [sp, #4]
    35a4:	681a      	ldr	r2, [r3, #0]
    35a6:	4910      	ldr	r1, [pc, #64]	; (35e8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    35a8:	4613      	mov	r3, r2
    35aa:	00db      	lsls	r3, r3, #3
    35ac:	4413      	add	r3, r2
    35ae:	440b      	add	r3, r1
    35b0:	3306      	adds	r3, #6
    35b2:	781b      	ldrb	r3, [r3, #0]
    35b4:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    35b6:	4b0d      	ldr	r3, [pc, #52]	; (35ec <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    35b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35ba:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    35bc:	2201      	movs	r2, #1
    35be:	9b04      	ldr	r3, [sp, #16]
    35c0:	fa02 f303 	lsl.w	r3, r2, r3
    35c4:	43db      	mvns	r3, r3
    35c6:	9a03      	ldr	r2, [sp, #12]
    35c8:	4013      	ands	r3, r2
    35ca:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    35cc:	9a05      	ldr	r2, [sp, #20]
    35ce:	9b04      	ldr	r3, [sp, #16]
    35d0:	fa02 f303 	lsl.w	r3, r2, r3
    35d4:	9a03      	ldr	r2, [sp, #12]
    35d6:	4313      	orrs	r3, r2
    35d8:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    35da:	4a04      	ldr	r2, [pc, #16]	; (35ec <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    35dc:	9b03      	ldr	r3, [sp, #12]
    35de:	6413      	str	r3, [r2, #64]	; 0x40
}
    35e0:	bf00      	nop
    35e2:	b006      	add	sp, #24
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	00014f94 	.word	0x00014f94
    35ec:	40048000 	.word	0x40048000

000035f0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35f0:	b084      	sub	sp, #16
    35f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    35f4:	4b0a      	ldr	r3, [pc, #40]	; (3620 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    35f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    35f8:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    35fa:	9b01      	ldr	r3, [sp, #4]
    35fc:	889b      	ldrh	r3, [r3, #4]
    35fe:	2b01      	cmp	r3, #1
    3600:	d104      	bne.n	360c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3602:	9b03      	ldr	r3, [sp, #12]
    3604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3608:	9303      	str	r3, [sp, #12]
    360a:	e003      	b.n	3614 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    360c:	9b03      	ldr	r3, [sp, #12]
    360e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3612:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3614:	4a02      	ldr	r2, [pc, #8]	; (3620 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3616:	9b03      	ldr	r3, [sp, #12]
    3618:	6693      	str	r3, [r2, #104]	; 0x68
}
    361a:	bf00      	nop
    361c:	b004      	add	sp, #16
    361e:	4770      	bx	lr
    3620:	40048000 	.word	0x40048000

00003624 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3624:	b082      	sub	sp, #8
    3626:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3628:	bf00      	nop
    362a:	b002      	add	sp, #8
    362c:	4770      	bx	lr

0000362e <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    362e:	b082      	sub	sp, #8
    3630:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3632:	bf00      	nop
    3634:	b002      	add	sp, #8
    3636:	4770      	bx	lr

00003638 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3638:	b500      	push	{lr}
    363a:	b083      	sub	sp, #12
    363c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    363e:	9b01      	ldr	r3, [sp, #4]
    3640:	2b00      	cmp	r3, #0
    3642:	d002      	beq.n	364a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3644:	9801      	ldr	r0, [sp, #4]
    3646:	f000 f8d1 	bl	37ec <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    364a:	bf00      	nop
    364c:	b003      	add	sp, #12
    364e:	f85d fb04 	ldr.w	pc, [sp], #4

00003652 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3652:	b500      	push	{lr}
    3654:	b083      	sub	sp, #12
    3656:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3658:	9b01      	ldr	r3, [sp, #4]
    365a:	2b00      	cmp	r3, #0
    365c:	d002      	beq.n	3664 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    365e:	9801      	ldr	r0, [sp, #4]
    3660:	f000 f950 	bl	3904 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3664:	bf00      	nop
    3666:	b003      	add	sp, #12
    3668:	f85d fb04 	ldr.w	pc, [sp], #4

0000366c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    366c:	b500      	push	{lr}
    366e:	b083      	sub	sp, #12
    3670:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3672:	9801      	ldr	r0, [sp, #4]
    3674:	f000 f98e 	bl	3994 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3678:	bf00      	nop
    367a:	b003      	add	sp, #12
    367c:	f85d fb04 	ldr.w	pc, [sp], #4

00003680 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3680:	b500      	push	{lr}
    3682:	b083      	sub	sp, #12
    3684:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	2b00      	cmp	r3, #0
    368a:	d002      	beq.n	3692 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    368c:	9801      	ldr	r0, [sp, #4]
    368e:	f000 f999 	bl	39c4 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3692:	bf00      	nop
    3694:	b003      	add	sp, #12
    3696:	f85d fb04 	ldr.w	pc, [sp], #4

0000369a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    369a:	b500      	push	{lr}
    369c:	b083      	sub	sp, #12
    369e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	2b00      	cmp	r3, #0
    36a4:	d002      	beq.n	36ac <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    36a6:	9801      	ldr	r0, [sp, #4]
    36a8:	f000 f9b0 	bl	3a0c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ac:	bf00      	nop
    36ae:	b003      	add	sp, #12
    36b0:	f85d fb04 	ldr.w	pc, [sp], #4

000036b4 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    36b4:	b500      	push	{lr}
    36b6:	b083      	sub	sp, #12
    36b8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    36ba:	9801      	ldr	r0, [sp, #4]
    36bc:	f000 f9ba 	bl	3a34 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    36c0:	bf00      	nop
    36c2:	b003      	add	sp, #12
    36c4:	f85d fb04 	ldr.w	pc, [sp], #4

000036c8 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    36c8:	b500      	push	{lr}
    36ca:	b083      	sub	sp, #12
    36cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ce:	9b01      	ldr	r3, [sp, #4]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d002      	beq.n	36da <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    36d4:	9801      	ldr	r0, [sp, #4]
    36d6:	f000 f9bd 	bl	3a54 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36da:	bf00      	nop
    36dc:	b003      	add	sp, #12
    36de:	f85d fb04 	ldr.w	pc, [sp], #4

000036e2 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    36e2:	b500      	push	{lr}
    36e4:	b083      	sub	sp, #12
    36e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36e8:	9b01      	ldr	r3, [sp, #4]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d002      	beq.n	36f4 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    36ee:	9801      	ldr	r0, [sp, #4]
    36f0:	f000 f9d4 	bl	3a9c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f4:	bf00      	nop
    36f6:	b003      	add	sp, #12
    36f8:	f85d fb04 	ldr.w	pc, [sp], #4

000036fc <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    36fc:	b500      	push	{lr}
    36fe:	b083      	sub	sp, #12
    3700:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3702:	9801      	ldr	r0, [sp, #4]
    3704:	f000 f9de 	bl	3ac4 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3708:	bf00      	nop
    370a:	b003      	add	sp, #12
    370c:	f85d fb04 	ldr.w	pc, [sp], #4

00003710 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3710:	b500      	push	{lr}
    3712:	b089      	sub	sp, #36	; 0x24
    3714:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3716:	2300      	movs	r3, #0
    3718:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    371c:	4b20      	ldr	r3, [pc, #128]	; (37a0 <SetInputSouceSytemClock+0x90>)
    371e:	695b      	ldr	r3, [r3, #20]
    3720:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3722:	9b06      	ldr	r3, [sp, #24]
    3724:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3728:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	061b      	lsls	r3, r3, #24
    372e:	9a06      	ldr	r2, [sp, #24]
    3730:	4313      	orrs	r3, r2
    3732:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3734:	4a1a      	ldr	r2, [pc, #104]	; (37a0 <SetInputSouceSytemClock+0x90>)
    3736:	9b06      	ldr	r3, [sp, #24]
    3738:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    373a:	aa02      	add	r2, sp, #8
    373c:	a903      	add	r1, sp, #12
    373e:	a804      	add	r0, sp, #16
    3740:	f24c 3350 	movw	r3, #50000	; 0xc350
    3744:	f7ff f9ac 	bl	2aa0 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3748:	4b15      	ldr	r3, [pc, #84]	; (37a0 <SetInputSouceSytemClock+0x90>)
    374a:	691b      	ldr	r3, [r3, #16]
    374c:	0e1b      	lsrs	r3, r3, #24
    374e:	f003 030f 	and.w	r3, r3, #15
    3752:	9a01      	ldr	r2, [sp, #4]
    3754:	429a      	cmp	r2, r3
    3756:	bf0c      	ite	eq
    3758:	2301      	moveq	r3, #1
    375a:	2300      	movne	r3, #0
    375c:	b2db      	uxtb	r3, r3
    375e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3760:	9a02      	ldr	r2, [sp, #8]
    3762:	a903      	add	r1, sp, #12
    3764:	ab04      	add	r3, sp, #16
    3766:	4618      	mov	r0, r3
    3768:	f7ff f9b4 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    376c:	4603      	mov	r3, r0
    376e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3772:	9b05      	ldr	r3, [sp, #20]
    3774:	2b00      	cmp	r3, #0
    3776:	d106      	bne.n	3786 <SetInputSouceSytemClock+0x76>
    3778:	f89d 301f 	ldrb.w	r3, [sp, #31]
    377c:	f083 0301 	eor.w	r3, r3, #1
    3780:	b2db      	uxtb	r3, r3
    3782:	2b00      	cmp	r3, #0
    3784:	d1e0      	bne.n	3748 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3786:	f89d 301f 	ldrb.w	r3, [sp, #31]
    378a:	2b00      	cmp	r3, #0
    378c:	d003      	beq.n	3796 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    378e:	2105      	movs	r1, #5
    3790:	2001      	movs	r0, #1
    3792:	f7ff f975 	bl	2a80 <Clock_Ip_ReportClockErrors>
    }
}
    3796:	bf00      	nop
    3798:	b009      	add	sp, #36	; 0x24
    379a:	f85d fb04 	ldr.w	pc, [sp], #4
    379e:	bf00      	nop
    37a0:	40064000 	.word	0x40064000

000037a4 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37a4:	b500      	push	{lr}
    37a6:	b083      	sub	sp, #12
    37a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d002      	beq.n	37b6 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    37b0:	9801      	ldr	r0, [sp, #4]
    37b2:	f000 f997 	bl	3ae4 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37b6:	bf00      	nop
    37b8:	b003      	add	sp, #12
    37ba:	f85d fb04 	ldr.w	pc, [sp], #4

000037be <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37be:	b500      	push	{lr}
    37c0:	b083      	sub	sp, #12
    37c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c4:	9b01      	ldr	r3, [sp, #4]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d002      	beq.n	37d0 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    37ca:	9801      	ldr	r0, [sp, #4]
    37cc:	f000 fa7e 	bl	3ccc <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d0:	bf00      	nop
    37d2:	b003      	add	sp, #12
    37d4:	f85d fb04 	ldr.w	pc, [sp], #4

000037d8 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    37d8:	b500      	push	{lr}
    37da:	b083      	sub	sp, #12
    37dc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    37de:	9801      	ldr	r0, [sp, #4]
    37e0:	f000 fab8 	bl	3d54 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37e4:	bf00      	nop
    37e6:	b003      	add	sp, #12
    37e8:	f85d fb04 	ldr.w	pc, [sp], #4

000037ec <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    37ec:	b500      	push	{lr}
    37ee:	b08b      	sub	sp, #44	; 0x2c
    37f0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    37f2:	2300      	movs	r3, #0
    37f4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    37f8:	9b01      	ldr	r3, [sp, #4]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d10b      	bne.n	3816 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    37fe:	2305      	movs	r3, #5
    3800:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3802:	2301      	movs	r3, #1
    3804:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3808:	2301      	movs	r3, #1
    380a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    380e:	2301      	movs	r3, #1
    3810:	f88d 3010 	strb.w	r3, [sp, #16]
    3814:	e00e      	b.n	3834 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3816:	9b01      	ldr	r3, [sp, #4]
    3818:	681b      	ldr	r3, [r3, #0]
    381a:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	79db      	ldrb	r3, [r3, #7]
    3820:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3824:	9b01      	ldr	r3, [sp, #4]
    3826:	889b      	ldrh	r3, [r3, #4]
    3828:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	7a1b      	ldrb	r3, [r3, #8]
    3830:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3834:	4b32      	ldr	r3, [pc, #200]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3836:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    383a:	4a31      	ldr	r2, [pc, #196]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    383c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3840:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3844:	4b2e      	ldr	r3, [pc, #184]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3846:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    384a:	4a2d      	ldr	r2, [pc, #180]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    384c:	f023 0301 	bic.w	r3, r3, #1
    3850:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3854:	4b2a      	ldr	r3, [pc, #168]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3856:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    385a:	4a29      	ldr	r2, [pc, #164]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    385c:	f023 0304 	bic.w	r3, r3, #4
    3860:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3864:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3868:	2b01      	cmp	r3, #1
    386a:	d144      	bne.n	38f6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    386c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3870:	4a23      	ldr	r2, [pc, #140]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3872:	f003 0301 	and.w	r3, r3, #1
    3876:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    387a:	4b21      	ldr	r3, [pc, #132]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    387c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3880:	4a1f      	ldr	r2, [pc, #124]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3882:	f043 0301 	orr.w	r3, r3, #1
    3886:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    388a:	4b1d      	ldr	r3, [pc, #116]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    388c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3890:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3894:	009b      	lsls	r3, r3, #2
    3896:	f003 0304 	and.w	r3, r3, #4
    389a:	4919      	ldr	r1, [pc, #100]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    389c:	4313      	orrs	r3, r2
    389e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    38a2:	aa05      	add	r2, sp, #20
    38a4:	a906      	add	r1, sp, #24
    38a6:	a807      	add	r0, sp, #28
    38a8:	f24c 3350 	movw	r3, #50000	; 0xc350
    38ac:	f7ff f8f8 	bl	2aa0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    38b0:	4b13      	ldr	r3, [pc, #76]	; (3900 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38b6:	0e1b      	lsrs	r3, r3, #24
    38b8:	f003 0301 	and.w	r3, r3, #1
    38bc:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    38be:	9a05      	ldr	r2, [sp, #20]
    38c0:	a906      	add	r1, sp, #24
    38c2:	ab07      	add	r3, sp, #28
    38c4:	4618      	mov	r0, r3
    38c6:	f7ff f905 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    38ca:	4603      	mov	r3, r0
    38cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    38d0:	9b08      	ldr	r3, [sp, #32]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d106      	bne.n	38e4 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    38d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    38da:	f083 0301 	eor.w	r3, r3, #1
    38de:	b2db      	uxtb	r3, r3
    38e0:	2b00      	cmp	r3, #0
    38e2:	d1e5      	bne.n	38b0 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    38e4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    38e8:	2b00      	cmp	r3, #0
    38ea:	d004      	beq.n	38f6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    38ec:	9b02      	ldr	r3, [sp, #8]
    38ee:	4619      	mov	r1, r3
    38f0:	2001      	movs	r0, #1
    38f2:	f7ff f8c5 	bl	2a80 <Clock_Ip_ReportClockErrors>
        }
    }
}
    38f6:	bf00      	nop
    38f8:	b00b      	add	sp, #44	; 0x2c
    38fa:	f85d fb04 	ldr.w	pc, [sp], #4
    38fe:	bf00      	nop
    3900:	40064000 	.word	0x40064000

00003904 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3904:	b500      	push	{lr}
    3906:	b089      	sub	sp, #36	; 0x24
    3908:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    390a:	2300      	movs	r3, #0
    390c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3910:	4b1f      	ldr	r3, [pc, #124]	; (3990 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3912:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3916:	4a1e      	ldr	r2, [pc, #120]	; (3990 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3918:	f043 0301 	orr.w	r3, r3, #1
    391c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3920:	4b1b      	ldr	r3, [pc, #108]	; (3990 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3926:	4a1a      	ldr	r2, [pc, #104]	; (3990 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3928:	f043 0304 	orr.w	r3, r3, #4
    392c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3930:	aa03      	add	r2, sp, #12
    3932:	a904      	add	r1, sp, #16
    3934:	a805      	add	r0, sp, #20
    3936:	f24c 3350 	movw	r3, #50000	; 0xc350
    393a:	f7ff f8b1 	bl	2aa0 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    393e:	4b14      	ldr	r3, [pc, #80]	; (3990 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3944:	0e1b      	lsrs	r3, r3, #24
    3946:	f003 0301 	and.w	r3, r3, #1
    394a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    394c:	9a03      	ldr	r2, [sp, #12]
    394e:	a904      	add	r1, sp, #16
    3950:	ab05      	add	r3, sp, #20
    3952:	4618      	mov	r0, r3
    3954:	f7ff f8be 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    3958:	4603      	mov	r3, r0
    395a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    395e:	9b06      	ldr	r3, [sp, #24]
    3960:	2b00      	cmp	r3, #0
    3962:	d106      	bne.n	3972 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3964:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3968:	f083 0301 	eor.w	r3, r3, #1
    396c:	b2db      	uxtb	r3, r3
    396e:	2b00      	cmp	r3, #0
    3970:	d1e5      	bne.n	393e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3972:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3976:	2b00      	cmp	r3, #0
    3978:	d005      	beq.n	3986 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    397a:	9b01      	ldr	r3, [sp, #4]
    397c:	681b      	ldr	r3, [r3, #0]
    397e:	4619      	mov	r1, r3
    3980:	2001      	movs	r0, #1
    3982:	f7ff f87d 	bl	2a80 <Clock_Ip_ReportClockErrors>
    }
}
    3986:	bf00      	nop
    3988:	b009      	add	sp, #36	; 0x24
    398a:	f85d fb04 	ldr.w	pc, [sp], #4
    398e:	bf00      	nop
    3990:	40064000 	.word	0x40064000

00003994 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3994:	b082      	sub	sp, #8
    3996:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3998:	4b09      	ldr	r3, [pc, #36]	; (39c0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    399a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399e:	4a08      	ldr	r2, [pc, #32]	; (39c0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    39a0:	f023 0301 	bic.w	r3, r3, #1
    39a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    39a8:	4b05      	ldr	r3, [pc, #20]	; (39c0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    39aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ae:	4a04      	ldr	r2, [pc, #16]	; (39c0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    39b0:	f023 0304 	bic.w	r3, r3, #4
    39b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    39b8:	bf00      	nop
    39ba:	b002      	add	sp, #8
    39bc:	4770      	bx	lr
    39be:	bf00      	nop
    39c0:	40064000 	.word	0x40064000

000039c4 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    39c4:	b082      	sub	sp, #8
    39c6:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    39c8:	4b0f      	ldr	r3, [pc, #60]	; (3a08 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ce:	4a0e      	ldr	r2, [pc, #56]	; (3a08 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    39d8:	4b0b      	ldr	r3, [pc, #44]	; (3a08 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39de:	4a0a      	ldr	r2, [pc, #40]	; (3a08 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39e0:	f023 0304 	bic.w	r3, r3, #4
    39e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    39e8:	4b07      	ldr	r3, [pc, #28]	; (3a08 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39ee:	9b01      	ldr	r3, [sp, #4]
    39f0:	7a1b      	ldrb	r3, [r3, #8]
    39f2:	009b      	lsls	r3, r3, #2
    39f4:	f003 0304 	and.w	r3, r3, #4
    39f8:	4903      	ldr	r1, [pc, #12]	; (3a08 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    39fa:	4313      	orrs	r3, r2
    39fc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3a00:	bf00      	nop
    3a02:	b002      	add	sp, #8
    3a04:	4770      	bx	lr
    3a06:	bf00      	nop
    3a08:	40064000 	.word	0x40064000

00003a0c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a0c:	b082      	sub	sp, #8
    3a0e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3a10:	9b01      	ldr	r3, [sp, #4]
    3a12:	889b      	ldrh	r3, [r3, #4]
    3a14:	2b01      	cmp	r3, #1
    3a16:	d107      	bne.n	3a28 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3a18:	4b05      	ldr	r3, [pc, #20]	; (3a30 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a1e:	4a04      	ldr	r2, [pc, #16]	; (3a30 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3a20:	f043 0304 	orr.w	r3, r3, #4
    3a24:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3a28:	bf00      	nop
    3a2a:	b002      	add	sp, #8
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	40064000 	.word	0x40064000

00003a34 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3a34:	b082      	sub	sp, #8
    3a36:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a38:	4b05      	ldr	r3, [pc, #20]	; (3a50 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a3e:	4a04      	ldr	r2, [pc, #16]	; (3a50 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3a40:	f023 0304 	bic.w	r3, r3, #4
    3a44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a48:	bf00      	nop
    3a4a:	b002      	add	sp, #8
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	40064000 	.word	0x40064000

00003a54 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a54:	b082      	sub	sp, #8
    3a56:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3a58:	4b0f      	ldr	r3, [pc, #60]	; (3a98 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a5e:	4a0e      	ldr	r2, [pc, #56]	; (3a98 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3a64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3a68:	4b0b      	ldr	r3, [pc, #44]	; (3a98 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a6e:	4a0a      	ldr	r2, [pc, #40]	; (3a98 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a70:	f023 0302 	bic.w	r3, r3, #2
    3a74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3a78:	4b07      	ldr	r3, [pc, #28]	; (3a98 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a7e:	9b01      	ldr	r3, [sp, #4]
    3a80:	7a5b      	ldrb	r3, [r3, #9]
    3a82:	005b      	lsls	r3, r3, #1
    3a84:	f003 0302 	and.w	r3, r3, #2
    3a88:	4903      	ldr	r1, [pc, #12]	; (3a98 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3a8a:	4313      	orrs	r3, r2
    3a8c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3a90:	bf00      	nop
    3a92:	b002      	add	sp, #8
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop
    3a98:	40064000 	.word	0x40064000

00003a9c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a9c:	b082      	sub	sp, #8
    3a9e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3aa0:	9b01      	ldr	r3, [sp, #4]
    3aa2:	889b      	ldrh	r3, [r3, #4]
    3aa4:	2b01      	cmp	r3, #1
    3aa6:	d107      	bne.n	3ab8 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3aa8:	4b05      	ldr	r3, [pc, #20]	; (3ac0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aae:	4a04      	ldr	r2, [pc, #16]	; (3ac0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3ab0:	f043 0302 	orr.w	r3, r3, #2
    3ab4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ab8:	bf00      	nop
    3aba:	b002      	add	sp, #8
    3abc:	4770      	bx	lr
    3abe:	bf00      	nop
    3ac0:	40064000 	.word	0x40064000

00003ac4 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3ac4:	b082      	sub	sp, #8
    3ac6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3ac8:	4b05      	ldr	r3, [pc, #20]	; (3ae0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ace:	4a04      	ldr	r2, [pc, #16]	; (3ae0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3ad0:	f023 0302 	bic.w	r3, r3, #2
    3ad4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ad8:	bf00      	nop
    3ada:	b002      	add	sp, #8
    3adc:	4770      	bx	lr
    3ade:	bf00      	nop
    3ae0:	40064000 	.word	0x40064000

00003ae4 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae4:	b500      	push	{lr}
    3ae6:	b08b      	sub	sp, #44	; 0x2c
    3ae8:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3aea:	9b01      	ldr	r3, [sp, #4]
    3aec:	681a      	ldr	r2, [r3, #0]
    3aee:	4975      	ldr	r1, [pc, #468]	; (3cc4 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3af0:	4613      	mov	r3, r2
    3af2:	00db      	lsls	r3, r3, #3
    3af4:	4413      	add	r3, r2
    3af6:	440b      	add	r3, r1
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3afc:	2300      	movs	r3, #0
    3afe:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3b02:	2300      	movs	r3, #0
    3b04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3b08:	4b6f      	ldr	r3, [pc, #444]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b0e:	4a6e      	ldr	r2, [pc, #440]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b14:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3b18:	4b6b      	ldr	r3, [pc, #428]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3b22:	2b00      	cmp	r3, #0
    3b24:	d07d      	beq.n	3c22 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3b26:	9b01      	ldr	r3, [sp, #4]
    3b28:	79db      	ldrb	r3, [r3, #7]
    3b2a:	461a      	mov	r2, r3
    3b2c:	4b66      	ldr	r3, [pc, #408]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b2e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3b32:	f003 0303 	and.w	r3, r3, #3
    3b36:	429a      	cmp	r2, r3
    3b38:	d10b      	bne.n	3b52 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3b3a:	9b01      	ldr	r3, [sp, #4]
    3b3c:	799b      	ldrb	r3, [r3, #6]
    3b3e:	461a      	mov	r2, r3
    3b40:	4b61      	ldr	r3, [pc, #388]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b46:	08db      	lsrs	r3, r3, #3
    3b48:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3b4c:	429a      	cmp	r2, r3
    3b4e:	f000 80b4 	beq.w	3cba <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3b52:	4b5d      	ldr	r3, [pc, #372]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b58:	f003 0301 	and.w	r3, r3, #1
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d105      	bne.n	3b6c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3b60:	2301      	movs	r3, #1
    3b62:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3b66:	2000      	movs	r0, #0
    3b68:	f7ff fd66 	bl	3638 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3b6c:	2002      	movs	r0, #2
    3b6e:	f7ff fdcf 	bl	3710 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3b72:	4b55      	ldr	r3, [pc, #340]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b74:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b78:	4a53      	ldr	r2, [pc, #332]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b7a:	f023 0301 	bic.w	r3, r3, #1
    3b7e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3b82:	9b01      	ldr	r3, [sp, #4]
    3b84:	889b      	ldrh	r3, [r3, #4]
    3b86:	2b01      	cmp	r3, #1
    3b88:	f040 8097 	bne.w	3cba <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3b8c:	9b01      	ldr	r3, [sp, #4]
    3b8e:	79db      	ldrb	r3, [r3, #7]
    3b90:	4a4d      	ldr	r2, [pc, #308]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b92:	f003 0303 	and.w	r3, r3, #3
    3b96:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3b9a:	4b4b      	ldr	r3, [pc, #300]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b9c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ba0:	9b01      	ldr	r3, [sp, #4]
    3ba2:	799b      	ldrb	r3, [r3, #6]
    3ba4:	00db      	lsls	r3, r3, #3
    3ba6:	f003 0308 	and.w	r3, r3, #8
    3baa:	4313      	orrs	r3, r2
    3bac:	4a46      	ldr	r2, [pc, #280]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bae:	f043 0301 	orr.w	r3, r3, #1
    3bb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3bb6:	aa03      	add	r2, sp, #12
    3bb8:	a904      	add	r1, sp, #16
    3bba:	a805      	add	r0, sp, #20
    3bbc:	f24c 3350 	movw	r3, #50000	; 0xc350
    3bc0:	f7fe ff6e 	bl	2aa0 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3bc4:	4b40      	ldr	r3, [pc, #256]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bca:	0e1b      	lsrs	r3, r3, #24
    3bcc:	f003 0301 	and.w	r3, r3, #1
    3bd0:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3bd2:	9a03      	ldr	r2, [sp, #12]
    3bd4:	a904      	add	r1, sp, #16
    3bd6:	ab05      	add	r3, sp, #20
    3bd8:	4618      	mov	r0, r3
    3bda:	f7fe ff7b 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    3bde:	4603      	mov	r3, r0
    3be0:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3be4:	9b06      	ldr	r3, [sp, #24]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d106      	bne.n	3bf8 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3bea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bee:	f083 0301 	eor.w	r3, r3, #1
    3bf2:	b2db      	uxtb	r3, r3
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d1e5      	bne.n	3bc4 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3bf8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d005      	beq.n	3c0c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3c00:	9b01      	ldr	r3, [sp, #4]
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	4619      	mov	r1, r3
    3c06:	2001      	movs	r0, #1
    3c08:	f7fe ff3a 	bl	2a80 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3c0c:	2003      	movs	r0, #3
    3c0e:	f7ff fd7f 	bl	3710 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3c12:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c16:	2b00      	cmp	r3, #0
    3c18:	d04f      	beq.n	3cba <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3c1a:	2002      	movs	r0, #2
    3c1c:	f7ff fd26 	bl	366c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3c20:	e04b      	b.n	3cba <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c22:	4b29      	ldr	r3, [pc, #164]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c24:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c28:	4a27      	ldr	r2, [pc, #156]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c2a:	f023 0301 	bic.w	r3, r3, #1
    3c2e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3c32:	9b01      	ldr	r3, [sp, #4]
    3c34:	889b      	ldrh	r3, [r3, #4]
    3c36:	2b01      	cmp	r3, #1
    3c38:	d13f      	bne.n	3cba <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c3a:	9b01      	ldr	r3, [sp, #4]
    3c3c:	79db      	ldrb	r3, [r3, #7]
    3c3e:	4a22      	ldr	r2, [pc, #136]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c40:	f003 0303 	and.w	r3, r3, #3
    3c44:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c48:	4b1f      	ldr	r3, [pc, #124]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c4e:	9b01      	ldr	r3, [sp, #4]
    3c50:	799b      	ldrb	r3, [r3, #6]
    3c52:	00db      	lsls	r3, r3, #3
    3c54:	f003 0308 	and.w	r3, r3, #8
    3c58:	4313      	orrs	r3, r2
    3c5a:	4a1b      	ldr	r2, [pc, #108]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5c:	f043 0301 	orr.w	r3, r3, #1
    3c60:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c64:	aa03      	add	r2, sp, #12
    3c66:	a904      	add	r1, sp, #16
    3c68:	a805      	add	r0, sp, #20
    3c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c6e:	f7fe ff17 	bl	2aa0 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c72:	4b15      	ldr	r3, [pc, #84]	; (3cc8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c74:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c78:	0e1b      	lsrs	r3, r3, #24
    3c7a:	f003 0301 	and.w	r3, r3, #1
    3c7e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c80:	9a03      	ldr	r2, [sp, #12]
    3c82:	a904      	add	r1, sp, #16
    3c84:	ab05      	add	r3, sp, #20
    3c86:	4618      	mov	r0, r3
    3c88:	f7fe ff24 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    3c8c:	4603      	mov	r3, r0
    3c8e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c92:	9b06      	ldr	r3, [sp, #24]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d106      	bne.n	3ca6 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3c98:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c9c:	f083 0301 	eor.w	r3, r3, #1
    3ca0:	b2db      	uxtb	r3, r3
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d1e5      	bne.n	3c72 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3ca6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3caa:	2b00      	cmp	r3, #0
    3cac:	d005      	beq.n	3cba <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3cae:	9b01      	ldr	r3, [sp, #4]
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	4619      	mov	r1, r3
    3cb4:	2001      	movs	r0, #1
    3cb6:	f7fe fee3 	bl	2a80 <Clock_Ip_ReportClockErrors>
}
    3cba:	bf00      	nop
    3cbc:	b00b      	add	sp, #44	; 0x2c
    3cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    3cc2:	bf00      	nop
    3cc4:	00014f94 	.word	0x00014f94
    3cc8:	40064000 	.word	0x40064000

00003ccc <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ccc:	b500      	push	{lr}
    3cce:	b089      	sub	sp, #36	; 0x24
    3cd0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3cd2:	2300      	movs	r3, #0
    3cd4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	889b      	ldrh	r3, [r3, #4]
    3cdc:	2b01      	cmp	r3, #1
    3cde:	d132      	bne.n	3d46 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3ce0:	4b1b      	ldr	r3, [pc, #108]	; (3d50 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3ce2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ce6:	4a1a      	ldr	r2, [pc, #104]	; (3d50 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3ce8:	f043 0301 	orr.w	r3, r3, #1
    3cec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cf0:	aa03      	add	r2, sp, #12
    3cf2:	a904      	add	r1, sp, #16
    3cf4:	a805      	add	r0, sp, #20
    3cf6:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cfa:	f7fe fed1 	bl	2aa0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3cfe:	4b14      	ldr	r3, [pc, #80]	; (3d50 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d00:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d04:	0e1b      	lsrs	r3, r3, #24
    3d06:	f003 0301 	and.w	r3, r3, #1
    3d0a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d0c:	9a03      	ldr	r2, [sp, #12]
    3d0e:	a904      	add	r1, sp, #16
    3d10:	ab05      	add	r3, sp, #20
    3d12:	4618      	mov	r0, r3
    3d14:	f7fe fede 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    3d18:	4603      	mov	r3, r0
    3d1a:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d1e:	9b06      	ldr	r3, [sp, #24]
    3d20:	2b00      	cmp	r3, #0
    3d22:	d106      	bne.n	3d32 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3d24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d28:	f083 0301 	eor.w	r3, r3, #1
    3d2c:	b2db      	uxtb	r3, r3
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d1e5      	bne.n	3cfe <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3d32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d36:	2b00      	cmp	r3, #0
    3d38:	d005      	beq.n	3d46 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d3a:	9b01      	ldr	r3, [sp, #4]
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	4619      	mov	r1, r3
    3d40:	2001      	movs	r0, #1
    3d42:	f7fe fe9d 	bl	2a80 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3d46:	bf00      	nop
    3d48:	b009      	add	sp, #36	; 0x24
    3d4a:	f85d fb04 	ldr.w	pc, [sp], #4
    3d4e:	bf00      	nop
    3d50:	40064000 	.word	0x40064000

00003d54 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3d54:	b082      	sub	sp, #8
    3d56:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3d58:	4b05      	ldr	r3, [pc, #20]	; (3d70 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3d5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d5e:	4a04      	ldr	r2, [pc, #16]	; (3d70 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3d60:	f023 0301 	bic.w	r3, r3, #1
    3d64:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3d68:	bf00      	nop
    3d6a:	b002      	add	sp, #8
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	40064000 	.word	0x40064000

00003d74 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3d74:	b082      	sub	sp, #8
    3d76:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d78:	bf00      	nop
    3d7a:	b002      	add	sp, #8
    3d7c:	4770      	bx	lr

00003d7e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3d7e:	b082      	sub	sp, #8
    3d80:	9001      	str	r0, [sp, #4]
    3d82:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3d84:	bf00      	nop
    3d86:	b002      	add	sp, #8
    3d88:	4770      	bx	lr

00003d8a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3d8a:	b082      	sub	sp, #8
    3d8c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3d8e:	bf00      	nop
    3d90:	b002      	add	sp, #8
    3d92:	4770      	bx	lr

00003d94 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3d94:	b082      	sub	sp, #8
    3d96:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d98:	bf00      	nop
    3d9a:	b002      	add	sp, #8
    3d9c:	4770      	bx	lr

00003d9e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3d9e:	b082      	sub	sp, #8
    3da0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3da2:	2302      	movs	r3, #2
}
    3da4:	4618      	mov	r0, r3
    3da6:	b002      	add	sp, #8
    3da8:	4770      	bx	lr

00003daa <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3daa:	b082      	sub	sp, #8
    3dac:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3dae:	bf00      	nop
    3db0:	b002      	add	sp, #8
    3db2:	4770      	bx	lr

00003db4 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3db4:	b500      	push	{lr}
    3db6:	b083      	sub	sp, #12
    3db8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d002      	beq.n	3dc6 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3dc0:	9801      	ldr	r0, [sp, #4]
    3dc2:	f000 f870 	bl	3ea6 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dc6:	bf00      	nop
    3dc8:	b003      	add	sp, #12
    3dca:	f85d fb04 	ldr.w	pc, [sp], #4

00003dce <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3dce:	b500      	push	{lr}
    3dd0:	b083      	sub	sp, #12
    3dd2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dd4:	9b01      	ldr	r3, [sp, #4]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d002      	beq.n	3de0 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3dda:	9801      	ldr	r0, [sp, #4]
    3ddc:	f000 f89a 	bl	3f14 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3de0:	bf00      	nop
    3de2:	b003      	add	sp, #12
    3de4:	f85d fb04 	ldr.w	pc, [sp], #4

00003de8 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3de8:	b500      	push	{lr}
    3dea:	b089      	sub	sp, #36	; 0x24
    3dec:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3dee:	2301      	movs	r3, #1
    3df0:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3df2:	2300      	movs	r3, #0
    3df4:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3df8:	4b1e      	ldr	r3, [pc, #120]	; (3e74 <Clock_Ip_CompleteSpll+0x8c>)
    3dfa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3dfe:	f003 0301 	and.w	r3, r3, #1
    3e02:	2b00      	cmp	r3, #0
    3e04:	d02f      	beq.n	3e66 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e06:	aa02      	add	r2, sp, #8
    3e08:	a903      	add	r1, sp, #12
    3e0a:	a804      	add	r0, sp, #16
    3e0c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e10:	f7fe fe46 	bl	2aa0 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3e14:	4b17      	ldr	r3, [pc, #92]	; (3e74 <Clock_Ip_CompleteSpll+0x8c>)
    3e16:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e1a:	0e1b      	lsrs	r3, r3, #24
    3e1c:	f003 0301 	and.w	r3, r3, #1
    3e20:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e22:	9a02      	ldr	r2, [sp, #8]
    3e24:	a903      	add	r1, sp, #12
    3e26:	ab04      	add	r3, sp, #16
    3e28:	4618      	mov	r0, r3
    3e2a:	f7fe fe53 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    3e2e:	4603      	mov	r3, r0
    3e30:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3e34:	9b05      	ldr	r3, [sp, #20]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d106      	bne.n	3e48 <Clock_Ip_CompleteSpll+0x60>
    3e3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3e3e:	f083 0301 	eor.w	r3, r3, #1
    3e42:	b2db      	uxtb	r3, r3
    3e44:	2b00      	cmp	r3, #0
    3e46:	d1e5      	bne.n	3e14 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3e48:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3e4c:	f083 0301 	eor.w	r3, r3, #1
    3e50:	b2db      	uxtb	r3, r3
    3e52:	2b00      	cmp	r3, #0
    3e54:	d002      	beq.n	3e5c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3e56:	2302      	movs	r3, #2
    3e58:	9307      	str	r3, [sp, #28]
    3e5a:	e006      	b.n	3e6a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3e5c:	9901      	ldr	r1, [sp, #4]
    3e5e:	2001      	movs	r0, #1
    3e60:	f7fe fe0e 	bl	2a80 <Clock_Ip_ReportClockErrors>
    3e64:	e001      	b.n	3e6a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3e66:	2300      	movs	r3, #0
    3e68:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3e6a:	9b07      	ldr	r3, [sp, #28]
}
    3e6c:	4618      	mov	r0, r3
    3e6e:	b009      	add	sp, #36	; 0x24
    3e70:	f85d fb04 	ldr.w	pc, [sp], #4
    3e74:	40064000 	.word	0x40064000

00003e78 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3e78:	b500      	push	{lr}
    3e7a:	b083      	sub	sp, #12
    3e7c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3e7e:	9801      	ldr	r0, [sp, #4]
    3e80:	f000 f886 	bl	3f90 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e84:	bf00      	nop
    3e86:	b003      	add	sp, #12
    3e88:	f85d fb04 	ldr.w	pc, [sp], #4

00003e8c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3e8c:	b500      	push	{lr}
    3e8e:	b083      	sub	sp, #12
    3e90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e92:	9b01      	ldr	r3, [sp, #4]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d002      	beq.n	3e9e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3e98:	9801      	ldr	r0, [sp, #4]
    3e9a:	f000 f891 	bl	3fc0 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e9e:	bf00      	nop
    3ea0:	b003      	add	sp, #12
    3ea2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ea6 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3ea6:	b082      	sub	sp, #8
    3ea8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3eaa:	4b19      	ldr	r3, [pc, #100]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3eac:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3eb0:	4a17      	ldr	r2, [pc, #92]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3eb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3eb6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3eba:	4b15      	ldr	r3, [pc, #84]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ebc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ec0:	4a13      	ldr	r2, [pc, #76]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3ec6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3eca:	4b11      	ldr	r3, [pc, #68]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ecc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ed0:	4a0f      	ldr	r2, [pc, #60]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ed2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3ed6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3eda:	4b0d      	ldr	r3, [pc, #52]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3edc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ee0:	4a0b      	ldr	r2, [pc, #44]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ee2:	f023 0301 	bic.w	r3, r3, #1
    3ee6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3eea:	4b09      	ldr	r3, [pc, #36]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3eec:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3ef0:	4a07      	ldr	r2, [pc, #28]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ef2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3ef6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3efa:	4b05      	ldr	r3, [pc, #20]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3efc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f00:	4a03      	ldr	r2, [pc, #12]	; (3f10 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3f06:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3f0a:	bf00      	nop
    3f0c:	b002      	add	sp, #8
    3f0e:	4770      	bx	lr
    3f10:	40064000 	.word	0x40064000

00003f14 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f14:	b082      	sub	sp, #8
    3f16:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3f18:	9b01      	ldr	r3, [sp, #4]
    3f1a:	889b      	ldrh	r3, [r3, #4]
    3f1c:	2b01      	cmp	r3, #1
    3f1e:	d12f      	bne.n	3f80 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3f20:	4b1a      	ldr	r3, [pc, #104]	; (3f8c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f22:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3f26:	9b01      	ldr	r3, [sp, #4]
    3f28:	7b5b      	ldrb	r3, [r3, #13]
    3f2a:	3b01      	subs	r3, #1
    3f2c:	021b      	lsls	r3, r3, #8
    3f2e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3f32:	9b01      	ldr	r3, [sp, #4]
    3f34:	7d1b      	ldrb	r3, [r3, #20]
    3f36:	3b10      	subs	r3, #16
    3f38:	041b      	lsls	r3, r3, #16
    3f3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3f3e:	430b      	orrs	r3, r1
    3f40:	4912      	ldr	r1, [pc, #72]	; (3f8c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f42:	4313      	orrs	r3, r2
    3f44:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3f48:	9b01      	ldr	r3, [sp, #4]
    3f4a:	7fdb      	ldrb	r3, [r3, #31]
    3f4c:	2b02      	cmp	r3, #2
    3f4e:	d011      	beq.n	3f74 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3f50:	2b02      	cmp	r3, #2
    3f52:	dc17      	bgt.n	3f84 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3f54:	2b00      	cmp	r3, #0
    3f56:	d002      	beq.n	3f5e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3f58:	2b01      	cmp	r3, #1
    3f5a:	d005      	beq.n	3f68 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3f5c:	e012      	b.n	3f84 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3f5e:	4b0b      	ldr	r3, [pc, #44]	; (3f8c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f60:	2200      	movs	r2, #0
    3f62:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3f66:	e00e      	b.n	3f86 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3f68:	4b08      	ldr	r3, [pc, #32]	; (3f8c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3f6e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3f72:	e008      	b.n	3f86 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3f74:	4b05      	ldr	r3, [pc, #20]	; (3f8c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3f76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3f7a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3f7e:	e002      	b.n	3f86 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3f80:	bf00      	nop
    3f82:	e000      	b.n	3f86 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3f84:	bf00      	nop
}
    3f86:	bf00      	nop
    3f88:	b002      	add	sp, #8
    3f8a:	4770      	bx	lr
    3f8c:	40064000 	.word	0x40064000

00003f90 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3f90:	b082      	sub	sp, #8
    3f92:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f94:	4b09      	ldr	r3, [pc, #36]	; (3fbc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3f96:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f9a:	4a08      	ldr	r2, [pc, #32]	; (3fbc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3f9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fa0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3fa4:	4b05      	ldr	r3, [pc, #20]	; (3fbc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3fa6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3faa:	4a04      	ldr	r2, [pc, #16]	; (3fbc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3fac:	f023 0301 	bic.w	r3, r3, #1
    3fb0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3fb4:	bf00      	nop
    3fb6:	b002      	add	sp, #8
    3fb8:	4770      	bx	lr
    3fba:	bf00      	nop
    3fbc:	40064000 	.word	0x40064000

00003fc0 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fc0:	b082      	sub	sp, #8
    3fc2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	889b      	ldrh	r3, [r3, #4]
    3fc8:	2b01      	cmp	r3, #1
    3fca:	d107      	bne.n	3fdc <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3fcc:	4b05      	ldr	r3, [pc, #20]	; (3fe4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3fce:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fd2:	4a04      	ldr	r2, [pc, #16]	; (3fe4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3fd4:	f043 0301 	orr.w	r3, r3, #1
    3fd8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3fdc:	bf00      	nop
    3fde:	b002      	add	sp, #8
    3fe0:	4770      	bx	lr
    3fe2:	bf00      	nop
    3fe4:	40064000 	.word	0x40064000

00003fe8 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3fe8:	b082      	sub	sp, #8
    3fea:	9001      	str	r0, [sp, #4]
    3fec:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3fee:	bf00      	nop
    3ff0:	b002      	add	sp, #8
    3ff2:	4770      	bx	lr

00003ff4 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3ff4:	b082      	sub	sp, #8
    3ff6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ff8:	bf00      	nop
    3ffa:	b002      	add	sp, #8
    3ffc:	4770      	bx	lr

00003ffe <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ffe:	b500      	push	{lr}
    4000:	b083      	sub	sp, #12
    4002:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4004:	9b01      	ldr	r3, [sp, #4]
    4006:	2b00      	cmp	r3, #0
    4008:	d002      	beq.n	4010 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    400a:	9801      	ldr	r0, [sp, #4]
    400c:	f000 f8ee 	bl	41ec <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4010:	bf00      	nop
    4012:	b003      	add	sp, #12
    4014:	f85d fb04 	ldr.w	pc, [sp], #4

00004018 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4018:	b500      	push	{lr}
    401a:	b083      	sub	sp, #12
    401c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    401e:	9b01      	ldr	r3, [sp, #4]
    4020:	2b00      	cmp	r3, #0
    4022:	d002      	beq.n	402a <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4024:	9801      	ldr	r0, [sp, #4]
    4026:	f000 f8ff 	bl	4228 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    402a:	bf00      	nop
    402c:	b003      	add	sp, #12
    402e:	f85d fb04 	ldr.w	pc, [sp], #4

00004032 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4032:	b500      	push	{lr}
    4034:	b083      	sub	sp, #12
    4036:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4038:	9b01      	ldr	r3, [sp, #4]
    403a:	2b00      	cmp	r3, #0
    403c:	d002      	beq.n	4044 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    403e:	9801      	ldr	r0, [sp, #4]
    4040:	f000 f912 	bl	4268 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4044:	bf00      	nop
    4046:	b003      	add	sp, #12
    4048:	f85d fb04 	ldr.w	pc, [sp], #4

0000404c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    404c:	b500      	push	{lr}
    404e:	b083      	sub	sp, #12
    4050:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4052:	9b01      	ldr	r3, [sp, #4]
    4054:	2b00      	cmp	r3, #0
    4056:	d002      	beq.n	405e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4058:	9801      	ldr	r0, [sp, #4]
    405a:	f000 f925 	bl	42a8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    405e:	bf00      	nop
    4060:	b003      	add	sp, #12
    4062:	f85d fb04 	ldr.w	pc, [sp], #4

00004066 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4066:	b500      	push	{lr}
    4068:	b083      	sub	sp, #12
    406a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    406c:	9b01      	ldr	r3, [sp, #4]
    406e:	2b00      	cmp	r3, #0
    4070:	d002      	beq.n	4078 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4072:	9801      	ldr	r0, [sp, #4]
    4074:	f000 f936 	bl	42e4 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4078:	bf00      	nop
    407a:	b003      	add	sp, #12
    407c:	f85d fb04 	ldr.w	pc, [sp], #4

00004080 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4080:	b500      	push	{lr}
    4082:	b083      	sub	sp, #12
    4084:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4086:	9b01      	ldr	r3, [sp, #4]
    4088:	2b00      	cmp	r3, #0
    408a:	d002      	beq.n	4092 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    408c:	9801      	ldr	r0, [sp, #4]
    408e:	f000 f949 	bl	4324 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4092:	bf00      	nop
    4094:	b003      	add	sp, #12
    4096:	f85d fb04 	ldr.w	pc, [sp], #4

0000409a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    409a:	b500      	push	{lr}
    409c:	b083      	sub	sp, #12
    409e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40a0:	9b01      	ldr	r3, [sp, #4]
    40a2:	2b00      	cmp	r3, #0
    40a4:	d002      	beq.n	40ac <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    40a6:	9801      	ldr	r0, [sp, #4]
    40a8:	f000 f958 	bl	435c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40ac:	bf00      	nop
    40ae:	b003      	add	sp, #12
    40b0:	f85d fb04 	ldr.w	pc, [sp], #4

000040b4 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    40b4:	b500      	push	{lr}
    40b6:	b083      	sub	sp, #12
    40b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40ba:	9b01      	ldr	r3, [sp, #4]
    40bc:	2b00      	cmp	r3, #0
    40be:	d002      	beq.n	40c6 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    40c0:	9801      	ldr	r0, [sp, #4]
    40c2:	f000 f969 	bl	4398 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40c6:	bf00      	nop
    40c8:	b003      	add	sp, #12
    40ca:	f85d fb04 	ldr.w	pc, [sp], #4

000040ce <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    40ce:	b500      	push	{lr}
    40d0:	b083      	sub	sp, #12
    40d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40d4:	9b01      	ldr	r3, [sp, #4]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d002      	beq.n	40e0 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    40da:	9801      	ldr	r0, [sp, #4]
    40dc:	f000 f978 	bl	43d0 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40e0:	bf00      	nop
    40e2:	b003      	add	sp, #12
    40e4:	f85d fb04 	ldr.w	pc, [sp], #4

000040e8 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    40e8:	b500      	push	{lr}
    40ea:	b083      	sub	sp, #12
    40ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40ee:	9b01      	ldr	r3, [sp, #4]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d002      	beq.n	40fa <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    40f4:	9801      	ldr	r0, [sp, #4]
    40f6:	f000 f989 	bl	440c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40fa:	bf00      	nop
    40fc:	b003      	add	sp, #12
    40fe:	f85d fb04 	ldr.w	pc, [sp], #4

00004102 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4102:	b500      	push	{lr}
    4104:	b083      	sub	sp, #12
    4106:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4108:	9b01      	ldr	r3, [sp, #4]
    410a:	2b00      	cmp	r3, #0
    410c:	d002      	beq.n	4114 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    410e:	9801      	ldr	r0, [sp, #4]
    4110:	f000 f998 	bl	4444 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4114:	bf00      	nop
    4116:	b003      	add	sp, #12
    4118:	f85d fb04 	ldr.w	pc, [sp], #4

0000411c <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    411c:	b500      	push	{lr}
    411e:	b083      	sub	sp, #12
    4120:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4122:	9b01      	ldr	r3, [sp, #4]
    4124:	2b00      	cmp	r3, #0
    4126:	d002      	beq.n	412e <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4128:	9801      	ldr	r0, [sp, #4]
    412a:	f000 f9a9 	bl	4480 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    412e:	bf00      	nop
    4130:	b003      	add	sp, #12
    4132:	f85d fb04 	ldr.w	pc, [sp], #4

00004136 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4136:	b500      	push	{lr}
    4138:	b083      	sub	sp, #12
    413a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    413c:	9b01      	ldr	r3, [sp, #4]
    413e:	2b00      	cmp	r3, #0
    4140:	d002      	beq.n	4148 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4142:	9801      	ldr	r0, [sp, #4]
    4144:	f000 f9e6 	bl	4514 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4148:	bf00      	nop
    414a:	b003      	add	sp, #12
    414c:	f85d fb04 	ldr.w	pc, [sp], #4

00004150 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4150:	b500      	push	{lr}
    4152:	b083      	sub	sp, #12
    4154:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4156:	9b01      	ldr	r3, [sp, #4]
    4158:	2b00      	cmp	r3, #0
    415a:	d002      	beq.n	4162 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    415c:	9801      	ldr	r0, [sp, #4]
    415e:	f000 fa25 	bl	45ac <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4162:	bf00      	nop
    4164:	b003      	add	sp, #12
    4166:	f85d fb04 	ldr.w	pc, [sp], #4

0000416a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    416a:	b500      	push	{lr}
    416c:	b083      	sub	sp, #12
    416e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4170:	9b01      	ldr	r3, [sp, #4]
    4172:	2b00      	cmp	r3, #0
    4174:	d002      	beq.n	417c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4176:	9801      	ldr	r0, [sp, #4]
    4178:	f000 fa2a 	bl	45d0 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    417c:	bf00      	nop
    417e:	b003      	add	sp, #12
    4180:	f85d fb04 	ldr.w	pc, [sp], #4

00004184 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4184:	b500      	push	{lr}
    4186:	b083      	sub	sp, #12
    4188:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    418a:	9b01      	ldr	r3, [sp, #4]
    418c:	2b00      	cmp	r3, #0
    418e:	d002      	beq.n	4196 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4190:	9801      	ldr	r0, [sp, #4]
    4192:	f000 fa3b 	bl	460c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4196:	bf00      	nop
    4198:	b003      	add	sp, #12
    419a:	f85d fb04 	ldr.w	pc, [sp], #4

0000419e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    419e:	b500      	push	{lr}
    41a0:	b083      	sub	sp, #12
    41a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a4:	9b01      	ldr	r3, [sp, #4]
    41a6:	2b00      	cmp	r3, #0
    41a8:	d002      	beq.n	41b0 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    41aa:	9801      	ldr	r0, [sp, #4]
    41ac:	f000 fa56 	bl	465c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b0:	bf00      	nop
    41b2:	b003      	add	sp, #12
    41b4:	f85d fb04 	ldr.w	pc, [sp], #4

000041b8 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b8:	b500      	push	{lr}
    41ba:	b083      	sub	sp, #12
    41bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41be:	9b01      	ldr	r3, [sp, #4]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d002      	beq.n	41ca <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    41c4:	9801      	ldr	r0, [sp, #4]
    41c6:	f000 fa79 	bl	46bc <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ca:	bf00      	nop
    41cc:	b003      	add	sp, #12
    41ce:	f85d fb04 	ldr.w	pc, [sp], #4

000041d2 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    41d2:	b500      	push	{lr}
    41d4:	b083      	sub	sp, #12
    41d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	2b00      	cmp	r3, #0
    41dc:	d002      	beq.n	41e4 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    41de:	9801      	ldr	r0, [sp, #4]
    41e0:	f000 fa8a 	bl	46f8 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e4:	bf00      	nop
    41e6:	b003      	add	sp, #12
    41e8:	f85d fb04 	ldr.w	pc, [sp], #4

000041ec <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41ec:	b084      	sub	sp, #16
    41ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41f0:	4b0b      	ldr	r3, [pc, #44]	; (4220 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    41f2:	795b      	ldrb	r3, [r3, #5]
    41f4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    41f6:	4b0b      	ldr	r3, [pc, #44]	; (4224 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    41f8:	695b      	ldr	r3, [r3, #20]
    41fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    41fc:	9b02      	ldr	r3, [sp, #8]
    41fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4202:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4204:	9b03      	ldr	r3, [sp, #12]
    4206:	061b      	lsls	r3, r3, #24
    4208:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    420c:	9a02      	ldr	r2, [sp, #8]
    420e:	4313      	orrs	r3, r2
    4210:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4212:	4a04      	ldr	r2, [pc, #16]	; (4224 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4214:	9b02      	ldr	r3, [sp, #8]
    4216:	6153      	str	r3, [r2, #20]
}
    4218:	bf00      	nop
    421a:	b004      	add	sp, #16
    421c:	4770      	bx	lr
    421e:	bf00      	nop
    4220:	000152fc 	.word	0x000152fc
    4224:	40064000 	.word	0x40064000

00004228 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4228:	b084      	sub	sp, #16
    422a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    422c:	9b01      	ldr	r3, [sp, #4]
    422e:	685b      	ldr	r3, [r3, #4]
    4230:	4a0b      	ldr	r2, [pc, #44]	; (4260 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4232:	5cd3      	ldrb	r3, [r2, r3]
    4234:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4236:	4b0b      	ldr	r3, [pc, #44]	; (4264 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4238:	695b      	ldr	r3, [r3, #20]
    423a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    423c:	9b02      	ldr	r3, [sp, #8]
    423e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4242:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4244:	9b03      	ldr	r3, [sp, #12]
    4246:	061b      	lsls	r3, r3, #24
    4248:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    424c:	9a02      	ldr	r2, [sp, #8]
    424e:	4313      	orrs	r3, r2
    4250:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4252:	4a04      	ldr	r2, [pc, #16]	; (4264 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4254:	9b02      	ldr	r3, [sp, #8]
    4256:	6153      	str	r3, [r2, #20]
}
    4258:	bf00      	nop
    425a:	b004      	add	sp, #16
    425c:	4770      	bx	lr
    425e:	bf00      	nop
    4260:	000152fc 	.word	0x000152fc
    4264:	40064000 	.word	0x40064000

00004268 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4268:	b084      	sub	sp, #16
    426a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    426c:	9b01      	ldr	r3, [sp, #4]
    426e:	685b      	ldr	r3, [r3, #4]
    4270:	4a0b      	ldr	r2, [pc, #44]	; (42a0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4272:	5cd3      	ldrb	r3, [r2, r3]
    4274:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4276:	4b0b      	ldr	r3, [pc, #44]	; (42a4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4278:	699b      	ldr	r3, [r3, #24]
    427a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    427c:	9b02      	ldr	r3, [sp, #8]
    427e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4282:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4284:	9b03      	ldr	r3, [sp, #12]
    4286:	061b      	lsls	r3, r3, #24
    4288:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    428c:	9a02      	ldr	r2, [sp, #8]
    428e:	4313      	orrs	r3, r2
    4290:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4292:	4a04      	ldr	r2, [pc, #16]	; (42a4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4294:	9b02      	ldr	r3, [sp, #8]
    4296:	6193      	str	r3, [r2, #24]
}
    4298:	bf00      	nop
    429a:	b004      	add	sp, #16
    429c:	4770      	bx	lr
    429e:	bf00      	nop
    42a0:	000152fc 	.word	0x000152fc
    42a4:	40064000 	.word	0x40064000

000042a8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42a8:	b084      	sub	sp, #16
    42aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42ac:	4b0b      	ldr	r3, [pc, #44]	; (42dc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    42ae:	795b      	ldrb	r3, [r3, #5]
    42b0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    42b2:	4b0b      	ldr	r3, [pc, #44]	; (42e0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    42b4:	69db      	ldr	r3, [r3, #28]
    42b6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    42b8:	9b02      	ldr	r3, [sp, #8]
    42ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42be:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    42c0:	9b03      	ldr	r3, [sp, #12]
    42c2:	061b      	lsls	r3, r3, #24
    42c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42c8:	9a02      	ldr	r2, [sp, #8]
    42ca:	4313      	orrs	r3, r2
    42cc:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    42ce:	4a04      	ldr	r2, [pc, #16]	; (42e0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    42d0:	9b02      	ldr	r3, [sp, #8]
    42d2:	61d3      	str	r3, [r2, #28]
}
    42d4:	bf00      	nop
    42d6:	b004      	add	sp, #16
    42d8:	4770      	bx	lr
    42da:	bf00      	nop
    42dc:	000152fc 	.word	0x000152fc
    42e0:	40064000 	.word	0x40064000

000042e4 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42e4:	b084      	sub	sp, #16
    42e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42e8:	9b01      	ldr	r3, [sp, #4]
    42ea:	685b      	ldr	r3, [r3, #4]
    42ec:	4a0b      	ldr	r2, [pc, #44]	; (431c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    42ee:	5cd3      	ldrb	r3, [r2, r3]
    42f0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    42f2:	4b0b      	ldr	r3, [pc, #44]	; (4320 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    42f4:	69db      	ldr	r3, [r3, #28]
    42f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    42f8:	9b02      	ldr	r3, [sp, #8]
    42fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42fe:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4300:	9b03      	ldr	r3, [sp, #12]
    4302:	061b      	lsls	r3, r3, #24
    4304:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4308:	9a02      	ldr	r2, [sp, #8]
    430a:	4313      	orrs	r3, r2
    430c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    430e:	4a04      	ldr	r2, [pc, #16]	; (4320 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4310:	9b02      	ldr	r3, [sp, #8]
    4312:	61d3      	str	r3, [r2, #28]
}
    4314:	bf00      	nop
    4316:	b004      	add	sp, #16
    4318:	4770      	bx	lr
    431a:	bf00      	nop
    431c:	000152fc 	.word	0x000152fc
    4320:	40064000 	.word	0x40064000

00004324 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4324:	b084      	sub	sp, #16
    4326:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4328:	4b0a      	ldr	r3, [pc, #40]	; (4354 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    432a:	7b9b      	ldrb	r3, [r3, #14]
    432c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    432e:	4b0a      	ldr	r3, [pc, #40]	; (4358 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4330:	691b      	ldr	r3, [r3, #16]
    4332:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4334:	9b02      	ldr	r3, [sp, #8]
    4336:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    433a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    433c:	9b03      	ldr	r3, [sp, #12]
    433e:	011b      	lsls	r3, r3, #4
    4340:	9a02      	ldr	r2, [sp, #8]
    4342:	4313      	orrs	r3, r2
    4344:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4346:	4a04      	ldr	r2, [pc, #16]	; (4358 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4348:	9b02      	ldr	r3, [sp, #8]
    434a:	6113      	str	r3, [r2, #16]
}
    434c:	bf00      	nop
    434e:	b004      	add	sp, #16
    4350:	4770      	bx	lr
    4352:	bf00      	nop
    4354:	000152a4 	.word	0x000152a4
    4358:	40048000 	.word	0x40048000

0000435c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    435c:	b084      	sub	sp, #16
    435e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	685b      	ldr	r3, [r3, #4]
    4364:	4a0a      	ldr	r2, [pc, #40]	; (4390 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4366:	5cd3      	ldrb	r3, [r2, r3]
    4368:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    436a:	4b0a      	ldr	r3, [pc, #40]	; (4394 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    436c:	691b      	ldr	r3, [r3, #16]
    436e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4370:	9b02      	ldr	r3, [sp, #8]
    4372:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4376:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4378:	9b03      	ldr	r3, [sp, #12]
    437a:	011b      	lsls	r3, r3, #4
    437c:	9a02      	ldr	r2, [sp, #8]
    437e:	4313      	orrs	r3, r2
    4380:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4382:	4a04      	ldr	r2, [pc, #16]	; (4394 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4384:	9b02      	ldr	r3, [sp, #8]
    4386:	6113      	str	r3, [r2, #16]
}
    4388:	bf00      	nop
    438a:	b004      	add	sp, #16
    438c:	4770      	bx	lr
    438e:	bf00      	nop
    4390:	000152a4 	.word	0x000152a4
    4394:	40048000 	.word	0x40048000

00004398 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4398:	b084      	sub	sp, #16
    439a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    439c:	4b0a      	ldr	r3, [pc, #40]	; (43c8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    439e:	785b      	ldrb	r3, [r3, #1]
    43a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43a2:	4b0a      	ldr	r3, [pc, #40]	; (43cc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    43a4:	691b      	ldr	r3, [r3, #16]
    43a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    43a8:	9b02      	ldr	r3, [sp, #8]
    43aa:	f023 030c 	bic.w	r3, r3, #12
    43ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    43b0:	9b03      	ldr	r3, [sp, #12]
    43b2:	009b      	lsls	r3, r3, #2
    43b4:	9a02      	ldr	r2, [sp, #8]
    43b6:	4313      	orrs	r3, r2
    43b8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43ba:	4a04      	ldr	r2, [pc, #16]	; (43cc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    43bc:	9b02      	ldr	r3, [sp, #8]
    43be:	6113      	str	r3, [r2, #16]
}
    43c0:	bf00      	nop
    43c2:	b004      	add	sp, #16
    43c4:	4770      	bx	lr
    43c6:	bf00      	nop
    43c8:	0001535c 	.word	0x0001535c
    43cc:	40048000 	.word	0x40048000

000043d0 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43d0:	b084      	sub	sp, #16
    43d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	685b      	ldr	r3, [r3, #4]
    43d8:	4a0a      	ldr	r2, [pc, #40]	; (4404 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    43da:	5cd3      	ldrb	r3, [r2, r3]
    43dc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43de:	4b0a      	ldr	r3, [pc, #40]	; (4408 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    43e0:	691b      	ldr	r3, [r3, #16]
    43e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    43e4:	9b02      	ldr	r3, [sp, #8]
    43e6:	f023 030c 	bic.w	r3, r3, #12
    43ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    43ec:	9b03      	ldr	r3, [sp, #12]
    43ee:	009b      	lsls	r3, r3, #2
    43f0:	9a02      	ldr	r2, [sp, #8]
    43f2:	4313      	orrs	r3, r2
    43f4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43f6:	4a04      	ldr	r2, [pc, #16]	; (4408 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    43f8:	9b02      	ldr	r3, [sp, #8]
    43fa:	6113      	str	r3, [r2, #16]
}
    43fc:	bf00      	nop
    43fe:	b004      	add	sp, #16
    4400:	4770      	bx	lr
    4402:	bf00      	nop
    4404:	0001535c 	.word	0x0001535c
    4408:	40048000 	.word	0x40048000

0000440c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    440c:	b084      	sub	sp, #16
    440e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4410:	4b0a      	ldr	r3, [pc, #40]	; (443c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4412:	795b      	ldrb	r3, [r3, #5]
    4414:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4416:	4b0a      	ldr	r3, [pc, #40]	; (4440 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4418:	6a1b      	ldr	r3, [r3, #32]
    441a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    441c:	9b02      	ldr	r3, [sp, #8]
    441e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4422:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4424:	9b03      	ldr	r3, [sp, #12]
    4426:	061b      	lsls	r3, r3, #24
    4428:	9a02      	ldr	r2, [sp, #8]
    442a:	4313      	orrs	r3, r2
    442c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    442e:	4a04      	ldr	r2, [pc, #16]	; (4440 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4430:	9b02      	ldr	r3, [sp, #8]
    4432:	6213      	str	r3, [r2, #32]
}
    4434:	bf00      	nop
    4436:	b004      	add	sp, #16
    4438:	4770      	bx	lr
    443a:	bf00      	nop
    443c:	000152fc 	.word	0x000152fc
    4440:	40064000 	.word	0x40064000

00004444 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4444:	b084      	sub	sp, #16
    4446:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4448:	9b01      	ldr	r3, [sp, #4]
    444a:	685b      	ldr	r3, [r3, #4]
    444c:	4a0a      	ldr	r2, [pc, #40]	; (4478 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    444e:	5cd3      	ldrb	r3, [r2, r3]
    4450:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4452:	4b0a      	ldr	r3, [pc, #40]	; (447c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4454:	6a1b      	ldr	r3, [r3, #32]
    4456:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4458:	9b02      	ldr	r3, [sp, #8]
    445a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    445e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4460:	9b03      	ldr	r3, [sp, #12]
    4462:	061b      	lsls	r3, r3, #24
    4464:	9a02      	ldr	r2, [sp, #8]
    4466:	4313      	orrs	r3, r2
    4468:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    446a:	4a04      	ldr	r2, [pc, #16]	; (447c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    446c:	9b02      	ldr	r3, [sp, #8]
    446e:	6213      	str	r3, [r2, #32]
}
    4470:	bf00      	nop
    4472:	b004      	add	sp, #16
    4474:	4770      	bx	lr
    4476:	bf00      	nop
    4478:	000152fc 	.word	0x000152fc
    447c:	40064000 	.word	0x40064000

00004480 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4480:	b086      	sub	sp, #24
    4482:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4484:	4b20      	ldr	r3, [pc, #128]	; (4508 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4486:	795b      	ldrb	r3, [r3, #5]
    4488:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    448a:	9b01      	ldr	r3, [sp, #4]
    448c:	681a      	ldr	r2, [r3, #0]
    448e:	491f      	ldr	r1, [pc, #124]	; (450c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4490:	4613      	mov	r3, r2
    4492:	00db      	lsls	r3, r3, #3
    4494:	4413      	add	r3, r2
    4496:	440b      	add	r3, r1
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    449c:	4b1c      	ldr	r3, [pc, #112]	; (4510 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    449e:	68db      	ldr	r3, [r3, #12]
    44a0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    44a2:	9b03      	ldr	r3, [sp, #12]
    44a4:	2b03      	cmp	r3, #3
    44a6:	d813      	bhi.n	44d0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    44a8:	9b03      	ldr	r3, [sp, #12]
    44aa:	005b      	lsls	r3, r3, #1
    44ac:	3318      	adds	r3, #24
    44ae:	2203      	movs	r2, #3
    44b0:	fa02 f303 	lsl.w	r3, r2, r3
    44b4:	43db      	mvns	r3, r3
    44b6:	9a05      	ldr	r2, [sp, #20]
    44b8:	4013      	ands	r3, r2
    44ba:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    44bc:	9b03      	ldr	r3, [sp, #12]
    44be:	005b      	lsls	r3, r3, #1
    44c0:	3318      	adds	r3, #24
    44c2:	9a04      	ldr	r2, [sp, #16]
    44c4:	fa02 f303 	lsl.w	r3, r2, r3
    44c8:	9a05      	ldr	r2, [sp, #20]
    44ca:	4313      	orrs	r3, r2
    44cc:	9305      	str	r3, [sp, #20]
    44ce:	e014      	b.n	44fa <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    44d0:	9b03      	ldr	r3, [sp, #12]
    44d2:	3b04      	subs	r3, #4
    44d4:	005b      	lsls	r3, r3, #1
    44d6:	3310      	adds	r3, #16
    44d8:	2203      	movs	r2, #3
    44da:	fa02 f303 	lsl.w	r3, r2, r3
    44de:	43db      	mvns	r3, r3
    44e0:	9a05      	ldr	r2, [sp, #20]
    44e2:	4013      	ands	r3, r2
    44e4:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    44e6:	9b03      	ldr	r3, [sp, #12]
    44e8:	3b04      	subs	r3, #4
    44ea:	005b      	lsls	r3, r3, #1
    44ec:	3310      	adds	r3, #16
    44ee:	9a04      	ldr	r2, [sp, #16]
    44f0:	fa02 f303 	lsl.w	r3, r2, r3
    44f4:	9a05      	ldr	r2, [sp, #20]
    44f6:	4313      	orrs	r3, r2
    44f8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    44fa:	4a05      	ldr	r2, [pc, #20]	; (4510 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    44fc:	9b05      	ldr	r3, [sp, #20]
    44fe:	60d3      	str	r3, [r2, #12]
}
    4500:	bf00      	nop
    4502:	b006      	add	sp, #24
    4504:	4770      	bx	lr
    4506:	bf00      	nop
    4508:	000152a4 	.word	0x000152a4
    450c:	00014f94 	.word	0x00014f94
    4510:	40048000 	.word	0x40048000

00004514 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b086      	sub	sp, #24
    4516:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4518:	9b01      	ldr	r3, [sp, #4]
    451a:	685b      	ldr	r3, [r3, #4]
    451c:	4a20      	ldr	r2, [pc, #128]	; (45a0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    451e:	5cd3      	ldrb	r3, [r2, r3]
    4520:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4522:	9b01      	ldr	r3, [sp, #4]
    4524:	681a      	ldr	r2, [r3, #0]
    4526:	491f      	ldr	r1, [pc, #124]	; (45a4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4528:	4613      	mov	r3, r2
    452a:	00db      	lsls	r3, r3, #3
    452c:	4413      	add	r3, r2
    452e:	440b      	add	r3, r1
    4530:	781b      	ldrb	r3, [r3, #0]
    4532:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4534:	4b1c      	ldr	r3, [pc, #112]	; (45a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4536:	68db      	ldr	r3, [r3, #12]
    4538:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    453a:	9b03      	ldr	r3, [sp, #12]
    453c:	2b03      	cmp	r3, #3
    453e:	d813      	bhi.n	4568 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4540:	9b03      	ldr	r3, [sp, #12]
    4542:	005b      	lsls	r3, r3, #1
    4544:	3318      	adds	r3, #24
    4546:	2203      	movs	r2, #3
    4548:	fa02 f303 	lsl.w	r3, r2, r3
    454c:	43db      	mvns	r3, r3
    454e:	9a05      	ldr	r2, [sp, #20]
    4550:	4013      	ands	r3, r2
    4552:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4554:	9b03      	ldr	r3, [sp, #12]
    4556:	005b      	lsls	r3, r3, #1
    4558:	3318      	adds	r3, #24
    455a:	9a04      	ldr	r2, [sp, #16]
    455c:	fa02 f303 	lsl.w	r3, r2, r3
    4560:	9a05      	ldr	r2, [sp, #20]
    4562:	4313      	orrs	r3, r2
    4564:	9305      	str	r3, [sp, #20]
    4566:	e014      	b.n	4592 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	3b04      	subs	r3, #4
    456c:	005b      	lsls	r3, r3, #1
    456e:	3310      	adds	r3, #16
    4570:	2203      	movs	r2, #3
    4572:	fa02 f303 	lsl.w	r3, r2, r3
    4576:	43db      	mvns	r3, r3
    4578:	9a05      	ldr	r2, [sp, #20]
    457a:	4013      	ands	r3, r2
    457c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    457e:	9b03      	ldr	r3, [sp, #12]
    4580:	3b04      	subs	r3, #4
    4582:	005b      	lsls	r3, r3, #1
    4584:	3310      	adds	r3, #16
    4586:	9a04      	ldr	r2, [sp, #16]
    4588:	fa02 f303 	lsl.w	r3, r2, r3
    458c:	9a05      	ldr	r2, [sp, #20]
    458e:	4313      	orrs	r3, r2
    4590:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4592:	4a05      	ldr	r2, [pc, #20]	; (45a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4594:	9b05      	ldr	r3, [sp, #20]
    4596:	60d3      	str	r3, [r2, #12]
}
    4598:	bf00      	nop
    459a:	b006      	add	sp, #24
    459c:	4770      	bx	lr
    459e:	bf00      	nop
    45a0:	000152a4 	.word	0x000152a4
    45a4:	00014f94 	.word	0x00014f94
    45a8:	40048000 	.word	0x40048000

000045ac <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45ac:	b084      	sub	sp, #16
    45ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    45b0:	4b06      	ldr	r3, [pc, #24]	; (45cc <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    45b2:	685b      	ldr	r3, [r3, #4]
    45b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    45b6:	9b03      	ldr	r3, [sp, #12]
    45b8:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    45bc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    45be:	4a03      	ldr	r2, [pc, #12]	; (45cc <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    45c0:	9b03      	ldr	r3, [sp, #12]
    45c2:	6053      	str	r3, [r2, #4]
}
    45c4:	bf00      	nop
    45c6:	b004      	add	sp, #16
    45c8:	4770      	bx	lr
    45ca:	bf00      	nop
    45cc:	40048000 	.word	0x40048000

000045d0 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45d0:	b084      	sub	sp, #16
    45d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45d4:	9b01      	ldr	r3, [sp, #4]
    45d6:	685b      	ldr	r3, [r3, #4]
    45d8:	4a0a      	ldr	r2, [pc, #40]	; (4604 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    45da:	5cd3      	ldrb	r3, [r2, r3]
    45dc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    45de:	4b0a      	ldr	r3, [pc, #40]	; (4608 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    45e0:	685b      	ldr	r3, [r3, #4]
    45e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    45e4:	9b02      	ldr	r3, [sp, #8]
    45e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    45ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    45ec:	9b03      	ldr	r3, [sp, #12]
    45ee:	011b      	lsls	r3, r3, #4
    45f0:	9a02      	ldr	r2, [sp, #8]
    45f2:	4313      	orrs	r3, r2
    45f4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    45f6:	4a04      	ldr	r2, [pc, #16]	; (4608 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    45f8:	9b02      	ldr	r3, [sp, #8]
    45fa:	6053      	str	r3, [r2, #4]
}
    45fc:	bf00      	nop
    45fe:	b004      	add	sp, #16
    4600:	4770      	bx	lr
    4602:	bf00      	nop
    4604:	000152a4 	.word	0x000152a4
    4608:	40048000 	.word	0x40048000

0000460c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    460c:	b084      	sub	sp, #16
    460e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4610:	9b01      	ldr	r3, [sp, #4]
    4612:	681a      	ldr	r2, [r3, #0]
    4614:	490f      	ldr	r1, [pc, #60]	; (4654 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4616:	4613      	mov	r3, r2
    4618:	00db      	lsls	r3, r3, #3
    461a:	4413      	add	r3, r2
    461c:	440b      	add	r3, r1
    461e:	3304      	adds	r3, #4
    4620:	781b      	ldrb	r3, [r3, #0]
    4622:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4624:	4a0c      	ldr	r2, [pc, #48]	; (4658 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4626:	9b03      	ldr	r3, [sp, #12]
    4628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    462c:	490a      	ldr	r1, [pc, #40]	; (4658 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    462e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4632:	9b03      	ldr	r3, [sp, #12]
    4634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4638:	4a07      	ldr	r2, [pc, #28]	; (4658 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    463a:	9b03      	ldr	r3, [sp, #12]
    463c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4640:	4905      	ldr	r1, [pc, #20]	; (4658 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4642:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4646:	9b03      	ldr	r3, [sp, #12]
    4648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    464c:	bf00      	nop
    464e:	b004      	add	sp, #16
    4650:	4770      	bx	lr
    4652:	bf00      	nop
    4654:	00014f94 	.word	0x00014f94
    4658:	40065000 	.word	0x40065000

0000465c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    465c:	b086      	sub	sp, #24
    465e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4660:	9b01      	ldr	r3, [sp, #4]
    4662:	681a      	ldr	r2, [r3, #0]
    4664:	4912      	ldr	r1, [pc, #72]	; (46b0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4666:	4613      	mov	r3, r2
    4668:	00db      	lsls	r3, r3, #3
    466a:	4413      	add	r3, r2
    466c:	440b      	add	r3, r1
    466e:	3304      	adds	r3, #4
    4670:	781b      	ldrb	r3, [r3, #0]
    4672:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4674:	9b01      	ldr	r3, [sp, #4]
    4676:	685b      	ldr	r3, [r3, #4]
    4678:	4a0e      	ldr	r2, [pc, #56]	; (46b4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    467a:	5cd3      	ldrb	r3, [r2, r3]
    467c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    467e:	4a0e      	ldr	r2, [pc, #56]	; (46b8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4680:	9b05      	ldr	r3, [sp, #20]
    4682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4686:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4688:	9b03      	ldr	r3, [sp, #12]
    468a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    468e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4690:	9b04      	ldr	r3, [sp, #16]
    4692:	061b      	lsls	r3, r3, #24
    4694:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4698:	9a03      	ldr	r2, [sp, #12]
    469a:	4313      	orrs	r3, r2
    469c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    469e:	4906      	ldr	r1, [pc, #24]	; (46b8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    46a0:	9b05      	ldr	r3, [sp, #20]
    46a2:	9a03      	ldr	r2, [sp, #12]
    46a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46a8:	bf00      	nop
    46aa:	b006      	add	sp, #24
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	00014f94 	.word	0x00014f94
    46b4:	0001532c 	.word	0x0001532c
    46b8:	40065000 	.word	0x40065000

000046bc <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46bc:	b084      	sub	sp, #16
    46be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46c0:	4b0b      	ldr	r3, [pc, #44]	; (46f0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    46c2:	7f1b      	ldrb	r3, [r3, #28]
    46c4:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    46c6:	4b0b      	ldr	r3, [pc, #44]	; (46f4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    46c8:	685b      	ldr	r3, [r3, #4]
    46ca:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    46cc:	9b02      	ldr	r3, [sp, #8]
    46ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    46d2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    46d4:	9b03      	ldr	r3, [sp, #12]
    46d6:	031b      	lsls	r3, r3, #12
    46d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    46dc:	9a02      	ldr	r2, [sp, #8]
    46de:	4313      	orrs	r3, r2
    46e0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    46e2:	4a04      	ldr	r2, [pc, #16]	; (46f4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    46e4:	9b02      	ldr	r3, [sp, #8]
    46e6:	6053      	str	r3, [r2, #4]
}
    46e8:	bf00      	nop
    46ea:	b004      	add	sp, #16
    46ec:	4770      	bx	lr
    46ee:	bf00      	nop
    46f0:	000152a4 	.word	0x000152a4
    46f4:	40048000 	.word	0x40048000

000046f8 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46f8:	b084      	sub	sp, #16
    46fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46fc:	9b01      	ldr	r3, [sp, #4]
    46fe:	685b      	ldr	r3, [r3, #4]
    4700:	4a0b      	ldr	r2, [pc, #44]	; (4730 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4702:	5cd3      	ldrb	r3, [r2, r3]
    4704:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4706:	4b0b      	ldr	r3, [pc, #44]	; (4734 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4708:	685b      	ldr	r3, [r3, #4]
    470a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    470c:	9b02      	ldr	r3, [sp, #8]
    470e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4712:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4714:	9b03      	ldr	r3, [sp, #12]
    4716:	031b      	lsls	r3, r3, #12
    4718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    471c:	9a02      	ldr	r2, [sp, #8]
    471e:	4313      	orrs	r3, r2
    4720:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4722:	4a04      	ldr	r2, [pc, #16]	; (4734 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4724:	9b02      	ldr	r3, [sp, #8]
    4726:	6053      	str	r3, [r2, #4]
}
    4728:	bf00      	nop
    472a:	b004      	add	sp, #16
    472c:	4770      	bx	lr
    472e:	bf00      	nop
    4730:	000152a4 	.word	0x000152a4
    4734:	40048000 	.word	0x40048000

00004738 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4738:	b500      	push	{lr}
    473a:	b085      	sub	sp, #20
    473c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    473e:	2300      	movs	r3, #0
    4740:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4744:	9b01      	ldr	r3, [sp, #4]
    4746:	2b00      	cmp	r3, #0
    4748:	d037      	beq.n	47ba <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    474a:	2300      	movs	r3, #0
    474c:	9303      	str	r3, [sp, #12]
    474e:	e02b      	b.n	47a8 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4750:	4b29      	ldr	r3, [pc, #164]	; (47f8 <DisableSafeClock+0xc0>)
    4752:	6819      	ldr	r1, [r3, #0]
    4754:	9a03      	ldr	r2, [sp, #12]
    4756:	4613      	mov	r3, r2
    4758:	005b      	lsls	r3, r3, #1
    475a:	4413      	add	r3, r2
    475c:	009b      	lsls	r3, r3, #2
    475e:	440b      	add	r3, r1
    4760:	3314      	adds	r3, #20
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	2b05      	cmp	r3, #5
    4766:	d11c      	bne.n	47a2 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4768:	2301      	movs	r3, #1
    476a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    476e:	4b22      	ldr	r3, [pc, #136]	; (47f8 <DisableSafeClock+0xc0>)
    4770:	6819      	ldr	r1, [r3, #0]
    4772:	9a03      	ldr	r2, [sp, #12]
    4774:	4613      	mov	r3, r2
    4776:	005b      	lsls	r3, r3, #1
    4778:	4413      	add	r3, r2
    477a:	009b      	lsls	r3, r3, #2
    477c:	440b      	add	r3, r1
    477e:	3318      	adds	r3, #24
    4780:	881b      	ldrh	r3, [r3, #0]
    4782:	2b00      	cmp	r3, #0
    4784:	d118      	bne.n	47b8 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4786:	4b1d      	ldr	r3, [pc, #116]	; (47fc <DisableSafeClock+0xc4>)
    4788:	791b      	ldrb	r3, [r3, #4]
    478a:	4619      	mov	r1, r3
    478c:	4a1c      	ldr	r2, [pc, #112]	; (4800 <DisableSafeClock+0xc8>)
    478e:	460b      	mov	r3, r1
    4790:	005b      	lsls	r3, r3, #1
    4792:	440b      	add	r3, r1
    4794:	009b      	lsls	r3, r3, #2
    4796:	4413      	add	r3, r2
    4798:	3308      	adds	r3, #8
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	2005      	movs	r0, #5
    479e:	4798      	blx	r3
                }
                break;
    47a0:	e00a      	b.n	47b8 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    47a2:	9b03      	ldr	r3, [sp, #12]
    47a4:	3301      	adds	r3, #1
    47a6:	9303      	str	r3, [sp, #12]
    47a8:	4b13      	ldr	r3, [pc, #76]	; (47f8 <DisableSafeClock+0xc0>)
    47aa:	681b      	ldr	r3, [r3, #0]
    47ac:	7a1b      	ldrb	r3, [r3, #8]
    47ae:	461a      	mov	r2, r3
    47b0:	9b03      	ldr	r3, [sp, #12]
    47b2:	4293      	cmp	r3, r2
    47b4:	d3cc      	bcc.n	4750 <DisableSafeClock+0x18>
    47b6:	e000      	b.n	47ba <DisableSafeClock+0x82>
                break;
    47b8:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    47ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    47be:	f083 0301 	eor.w	r3, r3, #1
    47c2:	b2db      	uxtb	r3, r3
    47c4:	2b00      	cmp	r3, #0
    47c6:	d013      	beq.n	47f0 <DisableSafeClock+0xb8>
    47c8:	4b0e      	ldr	r3, [pc, #56]	; (4804 <DisableSafeClock+0xcc>)
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	f083 0301 	eor.w	r3, r3, #1
    47d0:	b2db      	uxtb	r3, r3
    47d2:	2b00      	cmp	r3, #0
    47d4:	d00c      	beq.n	47f0 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    47d6:	4b09      	ldr	r3, [pc, #36]	; (47fc <DisableSafeClock+0xc4>)
    47d8:	791b      	ldrb	r3, [r3, #4]
    47da:	4619      	mov	r1, r3
    47dc:	4a08      	ldr	r2, [pc, #32]	; (4800 <DisableSafeClock+0xc8>)
    47de:	460b      	mov	r3, r1
    47e0:	005b      	lsls	r3, r3, #1
    47e2:	440b      	add	r3, r1
    47e4:	009b      	lsls	r3, r3, #2
    47e6:	4413      	add	r3, r2
    47e8:	3308      	adds	r3, #8
    47ea:	681b      	ldr	r3, [r3, #0]
    47ec:	2005      	movs	r0, #5
    47ee:	4798      	blx	r3
    }
}
    47f0:	bf00      	nop
    47f2:	b005      	add	sp, #20
    47f4:	f85d fb04 	ldr.w	pc, [sp], #4
    47f8:	1fff8bcc 	.word	0x1fff8bcc
    47fc:	00014f24 	.word	0x00014f24
    4800:	00015554 	.word	0x00015554
    4804:	1fff8b18 	.word	0x1fff8b18

00004808 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4808:	4b06      	ldr	r3, [pc, #24]	; (4824 <SetFircToResetValue_TrustedCall+0x1c>)
    480a:	2200      	movs	r2, #0
    480c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4810:	4b04      	ldr	r3, [pc, #16]	; (4824 <SetFircToResetValue_TrustedCall+0x1c>)
    4812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4816:	4a03      	ldr	r2, [pc, #12]	; (4824 <SetFircToResetValue_TrustedCall+0x1c>)
    4818:	f043 0301 	orr.w	r3, r3, #1
    481c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4820:	bf00      	nop
    4822:	4770      	bx	lr
    4824:	40064000 	.word	0x40064000

00004828 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4828:	b084      	sub	sp, #16
    482a:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    482c:	2303      	movs	r3, #3
    482e:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4830:	2300      	movs	r3, #0
    4832:	9302      	str	r3, [sp, #8]
    4834:	e028      	b.n	4888 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4836:	9b01      	ldr	r3, [sp, #4]
    4838:	9a02      	ldr	r2, [sp, #8]
    483a:	320d      	adds	r2, #13
    483c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4840:	2b28      	cmp	r3, #40	; 0x28
    4842:	d10b      	bne.n	485c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4844:	9a01      	ldr	r2, [sp, #4]
    4846:	9b02      	ldr	r3, [sp, #8]
    4848:	330d      	adds	r3, #13
    484a:	00db      	lsls	r3, r3, #3
    484c:	4413      	add	r3, r2
    484e:	685b      	ldr	r3, [r3, #4]
    4850:	4a2b      	ldr	r2, [pc, #172]	; (4900 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4852:	5cd3      	ldrb	r3, [r2, r3]
    4854:	011b      	lsls	r3, r3, #4
    4856:	9a03      	ldr	r2, [sp, #12]
    4858:	4313      	orrs	r3, r2
    485a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    485c:	9b01      	ldr	r3, [sp, #4]
    485e:	9a02      	ldr	r2, [sp, #8]
    4860:	320d      	adds	r2, #13
    4862:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4866:	2b29      	cmp	r3, #41	; 0x29
    4868:	d10b      	bne.n	4882 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    486a:	9a01      	ldr	r2, [sp, #4]
    486c:	9b02      	ldr	r3, [sp, #8]
    486e:	330d      	adds	r3, #13
    4870:	00db      	lsls	r3, r3, #3
    4872:	4413      	add	r3, r2
    4874:	685b      	ldr	r3, [r3, #4]
    4876:	4a23      	ldr	r2, [pc, #140]	; (4904 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4878:	5cd3      	ldrb	r3, [r2, r3]
    487a:	009b      	lsls	r3, r3, #2
    487c:	9a03      	ldr	r2, [sp, #12]
    487e:	4313      	orrs	r3, r2
    4880:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4882:	9b02      	ldr	r3, [sp, #8]
    4884:	3301      	adds	r3, #1
    4886:	9302      	str	r3, [sp, #8]
    4888:	9b01      	ldr	r3, [sp, #4]
    488a:	7adb      	ldrb	r3, [r3, #11]
    488c:	461a      	mov	r2, r3
    488e:	9b02      	ldr	r3, [sp, #8]
    4890:	4293      	cmp	r3, r2
    4892:	d3d0      	bcc.n	4836 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4894:	2300      	movs	r3, #0
    4896:	9302      	str	r3, [sp, #8]
    4898:	e026      	b.n	48e8 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    489a:	9a01      	ldr	r2, [sp, #4]
    489c:	9b02      	ldr	r3, [sp, #8]
    489e:	334e      	adds	r3, #78	; 0x4e
    48a0:	00db      	lsls	r3, r3, #3
    48a2:	4413      	add	r3, r2
    48a4:	685b      	ldr	r3, [r3, #4]
    48a6:	2b12      	cmp	r3, #18
    48a8:	d109      	bne.n	48be <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    48aa:	9a01      	ldr	r2, [sp, #4]
    48ac:	9b02      	ldr	r3, [sp, #8]
    48ae:	334e      	adds	r3, #78	; 0x4e
    48b0:	00db      	lsls	r3, r3, #3
    48b2:	4413      	add	r3, r2
    48b4:	891b      	ldrh	r3, [r3, #8]
    48b6:	005b      	lsls	r3, r3, #1
    48b8:	9a03      	ldr	r2, [sp, #12]
    48ba:	4313      	orrs	r3, r2
    48bc:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    48be:	9a01      	ldr	r2, [sp, #4]
    48c0:	9b02      	ldr	r3, [sp, #8]
    48c2:	334e      	adds	r3, #78	; 0x4e
    48c4:	00db      	lsls	r3, r3, #3
    48c6:	4413      	add	r3, r2
    48c8:	685b      	ldr	r3, [r3, #4]
    48ca:	2b13      	cmp	r3, #19
    48cc:	d109      	bne.n	48e2 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    48ce:	9a01      	ldr	r2, [sp, #4]
    48d0:	9b02      	ldr	r3, [sp, #8]
    48d2:	334e      	adds	r3, #78	; 0x4e
    48d4:	00db      	lsls	r3, r3, #3
    48d6:	4413      	add	r3, r2
    48d8:	891b      	ldrh	r3, [r3, #8]
    48da:	461a      	mov	r2, r3
    48dc:	9b03      	ldr	r3, [sp, #12]
    48de:	4313      	orrs	r3, r2
    48e0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    48e2:	9b02      	ldr	r3, [sp, #8]
    48e4:	3301      	adds	r3, #1
    48e6:	9302      	str	r3, [sp, #8]
    48e8:	9b01      	ldr	r3, [sp, #4]
    48ea:	7c1b      	ldrb	r3, [r3, #16]
    48ec:	461a      	mov	r2, r3
    48ee:	9b02      	ldr	r3, [sp, #8]
    48f0:	4293      	cmp	r3, r2
    48f2:	d3d2      	bcc.n	489a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    48f4:	4a04      	ldr	r2, [pc, #16]	; (4908 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    48f6:	9b03      	ldr	r3, [sp, #12]
    48f8:	6113      	str	r3, [r2, #16]
}
    48fa:	bf00      	nop
    48fc:	b004      	add	sp, #16
    48fe:	4770      	bx	lr
    4900:	000152a4 	.word	0x000152a4
    4904:	0001535c 	.word	0x0001535c
    4908:	40048000 	.word	0x40048000

0000490c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    490c:	b500      	push	{lr}
    490e:	b089      	sub	sp, #36	; 0x24
    4910:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4912:	2300      	movs	r3, #0
    4914:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4918:	4a21      	ldr	r2, [pc, #132]	; (49a0 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    491a:	9b01      	ldr	r3, [sp, #4]
    491c:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    491e:	4b21      	ldr	r3, [pc, #132]	; (49a4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4920:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4924:	f003 0301 	and.w	r3, r3, #1
    4928:	2b00      	cmp	r3, #0
    492a:	d12e      	bne.n	498a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    492c:	4b1e      	ldr	r3, [pc, #120]	; (49a8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    492e:	2200      	movs	r2, #0
    4930:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4932:	f7ff ff69 	bl	4808 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4936:	aa03      	add	r2, sp, #12
    4938:	a904      	add	r1, sp, #16
    493a:	a805      	add	r0, sp, #20
    493c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4940:	f7fe f8ae 	bl	2aa0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4944:	4b17      	ldr	r3, [pc, #92]	; (49a4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4946:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    494a:	0e1b      	lsrs	r3, r3, #24
    494c:	f003 0301 	and.w	r3, r3, #1
    4950:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4952:	9a03      	ldr	r2, [sp, #12]
    4954:	a904      	add	r1, sp, #16
    4956:	ab05      	add	r3, sp, #20
    4958:	4618      	mov	r0, r3
    495a:	f7fe f8bb 	bl	2ad4 <Clock_Ip_TimeoutExpired>
    495e:	4603      	mov	r3, r0
    4960:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4964:	9b06      	ldr	r3, [sp, #24]
    4966:	2b00      	cmp	r3, #0
    4968:	d106      	bne.n	4978 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    496a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    496e:	f083 0301 	eor.w	r3, r3, #1
    4972:	b2db      	uxtb	r3, r3
    4974:	2b00      	cmp	r3, #0
    4976:	d1e5      	bne.n	4944 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4978:	f89d 301f 	ldrb.w	r3, [sp, #31]
    497c:	2b00      	cmp	r3, #0
    497e:	d007      	beq.n	4990 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4980:	2105      	movs	r1, #5
    4982:	2001      	movs	r0, #1
    4984:	f7fe f87c 	bl	2a80 <Clock_Ip_ReportClockErrors>
    4988:	e002      	b.n	4990 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    498a:	4b07      	ldr	r3, [pc, #28]	; (49a8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    498c:	2201      	movs	r2, #1
    498e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4990:	9801      	ldr	r0, [sp, #4]
    4992:	f7ff ff49 	bl	4828 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4996:	bf00      	nop
    4998:	b009      	add	sp, #36	; 0x24
    499a:	f85d fb04 	ldr.w	pc, [sp], #4
    499e:	bf00      	nop
    49a0:	1fff8bcc 	.word	0x1fff8bcc
    49a4:	40064000 	.word	0x40064000
    49a8:	1fff8b18 	.word	0x1fff8b18

000049ac <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    49ac:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    49ae:	2300      	movs	r3, #0
    49b0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    49b2:	4b29      	ldr	r3, [pc, #164]	; (4a58 <getFircConfig+0xac>)
    49b4:	681b      	ldr	r3, [r3, #0]
    49b6:	2b00      	cmp	r3, #0
    49b8:	d024      	beq.n	4a04 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    49ba:	2300      	movs	r3, #0
    49bc:	9301      	str	r3, [sp, #4]
    49be:	e01a      	b.n	49f6 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    49c0:	4b25      	ldr	r3, [pc, #148]	; (4a58 <getFircConfig+0xac>)
    49c2:	6819      	ldr	r1, [r3, #0]
    49c4:	9a01      	ldr	r2, [sp, #4]
    49c6:	4613      	mov	r3, r2
    49c8:	005b      	lsls	r3, r3, #1
    49ca:	4413      	add	r3, r2
    49cc:	009b      	lsls	r3, r3, #2
    49ce:	440b      	add	r3, r1
    49d0:	3314      	adds	r3, #20
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	2b05      	cmp	r3, #5
    49d6:	d10b      	bne.n	49f0 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    49d8:	4b1f      	ldr	r3, [pc, #124]	; (4a58 <getFircConfig+0xac>)
    49da:	6819      	ldr	r1, [r3, #0]
    49dc:	9a01      	ldr	r2, [sp, #4]
    49de:	4613      	mov	r3, r2
    49e0:	005b      	lsls	r3, r3, #1
    49e2:	4413      	add	r3, r2
    49e4:	009b      	lsls	r3, r3, #2
    49e6:	3310      	adds	r3, #16
    49e8:	440b      	add	r3, r1
    49ea:	3304      	adds	r3, #4
    49ec:	9300      	str	r3, [sp, #0]
                break;
    49ee:	e009      	b.n	4a04 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    49f0:	9b01      	ldr	r3, [sp, #4]
    49f2:	3301      	adds	r3, #1
    49f4:	9301      	str	r3, [sp, #4]
    49f6:	4b18      	ldr	r3, [pc, #96]	; (4a58 <getFircConfig+0xac>)
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	7a1b      	ldrb	r3, [r3, #8]
    49fc:	461a      	mov	r2, r3
    49fe:	9b01      	ldr	r3, [sp, #4]
    4a00:	4293      	cmp	r3, r2
    4a02:	d3dd      	bcc.n	49c0 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4a04:	9b00      	ldr	r3, [sp, #0]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d121      	bne.n	4a4e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4a0a:	4b14      	ldr	r3, [pc, #80]	; (4a5c <getFircConfig+0xb0>)
    4a0c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4a0e:	4b13      	ldr	r3, [pc, #76]	; (4a5c <getFircConfig+0xb0>)
    4a10:	2205      	movs	r2, #5
    4a12:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4a14:	4b12      	ldr	r3, [pc, #72]	; (4a60 <getFircConfig+0xb4>)
    4a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a1a:	b29b      	uxth	r3, r3
    4a1c:	f003 0301 	and.w	r3, r3, #1
    4a20:	b29a      	uxth	r2, r3
    4a22:	4b0e      	ldr	r3, [pc, #56]	; (4a5c <getFircConfig+0xb0>)
    4a24:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4a26:	4b0e      	ldr	r3, [pc, #56]	; (4a60 <getFircConfig+0xb4>)
    4a28:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4a2c:	b2db      	uxtb	r3, r3
    4a2e:	f003 0303 	and.w	r3, r3, #3
    4a32:	b2da      	uxtb	r2, r3
    4a34:	4b09      	ldr	r3, [pc, #36]	; (4a5c <getFircConfig+0xb0>)
    4a36:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4a38:	4b09      	ldr	r3, [pc, #36]	; (4a60 <getFircConfig+0xb4>)
    4a3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a3e:	b2db      	uxtb	r3, r3
    4a40:	10db      	asrs	r3, r3, #3
    4a42:	b2db      	uxtb	r3, r3
    4a44:	f003 0301 	and.w	r3, r3, #1
    4a48:	b2da      	uxtb	r2, r3
    4a4a:	4b04      	ldr	r3, [pc, #16]	; (4a5c <getFircConfig+0xb0>)
    4a4c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4a4e:	9b00      	ldr	r3, [sp, #0]
}
    4a50:	4618      	mov	r0, r3
    4a52:	b002      	add	sp, #8
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop
    4a58:	1fff8bcc 	.word	0x1fff8bcc
    4a5c:	1fff8c38 	.word	0x1fff8c38
    4a60:	40064000 	.word	0x40064000

00004a64 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4a64:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4a66:	2300      	movs	r3, #0
    4a68:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a6a:	4b20      	ldr	r3, [pc, #128]	; (4aec <getSoscConfig+0x88>)
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d024      	beq.n	4abc <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4a72:	2300      	movs	r3, #0
    4a74:	9301      	str	r3, [sp, #4]
    4a76:	e01a      	b.n	4aae <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4a78:	4b1c      	ldr	r3, [pc, #112]	; (4aec <getSoscConfig+0x88>)
    4a7a:	6819      	ldr	r1, [r3, #0]
    4a7c:	9a01      	ldr	r2, [sp, #4]
    4a7e:	4613      	mov	r3, r2
    4a80:	009b      	lsls	r3, r3, #2
    4a82:	4413      	add	r3, r2
    4a84:	009b      	lsls	r3, r3, #2
    4a86:	440b      	add	r3, r1
    4a88:	332c      	adds	r3, #44	; 0x2c
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	2b08      	cmp	r3, #8
    4a8e:	d10b      	bne.n	4aa8 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4a90:	4b16      	ldr	r3, [pc, #88]	; (4aec <getSoscConfig+0x88>)
    4a92:	6819      	ldr	r1, [r3, #0]
    4a94:	9a01      	ldr	r2, [sp, #4]
    4a96:	4613      	mov	r3, r2
    4a98:	009b      	lsls	r3, r3, #2
    4a9a:	4413      	add	r3, r2
    4a9c:	009b      	lsls	r3, r3, #2
    4a9e:	3328      	adds	r3, #40	; 0x28
    4aa0:	440b      	add	r3, r1
    4aa2:	3304      	adds	r3, #4
    4aa4:	9300      	str	r3, [sp, #0]
                break;
    4aa6:	e009      	b.n	4abc <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4aa8:	9b01      	ldr	r3, [sp, #4]
    4aaa:	3301      	adds	r3, #1
    4aac:	9301      	str	r3, [sp, #4]
    4aae:	4b0f      	ldr	r3, [pc, #60]	; (4aec <getSoscConfig+0x88>)
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	7a5b      	ldrb	r3, [r3, #9]
    4ab4:	461a      	mov	r2, r3
    4ab6:	9b01      	ldr	r3, [sp, #4]
    4ab8:	4293      	cmp	r3, r2
    4aba:	d3dd      	bcc.n	4a78 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4abc:	9b00      	ldr	r3, [sp, #0]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d110      	bne.n	4ae4 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4ac2:	4b0b      	ldr	r3, [pc, #44]	; (4af0 <getSoscConfig+0x8c>)
    4ac4:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4ac6:	4b0a      	ldr	r3, [pc, #40]	; (4af0 <getSoscConfig+0x8c>)
    4ac8:	2208      	movs	r2, #8
    4aca:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4acc:	4b09      	ldr	r3, [pc, #36]	; (4af4 <getSoscConfig+0x90>)
    4ace:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4ad2:	b29b      	uxth	r3, r3
    4ad4:	f003 0301 	and.w	r3, r3, #1
    4ad8:	b29a      	uxth	r2, r3
    4ada:	4b05      	ldr	r3, [pc, #20]	; (4af0 <getSoscConfig+0x8c>)
    4adc:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4ade:	4b04      	ldr	r3, [pc, #16]	; (4af0 <getSoscConfig+0x8c>)
    4ae0:	4a05      	ldr	r2, [pc, #20]	; (4af8 <getSoscConfig+0x94>)
    4ae2:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4ae4:	9b00      	ldr	r3, [sp, #0]
}
    4ae6:	4618      	mov	r0, r3
    4ae8:	b002      	add	sp, #8
    4aea:	4770      	bx	lr
    4aec:	1fff8bcc 	.word	0x1fff8bcc
    4af0:	1fff8c44 	.word	0x1fff8c44
    4af4:	40064000 	.word	0x40064000
    4af8:	02625a00 	.word	0x02625a00

00004afc <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4afc:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4afe:	2300      	movs	r3, #0
    4b00:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b02:	4b28      	ldr	r3, [pc, #160]	; (4ba4 <getSpllConfig+0xa8>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d023      	beq.n	4b52 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4b0a:	2300      	movs	r3, #0
    4b0c:	9301      	str	r3, [sp, #4]
    4b0e:	e019      	b.n	4b44 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4b10:	4b24      	ldr	r3, [pc, #144]	; (4ba4 <getSpllConfig+0xa8>)
    4b12:	6819      	ldr	r1, [r3, #0]
    4b14:	9a01      	ldr	r2, [sp, #4]
    4b16:	4613      	mov	r3, r2
    4b18:	009b      	lsls	r3, r3, #2
    4b1a:	4413      	add	r3, r2
    4b1c:	00db      	lsls	r3, r3, #3
    4b1e:	440b      	add	r3, r1
    4b20:	3340      	adds	r3, #64	; 0x40
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	2b09      	cmp	r3, #9
    4b26:	d10a      	bne.n	4b3e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4b28:	4b1e      	ldr	r3, [pc, #120]	; (4ba4 <getSpllConfig+0xa8>)
    4b2a:	6819      	ldr	r1, [r3, #0]
    4b2c:	9a01      	ldr	r2, [sp, #4]
    4b2e:	4613      	mov	r3, r2
    4b30:	009b      	lsls	r3, r3, #2
    4b32:	4413      	add	r3, r2
    4b34:	00db      	lsls	r3, r3, #3
    4b36:	3340      	adds	r3, #64	; 0x40
    4b38:	440b      	add	r3, r1
    4b3a:	9300      	str	r3, [sp, #0]
                break;
    4b3c:	e009      	b.n	4b52 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4b3e:	9b01      	ldr	r3, [sp, #4]
    4b40:	3301      	adds	r3, #1
    4b42:	9301      	str	r3, [sp, #4]
    4b44:	4b17      	ldr	r3, [pc, #92]	; (4ba4 <getSpllConfig+0xa8>)
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	7a9b      	ldrb	r3, [r3, #10]
    4b4a:	461a      	mov	r2, r3
    4b4c:	9b01      	ldr	r3, [sp, #4]
    4b4e:	4293      	cmp	r3, r2
    4b50:	d3de      	bcc.n	4b10 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b52:	9b00      	ldr	r3, [sp, #0]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d121      	bne.n	4b9c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4b58:	4b13      	ldr	r3, [pc, #76]	; (4ba8 <getSpllConfig+0xac>)
    4b5a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4b5c:	4b12      	ldr	r3, [pc, #72]	; (4ba8 <getSpllConfig+0xac>)
    4b5e:	2209      	movs	r2, #9
    4b60:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4b62:	4b12      	ldr	r3, [pc, #72]	; (4bac <getSpllConfig+0xb0>)
    4b64:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b68:	b29b      	uxth	r3, r3
    4b6a:	f003 0301 	and.w	r3, r3, #1
    4b6e:	b29a      	uxth	r2, r3
    4b70:	4b0d      	ldr	r3, [pc, #52]	; (4ba8 <getSpllConfig+0xac>)
    4b72:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4b74:	4b0d      	ldr	r3, [pc, #52]	; (4bac <getSpllConfig+0xb0>)
    4b76:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4b7a:	0a1b      	lsrs	r3, r3, #8
    4b7c:	b2db      	uxtb	r3, r3
    4b7e:	f003 0307 	and.w	r3, r3, #7
    4b82:	b2da      	uxtb	r2, r3
    4b84:	4b08      	ldr	r3, [pc, #32]	; (4ba8 <getSpllConfig+0xac>)
    4b86:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4b88:	4b08      	ldr	r3, [pc, #32]	; (4bac <getSpllConfig+0xb0>)
    4b8a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4b8e:	0c1b      	lsrs	r3, r3, #16
    4b90:	b2db      	uxtb	r3, r3
    4b92:	f003 031f 	and.w	r3, r3, #31
    4b96:	b2da      	uxtb	r2, r3
    4b98:	4b03      	ldr	r3, [pc, #12]	; (4ba8 <getSpllConfig+0xac>)
    4b9a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4b9c:	9b00      	ldr	r3, [sp, #0]
}
    4b9e:	4618      	mov	r0, r3
    4ba0:	b002      	add	sp, #8
    4ba2:	4770      	bx	lr
    4ba4:	1fff8bcc 	.word	0x1fff8bcc
    4ba8:	1fff8c58 	.word	0x1fff8c58
    4bac:	40064000 	.word	0x40064000

00004bb0 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4bb0:	b086      	sub	sp, #24
    4bb2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4bb4:	2300      	movs	r3, #0
    4bb6:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4bb8:	9b01      	ldr	r3, [sp, #4]
    4bba:	2b1b      	cmp	r3, #27
    4bbc:	d00f      	beq.n	4bde <getSelectorConfig+0x2e>
    4bbe:	9b01      	ldr	r3, [sp, #4]
    4bc0:	2b1b      	cmp	r3, #27
    4bc2:	d80f      	bhi.n	4be4 <getSelectorConfig+0x34>
    4bc4:	9b01      	ldr	r3, [sp, #4]
    4bc6:	2b19      	cmp	r3, #25
    4bc8:	d003      	beq.n	4bd2 <getSelectorConfig+0x22>
    4bca:	9b01      	ldr	r3, [sp, #4]
    4bcc:	2b1a      	cmp	r3, #26
    4bce:	d003      	beq.n	4bd8 <getSelectorConfig+0x28>
    4bd0:	e008      	b.n	4be4 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4bd2:	2300      	movs	r3, #0
    4bd4:	9304      	str	r3, [sp, #16]
            break;
    4bd6:	e008      	b.n	4bea <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4bd8:	2301      	movs	r3, #1
    4bda:	9304      	str	r3, [sp, #16]
            break;
    4bdc:	e005      	b.n	4bea <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4bde:	2302      	movs	r3, #2
    4be0:	9304      	str	r3, [sp, #16]
            break;
    4be2:	e002      	b.n	4bea <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4be4:	2300      	movs	r3, #0
    4be6:	9304      	str	r3, [sp, #16]
            break;
    4be8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4bea:	4b36      	ldr	r3, [pc, #216]	; (4cc4 <getSelectorConfig+0x114>)
    4bec:	681b      	ldr	r3, [r3, #0]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d01d      	beq.n	4c2e <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4bf2:	2300      	movs	r3, #0
    4bf4:	9303      	str	r3, [sp, #12]
    4bf6:	e013      	b.n	4c20 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4bf8:	4b32      	ldr	r3, [pc, #200]	; (4cc4 <getSelectorConfig+0x114>)
    4bfa:	681b      	ldr	r3, [r3, #0]
    4bfc:	9a03      	ldr	r2, [sp, #12]
    4bfe:	320d      	adds	r2, #13
    4c00:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c04:	9a01      	ldr	r2, [sp, #4]
    4c06:	429a      	cmp	r2, r3
    4c08:	d107      	bne.n	4c1a <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4c0a:	4b2e      	ldr	r3, [pc, #184]	; (4cc4 <getSelectorConfig+0x114>)
    4c0c:	681a      	ldr	r2, [r3, #0]
    4c0e:	9b03      	ldr	r3, [sp, #12]
    4c10:	330d      	adds	r3, #13
    4c12:	00db      	lsls	r3, r3, #3
    4c14:	4413      	add	r3, r2
    4c16:	9305      	str	r3, [sp, #20]
                break;
    4c18:	e009      	b.n	4c2e <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4c1a:	9b03      	ldr	r3, [sp, #12]
    4c1c:	3301      	adds	r3, #1
    4c1e:	9303      	str	r3, [sp, #12]
    4c20:	4b28      	ldr	r3, [pc, #160]	; (4cc4 <getSelectorConfig+0x114>)
    4c22:	681b      	ldr	r3, [r3, #0]
    4c24:	7adb      	ldrb	r3, [r3, #11]
    4c26:	461a      	mov	r2, r3
    4c28:	9b03      	ldr	r3, [sp, #12]
    4c2a:	4293      	cmp	r3, r2
    4c2c:	d3e4      	bcc.n	4bf8 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c2e:	9b05      	ldr	r3, [sp, #20]
    4c30:	2b00      	cmp	r3, #0
    4c32:	d140      	bne.n	4cb6 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4c34:	9b04      	ldr	r3, [sp, #16]
    4c36:	00db      	lsls	r3, r3, #3
    4c38:	4a23      	ldr	r2, [pc, #140]	; (4cc8 <getSelectorConfig+0x118>)
    4c3a:	4413      	add	r3, r2
    4c3c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4c3e:	4922      	ldr	r1, [pc, #136]	; (4cc8 <getSelectorConfig+0x118>)
    4c40:	9b04      	ldr	r3, [sp, #16]
    4c42:	9a01      	ldr	r2, [sp, #4]
    4c44:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4c48:	9b01      	ldr	r3, [sp, #4]
    4c4a:	2b1b      	cmp	r3, #27
    4c4c:	d025      	beq.n	4c9a <getSelectorConfig+0xea>
    4c4e:	9b01      	ldr	r3, [sp, #4]
    4c50:	2b1b      	cmp	r3, #27
    4c52:	d832      	bhi.n	4cba <getSelectorConfig+0x10a>
    4c54:	9b01      	ldr	r3, [sp, #4]
    4c56:	2b19      	cmp	r3, #25
    4c58:	d003      	beq.n	4c62 <getSelectorConfig+0xb2>
    4c5a:	9b01      	ldr	r3, [sp, #4]
    4c5c:	2b1a      	cmp	r3, #26
    4c5e:	d00e      	beq.n	4c7e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4c60:	e02b      	b.n	4cba <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4c62:	4b1a      	ldr	r3, [pc, #104]	; (4ccc <getSelectorConfig+0x11c>)
    4c64:	695b      	ldr	r3, [r3, #20]
    4c66:	0e1b      	lsrs	r3, r3, #24
    4c68:	f003 030f 	and.w	r3, r3, #15
    4c6c:	4a18      	ldr	r2, [pc, #96]	; (4cd0 <getSelectorConfig+0x120>)
    4c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4c72:	4915      	ldr	r1, [pc, #84]	; (4cc8 <getSelectorConfig+0x118>)
    4c74:	9b04      	ldr	r3, [sp, #16]
    4c76:	00db      	lsls	r3, r3, #3
    4c78:	440b      	add	r3, r1
    4c7a:	605a      	str	r2, [r3, #4]
                break;
    4c7c:	e01e      	b.n	4cbc <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4c7e:	4b13      	ldr	r3, [pc, #76]	; (4ccc <getSelectorConfig+0x11c>)
    4c80:	699b      	ldr	r3, [r3, #24]
    4c82:	0e1b      	lsrs	r3, r3, #24
    4c84:	f003 030f 	and.w	r3, r3, #15
    4c88:	4a11      	ldr	r2, [pc, #68]	; (4cd0 <getSelectorConfig+0x120>)
    4c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4c8e:	490e      	ldr	r1, [pc, #56]	; (4cc8 <getSelectorConfig+0x118>)
    4c90:	9b04      	ldr	r3, [sp, #16]
    4c92:	00db      	lsls	r3, r3, #3
    4c94:	440b      	add	r3, r1
    4c96:	605a      	str	r2, [r3, #4]
                break;
    4c98:	e010      	b.n	4cbc <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4c9a:	4b0c      	ldr	r3, [pc, #48]	; (4ccc <getSelectorConfig+0x11c>)
    4c9c:	69db      	ldr	r3, [r3, #28]
    4c9e:	0e1b      	lsrs	r3, r3, #24
    4ca0:	f003 030f 	and.w	r3, r3, #15
    4ca4:	4a0a      	ldr	r2, [pc, #40]	; (4cd0 <getSelectorConfig+0x120>)
    4ca6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4caa:	4907      	ldr	r1, [pc, #28]	; (4cc8 <getSelectorConfig+0x118>)
    4cac:	9b04      	ldr	r3, [sp, #16]
    4cae:	00db      	lsls	r3, r3, #3
    4cb0:	440b      	add	r3, r1
    4cb2:	605a      	str	r2, [r3, #4]
                break;
    4cb4:	e002      	b.n	4cbc <getSelectorConfig+0x10c>
        }
    }
    4cb6:	bf00      	nop
    4cb8:	e000      	b.n	4cbc <getSelectorConfig+0x10c>
                break;
    4cba:	bf00      	nop

    return ReturnValue;
    4cbc:	9b05      	ldr	r3, [sp, #20]
}
    4cbe:	4618      	mov	r0, r3
    4cc0:	b006      	add	sp, #24
    4cc2:	4770      	bx	lr
    4cc4:	1fff8bcc 	.word	0x1fff8bcc
    4cc8:	1fff8c80 	.word	0x1fff8c80
    4ccc:	40064000 	.word	0x40064000
    4cd0:	00015624 	.word	0x00015624

00004cd4 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4cd4:	b086      	sub	sp, #24
    4cd6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4cd8:	2300      	movs	r3, #0
    4cda:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4cdc:	2300      	movs	r3, #0
    4cde:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4ce0:	9b01      	ldr	r3, [sp, #4]
    4ce2:	2b1f      	cmp	r3, #31
    4ce4:	d00f      	beq.n	4d06 <getCoreDividerConfig+0x32>
    4ce6:	9b01      	ldr	r3, [sp, #4]
    4ce8:	2b1f      	cmp	r3, #31
    4cea:	d80f      	bhi.n	4d0c <getCoreDividerConfig+0x38>
    4cec:	9b01      	ldr	r3, [sp, #4]
    4cee:	2b1d      	cmp	r3, #29
    4cf0:	d003      	beq.n	4cfa <getCoreDividerConfig+0x26>
    4cf2:	9b01      	ldr	r3, [sp, #4]
    4cf4:	2b1e      	cmp	r3, #30
    4cf6:	d003      	beq.n	4d00 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4cf8:	e008      	b.n	4d0c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4cfa:	2300      	movs	r3, #0
    4cfc:	9304      	str	r3, [sp, #16]
            break;
    4cfe:	e006      	b.n	4d0e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4d00:	2301      	movs	r3, #1
    4d02:	9304      	str	r3, [sp, #16]
            break;
    4d04:	e003      	b.n	4d0e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4d06:	2302      	movs	r3, #2
    4d08:	9304      	str	r3, [sp, #16]
            break;
    4d0a:	e000      	b.n	4d0e <getCoreDividerConfig+0x3a>
                break;
    4d0c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d0e:	4b41      	ldr	r3, [pc, #260]	; (4e14 <getCoreDividerConfig+0x140>)
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d026      	beq.n	4d64 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4d16:	2300      	movs	r3, #0
    4d18:	9303      	str	r3, [sp, #12]
    4d1a:	e01c      	b.n	4d56 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4d1c:	4b3d      	ldr	r3, [pc, #244]	; (4e14 <getCoreDividerConfig+0x140>)
    4d1e:	6819      	ldr	r1, [r3, #0]
    4d20:	9a03      	ldr	r2, [sp, #12]
    4d22:	4613      	mov	r3, r2
    4d24:	005b      	lsls	r3, r3, #1
    4d26:	4413      	add	r3, r2
    4d28:	009b      	lsls	r3, r3, #2
    4d2a:	440b      	add	r3, r1
    4d2c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	9a01      	ldr	r2, [sp, #4]
    4d34:	429a      	cmp	r2, r3
    4d36:	d10b      	bne.n	4d50 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4d38:	4b36      	ldr	r3, [pc, #216]	; (4e14 <getCoreDividerConfig+0x140>)
    4d3a:	6819      	ldr	r1, [r3, #0]
    4d3c:	9a03      	ldr	r2, [sp, #12]
    4d3e:	4613      	mov	r3, r2
    4d40:	005b      	lsls	r3, r3, #1
    4d42:	4413      	add	r3, r2
    4d44:	009b      	lsls	r3, r3, #2
    4d46:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4d4a:	440b      	add	r3, r1
    4d4c:	9305      	str	r3, [sp, #20]
                break;
    4d4e:	e009      	b.n	4d64 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4d50:	9b03      	ldr	r3, [sp, #12]
    4d52:	3301      	adds	r3, #1
    4d54:	9303      	str	r3, [sp, #12]
    4d56:	4b2f      	ldr	r3, [pc, #188]	; (4e14 <getCoreDividerConfig+0x140>)
    4d58:	681b      	ldr	r3, [r3, #0]
    4d5a:	7b1b      	ldrb	r3, [r3, #12]
    4d5c:	461a      	mov	r2, r3
    4d5e:	9b03      	ldr	r3, [sp, #12]
    4d60:	4293      	cmp	r3, r2
    4d62:	d3db      	bcc.n	4d1c <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d64:	9b05      	ldr	r3, [sp, #20]
    4d66:	2b00      	cmp	r3, #0
    4d68:	d14d      	bne.n	4e06 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4d6a:	9a04      	ldr	r2, [sp, #16]
    4d6c:	4613      	mov	r3, r2
    4d6e:	005b      	lsls	r3, r3, #1
    4d70:	4413      	add	r3, r2
    4d72:	009b      	lsls	r3, r3, #2
    4d74:	4a28      	ldr	r2, [pc, #160]	; (4e18 <getCoreDividerConfig+0x144>)
    4d76:	4413      	add	r3, r2
    4d78:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4d7a:	4927      	ldr	r1, [pc, #156]	; (4e18 <getCoreDividerConfig+0x144>)
    4d7c:	9a04      	ldr	r2, [sp, #16]
    4d7e:	4613      	mov	r3, r2
    4d80:	005b      	lsls	r3, r3, #1
    4d82:	4413      	add	r3, r2
    4d84:	009b      	lsls	r3, r3, #2
    4d86:	440b      	add	r3, r1
    4d88:	9a01      	ldr	r2, [sp, #4]
    4d8a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4d8c:	9b01      	ldr	r3, [sp, #4]
    4d8e:	2b1f      	cmp	r3, #31
    4d90:	d029      	beq.n	4de6 <getCoreDividerConfig+0x112>
    4d92:	9b01      	ldr	r3, [sp, #4]
    4d94:	2b1f      	cmp	r3, #31
    4d96:	d838      	bhi.n	4e0a <getCoreDividerConfig+0x136>
    4d98:	9b01      	ldr	r3, [sp, #4]
    4d9a:	2b1d      	cmp	r3, #29
    4d9c:	d003      	beq.n	4da6 <getCoreDividerConfig+0xd2>
    4d9e:	9b01      	ldr	r3, [sp, #4]
    4da0:	2b1e      	cmp	r3, #30
    4da2:	d010      	beq.n	4dc6 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4da4:	e031      	b.n	4e0a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4da6:	4b1d      	ldr	r3, [pc, #116]	; (4e1c <getCoreDividerConfig+0x148>)
    4da8:	695b      	ldr	r3, [r3, #20]
    4daa:	0c1b      	lsrs	r3, r3, #16
    4dac:	f003 030f 	and.w	r3, r3, #15
    4db0:	1c59      	adds	r1, r3, #1
    4db2:	4819      	ldr	r0, [pc, #100]	; (4e18 <getCoreDividerConfig+0x144>)
    4db4:	9a04      	ldr	r2, [sp, #16]
    4db6:	4613      	mov	r3, r2
    4db8:	005b      	lsls	r3, r3, #1
    4dba:	4413      	add	r3, r2
    4dbc:	009b      	lsls	r3, r3, #2
    4dbe:	4403      	add	r3, r0
    4dc0:	3304      	adds	r3, #4
    4dc2:	6019      	str	r1, [r3, #0]
                break;
    4dc4:	e022      	b.n	4e0c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4dc6:	4b15      	ldr	r3, [pc, #84]	; (4e1c <getCoreDividerConfig+0x148>)
    4dc8:	699b      	ldr	r3, [r3, #24]
    4dca:	0c1b      	lsrs	r3, r3, #16
    4dcc:	f003 030f 	and.w	r3, r3, #15
    4dd0:	1c59      	adds	r1, r3, #1
    4dd2:	4811      	ldr	r0, [pc, #68]	; (4e18 <getCoreDividerConfig+0x144>)
    4dd4:	9a04      	ldr	r2, [sp, #16]
    4dd6:	4613      	mov	r3, r2
    4dd8:	005b      	lsls	r3, r3, #1
    4dda:	4413      	add	r3, r2
    4ddc:	009b      	lsls	r3, r3, #2
    4dde:	4403      	add	r3, r0
    4de0:	3304      	adds	r3, #4
    4de2:	6019      	str	r1, [r3, #0]
                break;
    4de4:	e012      	b.n	4e0c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4de6:	4b0d      	ldr	r3, [pc, #52]	; (4e1c <getCoreDividerConfig+0x148>)
    4de8:	69db      	ldr	r3, [r3, #28]
    4dea:	0c1b      	lsrs	r3, r3, #16
    4dec:	f003 030f 	and.w	r3, r3, #15
    4df0:	1c59      	adds	r1, r3, #1
    4df2:	4809      	ldr	r0, [pc, #36]	; (4e18 <getCoreDividerConfig+0x144>)
    4df4:	9a04      	ldr	r2, [sp, #16]
    4df6:	4613      	mov	r3, r2
    4df8:	005b      	lsls	r3, r3, #1
    4dfa:	4413      	add	r3, r2
    4dfc:	009b      	lsls	r3, r3, #2
    4dfe:	4403      	add	r3, r0
    4e00:	3304      	adds	r3, #4
    4e02:	6019      	str	r1, [r3, #0]
                break;
    4e04:	e002      	b.n	4e0c <getCoreDividerConfig+0x138>
        }
    }
    4e06:	bf00      	nop
    4e08:	e000      	b.n	4e0c <getCoreDividerConfig+0x138>
                break;
    4e0a:	bf00      	nop

    return ReturnValue;
    4e0c:	9b05      	ldr	r3, [sp, #20]
}
    4e0e:	4618      	mov	r0, r3
    4e10:	b006      	add	sp, #24
    4e12:	4770      	bx	lr
    4e14:	1fff8bcc 	.word	0x1fff8bcc
    4e18:	1fff8c98 	.word	0x1fff8c98
    4e1c:	40064000 	.word	0x40064000

00004e20 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4e20:	b086      	sub	sp, #24
    4e22:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e24:	2300      	movs	r3, #0
    4e26:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e28:	2300      	movs	r3, #0
    4e2a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e2c:	9b01      	ldr	r3, [sp, #4]
    4e2e:	2b23      	cmp	r3, #35	; 0x23
    4e30:	d00f      	beq.n	4e52 <getBusDividerConfig+0x32>
    4e32:	9b01      	ldr	r3, [sp, #4]
    4e34:	2b23      	cmp	r3, #35	; 0x23
    4e36:	d80f      	bhi.n	4e58 <getBusDividerConfig+0x38>
    4e38:	9b01      	ldr	r3, [sp, #4]
    4e3a:	2b21      	cmp	r3, #33	; 0x21
    4e3c:	d003      	beq.n	4e46 <getBusDividerConfig+0x26>
    4e3e:	9b01      	ldr	r3, [sp, #4]
    4e40:	2b22      	cmp	r3, #34	; 0x22
    4e42:	d003      	beq.n	4e4c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e44:	e008      	b.n	4e58 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e46:	2300      	movs	r3, #0
    4e48:	9304      	str	r3, [sp, #16]
            break;
    4e4a:	e006      	b.n	4e5a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e4c:	2301      	movs	r3, #1
    4e4e:	9304      	str	r3, [sp, #16]
            break;
    4e50:	e003      	b.n	4e5a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e52:	2302      	movs	r3, #2
    4e54:	9304      	str	r3, [sp, #16]
            break;
    4e56:	e000      	b.n	4e5a <getBusDividerConfig+0x3a>
                break;
    4e58:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e5a:	4b41      	ldr	r3, [pc, #260]	; (4f60 <getBusDividerConfig+0x140>)
    4e5c:	681b      	ldr	r3, [r3, #0]
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d026      	beq.n	4eb0 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e62:	2300      	movs	r3, #0
    4e64:	9303      	str	r3, [sp, #12]
    4e66:	e01c      	b.n	4ea2 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e68:	4b3d      	ldr	r3, [pc, #244]	; (4f60 <getBusDividerConfig+0x140>)
    4e6a:	6819      	ldr	r1, [r3, #0]
    4e6c:	9a03      	ldr	r2, [sp, #12]
    4e6e:	4613      	mov	r3, r2
    4e70:	005b      	lsls	r3, r3, #1
    4e72:	4413      	add	r3, r2
    4e74:	009b      	lsls	r3, r3, #2
    4e76:	440b      	add	r3, r1
    4e78:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e7c:	681b      	ldr	r3, [r3, #0]
    4e7e:	9a01      	ldr	r2, [sp, #4]
    4e80:	429a      	cmp	r2, r3
    4e82:	d10b      	bne.n	4e9c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e84:	4b36      	ldr	r3, [pc, #216]	; (4f60 <getBusDividerConfig+0x140>)
    4e86:	6819      	ldr	r1, [r3, #0]
    4e88:	9a03      	ldr	r2, [sp, #12]
    4e8a:	4613      	mov	r3, r2
    4e8c:	005b      	lsls	r3, r3, #1
    4e8e:	4413      	add	r3, r2
    4e90:	009b      	lsls	r3, r3, #2
    4e92:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e96:	440b      	add	r3, r1
    4e98:	9305      	str	r3, [sp, #20]
                break;
    4e9a:	e009      	b.n	4eb0 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e9c:	9b03      	ldr	r3, [sp, #12]
    4e9e:	3301      	adds	r3, #1
    4ea0:	9303      	str	r3, [sp, #12]
    4ea2:	4b2f      	ldr	r3, [pc, #188]	; (4f60 <getBusDividerConfig+0x140>)
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	7b1b      	ldrb	r3, [r3, #12]
    4ea8:	461a      	mov	r2, r3
    4eaa:	9b03      	ldr	r3, [sp, #12]
    4eac:	4293      	cmp	r3, r2
    4eae:	d3db      	bcc.n	4e68 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4eb0:	9b05      	ldr	r3, [sp, #20]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d14d      	bne.n	4f52 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4eb6:	9a04      	ldr	r2, [sp, #16]
    4eb8:	4613      	mov	r3, r2
    4eba:	005b      	lsls	r3, r3, #1
    4ebc:	4413      	add	r3, r2
    4ebe:	009b      	lsls	r3, r3, #2
    4ec0:	4a28      	ldr	r2, [pc, #160]	; (4f64 <getBusDividerConfig+0x144>)
    4ec2:	4413      	add	r3, r2
    4ec4:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4ec6:	4927      	ldr	r1, [pc, #156]	; (4f64 <getBusDividerConfig+0x144>)
    4ec8:	9a04      	ldr	r2, [sp, #16]
    4eca:	4613      	mov	r3, r2
    4ecc:	005b      	lsls	r3, r3, #1
    4ece:	4413      	add	r3, r2
    4ed0:	009b      	lsls	r3, r3, #2
    4ed2:	440b      	add	r3, r1
    4ed4:	9a01      	ldr	r2, [sp, #4]
    4ed6:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ed8:	9b01      	ldr	r3, [sp, #4]
    4eda:	2b23      	cmp	r3, #35	; 0x23
    4edc:	d029      	beq.n	4f32 <getBusDividerConfig+0x112>
    4ede:	9b01      	ldr	r3, [sp, #4]
    4ee0:	2b23      	cmp	r3, #35	; 0x23
    4ee2:	d838      	bhi.n	4f56 <getBusDividerConfig+0x136>
    4ee4:	9b01      	ldr	r3, [sp, #4]
    4ee6:	2b21      	cmp	r3, #33	; 0x21
    4ee8:	d003      	beq.n	4ef2 <getBusDividerConfig+0xd2>
    4eea:	9b01      	ldr	r3, [sp, #4]
    4eec:	2b22      	cmp	r3, #34	; 0x22
    4eee:	d010      	beq.n	4f12 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ef0:	e031      	b.n	4f56 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4ef2:	4b1d      	ldr	r3, [pc, #116]	; (4f68 <getBusDividerConfig+0x148>)
    4ef4:	695b      	ldr	r3, [r3, #20]
    4ef6:	091b      	lsrs	r3, r3, #4
    4ef8:	f003 030f 	and.w	r3, r3, #15
    4efc:	1c59      	adds	r1, r3, #1
    4efe:	4819      	ldr	r0, [pc, #100]	; (4f64 <getBusDividerConfig+0x144>)
    4f00:	9a04      	ldr	r2, [sp, #16]
    4f02:	4613      	mov	r3, r2
    4f04:	005b      	lsls	r3, r3, #1
    4f06:	4413      	add	r3, r2
    4f08:	009b      	lsls	r3, r3, #2
    4f0a:	4403      	add	r3, r0
    4f0c:	3304      	adds	r3, #4
    4f0e:	6019      	str	r1, [r3, #0]
                break;
    4f10:	e022      	b.n	4f58 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4f12:	4b15      	ldr	r3, [pc, #84]	; (4f68 <getBusDividerConfig+0x148>)
    4f14:	699b      	ldr	r3, [r3, #24]
    4f16:	091b      	lsrs	r3, r3, #4
    4f18:	f003 030f 	and.w	r3, r3, #15
    4f1c:	1c59      	adds	r1, r3, #1
    4f1e:	4811      	ldr	r0, [pc, #68]	; (4f64 <getBusDividerConfig+0x144>)
    4f20:	9a04      	ldr	r2, [sp, #16]
    4f22:	4613      	mov	r3, r2
    4f24:	005b      	lsls	r3, r3, #1
    4f26:	4413      	add	r3, r2
    4f28:	009b      	lsls	r3, r3, #2
    4f2a:	4403      	add	r3, r0
    4f2c:	3304      	adds	r3, #4
    4f2e:	6019      	str	r1, [r3, #0]
                break;
    4f30:	e012      	b.n	4f58 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4f32:	4b0d      	ldr	r3, [pc, #52]	; (4f68 <getBusDividerConfig+0x148>)
    4f34:	69db      	ldr	r3, [r3, #28]
    4f36:	091b      	lsrs	r3, r3, #4
    4f38:	f003 030f 	and.w	r3, r3, #15
    4f3c:	1c59      	adds	r1, r3, #1
    4f3e:	4809      	ldr	r0, [pc, #36]	; (4f64 <getBusDividerConfig+0x144>)
    4f40:	9a04      	ldr	r2, [sp, #16]
    4f42:	4613      	mov	r3, r2
    4f44:	005b      	lsls	r3, r3, #1
    4f46:	4413      	add	r3, r2
    4f48:	009b      	lsls	r3, r3, #2
    4f4a:	4403      	add	r3, r0
    4f4c:	3304      	adds	r3, #4
    4f4e:	6019      	str	r1, [r3, #0]
                break;
    4f50:	e002      	b.n	4f58 <getBusDividerConfig+0x138>
        }
    }
    4f52:	bf00      	nop
    4f54:	e000      	b.n	4f58 <getBusDividerConfig+0x138>
                break;
    4f56:	bf00      	nop

    return ReturnValue;
    4f58:	9b05      	ldr	r3, [sp, #20]
}
    4f5a:	4618      	mov	r0, r3
    4f5c:	b006      	add	sp, #24
    4f5e:	4770      	bx	lr
    4f60:	1fff8bcc 	.word	0x1fff8bcc
    4f64:	1fff8cbc 	.word	0x1fff8cbc
    4f68:	40064000 	.word	0x40064000

00004f6c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4f6c:	b086      	sub	sp, #24
    4f6e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f70:	2300      	movs	r3, #0
    4f72:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f74:	2300      	movs	r3, #0
    4f76:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f78:	9b01      	ldr	r3, [sp, #4]
    4f7a:	2b27      	cmp	r3, #39	; 0x27
    4f7c:	d00f      	beq.n	4f9e <getSlowDividerConfig+0x32>
    4f7e:	9b01      	ldr	r3, [sp, #4]
    4f80:	2b27      	cmp	r3, #39	; 0x27
    4f82:	d80f      	bhi.n	4fa4 <getSlowDividerConfig+0x38>
    4f84:	9b01      	ldr	r3, [sp, #4]
    4f86:	2b25      	cmp	r3, #37	; 0x25
    4f88:	d003      	beq.n	4f92 <getSlowDividerConfig+0x26>
    4f8a:	9b01      	ldr	r3, [sp, #4]
    4f8c:	2b26      	cmp	r3, #38	; 0x26
    4f8e:	d003      	beq.n	4f98 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f90:	e008      	b.n	4fa4 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f92:	2300      	movs	r3, #0
    4f94:	9304      	str	r3, [sp, #16]
            break;
    4f96:	e006      	b.n	4fa6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f98:	2301      	movs	r3, #1
    4f9a:	9304      	str	r3, [sp, #16]
            break;
    4f9c:	e003      	b.n	4fa6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f9e:	2302      	movs	r3, #2
    4fa0:	9304      	str	r3, [sp, #16]
            break;
    4fa2:	e000      	b.n	4fa6 <getSlowDividerConfig+0x3a>
                break;
    4fa4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4fa6:	4b40      	ldr	r3, [pc, #256]	; (50a8 <getSlowDividerConfig+0x13c>)
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d026      	beq.n	4ffc <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fae:	2300      	movs	r3, #0
    4fb0:	9303      	str	r3, [sp, #12]
    4fb2:	e01c      	b.n	4fee <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4fb4:	4b3c      	ldr	r3, [pc, #240]	; (50a8 <getSlowDividerConfig+0x13c>)
    4fb6:	6819      	ldr	r1, [r3, #0]
    4fb8:	9a03      	ldr	r2, [sp, #12]
    4fba:	4613      	mov	r3, r2
    4fbc:	005b      	lsls	r3, r3, #1
    4fbe:	4413      	add	r3, r2
    4fc0:	009b      	lsls	r3, r3, #2
    4fc2:	440b      	add	r3, r1
    4fc4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fc8:	681b      	ldr	r3, [r3, #0]
    4fca:	9a01      	ldr	r2, [sp, #4]
    4fcc:	429a      	cmp	r2, r3
    4fce:	d10b      	bne.n	4fe8 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fd0:	4b35      	ldr	r3, [pc, #212]	; (50a8 <getSlowDividerConfig+0x13c>)
    4fd2:	6819      	ldr	r1, [r3, #0]
    4fd4:	9a03      	ldr	r2, [sp, #12]
    4fd6:	4613      	mov	r3, r2
    4fd8:	005b      	lsls	r3, r3, #1
    4fda:	4413      	add	r3, r2
    4fdc:	009b      	lsls	r3, r3, #2
    4fde:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fe2:	440b      	add	r3, r1
    4fe4:	9305      	str	r3, [sp, #20]
                break;
    4fe6:	e009      	b.n	4ffc <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fe8:	9b03      	ldr	r3, [sp, #12]
    4fea:	3301      	adds	r3, #1
    4fec:	9303      	str	r3, [sp, #12]
    4fee:	4b2e      	ldr	r3, [pc, #184]	; (50a8 <getSlowDividerConfig+0x13c>)
    4ff0:	681b      	ldr	r3, [r3, #0]
    4ff2:	7b1b      	ldrb	r3, [r3, #12]
    4ff4:	461a      	mov	r2, r3
    4ff6:	9b03      	ldr	r3, [sp, #12]
    4ff8:	4293      	cmp	r3, r2
    4ffa:	d3db      	bcc.n	4fb4 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ffc:	9b05      	ldr	r3, [sp, #20]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d14a      	bne.n	5098 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5002:	9a04      	ldr	r2, [sp, #16]
    5004:	4613      	mov	r3, r2
    5006:	005b      	lsls	r3, r3, #1
    5008:	4413      	add	r3, r2
    500a:	009b      	lsls	r3, r3, #2
    500c:	4a27      	ldr	r2, [pc, #156]	; (50ac <getSlowDividerConfig+0x140>)
    500e:	4413      	add	r3, r2
    5010:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5012:	4926      	ldr	r1, [pc, #152]	; (50ac <getSlowDividerConfig+0x140>)
    5014:	9a04      	ldr	r2, [sp, #16]
    5016:	4613      	mov	r3, r2
    5018:	005b      	lsls	r3, r3, #1
    501a:	4413      	add	r3, r2
    501c:	009b      	lsls	r3, r3, #2
    501e:	440b      	add	r3, r1
    5020:	9a01      	ldr	r2, [sp, #4]
    5022:	601a      	str	r2, [r3, #0]
        switch(Name)
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	2b27      	cmp	r3, #39	; 0x27
    5028:	d027      	beq.n	507a <getSlowDividerConfig+0x10e>
    502a:	9b01      	ldr	r3, [sp, #4]
    502c:	2b27      	cmp	r3, #39	; 0x27
    502e:	d835      	bhi.n	509c <getSlowDividerConfig+0x130>
    5030:	9b01      	ldr	r3, [sp, #4]
    5032:	2b25      	cmp	r3, #37	; 0x25
    5034:	d003      	beq.n	503e <getSlowDividerConfig+0xd2>
    5036:	9b01      	ldr	r3, [sp, #4]
    5038:	2b26      	cmp	r3, #38	; 0x26
    503a:	d00f      	beq.n	505c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    503c:	e02e      	b.n	509c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    503e:	4b1c      	ldr	r3, [pc, #112]	; (50b0 <getSlowDividerConfig+0x144>)
    5040:	695b      	ldr	r3, [r3, #20]
    5042:	f003 030f 	and.w	r3, r3, #15
    5046:	1c59      	adds	r1, r3, #1
    5048:	4818      	ldr	r0, [pc, #96]	; (50ac <getSlowDividerConfig+0x140>)
    504a:	9a04      	ldr	r2, [sp, #16]
    504c:	4613      	mov	r3, r2
    504e:	005b      	lsls	r3, r3, #1
    5050:	4413      	add	r3, r2
    5052:	009b      	lsls	r3, r3, #2
    5054:	4403      	add	r3, r0
    5056:	3304      	adds	r3, #4
    5058:	6019      	str	r1, [r3, #0]
                break;
    505a:	e020      	b.n	509e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    505c:	4b14      	ldr	r3, [pc, #80]	; (50b0 <getSlowDividerConfig+0x144>)
    505e:	699b      	ldr	r3, [r3, #24]
    5060:	f003 030f 	and.w	r3, r3, #15
    5064:	1c59      	adds	r1, r3, #1
    5066:	4811      	ldr	r0, [pc, #68]	; (50ac <getSlowDividerConfig+0x140>)
    5068:	9a04      	ldr	r2, [sp, #16]
    506a:	4613      	mov	r3, r2
    506c:	005b      	lsls	r3, r3, #1
    506e:	4413      	add	r3, r2
    5070:	009b      	lsls	r3, r3, #2
    5072:	4403      	add	r3, r0
    5074:	3304      	adds	r3, #4
    5076:	6019      	str	r1, [r3, #0]
                break;
    5078:	e011      	b.n	509e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    507a:	4b0d      	ldr	r3, [pc, #52]	; (50b0 <getSlowDividerConfig+0x144>)
    507c:	69db      	ldr	r3, [r3, #28]
    507e:	f003 030f 	and.w	r3, r3, #15
    5082:	1c59      	adds	r1, r3, #1
    5084:	4809      	ldr	r0, [pc, #36]	; (50ac <getSlowDividerConfig+0x140>)
    5086:	9a04      	ldr	r2, [sp, #16]
    5088:	4613      	mov	r3, r2
    508a:	005b      	lsls	r3, r3, #1
    508c:	4413      	add	r3, r2
    508e:	009b      	lsls	r3, r3, #2
    5090:	4403      	add	r3, r0
    5092:	3304      	adds	r3, #4
    5094:	6019      	str	r1, [r3, #0]
                break;
    5096:	e002      	b.n	509e <getSlowDividerConfig+0x132>
        }
    }
    5098:	bf00      	nop
    509a:	e000      	b.n	509e <getSlowDividerConfig+0x132>
                break;
    509c:	bf00      	nop

    return ReturnValue;
    509e:	9b05      	ldr	r3, [sp, #20]
}
    50a0:	4618      	mov	r0, r3
    50a2:	b006      	add	sp, #24
    50a4:	4770      	bx	lr
    50a6:	bf00      	nop
    50a8:	1fff8bcc 	.word	0x1fff8bcc
    50ac:	1fff8ce0 	.word	0x1fff8ce0
    50b0:	40064000 	.word	0x40064000

000050b4 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    50b4:	b500      	push	{lr}
    50b6:	b083      	sub	sp, #12
    50b8:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    50ba:	4b64      	ldr	r3, [pc, #400]	; (524c <Clock_Ip_ClockInitializeObjects+0x198>)
    50bc:	781b      	ldrb	r3, [r3, #0]
    50be:	f083 0301 	eor.w	r3, r3, #1
    50c2:	b2db      	uxtb	r3, r3
    50c4:	2b00      	cmp	r3, #0
    50c6:	d05b      	beq.n	5180 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    50c8:	4b60      	ldr	r3, [pc, #384]	; (524c <Clock_Ip_ClockInitializeObjects+0x198>)
    50ca:	2201      	movs	r2, #1
    50cc:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    50ce:	4b60      	ldr	r3, [pc, #384]	; (5250 <Clock_Ip_ClockInitializeObjects+0x19c>)
    50d0:	785b      	ldrb	r3, [r3, #1]
    50d2:	461a      	mov	r2, r3
    50d4:	4613      	mov	r3, r2
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	4413      	add	r3, r2
    50da:	009b      	lsls	r3, r3, #2
    50dc:	4a5d      	ldr	r2, [pc, #372]	; (5254 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    50de:	4413      	add	r3, r2
    50e0:	4a5d      	ldr	r2, [pc, #372]	; (5258 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    50e2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    50e4:	4b5d      	ldr	r3, [pc, #372]	; (525c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    50e6:	785b      	ldrb	r3, [r3, #1]
    50e8:	461a      	mov	r2, r3
    50ea:	4613      	mov	r3, r2
    50ec:	009b      	lsls	r3, r3, #2
    50ee:	4413      	add	r3, r2
    50f0:	009b      	lsls	r3, r3, #2
    50f2:	4a5b      	ldr	r2, [pc, #364]	; (5260 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    50f4:	4413      	add	r3, r2
    50f6:	4a5b      	ldr	r2, [pc, #364]	; (5264 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    50f8:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    50fa:	4b5b      	ldr	r3, [pc, #364]	; (5268 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    50fc:	791b      	ldrb	r3, [r3, #4]
    50fe:	461a      	mov	r2, r3
    5100:	4613      	mov	r3, r2
    5102:	005b      	lsls	r3, r3, #1
    5104:	4413      	add	r3, r2
    5106:	009b      	lsls	r3, r3, #2
    5108:	4a58      	ldr	r2, [pc, #352]	; (526c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    510a:	4413      	add	r3, r2
    510c:	4a58      	ldr	r2, [pc, #352]	; (5270 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    510e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5110:	4b58      	ldr	r3, [pc, #352]	; (5274 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5112:	795b      	ldrb	r3, [r3, #5]
    5114:	00db      	lsls	r3, r3, #3
    5116:	4a58      	ldr	r2, [pc, #352]	; (5278 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5118:	4413      	add	r3, r2
    511a:	4a58      	ldr	r2, [pc, #352]	; (527c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    511c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    511e:	4b55      	ldr	r3, [pc, #340]	; (5274 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5120:	79db      	ldrb	r3, [r3, #7]
    5122:	00db      	lsls	r3, r3, #3
    5124:	4a54      	ldr	r2, [pc, #336]	; (5278 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5126:	4413      	add	r3, r2
    5128:	4a55      	ldr	r2, [pc, #340]	; (5280 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    512a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    512c:	4b55      	ldr	r3, [pc, #340]	; (5284 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    512e:	799b      	ldrb	r3, [r3, #6]
    5130:	009b      	lsls	r3, r3, #2
    5132:	4a55      	ldr	r2, [pc, #340]	; (5288 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5134:	4413      	add	r3, r2
    5136:	4a55      	ldr	r2, [pc, #340]	; (528c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5138:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    513a:	4b52      	ldr	r3, [pc, #328]	; (5284 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    513c:	7a1b      	ldrb	r3, [r3, #8]
    513e:	009b      	lsls	r3, r3, #2
    5140:	4a51      	ldr	r2, [pc, #324]	; (5288 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5142:	4413      	add	r3, r2
    5144:	4a52      	ldr	r2, [pc, #328]	; (5290 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5146:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5148:	4b4e      	ldr	r3, [pc, #312]	; (5284 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    514a:	7a5b      	ldrb	r3, [r3, #9]
    514c:	009b      	lsls	r3, r3, #2
    514e:	4a4e      	ldr	r2, [pc, #312]	; (5288 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5150:	4413      	add	r3, r2
    5152:	4a50      	ldr	r2, [pc, #320]	; (5294 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5154:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5156:	4b4b      	ldr	r3, [pc, #300]	; (5284 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5158:	7adb      	ldrb	r3, [r3, #11]
    515a:	009b      	lsls	r3, r3, #2
    515c:	4a4a      	ldr	r2, [pc, #296]	; (5288 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    515e:	4413      	add	r3, r2
    5160:	4a4d      	ldr	r2, [pc, #308]	; (5298 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5162:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5164:	4b47      	ldr	r3, [pc, #284]	; (5284 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5166:	7b1b      	ldrb	r3, [r3, #12]
    5168:	009b      	lsls	r3, r3, #2
    516a:	4a47      	ldr	r2, [pc, #284]	; (5288 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    516c:	4413      	add	r3, r2
    516e:	4a4b      	ldr	r2, [pc, #300]	; (529c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5170:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5172:	4b44      	ldr	r3, [pc, #272]	; (5284 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5174:	7b9b      	ldrb	r3, [r3, #14]
    5176:	009b      	lsls	r3, r3, #2
    5178:	4a43      	ldr	r2, [pc, #268]	; (5288 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    517a:	4413      	add	r3, r2
    517c:	4a48      	ldr	r2, [pc, #288]	; (52a0 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    517e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5180:	4b48      	ldr	r3, [pc, #288]	; (52a4 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5182:	781b      	ldrb	r3, [r3, #0]
    5184:	2b00      	cmp	r3, #0
    5186:	d002      	beq.n	518e <Clock_Ip_ClockInitializeObjects+0xda>
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	2b00      	cmp	r3, #0
    518c:	d003      	beq.n	5196 <Clock_Ip_ClockInitializeObjects+0xe2>
    518e:	4b46      	ldr	r3, [pc, #280]	; (52a8 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	2b00      	cmp	r3, #0
    5194:	d056      	beq.n	5244 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5196:	f7ff fc09 	bl	49ac <getFircConfig>
    519a:	4603      	mov	r3, r0
    519c:	4a43      	ldr	r2, [pc, #268]	; (52ac <Clock_Ip_ClockInitializeObjects+0x1f8>)
    519e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    51a0:	f7ff fc60 	bl	4a64 <getSoscConfig>
    51a4:	4603      	mov	r3, r0
    51a6:	4a42      	ldr	r2, [pc, #264]	; (52b0 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    51a8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    51aa:	f7ff fca7 	bl	4afc <getSpllConfig>
    51ae:	4603      	mov	r3, r0
    51b0:	4a40      	ldr	r2, [pc, #256]	; (52b4 <Clock_Ip_ClockInitializeObjects+0x200>)
    51b2:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    51b4:	2019      	movs	r0, #25
    51b6:	f7ff fcfb 	bl	4bb0 <getSelectorConfig>
    51ba:	4603      	mov	r3, r0
    51bc:	4a3e      	ldr	r2, [pc, #248]	; (52b8 <Clock_Ip_ClockInitializeObjects+0x204>)
    51be:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    51c0:	201a      	movs	r0, #26
    51c2:	f7ff fcf5 	bl	4bb0 <getSelectorConfig>
    51c6:	4603      	mov	r3, r0
    51c8:	4a3c      	ldr	r2, [pc, #240]	; (52bc <Clock_Ip_ClockInitializeObjects+0x208>)
    51ca:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    51cc:	201b      	movs	r0, #27
    51ce:	f7ff fcef 	bl	4bb0 <getSelectorConfig>
    51d2:	4603      	mov	r3, r0
    51d4:	4a3a      	ldr	r2, [pc, #232]	; (52c0 <Clock_Ip_ClockInitializeObjects+0x20c>)
    51d6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    51d8:	201d      	movs	r0, #29
    51da:	f7ff fd7b 	bl	4cd4 <getCoreDividerConfig>
    51de:	4603      	mov	r3, r0
    51e0:	4a38      	ldr	r2, [pc, #224]	; (52c4 <Clock_Ip_ClockInitializeObjects+0x210>)
    51e2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    51e4:	201e      	movs	r0, #30
    51e6:	f7ff fd75 	bl	4cd4 <getCoreDividerConfig>
    51ea:	4603      	mov	r3, r0
    51ec:	4a36      	ldr	r2, [pc, #216]	; (52c8 <Clock_Ip_ClockInitializeObjects+0x214>)
    51ee:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    51f0:	201f      	movs	r0, #31
    51f2:	f7ff fd6f 	bl	4cd4 <getCoreDividerConfig>
    51f6:	4603      	mov	r3, r0
    51f8:	4a34      	ldr	r2, [pc, #208]	; (52cc <Clock_Ip_ClockInitializeObjects+0x218>)
    51fa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    51fc:	2021      	movs	r0, #33	; 0x21
    51fe:	f7ff fe0f 	bl	4e20 <getBusDividerConfig>
    5202:	4603      	mov	r3, r0
    5204:	4a32      	ldr	r2, [pc, #200]	; (52d0 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5206:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5208:	2022      	movs	r0, #34	; 0x22
    520a:	f7ff fe09 	bl	4e20 <getBusDividerConfig>
    520e:	4603      	mov	r3, r0
    5210:	4a30      	ldr	r2, [pc, #192]	; (52d4 <Clock_Ip_ClockInitializeObjects+0x220>)
    5212:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5214:	2023      	movs	r0, #35	; 0x23
    5216:	f7ff fe03 	bl	4e20 <getBusDividerConfig>
    521a:	4603      	mov	r3, r0
    521c:	4a2e      	ldr	r2, [pc, #184]	; (52d8 <Clock_Ip_ClockInitializeObjects+0x224>)
    521e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5220:	2025      	movs	r0, #37	; 0x25
    5222:	f7ff fea3 	bl	4f6c <getSlowDividerConfig>
    5226:	4603      	mov	r3, r0
    5228:	4a2c      	ldr	r2, [pc, #176]	; (52dc <Clock_Ip_ClockInitializeObjects+0x228>)
    522a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    522c:	2026      	movs	r0, #38	; 0x26
    522e:	f7ff fe9d 	bl	4f6c <getSlowDividerConfig>
    5232:	4603      	mov	r3, r0
    5234:	4a2a      	ldr	r2, [pc, #168]	; (52e0 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5236:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5238:	2027      	movs	r0, #39	; 0x27
    523a:	f7ff fe97 	bl	4f6c <getSlowDividerConfig>
    523e:	4603      	mov	r3, r0
    5240:	4a28      	ldr	r2, [pc, #160]	; (52e4 <Clock_Ip_ClockInitializeObjects+0x230>)
    5242:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5244:	bf00      	nop
    5246:	b003      	add	sp, #12
    5248:	f85d fb04 	ldr.w	pc, [sp], #4
    524c:	1fff8d04 	.word	0x1fff8d04
    5250:	00014f54 	.word	0x00014f54
    5254:	000155a0 	.word	0x000155a0
    5258:	1fff8bd0 	.word	0x1fff8bd0
    525c:	00014f14 	.word	0x00014f14
    5260:	000154e8 	.word	0x000154e8
    5264:	1fff8bd4 	.word	0x1fff8bd4
    5268:	00014f24 	.word	0x00014f24
    526c:	00015554 	.word	0x00015554
    5270:	1fff8bd8 	.word	0x1fff8bd8
    5274:	00014f64 	.word	0x00014f64
    5278:	000155cc 	.word	0x000155cc
    527c:	1fff8bdc 	.word	0x1fff8bdc
    5280:	1fff8c18 	.word	0x1fff8c18
    5284:	00014ef4 	.word	0x00014ef4
    5288:	000154a4 	.word	0x000154a4
    528c:	1fff8be0 	.word	0x1fff8be0
    5290:	1fff8c1c 	.word	0x1fff8c1c
    5294:	1fff8be4 	.word	0x1fff8be4
    5298:	1fff8c20 	.word	0x1fff8c20
    529c:	1fff8be8 	.word	0x1fff8be8
    52a0:	1fff8c24 	.word	0x1fff8c24
    52a4:	1fff8b19 	.word	0x1fff8b19
    52a8:	1fff8b10 	.word	0x1fff8b10
    52ac:	1fff8bec 	.word	0x1fff8bec
    52b0:	1fff8bf0 	.word	0x1fff8bf0
    52b4:	1fff8bf4 	.word	0x1fff8bf4
    52b8:	1fff8bf8 	.word	0x1fff8bf8
    52bc:	1fff8bfc 	.word	0x1fff8bfc
    52c0:	1fff8c28 	.word	0x1fff8c28
    52c4:	1fff8c00 	.word	0x1fff8c00
    52c8:	1fff8c04 	.word	0x1fff8c04
    52cc:	1fff8c2c 	.word	0x1fff8c2c
    52d0:	1fff8c08 	.word	0x1fff8c08
    52d4:	1fff8c0c 	.word	0x1fff8c0c
    52d8:	1fff8c30 	.word	0x1fff8c30
    52dc:	1fff8c10 	.word	0x1fff8c10
    52e0:	1fff8c14 	.word	0x1fff8c14
    52e4:	1fff8c34 	.word	0x1fff8c34

000052e8 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    52e8:	b500      	push	{lr}
    52ea:	b083      	sub	sp, #12
    52ec:	9001      	str	r0, [sp, #4]
    52ee:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    52f0:	9b01      	ldr	r3, [sp, #4]
    52f2:	2b03      	cmp	r3, #3
    52f4:	f000 8090 	beq.w	5418 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    52f8:	9b01      	ldr	r3, [sp, #4]
    52fa:	2b03      	cmp	r3, #3
    52fc:	f200 80d3 	bhi.w	54a6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5300:	9b01      	ldr	r3, [sp, #4]
    5302:	2b00      	cmp	r3, #0
    5304:	d040      	beq.n	5388 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5306:	9b01      	ldr	r3, [sp, #4]
    5308:	3b01      	subs	r3, #1
    530a:	2b01      	cmp	r3, #1
    530c:	f200 80cb 	bhi.w	54a6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5310:	9b00      	ldr	r3, [sp, #0]
    5312:	2b00      	cmp	r3, #0
    5314:	f040 80c9 	bne.w	54aa <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5318:	4b68      	ldr	r3, [pc, #416]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    531a:	2200      	movs	r2, #0
    531c:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    531e:	4b68      	ldr	r3, [pc, #416]	; (54c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5320:	681b      	ldr	r3, [r3, #0]
    5322:	685b      	ldr	r3, [r3, #4]
    5324:	4a67      	ldr	r2, [pc, #412]	; (54c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5326:	6812      	ldr	r2, [r2, #0]
    5328:	4610      	mov	r0, r2
    532a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    532c:	4b66      	ldr	r3, [pc, #408]	; (54c8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    532e:	681b      	ldr	r3, [r3, #0]
    5330:	681b      	ldr	r3, [r3, #0]
    5332:	4a66      	ldr	r2, [pc, #408]	; (54cc <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5334:	6812      	ldr	r2, [r2, #0]
    5336:	4610      	mov	r0, r2
    5338:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    533a:	4b65      	ldr	r3, [pc, #404]	; (54d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    533c:	681b      	ldr	r3, [r3, #0]
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	4a64      	ldr	r2, [pc, #400]	; (54d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5342:	6812      	ldr	r2, [r2, #0]
    5344:	4610      	mov	r0, r2
    5346:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5348:	4b63      	ldr	r3, [pc, #396]	; (54d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    534a:	681b      	ldr	r3, [r3, #0]
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	4a63      	ldr	r2, [pc, #396]	; (54dc <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5350:	6812      	ldr	r2, [r2, #0]
    5352:	4610      	mov	r0, r2
    5354:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5356:	4b62      	ldr	r3, [pc, #392]	; (54e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	691b      	ldr	r3, [r3, #16]
    535c:	4a61      	ldr	r2, [pc, #388]	; (54e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    535e:	6812      	ldr	r2, [r2, #0]
    5360:	6812      	ldr	r2, [r2, #0]
    5362:	4610      	mov	r0, r2
    5364:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5366:	4b60      	ldr	r3, [pc, #384]	; (54e8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5368:	681b      	ldr	r3, [r3, #0]
    536a:	68db      	ldr	r3, [r3, #12]
    536c:	4a5f      	ldr	r2, [pc, #380]	; (54ec <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    536e:	6812      	ldr	r2, [r2, #0]
    5370:	6812      	ldr	r2, [r2, #0]
    5372:	4610      	mov	r0, r2
    5374:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5376:	4b5e      	ldr	r3, [pc, #376]	; (54f0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	689b      	ldr	r3, [r3, #8]
    537c:	4a5d      	ldr	r2, [pc, #372]	; (54f4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    537e:	6812      	ldr	r2, [r2, #0]
    5380:	6812      	ldr	r2, [r2, #0]
    5382:	4610      	mov	r0, r2
    5384:	4798      	blx	r3
            }
        }
        break;
    5386:	e090      	b.n	54aa <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5388:	9b00      	ldr	r3, [sp, #0]
    538a:	2b02      	cmp	r3, #2
    538c:	f040 808f 	bne.w	54ae <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5390:	4b4a      	ldr	r3, [pc, #296]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5392:	2201      	movs	r2, #1
    5394:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5396:	4b56      	ldr	r3, [pc, #344]	; (54f0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	685b      	ldr	r3, [r3, #4]
    539c:	4a55      	ldr	r2, [pc, #340]	; (54f4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    539e:	6812      	ldr	r2, [r2, #0]
    53a0:	4610      	mov	r0, r2
    53a2:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    53a4:	4b50      	ldr	r3, [pc, #320]	; (54e8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    53a6:	681b      	ldr	r3, [r3, #0]
    53a8:	691b      	ldr	r3, [r3, #16]
    53aa:	4a50      	ldr	r2, [pc, #320]	; (54ec <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    53ac:	6812      	ldr	r2, [r2, #0]
    53ae:	4610      	mov	r0, r2
    53b0:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    53b2:	4b4d      	ldr	r3, [pc, #308]	; (54e8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	689b      	ldr	r3, [r3, #8]
    53b8:	4a4c      	ldr	r2, [pc, #304]	; (54ec <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    53ba:	6812      	ldr	r2, [r2, #0]
    53bc:	4610      	mov	r0, r2
    53be:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    53c0:	4b47      	ldr	r3, [pc, #284]	; (54e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	68db      	ldr	r3, [r3, #12]
    53c6:	4a47      	ldr	r2, [pc, #284]	; (54e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    53c8:	6812      	ldr	r2, [r2, #0]
    53ca:	4610      	mov	r0, r2
    53cc:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    53ce:	4b44      	ldr	r3, [pc, #272]	; (54e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	689b      	ldr	r3, [r3, #8]
    53d4:	4a43      	ldr	r2, [pc, #268]	; (54e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    53d6:	6812      	ldr	r2, [r2, #0]
    53d8:	6812      	ldr	r2, [r2, #0]
    53da:	4610      	mov	r0, r2
    53dc:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    53de:	4b38      	ldr	r3, [pc, #224]	; (54c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	685b      	ldr	r3, [r3, #4]
    53e4:	4a44      	ldr	r2, [pc, #272]	; (54f8 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    53e6:	6812      	ldr	r2, [r2, #0]
    53e8:	4610      	mov	r0, r2
    53ea:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    53ec:	4b36      	ldr	r3, [pc, #216]	; (54c8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	4a42      	ldr	r2, [pc, #264]	; (54fc <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    53f4:	6812      	ldr	r2, [r2, #0]
    53f6:	4610      	mov	r0, r2
    53f8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    53fa:	4b35      	ldr	r3, [pc, #212]	; (54d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	681b      	ldr	r3, [r3, #0]
    5400:	4a3f      	ldr	r2, [pc, #252]	; (5500 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5402:	6812      	ldr	r2, [r2, #0]
    5404:	4610      	mov	r0, r2
    5406:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5408:	4b33      	ldr	r3, [pc, #204]	; (54d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    540a:	681b      	ldr	r3, [r3, #0]
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	4a3d      	ldr	r2, [pc, #244]	; (5504 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5410:	6812      	ldr	r2, [r2, #0]
    5412:	4610      	mov	r0, r2
    5414:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5416:	e04a      	b.n	54ae <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5418:	9b00      	ldr	r3, [sp, #0]
    541a:	2b02      	cmp	r3, #2
    541c:	d149      	bne.n	54b2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    541e:	4b27      	ldr	r3, [pc, #156]	; (54bc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5420:	2201      	movs	r2, #1
    5422:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5424:	4b32      	ldr	r3, [pc, #200]	; (54f0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5426:	681b      	ldr	r3, [r3, #0]
    5428:	685b      	ldr	r3, [r3, #4]
    542a:	4a32      	ldr	r2, [pc, #200]	; (54f4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    542c:	6812      	ldr	r2, [r2, #0]
    542e:	4610      	mov	r0, r2
    5430:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5432:	4b2d      	ldr	r3, [pc, #180]	; (54e8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5434:	681b      	ldr	r3, [r3, #0]
    5436:	691b      	ldr	r3, [r3, #16]
    5438:	4a2c      	ldr	r2, [pc, #176]	; (54ec <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    543a:	6812      	ldr	r2, [r2, #0]
    543c:	4610      	mov	r0, r2
    543e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5440:	4b29      	ldr	r3, [pc, #164]	; (54e8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5442:	681b      	ldr	r3, [r3, #0]
    5444:	689b      	ldr	r3, [r3, #8]
    5446:	4a29      	ldr	r2, [pc, #164]	; (54ec <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5448:	6812      	ldr	r2, [r2, #0]
    544a:	4610      	mov	r0, r2
    544c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    544e:	4b24      	ldr	r3, [pc, #144]	; (54e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	68db      	ldr	r3, [r3, #12]
    5454:	4a23      	ldr	r2, [pc, #140]	; (54e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5456:	6812      	ldr	r2, [r2, #0]
    5458:	4610      	mov	r0, r2
    545a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    545c:	4b20      	ldr	r3, [pc, #128]	; (54e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	689b      	ldr	r3, [r3, #8]
    5462:	4a20      	ldr	r2, [pc, #128]	; (54e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5464:	6812      	ldr	r2, [r2, #0]
    5466:	6812      	ldr	r2, [r2, #0]
    5468:	4610      	mov	r0, r2
    546a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    546c:	4b26      	ldr	r3, [pc, #152]	; (5508 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	685b      	ldr	r3, [r3, #4]
    5472:	4a26      	ldr	r2, [pc, #152]	; (550c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5474:	6812      	ldr	r2, [r2, #0]
    5476:	4610      	mov	r0, r2
    5478:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    547a:	4b25      	ldr	r3, [pc, #148]	; (5510 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	4a24      	ldr	r2, [pc, #144]	; (5514 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5482:	6812      	ldr	r2, [r2, #0]
    5484:	4610      	mov	r0, r2
    5486:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5488:	4b23      	ldr	r3, [pc, #140]	; (5518 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	681b      	ldr	r3, [r3, #0]
    548e:	4a23      	ldr	r2, [pc, #140]	; (551c <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5490:	6812      	ldr	r2, [r2, #0]
    5492:	4610      	mov	r0, r2
    5494:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5496:	4b22      	ldr	r3, [pc, #136]	; (5520 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	4a21      	ldr	r2, [pc, #132]	; (5524 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    549e:	6812      	ldr	r2, [r2, #0]
    54a0:	4610      	mov	r0, r2
    54a2:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    54a4:	e005      	b.n	54b2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    54a6:	bf00      	nop
    54a8:	e004      	b.n	54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    54aa:	bf00      	nop
    54ac:	e002      	b.n	54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    54ae:	bf00      	nop
    54b0:	e000      	b.n	54b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    54b2:	bf00      	nop
    }

}
    54b4:	bf00      	nop
    54b6:	b003      	add	sp, #12
    54b8:	f85d fb04 	ldr.w	pc, [sp], #4
    54bc:	1fff8b19 	.word	0x1fff8b19
    54c0:	1fff8bdc 	.word	0x1fff8bdc
    54c4:	1fff8bfc 	.word	0x1fff8bfc
    54c8:	1fff8be0 	.word	0x1fff8be0
    54cc:	1fff8c04 	.word	0x1fff8c04
    54d0:	1fff8be4 	.word	0x1fff8be4
    54d4:	1fff8c0c 	.word	0x1fff8c0c
    54d8:	1fff8be8 	.word	0x1fff8be8
    54dc:	1fff8c14 	.word	0x1fff8c14
    54e0:	1fff8bd0 	.word	0x1fff8bd0
    54e4:	1fff8bf4 	.word	0x1fff8bf4
    54e8:	1fff8bd4 	.word	0x1fff8bd4
    54ec:	1fff8bf0 	.word	0x1fff8bf0
    54f0:	1fff8bd8 	.word	0x1fff8bd8
    54f4:	1fff8bec 	.word	0x1fff8bec
    54f8:	1fff8bf8 	.word	0x1fff8bf8
    54fc:	1fff8c00 	.word	0x1fff8c00
    5500:	1fff8c08 	.word	0x1fff8c08
    5504:	1fff8c10 	.word	0x1fff8c10
    5508:	1fff8c18 	.word	0x1fff8c18
    550c:	1fff8c28 	.word	0x1fff8c28
    5510:	1fff8c1c 	.word	0x1fff8c1c
    5514:	1fff8c2c 	.word	0x1fff8c2c
    5518:	1fff8c20 	.word	0x1fff8c20
    551c:	1fff8c30 	.word	0x1fff8c30
    5520:	1fff8c24 	.word	0x1fff8c24
    5524:	1fff8c34 	.word	0x1fff8c34

00005528 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5528:	b500      	push	{lr}
    552a:	b083      	sub	sp, #12
    552c:	9001      	str	r0, [sp, #4]
    552e:	9100      	str	r1, [sp, #0]
    switch(Command)
    5530:	9b00      	ldr	r3, [sp, #0]
    5532:	2b04      	cmp	r3, #4
    5534:	d010      	beq.n	5558 <Clock_Ip_Command+0x30>
    5536:	9b00      	ldr	r3, [sp, #0]
    5538:	2b04      	cmp	r3, #4
    553a:	d811      	bhi.n	5560 <Clock_Ip_Command+0x38>
    553c:	9b00      	ldr	r3, [sp, #0]
    553e:	2b01      	cmp	r3, #1
    5540:	d006      	beq.n	5550 <Clock_Ip_Command+0x28>
    5542:	9b00      	ldr	r3, [sp, #0]
    5544:	2b02      	cmp	r3, #2
    5546:	d10b      	bne.n	5560 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5548:	9801      	ldr	r0, [sp, #4]
    554a:	f7ff fdb3 	bl	50b4 <Clock_Ip_ClockInitializeObjects>
            break;
    554e:	e008      	b.n	5562 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5550:	9801      	ldr	r0, [sp, #4]
    5552:	f7ff f9db 	bl	490c <Clock_Ip_SpecificPlatformInitClock>
            break;
    5556:	e004      	b.n	5562 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5558:	9801      	ldr	r0, [sp, #4]
    555a:	f7ff f8ed 	bl	4738 <DisableSafeClock>
            break;
    555e:	e000      	b.n	5562 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5560:	bf00      	nop
    }
}
    5562:	bf00      	nop
    5564:	b003      	add	sp, #12
    5566:	f85d fb04 	ldr.w	pc, [sp], #4
    556a:	bf00      	nop

0000556c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    556c:	b500      	push	{lr}
    556e:	b085      	sub	sp, #20
    5570:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5572:	4a20      	ldr	r2, [pc, #128]	; (55f4 <Mcu_Init+0x88>)
    5574:	9b01      	ldr	r3, [sp, #4]
    5576:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5578:	2300      	movs	r3, #0
    557a:	9303      	str	r3, [sp, #12]
    557c:	e010      	b.n	55a0 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    557e:	4b1d      	ldr	r3, [pc, #116]	; (55f4 <Mcu_Init+0x88>)
    5580:	681b      	ldr	r3, [r3, #0]
    5582:	6919      	ldr	r1, [r3, #16]
    5584:	9a03      	ldr	r2, [sp, #12]
    5586:	4613      	mov	r3, r2
    5588:	005b      	lsls	r3, r3, #1
    558a:	4413      	add	r3, r2
    558c:	009b      	lsls	r3, r3, #2
    558e:	440b      	add	r3, r1
    5590:	681b      	ldr	r3, [r3, #0]
    5592:	9a03      	ldr	r2, [sp, #12]
    5594:	b2d1      	uxtb	r1, r2
    5596:	4a18      	ldr	r2, [pc, #96]	; (55f8 <Mcu_Init+0x8c>)
    5598:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    559a:	9b03      	ldr	r3, [sp, #12]
    559c:	3301      	adds	r3, #1
    559e:	9303      	str	r3, [sp, #12]
    55a0:	4b14      	ldr	r3, [pc, #80]	; (55f4 <Mcu_Init+0x88>)
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	689b      	ldr	r3, [r3, #8]
    55a6:	9a03      	ldr	r2, [sp, #12]
    55a8:	429a      	cmp	r2, r3
    55aa:	d3e8      	bcc.n	557e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    55ac:	2300      	movs	r3, #0
    55ae:	9303      	str	r3, [sp, #12]
    55b0:	e010      	b.n	55d4 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    55b2:	4b10      	ldr	r3, [pc, #64]	; (55f4 <Mcu_Init+0x88>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	6959      	ldr	r1, [r3, #20]
    55b8:	9a03      	ldr	r2, [sp, #12]
    55ba:	4613      	mov	r3, r2
    55bc:	01db      	lsls	r3, r3, #7
    55be:	1a9b      	subs	r3, r3, r2
    55c0:	00db      	lsls	r3, r3, #3
    55c2:	440b      	add	r3, r1
    55c4:	681b      	ldr	r3, [r3, #0]
    55c6:	9a03      	ldr	r2, [sp, #12]
    55c8:	b2d1      	uxtb	r1, r2
    55ca:	4a0c      	ldr	r2, [pc, #48]	; (55fc <Mcu_Init+0x90>)
    55cc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    55ce:	9b03      	ldr	r3, [sp, #12]
    55d0:	3301      	adds	r3, #1
    55d2:	9303      	str	r3, [sp, #12]
    55d4:	4b07      	ldr	r3, [pc, #28]	; (55f4 <Mcu_Init+0x88>)
    55d6:	681b      	ldr	r3, [r3, #0]
    55d8:	68db      	ldr	r3, [r3, #12]
    55da:	9a03      	ldr	r2, [sp, #12]
    55dc:	429a      	cmp	r2, r3
    55de:	d3e8      	bcc.n	55b2 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    55e0:	4b04      	ldr	r3, [pc, #16]	; (55f4 <Mcu_Init+0x88>)
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	699b      	ldr	r3, [r3, #24]
    55e6:	4618      	mov	r0, r3
    55e8:	f000 f88a 	bl	5700 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    55ec:	bf00      	nop
    55ee:	b005      	add	sp, #20
    55f0:	f85d fb04 	ldr.w	pc, [sp], #4
    55f4:	1fff8d10 	.word	0x1fff8d10
    55f8:	1fff8d0c 	.word	0x1fff8d0c
    55fc:	1fff8d08 	.word	0x1fff8d08

00005600 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5600:	b084      	sub	sp, #16
    5602:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5604:	2301      	movs	r3, #1
    5606:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    560a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    560e:	4618      	mov	r0, r3
    5610:	b004      	add	sp, #16
    5612:	4770      	bx	lr

00005614 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5614:	b500      	push	{lr}
    5616:	b085      	sub	sp, #20
    5618:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    561a:	4a0e      	ldr	r2, [pc, #56]	; (5654 <Mcu_InitClock+0x40>)
    561c:	9b01      	ldr	r3, [sp, #4]
    561e:	4413      	add	r3, r2
    5620:	781b      	ldrb	r3, [r3, #0]
    5622:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5626:	4b0c      	ldr	r3, [pc, #48]	; (5658 <Mcu_InitClock+0x44>)
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	6959      	ldr	r1, [r3, #20]
    562c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5630:	4613      	mov	r3, r2
    5632:	01db      	lsls	r3, r3, #7
    5634:	1a9b      	subs	r3, r3, r2
    5636:	00db      	lsls	r3, r3, #3
    5638:	440b      	add	r3, r1
    563a:	4618      	mov	r0, r3
    563c:	f000 f86a 	bl	5714 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5640:	2300      	movs	r3, #0
    5642:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5646:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    564a:	4618      	mov	r0, r3
    564c:	b005      	add	sp, #20
    564e:	f85d fb04 	ldr.w	pc, [sp], #4
    5652:	bf00      	nop
    5654:	1fff8d08 	.word	0x1fff8d08
    5658:	1fff8d10 	.word	0x1fff8d10

0000565c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    565c:	b500      	push	{lr}
    565e:	b085      	sub	sp, #20
    5660:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5662:	4a0d      	ldr	r2, [pc, #52]	; (5698 <Mcu_SetMode+0x3c>)
    5664:	9b01      	ldr	r3, [sp, #4]
    5666:	4413      	add	r3, r2
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    566e:	f00c fe6b 	bl	12348 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5672:	4b0a      	ldr	r3, [pc, #40]	; (569c <Mcu_SetMode+0x40>)
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	6919      	ldr	r1, [r3, #16]
    5678:	f89d 200f 	ldrb.w	r2, [sp, #15]
    567c:	4613      	mov	r3, r2
    567e:	005b      	lsls	r3, r3, #1
    5680:	4413      	add	r3, r2
    5682:	009b      	lsls	r3, r3, #2
    5684:	440b      	add	r3, r1
    5686:	4618      	mov	r0, r3
    5688:	f000 f84e 	bl	5728 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    568c:	f00c fe88 	bl	123a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5690:	bf00      	nop
    5692:	b005      	add	sp, #20
    5694:	f85d fb04 	ldr.w	pc, [sp], #4
    5698:	1fff8d0c 	.word	0x1fff8d0c
    569c:	1fff8d10 	.word	0x1fff8d10

000056a0 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    56a0:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    56a2:	2302      	movs	r3, #2
    56a4:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    56a6:	9b01      	ldr	r3, [sp, #4]
}
    56a8:	4618      	mov	r0, r3
    56aa:	b002      	add	sp, #8
    56ac:	4770      	bx	lr

000056ae <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    56ae:	b500      	push	{lr}
    56b0:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    56b2:	f000 f843 	bl	573c <Mcu_Ipw_GetResetReason>
    56b6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    56b8:	9b01      	ldr	r3, [sp, #4]
}
    56ba:	4618      	mov	r0, r3
    56bc:	b003      	add	sp, #12
    56be:	f85d fb04 	ldr.w	pc, [sp], #4

000056c2 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    56c2:	b500      	push	{lr}
    56c4:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    56c6:	f000 f83f 	bl	5748 <Mcu_Ipw_GetResetRawValue>
    56ca:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    56cc:	9b01      	ldr	r3, [sp, #4]
}
    56ce:	4618      	mov	r0, r3
    56d0:	b003      	add	sp, #12
    56d2:	f85d fb04 	ldr.w	pc, [sp], #4

000056d6 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    56d6:	b500      	push	{lr}
    56d8:	b083      	sub	sp, #12
    56da:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    56dc:	9801      	ldr	r0, [sp, #4]
    56de:	f000 f839 	bl	5754 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    56e2:	bf00      	nop
    56e4:	b003      	add	sp, #12
    56e6:	f85d fb04 	ldr.w	pc, [sp], #4

000056ea <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    56ea:	b082      	sub	sp, #8
    56ec:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    56ee:	4b03      	ldr	r3, [pc, #12]	; (56fc <Mcu_ClkSrcFailureNotification+0x12>)
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    56f4:	bf00      	nop
    56f6:	b002      	add	sp, #8
    56f8:	4770      	bx	lr
    56fa:	bf00      	nop
    56fc:	1fff8d10 	.word	0x1fff8d10

00005700 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5700:	b500      	push	{lr}
    5702:	b083      	sub	sp, #12
    5704:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5706:	9801      	ldr	r0, [sp, #4]
    5708:	f000 f882 	bl	5810 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    570c:	bf00      	nop
    570e:	b003      	add	sp, #12
    5710:	f85d fb04 	ldr.w	pc, [sp], #4

00005714 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5714:	b500      	push	{lr}
    5716:	b083      	sub	sp, #12
    5718:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    571a:	9801      	ldr	r0, [sp, #4]
    571c:	f7fc fc6a 	bl	1ff4 <Clock_Ip_InitClock>
}
    5720:	bf00      	nop
    5722:	b003      	add	sp, #12
    5724:	f85d fb04 	ldr.w	pc, [sp], #4

00005728 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5728:	b500      	push	{lr}
    572a:	b083      	sub	sp, #12
    572c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    572e:	9801      	ldr	r0, [sp, #4]
    5730:	f000 f820 	bl	5774 <Power_Ip_SetMode>
}
    5734:	bf00      	nop
    5736:	b003      	add	sp, #12
    5738:	f85d fb04 	ldr.w	pc, [sp], #4

0000573c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    573c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    573e:	f000 f84f 	bl	57e0 <Power_Ip_GetResetReason>
    5742:	4603      	mov	r3, r0
}
    5744:	4618      	mov	r0, r3
    5746:	bd08      	pop	{r3, pc}

00005748 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5748:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    574a:	f000 f857 	bl	57fc <Power_Ip_GetResetRawValue>
    574e:	4603      	mov	r3, r0
}
    5750:	4618      	mov	r0, r3
    5752:	bd08      	pop	{r3, pc}

00005754 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5754:	b500      	push	{lr}
    5756:	b083      	sub	sp, #12
    5758:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    575a:	9b01      	ldr	r3, [sp, #4]
    575c:	2b00      	cmp	r3, #0
    575e:	d102      	bne.n	5766 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5760:	f000 f86c 	bl	583c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5764:	e001      	b.n	576a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5766:	f000 f86e 	bl	5846 <Power_Ip_EnableSleepOnExit>
}
    576a:	bf00      	nop
    576c:	b003      	add	sp, #12
    576e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005774 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5774:	b500      	push	{lr}
    5776:	b085      	sub	sp, #20
    5778:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    577a:	9b01      	ldr	r3, [sp, #4]
    577c:	685b      	ldr	r3, [r3, #4]
    577e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5780:	9802      	ldr	r0, [sp, #8]
    5782:	f000 f9f5 	bl	5b70 <Power_Ip_SMC_ModeCheckEntry>
    5786:	4603      	mov	r3, r0
    5788:	2b00      	cmp	r3, #0
    578a:	d002      	beq.n	5792 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    578c:	2301      	movs	r3, #1
    578e:	9303      	str	r3, [sp, #12]
    5790:	e003      	b.n	579a <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5792:	9801      	ldr	r0, [sp, #4]
    5794:	f000 fa1e 	bl	5bd4 <Power_Ip_SMC_ModeConfig>
    5798:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    579a:	9b03      	ldr	r3, [sp, #12]
    579c:	2b01      	cmp	r3, #1
    579e:	d103      	bne.n	57a8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    57a0:	21ff      	movs	r1, #255	; 0xff
    57a2:	2003      	movs	r0, #3
    57a4:	f000 f8f4 	bl	5990 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    57a8:	bf00      	nop
    57aa:	b005      	add	sp, #20
    57ac:	f85d fb04 	ldr.w	pc, [sp], #4

000057b0 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    57b0:	b084      	sub	sp, #16
    57b2:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    57b4:	230c      	movs	r3, #12
    57b6:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    57b8:	4a08      	ldr	r2, [pc, #32]	; (57dc <Power_Ip_ConvertIntergeToResetType+0x2c>)
    57ba:	9b01      	ldr	r3, [sp, #4]
    57bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57c0:	2b0e      	cmp	r3, #14
    57c2:	d805      	bhi.n	57d0 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    57c4:	4a05      	ldr	r2, [pc, #20]	; (57dc <Power_Ip_ConvertIntergeToResetType+0x2c>)
    57c6:	9b01      	ldr	r3, [sp, #4]
    57c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57cc:	9303      	str	r3, [sp, #12]
    57ce:	e001      	b.n	57d4 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    57d0:	230c      	movs	r3, #12
    57d2:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    57d4:	9b03      	ldr	r3, [sp, #12]
}
    57d6:	4618      	mov	r0, r3
    57d8:	b004      	add	sp, #16
    57da:	4770      	bx	lr
    57dc:	00015640 	.word	0x00015640

000057e0 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    57e0:	b500      	push	{lr}
    57e2:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    57e4:	f000 f940 	bl	5a68 <Power_Ip_RCM_GetResetReason>
    57e8:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    57ea:	9801      	ldr	r0, [sp, #4]
    57ec:	f7ff ffe0 	bl	57b0 <Power_Ip_ConvertIntergeToResetType>
    57f0:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    57f2:	9b00      	ldr	r3, [sp, #0]
}
    57f4:	4618      	mov	r0, r3
    57f6:	b003      	add	sp, #12
    57f8:	f85d fb04 	ldr.w	pc, [sp], #4

000057fc <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    57fc:	b500      	push	{lr}
    57fe:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5800:	f000 f98a 	bl	5b18 <Power_Ip_RCM_GetResetRawValue>
    5804:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5806:	9b01      	ldr	r3, [sp, #4]
}
    5808:	4618      	mov	r0, r3
    580a:	b003      	add	sp, #12
    580c:	f85d fb04 	ldr.w	pc, [sp], #4

00005810 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5810:	b500      	push	{lr}
    5812:	b083      	sub	sp, #12
    5814:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5816:	9b01      	ldr	r3, [sp, #4]
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	4618      	mov	r0, r3
    581c:	f000 f90e 	bl	5a3c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5820:	9b01      	ldr	r3, [sp, #4]
    5822:	685b      	ldr	r3, [r3, #4]
    5824:	4618      	mov	r0, r3
    5826:	f000 f86d 	bl	5904 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    582a:	9b01      	ldr	r3, [sp, #4]
    582c:	689b      	ldr	r3, [r3, #8]
    582e:	4618      	mov	r0, r3
    5830:	f000 f990 	bl	5b54 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5834:	bf00      	nop
    5836:	b003      	add	sp, #12
    5838:	f85d fb04 	ldr.w	pc, [sp], #4

0000583c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    583c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    583e:	f000 f811 	bl	5864 <Power_Ip_CM4_DisableSleepOnExit>
}
    5842:	bf00      	nop
    5844:	bd08      	pop	{r3, pc}

00005846 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5846:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5848:	f000 f820 	bl	588c <Power_Ip_CM4_EnableSleepOnExit>
}
    584c:	bf00      	nop
    584e:	bd08      	pop	{r3, pc}

00005850 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5850:	b082      	sub	sp, #8
    5852:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5854:	4a02      	ldr	r2, [pc, #8]	; (5860 <Power_Ip_InstallNotificationsCallback+0x10>)
    5856:	9b01      	ldr	r3, [sp, #4]
    5858:	6013      	str	r3, [r2, #0]
}
    585a:	bf00      	nop
    585c:	b002      	add	sp, #8
    585e:	4770      	bx	lr
    5860:	1fff8b1c 	.word	0x1fff8b1c

00005864 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5864:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5866:	2300      	movs	r3, #0
    5868:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    586a:	4b07      	ldr	r3, [pc, #28]	; (5888 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	685b      	ldr	r3, [r3, #4]
    5870:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	f023 0302 	bic.w	r3, r3, #2
    5878:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    587a:	4b03      	ldr	r3, [pc, #12]	; (5888 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	9a01      	ldr	r2, [sp, #4]
    5880:	605a      	str	r2, [r3, #4]
}
    5882:	bf00      	nop
    5884:	b002      	add	sp, #8
    5886:	4770      	bx	lr
    5888:	1fff8b20 	.word	0x1fff8b20

0000588c <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    588c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    588e:	2300      	movs	r3, #0
    5890:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5892:	4b07      	ldr	r3, [pc, #28]	; (58b0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	685b      	ldr	r3, [r3, #4]
    5898:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    589a:	9b01      	ldr	r3, [sp, #4]
    589c:	f043 0302 	orr.w	r3, r3, #2
    58a0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    58a2:	4b03      	ldr	r3, [pc, #12]	; (58b0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	9a01      	ldr	r2, [sp, #4]
    58a8:	605a      	str	r2, [r3, #4]
}
    58aa:	bf00      	nop
    58ac:	b002      	add	sp, #8
    58ae:	4770      	bx	lr
    58b0:	1fff8b20 	.word	0x1fff8b20

000058b4 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    58b4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    58b6:	2300      	movs	r3, #0
    58b8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    58ba:	4b07      	ldr	r3, [pc, #28]	; (58d8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	685b      	ldr	r3, [r3, #4]
    58c0:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    58c2:	9b01      	ldr	r3, [sp, #4]
    58c4:	f043 0304 	orr.w	r3, r3, #4
    58c8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    58ca:	4b03      	ldr	r3, [pc, #12]	; (58d8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    58cc:	681b      	ldr	r3, [r3, #0]
    58ce:	9a01      	ldr	r2, [sp, #4]
    58d0:	605a      	str	r2, [r3, #4]
}
    58d2:	bf00      	nop
    58d4:	b002      	add	sp, #8
    58d6:	4770      	bx	lr
    58d8:	1fff8b20 	.word	0x1fff8b20

000058dc <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    58dc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    58de:	2300      	movs	r3, #0
    58e0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    58e2:	4b07      	ldr	r3, [pc, #28]	; (5900 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    58e4:	681b      	ldr	r3, [r3, #0]
    58e6:	685b      	ldr	r3, [r3, #4]
    58e8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    58ea:	9b01      	ldr	r3, [sp, #4]
    58ec:	f023 0304 	bic.w	r3, r3, #4
    58f0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    58f2:	4b03      	ldr	r3, [pc, #12]	; (5900 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    58f4:	681b      	ldr	r3, [r3, #0]
    58f6:	9a01      	ldr	r2, [sp, #4]
    58f8:	605a      	str	r2, [r3, #4]
}
    58fa:	bf00      	nop
    58fc:	b002      	add	sp, #8
    58fe:	4770      	bx	lr
    5900:	1fff8b20 	.word	0x1fff8b20

00005904 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5904:	b084      	sub	sp, #16
    5906:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5908:	4b20      	ldr	r3, [pc, #128]	; (598c <Power_Ip_PMC_PowerInit+0x88>)
    590a:	781b      	ldrb	r3, [r3, #0]
    590c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5910:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5914:	f003 030f 	and.w	r3, r3, #15
    5918:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    591c:	9b01      	ldr	r3, [sp, #4]
    591e:	781a      	ldrb	r2, [r3, #0]
    5920:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5924:	4313      	orrs	r3, r2
    5926:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    592a:	4a18      	ldr	r2, [pc, #96]	; (598c <Power_Ip_PMC_PowerInit+0x88>)
    592c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5930:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5932:	4b16      	ldr	r3, [pc, #88]	; (598c <Power_Ip_PMC_PowerInit+0x88>)
    5934:	785b      	ldrb	r3, [r3, #1]
    5936:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    593a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    593e:	f003 031f 	and.w	r3, r3, #31
    5942:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	785a      	ldrb	r2, [r3, #1]
    594a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    594e:	4313      	orrs	r3, r2
    5950:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5954:	4a0d      	ldr	r2, [pc, #52]	; (598c <Power_Ip_PMC_PowerInit+0x88>)
    5956:	f89d 300f 	ldrb.w	r3, [sp, #15]
    595a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    595c:	4b0b      	ldr	r3, [pc, #44]	; (598c <Power_Ip_PMC_PowerInit+0x88>)
    595e:	789b      	ldrb	r3, [r3, #2]
    5960:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5964:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5968:	f003 0338 	and.w	r3, r3, #56	; 0x38
    596c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5970:	9b01      	ldr	r3, [sp, #4]
    5972:	789a      	ldrb	r2, [r3, #2]
    5974:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5978:	4313      	orrs	r3, r2
    597a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    597e:	4a03      	ldr	r2, [pc, #12]	; (598c <Power_Ip_PMC_PowerInit+0x88>)
    5980:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5984:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5986:	bf00      	nop
    5988:	b004      	add	sp, #16
    598a:	4770      	bx	lr
    598c:	4007d000 	.word	0x4007d000

00005990 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5990:	b500      	push	{lr}
    5992:	b083      	sub	sp, #12
    5994:	9001      	str	r0, [sp, #4]
    5996:	460b      	mov	r3, r1
    5998:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    599c:	4b05      	ldr	r3, [pc, #20]	; (59b4 <Power_Ip_ReportPowerErrors+0x24>)
    599e:	681b      	ldr	r3, [r3, #0]
    59a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    59a4:	4611      	mov	r1, r2
    59a6:	9801      	ldr	r0, [sp, #4]
    59a8:	4798      	blx	r3
}
    59aa:	bf00      	nop
    59ac:	b003      	add	sp, #12
    59ae:	f85d fb04 	ldr.w	pc, [sp], #4
    59b2:	bf00      	nop
    59b4:	1fff8b1c 	.word	0x1fff8b1c

000059b8 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    59b8:	b082      	sub	sp, #8
    59ba:	9001      	str	r0, [sp, #4]
    59bc:	460b      	mov	r3, r1
    59be:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    59c2:	bf00      	nop
    59c4:	b002      	add	sp, #8
    59c6:	4770      	bx	lr

000059c8 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    59c8:	b500      	push	{lr}
    59ca:	b085      	sub	sp, #20
    59cc:	9003      	str	r0, [sp, #12]
    59ce:	9102      	str	r1, [sp, #8]
    59d0:	9201      	str	r2, [sp, #4]
    59d2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    59d4:	2000      	movs	r0, #0
    59d6:	f7fc f83d 	bl	1a54 <OsIf_GetCounter>
    59da:	4602      	mov	r2, r0
    59dc:	9b03      	ldr	r3, [sp, #12]
    59de:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    59e0:	9b02      	ldr	r3, [sp, #8]
    59e2:	2200      	movs	r2, #0
    59e4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    59e6:	2100      	movs	r1, #0
    59e8:	9800      	ldr	r0, [sp, #0]
    59ea:	f7fc f87f 	bl	1aec <OsIf_MicrosToTicks>
    59ee:	4602      	mov	r2, r0
    59f0:	9b01      	ldr	r3, [sp, #4]
    59f2:	601a      	str	r2, [r3, #0]
}
    59f4:	bf00      	nop
    59f6:	b005      	add	sp, #20
    59f8:	f85d fb04 	ldr.w	pc, [sp], #4

000059fc <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    59fc:	b500      	push	{lr}
    59fe:	b087      	sub	sp, #28
    5a00:	9003      	str	r0, [sp, #12]
    5a02:	9102      	str	r1, [sp, #8]
    5a04:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5a06:	2300      	movs	r3, #0
    5a08:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5a0c:	2100      	movs	r1, #0
    5a0e:	9803      	ldr	r0, [sp, #12]
    5a10:	f7fc f839 	bl	1a86 <OsIf_GetElapsed>
    5a14:	4602      	mov	r2, r0
    5a16:	9b02      	ldr	r3, [sp, #8]
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	441a      	add	r2, r3
    5a1c:	9b02      	ldr	r3, [sp, #8]
    5a1e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5a20:	9b02      	ldr	r3, [sp, #8]
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	9a01      	ldr	r2, [sp, #4]
    5a26:	429a      	cmp	r2, r3
    5a28:	d802      	bhi.n	5a30 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5a2a:	2301      	movs	r3, #1
    5a2c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5a30:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5a34:	4618      	mov	r0, r3
    5a36:	b007      	add	sp, #28
    5a38:	f85d fb04 	ldr.w	pc, [sp], #4

00005a3c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5a3c:	b082      	sub	sp, #8
    5a3e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5a40:	9b01      	ldr	r3, [sp, #4]
    5a42:	681a      	ldr	r2, [r3, #0]
    5a44:	4907      	ldr	r1, [pc, #28]	; (5a64 <Power_Ip_RCM_ResetInit+0x28>)
    5a46:	f641 7307 	movw	r3, #7943	; 0x1f07
    5a4a:	4013      	ands	r3, r2
    5a4c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5a4e:	9b01      	ldr	r3, [sp, #4]
    5a50:	685a      	ldr	r2, [r3, #4]
    5a52:	4904      	ldr	r1, [pc, #16]	; (5a64 <Power_Ip_RCM_ResetInit+0x28>)
    5a54:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5a58:	4013      	ands	r3, r2
    5a5a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5a5c:	bf00      	nop
    5a5e:	b002      	add	sp, #8
    5a60:	4770      	bx	lr
    5a62:	bf00      	nop
    5a64:	4007f000 	.word	0x4007f000

00005a68 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5a68:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5a6a:	230c      	movs	r3, #12
    5a6c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5a6e:	2300      	movs	r3, #0
    5a70:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5a72:	2300      	movs	r3, #0
    5a74:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5a76:	2300      	movs	r3, #0
    5a78:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5a7a:	4b25      	ldr	r3, [pc, #148]	; (5b10 <Power_Ip_RCM_GetResetReason+0xa8>)
    5a7c:	699a      	ldr	r2, [r3, #24]
    5a7e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5a82:	4013      	ands	r3, r2
    5a84:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5a86:	9b03      	ldr	r3, [sp, #12]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d008      	beq.n	5a9e <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5a8c:	4920      	ldr	r1, [pc, #128]	; (5b10 <Power_Ip_RCM_GetResetReason+0xa8>)
    5a8e:	9a03      	ldr	r2, [sp, #12]
    5a90:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5a94:	4013      	ands	r3, r2
    5a96:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5a98:	4a1e      	ldr	r2, [pc, #120]	; (5b14 <Power_Ip_RCM_GetResetReason+0xac>)
    5a9a:	9b03      	ldr	r3, [sp, #12]
    5a9c:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5a9e:	4b1d      	ldr	r3, [pc, #116]	; (5b14 <Power_Ip_RCM_GetResetReason+0xac>)
    5aa0:	681b      	ldr	r3, [r3, #0]
    5aa2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5aa4:	9a02      	ldr	r2, [sp, #8]
    5aa6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5aaa:	4013      	ands	r3, r2
    5aac:	2b82      	cmp	r3, #130	; 0x82
    5aae:	d102      	bne.n	5ab6 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5ab0:	2305      	movs	r3, #5
    5ab2:	9307      	str	r3, [sp, #28]
    5ab4:	e027      	b.n	5b06 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5ab6:	2300      	movs	r3, #0
    5ab8:	9306      	str	r3, [sp, #24]
    5aba:	e021      	b.n	5b00 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5abc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5ac0:	9b06      	ldr	r3, [sp, #24]
    5ac2:	fa22 f303 	lsr.w	r3, r2, r3
    5ac6:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5ac8:	9a01      	ldr	r2, [sp, #4]
    5aca:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5ace:	4013      	ands	r3, r2
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	d012      	beq.n	5afa <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5ad4:	9a01      	ldr	r2, [sp, #4]
    5ad6:	9b02      	ldr	r3, [sp, #8]
    5ad8:	4013      	ands	r3, r2
    5ada:	2b00      	cmp	r3, #0
    5adc:	d00a      	beq.n	5af4 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5ade:	9b05      	ldr	r3, [sp, #20]
    5ae0:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5ae2:	9b04      	ldr	r3, [sp, #16]
    5ae4:	3301      	adds	r3, #1
    5ae6:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5ae8:	9b04      	ldr	r3, [sp, #16]
    5aea:	2b01      	cmp	r3, #1
    5aec:	d902      	bls.n	5af4 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5aee:	230d      	movs	r3, #13
    5af0:	9307      	str	r3, [sp, #28]
                        break;
    5af2:	e008      	b.n	5b06 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5af4:	9b05      	ldr	r3, [sp, #20]
    5af6:	3301      	adds	r3, #1
    5af8:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5afa:	9b06      	ldr	r3, [sp, #24]
    5afc:	3301      	adds	r3, #1
    5afe:	9306      	str	r3, [sp, #24]
    5b00:	9b06      	ldr	r3, [sp, #24]
    5b02:	2b1f      	cmp	r3, #31
    5b04:	d9da      	bls.n	5abc <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5b06:	9b07      	ldr	r3, [sp, #28]
}
    5b08:	4618      	mov	r0, r3
    5b0a:	b008      	add	sp, #32
    5b0c:	4770      	bx	lr
    5b0e:	bf00      	nop
    5b10:	4007f000 	.word	0x4007f000
    5b14:	1fff8d14 	.word	0x1fff8d14

00005b18 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5b18:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b1a:	4b0c      	ldr	r3, [pc, #48]	; (5b4c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5b1c:	699a      	ldr	r2, [r3, #24]
    5b1e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b22:	4013      	ands	r3, r2
    5b24:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5b26:	9b01      	ldr	r3, [sp, #4]
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d008      	beq.n	5b3e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5b2c:	4907      	ldr	r1, [pc, #28]	; (5b4c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5b2e:	9a01      	ldr	r2, [sp, #4]
    5b30:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b34:	4013      	ands	r3, r2
    5b36:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b38:	4a05      	ldr	r2, [pc, #20]	; (5b50 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5b3a:	9b01      	ldr	r3, [sp, #4]
    5b3c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5b3e:	4b04      	ldr	r3, [pc, #16]	; (5b50 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5b40:	681b      	ldr	r3, [r3, #0]
    5b42:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5b44:	9b00      	ldr	r3, [sp, #0]
}
    5b46:	4618      	mov	r0, r3
    5b48:	b002      	add	sp, #8
    5b4a:	4770      	bx	lr
    5b4c:	4007f000 	.word	0x4007f000
    5b50:	1fff8d14 	.word	0x1fff8d14

00005b54 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5b54:	b082      	sub	sp, #8
    5b56:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5b58:	9b01      	ldr	r3, [sp, #4]
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	4a03      	ldr	r2, [pc, #12]	; (5b6c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5b5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5b62:	6093      	str	r3, [r2, #8]
}
    5b64:	bf00      	nop
    5b66:	b002      	add	sp, #8
    5b68:	4770      	bx	lr
    5b6a:	bf00      	nop
    5b6c:	4007e000 	.word	0x4007e000

00005b70 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5b70:	b084      	sub	sp, #16
    5b72:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5b74:	2301      	movs	r3, #1
    5b76:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5b78:	4b15      	ldr	r3, [pc, #84]	; (5bd0 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5b7a:	695b      	ldr	r3, [r3, #20]
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5b80:	9b01      	ldr	r3, [sp, #4]
    5b82:	2b02      	cmp	r3, #2
    5b84:	d012      	beq.n	5bac <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	2b02      	cmp	r3, #2
    5b8a:	d818      	bhi.n	5bbe <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5b8c:	9b01      	ldr	r3, [sp, #4]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d003      	beq.n	5b9a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5b92:	9b01      	ldr	r3, [sp, #4]
    5b94:	2b01      	cmp	r3, #1
    5b96:	d003      	beq.n	5ba0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5b98:	e011      	b.n	5bbe <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5b9a:	2300      	movs	r3, #0
    5b9c:	9303      	str	r3, [sp, #12]
            break;
    5b9e:	e013      	b.n	5bc8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5ba0:	9b02      	ldr	r3, [sp, #8]
    5ba2:	2b01      	cmp	r3, #1
    5ba4:	d10d      	bne.n	5bc2 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5ba6:	2300      	movs	r3, #0
    5ba8:	9303      	str	r3, [sp, #12]
            break;
    5baa:	e00a      	b.n	5bc2 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5bac:	9b02      	ldr	r3, [sp, #8]
    5bae:	2b01      	cmp	r3, #1
    5bb0:	d002      	beq.n	5bb8 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5bb2:	9b02      	ldr	r3, [sp, #8]
    5bb4:	2b10      	cmp	r3, #16
    5bb6:	d106      	bne.n	5bc6 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5bb8:	2300      	movs	r3, #0
    5bba:	9303      	str	r3, [sp, #12]
            break;
    5bbc:	e003      	b.n	5bc6 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5bbe:	bf00      	nop
    5bc0:	e002      	b.n	5bc8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5bc2:	bf00      	nop
    5bc4:	e000      	b.n	5bc8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5bc6:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5bc8:	9b03      	ldr	r3, [sp, #12]
}
    5bca:	4618      	mov	r0, r3
    5bcc:	b004      	add	sp, #16
    5bce:	4770      	bx	lr
    5bd0:	4007e000 	.word	0x4007e000

00005bd4 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5bd4:	b500      	push	{lr}
    5bd6:	b08b      	sub	sp, #44	; 0x2c
    5bd8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5bda:	2300      	movs	r3, #0
    5bdc:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5bde:	2300      	movs	r3, #0
    5be0:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5be2:	2300      	movs	r3, #0
    5be4:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5be8:	9b01      	ldr	r3, [sp, #4]
    5bea:	685b      	ldr	r3, [r3, #4]
    5bec:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5bee:	9b08      	ldr	r3, [sp, #32]
    5bf0:	2b02      	cmp	r3, #2
    5bf2:	d076      	beq.n	5ce2 <Power_Ip_SMC_ModeConfig+0x10e>
    5bf4:	9b08      	ldr	r3, [sp, #32]
    5bf6:	2b02      	cmp	r3, #2
    5bf8:	f200 80ab 	bhi.w	5d52 <Power_Ip_SMC_ModeConfig+0x17e>
    5bfc:	9b08      	ldr	r3, [sp, #32]
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d003      	beq.n	5c0a <Power_Ip_SMC_ModeConfig+0x36>
    5c02:	9b08      	ldr	r3, [sp, #32]
    5c04:	2b01      	cmp	r3, #1
    5c06:	d034      	beq.n	5c72 <Power_Ip_SMC_ModeConfig+0x9e>
    5c08:	e0a3      	b.n	5d52 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5c0a:	4b58      	ldr	r3, [pc, #352]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5c0c:	68db      	ldr	r3, [r3, #12]
    5c0e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5c10:	9b06      	ldr	r3, [sp, #24]
    5c12:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5c16:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5c18:	4a54      	ldr	r2, [pc, #336]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5c1a:	9b06      	ldr	r3, [sp, #24]
    5c1c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5c1e:	aa02      	add	r2, sp, #8
    5c20:	a903      	add	r1, sp, #12
    5c22:	a804      	add	r0, sp, #16
    5c24:	f24c 3350 	movw	r3, #50000	; 0xc350
    5c28:	f7ff fece 	bl	59c8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5c2c:	9a02      	ldr	r2, [sp, #8]
    5c2e:	a903      	add	r1, sp, #12
    5c30:	ab04      	add	r3, sp, #16
    5c32:	4618      	mov	r0, r3
    5c34:	f7ff fee2 	bl	59fc <Power_Ip_TimeoutExpired>
    5c38:	4603      	mov	r3, r0
    5c3a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5c3e:	4b4b      	ldr	r3, [pc, #300]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5c40:	695b      	ldr	r3, [r3, #20]
    5c42:	f003 0301 	and.w	r3, r3, #1
    5c46:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5c48:	9b05      	ldr	r3, [sp, #20]
    5c4a:	2b01      	cmp	r3, #1
    5c4c:	d006      	beq.n	5c5c <Power_Ip_SMC_ModeConfig+0x88>
    5c4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5c52:	f083 0301 	eor.w	r3, r3, #1
    5c56:	b2db      	uxtb	r3, r3
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d1e7      	bne.n	5c2c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5c5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5c60:	2b00      	cmp	r3, #0
    5c62:	d079      	beq.n	5d58 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5c64:	2301      	movs	r3, #1
    5c66:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5c68:	21ff      	movs	r1, #255	; 0xff
    5c6a:	2000      	movs	r0, #0
    5c6c:	f7ff fe90 	bl	5990 <Power_Ip_ReportPowerErrors>
            }

            break;
    5c70:	e072      	b.n	5d58 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5c72:	4b3e      	ldr	r3, [pc, #248]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5c74:	68db      	ldr	r3, [r3, #12]
    5c76:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5c78:	9b06      	ldr	r3, [sp, #24]
    5c7a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5c7e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5c80:	9b06      	ldr	r3, [sp, #24]
    5c82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5c86:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5c88:	4a38      	ldr	r2, [pc, #224]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5c8a:	9b06      	ldr	r3, [sp, #24]
    5c8c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5c8e:	aa02      	add	r2, sp, #8
    5c90:	a903      	add	r1, sp, #12
    5c92:	a804      	add	r0, sp, #16
    5c94:	f24c 3350 	movw	r3, #50000	; 0xc350
    5c98:	f7ff fe96 	bl	59c8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5c9c:	9a02      	ldr	r2, [sp, #8]
    5c9e:	a903      	add	r1, sp, #12
    5ca0:	ab04      	add	r3, sp, #16
    5ca2:	4618      	mov	r0, r3
    5ca4:	f7ff feaa 	bl	59fc <Power_Ip_TimeoutExpired>
    5ca8:	4603      	mov	r3, r0
    5caa:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5cae:	4b2f      	ldr	r3, [pc, #188]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5cb0:	695b      	ldr	r3, [r3, #20]
    5cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5cb6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5cb8:	9b05      	ldr	r3, [sp, #20]
    5cba:	2b80      	cmp	r3, #128	; 0x80
    5cbc:	d006      	beq.n	5ccc <Power_Ip_SMC_ModeConfig+0xf8>
    5cbe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5cc2:	f083 0301 	eor.w	r3, r3, #1
    5cc6:	b2db      	uxtb	r3, r3
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d1e7      	bne.n	5c9c <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5ccc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d043      	beq.n	5d5c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5cd4:	2301      	movs	r3, #1
    5cd6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5cd8:	21ff      	movs	r1, #255	; 0xff
    5cda:	2000      	movs	r0, #0
    5cdc:	f7ff fe58 	bl	5990 <Power_Ip_ReportPowerErrors>
            }

            break;
    5ce0:	e03c      	b.n	5d5c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5ce2:	4b22      	ldr	r3, [pc, #136]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5ce4:	68db      	ldr	r3, [r3, #12]
    5ce6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5ce8:	9b06      	ldr	r3, [sp, #24]
    5cea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5cee:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5cf0:	9b06      	ldr	r3, [sp, #24]
    5cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5cf6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5cf8:	4a1c      	ldr	r2, [pc, #112]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5cfa:	9b06      	ldr	r3, [sp, #24]
    5cfc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5cfe:	aa02      	add	r2, sp, #8
    5d00:	a903      	add	r1, sp, #12
    5d02:	a804      	add	r0, sp, #16
    5d04:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d08:	f7ff fe5e 	bl	59c8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d0c:	9a02      	ldr	r2, [sp, #8]
    5d0e:	a903      	add	r1, sp, #12
    5d10:	ab04      	add	r3, sp, #16
    5d12:	4618      	mov	r0, r3
    5d14:	f7ff fe72 	bl	59fc <Power_Ip_TimeoutExpired>
    5d18:	4603      	mov	r3, r0
    5d1a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5d1e:	4b13      	ldr	r3, [pc, #76]	; (5d6c <Power_Ip_SMC_ModeConfig+0x198>)
    5d20:	695b      	ldr	r3, [r3, #20]
    5d22:	f003 0304 	and.w	r3, r3, #4
    5d26:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d28:	9b05      	ldr	r3, [sp, #20]
    5d2a:	2b04      	cmp	r3, #4
    5d2c:	d006      	beq.n	5d3c <Power_Ip_SMC_ModeConfig+0x168>
    5d2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d32:	f083 0301 	eor.w	r3, r3, #1
    5d36:	b2db      	uxtb	r3, r3
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d1e7      	bne.n	5d0c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5d3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d40:	2b00      	cmp	r3, #0
    5d42:	d00d      	beq.n	5d60 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d44:	2301      	movs	r3, #1
    5d46:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d48:	21ff      	movs	r1, #255	; 0xff
    5d4a:	2000      	movs	r0, #0
    5d4c:	f7ff fe20 	bl	5990 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d50:	e006      	b.n	5d60 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d52:	2301      	movs	r3, #1
    5d54:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5d56:	e004      	b.n	5d62 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5d58:	bf00      	nop
    5d5a:	e002      	b.n	5d62 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5d5c:	bf00      	nop
    5d5e:	e000      	b.n	5d62 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5d60:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5d64:	4618      	mov	r0, r3
    5d66:	b00b      	add	sp, #44	; 0x2c
    5d68:	f85d fb04 	ldr.w	pc, [sp], #4
    5d6c:	4007e000 	.word	0x4007e000

00005d70 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5d70:	b500      	push	{lr}
    5d72:	b085      	sub	sp, #20
    5d74:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5d76:	9b01      	ldr	r3, [sp, #4]
    5d78:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5d7a:	9803      	ldr	r0, [sp, #12]
    5d7c:	f000 fbc8 	bl	6510 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5d80:	4a03      	ldr	r2, [pc, #12]	; (5d90 <Port_Init+0x20>)
    5d82:	9b03      	ldr	r3, [sp, #12]
    5d84:	6013      	str	r3, [r2, #0]
        }
    }
}
    5d86:	bf00      	nop
    5d88:	b005      	add	sp, #20
    5d8a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d8e:	bf00      	nop
    5d90:	1fff8d18 	.word	0x1fff8d18

00005d94 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5d94:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5d96:	4b03      	ldr	r3, [pc, #12]	; (5da4 <Port_RefreshPortDirection+0x10>)
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	4618      	mov	r0, r3
    5d9c:	f000 fc10 	bl	65c0 <Port_Ipw_RefreshPortDirection>
    }
}
    5da0:	bf00      	nop
    5da2:	bd08      	pop	{r3, pc}
    5da4:	1fff8d18 	.word	0x1fff8d18

00005da8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5da8:	b086      	sub	sp, #24
    5daa:	9003      	str	r0, [sp, #12]
    5dac:	9102      	str	r1, [sp, #8]
    5dae:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5db0:	23ff      	movs	r3, #255	; 0xff
    5db2:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5db4:	9b03      	ldr	r3, [sp, #12]
    5db6:	4a39      	ldr	r2, [pc, #228]	; (5e9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5db8:	4293      	cmp	r3, r2
    5dba:	d151      	bne.n	5e60 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5dbc:	9b02      	ldr	r3, [sp, #8]
    5dbe:	2b10      	cmp	r3, #16
    5dc0:	d867      	bhi.n	5e92 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5dc2:	a201      	add	r2, pc, #4	; (adr r2, 5dc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5dc8:	00005e0d 	.word	0x00005e0d
    5dcc:	00005e1b 	.word	0x00005e1b
    5dd0:	00005e93 	.word	0x00005e93
    5dd4:	00005e93 	.word	0x00005e93
    5dd8:	00005e93 	.word	0x00005e93
    5ddc:	00005e93 	.word	0x00005e93
    5de0:	00005e93 	.word	0x00005e93
    5de4:	00005e93 	.word	0x00005e93
    5de8:	00005e93 	.word	0x00005e93
    5dec:	00005e93 	.word	0x00005e93
    5df0:	00005e93 	.word	0x00005e93
    5df4:	00005e93 	.word	0x00005e93
    5df8:	00005e93 	.word	0x00005e93
    5dfc:	00005e29 	.word	0x00005e29
    5e00:	00005e37 	.word	0x00005e37
    5e04:	00005e45 	.word	0x00005e45
    5e08:	00005e53 	.word	0x00005e53
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5e0c:	2301      	movs	r3, #1
    5e0e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5e10:	9a05      	ldr	r2, [sp, #20]
    5e12:	9b01      	ldr	r3, [sp, #4]
    5e14:	4313      	orrs	r3, r2
    5e16:	9305      	str	r3, [sp, #20]
                break;
    5e18:	e03c      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5e1a:	2302      	movs	r3, #2
    5e1c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5e1e:	9a05      	ldr	r2, [sp, #20]
    5e20:	9b01      	ldr	r3, [sp, #4]
    5e22:	4313      	orrs	r3, r2
    5e24:	9305      	str	r3, [sp, #20]
                break;
    5e26:	e035      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5e28:	2304      	movs	r3, #4
    5e2a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5e2c:	9a05      	ldr	r2, [sp, #20]
    5e2e:	9b01      	ldr	r3, [sp, #4]
    5e30:	4313      	orrs	r3, r2
    5e32:	9305      	str	r3, [sp, #20]
                break;
    5e34:	e02e      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5e36:	2308      	movs	r3, #8
    5e38:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5e3a:	9a05      	ldr	r2, [sp, #20]
    5e3c:	9b01      	ldr	r3, [sp, #4]
    5e3e:	4313      	orrs	r3, r2
    5e40:	9305      	str	r3, [sp, #20]
                break;
    5e42:	e027      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5e44:	230e      	movs	r3, #14
    5e46:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e48:	9a05      	ldr	r2, [sp, #20]
    5e4a:	9b01      	ldr	r3, [sp, #4]
    5e4c:	4013      	ands	r3, r2
    5e4e:	9305      	str	r3, [sp, #20]
                break;
    5e50:	e020      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5e52:	230d      	movs	r3, #13
    5e54:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e56:	9a05      	ldr	r2, [sp, #20]
    5e58:	9b01      	ldr	r3, [sp, #4]
    5e5a:	4013      	ands	r3, r2
    5e5c:	9305      	str	r3, [sp, #20]
                break;
    5e5e:	e019      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5e60:	9b03      	ldr	r3, [sp, #12]
    5e62:	4a0f      	ldr	r2, [pc, #60]	; (5ea0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5e64:	4293      	cmp	r3, r2
    5e66:	d115      	bne.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5e68:	9b02      	ldr	r3, [sp, #8]
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d003      	beq.n	5e76 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5e6e:	9b02      	ldr	r3, [sp, #8]
    5e70:	2b01      	cmp	r3, #1
    5e72:	d007      	beq.n	5e84 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5e74:	e00e      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5e76:	230b      	movs	r3, #11
    5e78:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e7a:	9a05      	ldr	r2, [sp, #20]
    5e7c:	9b01      	ldr	r3, [sp, #4]
    5e7e:	4013      	ands	r3, r2
    5e80:	9305      	str	r3, [sp, #20]
                break;
    5e82:	e007      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5e84:	2307      	movs	r3, #7
    5e86:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5e88:	9a05      	ldr	r2, [sp, #20]
    5e8a:	9b01      	ldr	r3, [sp, #4]
    5e8c:	4013      	ands	r3, r2
    5e8e:	9305      	str	r3, [sp, #20]
                break;
    5e90:	e000      	b.n	5e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5e92:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5e94:	9b05      	ldr	r3, [sp, #20]
}
    5e96:	4618      	mov	r0, r3
    5e98:	b006      	add	sp, #24
    5e9a:	4770      	bx	lr
    5e9c:	4004a000 	.word	0x4004a000
    5ea0:	4004b000 	.word	0x4004b000

00005ea4 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5ea4:	b500      	push	{lr}
    5ea6:	b089      	sub	sp, #36	; 0x24
    5ea8:	9003      	str	r0, [sp, #12]
    5eaa:	9102      	str	r1, [sp, #8]
    5eac:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5eae:	9b01      	ldr	r3, [sp, #4]
    5eb0:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	2b08      	cmp	r3, #8
    5eb6:	d121      	bne.n	5efc <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5eb8:	4b13      	ldr	r3, [pc, #76]	; (5f08 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5eba:	685b      	ldr	r3, [r3, #4]
    5ebc:	f003 030f 	and.w	r3, r3, #15
    5ec0:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5ec2:	9a06      	ldr	r2, [sp, #24]
    5ec4:	9902      	ldr	r1, [sp, #8]
    5ec6:	9803      	ldr	r0, [sp, #12]
    5ec8:	f7ff ff6e 	bl	5da8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5ecc:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5ece:	9b05      	ldr	r3, [sp, #20]
    5ed0:	2bff      	cmp	r3, #255	; 0xff
    5ed2:	d011      	beq.n	5ef8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5ed4:	f00c fcc8 	bl	12868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5ed8:	4b0b      	ldr	r3, [pc, #44]	; (5f08 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5eda:	685b      	ldr	r3, [r3, #4]
    5edc:	4a0a      	ldr	r2, [pc, #40]	; (5f08 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ede:	f023 030f 	bic.w	r3, r3, #15
    5ee2:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5ee4:	4b08      	ldr	r3, [pc, #32]	; (5f08 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ee6:	685a      	ldr	r2, [r3, #4]
    5ee8:	9b05      	ldr	r3, [sp, #20]
    5eea:	f003 030f 	and.w	r3, r3, #15
    5eee:	4906      	ldr	r1, [pc, #24]	; (5f08 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ef0:	4313      	orrs	r3, r2
    5ef2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5ef4:	f00c fce4 	bl	128c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5ef8:	2300      	movs	r3, #0
    5efa:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5efc:	9b07      	ldr	r3, [sp, #28]
}
    5efe:	4618      	mov	r0, r3
    5f00:	b009      	add	sp, #36	; 0x24
    5f02:	f85d fb04 	ldr.w	pc, [sp], #4
    5f06:	bf00      	nop
    5f08:	40048000 	.word	0x40048000

00005f0c <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5f0c:	b500      	push	{lr}
    5f0e:	b087      	sub	sp, #28
    5f10:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5f12:	2300      	movs	r3, #0
    5f14:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5f16:	2300      	movs	r3, #0
    5f18:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5f1a:	2300      	movs	r3, #0
    5f1c:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	68db      	ldr	r3, [r3, #12]
    5f22:	2b02      	cmp	r3, #2
    5f24:	d00a      	beq.n	5f3c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5f26:	9b05      	ldr	r3, [sp, #20]
    5f28:	f043 0302 	orr.w	r3, r3, #2
    5f2c:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5f2e:	9b01      	ldr	r3, [sp, #4]
    5f30:	68db      	ldr	r3, [r3, #12]
    5f32:	f003 0301 	and.w	r3, r3, #1
    5f36:	9a05      	ldr	r2, [sp, #20]
    5f38:	4313      	orrs	r3, r2
    5f3a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5f3c:	9b01      	ldr	r3, [sp, #4]
    5f3e:	699b      	ldr	r3, [r3, #24]
    5f40:	019b      	lsls	r3, r3, #6
    5f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f46:	9a05      	ldr	r2, [sp, #20]
    5f48:	4313      	orrs	r3, r2
    5f4a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5f4c:	9b01      	ldr	r3, [sp, #4]
    5f4e:	6a1b      	ldr	r3, [r3, #32]
    5f50:	03db      	lsls	r3, r3, #15
    5f52:	b29b      	uxth	r3, r3
    5f54:	9a05      	ldr	r2, [sp, #20]
    5f56:	4313      	orrs	r3, r2
    5f58:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5f5a:	9b01      	ldr	r3, [sp, #4]
    5f5c:	7f1b      	ldrb	r3, [r3, #28]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d001      	beq.n	5f66 <Port_Ci_Port_Ip_PinInit+0x5a>
    5f62:	2310      	movs	r3, #16
    5f64:	e000      	b.n	5f68 <Port_Ci_Port_Ip_PinInit+0x5c>
    5f66:	2300      	movs	r3, #0
    5f68:	9a05      	ldr	r2, [sp, #20]
    5f6a:	4313      	orrs	r3, r2
    5f6c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5f6e:	9b01      	ldr	r3, [sp, #4]
    5f70:	691b      	ldr	r3, [r3, #16]
    5f72:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	6818      	ldr	r0, [r3, #0]
    5f78:	9b01      	ldr	r3, [sp, #4]
    5f7a:	689b      	ldr	r3, [r3, #8]
    5f7c:	9a04      	ldr	r2, [sp, #16]
    5f7e:	4619      	mov	r1, r3
    5f80:	f7ff ff90 	bl	5ea4 <Port_Ci_Port_Ip_ConfigureInterleave>
    5f84:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5f86:	9b03      	ldr	r3, [sp, #12]
    5f88:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5f8a:	9b04      	ldr	r3, [sp, #16]
    5f8c:	021b      	lsls	r3, r3, #8
    5f8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5f92:	9a05      	ldr	r2, [sp, #20]
    5f94:	4313      	orrs	r3, r2
    5f96:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5f98:	f00c facc 	bl	12534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5f9c:	9b01      	ldr	r3, [sp, #4]
    5f9e:	681b      	ldr	r3, [r3, #0]
    5fa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5fa4:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5fa6:	9b01      	ldr	r3, [sp, #4]
    5fa8:	689b      	ldr	r3, [r3, #8]
    5faa:	2201      	movs	r2, #1
    5fac:	fa02 f303 	lsl.w	r3, r2, r3
    5fb0:	43db      	mvns	r3, r3
    5fb2:	9a02      	ldr	r2, [sp, #8]
    5fb4:	4013      	ands	r3, r2
    5fb6:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5fb8:	9b01      	ldr	r3, [sp, #4]
    5fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d001      	beq.n	5fc6 <Port_Ci_Port_Ip_PinInit+0xba>
    5fc2:	2201      	movs	r2, #1
    5fc4:	e000      	b.n	5fc8 <Port_Ci_Port_Ip_PinInit+0xbc>
    5fc6:	2200      	movs	r2, #0
    5fc8:	9b01      	ldr	r3, [sp, #4]
    5fca:	689b      	ldr	r3, [r3, #8]
    5fcc:	fa02 f303 	lsl.w	r3, r2, r3
    5fd0:	9a02      	ldr	r2, [sp, #8]
    5fd2:	4313      	orrs	r3, r2
    5fd4:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5fd6:	9b01      	ldr	r3, [sp, #4]
    5fd8:	681b      	ldr	r3, [r3, #0]
    5fda:	9a02      	ldr	r2, [sp, #8]
    5fdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5fe0:	f00c fad4 	bl	1258c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5fe4:	9b04      	ldr	r3, [sp, #16]
    5fe6:	2b01      	cmp	r3, #1
    5fe8:	d16d      	bne.n	60c6 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5fea:	9b01      	ldr	r3, [sp, #4]
    5fec:	695b      	ldr	r3, [r3, #20]
    5fee:	2b02      	cmp	r3, #2
    5ff0:	d138      	bne.n	6064 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5ff8:	2b01      	cmp	r3, #1
    5ffa:	d10f      	bne.n	601c <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5ffc:	f00c faec 	bl	125d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6000:	9b01      	ldr	r3, [sp, #4]
    6002:	685b      	ldr	r3, [r3, #4]
    6004:	6859      	ldr	r1, [r3, #4]
    6006:	9b01      	ldr	r3, [sp, #4]
    6008:	689b      	ldr	r3, [r3, #8]
    600a:	2201      	movs	r2, #1
    600c:	409a      	lsls	r2, r3
    600e:	9b01      	ldr	r3, [sp, #4]
    6010:	685b      	ldr	r3, [r3, #4]
    6012:	430a      	orrs	r2, r1
    6014:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6016:	f00c fb0b 	bl	12630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    601a:	e013      	b.n	6044 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    601c:	9b01      	ldr	r3, [sp, #4]
    601e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6022:	2b00      	cmp	r3, #0
    6024:	d10e      	bne.n	6044 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6026:	f00c fb29 	bl	1267c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	685b      	ldr	r3, [r3, #4]
    602e:	6899      	ldr	r1, [r3, #8]
    6030:	9b01      	ldr	r3, [sp, #4]
    6032:	689b      	ldr	r3, [r3, #8]
    6034:	2201      	movs	r2, #1
    6036:	409a      	lsls	r2, r3
    6038:	9b01      	ldr	r3, [sp, #4]
    603a:	685b      	ldr	r3, [r3, #4]
    603c:	430a      	orrs	r2, r1
    603e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6040:	f00c fb48 	bl	126d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6044:	f00c fb6c 	bl	12720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	685b      	ldr	r3, [r3, #4]
    604c:	6959      	ldr	r1, [r3, #20]
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	689b      	ldr	r3, [r3, #8]
    6052:	2201      	movs	r2, #1
    6054:	409a      	lsls	r2, r3
    6056:	9b01      	ldr	r3, [sp, #4]
    6058:	685b      	ldr	r3, [r3, #4]
    605a:	430a      	orrs	r2, r1
    605c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    605e:	f00c fb8b 	bl	12778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6062:	e030      	b.n	60c6 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6064:	f00c fb5c 	bl	12720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	685b      	ldr	r3, [r3, #4]
    606c:	6959      	ldr	r1, [r3, #20]
    606e:	9b01      	ldr	r3, [sp, #4]
    6070:	689b      	ldr	r3, [r3, #8]
    6072:	2201      	movs	r2, #1
    6074:	fa02 f303 	lsl.w	r3, r2, r3
    6078:	43da      	mvns	r2, r3
    607a:	9b01      	ldr	r3, [sp, #4]
    607c:	685b      	ldr	r3, [r3, #4]
    607e:	400a      	ands	r2, r1
    6080:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6082:	f00c fb79 	bl	12778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6086:	f00c fb9d 	bl	127c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	685b      	ldr	r3, [r3, #4]
    608e:	6999      	ldr	r1, [r3, #24]
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	689b      	ldr	r3, [r3, #8]
    6094:	2201      	movs	r2, #1
    6096:	fa02 f303 	lsl.w	r3, r2, r3
    609a:	43da      	mvns	r2, r3
    609c:	9b01      	ldr	r3, [sp, #4]
    609e:	685b      	ldr	r3, [r3, #4]
    60a0:	400a      	ands	r2, r1
    60a2:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	695b      	ldr	r3, [r3, #20]
    60a8:	2b03      	cmp	r3, #3
    60aa:	d10a      	bne.n	60c2 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    60ac:	9b01      	ldr	r3, [sp, #4]
    60ae:	685b      	ldr	r3, [r3, #4]
    60b0:	6999      	ldr	r1, [r3, #24]
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	689b      	ldr	r3, [r3, #8]
    60b6:	2201      	movs	r2, #1
    60b8:	409a      	lsls	r2, r3
    60ba:	9b01      	ldr	r3, [sp, #4]
    60bc:	685b      	ldr	r3, [r3, #4]
    60be:	430a      	orrs	r2, r1
    60c0:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    60c2:	f00c fbab 	bl	1281c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    60c6:	9b01      	ldr	r3, [sp, #4]
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	9a01      	ldr	r2, [sp, #4]
    60cc:	6892      	ldr	r2, [r2, #8]
    60ce:	9905      	ldr	r1, [sp, #20]
    60d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    60d4:	bf00      	nop
    60d6:	b007      	add	sp, #28
    60d8:	f85d fb04 	ldr.w	pc, [sp], #4

000060dc <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    60dc:	b500      	push	{lr}
    60de:	b085      	sub	sp, #20
    60e0:	9001      	str	r0, [sp, #4]
    60e2:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    60e4:	2300      	movs	r3, #0
    60e6:	9303      	str	r3, [sp, #12]
    60e8:	e00d      	b.n	6106 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    60ea:	9a03      	ldr	r2, [sp, #12]
    60ec:	4613      	mov	r3, r2
    60ee:	009b      	lsls	r3, r3, #2
    60f0:	4413      	add	r3, r2
    60f2:	00db      	lsls	r3, r3, #3
    60f4:	461a      	mov	r2, r3
    60f6:	9b00      	ldr	r3, [sp, #0]
    60f8:	4413      	add	r3, r2
    60fa:	4618      	mov	r0, r3
    60fc:	f7ff ff06 	bl	5f0c <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6100:	9b03      	ldr	r3, [sp, #12]
    6102:	3301      	adds	r3, #1
    6104:	9303      	str	r3, [sp, #12]
    6106:	9a03      	ldr	r2, [sp, #12]
    6108:	9b01      	ldr	r3, [sp, #4]
    610a:	429a      	cmp	r2, r3
    610c:	d3ed      	bcc.n	60ea <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    610e:	2300      	movs	r3, #0
}
    6110:	4618      	mov	r0, r3
    6112:	b005      	add	sp, #20
    6114:	f85d fb04 	ldr.w	pc, [sp], #4

00006118 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6118:	b500      	push	{lr}
    611a:	b087      	sub	sp, #28
    611c:	9003      	str	r0, [sp, #12]
    611e:	9102      	str	r1, [sp, #8]
    6120:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6122:	9a01      	ldr	r2, [sp, #4]
    6124:	9902      	ldr	r1, [sp, #8]
    6126:	9803      	ldr	r0, [sp, #12]
    6128:	f7ff febc 	bl	5ea4 <Port_Ci_Port_Ip_ConfigureInterleave>
    612c:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    612e:	f00c fbed 	bl	1290c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6132:	9b03      	ldr	r3, [sp, #12]
    6134:	9a02      	ldr	r2, [sp, #8]
    6136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    613a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    613c:	9b04      	ldr	r3, [sp, #16]
    613e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6142:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6144:	9b05      	ldr	r3, [sp, #20]
    6146:	021b      	lsls	r3, r3, #8
    6148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    614c:	9a04      	ldr	r2, [sp, #16]
    614e:	4313      	orrs	r3, r2
    6150:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6152:	9b03      	ldr	r3, [sp, #12]
    6154:	9a02      	ldr	r2, [sp, #8]
    6156:	9904      	ldr	r1, [sp, #16]
    6158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    615c:	f00c fc02 	bl	12964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6160:	bf00      	nop
    6162:	b007      	add	sp, #28
    6164:	f85d fb04 	ldr.w	pc, [sp], #4

00006168 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6168:	b500      	push	{lr}
    616a:	b083      	sub	sp, #12
    616c:	9001      	str	r0, [sp, #4]
    616e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6170:	f00c fc1e 	bl	129b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6174:	9b01      	ldr	r3, [sp, #4]
    6176:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    617a:	2101      	movs	r1, #1
    617c:	9b00      	ldr	r3, [sp, #0]
    617e:	fa01 f303 	lsl.w	r3, r1, r3
    6182:	431a      	orrs	r2, r3
    6184:	9b01      	ldr	r3, [sp, #4]
    6186:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    618a:	f00c fc3d 	bl	12a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    618e:	bf00      	nop
    6190:	b003      	add	sp, #12
    6192:	f85d fb04 	ldr.w	pc, [sp], #4

00006196 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6196:	b500      	push	{lr}
    6198:	b083      	sub	sp, #12
    619a:	9001      	str	r0, [sp, #4]
    619c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    619e:	f00c fc59 	bl	12a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    61a2:	9b01      	ldr	r3, [sp, #4]
    61a4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    61a8:	2101      	movs	r1, #1
    61aa:	9b00      	ldr	r3, [sp, #0]
    61ac:	fa01 f303 	lsl.w	r3, r1, r3
    61b0:	43db      	mvns	r3, r3
    61b2:	401a      	ands	r2, r3
    61b4:	9b01      	ldr	r3, [sp, #4]
    61b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    61ba:	f00c fc77 	bl	12aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    61be:	bf00      	nop
    61c0:	b003      	add	sp, #12
    61c2:	f85d fb04 	ldr.w	pc, [sp], #4

000061c6 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    61c6:	b082      	sub	sp, #8
    61c8:	9001      	str	r0, [sp, #4]
    61ca:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    61cc:	9b00      	ldr	r3, [sp, #0]
    61ce:	785b      	ldrb	r3, [r3, #1]
    61d0:	f003 0201 	and.w	r2, r3, #1
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    61da:	9b00      	ldr	r3, [sp, #0]
    61dc:	789b      	ldrb	r3, [r3, #2]
    61de:	f003 021f 	and.w	r2, r3, #31
    61e2:	9b01      	ldr	r3, [sp, #4]
    61e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    61e8:	bf00      	nop
    61ea:	b002      	add	sp, #8
    61ec:	4770      	bx	lr

000061ee <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    61ee:	b086      	sub	sp, #24
    61f0:	9003      	str	r0, [sp, #12]
    61f2:	9301      	str	r3, [sp, #4]
    61f4:	460b      	mov	r3, r1
    61f6:	f8ad 300a 	strh.w	r3, [sp, #10]
    61fa:	4613      	mov	r3, r2
    61fc:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6200:	2300      	movs	r3, #0
    6202:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6206:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    620a:	f043 0301 	orr.w	r3, r3, #1
    620e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6212:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6216:	f043 0302 	orr.w	r3, r3, #2
    621a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    621e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6222:	f043 0310 	orr.w	r3, r3, #16
    6226:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    622a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    622e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6232:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6236:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    623a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    623e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6242:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    624e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6252:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6256:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    625a:	4013      	ands	r3, r2
    625c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6260:	9b01      	ldr	r3, [sp, #4]
    6262:	2b00      	cmp	r3, #0
    6264:	d003      	beq.n	626e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6266:	9b01      	ldr	r3, [sp, #4]
    6268:	2b01      	cmp	r3, #1
    626a:	d00a      	beq.n	6282 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    626c:	e013      	b.n	6296 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    626e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6272:	041a      	lsls	r2, r3, #16
    6274:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6278:	431a      	orrs	r2, r3
    627a:	9b03      	ldr	r3, [sp, #12]
    627c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6280:	e009      	b.n	6296 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6282:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6286:	041a      	lsls	r2, r3, #16
    6288:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    628c:	431a      	orrs	r2, r3
    628e:	9b03      	ldr	r3, [sp, #12]
    6290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6294:	bf00      	nop
    }
}
    6296:	bf00      	nop
    6298:	b006      	add	sp, #24
    629a:	4770      	bx	lr

0000629c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    629c:	b500      	push	{lr}
    629e:	b087      	sub	sp, #28
    62a0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    62a2:	9b01      	ldr	r3, [sp, #4]
    62a4:	885b      	ldrh	r3, [r3, #2]
    62a6:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    62aa:	9b01      	ldr	r3, [sp, #4]
    62ac:	689b      	ldr	r3, [r3, #8]
    62ae:	7a1b      	ldrb	r3, [r3, #8]
    62b0:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    62b4:	9b01      	ldr	r3, [sp, #4]
    62b6:	689b      	ldr	r3, [r3, #8]
    62b8:	681b      	ldr	r3, [r3, #0]
    62ba:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    62bc:	9b01      	ldr	r3, [sp, #4]
    62be:	689b      	ldr	r3, [r3, #8]
    62c0:	685b      	ldr	r3, [r3, #4]
    62c2:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    62c4:	2300      	movs	r3, #0
    62c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    62ca:	e111      	b.n	64f0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    62cc:	9b02      	ldr	r3, [sp, #8]
    62ce:	2b02      	cmp	r3, #2
    62d0:	d169      	bne.n	63a6 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    62d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    62d6:	2b01      	cmp	r3, #1
    62d8:	d11a      	bne.n	6310 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    62da:	9b01      	ldr	r3, [sp, #4]
    62dc:	685a      	ldr	r2, [r3, #4]
    62de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62e2:	005b      	lsls	r3, r3, #1
    62e4:	4413      	add	r3, r2
    62e6:	881b      	ldrh	r3, [r3, #0]
    62e8:	f003 021f 	and.w	r2, r3, #31
    62ec:	9b01      	ldr	r3, [sp, #4]
    62ee:	6859      	ldr	r1, [r3, #4]
    62f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62f4:	005b      	lsls	r3, r3, #1
    62f6:	440b      	add	r3, r1
    62f8:	881b      	ldrh	r3, [r3, #0]
    62fa:	095b      	lsrs	r3, r3, #5
    62fc:	b29b      	uxth	r3, r3
    62fe:	4619      	mov	r1, r3
    6300:	4b81      	ldr	r3, [pc, #516]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    6302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6306:	2101      	movs	r1, #1
    6308:	fa01 f202 	lsl.w	r2, r1, r2
    630c:	605a      	str	r2, [r3, #4]
    630e:	e01d      	b.n	634c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6310:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6314:	2b00      	cmp	r3, #0
    6316:	d119      	bne.n	634c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6318:	9b01      	ldr	r3, [sp, #4]
    631a:	685a      	ldr	r2, [r3, #4]
    631c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6320:	005b      	lsls	r3, r3, #1
    6322:	4413      	add	r3, r2
    6324:	881b      	ldrh	r3, [r3, #0]
    6326:	f003 021f 	and.w	r2, r3, #31
    632a:	9b01      	ldr	r3, [sp, #4]
    632c:	6859      	ldr	r1, [r3, #4]
    632e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6332:	005b      	lsls	r3, r3, #1
    6334:	440b      	add	r3, r1
    6336:	881b      	ldrh	r3, [r3, #0]
    6338:	095b      	lsrs	r3, r3, #5
    633a:	b29b      	uxth	r3, r3
    633c:	4619      	mov	r1, r3
    633e:	4b72      	ldr	r3, [pc, #456]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    6340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6344:	2101      	movs	r1, #1
    6346:	fa01 f202 	lsl.w	r2, r1, r2
    634a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    634c:	f00c fbd4 	bl	12af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6350:	9b01      	ldr	r3, [sp, #4]
    6352:	685a      	ldr	r2, [r3, #4]
    6354:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6358:	005b      	lsls	r3, r3, #1
    635a:	4413      	add	r3, r2
    635c:	881b      	ldrh	r3, [r3, #0]
    635e:	095b      	lsrs	r3, r3, #5
    6360:	b29b      	uxth	r3, r3
    6362:	461a      	mov	r2, r3
    6364:	4b68      	ldr	r3, [pc, #416]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    6366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    636a:	6959      	ldr	r1, [r3, #20]
    636c:	9b01      	ldr	r3, [sp, #4]
    636e:	685a      	ldr	r2, [r3, #4]
    6370:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6374:	005b      	lsls	r3, r3, #1
    6376:	4413      	add	r3, r2
    6378:	881b      	ldrh	r3, [r3, #0]
    637a:	f003 031f 	and.w	r3, r3, #31
    637e:	2201      	movs	r2, #1
    6380:	409a      	lsls	r2, r3
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	6858      	ldr	r0, [r3, #4]
    6386:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    638a:	005b      	lsls	r3, r3, #1
    638c:	4403      	add	r3, r0
    638e:	881b      	ldrh	r3, [r3, #0]
    6390:	095b      	lsrs	r3, r3, #5
    6392:	b29b      	uxth	r3, r3
    6394:	4618      	mov	r0, r3
    6396:	4b5c      	ldr	r3, [pc, #368]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    6398:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    639c:	430a      	orrs	r2, r1
    639e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    63a0:	f00c fbd6 	bl	12b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    63a4:	e086      	b.n	64b4 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    63a6:	f00c fba7 	bl	12af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    63aa:	9b01      	ldr	r3, [sp, #4]
    63ac:	685a      	ldr	r2, [r3, #4]
    63ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b2:	005b      	lsls	r3, r3, #1
    63b4:	4413      	add	r3, r2
    63b6:	881b      	ldrh	r3, [r3, #0]
    63b8:	095b      	lsrs	r3, r3, #5
    63ba:	b29b      	uxth	r3, r3
    63bc:	461a      	mov	r2, r3
    63be:	4b52      	ldr	r3, [pc, #328]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    63c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63c4:	6959      	ldr	r1, [r3, #20]
    63c6:	9b01      	ldr	r3, [sp, #4]
    63c8:	685a      	ldr	r2, [r3, #4]
    63ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63ce:	005b      	lsls	r3, r3, #1
    63d0:	4413      	add	r3, r2
    63d2:	881b      	ldrh	r3, [r3, #0]
    63d4:	f003 031f 	and.w	r3, r3, #31
    63d8:	2201      	movs	r2, #1
    63da:	fa02 f303 	lsl.w	r3, r2, r3
    63de:	43da      	mvns	r2, r3
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	6858      	ldr	r0, [r3, #4]
    63e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63e8:	005b      	lsls	r3, r3, #1
    63ea:	4403      	add	r3, r0
    63ec:	881b      	ldrh	r3, [r3, #0]
    63ee:	095b      	lsrs	r3, r3, #5
    63f0:	b29b      	uxth	r3, r3
    63f2:	4618      	mov	r0, r3
    63f4:	4b44      	ldr	r3, [pc, #272]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    63f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    63fa:	400a      	ands	r2, r1
    63fc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    63fe:	f00c fba7 	bl	12b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6402:	f00c fbcb 	bl	12b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	685a      	ldr	r2, [r3, #4]
    640a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    640e:	005b      	lsls	r3, r3, #1
    6410:	4413      	add	r3, r2
    6412:	881b      	ldrh	r3, [r3, #0]
    6414:	095b      	lsrs	r3, r3, #5
    6416:	b29b      	uxth	r3, r3
    6418:	461a      	mov	r2, r3
    641a:	4b3b      	ldr	r3, [pc, #236]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6420:	6999      	ldr	r1, [r3, #24]
    6422:	9b01      	ldr	r3, [sp, #4]
    6424:	685a      	ldr	r2, [r3, #4]
    6426:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    642a:	005b      	lsls	r3, r3, #1
    642c:	4413      	add	r3, r2
    642e:	881b      	ldrh	r3, [r3, #0]
    6430:	f003 031f 	and.w	r3, r3, #31
    6434:	2201      	movs	r2, #1
    6436:	fa02 f303 	lsl.w	r3, r2, r3
    643a:	43da      	mvns	r2, r3
    643c:	9b01      	ldr	r3, [sp, #4]
    643e:	6858      	ldr	r0, [r3, #4]
    6440:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6444:	005b      	lsls	r3, r3, #1
    6446:	4403      	add	r3, r0
    6448:	881b      	ldrh	r3, [r3, #0]
    644a:	095b      	lsrs	r3, r3, #5
    644c:	b29b      	uxth	r3, r3
    644e:	4618      	mov	r0, r3
    6450:	4b2d      	ldr	r3, [pc, #180]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    6452:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6456:	400a      	ands	r2, r1
    6458:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    645a:	9b02      	ldr	r3, [sp, #8]
    645c:	2b03      	cmp	r3, #3
    645e:	d127      	bne.n	64b0 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6460:	9b01      	ldr	r3, [sp, #4]
    6462:	685a      	ldr	r2, [r3, #4]
    6464:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6468:	005b      	lsls	r3, r3, #1
    646a:	4413      	add	r3, r2
    646c:	881b      	ldrh	r3, [r3, #0]
    646e:	095b      	lsrs	r3, r3, #5
    6470:	b29b      	uxth	r3, r3
    6472:	461a      	mov	r2, r3
    6474:	4b24      	ldr	r3, [pc, #144]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    6476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    647a:	6999      	ldr	r1, [r3, #24]
    647c:	9b01      	ldr	r3, [sp, #4]
    647e:	685a      	ldr	r2, [r3, #4]
    6480:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6484:	005b      	lsls	r3, r3, #1
    6486:	4413      	add	r3, r2
    6488:	881b      	ldrh	r3, [r3, #0]
    648a:	f003 031f 	and.w	r3, r3, #31
    648e:	2201      	movs	r2, #1
    6490:	409a      	lsls	r2, r3
    6492:	9b01      	ldr	r3, [sp, #4]
    6494:	6858      	ldr	r0, [r3, #4]
    6496:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    649a:	005b      	lsls	r3, r3, #1
    649c:	4403      	add	r3, r0
    649e:	881b      	ldrh	r3, [r3, #0]
    64a0:	095b      	lsrs	r3, r3, #5
    64a2:	b29b      	uxth	r3, r3
    64a4:	4618      	mov	r0, r3
    64a6:	4b18      	ldr	r3, [pc, #96]	; (6508 <Port_Ipw_Init_UnusedPins+0x26c>)
    64a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64ac:	430a      	orrs	r2, r1
    64ae:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    64b0:	f00c fba0 	bl	12bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    64b4:	9b01      	ldr	r3, [sp, #4]
    64b6:	685a      	ldr	r2, [r3, #4]
    64b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64bc:	005b      	lsls	r3, r3, #1
    64be:	4413      	add	r3, r2
    64c0:	881b      	ldrh	r3, [r3, #0]
    64c2:	095b      	lsrs	r3, r3, #5
    64c4:	b29b      	uxth	r3, r3
    64c6:	461a      	mov	r2, r3
    64c8:	4b10      	ldr	r3, [pc, #64]	; (650c <Port_Ipw_Init_UnusedPins+0x270>)
    64ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64ce:	9a01      	ldr	r2, [sp, #4]
    64d0:	6851      	ldr	r1, [r2, #4]
    64d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    64d6:	0052      	lsls	r2, r2, #1
    64d8:	440a      	add	r2, r1
    64da:	8812      	ldrh	r2, [r2, #0]
    64dc:	f002 021f 	and.w	r2, r2, #31
    64e0:	9903      	ldr	r1, [sp, #12]
    64e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    64e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ea:	3301      	adds	r3, #1
    64ec:	f8ad 3016 	strh.w	r3, [sp, #22]
    64f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    64f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    64f8:	429a      	cmp	r2, r3
    64fa:	f4ff aee7 	bcc.w	62cc <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    64fe:	bf00      	nop
    6500:	bf00      	nop
    6502:	b007      	add	sp, #28
    6504:	f85d fb04 	ldr.w	pc, [sp], #4
    6508:	00015690 	.word	0x00015690
    650c:	0001567c 	.word	0x0001567c

00006510 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6510:	b500      	push	{lr}
    6512:	b085      	sub	sp, #20
    6514:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	7c1b      	ldrb	r3, [r3, #16]
    651a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    651e:	2300      	movs	r3, #0
    6520:	f8ad 300e 	strh.w	r3, [sp, #14]
    6524:	e035      	b.n	6592 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6526:	9b01      	ldr	r3, [sp, #4]
    6528:	695a      	ldr	r2, [r3, #20]
    652a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    652e:	00db      	lsls	r3, r3, #3
    6530:	4413      	add	r3, r2
    6532:	781b      	ldrb	r3, [r3, #0]
    6534:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6538:	f89d 300c 	ldrb.w	r3, [sp, #12]
    653c:	4a1f      	ldr	r2, [pc, #124]	; (65bc <Port_Ipw_Init+0xac>)
    653e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6542:	9b01      	ldr	r3, [sp, #4]
    6544:	695a      	ldr	r2, [r3, #20]
    6546:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    654a:	00db      	lsls	r3, r3, #3
    654c:	4413      	add	r3, r2
    654e:	4619      	mov	r1, r3
    6550:	f7ff fe39 	bl	61c6 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6554:	f00c fcbc 	bl	12ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6558:	f89d 300c 	ldrb.w	r3, [sp, #12]
    655c:	4a17      	ldr	r2, [pc, #92]	; (65bc <Port_Ipw_Init+0xac>)
    655e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6562:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	695a      	ldr	r2, [r3, #20]
    656a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    656e:	00db      	lsls	r3, r3, #3
    6570:	4413      	add	r3, r2
    6572:	685a      	ldr	r2, [r3, #4]
    6574:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6578:	4810      	ldr	r0, [pc, #64]	; (65bc <Port_Ipw_Init+0xac>)
    657a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    657e:	430a      	orrs	r2, r1
    6580:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6584:	f00c fcd0 	bl	12f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6588:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    658c:	3301      	adds	r3, #1
    658e:	f8ad 300e 	strh.w	r3, [sp, #14]
    6592:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6596:	b29b      	uxth	r3, r3
    6598:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    659c:	429a      	cmp	r2, r3
    659e:	d3c2      	bcc.n	6526 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    65a0:	9b01      	ldr	r3, [sp, #4]
    65a2:	6a1b      	ldr	r3, [r3, #32]
    65a4:	4619      	mov	r1, r3
    65a6:	200c      	movs	r0, #12
    65a8:	f7ff fd98 	bl	60dc <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    65ac:	9801      	ldr	r0, [sp, #4]
    65ae:	f7ff fe75 	bl	629c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    65b2:	bf00      	nop
    65b4:	b005      	add	sp, #20
    65b6:	f85d fb04 	ldr.w	pc, [sp], #4
    65ba:	bf00      	nop
    65bc:	0001567c 	.word	0x0001567c

000065c0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    65c0:	b500      	push	{lr}
    65c2:	b085      	sub	sp, #20
    65c4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	881b      	ldrh	r3, [r3, #0]
    65ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    65ce:	2300      	movs	r3, #0
    65d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    65d4:	e0d2      	b.n	677c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	68d9      	ldr	r1, [r3, #12]
    65da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    65de:	4613      	mov	r3, r2
    65e0:	009b      	lsls	r3, r3, #2
    65e2:	4413      	add	r3, r2
    65e4:	009b      	lsls	r3, r3, #2
    65e6:	440b      	add	r3, r1
    65e8:	7c5b      	ldrb	r3, [r3, #17]
    65ea:	f083 0301 	eor.w	r3, r3, #1
    65ee:	b2db      	uxtb	r3, r3
    65f0:	2b00      	cmp	r3, #0
    65f2:	f000 80be 	beq.w	6772 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    65f6:	9b01      	ldr	r3, [sp, #4]
    65f8:	68d9      	ldr	r1, [r3, #12]
    65fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    65fe:	4613      	mov	r3, r2
    6600:	009b      	lsls	r3, r3, #2
    6602:	4413      	add	r3, r2
    6604:	009b      	lsls	r3, r3, #2
    6606:	440b      	add	r3, r1
    6608:	7c1b      	ldrb	r3, [r3, #16]
    660a:	2b00      	cmp	r3, #0
    660c:	f000 80b1 	beq.w	6772 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6610:	9b01      	ldr	r3, [sp, #4]
    6612:	68d9      	ldr	r1, [r3, #12]
    6614:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6618:	4613      	mov	r3, r2
    661a:	009b      	lsls	r3, r3, #2
    661c:	4413      	add	r3, r2
    661e:	009b      	lsls	r3, r3, #2
    6620:	440b      	add	r3, r1
    6622:	881b      	ldrh	r3, [r3, #0]
    6624:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6628:	9b01      	ldr	r3, [sp, #4]
    662a:	68d9      	ldr	r1, [r3, #12]
    662c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6630:	4613      	mov	r3, r2
    6632:	009b      	lsls	r3, r3, #2
    6634:	4413      	add	r3, r2
    6636:	009b      	lsls	r3, r3, #2
    6638:	440b      	add	r3, r1
    663a:	68db      	ldr	r3, [r3, #12]
    663c:	2b02      	cmp	r3, #2
    663e:	d11d      	bne.n	667c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6640:	f00c fd8e 	bl	13160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6644:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6648:	095b      	lsrs	r3, r3, #5
    664a:	b29b      	uxth	r3, r3
    664c:	461a      	mov	r2, r3
    664e:	4b51      	ldr	r3, [pc, #324]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6654:	6959      	ldr	r1, [r3, #20]
    6656:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    665a:	f003 031f 	and.w	r3, r3, #31
    665e:	2201      	movs	r2, #1
    6660:	409a      	lsls	r2, r3
    6662:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6666:	095b      	lsrs	r3, r3, #5
    6668:	b29b      	uxth	r3, r3
    666a:	4618      	mov	r0, r3
    666c:	4b49      	ldr	r3, [pc, #292]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    666e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6672:	430a      	orrs	r2, r1
    6674:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6676:	f00c fd9f 	bl	131b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    667a:	e07a      	b.n	6772 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    667c:	9b01      	ldr	r3, [sp, #4]
    667e:	68d9      	ldr	r1, [r3, #12]
    6680:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6684:	4613      	mov	r3, r2
    6686:	009b      	lsls	r3, r3, #2
    6688:	4413      	add	r3, r2
    668a:	009b      	lsls	r3, r3, #2
    668c:	440b      	add	r3, r1
    668e:	68db      	ldr	r3, [r3, #12]
    6690:	2b01      	cmp	r3, #1
    6692:	d00b      	beq.n	66ac <Port_Ipw_RefreshPortDirection+0xec>
    6694:	9b01      	ldr	r3, [sp, #4]
    6696:	68d9      	ldr	r1, [r3, #12]
    6698:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    669c:	4613      	mov	r3, r2
    669e:	009b      	lsls	r3, r3, #2
    66a0:	4413      	add	r3, r2
    66a2:	009b      	lsls	r3, r3, #2
    66a4:	440b      	add	r3, r1
    66a6:	68db      	ldr	r3, [r3, #12]
    66a8:	2b03      	cmp	r3, #3
    66aa:	d162      	bne.n	6772 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    66ac:	f00c fd58 	bl	13160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66b4:	095b      	lsrs	r3, r3, #5
    66b6:	b29b      	uxth	r3, r3
    66b8:	461a      	mov	r2, r3
    66ba:	4b36      	ldr	r3, [pc, #216]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66c0:	6959      	ldr	r1, [r3, #20]
    66c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66c6:	f003 031f 	and.w	r3, r3, #31
    66ca:	2201      	movs	r2, #1
    66cc:	fa02 f303 	lsl.w	r3, r2, r3
    66d0:	43da      	mvns	r2, r3
    66d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66d6:	095b      	lsrs	r3, r3, #5
    66d8:	b29b      	uxth	r3, r3
    66da:	4618      	mov	r0, r3
    66dc:	4b2d      	ldr	r3, [pc, #180]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    66e2:	400a      	ands	r2, r1
    66e4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    66e6:	f00c fd67 	bl	131b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    66ea:	f00c fd8b 	bl	13204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66f2:	095b      	lsrs	r3, r3, #5
    66f4:	b29b      	uxth	r3, r3
    66f6:	461a      	mov	r2, r3
    66f8:	4b26      	ldr	r3, [pc, #152]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66fe:	6999      	ldr	r1, [r3, #24]
    6700:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6704:	f003 031f 	and.w	r3, r3, #31
    6708:	2201      	movs	r2, #1
    670a:	fa02 f303 	lsl.w	r3, r2, r3
    670e:	43da      	mvns	r2, r3
    6710:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6714:	095b      	lsrs	r3, r3, #5
    6716:	b29b      	uxth	r3, r3
    6718:	4618      	mov	r0, r3
    671a:	4b1e      	ldr	r3, [pc, #120]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    671c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6720:	400a      	ands	r2, r1
    6722:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	68d9      	ldr	r1, [r3, #12]
    6728:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    672c:	4613      	mov	r3, r2
    672e:	009b      	lsls	r3, r3, #2
    6730:	4413      	add	r3, r2
    6732:	009b      	lsls	r3, r3, #2
    6734:	440b      	add	r3, r1
    6736:	68db      	ldr	r3, [r3, #12]
    6738:	2b03      	cmp	r3, #3
    673a:	d118      	bne.n	676e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    673c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6740:	095b      	lsrs	r3, r3, #5
    6742:	b29b      	uxth	r3, r3
    6744:	461a      	mov	r2, r3
    6746:	4b13      	ldr	r3, [pc, #76]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    674c:	6999      	ldr	r1, [r3, #24]
    674e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6752:	f003 031f 	and.w	r3, r3, #31
    6756:	2201      	movs	r2, #1
    6758:	409a      	lsls	r2, r3
    675a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    675e:	095b      	lsrs	r3, r3, #5
    6760:	b29b      	uxth	r3, r3
    6762:	4618      	mov	r0, r3
    6764:	4b0b      	ldr	r3, [pc, #44]	; (6794 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6766:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    676a:	430a      	orrs	r2, r1
    676c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    676e:	f00c fd75 	bl	1325c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6772:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6776:	3301      	adds	r3, #1
    6778:	f8ad 300e 	strh.w	r3, [sp, #14]
    677c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6780:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6784:	429a      	cmp	r2, r3
    6786:	f4ff af26 	bcc.w	65d6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    678a:	bf00      	nop
    678c:	bf00      	nop
    678e:	b005      	add	sp, #20
    6790:	f85d fb04 	ldr.w	pc, [sp], #4
    6794:	00015690 	.word	0x00015690

00006798 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6798:	b500      	push	{lr}
    679a:	b085      	sub	sp, #20
    679c:	4603      	mov	r3, r0
    679e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    67a2:	2300      	movs	r3, #0
    67a4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    67a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    67ac:	4618      	mov	r0, r3
    67ae:	f000 f871 	bl	6894 <Dio_Ipw_ReadChannel>
    67b2:	4603      	mov	r3, r0
    67b4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    67b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    67bc:	4618      	mov	r0, r3
    67be:	b005      	add	sp, #20
    67c0:	f85d fb04 	ldr.w	pc, [sp], #4

000067c4 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    67c4:	b500      	push	{lr}
    67c6:	b083      	sub	sp, #12
    67c8:	4603      	mov	r3, r0
    67ca:	460a      	mov	r2, r1
    67cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    67d0:	4613      	mov	r3, r2
    67d2:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    67d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    67da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    67de:	4611      	mov	r1, r2
    67e0:	4618      	mov	r0, r3
    67e2:	f000 f87d 	bl	68e0 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    67e6:	bf00      	nop
    67e8:	b003      	add	sp, #12
    67ea:	f85d fb04 	ldr.w	pc, [sp], #4

000067ee <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    67ee:	b500      	push	{lr}
    67f0:	b085      	sub	sp, #20
    67f2:	4603      	mov	r3, r0
    67f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    67f8:	2300      	movs	r3, #0
    67fa:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    67fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6802:	4618      	mov	r0, r3
    6804:	f000 f892 	bl	692c <Dio_Ipw_FlipChannel>
    6808:	4603      	mov	r3, r0
    680a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    680e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6812:	4618      	mov	r0, r3
    6814:	b005      	add	sp, #20
    6816:	f85d fb04 	ldr.w	pc, [sp], #4

0000681a <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    681a:	b500      	push	{lr}
    681c:	b085      	sub	sp, #20
    681e:	4603      	mov	r3, r0
    6820:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6824:	2300      	movs	r3, #0
    6826:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6828:	f89d 3007 	ldrb.w	r3, [sp, #7]
    682c:	4618      	mov	r0, r3
    682e:	f000 f8b3 	bl	6998 <Dio_Ipw_ReadPort>
    6832:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6834:	9b03      	ldr	r3, [sp, #12]
}
    6836:	4618      	mov	r0, r3
    6838:	b005      	add	sp, #20
    683a:	f85d fb04 	ldr.w	pc, [sp], #4

0000683e <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    683e:	b500      	push	{lr}
    6840:	b083      	sub	sp, #12
    6842:	4603      	mov	r3, r0
    6844:	9100      	str	r1, [sp, #0]
    6846:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    684a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    684e:	9900      	ldr	r1, [sp, #0]
    6850:	4618      	mov	r0, r3
    6852:	f000 f8b9 	bl	69c8 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6856:	bf00      	nop
    6858:	b003      	add	sp, #12
    685a:	f85d fb04 	ldr.w	pc, [sp], #4

0000685e <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    685e:	b500      	push	{lr}
    6860:	b085      	sub	sp, #20
    6862:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6864:	2300      	movs	r3, #0
    6866:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6868:	9801      	ldr	r0, [sp, #4]
    686a:	f000 f8c5 	bl	69f8 <Dio_Ipw_ReadChannelGroup>
    686e:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6870:	9b03      	ldr	r3, [sp, #12]
}
    6872:	4618      	mov	r0, r3
    6874:	b005      	add	sp, #20
    6876:	f85d fb04 	ldr.w	pc, [sp], #4

0000687a <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    687a:	b500      	push	{lr}
    687c:	b083      	sub	sp, #12
    687e:	9001      	str	r0, [sp, #4]
    6880:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6882:	9900      	ldr	r1, [sp, #0]
    6884:	9801      	ldr	r0, [sp, #4]
    6886:	f000 f8d7 	bl	6a38 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    688a:	bf00      	nop
    688c:	b003      	add	sp, #12
    688e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006894 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6894:	b500      	push	{lr}
    6896:	b087      	sub	sp, #28
    6898:	4603      	mov	r3, r0
    689a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    689e:	2300      	movs	r3, #0
    68a0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    68a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68a8:	095b      	lsrs	r3, r3, #5
    68aa:	b29b      	uxth	r3, r3
    68ac:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    68ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68b2:	f003 031f 	and.w	r3, r3, #31
    68b6:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    68b8:	4a08      	ldr	r2, [pc, #32]	; (68dc <Dio_Ipw_ReadChannel+0x48>)
    68ba:	9b04      	ldr	r3, [sp, #16]
    68bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68c0:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    68c2:	9903      	ldr	r1, [sp, #12]
    68c4:	9802      	ldr	r0, [sp, #8]
    68c6:	f000 f940 	bl	6b4a <Gpio_Dio_Ip_ReadPin>
    68ca:	4603      	mov	r3, r0
    68cc:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    68d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    68d4:	4618      	mov	r0, r3
    68d6:	b007      	add	sp, #28
    68d8:	f85d fb04 	ldr.w	pc, [sp], #4
    68dc:	1fff8b24 	.word	0x1fff8b24

000068e0 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    68e0:	b500      	push	{lr}
    68e2:	b087      	sub	sp, #28
    68e4:	4603      	mov	r3, r0
    68e6:	460a      	mov	r2, r1
    68e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    68ec:	4613      	mov	r3, r2
    68ee:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    68f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68f6:	095b      	lsrs	r3, r3, #5
    68f8:	b29b      	uxth	r3, r3
    68fa:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    68fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6900:	f003 031f 	and.w	r3, r3, #31
    6904:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6906:	4a08      	ldr	r2, [pc, #32]	; (6928 <Dio_Ipw_WriteChannel+0x48>)
    6908:	9b05      	ldr	r3, [sp, #20]
    690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    690e:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6910:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6914:	461a      	mov	r2, r3
    6916:	9904      	ldr	r1, [sp, #16]
    6918:	9803      	ldr	r0, [sp, #12]
    691a:	f000 f8b7 	bl	6a8c <Gpio_Dio_Ip_WritePin>
}
    691e:	bf00      	nop
    6920:	b007      	add	sp, #28
    6922:	f85d fb04 	ldr.w	pc, [sp], #4
    6926:	bf00      	nop
    6928:	1fff8b24 	.word	0x1fff8b24

0000692c <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    692c:	b500      	push	{lr}
    692e:	b089      	sub	sp, #36	; 0x24
    6930:	4603      	mov	r3, r0
    6932:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6936:	2300      	movs	r3, #0
    6938:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    693c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6940:	095b      	lsrs	r3, r3, #5
    6942:	b29b      	uxth	r3, r3
    6944:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6946:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    694a:	f003 031f 	and.w	r3, r3, #31
    694e:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6950:	4a10      	ldr	r2, [pc, #64]	; (6994 <Dio_Ipw_FlipChannel+0x68>)
    6952:	9b06      	ldr	r3, [sp, #24]
    6954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6958:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    695a:	2201      	movs	r2, #1
    695c:	9b05      	ldr	r3, [sp, #20]
    695e:	fa02 f303 	lsl.w	r3, r2, r3
    6962:	4619      	mov	r1, r3
    6964:	9804      	ldr	r0, [sp, #16]
    6966:	f000 f8dc 	bl	6b22 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    696a:	9804      	ldr	r0, [sp, #16]
    696c:	f000 f8bc 	bl	6ae8 <Gpio_Dio_Ip_GetPinsOutput>
    6970:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6972:	2201      	movs	r2, #1
    6974:	9b05      	ldr	r3, [sp, #20]
    6976:	409a      	lsls	r2, r3
    6978:	9b03      	ldr	r3, [sp, #12]
    697a:	401a      	ands	r2, r3
    697c:	9b05      	ldr	r3, [sp, #20]
    697e:	fa22 f303 	lsr.w	r3, r2, r3
    6982:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6986:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    698a:	4618      	mov	r0, r3
    698c:	b009      	add	sp, #36	; 0x24
    698e:	f85d fb04 	ldr.w	pc, [sp], #4
    6992:	bf00      	nop
    6994:	1fff8b24 	.word	0x1fff8b24

00006998 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6998:	b500      	push	{lr}
    699a:	b085      	sub	sp, #20
    699c:	4603      	mov	r3, r0
    699e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    69a2:	2300      	movs	r3, #0
    69a4:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    69a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69aa:	4a06      	ldr	r2, [pc, #24]	; (69c4 <Dio_Ipw_ReadPort+0x2c>)
    69ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b0:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    69b2:	9802      	ldr	r0, [sp, #8]
    69b4:	f000 f8be 	bl	6b34 <Gpio_Dio_Ip_ReadPins>
    69b8:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    69ba:	9b03      	ldr	r3, [sp, #12]
}
    69bc:	4618      	mov	r0, r3
    69be:	b005      	add	sp, #20
    69c0:	f85d fb04 	ldr.w	pc, [sp], #4
    69c4:	1fff8b24 	.word	0x1fff8b24

000069c8 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    69c8:	b500      	push	{lr}
    69ca:	b085      	sub	sp, #20
    69cc:	4603      	mov	r3, r0
    69ce:	9100      	str	r1, [sp, #0]
    69d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    69d4:	9b00      	ldr	r3, [sp, #0]
    69d6:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    69d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69dc:	4a05      	ldr	r2, [pc, #20]	; (69f4 <Dio_Ipw_WritePort+0x2c>)
    69de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e2:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    69e4:	9903      	ldr	r1, [sp, #12]
    69e6:	9802      	ldr	r0, [sp, #8]
    69e8:	f000 f875 	bl	6ad6 <Gpio_Dio_Ip_WritePins>
}
    69ec:	bf00      	nop
    69ee:	b005      	add	sp, #20
    69f0:	f85d fb04 	ldr.w	pc, [sp], #4
    69f4:	1fff8b24 	.word	0x1fff8b24

000069f8 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    69f8:	b500      	push	{lr}
    69fa:	b087      	sub	sp, #28
    69fc:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    69fe:	2300      	movs	r3, #0
    6a00:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6a02:	9b01      	ldr	r3, [sp, #4]
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	461a      	mov	r2, r3
    6a08:	4b0a      	ldr	r3, [pc, #40]	; (6a34 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a0e:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6a10:	9804      	ldr	r0, [sp, #16]
    6a12:	f000 f88f 	bl	6b34 <Gpio_Dio_Ip_ReadPins>
    6a16:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6a18:	9b01      	ldr	r3, [sp, #4]
    6a1a:	685a      	ldr	r2, [r3, #4]
    6a1c:	9b03      	ldr	r3, [sp, #12]
    6a1e:	4013      	ands	r3, r2
    6a20:	9a01      	ldr	r2, [sp, #4]
    6a22:	7852      	ldrb	r2, [r2, #1]
    6a24:	40d3      	lsrs	r3, r2
    6a26:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6a28:	9b05      	ldr	r3, [sp, #20]
}
    6a2a:	4618      	mov	r0, r3
    6a2c:	b007      	add	sp, #28
    6a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6a32:	bf00      	nop
    6a34:	1fff8b24 	.word	0x1fff8b24

00006a38 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6a38:	b500      	push	{lr}
    6a3a:	b087      	sub	sp, #28
    6a3c:	9001      	str	r0, [sp, #4]
    6a3e:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6a40:	9b01      	ldr	r3, [sp, #4]
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	461a      	mov	r2, r3
    6a46:	4b10      	ldr	r3, [pc, #64]	; (6a88 <Dio_Ipw_WriteChannelGroup+0x50>)
    6a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a4c:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	785b      	ldrb	r3, [r3, #1]
    6a52:	461a      	mov	r2, r3
    6a54:	9b00      	ldr	r3, [sp, #0]
    6a56:	fa03 f202 	lsl.w	r2, r3, r2
    6a5a:	9b01      	ldr	r3, [sp, #4]
    6a5c:	685b      	ldr	r3, [r3, #4]
    6a5e:	4013      	ands	r3, r2
    6a60:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6a62:	9904      	ldr	r1, [sp, #16]
    6a64:	9805      	ldr	r0, [sp, #20]
    6a66:	f000 f84a 	bl	6afe <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6a6a:	9b04      	ldr	r3, [sp, #16]
    6a6c:	43da      	mvns	r2, r3
    6a6e:	9b01      	ldr	r3, [sp, #4]
    6a70:	685b      	ldr	r3, [r3, #4]
    6a72:	4013      	ands	r3, r2
    6a74:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6a76:	9903      	ldr	r1, [sp, #12]
    6a78:	9805      	ldr	r0, [sp, #20]
    6a7a:	f000 f849 	bl	6b10 <Gpio_Dio_Ip_ClearPins>

}
    6a7e:	bf00      	nop
    6a80:	b007      	add	sp, #28
    6a82:	f85d fb04 	ldr.w	pc, [sp], #4
    6a86:	bf00      	nop
    6a88:	1fff8b24 	.word	0x1fff8b24

00006a8c <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6a8c:	b500      	push	{lr}
    6a8e:	b087      	sub	sp, #28
    6a90:	9003      	str	r0, [sp, #12]
    6a92:	9102      	str	r1, [sp, #8]
    6a94:	4613      	mov	r3, r2
    6a96:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6a9a:	f00b fbb1 	bl	12200 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6a9e:	9b03      	ldr	r3, [sp, #12]
    6aa0:	681b      	ldr	r3, [r3, #0]
    6aa2:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6aa4:	2201      	movs	r2, #1
    6aa6:	9b02      	ldr	r3, [sp, #8]
    6aa8:	fa02 f303 	lsl.w	r3, r2, r3
    6aac:	43db      	mvns	r3, r3
    6aae:	9a05      	ldr	r2, [sp, #20]
    6ab0:	4013      	ands	r3, r2
    6ab2:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6ab4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ab8:	9b02      	ldr	r3, [sp, #8]
    6aba:	fa02 f303 	lsl.w	r3, r2, r3
    6abe:	9a05      	ldr	r2, [sp, #20]
    6ac0:	4313      	orrs	r3, r2
    6ac2:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6ac4:	9b03      	ldr	r3, [sp, #12]
    6ac6:	9a05      	ldr	r2, [sp, #20]
    6ac8:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6aca:	f00b fbc5 	bl	12258 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6ace:	bf00      	nop
    6ad0:	b007      	add	sp, #28
    6ad2:	f85d fb04 	ldr.w	pc, [sp], #4

00006ad6 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6ad6:	b082      	sub	sp, #8
    6ad8:	9001      	str	r0, [sp, #4]
    6ada:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6adc:	9b01      	ldr	r3, [sp, #4]
    6ade:	9a00      	ldr	r2, [sp, #0]
    6ae0:	601a      	str	r2, [r3, #0]
}
    6ae2:	bf00      	nop
    6ae4:	b002      	add	sp, #8
    6ae6:	4770      	bx	lr

00006ae8 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6ae8:	b084      	sub	sp, #16
    6aea:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6aec:	2300      	movs	r3, #0
    6aee:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	681b      	ldr	r3, [r3, #0]
    6af4:	9303      	str	r3, [sp, #12]
    return returnValue;
    6af6:	9b03      	ldr	r3, [sp, #12]
}
    6af8:	4618      	mov	r0, r3
    6afa:	b004      	add	sp, #16
    6afc:	4770      	bx	lr

00006afe <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6afe:	b082      	sub	sp, #8
    6b00:	9001      	str	r0, [sp, #4]
    6b02:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6b04:	9b01      	ldr	r3, [sp, #4]
    6b06:	9a00      	ldr	r2, [sp, #0]
    6b08:	605a      	str	r2, [r3, #4]
}
    6b0a:	bf00      	nop
    6b0c:	b002      	add	sp, #8
    6b0e:	4770      	bx	lr

00006b10 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6b10:	b082      	sub	sp, #8
    6b12:	9001      	str	r0, [sp, #4]
    6b14:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6b16:	9b01      	ldr	r3, [sp, #4]
    6b18:	9a00      	ldr	r2, [sp, #0]
    6b1a:	609a      	str	r2, [r3, #8]
}
    6b1c:	bf00      	nop
    6b1e:	b002      	add	sp, #8
    6b20:	4770      	bx	lr

00006b22 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6b22:	b082      	sub	sp, #8
    6b24:	9001      	str	r0, [sp, #4]
    6b26:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6b28:	9b01      	ldr	r3, [sp, #4]
    6b2a:	9a00      	ldr	r2, [sp, #0]
    6b2c:	60da      	str	r2, [r3, #12]
}
    6b2e:	bf00      	nop
    6b30:	b002      	add	sp, #8
    6b32:	4770      	bx	lr

00006b34 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6b34:	b084      	sub	sp, #16
    6b36:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6b38:	2300      	movs	r3, #0
    6b3a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6b3c:	9b01      	ldr	r3, [sp, #4]
    6b3e:	691b      	ldr	r3, [r3, #16]
    6b40:	9303      	str	r3, [sp, #12]
    return returnValue;
    6b42:	9b03      	ldr	r3, [sp, #12]
}
    6b44:	4618      	mov	r0, r3
    6b46:	b004      	add	sp, #16
    6b48:	4770      	bx	lr

00006b4a <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6b4a:	b084      	sub	sp, #16
    6b4c:	9001      	str	r0, [sp, #4]
    6b4e:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6b50:	2300      	movs	r3, #0
    6b52:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6b56:	9b01      	ldr	r3, [sp, #4]
    6b58:	691a      	ldr	r2, [r3, #16]
    6b5a:	2101      	movs	r1, #1
    6b5c:	9b00      	ldr	r3, [sp, #0]
    6b5e:	fa01 f303 	lsl.w	r3, r1, r3
    6b62:	401a      	ands	r2, r3
    6b64:	9b00      	ldr	r3, [sp, #0]
    6b66:	fa22 f303 	lsr.w	r3, r2, r3
    6b6a:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6b6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b72:	4618      	mov	r0, r3
    6b74:	b004      	add	sp, #16
    6b76:	4770      	bx	lr

00006b78 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    6b78:	b500      	push	{lr}
    6b7a:	b083      	sub	sp, #12
    6b7c:	4603      	mov	r3, r0
    6b7e:	460a      	mov	r2, r1
    6b80:	f88d 3007 	strb.w	r3, [sp, #7]
    6b84:	4613      	mov	r3, r2
    6b86:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    6b8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6b8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6b92:	2100      	movs	r1, #0
    6b94:	207b      	movs	r0, #123	; 0x7b
    6b96:	f00e f937 	bl	14e08 <Det_ReportRuntimeError>
}
    6b9a:	bf00      	nop
    6b9c:	b003      	add	sp, #12
    6b9e:	f85d fb04 	ldr.w	pc, [sp], #4

00006ba2 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6ba2:	b500      	push	{lr}
    6ba4:	b085      	sub	sp, #20
    6ba6:	4603      	mov	r3, r0
    6ba8:	460a      	mov	r2, r1
    6baa:	f88d 3007 	strb.w	r3, [sp, #7]
    6bae:	4613      	mov	r3, r2
    6bb0:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6bb4:	2300      	movs	r3, #0
    6bb6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bbe:	4a0c      	ldr	r2, [pc, #48]	; (6bf0 <Adc_ValidateNotBusyNoQueue+0x4e>)
    6bc0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6bc4:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6bc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d008      	beq.n	6be2 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6bd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6bd4:	210b      	movs	r1, #11
    6bd6:	4618      	mov	r0, r3
    6bd8:	f7ff ffce 	bl	6b78 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6bdc:	2301      	movs	r3, #1
    6bde:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6be2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6be6:	4618      	mov	r0, r3
    6be8:	b005      	add	sp, #20
    6bea:	f85d fb04 	ldr.w	pc, [sp], #4
    6bee:	bf00      	nop
    6bf0:	1fff8d48 	.word	0x1fff8d48

00006bf4 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    6bf4:	b500      	push	{lr}
    6bf6:	b085      	sub	sp, #20
    6bf8:	4603      	mov	r3, r0
    6bfa:	f8ad 3006 	strh.w	r3, [sp, #6]
    6bfe:	460b      	mov	r3, r1
    6c00:	f88d 3005 	strb.w	r3, [sp, #5]
    6c04:	4613      	mov	r3, r2
    6c06:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6c0a:	2301      	movs	r3, #1
    6c0c:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    6c10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6c14:	4917      	ldr	r1, [pc, #92]	; (6c74 <Adc_ValidateNotBusyNoPrio+0x80>)
    6c16:	4613      	mov	r3, r2
    6c18:	009b      	lsls	r3, r3, #2
    6c1a:	4413      	add	r3, r2
    6c1c:	009b      	lsls	r3, r3, #2
    6c1e:	440b      	add	r3, r1
    6c20:	681b      	ldr	r3, [r3, #0]
    6c22:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    6c24:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6c28:	f083 0301 	eor.w	r3, r3, #1
    6c2c:	b2db      	uxtb	r3, r3
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d007      	beq.n	6c42 <Adc_ValidateNotBusyNoPrio+0x4e>
    6c32:	9b02      	ldr	r3, [sp, #8]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d004      	beq.n	6c42 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6c38:	210b      	movs	r1, #11
    6c3a:	2002      	movs	r0, #2
    6c3c:	f7ff ff9c 	bl	6b78 <Adc_ReportDetRuntimeError>
    6c40:	e011      	b.n	6c66 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    6c42:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6c46:	2b00      	cmp	r3, #0
    6c48:	d00a      	beq.n	6c60 <Adc_ValidateNotBusyNoPrio+0x6c>
    6c4a:	9b02      	ldr	r3, [sp, #8]
    6c4c:	2b00      	cmp	r3, #0
    6c4e:	d007      	beq.n	6c60 <Adc_ValidateNotBusyNoPrio+0x6c>
    6c50:	9b02      	ldr	r3, [sp, #8]
    6c52:	2b03      	cmp	r3, #3
    6c54:	d004      	beq.n	6c60 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6c56:	210b      	movs	r1, #11
    6c58:	2002      	movs	r0, #2
    6c5a:	f7ff ff8d 	bl	6b78 <Adc_ReportDetRuntimeError>
    6c5e:	e002      	b.n	6c66 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6c60:	2300      	movs	r3, #0
    6c62:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    6c66:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c6a:	4618      	mov	r0, r3
    6c6c:	b005      	add	sp, #20
    6c6e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c72:	bf00      	nop
    6c74:	1fff8d20 	.word	0x1fff8d20

00006c78 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    6c78:	b500      	push	{lr}
    6c7a:	b087      	sub	sp, #28
    6c7c:	4603      	mov	r3, r0
    6c7e:	460a      	mov	r2, r1
    6c80:	f88d 3007 	strb.w	r3, [sp, #7]
    6c84:	4613      	mov	r3, r2
    6c86:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6c8a:	2300      	movs	r3, #0
    6c8c:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6c90:	2300      	movs	r3, #0
    6c92:	f8ad 3016 	strh.w	r3, [sp, #22]
    6c96:	e02c      	b.n	6cf2 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    6c98:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6c9c:	4a1d      	ldr	r2, [pc, #116]	; (6d14 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ca2:	685a      	ldr	r2, [r3, #4]
    6ca4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ca8:	2134      	movs	r1, #52	; 0x34
    6caa:	fb01 f303 	mul.w	r3, r1, r3
    6cae:	4413      	add	r3, r2
    6cb0:	881b      	ldrh	r3, [r3, #0]
    6cb2:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6cb6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6cba:	4917      	ldr	r1, [pc, #92]	; (6d18 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6cbc:	4613      	mov	r3, r2
    6cbe:	009b      	lsls	r3, r3, #2
    6cc0:	4413      	add	r3, r2
    6cc2:	009b      	lsls	r3, r3, #2
    6cc4:	440b      	add	r3, r1
    6cc6:	681b      	ldr	r3, [r3, #0]
    6cc8:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6cca:	9b03      	ldr	r3, [sp, #12]
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d00b      	beq.n	6ce8 <Adc_ValidateCheckGroupNotConversion+0x70>
    6cd0:	9b03      	ldr	r3, [sp, #12]
    6cd2:	2b03      	cmp	r3, #3
    6cd4:	d008      	beq.n	6ce8 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cda:	210b      	movs	r1, #11
    6cdc:	4618      	mov	r0, r3
    6cde:	f7ff ff4b 	bl	6b78 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    6ce2:	2301      	movs	r3, #1
    6ce4:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6ce8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cec:	3301      	adds	r3, #1
    6cee:	f8ad 3016 	strh.w	r3, [sp, #22]
    6cf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6cf6:	4a07      	ldr	r2, [pc, #28]	; (6d14 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cfc:	891b      	ldrh	r3, [r3, #8]
    6cfe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d02:	429a      	cmp	r2, r3
    6d04:	d3c8      	bcc.n	6c98 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    6d06:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    6d0a:	4618      	mov	r0, r3
    6d0c:	b007      	add	sp, #28
    6d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d12:	bf00      	nop
    6d14:	1fff8d1c 	.word	0x1fff8d1c
    6d18:	1fff8d20 	.word	0x1fff8d20

00006d1c <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    6d1c:	b500      	push	{lr}
    6d1e:	b085      	sub	sp, #20
    6d20:	4603      	mov	r3, r0
    6d22:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6d26:	2300      	movs	r3, #0
    6d28:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6d2c:	2301      	movs	r3, #1
    6d2e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6d32:	2300      	movs	r3, #0
    6d34:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d38:	2300      	movs	r3, #0
    6d3a:	f88d 300d 	strb.w	r3, [sp, #13]
    6d3e:	e01d      	b.n	6d7c <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6d40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d44:	4a1b      	ldr	r2, [pc, #108]	; (6db4 <Adc_ValidateDeInitNotBusy+0x98>)
    6d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d4a:	681a      	ldr	r2, [r3, #0]
    6d4c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d50:	4413      	add	r3, r2
    6d52:	7f9b      	ldrb	r3, [r3, #30]
    6d54:	2b01      	cmp	r3, #1
    6d56:	d10c      	bne.n	6d72 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6d58:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d5c:	2101      	movs	r1, #1
    6d5e:	4618      	mov	r0, r3
    6d60:	f7ff ff1f 	bl	6ba2 <Adc_ValidateNotBusyNoQueue>
    6d64:	4603      	mov	r3, r0
    6d66:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6d6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d6e:	2b01      	cmp	r3, #1
    6d70:	d009      	beq.n	6d86 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d72:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d76:	3301      	adds	r3, #1
    6d78:	f88d 300d 	strb.w	r3, [sp, #13]
    6d7c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d80:	2b01      	cmp	r3, #1
    6d82:	d9dd      	bls.n	6d40 <Adc_ValidateDeInitNotBusy+0x24>
    6d84:	e000      	b.n	6d88 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6d86:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6d88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d10b      	bne.n	6da8 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d94:	4619      	mov	r1, r3
    6d96:	2001      	movs	r0, #1
    6d98:	f7ff ff6e 	bl	6c78 <Adc_ValidateCheckGroupNotConversion>
    6d9c:	4603      	mov	r3, r0
    6d9e:	2b00      	cmp	r3, #0
    6da0:	d102      	bne.n	6da8 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6da2:	2300      	movs	r3, #0
    6da4:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6da8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6dac:	4618      	mov	r0, r3
    6dae:	b005      	add	sp, #20
    6db0:	f85d fb04 	ldr.w	pc, [sp], #4
    6db4:	1fff8d1c 	.word	0x1fff8d1c

00006db8 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6db8:	b500      	push	{lr}
    6dba:	b085      	sub	sp, #20
    6dbc:	4603      	mov	r3, r0
    6dbe:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6dc2:	2301      	movs	r3, #1
    6dc4:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6dc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6dcc:	490b      	ldr	r1, [pc, #44]	; (6dfc <Adc_ValidateSetupBufferNotBusy+0x44>)
    6dce:	4613      	mov	r3, r2
    6dd0:	009b      	lsls	r3, r3, #2
    6dd2:	4413      	add	r3, r2
    6dd4:	009b      	lsls	r3, r3, #2
    6dd6:	440b      	add	r3, r1
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d004      	beq.n	6de8 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6dde:	210b      	movs	r1, #11
    6de0:	200c      	movs	r0, #12
    6de2:	f7ff fec9 	bl	6b78 <Adc_ReportDetRuntimeError>
    6de6:	e002      	b.n	6dee <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6de8:	2300      	movs	r3, #0
    6dea:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6dee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6df2:	4618      	mov	r0, r3
    6df4:	b005      	add	sp, #20
    6df6:	f85d fb04 	ldr.w	pc, [sp], #4
    6dfa:	bf00      	nop
    6dfc:	1fff8d20 	.word	0x1fff8d20

00006e00 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6e00:	b500      	push	{lr}
    6e02:	b085      	sub	sp, #20
    6e04:	4603      	mov	r3, r0
    6e06:	460a      	mov	r2, r1
    6e08:	f8ad 3006 	strh.w	r3, [sp, #6]
    6e0c:	4613      	mov	r3, r2
    6e0e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6e12:	2300      	movs	r3, #0
    6e14:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6e18:	2300      	movs	r3, #0
    6e1a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6e1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e22:	4a32      	ldr	r2, [pc, #200]	; (6eec <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e28:	68da      	ldr	r2, [r3, #12]
    6e2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6e2e:	005b      	lsls	r3, r3, #1
    6e30:	4413      	add	r3, r2
    6e32:	881b      	ldrh	r3, [r3, #0]
    6e34:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6e38:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e3c:	4a2b      	ldr	r2, [pc, #172]	; (6eec <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e42:	685a      	ldr	r2, [r3, #4]
    6e44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e48:	2134      	movs	r1, #52	; 0x34
    6e4a:	fb01 f303 	mul.w	r3, r1, r3
    6e4e:	4413      	add	r3, r2
    6e50:	689b      	ldr	r3, [r3, #8]
    6e52:	2b00      	cmp	r3, #0
    6e54:	d02c      	beq.n	6eb0 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6e56:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e5a:	4a24      	ldr	r2, [pc, #144]	; (6eec <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e60:	685a      	ldr	r2, [r3, #4]
    6e62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e66:	2134      	movs	r1, #52	; 0x34
    6e68:	fb01 f303 	mul.w	r3, r1, r3
    6e6c:	4413      	add	r3, r2
    6e6e:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6e70:	2b01      	cmp	r3, #1
    6e72:	d120      	bne.n	6eb6 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6e74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e78:	4a1c      	ldr	r2, [pc, #112]	; (6eec <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e7e:	685a      	ldr	r2, [r3, #4]
    6e80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e84:	2134      	movs	r1, #52	; 0x34
    6e86:	fb01 f303 	mul.w	r3, r1, r3
    6e8a:	4413      	add	r3, r2
    6e8c:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6e8e:	2b01      	cmp	r3, #1
    6e90:	d111      	bne.n	6eb6 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6e92:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e96:	4a15      	ldr	r2, [pc, #84]	; (6eec <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e9c:	685a      	ldr	r2, [r3, #4]
    6e9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6ea2:	2134      	movs	r1, #52	; 0x34
    6ea4:	fb01 f303 	mul.w	r3, r1, r3
    6ea8:	4413      	add	r3, r2
    6eaa:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6eac:	2b00      	cmp	r3, #0
    6eae:	d102      	bne.n	6eb6 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6eb0:	2301      	movs	r3, #1
    6eb2:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6eb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6eba:	2b01      	cmp	r3, #1
    6ebc:	d104      	bne.n	6ec8 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6ebe:	210b      	movs	r1, #11
    6ec0:	2002      	movs	r0, #2
    6ec2:	f7ff fe59 	bl	6b78 <Adc_ReportDetRuntimeError>
    6ec6:	e00b      	b.n	6ee0 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6ec8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ecc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6ed0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ed4:	4618      	mov	r0, r3
    6ed6:	f7ff fe8d 	bl	6bf4 <Adc_ValidateNotBusyNoPrio>
    6eda:	4603      	mov	r3, r0
    6edc:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6ee0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ee4:	4618      	mov	r0, r3
    6ee6:	b005      	add	sp, #20
    6ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    6eec:	1fff8d1c 	.word	0x1fff8d1c

00006ef0 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6ef0:	b500      	push	{lr}
    6ef2:	b085      	sub	sp, #20
    6ef4:	4603      	mov	r3, r0
    6ef6:	f88d 3007 	strb.w	r3, [sp, #7]
    6efa:	460b      	mov	r3, r1
    6efc:	f8ad 3004 	strh.w	r3, [sp, #4]
    6f00:	4613      	mov	r3, r2
    6f02:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6f06:	2300      	movs	r3, #0
    6f08:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f10:	2b0b      	cmp	r3, #11
    6f12:	d03b      	beq.n	6f8c <Adc_ValidateStateNotIdle+0x9c>
    6f14:	2b0b      	cmp	r3, #11
    6f16:	dc4e      	bgt.n	6fb6 <Adc_ValidateStateNotIdle+0xc6>
    6f18:	2b03      	cmp	r3, #3
    6f1a:	d022      	beq.n	6f62 <Adc_ValidateStateNotIdle+0x72>
    6f1c:	2b04      	cmp	r3, #4
    6f1e:	d14a      	bne.n	6fb6 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6f20:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f24:	492a      	ldr	r1, [pc, #168]	; (6fd0 <Adc_ValidateStateNotIdle+0xe0>)
    6f26:	4613      	mov	r3, r2
    6f28:	009b      	lsls	r3, r3, #2
    6f2a:	4413      	add	r3, r2
    6f2c:	009b      	lsls	r3, r3, #2
    6f2e:	440b      	add	r3, r1
    6f30:	681b      	ldr	r3, [r3, #0]
    6f32:	2b00      	cmp	r3, #0
    6f34:	d141      	bne.n	6fba <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6f36:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f3a:	4925      	ldr	r1, [pc, #148]	; (6fd0 <Adc_ValidateStateNotIdle+0xe0>)
    6f3c:	4613      	mov	r3, r2
    6f3e:	009b      	lsls	r3, r3, #2
    6f40:	4413      	add	r3, r2
    6f42:	009b      	lsls	r3, r3, #2
    6f44:	440b      	add	r3, r1
    6f46:	3304      	adds	r3, #4
    6f48:	681b      	ldr	r3, [r3, #0]
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d135      	bne.n	6fba <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6f4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f52:	210c      	movs	r1, #12
    6f54:	4618      	mov	r0, r3
    6f56:	f7ff fe0f 	bl	6b78 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6f5a:	2301      	movs	r3, #1
    6f5c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6f60:	e02b      	b.n	6fba <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6f62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f66:	491a      	ldr	r1, [pc, #104]	; (6fd0 <Adc_ValidateStateNotIdle+0xe0>)
    6f68:	4613      	mov	r3, r2
    6f6a:	009b      	lsls	r3, r3, #2
    6f6c:	4413      	add	r3, r2
    6f6e:	009b      	lsls	r3, r3, #2
    6f70:	440b      	add	r3, r1
    6f72:	681b      	ldr	r3, [r3, #0]
    6f74:	2b00      	cmp	r3, #0
    6f76:	d122      	bne.n	6fbe <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f7c:	210c      	movs	r1, #12
    6f7e:	4618      	mov	r0, r3
    6f80:	f7ff fdfa 	bl	6b78 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6f84:	2301      	movs	r3, #1
    6f86:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6f8a:	e018      	b.n	6fbe <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6f8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6f90:	490f      	ldr	r1, [pc, #60]	; (6fd0 <Adc_ValidateStateNotIdle+0xe0>)
    6f92:	4613      	mov	r3, r2
    6f94:	009b      	lsls	r3, r3, #2
    6f96:	4413      	add	r3, r2
    6f98:	009b      	lsls	r3, r3, #2
    6f9a:	440b      	add	r3, r1
    6f9c:	681b      	ldr	r3, [r3, #0]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d10f      	bne.n	6fc2 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fa6:	210c      	movs	r1, #12
    6fa8:	4618      	mov	r0, r3
    6faa:	f7ff fde5 	bl	6b78 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6fae:	2301      	movs	r3, #1
    6fb0:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6fb4:	e005      	b.n	6fc2 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6fb6:	bf00      	nop
    6fb8:	e004      	b.n	6fc4 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6fba:	bf00      	nop
    6fbc:	e002      	b.n	6fc4 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6fbe:	bf00      	nop
    6fc0:	e000      	b.n	6fc4 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6fc2:	bf00      	nop
        }
    }

    return ValidState;
    6fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6fc8:	4618      	mov	r0, r3
    6fca:	b005      	add	sp, #20
    6fcc:	f85d fb04 	ldr.w	pc, [sp], #4
    6fd0:	1fff8d20 	.word	0x1fff8d20

00006fd4 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6fd4:	b084      	sub	sp, #16
    6fd6:	4603      	mov	r3, r0
    6fd8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6fdc:	2300      	movs	r3, #0
    6fde:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6fe2:	2300      	movs	r3, #0
    6fe4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6fe8:	2300      	movs	r3, #0
    6fea:	f8ad 300e 	strh.w	r3, [sp, #14]
    6fee:	e049      	b.n	7084 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6ff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ff4:	4a2a      	ldr	r2, [pc, #168]	; (70a0 <Adc_InitGroupsStatus+0xcc>)
    6ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ffa:	685a      	ldr	r2, [r3, #4]
    6ffc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7000:	2134      	movs	r1, #52	; 0x34
    7002:	fb01 f303 	mul.w	r3, r1, r3
    7006:	4413      	add	r3, r2
    7008:	881b      	ldrh	r3, [r3, #0]
    700a:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    700e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7012:	4924      	ldr	r1, [pc, #144]	; (70a4 <Adc_InitGroupsStatus+0xd0>)
    7014:	4613      	mov	r3, r2
    7016:	009b      	lsls	r3, r3, #2
    7018:	4413      	add	r3, r2
    701a:	009b      	lsls	r3, r3, #2
    701c:	440b      	add	r3, r1
    701e:	2200      	movs	r2, #0
    7020:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7022:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7026:	491f      	ldr	r1, [pc, #124]	; (70a4 <Adc_InitGroupsStatus+0xd0>)
    7028:	4613      	mov	r3, r2
    702a:	009b      	lsls	r3, r3, #2
    702c:	4413      	add	r3, r2
    702e:	009b      	lsls	r3, r3, #2
    7030:	440b      	add	r3, r1
    7032:	3304      	adds	r3, #4
    7034:	2200      	movs	r2, #0
    7036:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7038:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    703c:	4919      	ldr	r1, [pc, #100]	; (70a4 <Adc_InitGroupsStatus+0xd0>)
    703e:	4613      	mov	r3, r2
    7040:	009b      	lsls	r3, r3, #2
    7042:	4413      	add	r3, r2
    7044:	009b      	lsls	r3, r3, #2
    7046:	440b      	add	r3, r1
    7048:	3308      	adds	r3, #8
    704a:	2200      	movs	r2, #0
    704c:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    704e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7052:	4914      	ldr	r1, [pc, #80]	; (70a4 <Adc_InitGroupsStatus+0xd0>)
    7054:	4613      	mov	r3, r2
    7056:	009b      	lsls	r3, r3, #2
    7058:	4413      	add	r3, r2
    705a:	009b      	lsls	r3, r3, #2
    705c:	440b      	add	r3, r1
    705e:	330c      	adds	r3, #12
    7060:	2200      	movs	r2, #0
    7062:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7064:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7068:	490e      	ldr	r1, [pc, #56]	; (70a4 <Adc_InitGroupsStatus+0xd0>)
    706a:	4613      	mov	r3, r2
    706c:	009b      	lsls	r3, r3, #2
    706e:	4413      	add	r3, r2
    7070:	009b      	lsls	r3, r3, #2
    7072:	440b      	add	r3, r1
    7074:	3310      	adds	r3, #16
    7076:	2200      	movs	r2, #0
    7078:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    707a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    707e:	3301      	adds	r3, #1
    7080:	f8ad 300e 	strh.w	r3, [sp, #14]
    7084:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7088:	4a05      	ldr	r2, [pc, #20]	; (70a0 <Adc_InitGroupsStatus+0xcc>)
    708a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    708e:	891b      	ldrh	r3, [r3, #8]
    7090:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7094:	429a      	cmp	r2, r3
    7096:	d3ab      	bcc.n	6ff0 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7098:	bf00      	nop
    709a:	bf00      	nop
    709c:	b004      	add	sp, #16
    709e:	4770      	bx	lr
    70a0:	1fff8d1c 	.word	0x1fff8d1c
    70a4:	1fff8d20 	.word	0x1fff8d20

000070a8 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    70a8:	b084      	sub	sp, #16
    70aa:	4603      	mov	r3, r0
    70ac:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    70b0:	2300      	movs	r3, #0
    70b2:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    70b6:	2300      	movs	r3, #0
    70b8:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    70bc:	2300      	movs	r3, #0
    70be:	f88d 300f 	strb.w	r3, [sp, #15]
    70c2:	e035      	b.n	7130 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    70c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70c8:	4a1d      	ldr	r2, [pc, #116]	; (7140 <Adc_InitUnitStatus+0x98>)
    70ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ce:	681a      	ldr	r2, [r3, #0]
    70d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70d4:	4413      	add	r3, r2
    70d6:	7f9b      	ldrb	r3, [r3, #30]
    70d8:	2b01      	cmp	r3, #1
    70da:	d124      	bne.n	7126 <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    70dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70e0:	4a18      	ldr	r2, [pc, #96]	; (7144 <Adc_InitUnitStatus+0x9c>)
    70e2:	2100      	movs	r1, #0
    70e4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    70e8:	2300      	movs	r3, #0
    70ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    70ee:	e00f      	b.n	7110 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    70f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    70f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70f8:	4912      	ldr	r1, [pc, #72]	; (7144 <Adc_InitUnitStatus+0x9c>)
    70fa:	0092      	lsls	r2, r2, #2
    70fc:	4413      	add	r3, r2
    70fe:	005b      	lsls	r3, r3, #1
    7100:	440b      	add	r3, r1
    7102:	2200      	movs	r2, #0
    7104:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7106:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    710a:	3301      	adds	r3, #1
    710c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7110:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7114:	2b01      	cmp	r3, #1
    7116:	d9eb      	bls.n	70f0 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7118:	f89d 300f 	ldrb.w	r3, [sp, #15]
    711c:	4a09      	ldr	r2, [pc, #36]	; (7144 <Adc_InitUnitStatus+0x9c>)
    711e:	00db      	lsls	r3, r3, #3
    7120:	4413      	add	r3, r2
    7122:	2200      	movs	r2, #0
    7124:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7126:	f89d 300f 	ldrb.w	r3, [sp, #15]
    712a:	3301      	adds	r3, #1
    712c:	f88d 300f 	strb.w	r3, [sp, #15]
    7130:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7134:	2b01      	cmp	r3, #1
    7136:	d9c5      	bls.n	70c4 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7138:	bf00      	nop
    713a:	bf00      	nop
    713c:	b004      	add	sp, #16
    713e:	4770      	bx	lr
    7140:	1fff8d1c 	.word	0x1fff8d1c
    7144:	1fff8d48 	.word	0x1fff8d48

00007148 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7148:	b084      	sub	sp, #16
    714a:	9001      	str	r0, [sp, #4]
    714c:	460b      	mov	r3, r1
    714e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7152:	2300      	movs	r3, #0
    7154:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7158:	2301      	movs	r3, #1
    715a:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    715e:	9b01      	ldr	r3, [sp, #4]
    7160:	7c1b      	ldrb	r3, [r3, #16]
    7162:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7166:	429a      	cmp	r2, r3
    7168:	d11c      	bne.n	71a4 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    716a:	2300      	movs	r3, #0
    716c:	f88d 300f 	strb.w	r3, [sp, #15]
    7170:	e012      	b.n	7198 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7172:	9b01      	ldr	r3, [sp, #4]
    7174:	695a      	ldr	r2, [r3, #20]
    7176:	f89d 300f 	ldrb.w	r3, [sp, #15]
    717a:	4413      	add	r3, r2
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7182:	429a      	cmp	r2, r3
    7184:	d103      	bne.n	718e <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7186:	2300      	movs	r3, #0
    7188:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    718c:	e00a      	b.n	71a4 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    718e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7192:	3301      	adds	r3, #1
    7194:	f88d 300f 	strb.w	r3, [sp, #15]
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	7e1b      	ldrb	r3, [r3, #24]
    719c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    71a0:	429a      	cmp	r2, r3
    71a2:	d3e6      	bcc.n	7172 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    71a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    71a8:	4618      	mov	r0, r3
    71aa:	b004      	add	sp, #16
    71ac:	4770      	bx	lr

000071ae <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    71ae:	b500      	push	{lr}
    71b0:	b085      	sub	sp, #20
    71b2:	4603      	mov	r3, r0
    71b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    71b8:	460b      	mov	r3, r1
    71ba:	f88d 3005 	strb.w	r3, [sp, #5]
    71be:	4613      	mov	r3, r2
    71c0:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    71c4:	2300      	movs	r3, #0
    71c6:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    71ca:	2300      	movs	r3, #0
    71cc:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    71d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71d4:	493e      	ldr	r1, [pc, #248]	; (72d0 <Adc_UpdateStatusStartConversion+0x122>)
    71d6:	4613      	mov	r3, r2
    71d8:	009b      	lsls	r3, r3, #2
    71da:	4413      	add	r3, r2
    71dc:	009b      	lsls	r3, r3, #2
    71de:	440b      	add	r3, r1
    71e0:	2201      	movs	r2, #1
    71e2:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    71e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71e8:	4939      	ldr	r1, [pc, #228]	; (72d0 <Adc_UpdateStatusStartConversion+0x122>)
    71ea:	4613      	mov	r3, r2
    71ec:	009b      	lsls	r3, r3, #2
    71ee:	4413      	add	r3, r2
    71f0:	009b      	lsls	r3, r3, #2
    71f2:	440b      	add	r3, r1
    71f4:	3308      	adds	r3, #8
    71f6:	2200      	movs	r2, #0
    71f8:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    71fa:	f007 f8ef 	bl	e3dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    71fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7202:	4a34      	ldr	r2, [pc, #208]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    7204:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7208:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    720c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7210:	2b00      	cmp	r3, #0
    7212:	d016      	beq.n	7242 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    7214:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7218:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    721c:	492d      	ldr	r1, [pc, #180]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    721e:	0092      	lsls	r2, r2, #2
    7220:	4413      	add	r3, r2
    7222:	005b      	lsls	r3, r3, #1
    7224:	440b      	add	r3, r1
    7226:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    722a:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    722c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7230:	4a28      	ldr	r2, [pc, #160]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    7232:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7236:	b292      	uxth	r2, r2
    7238:	3201      	adds	r2, #1
    723a:	b291      	uxth	r1, r2
    723c:	4a25      	ldr	r2, [pc, #148]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    723e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7242:	f007 f8f7 	bl	e434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7246:	f007 f8c9 	bl	e3dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    724a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    724e:	4a21      	ldr	r2, [pc, #132]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    7250:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7254:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7258:	f89d 3005 	ldrb.w	r3, [sp, #5]
    725c:	4a1d      	ldr	r2, [pc, #116]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    725e:	00db      	lsls	r3, r3, #3
    7260:	4413      	add	r3, r2
    7262:	885b      	ldrh	r3, [r3, #2]
    7264:	b29b      	uxth	r3, r3
    7266:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    726a:	429a      	cmp	r2, r3
    726c:	d003      	beq.n	7276 <Adc_UpdateStatusStartConversion+0xc8>
    726e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7272:	2b00      	cmp	r3, #0
    7274:	d125      	bne.n	72c2 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7276:	f89d 3005 	ldrb.w	r3, [sp, #5]
    727a:	4a16      	ldr	r2, [pc, #88]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    727c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7280:	b29b      	uxth	r3, r3
    7282:	2b00      	cmp	r3, #0
    7284:	d112      	bne.n	72ac <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7286:	f89d 3005 	ldrb.w	r3, [sp, #5]
    728a:	4a12      	ldr	r2, [pc, #72]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    728c:	00db      	lsls	r3, r3, #3
    728e:	4413      	add	r3, r2
    7290:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7294:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7296:	f89d 3005 	ldrb.w	r3, [sp, #5]
    729a:	4a0e      	ldr	r2, [pc, #56]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    729c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    72a0:	b292      	uxth	r2, r2
    72a2:	3201      	adds	r2, #1
    72a4:	b291      	uxth	r1, r2
    72a6:	4a0b      	ldr	r2, [pc, #44]	; (72d4 <Adc_UpdateStatusStartConversion+0x126>)
    72a8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    72ac:	f007 f8c2 	bl	e434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    72b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    72b8:	4611      	mov	r1, r2
    72ba:	4618      	mov	r0, r3
    72bc:	f002 fbf2 	bl	9aa4 <Adc_Ipw_StartNormalConversion>
    72c0:	e002      	b.n	72c8 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    72c2:	f007 f8b7 	bl	e434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    72c6:	bf00      	nop
    72c8:	bf00      	nop
    72ca:	b005      	add	sp, #20
    72cc:	f85d fb04 	ldr.w	pc, [sp], #4
    72d0:	1fff8d20 	.word	0x1fff8d20
    72d4:	1fff8d48 	.word	0x1fff8d48

000072d8 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    72d8:	b500      	push	{lr}
    72da:	b085      	sub	sp, #20
    72dc:	9001      	str	r0, [sp, #4]
    72de:	4608      	mov	r0, r1
    72e0:	4611      	mov	r1, r2
    72e2:	461a      	mov	r2, r3
    72e4:	4603      	mov	r3, r0
    72e6:	f8ad 3002 	strh.w	r3, [sp, #2]
    72ea:	460b      	mov	r3, r1
    72ec:	f88d 3001 	strb.w	r3, [sp, #1]
    72f0:	4613      	mov	r3, r2
    72f2:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    72f6:	2300      	movs	r3, #0
    72f8:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    72fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7300:	4a26      	ldr	r2, [pc, #152]	; (739c <Adc_StopSwGroupConversion+0xc4>)
    7302:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7306:	b29a      	uxth	r2, r3
    7308:	9b01      	ldr	r3, [sp, #4]
    730a:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    730c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7310:	4a22      	ldr	r2, [pc, #136]	; (739c <Adc_StopSwGroupConversion+0xc4>)
    7312:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7316:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    731a:	2300      	movs	r3, #0
    731c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7320:	e02f      	b.n	7382 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    7322:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7326:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    732a:	491c      	ldr	r1, [pc, #112]	; (739c <Adc_StopSwGroupConversion+0xc4>)
    732c:	0092      	lsls	r2, r2, #2
    732e:	4413      	add	r3, r2
    7330:	005b      	lsls	r3, r3, #1
    7332:	440b      	add	r3, r1
    7334:	885b      	ldrh	r3, [r3, #2]
    7336:	b29b      	uxth	r3, r3
    7338:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    733c:	429a      	cmp	r2, r3
    733e:	d11b      	bne.n	7378 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    7340:	9b01      	ldr	r3, [sp, #4]
    7342:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7346:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    7348:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    734c:	2b00      	cmp	r3, #0
    734e:	d10b      	bne.n	7368 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7350:	f89d 2000 	ldrb.w	r2, [sp]
    7354:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7358:	f89d 3001 	ldrb.w	r3, [sp, #1]
    735c:	4618      	mov	r0, r3
    735e:	f002 fc4b 	bl	9bf8 <Adc_Ipw_StopCurrentConversion>
    7362:	4603      	mov	r3, r0
    7364:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    7368:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    736c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7370:	4611      	mov	r1, r2
    7372:	4618      	mov	r0, r3
    7374:	f001 fd88 	bl	8e88 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7378:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    737c:	3301      	adds	r3, #1
    737e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7382:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7386:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    738a:	429a      	cmp	r2, r3
    738c:	d3c9      	bcc.n	7322 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    738e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7392:	4618      	mov	r0, r3
    7394:	b005      	add	sp, #20
    7396:	f85d fb04 	ldr.w	pc, [sp], #4
    739a:	bf00      	nop
    739c:	1fff8d48 	.word	0x1fff8d48

000073a0 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    73a0:	b500      	push	{lr}
    73a2:	b089      	sub	sp, #36	; 0x24
    73a4:	4603      	mov	r3, r0
    73a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    73aa:	460b      	mov	r3, r1
    73ac:	f88d 3005 	strb.w	r3, [sp, #5]
    73b0:	4613      	mov	r3, r2
    73b2:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    73b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73ba:	4a4f      	ldr	r2, [pc, #316]	; (74f8 <Adc_UpdateStatusStopConversion+0x158>)
    73bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c0:	68da      	ldr	r2, [r3, #12]
    73c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73c6:	005b      	lsls	r3, r3, #1
    73c8:	4413      	add	r3, r2
    73ca:	881b      	ldrh	r3, [r3, #0]
    73cc:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    73d0:	2300      	movs	r3, #0
    73d2:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    73d6:	2300      	movs	r3, #0
    73d8:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    73dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73e0:	4a45      	ldr	r2, [pc, #276]	; (74f8 <Adc_UpdateStatusStopConversion+0x158>)
    73e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e6:	685a      	ldr	r2, [r3, #4]
    73e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    73ec:	2134      	movs	r1, #52	; 0x34
    73ee:	fb01 f303 	mul.w	r3, r1, r3
    73f2:	4413      	add	r3, r2
    73f4:	689b      	ldr	r3, [r3, #8]
    73f6:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    73f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73fc:	4a3e      	ldr	r2, [pc, #248]	; (74f8 <Adc_UpdateStatusStopConversion+0x158>)
    73fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7402:	685a      	ldr	r2, [r3, #4]
    7404:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7408:	2134      	movs	r1, #52	; 0x34
    740a:	fb01 f303 	mul.w	r3, r1, r3
    740e:	4413      	add	r3, r2
    7410:	685b      	ldr	r3, [r3, #4]
    7412:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    7414:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7418:	4a37      	ldr	r2, [pc, #220]	; (74f8 <Adc_UpdateStatusStopConversion+0x158>)
    741a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    741e:	685a      	ldr	r2, [r3, #4]
    7420:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7424:	2134      	movs	r1, #52	; 0x34
    7426:	fb01 f303 	mul.w	r3, r1, r3
    742a:	4413      	add	r3, r2
    742c:	699b      	ldr	r3, [r3, #24]
    742e:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7430:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7434:	4931      	ldr	r1, [pc, #196]	; (74fc <Adc_UpdateStatusStopConversion+0x15c>)
    7436:	4613      	mov	r3, r2
    7438:	009b      	lsls	r3, r3, #2
    743a:	4413      	add	r3, r2
    743c:	009b      	lsls	r3, r3, #2
    743e:	440b      	add	r3, r1
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    7444:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7448:	492c      	ldr	r1, [pc, #176]	; (74fc <Adc_UpdateStatusStopConversion+0x15c>)
    744a:	4613      	mov	r3, r2
    744c:	009b      	lsls	r3, r3, #2
    744e:	4413      	add	r3, r2
    7450:	009b      	lsls	r3, r3, #2
    7452:	440b      	add	r3, r1
    7454:	3308      	adds	r3, #8
    7456:	2200      	movs	r2, #0
    7458:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    745a:	9b06      	ldr	r3, [sp, #24]
    745c:	2b00      	cmp	r3, #0
    745e:	d005      	beq.n	746c <Adc_UpdateStatusStopConversion+0xcc>
    7460:	9b05      	ldr	r3, [sp, #20]
    7462:	2b01      	cmp	r3, #1
    7464:	d110      	bne.n	7488 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    7466:	9b04      	ldr	r3, [sp, #16]
    7468:	2b00      	cmp	r3, #0
    746a:	d10d      	bne.n	7488 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    746c:	9b03      	ldr	r3, [sp, #12]
    746e:	2b03      	cmp	r3, #3
    7470:	d10a      	bne.n	7488 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7472:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7476:	4921      	ldr	r1, [pc, #132]	; (74fc <Adc_UpdateStatusStopConversion+0x15c>)
    7478:	4613      	mov	r3, r2
    747a:	009b      	lsls	r3, r3, #2
    747c:	4413      	add	r3, r2
    747e:	009b      	lsls	r3, r3, #2
    7480:	440b      	add	r3, r1
    7482:	2200      	movs	r2, #0
    7484:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    7486:	e032      	b.n	74ee <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    7488:	f89d 3004 	ldrb.w	r3, [sp, #4]
    748c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7490:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7494:	f10d 000a 	add.w	r0, sp, #10
    7498:	f7ff ff1e 	bl	72d8 <Adc_StopSwGroupConversion>
    749c:	4603      	mov	r3, r0
    749e:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    74a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74a6:	4915      	ldr	r1, [pc, #84]	; (74fc <Adc_UpdateStatusStopConversion+0x15c>)
    74a8:	4613      	mov	r3, r2
    74aa:	009b      	lsls	r3, r3, #2
    74ac:	4413      	add	r3, r2
    74ae:	009b      	lsls	r3, r3, #2
    74b0:	440b      	add	r3, r1
    74b2:	2200      	movs	r2, #0
    74b4:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    74b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74ba:	2b00      	cmp	r3, #0
    74bc:	d10f      	bne.n	74de <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    74be:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74c2:	4a0f      	ldr	r2, [pc, #60]	; (7500 <Adc_UpdateStatusStopConversion+0x160>)
    74c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    74c8:	b29b      	uxth	r3, r3
    74ca:	2b00      	cmp	r3, #0
    74cc:	d007      	beq.n	74de <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    74ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
    74d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74d6:	4611      	mov	r1, r2
    74d8:	4618      	mov	r0, r3
    74da:	f002 fae3 	bl	9aa4 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    74de:	f89d 301d 	ldrb.w	r3, [sp, #29]
    74e2:	2b01      	cmp	r3, #1
    74e4:	d103      	bne.n	74ee <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    74e6:	212b      	movs	r1, #43	; 0x2b
    74e8:	2003      	movs	r0, #3
    74ea:	f7ff fb45 	bl	6b78 <Adc_ReportDetRuntimeError>
}
    74ee:	bf00      	nop
    74f0:	b009      	add	sp, #36	; 0x24
    74f2:	f85d fb04 	ldr.w	pc, [sp], #4
    74f6:	bf00      	nop
    74f8:	1fff8d1c 	.word	0x1fff8d1c
    74fc:	1fff8d20 	.word	0x1fff8d20
    7500:	1fff8d48 	.word	0x1fff8d48

00007504 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    7504:	b500      	push	{lr}
    7506:	b085      	sub	sp, #20
    7508:	4603      	mov	r3, r0
    750a:	f8ad 3006 	strh.w	r3, [sp, #6]
    750e:	460b      	mov	r3, r1
    7510:	f88d 3005 	strb.w	r3, [sp, #5]
    7514:	4613      	mov	r3, r2
    7516:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    751a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    751e:	4a18      	ldr	r2, [pc, #96]	; (7580 <Adc_UpdateStatusReadGroup+0x7c>)
    7520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7524:	68da      	ldr	r2, [r3, #12]
    7526:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    752a:	005b      	lsls	r3, r3, #1
    752c:	4413      	add	r3, r2
    752e:	881b      	ldrh	r3, [r3, #0]
    7530:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    7534:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7538:	4a11      	ldr	r2, [pc, #68]	; (7580 <Adc_UpdateStatusReadGroup+0x7c>)
    753a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    753e:	685a      	ldr	r2, [r3, #4]
    7540:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7544:	2134      	movs	r1, #52	; 0x34
    7546:	fb01 f303 	mul.w	r3, r1, r3
    754a:	4413      	add	r3, r2
    754c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    7550:	2b01      	cmp	r3, #1
    7552:	d109      	bne.n	7568 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    7554:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7558:	f89d 1005 	ldrb.w	r1, [sp, #5]
    755c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7560:	4618      	mov	r0, r3
    7562:	f000 f80f 	bl	7584 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    7566:	e007      	b.n	7578 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    7568:	f89d 2004 	ldrb.w	r2, [sp, #4]
    756c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7570:	4611      	mov	r1, r2
    7572:	4618      	mov	r0, r3
    7574:	f000 f8e8 	bl	7748 <Adc_UpdateStatusReadGroupInt>
}
    7578:	bf00      	nop
    757a:	b005      	add	sp, #20
    757c:	f85d fb04 	ldr.w	pc, [sp], #4
    7580:	1fff8d1c 	.word	0x1fff8d1c

00007584 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    7584:	b500      	push	{lr}
    7586:	b085      	sub	sp, #20
    7588:	4603      	mov	r3, r0
    758a:	f8ad 3006 	strh.w	r3, [sp, #6]
    758e:	460b      	mov	r3, r1
    7590:	f88d 3005 	strb.w	r3, [sp, #5]
    7594:	4613      	mov	r3, r2
    7596:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    759a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    759e:	4a2c      	ldr	r2, [pc, #176]	; (7650 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    75a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75a4:	68da      	ldr	r2, [r3, #12]
    75a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75aa:	005b      	lsls	r3, r3, #1
    75ac:	4413      	add	r3, r2
    75ae:	881b      	ldrh	r3, [r3, #0]
    75b0:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    75b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75b8:	4926      	ldr	r1, [pc, #152]	; (7654 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    75ba:	4613      	mov	r3, r2
    75bc:	009b      	lsls	r3, r3, #2
    75be:	4413      	add	r3, r2
    75c0:	009b      	lsls	r3, r3, #2
    75c2:	440b      	add	r3, r1
    75c4:	3304      	adds	r3, #4
    75c6:	2201      	movs	r2, #1
    75c8:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    75ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75ce:	2b00      	cmp	r3, #0
    75d0:	d03a      	beq.n	7648 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    75d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    75d6:	4a1e      	ldr	r2, [pc, #120]	; (7650 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    75d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75dc:	685a      	ldr	r2, [r3, #4]
    75de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75e2:	2134      	movs	r1, #52	; 0x34
    75e4:	fb01 f303 	mul.w	r3, r1, r3
    75e8:	4413      	add	r3, r2
    75ea:	689b      	ldr	r3, [r3, #8]
    75ec:	2b01      	cmp	r3, #1
    75ee:	d10a      	bne.n	7606 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    75f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75f4:	4917      	ldr	r1, [pc, #92]	; (7654 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    75f6:	4613      	mov	r3, r2
    75f8:	009b      	lsls	r3, r3, #2
    75fa:	4413      	add	r3, r2
    75fc:	009b      	lsls	r3, r3, #2
    75fe:	440b      	add	r3, r1
    7600:	2201      	movs	r2, #1
    7602:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    7604:	e020      	b.n	7648 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7606:	f89d 3004 	ldrb.w	r3, [sp, #4]
    760a:	4a11      	ldr	r2, [pc, #68]	; (7650 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    760c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7610:	685a      	ldr	r2, [r3, #4]
    7612:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7616:	2134      	movs	r1, #52	; 0x34
    7618:	fb01 f303 	mul.w	r3, r1, r3
    761c:	4413      	add	r3, r2
    761e:	695b      	ldr	r3, [r3, #20]
    7620:	2b00      	cmp	r3, #0
    7622:	d111      	bne.n	7648 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7624:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7628:	490a      	ldr	r1, [pc, #40]	; (7654 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    762a:	4613      	mov	r3, r2
    762c:	009b      	lsls	r3, r3, #2
    762e:	4413      	add	r3, r2
    7630:	009b      	lsls	r3, r3, #2
    7632:	440b      	add	r3, r1
    7634:	2200      	movs	r2, #0
    7636:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    7638:	f89d 2004 	ldrb.w	r2, [sp, #4]
    763c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7640:	4611      	mov	r1, r2
    7642:	4618      	mov	r0, r3
    7644:	f000 f808 	bl	7658 <Adc_UpdateSwQueueIndexNoInt>
}
    7648:	bf00      	nop
    764a:	b005      	add	sp, #20
    764c:	f85d fb04 	ldr.w	pc, [sp], #4
    7650:	1fff8d1c 	.word	0x1fff8d1c
    7654:	1fff8d20 	.word	0x1fff8d20

00007658 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    7658:	b500      	push	{lr}
    765a:	b085      	sub	sp, #20
    765c:	4603      	mov	r3, r0
    765e:	460a      	mov	r2, r1
    7660:	f8ad 3006 	strh.w	r3, [sp, #6]
    7664:	4613      	mov	r3, r2
    7666:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    766a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    766e:	4a34      	ldr	r2, [pc, #208]	; (7740 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    7670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7674:	68da      	ldr	r2, [r3, #12]
    7676:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    767a:	005b      	lsls	r3, r3, #1
    767c:	4413      	add	r3, r2
    767e:	881b      	ldrh	r3, [r3, #0]
    7680:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    7684:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7688:	4a2d      	ldr	r2, [pc, #180]	; (7740 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    768a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    768e:	685a      	ldr	r2, [r3, #4]
    7690:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7694:	2134      	movs	r1, #52	; 0x34
    7696:	fb01 f303 	mul.w	r3, r1, r3
    769a:	4413      	add	r3, r2
    769c:	789b      	ldrb	r3, [r3, #2]
    769e:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    76a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76a6:	4a27      	ldr	r2, [pc, #156]	; (7744 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    76a8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    76ac:	b29b      	uxth	r3, r3
    76ae:	2b00      	cmp	r3, #0
    76b0:	d041      	beq.n	7736 <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    76b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76b6:	4a23      	ldr	r2, [pc, #140]	; (7744 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    76b8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    76bc:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    76c0:	2300      	movs	r3, #0
    76c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    76c6:	e01c      	b.n	7702 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    76c8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    76cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76d0:	491c      	ldr	r1, [pc, #112]	; (7744 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    76d2:	0092      	lsls	r2, r2, #2
    76d4:	4413      	add	r3, r2
    76d6:	005b      	lsls	r3, r3, #1
    76d8:	440b      	add	r3, r1
    76da:	885b      	ldrh	r3, [r3, #2]
    76dc:	b29b      	uxth	r3, r3
    76de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76e2:	429a      	cmp	r2, r3
    76e4:	d108      	bne.n	76f8 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    76e6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    76ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76ee:	4611      	mov	r1, r2
    76f0:	4618      	mov	r0, r3
    76f2:	f001 fbc9 	bl	8e88 <Adc_Ipw_RemoveFromQueue>
                    break;
    76f6:	e00a      	b.n	770e <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    76f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76fc:	3301      	adds	r3, #1
    76fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    7702:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7706:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    770a:	429a      	cmp	r2, r3
    770c:	d3dc      	bcc.n	76c8 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    770e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7712:	2b00      	cmp	r3, #0
    7714:	d10f      	bne.n	7736 <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    7716:	f89d 300b 	ldrb.w	r3, [sp, #11]
    771a:	4a0a      	ldr	r2, [pc, #40]	; (7744 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    771c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7720:	b29b      	uxth	r3, r3
    7722:	2b00      	cmp	r3, #0
    7724:	d007      	beq.n	7736 <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    7726:	f89d 2005 	ldrb.w	r2, [sp, #5]
    772a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    772e:	4611      	mov	r1, r2
    7730:	4618      	mov	r0, r3
    7732:	f002 f9b7 	bl	9aa4 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    7736:	bf00      	nop
    7738:	b005      	add	sp, #20
    773a:	f85d fb04 	ldr.w	pc, [sp], #4
    773e:	bf00      	nop
    7740:	1fff8d1c 	.word	0x1fff8d1c
    7744:	1fff8d48 	.word	0x1fff8d48

00007748 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    7748:	b084      	sub	sp, #16
    774a:	4603      	mov	r3, r0
    774c:	460a      	mov	r2, r1
    774e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7752:	4613      	mov	r3, r2
    7754:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7758:	f89d 3005 	ldrb.w	r3, [sp, #5]
    775c:	4a47      	ldr	r2, [pc, #284]	; (787c <Adc_UpdateStatusReadGroupInt+0x134>)
    775e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7762:	68da      	ldr	r2, [r3, #12]
    7764:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7768:	005b      	lsls	r3, r3, #1
    776a:	4413      	add	r3, r2
    776c:	881b      	ldrh	r3, [r3, #0]
    776e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7772:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7776:	4942      	ldr	r1, [pc, #264]	; (7880 <Adc_UpdateStatusReadGroupInt+0x138>)
    7778:	4613      	mov	r3, r2
    777a:	009b      	lsls	r3, r3, #2
    777c:	4413      	add	r3, r2
    777e:	009b      	lsls	r3, r3, #2
    7780:	440b      	add	r3, r1
    7782:	681b      	ldr	r3, [r3, #0]
    7784:	2b02      	cmp	r3, #2
    7786:	d10a      	bne.n	779e <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7788:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    778c:	493c      	ldr	r1, [pc, #240]	; (7880 <Adc_UpdateStatusReadGroupInt+0x138>)
    778e:	4613      	mov	r3, r2
    7790:	009b      	lsls	r3, r3, #2
    7792:	4413      	add	r3, r2
    7794:	009b      	lsls	r3, r3, #2
    7796:	440b      	add	r3, r1
    7798:	2201      	movs	r2, #1
    779a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    779c:	e06a      	b.n	7874 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    779e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77a2:	4937      	ldr	r1, [pc, #220]	; (7880 <Adc_UpdateStatusReadGroupInt+0x138>)
    77a4:	4613      	mov	r3, r2
    77a6:	009b      	lsls	r3, r3, #2
    77a8:	4413      	add	r3, r2
    77aa:	009b      	lsls	r3, r3, #2
    77ac:	440b      	add	r3, r1
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	2b03      	cmp	r3, #3
    77b2:	d15f      	bne.n	7874 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    77b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77b8:	4a30      	ldr	r2, [pc, #192]	; (787c <Adc_UpdateStatusReadGroupInt+0x134>)
    77ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77be:	685a      	ldr	r2, [r3, #4]
    77c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    77c4:	2134      	movs	r1, #52	; 0x34
    77c6:	fb01 f303 	mul.w	r3, r1, r3
    77ca:	4413      	add	r3, r2
    77cc:	695b      	ldr	r3, [r3, #20]
    77ce:	2b00      	cmp	r3, #0
    77d0:	d150      	bne.n	7874 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    77d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77d6:	4a29      	ldr	r2, [pc, #164]	; (787c <Adc_UpdateStatusReadGroupInt+0x134>)
    77d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77dc:	685a      	ldr	r2, [r3, #4]
    77de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    77e2:	2134      	movs	r1, #52	; 0x34
    77e4:	fb01 f303 	mul.w	r3, r1, r3
    77e8:	4413      	add	r3, r2
    77ea:	689b      	ldr	r3, [r3, #8]
    77ec:	2b00      	cmp	r3, #0
    77ee:	d02c      	beq.n	784a <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    77f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77f4:	4a21      	ldr	r2, [pc, #132]	; (787c <Adc_UpdateStatusReadGroupInt+0x134>)
    77f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77fa:	685a      	ldr	r2, [r3, #4]
    77fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7800:	2134      	movs	r1, #52	; 0x34
    7802:	fb01 f303 	mul.w	r3, r1, r3
    7806:	4413      	add	r3, r2
    7808:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    780a:	2b01      	cmp	r3, #1
    780c:	d128      	bne.n	7860 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    780e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7812:	4a1a      	ldr	r2, [pc, #104]	; (787c <Adc_UpdateStatusReadGroupInt+0x134>)
    7814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7818:	685a      	ldr	r2, [r3, #4]
    781a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    781e:	2134      	movs	r1, #52	; 0x34
    7820:	fb01 f303 	mul.w	r3, r1, r3
    7824:	4413      	add	r3, r2
    7826:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7828:	2b01      	cmp	r3, #1
    782a:	d119      	bne.n	7860 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    782c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7830:	4a12      	ldr	r2, [pc, #72]	; (787c <Adc_UpdateStatusReadGroupInt+0x134>)
    7832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7836:	685a      	ldr	r2, [r3, #4]
    7838:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    783c:	2134      	movs	r1, #52	; 0x34
    783e:	fb01 f303 	mul.w	r3, r1, r3
    7842:	4413      	add	r3, r2
    7844:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7846:	2b00      	cmp	r3, #0
    7848:	d10a      	bne.n	7860 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    784a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    784e:	490c      	ldr	r1, [pc, #48]	; (7880 <Adc_UpdateStatusReadGroupInt+0x138>)
    7850:	4613      	mov	r3, r2
    7852:	009b      	lsls	r3, r3, #2
    7854:	4413      	add	r3, r2
    7856:	009b      	lsls	r3, r3, #2
    7858:	440b      	add	r3, r1
    785a:	2200      	movs	r2, #0
    785c:	601a      	str	r2, [r3, #0]
}
    785e:	e009      	b.n	7874 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7860:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7864:	4906      	ldr	r1, [pc, #24]	; (7880 <Adc_UpdateStatusReadGroupInt+0x138>)
    7866:	4613      	mov	r3, r2
    7868:	009b      	lsls	r3, r3, #2
    786a:	4413      	add	r3, r2
    786c:	009b      	lsls	r3, r3, #2
    786e:	440b      	add	r3, r1
    7870:	2201      	movs	r2, #1
    7872:	601a      	str	r2, [r3, #0]
}
    7874:	bf00      	nop
    7876:	b004      	add	sp, #16
    7878:	4770      	bx	lr
    787a:	bf00      	nop
    787c:	1fff8d1c 	.word	0x1fff8d1c
    7880:	1fff8d20 	.word	0x1fff8d20

00007884 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    7884:	b084      	sub	sp, #16
    7886:	4603      	mov	r3, r0
    7888:	460a      	mov	r2, r1
    788a:	f8ad 3006 	strh.w	r3, [sp, #6]
    788e:	4613      	mov	r3, r2
    7890:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7894:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7898:	4a46      	ldr	r2, [pc, #280]	; (79b4 <Adc_UpdateStatusAfterGetStream+0x130>)
    789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    789e:	68da      	ldr	r2, [r3, #12]
    78a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78a4:	005b      	lsls	r3, r3, #1
    78a6:	4413      	add	r3, r2
    78a8:	881b      	ldrh	r3, [r3, #0]
    78aa:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    78ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    78b2:	4941      	ldr	r1, [pc, #260]	; (79b8 <Adc_UpdateStatusAfterGetStream+0x134>)
    78b4:	4613      	mov	r3, r2
    78b6:	009b      	lsls	r3, r3, #2
    78b8:	4413      	add	r3, r2
    78ba:	009b      	lsls	r3, r3, #2
    78bc:	440b      	add	r3, r1
    78be:	681b      	ldr	r3, [r3, #0]
    78c0:	2b02      	cmp	r3, #2
    78c2:	d109      	bne.n	78d8 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    78c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    78c8:	493b      	ldr	r1, [pc, #236]	; (79b8 <Adc_UpdateStatusAfterGetStream+0x134>)
    78ca:	4613      	mov	r3, r2
    78cc:	009b      	lsls	r3, r3, #2
    78ce:	4413      	add	r3, r2
    78d0:	009b      	lsls	r3, r3, #2
    78d2:	440b      	add	r3, r1
    78d4:	2201      	movs	r2, #1
    78d6:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    78d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    78dc:	4936      	ldr	r1, [pc, #216]	; (79b8 <Adc_UpdateStatusAfterGetStream+0x134>)
    78de:	4613      	mov	r3, r2
    78e0:	009b      	lsls	r3, r3, #2
    78e2:	4413      	add	r3, r2
    78e4:	009b      	lsls	r3, r3, #2
    78e6:	440b      	add	r3, r1
    78e8:	681b      	ldr	r3, [r3, #0]
    78ea:	2b03      	cmp	r3, #3
    78ec:	d15f      	bne.n	79ae <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    78ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    78f2:	4a30      	ldr	r2, [pc, #192]	; (79b4 <Adc_UpdateStatusAfterGetStream+0x130>)
    78f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f8:	685a      	ldr	r2, [r3, #4]
    78fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78fe:	2134      	movs	r1, #52	; 0x34
    7900:	fb01 f303 	mul.w	r3, r1, r3
    7904:	4413      	add	r3, r2
    7906:	695b      	ldr	r3, [r3, #20]
    7908:	2b00      	cmp	r3, #0
    790a:	d150      	bne.n	79ae <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    790c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7910:	4a28      	ldr	r2, [pc, #160]	; (79b4 <Adc_UpdateStatusAfterGetStream+0x130>)
    7912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7916:	685a      	ldr	r2, [r3, #4]
    7918:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    791c:	2134      	movs	r1, #52	; 0x34
    791e:	fb01 f303 	mul.w	r3, r1, r3
    7922:	4413      	add	r3, r2
    7924:	689b      	ldr	r3, [r3, #8]
    7926:	2b00      	cmp	r3, #0
    7928:	d02c      	beq.n	7984 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    792a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    792e:	4a21      	ldr	r2, [pc, #132]	; (79b4 <Adc_UpdateStatusAfterGetStream+0x130>)
    7930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7934:	685a      	ldr	r2, [r3, #4]
    7936:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    793a:	2134      	movs	r1, #52	; 0x34
    793c:	fb01 f303 	mul.w	r3, r1, r3
    7940:	4413      	add	r3, r2
    7942:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7944:	2b01      	cmp	r3, #1
    7946:	d128      	bne.n	799a <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7948:	f89d 3005 	ldrb.w	r3, [sp, #5]
    794c:	4a19      	ldr	r2, [pc, #100]	; (79b4 <Adc_UpdateStatusAfterGetStream+0x130>)
    794e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7952:	685a      	ldr	r2, [r3, #4]
    7954:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7958:	2134      	movs	r1, #52	; 0x34
    795a:	fb01 f303 	mul.w	r3, r1, r3
    795e:	4413      	add	r3, r2
    7960:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7962:	2b01      	cmp	r3, #1
    7964:	d119      	bne.n	799a <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7966:	f89d 3005 	ldrb.w	r3, [sp, #5]
    796a:	4a12      	ldr	r2, [pc, #72]	; (79b4 <Adc_UpdateStatusAfterGetStream+0x130>)
    796c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7970:	685a      	ldr	r2, [r3, #4]
    7972:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7976:	2134      	movs	r1, #52	; 0x34
    7978:	fb01 f303 	mul.w	r3, r1, r3
    797c:	4413      	add	r3, r2
    797e:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7980:	2b00      	cmp	r3, #0
    7982:	d10a      	bne.n	799a <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7984:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7988:	490b      	ldr	r1, [pc, #44]	; (79b8 <Adc_UpdateStatusAfterGetStream+0x134>)
    798a:	4613      	mov	r3, r2
    798c:	009b      	lsls	r3, r3, #2
    798e:	4413      	add	r3, r2
    7990:	009b      	lsls	r3, r3, #2
    7992:	440b      	add	r3, r1
    7994:	2200      	movs	r2, #0
    7996:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    7998:	e009      	b.n	79ae <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    799a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    799e:	4906      	ldr	r1, [pc, #24]	; (79b8 <Adc_UpdateStatusAfterGetStream+0x134>)
    79a0:	4613      	mov	r3, r2
    79a2:	009b      	lsls	r3, r3, #2
    79a4:	4413      	add	r3, r2
    79a6:	009b      	lsls	r3, r3, #2
    79a8:	440b      	add	r3, r1
    79aa:	2201      	movs	r2, #1
    79ac:	601a      	str	r2, [r3, #0]
}
    79ae:	bf00      	nop
    79b0:	b004      	add	sp, #16
    79b2:	4770      	bx	lr
    79b4:	1fff8d1c 	.word	0x1fff8d1c
    79b8:	1fff8d20 	.word	0x1fff8d20

000079bc <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    79bc:	b500      	push	{lr}
    79be:	b085      	sub	sp, #20
    79c0:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    79c2:	f002 fa5b 	bl	9e7c <Adc_GetCoreID>
    79c6:	4603      	mov	r3, r0
    79c8:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    79cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79d0:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    79d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79d8:	b2db      	uxtb	r3, r3
    79da:	4619      	mov	r1, r3
    79dc:	9801      	ldr	r0, [sp, #4]
    79de:	f7ff fbb3 	bl	7148 <Adc_CheckCurrentCoreId>
    79e2:	4603      	mov	r3, r0
    79e4:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    79e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    79ec:	2b00      	cmp	r3, #0
    79ee:	d12c      	bne.n	7a4a <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    79f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79f4:	b2db      	uxtb	r3, r3
    79f6:	4619      	mov	r1, r3
    79f8:	4a16      	ldr	r2, [pc, #88]	; (7a54 <Adc_Init+0x98>)
    79fa:	9b01      	ldr	r3, [sp, #4]
    79fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7a00:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7a04:	b2db      	uxtb	r3, r3
    7a06:	4618      	mov	r0, r3
    7a08:	f7ff fb4e 	bl	70a8 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    7a0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7a10:	b2db      	uxtb	r3, r3
    7a12:	4618      	mov	r0, r3
    7a14:	f7ff fade 	bl	6fd4 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    7a18:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7a1c:	b2db      	uxtb	r3, r3
    7a1e:	461a      	mov	r2, r3
    7a20:	4b0c      	ldr	r3, [pc, #48]	; (7a54 <Adc_Init+0x98>)
    7a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a26:	681b      	ldr	r3, [r3, #0]
    7a28:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7a2c:	4611      	mov	r1, r2
    7a2e:	4618      	mov	r0, r3
    7a30:	f001 ff78 	bl	9924 <Adc_Ipw_Init>
    7a34:	4603      	mov	r3, r0
    7a36:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7a3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a3e:	2b01      	cmp	r3, #1
    7a40:	d103      	bne.n	7a4a <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    7a42:	212b      	movs	r1, #43	; 0x2b
    7a44:	2000      	movs	r0, #0
    7a46:	f7ff f897 	bl	6b78 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    7a4a:	bf00      	nop
    7a4c:	b005      	add	sp, #20
    7a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a52:	bf00      	nop
    7a54:	1fff8d1c 	.word	0x1fff8d1c

00007a58 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    7a58:	b500      	push	{lr}
    7a5a:	b085      	sub	sp, #20
    7a5c:	4603      	mov	r3, r0
    7a5e:	9100      	str	r1, [sp, #0]
    7a60:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    7a64:	2301      	movs	r3, #1
    7a66:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    7a6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a6e:	4618      	mov	r0, r3
    7a70:	f7ff f9a2 	bl	6db8 <Adc_ValidateSetupBufferNotBusy>
    7a74:	4603      	mov	r3, r0
    7a76:	2b00      	cmp	r3, #0
    7a78:	d10d      	bne.n	7a96 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    7a7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a7e:	4909      	ldr	r1, [pc, #36]	; (7aa4 <Adc_SetupResultBuffer+0x4c>)
    7a80:	4613      	mov	r3, r2
    7a82:	009b      	lsls	r3, r3, #2
    7a84:	4413      	add	r3, r2
    7a86:	009b      	lsls	r3, r3, #2
    7a88:	440b      	add	r3, r1
    7a8a:	330c      	adds	r3, #12
    7a8c:	9a00      	ldr	r2, [sp, #0]
    7a8e:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7a90:	2300      	movs	r3, #0
    7a92:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    7a96:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a9a:	4618      	mov	r0, r3
    7a9c:	b005      	add	sp, #20
    7a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    7aa2:	bf00      	nop
    7aa4:	1fff8d20 	.word	0x1fff8d20

00007aa8 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    7aa8:	b500      	push	{lr}
    7aaa:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7aac:	2300      	movs	r3, #0
    7aae:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7ab2:	f002 f9e3 	bl	9e7c <Adc_GetCoreID>
    7ab6:	4603      	mov	r3, r0
    7ab8:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7abc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7ac0:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7ac4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7ac8:	b2db      	uxtb	r3, r3
    7aca:	461a      	mov	r2, r3
    7acc:	4b2d      	ldr	r3, [pc, #180]	; (7b84 <Adc_DeInit+0xdc>)
    7ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ad2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7ad6:	4611      	mov	r1, r2
    7ad8:	4618      	mov	r0, r3
    7ada:	f7ff fb35 	bl	7148 <Adc_CheckCurrentCoreId>
    7ade:	4603      	mov	r3, r0
    7ae0:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7ae4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d147      	bne.n	7b7c <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    7aec:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7af0:	b2db      	uxtb	r3, r3
    7af2:	4618      	mov	r0, r3
    7af4:	f7ff f912 	bl	6d1c <Adc_ValidateDeInitNotBusy>
    7af8:	4603      	mov	r3, r0
    7afa:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    7afe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7b02:	2b00      	cmp	r3, #0
    7b04:	d13a      	bne.n	7b7c <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    7b06:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7b0a:	b2db      	uxtb	r3, r3
    7b0c:	4618      	mov	r0, r3
    7b0e:	f001 ff4e 	bl	99ae <Adc_Ipw_DeInit>
    7b12:	4603      	mov	r3, r0
    7b14:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    7b18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7b1c:	2b01      	cmp	r3, #1
    7b1e:	d103      	bne.n	7b28 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7b20:	212b      	movs	r1, #43	; 0x2b
    7b22:	2001      	movs	r0, #1
    7b24:	f7ff f828 	bl	6b78 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7b28:	2300      	movs	r3, #0
    7b2a:	f88d 3007 	strb.w	r3, [sp, #7]
    7b2e:	e019      	b.n	7b64 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7b30:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7b34:	b2db      	uxtb	r3, r3
    7b36:	461a      	mov	r2, r3
    7b38:	4b12      	ldr	r3, [pc, #72]	; (7b84 <Adc_DeInit+0xdc>)
    7b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b3e:	681a      	ldr	r2, [r3, #0]
    7b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b44:	4413      	add	r3, r2
    7b46:	7f9b      	ldrb	r3, [r3, #30]
    7b48:	2b01      	cmp	r3, #1
    7b4a:	d106      	bne.n	7b5a <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b50:	4a0d      	ldr	r2, [pc, #52]	; (7b88 <Adc_DeInit+0xe0>)
    7b52:	00db      	lsls	r3, r3, #3
    7b54:	4413      	add	r3, r2
    7b56:	2200      	movs	r2, #0
    7b58:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b5e:	3301      	adds	r3, #1
    7b60:	f88d 3007 	strb.w	r3, [sp, #7]
    7b64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b68:	2b01      	cmp	r3, #1
    7b6a:	d9e1      	bls.n	7b30 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    7b6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7b70:	b2db      	uxtb	r3, r3
    7b72:	4619      	mov	r1, r3
    7b74:	4b03      	ldr	r3, [pc, #12]	; (7b84 <Adc_DeInit+0xdc>)
    7b76:	2200      	movs	r2, #0
    7b78:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    7b7c:	bf00      	nop
    7b7e:	b003      	add	sp, #12
    7b80:	f85d fb04 	ldr.w	pc, [sp], #4
    7b84:	1fff8d1c 	.word	0x1fff8d1c
    7b88:	1fff8d48 	.word	0x1fff8d48

00007b8c <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    7b8c:	b500      	push	{lr}
    7b8e:	b085      	sub	sp, #20
    7b90:	4603      	mov	r3, r0
    7b92:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7b96:	2300      	movs	r3, #0
    7b98:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7b9c:	2300      	movs	r3, #0
    7b9e:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7ba2:	f002 f96b 	bl	9e7c <Adc_GetCoreID>
    7ba6:	4603      	mov	r3, r0
    7ba8:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7bac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bb0:	b2db      	uxtb	r3, r3
    7bb2:	461a      	mov	r2, r3
    7bb4:	4b1a      	ldr	r3, [pc, #104]	; (7c20 <Adc_StartGroupConversion+0x94>)
    7bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bba:	68da      	ldr	r2, [r3, #12]
    7bbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7bc0:	005b      	lsls	r3, r3, #1
    7bc2:	4413      	add	r3, r2
    7bc4:	881b      	ldrh	r3, [r3, #0]
    7bc6:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    7bca:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bce:	b2da      	uxtb	r2, r3
    7bd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7bd4:	4611      	mov	r1, r2
    7bd6:	4618      	mov	r0, r3
    7bd8:	f7ff f912 	bl	6e00 <Adc_ValidateStateStartGroupConvNotBusy>
    7bdc:	4603      	mov	r3, r0
    7bde:	2b00      	cmp	r3, #0
    7be0:	d11a      	bne.n	7c18 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7be2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7be6:	b2db      	uxtb	r3, r3
    7be8:	461a      	mov	r2, r3
    7bea:	4b0d      	ldr	r3, [pc, #52]	; (7c20 <Adc_StartGroupConversion+0x94>)
    7bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bf0:	685a      	ldr	r2, [r3, #4]
    7bf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bf6:	2134      	movs	r1, #52	; 0x34
    7bf8:	fb01 f303 	mul.w	r3, r1, r3
    7bfc:	4413      	add	r3, r2
    7bfe:	789b      	ldrb	r3, [r3, #2]
    7c00:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7c04:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7c08:	b2da      	uxtb	r2, r3
    7c0a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7c0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c12:	4618      	mov	r0, r3
    7c14:	f7ff facb 	bl	71ae <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7c18:	bf00      	nop
    7c1a:	b005      	add	sp, #20
    7c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c20:	1fff8d1c 	.word	0x1fff8d1c

00007c24 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7c24:	b500      	push	{lr}
    7c26:	b085      	sub	sp, #20
    7c28:	4603      	mov	r3, r0
    7c2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7c2e:	2300      	movs	r3, #0
    7c30:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7c34:	2300      	movs	r3, #0
    7c36:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    7c3a:	f002 f91f 	bl	9e7c <Adc_GetCoreID>
    7c3e:	4603      	mov	r3, r0
    7c40:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    7c44:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c48:	b2da      	uxtb	r2, r3
    7c4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c4e:	4619      	mov	r1, r3
    7c50:	2003      	movs	r0, #3
    7c52:	f7ff f94d 	bl	6ef0 <Adc_ValidateStateNotIdle>
    7c56:	4603      	mov	r3, r0
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d129      	bne.n	7cb0 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7c5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c60:	b2db      	uxtb	r3, r3
    7c62:	461a      	mov	r2, r3
    7c64:	4b14      	ldr	r3, [pc, #80]	; (7cb8 <Adc_StopGroupConversion+0x94>)
    7c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c6a:	68da      	ldr	r2, [r3, #12]
    7c6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c70:	005b      	lsls	r3, r3, #1
    7c72:	4413      	add	r3, r2
    7c74:	881b      	ldrh	r3, [r3, #0]
    7c76:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7c7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c7e:	b2db      	uxtb	r3, r3
    7c80:	461a      	mov	r2, r3
    7c82:	4b0d      	ldr	r3, [pc, #52]	; (7cb8 <Adc_StopGroupConversion+0x94>)
    7c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c88:	685a      	ldr	r2, [r3, #4]
    7c8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c8e:	2134      	movs	r1, #52	; 0x34
    7c90:	fb01 f303 	mul.w	r3, r1, r3
    7c94:	4413      	add	r3, r2
    7c96:	789b      	ldrb	r3, [r3, #2]
    7c98:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    7c9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ca0:	b2da      	uxtb	r2, r3
    7ca2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7ca6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7caa:	4618      	mov	r0, r3
    7cac:	f7ff fb78 	bl	73a0 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7cb0:	bf00      	nop
    7cb2:	b005      	add	sp, #20
    7cb4:	f85d fb04 	ldr.w	pc, [sp], #4
    7cb8:	1fff8d1c 	.word	0x1fff8d1c

00007cbc <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7cbc:	b500      	push	{lr}
    7cbe:	b085      	sub	sp, #20
    7cc0:	4603      	mov	r3, r0
    7cc2:	9100      	str	r1, [sp, #0]
    7cc4:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7cc8:	2301      	movs	r3, #1
    7cca:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7cce:	2301      	movs	r3, #1
    7cd0:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7cd4:	f002 f8d2 	bl	9e7c <Adc_GetCoreID>
    7cd8:	4603      	mov	r3, r0
    7cda:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7cde:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7ce2:	b2da      	uxtb	r2, r3
    7ce4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ce8:	4619      	mov	r1, r3
    7cea:	2004      	movs	r0, #4
    7cec:	f7ff f900 	bl	6ef0 <Adc_ValidateStateNotIdle>
    7cf0:	4603      	mov	r3, r0
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d121      	bne.n	7d3a <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7cf6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cfa:	b2db      	uxtb	r3, r3
    7cfc:	f10d 020d 	add.w	r2, sp, #13
    7d00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7d04:	9900      	ldr	r1, [sp, #0]
    7d06:	f002 f812 	bl	9d2e <Adc_Ipw_ReadGroup>
    7d0a:	4603      	mov	r3, r0
    7d0c:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7d10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d14:	2b00      	cmp	r3, #0
    7d16:	d006      	beq.n	7d26 <Adc_ReadGroup+0x6a>
    7d18:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7d1c:	f083 0301 	eor.w	r3, r3, #1
    7d20:	b2db      	uxtb	r3, r3
    7d22:	2b00      	cmp	r3, #0
    7d24:	d009      	beq.n	7d3a <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7d26:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7d2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7d2e:	b2da      	uxtb	r2, r3
    7d30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d34:	4618      	mov	r0, r3
    7d36:	f7ff fbe5 	bl	7504 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7d3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7d3e:	4618      	mov	r0, r3
    7d40:	b005      	add	sp, #20
    7d42:	f85d fb04 	ldr.w	pc, [sp], #4

00007d46 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7d46:	b084      	sub	sp, #16
    7d48:	4603      	mov	r3, r0
    7d4a:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7d4e:	2300      	movs	r3, #0
    7d50:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7d52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d56:	4906      	ldr	r1, [pc, #24]	; (7d70 <Adc_GetGroupStatus+0x2a>)
    7d58:	4613      	mov	r3, r2
    7d5a:	009b      	lsls	r3, r3, #2
    7d5c:	4413      	add	r3, r2
    7d5e:	009b      	lsls	r3, r3, #2
    7d60:	440b      	add	r3, r1
    7d62:	681b      	ldr	r3, [r3, #0]
    7d64:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7d66:	9b03      	ldr	r3, [sp, #12]
}
    7d68:	4618      	mov	r0, r3
    7d6a:	b004      	add	sp, #16
    7d6c:	4770      	bx	lr
    7d6e:	bf00      	nop
    7d70:	1fff8d20 	.word	0x1fff8d20

00007d74 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7d74:	b500      	push	{lr}
    7d76:	b085      	sub	sp, #20
    7d78:	4603      	mov	r3, r0
    7d7a:	9100      	str	r1, [sp, #0]
    7d7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7d80:	f002 f87c 	bl	9e7c <Adc_GetCoreID>
    7d84:	4603      	mov	r3, r0
    7d86:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7d8a:	2300      	movs	r3, #0
    7d8c:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7d90:	2300      	movs	r3, #0
    7d92:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7d96:	2300      	movs	r3, #0
    7d98:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7d9c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7da0:	b2da      	uxtb	r2, r3
    7da2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7da6:	4619      	mov	r1, r3
    7da8:	200b      	movs	r0, #11
    7daa:	f7ff f8a1 	bl	6ef0 <Adc_ValidateStateNotIdle>
    7dae:	4603      	mov	r3, r0
    7db0:	2b00      	cmp	r3, #0
    7db2:	f040 808e 	bne.w	7ed2 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7db6:	9b00      	ldr	r3, [sp, #0]
    7db8:	2200      	movs	r2, #0
    7dba:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7dbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7dc0:	4948      	ldr	r1, [pc, #288]	; (7ee4 <Adc_GetStreamLastPointer+0x170>)
    7dc2:	4613      	mov	r3, r2
    7dc4:	009b      	lsls	r3, r3, #2
    7dc6:	4413      	add	r3, r2
    7dc8:	009b      	lsls	r3, r3, #2
    7dca:	440b      	add	r3, r1
    7dcc:	681b      	ldr	r3, [r3, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	f000 8082 	beq.w	7ed8 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7dd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7dd8:	4942      	ldr	r1, [pc, #264]	; (7ee4 <Adc_GetStreamLastPointer+0x170>)
    7dda:	4613      	mov	r3, r2
    7ddc:	009b      	lsls	r3, r3, #2
    7dde:	4413      	add	r3, r2
    7de0:	009b      	lsls	r3, r3, #2
    7de2:	440b      	add	r3, r1
    7de4:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7de6:	2b01      	cmp	r3, #1
    7de8:	d076      	beq.n	7ed8 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7dea:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7dee:	b2db      	uxtb	r3, r3
    7df0:	461a      	mov	r2, r3
    7df2:	4b3d      	ldr	r3, [pc, #244]	; (7ee8 <Adc_GetStreamLastPointer+0x174>)
    7df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7df8:	68da      	ldr	r2, [r3, #12]
    7dfa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7dfe:	005b      	lsls	r3, r3, #1
    7e00:	4413      	add	r3, r2
    7e02:	881b      	ldrh	r3, [r3, #0]
    7e04:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7e08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e0c:	4935      	ldr	r1, [pc, #212]	; (7ee4 <Adc_GetStreamLastPointer+0x170>)
    7e0e:	4613      	mov	r3, r2
    7e10:	009b      	lsls	r3, r3, #2
    7e12:	4413      	add	r3, r2
    7e14:	009b      	lsls	r3, r3, #2
    7e16:	440b      	add	r3, r1
    7e18:	3308      	adds	r3, #8
    7e1a:	881b      	ldrh	r3, [r3, #0]
    7e1c:	b29b      	uxth	r3, r3
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d123      	bne.n	7e6a <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7e22:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7e26:	b2db      	uxtb	r3, r3
    7e28:	461a      	mov	r2, r3
    7e2a:	4b2f      	ldr	r3, [pc, #188]	; (7ee8 <Adc_GetStreamLastPointer+0x174>)
    7e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e30:	685a      	ldr	r2, [r3, #4]
    7e32:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7e36:	2134      	movs	r1, #52	; 0x34
    7e38:	fb01 f303 	mul.w	r3, r1, r3
    7e3c:	4413      	add	r3, r2
    7e3e:	8b9b      	ldrh	r3, [r3, #28]
    7e40:	3b01      	subs	r3, #1
    7e42:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7e46:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7e4a:	b2db      	uxtb	r3, r3
    7e4c:	461a      	mov	r2, r3
    7e4e:	4b26      	ldr	r3, [pc, #152]	; (7ee8 <Adc_GetStreamLastPointer+0x174>)
    7e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e54:	685a      	ldr	r2, [r3, #4]
    7e56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7e5a:	2134      	movs	r1, #52	; 0x34
    7e5c:	fb01 f303 	mul.w	r3, r1, r3
    7e60:	4413      	add	r3, r2
    7e62:	8b9b      	ldrh	r3, [r3, #28]
    7e64:	f8ad 300e 	strh.w	r3, [sp, #14]
    7e68:	e019      	b.n	7e9e <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7e6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e6e:	491d      	ldr	r1, [pc, #116]	; (7ee4 <Adc_GetStreamLastPointer+0x170>)
    7e70:	4613      	mov	r3, r2
    7e72:	009b      	lsls	r3, r3, #2
    7e74:	4413      	add	r3, r2
    7e76:	009b      	lsls	r3, r3, #2
    7e78:	440b      	add	r3, r1
    7e7a:	3308      	adds	r3, #8
    7e7c:	881b      	ldrh	r3, [r3, #0]
    7e7e:	b29b      	uxth	r3, r3
    7e80:	3b01      	subs	r3, #1
    7e82:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7e86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e8a:	4916      	ldr	r1, [pc, #88]	; (7ee4 <Adc_GetStreamLastPointer+0x170>)
    7e8c:	4613      	mov	r3, r2
    7e8e:	009b      	lsls	r3, r3, #2
    7e90:	4413      	add	r3, r2
    7e92:	009b      	lsls	r3, r3, #2
    7e94:	440b      	add	r3, r1
    7e96:	3308      	adds	r3, #8
    7e98:	881b      	ldrh	r3, [r3, #0]
    7e9a:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7e9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ea2:	4910      	ldr	r1, [pc, #64]	; (7ee4 <Adc_GetStreamLastPointer+0x170>)
    7ea4:	4613      	mov	r3, r2
    7ea6:	009b      	lsls	r3, r3, #2
    7ea8:	4413      	add	r3, r2
    7eaa:	009b      	lsls	r3, r3, #2
    7eac:	440b      	add	r3, r1
    7eae:	330c      	adds	r3, #12
    7eb0:	681a      	ldr	r2, [r3, #0]
    7eb2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7eb6:	005b      	lsls	r3, r3, #1
    7eb8:	441a      	add	r2, r3
    7eba:	9b00      	ldr	r3, [sp, #0]
    7ebc:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7ebe:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ec2:	b2da      	uxtb	r2, r3
    7ec4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ec8:	4611      	mov	r1, r2
    7eca:	4618      	mov	r0, r3
    7ecc:	f7ff fcda 	bl	7884 <Adc_UpdateStatusAfterGetStream>
    7ed0:	e002      	b.n	7ed8 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7ed2:	9b00      	ldr	r3, [sp, #0]
    7ed4:	2200      	movs	r2, #0
    7ed6:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7ed8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7edc:	4618      	mov	r0, r3
    7ede:	b005      	add	sp, #20
    7ee0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ee4:	1fff8d20 	.word	0x1fff8d20
    7ee8:	1fff8d1c 	.word	0x1fff8d1c

00007eec <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7eec:	b082      	sub	sp, #8
    7eee:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7ef0:	9b01      	ldr	r3, [sp, #4]
    7ef2:	222b      	movs	r2, #43	; 0x2b
    7ef4:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7ef6:	9b01      	ldr	r3, [sp, #4]
    7ef8:	227b      	movs	r2, #123	; 0x7b
    7efa:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7efc:	9b01      	ldr	r3, [sp, #4]
    7efe:	2202      	movs	r2, #2
    7f00:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7f02:	9b01      	ldr	r3, [sp, #4]
    7f04:	2200      	movs	r2, #0
    7f06:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7f08:	9b01      	ldr	r3, [sp, #4]
    7f0a:	2200      	movs	r2, #0
    7f0c:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7f0e:	bf00      	nop
    7f10:	b002      	add	sp, #8
    7f12:	4770      	bx	lr

00007f14 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7f14:	b500      	push	{lr}
    7f16:	b085      	sub	sp, #20
    7f18:	4603      	mov	r3, r0
    7f1a:	9100      	str	r1, [sp, #0]
    7f1c:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7f20:	2300      	movs	r3, #0
    7f22:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7f26:	f001 ffa9 	bl	9e7c <Adc_GetCoreID>
    7f2a:	4603      	mov	r3, r0
    7f2c:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7f30:	9b00      	ldr	r3, [sp, #0]
    7f32:	2201      	movs	r2, #1
    7f34:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7f36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f3a:	2129      	movs	r1, #41	; 0x29
    7f3c:	4618      	mov	r0, r3
    7f3e:	f7fe fe30 	bl	6ba2 <Adc_ValidateNotBusyNoQueue>
    7f42:	4603      	mov	r3, r0
    7f44:	2b00      	cmp	r3, #0
    7f46:	d115      	bne.n	7f74 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7f48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7f4c:	b2db      	uxtb	r3, r3
    7f4e:	4619      	mov	r1, r3
    7f50:	2029      	movs	r0, #41	; 0x29
    7f52:	f7fe fe91 	bl	6c78 <Adc_ValidateCheckGroupNotConversion>
    7f56:	4603      	mov	r3, r0
    7f58:	2b00      	cmp	r3, #0
    7f5a:	d10b      	bne.n	7f74 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7f5c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7f60:	b2da      	uxtb	r2, r3
    7f62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f66:	9900      	ldr	r1, [sp, #0]
    7f68:	4618      	mov	r0, r3
    7f6a:	f001 ff5d 	bl	9e28 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7f6e:	2301      	movs	r3, #1
    7f70:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7f74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f78:	2b00      	cmp	r3, #0
    7f7a:	d007      	beq.n	7f8c <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7f7c:	9b00      	ldr	r3, [sp, #0]
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	2b01      	cmp	r3, #1
    7f82:	d103      	bne.n	7f8c <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7f84:	212b      	movs	r1, #43	; 0x2b
    7f86:	2029      	movs	r0, #41	; 0x29
    7f88:	f7fe fdf6 	bl	6b78 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7f8c:	bf00      	nop
    7f8e:	b005      	add	sp, #20
    7f90:	f85d fb04 	ldr.w	pc, [sp], #4

00007f94 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7f94:	b086      	sub	sp, #24
    7f96:	9003      	str	r0, [sp, #12]
    7f98:	9102      	str	r1, [sp, #8]
    7f9a:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7f9c:	9b03      	ldr	r3, [sp, #12]
    7f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7fa2:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7fa4:	9b02      	ldr	r3, [sp, #8]
    7fa6:	43db      	mvns	r3, r3
    7fa8:	9a05      	ldr	r2, [sp, #20]
    7faa:	4013      	ands	r3, r2
    7fac:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7fae:	9a05      	ldr	r2, [sp, #20]
    7fb0:	9b01      	ldr	r3, [sp, #4]
    7fb2:	4313      	orrs	r3, r2
    7fb4:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7fb6:	9b03      	ldr	r3, [sp, #12]
    7fb8:	9a05      	ldr	r2, [sp, #20]
    7fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7fbe:	bf00      	nop
    7fc0:	b006      	add	sp, #24
    7fc2:	4770      	bx	lr

00007fc4 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7fc4:	b086      	sub	sp, #24
    7fc6:	9003      	str	r0, [sp, #12]
    7fc8:	9102      	str	r1, [sp, #8]
    7fca:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7fcc:	9b03      	ldr	r3, [sp, #12]
    7fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7fd0:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7fd2:	9b05      	ldr	r3, [sp, #20]
    7fd4:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7fd8:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7fda:	9b02      	ldr	r3, [sp, #8]
    7fdc:	015b      	lsls	r3, r3, #5
    7fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7fe2:	9a05      	ldr	r2, [sp, #20]
    7fe4:	4313      	orrs	r3, r2
    7fe6:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7fe8:	9b01      	ldr	r3, [sp, #4]
    7fea:	f003 0303 	and.w	r3, r3, #3
    7fee:	9a05      	ldr	r2, [sp, #20]
    7ff0:	4313      	orrs	r3, r2
    7ff2:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7ff4:	9b03      	ldr	r3, [sp, #12]
    7ff6:	9a05      	ldr	r2, [sp, #20]
    7ff8:	641a      	str	r2, [r3, #64]	; 0x40
}
    7ffa:	bf00      	nop
    7ffc:	b006      	add	sp, #24
    7ffe:	4770      	bx	lr

00008000 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    8000:	b084      	sub	sp, #16
    8002:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8004:	2300      	movs	r3, #0
    8006:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8008:	9b01      	ldr	r3, [sp, #4]
    800a:	095b      	lsrs	r3, r3, #5
    800c:	f003 0303 	and.w	r3, r3, #3
    8010:	2b03      	cmp	r3, #3
    8012:	d00c      	beq.n	802e <Adc_HwAcc_GetClockDivide+0x2e>
    8014:	2b03      	cmp	r3, #3
    8016:	d80d      	bhi.n	8034 <Adc_HwAcc_GetClockDivide+0x34>
    8018:	2b01      	cmp	r3, #1
    801a:	d002      	beq.n	8022 <Adc_HwAcc_GetClockDivide+0x22>
    801c:	2b02      	cmp	r3, #2
    801e:	d003      	beq.n	8028 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    8020:	e008      	b.n	8034 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    8022:	2301      	movs	r3, #1
    8024:	9303      	str	r3, [sp, #12]
            break;
    8026:	e006      	b.n	8036 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8028:	2302      	movs	r3, #2
    802a:	9303      	str	r3, [sp, #12]
            break;
    802c:	e003      	b.n	8036 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    802e:	2303      	movs	r3, #3
    8030:	9303      	str	r3, [sp, #12]
            break;
    8032:	e000      	b.n	8036 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8034:	bf00      	nop
    }
    return ReturnValue;
    8036:	9b03      	ldr	r3, [sp, #12]
}
    8038:	4618      	mov	r0, r3
    803a:	b004      	add	sp, #16
    803c:	4770      	bx	lr

0000803e <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    803e:	b084      	sub	sp, #16
    8040:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8042:	2300      	movs	r3, #0
    8044:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8046:	9b01      	ldr	r3, [sp, #4]
    8048:	f003 0303 	and.w	r3, r3, #3
    804c:	2b03      	cmp	r3, #3
    804e:	d00c      	beq.n	806a <Adc_HwAcc_GetInputClock+0x2c>
    8050:	2b03      	cmp	r3, #3
    8052:	d80d      	bhi.n	8070 <Adc_HwAcc_GetInputClock+0x32>
    8054:	2b01      	cmp	r3, #1
    8056:	d002      	beq.n	805e <Adc_HwAcc_GetInputClock+0x20>
    8058:	2b02      	cmp	r3, #2
    805a:	d003      	beq.n	8064 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    805c:	e008      	b.n	8070 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    805e:	2301      	movs	r3, #1
    8060:	9303      	str	r3, [sp, #12]
            break;
    8062:	e006      	b.n	8072 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8064:	2302      	movs	r3, #2
    8066:	9303      	str	r3, [sp, #12]
            break;
    8068:	e003      	b.n	8072 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    806a:	2303      	movs	r3, #3
    806c:	9303      	str	r3, [sp, #12]
            break;
    806e:	e000      	b.n	8072 <Adc_HwAcc_GetInputClock+0x34>
            break;
    8070:	bf00      	nop
    }
    return ReturnValue;
    8072:	9b03      	ldr	r3, [sp, #12]
}
    8074:	4618      	mov	r0, r3
    8076:	b004      	add	sp, #16
    8078:	4770      	bx	lr

0000807a <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    807a:	b084      	sub	sp, #16
    807c:	9001      	str	r0, [sp, #4]
    807e:	460b      	mov	r3, r1
    8080:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8084:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8088:	2b00      	cmp	r3, #0
    808a:	d002      	beq.n	8092 <Adc_HwAcc_SetSampleTime+0x18>
    808c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8090:	e000      	b.n	8094 <Adc_HwAcc_SetSampleTime+0x1a>
    8092:	2301      	movs	r3, #1
    8094:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8098:	9b01      	ldr	r3, [sp, #4]
    809a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    809c:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    809e:	9b02      	ldr	r3, [sp, #8]
    80a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    80a4:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    80a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    80aa:	9a02      	ldr	r2, [sp, #8]
    80ac:	4313      	orrs	r3, r2
    80ae:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    80b0:	9b01      	ldr	r3, [sp, #4]
    80b2:	9a02      	ldr	r2, [sp, #8]
    80b4:	645a      	str	r2, [r3, #68]	; 0x44
}
    80b6:	bf00      	nop
    80b8:	b004      	add	sp, #16
    80ba:	4770      	bx	lr

000080bc <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    80bc:	b086      	sub	sp, #24
    80be:	9003      	str	r0, [sp, #12]
    80c0:	460b      	mov	r3, r1
    80c2:	9201      	str	r2, [sp, #4]
    80c4:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    80c8:	9b03      	ldr	r3, [sp, #12]
    80ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    80ce:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    80d0:	9b05      	ldr	r3, [sp, #20]
    80d2:	f023 0307 	bic.w	r3, r3, #7
    80d6:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    80d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    80dc:	2b00      	cmp	r3, #0
    80de:	d001      	beq.n	80e4 <Adc_HwAcc_SetAveraging+0x28>
    80e0:	2304      	movs	r3, #4
    80e2:	e000      	b.n	80e6 <Adc_HwAcc_SetAveraging+0x2a>
    80e4:	2300      	movs	r3, #0
    80e6:	9a05      	ldr	r2, [sp, #20]
    80e8:	4313      	orrs	r3, r2
    80ea:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    80ec:	9b01      	ldr	r3, [sp, #4]
    80ee:	f003 0303 	and.w	r3, r3, #3
    80f2:	9a05      	ldr	r2, [sp, #20]
    80f4:	4313      	orrs	r3, r2
    80f6:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    80f8:	9b03      	ldr	r3, [sp, #12]
    80fa:	9a05      	ldr	r2, [sp, #20]
    80fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8100:	bf00      	nop
    8102:	b006      	add	sp, #24
    8104:	4770      	bx	lr

00008106 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8106:	b084      	sub	sp, #16
    8108:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    810a:	2300      	movs	r3, #0
    810c:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    810e:	9b01      	ldr	r3, [sp, #4]
    8110:	f003 0303 	and.w	r3, r3, #3
    8114:	2b03      	cmp	r3, #3
    8116:	d00c      	beq.n	8132 <Adc_HwAcc_GetAverageSelect+0x2c>
    8118:	2b03      	cmp	r3, #3
    811a:	d80d      	bhi.n	8138 <Adc_HwAcc_GetAverageSelect+0x32>
    811c:	2b01      	cmp	r3, #1
    811e:	d002      	beq.n	8126 <Adc_HwAcc_GetAverageSelect+0x20>
    8120:	2b02      	cmp	r3, #2
    8122:	d003      	beq.n	812c <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8124:	e008      	b.n	8138 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8126:	2301      	movs	r3, #1
    8128:	9303      	str	r3, [sp, #12]
            break;
    812a:	e006      	b.n	813a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    812c:	2302      	movs	r3, #2
    812e:	9303      	str	r3, [sp, #12]
            break;
    8130:	e003      	b.n	813a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8132:	2303      	movs	r3, #3
    8134:	9303      	str	r3, [sp, #12]
            break;
    8136:	e000      	b.n	813a <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8138:	bf00      	nop
    }
    return ReturnValue;
    813a:	9b03      	ldr	r3, [sp, #12]
}
    813c:	4618      	mov	r0, r3
    813e:	b004      	add	sp, #16
    8140:	4770      	bx	lr

00008142 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8142:	b084      	sub	sp, #16
    8144:	9001      	str	r0, [sp, #4]
    8146:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8148:	9b01      	ldr	r3, [sp, #4]
    814a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    814e:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8150:	9b03      	ldr	r3, [sp, #12]
    8152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8156:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8158:	9b00      	ldr	r3, [sp, #0]
    815a:	019b      	lsls	r3, r3, #6
    815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8160:	9a03      	ldr	r2, [sp, #12]
    8162:	4313      	orrs	r3, r2
    8164:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8166:	9b01      	ldr	r3, [sp, #4]
    8168:	9a03      	ldr	r2, [sp, #12]
    816a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    816e:	bf00      	nop
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8174:	b084      	sub	sp, #16
    8176:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8178:	2300      	movs	r3, #0
    817a:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    817c:	9b01      	ldr	r3, [sp, #4]
    817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8182:	2b00      	cmp	r3, #0
    8184:	d001      	beq.n	818a <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8186:	2301      	movs	r3, #1
    8188:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    818a:	9b03      	ldr	r3, [sp, #12]
}
    818c:	4618      	mov	r0, r3
    818e:	b004      	add	sp, #16
    8190:	4770      	bx	lr

00008192 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8192:	b086      	sub	sp, #24
    8194:	9003      	str	r0, [sp, #12]
    8196:	9201      	str	r2, [sp, #4]
    8198:	461a      	mov	r2, r3
    819a:	460b      	mov	r3, r1
    819c:	f88d 300b 	strb.w	r3, [sp, #11]
    81a0:	4613      	mov	r3, r2
    81a2:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    81a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    81aa:	9b03      	ldr	r3, [sp, #12]
    81ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81b0:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    81b2:	9b05      	ldr	r3, [sp, #20]
    81b4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    81b8:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    81ba:	9b01      	ldr	r3, [sp, #4]
    81bc:	f003 031f 	and.w	r3, r3, #31
    81c0:	9a05      	ldr	r2, [sp, #20]
    81c2:	4313      	orrs	r3, r2
    81c4:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    81c6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d001      	beq.n	81d2 <Adc_HwAcc_SetChannel+0x40>
    81ce:	2340      	movs	r3, #64	; 0x40
    81d0:	e000      	b.n	81d4 <Adc_HwAcc_SetChannel+0x42>
    81d2:	2300      	movs	r3, #0
    81d4:	9a05      	ldr	r2, [sp, #20]
    81d6:	4313      	orrs	r3, r2
    81d8:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    81da:	f89d 200b 	ldrb.w	r2, [sp, #11]
    81de:	9b03      	ldr	r3, [sp, #12]
    81e0:	9905      	ldr	r1, [sp, #20]
    81e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    81e6:	bf00      	nop
    81e8:	b006      	add	sp, #24
    81ea:	4770      	bx	lr

000081ec <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    81ec:	b082      	sub	sp, #8
    81ee:	9001      	str	r0, [sp, #4]
    81f0:	460b      	mov	r3, r1
    81f2:	f8ad 3002 	strh.w	r3, [sp, #2]
    81f6:	4613      	mov	r3, r2
    81f8:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    81fc:	f8bd 3000 	ldrh.w	r3, [sp]
    8200:	b2da      	uxtb	r2, r3
    8202:	9b01      	ldr	r3, [sp, #4]
    8204:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8208:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    820c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8210:	9b01      	ldr	r3, [sp, #4]
    8212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8216:	bf00      	nop
    8218:	b002      	add	sp, #8
    821a:	4770      	bx	lr

0000821c <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    821c:	b082      	sub	sp, #8
    821e:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    8220:	9b01      	ldr	r3, [sp, #4]
    8222:	099b      	lsrs	r3, r3, #6
    8224:	f003 0301 	and.w	r3, r3, #1
    8228:	2b00      	cmp	r3, #0
    822a:	bf14      	ite	ne
    822c:	2301      	movne	r3, #1
    822e:	2300      	moveq	r3, #0
    8230:	b2db      	uxtb	r3, r3
}
    8232:	4618      	mov	r0, r3
    8234:	b002      	add	sp, #8
    8236:	4770      	bx	lr

00008238 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8238:	b082      	sub	sp, #8
    823a:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    823c:	9b01      	ldr	r3, [sp, #4]
    823e:	09db      	lsrs	r3, r3, #7
    8240:	f003 0301 	and.w	r3, r3, #1
    8244:	2b00      	cmp	r3, #0
    8246:	bf14      	ite	ne
    8248:	2301      	movne	r3, #1
    824a:	2300      	moveq	r3, #0
    824c:	b2db      	uxtb	r3, r3
}
    824e:	4618      	mov	r0, r3
    8250:	b002      	add	sp, #8
    8252:	4770      	bx	lr

00008254 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8254:	b084      	sub	sp, #16
    8256:	9001      	str	r0, [sp, #4]
    8258:	460b      	mov	r3, r1
    825a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    825e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8262:	9b01      	ldr	r3, [sp, #4]
    8264:	3212      	adds	r2, #18
    8266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    826a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    826e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8272:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8276:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    827a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    827e:	4618      	mov	r0, r3
    8280:	b004      	add	sp, #16
    8282:	4770      	bx	lr

00008284 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8284:	b500      	push	{lr}
    8286:	b085      	sub	sp, #20
    8288:	9003      	str	r0, [sp, #12]
    828a:	9102      	str	r1, [sp, #8]
    828c:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    828e:	f007 f99d 	bl	f5cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8292:	9b02      	ldr	r3, [sp, #8]
    8294:	7a59      	ldrb	r1, [r3, #9]
    8296:	9b02      	ldr	r3, [sp, #8]
    8298:	68db      	ldr	r3, [r3, #12]
    829a:	461a      	mov	r2, r3
    829c:	9803      	ldr	r0, [sp, #12]
    829e:	f7ff ff0d 	bl	80bc <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    82a2:	f007 f9bf 	bl	f624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    82a6:	f006 fff7 	bl	f298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    82aa:	9901      	ldr	r1, [sp, #4]
    82ac:	9803      	ldr	r0, [sp, #12]
    82ae:	f7ff ff48 	bl	8142 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    82b2:	f007 f81d 	bl	f2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    82b6:	f006 fd0d 	bl	ecd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    82ba:	9b02      	ldr	r3, [sp, #8]
    82bc:	7a1b      	ldrb	r3, [r3, #8]
    82be:	4619      	mov	r1, r3
    82c0:	9803      	ldr	r0, [sp, #12]
    82c2:	f7ff feda 	bl	807a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    82c6:	f006 fd31 	bl	ed2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    82ca:	f006 fc5f 	bl	eb8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    82ce:	9b02      	ldr	r3, [sp, #8]
    82d0:	6819      	ldr	r1, [r3, #0]
    82d2:	9b02      	ldr	r3, [sp, #8]
    82d4:	685b      	ldr	r3, [r3, #4]
    82d6:	461a      	mov	r2, r3
    82d8:	9803      	ldr	r0, [sp, #12]
    82da:	f7ff fe73 	bl	7fc4 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    82de:	f006 fc81 	bl	ebe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    82e2:	bf00      	nop
    82e4:	b005      	add	sp, #20
    82e6:	f85d fb04 	ldr.w	pc, [sp], #4

000082ea <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    82ea:	b500      	push	{lr}
    82ec:	b087      	sub	sp, #28
    82ee:	9001      	str	r0, [sp, #4]
    82f0:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    82f2:	4a67      	ldr	r2, [pc, #412]	; (8490 <Adc_Ip_Init+0x1a6>)
    82f4:	9b01      	ldr	r3, [sp, #4]
    82f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82fa:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    82fc:	2300      	movs	r3, #0
    82fe:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    8300:	2300      	movs	r3, #0
    8302:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8304:	9b00      	ldr	r3, [sp, #0]
    8306:	6819      	ldr	r1, [r3, #0]
    8308:	9b00      	ldr	r3, [sp, #0]
    830a:	689b      	ldr	r3, [r3, #8]
    830c:	461a      	mov	r2, r3
    830e:	9802      	ldr	r0, [sp, #8]
    8310:	f7ff fe58 	bl	7fc4 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8314:	9b00      	ldr	r3, [sp, #0]
    8316:	7b1b      	ldrb	r3, [r3, #12]
    8318:	4619      	mov	r1, r3
    831a:	9802      	ldr	r0, [sp, #8]
    831c:	f7ff fead 	bl	807a <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8320:	9b00      	ldr	r3, [sp, #0]
    8322:	7b59      	ldrb	r1, [r3, #13]
    8324:	9b00      	ldr	r3, [sp, #0]
    8326:	691b      	ldr	r3, [r3, #16]
    8328:	461a      	mov	r2, r3
    832a:	9802      	ldr	r0, [sp, #8]
    832c:	f7ff fec6 	bl	80bc <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    8330:	9b00      	ldr	r3, [sp, #0]
    8332:	695b      	ldr	r3, [r3, #20]
    8334:	4619      	mov	r1, r3
    8336:	9801      	ldr	r0, [sp, #4]
    8338:	f000 f9ea 	bl	8710 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    833c:	9b04      	ldr	r3, [sp, #16]
    833e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8342:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    8344:	9b00      	ldr	r3, [sp, #0]
    8346:	699b      	ldr	r3, [r3, #24]
    8348:	019b      	lsls	r3, r3, #6
    834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    834e:	9a05      	ldr	r2, [sp, #20]
    8350:	4313      	orrs	r3, r2
    8352:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8354:	9b00      	ldr	r3, [sp, #0]
    8356:	7f1b      	ldrb	r3, [r3, #28]
    8358:	2b00      	cmp	r3, #0
    835a:	d004      	beq.n	8366 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    835c:	9b05      	ldr	r3, [sp, #20]
    835e:	f043 0304 	orr.w	r3, r3, #4
    8362:	9305      	str	r3, [sp, #20]
    8364:	e003      	b.n	836e <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    8366:	9b04      	ldr	r3, [sp, #16]
    8368:	f043 0304 	orr.w	r3, r3, #4
    836c:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    836e:	9b04      	ldr	r3, [sp, #16]
    8370:	f043 0303 	orr.w	r3, r3, #3
    8374:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    8376:	9b00      	ldr	r3, [sp, #0]
    8378:	6a1b      	ldr	r3, [r3, #32]
    837a:	f003 0303 	and.w	r3, r3, #3
    837e:	9a05      	ldr	r2, [sp, #20]
    8380:	4313      	orrs	r3, r2
    8382:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8384:	9b04      	ldr	r3, [sp, #16]
    8386:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    838a:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    838c:	9b00      	ldr	r3, [sp, #0]
    838e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8392:	2b00      	cmp	r3, #0
    8394:	d001      	beq.n	839a <Adc_Ip_Init+0xb0>
    8396:	2320      	movs	r3, #32
    8398:	e000      	b.n	839c <Adc_Ip_Init+0xb2>
    839a:	2300      	movs	r3, #0
    839c:	9a05      	ldr	r2, [sp, #20]
    839e:	4313      	orrs	r3, r2
    83a0:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    83a2:	9b00      	ldr	r3, [sp, #0]
    83a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    83a8:	2b00      	cmp	r3, #0
    83aa:	d001      	beq.n	83b0 <Adc_Ip_Init+0xc6>
    83ac:	2310      	movs	r3, #16
    83ae:	e000      	b.n	83b2 <Adc_Ip_Init+0xc8>
    83b0:	2300      	movs	r3, #0
    83b2:	9a05      	ldr	r2, [sp, #20]
    83b4:	4313      	orrs	r3, r2
    83b6:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    83b8:	9b00      	ldr	r3, [sp, #0]
    83ba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    83be:	2b00      	cmp	r3, #0
    83c0:	d001      	beq.n	83c6 <Adc_Ip_Init+0xdc>
    83c2:	2308      	movs	r3, #8
    83c4:	e000      	b.n	83c8 <Adc_Ip_Init+0xde>
    83c6:	2300      	movs	r3, #0
    83c8:	9a05      	ldr	r2, [sp, #20]
    83ca:	4313      	orrs	r3, r2
    83cc:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    83ce:	9b00      	ldr	r3, [sp, #0]
    83d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    83d2:	461a      	mov	r2, r3
    83d4:	9b02      	ldr	r3, [sp, #8]
    83d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    83da:	9b00      	ldr	r3, [sp, #0]
    83dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    83de:	461a      	mov	r2, r3
    83e0:	9b02      	ldr	r3, [sp, #8]
    83e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    83e6:	9a05      	ldr	r2, [sp, #20]
    83e8:	9904      	ldr	r1, [sp, #16]
    83ea:	9802      	ldr	r0, [sp, #8]
    83ec:	f7ff fdd2 	bl	7f94 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    83f0:	9b00      	ldr	r3, [sp, #0]
    83f2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    83f4:	9b00      	ldr	r3, [sp, #0]
    83f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    83f8:	461a      	mov	r2, r3
    83fa:	9802      	ldr	r0, [sp, #8]
    83fc:	f7ff fef6 	bl	81ec <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    8400:	9b00      	ldr	r3, [sp, #0]
    8402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8406:	4619      	mov	r1, r3
    8408:	9801      	ldr	r0, [sp, #4]
    840a:	f000 f955 	bl	86b8 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    840e:	9b00      	ldr	r3, [sp, #0]
    8410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8412:	2b00      	cmp	r3, #0
    8414:	d01c      	beq.n	8450 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8416:	2300      	movs	r3, #0
    8418:	f88d 300f 	strb.w	r3, [sp, #15]
    841c:	e011      	b.n	8442 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    841e:	9b00      	ldr	r3, [sp, #0]
    8420:	6b59      	ldr	r1, [r3, #52]	; 0x34
    8422:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8426:	4613      	mov	r3, r2
    8428:	005b      	lsls	r3, r3, #1
    842a:	4413      	add	r3, r2
    842c:	009b      	lsls	r3, r3, #2
    842e:	440b      	add	r3, r1
    8430:	4619      	mov	r1, r3
    8432:	9801      	ldr	r0, [sp, #4]
    8434:	f000 f9c2 	bl	87bc <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8438:	f89d 300f 	ldrb.w	r3, [sp, #15]
    843c:	3301      	adds	r3, #1
    843e:	f88d 300f 	strb.w	r3, [sp, #15]
    8442:	9b00      	ldr	r3, [sp, #0]
    8444:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8448:	f89d 200f 	ldrb.w	r2, [sp, #15]
    844c:	429a      	cmp	r2, r3
    844e:	d3e6      	bcc.n	841e <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8450:	9b00      	ldr	r3, [sp, #0]
    8452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8454:	490f      	ldr	r1, [pc, #60]	; (8494 <Adc_Ip_Init+0x1aa>)
    8456:	9b01      	ldr	r3, [sp, #4]
    8458:	204c      	movs	r0, #76	; 0x4c
    845a:	fb00 f303 	mul.w	r3, r0, r3
    845e:	440b      	add	r3, r1
    8460:	3308      	adds	r3, #8
    8462:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8464:	9b00      	ldr	r3, [sp, #0]
    8466:	685a      	ldr	r2, [r3, #4]
    8468:	490a      	ldr	r1, [pc, #40]	; (8494 <Adc_Ip_Init+0x1aa>)
    846a:	9b01      	ldr	r3, [sp, #4]
    846c:	204c      	movs	r0, #76	; 0x4c
    846e:	fb00 f303 	mul.w	r3, r0, r3
    8472:	440b      	add	r3, r1
    8474:	3304      	adds	r3, #4
    8476:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    8478:	4a06      	ldr	r2, [pc, #24]	; (8494 <Adc_Ip_Init+0x1aa>)
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	214c      	movs	r1, #76	; 0x4c
    847e:	fb01 f303 	mul.w	r3, r1, r3
    8482:	4413      	add	r3, r2
    8484:	2201      	movs	r2, #1
    8486:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8488:	bf00      	nop
    848a:	b007      	add	sp, #28
    848c:	f85d fb04 	ldr.w	pc, [sp], #4
    8490:	000156a4 	.word	0x000156a4
    8494:	1fff8d58 	.word	0x1fff8d58

00008498 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    8498:	b500      	push	{lr}
    849a:	b0c3      	sub	sp, #268	; 0x10c
    849c:	ab42      	add	r3, sp, #264	; 0x108
    849e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    84a2:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    84a4:	2300      	movs	r3, #0
    84a6:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    84a8:	2303      	movs	r3, #3
    84aa:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    84ac:	2300      	movs	r3, #0
    84ae:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    84b0:	230c      	movs	r3, #12
    84b2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    84b6:	2300      	movs	r3, #0
    84b8:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    84bc:	2300      	movs	r3, #0
    84be:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    84c0:	2300      	movs	r3, #0
    84c2:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    84c4:	2300      	movs	r3, #0
    84c6:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    84c8:	2300      	movs	r3, #0
    84ca:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    84ce:	2300      	movs	r3, #0
    84d0:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    84d2:	2300      	movs	r3, #0
    84d4:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    84d8:	2300      	movs	r3, #0
    84da:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    84de:	2300      	movs	r3, #0
    84e0:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    84e4:	2300      	movs	r3, #0
    84e6:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    84ea:	2300      	movs	r3, #0
    84ec:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    84f0:	2300      	movs	r3, #0
    84f2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    84f6:	2304      	movs	r3, #4
    84f8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    84fc:	2300      	movs	r3, #0
    84fe:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    8502:	2310      	movs	r3, #16
    8504:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    8508:	2300      	movs	r3, #0
    850a:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    850e:	e02b      	b.n	8568 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    8510:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8514:	ab42      	add	r3, sp, #264	; 0x108
    8516:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    851a:	4613      	mov	r3, r2
    851c:	005b      	lsls	r3, r3, #1
    851e:	4413      	add	r3, r2
    8520:	009b      	lsls	r3, r3, #2
    8522:	440b      	add	r3, r1
    8524:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8528:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    852a:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    852e:	ab42      	add	r3, sp, #264	; 0x108
    8530:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8534:	4613      	mov	r3, r2
    8536:	005b      	lsls	r3, r3, #1
    8538:	4413      	add	r3, r2
    853a:	009b      	lsls	r3, r3, #2
    853c:	440b      	add	r3, r1
    853e:	3304      	adds	r3, #4
    8540:	221f      	movs	r2, #31
    8542:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    8544:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8548:	ab42      	add	r3, sp, #264	; 0x108
    854a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    854e:	4613      	mov	r3, r2
    8550:	005b      	lsls	r3, r3, #1
    8552:	4413      	add	r3, r2
    8554:	009b      	lsls	r3, r3, #2
    8556:	440b      	add	r3, r1
    8558:	3308      	adds	r3, #8
    855a:	2200      	movs	r2, #0
    855c:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    855e:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8562:	3301      	adds	r3, #1
    8564:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    8568:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    856c:	2b0f      	cmp	r3, #15
    856e:	d9cf      	bls.n	8510 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    8570:	ab02      	add	r3, sp, #8
    8572:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8574:	2300      	movs	r3, #0
    8576:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    8578:	aa32      	add	r2, sp, #200	; 0xc8
    857a:	ab42      	add	r3, sp, #264	; 0x108
    857c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8580:	4611      	mov	r1, r2
    8582:	6818      	ldr	r0, [r3, #0]
    8584:	f7ff feb1 	bl	82ea <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    8588:	4a07      	ldr	r2, [pc, #28]	; (85a8 <Adc_Ip_DeInit+0x110>)
    858a:	ab42      	add	r3, sp, #264	; 0x108
    858c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8590:	681b      	ldr	r3, [r3, #0]
    8592:	214c      	movs	r1, #76	; 0x4c
    8594:	fb01 f303 	mul.w	r3, r1, r3
    8598:	4413      	add	r3, r2
    859a:	2200      	movs	r2, #0
    859c:	701a      	strb	r2, [r3, #0]
}
    859e:	bf00      	nop
    85a0:	b043      	add	sp, #268	; 0x10c
    85a2:	f85d fb04 	ldr.w	pc, [sp], #4
    85a6:	bf00      	nop
    85a8:	1fff8d58 	.word	0x1fff8d58

000085ac <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    85ac:	b500      	push	{lr}
    85ae:	b087      	sub	sp, #28
    85b0:	9003      	str	r0, [sp, #12]
    85b2:	460b      	mov	r3, r1
    85b4:	9201      	str	r2, [sp, #4]
    85b6:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85ba:	4a0a      	ldr	r2, [pc, #40]	; (85e4 <Adc_Ip_SetAveraging+0x38>)
    85bc:	9b03      	ldr	r3, [sp, #12]
    85be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85c2:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    85c4:	f006 ff5e 	bl	f484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    85c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    85cc:	9a01      	ldr	r2, [sp, #4]
    85ce:	4619      	mov	r1, r3
    85d0:	9805      	ldr	r0, [sp, #20]
    85d2:	f7ff fd73 	bl	80bc <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    85d6:	f006 ff81 	bl	f4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    85da:	bf00      	nop
    85dc:	b007      	add	sp, #28
    85de:	f85d fb04 	ldr.w	pc, [sp], #4
    85e2:	bf00      	nop
    85e4:	000156a4 	.word	0x000156a4

000085e8 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    85e8:	b500      	push	{lr}
    85ea:	b085      	sub	sp, #20
    85ec:	9001      	str	r0, [sp, #4]
    85ee:	460b      	mov	r3, r1
    85f0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85f4:	4a09      	ldr	r2, [pc, #36]	; (861c <Adc_Ip_SetSampleTime+0x34>)
    85f6:	9b01      	ldr	r3, [sp, #4]
    85f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85fc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    85fe:	f006 fbbb 	bl	ed78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    8602:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8606:	4619      	mov	r1, r3
    8608:	9803      	ldr	r0, [sp, #12]
    860a:	f7ff fd36 	bl	807a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    860e:	f006 fbdf 	bl	edd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    8612:	bf00      	nop
    8614:	b005      	add	sp, #20
    8616:	f85d fb04 	ldr.w	pc, [sp], #4
    861a:	bf00      	nop
    861c:	000156a4 	.word	0x000156a4

00008620 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    8620:	b500      	push	{lr}
    8622:	b085      	sub	sp, #20
    8624:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8626:	4a0a      	ldr	r2, [pc, #40]	; (8650 <Adc_Ip_EnableDma+0x30>)
    8628:	9b01      	ldr	r3, [sp, #4]
    862a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    862e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    8630:	f006 fed6 	bl	f3e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    8634:	9b03      	ldr	r3, [sp, #12]
    8636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    863a:	f043 0204 	orr.w	r2, r3, #4
    863e:	9b03      	ldr	r3, [sp, #12]
    8640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    8644:	f006 fef8 	bl	f438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    8648:	bf00      	nop
    864a:	b005      	add	sp, #20
    864c:	f85d fb04 	ldr.w	pc, [sp], #4
    8650:	000156a4 	.word	0x000156a4

00008654 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8654:	b500      	push	{lr}
    8656:	b085      	sub	sp, #20
    8658:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    865a:	4a0a      	ldr	r2, [pc, #40]	; (8684 <Adc_Ip_DisableDma+0x30>)
    865c:	9b01      	ldr	r3, [sp, #4]
    865e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8662:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8664:	f006 fd74 	bl	f150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    8668:	9b03      	ldr	r3, [sp, #12]
    866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    866e:	f023 0204 	bic.w	r2, r3, #4
    8672:	9b03      	ldr	r3, [sp, #12]
    8674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    8678:	f006 fd96 	bl	f1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    867c:	bf00      	nop
    867e:	b005      	add	sp, #20
    8680:	f85d fb04 	ldr.w	pc, [sp], #4
    8684:	000156a4 	.word	0x000156a4

00008688 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    8688:	b500      	push	{lr}
    868a:	b085      	sub	sp, #20
    868c:	9001      	str	r0, [sp, #4]
    868e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8690:	4a08      	ldr	r2, [pc, #32]	; (86b4 <Adc_Ip_SetTriggerMode+0x2c>)
    8692:	9b01      	ldr	r3, [sp, #4]
    8694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8698:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    869a:	f006 fdab 	bl	f1f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    869e:	9900      	ldr	r1, [sp, #0]
    86a0:	9803      	ldr	r0, [sp, #12]
    86a2:	f7ff fd4e 	bl	8142 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    86a6:	f006 fdd1 	bl	f24c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    86aa:	bf00      	nop
    86ac:	b005      	add	sp, #20
    86ae:	f85d fb04 	ldr.w	pc, [sp], #4
    86b2:	bf00      	nop
    86b4:	000156a4 	.word	0x000156a4

000086b8 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    86b8:	b500      	push	{lr}
    86ba:	b085      	sub	sp, #20
    86bc:	9001      	str	r0, [sp, #4]
    86be:	460b      	mov	r3, r1
    86c0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    86c4:	4a11      	ldr	r2, [pc, #68]	; (870c <Adc_Ip_SetContinuousMode+0x54>)
    86c6:	9b01      	ldr	r3, [sp, #4]
    86c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86cc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    86ce:	f006 ffcf 	bl	f670 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    86d2:	9b03      	ldr	r3, [sp, #12]
    86d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    86d8:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    86da:	9b02      	ldr	r3, [sp, #8]
    86dc:	f023 0308 	bic.w	r3, r3, #8
    86e0:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    86e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    86e6:	2b00      	cmp	r3, #0
    86e8:	d001      	beq.n	86ee <Adc_Ip_SetContinuousMode+0x36>
    86ea:	2308      	movs	r3, #8
    86ec:	e000      	b.n	86f0 <Adc_Ip_SetContinuousMode+0x38>
    86ee:	2300      	movs	r3, #0
    86f0:	9a02      	ldr	r2, [sp, #8]
    86f2:	4313      	orrs	r3, r2
    86f4:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    86f6:	9b03      	ldr	r3, [sp, #12]
    86f8:	9a02      	ldr	r2, [sp, #8]
    86fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    86fe:	f006 ffe3 	bl	f6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    8702:	bf00      	nop
    8704:	b005      	add	sp, #20
    8706:	f85d fb04 	ldr.w	pc, [sp], #4
    870a:	bf00      	nop
    870c:	000156a4 	.word	0x000156a4

00008710 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    8710:	b500      	push	{lr}
    8712:	b085      	sub	sp, #20
    8714:	9001      	str	r0, [sp, #4]
    8716:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8718:	4a0e      	ldr	r2, [pc, #56]	; (8754 <Adc_Ip_SetResolution+0x44>)
    871a:	9b01      	ldr	r3, [sp, #4]
    871c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8720:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    8722:	f005 fff5 	bl	e710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    8726:	9b03      	ldr	r3, [sp, #12]
    8728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    872a:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    872c:	9b02      	ldr	r3, [sp, #8]
    872e:	f023 030c 	bic.w	r3, r3, #12
    8732:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8734:	9b00      	ldr	r3, [sp, #0]
    8736:	009b      	lsls	r3, r3, #2
    8738:	f003 030c 	and.w	r3, r3, #12
    873c:	9a02      	ldr	r2, [sp, #8]
    873e:	4313      	orrs	r3, r2
    8740:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    8742:	9b03      	ldr	r3, [sp, #12]
    8744:	9a02      	ldr	r2, [sp, #8]
    8746:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    8748:	f006 f80e 	bl	e768 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    874c:	bf00      	nop
    874e:	b005      	add	sp, #20
    8750:	f85d fb04 	ldr.w	pc, [sp], #4
    8754:	000156a4 	.word	0x000156a4

00008758 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    8758:	b500      	push	{lr}
    875a:	b085      	sub	sp, #20
    875c:	9001      	str	r0, [sp, #4]
    875e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8760:	4a15      	ldr	r2, [pc, #84]	; (87b8 <Adc_Ip_SetClockMode+0x60>)
    8762:	9b01      	ldr	r3, [sp, #4]
    8764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8768:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    876a:	f006 f96b 	bl	ea44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    876e:	9b00      	ldr	r3, [sp, #0]
    8770:	6819      	ldr	r1, [r3, #0]
    8772:	9b00      	ldr	r3, [sp, #0]
    8774:	685b      	ldr	r3, [r3, #4]
    8776:	461a      	mov	r2, r3
    8778:	9803      	ldr	r0, [sp, #12]
    877a:	f7ff fc23 	bl	7fc4 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    877e:	f006 f98d 	bl	ea9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    8782:	f006 fa55 	bl	ec30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8786:	9b00      	ldr	r3, [sp, #0]
    8788:	7a1b      	ldrb	r3, [r3, #8]
    878a:	4619      	mov	r1, r3
    878c:	9803      	ldr	r0, [sp, #12]
    878e:	f7ff fc74 	bl	807a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    8792:	f006 fa79 	bl	ec88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    8796:	f006 fec7 	bl	f528 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    879a:	9b00      	ldr	r3, [sp, #0]
    879c:	7a59      	ldrb	r1, [r3, #9]
    879e:	9b00      	ldr	r3, [sp, #0]
    87a0:	68db      	ldr	r3, [r3, #12]
    87a2:	461a      	mov	r2, r3
    87a4:	9803      	ldr	r0, [sp, #12]
    87a6:	f7ff fc89 	bl	80bc <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    87aa:	f006 fee9 	bl	f580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    87ae:	bf00      	nop
    87b0:	b005      	add	sp, #20
    87b2:	f85d fb04 	ldr.w	pc, [sp], #4
    87b6:	bf00      	nop
    87b8:	000156a4 	.word	0x000156a4

000087bc <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    87bc:	b510      	push	{r4, lr}
    87be:	b084      	sub	sp, #16
    87c0:	9001      	str	r0, [sp, #4]
    87c2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    87c4:	4a13      	ldr	r2, [pc, #76]	; (8814 <Adc_Ip_ConfigChannel+0x58>)
    87c6:	9b01      	ldr	r3, [sp, #4]
    87c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87cc:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    87ce:	9b00      	ldr	r3, [sp, #0]
    87d0:	685b      	ldr	r3, [r3, #4]
    87d2:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    87d4:	f006 fc6a 	bl	f0ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    87d8:	9b00      	ldr	r3, [sp, #0]
    87da:	7819      	ldrb	r1, [r3, #0]
    87dc:	9b00      	ldr	r3, [sp, #0]
    87de:	7a1b      	ldrb	r3, [r3, #8]
    87e0:	9a02      	ldr	r2, [sp, #8]
    87e2:	9803      	ldr	r0, [sp, #12]
    87e4:	f7ff fcd5 	bl	8192 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    87e8:	f006 fc8c 	bl	f104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    87ec:	9b00      	ldr	r3, [sp, #0]
    87ee:	781b      	ldrb	r3, [r3, #0]
    87f0:	461c      	mov	r4, r3
    87f2:	9b00      	ldr	r3, [sp, #0]
    87f4:	6859      	ldr	r1, [r3, #4]
    87f6:	4808      	ldr	r0, [pc, #32]	; (8818 <Adc_Ip_ConfigChannel+0x5c>)
    87f8:	9a01      	ldr	r2, [sp, #4]
    87fa:	4613      	mov	r3, r2
    87fc:	00db      	lsls	r3, r3, #3
    87fe:	4413      	add	r3, r2
    8800:	005b      	lsls	r3, r3, #1
    8802:	4413      	add	r3, r2
    8804:	4423      	add	r3, r4
    8806:	3302      	adds	r3, #2
    8808:	009b      	lsls	r3, r3, #2
    880a:	4403      	add	r3, r0
    880c:	6059      	str	r1, [r3, #4]
}
    880e:	bf00      	nop
    8810:	b004      	add	sp, #16
    8812:	bd10      	pop	{r4, pc}
    8814:	000156a4 	.word	0x000156a4
    8818:	1fff8d58 	.word	0x1fff8d58

0000881c <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    881c:	b500      	push	{lr}
    881e:	b089      	sub	sp, #36	; 0x24
    8820:	9001      	str	r0, [sp, #4]
    8822:	460b      	mov	r3, r1
    8824:	f88d 3003 	strb.w	r3, [sp, #3]
    8828:	4613      	mov	r3, r2
    882a:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    882e:	4a24      	ldr	r2, [pc, #144]	; (88c0 <Adc_Ip_SetDisabledChannel+0xa4>)
    8830:	9b01      	ldr	r3, [sp, #4]
    8832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8836:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8838:	2300      	movs	r3, #0
    883a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    883c:	2100      	movs	r1, #0
    883e:	4821      	ldr	r0, [pc, #132]	; (88c4 <Adc_Ip_SetDisabledChannel+0xa8>)
    8840:	f7f9 f954 	bl	1aec <OsIf_MicrosToTicks>
    8844:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8846:	2000      	movs	r0, #0
    8848:	f7f9 f904 	bl	1a54 <OsIf_GetCounter>
    884c:	4603      	mov	r3, r0
    884e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8850:	2300      	movs	r3, #0
    8852:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8854:	f006 fae2 	bl	ee1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    8858:	f89d 2003 	ldrb.w	r2, [sp, #3]
    885c:	9b05      	ldr	r3, [sp, #20]
    885e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8862:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8866:	f043 011f 	orr.w	r1, r3, #31
    886a:	9b05      	ldr	r3, [sp, #20]
    886c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8870:	f006 fb00 	bl	ee74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8874:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8878:	2b00      	cmp	r3, #0
    887a:	d01c      	beq.n	88b6 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    887c:	e008      	b.n	8890 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    887e:	ab03      	add	r3, sp, #12
    8880:	2100      	movs	r1, #0
    8882:	4618      	mov	r0, r3
    8884:	f7f9 f8ff 	bl	1a86 <OsIf_GetElapsed>
    8888:	4602      	mov	r2, r0
    888a:	9b06      	ldr	r3, [sp, #24]
    888c:	4413      	add	r3, r2
    888e:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8890:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8894:	9b05      	ldr	r3, [sp, #20]
    8896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    889a:	f003 031f 	and.w	r3, r3, #31
    889e:	2b1f      	cmp	r3, #31
    88a0:	d003      	beq.n	88aa <Adc_Ip_SetDisabledChannel+0x8e>
    88a2:	9a06      	ldr	r2, [sp, #24]
    88a4:	9b04      	ldr	r3, [sp, #16]
    88a6:	429a      	cmp	r2, r3
    88a8:	d3e9      	bcc.n	887e <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    88aa:	9a06      	ldr	r2, [sp, #24]
    88ac:	9b04      	ldr	r3, [sp, #16]
    88ae:	429a      	cmp	r2, r3
    88b0:	d301      	bcc.n	88b6 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    88b2:	2302      	movs	r3, #2
    88b4:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    88b6:	9b07      	ldr	r3, [sp, #28]
}
    88b8:	4618      	mov	r0, r3
    88ba:	b009      	add	sp, #36	; 0x24
    88bc:	f85d fb04 	ldr.w	pc, [sp], #4
    88c0:	000156a4 	.word	0x000156a4
    88c4:	000186a0 	.word	0x000186a0

000088c8 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    88c8:	b500      	push	{lr}
    88ca:	b087      	sub	sp, #28
    88cc:	9003      	str	r0, [sp, #12]
    88ce:	9102      	str	r1, [sp, #8]
    88d0:	4613      	mov	r3, r2
    88d2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88d6:	4a0a      	ldr	r2, [pc, #40]	; (8900 <Adc_Ip_StartConversion+0x38>)
    88d8:	9b03      	ldr	r3, [sp, #12]
    88da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88de:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    88e0:	f006 faee 	bl	eec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    88e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88e8:	9a02      	ldr	r2, [sp, #8]
    88ea:	2100      	movs	r1, #0
    88ec:	9805      	ldr	r0, [sp, #20]
    88ee:	f7ff fc50 	bl	8192 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    88f2:	f006 fb11 	bl	ef18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    88f6:	bf00      	nop
    88f8:	b007      	add	sp, #28
    88fa:	f85d fb04 	ldr.w	pc, [sp], #4
    88fe:	bf00      	nop
    8900:	000156a4 	.word	0x000156a4

00008904 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    8904:	b084      	sub	sp, #16
    8906:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8908:	4a0b      	ldr	r2, [pc, #44]	; (8938 <Adc_Ip_GetConvActiveFlag+0x34>)
    890a:	9b01      	ldr	r3, [sp, #4]
    890c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8910:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    8912:	9b03      	ldr	r3, [sp, #12]
    8914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8918:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    891a:	9b02      	ldr	r3, [sp, #8]
    891c:	09db      	lsrs	r3, r3, #7
    891e:	f003 0301 	and.w	r3, r3, #1
    8922:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    8924:	9b02      	ldr	r3, [sp, #8]
    8926:	2b00      	cmp	r3, #0
    8928:	bf14      	ite	ne
    892a:	2301      	movne	r3, #1
    892c:	2300      	moveq	r3, #0
    892e:	b2db      	uxtb	r3, r3
}
    8930:	4618      	mov	r0, r3
    8932:	b004      	add	sp, #16
    8934:	4770      	bx	lr
    8936:	bf00      	nop
    8938:	000156a4 	.word	0x000156a4

0000893c <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    893c:	b500      	push	{lr}
    893e:	b085      	sub	sp, #20
    8940:	9001      	str	r0, [sp, #4]
    8942:	460b      	mov	r3, r1
    8944:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8948:	4a08      	ldr	r2, [pc, #32]	; (896c <Adc_Ip_GetChanInterrupt+0x30>)
    894a:	9b01      	ldr	r3, [sp, #4]
    894c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8950:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8958:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    895a:	9803      	ldr	r0, [sp, #12]
    895c:	f7ff fc5e 	bl	821c <Adc_HwAcc_GetAIEN>
    8960:	4603      	mov	r3, r0
}
    8962:	4618      	mov	r0, r3
    8964:	b005      	add	sp, #20
    8966:	f85d fb04 	ldr.w	pc, [sp], #4
    896a:	bf00      	nop
    896c:	000156a4 	.word	0x000156a4

00008970 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8970:	b500      	push	{lr}
    8972:	b085      	sub	sp, #20
    8974:	9001      	str	r0, [sp, #4]
    8976:	460b      	mov	r3, r1
    8978:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    897c:	4a08      	ldr	r2, [pc, #32]	; (89a0 <Adc_Ip_GetConvCompleteFlag+0x30>)
    897e:	9b01      	ldr	r3, [sp, #4]
    8980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8984:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    898c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    898e:	9803      	ldr	r0, [sp, #12]
    8990:	f7ff fc52 	bl	8238 <Adc_HwAcc_GetCOCO>
    8994:	4603      	mov	r3, r0
}
    8996:	4618      	mov	r0, r3
    8998:	b005      	add	sp, #20
    899a:	f85d fb04 	ldr.w	pc, [sp], #4
    899e:	bf00      	nop
    89a0:	000156a4 	.word	0x000156a4

000089a4 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    89a4:	b500      	push	{lr}
    89a6:	b085      	sub	sp, #20
    89a8:	9001      	str	r0, [sp, #4]
    89aa:	460b      	mov	r3, r1
    89ac:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89b0:	4a07      	ldr	r2, [pc, #28]	; (89d0 <Adc_Ip_GetConvData+0x2c>)
    89b2:	9b01      	ldr	r3, [sp, #4]
    89b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89b8:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    89ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    89be:	4619      	mov	r1, r3
    89c0:	9803      	ldr	r0, [sp, #12]
    89c2:	f7ff fc47 	bl	8254 <Adc_HwAcc_GetData>
    89c6:	4603      	mov	r3, r0
}
    89c8:	4618      	mov	r0, r3
    89ca:	b005      	add	sp, #20
    89cc:	f85d fb04 	ldr.w	pc, [sp], #4
    89d0:	000156a4 	.word	0x000156a4

000089d4 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    89d4:	b500      	push	{lr}
    89d6:	b093      	sub	sp, #76	; 0x4c
    89d8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89da:	4a59      	ldr	r2, [pc, #356]	; (8b40 <Adc_Ip_DoCalibration+0x16c>)
    89dc:	9b01      	ldr	r3, [sp, #4]
    89de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e2:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    89e4:	2300      	movs	r3, #0
    89e6:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    89e8:	2100      	movs	r1, #0
    89ea:	4856      	ldr	r0, [pc, #344]	; (8b44 <Adc_Ip_DoCalibration+0x170>)
    89ec:	f7f9 f87e 	bl	1aec <OsIf_MicrosToTicks>
    89f0:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    89f2:	2000      	movs	r0, #0
    89f4:	f7f9 f82e 	bl	1a54 <OsIf_GetCounter>
    89f8:	4603      	mov	r3, r0
    89fa:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    89fc:	2300      	movs	r3, #0
    89fe:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    8a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8a06:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    8a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a0a:	089b      	lsrs	r3, r3, #2
    8a0c:	f003 0301 	and.w	r3, r3, #1
    8a10:	2b00      	cmp	r3, #0
    8a12:	bf14      	ite	ne
    8a14:	2301      	movne	r3, #1
    8a16:	2300      	moveq	r3, #0
    8a18:	b2db      	uxtb	r3, r3
    8a1a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    8a1e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8a20:	f7ff fb71 	bl	8106 <Adc_HwAcc_GetAverageSelect>
    8a24:	4603      	mov	r3, r0
    8a26:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    8a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8a2c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    8a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a30:	b2db      	uxtb	r3, r3
    8a32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a3c:	4618      	mov	r0, r3
    8a3e:	f7ff fb99 	bl	8174 <Adc_HwAcc_GetTriggerMode>
    8a42:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    8a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8a48:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    8a4a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8a4c:	f7ff fad8 	bl	8000 <Adc_HwAcc_GetClockDivide>
    8a50:	4603      	mov	r3, r0
    8a52:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8a54:	980d      	ldr	r0, [sp, #52]	; 0x34
    8a56:	f7ff faf2 	bl	803e <Adc_HwAcc_GetInputClock>
    8a5a:	4603      	mov	r3, r0
    8a5c:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    8a5e:	2301      	movs	r3, #1
    8a60:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8a64:	2303      	movs	r3, #3
    8a66:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8a68:	230c      	movs	r3, #12
    8a6a:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    8a6e:	4a36      	ldr	r2, [pc, #216]	; (8b48 <Adc_Ip_DoCalibration+0x174>)
    8a70:	9b01      	ldr	r3, [sp, #4]
    8a72:	214c      	movs	r1, #76	; 0x4c
    8a74:	fb01 f303 	mul.w	r3, r1, r3
    8a78:	4413      	add	r3, r2
    8a7a:	3304      	adds	r3, #4
    8a7c:	681b      	ldr	r3, [r3, #0]
    8a7e:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8a80:	9b08      	ldr	r3, [sp, #32]
    8a82:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8a84:	ab03      	add	r3, sp, #12
    8a86:	2200      	movs	r2, #0
    8a88:	4619      	mov	r1, r3
    8a8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a8c:	f7ff fbfa 	bl	8284 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a92:	2200      	movs	r2, #0
    8a94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a9a:	2200      	movs	r2, #0
    8a9c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8aa2:	2200      	movs	r2, #0
    8aa4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8aa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8aaa:	2200      	movs	r2, #0
    8aac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ab2:	2200      	movs	r2, #0
    8ab4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8aba:	2200      	movs	r2, #0
    8abc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ac2:	2200      	movs	r2, #0
    8ac4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8ac8:	f006 fd80 	bl	f5cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8ad2:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8ada:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8ae2:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ae8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8aec:	f006 fd9a 	bl	f624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8af0:	e008      	b.n	8b04 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8af2:	ab0b      	add	r3, sp, #44	; 0x2c
    8af4:	2100      	movs	r1, #0
    8af6:	4618      	mov	r0, r3
    8af8:	f7f8 ffc5 	bl	1a86 <OsIf_GetElapsed>
    8afc:	4602      	mov	r2, r0
    8afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8b00:	4413      	add	r3, r2
    8b02:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d003      	beq.n	8b1a <Adc_Ip_DoCalibration+0x146>
    8b12:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b16:	429a      	cmp	r2, r3
    8b18:	d3eb      	bcc.n	8af2 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8b1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b1e:	429a      	cmp	r2, r3
    8b20:	d301      	bcc.n	8b26 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8b22:	2302      	movs	r3, #2
    8b24:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    8b26:	ab07      	add	r3, sp, #28
    8b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b2a:	4619      	mov	r1, r3
    8b2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8b2e:	f7ff fba9 	bl	8284 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8b38:	4618      	mov	r0, r3
    8b3a:	b013      	add	sp, #76	; 0x4c
    8b3c:	f85d fb04 	ldr.w	pc, [sp], #4
    8b40:	000156a4 	.word	0x000156a4
    8b44:	000186a0 	.word	0x000186a0
    8b48:	1fff8d58 	.word	0x1fff8d58

00008b4c <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8b4c:	b500      	push	{lr}
    8b4e:	b089      	sub	sp, #36	; 0x24
    8b50:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8b52:	4a1e      	ldr	r2, [pc, #120]	; (8bcc <Adc_Ip_ClearLatchedTriggers+0x80>)
    8b54:	9b01      	ldr	r3, [sp, #4]
    8b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b5a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8b5c:	2300      	movs	r3, #0
    8b5e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8b60:	2100      	movs	r1, #0
    8b62:	481b      	ldr	r0, [pc, #108]	; (8bd0 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8b64:	f7f8 ffc2 	bl	1aec <OsIf_MicrosToTicks>
    8b68:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8b6a:	2000      	movs	r0, #0
    8b6c:	f7f8 ff72 	bl	1a54 <OsIf_GetCounter>
    8b70:	4603      	mov	r3, r0
    8b72:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8b74:	2300      	movs	r3, #0
    8b76:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8b78:	f005 ffb6 	bl	eae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8b7c:	9b05      	ldr	r3, [sp, #20]
    8b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8b80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8b84:	9b05      	ldr	r3, [sp, #20]
    8b86:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8b88:	f005 ffda 	bl	eb40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8b8c:	e008      	b.n	8ba0 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8b8e:	ab03      	add	r3, sp, #12
    8b90:	2100      	movs	r1, #0
    8b92:	4618      	mov	r0, r3
    8b94:	f7f8 ff77 	bl	1a86 <OsIf_GetElapsed>
    8b98:	4602      	mov	r2, r0
    8b9a:	9b06      	ldr	r3, [sp, #24]
    8b9c:	4413      	add	r3, r2
    8b9e:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8ba0:	9b05      	ldr	r3, [sp, #20]
    8ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8ba6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8baa:	2b00      	cmp	r3, #0
    8bac:	d003      	beq.n	8bb6 <Adc_Ip_ClearLatchedTriggers+0x6a>
    8bae:	9a06      	ldr	r2, [sp, #24]
    8bb0:	9b04      	ldr	r3, [sp, #16]
    8bb2:	429a      	cmp	r2, r3
    8bb4:	d3eb      	bcc.n	8b8e <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8bb6:	9a06      	ldr	r2, [sp, #24]
    8bb8:	9b04      	ldr	r3, [sp, #16]
    8bba:	429a      	cmp	r2, r3
    8bbc:	d301      	bcc.n	8bc2 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8bbe:	2302      	movs	r3, #2
    8bc0:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8bc2:	9b07      	ldr	r3, [sp, #28]
}
    8bc4:	4618      	mov	r0, r3
    8bc6:	b009      	add	sp, #36	; 0x24
    8bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    8bcc:	000156a4 	.word	0x000156a4
    8bd0:	000186a0 	.word	0x000186a0

00008bd4 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8bd4:	b500      	push	{lr}
    8bd6:	b085      	sub	sp, #20
    8bd8:	9001      	str	r0, [sp, #4]
    8bda:	460b      	mov	r3, r1
    8bdc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8be0:	4a0c      	ldr	r2, [pc, #48]	; (8c14 <Adc_Ip_EnableChannelNotification+0x40>)
    8be2:	9b01      	ldr	r3, [sp, #4]
    8be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8bea:	f006 f9bb 	bl	ef64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8bee:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8bf2:	9b03      	ldr	r3, [sp, #12]
    8bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bf8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8bfc:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8c00:	9b03      	ldr	r3, [sp, #12]
    8c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    8c06:	f006 f9d9 	bl	efbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    8c0a:	bf00      	nop
    8c0c:	b005      	add	sp, #20
    8c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    8c12:	bf00      	nop
    8c14:	000156a4 	.word	0x000156a4

00008c18 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    8c18:	b500      	push	{lr}
    8c1a:	b085      	sub	sp, #20
    8c1c:	9001      	str	r0, [sp, #4]
    8c1e:	460b      	mov	r3, r1
    8c20:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8c24:	4a0c      	ldr	r2, [pc, #48]	; (8c58 <Adc_Ip_DisableChannelNotification+0x40>)
    8c26:	9b01      	ldr	r3, [sp, #4]
    8c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c2c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8c2e:	f006 f9eb 	bl	f008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8c32:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c36:	9b03      	ldr	r3, [sp, #12]
    8c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c3c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c40:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8c44:	9b03      	ldr	r3, [sp, #12]
    8c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    8c4a:	f006 fa09 	bl	f060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8c4e:	bf00      	nop
    8c50:	b005      	add	sp, #20
    8c52:	f85d fb04 	ldr.w	pc, [sp], #4
    8c56:	bf00      	nop
    8c58:	000156a4 	.word	0x000156a4

00008c5c <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8c5c:	b500      	push	{lr}
    8c5e:	b085      	sub	sp, #20
    8c60:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8c62:	4a0a      	ldr	r2, [pc, #40]	; (8c8c <Adc_Ip_ClearTrigErrReg+0x30>)
    8c64:	9b01      	ldr	r3, [sp, #4]
    8c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c6a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8c6c:	f006 fb66 	bl	f33c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8c70:	9b03      	ldr	r3, [sp, #12]
    8c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8c76:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    8c7a:	9b03      	ldr	r3, [sp, #12]
    8c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8c80:	f006 fb88 	bl	f394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8c84:	bf00      	nop
    8c86:	b005      	add	sp, #20
    8c88:	f85d fb04 	ldr.w	pc, [sp], #4
    8c8c:	000156a4 	.word	0x000156a4

00008c90 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8c90:	b084      	sub	sp, #16
    8c92:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8c94:	4a06      	ldr	r2, [pc, #24]	; (8cb0 <Adc_Ip_GetTrigErrReg+0x20>)
    8c96:	9b01      	ldr	r3, [sp, #4]
    8c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c9c:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8c9e:	9b03      	ldr	r3, [sp, #12]
    8ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8ca4:	0e1b      	lsrs	r3, r3, #24
    8ca6:	f003 030f 	and.w	r3, r3, #15
}
    8caa:	4618      	mov	r0, r3
    8cac:	b004      	add	sp, #16
    8cae:	4770      	bx	lr
    8cb0:	000156a4 	.word	0x000156a4

00008cb4 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8cb4:	b082      	sub	sp, #8
    8cb6:	9001      	str	r0, [sp, #4]
    8cb8:	460b      	mov	r3, r1
    8cba:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8cbe:	4a06      	ldr	r2, [pc, #24]	; (8cd8 <Adc_Ip_GetDataAddress+0x24>)
    8cc0:	9b01      	ldr	r3, [sp, #4]
    8cc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cca:	3312      	adds	r3, #18
    8ccc:	009b      	lsls	r3, r3, #2
    8cce:	4413      	add	r3, r2
}
    8cd0:	4618      	mov	r0, r3
    8cd2:	b002      	add	sp, #8
    8cd4:	4770      	bx	lr
    8cd6:	bf00      	nop
    8cd8:	000156a4 	.word	0x000156a4

00008cdc <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8cdc:	b088      	sub	sp, #32
    8cde:	9003      	str	r0, [sp, #12]
    8ce0:	9102      	str	r1, [sp, #8]
    8ce2:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8ce4:	4a25      	ldr	r2, [pc, #148]	; (8d7c <Adc_Ip_GetChanData+0xa0>)
    8ce6:	9b03      	ldr	r3, [sp, #12]
    8ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cec:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8cee:	2300      	movs	r3, #0
    8cf0:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8cf2:	2300      	movs	r3, #0
    8cf4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8cf8:	2300      	movs	r3, #0
    8cfa:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8cfe:	2300      	movs	r3, #0
    8d00:	f88d 3019 	strb.w	r3, [sp, #25]
    8d04:	e019      	b.n	8d3a <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8d06:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8d0a:	481d      	ldr	r0, [pc, #116]	; (8d80 <Adc_Ip_GetChanData+0xa4>)
    8d0c:	9a03      	ldr	r2, [sp, #12]
    8d0e:	4613      	mov	r3, r2
    8d10:	00db      	lsls	r3, r3, #3
    8d12:	4413      	add	r3, r2
    8d14:	005b      	lsls	r3, r3, #1
    8d16:	4413      	add	r3, r2
    8d18:	440b      	add	r3, r1
    8d1a:	3302      	adds	r3, #2
    8d1c:	009b      	lsls	r3, r3, #2
    8d1e:	4403      	add	r3, r0
    8d20:	685b      	ldr	r3, [r3, #4]
    8d22:	9a02      	ldr	r2, [sp, #8]
    8d24:	429a      	cmp	r2, r3
    8d26:	d103      	bne.n	8d30 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8d28:	2301      	movs	r3, #1
    8d2a:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8d2e:	e008      	b.n	8d42 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8d30:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8d34:	3301      	adds	r3, #1
    8d36:	f88d 3019 	strb.w	r3, [sp, #25]
    8d3a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8d3e:	2b0f      	cmp	r3, #15
    8d40:	d9e1      	bls.n	8d06 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8d42:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8d46:	2b00      	cmp	r3, #0
    8d48:	d00e      	beq.n	8d68 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8d4a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8d4e:	9b05      	ldr	r3, [sp, #20]
    8d50:	3212      	adds	r2, #18
    8d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d56:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8d5a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8d62:	f8ad 301a 	strh.w	r3, [sp, #26]
    8d66:	e001      	b.n	8d6c <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8d68:	2301      	movs	r3, #1
    8d6a:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8d6c:	9b01      	ldr	r3, [sp, #4]
    8d6e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8d72:	801a      	strh	r2, [r3, #0]

    return Status;
    8d74:	9b07      	ldr	r3, [sp, #28]
}
    8d76:	4618      	mov	r0, r3
    8d78:	b008      	add	sp, #32
    8d7a:	4770      	bx	lr
    8d7c:	000156a4 	.word	0x000156a4
    8d80:	1fff8d58 	.word	0x1fff8d58

00008d84 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8d84:	b500      	push	{lr}
    8d86:	b085      	sub	sp, #20
    8d88:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8d8a:	2300      	movs	r3, #0
    8d8c:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8d90:	2300      	movs	r3, #0
    8d92:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8d96:	4a32      	ldr	r2, [pc, #200]	; (8e60 <Adc_Ip_IRQHandler+0xdc>)
    8d98:	9b01      	ldr	r3, [sp, #4]
    8d9a:	214c      	movs	r1, #76	; 0x4c
    8d9c:	fb01 f303 	mul.w	r3, r1, r3
    8da0:	4413      	add	r3, r2
    8da2:	781b      	ldrb	r3, [r3, #0]
    8da4:	2b00      	cmp	r3, #0
    8da6:	d040      	beq.n	8e2a <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8da8:	4a2d      	ldr	r2, [pc, #180]	; (8e60 <Adc_Ip_IRQHandler+0xdc>)
    8daa:	9b01      	ldr	r3, [sp, #4]
    8dac:	214c      	movs	r1, #76	; 0x4c
    8dae:	fb01 f303 	mul.w	r3, r1, r3
    8db2:	4413      	add	r3, r2
    8db4:	3308      	adds	r3, #8
    8db6:	681b      	ldr	r3, [r3, #0]
    8db8:	2b00      	cmp	r3, #0
    8dba:	d04d      	beq.n	8e58 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8dbc:	2300      	movs	r3, #0
    8dbe:	f88d 300f 	strb.w	r3, [sp, #15]
    8dc2:	e02d      	b.n	8e20 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8dc4:	4a27      	ldr	r2, [pc, #156]	; (8e64 <Adc_Ip_IRQHandler+0xe0>)
    8dc6:	9b01      	ldr	r3, [sp, #4]
    8dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dcc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8dd4:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8dd6:	9802      	ldr	r0, [sp, #8]
    8dd8:	f7ff fa20 	bl	821c <Adc_HwAcc_GetAIEN>
    8ddc:	4603      	mov	r3, r0
    8dde:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8de2:	9802      	ldr	r0, [sp, #8]
    8de4:	f7ff fa28 	bl	8238 <Adc_HwAcc_GetCOCO>
    8de8:	4603      	mov	r3, r0
    8dea:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8dee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d00f      	beq.n	8e16 <Adc_Ip_IRQHandler+0x92>
    8df6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	d00b      	beq.n	8e16 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8dfe:	4a18      	ldr	r2, [pc, #96]	; (8e60 <Adc_Ip_IRQHandler+0xdc>)
    8e00:	9b01      	ldr	r3, [sp, #4]
    8e02:	214c      	movs	r1, #76	; 0x4c
    8e04:	fb01 f303 	mul.w	r3, r1, r3
    8e08:	4413      	add	r3, r2
    8e0a:	3308      	adds	r3, #8
    8e0c:	681b      	ldr	r3, [r3, #0]
    8e0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8e12:	4610      	mov	r0, r2
    8e14:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8e16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e1a:	3301      	adds	r3, #1
    8e1c:	f88d 300f 	strb.w	r3, [sp, #15]
    8e20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e24:	2b0f      	cmp	r3, #15
    8e26:	d9cd      	bls.n	8dc4 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8e28:	e016      	b.n	8e58 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8e2a:	2300      	movs	r3, #0
    8e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    8e30:	e00e      	b.n	8e50 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8e32:	4a0c      	ldr	r2, [pc, #48]	; (8e64 <Adc_Ip_IRQHandler+0xe0>)
    8e34:	9b01      	ldr	r3, [sp, #4]
    8e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8e3e:	4611      	mov	r1, r2
    8e40:	4618      	mov	r0, r3
    8e42:	f7ff fa07 	bl	8254 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8e46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e4a:	3301      	adds	r3, #1
    8e4c:	f88d 300f 	strb.w	r3, [sp, #15]
    8e50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e54:	2b0f      	cmp	r3, #15
    8e56:	d9ec      	bls.n	8e32 <Adc_Ip_IRQHandler+0xae>
}
    8e58:	bf00      	nop
    8e5a:	b005      	add	sp, #20
    8e5c:	f85d fb04 	ldr.w	pc, [sp], #4
    8e60:	1fff8d58 	.word	0x1fff8d58
    8e64:	000156a4 	.word	0x000156a4

00008e68 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8e68:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8e6a:	2000      	movs	r0, #0
    8e6c:	f7ff ff8a 	bl	8d84 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8e70:	f3bf 8f4f 	dsb	sy
}
    8e74:	bf00      	nop
    8e76:	bd08      	pop	{r3, pc}

00008e78 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8e78:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8e7a:	2001      	movs	r0, #1
    8e7c:	f7ff ff82 	bl	8d84 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8e80:	f3bf 8f4f 	dsb	sy
}
    8e84:	bf00      	nop
    8e86:	bd08      	pop	{r3, pc}

00008e88 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8e88:	b510      	push	{r4, lr}
    8e8a:	b084      	sub	sp, #16
    8e8c:	4603      	mov	r3, r0
    8e8e:	460a      	mov	r2, r1
    8e90:	f88d 3007 	strb.w	r3, [sp, #7]
    8e94:	4613      	mov	r3, r2
    8e96:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8e9a:	2300      	movs	r3, #0
    8e9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8ea0:	2300      	movs	r3, #0
    8ea2:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8ea6:	f005 fa47 	bl	e338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8eae:	4a24      	ldr	r2, [pc, #144]	; (8f40 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8eb0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8eb4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8eb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8ebc:	2b01      	cmp	r3, #1
    8ebe:	d806      	bhi.n	8ece <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ec4:	4a1e      	ldr	r2, [pc, #120]	; (8f40 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8ec6:	2100      	movs	r1, #0
    8ec8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    8ecc:	e032      	b.n	8f34 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8ece:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8ed2:	3301      	adds	r3, #1
    8ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
    8ed8:	e01b      	b.n	8f12 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8eda:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8ede:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8ee2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8ee6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8eea:	3a01      	subs	r2, #1
    8eec:	4c14      	ldr	r4, [pc, #80]	; (8f40 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8eee:	0080      	lsls	r0, r0, #2
    8ef0:	4403      	add	r3, r0
    8ef2:	005b      	lsls	r3, r3, #1
    8ef4:	4423      	add	r3, r4
    8ef6:	885b      	ldrh	r3, [r3, #2]
    8ef8:	b29c      	uxth	r4, r3
    8efa:	4811      	ldr	r0, [pc, #68]	; (8f40 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8efc:	008b      	lsls	r3, r1, #2
    8efe:	4413      	add	r3, r2
    8f00:	005b      	lsls	r3, r3, #1
    8f02:	4403      	add	r3, r0
    8f04:	4622      	mov	r2, r4
    8f06:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8f08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8f0c:	3301      	adds	r3, #1
    8f0e:	f8ad 300e 	strh.w	r3, [sp, #14]
    8f12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8f16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8f1a:	429a      	cmp	r2, r3
    8f1c:	d3dd      	bcc.n	8eda <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f22:	4a07      	ldr	r2, [pc, #28]	; (8f40 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8f24:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8f28:	b292      	uxth	r2, r2
    8f2a:	3a01      	subs	r2, #1
    8f2c:	b291      	uxth	r1, r2
    8f2e:	4a04      	ldr	r2, [pc, #16]	; (8f40 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8f30:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8f34:	f005 fa2c 	bl	e390 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8f38:	bf00      	nop
    8f3a:	b004      	add	sp, #16
    8f3c:	bd10      	pop	{r4, pc}
    8f3e:	bf00      	nop
    8f40:	1fff8d48 	.word	0x1fff8d48

00008f44 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8f44:	b500      	push	{lr}
    8f46:	b087      	sub	sp, #28
    8f48:	9003      	str	r0, [sp, #12]
    8f4a:	9102      	str	r1, [sp, #8]
    8f4c:	9201      	str	r2, [sp, #4]
    8f4e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8f52:	2300      	movs	r3, #0
    8f54:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8f58:	9b03      	ldr	r3, [sp, #12]
    8f5a:	789b      	ldrb	r3, [r3, #2]
    8f5c:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8f60:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8f64:	4a29      	ldr	r2, [pc, #164]	; (900c <Adc_Ipw_ReadGroupConvData+0xc8>)
    8f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f6a:	681a      	ldr	r2, [r3, #0]
    8f6c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8f70:	4413      	add	r3, r2
    8f72:	7c1b      	ldrb	r3, [r3, #16]
    8f74:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8f78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8f7c:	4a23      	ldr	r2, [pc, #140]	; (900c <Adc_Ipw_ReadGroupConvData+0xc8>)
    8f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f8c:	695b      	ldr	r3, [r3, #20]
    8f8e:	4618      	mov	r0, r3
    8f90:	f000 fbce 	bl	9730 <Adc_Ipw_CalculateNumsBitShift>
    8f94:	4603      	mov	r3, r0
    8f96:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8f9a:	9b03      	ldr	r3, [sp, #12]
    8f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8fa0:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8fa4:	2300      	movs	r3, #0
    8fa6:	f88d 3017 	strb.w	r3, [sp, #23]
    8faa:	e022      	b.n	8ff2 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8fac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8fb0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8fb4:	4611      	mov	r1, r2
    8fb6:	4618      	mov	r0, r3
    8fb8:	f7ff fcf4 	bl	89a4 <Adc_Ip_GetConvData>
    8fbc:	4603      	mov	r3, r0
    8fbe:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8fc2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8fc6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8fca:	fa02 f303 	lsl.w	r3, r2, r3
    8fce:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8fd2:	9b01      	ldr	r3, [sp, #4]
    8fd4:	2201      	movs	r2, #1
    8fd6:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8fd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8fdc:	005b      	lsls	r3, r3, #1
    8fde:	9a02      	ldr	r2, [sp, #8]
    8fe0:	4413      	add	r3, r2
    8fe2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8fe6:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8fe8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8fec:	3301      	adds	r3, #1
    8fee:	f88d 3017 	strb.w	r3, [sp, #23]
    8ff2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8ff6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8ffa:	429a      	cmp	r2, r3
    8ffc:	d3d6      	bcc.n	8fac <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8ffe:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9002:	4618      	mov	r0, r3
    9004:	b007      	add	sp, #28
    9006:	f85d fb04 	ldr.w	pc, [sp], #4
    900a:	bf00      	nop
    900c:	1fff8d1c 	.word	0x1fff8d1c

00009010 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9010:	b500      	push	{lr}
    9012:	b087      	sub	sp, #28
    9014:	9003      	str	r0, [sp, #12]
    9016:	9102      	str	r1, [sp, #8]
    9018:	9201      	str	r2, [sp, #4]
    901a:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    901e:	2301      	movs	r3, #1
    9020:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9024:	2300      	movs	r3, #0
    9026:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    902a:	9b03      	ldr	r3, [sp, #12]
    902c:	789b      	ldrb	r3, [r3, #2]
    902e:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9032:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9036:	4a19      	ldr	r2, [pc, #100]	; (909c <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    903c:	681a      	ldr	r2, [r3, #0]
    903e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9042:	4413      	add	r3, r2
    9044:	7c1b      	ldrb	r3, [r3, #16]
    9046:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    904a:	9b03      	ldr	r3, [sp, #12]
    904c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9050:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9054:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9058:	f89d 3014 	ldrb.w	r3, [sp, #20]
    905c:	2100      	movs	r1, #0
    905e:	4618      	mov	r0, r3
    9060:	f000 fe2a 	bl	9cb8 <Adc_Ipw_CheckValidConversion>
    9064:	4603      	mov	r3, r0
    9066:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    906a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    906e:	2b00      	cmp	r3, #0
    9070:	d00a      	beq.n	9088 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9072:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9076:	9a01      	ldr	r2, [sp, #4]
    9078:	9902      	ldr	r1, [sp, #8]
    907a:	9803      	ldr	r0, [sp, #12]
    907c:	f7ff ff62 	bl	8f44 <Adc_Ipw_ReadGroupConvData>
    9080:	4603      	mov	r3, r0
    9082:	f88d 3017 	strb.w	r3, [sp, #23]
    9086:	e002      	b.n	908e <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9088:	2301      	movs	r3, #1
    908a:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    908e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9092:	4618      	mov	r0, r3
    9094:	b007      	add	sp, #28
    9096:	f85d fb04 	ldr.w	pc, [sp], #4
    909a:	bf00      	nop
    909c:	1fff8d1c 	.word	0x1fff8d1c

000090a0 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    90a0:	b088      	sub	sp, #32
    90a2:	4603      	mov	r3, r0
    90a4:	9100      	str	r1, [sp, #0]
    90a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    90aa:	4613      	mov	r3, r2
    90ac:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    90b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    90b4:	4a3a      	ldr	r2, [pc, #232]	; (91a0 <Adc_Ipw_WriteDataBuffer+0x100>)
    90b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ba:	68da      	ldr	r2, [r3, #12]
    90bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    90c0:	005b      	lsls	r3, r3, #1
    90c2:	4413      	add	r3, r2
    90c4:	881b      	ldrh	r3, [r3, #0]
    90c6:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    90ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    90ce:	4a34      	ldr	r2, [pc, #208]	; (91a0 <Adc_Ipw_WriteDataBuffer+0x100>)
    90d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90d4:	685a      	ldr	r2, [r3, #4]
    90d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    90da:	2134      	movs	r1, #52	; 0x34
    90dc:	fb01 f303 	mul.w	r3, r1, r3
    90e0:	4413      	add	r3, r2
    90e2:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    90e4:	9b04      	ldr	r3, [sp, #16]
    90e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    90ea:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    90ee:	2300      	movs	r3, #0
    90f0:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    90f2:	2300      	movs	r3, #0
    90f4:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    90f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    90fc:	4929      	ldr	r1, [pc, #164]	; (91a4 <Adc_Ipw_WriteDataBuffer+0x104>)
    90fe:	4613      	mov	r3, r2
    9100:	009b      	lsls	r3, r3, #2
    9102:	4413      	add	r3, r2
    9104:	009b      	lsls	r3, r3, #2
    9106:	440b      	add	r3, r1
    9108:	3308      	adds	r3, #8
    910a:	881b      	ldrh	r3, [r3, #0]
    910c:	b29b      	uxth	r3, r3
    910e:	3b01      	subs	r3, #1
    9110:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    9114:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9118:	4922      	ldr	r1, [pc, #136]	; (91a4 <Adc_Ipw_WriteDataBuffer+0x104>)
    911a:	4613      	mov	r3, r2
    911c:	009b      	lsls	r3, r3, #2
    911e:	4413      	add	r3, r2
    9120:	009b      	lsls	r3, r3, #2
    9122:	440b      	add	r3, r1
    9124:	3308      	adds	r3, #8
    9126:	881b      	ldrh	r3, [r3, #0]
    9128:	b29b      	uxth	r3, r3
    912a:	2b00      	cmp	r3, #0
    912c:	d104      	bne.n	9138 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    912e:	9b04      	ldr	r3, [sp, #16]
    9130:	8b9b      	ldrh	r3, [r3, #28]
    9132:	3b01      	subs	r3, #1
    9134:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9138:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    913c:	4919      	ldr	r1, [pc, #100]	; (91a4 <Adc_Ipw_WriteDataBuffer+0x104>)
    913e:	4613      	mov	r3, r2
    9140:	009b      	lsls	r3, r3, #2
    9142:	4413      	add	r3, r2
    9144:	009b      	lsls	r3, r3, #2
    9146:	440b      	add	r3, r1
    9148:	330c      	adds	r3, #12
    914a:	681a      	ldr	r2, [r3, #0]
    914c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9150:	005b      	lsls	r3, r3, #1
    9152:	4413      	add	r3, r2
    9154:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9156:	9b04      	ldr	r3, [sp, #16]
    9158:	8b9b      	ldrh	r3, [r3, #28]
    915a:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    915e:	2300      	movs	r3, #0
    9160:	f88d 301f 	strb.w	r3, [sp, #31]
    9164:	e012      	b.n	918c <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9166:	f89d 301f 	ldrb.w	r3, [sp, #31]
    916a:	005b      	lsls	r3, r3, #1
    916c:	9a00      	ldr	r2, [sp, #0]
    916e:	4413      	add	r3, r2
    9170:	9a06      	ldr	r2, [sp, #24]
    9172:	8812      	ldrh	r2, [r2, #0]
    9174:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9176:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    917a:	005b      	lsls	r3, r3, #1
    917c:	9a06      	ldr	r2, [sp, #24]
    917e:	4413      	add	r3, r2
    9180:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9182:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9186:	3301      	adds	r3, #1
    9188:	f88d 301f 	strb.w	r3, [sp, #31]
    918c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9190:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9194:	429a      	cmp	r2, r3
    9196:	d3e6      	bcc.n	9166 <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9198:	bf00      	nop
    919a:	bf00      	nop
    919c:	b008      	add	sp, #32
    919e:	4770      	bx	lr
    91a0:	1fff8d1c 	.word	0x1fff8d1c
    91a4:	1fff8d20 	.word	0x1fff8d20

000091a8 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    91a8:	b500      	push	{lr}
    91aa:	b089      	sub	sp, #36	; 0x24
    91ac:	9200      	str	r2, [sp, #0]
    91ae:	461a      	mov	r2, r3
    91b0:	4603      	mov	r3, r0
    91b2:	f88d 3007 	strb.w	r3, [sp, #7]
    91b6:	460b      	mov	r3, r1
    91b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    91bc:	4613      	mov	r3, r2
    91be:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    91c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91c6:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    91ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91ce:	f003 0307 	and.w	r3, r3, #7
    91d2:	b2db      	uxtb	r3, r3
    91d4:	2b00      	cmp	r3, #0
    91d6:	d006      	beq.n	91e6 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    91d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91dc:	08db      	lsrs	r3, r3, #3
    91de:	b2db      	uxtb	r3, r3
    91e0:	3301      	adds	r3, #1
    91e2:	b2db      	uxtb	r3, r3
    91e4:	e003      	b.n	91ee <Adc_Ipw_ConfigurePdbChannels+0x46>
    91e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91ea:	08db      	lsrs	r3, r3, #3
    91ec:	b2db      	uxtb	r3, r3
    91ee:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    91f2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    91f6:	4987      	ldr	r1, [pc, #540]	; (9414 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    91f8:	4613      	mov	r3, r2
    91fa:	009b      	lsls	r3, r3, #2
    91fc:	4413      	add	r3, r2
    91fe:	009b      	lsls	r3, r3, #2
    9200:	440b      	add	r3, r1
    9202:	3310      	adds	r3, #16
    9204:	781b      	ldrb	r3, [r3, #0]
    9206:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    920a:	4b83      	ldr	r3, [pc, #524]	; (9418 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    920c:	681b      	ldr	r3, [r3, #0]
    920e:	681a      	ldr	r2, [r3, #0]
    9210:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9214:	4413      	add	r3, r2
    9216:	7c1b      	ldrb	r3, [r3, #16]
    9218:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    921c:	9b00      	ldr	r3, [sp, #0]
    921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9220:	691b      	ldr	r3, [r3, #16]
    9222:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9224:	2300      	movs	r3, #0
    9226:	f88d 301f 	strb.w	r3, [sp, #31]
    922a:	e0e6      	b.n	93fa <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    922c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9230:	08db      	lsrs	r3, r3, #3
    9232:	b2db      	uxtb	r3, r3
    9234:	2b00      	cmp	r3, #0
    9236:	d102      	bne.n	923e <Adc_Ipw_ConfigurePdbChannels+0x96>
    9238:	f89d 301d 	ldrb.w	r3, [sp, #29]
    923c:	e000      	b.n	9240 <Adc_Ipw_ConfigurePdbChannels+0x98>
    923e:	2308      	movs	r3, #8
    9240:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9244:	9b00      	ldr	r3, [sp, #0]
    9246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9248:	7bdb      	ldrb	r3, [r3, #15]
    924a:	2b00      	cmp	r3, #0
    924c:	d05e      	beq.n	930c <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    924e:	9b00      	ldr	r3, [sp, #0]
    9250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9252:	7b9b      	ldrb	r3, [r3, #14]
    9254:	f083 0301 	eor.w	r3, r3, #1
    9258:	b2db      	uxtb	r3, r3
    925a:	2b00      	cmp	r3, #0
    925c:	d02a      	beq.n	92b4 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    925e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9262:	f1c3 0308 	rsb	r3, r3, #8
    9266:	22ff      	movs	r2, #255	; 0xff
    9268:	fa22 f303 	lsr.w	r3, r2, r3
    926c:	b2db      	uxtb	r3, r3
    926e:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9272:	2300      	movs	r3, #0
    9274:	f88d 301e 	strb.w	r3, [sp, #30]
    9278:	e015      	b.n	92a6 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    927a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    927e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9282:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9286:	4413      	add	r3, r2
    9288:	005b      	lsls	r3, r3, #1
    928a:	9a05      	ldr	r2, [sp, #20]
    928c:	4413      	add	r3, r2
    928e:	881b      	ldrh	r3, [r3, #0]
    9290:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9294:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9298:	f001 fd16 	bl	acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    929c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    92a0:	3301      	adds	r3, #1
    92a2:	f88d 301e 	strb.w	r3, [sp, #30]
    92a6:	f89d 201e 	ldrb.w	r2, [sp, #30]
    92aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    92ae:	429a      	cmp	r2, r3
    92b0:	d3e3      	bcc.n	927a <Adc_Ipw_ConfigurePdbChannels+0xd2>
    92b2:	e051      	b.n	9358 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    92b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92b8:	2b00      	cmp	r3, #0
    92ba:	d110      	bne.n	92de <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    92bc:	2301      	movs	r3, #1
    92be:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    92c2:	9b05      	ldr	r3, [sp, #20]
    92c4:	881b      	ldrh	r3, [r3, #0]
    92c6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    92ca:	f89d 0018 	ldrb.w	r0, [sp, #24]
    92ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    92d2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    92d6:	2200      	movs	r2, #0
    92d8:	f001 fcf6 	bl	acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    92dc:	e03c      	b.n	9358 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    92de:	2301      	movs	r3, #1
    92e0:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    92e4:	9b00      	ldr	r3, [sp, #0]
    92e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92e8:	899a      	ldrh	r2, [r3, #12]
    92ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92ee:	b29b      	uxth	r3, r3
    92f0:	fb12 f303 	smulbb	r3, r2, r3
    92f4:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    92f8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    92fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9300:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9304:	2200      	movs	r2, #0
    9306:	f001 fcdf 	bl	acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    930a:	e025      	b.n	9358 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    930c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9310:	2b00      	cmp	r3, #0
    9312:	d10b      	bne.n	932c <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    9314:	2301      	movs	r3, #1
    9316:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    931a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    931e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9322:	2300      	movs	r3, #0
    9324:	2200      	movs	r2, #0
    9326:	f001 fccf 	bl	acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    932a:	e015      	b.n	9358 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    932c:	2301      	movs	r3, #1
    932e:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9332:	9b00      	ldr	r3, [sp, #0]
    9334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9336:	899a      	ldrh	r2, [r3, #12]
    9338:	f89d 301f 	ldrb.w	r3, [sp, #31]
    933c:	b29b      	uxth	r3, r3
    933e:	fb12 f303 	smulbb	r3, r2, r3
    9342:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9346:	f89d 0018 	ldrb.w	r0, [sp, #24]
    934a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    934e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9352:	2200      	movs	r2, #0
    9354:	f001 fcb8 	bl	acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9358:	f89d 3018 	ldrb.w	r3, [sp, #24]
    935c:	4618      	mov	r0, r3
    935e:	f001 fb87 	bl	aa70 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    9362:	f89d 201d 	ldrb.w	r2, [sp, #29]
    9366:	f89d 3013 	ldrb.w	r3, [sp, #19]
    936a:	1ad3      	subs	r3, r2, r3
    936c:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9370:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9374:	b29a      	uxth	r2, r3
    9376:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    937a:	4413      	add	r3, r2
    937c:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9380:	9b00      	ldr	r3, [sp, #0]
    9382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9384:	7b9b      	ldrb	r3, [r3, #14]
    9386:	2b00      	cmp	r3, #0
    9388:	d01d      	beq.n	93c6 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    938a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    938e:	2b00      	cmp	r3, #0
    9390:	d10c      	bne.n	93ac <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9392:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9396:	f1c3 0308 	rsb	r3, r3, #8
    939a:	22ff      	movs	r2, #255	; 0xff
    939c:	fa22 f303 	lsr.w	r3, r2, r3
    93a0:	b2db      	uxtb	r3, r3
    93a2:	3b01      	subs	r3, #1
    93a4:	b2db      	uxtb	r3, r3
    93a6:	f88d 300e 	strb.w	r3, [sp, #14]
    93aa:	e00f      	b.n	93cc <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    93ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93b0:	f1c3 0308 	rsb	r3, r3, #8
    93b4:	22ff      	movs	r2, #255	; 0xff
    93b6:	fa22 f303 	lsr.w	r3, r2, r3
    93ba:	b2db      	uxtb	r3, r3
    93bc:	3b01      	subs	r3, #1
    93be:	b2db      	uxtb	r3, r3
    93c0:	f88d 300e 	strb.w	r3, [sp, #14]
    93c4:	e002      	b.n	93cc <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    93c6:	2300      	movs	r3, #0
    93c8:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    93cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93d0:	f1c3 0308 	rsb	r3, r3, #8
    93d4:	22ff      	movs	r2, #255	; 0xff
    93d6:	fa22 f303 	lsr.w	r3, r2, r3
    93da:	b2db      	uxtb	r3, r3
    93dc:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    93e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    93e4:	aa03      	add	r2, sp, #12
    93e6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    93ea:	4618      	mov	r0, r3
    93ec:	f001 fb7c 	bl	aae8 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    93f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    93f4:	3301      	adds	r3, #1
    93f6:	f88d 301f 	strb.w	r3, [sp, #31]
    93fa:	f89d 201f 	ldrb.w	r2, [sp, #31]
    93fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9402:	429a      	cmp	r2, r3
    9404:	f4ff af12 	bcc.w	922c <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    9408:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    940c:	4618      	mov	r0, r3
    940e:	b009      	add	sp, #36	; 0x24
    9410:	f85d fb04 	ldr.w	pc, [sp], #4
    9414:	1fff8d20 	.word	0x1fff8d20
    9418:	1fff8d1c 	.word	0x1fff8d1c

0000941c <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    941c:	b500      	push	{lr}
    941e:	b089      	sub	sp, #36	; 0x24
    9420:	9202      	str	r2, [sp, #8]
    9422:	9301      	str	r3, [sp, #4]
    9424:	4603      	mov	r3, r0
    9426:	f88d 300f 	strb.w	r3, [sp, #15]
    942a:	460b      	mov	r3, r1
    942c:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9430:	2300      	movs	r3, #0
    9432:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9436:	4b62      	ldr	r3, [pc, #392]	; (95c0 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9438:	681b      	ldr	r3, [r3, #0]
    943a:	681a      	ldr	r2, [r3, #0]
    943c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9440:	4413      	add	r3, r2
    9442:	7c1b      	ldrb	r3, [r3, #16]
    9444:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9448:	9b02      	ldr	r3, [sp, #8]
    944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    944c:	691b      	ldr	r3, [r3, #16]
    944e:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9450:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9454:	f003 0307 	and.w	r3, r3, #7
    9458:	b2db      	uxtb	r3, r3
    945a:	2b00      	cmp	r3, #0
    945c:	d006      	beq.n	946c <Adc_Ipw_ConfigurePdbConversion+0x50>
    945e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9462:	08db      	lsrs	r3, r3, #3
    9464:	b2db      	uxtb	r3, r3
    9466:	3301      	adds	r3, #1
    9468:	b2db      	uxtb	r3, r3
    946a:	e003      	b.n	9474 <Adc_Ipw_ConfigurePdbConversion+0x58>
    946c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9470:	08db      	lsrs	r3, r3, #3
    9472:	b2db      	uxtb	r3, r3
    9474:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9478:	f89d 301b 	ldrb.w	r3, [sp, #27]
    947c:	4618      	mov	r0, r3
    947e:	f001 fa61 	bl	a944 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    9482:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9486:	9901      	ldr	r1, [sp, #4]
    9488:	4618      	mov	r0, r3
    948a:	f001 fa89 	bl	a9a0 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    948e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9492:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9496:	f89d 000f 	ldrb.w	r0, [sp, #15]
    949a:	9a02      	ldr	r2, [sp, #8]
    949c:	f7ff fe84 	bl	91a8 <Adc_Ipw_ConfigurePdbChannels>
    94a0:	4603      	mov	r3, r0
    94a2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    94a6:	9b02      	ldr	r3, [sp, #8]
    94a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94aa:	7bdb      	ldrb	r3, [r3, #15]
    94ac:	2b00      	cmp	r3, #0
    94ae:	d02f      	beq.n	9510 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    94b0:	9b02      	ldr	r3, [sp, #8]
    94b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94b4:	7b9b      	ldrb	r3, [r3, #14]
    94b6:	f083 0301 	eor.w	r3, r3, #1
    94ba:	b2db      	uxtb	r3, r3
    94bc:	2b00      	cmp	r3, #0
    94be:	d017      	beq.n	94f0 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    94c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    94c4:	493f      	ldr	r1, [pc, #252]	; (95c4 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    94c6:	4613      	mov	r3, r2
    94c8:	009b      	lsls	r3, r3, #2
    94ca:	4413      	add	r3, r2
    94cc:	009b      	lsls	r3, r3, #2
    94ce:	440b      	add	r3, r1
    94d0:	3310      	adds	r3, #16
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	461a      	mov	r2, r3
    94d6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    94da:	4413      	add	r3, r2
    94dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    94e0:	3b01      	subs	r3, #1
    94e2:	005b      	lsls	r3, r3, #1
    94e4:	9a05      	ldr	r2, [sp, #20]
    94e6:	4413      	add	r3, r2
    94e8:	881b      	ldrh	r3, [r3, #0]
    94ea:	f8ad 301c 	strh.w	r3, [sp, #28]
    94ee:	e01a      	b.n	9526 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    94f0:	9b05      	ldr	r3, [sp, #20]
    94f2:	881a      	ldrh	r2, [r3, #0]
    94f4:	9b02      	ldr	r3, [sp, #8]
    94f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94f8:	8999      	ldrh	r1, [r3, #12]
    94fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    94fe:	3b01      	subs	r3, #1
    9500:	b29b      	uxth	r3, r3
    9502:	fb11 f303 	smulbb	r3, r1, r3
    9506:	b29b      	uxth	r3, r3
    9508:	4413      	add	r3, r2
    950a:	f8ad 301c 	strh.w	r3, [sp, #28]
    950e:	e00a      	b.n	9526 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    9510:	9b02      	ldr	r3, [sp, #8]
    9512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9514:	899a      	ldrh	r2, [r3, #12]
    9516:	f89d 3013 	ldrb.w	r3, [sp, #19]
    951a:	3b01      	subs	r3, #1
    951c:	b29b      	uxth	r3, r3
    951e:	fb12 f303 	smulbb	r3, r2, r3
    9522:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    9526:	f89d 301b 	ldrb.w	r3, [sp, #27]
    952a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    952e:	4611      	mov	r1, r2
    9530:	4618      	mov	r0, r3
    9532:	f001 fab5 	bl	aaa0 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9536:	f89d 301b 	ldrb.w	r3, [sp, #27]
    953a:	4618      	mov	r0, r3
    953c:	f001 fa98 	bl	aa70 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    9540:	2300      	movs	r3, #0
    9542:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    9546:	2300      	movs	r3, #0
    9548:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    954c:	2300      	movs	r3, #0
    954e:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9552:	e00c      	b.n	956e <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9554:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9558:	aa04      	add	r2, sp, #16
    955a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    955e:	4618      	mov	r0, r3
    9560:	f001 fac2 	bl	aae8 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9564:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9568:	3301      	adds	r3, #1
    956a:	f88d 301f 	strb.w	r3, [sp, #31]
    956e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9572:	2b01      	cmp	r3, #1
    9574:	d9ee      	bls.n	9554 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    9576:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    957a:	4912      	ldr	r1, [pc, #72]	; (95c4 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    957c:	4613      	mov	r3, r2
    957e:	009b      	lsls	r3, r3, #2
    9580:	4413      	add	r3, r2
    9582:	009b      	lsls	r3, r3, #2
    9584:	440b      	add	r3, r1
    9586:	3310      	adds	r3, #16
    9588:	7819      	ldrb	r1, [r3, #0]
    958a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    958e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9592:	440b      	add	r3, r1
    9594:	b2d8      	uxtb	r0, r3
    9596:	490b      	ldr	r1, [pc, #44]	; (95c4 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9598:	4613      	mov	r3, r2
    959a:	009b      	lsls	r3, r3, #2
    959c:	4413      	add	r3, r2
    959e:	009b      	lsls	r3, r3, #2
    95a0:	440b      	add	r3, r1
    95a2:	3310      	adds	r3, #16
    95a4:	4602      	mov	r2, r0
    95a6:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    95a8:	9b01      	ldr	r3, [sp, #4]
    95aa:	2b0f      	cmp	r3, #15
    95ac:	d104      	bne.n	95b8 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    95ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
    95b2:	4618      	mov	r0, r3
    95b4:	f001 fa34 	bl	aa20 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    95b8:	bf00      	nop
    95ba:	b009      	add	sp, #36	; 0x24
    95bc:	f85d fb04 	ldr.w	pc, [sp], #4
    95c0:	1fff8d1c 	.word	0x1fff8d1c
    95c4:	1fff8d20 	.word	0x1fff8d20

000095c8 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    95c8:	b500      	push	{lr}
    95ca:	b087      	sub	sp, #28
    95cc:	4603      	mov	r3, r0
    95ce:	f88d 3007 	strb.w	r3, [sp, #7]
    95d2:	460b      	mov	r3, r1
    95d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    95d8:	4613      	mov	r3, r2
    95da:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    95de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95e2:	4a36      	ldr	r2, [pc, #216]	; (96bc <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    95e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e8:	68da      	ldr	r2, [r3, #12]
    95ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    95ee:	005b      	lsls	r3, r3, #1
    95f0:	4413      	add	r3, r2
    95f2:	881b      	ldrh	r3, [r3, #0]
    95f4:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    95f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95fc:	4a2f      	ldr	r2, [pc, #188]	; (96bc <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    95fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9602:	681a      	ldr	r2, [r3, #0]
    9604:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9608:	4413      	add	r3, r2
    960a:	7c1b      	ldrb	r3, [r3, #16]
    960c:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    9610:	2300      	movs	r3, #0
    9612:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    9616:	f89d 3013 	ldrb.w	r3, [sp, #19]
    961a:	4618      	mov	r0, r3
    961c:	f001 fb7e 	bl	ad1c <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    9620:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9624:	4a25      	ldr	r2, [pc, #148]	; (96bc <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    962a:	685a      	ldr	r2, [r3, #4]
    962c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9630:	2134      	movs	r1, #52	; 0x34
    9632:	fb01 f303 	mul.w	r3, r1, r3
    9636:	4413      	add	r3, r2
    9638:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    963c:	2b01      	cmp	r3, #1
    963e:	d114      	bne.n	966a <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    9640:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9644:	4a1d      	ldr	r2, [pc, #116]	; (96bc <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    964a:	685a      	ldr	r2, [r3, #4]
    964c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9650:	2134      	movs	r1, #52	; 0x34
    9652:	fb01 f303 	mul.w	r3, r1, r3
    9656:	4413      	add	r3, r2
    9658:	689b      	ldr	r3, [r3, #8]
    965a:	2b01      	cmp	r3, #1
    965c:	d105      	bne.n	966a <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    965e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9662:	2100      	movs	r1, #0
    9664:	4618      	mov	r0, r3
    9666:	f7ff f827 	bl	86b8 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    966a:	2300      	movs	r3, #0
    966c:	f88d 3016 	strb.w	r3, [sp, #22]
    9670:	e013      	b.n	969a <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    9672:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9676:	f89d 1016 	ldrb.w	r1, [sp, #22]
    967a:	2201      	movs	r2, #1
    967c:	4618      	mov	r0, r3
    967e:	f7ff f8cd 	bl	881c <Adc_Ip_SetDisabledChannel>
    9682:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    9684:	9b03      	ldr	r3, [sp, #12]
    9686:	2b02      	cmp	r3, #2
    9688:	d102      	bne.n	9690 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    968a:	2301      	movs	r3, #1
    968c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9690:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9694:	3301      	adds	r3, #1
    9696:	f88d 3016 	strb.w	r3, [sp, #22]
    969a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    969e:	4a08      	ldr	r2, [pc, #32]	; (96c0 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    96a0:	00db      	lsls	r3, r3, #3
    96a2:	4413      	add	r3, r2
    96a4:	799b      	ldrb	r3, [r3, #6]
    96a6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    96aa:	429a      	cmp	r2, r3
    96ac:	d3e1      	bcc.n	9672 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    96ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    96b2:	4618      	mov	r0, r3
    96b4:	b007      	add	sp, #28
    96b6:	f85d fb04 	ldr.w	pc, [sp], #4
    96ba:	bf00      	nop
    96bc:	1fff8d1c 	.word	0x1fff8d1c
    96c0:	1fff8d48 	.word	0x1fff8d48

000096c4 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    96c4:	b500      	push	{lr}
    96c6:	b085      	sub	sp, #20
    96c8:	4603      	mov	r3, r0
    96ca:	9100      	str	r1, [sp, #0]
    96cc:	f88d 3007 	strb.w	r3, [sp, #7]
    96d0:	4613      	mov	r3, r2
    96d2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    96d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    96da:	4a14      	ldr	r2, [pc, #80]	; (972c <Adc_Ipw_PrepareGroupStart+0x68>)
    96dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e0:	681a      	ldr	r2, [r3, #0]
    96e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96e6:	4413      	add	r3, r2
    96e8:	7c1b      	ldrb	r3, [r3, #16]
    96ea:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    96ee:	9b00      	ldr	r3, [sp, #0]
    96f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96f2:	781b      	ldrb	r3, [r3, #0]
    96f4:	2b01      	cmp	r3, #1
    96f6:	d108      	bne.n	970a <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    96f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96fc:	9b00      	ldr	r3, [sp, #0]
    96fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9700:	685b      	ldr	r3, [r3, #4]
    9702:	461a      	mov	r2, r3
    9704:	2101      	movs	r1, #1
    9706:	f7fe ff51 	bl	85ac <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    970a:	9b00      	ldr	r3, [sp, #0]
    970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    970e:	7a1b      	ldrb	r3, [r3, #8]
    9710:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9714:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9718:	f89d 200e 	ldrb.w	r2, [sp, #14]
    971c:	4611      	mov	r1, r2
    971e:	4618      	mov	r0, r3
    9720:	f7fe ff62 	bl	85e8 <Adc_Ip_SetSampleTime>
}
    9724:	bf00      	nop
    9726:	b005      	add	sp, #20
    9728:	f85d fb04 	ldr.w	pc, [sp], #4
    972c:	1fff8d1c 	.word	0x1fff8d1c

00009730 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9730:	b084      	sub	sp, #16
    9732:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9734:	2300      	movs	r3, #0
    9736:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    973a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    973e:	4618      	mov	r0, r3
    9740:	b004      	add	sp, #16
    9742:	4770      	bx	lr

00009744 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    9744:	b500      	push	{lr}
    9746:	b08f      	sub	sp, #60	; 0x3c
    9748:	9202      	str	r2, [sp, #8]
    974a:	461a      	mov	r2, r3
    974c:	4603      	mov	r3, r0
    974e:	f88d 300f 	strb.w	r3, [sp, #15]
    9752:	460b      	mov	r3, r1
    9754:	f8ad 300c 	strh.w	r3, [sp, #12]
    9758:	4613      	mov	r3, r2
    975a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    975e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9762:	4a6d      	ldr	r2, [pc, #436]	; (9918 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9768:	68da      	ldr	r2, [r3, #12]
    976a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    976e:	005b      	lsls	r3, r3, #1
    9770:	4413      	add	r3, r2
    9772:	881b      	ldrh	r3, [r3, #0]
    9774:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9778:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    977c:	4a66      	ldr	r2, [pc, #408]	; (9918 <Adc_Ipw_ConfigureConversion+0x1d4>)
    977e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9782:	685a      	ldr	r2, [r3, #4]
    9784:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    9788:	2134      	movs	r1, #52	; 0x34
    978a:	fb01 f303 	mul.w	r3, r1, r3
    978e:	4413      	add	r3, r2
    9790:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9792:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9796:	4a60      	ldr	r2, [pc, #384]	; (9918 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    979c:	681a      	ldr	r2, [r3, #0]
    979e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97a2:	4413      	add	r3, r2
    97a4:	7c1b      	ldrb	r3, [r3, #16]
    97a6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    97aa:	2300      	movs	r3, #0
    97ac:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    97ae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    97b2:	495a      	ldr	r1, [pc, #360]	; (991c <Adc_Ipw_ConfigureConversion+0x1d8>)
    97b4:	4613      	mov	r3, r2
    97b6:	009b      	lsls	r3, r3, #2
    97b8:	4413      	add	r3, r2
    97ba:	009b      	lsls	r3, r3, #2
    97bc:	440b      	add	r3, r1
    97be:	3310      	adds	r3, #16
    97c0:	781b      	ldrb	r3, [r3, #0]
    97c2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    97c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    97c8:	6a1b      	ldr	r3, [r3, #32]
    97ca:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    97cc:	2300      	movs	r3, #0
    97ce:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    97d2:	e030      	b.n	9836 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    97d4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    97d8:	4a4f      	ldr	r2, [pc, #316]	; (9918 <Adc_Ipw_ConfigureConversion+0x1d4>)
    97da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97de:	681b      	ldr	r3, [r3, #0]
    97e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    97e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    97e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    97ea:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    97ee:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    97f2:	440b      	add	r3, r1
    97f4:	005b      	lsls	r3, r3, #1
    97f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    97f8:	440b      	add	r3, r1
    97fa:	881b      	ldrh	r3, [r3, #0]
    97fc:	4619      	mov	r1, r3
    97fe:	460b      	mov	r3, r1
    9800:	005b      	lsls	r3, r3, #1
    9802:	440b      	add	r3, r1
    9804:	009b      	lsls	r3, r3, #2
    9806:	4413      	add	r3, r2
    9808:	685b      	ldr	r3, [r3, #4]
    980a:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    980c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9810:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9814:	9b08      	ldr	r3, [sp, #32]
    9816:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    9818:	2300      	movs	r3, #0
    981a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    981e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9822:	aa05      	add	r2, sp, #20
    9824:	4611      	mov	r1, r2
    9826:	4618      	mov	r0, r3
    9828:	f7fe ffc8 	bl	87bc <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    982c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9830:	3301      	adds	r3, #1
    9832:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9836:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    983a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    983e:	3b01      	subs	r3, #1
    9840:	429a      	cmp	r2, r3
    9842:	d3c7      	bcc.n	97d4 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9844:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9848:	4a33      	ldr	r2, [pc, #204]	; (9918 <Adc_Ipw_ConfigureConversion+0x1d4>)
    984a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    985a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    985e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9862:	440b      	add	r3, r1
    9864:	005b      	lsls	r3, r3, #1
    9866:	990a      	ldr	r1, [sp, #40]	; 0x28
    9868:	440b      	add	r3, r1
    986a:	881b      	ldrh	r3, [r3, #0]
    986c:	4619      	mov	r1, r3
    986e:	460b      	mov	r3, r1
    9870:	005b      	lsls	r3, r3, #1
    9872:	440b      	add	r3, r1
    9874:	009b      	lsls	r3, r3, #2
    9876:	4413      	add	r3, r2
    9878:	685b      	ldr	r3, [r3, #4]
    987a:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    987c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9880:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9884:	9b08      	ldr	r3, [sp, #32]
    9886:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    988a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    988e:	2b00      	cmp	r3, #0
    9890:	d103      	bne.n	989a <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9892:	2301      	movs	r3, #1
    9894:	f88d 301c 	strb.w	r3, [sp, #28]
    9898:	e002      	b.n	98a0 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    989a:	2300      	movs	r3, #0
    989c:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    98a0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    98a4:	aa05      	add	r2, sp, #20
    98a6:	4611      	mov	r1, r2
    98a8:	4618      	mov	r0, r3
    98aa:	f7fe ff87 	bl	87bc <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    98ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98b2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    98b6:	e014      	b.n	98e2 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    98b8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    98bc:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    98c0:	231f      	movs	r3, #31
    98c2:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    98c4:	2300      	movs	r3, #0
    98c6:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    98ca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    98ce:	aa05      	add	r2, sp, #20
    98d0:	4611      	mov	r1, r2
    98d2:	4618      	mov	r0, r3
    98d4:	f7fe ff72 	bl	87bc <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    98d8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    98dc:	3301      	adds	r3, #1
    98de:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    98e2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    98e6:	2b0f      	cmp	r3, #15
    98e8:	d9e6      	bls.n	98b8 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    98ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98ee:	4a0c      	ldr	r2, [pc, #48]	; (9920 <Adc_Ipw_ConfigureConversion+0x1dc>)
    98f0:	00db      	lsls	r3, r3, #3
    98f2:	4413      	add	r3, r2
    98f4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    98f8:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    98fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    98fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9902:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9906:	9300      	str	r3, [sp, #0]
    9908:	9b02      	ldr	r3, [sp, #8]
    990a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    990c:	f7ff fd86 	bl	941c <Adc_Ipw_ConfigurePdbConversion>
}
    9910:	bf00      	nop
    9912:	b00f      	add	sp, #60	; 0x3c
    9914:	f85d fb04 	ldr.w	pc, [sp], #4
    9918:	1fff8d1c 	.word	0x1fff8d1c
    991c:	1fff8d20 	.word	0x1fff8d20
    9920:	1fff8d48 	.word	0x1fff8d48

00009924 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    9924:	b500      	push	{lr}
    9926:	b085      	sub	sp, #20
    9928:	9001      	str	r0, [sp, #4]
    992a:	460b      	mov	r3, r1
    992c:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9930:	2300      	movs	r3, #0
    9932:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9936:	2300      	movs	r3, #0
    9938:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    993c:	2300      	movs	r3, #0
    993e:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9942:	2300      	movs	r3, #0
    9944:	f88d 300f 	strb.w	r3, [sp, #15]
    9948:	e027      	b.n	999a <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    994a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    994e:	9a01      	ldr	r2, [sp, #4]
    9950:	4413      	add	r3, r2
    9952:	7f9b      	ldrb	r3, [r3, #30]
    9954:	2b01      	cmp	r3, #1
    9956:	d11b      	bne.n	9990 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9958:	f89d 300f 	ldrb.w	r3, [sp, #15]
    995c:	9a01      	ldr	r2, [sp, #4]
    995e:	4413      	add	r3, r2
    9960:	7c1b      	ldrb	r3, [r3, #16]
    9962:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    9966:	f89d 000e 	ldrb.w	r0, [sp, #14]
    996a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    996e:	9b01      	ldr	r3, [sp, #4]
    9970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9974:	4619      	mov	r1, r3
    9976:	f7fe fcb8 	bl	82ea <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    997a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    997e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9982:	9b01      	ldr	r3, [sp, #4]
    9984:	3202      	adds	r2, #2
    9986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    998a:	4619      	mov	r1, r3
    998c:	f000 fead 	bl	a6ea <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9990:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9994:	3301      	adds	r3, #1
    9996:	f88d 300f 	strb.w	r3, [sp, #15]
    999a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    999e:	2b01      	cmp	r3, #1
    99a0:	d9d3      	bls.n	994a <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    99a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    99a6:	4618      	mov	r0, r3
    99a8:	b005      	add	sp, #20
    99aa:	f85d fb04 	ldr.w	pc, [sp], #4

000099ae <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    99ae:	b500      	push	{lr}
    99b0:	b087      	sub	sp, #28
    99b2:	4603      	mov	r3, r0
    99b4:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    99b8:	2300      	movs	r3, #0
    99ba:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    99be:	2300      	movs	r3, #0
    99c0:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    99c4:	2300      	movs	r3, #0
    99c6:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    99ca:	2300      	movs	r3, #0
    99cc:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    99d0:	2300      	movs	r3, #0
    99d2:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    99d6:	2300      	movs	r3, #0
    99d8:	f88d 3017 	strb.w	r3, [sp, #23]
    99dc:	e026      	b.n	9a2c <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    99de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99e2:	4a2e      	ldr	r2, [pc, #184]	; (9a9c <Adc_Ipw_DeInit+0xee>)
    99e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99e8:	681a      	ldr	r2, [r3, #0]
    99ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    99ee:	4413      	add	r3, r2
    99f0:	7f9b      	ldrb	r3, [r3, #30]
    99f2:	2b01      	cmp	r3, #1
    99f4:	d115      	bne.n	9a22 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    99f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99fa:	4a28      	ldr	r2, [pc, #160]	; (9a9c <Adc_Ipw_DeInit+0xee>)
    99fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a00:	681a      	ldr	r2, [r3, #0]
    9a02:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9a06:	4413      	add	r3, r2
    9a08:	7c1b      	ldrb	r3, [r3, #16]
    9a0a:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    9a0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9a12:	4618      	mov	r0, r3
    9a14:	f7fe fd40 	bl	8498 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    9a18:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9a1c:	4618      	mov	r0, r3
    9a1e:	f000 ff0d 	bl	a83c <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9a22:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9a26:	3301      	adds	r3, #1
    9a28:	f88d 3017 	strb.w	r3, [sp, #23]
    9a2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9a30:	2b01      	cmp	r3, #1
    9a32:	d9d4      	bls.n	99de <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9a34:	2300      	movs	r3, #0
    9a36:	f8ad 3014 	strh.w	r3, [sp, #20]
    9a3a:	e01e      	b.n	9a7a <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a40:	4a16      	ldr	r2, [pc, #88]	; (9a9c <Adc_Ipw_DeInit+0xee>)
    9a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a46:	685a      	ldr	r2, [r3, #4]
    9a48:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9a4c:	2134      	movs	r1, #52	; 0x34
    9a4e:	fb01 f303 	mul.w	r3, r1, r3
    9a52:	4413      	add	r3, r2
    9a54:	881b      	ldrh	r3, [r3, #0]
    9a56:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9a5a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9a5e:	4910      	ldr	r1, [pc, #64]	; (9aa0 <Adc_Ipw_DeInit+0xf2>)
    9a60:	4613      	mov	r3, r2
    9a62:	009b      	lsls	r3, r3, #2
    9a64:	4413      	add	r3, r2
    9a66:	009b      	lsls	r3, r3, #2
    9a68:	440b      	add	r3, r1
    9a6a:	330c      	adds	r3, #12
    9a6c:	2200      	movs	r2, #0
    9a6e:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9a70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9a74:	3301      	adds	r3, #1
    9a76:	f8ad 3014 	strh.w	r3, [sp, #20]
    9a7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a7e:	4a07      	ldr	r2, [pc, #28]	; (9a9c <Adc_Ipw_DeInit+0xee>)
    9a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a84:	891b      	ldrh	r3, [r3, #8]
    9a86:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9a8a:	429a      	cmp	r2, r3
    9a8c:	d3d6      	bcc.n	9a3c <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    9a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9a92:	4618      	mov	r0, r3
    9a94:	b007      	add	sp, #28
    9a96:	f85d fb04 	ldr.w	pc, [sp], #4
    9a9a:	bf00      	nop
    9a9c:	1fff8d1c 	.word	0x1fff8d1c
    9aa0:	1fff8d20 	.word	0x1fff8d20

00009aa4 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9aa4:	b500      	push	{lr}
    9aa6:	b089      	sub	sp, #36	; 0x24
    9aa8:	4603      	mov	r3, r0
    9aaa:	460a      	mov	r2, r1
    9aac:	f88d 300f 	strb.w	r3, [sp, #15]
    9ab0:	4613      	mov	r3, r2
    9ab2:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    9ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9aba:	4a4c      	ldr	r2, [pc, #304]	; (9bec <Adc_Ipw_StartNormalConversion+0x148>)
    9abc:	00db      	lsls	r3, r3, #3
    9abe:	4413      	add	r3, r2
    9ac0:	885b      	ldrh	r3, [r3, #2]
    9ac2:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    9ac6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9aca:	4a49      	ldr	r2, [pc, #292]	; (9bf0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad0:	68da      	ldr	r2, [r3, #12]
    9ad2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9ad6:	005b      	lsls	r3, r3, #1
    9ad8:	4413      	add	r3, r2
    9ada:	881b      	ldrh	r3, [r3, #0]
    9adc:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9ae0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ae4:	4a42      	ldr	r2, [pc, #264]	; (9bf0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aea:	685a      	ldr	r2, [r3, #4]
    9aec:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9af0:	2134      	movs	r1, #52	; 0x34
    9af2:	fb01 f303 	mul.w	r3, r1, r3
    9af6:	4413      	add	r3, r2
    9af8:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9afa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9afe:	4a3c      	ldr	r2, [pc, #240]	; (9bf0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b04:	681a      	ldr	r2, [r3, #0]
    9b06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b0a:	4413      	add	r3, r2
    9b0c:	7c1b      	ldrb	r3, [r3, #16]
    9b0e:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9b12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b16:	4a35      	ldr	r2, [pc, #212]	; (9bec <Adc_Ipw_StartNormalConversion+0x148>)
    9b18:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9b1c:	b29b      	uxth	r3, r3
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d05f      	beq.n	9be2 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9b22:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9b26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b2a:	9905      	ldr	r1, [sp, #20]
    9b2c:	4618      	mov	r0, r3
    9b2e:	f7ff fdc9 	bl	96c4 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9b32:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9b36:	492f      	ldr	r1, [pc, #188]	; (9bf4 <Adc_Ipw_StartNormalConversion+0x150>)
    9b38:	4613      	mov	r3, r2
    9b3a:	009b      	lsls	r3, r3, #2
    9b3c:	4413      	add	r3, r2
    9b3e:	009b      	lsls	r3, r3, #2
    9b40:	440b      	add	r3, r1
    9b42:	3310      	adds	r3, #16
    9b44:	2200      	movs	r2, #0
    9b46:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    9b48:	9b05      	ldr	r3, [sp, #20]
    9b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9b4e:	2b0f      	cmp	r3, #15
    9b50:	d806      	bhi.n	9b60 <Adc_Ipw_StartNormalConversion+0xbc>
    9b52:	9b05      	ldr	r3, [sp, #20]
    9b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9b58:	f003 030f 	and.w	r3, r3, #15
    9b5c:	b2db      	uxtb	r3, r3
    9b5e:	e000      	b.n	9b62 <Adc_Ipw_StartNormalConversion+0xbe>
    9b60:	2310      	movs	r3, #16
    9b62:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    9b66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b6a:	4a20      	ldr	r2, [pc, #128]	; (9bec <Adc_Ipw_StartNormalConversion+0x148>)
    9b6c:	00db      	lsls	r3, r3, #3
    9b6e:	4413      	add	r3, r2
    9b70:	799b      	ldrb	r3, [r3, #6]
    9b72:	2b00      	cmp	r3, #0
    9b74:	d107      	bne.n	9b86 <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b7a:	4a1c      	ldr	r2, [pc, #112]	; (9bec <Adc_Ipw_StartNormalConversion+0x148>)
    9b7c:	00db      	lsls	r3, r3, #3
    9b7e:	4413      	add	r3, r2
    9b80:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9b84:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9b86:	2300      	movs	r3, #0
    9b88:	f88d 301f 	strb.w	r3, [sp, #31]
    9b8c:	e00c      	b.n	9ba8 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9b8e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b92:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9b96:	4611      	mov	r1, r2
    9b98:	4618      	mov	r0, r3
    9b9a:	f7fe ff03 	bl	89a4 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9b9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ba2:	3301      	adds	r3, #1
    9ba4:	f88d 301f 	strb.w	r3, [sp, #31]
    9ba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bac:	4a0f      	ldr	r2, [pc, #60]	; (9bec <Adc_Ipw_StartNormalConversion+0x148>)
    9bae:	00db      	lsls	r3, r3, #3
    9bb0:	4413      	add	r3, r2
    9bb2:	799b      	ldrb	r3, [r3, #6]
    9bb4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9bb8:	429a      	cmp	r2, r3
    9bba:	d3e8      	bcc.n	9b8e <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    9bbc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9bc0:	2101      	movs	r1, #1
    9bc2:	4618      	mov	r0, r3
    9bc4:	f7fe fd60 	bl	8688 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9bc8:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9bcc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9bd0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9bd4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9bd8:	9300      	str	r3, [sp, #0]
    9bda:	4613      	mov	r3, r2
    9bdc:	220f      	movs	r2, #15
    9bde:	f7ff fdb1 	bl	9744 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9be2:	bf00      	nop
    9be4:	b009      	add	sp, #36	; 0x24
    9be6:	f85d fb04 	ldr.w	pc, [sp], #4
    9bea:	bf00      	nop
    9bec:	1fff8d48 	.word	0x1fff8d48
    9bf0:	1fff8d1c 	.word	0x1fff8d1c
    9bf4:	1fff8d20 	.word	0x1fff8d20

00009bf8 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9bf8:	b500      	push	{lr}
    9bfa:	b085      	sub	sp, #20
    9bfc:	4603      	mov	r3, r0
    9bfe:	f88d 3007 	strb.w	r3, [sp, #7]
    9c02:	460b      	mov	r3, r1
    9c04:	f8ad 3004 	strh.w	r3, [sp, #4]
    9c08:	4613      	mov	r3, r2
    9c0a:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9c0e:	2300      	movs	r3, #0
    9c10:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9c14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c18:	4a24      	ldr	r2, [pc, #144]	; (9cac <Adc_Ipw_StopCurrentConversion+0xb4>)
    9c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c1e:	681a      	ldr	r2, [r3, #0]
    9c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c24:	4413      	add	r3, r2
    9c26:	7c1b      	ldrb	r3, [r3, #16]
    9c28:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9c2c:	2300      	movs	r3, #0
    9c2e:	f88d 300f 	strb.w	r3, [sp, #15]
    9c32:	e014      	b.n	9c5e <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9c34:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9c38:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9c3c:	2200      	movs	r2, #0
    9c3e:	4618      	mov	r0, r3
    9c40:	f7fe fdec 	bl	881c <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9c44:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9c48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9c4c:	4611      	mov	r1, r2
    9c4e:	4618      	mov	r0, r3
    9c50:	f7fe fea8 	bl	89a4 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c58:	3301      	adds	r3, #1
    9c5a:	f88d 300f 	strb.w	r3, [sp, #15]
    9c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c62:	4a13      	ldr	r2, [pc, #76]	; (9cb0 <Adc_Ipw_StopCurrentConversion+0xb8>)
    9c64:	00db      	lsls	r3, r3, #3
    9c66:	4413      	add	r3, r2
    9c68:	799b      	ldrb	r3, [r3, #6]
    9c6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9c6e:	429a      	cmp	r2, r3
    9c70:	d3e0      	bcc.n	9c34 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9c72:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9c76:	490f      	ldr	r1, [pc, #60]	; (9cb4 <Adc_Ipw_StopCurrentConversion+0xbc>)
    9c78:	4613      	mov	r3, r2
    9c7a:	009b      	lsls	r3, r3, #2
    9c7c:	4413      	add	r3, r2
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	440b      	add	r3, r1
    9c82:	3310      	adds	r3, #16
    9c84:	2200      	movs	r2, #0
    9c86:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    9c88:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9c8c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c94:	4618      	mov	r0, r3
    9c96:	f7ff fc97 	bl	95c8 <Adc_Ipw_StopConversionCheckTimeout>
    9c9a:	4603      	mov	r3, r0
    9c9c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9ca0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9ca4:	4618      	mov	r0, r3
    9ca6:	b005      	add	sp, #20
    9ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cac:	1fff8d1c 	.word	0x1fff8d1c
    9cb0:	1fff8d48 	.word	0x1fff8d48
    9cb4:	1fff8d20 	.word	0x1fff8d20

00009cb8 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9cb8:	b500      	push	{lr}
    9cba:	b085      	sub	sp, #20
    9cbc:	4603      	mov	r3, r0
    9cbe:	f88d 3007 	strb.w	r3, [sp, #7]
    9cc2:	460b      	mov	r3, r1
    9cc4:	f88d 3006 	strb.w	r3, [sp, #6]
    9cc8:	4613      	mov	r3, r2
    9cca:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9cce:	2301      	movs	r3, #1
    9cd0:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9cd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9cd8:	f88d 300f 	strb.w	r3, [sp, #15]
    9cdc:	e019      	b.n	9d12 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9cde:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9ce2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9ce6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9cea:	1ad3      	subs	r3, r2, r3
    9cec:	b2db      	uxtb	r3, r3
    9cee:	4619      	mov	r1, r3
    9cf0:	f7fe fe3e 	bl	8970 <Adc_Ip_GetConvCompleteFlag>
    9cf4:	4603      	mov	r3, r0
    9cf6:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9cfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cfe:	f083 0301 	eor.w	r3, r3, #1
    9d02:	b2db      	uxtb	r3, r3
    9d04:	2b00      	cmp	r3, #0
    9d06:	d10b      	bne.n	9d20 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9d08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d0c:	3301      	adds	r3, #1
    9d0e:	f88d 300f 	strb.w	r3, [sp, #15]
    9d12:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9d16:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d1a:	429a      	cmp	r2, r3
    9d1c:	d3df      	bcc.n	9cde <Adc_Ipw_CheckValidConversion+0x26>
    9d1e:	e000      	b.n	9d22 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9d20:	bf00      	nop
        }
    }

    return ValidConversion;
    9d22:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9d26:	4618      	mov	r0, r3
    9d28:	b005      	add	sp, #20
    9d2a:	f85d fb04 	ldr.w	pc, [sp], #4

00009d2e <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9d2e:	b500      	push	{lr}
    9d30:	b089      	sub	sp, #36	; 0x24
    9d32:	9102      	str	r1, [sp, #8]
    9d34:	9201      	str	r2, [sp, #4]
    9d36:	461a      	mov	r2, r3
    9d38:	4603      	mov	r3, r0
    9d3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9d3e:	4613      	mov	r3, r2
    9d40:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9d44:	2300      	movs	r3, #0
    9d46:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9d4a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d4e:	4a33      	ldr	r2, [pc, #204]	; (9e1c <Adc_Ipw_ReadGroup+0xee>)
    9d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d54:	68da      	ldr	r2, [r3, #12]
    9d56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d5a:	005b      	lsls	r3, r3, #1
    9d5c:	4413      	add	r3, r2
    9d5e:	881b      	ldrh	r3, [r3, #0]
    9d60:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9d64:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d68:	4a2c      	ldr	r2, [pc, #176]	; (9e1c <Adc_Ipw_ReadGroup+0xee>)
    9d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d6e:	685a      	ldr	r2, [r3, #4]
    9d70:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9d74:	2134      	movs	r1, #52	; 0x34
    9d76:	fb01 f303 	mul.w	r3, r1, r3
    9d7a:	4413      	add	r3, r2
    9d7c:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9d7e:	9b06      	ldr	r3, [sp, #24]
    9d80:	789b      	ldrb	r3, [r3, #2]
    9d82:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9d86:	9b06      	ldr	r3, [sp, #24]
    9d88:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9d8c:	2b01      	cmp	r3, #1
    9d8e:	d124      	bne.n	9dda <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9d90:	9b06      	ldr	r3, [sp, #24]
    9d92:	68db      	ldr	r3, [r3, #12]
    9d94:	2b00      	cmp	r3, #0
    9d96:	d111      	bne.n	9dbc <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9d98:	9b06      	ldr	r3, [sp, #24]
    9d9a:	695b      	ldr	r3, [r3, #20]
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d10d      	bne.n	9dbc <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9da0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9da4:	4a1e      	ldr	r2, [pc, #120]	; (9e20 <Adc_Ipw_ReadGroup+0xf2>)
    9da6:	00db      	lsls	r3, r3, #3
    9da8:	4413      	add	r3, r2
    9daa:	885b      	ldrh	r3, [r3, #2]
    9dac:	b29b      	uxth	r3, r3
    9dae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9db2:	429a      	cmp	r2, r3
    9db4:	d002      	beq.n	9dbc <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9db6:	2301      	movs	r3, #1
    9db8:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9dbc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d124      	bne.n	9e0e <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9dc4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9dc8:	9a01      	ldr	r2, [sp, #4]
    9dca:	9902      	ldr	r1, [sp, #8]
    9dcc:	9806      	ldr	r0, [sp, #24]
    9dce:	f7ff f91f 	bl	9010 <Adc_Ipw_ReadGroupNoInt>
    9dd2:	4603      	mov	r3, r0
    9dd4:	f88d 301f 	strb.w	r3, [sp, #31]
    9dd8:	e019      	b.n	9e0e <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9dda:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9dde:	4911      	ldr	r1, [pc, #68]	; (9e24 <Adc_Ipw_ReadGroup+0xf6>)
    9de0:	4613      	mov	r3, r2
    9de2:	009b      	lsls	r3, r3, #2
    9de4:	4413      	add	r3, r2
    9de6:	009b      	lsls	r3, r3, #2
    9de8:	440b      	add	r3, r1
    9dea:	681b      	ldr	r3, [r3, #0]
    9dec:	2b01      	cmp	r3, #1
    9dee:	d102      	bne.n	9df6 <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9df0:	2301      	movs	r3, #1
    9df2:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9df6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d107      	bne.n	9e0e <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9dfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9e02:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9e06:	9902      	ldr	r1, [sp, #8]
    9e08:	4618      	mov	r0, r3
    9e0a:	f7ff f949 	bl	90a0 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9e0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9e12:	4618      	mov	r0, r3
    9e14:	b009      	add	sp, #36	; 0x24
    9e16:	f85d fb04 	ldr.w	pc, [sp], #4
    9e1a:	bf00      	nop
    9e1c:	1fff8d1c 	.word	0x1fff8d1c
    9e20:	1fff8d48 	.word	0x1fff8d48
    9e24:	1fff8d20 	.word	0x1fff8d20

00009e28 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9e28:	b500      	push	{lr}
    9e2a:	b085      	sub	sp, #20
    9e2c:	4603      	mov	r3, r0
    9e2e:	9100      	str	r1, [sp, #0]
    9e30:	f88d 3007 	strb.w	r3, [sp, #7]
    9e34:	4613      	mov	r3, r2
    9e36:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9e3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e3e:	4a0e      	ldr	r2, [pc, #56]	; (9e78 <Adc_Ipw_Calibrate+0x50>)
    9e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e44:	681a      	ldr	r2, [r3, #0]
    9e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e4a:	4413      	add	r3, r2
    9e4c:	7c1b      	ldrb	r3, [r3, #16]
    9e4e:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9e52:	9b00      	ldr	r3, [sp, #0]
    9e54:	2200      	movs	r2, #0
    9e56:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9e58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e5c:	4618      	mov	r0, r3
    9e5e:	f7fe fdb9 	bl	89d4 <Adc_Ip_DoCalibration>
    9e62:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9e64:	9b02      	ldr	r3, [sp, #8]
    9e66:	2b00      	cmp	r3, #0
    9e68:	d002      	beq.n	9e70 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9e6a:	9b00      	ldr	r3, [sp, #0]
    9e6c:	2201      	movs	r2, #1
    9e6e:	701a      	strb	r2, [r3, #0]
    }
}
    9e70:	bf00      	nop
    9e72:	b005      	add	sp, #20
    9e74:	f85d fb04 	ldr.w	pc, [sp], #4
    9e78:	1fff8d1c 	.word	0x1fff8d1c

00009e7c <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9e7c:	2300      	movs	r3, #0
}
    9e7e:	4618      	mov	r0, r3
    9e80:	4770      	bx	lr
    9e82:	bf00      	nop

00009e84 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9e84:	b500      	push	{lr}
    9e86:	b083      	sub	sp, #12
    9e88:	4603      	mov	r3, r0
    9e8a:	460a      	mov	r2, r1
    9e8c:	f88d 3007 	strb.w	r3, [sp, #7]
    9e90:	4613      	mov	r3, r2
    9e92:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e9a:	2100      	movs	r1, #0
    9e9c:	4618      	mov	r0, r3
    9e9e:	f7fe fff3 	bl	8e88 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9ea2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ea6:	4a09      	ldr	r2, [pc, #36]	; (9ecc <Adc_Ipw_UpdateQueue+0x48>)
    9ea8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9eac:	b29b      	uxth	r3, r3
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d007      	beq.n	9ec2 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9eb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eba:	4611      	mov	r1, r2
    9ebc:	4618      	mov	r0, r3
    9ebe:	f7ff fdf1 	bl	9aa4 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9ec2:	bf00      	nop
    9ec4:	b003      	add	sp, #12
    9ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    9eca:	bf00      	nop
    9ecc:	1fff8d48 	.word	0x1fff8d48

00009ed0 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9ed0:	b510      	push	{r4, lr}
    9ed2:	b08a      	sub	sp, #40	; 0x28
    9ed4:	4604      	mov	r4, r0
    9ed6:	4608      	mov	r0, r1
    9ed8:	4611      	mov	r1, r2
    9eda:	461a      	mov	r2, r3
    9edc:	4623      	mov	r3, r4
    9ede:	f88d 300f 	strb.w	r3, [sp, #15]
    9ee2:	4603      	mov	r3, r0
    9ee4:	f8ad 300c 	strh.w	r3, [sp, #12]
    9ee8:	460b      	mov	r3, r1
    9eea:	f8ad 300a 	strh.w	r3, [sp, #10]
    9eee:	4613      	mov	r3, r2
    9ef0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9ef4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ef8:	4a68      	ldr	r2, [pc, #416]	; (a09c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9efe:	68da      	ldr	r2, [r3, #12]
    9f00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9f04:	005b      	lsls	r3, r3, #1
    9f06:	4413      	add	r3, r2
    9f08:	881b      	ldrh	r3, [r3, #0]
    9f0a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9f0e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9f12:	4963      	ldr	r1, [pc, #396]	; (a0a0 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9f14:	4613      	mov	r3, r2
    9f16:	009b      	lsls	r3, r3, #2
    9f18:	4413      	add	r3, r2
    9f1a:	009b      	lsls	r3, r3, #2
    9f1c:	440b      	add	r3, r1
    9f1e:	3310      	adds	r3, #16
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9f26:	2300      	movs	r3, #0
    9f28:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9f2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f2e:	4a5b      	ldr	r2, [pc, #364]	; (a09c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f34:	681a      	ldr	r2, [r3, #0]
    9f36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f3a:	4413      	add	r3, r2
    9f3c:	7c1b      	ldrb	r3, [r3, #16]
    9f3e:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9f42:	2300      	movs	r3, #0
    9f44:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9f48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f4c:	4a53      	ldr	r2, [pc, #332]	; (a09c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f5c:	695b      	ldr	r3, [r3, #20]
    9f5e:	4618      	mov	r0, r3
    9f60:	f7ff fbe6 	bl	9730 <Adc_Ipw_CalculateNumsBitShift>
    9f64:	4603      	mov	r3, r0
    9f66:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9f6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f6e:	4a4b      	ldr	r2, [pc, #300]	; (a09c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f74:	685a      	ldr	r2, [r3, #4]
    9f76:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9f7a:	2134      	movs	r1, #52	; 0x34
    9f7c:	fb01 f303 	mul.w	r3, r1, r3
    9f80:	4413      	add	r3, r2
    9f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9f86:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9f8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f8e:	4a43      	ldr	r2, [pc, #268]	; (a09c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f94:	685a      	ldr	r2, [r3, #4]
    9f96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9f9a:	2134      	movs	r1, #52	; 0x34
    9f9c:	fb01 f303 	mul.w	r3, r1, r3
    9fa0:	4413      	add	r3, r2
    9fa2:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9fa4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9fa8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9fac:	429a      	cmp	r2, r3
    9fae:	d870      	bhi.n	a092 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9fb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9fb4:	f003 030f 	and.w	r3, r3, #15
    9fb8:	b2db      	uxtb	r3, r3
    9fba:	2b00      	cmp	r3, #0
    9fbc:	d104      	bne.n	9fc8 <Adc_Ipw_CheckConversionChannels+0xf8>
    9fbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9fc2:	3b10      	subs	r3, #16
    9fc4:	b2db      	uxtb	r3, r3
    9fc6:	e004      	b.n	9fd2 <Adc_Ipw_CheckConversionChannels+0x102>
    9fc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9fcc:	f023 030f 	bic.w	r3, r3, #15
    9fd0:	b2db      	uxtb	r3, r3
    9fd2:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9fd6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9fda:	4931      	ldr	r1, [pc, #196]	; (a0a0 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9fdc:	4613      	mov	r3, r2
    9fde:	009b      	lsls	r3, r3, #2
    9fe0:	4413      	add	r3, r2
    9fe2:	009b      	lsls	r3, r3, #2
    9fe4:	440b      	add	r3, r1
    9fe6:	330c      	adds	r3, #12
    9fe8:	6819      	ldr	r1, [r3, #0]
    9fea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9fee:	482c      	ldr	r0, [pc, #176]	; (a0a0 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9ff0:	4613      	mov	r3, r2
    9ff2:	009b      	lsls	r3, r3, #2
    9ff4:	4413      	add	r3, r2
    9ff6:	009b      	lsls	r3, r3, #2
    9ff8:	4403      	add	r3, r0
    9ffa:	3308      	adds	r3, #8
    9ffc:	881b      	ldrh	r3, [r3, #0]
    9ffe:	b29b      	uxth	r3, r3
    a000:	005b      	lsls	r3, r3, #1
    a002:	440b      	add	r3, r1
    a004:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    a006:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a00a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    a00e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a012:	4618      	mov	r0, r3
    a014:	f7ff fe50 	bl	9cb8 <Adc_Ipw_CheckValidConversion>
    a018:	4603      	mov	r3, r0
    a01a:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    a01e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    a022:	2b00      	cmp	r3, #0
    a024:	d032      	beq.n	a08c <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    a026:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a02a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a02e:	e026      	b.n	a07e <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    a030:	f89d 001b 	ldrb.w	r0, [sp, #27]
    a034:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a038:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a03c:	1ad3      	subs	r3, r2, r3
    a03e:	b2db      	uxtb	r3, r3
    a040:	4619      	mov	r1, r3
    a042:	f7fe fcaf 	bl	89a4 <Adc_Ip_GetConvData>
    a046:	4603      	mov	r3, r0
    a048:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    a04c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a050:	f89d 301a 	ldrb.w	r3, [sp, #26]
    a054:	fa02 f303 	lsl.w	r3, r2, r3
    a058:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    a05c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a060:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    a064:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a068:	9300      	str	r3, [sp, #0]
    a06a:	460b      	mov	r3, r1
    a06c:	9907      	ldr	r1, [sp, #28]
    a06e:	9805      	ldr	r0, [sp, #20]
    a070:	f000 fa02 	bl	a478 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    a074:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a078:	3301      	adds	r3, #1
    a07a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a07e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a082:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a086:	429a      	cmp	r2, r3
    a088:	d3d2      	bcc.n	a030 <Adc_Ipw_CheckConversionChannels+0x160>
    a08a:	e002      	b.n	a092 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    a08c:	2301      	movs	r3, #1
    a08e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    a092:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    a096:	4618      	mov	r0, r3
    a098:	b00a      	add	sp, #40	; 0x28
    a09a:	bd10      	pop	{r4, pc}
    a09c:	1fff8d1c 	.word	0x1fff8d1c
    a0a0:	1fff8d20 	.word	0x1fff8d20

0000a0a4 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a0a4:	b500      	push	{lr}
    a0a6:	b087      	sub	sp, #28
    a0a8:	4603      	mov	r3, r0
    a0aa:	f88d 300f 	strb.w	r3, [sp, #15]
    a0ae:	460b      	mov	r3, r1
    a0b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    a0b4:	4613      	mov	r3, r2
    a0b6:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0be:	4a33      	ldr	r2, [pc, #204]	; (a18c <Adc_Ipw_RestartConversion+0xe8>)
    a0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c4:	68da      	ldr	r2, [r3, #12]
    a0c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a0ca:	005b      	lsls	r3, r3, #1
    a0cc:	4413      	add	r3, r2
    a0ce:	881b      	ldrh	r3, [r3, #0]
    a0d0:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a0d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0d8:	4a2c      	ldr	r2, [pc, #176]	; (a18c <Adc_Ipw_RestartConversion+0xe8>)
    a0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0de:	681a      	ldr	r2, [r3, #0]
    a0e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0e4:	4413      	add	r3, r2
    a0e6:	7c1b      	ldrb	r3, [r3, #16]
    a0e8:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    a0ec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0f0:	4a26      	ldr	r2, [pc, #152]	; (a18c <Adc_Ipw_RestartConversion+0xe8>)
    a0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0f6:	685a      	ldr	r2, [r3, #4]
    a0f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a0fc:	2134      	movs	r1, #52	; 0x34
    a0fe:	fb01 f303 	mul.w	r3, r1, r3
    a102:	4413      	add	r3, r2
    a104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a108:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    a10c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a110:	2b0f      	cmp	r3, #15
    a112:	d805      	bhi.n	a120 <Adc_Ipw_RestartConversion+0x7c>
    a114:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a118:	f003 030f 	and.w	r3, r3, #15
    a11c:	b2db      	uxtb	r3, r3
    a11e:	e000      	b.n	a122 <Adc_Ipw_RestartConversion+0x7e>
    a120:	2310      	movs	r3, #16
    a122:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    a126:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a12a:	2b10      	cmp	r3, #16
    a12c:	d811      	bhi.n	a152 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    a12e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a132:	4917      	ldr	r1, [pc, #92]	; (a190 <Adc_Ipw_RestartConversion+0xec>)
    a134:	4613      	mov	r3, r2
    a136:	009b      	lsls	r3, r3, #2
    a138:	4413      	add	r3, r2
    a13a:	009b      	lsls	r3, r3, #2
    a13c:	440b      	add	r3, r1
    a13e:	3310      	adds	r3, #16
    a140:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a144:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a146:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a14a:	4618      	mov	r0, r3
    a14c:	f000 fc68 	bl	aa20 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    a150:	e017      	b.n	a182 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a152:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a156:	490e      	ldr	r1, [pc, #56]	; (a190 <Adc_Ipw_RestartConversion+0xec>)
    a158:	4613      	mov	r3, r2
    a15a:	009b      	lsls	r3, r3, #2
    a15c:	4413      	add	r3, r2
    a15e:	009b      	lsls	r3, r3, #2
    a160:	440b      	add	r3, r1
    a162:	3310      	adds	r3, #16
    a164:	2200      	movs	r2, #0
    a166:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a168:	f89d 2013 	ldrb.w	r2, [sp, #19]
    a16c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a170:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a174:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a178:	9300      	str	r3, [sp, #0]
    a17a:	4613      	mov	r3, r2
    a17c:	220f      	movs	r2, #15
    a17e:	f7ff fae1 	bl	9744 <Adc_Ipw_ConfigureConversion>
}
    a182:	bf00      	nop
    a184:	b007      	add	sp, #28
    a186:	f85d fb04 	ldr.w	pc, [sp], #4
    a18a:	bf00      	nop
    a18c:	1fff8d1c 	.word	0x1fff8d1c
    a190:	1fff8d20 	.word	0x1fff8d20

0000a194 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    a194:	b084      	sub	sp, #16
    a196:	4603      	mov	r3, r0
    a198:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    a19c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a1a0:	4907      	ldr	r1, [pc, #28]	; (a1c0 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    a1a2:	4613      	mov	r3, r2
    a1a4:	009b      	lsls	r3, r3, #2
    a1a6:	4413      	add	r3, r2
    a1a8:	009b      	lsls	r3, r3, #2
    a1aa:	440b      	add	r3, r1
    a1ac:	3308      	adds	r3, #8
    a1ae:	881b      	ldrh	r3, [r3, #0]
    a1b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    a1b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a1b8:	4618      	mov	r0, r3
    a1ba:	b004      	add	sp, #16
    a1bc:	4770      	bx	lr
    a1be:	bf00      	nop
    a1c0:	1fff8d20 	.word	0x1fff8d20

0000a1c4 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    a1c4:	b510      	push	{r4, lr}
    a1c6:	b084      	sub	sp, #16
    a1c8:	4604      	mov	r4, r0
    a1ca:	4608      	mov	r0, r1
    a1cc:	4611      	mov	r1, r2
    a1ce:	461a      	mov	r2, r3
    a1d0:	4623      	mov	r3, r4
    a1d2:	f88d 3007 	strb.w	r3, [sp, #7]
    a1d6:	4603      	mov	r3, r0
    a1d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    a1dc:	460b      	mov	r3, r1
    a1de:	f8ad 3002 	strh.w	r3, [sp, #2]
    a1e2:	4613      	mov	r3, r2
    a1e4:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a1e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1ec:	4a4f      	ldr	r2, [pc, #316]	; (a32c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f2:	68da      	ldr	r2, [r3, #12]
    a1f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a1f8:	005b      	lsls	r3, r3, #1
    a1fa:	4413      	add	r3, r2
    a1fc:	881b      	ldrh	r3, [r3, #0]
    a1fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    a202:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a206:	494a      	ldr	r1, [pc, #296]	; (a330 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a208:	4613      	mov	r3, r2
    a20a:	009b      	lsls	r3, r3, #2
    a20c:	4413      	add	r3, r2
    a20e:	009b      	lsls	r3, r3, #2
    a210:	440b      	add	r3, r1
    a212:	3304      	adds	r3, #4
    a214:	2201      	movs	r2, #1
    a216:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a218:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a21c:	4944      	ldr	r1, [pc, #272]	; (a330 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a21e:	4613      	mov	r3, r2
    a220:	009b      	lsls	r3, r3, #2
    a222:	4413      	add	r3, r2
    a224:	009b      	lsls	r3, r3, #2
    a226:	440b      	add	r3, r1
    a228:	681b      	ldr	r3, [r3, #0]
    a22a:	2b01      	cmp	r3, #1
    a22c:	d109      	bne.n	a242 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    a22e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a232:	493f      	ldr	r1, [pc, #252]	; (a330 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a234:	4613      	mov	r3, r2
    a236:	009b      	lsls	r3, r3, #2
    a238:	4413      	add	r3, r2
    a23a:	009b      	lsls	r3, r3, #2
    a23c:	440b      	add	r3, r1
    a23e:	2202      	movs	r2, #2
    a240:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    a242:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a246:	4618      	mov	r0, r3
    a248:	f7ff ffa4 	bl	a194 <Adc_Ipw_GetCurrentSampleCount>
    a24c:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    a24e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a252:	9a02      	ldr	r2, [sp, #8]
    a254:	429a      	cmp	r2, r3
    a256:	d35d      	bcc.n	a314 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    a258:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a25c:	4934      	ldr	r1, [pc, #208]	; (a330 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a25e:	4613      	mov	r3, r2
    a260:	009b      	lsls	r3, r3, #2
    a262:	4413      	add	r3, r2
    a264:	009b      	lsls	r3, r3, #2
    a266:	440b      	add	r3, r1
    a268:	2203      	movs	r2, #3
    a26a:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a26c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a270:	4a2e      	ldr	r2, [pc, #184]	; (a32c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a276:	685a      	ldr	r2, [r3, #4]
    a278:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a27c:	2134      	movs	r1, #52	; 0x34
    a27e:	fb01 f303 	mul.w	r3, r1, r3
    a282:	4413      	add	r3, r2
    a284:	699b      	ldr	r3, [r3, #24]
    a286:	2b00      	cmp	r3, #0
    a288:	d117      	bne.n	a2ba <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    a28a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a28e:	4a27      	ldr	r2, [pc, #156]	; (a32c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a294:	685a      	ldr	r2, [r3, #4]
    a296:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a29a:	2134      	movs	r1, #52	; 0x34
    a29c:	fb01 f303 	mul.w	r3, r1, r3
    a2a0:	4413      	add	r3, r2
    a2a2:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a2a4:	2b01      	cmp	r3, #1
    a2a6:	d108      	bne.n	a2ba <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a2a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a2ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2b0:	4611      	mov	r1, r2
    a2b2:	4618      	mov	r0, r3
    a2b4:	f7ff fde6 	bl	9e84 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a2b8:	e035      	b.n	a326 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a2ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a2be:	4a1b      	ldr	r2, [pc, #108]	; (a32c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c4:	685a      	ldr	r2, [r3, #4]
    a2c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a2ca:	2134      	movs	r1, #52	; 0x34
    a2cc:	fb01 f303 	mul.w	r3, r1, r3
    a2d0:	4413      	add	r3, r2
    a2d2:	689b      	ldr	r3, [r3, #8]
    a2d4:	2b01      	cmp	r3, #1
    a2d6:	d114      	bne.n	a302 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a2d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a2dc:	4914      	ldr	r1, [pc, #80]	; (a330 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a2de:	4613      	mov	r3, r2
    a2e0:	009b      	lsls	r3, r3, #2
    a2e2:	4413      	add	r3, r2
    a2e4:	009b      	lsls	r3, r3, #2
    a2e6:	440b      	add	r3, r1
    a2e8:	3308      	adds	r3, #8
    a2ea:	2200      	movs	r2, #0
    a2ec:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a2ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a2f2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a2f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2fa:	4618      	mov	r0, r3
    a2fc:	f7ff fed2 	bl	a0a4 <Adc_Ipw_RestartConversion>
}
    a300:	e011      	b.n	a326 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a302:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a306:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a30a:	4611      	mov	r1, r2
    a30c:	4618      	mov	r0, r3
    a30e:	f7ff fdb9 	bl	9e84 <Adc_Ipw_UpdateQueue>
}
    a312:	e008      	b.n	a326 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a314:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a318:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a31c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a320:	4618      	mov	r0, r3
    a322:	f7ff febf 	bl	a0a4 <Adc_Ipw_RestartConversion>
}
    a326:	bf00      	nop
    a328:	b004      	add	sp, #16
    a32a:	bd10      	pop	{r4, pc}
    a32c:	1fff8d1c 	.word	0x1fff8d1c
    a330:	1fff8d20 	.word	0x1fff8d20

0000a334 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a334:	b510      	push	{r4, lr}
    a336:	b088      	sub	sp, #32
    a338:	4604      	mov	r4, r0
    a33a:	4608      	mov	r0, r1
    a33c:	4611      	mov	r1, r2
    a33e:	461a      	mov	r2, r3
    a340:	4623      	mov	r3, r4
    a342:	f88d 300f 	strb.w	r3, [sp, #15]
    a346:	4603      	mov	r3, r0
    a348:	f8ad 300c 	strh.w	r3, [sp, #12]
    a34c:	460b      	mov	r3, r1
    a34e:	f88d 300e 	strb.w	r3, [sp, #14]
    a352:	4613      	mov	r3, r2
    a354:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a358:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a35c:	4a44      	ldr	r2, [pc, #272]	; (a470 <Adc_Ipw_EndConversion+0x13c>)
    a35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a362:	68da      	ldr	r2, [r3, #12]
    a364:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a368:	005b      	lsls	r3, r3, #1
    a36a:	4413      	add	r3, r2
    a36c:	881b      	ldrh	r3, [r3, #0]
    a36e:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a372:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a376:	4a3e      	ldr	r2, [pc, #248]	; (a470 <Adc_Ipw_EndConversion+0x13c>)
    a378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a37c:	685a      	ldr	r2, [r3, #4]
    a37e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a382:	2134      	movs	r1, #52	; 0x34
    a384:	fb01 f303 	mul.w	r3, r1, r3
    a388:	4413      	add	r3, r2
    a38a:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a38c:	9b06      	ldr	r3, [sp, #24]
    a38e:	8b9a      	ldrh	r2, [r3, #28]
    a390:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a394:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a398:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a39c:	f7ff fd98 	bl	9ed0 <Adc_Ipw_CheckConversionChannels>
    a3a0:	4603      	mov	r3, r0
    a3a2:	2b00      	cmp	r3, #0
    a3a4:	d160      	bne.n	a468 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a3a6:	9b06      	ldr	r3, [sp, #24]
    a3a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a3ac:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a3b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a3b4:	492f      	ldr	r1, [pc, #188]	; (a474 <Adc_Ipw_EndConversion+0x140>)
    a3b6:	4613      	mov	r3, r2
    a3b8:	009b      	lsls	r3, r3, #2
    a3ba:	4413      	add	r3, r2
    a3bc:	009b      	lsls	r3, r3, #2
    a3be:	440b      	add	r3, r1
    a3c0:	3310      	adds	r3, #16
    a3c2:	781b      	ldrb	r3, [r3, #0]
    a3c4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a3c8:	429a      	cmp	r2, r3
    a3ca:	d929      	bls.n	a420 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a3cc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a3d0:	4928      	ldr	r1, [pc, #160]	; (a474 <Adc_Ipw_EndConversion+0x140>)
    a3d2:	4613      	mov	r3, r2
    a3d4:	009b      	lsls	r3, r3, #2
    a3d6:	4413      	add	r3, r2
    a3d8:	009b      	lsls	r3, r3, #2
    a3da:	440b      	add	r3, r1
    a3dc:	3310      	adds	r3, #16
    a3de:	781b      	ldrb	r3, [r3, #0]
    a3e0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a3e4:	1ad3      	subs	r3, r2, r3
    a3e6:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a3ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a3ee:	2b0f      	cmp	r3, #15
    a3f0:	d805      	bhi.n	a3fe <Adc_Ipw_EndConversion+0xca>
    a3f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a3f6:	f003 030f 	and.w	r3, r3, #15
    a3fa:	b2db      	uxtb	r3, r3
    a3fc:	e000      	b.n	a400 <Adc_Ipw_EndConversion+0xcc>
    a3fe:	2310      	movs	r3, #16
    a400:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a404:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a408:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a40c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a410:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a414:	9300      	str	r3, [sp, #0]
    a416:	4613      	mov	r3, r2
    a418:	220f      	movs	r2, #15
    a41a:	f7ff f993 	bl	9744 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a41e:	e023      	b.n	a468 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a420:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a424:	4913      	ldr	r1, [pc, #76]	; (a474 <Adc_Ipw_EndConversion+0x140>)
    a426:	4613      	mov	r3, r2
    a428:	009b      	lsls	r3, r3, #2
    a42a:	4413      	add	r3, r2
    a42c:	009b      	lsls	r3, r3, #2
    a42e:	440b      	add	r3, r1
    a430:	3308      	adds	r3, #8
    a432:	881b      	ldrh	r3, [r3, #0]
    a434:	b29b      	uxth	r3, r3
    a436:	3301      	adds	r3, #1
    a438:	b298      	uxth	r0, r3
    a43a:	490e      	ldr	r1, [pc, #56]	; (a474 <Adc_Ipw_EndConversion+0x140>)
    a43c:	4613      	mov	r3, r2
    a43e:	009b      	lsls	r3, r3, #2
    a440:	4413      	add	r3, r2
    a442:	009b      	lsls	r3, r3, #2
    a444:	440b      	add	r3, r1
    a446:	3308      	adds	r3, #8
    a448:	4602      	mov	r2, r0
    a44a:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a44c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a450:	2b00      	cmp	r3, #0
    a452:	d009      	beq.n	a468 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a454:	9b06      	ldr	r3, [sp, #24]
    a456:	8b9a      	ldrh	r2, [r3, #28]
    a458:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a45c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a460:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a464:	f7ff feae 	bl	a1c4 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a468:	bf00      	nop
    a46a:	b008      	add	sp, #32
    a46c:	bd10      	pop	{r4, pc}
    a46e:	bf00      	nop
    a470:	1fff8d1c 	.word	0x1fff8d1c
    a474:	1fff8d20 	.word	0x1fff8d20

0000a478 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a478:	b084      	sub	sp, #16
    a47a:	9003      	str	r0, [sp, #12]
    a47c:	9102      	str	r1, [sp, #8]
    a47e:	4611      	mov	r1, r2
    a480:	461a      	mov	r2, r3
    a482:	460b      	mov	r3, r1
    a484:	f8ad 3006 	strh.w	r3, [sp, #6]
    a488:	4613      	mov	r3, r2
    a48a:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a48e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a492:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a496:	fb02 f303 	mul.w	r3, r2, r3
    a49a:	005b      	lsls	r3, r3, #1
    a49c:	9a02      	ldr	r2, [sp, #8]
    a49e:	4413      	add	r3, r2
    a4a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a4a4:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a4a6:	bf00      	nop
    a4a8:	b004      	add	sp, #16
    a4aa:	4770      	bx	lr

0000a4ac <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a4ac:	b500      	push	{lr}
    a4ae:	b085      	sub	sp, #20
    a4b0:	4603      	mov	r3, r0
    a4b2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a4b6:	f7ff fce1 	bl	9e7c <Adc_GetCoreID>
    a4ba:	4603      	mov	r3, r0
    a4bc:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a4c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a4c4:	b2db      	uxtb	r3, r3
    a4c6:	461a      	mov	r2, r3
    a4c8:	4b14      	ldr	r3, [pc, #80]	; (a51c <Adc_Ipw_EndConversionNotification+0x70>)
    a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a4ce:	681a      	ldr	r2, [r3, #0]
    a4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4d4:	4413      	add	r3, r2
    a4d6:	f893 3020 	ldrb.w	r3, [r3, #32]
    a4da:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a4de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4e2:	4a0f      	ldr	r2, [pc, #60]	; (a520 <Adc_Ipw_EndConversionNotification+0x74>)
    a4e4:	00db      	lsls	r3, r3, #3
    a4e6:	4413      	add	r3, r2
    a4e8:	885b      	ldrh	r3, [r3, #2]
    a4ea:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a4ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4f2:	4a0b      	ldr	r2, [pc, #44]	; (a520 <Adc_Ipw_EndConversionNotification+0x74>)
    a4f4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a4f8:	b29b      	uxth	r3, r3
    a4fa:	2b00      	cmp	r3, #0
    a4fc:	d009      	beq.n	a512 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a4fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a502:	b2db      	uxtb	r3, r3
    a504:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a508:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a50c:	2201      	movs	r2, #1
    a50e:	f7ff ff11 	bl	a334 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a512:	bf00      	nop
    a514:	b005      	add	sp, #20
    a516:	f85d fb04 	ldr.w	pc, [sp], #4
    a51a:	bf00      	nop
    a51c:	1fff8d1c 	.word	0x1fff8d1c
    a520:	1fff8d48 	.word	0x1fff8d48

0000a524 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a524:	b500      	push	{lr}
    a526:	b085      	sub	sp, #20
    a528:	4603      	mov	r3, r0
    a52a:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a52e:	2300      	movs	r3, #0
    a530:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a534:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a538:	4618      	mov	r0, r3
    a53a:	f7ff ffb7 	bl	a4ac <Adc_Ipw_EndConversionNotification>
}
    a53e:	bf00      	nop
    a540:	b005      	add	sp, #20
    a542:	f85d fb04 	ldr.w	pc, [sp], #4

0000a546 <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    a546:	b500      	push	{lr}
    a548:	b085      	sub	sp, #20
    a54a:	4603      	mov	r3, r0
    a54c:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    a550:	2301      	movs	r3, #1
    a552:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a556:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a55a:	4618      	mov	r0, r3
    a55c:	f7ff ffa6 	bl	a4ac <Adc_Ipw_EndConversionNotification>
}
    a560:	bf00      	nop
    a562:	b005      	add	sp, #20
    a564:	f85d fb04 	ldr.w	pc, [sp], #4

0000a568 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a568:	b084      	sub	sp, #16
    a56a:	9003      	str	r0, [sp, #12]
    a56c:	9201      	str	r2, [sp, #4]
    a56e:	461a      	mov	r2, r3
    a570:	460b      	mov	r3, r1
    a572:	f88d 300b 	strb.w	r3, [sp, #11]
    a576:	4613      	mov	r3, r2
    a578:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a57c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a580:	2b00      	cmp	r3, #0
    a582:	d016      	beq.n	a5b2 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a584:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a588:	9903      	ldr	r1, [sp, #12]
    a58a:	4613      	mov	r3, r2
    a58c:	009b      	lsls	r3, r3, #2
    a58e:	4413      	add	r3, r2
    a590:	00db      	lsls	r3, r3, #3
    a592:	440b      	add	r3, r1
    a594:	3310      	adds	r3, #16
    a596:	6819      	ldr	r1, [r3, #0]
    a598:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a59c:	9b01      	ldr	r3, [sp, #4]
    a59e:	4319      	orrs	r1, r3
    a5a0:	9803      	ldr	r0, [sp, #12]
    a5a2:	4613      	mov	r3, r2
    a5a4:	009b      	lsls	r3, r3, #2
    a5a6:	4413      	add	r3, r2
    a5a8:	00db      	lsls	r3, r3, #3
    a5aa:	4403      	add	r3, r0
    a5ac:	3310      	adds	r3, #16
    a5ae:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a5b0:	e016      	b.n	a5e0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a5b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a5b6:	9903      	ldr	r1, [sp, #12]
    a5b8:	4613      	mov	r3, r2
    a5ba:	009b      	lsls	r3, r3, #2
    a5bc:	4413      	add	r3, r2
    a5be:	00db      	lsls	r3, r3, #3
    a5c0:	440b      	add	r3, r1
    a5c2:	3310      	adds	r3, #16
    a5c4:	6819      	ldr	r1, [r3, #0]
    a5c6:	9b01      	ldr	r3, [sp, #4]
    a5c8:	43db      	mvns	r3, r3
    a5ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a5ce:	4019      	ands	r1, r3
    a5d0:	9803      	ldr	r0, [sp, #12]
    a5d2:	4613      	mov	r3, r2
    a5d4:	009b      	lsls	r3, r3, #2
    a5d6:	4413      	add	r3, r2
    a5d8:	00db      	lsls	r3, r3, #3
    a5da:	4403      	add	r3, r0
    a5dc:	3310      	adds	r3, #16
    a5de:	6019      	str	r1, [r3, #0]
}
    a5e0:	bf00      	nop
    a5e2:	b004      	add	sp, #16
    a5e4:	4770      	bx	lr

0000a5e6 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a5e6:	b082      	sub	sp, #8
    a5e8:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a5ea:	9b01      	ldr	r3, [sp, #4]
    a5ec:	681b      	ldr	r3, [r3, #0]
    a5ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a5f2:	9b01      	ldr	r3, [sp, #4]
    a5f4:	601a      	str	r2, [r3, #0]
}
    a5f6:	bf00      	nop
    a5f8:	b002      	add	sp, #8
    a5fa:	4770      	bx	lr

0000a5fc <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a5fc:	b082      	sub	sp, #8
    a5fe:	9001      	str	r0, [sp, #4]
    a600:	460b      	mov	r3, r1
    a602:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a606:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a60a:	2b00      	cmp	r3, #0
    a60c:	d006      	beq.n	a61c <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a60e:	9b01      	ldr	r3, [sp, #4]
    a610:	681b      	ldr	r3, [r3, #0]
    a612:	f043 0202 	orr.w	r2, r3, #2
    a616:	9b01      	ldr	r3, [sp, #4]
    a618:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a61a:	e005      	b.n	a628 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a61c:	9b01      	ldr	r3, [sp, #4]
    a61e:	681b      	ldr	r3, [r3, #0]
    a620:	f023 0202 	bic.w	r2, r3, #2
    a624:	9b01      	ldr	r3, [sp, #4]
    a626:	601a      	str	r2, [r3, #0]
}
    a628:	bf00      	nop
    a62a:	b002      	add	sp, #8
    a62c:	4770      	bx	lr

0000a62e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a62e:	b086      	sub	sp, #24
    a630:	9003      	str	r0, [sp, #12]
    a632:	460b      	mov	r3, r1
    a634:	9201      	str	r2, [sp, #4]
    a636:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a63a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a63e:	9903      	ldr	r1, [sp, #12]
    a640:	4613      	mov	r3, r2
    a642:	009b      	lsls	r3, r3, #2
    a644:	4413      	add	r3, r2
    a646:	00db      	lsls	r3, r3, #3
    a648:	440b      	add	r3, r1
    a64a:	3310      	adds	r3, #16
    a64c:	681b      	ldr	r3, [r3, #0]
    a64e:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a650:	9b05      	ldr	r3, [sp, #20]
    a652:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a656:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a658:	9b01      	ldr	r3, [sp, #4]
    a65a:	781b      	ldrb	r3, [r3, #0]
    a65c:	461a      	mov	r2, r3
    a65e:	9b05      	ldr	r3, [sp, #20]
    a660:	4313      	orrs	r3, r2
    a662:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a664:	9b01      	ldr	r3, [sp, #4]
    a666:	785b      	ldrb	r3, [r3, #1]
    a668:	021b      	lsls	r3, r3, #8
    a66a:	b29b      	uxth	r3, r3
    a66c:	9a05      	ldr	r2, [sp, #20]
    a66e:	4313      	orrs	r3, r2
    a670:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a672:	9b01      	ldr	r3, [sp, #4]
    a674:	789b      	ldrb	r3, [r3, #2]
    a676:	041b      	lsls	r3, r3, #16
    a678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a67c:	9a05      	ldr	r2, [sp, #20]
    a67e:	4313      	orrs	r3, r2
    a680:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a682:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a686:	9903      	ldr	r1, [sp, #12]
    a688:	4613      	mov	r3, r2
    a68a:	009b      	lsls	r3, r3, #2
    a68c:	4413      	add	r3, r2
    a68e:	00db      	lsls	r3, r3, #3
    a690:	440b      	add	r3, r1
    a692:	3310      	adds	r3, #16
    a694:	9a05      	ldr	r2, [sp, #20]
    a696:	601a      	str	r2, [r3, #0]
}
    a698:	bf00      	nop
    a69a:	b006      	add	sp, #24
    a69c:	4770      	bx	lr

0000a69e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a69e:	b082      	sub	sp, #8
    a6a0:	9001      	str	r0, [sp, #4]
    a6a2:	460b      	mov	r3, r1
    a6a4:	f88d 3003 	strb.w	r3, [sp, #3]
    a6a8:	4613      	mov	r3, r2
    a6aa:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a6ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a6b2:	9901      	ldr	r1, [sp, #4]
    a6b4:	4613      	mov	r3, r2
    a6b6:	009b      	lsls	r3, r3, #2
    a6b8:	4413      	add	r3, r2
    a6ba:	00db      	lsls	r3, r3, #3
    a6bc:	440b      	add	r3, r1
    a6be:	3314      	adds	r3, #20
    a6c0:	6819      	ldr	r1, [r3, #0]
    a6c2:	f8bd 3000 	ldrh.w	r3, [sp]
    a6c6:	041b      	lsls	r3, r3, #16
    a6c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a6cc:	43db      	mvns	r3, r3
    a6ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a6d2:	4019      	ands	r1, r3
    a6d4:	9801      	ldr	r0, [sp, #4]
    a6d6:	4613      	mov	r3, r2
    a6d8:	009b      	lsls	r3, r3, #2
    a6da:	4413      	add	r3, r2
    a6dc:	00db      	lsls	r3, r3, #3
    a6de:	4403      	add	r3, r0
    a6e0:	3314      	adds	r3, #20
    a6e2:	6019      	str	r1, [r3, #0]
}
    a6e4:	bf00      	nop
    a6e6:	b002      	add	sp, #8
    a6e8:	4770      	bx	lr

0000a6ea <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a6ea:	b500      	push	{lr}
    a6ec:	b087      	sub	sp, #28
    a6ee:	9001      	str	r0, [sp, #4]
    a6f0:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6f2:	4a50      	ldr	r2, [pc, #320]	; (a834 <Pdb_Adc_Ip_Init+0x14a>)
    a6f4:	9b01      	ldr	r3, [sp, #4]
    a6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6fa:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a6fc:	2300      	movs	r3, #0
    a6fe:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a700:	9b00      	ldr	r3, [sp, #0]
    a702:	681b      	ldr	r3, [r3, #0]
    a704:	049b      	lsls	r3, r3, #18
    a706:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a70a:	9a04      	ldr	r2, [sp, #16]
    a70c:	4313      	orrs	r3, r2
    a70e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a710:	9b00      	ldr	r3, [sp, #0]
    a712:	685b      	ldr	r3, [r3, #4]
    a714:	031b      	lsls	r3, r3, #12
    a716:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a71a:	9a04      	ldr	r2, [sp, #16]
    a71c:	4313      	orrs	r3, r2
    a71e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a720:	9b00      	ldr	r3, [sp, #0]
    a722:	689b      	ldr	r3, [r3, #8]
    a724:	009b      	lsls	r3, r3, #2
    a726:	f003 030c 	and.w	r3, r3, #12
    a72a:	9a04      	ldr	r2, [sp, #16]
    a72c:	4313      	orrs	r3, r2
    a72e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a730:	9b00      	ldr	r3, [sp, #0]
    a732:	68db      	ldr	r3, [r3, #12]
    a734:	021b      	lsls	r3, r3, #8
    a736:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a73a:	9a04      	ldr	r2, [sp, #16]
    a73c:	4313      	orrs	r3, r2
    a73e:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a740:	9b00      	ldr	r3, [sp, #0]
    a742:	7c1b      	ldrb	r3, [r3, #16]
    a744:	2b00      	cmp	r3, #0
    a746:	d003      	beq.n	a750 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a748:	9b04      	ldr	r3, [sp, #16]
    a74a:	f043 0302 	orr.w	r3, r3, #2
    a74e:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a750:	9b00      	ldr	r3, [sp, #0]
    a752:	7c5b      	ldrb	r3, [r3, #17]
    a754:	2b00      	cmp	r3, #0
    a756:	d003      	beq.n	a760 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a758:	9b04      	ldr	r3, [sp, #16]
    a75a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a75e:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a760:	9b00      	ldr	r3, [sp, #0]
    a762:	69db      	ldr	r3, [r3, #28]
    a764:	2b00      	cmp	r3, #0
    a766:	d003      	beq.n	a770 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a768:	9b04      	ldr	r3, [sp, #16]
    a76a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a76e:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a770:	9b03      	ldr	r3, [sp, #12]
    a772:	9a04      	ldr	r2, [sp, #16]
    a774:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a776:	9b00      	ldr	r3, [sp, #0]
    a778:	8a5b      	ldrh	r3, [r3, #18]
    a77a:	4619      	mov	r1, r3
    a77c:	9801      	ldr	r0, [sp, #4]
    a77e:	f000 f98f 	bl	aaa0 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a782:	9b00      	ldr	r3, [sp, #0]
    a784:	7d1b      	ldrb	r3, [r3, #20]
    a786:	2b00      	cmp	r3, #0
    a788:	d03e      	beq.n	a808 <Pdb_Adc_Ip_Init+0x11e>
    a78a:	9b00      	ldr	r3, [sp, #0]
    a78c:	699b      	ldr	r3, [r3, #24]
    a78e:	2b00      	cmp	r3, #0
    a790:	d03a      	beq.n	a808 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a792:	2300      	movs	r3, #0
    a794:	f88d 3017 	strb.w	r3, [sp, #23]
    a798:	e030      	b.n	a7fc <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a79a:	9b00      	ldr	r3, [sp, #0]
    a79c:	6999      	ldr	r1, [r3, #24]
    a79e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a7a2:	4613      	mov	r3, r2
    a7a4:	009b      	lsls	r3, r3, #2
    a7a6:	4413      	add	r3, r2
    a7a8:	009b      	lsls	r3, r3, #2
    a7aa:	440b      	add	r3, r1
    a7ac:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a7ae:	9b02      	ldr	r3, [sp, #8]
    a7b0:	7819      	ldrb	r1, [r3, #0]
    a7b2:	9b02      	ldr	r3, [sp, #8]
    a7b4:	3301      	adds	r3, #1
    a7b6:	461a      	mov	r2, r3
    a7b8:	9803      	ldr	r0, [sp, #12]
    a7ba:	f7ff ff38 	bl	a62e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a7be:	2300      	movs	r3, #0
    a7c0:	f88d 3016 	strb.w	r3, [sp, #22]
    a7c4:	e011      	b.n	a7ea <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a7c6:	9b02      	ldr	r3, [sp, #8]
    a7c8:	7819      	ldrb	r1, [r3, #0]
    a7ca:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7ce:	9a02      	ldr	r2, [sp, #8]
    a7d0:	005b      	lsls	r3, r3, #1
    a7d2:	4413      	add	r3, r2
    a7d4:	889b      	ldrh	r3, [r3, #4]
    a7d6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a7da:	9801      	ldr	r0, [sp, #4]
    a7dc:	f000 fa74 	bl	acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a7e0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7e4:	3301      	adds	r3, #1
    a7e6:	f88d 3016 	strb.w	r3, [sp, #22]
    a7ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7ee:	2b07      	cmp	r3, #7
    a7f0:	d9e9      	bls.n	a7c6 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a7f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7f6:	3301      	adds	r3, #1
    a7f8:	f88d 3017 	strb.w	r3, [sp, #23]
    a7fc:	9b00      	ldr	r3, [sp, #0]
    a7fe:	7d1b      	ldrb	r3, [r3, #20]
    a800:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a804:	429a      	cmp	r2, r3
    a806:	d3c8      	bcc.n	a79a <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a808:	9801      	ldr	r0, [sp, #4]
    a80a:	f000 f89b 	bl	a944 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a80e:	9801      	ldr	r0, [sp, #4]
    a810:	f000 f92e 	bl	aa70 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a814:	9b00      	ldr	r3, [sp, #0]
    a816:	69da      	ldr	r2, [r3, #28]
    a818:	4907      	ldr	r1, [pc, #28]	; (a838 <Pdb_Adc_Ip_Init+0x14e>)
    a81a:	9b01      	ldr	r3, [sp, #4]
    a81c:	00db      	lsls	r3, r3, #3
    a81e:	440b      	add	r3, r1
    a820:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a822:	4a05      	ldr	r2, [pc, #20]	; (a838 <Pdb_Adc_Ip_Init+0x14e>)
    a824:	9b01      	ldr	r3, [sp, #4]
    a826:	2101      	movs	r1, #1
    a828:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a82c:	bf00      	nop
    a82e:	b007      	add	sp, #28
    a830:	f85d fb04 	ldr.w	pc, [sp], #4
    a834:	000156ac 	.word	0x000156ac
    a838:	1fff8df0 	.word	0x1fff8df0

0000a83c <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a83c:	b500      	push	{lr}
    a83e:	b097      	sub	sp, #92	; 0x5c
    a840:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a842:	2300      	movs	r3, #0
    a844:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a846:	2300      	movs	r3, #0
    a848:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a84a:	2300      	movs	r3, #0
    a84c:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a84e:	2300      	movs	r3, #0
    a850:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a852:	2300      	movs	r3, #0
    a854:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a858:	2300      	movs	r3, #0
    a85a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a85e:	2300      	movs	r3, #0
    a860:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a864:	2302      	movs	r3, #2
    a866:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a86a:	2300      	movs	r3, #0
    a86c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a870:	e04d      	b.n	a90e <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a872:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a876:	4613      	mov	r3, r2
    a878:	009b      	lsls	r3, r3, #2
    a87a:	4413      	add	r3, r2
    a87c:	009b      	lsls	r3, r3, #2
    a87e:	aa16      	add	r2, sp, #88	; 0x58
    a880:	4413      	add	r3, r2
    a882:	3b4c      	subs	r3, #76	; 0x4c
    a884:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a888:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a88a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a88e:	4613      	mov	r3, r2
    a890:	009b      	lsls	r3, r3, #2
    a892:	4413      	add	r3, r2
    a894:	009b      	lsls	r3, r3, #2
    a896:	aa16      	add	r2, sp, #88	; 0x58
    a898:	4413      	add	r3, r2
    a89a:	3b4b      	subs	r3, #75	; 0x4b
    a89c:	2200      	movs	r2, #0
    a89e:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a8a0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a8a4:	4613      	mov	r3, r2
    a8a6:	009b      	lsls	r3, r3, #2
    a8a8:	4413      	add	r3, r2
    a8aa:	009b      	lsls	r3, r3, #2
    a8ac:	aa16      	add	r2, sp, #88	; 0x58
    a8ae:	4413      	add	r3, r2
    a8b0:	3b4a      	subs	r3, #74	; 0x4a
    a8b2:	2200      	movs	r2, #0
    a8b4:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a8b6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a8ba:	4613      	mov	r3, r2
    a8bc:	009b      	lsls	r3, r3, #2
    a8be:	4413      	add	r3, r2
    a8c0:	009b      	lsls	r3, r3, #2
    a8c2:	aa16      	add	r2, sp, #88	; 0x58
    a8c4:	4413      	add	r3, r2
    a8c6:	3b49      	subs	r3, #73	; 0x49
    a8c8:	2200      	movs	r2, #0
    a8ca:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a8cc:	2300      	movs	r3, #0
    a8ce:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a8d2:	e013      	b.n	a8fc <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a8d4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a8d8:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a8dc:	4613      	mov	r3, r2
    a8de:	009b      	lsls	r3, r3, #2
    a8e0:	4413      	add	r3, r2
    a8e2:	005b      	lsls	r3, r3, #1
    a8e4:	440b      	add	r3, r1
    a8e6:	005b      	lsls	r3, r3, #1
    a8e8:	aa16      	add	r2, sp, #88	; 0x58
    a8ea:	4413      	add	r3, r2
    a8ec:	2200      	movs	r2, #0
    a8ee:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a8f2:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a8f6:	3301      	adds	r3, #1
    a8f8:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a8fc:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a900:	2b07      	cmp	r3, #7
    a902:	d9e7      	bls.n	a8d4 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a904:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a908:	3301      	adds	r3, #1
    a90a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a90e:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a912:	2b01      	cmp	r3, #1
    a914:	d9ad      	bls.n	a872 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a916:	ab03      	add	r3, sp, #12
    a918:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a91a:	2300      	movs	r3, #0
    a91c:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a91e:	ab0d      	add	r3, sp, #52	; 0x34
    a920:	4619      	mov	r1, r3
    a922:	9801      	ldr	r0, [sp, #4]
    a924:	f7ff fee1 	bl	a6ea <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a928:	9801      	ldr	r0, [sp, #4]
    a92a:	f000 f823 	bl	a974 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a92e:	4a04      	ldr	r2, [pc, #16]	; (a940 <Pdb_Adc_Ip_DeInit+0x104>)
    a930:	9b01      	ldr	r3, [sp, #4]
    a932:	2100      	movs	r1, #0
    a934:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a938:	bf00      	nop
    a93a:	b017      	add	sp, #92	; 0x5c
    a93c:	f85d fb04 	ldr.w	pc, [sp], #4
    a940:	1fff8df0 	.word	0x1fff8df0

0000a944 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a944:	b500      	push	{lr}
    a946:	b085      	sub	sp, #20
    a948:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a94a:	4a09      	ldr	r2, [pc, #36]	; (a970 <Pdb_Adc_Ip_Enable+0x2c>)
    a94c:	9b01      	ldr	r3, [sp, #4]
    a94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a952:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a954:	f004 ffd4 	bl	f900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a958:	9b03      	ldr	r3, [sp, #12]
    a95a:	681b      	ldr	r3, [r3, #0]
    a95c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a960:	9b03      	ldr	r3, [sp, #12]
    a962:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a964:	f004 fff8 	bl	f958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a968:	bf00      	nop
    a96a:	b005      	add	sp, #20
    a96c:	f85d fb04 	ldr.w	pc, [sp], #4
    a970:	000156ac 	.word	0x000156ac

0000a974 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a974:	b500      	push	{lr}
    a976:	b085      	sub	sp, #20
    a978:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a97a:	4a08      	ldr	r2, [pc, #32]	; (a99c <Pdb_Adc_Ip_Disable+0x28>)
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a982:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a984:	f005 f80e 	bl	f9a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a988:	9803      	ldr	r0, [sp, #12]
    a98a:	f7ff fe2c 	bl	a5e6 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a98e:	f005 f835 	bl	f9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a992:	bf00      	nop
    a994:	b005      	add	sp, #20
    a996:	f85d fb04 	ldr.w	pc, [sp], #4
    a99a:	bf00      	nop
    a99c:	000156ac 	.word	0x000156ac

0000a9a0 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a9a0:	b500      	push	{lr}
    a9a2:	b085      	sub	sp, #20
    a9a4:	9001      	str	r0, [sp, #4]
    a9a6:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9a8:	4a0e      	ldr	r2, [pc, #56]	; (a9e4 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a9aa:	9b01      	ldr	r3, [sp, #4]
    a9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b0:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a9b2:	f005 f849 	bl	fa48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a9b6:	9b03      	ldr	r3, [sp, #12]
    a9b8:	681b      	ldr	r3, [r3, #0]
    a9ba:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a9bc:	9b02      	ldr	r3, [sp, #8]
    a9be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a9c2:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a9c4:	9b00      	ldr	r3, [sp, #0]
    a9c6:	021b      	lsls	r3, r3, #8
    a9c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a9cc:	9a02      	ldr	r2, [sp, #8]
    a9ce:	4313      	orrs	r3, r2
    a9d0:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a9d2:	9b03      	ldr	r3, [sp, #12]
    a9d4:	9a02      	ldr	r2, [sp, #8]
    a9d6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a9d8:	f005 f862 	bl	faa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a9dc:	bf00      	nop
    a9de:	b005      	add	sp, #20
    a9e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e4:	000156ac 	.word	0x000156ac

0000a9e8 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a9e8:	b500      	push	{lr}
    a9ea:	b085      	sub	sp, #20
    a9ec:	9001      	str	r0, [sp, #4]
    a9ee:	460b      	mov	r3, r1
    a9f0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9f4:	4a09      	ldr	r2, [pc, #36]	; (aa1c <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a9f6:	9b01      	ldr	r3, [sp, #4]
    a9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9fc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a9fe:	f005 f875 	bl	faec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    aa02:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aa06:	4619      	mov	r1, r3
    aa08:	9803      	ldr	r0, [sp, #12]
    aa0a:	f7ff fdf7 	bl	a5fc <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    aa0e:	f005 f899 	bl	fb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    aa12:	bf00      	nop
    aa14:	b005      	add	sp, #20
    aa16:	f85d fb04 	ldr.w	pc, [sp], #4
    aa1a:	bf00      	nop
    aa1c:	000156ac 	.word	0x000156ac

0000aa20 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    aa20:	b500      	push	{lr}
    aa22:	b085      	sub	sp, #20
    aa24:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa26:	4a09      	ldr	r2, [pc, #36]	; (aa4c <Pdb_Adc_Ip_SwTrigger+0x2c>)
    aa28:	9b01      	ldr	r3, [sp, #4]
    aa2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa2e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    aa30:	f005 f8ae 	bl	fb90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    aa34:	9b03      	ldr	r3, [sp, #12]
    aa36:	681b      	ldr	r3, [r3, #0]
    aa38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    aa3c:	9b03      	ldr	r3, [sp, #12]
    aa3e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    aa40:	f005 f8d2 	bl	fbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    aa44:	bf00      	nop
    aa46:	b005      	add	sp, #20
    aa48:	f85d fb04 	ldr.w	pc, [sp], #4
    aa4c:	000156ac 	.word	0x000156ac

0000aa50 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    aa50:	b084      	sub	sp, #16
    aa52:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa54:	4a05      	ldr	r2, [pc, #20]	; (aa6c <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    aa56:	9b01      	ldr	r3, [sp, #4]
    aa58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa5c:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    aa5e:	9b03      	ldr	r3, [sp, #12]
    aa60:	689b      	ldr	r3, [r3, #8]
    aa62:	b29b      	uxth	r3, r3
}
    aa64:	4618      	mov	r0, r3
    aa66:	b004      	add	sp, #16
    aa68:	4770      	bx	lr
    aa6a:	bf00      	nop
    aa6c:	000156ac 	.word	0x000156ac

0000aa70 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    aa70:	b500      	push	{lr}
    aa72:	b085      	sub	sp, #20
    aa74:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa76:	4a09      	ldr	r2, [pc, #36]	; (aa9c <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    aa78:	9b01      	ldr	r3, [sp, #4]
    aa7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa7e:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    aa80:	f005 f8d8 	bl	fc34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    aa84:	9b03      	ldr	r3, [sp, #12]
    aa86:	681b      	ldr	r3, [r3, #0]
    aa88:	f043 0201 	orr.w	r2, r3, #1
    aa8c:	9b03      	ldr	r3, [sp, #12]
    aa8e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    aa90:	f005 f8fc 	bl	fc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    aa94:	bf00      	nop
    aa96:	b005      	add	sp, #20
    aa98:	f85d fb04 	ldr.w	pc, [sp], #4
    aa9c:	000156ac 	.word	0x000156ac

0000aaa0 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    aaa0:	b500      	push	{lr}
    aaa2:	b085      	sub	sp, #20
    aaa4:	9001      	str	r0, [sp, #4]
    aaa6:	460b      	mov	r3, r1
    aaa8:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aaac:	4a0d      	ldr	r2, [pc, #52]	; (aae4 <Pdb_Adc_Ip_SetModulus+0x44>)
    aaae:	9b01      	ldr	r3, [sp, #4]
    aab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab4:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    aab6:	f005 fb9f 	bl	101f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    aaba:	9b03      	ldr	r3, [sp, #12]
    aabc:	685b      	ldr	r3, [r3, #4]
    aabe:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    aac0:	9b02      	ldr	r3, [sp, #8]
    aac2:	0c1b      	lsrs	r3, r3, #16
    aac4:	041b      	lsls	r3, r3, #16
    aac6:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    aac8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    aacc:	9a02      	ldr	r2, [sp, #8]
    aace:	4313      	orrs	r3, r2
    aad0:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    aad2:	9b03      	ldr	r3, [sp, #12]
    aad4:	9a02      	ldr	r2, [sp, #8]
    aad6:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    aad8:	f005 fbba 	bl	10250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    aadc:	bf00      	nop
    aade:	b005      	add	sp, #20
    aae0:	f85d fb04 	ldr.w	pc, [sp], #4
    aae4:	000156ac 	.word	0x000156ac

0000aae8 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    aae8:	b500      	push	{lr}
    aaea:	b087      	sub	sp, #28
    aaec:	9003      	str	r0, [sp, #12]
    aaee:	460b      	mov	r3, r1
    aaf0:	9201      	str	r2, [sp, #4]
    aaf2:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aaf6:	4a0a      	ldr	r2, [pc, #40]	; (ab20 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    aaf8:	9b03      	ldr	r3, [sp, #12]
    aafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aafe:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    ab00:	f005 f93c 	bl	fd7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    ab04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab08:	9a01      	ldr	r2, [sp, #4]
    ab0a:	4619      	mov	r1, r3
    ab0c:	9805      	ldr	r0, [sp, #20]
    ab0e:	f7ff fd8e 	bl	a62e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    ab12:	f005 f95f 	bl	fdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    ab16:	bf00      	nop
    ab18:	b007      	add	sp, #28
    ab1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab1e:	bf00      	nop
    ab20:	000156ac 	.word	0x000156ac

0000ab24 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    ab24:	b084      	sub	sp, #16
    ab26:	9001      	str	r0, [sp, #4]
    ab28:	460b      	mov	r3, r1
    ab2a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab2e:	4a0c      	ldr	r2, [pc, #48]	; (ab60 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    ab30:	9b01      	ldr	r3, [sp, #4]
    ab32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab36:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    ab38:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ab3c:	9903      	ldr	r1, [sp, #12]
    ab3e:	4613      	mov	r3, r2
    ab40:	009b      	lsls	r3, r3, #2
    ab42:	4413      	add	r3, r2
    ab44:	00db      	lsls	r3, r3, #3
    ab46:	440b      	add	r3, r1
    ab48:	3314      	adds	r3, #20
    ab4a:	681b      	ldr	r3, [r3, #0]
    ab4c:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    ab4e:	9b02      	ldr	r3, [sp, #8]
    ab50:	0c1b      	lsrs	r3, r3, #16
    ab52:	b2db      	uxtb	r3, r3
    ab54:	9302      	str	r3, [sp, #8]

    return Result;
    ab56:	9b02      	ldr	r3, [sp, #8]
}
    ab58:	4618      	mov	r0, r3
    ab5a:	b004      	add	sp, #16
    ab5c:	4770      	bx	lr
    ab5e:	bf00      	nop
    ab60:	000156ac 	.word	0x000156ac

0000ab64 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    ab64:	b500      	push	{lr}
    ab66:	b085      	sub	sp, #20
    ab68:	9001      	str	r0, [sp, #4]
    ab6a:	460b      	mov	r3, r1
    ab6c:	f88d 3003 	strb.w	r3, [sp, #3]
    ab70:	4613      	mov	r3, r2
    ab72:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab76:	4a0a      	ldr	r2, [pc, #40]	; (aba0 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    ab78:	9b01      	ldr	r3, [sp, #4]
    ab7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab7e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    ab80:	f005 fa96 	bl	100b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    ab84:	f8bd 2000 	ldrh.w	r2, [sp]
    ab88:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ab8c:	4619      	mov	r1, r3
    ab8e:	9803      	ldr	r0, [sp, #12]
    ab90:	f7ff fd85 	bl	a69e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    ab94:	f005 fab8 	bl	10108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    ab98:	bf00      	nop
    ab9a:	b005      	add	sp, #20
    ab9c:	f85d fb04 	ldr.w	pc, [sp], #4
    aba0:	000156ac 	.word	0x000156ac

0000aba4 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    aba4:	b500      	push	{lr}
    aba6:	b085      	sub	sp, #20
    aba8:	9001      	str	r0, [sp, #4]
    abaa:	4608      	mov	r0, r1
    abac:	4611      	mov	r1, r2
    abae:	461a      	mov	r2, r3
    abb0:	4603      	mov	r3, r0
    abb2:	f88d 3003 	strb.w	r3, [sp, #3]
    abb6:	460b      	mov	r3, r1
    abb8:	f88d 3002 	strb.w	r3, [sp, #2]
    abbc:	4613      	mov	r3, r2
    abbe:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    abc2:	4a10      	ldr	r2, [pc, #64]	; (ac04 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    abc4:	9b01      	ldr	r3, [sp, #4]
    abc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abca:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    abcc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    abd0:	2201      	movs	r2, #1
    abd2:	fa02 f303 	lsl.w	r3, r2, r3
    abd6:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    abd8:	9b02      	ldr	r3, [sp, #8]
    abda:	041b      	lsls	r3, r3, #16
    abdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    abe0:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    abe2:	f005 f91d 	bl	fe20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    abe6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    abea:	f89d 1003 	ldrb.w	r1, [sp, #3]
    abee:	9a02      	ldr	r2, [sp, #8]
    abf0:	9803      	ldr	r0, [sp, #12]
    abf2:	f7ff fcb9 	bl	a568 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    abf6:	f005 f93f 	bl	fe78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    abfa:	bf00      	nop
    abfc:	b005      	add	sp, #20
    abfe:	f85d fb04 	ldr.w	pc, [sp], #4
    ac02:	bf00      	nop
    ac04:	000156ac 	.word	0x000156ac

0000ac08 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    ac08:	b500      	push	{lr}
    ac0a:	b085      	sub	sp, #20
    ac0c:	9001      	str	r0, [sp, #4]
    ac0e:	4608      	mov	r0, r1
    ac10:	4611      	mov	r1, r2
    ac12:	461a      	mov	r2, r3
    ac14:	4603      	mov	r3, r0
    ac16:	f88d 3003 	strb.w	r3, [sp, #3]
    ac1a:	460b      	mov	r3, r1
    ac1c:	f88d 3002 	strb.w	r3, [sp, #2]
    ac20:	4613      	mov	r3, r2
    ac22:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ac26:	4a0f      	ldr	r2, [pc, #60]	; (ac64 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    ac28:	9b01      	ldr	r3, [sp, #4]
    ac2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac2e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ac30:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ac34:	2201      	movs	r2, #1
    ac36:	fa02 f303 	lsl.w	r3, r2, r3
    ac3a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    ac3c:	9b02      	ldr	r3, [sp, #8]
    ac3e:	b2db      	uxtb	r3, r3
    ac40:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    ac42:	f005 f93f 	bl	fec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ac46:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ac4a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ac4e:	9a02      	ldr	r2, [sp, #8]
    ac50:	9803      	ldr	r0, [sp, #12]
    ac52:	f7ff fc89 	bl	a568 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    ac56:	f005 f961 	bl	ff1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    ac5a:	bf00      	nop
    ac5c:	b005      	add	sp, #20
    ac5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac62:	bf00      	nop
    ac64:	000156ac 	.word	0x000156ac

0000ac68 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    ac68:	b500      	push	{lr}
    ac6a:	b085      	sub	sp, #20
    ac6c:	9001      	str	r0, [sp, #4]
    ac6e:	4608      	mov	r0, r1
    ac70:	4611      	mov	r1, r2
    ac72:	461a      	mov	r2, r3
    ac74:	4603      	mov	r3, r0
    ac76:	f88d 3003 	strb.w	r3, [sp, #3]
    ac7a:	460b      	mov	r3, r1
    ac7c:	f88d 3002 	strb.w	r3, [sp, #2]
    ac80:	4613      	mov	r3, r2
    ac82:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ac86:	4a0f      	ldr	r2, [pc, #60]	; (acc4 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    ac88:	9b01      	ldr	r3, [sp, #4]
    ac8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac8e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ac90:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ac94:	2201      	movs	r2, #1
    ac96:	fa02 f303 	lsl.w	r3, r2, r3
    ac9a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    ac9c:	9b02      	ldr	r3, [sp, #8]
    ac9e:	021b      	lsls	r3, r3, #8
    aca0:	b29b      	uxth	r3, r3
    aca2:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    aca4:	f005 f960 	bl	ff68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    aca8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    acac:	f89d 1003 	ldrb.w	r1, [sp, #3]
    acb0:	9a02      	ldr	r2, [sp, #8]
    acb2:	9803      	ldr	r0, [sp, #12]
    acb4:	f7ff fc58 	bl	a568 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    acb8:	f005 f982 	bl	ffc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    acbc:	bf00      	nop
    acbe:	b005      	add	sp, #20
    acc0:	f85d fb04 	ldr.w	pc, [sp], #4
    acc4:	000156ac 	.word	0x000156ac

0000acc8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    acc8:	b410      	push	{r4}
    acca:	b085      	sub	sp, #20
    accc:	9001      	str	r0, [sp, #4]
    acce:	4608      	mov	r0, r1
    acd0:	4611      	mov	r1, r2
    acd2:	461a      	mov	r2, r3
    acd4:	4603      	mov	r3, r0
    acd6:	f88d 3003 	strb.w	r3, [sp, #3]
    acda:	460b      	mov	r3, r1
    acdc:	f88d 3002 	strb.w	r3, [sp, #2]
    ace0:	4613      	mov	r3, r2
    ace2:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ace6:	4a0c      	ldr	r2, [pc, #48]	; (ad18 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    ace8:	9b01      	ldr	r3, [sp, #4]
    acea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acee:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    acf0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    acf4:	f89d 4002 	ldrb.w	r4, [sp, #2]
    acf8:	f8bd 0000 	ldrh.w	r0, [sp]
    acfc:	9903      	ldr	r1, [sp, #12]
    acfe:	4613      	mov	r3, r2
    ad00:	009b      	lsls	r3, r3, #2
    ad02:	4413      	add	r3, r2
    ad04:	005b      	lsls	r3, r3, #1
    ad06:	4423      	add	r3, r4
    ad08:	3306      	adds	r3, #6
    ad0a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    ad0e:	bf00      	nop
    ad10:	b005      	add	sp, #20
    ad12:	f85d 4b04 	ldr.w	r4, [sp], #4
    ad16:	4770      	bx	lr
    ad18:	000156ac 	.word	0x000156ac

0000ad1c <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    ad1c:	b500      	push	{lr}
    ad1e:	b087      	sub	sp, #28
    ad20:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad22:	4a19      	ldr	r2, [pc, #100]	; (ad88 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    ad24:	9b01      	ldr	r3, [sp, #4]
    ad26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    ad2c:	2300      	movs	r3, #0
    ad2e:	f88d 300c 	strb.w	r3, [sp, #12]
    ad32:	2300      	movs	r3, #0
    ad34:	f88d 300d 	strb.w	r3, [sp, #13]
    ad38:	2300      	movs	r3, #0
    ad3a:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    ad3e:	f004 ffcb 	bl	fcd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ad42:	9804      	ldr	r0, [sp, #16]
    ad44:	f7ff fc4f 	bl	a5e6 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    ad48:	2100      	movs	r1, #0
    ad4a:	9804      	ldr	r0, [sp, #16]
    ad4c:	f7ff fc56 	bl	a5fc <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    ad50:	f004 ffee 	bl	fd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad54:	2300      	movs	r3, #0
    ad56:	f88d 3017 	strb.w	r3, [sp, #23]
    ad5a:	e00b      	b.n	ad74 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    ad5c:	aa03      	add	r2, sp, #12
    ad5e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad62:	4619      	mov	r1, r3
    ad64:	9804      	ldr	r0, [sp, #16]
    ad66:	f000 f899 	bl	ae9c <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad6e:	3301      	adds	r3, #1
    ad70:	f88d 3017 	strb.w	r3, [sp, #23]
    ad74:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad78:	2b01      	cmp	r3, #1
    ad7a:	d9ef      	bls.n	ad5c <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    ad7c:	bf00      	nop
    ad7e:	bf00      	nop
    ad80:	b007      	add	sp, #28
    ad82:	f85d fb04 	ldr.w	pc, [sp], #4
    ad86:	bf00      	nop
    ad88:	000156ac 	.word	0x000156ac

0000ad8c <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    ad8c:	b500      	push	{lr}
    ad8e:	b087      	sub	sp, #28
    ad90:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad92:	4a40      	ldr	r2, [pc, #256]	; (ae94 <Pdb_Adc_Ip_IRQHandler+0x108>)
    ad94:	9b01      	ldr	r3, [sp, #4]
    ad96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad9a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    ad9c:	4a3e      	ldr	r2, [pc, #248]	; (ae98 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ad9e:	9b01      	ldr	r3, [sp, #4]
    ada0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d04d      	beq.n	ae44 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    ada8:	9b04      	ldr	r3, [sp, #16]
    adaa:	681b      	ldr	r3, [r3, #0]
    adac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    adb0:	2b00      	cmp	r3, #0
    adb2:	d06a      	beq.n	ae8a <Pdb_Adc_Ip_IRQHandler+0xfe>
    adb4:	4a38      	ldr	r2, [pc, #224]	; (ae98 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    adb6:	9b01      	ldr	r3, [sp, #4]
    adb8:	00db      	lsls	r3, r3, #3
    adba:	4413      	add	r3, r2
    adbc:	685b      	ldr	r3, [r3, #4]
    adbe:	2b00      	cmp	r3, #0
    adc0:	d063      	beq.n	ae8a <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    adc2:	2300      	movs	r3, #0
    adc4:	f88d 3017 	strb.w	r3, [sp, #23]
    adc8:	e037      	b.n	ae3a <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    adca:	f89d 2017 	ldrb.w	r2, [sp, #23]
    adce:	9904      	ldr	r1, [sp, #16]
    add0:	4613      	mov	r3, r2
    add2:	009b      	lsls	r3, r3, #2
    add4:	4413      	add	r3, r2
    add6:	00db      	lsls	r3, r3, #3
    add8:	440b      	add	r3, r1
    adda:	3314      	adds	r3, #20
    addc:	681b      	ldr	r3, [r3, #0]
    adde:	b29b      	uxth	r3, r3
    ade0:	b2db      	uxtb	r3, r3
    ade2:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    ade6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    adea:	2b00      	cmp	r3, #0
    adec:	d020      	beq.n	ae30 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    adee:	f89d 2017 	ldrb.w	r2, [sp, #23]
    adf2:	9904      	ldr	r1, [sp, #16]
    adf4:	4613      	mov	r3, r2
    adf6:	009b      	lsls	r3, r3, #2
    adf8:	4413      	add	r3, r2
    adfa:	00db      	lsls	r3, r3, #3
    adfc:	440b      	add	r3, r1
    adfe:	3314      	adds	r3, #20
    ae00:	681b      	ldr	r3, [r3, #0]
    ae02:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ae06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ae0a:	9804      	ldr	r0, [sp, #16]
    ae0c:	4613      	mov	r3, r2
    ae0e:	009b      	lsls	r3, r3, #2
    ae10:	4413      	add	r3, r2
    ae12:	00db      	lsls	r3, r3, #3
    ae14:	4403      	add	r3, r0
    ae16:	3314      	adds	r3, #20
    ae18:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    ae1a:	4a1f      	ldr	r2, [pc, #124]	; (ae98 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ae1c:	9b01      	ldr	r3, [sp, #4]
    ae1e:	00db      	lsls	r3, r3, #3
    ae20:	4413      	add	r3, r2
    ae22:	685b      	ldr	r3, [r3, #4]
    ae24:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ae28:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ae2c:	4610      	mov	r0, r2
    ae2e:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ae30:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae34:	3301      	adds	r3, #1
    ae36:	f88d 3017 	strb.w	r3, [sp, #23]
    ae3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae3e:	2b01      	cmp	r3, #1
    ae40:	d9c3      	bls.n	adca <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ae42:	e022      	b.n	ae8a <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ae44:	2300      	movs	r3, #0
    ae46:	f88d 3017 	strb.w	r3, [sp, #23]
    ae4a:	e01a      	b.n	ae82 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ae4c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ae50:	9904      	ldr	r1, [sp, #16]
    ae52:	4613      	mov	r3, r2
    ae54:	009b      	lsls	r3, r3, #2
    ae56:	4413      	add	r3, r2
    ae58:	00db      	lsls	r3, r3, #3
    ae5a:	440b      	add	r3, r1
    ae5c:	3314      	adds	r3, #20
    ae5e:	681b      	ldr	r3, [r3, #0]
    ae60:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ae64:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ae68:	9804      	ldr	r0, [sp, #16]
    ae6a:	4613      	mov	r3, r2
    ae6c:	009b      	lsls	r3, r3, #2
    ae6e:	4413      	add	r3, r2
    ae70:	00db      	lsls	r3, r3, #3
    ae72:	4403      	add	r3, r0
    ae74:	3314      	adds	r3, #20
    ae76:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ae78:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae7c:	3301      	adds	r3, #1
    ae7e:	f88d 3017 	strb.w	r3, [sp, #23]
    ae82:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ae86:	2b01      	cmp	r3, #1
    ae88:	d9e0      	bls.n	ae4c <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    ae8a:	bf00      	nop
    ae8c:	b007      	add	sp, #28
    ae8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae92:	bf00      	nop
    ae94:	000156ac 	.word	0x000156ac
    ae98:	1fff8df0 	.word	0x1fff8df0

0000ae9c <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    ae9c:	b500      	push	{lr}
    ae9e:	b085      	sub	sp, #20
    aea0:	9003      	str	r0, [sp, #12]
    aea2:	460b      	mov	r3, r1
    aea4:	9201      	str	r2, [sp, #4]
    aea6:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    aeaa:	f005 f8af 	bl	1000c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    aeae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aeb2:	9a01      	ldr	r2, [sp, #4]
    aeb4:	4619      	mov	r1, r3
    aeb6:	9803      	ldr	r0, [sp, #12]
    aeb8:	f7ff fbb9 	bl	a62e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    aebc:	f005 f8d2 	bl	10064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    aec0:	f005 f948 	bl	10154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    aec4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aec8:	22ff      	movs	r2, #255	; 0xff
    aeca:	4619      	mov	r1, r3
    aecc:	9803      	ldr	r0, [sp, #12]
    aece:	f7ff fbe6 	bl	a69e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    aed2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    aed6:	9903      	ldr	r1, [sp, #12]
    aed8:	4613      	mov	r3, r2
    aeda:	009b      	lsls	r3, r3, #2
    aedc:	4413      	add	r3, r2
    aede:	00db      	lsls	r3, r3, #3
    aee0:	440b      	add	r3, r1
    aee2:	3314      	adds	r3, #20
    aee4:	681b      	ldr	r3, [r3, #0]
    aee6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    aeea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    aeee:	9803      	ldr	r0, [sp, #12]
    aef0:	4613      	mov	r3, r2
    aef2:	009b      	lsls	r3, r3, #2
    aef4:	4413      	add	r3, r2
    aef6:	00db      	lsls	r3, r3, #3
    aef8:	4403      	add	r3, r0
    aefa:	3314      	adds	r3, #20
    aefc:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    aefe:	f005 f955 	bl	101ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    af02:	bf00      	nop
    af04:	b005      	add	sp, #20
    af06:	f85d fb04 	ldr.w	pc, [sp], #4
    af0a:	bf00      	nop

0000af0c <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    af0c:	b082      	sub	sp, #8
    af0e:	9001      	str	r0, [sp, #4]
    af10:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    af12:	9b01      	ldr	r3, [sp, #4]
    af14:	681b      	ldr	r3, [r3, #0]
    af16:	f023 0207 	bic.w	r2, r3, #7
    af1a:	9b00      	ldr	r3, [sp, #0]
    af1c:	f003 0307 	and.w	r3, r3, #7
    af20:	431a      	orrs	r2, r3
    af22:	9b01      	ldr	r3, [sp, #4]
    af24:	601a      	str	r2, [r3, #0]
}
    af26:	bf00      	nop
    af28:	b002      	add	sp, #8
    af2a:	4770      	bx	lr

0000af2c <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    af2c:	b082      	sub	sp, #8
    af2e:	9001      	str	r0, [sp, #4]
    af30:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    af32:	9b01      	ldr	r3, [sp, #4]
    af34:	681b      	ldr	r3, [r3, #0]
    af36:	f023 0218 	bic.w	r2, r3, #24
    af3a:	9b00      	ldr	r3, [sp, #0]
    af3c:	00db      	lsls	r3, r3, #3
    af3e:	f003 0318 	and.w	r3, r3, #24
    af42:	431a      	orrs	r2, r3
    af44:	9b01      	ldr	r3, [sp, #4]
    af46:	601a      	str	r2, [r3, #0]
}
    af48:	bf00      	nop
    af4a:	b002      	add	sp, #8
    af4c:	4770      	bx	lr

0000af4e <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    af4e:	b082      	sub	sp, #8
    af50:	9001      	str	r0, [sp, #4]
    af52:	460b      	mov	r3, r1
    af54:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    af58:	9b01      	ldr	r3, [sp, #4]
    af5a:	681b      	ldr	r3, [r3, #0]
    af5c:	f023 0320 	bic.w	r3, r3, #32
    af60:	f89d 2003 	ldrb.w	r2, [sp, #3]
    af64:	2a00      	cmp	r2, #0
    af66:	d001      	beq.n	af6c <Ftm_Pwm_Ip_SetCpwms+0x1e>
    af68:	2220      	movs	r2, #32
    af6a:	e000      	b.n	af6e <Ftm_Pwm_Ip_SetCpwms+0x20>
    af6c:	2200      	movs	r2, #0
    af6e:	431a      	orrs	r2, r3
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	601a      	str	r2, [r3, #0]
}
    af74:	bf00      	nop
    af76:	b002      	add	sp, #8
    af78:	4770      	bx	lr

0000af7a <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    af7a:	b082      	sub	sp, #8
    af7c:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    af7e:	9b01      	ldr	r3, [sp, #4]
    af80:	681b      	ldr	r3, [r3, #0]
    af82:	f003 0320 	and.w	r3, r3, #32
    af86:	2b00      	cmp	r3, #0
    af88:	bf14      	ite	ne
    af8a:	2301      	movne	r3, #1
    af8c:	2300      	moveq	r3, #0
    af8e:	b2db      	uxtb	r3, r3
}
    af90:	4618      	mov	r0, r3
    af92:	b002      	add	sp, #8
    af94:	4770      	bx	lr

0000af96 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    af96:	b082      	sub	sp, #8
    af98:	9001      	str	r0, [sp, #4]
    af9a:	460b      	mov	r3, r1
    af9c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    afa0:	9b01      	ldr	r3, [sp, #4]
    afa2:	681b      	ldr	r3, [r3, #0]
    afa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    afa8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    afac:	2a00      	cmp	r2, #0
    afae:	d002      	beq.n	afb6 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    afb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    afb4:	e000      	b.n	afb8 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    afb6:	2200      	movs	r2, #0
    afb8:	431a      	orrs	r2, r3
    afba:	9b01      	ldr	r3, [sp, #4]
    afbc:	601a      	str	r2, [r3, #0]
}
    afbe:	bf00      	nop
    afc0:	b002      	add	sp, #8
    afc2:	4770      	bx	lr

0000afc4 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    afc4:	b082      	sub	sp, #8
    afc6:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    afc8:	9b01      	ldr	r3, [sp, #4]
    afca:	681b      	ldr	r3, [r3, #0]
    afcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    afd0:	9b01      	ldr	r3, [sp, #4]
    afd2:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    afd4:	bf00      	nop
    afd6:	b002      	add	sp, #8
    afd8:	4770      	bx	lr

0000afda <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    afda:	b082      	sub	sp, #8
    afdc:	9001      	str	r0, [sp, #4]
    afde:	460b      	mov	r3, r1
    afe0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    afe4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    afe8:	3310      	adds	r3, #16
    afea:	2201      	movs	r2, #1
    afec:	409a      	lsls	r2, r3
    afee:	9b01      	ldr	r3, [sp, #4]
    aff0:	681b      	ldr	r3, [r3, #0]
    aff2:	431a      	orrs	r2, r3
    aff4:	9b01      	ldr	r3, [sp, #4]
    aff6:	601a      	str	r2, [r3, #0]
}
    aff8:	bf00      	nop
    affa:	b002      	add	sp, #8
    affc:	4770      	bx	lr

0000affe <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    affe:	b082      	sub	sp, #8
    b000:	9001      	str	r0, [sp, #4]
    b002:	460b      	mov	r3, r1
    b004:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    b008:	9b01      	ldr	r3, [sp, #4]
    b00a:	685b      	ldr	r3, [r3, #4]
    b00c:	0c1b      	lsrs	r3, r3, #16
    b00e:	041b      	lsls	r3, r3, #16
    b010:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    b014:	431a      	orrs	r2, r3
    b016:	9b01      	ldr	r3, [sp, #4]
    b018:	605a      	str	r2, [r3, #4]
}
    b01a:	bf00      	nop
    b01c:	b002      	add	sp, #8
    b01e:	4770      	bx	lr

0000b020 <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    b020:	b082      	sub	sp, #8
    b022:	9001      	str	r0, [sp, #4]
    b024:	460b      	mov	r3, r1
    b026:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    b02a:	9b01      	ldr	r3, [sp, #4]
    b02c:	689b      	ldr	r3, [r3, #8]
    b02e:	0c1b      	lsrs	r3, r3, #16
    b030:	041b      	lsls	r3, r3, #16
    b032:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    b036:	431a      	orrs	r2, r3
    b038:	9b01      	ldr	r3, [sp, #4]
    b03a:	609a      	str	r2, [r3, #8]
}
    b03c:	bf00      	nop
    b03e:	b002      	add	sp, #8
    b040:	4770      	bx	lr

0000b042 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    b042:	b084      	sub	sp, #16
    b044:	9001      	str	r0, [sp, #4]
    b046:	460b      	mov	r3, r1
    b048:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    b04c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b050:	9a01      	ldr	r2, [sp, #4]
    b052:	3301      	adds	r3, #1
    b054:	00db      	lsls	r3, r3, #3
    b056:	4413      	add	r3, r2
    b058:	685b      	ldr	r3, [r3, #4]
    b05a:	089b      	lsrs	r3, r3, #2
    b05c:	b2db      	uxtb	r3, r3
    b05e:	f003 0301 	and.w	r3, r3, #1
    b062:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    b066:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b06a:	9a01      	ldr	r2, [sp, #4]
    b06c:	3301      	adds	r3, #1
    b06e:	00db      	lsls	r3, r3, #3
    b070:	4413      	add	r3, r2
    b072:	685b      	ldr	r3, [r3, #4]
    b074:	08db      	lsrs	r3, r3, #3
    b076:	b2db      	uxtb	r3, r3
    b078:	005b      	lsls	r3, r3, #1
    b07a:	b2db      	uxtb	r3, r3
    b07c:	f003 0302 	and.w	r3, r3, #2
    b080:	b2da      	uxtb	r2, r3
    b082:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b086:	4313      	orrs	r3, r2
    b088:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    b08c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b090:	4618      	mov	r0, r3
    b092:	b004      	add	sp, #16
    b094:	4770      	bx	lr

0000b096 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    b096:	b086      	sub	sp, #24
    b098:	9003      	str	r0, [sp, #12]
    b09a:	460b      	mov	r3, r1
    b09c:	9201      	str	r2, [sp, #4]
    b09e:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    b0a2:	9b01      	ldr	r3, [sp, #4]
    b0a4:	009b      	lsls	r3, r3, #2
    b0a6:	f003 0304 	and.w	r3, r3, #4
    b0aa:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    b0ac:	9b01      	ldr	r3, [sp, #4]
    b0ae:	009b      	lsls	r3, r3, #2
    b0b0:	f003 0308 	and.w	r3, r3, #8
    b0b4:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    b0b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0ba:	9a03      	ldr	r2, [sp, #12]
    b0bc:	3301      	adds	r3, #1
    b0be:	00db      	lsls	r3, r3, #3
    b0c0:	4413      	add	r3, r2
    b0c2:	685b      	ldr	r3, [r3, #4]
    b0c4:	f023 0104 	bic.w	r1, r3, #4
    b0c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0cc:	9a05      	ldr	r2, [sp, #20]
    b0ce:	430a      	orrs	r2, r1
    b0d0:	9903      	ldr	r1, [sp, #12]
    b0d2:	3301      	adds	r3, #1
    b0d4:	00db      	lsls	r3, r3, #3
    b0d6:	440b      	add	r3, r1
    b0d8:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    b0da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0de:	9a03      	ldr	r2, [sp, #12]
    b0e0:	3301      	adds	r3, #1
    b0e2:	00db      	lsls	r3, r3, #3
    b0e4:	4413      	add	r3, r2
    b0e6:	685b      	ldr	r3, [r3, #4]
    b0e8:	f023 0108 	bic.w	r1, r3, #8
    b0ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0f0:	9a04      	ldr	r2, [sp, #16]
    b0f2:	430a      	orrs	r2, r1
    b0f4:	9903      	ldr	r1, [sp, #12]
    b0f6:	3301      	adds	r3, #1
    b0f8:	00db      	lsls	r3, r3, #3
    b0fa:	440b      	add	r3, r1
    b0fc:	605a      	str	r2, [r3, #4]
}
    b0fe:	bf00      	nop
    b100:	b006      	add	sp, #24
    b102:	4770      	bx	lr

0000b104 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    b104:	b086      	sub	sp, #24
    b106:	9003      	str	r0, [sp, #12]
    b108:	460b      	mov	r3, r1
    b10a:	9201      	str	r2, [sp, #4]
    b10c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    b110:	9b01      	ldr	r3, [sp, #4]
    b112:	009b      	lsls	r3, r3, #2
    b114:	f003 0310 	and.w	r3, r3, #16
    b118:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    b11a:	9b01      	ldr	r3, [sp, #4]
    b11c:	009b      	lsls	r3, r3, #2
    b11e:	f003 0320 	and.w	r3, r3, #32
    b122:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    b124:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b128:	9a03      	ldr	r2, [sp, #12]
    b12a:	3301      	adds	r3, #1
    b12c:	00db      	lsls	r3, r3, #3
    b12e:	4413      	add	r3, r2
    b130:	685b      	ldr	r3, [r3, #4]
    b132:	f023 0110 	bic.w	r1, r3, #16
    b136:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b13a:	9a05      	ldr	r2, [sp, #20]
    b13c:	430a      	orrs	r2, r1
    b13e:	9903      	ldr	r1, [sp, #12]
    b140:	3301      	adds	r3, #1
    b142:	00db      	lsls	r3, r3, #3
    b144:	440b      	add	r3, r1
    b146:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    b148:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b14c:	9a03      	ldr	r2, [sp, #12]
    b14e:	3301      	adds	r3, #1
    b150:	00db      	lsls	r3, r3, #3
    b152:	4413      	add	r3, r2
    b154:	685b      	ldr	r3, [r3, #4]
    b156:	f023 0120 	bic.w	r1, r3, #32
    b15a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b15e:	9a04      	ldr	r2, [sp, #16]
    b160:	430a      	orrs	r2, r1
    b162:	9903      	ldr	r1, [sp, #12]
    b164:	3301      	adds	r3, #1
    b166:	00db      	lsls	r3, r3, #3
    b168:	440b      	add	r3, r1
    b16a:	605a      	str	r2, [r3, #4]
}
    b16c:	bf00      	nop
    b16e:	b006      	add	sp, #24
    b170:	4770      	bx	lr

0000b172 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    b172:	b084      	sub	sp, #16
    b174:	9001      	str	r0, [sp, #4]
    b176:	460b      	mov	r3, r1
    b178:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    b17c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b180:	9a01      	ldr	r2, [sp, #4]
    b182:	3301      	adds	r3, #1
    b184:	00db      	lsls	r3, r3, #3
    b186:	4413      	add	r3, r2
    b188:	685b      	ldr	r3, [r3, #4]
    b18a:	091b      	lsrs	r3, r3, #4
    b18c:	b2db      	uxtb	r3, r3
    b18e:	f003 0301 	and.w	r3, r3, #1
    b192:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    b196:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b19a:	9a01      	ldr	r2, [sp, #4]
    b19c:	3301      	adds	r3, #1
    b19e:	00db      	lsls	r3, r3, #3
    b1a0:	4413      	add	r3, r2
    b1a2:	685b      	ldr	r3, [r3, #4]
    b1a4:	095b      	lsrs	r3, r3, #5
    b1a6:	b2db      	uxtb	r3, r3
    b1a8:	005b      	lsls	r3, r3, #1
    b1aa:	b2db      	uxtb	r3, r3
    b1ac:	f003 0302 	and.w	r3, r3, #2
    b1b0:	b2da      	uxtb	r2, r3
    b1b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b1b6:	4313      	orrs	r3, r2
    b1b8:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    b1bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b1c0:	4618      	mov	r0, r3
    b1c2:	b004      	add	sp, #16
    b1c4:	4770      	bx	lr

0000b1c6 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    b1c6:	b082      	sub	sp, #8
    b1c8:	9001      	str	r0, [sp, #4]
    b1ca:	460b      	mov	r3, r1
    b1cc:	f88d 3003 	strb.w	r3, [sp, #3]
    b1d0:	4613      	mov	r3, r2
    b1d2:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    b1d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b1da:	9a01      	ldr	r2, [sp, #4]
    b1dc:	3301      	adds	r3, #1
    b1de:	00db      	lsls	r3, r3, #3
    b1e0:	4413      	add	r3, r2
    b1e2:	685b      	ldr	r3, [r3, #4]
    b1e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    b1e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d001      	beq.n	b1f4 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    b1f0:	2140      	movs	r1, #64	; 0x40
    b1f2:	e000      	b.n	b1f6 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    b1f4:	2100      	movs	r1, #0
    b1f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b1fa:	430a      	orrs	r2, r1
    b1fc:	9901      	ldr	r1, [sp, #4]
    b1fe:	3301      	adds	r3, #1
    b200:	00db      	lsls	r3, r3, #3
    b202:	440b      	add	r3, r1
    b204:	605a      	str	r2, [r3, #4]
}
    b206:	bf00      	nop
    b208:	b002      	add	sp, #8
    b20a:	4770      	bx	lr

0000b20c <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    b20c:	b082      	sub	sp, #8
    b20e:	9001      	str	r0, [sp, #4]
    b210:	460b      	mov	r3, r1
    b212:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    b216:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b21a:	9a01      	ldr	r2, [sp, #4]
    b21c:	3301      	adds	r3, #1
    b21e:	00db      	lsls	r3, r3, #3
    b220:	4413      	add	r3, r2
    b222:	685a      	ldr	r2, [r3, #4]
    b224:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b22c:	9901      	ldr	r1, [sp, #4]
    b22e:	3301      	adds	r3, #1
    b230:	00db      	lsls	r3, r3, #3
    b232:	440b      	add	r3, r1
    b234:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    b236:	bf00      	nop
    b238:	b002      	add	sp, #8
    b23a:	4770      	bx	lr

0000b23c <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    b23c:	b082      	sub	sp, #8
    b23e:	9001      	str	r0, [sp, #4]
    b240:	460b      	mov	r3, r1
    b242:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    b246:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b24a:	9a01      	ldr	r2, [sp, #4]
    b24c:	3301      	adds	r3, #1
    b24e:	00db      	lsls	r3, r3, #3
    b250:	4413      	add	r3, r2
    b252:	685b      	ldr	r3, [r3, #4]
    b254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b258:	2b00      	cmp	r3, #0
    b25a:	bf14      	ite	ne
    b25c:	2301      	movne	r3, #1
    b25e:	2300      	moveq	r3, #0
    b260:	b2db      	uxtb	r3, r3
}
    b262:	4618      	mov	r0, r3
    b264:	b002      	add	sp, #8
    b266:	4770      	bx	lr

0000b268 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    b268:	b082      	sub	sp, #8
    b26a:	9001      	str	r0, [sp, #4]
    b26c:	460b      	mov	r3, r1
    b26e:	f88d 3003 	strb.w	r3, [sp, #3]
    b272:	4613      	mov	r3, r2
    b274:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    b278:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b27c:	f8bd 2000 	ldrh.w	r2, [sp]
    b280:	9901      	ldr	r1, [sp, #4]
    b282:	3301      	adds	r3, #1
    b284:	00db      	lsls	r3, r3, #3
    b286:	440b      	add	r3, r1
    b288:	609a      	str	r2, [r3, #8]
}
    b28a:	bf00      	nop
    b28c:	b002      	add	sp, #8
    b28e:	4770      	bx	lr

0000b290 <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    b290:	b082      	sub	sp, #8
    b292:	9001      	str	r0, [sp, #4]
    b294:	460b      	mov	r3, r1
    b296:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    b29a:	9b01      	ldr	r3, [sp, #4]
    b29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b29e:	0c1b      	lsrs	r3, r3, #16
    b2a0:	041b      	lsls	r3, r3, #16
    b2a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    b2a6:	431a      	orrs	r2, r3
    b2a8:	9b01      	ldr	r3, [sp, #4]
    b2aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
    b2ac:	bf00      	nop
    b2ae:	b002      	add	sp, #8
    b2b0:	4770      	bx	lr

0000b2b2 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    b2b2:	b082      	sub	sp, #8
    b2b4:	9001      	str	r0, [sp, #4]
    b2b6:	460b      	mov	r3, r1
    b2b8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    b2bc:	9b01      	ldr	r3, [sp, #4]
    b2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b2c0:	f023 0301 	bic.w	r3, r3, #1
    b2c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b2c8:	2a00      	cmp	r2, #0
    b2ca:	d001      	beq.n	b2d0 <Ftm_Pwm_Ip_Enable+0x1e>
    b2cc:	2201      	movs	r2, #1
    b2ce:	e000      	b.n	b2d2 <Ftm_Pwm_Ip_Enable+0x20>
    b2d0:	2200      	movs	r2, #0
    b2d2:	431a      	orrs	r2, r3
    b2d4:	9b01      	ldr	r3, [sp, #4]
    b2d6:	655a      	str	r2, [r3, #84]	; 0x54
}
    b2d8:	bf00      	nop
    b2da:	b002      	add	sp, #8
    b2dc:	4770      	bx	lr

0000b2de <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    b2de:	b082      	sub	sp, #8
    b2e0:	9001      	str	r0, [sp, #4]
    b2e2:	460b      	mov	r3, r1
    b2e4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    b2e8:	9b01      	ldr	r3, [sp, #4]
    b2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b2ec:	f023 0308 	bic.w	r3, r3, #8
    b2f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b2f4:	2a00      	cmp	r2, #0
    b2f6:	d001      	beq.n	b2fc <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    b2f8:	2208      	movs	r2, #8
    b2fa:	e000      	b.n	b2fe <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    b2fc:	2200      	movs	r2, #0
    b2fe:	431a      	orrs	r2, r3
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	655a      	str	r2, [r3, #84]	; 0x54
}
    b304:	bf00      	nop
    b306:	b002      	add	sp, #8
    b308:	4770      	bx	lr

0000b30a <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    b30a:	b082      	sub	sp, #8
    b30c:	9001      	str	r0, [sp, #4]
    b30e:	460b      	mov	r3, r1
    b310:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    b314:	9b01      	ldr	r3, [sp, #4]
    b316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b318:	f023 0301 	bic.w	r3, r3, #1
    b31c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b320:	2a00      	cmp	r2, #0
    b322:	d001      	beq.n	b328 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    b324:	2201      	movs	r2, #1
    b326:	e000      	b.n	b32a <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    b328:	2200      	movs	r2, #0
    b32a:	431a      	orrs	r2, r3
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	659a      	str	r2, [r3, #88]	; 0x58
}
    b330:	bf00      	nop
    b332:	b002      	add	sp, #8
    b334:	4770      	bx	lr

0000b336 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    b336:	b082      	sub	sp, #8
    b338:	9001      	str	r0, [sp, #4]
    b33a:	460b      	mov	r3, r1
    b33c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    b340:	9b01      	ldr	r3, [sp, #4]
    b342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b344:	f023 0302 	bic.w	r3, r3, #2
    b348:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b34c:	2a00      	cmp	r2, #0
    b34e:	d001      	beq.n	b354 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    b350:	2202      	movs	r2, #2
    b352:	e000      	b.n	b356 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    b354:	2200      	movs	r2, #0
    b356:	431a      	orrs	r2, r3
    b358:	9b01      	ldr	r3, [sp, #4]
    b35a:	659a      	str	r2, [r3, #88]	; 0x58
}
    b35c:	bf00      	nop
    b35e:	b002      	add	sp, #8
    b360:	4770      	bx	lr

0000b362 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    b362:	b082      	sub	sp, #8
    b364:	9001      	str	r0, [sp, #4]
    b366:	460b      	mov	r3, r1
    b368:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    b36c:	9b01      	ldr	r3, [sp, #4]
    b36e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b370:	f023 0308 	bic.w	r3, r3, #8
    b374:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b378:	2a00      	cmp	r2, #0
    b37a:	d001      	beq.n	b380 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    b37c:	2208      	movs	r2, #8
    b37e:	e000      	b.n	b382 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    b380:	2200      	movs	r2, #0
    b382:	431a      	orrs	r2, r3
    b384:	9b01      	ldr	r3, [sp, #4]
    b386:	659a      	str	r2, [r3, #88]	; 0x58
}
    b388:	bf00      	nop
    b38a:	b002      	add	sp, #8
    b38c:	4770      	bx	lr

0000b38e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    b38e:	b082      	sub	sp, #8
    b390:	9001      	str	r0, [sp, #4]
    b392:	460b      	mov	r3, r1
    b394:	f88d 3003 	strb.w	r3, [sp, #3]
    b398:	4613      	mov	r3, r2
    b39a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b39e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d00a      	beq.n	b3bc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    b3a6:	9b01      	ldr	r3, [sp, #4]
    b3a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    b3aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b3ae:	2110      	movs	r1, #16
    b3b0:	fa01 f303 	lsl.w	r3, r1, r3
    b3b4:	431a      	orrs	r2, r3
    b3b6:	9b01      	ldr	r3, [sp, #4]
    b3b8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    b3ba:	e00a      	b.n	b3d2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    b3bc:	9b01      	ldr	r3, [sp, #4]
    b3be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    b3c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b3c4:	2110      	movs	r1, #16
    b3c6:	fa01 f303 	lsl.w	r3, r1, r3
    b3ca:	43db      	mvns	r3, r3
    b3cc:	401a      	ands	r2, r3
    b3ce:	9b01      	ldr	r3, [sp, #4]
    b3d0:	659a      	str	r2, [r3, #88]	; 0x58
}
    b3d2:	bf00      	nop
    b3d4:	b002      	add	sp, #8
    b3d6:	4770      	bx	lr

0000b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    b3d8:	b082      	sub	sp, #8
    b3da:	9001      	str	r0, [sp, #4]
    b3dc:	460b      	mov	r3, r1
    b3de:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    b3e2:	9b01      	ldr	r3, [sp, #4]
    b3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b3ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b3ee:	2a00      	cmp	r2, #0
    b3f0:	d001      	beq.n	b3f6 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    b3f2:	2280      	movs	r2, #128	; 0x80
    b3f4:	e000      	b.n	b3f8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    b3f6:	2200      	movs	r2, #0
    b3f8:	431a      	orrs	r2, r3
    b3fa:	9b01      	ldr	r3, [sp, #4]
    b3fc:	659a      	str	r2, [r3, #88]	; 0x58
}
    b3fe:	bf00      	nop
    b400:	b002      	add	sp, #8
    b402:	4770      	bx	lr

0000b404 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    b404:	b084      	sub	sp, #16
    b406:	9003      	str	r0, [sp, #12]
    b408:	460b      	mov	r3, r1
    b40a:	9201      	str	r2, [sp, #4]
    b40c:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    b410:	9b01      	ldr	r3, [sp, #4]
    b412:	2b01      	cmp	r3, #1
    b414:	d10a      	bne.n	b42c <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    b416:	9b03      	ldr	r3, [sp, #12]
    b418:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b41a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b41e:	2101      	movs	r1, #1
    b420:	fa01 f303 	lsl.w	r3, r1, r3
    b424:	431a      	orrs	r2, r3
    b426:	9b03      	ldr	r3, [sp, #12]
    b428:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    b42a:	e00a      	b.n	b442 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    b42c:	9b03      	ldr	r3, [sp, #12]
    b42e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b430:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b434:	2101      	movs	r1, #1
    b436:	fa01 f303 	lsl.w	r3, r1, r3
    b43a:	43db      	mvns	r3, r3
    b43c:	401a      	ands	r2, r3
    b43e:	9b03      	ldr	r3, [sp, #12]
    b440:	65da      	str	r2, [r3, #92]	; 0x5c
}
    b442:	bf00      	nop
    b444:	b004      	add	sp, #16
    b446:	4770      	bx	lr

0000b448 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    b448:	b082      	sub	sp, #8
    b44a:	9001      	str	r0, [sp, #4]
    b44c:	460b      	mov	r3, r1
    b44e:	f88d 3003 	strb.w	r3, [sp, #3]
    b452:	4613      	mov	r3, r2
    b454:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    b458:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d00a      	beq.n	b476 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    b460:	9b01      	ldr	r3, [sp, #4]
    b462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b464:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b468:	2101      	movs	r1, #1
    b46a:	fa01 f303 	lsl.w	r3, r1, r3
    b46e:	431a      	orrs	r2, r3
    b470:	9b01      	ldr	r3, [sp, #4]
    b472:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    b474:	e00a      	b.n	b48c <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b47a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b47e:	2101      	movs	r1, #1
    b480:	fa01 f303 	lsl.w	r3, r1, r3
    b484:	43db      	mvns	r3, r3
    b486:	401a      	ands	r2, r3
    b488:	9b01      	ldr	r3, [sp, #4]
    b48a:	661a      	str	r2, [r3, #96]	; 0x60
}
    b48c:	bf00      	nop
    b48e:	b002      	add	sp, #8
    b490:	4770      	bx	lr

0000b492 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    b492:	b082      	sub	sp, #8
    b494:	9001      	str	r0, [sp, #4]
    b496:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    b498:	9b01      	ldr	r3, [sp, #4]
    b49a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b49c:	9b00      	ldr	r3, [sp, #0]
    b49e:	43db      	mvns	r3, r3
    b4a0:	401a      	ands	r2, r3
    b4a2:	9b00      	ldr	r3, [sp, #0]
    b4a4:	431a      	orrs	r2, r3
    b4a6:	9b01      	ldr	r3, [sp, #4]
    b4a8:	661a      	str	r2, [r3, #96]	; 0x60
}
    b4aa:	bf00      	nop
    b4ac:	b002      	add	sp, #8
    b4ae:	4770      	bx	lr

0000b4b0 <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    b4b0:	b082      	sub	sp, #8
    b4b2:	9001      	str	r0, [sp, #4]
    b4b4:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    b4b6:	9b01      	ldr	r3, [sp, #4]
    b4b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b4ba:	9b00      	ldr	r3, [sp, #0]
    b4bc:	43db      	mvns	r3, r3
    b4be:	401a      	ands	r2, r3
    b4c0:	9b01      	ldr	r3, [sp, #4]
    b4c2:	661a      	str	r2, [r3, #96]	; 0x60
}
    b4c4:	bf00      	nop
    b4c6:	b002      	add	sp, #8
    b4c8:	4770      	bx	lr

0000b4ca <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    b4ca:	b082      	sub	sp, #8
    b4cc:	9001      	str	r0, [sp, #4]
    b4ce:	460b      	mov	r3, r1
    b4d0:	f88d 3003 	strb.w	r3, [sp, #3]
    b4d4:	4613      	mov	r3, r2
    b4d6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b4da:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d00b      	beq.n	b4fa <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b4e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b4ea:	00db      	lsls	r3, r3, #3
    b4ec:	2101      	movs	r1, #1
    b4ee:	fa01 f303 	lsl.w	r3, r1, r3
    b4f2:	431a      	orrs	r2, r3
    b4f4:	9b01      	ldr	r3, [sp, #4]
    b4f6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b4f8:	e00b      	b.n	b512 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b4fa:	9b01      	ldr	r3, [sp, #4]
    b4fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b4fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b502:	00db      	lsls	r3, r3, #3
    b504:	2101      	movs	r1, #1
    b506:	fa01 f303 	lsl.w	r3, r1, r3
    b50a:	43db      	mvns	r3, r3
    b50c:	401a      	ands	r2, r3
    b50e:	9b01      	ldr	r3, [sp, #4]
    b510:	665a      	str	r2, [r3, #100]	; 0x64
}
    b512:	bf00      	nop
    b514:	b002      	add	sp, #8
    b516:	4770      	bx	lr

0000b518 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    b518:	b082      	sub	sp, #8
    b51a:	9001      	str	r0, [sp, #4]
    b51c:	460b      	mov	r3, r1
    b51e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    b522:	9b01      	ldr	r3, [sp, #4]
    b524:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b526:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b52a:	00db      	lsls	r3, r3, #3
    b52c:	fa22 f303 	lsr.w	r3, r2, r3
    b530:	f003 0301 	and.w	r3, r3, #1
    b534:	2b00      	cmp	r3, #0
    b536:	bf14      	ite	ne
    b538:	2301      	movne	r3, #1
    b53a:	2300      	moveq	r3, #0
    b53c:	b2db      	uxtb	r3, r3
}
    b53e:	4618      	mov	r0, r3
    b540:	b002      	add	sp, #8
    b542:	4770      	bx	lr

0000b544 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    b544:	b082      	sub	sp, #8
    b546:	9001      	str	r0, [sp, #4]
    b548:	460b      	mov	r3, r1
    b54a:	f88d 3003 	strb.w	r3, [sp, #3]
    b54e:	4613      	mov	r3, r2
    b550:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    b554:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b558:	2b00      	cmp	r3, #0
    b55a:	d00b      	beq.n	b574 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b55c:	9b01      	ldr	r3, [sp, #4]
    b55e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b560:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b564:	00db      	lsls	r3, r3, #3
    b566:	2102      	movs	r1, #2
    b568:	fa01 f303 	lsl.w	r3, r1, r3
    b56c:	431a      	orrs	r2, r3
    b56e:	9b01      	ldr	r3, [sp, #4]
    b570:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b572:	e00b      	b.n	b58c <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b574:	9b01      	ldr	r3, [sp, #4]
    b576:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b578:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b57c:	00db      	lsls	r3, r3, #3
    b57e:	2102      	movs	r1, #2
    b580:	fa01 f303 	lsl.w	r3, r1, r3
    b584:	43db      	mvns	r3, r3
    b586:	401a      	ands	r2, r3
    b588:	9b01      	ldr	r3, [sp, #4]
    b58a:	665a      	str	r2, [r3, #100]	; 0x64
}
    b58c:	bf00      	nop
    b58e:	b002      	add	sp, #8
    b590:	4770      	bx	lr

0000b592 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    b592:	b082      	sub	sp, #8
    b594:	9001      	str	r0, [sp, #4]
    b596:	460b      	mov	r3, r1
    b598:	f88d 3003 	strb.w	r3, [sp, #3]
    b59c:	4613      	mov	r3, r2
    b59e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b5a2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b5a6:	2b00      	cmp	r3, #0
    b5a8:	d00b      	beq.n	b5c2 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b5aa:	9b01      	ldr	r3, [sp, #4]
    b5ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b5ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b5b2:	00db      	lsls	r3, r3, #3
    b5b4:	2110      	movs	r1, #16
    b5b6:	fa01 f303 	lsl.w	r3, r1, r3
    b5ba:	431a      	orrs	r2, r3
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b5c0:	e00b      	b.n	b5da <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b5c2:	9b01      	ldr	r3, [sp, #4]
    b5c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b5c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b5ca:	00db      	lsls	r3, r3, #3
    b5cc:	2110      	movs	r1, #16
    b5ce:	fa01 f303 	lsl.w	r3, r1, r3
    b5d2:	43db      	mvns	r3, r3
    b5d4:	401a      	ands	r2, r3
    b5d6:	9b01      	ldr	r3, [sp, #4]
    b5d8:	665a      	str	r2, [r3, #100]	; 0x64
}
    b5da:	bf00      	nop
    b5dc:	b002      	add	sp, #8
    b5de:	4770      	bx	lr

0000b5e0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    b5e0:	b082      	sub	sp, #8
    b5e2:	9001      	str	r0, [sp, #4]
    b5e4:	460b      	mov	r3, r1
    b5e6:	f88d 3003 	strb.w	r3, [sp, #3]
    b5ea:	4613      	mov	r3, r2
    b5ec:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b5f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b5f4:	2b00      	cmp	r3, #0
    b5f6:	d00b      	beq.n	b610 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b5f8:	9b01      	ldr	r3, [sp, #4]
    b5fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b5fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b600:	00db      	lsls	r3, r3, #3
    b602:	2120      	movs	r1, #32
    b604:	fa01 f303 	lsl.w	r3, r1, r3
    b608:	431a      	orrs	r2, r3
    b60a:	9b01      	ldr	r3, [sp, #4]
    b60c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b60e:	e00b      	b.n	b628 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b614:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b618:	00db      	lsls	r3, r3, #3
    b61a:	2120      	movs	r1, #32
    b61c:	fa01 f303 	lsl.w	r3, r1, r3
    b620:	43db      	mvns	r3, r3
    b622:	401a      	ands	r2, r3
    b624:	9b01      	ldr	r3, [sp, #4]
    b626:	665a      	str	r2, [r3, #100]	; 0x64
}
    b628:	bf00      	nop
    b62a:	b002      	add	sp, #8
    b62c:	4770      	bx	lr

0000b62e <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    b62e:	b082      	sub	sp, #8
    b630:	9001      	str	r0, [sp, #4]
    b632:	460b      	mov	r3, r1
    b634:	f88d 3003 	strb.w	r3, [sp, #3]
    b638:	4613      	mov	r3, r2
    b63a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b63e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b642:	2b00      	cmp	r3, #0
    b644:	d00b      	beq.n	b65e <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b646:	9b01      	ldr	r3, [sp, #4]
    b648:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b64a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b64e:	00db      	lsls	r3, r3, #3
    b650:	2180      	movs	r1, #128	; 0x80
    b652:	fa01 f303 	lsl.w	r3, r1, r3
    b656:	431a      	orrs	r2, r3
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b65c:	e00b      	b.n	b676 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b65e:	9b01      	ldr	r3, [sp, #4]
    b660:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b662:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b666:	00db      	lsls	r3, r3, #3
    b668:	2180      	movs	r1, #128	; 0x80
    b66a:	fa01 f303 	lsl.w	r3, r1, r3
    b66e:	43db      	mvns	r3, r3
    b670:	401a      	ands	r2, r3
    b672:	9b01      	ldr	r3, [sp, #4]
    b674:	665a      	str	r2, [r3, #100]	; 0x64
}
    b676:	bf00      	nop
    b678:	b002      	add	sp, #8
    b67a:	4770      	bx	lr

0000b67c <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    b67c:	b082      	sub	sp, #8
    b67e:	9001      	str	r0, [sp, #4]
    b680:	460b      	mov	r3, r1
    b682:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    b686:	9b01      	ldr	r3, [sp, #4]
    b688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b68a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    b68e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b696:	431a      	orrs	r2, r3
    b698:	9b01      	ldr	r3, [sp, #4]
    b69a:	669a      	str	r2, [r3, #104]	; 0x68
}
    b69c:	bf00      	nop
    b69e:	b002      	add	sp, #8
    b6a0:	4770      	bx	lr

0000b6a2 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    b6a2:	b082      	sub	sp, #8
    b6a4:	9001      	str	r0, [sp, #4]
    b6a6:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    b6a8:	9b01      	ldr	r3, [sp, #4]
    b6aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b6ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    b6b0:	9b00      	ldr	r3, [sp, #0]
    b6b2:	b2db      	uxtb	r3, r3
    b6b4:	019b      	lsls	r3, r3, #6
    b6b6:	b2db      	uxtb	r3, r3
    b6b8:	431a      	orrs	r2, r3
    b6ba:	9b01      	ldr	r3, [sp, #4]
    b6bc:	669a      	str	r2, [r3, #104]	; 0x68
}
    b6be:	bf00      	nop
    b6c0:	b002      	add	sp, #8
    b6c2:	4770      	bx	lr

0000b6c4 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    b6c4:	b082      	sub	sp, #8
    b6c6:	9001      	str	r0, [sp, #4]
    b6c8:	460b      	mov	r3, r1
    b6ca:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    b6ce:	9b01      	ldr	r3, [sp, #4]
    b6d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b6d2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    b6d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b6da:	041b      	lsls	r3, r3, #16
    b6dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b6e0:	431a      	orrs	r2, r3
    b6e2:	9b01      	ldr	r3, [sp, #4]
    b6e4:	669a      	str	r2, [r3, #104]	; 0x68
}
    b6e6:	bf00      	nop
    b6e8:	b002      	add	sp, #8
    b6ea:	4770      	bx	lr

0000b6ec <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    b6ec:	b082      	sub	sp, #8
    b6ee:	9001      	str	r0, [sp, #4]
    b6f0:	460b      	mov	r3, r1
    b6f2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    b6f6:	9b01      	ldr	r3, [sp, #4]
    b6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b6fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b702:	2a00      	cmp	r2, #0
    b704:	d001      	beq.n	b70a <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    b706:	2240      	movs	r2, #64	; 0x40
    b708:	e000      	b.n	b70c <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    b70a:	2200      	movs	r2, #0
    b70c:	431a      	orrs	r2, r3
    b70e:	9b01      	ldr	r3, [sp, #4]
    b710:	66da      	str	r2, [r3, #108]	; 0x6c
}
    b712:	bf00      	nop
    b714:	b002      	add	sp, #8
    b716:	4770      	bx	lr

0000b718 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    b718:	b082      	sub	sp, #8
    b71a:	9001      	str	r0, [sp, #4]
    b71c:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    b71e:	9b01      	ldr	r3, [sp, #4]
    b720:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b722:	9b00      	ldr	r3, [sp, #0]
    b724:	43db      	mvns	r3, r3
    b726:	401a      	ands	r2, r3
    b728:	9b01      	ldr	r3, [sp, #4]
    b72a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    b72c:	bf00      	nop
    b72e:	b002      	add	sp, #8
    b730:	4770      	bx	lr

0000b732 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    b732:	b082      	sub	sp, #8
    b734:	9001      	str	r0, [sp, #4]
    b736:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    b738:	9b01      	ldr	r3, [sp, #4]
    b73a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b73c:	9b00      	ldr	r3, [sp, #0]
    b73e:	43db      	mvns	r3, r3
    b740:	401a      	ands	r2, r3
    b742:	9b00      	ldr	r3, [sp, #0]
    b744:	431a      	orrs	r2, r3
    b746:	9b01      	ldr	r3, [sp, #4]
    b748:	66da      	str	r2, [r3, #108]	; 0x6c
}
    b74a:	bf00      	nop
    b74c:	b002      	add	sp, #8
    b74e:	4770      	bx	lr

0000b750 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    b750:	b084      	sub	sp, #16
    b752:	9003      	str	r0, [sp, #12]
    b754:	460b      	mov	r3, r1
    b756:	9201      	str	r2, [sp, #4]
    b758:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    b75c:	9b01      	ldr	r3, [sp, #4]
    b75e:	2b00      	cmp	r3, #0
    b760:	d10b      	bne.n	b77a <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    b762:	9b03      	ldr	r3, [sp, #12]
    b764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b766:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b76a:	2101      	movs	r1, #1
    b76c:	fa01 f303 	lsl.w	r3, r1, r3
    b770:	43db      	mvns	r3, r3
    b772:	401a      	ands	r2, r3
    b774:	9b03      	ldr	r3, [sp, #12]
    b776:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    b778:	e009      	b.n	b78e <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    b77a:	9b03      	ldr	r3, [sp, #12]
    b77c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b77e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b782:	2101      	movs	r1, #1
    b784:	fa01 f303 	lsl.w	r3, r1, r3
    b788:	431a      	orrs	r2, r3
    b78a:	9b03      	ldr	r3, [sp, #12]
    b78c:	671a      	str	r2, [r3, #112]	; 0x70
}
    b78e:	bf00      	nop
    b790:	b004      	add	sp, #16
    b792:	4770      	bx	lr

0000b794 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    b794:	b082      	sub	sp, #8
    b796:	9001      	str	r0, [sp, #4]
    b798:	460b      	mov	r3, r1
    b79a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    b79e:	9b01      	ldr	r3, [sp, #4]
    b7a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b7a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b7a6:	fa22 f303 	lsr.w	r3, r2, r3
    b7aa:	f003 0301 	and.w	r3, r3, #1
    b7ae:	2b01      	cmp	r3, #1
    b7b0:	bf0c      	ite	eq
    b7b2:	2301      	moveq	r3, #1
    b7b4:	2300      	movne	r3, #0
    b7b6:	b2db      	uxtb	r3, r3
}
    b7b8:	4618      	mov	r0, r3
    b7ba:	b002      	add	sp, #8
    b7bc:	4770      	bx	lr

0000b7be <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    b7be:	b082      	sub	sp, #8
    b7c0:	9001      	str	r0, [sp, #4]
    b7c2:	460b      	mov	r3, r1
    b7c4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    b7c8:	9b01      	ldr	r3, [sp, #4]
    b7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b7ce:	f023 021f 	bic.w	r2, r3, #31
    b7d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b7d6:	f003 031f 	and.w	r3, r3, #31
    b7da:	431a      	orrs	r2, r3
    b7dc:	9b01      	ldr	r3, [sp, #4]
    b7de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b7e2:	bf00      	nop
    b7e4:	b002      	add	sp, #8
    b7e6:	4770      	bx	lr

0000b7e8 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    b7e8:	b082      	sub	sp, #8
    b7ea:	9001      	str	r0, [sp, #4]
    b7ec:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    b7ee:	9b01      	ldr	r3, [sp, #4]
    b7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b7f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    b7f8:	9b00      	ldr	r3, [sp, #0]
    b7fa:	019b      	lsls	r3, r3, #6
    b7fc:	b2db      	uxtb	r3, r3
    b7fe:	431a      	orrs	r2, r3
    b800:	9b01      	ldr	r3, [sp, #4]
    b802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b806:	bf00      	nop
    b808:	b002      	add	sp, #8
    b80a:	4770      	bx	lr

0000b80c <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    b80c:	b082      	sub	sp, #8
    b80e:	9001      	str	r0, [sp, #4]
    b810:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    b812:	9b01      	ldr	r3, [sp, #4]
    b814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b818:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    b81c:	9b00      	ldr	r3, [sp, #0]
    b81e:	02db      	lsls	r3, r3, #11
    b820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b824:	431a      	orrs	r2, r3
    b826:	9b01      	ldr	r3, [sp, #4]
    b828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b82c:	bf00      	nop
    b82e:	b002      	add	sp, #8
    b830:	4770      	bx	lr

0000b832 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    b832:	b082      	sub	sp, #8
    b834:	9001      	str	r0, [sp, #4]
    b836:	460b      	mov	r3, r1
    b838:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    b83c:	9b01      	ldr	r3, [sp, #4]
    b83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b842:	f023 0301 	bic.w	r3, r3, #1
    b846:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b84a:	2a00      	cmp	r2, #0
    b84c:	d001      	beq.n	b852 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    b84e:	2201      	movs	r2, #1
    b850:	e000      	b.n	b854 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    b852:	2200      	movs	r2, #0
    b854:	431a      	orrs	r2, r3
    b856:	9b01      	ldr	r3, [sp, #4]
    b858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b85c:	bf00      	nop
    b85e:	b002      	add	sp, #8
    b860:	4770      	bx	lr

0000b862 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    b862:	b082      	sub	sp, #8
    b864:	9001      	str	r0, [sp, #4]
    b866:	460b      	mov	r3, r1
    b868:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    b86c:	9b01      	ldr	r3, [sp, #4]
    b86e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b872:	f023 0304 	bic.w	r3, r3, #4
    b876:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b87a:	2a00      	cmp	r2, #0
    b87c:	d001      	beq.n	b882 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    b87e:	2204      	movs	r2, #4
    b880:	e000      	b.n	b884 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    b882:	2200      	movs	r2, #0
    b884:	431a      	orrs	r2, r3
    b886:	9b01      	ldr	r3, [sp, #4]
    b888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b88c:	bf00      	nop
    b88e:	b002      	add	sp, #8
    b890:	4770      	bx	lr

0000b892 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    b892:	b082      	sub	sp, #8
    b894:	9001      	str	r0, [sp, #4]
    b896:	460b      	mov	r3, r1
    b898:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    b89c:	9b01      	ldr	r3, [sp, #4]
    b89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b8a2:	f023 0310 	bic.w	r3, r3, #16
    b8a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b8aa:	2a00      	cmp	r2, #0
    b8ac:	d001      	beq.n	b8b2 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    b8ae:	2210      	movs	r2, #16
    b8b0:	e000      	b.n	b8b4 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    b8b2:	2200      	movs	r2, #0
    b8b4:	431a      	orrs	r2, r3
    b8b6:	9b01      	ldr	r3, [sp, #4]
    b8b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b8bc:	bf00      	nop
    b8be:	b002      	add	sp, #8
    b8c0:	4770      	bx	lr

0000b8c2 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    b8c2:	b082      	sub	sp, #8
    b8c4:	9001      	str	r0, [sp, #4]
    b8c6:	460b      	mov	r3, r1
    b8c8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    b8cc:	9b01      	ldr	r3, [sp, #4]
    b8ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b8d2:	f023 0320 	bic.w	r3, r3, #32
    b8d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b8da:	2a00      	cmp	r2, #0
    b8dc:	d001      	beq.n	b8e2 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    b8de:	2220      	movs	r2, #32
    b8e0:	e000      	b.n	b8e4 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    b8e2:	2200      	movs	r2, #0
    b8e4:	431a      	orrs	r2, r3
    b8e6:	9b01      	ldr	r3, [sp, #4]
    b8e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b8ec:	bf00      	nop
    b8ee:	b002      	add	sp, #8
    b8f0:	4770      	bx	lr

0000b8f2 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    b8f2:	b082      	sub	sp, #8
    b8f4:	9001      	str	r0, [sp, #4]
    b8f6:	460b      	mov	r3, r1
    b8f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    b8fc:	9b01      	ldr	r3, [sp, #4]
    b8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b906:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b90a:	2a00      	cmp	r2, #0
    b90c:	d001      	beq.n	b912 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    b90e:	2280      	movs	r2, #128	; 0x80
    b910:	e000      	b.n	b914 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    b912:	2200      	movs	r2, #0
    b914:	431a      	orrs	r2, r3
    b916:	9b01      	ldr	r3, [sp, #4]
    b918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b91c:	bf00      	nop
    b91e:	b002      	add	sp, #8
    b920:	4770      	bx	lr

0000b922 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    b922:	b082      	sub	sp, #8
    b924:	9001      	str	r0, [sp, #4]
    b926:	460b      	mov	r3, r1
    b928:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    b92c:	9b01      	ldr	r3, [sp, #4]
    b92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b936:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b93a:	2a00      	cmp	r2, #0
    b93c:	d002      	beq.n	b944 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    b93e:	f44f 7280 	mov.w	r2, #256	; 0x100
    b942:	e000      	b.n	b946 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    b944:	2200      	movs	r2, #0
    b946:	431a      	orrs	r2, r3
    b948:	9b01      	ldr	r3, [sp, #4]
    b94a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b94e:	bf00      	nop
    b950:	b002      	add	sp, #8
    b952:	4770      	bx	lr

0000b954 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    b954:	b082      	sub	sp, #8
    b956:	9001      	str	r0, [sp, #4]
    b958:	460b      	mov	r3, r1
    b95a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    b95e:	9b01      	ldr	r3, [sp, #4]
    b960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    b968:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b96c:	2a00      	cmp	r2, #0
    b96e:	d002      	beq.n	b976 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    b970:	f44f 7200 	mov.w	r2, #512	; 0x200
    b974:	e000      	b.n	b978 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    b976:	2200      	movs	r2, #0
    b978:	431a      	orrs	r2, r3
    b97a:	9b01      	ldr	r3, [sp, #4]
    b97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b980:	bf00      	nop
    b982:	b002      	add	sp, #8
    b984:	4770      	bx	lr

0000b986 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b986:	b082      	sub	sp, #8
    b988:	9001      	str	r0, [sp, #4]
    b98a:	460b      	mov	r3, r1
    b98c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    b990:	9b01      	ldr	r3, [sp, #4]
    b992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b99a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b99e:	2a00      	cmp	r2, #0
    b9a0:	d002      	beq.n	b9a8 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    b9a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b9a6:	e000      	b.n	b9aa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    b9a8:	2200      	movs	r2, #0
    b9aa:	431a      	orrs	r2, r3
    b9ac:	9b01      	ldr	r3, [sp, #4]
    b9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b9b2:	bf00      	nop
    b9b4:	b002      	add	sp, #8
    b9b6:	4770      	bx	lr

0000b9b8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b9b8:	b082      	sub	sp, #8
    b9ba:	9001      	str	r0, [sp, #4]
    b9bc:	460b      	mov	r3, r1
    b9be:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    b9c2:	9b01      	ldr	r3, [sp, #4]
    b9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b9c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b9cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b9d0:	2a00      	cmp	r2, #0
    b9d2:	d002      	beq.n	b9da <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    b9d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b9d8:	e000      	b.n	b9dc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    b9da:	2200      	movs	r2, #0
    b9dc:	431a      	orrs	r2, r3
    b9de:	9b01      	ldr	r3, [sp, #4]
    b9e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b9e4:	bf00      	nop
    b9e6:	b002      	add	sp, #8
    b9e8:	4770      	bx	lr

0000b9ea <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b9ea:	b082      	sub	sp, #8
    b9ec:	9001      	str	r0, [sp, #4]
    b9ee:	460b      	mov	r3, r1
    b9f0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    b9f4:	9b01      	ldr	r3, [sp, #4]
    b9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b9fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b9fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba02:	2a00      	cmp	r2, #0
    ba04:	d002      	beq.n	ba0c <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    ba06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ba0a:	e000      	b.n	ba0e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    ba0c:	2200      	movs	r2, #0
    ba0e:	431a      	orrs	r2, r3
    ba10:	9b01      	ldr	r3, [sp, #4]
    ba12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ba16:	bf00      	nop
    ba18:	b002      	add	sp, #8
    ba1a:	4770      	bx	lr

0000ba1c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    ba1c:	b082      	sub	sp, #8
    ba1e:	9001      	str	r0, [sp, #4]
    ba20:	460b      	mov	r3, r1
    ba22:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    ba26:	9b01      	ldr	r3, [sp, #4]
    ba28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    ba2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ba30:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba34:	2a00      	cmp	r2, #0
    ba36:	d002      	beq.n	ba3e <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    ba38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ba3c:	e000      	b.n	ba40 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    ba3e:	2200      	movs	r2, #0
    ba40:	431a      	orrs	r2, r3
    ba42:	9b01      	ldr	r3, [sp, #4]
    ba44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ba48:	bf00      	nop
    ba4a:	b002      	add	sp, #8
    ba4c:	4770      	bx	lr

0000ba4e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    ba4e:	b082      	sub	sp, #8
    ba50:	9001      	str	r0, [sp, #4]
    ba52:	460b      	mov	r3, r1
    ba54:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    ba58:	9b01      	ldr	r3, [sp, #4]
    ba5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    ba5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    ba62:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba66:	2a00      	cmp	r2, #0
    ba68:	d002      	beq.n	ba70 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    ba6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ba6e:	e000      	b.n	ba72 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    ba70:	2200      	movs	r2, #0
    ba72:	431a      	orrs	r2, r3
    ba74:	9b01      	ldr	r3, [sp, #4]
    ba76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ba7a:	bf00      	nop
    ba7c:	b002      	add	sp, #8
    ba7e:	4770      	bx	lr

0000ba80 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    ba80:	b082      	sub	sp, #8
    ba82:	9001      	str	r0, [sp, #4]
    ba84:	460b      	mov	r3, r1
    ba86:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    ba8a:	9b01      	ldr	r3, [sp, #4]
    ba8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    ba90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    ba94:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba98:	2a00      	cmp	r2, #0
    ba9a:	d002      	beq.n	baa2 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    ba9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    baa0:	e000      	b.n	baa4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    baa2:	2200      	movs	r2, #0
    baa4:	431a      	orrs	r2, r3
    baa6:	9b01      	ldr	r3, [sp, #4]
    baa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    baac:	bf00      	nop
    baae:	b002      	add	sp, #8
    bab0:	4770      	bx	lr

0000bab2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    bab2:	b082      	sub	sp, #8
    bab4:	9001      	str	r0, [sp, #4]
    bab6:	460b      	mov	r3, r1
    bab8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    babc:	9b01      	ldr	r3, [sp, #4]
    babe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    bac2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    bac6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    baca:	2a00      	cmp	r2, #0
    bacc:	d002      	beq.n	bad4 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    bace:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    bad2:	e000      	b.n	bad6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    bad4:	2200      	movs	r2, #0
    bad6:	431a      	orrs	r2, r3
    bad8:	9b01      	ldr	r3, [sp, #4]
    bada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    bade:	bf00      	nop
    bae0:	b002      	add	sp, #8
    bae2:	4770      	bx	lr

0000bae4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    bae4:	b084      	sub	sp, #16
    bae6:	9001      	str	r0, [sp, #4]
    bae8:	460b      	mov	r3, r1
    baea:	f88d 3003 	strb.w	r3, [sp, #3]
    baee:	4613      	mov	r3, r2
    baf0:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    baf4:	9b01      	ldr	r3, [sp, #4]
    baf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    baf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bafc:	fa22 f303 	lsr.w	r3, r2, r3
    bb00:	b2db      	uxtb	r3, r3
    bb02:	f003 0301 	and.w	r3, r3, #1
    bb06:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    bb0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bb0e:	2b00      	cmp	r3, #0
    bb10:	bf14      	ite	ne
    bb12:	2301      	movne	r3, #1
    bb14:	2300      	moveq	r3, #0
    bb16:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    bb1a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    bb1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bb22:	429a      	cmp	r2, r3
    bb24:	d00d      	beq.n	bb42 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    bb26:	9b01      	ldr	r3, [sp, #4]
    bb28:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    bb2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb30:	3308      	adds	r3, #8
    bb32:	2101      	movs	r1, #1
    bb34:	fa01 f303 	lsl.w	r3, r1, r3
    bb38:	431a      	orrs	r2, r3
    bb3a:	9b01      	ldr	r3, [sp, #4]
    bb3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    bb40:	e00d      	b.n	bb5e <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    bb42:	9b01      	ldr	r3, [sp, #4]
    bb44:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    bb48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb4c:	3308      	adds	r3, #8
    bb4e:	2101      	movs	r1, #1
    bb50:	fa01 f303 	lsl.w	r3, r1, r3
    bb54:	43db      	mvns	r3, r3
    bb56:	401a      	ands	r2, r3
    bb58:	9b01      	ldr	r3, [sp, #4]
    bb5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bb5e:	bf00      	nop
    bb60:	b004      	add	sp, #16
    bb62:	4770      	bx	lr

0000bb64 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    bb64:	b082      	sub	sp, #8
    bb66:	9001      	str	r0, [sp, #4]
    bb68:	460b      	mov	r3, r1
    bb6a:	f88d 3003 	strb.w	r3, [sp, #3]
    bb6e:	4613      	mov	r3, r2
    bb70:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    bb74:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bb78:	2b00      	cmp	r3, #0
    bb7a:	d00c      	beq.n	bb96 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    bb7c:	9b01      	ldr	r3, [sp, #4]
    bb7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    bb82:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb86:	2101      	movs	r1, #1
    bb88:	fa01 f303 	lsl.w	r3, r1, r3
    bb8c:	431a      	orrs	r2, r3
    bb8e:	9b01      	ldr	r3, [sp, #4]
    bb90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    bb94:	e00c      	b.n	bbb0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    bb96:	9b01      	ldr	r3, [sp, #4]
    bb98:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    bb9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bba0:	2101      	movs	r1, #1
    bba2:	fa01 f303 	lsl.w	r3, r1, r3
    bba6:	43db      	mvns	r3, r3
    bba8:	401a      	ands	r2, r3
    bbaa:	9b01      	ldr	r3, [sp, #4]
    bbac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bbb0:	bf00      	nop
    bbb2:	b002      	add	sp, #8
    bbb4:	4770      	bx	lr

0000bbb6 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    bbb6:	b082      	sub	sp, #8
    bbb8:	9001      	str	r0, [sp, #4]
    bbba:	460b      	mov	r3, r1
    bbbc:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    bbc0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bbc4:	9b01      	ldr	r3, [sp, #4]
    bbc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bbca:	bf00      	nop
    bbcc:	b002      	add	sp, #8
    bbce:	4770      	bx	lr

0000bbd0 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    bbd0:	b082      	sub	sp, #8
    bbd2:	9001      	str	r0, [sp, #4]
    bbd4:	460b      	mov	r3, r1
    bbd6:	f88d 3003 	strb.w	r3, [sp, #3]
    bbda:	4613      	mov	r3, r2
    bbdc:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    bbe0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bbe4:	2b00      	cmp	r3, #0
    bbe6:	d00c      	beq.n	bc02 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    bbe8:	9b01      	ldr	r3, [sp, #4]
    bbea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    bbee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bbf2:	2101      	movs	r1, #1
    bbf4:	fa01 f303 	lsl.w	r3, r1, r3
    bbf8:	431a      	orrs	r2, r3
    bbfa:	9b01      	ldr	r3, [sp, #4]
    bbfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    bc00:	e00c      	b.n	bc1c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    bc02:	9b01      	ldr	r3, [sp, #4]
    bc04:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    bc08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bc0c:	2101      	movs	r1, #1
    bc0e:	fa01 f303 	lsl.w	r3, r1, r3
    bc12:	43db      	mvns	r3, r3
    bc14:	401a      	ands	r2, r3
    bc16:	9b01      	ldr	r3, [sp, #4]
    bc18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    bc1c:	bf00      	nop
    bc1e:	b002      	add	sp, #8
    bc20:	4770      	bx	lr

0000bc22 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    bc22:	b082      	sub	sp, #8
    bc24:	9001      	str	r0, [sp, #4]
    bc26:	460b      	mov	r3, r1
    bc28:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    bc2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bc30:	2b00      	cmp	r3, #0
    bc32:	d008      	beq.n	bc46 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    bc34:	9b01      	ldr	r3, [sp, #4]
    bc36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    bc3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    bc3e:	9b01      	ldr	r3, [sp, #4]
    bc40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    bc44:	e007      	b.n	bc56 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    bc46:	9b01      	ldr	r3, [sp, #4]
    bc48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    bc4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    bc50:	9b01      	ldr	r3, [sp, #4]
    bc52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    bc56:	bf00      	nop
    bc58:	b002      	add	sp, #8
    bc5a:	4770      	bx	lr

0000bc5c <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    bc5c:	b082      	sub	sp, #8
    bc5e:	9001      	str	r0, [sp, #4]
    bc60:	460b      	mov	r3, r1
    bc62:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    bc66:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bc6a:	9b01      	ldr	r3, [sp, #4]
    bc6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    bc70:	bf00      	nop
    bc72:	b002      	add	sp, #8
    bc74:	4770      	bx	lr

0000bc76 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bc76:	b082      	sub	sp, #8
    bc78:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    bc7a:	9b01      	ldr	r3, [sp, #4]
    bc7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    bc80:	b29b      	uxth	r3, r3
}
    bc82:	4618      	mov	r0, r3
    bc84:	b002      	add	sp, #8
    bc86:	4770      	bx	lr

0000bc88 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bc88:	b082      	sub	sp, #8
    bc8a:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    bc8c:	9b01      	ldr	r3, [sp, #4]
    bc8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    bc90:	b29b      	uxth	r3, r3
}
    bc92:	4618      	mov	r0, r3
    bc94:	b002      	add	sp, #8
    bc96:	4770      	bx	lr

0000bc98 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    bc98:	b500      	push	{lr}
    bc9a:	b085      	sub	sp, #20
    bc9c:	9001      	str	r0, [sp, #4]
    bc9e:	460b      	mov	r3, r1
    bca0:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    bca4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bca8:	085b      	lsrs	r3, r3, #1
    bcaa:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    bcb2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bcb6:	00db      	lsls	r3, r3, #3
    bcb8:	2101      	movs	r1, #1
    bcba:	fa01 f303 	lsl.w	r3, r1, r3
    bcbe:	401a      	ands	r2, r3
    bcc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bcc4:	00db      	lsls	r3, r3, #3
    bcc6:	fa22 f303 	lsr.w	r3, r2, r3
    bcca:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    bcce:	9b01      	ldr	r3, [sp, #4]
    bcd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    bcd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bcd6:	00db      	lsls	r3, r3, #3
    bcd8:	2180      	movs	r1, #128	; 0x80
    bcda:	fa01 f303 	lsl.w	r3, r1, r3
    bcde:	401a      	ands	r2, r3
    bce0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bce4:	00db      	lsls	r3, r3, #3
    bce6:	fa22 f303 	lsr.w	r3, r2, r3
    bcea:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    bcee:	f89d 3009 	ldrb.w	r3, [sp, #9]
    bcf2:	2b80      	cmp	r3, #128	; 0x80
    bcf4:	d101      	bne.n	bcfa <Ftm_Pwm_Ip_GetChannelMode+0x62>
    bcf6:	2301      	movs	r3, #1
    bcf8:	e000      	b.n	bcfc <Ftm_Pwm_Ip_GetChannelMode+0x64>
    bcfa:	2300      	movs	r3, #0
    bcfc:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    bd00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd04:	4619      	mov	r1, r3
    bd06:	9801      	ldr	r0, [sp, #4]
    bd08:	f7ff f99b 	bl	b042 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    bd0c:	4603      	mov	r3, r0
    bd0e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    bd12:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd16:	4619      	mov	r1, r3
    bd18:	9801      	ldr	r0, [sp, #4]
    bd1a:	f7ff fa2a 	bl	b172 <Ftm_Pwm_Ip_GetChnMode>
    bd1e:	4603      	mov	r3, r0
    bd20:	009b      	lsls	r3, r3, #2
    bd22:	b2da      	uxtb	r2, r3
    bd24:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bd28:	4313      	orrs	r3, r2
    bd2a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    bd2e:	9801      	ldr	r0, [sp, #4]
    bd30:	f7ff f923 	bl	af7a <Ftm_Pwm_Ip_GetCpwms>
    bd34:	4603      	mov	r3, r0
    bd36:	b2db      	uxtb	r3, r3
    bd38:	011b      	lsls	r3, r3, #4
    bd3a:	b2da      	uxtb	r2, r3
    bd3c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bd40:	4313      	orrs	r3, r2
    bd42:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    bd46:	f89d 300a 	ldrb.w	r3, [sp, #10]
    bd4a:	015b      	lsls	r3, r3, #5
    bd4c:	b2da      	uxtb	r2, r3
    bd4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bd52:	4313      	orrs	r3, r2
    bd54:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    bd58:	f89d 3009 	ldrb.w	r3, [sp, #9]
    bd5c:	019b      	lsls	r3, r3, #6
    bd5e:	b2da      	uxtb	r2, r3
    bd60:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bd64:	4313      	orrs	r3, r2
    bd66:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    bd6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bd6e:	2b62      	cmp	r3, #98	; 0x62
    bd70:	d055      	beq.n	be1e <Ftm_Pwm_Ip_GetChannelMode+0x186>
    bd72:	2b62      	cmp	r3, #98	; 0x62
    bd74:	dc59      	bgt.n	be2a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    bd76:	2b22      	cmp	r3, #34	; 0x22
    bd78:	dc3c      	bgt.n	bdf4 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    bd7a:	2b09      	cmp	r3, #9
    bd7c:	db55      	blt.n	be2a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    bd7e:	3b09      	subs	r3, #9
    bd80:	2b19      	cmp	r3, #25
    bd82:	d852      	bhi.n	be2a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    bd84:	a201      	add	r2, pc, #4	; (adr r2, bd8c <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd8a:	bf00      	nop
    bd8c:	0000be01 	.word	0x0000be01
    bd90:	0000bdfb 	.word	0x0000bdfb
    bd94:	0000be2b 	.word	0x0000be2b
    bd98:	0000be2b 	.word	0x0000be2b
    bd9c:	0000be2b 	.word	0x0000be2b
    bda0:	0000be2b 	.word	0x0000be2b
    bda4:	0000be2b 	.word	0x0000be2b
    bda8:	0000be2b 	.word	0x0000be2b
    bdac:	0000be0d 	.word	0x0000be0d
    bdb0:	0000be07 	.word	0x0000be07
    bdb4:	0000be2b 	.word	0x0000be2b
    bdb8:	0000be2b 	.word	0x0000be2b
    bdbc:	0000be2b 	.word	0x0000be2b
    bdc0:	0000be2b 	.word	0x0000be2b
    bdc4:	0000be2b 	.word	0x0000be2b
    bdc8:	0000be2b 	.word	0x0000be2b
    bdcc:	0000be2b 	.word	0x0000be2b
    bdd0:	0000be2b 	.word	0x0000be2b
    bdd4:	0000be2b 	.word	0x0000be2b
    bdd8:	0000be2b 	.word	0x0000be2b
    bddc:	0000be2b 	.word	0x0000be2b
    bde0:	0000be2b 	.word	0x0000be2b
    bde4:	0000be2b 	.word	0x0000be2b
    bde8:	0000be2b 	.word	0x0000be2b
    bdec:	0000be19 	.word	0x0000be19
    bdf0:	0000be13 	.word	0x0000be13
    bdf4:	2b61      	cmp	r3, #97	; 0x61
    bdf6:	d015      	beq.n	be24 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    bdf8:	e017      	b.n	be2a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    bdfa:	230a      	movs	r3, #10
    bdfc:	9303      	str	r3, [sp, #12]
            break;
    bdfe:	e017      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    be00:	2309      	movs	r3, #9
    be02:	9303      	str	r3, [sp, #12]
            break;
    be04:	e014      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    be06:	2312      	movs	r3, #18
    be08:	9303      	str	r3, [sp, #12]
            break;
    be0a:	e011      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    be0c:	2311      	movs	r3, #17
    be0e:	9303      	str	r3, [sp, #12]
            break;
    be10:	e00e      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    be12:	2322      	movs	r3, #34	; 0x22
    be14:	9303      	str	r3, [sp, #12]
            break;
    be16:	e00b      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    be18:	2321      	movs	r3, #33	; 0x21
    be1a:	9303      	str	r3, [sp, #12]
            break;
    be1c:	e008      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    be1e:	2362      	movs	r3, #98	; 0x62
    be20:	9303      	str	r3, [sp, #12]
            break;
    be22:	e005      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    be24:	2361      	movs	r3, #97	; 0x61
    be26:	9303      	str	r3, [sp, #12]
            break;
    be28:	e002      	b.n	be30 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    be2a:	23ff      	movs	r3, #255	; 0xff
    be2c:	9303      	str	r3, [sp, #12]
            break;
    be2e:	bf00      	nop
    }

    return ChMode; 
    be30:	9b03      	ldr	r3, [sp, #12]
}
    be32:	4618      	mov	r0, r3
    be34:	b005      	add	sp, #20
    be36:	f85d fb04 	ldr.w	pc, [sp], #4

0000be3a <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    be3a:	b082      	sub	sp, #8
    be3c:	9001      	str	r0, [sp, #4]
    be3e:	460b      	mov	r3, r1
    be40:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    be44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    be48:	2b00      	cmp	r3, #0
    be4a:	d006      	beq.n	be5a <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    be4c:	9b01      	ldr	r3, [sp, #4]
    be4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    be50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    be54:	9b01      	ldr	r3, [sp, #4]
    be56:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    be58:	e00b      	b.n	be72 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    be5a:	9b01      	ldr	r3, [sp, #4]
    be5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    be5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    be62:	2b00      	cmp	r3, #0
    be64:	d005      	beq.n	be72 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    be66:	9b01      	ldr	r3, [sp, #4]
    be68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    be6a:	f043 0204 	orr.w	r2, r3, #4
    be6e:	9b01      	ldr	r3, [sp, #4]
    be70:	655a      	str	r2, [r3, #84]	; 0x54
}
    be72:	bf00      	nop
    be74:	b002      	add	sp, #8
    be76:	4770      	bx	lr

0000be78 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    be78:	b500      	push	{lr}
    be7a:	b085      	sub	sp, #20
    be7c:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    be7e:	2100      	movs	r1, #0
    be80:	9801      	ldr	r0, [sp, #4]
    be82:	f7ff ffda 	bl	be3a <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    be86:	9b01      	ldr	r3, [sp, #4]
    be88:	681a      	ldr	r2, [r3, #0]
    be8a:	9b01      	ldr	r3, [sp, #4]
    be8c:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    be8e:	9b01      	ldr	r3, [sp, #4]
    be90:	2200      	movs	r2, #0
    be92:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    be94:	9b01      	ldr	r3, [sp, #4]
    be96:	2200      	movs	r2, #0
    be98:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    be9a:	9b01      	ldr	r3, [sp, #4]
    be9c:	2200      	movs	r2, #0
    be9e:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    bea0:	9b01      	ldr	r3, [sp, #4]
    bea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    bea8:	9b01      	ldr	r3, [sp, #4]
    beaa:	2204      	movs	r2, #4
    beac:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    beae:	9b01      	ldr	r3, [sp, #4]
    beb0:	2200      	movs	r2, #0
    beb2:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    beb4:	9b01      	ldr	r3, [sp, #4]
    beb6:	2200      	movs	r2, #0
    beb8:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    beba:	9b01      	ldr	r3, [sp, #4]
    bebc:	2200      	movs	r2, #0
    bebe:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    bec0:	9b01      	ldr	r3, [sp, #4]
    bec2:	2200      	movs	r2, #0
    bec4:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    bec6:	9b01      	ldr	r3, [sp, #4]
    bec8:	2200      	movs	r2, #0
    beca:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    becc:	9b01      	ldr	r3, [sp, #4]
    bece:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    bed4:	9b01      	ldr	r3, [sp, #4]
    bed6:	2200      	movs	r2, #0
    bed8:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    beda:	9b01      	ldr	r3, [sp, #4]
    bedc:	2200      	movs	r2, #0
    bede:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    bee0:	9b01      	ldr	r3, [sp, #4]
    bee2:	2200      	movs	r2, #0
    bee4:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    bee6:	9b01      	ldr	r3, [sp, #4]
    bee8:	2200      	movs	r2, #0
    beea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    beee:	9b01      	ldr	r3, [sp, #4]
    bef0:	2200      	movs	r2, #0
    bef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	2200      	movs	r2, #0
    befa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    befe:	9b01      	ldr	r3, [sp, #4]
    bf00:	2200      	movs	r2, #0
    bf02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    bf06:	9b01      	ldr	r3, [sp, #4]
    bf08:	2200      	movs	r2, #0
    bf0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    bf0e:	9b01      	ldr	r3, [sp, #4]
    bf10:	2200      	movs	r2, #0
    bf12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    bf16:	9b01      	ldr	r3, [sp, #4]
    bf18:	2200      	movs	r2, #0
    bf1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    bf1e:	2300      	movs	r3, #0
    bf20:	f88d 300f 	strb.w	r3, [sp, #15]
    bf24:	e014      	b.n	bf50 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    bf26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf2a:	9a01      	ldr	r2, [sp, #4]
    bf2c:	3301      	adds	r3, #1
    bf2e:	00db      	lsls	r3, r3, #3
    bf30:	4413      	add	r3, r2
    bf32:	2200      	movs	r2, #0
    bf34:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    bf36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf3a:	9a01      	ldr	r2, [sp, #4]
    bf3c:	3301      	adds	r3, #1
    bf3e:	00db      	lsls	r3, r3, #3
    bf40:	4413      	add	r3, r2
    bf42:	2200      	movs	r2, #0
    bf44:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    bf46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf4a:	3301      	adds	r3, #1
    bf4c:	f88d 300f 	strb.w	r3, [sp, #15]
    bf50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf54:	2b07      	cmp	r3, #7
    bf56:	d9e6      	bls.n	bf26 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    bf58:	bf00      	nop
    bf5a:	bf00      	nop
    bf5c:	b005      	add	sp, #20
    bf5e:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf62 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    bf62:	b084      	sub	sp, #16
    bf64:	9001      	str	r0, [sp, #4]
    bf66:	460b      	mov	r3, r1
    bf68:	f88d 3003 	strb.w	r3, [sp, #3]
    bf6c:	4613      	mov	r3, r2
    bf6e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    bf72:	2300      	movs	r3, #0
    bf74:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    bf76:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf7a:	2b01      	cmp	r3, #1
    bf7c:	d806      	bhi.n	bf8c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    bf7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf82:	2210      	movs	r2, #16
    bf84:	fa02 f303 	lsl.w	r3, r2, r3
    bf88:	9303      	str	r3, [sp, #12]
    bf8a:	e013      	b.n	bfb4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    bf8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf90:	2b05      	cmp	r3, #5
    bf92:	d807      	bhi.n	bfa4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    bf94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf98:	3b02      	subs	r3, #2
    bf9a:	2201      	movs	r2, #1
    bf9c:	fa02 f303 	lsl.w	r3, r2, r3
    bfa0:	9303      	str	r3, [sp, #12]
    bfa2:	e007      	b.n	bfb4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    bfa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bfa8:	3b06      	subs	r3, #6
    bfaa:	f44f 7280 	mov.w	r2, #256	; 0x100
    bfae:	fa02 f303 	lsl.w	r3, r2, r3
    bfb2:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    bfb4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bfb8:	2b00      	cmp	r3, #0
    bfba:	d006      	beq.n	bfca <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    bfbc:	9b01      	ldr	r3, [sp, #4]
    bfbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    bfc0:	9b03      	ldr	r3, [sp, #12]
    bfc2:	431a      	orrs	r2, r3
    bfc4:	9b01      	ldr	r3, [sp, #4]
    bfc6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    bfc8:	e006      	b.n	bfd8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    bfca:	9b01      	ldr	r3, [sp, #4]
    bfcc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    bfce:	9b03      	ldr	r3, [sp, #12]
    bfd0:	43db      	mvns	r3, r3
    bfd2:	401a      	ands	r2, r3
    bfd4:	9b01      	ldr	r3, [sp, #4]
    bfd6:	66da      	str	r2, [r3, #108]	; 0x6c
}
    bfd8:	bf00      	nop
    bfda:	b004      	add	sp, #16
    bfdc:	4770      	bx	lr

0000bfde <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    bfde:	b082      	sub	sp, #8
    bfe0:	9001      	str	r0, [sp, #4]
    bfe2:	9100      	str	r1, [sp, #0]
    bfe4:	9b00      	ldr	r3, [sp, #0]
    bfe6:	2b03      	cmp	r3, #3
    bfe8:	d82a      	bhi.n	c040 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    bfea:	a201      	add	r2, pc, #4	; (adr r2, bff0 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bff0:	0000c001 	.word	0x0000c001
    bff4:	0000c00f 	.word	0x0000c00f
    bff8:	0000c021 	.word	0x0000c021
    bffc:	0000c033 	.word	0x0000c033
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    c000:	9b01      	ldr	r3, [sp, #4]
    c002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c004:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    c008:	9b01      	ldr	r3, [sp, #4]
    c00a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    c00c:	e019      	b.n	c042 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    c00e:	9b01      	ldr	r3, [sp, #4]
    c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c012:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    c016:	f043 0220 	orr.w	r2, r3, #32
    c01a:	9b01      	ldr	r3, [sp, #4]
    c01c:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    c01e:	e010      	b.n	c042 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    c020:	9b01      	ldr	r3, [sp, #4]
    c022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c024:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    c028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    c02c:	9b01      	ldr	r3, [sp, #4]
    c02e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    c030:	e007      	b.n	c042 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    c032:	9b01      	ldr	r3, [sp, #4]
    c034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c036:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    c03a:	9b01      	ldr	r3, [sp, #4]
    c03c:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    c03e:	e000      	b.n	c042 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    c040:	bf00      	nop
    }
}
    c042:	bf00      	nop
    c044:	b002      	add	sp, #8
    c046:	4770      	bx	lr

0000c048 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    c048:	b082      	sub	sp, #8
    c04a:	9001      	str	r0, [sp, #4]
    c04c:	460b      	mov	r3, r1
    c04e:	f88d 3003 	strb.w	r3, [sp, #3]
    c052:	4613      	mov	r3, r2
    c054:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c058:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c05c:	2b00      	cmp	r3, #0
    c05e:	d00b      	beq.n	c078 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c064:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c068:	00db      	lsls	r3, r3, #3
    c06a:	2140      	movs	r1, #64	; 0x40
    c06c:	fa01 f303 	lsl.w	r3, r1, r3
    c070:	431a      	orrs	r2, r3
    c072:	9b01      	ldr	r3, [sp, #4]
    c074:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c076:	e00b      	b.n	c090 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c078:	9b01      	ldr	r3, [sp, #4]
    c07a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c07c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c080:	00db      	lsls	r3, r3, #3
    c082:	2140      	movs	r1, #64	; 0x40
    c084:	fa01 f303 	lsl.w	r3, r1, r3
    c088:	43db      	mvns	r3, r3
    c08a:	401a      	ands	r2, r3
    c08c:	9b01      	ldr	r3, [sp, #4]
    c08e:	665a      	str	r2, [r3, #100]	; 0x64
}
    c090:	bf00      	nop
    c092:	b002      	add	sp, #8
    c094:	4770      	bx	lr

0000c096 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    c096:	b082      	sub	sp, #8
    c098:	9001      	str	r0, [sp, #4]
    c09a:	460b      	mov	r3, r1
    c09c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c0a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c0a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c0ac:	2a00      	cmp	r2, #0
    c0ae:	d001      	beq.n	c0b4 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    c0b0:	2280      	movs	r2, #128	; 0x80
    c0b2:	e000      	b.n	c0b6 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    c0b4:	2200      	movs	r2, #0
    c0b6:	431a      	orrs	r2, r3
    c0b8:	9b01      	ldr	r3, [sp, #4]
    c0ba:	655a      	str	r2, [r3, #84]	; 0x54
}
    c0bc:	bf00      	nop
    c0be:	b002      	add	sp, #8
    c0c0:	4770      	bx	lr

0000c0c2 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c0c2:	b082      	sub	sp, #8
    c0c4:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    c0c6:	9b01      	ldr	r3, [sp, #4]
    c0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    c0ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    c0ce:	9b01      	ldr	r3, [sp, #4]
    c0d0:	675a      	str	r2, [r3, #116]	; 0x74
}
    c0d2:	bf00      	nop
    c0d4:	b002      	add	sp, #8
    c0d6:	4770      	bx	lr

0000c0d8 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    c0d8:	b082      	sub	sp, #8
    c0da:	9001      	str	r0, [sp, #4]
    c0dc:	460b      	mov	r3, r1
    c0de:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    c0e2:	9b01      	ldr	r3, [sp, #4]
    c0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    c0e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    c0ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c0ee:	021b      	lsls	r3, r3, #8
    c0f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    c0f4:	431a      	orrs	r2, r3
    c0f6:	9b01      	ldr	r3, [sp, #4]
    c0f8:	67da      	str	r2, [r3, #124]	; 0x7c
}
    c0fa:	bf00      	nop
    c0fc:	b002      	add	sp, #8
    c0fe:	4770      	bx	lr

0000c100 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    c100:	b082      	sub	sp, #8
    c102:	9001      	str	r0, [sp, #4]
    c104:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    c106:	9b01      	ldr	r3, [sp, #4]
    c108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    c10a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c10e:	9a00      	ldr	r2, [sp, #0]
    c110:	2a00      	cmp	r2, #0
    c112:	d002      	beq.n	c11a <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    c114:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c118:	e000      	b.n	c11c <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    c11a:	2200      	movs	r2, #0
    c11c:	431a      	orrs	r2, r3
    c11e:	9b01      	ldr	r3, [sp, #4]
    c120:	67da      	str	r2, [r3, #124]	; 0x7c
}
    c122:	bf00      	nop
    c124:	b002      	add	sp, #8
    c126:	4770      	bx	lr

0000c128 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    c128:	b086      	sub	sp, #24
    c12a:	9003      	str	r0, [sp, #12]
    c12c:	460b      	mov	r3, r1
    c12e:	9201      	str	r2, [sp, #4]
    c130:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    c134:	9b01      	ldr	r3, [sp, #4]
    c136:	2b00      	cmp	r3, #0
    c138:	bf14      	ite	ne
    c13a:	2301      	movne	r3, #1
    c13c:	2300      	moveq	r3, #0
    c13e:	b2db      	uxtb	r3, r3
    c140:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    c142:	9b03      	ldr	r3, [sp, #12]
    c144:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c148:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c14c:	2101      	movs	r1, #1
    c14e:	fa01 f303 	lsl.w	r3, r1, r3
    c152:	43db      	mvns	r3, r3
    c154:	401a      	ands	r2, r3
    c156:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c15a:	9905      	ldr	r1, [sp, #20]
    c15c:	fa01 f303 	lsl.w	r3, r1, r3
    c160:	431a      	orrs	r2, r3
    c162:	9b03      	ldr	r3, [sp, #12]
    c164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    c168:	bf00      	nop
    c16a:	b006      	add	sp, #24
    c16c:	4770      	bx	lr

0000c16e <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    c16e:	b084      	sub	sp, #16
    c170:	9001      	str	r0, [sp, #4]
    c172:	460b      	mov	r3, r1
    c174:	f88d 3003 	strb.w	r3, [sp, #3]
    c178:	4613      	mov	r3, r2
    c17a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    c17e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c182:	2b00      	cmp	r3, #0
    c184:	d001      	beq.n	c18a <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    c186:	2301      	movs	r3, #1
    c188:	e000      	b.n	c18c <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    c18a:	2300      	movs	r3, #0
    c18c:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    c18e:	9b01      	ldr	r3, [sp, #4]
    c190:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    c192:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c196:	2101      	movs	r1, #1
    c198:	fa01 f303 	lsl.w	r3, r1, r3
    c19c:	43db      	mvns	r3, r3
    c19e:	401a      	ands	r2, r3
    c1a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1a4:	9903      	ldr	r1, [sp, #12]
    c1a6:	fa01 f303 	lsl.w	r3, r1, r3
    c1aa:	431a      	orrs	r2, r3
    c1ac:	9b01      	ldr	r3, [sp, #4]
    c1ae:	67da      	str	r2, [r3, #124]	; 0x7c
}
    c1b0:	bf00      	nop
    c1b2:	b004      	add	sp, #16
    c1b4:	4770      	bx	lr

0000c1b6 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    c1b6:	b084      	sub	sp, #16
    c1b8:	9001      	str	r0, [sp, #4]
    c1ba:	460b      	mov	r3, r1
    c1bc:	f88d 3003 	strb.w	r3, [sp, #3]
    c1c0:	4613      	mov	r3, r2
    c1c2:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    c1c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d001      	beq.n	c1d2 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    c1ce:	2301      	movs	r3, #1
    c1d0:	e000      	b.n	c1d4 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    c1d2:	2300      	movs	r3, #0
    c1d4:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    c1d6:	9b01      	ldr	r3, [sp, #4]
    c1d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    c1da:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1de:	2110      	movs	r1, #16
    c1e0:	fa01 f303 	lsl.w	r3, r1, r3
    c1e4:	43db      	mvns	r3, r3
    c1e6:	401a      	ands	r2, r3
    c1e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1ec:	9903      	ldr	r1, [sp, #12]
    c1ee:	fa01 f303 	lsl.w	r3, r1, r3
    c1f2:	011b      	lsls	r3, r3, #4
    c1f4:	431a      	orrs	r2, r3
    c1f6:	9b01      	ldr	r3, [sp, #4]
    c1f8:	67da      	str	r2, [r3, #124]	; 0x7c
}
    c1fa:	bf00      	nop
    c1fc:	b004      	add	sp, #16
    c1fe:	4770      	bx	lr

0000c200 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    c200:	b082      	sub	sp, #8
    c202:	9001      	str	r0, [sp, #4]
    c204:	460b      	mov	r3, r1
    c206:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    c20a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c20e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c212:	409a      	lsls	r2, r3
    c214:	9b01      	ldr	r3, [sp, #4]
    c216:	6a1b      	ldr	r3, [r3, #32]
    c218:	431a      	orrs	r2, r3
    c21a:	9b01      	ldr	r3, [sp, #4]
    c21c:	621a      	str	r2, [r3, #32]
}
    c21e:	bf00      	nop
    c220:	b002      	add	sp, #8
    c222:	4770      	bx	lr

0000c224 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    c224:	b084      	sub	sp, #16
    c226:	4603      	mov	r3, r0
    c228:	f88d 3007 	strb.w	r3, [sp, #7]
    c22c:	460b      	mov	r3, r1
    c22e:	f8ad 3004 	strh.w	r3, [sp, #4]
    c232:	4613      	mov	r3, r2
    c234:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    c238:	2300      	movs	r3, #0
    c23a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    c23e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c242:	4a17      	ldr	r2, [pc, #92]	; (c2a0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    c244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    c248:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c24c:	429a      	cmp	r2, r3
    c24e:	d107      	bne.n	c260 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    c250:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c254:	4a12      	ldr	r2, [pc, #72]	; (c2a0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    c256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    c25a:	f8ad 300e 	strh.w	r3, [sp, #14]
    c25e:	e019      	b.n	c294 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    c260:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c264:	2b00      	cmp	r3, #0
    c266:	d104      	bne.n	c272 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    c268:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c26c:	f8ad 300e 	strh.w	r3, [sp, #14]
    c270:	e010      	b.n	c294 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    c272:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c276:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c27a:	4413      	add	r3, r2
    c27c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c280:	4907      	ldr	r1, [pc, #28]	; (c2a0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    c282:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    c286:	fb93 f1f2 	sdiv	r1, r3, r2
    c28a:	fb01 f202 	mul.w	r2, r1, r2
    c28e:	1a9b      	subs	r3, r3, r2
    c290:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    c294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    c298:	4618      	mov	r0, r3
    c29a:	b004      	add	sp, #16
    c29c:	4770      	bx	lr
    c29e:	bf00      	nop
    c2a0:	1fff8e04 	.word	0x1fff8e04

0000c2a4 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    c2a4:	b500      	push	{lr}
    c2a6:	b085      	sub	sp, #20
    c2a8:	4603      	mov	r3, r0
    c2aa:	9100      	str	r1, [sp, #0]
    c2ac:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c2b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2b4:	4a40      	ldr	r2, [pc, #256]	; (c3b8 <Ftm_Pwm_Ip_InitPair+0x114>)
    c2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2ba:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    c2bc:	2300      	movs	r3, #0
    c2be:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    c2c2:	2300      	movs	r3, #0
    c2c4:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    c2c8:	9b00      	ldr	r3, [sp, #0]
    c2ca:	781b      	ldrb	r3, [r3, #0]
    c2cc:	005b      	lsls	r3, r3, #1
    c2ce:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    c2d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c2d6:	3301      	adds	r3, #1
    c2d8:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    c2dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2e0:	9a00      	ldr	r2, [sp, #0]
    c2e2:	7812      	ldrb	r2, [r2, #0]
    c2e4:	4610      	mov	r0, r2
    c2e6:	9a00      	ldr	r2, [sp, #0]
    c2e8:	8951      	ldrh	r1, [r2, #10]
    c2ea:	4a34      	ldr	r2, [pc, #208]	; (c3bc <Ftm_Pwm_Ip_InitPair+0x118>)
    c2ec:	009b      	lsls	r3, r3, #2
    c2ee:	4403      	add	r3, r0
    c2f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    c2f4:	9b00      	ldr	r3, [sp, #0]
    c2f6:	7819      	ldrb	r1, [r3, #0]
    c2f8:	9b00      	ldr	r3, [sp, #0]
    c2fa:	789b      	ldrb	r3, [r3, #2]
    c2fc:	461a      	mov	r2, r3
    c2fe:	9803      	ldr	r0, [sp, #12]
    c300:	f7ff f920 	bl	b544 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    c304:	9b00      	ldr	r3, [sp, #0]
    c306:	789b      	ldrb	r3, [r3, #2]
    c308:	2b00      	cmp	r3, #0
    c30a:	d02f      	beq.n	c36c <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    c30c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c310:	4619      	mov	r1, r3
    c312:	9803      	ldr	r0, [sp, #12]
    c314:	f7ff fa3e 	bl	b794 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    c318:	4603      	mov	r3, r0
    c31a:	2b01      	cmp	r3, #1
    c31c:	d113      	bne.n	c346 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    c31e:	9b00      	ldr	r3, [sp, #0]
    c320:	685b      	ldr	r3, [r3, #4]
    c322:	2b01      	cmp	r3, #1
    c324:	d107      	bne.n	c336 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    c326:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c32a:	2200      	movs	r2, #0
    c32c:	4619      	mov	r1, r3
    c32e:	9803      	ldr	r0, [sp, #12]
    c330:	f7ff fa0e 	bl	b750 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    c334:	e01a      	b.n	c36c <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    c336:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c33a:	2201      	movs	r2, #1
    c33c:	4619      	mov	r1, r3
    c33e:	9803      	ldr	r0, [sp, #12]
    c340:	f7ff fa06 	bl	b750 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    c344:	e012      	b.n	c36c <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    c346:	9b00      	ldr	r3, [sp, #0]
    c348:	685b      	ldr	r3, [r3, #4]
    c34a:	2b01      	cmp	r3, #1
    c34c:	d107      	bne.n	c35e <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    c34e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c352:	2201      	movs	r2, #1
    c354:	4619      	mov	r1, r3
    c356:	9803      	ldr	r0, [sp, #12]
    c358:	f7ff f9fa 	bl	b750 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    c35c:	e006      	b.n	c36c <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    c35e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c362:	2200      	movs	r2, #0
    c364:	4619      	mov	r1, r3
    c366:	9803      	ldr	r0, [sp, #12]
    c368:	f7ff f9f2 	bl	b750 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    c36c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c370:	4619      	mov	r1, r3
    c372:	9803      	ldr	r0, [sp, #12]
    c374:	f7fe fe31 	bl	afda <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    c378:	9b00      	ldr	r3, [sp, #0]
    c37a:	7819      	ldrb	r1, [r3, #0]
    c37c:	9b00      	ldr	r3, [sp, #0]
    c37e:	7a5b      	ldrb	r3, [r3, #9]
    c380:	461a      	mov	r2, r3
    c382:	9803      	ldr	r0, [sp, #12]
    c384:	f7ff f92c 	bl	b5e0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    c388:	9b00      	ldr	r3, [sp, #0]
    c38a:	7819      	ldrb	r1, [r3, #0]
    c38c:	9b00      	ldr	r3, [sp, #0]
    c38e:	785b      	ldrb	r3, [r3, #1]
    c390:	461a      	mov	r2, r3
    c392:	9803      	ldr	r0, [sp, #12]
    c394:	f7ff f8fd 	bl	b592 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    c398:	9b00      	ldr	r3, [sp, #0]
    c39a:	7a1a      	ldrb	r2, [r3, #8]
    c39c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c3a0:	4619      	mov	r1, r3
    c3a2:	9803      	ldr	r0, [sp, #12]
    c3a4:	f7ff fddd 	bl	bf62 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    c3a8:	2101      	movs	r1, #1
    c3aa:	9803      	ldr	r0, [sp, #12]
    c3ac:	f7ff f814 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    c3b0:	bf00      	nop
    c3b2:	b005      	add	sp, #20
    c3b4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3b8:	000156b4 	.word	0x000156b4
    c3bc:	1fff8e4c 	.word	0x1fff8e4c

0000c3c0 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    c3c0:	b500      	push	{lr}
    c3c2:	b085      	sub	sp, #20
    c3c4:	4603      	mov	r3, r0
    c3c6:	460a      	mov	r2, r1
    c3c8:	f88d 3007 	strb.w	r3, [sp, #7]
    c3cc:	4613      	mov	r3, r2
    c3ce:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c3d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c3d6:	4a0a      	ldr	r2, [pc, #40]	; (c400 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    c3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3dc:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    c3de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c3e2:	2200      	movs	r2, #0
    c3e4:	4619      	mov	r1, r3
    c3e6:	9803      	ldr	r0, [sp, #12]
    c3e8:	f7fe feed 	bl	b1c6 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    c3ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c3f0:	4619      	mov	r1, r3
    c3f2:	9803      	ldr	r0, [sp, #12]
    c3f4:	f7fe ff0a 	bl	b20c <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    c3f8:	bf00      	nop
    c3fa:	b005      	add	sp, #20
    c3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    c400:	000156b4 	.word	0x000156b4

0000c404 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    c404:	b500      	push	{lr}
    c406:	b085      	sub	sp, #20
    c408:	4603      	mov	r3, r0
    c40a:	9100      	str	r1, [sp, #0]
    c40c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c410:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c414:	4a53      	ldr	r2, [pc, #332]	; (c564 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    c416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c41a:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    c41c:	9b00      	ldr	r3, [sp, #0]
    c41e:	681b      	ldr	r3, [r3, #0]
    c420:	2b00      	cmp	r3, #0
    c422:	d002      	beq.n	c42a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    c424:	2b01      	cmp	r3, #1
    c426:	d04c      	beq.n	c4c2 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    c428:	e097      	b.n	c55a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    c42a:	9b00      	ldr	r3, [sp, #0]
    c42c:	699b      	ldr	r3, [r3, #24]
    c42e:	2b00      	cmp	r3, #0
    c430:	bf14      	ite	ne
    c432:	2301      	movne	r3, #1
    c434:	2300      	moveq	r3, #0
    c436:	b2db      	uxtb	r3, r3
    c438:	4619      	mov	r1, r3
    c43a:	9803      	ldr	r0, [sp, #12]
    c43c:	f7ff faa3 	bl	b986 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    c440:	2100      	movs	r1, #0
    c442:	9803      	ldr	r0, [sp, #12]
    c444:	f7ff fb1c 	bl	ba80 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    c448:	9b00      	ldr	r3, [sp, #0]
    c44a:	691b      	ldr	r3, [r3, #16]
    c44c:	2b00      	cmp	r3, #0
    c44e:	bf14      	ite	ne
    c450:	2301      	movne	r3, #1
    c452:	2300      	moveq	r3, #0
    c454:	b2db      	uxtb	r3, r3
    c456:	4619      	mov	r1, r3
    c458:	9803      	ldr	r0, [sp, #12]
    c45a:	f7ff faad 	bl	b9b8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    c45e:	2100      	movs	r1, #0
    c460:	9803      	ldr	r0, [sp, #12]
    c462:	f7ff fb26 	bl	bab2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    c466:	9b00      	ldr	r3, [sp, #0]
    c468:	695b      	ldr	r3, [r3, #20]
    c46a:	2b00      	cmp	r3, #0
    c46c:	bf14      	ite	ne
    c46e:	2301      	movne	r3, #1
    c470:	2300      	moveq	r3, #0
    c472:	b2db      	uxtb	r3, r3
    c474:	4619      	mov	r1, r3
    c476:	9803      	ldr	r0, [sp, #12]
    c478:	f7ff fab7 	bl	b9ea <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    c47c:	2100      	movs	r1, #0
    c47e:	9803      	ldr	r0, [sp, #12]
    c480:	f7ff fb17 	bl	bab2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c484:	9b00      	ldr	r3, [sp, #0]
    c486:	69db      	ldr	r3, [r3, #28]
    c488:	2b00      	cmp	r3, #0
    c48a:	bf14      	ite	ne
    c48c:	2301      	movne	r3, #1
    c48e:	2300      	moveq	r3, #0
    c490:	b2db      	uxtb	r3, r3
    c492:	4619      	mov	r1, r3
    c494:	9803      	ldr	r0, [sp, #12]
    c496:	f7ff fa5d 	bl	b954 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    c49a:	2100      	movs	r1, #0
    c49c:	9803      	ldr	r0, [sp, #12]
    c49e:	f7ff fad6 	bl	ba4e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c4a2:	9b00      	ldr	r3, [sp, #0]
    c4a4:	6a1b      	ldr	r3, [r3, #32]
    c4a6:	2b00      	cmp	r3, #0
    c4a8:	bf14      	ite	ne
    c4aa:	2301      	movne	r3, #1
    c4ac:	2300      	moveq	r3, #0
    c4ae:	b2db      	uxtb	r3, r3
    c4b0:	4619      	mov	r1, r3
    c4b2:	9803      	ldr	r0, [sp, #12]
    c4b4:	f7ff fa35 	bl	b922 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    c4b8:	2100      	movs	r1, #0
    c4ba:	9803      	ldr	r0, [sp, #12]
    c4bc:	f7ff faae 	bl	ba1c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    c4c0:	e04b      	b.n	c55a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    c4c2:	2100      	movs	r1, #0
    c4c4:	9803      	ldr	r0, [sp, #12]
    c4c6:	f7ff fa5e 	bl	b986 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    c4ca:	9b00      	ldr	r3, [sp, #0]
    c4cc:	699b      	ldr	r3, [r3, #24]
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	bf14      	ite	ne
    c4d2:	2301      	movne	r3, #1
    c4d4:	2300      	moveq	r3, #0
    c4d6:	b2db      	uxtb	r3, r3
    c4d8:	4619      	mov	r1, r3
    c4da:	9803      	ldr	r0, [sp, #12]
    c4dc:	f7ff fad0 	bl	ba80 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    c4e0:	2100      	movs	r1, #0
    c4e2:	9803      	ldr	r0, [sp, #12]
    c4e4:	f7ff fa68 	bl	b9b8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    c4e8:	9b00      	ldr	r3, [sp, #0]
    c4ea:	691b      	ldr	r3, [r3, #16]
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	bf14      	ite	ne
    c4f0:	2301      	movne	r3, #1
    c4f2:	2300      	moveq	r3, #0
    c4f4:	b2db      	uxtb	r3, r3
    c4f6:	4619      	mov	r1, r3
    c4f8:	9803      	ldr	r0, [sp, #12]
    c4fa:	f7ff fada 	bl	bab2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    c4fe:	2100      	movs	r1, #0
    c500:	9803      	ldr	r0, [sp, #12]
    c502:	f7ff fa72 	bl	b9ea <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    c506:	9b00      	ldr	r3, [sp, #0]
    c508:	695b      	ldr	r3, [r3, #20]
    c50a:	2b00      	cmp	r3, #0
    c50c:	bf14      	ite	ne
    c50e:	2301      	movne	r3, #1
    c510:	2300      	moveq	r3, #0
    c512:	b2db      	uxtb	r3, r3
    c514:	4619      	mov	r1, r3
    c516:	9803      	ldr	r0, [sp, #12]
    c518:	f7ff facb 	bl	bab2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    c51c:	2100      	movs	r1, #0
    c51e:	9803      	ldr	r0, [sp, #12]
    c520:	f7ff fa18 	bl	b954 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c524:	9b00      	ldr	r3, [sp, #0]
    c526:	69db      	ldr	r3, [r3, #28]
    c528:	2b00      	cmp	r3, #0
    c52a:	bf14      	ite	ne
    c52c:	2301      	movne	r3, #1
    c52e:	2300      	moveq	r3, #0
    c530:	b2db      	uxtb	r3, r3
    c532:	4619      	mov	r1, r3
    c534:	9803      	ldr	r0, [sp, #12]
    c536:	f7ff fa8a 	bl	ba4e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    c53a:	2100      	movs	r1, #0
    c53c:	9803      	ldr	r0, [sp, #12]
    c53e:	f7ff f9f0 	bl	b922 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c542:	9b00      	ldr	r3, [sp, #0]
    c544:	6a1b      	ldr	r3, [r3, #32]
    c546:	2b00      	cmp	r3, #0
    c548:	bf14      	ite	ne
    c54a:	2301      	movne	r3, #1
    c54c:	2300      	moveq	r3, #0
    c54e:	b2db      	uxtb	r3, r3
    c550:	4619      	mov	r1, r3
    c552:	9803      	ldr	r0, [sp, #12]
    c554:	f7ff fa62 	bl	ba1c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    c558:	bf00      	nop
    }
}
    c55a:	bf00      	nop
    c55c:	b005      	add	sp, #20
    c55e:	f85d fb04 	ldr.w	pc, [sp], #4
    c562:	bf00      	nop
    c564:	000156b4 	.word	0x000156b4

0000c568 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    c568:	b500      	push	{lr}
    c56a:	b085      	sub	sp, #20
    c56c:	4603      	mov	r3, r0
    c56e:	9100      	str	r1, [sp, #0]
    c570:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c574:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c578:	4a19      	ldr	r2, [pc, #100]	; (c5e0 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    c57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c57e:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c580:	9b00      	ldr	r3, [sp, #0]
    c582:	699b      	ldr	r3, [r3, #24]
    c584:	2b00      	cmp	r3, #0
    c586:	bf14      	ite	ne
    c588:	2301      	movne	r3, #1
    c58a:	2300      	moveq	r3, #0
    c58c:	b2db      	uxtb	r3, r3
    c58e:	4619      	mov	r1, r3
    c590:	9803      	ldr	r0, [sp, #12]
    c592:	f7fe fee6 	bl	b362 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c596:	9b00      	ldr	r3, [sp, #0]
    c598:	691b      	ldr	r3, [r3, #16]
    c59a:	2b00      	cmp	r3, #0
    c59c:	bf14      	ite	ne
    c59e:	2301      	movne	r3, #1
    c5a0:	2300      	moveq	r3, #0
    c5a2:	b2db      	uxtb	r3, r3
    c5a4:	4619      	mov	r1, r3
    c5a6:	9803      	ldr	r0, [sp, #12]
    c5a8:	f7ff f973 	bl	b892 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c5ac:	9b00      	ldr	r3, [sp, #0]
    c5ae:	695b      	ldr	r3, [r3, #20]
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	bf14      	ite	ne
    c5b4:	2301      	movne	r3, #1
    c5b6:	2300      	moveq	r3, #0
    c5b8:	b2db      	uxtb	r3, r3
    c5ba:	4619      	mov	r1, r3
    c5bc:	9803      	ldr	r0, [sp, #12]
    c5be:	f7ff f980 	bl	b8c2 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c5c2:	9b00      	ldr	r3, [sp, #0]
    c5c4:	69db      	ldr	r3, [r3, #28]
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	bf14      	ite	ne
    c5ca:	2301      	movne	r3, #1
    c5cc:	2300      	moveq	r3, #0
    c5ce:	b2db      	uxtb	r3, r3
    c5d0:	4619      	mov	r1, r3
    c5d2:	9803      	ldr	r0, [sp, #12]
    c5d4:	f7ff f945 	bl	b862 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    c5d8:	bf00      	nop
    c5da:	b005      	add	sp, #20
    c5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e0:	000156b4 	.word	0x000156b4

0000c5e4 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    c5e4:	b500      	push	{lr}
    c5e6:	b087      	sub	sp, #28
    c5e8:	4603      	mov	r3, r0
    c5ea:	9100      	str	r1, [sp, #0]
    c5ec:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c5f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c5f4:	4a42      	ldr	r2, [pc, #264]	; (c700 <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    c5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5fa:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    c5fc:	2300      	movs	r3, #0
    c5fe:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    c600:	2300      	movs	r3, #0
    c602:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    c606:	9b00      	ldr	r3, [sp, #0]
    c608:	791b      	ldrb	r3, [r3, #4]
    c60a:	2b00      	cmp	r3, #0
    c60c:	d107      	bne.n	c61e <Ftm_Pwm_Ip_UpdateSync+0x3a>
    c60e:	9b00      	ldr	r3, [sp, #0]
    c610:	795b      	ldrb	r3, [r3, #5]
    c612:	2b00      	cmp	r3, #0
    c614:	d103      	bne.n	c61e <Ftm_Pwm_Ip_UpdateSync+0x3a>
    c616:	9b00      	ldr	r3, [sp, #0]
    c618:	799b      	ldrb	r3, [r3, #6]
    c61a:	2b00      	cmp	r3, #0
    c61c:	d001      	beq.n	c622 <Ftm_Pwm_Ip_UpdateSync+0x3e>
    c61e:	2301      	movs	r3, #1
    c620:	e000      	b.n	c624 <Ftm_Pwm_Ip_UpdateSync+0x40>
    c622:	2300      	movs	r3, #0
    c624:	f88d 300f 	strb.w	r3, [sp, #15]
    c628:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c62c:	f003 0301 	and.w	r3, r3, #1
    c630:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    c634:	9b00      	ldr	r3, [sp, #0]
    c636:	681b      	ldr	r3, [r3, #0]
    c638:	2b00      	cmp	r3, #0
    c63a:	d105      	bne.n	c648 <Ftm_Pwm_Ip_UpdateSync+0x64>
    c63c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c640:	2b00      	cmp	r3, #0
    c642:	d001      	beq.n	c648 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    c644:	2301      	movs	r3, #1
    c646:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    c648:	9b00      	ldr	r3, [sp, #0]
    c64a:	6a1b      	ldr	r3, [r3, #32]
    c64c:	2b02      	cmp	r3, #2
    c64e:	d101      	bne.n	c654 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    c650:	2301      	movs	r3, #1
    c652:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    c654:	9b05      	ldr	r3, [sp, #20]
    c656:	2b00      	cmp	r3, #0
    c658:	d14c      	bne.n	c6f4 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    c65a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c65e:	9900      	ldr	r1, [sp, #0]
    c660:	4618      	mov	r0, r3
    c662:	f7ff fecf 	bl	c404 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    c666:	2101      	movs	r1, #1
    c668:	9804      	ldr	r0, [sp, #16]
    c66a:	f7ff f942 	bl	b8f2 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    c66e:	9b00      	ldr	r3, [sp, #0]
    c670:	791b      	ldrb	r3, [r3, #4]
    c672:	461a      	mov	r2, r3
    c674:	2100      	movs	r1, #0
    c676:	9804      	ldr	r0, [sp, #16]
    c678:	f7fe fe89 	bl	b38e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    c67c:	9b00      	ldr	r3, [sp, #0]
    c67e:	795b      	ldrb	r3, [r3, #5]
    c680:	461a      	mov	r2, r3
    c682:	2101      	movs	r1, #1
    c684:	9804      	ldr	r0, [sp, #16]
    c686:	f7fe fe82 	bl	b38e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    c68a:	9b00      	ldr	r3, [sp, #0]
    c68c:	799b      	ldrb	r3, [r3, #6]
    c68e:	461a      	mov	r2, r3
    c690:	2102      	movs	r1, #2
    c692:	9804      	ldr	r0, [sp, #16]
    c694:	f7fe fe7b 	bl	b38e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    c698:	9b00      	ldr	r3, [sp, #0]
    c69a:	79db      	ldrb	r3, [r3, #7]
    c69c:	4619      	mov	r1, r3
    c69e:	9804      	ldr	r0, [sp, #16]
    c6a0:	f7ff f8c7 	bl	b832 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    c6a4:	9b00      	ldr	r3, [sp, #0]
    c6a6:	7a1b      	ldrb	r3, [r3, #8]
    c6a8:	4619      	mov	r1, r3
    c6aa:	9804      	ldr	r0, [sp, #16]
    c6ac:	f7fe fe43 	bl	b336 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    c6b0:	9b00      	ldr	r3, [sp, #0]
    c6b2:	7a5b      	ldrb	r3, [r3, #9]
    c6b4:	4619      	mov	r1, r3
    c6b6:	9804      	ldr	r0, [sp, #16]
    c6b8:	f7fe fe27 	bl	b30a <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    c6bc:	9b00      	ldr	r3, [sp, #0]
    c6be:	7a9b      	ldrb	r3, [r3, #10]
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	d005      	beq.n	c6d0 <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    c6c4:	9b00      	ldr	r3, [sp, #0]
    c6c6:	899b      	ldrh	r3, [r3, #12]
    c6c8:	4619      	mov	r1, r3
    c6ca:	9804      	ldr	r0, [sp, #16]
    c6cc:	f7ff fac6 	bl	bc5c <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    c6d0:	9b00      	ldr	r3, [sp, #0]
    c6d2:	7a9b      	ldrb	r3, [r3, #10]
    c6d4:	4619      	mov	r1, r3
    c6d6:	9804      	ldr	r0, [sp, #16]
    c6d8:	f7ff faa3 	bl	bc22 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    c6dc:	9b00      	ldr	r3, [sp, #0]
    c6de:	7b9b      	ldrb	r3, [r3, #14]
    c6e0:	4619      	mov	r1, r3
    c6e2:	9804      	ldr	r0, [sp, #16]
    c6e4:	f7ff f86b 	bl	b7be <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    c6e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c6ec:	9900      	ldr	r1, [sp, #0]
    c6ee:	4618      	mov	r0, r3
    c6f0:	f7ff ff3a 	bl	c568 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    c6f4:	9b05      	ldr	r3, [sp, #20]
}
    c6f6:	4618      	mov	r0, r3
    c6f8:	b007      	add	sp, #28
    c6fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c6fe:	bf00      	nop
    c700:	000156b4 	.word	0x000156b4

0000c704 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    c704:	b500      	push	{lr}
    c706:	b085      	sub	sp, #20
    c708:	4603      	mov	r3, r0
    c70a:	9100      	str	r1, [sp, #0]
    c70c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c710:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c714:	4a1f      	ldr	r2, [pc, #124]	; (c794 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    c716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c71a:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    c71c:	9803      	ldr	r0, [sp, #12]
    c71e:	f7ff fbab 	bl	be78 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    c722:	2100      	movs	r1, #0
    c724:	9803      	ldr	r0, [sp, #12]
    c726:	f7fe fc01 	bl	af2c <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    c72a:	9803      	ldr	r0, [sp, #12]
    c72c:	f7fe fc4a 	bl	afc4 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    c730:	9b00      	ldr	r3, [sp, #0]
    c732:	68db      	ldr	r3, [r3, #12]
    c734:	2b00      	cmp	r3, #0
    c736:	bf14      	ite	ne
    c738:	2301      	movne	r3, #1
    c73a:	2300      	moveq	r3, #0
    c73c:	b2db      	uxtb	r3, r3
    c73e:	4619      	mov	r1, r3
    c740:	9803      	ldr	r0, [sp, #12]
    c742:	f7fe fc04 	bl	af4e <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    c746:	2100      	movs	r1, #0
    c748:	9803      	ldr	r0, [sp, #12]
    c74a:	f7fe fdb2 	bl	b2b2 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    c74e:	9b00      	ldr	r3, [sp, #0]
    c750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c752:	4619      	mov	r1, r3
    c754:	9803      	ldr	r0, [sp, #12]
    c756:	f7ff f847 	bl	b7e8 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    c75a:	9b00      	ldr	r3, [sp, #0]
    c75c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    c75e:	b2db      	uxtb	r3, r3
    c760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c764:	b2db      	uxtb	r3, r3
    c766:	4619      	mov	r1, r3
    c768:	9803      	ldr	r0, [sp, #12]
    c76a:	f7fe ff87 	bl	b67c <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    c76e:	9b00      	ldr	r3, [sp, #0]
    c770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    c772:	099b      	lsrs	r3, r3, #6
    c774:	b29b      	uxth	r3, r3
    c776:	b2db      	uxtb	r3, r3
    c778:	4619      	mov	r1, r3
    c77a:	9803      	ldr	r0, [sp, #12]
    c77c:	f7fe ffa2 	bl	b6c4 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    c780:	9b00      	ldr	r3, [sp, #0]
    c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c784:	4619      	mov	r1, r3
    c786:	9803      	ldr	r0, [sp, #12]
    c788:	f7fe ff8b 	bl	b6a2 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    c78c:	bf00      	nop
    c78e:	b005      	add	sp, #20
    c790:	f85d fb04 	ldr.w	pc, [sp], #4
    c794:	000156b4 	.word	0x000156b4

0000c798 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    c798:	b500      	push	{lr}
    c79a:	b085      	sub	sp, #20
    c79c:	4603      	mov	r3, r0
    c79e:	9100      	str	r1, [sp, #0]
    c7a0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c7a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7a8:	4a39      	ldr	r2, [pc, #228]	; (c890 <Ftm_Pwm_Ip_InitInstance+0xf8>)
    c7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ae:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    c7b0:	4b38      	ldr	r3, [pc, #224]	; (c894 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    c7b2:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    c7b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7b8:	4619      	mov	r1, r3
    c7ba:	9802      	ldr	r0, [sp, #8]
    c7bc:	f7ff fd20 	bl	c200 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    c7c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7c4:	9900      	ldr	r1, [sp, #0]
    c7c6:	4618      	mov	r0, r3
    c7c8:	f7ff ff9c 	bl	c704 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    c7cc:	9b00      	ldr	r3, [sp, #0]
    c7ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7d4:	4611      	mov	r1, r2
    c7d6:	4618      	mov	r0, r3
    c7d8:	f7ff ff04 	bl	c5e4 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    c7dc:	2100      	movs	r1, #0
    c7de:	9803      	ldr	r0, [sp, #12]
    c7e0:	f7fe fd56 	bl	b290 <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    c7e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7e8:	9a00      	ldr	r2, [sp, #0]
    c7ea:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    c7ec:	4a2a      	ldr	r2, [pc, #168]	; (c898 <Ftm_Pwm_Ip_InitInstance+0x100>)
    c7ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    c7f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7f6:	9a00      	ldr	r2, [sp, #0]
    c7f8:	6812      	ldr	r2, [r2, #0]
    c7fa:	4928      	ldr	r1, [pc, #160]	; (c89c <Ftm_Pwm_Ip_InitInstance+0x104>)
    c7fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    c800:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c804:	9a00      	ldr	r2, [sp, #0]
    c806:	6852      	ldr	r2, [r2, #4]
    c808:	4925      	ldr	r1, [pc, #148]	; (c8a0 <Ftm_Pwm_Ip_InitInstance+0x108>)
    c80a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    c80e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c812:	9a00      	ldr	r2, [sp, #0]
    c814:	6892      	ldr	r2, [r2, #8]
    c816:	4923      	ldr	r1, [pc, #140]	; (c8a4 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    c818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    c81c:	9b00      	ldr	r3, [sp, #0]
    c81e:	7c1b      	ldrb	r3, [r3, #16]
    c820:	2b00      	cmp	r3, #0
    c822:	d00e      	beq.n	c842 <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    c824:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c828:	9a00      	ldr	r2, [sp, #0]
    c82a:	6952      	ldr	r2, [r2, #20]
    c82c:	491e      	ldr	r1, [pc, #120]	; (c8a8 <Ftm_Pwm_Ip_InitInstance+0x110>)
    c82e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    c832:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c836:	9a00      	ldr	r2, [sp, #0]
    c838:	6992      	ldr	r2, [r2, #24]
    c83a:	491b      	ldr	r1, [pc, #108]	; (c8a8 <Ftm_Pwm_Ip_InitInstance+0x110>)
    c83c:	00db      	lsls	r3, r3, #3
    c83e:	440b      	add	r3, r1
    c840:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    c842:	9b00      	ldr	r3, [sp, #0]
    c844:	68db      	ldr	r3, [r3, #12]
    c846:	2b01      	cmp	r3, #1
    c848:	d108      	bne.n	c85c <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    c84a:	9b00      	ldr	r3, [sp, #0]
    c84c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    c84e:	085b      	lsrs	r3, r3, #1
    c850:	b29b      	uxth	r3, r3
    c852:	4619      	mov	r1, r3
    c854:	9803      	ldr	r0, [sp, #12]
    c856:	f7fe fbe3 	bl	b020 <Ftm_Pwm_Ip_SetMod>
    c85a:	e007      	b.n	c86c <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    c85c:	9b00      	ldr	r3, [sp, #0]
    c85e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    c860:	3b01      	subs	r3, #1
    c862:	b29b      	uxth	r3, r3
    c864:	4619      	mov	r1, r3
    c866:	9803      	ldr	r0, [sp, #12]
    c868:	f7fe fbda 	bl	b020 <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    c86c:	9b00      	ldr	r3, [sp, #0]
    c86e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    c872:	4619      	mov	r1, r3
    c874:	9803      	ldr	r0, [sp, #12]
    c876:	f7fe ff39 	bl	b6ec <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    c87a:	9b00      	ldr	r3, [sp, #0]
    c87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c87e:	4619      	mov	r1, r3
    c880:	9803      	ldr	r0, [sp, #12]
    c882:	f7fe ffc3 	bl	b80c <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    c886:	bf00      	nop
    c888:	b005      	add	sp, #20
    c88a:	f85d fb04 	ldr.w	pc, [sp], #4
    c88e:	bf00      	nop
    c890:	000156b4 	.word	0x000156b4
    c894:	40048000 	.word	0x40048000
    c898:	1fff8e04 	.word	0x1fff8e04
    c89c:	1fff90fc 	.word	0x1fff90fc
    c8a0:	1fff910c 	.word	0x1fff910c
    c8a4:	1fff911c 	.word	0x1fff911c
    c8a8:	1fff8fac 	.word	0x1fff8fac

0000c8ac <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    c8ac:	b500      	push	{lr}
    c8ae:	b085      	sub	sp, #20
    c8b0:	4603      	mov	r3, r0
    c8b2:	9100      	str	r1, [sp, #0]
    c8b4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c8b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8bc:	4a1a      	ldr	r2, [pc, #104]	; (c928 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    c8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8c2:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    c8c4:	9b00      	ldr	r3, [sp, #0]
    c8c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    c8ca:	4619      	mov	r1, r3
    c8cc:	9803      	ldr	r0, [sp, #12]
    c8ce:	f7ff fc03 	bl	c0d8 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    c8d2:	9b00      	ldr	r3, [sp, #0]
    c8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c8d6:	4619      	mov	r1, r3
    c8d8:	9803      	ldr	r0, [sp, #12]
    c8da:	f7ff fc11 	bl	c100 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    c8de:	9b00      	ldr	r3, [sp, #0]
    c8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c8e2:	4619      	mov	r1, r3
    c8e4:	9803      	ldr	r0, [sp, #12]
    c8e6:	f7ff fb7a 	bl	bfde <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    c8ea:	2101      	movs	r1, #1
    c8ec:	9803      	ldr	r0, [sp, #12]
    c8ee:	f7fe fce0 	bl	b2b2 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    c8f2:	2101      	movs	r1, #1
    c8f4:	9803      	ldr	r0, [sp, #12]
    c8f6:	f7fe fcf2 	bl	b2de <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    c8fa:	9b00      	ldr	r3, [sp, #0]
    c8fc:	685b      	ldr	r3, [r3, #4]
    c8fe:	4619      	mov	r1, r3
    c900:	9803      	ldr	r0, [sp, #12]
    c902:	f7fe fb03 	bl	af0c <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    c906:	9b00      	ldr	r3, [sp, #0]
    c908:	681b      	ldr	r3, [r3, #0]
    c90a:	4619      	mov	r1, r3
    c90c:	9803      	ldr	r0, [sp, #12]
    c90e:	f7fe fb0d 	bl	af2c <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    c912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c916:	4a05      	ldr	r2, [pc, #20]	; (c92c <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    c918:	2101      	movs	r1, #1
    c91a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    c91e:	bf00      	nop
    c920:	b005      	add	sp, #20
    c922:	f85d fb04 	ldr.w	pc, [sp], #4
    c926:	bf00      	nop
    c928:	000156b4 	.word	0x000156b4
    c92c:	1fff8fcc 	.word	0x1fff8fcc

0000c930 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    c930:	b500      	push	{lr}
    c932:	b085      	sub	sp, #20
    c934:	4603      	mov	r3, r0
    c936:	9100      	str	r1, [sp, #0]
    c938:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c93c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c940:	4a37      	ldr	r2, [pc, #220]	; (ca20 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    c942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c946:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    c948:	2300      	movs	r3, #0
    c94a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    c94e:	2300      	movs	r3, #0
    c950:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    c954:	9b00      	ldr	r3, [sp, #0]
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    c95c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c960:	085b      	lsrs	r3, r3, #1
    c962:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    c966:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c96a:	2201      	movs	r2, #1
    c96c:	4619      	mov	r1, r3
    c96e:	9803      	ldr	r0, [sp, #12]
    c970:	f7fe fe36 	bl	b5e0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    c974:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c978:	2201      	movs	r2, #1
    c97a:	4619      	mov	r1, r3
    c97c:	9803      	ldr	r0, [sp, #12]
    c97e:	f7ff fb63 	bl	c048 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c982:	9b00      	ldr	r3, [sp, #0]
    c984:	685b      	ldr	r3, [r3, #4]
    c986:	2b22      	cmp	r3, #34	; 0x22
    c988:	d003      	beq.n	c992 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    c98a:	9b00      	ldr	r3, [sp, #0]
    c98c:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c98e:	2b21      	cmp	r3, #33	; 0x21
    c990:	d113      	bne.n	c9ba <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    c992:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c996:	005b      	lsls	r3, r3, #1
    c998:	b2db      	uxtb	r3, r3
    c99a:	3301      	adds	r3, #1
    c99c:	b2d9      	uxtb	r1, r3
    c99e:	9b00      	ldr	r3, [sp, #0]
    c9a0:	685b      	ldr	r3, [r3, #4]
    c9a2:	461a      	mov	r2, r3
    c9a4:	9803      	ldr	r0, [sp, #12]
    c9a6:	f7fe fb76 	bl	b096 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    c9aa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c9ae:	2201      	movs	r2, #1
    c9b0:	4619      	mov	r1, r3
    c9b2:	9803      	ldr	r0, [sp, #12]
    c9b4:	f7fe fd89 	bl	b4ca <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    c9b8:	e021      	b.n	c9fe <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c9ba:	9b00      	ldr	r3, [sp, #0]
    c9bc:	685b      	ldr	r3, [r3, #4]
    c9be:	2b62      	cmp	r3, #98	; 0x62
    c9c0:	d003      	beq.n	c9ca <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    c9c2:	9b00      	ldr	r3, [sp, #0]
    c9c4:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c9c6:	2b61      	cmp	r3, #97	; 0x61
    c9c8:	d119      	bne.n	c9fe <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    c9ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c9ce:	005b      	lsls	r3, r3, #1
    c9d0:	b2db      	uxtb	r3, r3
    c9d2:	3301      	adds	r3, #1
    c9d4:	b2d9      	uxtb	r1, r3
    c9d6:	9b00      	ldr	r3, [sp, #0]
    c9d8:	685b      	ldr	r3, [r3, #4]
    c9da:	461a      	mov	r2, r3
    c9dc:	9803      	ldr	r0, [sp, #12]
    c9de:	f7fe fb5a 	bl	b096 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    c9e2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c9e6:	2201      	movs	r2, #1
    c9e8:	4619      	mov	r1, r3
    c9ea:	9803      	ldr	r0, [sp, #12]
    c9ec:	f7fe fd6d 	bl	b4ca <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    c9f0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c9f4:	2201      	movs	r2, #1
    c9f6:	4619      	mov	r1, r3
    c9f8:	9803      	ldr	r0, [sp, #12]
    c9fa:	f7fe fe18 	bl	b62e <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    c9fe:	9b00      	ldr	r3, [sp, #0]
    ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca02:	2b00      	cmp	r3, #0
    ca04:	d007      	beq.n	ca16 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    ca06:	9b00      	ldr	r3, [sp, #0]
    ca08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ca0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca0e:	4611      	mov	r1, r2
    ca10:	4618      	mov	r0, r3
    ca12:	f7ff fc47 	bl	c2a4 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    ca16:	bf00      	nop
    ca18:	b005      	add	sp, #20
    ca1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ca1e:	bf00      	nop
    ca20:	000156b4 	.word	0x000156b4

0000ca24 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    ca24:	b500      	push	{lr}
    ca26:	b085      	sub	sp, #20
    ca28:	4603      	mov	r3, r0
    ca2a:	9100      	str	r1, [sp, #0]
    ca2c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ca30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca34:	4a15      	ldr	r2, [pc, #84]	; (ca8c <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    ca36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca3a:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    ca3c:	9b00      	ldr	r3, [sp, #0]
    ca3e:	7819      	ldrb	r1, [r3, #0]
    ca40:	9b00      	ldr	r3, [sp, #0]
    ca42:	7ddb      	ldrb	r3, [r3, #23]
    ca44:	461a      	mov	r2, r3
    ca46:	9803      	ldr	r0, [sp, #12]
    ca48:	f7ff fa8b 	bl	bf62 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    ca4c:	9b00      	ldr	r3, [sp, #0]
    ca4e:	7819      	ldrb	r1, [r3, #0]
    ca50:	9b00      	ldr	r3, [sp, #0]
    ca52:	7e1b      	ldrb	r3, [r3, #24]
    ca54:	461a      	mov	r2, r3
    ca56:	9803      	ldr	r0, [sp, #12]
    ca58:	f7ff f8ba 	bl	bbd0 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    ca5c:	9b00      	ldr	r3, [sp, #0]
    ca5e:	7819      	ldrb	r1, [r3, #0]
    ca60:	9b00      	ldr	r3, [sp, #0]
    ca62:	7d5b      	ldrb	r3, [r3, #21]
    ca64:	461a      	mov	r2, r3
    ca66:	9803      	ldr	r0, [sp, #12]
    ca68:	f7ff f87c 	bl	bb64 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    ca6c:	9b00      	ldr	r3, [sp, #0]
    ca6e:	7819      	ldrb	r1, [r3, #0]
    ca70:	9b00      	ldr	r3, [sp, #0]
    ca72:	7d9b      	ldrb	r3, [r3, #22]
    ca74:	461a      	mov	r2, r3
    ca76:	9803      	ldr	r0, [sp, #12]
    ca78:	f7ff f834 	bl	bae4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ca7c:	2101      	movs	r1, #1
    ca7e:	9803      	ldr	r0, [sp, #12]
    ca80:	f7fe fcaa 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    ca84:	bf00      	nop
    ca86:	b005      	add	sp, #20
    ca88:	f85d fb04 	ldr.w	pc, [sp], #4
    ca8c:	000156b4 	.word	0x000156b4

0000ca90 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    ca90:	b500      	push	{lr}
    ca92:	b085      	sub	sp, #20
    ca94:	4603      	mov	r3, r0
    ca96:	9100      	str	r1, [sp, #0]
    ca98:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ca9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    caa0:	4a48      	ldr	r2, [pc, #288]	; (cbc4 <Ftm_Pwm_Ip_InitChannel+0x134>)
    caa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa6:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    caa8:	2300      	movs	r3, #0
    caaa:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    caae:	9b00      	ldr	r3, [sp, #0]
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    cab6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    caba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cabe:	9900      	ldr	r1, [sp, #0]
    cac0:	8b48      	ldrh	r0, [r1, #26]
    cac2:	4941      	ldr	r1, [pc, #260]	; (cbc8 <Ftm_Pwm_Ip_InitChannel+0x138>)
    cac4:	00d2      	lsls	r2, r2, #3
    cac6:	4413      	add	r3, r2
    cac8:	4602      	mov	r2, r0
    caca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    cace:	f89d 1007 	ldrb.w	r1, [sp, #7]
    cad2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cad6:	9a00      	ldr	r2, [sp, #0]
    cad8:	69d2      	ldr	r2, [r2, #28]
    cada:	483c      	ldr	r0, [pc, #240]	; (cbcc <Ftm_Pwm_Ip_InitChannel+0x13c>)
    cadc:	00c9      	lsls	r1, r1, #3
    cade:	440b      	add	r3, r1
    cae0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    cae4:	9b00      	ldr	r3, [sp, #0]
    cae6:	6a1a      	ldr	r2, [r3, #32]
    cae8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    caec:	4619      	mov	r1, r3
    caee:	9803      	ldr	r0, [sp, #12]
    caf0:	f7fe fe2e 	bl	b750 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    caf4:	9b00      	ldr	r3, [sp, #0]
    caf6:	69da      	ldr	r2, [r3, #28]
    caf8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cafc:	4619      	mov	r1, r3
    cafe:	9803      	ldr	r0, [sp, #12]
    cb00:	f7fe fc80 	bl	b404 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    cb04:	9b00      	ldr	r3, [sp, #0]
    cb06:	685a      	ldr	r2, [r3, #4]
    cb08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb0c:	4619      	mov	r1, r3
    cb0e:	9803      	ldr	r0, [sp, #12]
    cb10:	f7fe fac1 	bl	b096 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    cb14:	9b00      	ldr	r3, [sp, #0]
    cb16:	685a      	ldr	r2, [r3, #4]
    cb18:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb1c:	4619      	mov	r1, r3
    cb1e:	9803      	ldr	r0, [sp, #12]
    cb20:	f7fe faf0 	bl	b104 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    cb24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb28:	9900      	ldr	r1, [sp, #0]
    cb2a:	4618      	mov	r0, r3
    cb2c:	f7ff ff00 	bl	c930 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    cb30:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb38:	4923      	ldr	r1, [pc, #140]	; (cbc8 <Ftm_Pwm_Ip_InitChannel+0x138>)
    cb3a:	00d2      	lsls	r2, r2, #3
    cb3c:	4413      	add	r3, r2
    cb3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    cb42:	f89d 100b 	ldrb.w	r1, [sp, #11]
    cb46:	f89d 0007 	ldrb.w	r0, [sp, #7]
    cb4a:	2301      	movs	r3, #1
    cb4c:	f000 f9c0 	bl	ced0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    cb50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb54:	9900      	ldr	r1, [sp, #0]
    cb56:	4618      	mov	r0, r3
    cb58:	f7ff ff64 	bl	ca24 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    cb5c:	9b00      	ldr	r3, [sp, #0]
    cb5e:	7d1b      	ldrb	r3, [r3, #20]
    cb60:	2b00      	cmp	r3, #0
    cb62:	d005      	beq.n	cb70 <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    cb64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb68:	4619      	mov	r1, r3
    cb6a:	9803      	ldr	r0, [sp, #12]
    cb6c:	f7fe fa35 	bl	afda <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    cb70:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb78:	4915      	ldr	r1, [pc, #84]	; (cbd0 <Ftm_Pwm_Ip_InitChannel+0x140>)
    cb7a:	00d2      	lsls	r2, r2, #3
    cb7c:	4413      	add	r3, r2
    cb7e:	2201      	movs	r2, #1
    cb80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    cb84:	9b00      	ldr	r3, [sp, #0]
    cb86:	7a1b      	ldrb	r3, [r3, #8]
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d016      	beq.n	cbba <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    cb8c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    cb90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb94:	9a00      	ldr	r2, [sp, #0]
    cb96:	68d2      	ldr	r2, [r2, #12]
    cb98:	480e      	ldr	r0, [pc, #56]	; (cbd4 <Ftm_Pwm_Ip_InitChannel+0x144>)
    cb9a:	00c9      	lsls	r1, r1, #3
    cb9c:	440b      	add	r3, r1
    cb9e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    cba2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    cba6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cbaa:	9a00      	ldr	r2, [sp, #0]
    cbac:	6912      	ldr	r2, [r2, #16]
    cbae:	4809      	ldr	r0, [pc, #36]	; (cbd4 <Ftm_Pwm_Ip_InitChannel+0x144>)
    cbb0:	00c9      	lsls	r1, r1, #3
    cbb2:	440b      	add	r3, r1
    cbb4:	00db      	lsls	r3, r3, #3
    cbb6:	4403      	add	r3, r0
    cbb8:	605a      	str	r2, [r3, #4]
    }

}
    cbba:	bf00      	nop
    cbbc:	b005      	add	sp, #20
    cbbe:	f85d fb04 	ldr.w	pc, [sp], #4
    cbc2:	bf00      	nop
    cbc4:	000156b4 	.word	0x000156b4
    cbc8:	1fff8e0c 	.word	0x1fff8e0c
    cbcc:	1fff907c 	.word	0x1fff907c
    cbd0:	1fff8fdc 	.word	0x1fff8fdc
    cbd4:	1fff8eac 	.word	0x1fff8eac

0000cbd8 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    cbd8:	b500      	push	{lr}
    cbda:	b085      	sub	sp, #20
    cbdc:	4603      	mov	r3, r0
    cbde:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cbe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cbe6:	4a17      	ldr	r2, [pc, #92]	; (cc44 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    cbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbec:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    cbee:	2100      	movs	r1, #0
    cbf0:	9803      	ldr	r0, [sp, #12]
    cbf2:	f7fe f99b 	bl	af2c <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    cbf6:	2100      	movs	r1, #0
    cbf8:	9803      	ldr	r0, [sp, #12]
    cbfa:	f7fe fd63 	bl	b6c4 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    cbfe:	2101      	movs	r1, #1
    cc00:	9803      	ldr	r0, [sp, #12]
    cc02:	f7fe fd4e 	bl	b6a2 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    cc06:	2100      	movs	r1, #0
    cc08:	9803      	ldr	r0, [sp, #12]
    cc0a:	f7fe fd37 	bl	b67c <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    cc0e:	2100      	movs	r1, #0
    cc10:	9803      	ldr	r0, [sp, #12]
    cc12:	f7fe fde9 	bl	b7e8 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    cc16:	2100      	movs	r1, #0
    cc18:	9803      	ldr	r0, [sp, #12]
    cc1a:	f7fe f9bc 	bl	af96 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    cc1e:	2100      	movs	r1, #0
    cc20:	9803      	ldr	r0, [sp, #12]
    cc22:	f7fe f9fd 	bl	b020 <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    cc26:	2100      	movs	r1, #0
    cc28:	9803      	ldr	r0, [sp, #12]
    cc2a:	f7fe f9e8 	bl	affe <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    cc2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cc32:	4a05      	ldr	r2, [pc, #20]	; (cc48 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    cc34:	2100      	movs	r1, #0
    cc36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    cc3a:	bf00      	nop
    cc3c:	b005      	add	sp, #20
    cc3e:	f85d fb04 	ldr.w	pc, [sp], #4
    cc42:	bf00      	nop
    cc44:	000156b4 	.word	0x000156b4
    cc48:	1fff8fcc 	.word	0x1fff8fcc

0000cc4c <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    cc4c:	b500      	push	{lr}
    cc4e:	b085      	sub	sp, #20
    cc50:	4603      	mov	r3, r0
    cc52:	460a      	mov	r2, r1
    cc54:	f88d 3007 	strb.w	r3, [sp, #7]
    cc58:	4613      	mov	r3, r2
    cc5a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cc5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cc62:	4a29      	ldr	r2, [pc, #164]	; (cd08 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    cc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc68:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    cc6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cc6e:	085b      	lsrs	r3, r3, #1
    cc70:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    cc74:	f89d 2006 	ldrb.w	r2, [sp, #6]
    cc78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cc7c:	4611      	mov	r1, r2
    cc7e:	4618      	mov	r0, r3
    cc80:	f7ff fb9e 	bl	c3c0 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    cc84:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cc88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cc8c:	491f      	ldr	r1, [pc, #124]	; (cd0c <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    cc8e:	00d2      	lsls	r2, r2, #3
    cc90:	4413      	add	r3, r2
    cc92:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cc96:	f89d 1006 	ldrb.w	r1, [sp, #6]
    cc9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    cc9e:	2301      	movs	r3, #1
    cca0:	f000 fa4c 	bl	d13c <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    cca4:	2100      	movs	r1, #0
    cca6:	9803      	ldr	r0, [sp, #12]
    cca8:	f7fe fb96 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    ccac:	2101      	movs	r1, #1
    ccae:	9803      	ldr	r0, [sp, #12]
    ccb0:	f7fe fb57 	bl	b362 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    ccb4:	2101      	movs	r1, #1
    ccb6:	9803      	ldr	r0, [sp, #12]
    ccb8:	f7fe fe65 	bl	b986 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    ccbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ccc0:	2200      	movs	r2, #0
    ccc2:	4619      	mov	r1, r3
    ccc4:	9803      	ldr	r0, [sp, #12]
    ccc6:	f7fe fbbf 	bl	b448 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ccca:	2101      	movs	r1, #1
    cccc:	9803      	ldr	r0, [sp, #12]
    ccce:	f7fe fb83 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    ccd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ccd6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ccda:	005b      	lsls	r3, r3, #1
    ccdc:	490c      	ldr	r1, [pc, #48]	; (cd10 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    ccde:	00d2      	lsls	r2, r2, #3
    cce0:	440a      	add	r2, r1
    cce2:	4413      	add	r3, r2
    cce4:	2200      	movs	r2, #0
    cce6:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    cce8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ccec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ccf0:	005b      	lsls	r3, r3, #1
    ccf2:	3301      	adds	r3, #1
    ccf4:	4906      	ldr	r1, [pc, #24]	; (cd10 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    ccf6:	00d2      	lsls	r2, r2, #3
    ccf8:	440a      	add	r2, r1
    ccfa:	4413      	add	r3, r2
    ccfc:	2200      	movs	r2, #0
    ccfe:	701a      	strb	r2, [r3, #0]

}
    cd00:	bf00      	nop
    cd02:	b005      	add	sp, #20
    cd04:	f85d fb04 	ldr.w	pc, [sp], #4
    cd08:	000156b4 	.word	0x000156b4
    cd0c:	1fff907c 	.word	0x1fff907c
    cd10:	1fff905c 	.word	0x1fff905c

0000cd14 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    cd14:	b500      	push	{lr}
    cd16:	b085      	sub	sp, #20
    cd18:	4603      	mov	r3, r0
    cd1a:	9100      	str	r1, [sp, #0]
    cd1c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cd20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd24:	4a15      	ldr	r2, [pc, #84]	; (cd7c <Ftm_Pwm_Ip_InitChFault+0x68>)
    cd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd2a:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    cd2c:	9b00      	ldr	r3, [sp, #0]
    cd2e:	7819      	ldrb	r1, [r3, #0]
    cd30:	9b00      	ldr	r3, [sp, #0]
    cd32:	685b      	ldr	r3, [r3, #4]
    cd34:	461a      	mov	r2, r3
    cd36:	9803      	ldr	r0, [sp, #12]
    cd38:	f7ff f9f6 	bl	c128 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    cd3c:	9b00      	ldr	r3, [sp, #0]
    cd3e:	7819      	ldrb	r1, [r3, #0]
    cd40:	9b00      	ldr	r3, [sp, #0]
    cd42:	7a1b      	ldrb	r3, [r3, #8]
    cd44:	461a      	mov	r2, r3
    cd46:	9803      	ldr	r0, [sp, #12]
    cd48:	f7ff fa35 	bl	c1b6 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    cd4c:	9b00      	ldr	r3, [sp, #0]
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	2201      	movs	r2, #1
    cd52:	4619      	mov	r1, r3
    cd54:	9803      	ldr	r0, [sp, #12]
    cd56:	f7ff fa0a 	bl	c16e <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    cd5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd5e:	9a00      	ldr	r2, [sp, #0]
    cd60:	7812      	ldrb	r2, [r2, #0]
    cd62:	4610      	mov	r0, r2
    cd64:	9a00      	ldr	r2, [sp, #0]
    cd66:	68d2      	ldr	r2, [r2, #12]
    cd68:	4905      	ldr	r1, [pc, #20]	; (cd80 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    cd6a:	009b      	lsls	r3, r3, #2
    cd6c:	4403      	add	r3, r0
    cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd72:	bf00      	nop
    cd74:	b005      	add	sp, #20
    cd76:	f85d fb04 	ldr.w	pc, [sp], #4
    cd7a:	bf00      	nop
    cd7c:	000156b4 	.word	0x000156b4
    cd80:	1fff8e6c 	.word	0x1fff8e6c

0000cd84 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    cd84:	b500      	push	{lr}
    cd86:	b085      	sub	sp, #20
    cd88:	4603      	mov	r3, r0
    cd8a:	9100      	str	r1, [sp, #0]
    cd8c:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    cd90:	2300      	movs	r3, #0
    cd92:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    cd96:	4b29      	ldr	r3, [pc, #164]	; (ce3c <Ftm_Pwm_Ip_Init+0xb8>)
    cd98:	2200      	movs	r2, #0
    cd9a:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    cd9c:	9b00      	ldr	r3, [sp, #0]
    cd9e:	681a      	ldr	r2, [r3, #0]
    cda0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cda4:	4611      	mov	r1, r2
    cda6:	4618      	mov	r0, r3
    cda8:	f7ff fcf6 	bl	c798 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    cdac:	2300      	movs	r3, #0
    cdae:	f88d 300f 	strb.w	r3, [sp, #15]
    cdb2:	e011      	b.n	cdd8 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    cdb4:	9b00      	ldr	r3, [sp, #0]
    cdb6:	685a      	ldr	r2, [r3, #4]
    cdb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cdbc:	009b      	lsls	r3, r3, #2
    cdbe:	4413      	add	r3, r2
    cdc0:	681a      	ldr	r2, [r3, #0]
    cdc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdc6:	4611      	mov	r1, r2
    cdc8:	4618      	mov	r0, r3
    cdca:	f7ff fe61 	bl	ca90 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    cdce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cdd2:	3301      	adds	r3, #1
    cdd4:	f88d 300f 	strb.w	r3, [sp, #15]
    cdd8:	9b00      	ldr	r3, [sp, #0]
    cdda:	7a1b      	ldrb	r3, [r3, #8]
    cddc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cde0:	429a      	cmp	r2, r3
    cde2:	d3e7      	bcc.n	cdb4 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    cde4:	9b00      	ldr	r3, [sp, #0]
    cde6:	7c1b      	ldrb	r3, [r3, #16]
    cde8:	2b00      	cmp	r3, #0
    cdea:	d01b      	beq.n	ce24 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    cdec:	2300      	movs	r3, #0
    cdee:	f88d 300f 	strb.w	r3, [sp, #15]
    cdf2:	e011      	b.n	ce18 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    cdf4:	9b00      	ldr	r3, [sp, #0]
    cdf6:	68da      	ldr	r2, [r3, #12]
    cdf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cdfc:	009b      	lsls	r3, r3, #2
    cdfe:	4413      	add	r3, r2
    ce00:	681a      	ldr	r2, [r3, #0]
    ce02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce06:	4611      	mov	r1, r2
    ce08:	4618      	mov	r0, r3
    ce0a:	f7ff ff83 	bl	cd14 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    ce0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce12:	3301      	adds	r3, #1
    ce14:	f88d 300f 	strb.w	r3, [sp, #15]
    ce18:	9b00      	ldr	r3, [sp, #0]
    ce1a:	7c1b      	ldrb	r3, [r3, #16]
    ce1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ce20:	429a      	cmp	r2, r3
    ce22:	d3e7      	bcc.n	cdf4 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    ce24:	9b00      	ldr	r3, [sp, #0]
    ce26:	681a      	ldr	r2, [r3, #0]
    ce28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce2c:	4611      	mov	r1, r2
    ce2e:	4618      	mov	r0, r3
    ce30:	f7ff fd3c 	bl	c8ac <Ftm_Pwm_Ip_InitInstanceStart>
}
    ce34:	bf00      	nop
    ce36:	b005      	add	sp, #20
    ce38:	f85d fb04 	ldr.w	pc, [sp], #4
    ce3c:	1fff8e00 	.word	0x1fff8e00

0000ce40 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    ce40:	b500      	push	{lr}
    ce42:	b085      	sub	sp, #20
    ce44:	4603      	mov	r3, r0
    ce46:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ce4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce4e:	4a1e      	ldr	r2, [pc, #120]	; (cec8 <Ftm_Pwm_Ip_DeInit+0x88>)
    ce50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce54:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    ce56:	2300      	movs	r3, #0
    ce58:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    ce5c:	9802      	ldr	r0, [sp, #8]
    ce5e:	f7ff f80b 	bl	be78 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    ce62:	2300      	movs	r3, #0
    ce64:	f88d 300f 	strb.w	r3, [sp, #15]
    ce68:	e021      	b.n	ceae <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    ce6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ce6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce72:	4916      	ldr	r1, [pc, #88]	; (cecc <Ftm_Pwm_Ip_DeInit+0x8c>)
    ce74:	00d2      	lsls	r2, r2, #3
    ce76:	4413      	add	r3, r2
    ce78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    ce7c:	2b00      	cmp	r3, #0
    ce7e:	d011      	beq.n	cea4 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    ce80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ce84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce88:	4611      	mov	r1, r2
    ce8a:	4618      	mov	r0, r3
    ce8c:	f7ff fede 	bl	cc4c <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    ce90:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ce94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce98:	490c      	ldr	r1, [pc, #48]	; (cecc <Ftm_Pwm_Ip_DeInit+0x8c>)
    ce9a:	00d2      	lsls	r2, r2, #3
    ce9c:	4413      	add	r3, r2
    ce9e:	2200      	movs	r2, #0
    cea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    cea4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cea8:	3301      	adds	r3, #1
    ceaa:	f88d 300f 	strb.w	r3, [sp, #15]
    ceae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ceb2:	2b07      	cmp	r3, #7
    ceb4:	d9d9      	bls.n	ce6a <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    ceb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ceba:	4618      	mov	r0, r3
    cebc:	f7ff fe8c 	bl	cbd8 <Ftm_Pwm_Ip_DeInitInstance>
}
    cec0:	bf00      	nop
    cec2:	b005      	add	sp, #20
    cec4:	f85d fb04 	ldr.w	pc, [sp], #4
    cec8:	000156b4 	.word	0x000156b4
    cecc:	1fff8fdc 	.word	0x1fff8fdc

0000ced0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    ced0:	b510      	push	{r4, lr}
    ced2:	b088      	sub	sp, #32
    ced4:	4604      	mov	r4, r0
    ced6:	4608      	mov	r0, r1
    ced8:	4611      	mov	r1, r2
    ceda:	461a      	mov	r2, r3
    cedc:	4623      	mov	r3, r4
    cede:	f88d 300f 	strb.w	r3, [sp, #15]
    cee2:	4603      	mov	r3, r0
    cee4:	f88d 300e 	strb.w	r3, [sp, #14]
    cee8:	460b      	mov	r3, r1
    ceea:	f8ad 300c 	strh.w	r3, [sp, #12]
    ceee:	4613      	mov	r3, r2
    cef0:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cef4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cef8:	4a54      	ldr	r2, [pc, #336]	; (d04c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    cefa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cefe:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    cf00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cf04:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    cf08:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cf0c:	085b      	lsrs	r3, r3, #1
    cf0e:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    cf12:	f006 fc07 	bl	13724 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    cf16:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cf1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cf1e:	494c      	ldr	r1, [pc, #304]	; (d050 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    cf20:	00d2      	lsls	r2, r2, #3
    cf22:	4413      	add	r3, r2
    cf24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    cf28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    cf2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cf30:	4619      	mov	r1, r3
    cf32:	9807      	ldr	r0, [sp, #28]
    cf34:	f7fe feb0 	bl	bc98 <Ftm_Pwm_Ip_GetChannelMode>
    cf38:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    cf3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cf3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cf42:	4944      	ldr	r1, [pc, #272]	; (d054 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    cf44:	00d2      	lsls	r2, r2, #3
    cf46:	4413      	add	r3, r2
    cf48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cf4c:	2b02      	cmp	r3, #2
    cf4e:	d111      	bne.n	cf74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    cf50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cf54:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cf58:	493e      	ldr	r1, [pc, #248]	; (d054 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    cf5a:	00d2      	lsls	r2, r2, #3
    cf5c:	4413      	add	r3, r2
    cf5e:	2201      	movs	r2, #1
    cf60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    cf64:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cf68:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cf6c:	2300      	movs	r3, #0
    cf6e:	2200      	movs	r2, #0
    cf70:	f000 f8e4 	bl	d13c <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    cf74:	9b05      	ldr	r3, [sp, #20]
    cf76:	2b0a      	cmp	r3, #10
    cf78:	d008      	beq.n	cf8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    cf7a:	9b05      	ldr	r3, [sp, #20]
    cf7c:	2b09      	cmp	r3, #9
    cf7e:	d005      	beq.n	cf8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    cf80:	9b05      	ldr	r3, [sp, #20]
    cf82:	2b12      	cmp	r3, #18
    cf84:	d002      	beq.n	cf8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    cf86:	9b05      	ldr	r3, [sp, #20]
    cf88:	2b11      	cmp	r3, #17
    cf8a:	d10c      	bne.n	cfa6 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    cf8c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    cf90:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cf94:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cf98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cf9c:	9300      	str	r3, [sp, #0]
    cf9e:	2300      	movs	r3, #0
    cfa0:	f000 f992 	bl	d2c8 <Ftm_Pwm_Ip_UpdatePwmChannel>
    cfa4:	e04c      	b.n	d040 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    cfa6:	9b05      	ldr	r3, [sp, #20]
    cfa8:	2b22      	cmp	r3, #34	; 0x22
    cfaa:	d008      	beq.n	cfbe <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    cfac:	9b05      	ldr	r3, [sp, #20]
    cfae:	2b62      	cmp	r3, #98	; 0x62
    cfb0:	d005      	beq.n	cfbe <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    cfb2:	9b05      	ldr	r3, [sp, #20]
    cfb4:	2b61      	cmp	r3, #97	; 0x61
    cfb6:	d002      	beq.n	cfbe <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    cfb8:	9b05      	ldr	r3, [sp, #20]
    cfba:	2b21      	cmp	r3, #33	; 0x21
    cfbc:	d140      	bne.n	d040 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    cfbe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cfc2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    cfc6:	4924      	ldr	r1, [pc, #144]	; (d058 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    cfc8:	0092      	lsls	r2, r2, #2
    cfca:	4413      	add	r3, r2
    cfcc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d10d      	bne.n	cff0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    cfd4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    cfd8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cfdc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cfe0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cfe4:	9300      	str	r3, [sp, #0]
    cfe6:	4613      	mov	r3, r2
    cfe8:	2200      	movs	r2, #0
    cfea:	f000 f96d 	bl	d2c8 <Ftm_Pwm_Ip_UpdatePwmChannel>
    cfee:	e027      	b.n	d040 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    cff0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cff4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    cff8:	4917      	ldr	r1, [pc, #92]	; (d058 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    cffa:	0092      	lsls	r2, r2, #2
    cffc:	4413      	add	r3, r2
    cffe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    d002:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    d006:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d00a:	4618      	mov	r0, r3
    d00c:	f7ff f90a 	bl	c224 <Ftm_Pwm_Ip_CalculatePhaseShift>
    d010:	4603      	mov	r3, r0
    d012:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    d016:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d01a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    d01e:	490e      	ldr	r1, [pc, #56]	; (d058 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    d020:	0092      	lsls	r2, r2, #2
    d022:	4413      	add	r3, r2
    d024:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    d028:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    d02c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    d030:	f89d 000f 	ldrb.w	r0, [sp, #15]
    d034:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d038:	9300      	str	r3, [sp, #0]
    d03a:	4623      	mov	r3, r4
    d03c:	f000 f944 	bl	d2c8 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    d040:	f006 fb9c 	bl	1377c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    d044:	bf00      	nop
    d046:	b008      	add	sp, #32
    d048:	bd10      	pop	{r4, pc}
    d04a:	bf00      	nop
    d04c:	000156b4 	.word	0x000156b4
    d050:	1fff8e0c 	.word	0x1fff8e0c
    d054:	1fff8fdc 	.word	0x1fff8fdc
    d058:	1fff8e4c 	.word	0x1fff8e4c

0000d05c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    d05c:	b510      	push	{r4, lr}
    d05e:	b084      	sub	sp, #16
    d060:	4604      	mov	r4, r0
    d062:	4608      	mov	r0, r1
    d064:	4611      	mov	r1, r2
    d066:	461a      	mov	r2, r3
    d068:	4623      	mov	r3, r4
    d06a:	f88d 3007 	strb.w	r3, [sp, #7]
    d06e:	4603      	mov	r3, r0
    d070:	f88d 3006 	strb.w	r3, [sp, #6]
    d074:	460b      	mov	r3, r1
    d076:	f8ad 3004 	strh.w	r3, [sp, #4]
    d07a:	4613      	mov	r3, r2
    d07c:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    d080:	2300      	movs	r3, #0
    d082:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d086:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d08a:	4a29      	ldr	r2, [pc, #164]	; (d130 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    d08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d090:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    d092:	f006 fb99 	bl	137c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    d096:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d09a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d09e:	4925      	ldr	r1, [pc, #148]	; (d134 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    d0a0:	00d2      	lsls	r2, r2, #3
    d0a2:	4413      	add	r3, r2
    d0a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d0a8:	2b02      	cmp	r3, #2
    d0aa:	d111      	bne.n	d0d0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d0ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d0b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0b4:	491f      	ldr	r1, [pc, #124]	; (d134 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    d0b6:	00d2      	lsls	r2, r2, #3
    d0b8:	4413      	add	r3, r2
    d0ba:	2201      	movs	r2, #1
    d0bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    d0c0:	f89d 1006 	ldrb.w	r1, [sp, #6]
    d0c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d0c8:	2300      	movs	r3, #0
    d0ca:	2200      	movs	r2, #0
    d0cc:	f000 f836 	bl	d13c <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    d0d0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    d0d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d0d8:	2200      	movs	r2, #0
    d0da:	4618      	mov	r0, r3
    d0dc:	f000 f988 	bl	d3f0 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    d0e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d0e4:	4914      	ldr	r1, [pc, #80]	; (d138 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    d0e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d0ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    d0ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d103      	bne.n	d0fe <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    d0f6:	2300      	movs	r3, #0
    d0f8:	f8ad 300e 	strh.w	r3, [sp, #14]
    d0fc:	e003      	b.n	d106 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    d0fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    d102:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    d106:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d10a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    d10e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    d112:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d116:	f7ff fedb 	bl	ced0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d11a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d11e:	4619      	mov	r1, r3
    d120:	9802      	ldr	r0, [sp, #8]
    d122:	f7fe f959 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    d126:	f006 fb7b 	bl	13820 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    d12a:	bf00      	nop
    d12c:	b004      	add	sp, #16
    d12e:	bd10      	pop	{r4, pc}
    d130:	000156b4 	.word	0x000156b4
    d134:	1fff8fdc 	.word	0x1fff8fdc
    d138:	1fff8e04 	.word	0x1fff8e04

0000d13c <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    d13c:	b500      	push	{lr}
    d13e:	b089      	sub	sp, #36	; 0x24
    d140:	9200      	str	r2, [sp, #0]
    d142:	461a      	mov	r2, r3
    d144:	4603      	mov	r3, r0
    d146:	f88d 3007 	strb.w	r3, [sp, #7]
    d14a:	460b      	mov	r3, r1
    d14c:	f88d 3006 	strb.w	r3, [sp, #6]
    d150:	4613      	mov	r3, r2
    d152:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d15a:	4a58      	ldr	r2, [pc, #352]	; (d2bc <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    d15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d160:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    d162:	2300      	movs	r3, #0
    d164:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    d168:	2300      	movs	r3, #0
    d16a:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    d16e:	2300      	movs	r3, #0
    d170:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    d174:	2300      	movs	r3, #0
    d176:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    d17a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d17e:	4619      	mov	r1, r3
    d180:	9805      	ldr	r0, [sp, #20]
    d182:	f7fe fd89 	bl	bc98 <Ftm_Pwm_Ip_GetChannelMode>
    d186:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    d188:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d18c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d190:	494b      	ldr	r1, [pc, #300]	; (d2c0 <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    d192:	00d2      	lsls	r2, r2, #3
    d194:	4413      	add	r3, r2
    d196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d19a:	2b02      	cmp	r3, #2
    d19c:	d109      	bne.n	d1b2 <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    d19e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d1a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d1a6:	4947      	ldr	r1, [pc, #284]	; (d2c4 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    d1a8:	00d2      	lsls	r2, r2, #3
    d1aa:	4413      	add	r3, r2
    d1ac:	2200      	movs	r2, #0
    d1ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    d1b2:	9805      	ldr	r0, [sp, #20]
    d1b4:	f7fe fd5f 	bl	bc76 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    d1b8:	4603      	mov	r3, r0
    d1ba:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d1be:	9b03      	ldr	r3, [sp, #12]
    d1c0:	2b22      	cmp	r3, #34	; 0x22
    d1c2:	d008      	beq.n	d1d6 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    d1c4:	9b03      	ldr	r3, [sp, #12]
    d1c6:	2b62      	cmp	r3, #98	; 0x62
    d1c8:	d005      	beq.n	d1d6 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    d1ca:	9b03      	ldr	r3, [sp, #12]
    d1cc:	2b61      	cmp	r3, #97	; 0x61
    d1ce:	d002      	beq.n	d1d6 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    d1d0:	9b03      	ldr	r3, [sp, #12]
    d1d2:	2b21      	cmp	r3, #33	; 0x21
    d1d4:	d103      	bne.n	d1de <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    d1d6:	2303      	movs	r3, #3
    d1d8:	f8ad 301c 	strh.w	r3, [sp, #28]
    d1dc:	e002      	b.n	d1e4 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    d1de:	2301      	movs	r3, #1
    d1e0:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    d1e4:	9805      	ldr	r0, [sp, #20]
    d1e6:	f7fe fd4f 	bl	bc88 <Ftm_Pwm_Ip_GetPolInstance>
    d1ea:	4603      	mov	r3, r0
    d1ec:	4619      	mov	r1, r3
    d1ee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    d1f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d1f6:	fa02 f303 	lsl.w	r3, r2, r3
    d1fa:	b29b      	uxth	r3, r3
    d1fc:	400b      	ands	r3, r1
    d1fe:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    d202:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    d206:	021b      	lsls	r3, r3, #8
    d208:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    d20c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    d210:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d214:	3308      	adds	r3, #8
    d216:	fa02 f303 	lsl.w	r3, r2, r3
    d21a:	b29b      	uxth	r3, r3
    d21c:	43db      	mvns	r3, r3
    d21e:	b29a      	uxth	r2, r3
    d220:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    d224:	4013      	ands	r3, r2
    d226:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    d22a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    d22e:	2b00      	cmp	r3, #0
    d230:	d027      	beq.n	d282 <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    d232:	9b00      	ldr	r3, [sp, #0]
    d234:	2b01      	cmp	r3, #1
    d236:	d109      	bne.n	d24c <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    d238:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    d23c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d240:	3308      	adds	r3, #8
    d242:	fa02 f303 	lsl.w	r3, r2, r3
    d246:	f8ad 301a 	strh.w	r3, [sp, #26]
    d24a:	e002      	b.n	d252 <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    d24c:	2300      	movs	r3, #0
    d24e:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    d252:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    d256:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    d25a:	4053      	eors	r3, r2
    d25c:	b29a      	uxth	r2, r3
    d25e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    d262:	4313      	orrs	r3, r2
    d264:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    d268:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    d26c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d270:	fa02 f303 	lsl.w	r3, r2, r3
    d274:	b29a      	uxth	r2, r3
    d276:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    d27a:	4313      	orrs	r3, r2
    d27c:	f8ad 301e 	strh.w	r3, [sp, #30]
    d280:	e00d      	b.n	d29e <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    d282:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    d286:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d28a:	fa02 f303 	lsl.w	r3, r2, r3
    d28e:	b29b      	uxth	r3, r3
    d290:	43db      	mvns	r3, r3
    d292:	b29a      	uxth	r2, r3
    d294:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    d298:	4013      	ands	r3, r2
    d29a:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    d29e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    d2a2:	4619      	mov	r1, r3
    d2a4:	9805      	ldr	r0, [sp, #20]
    d2a6:	f7fe fc86 	bl	bbb6 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d2aa:	2101      	movs	r1, #1
    d2ac:	9805      	ldr	r0, [sp, #20]
    d2ae:	f7fe f893 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d2b2:	bf00      	nop
    d2b4:	b009      	add	sp, #36	; 0x24
    d2b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ba:	bf00      	nop
    d2bc:	000156b4 	.word	0x000156b4
    d2c0:	1fff8fdc 	.word	0x1fff8fdc
    d2c4:	1fff8e0c 	.word	0x1fff8e0c

0000d2c8 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    d2c8:	b510      	push	{r4, lr}
    d2ca:	b086      	sub	sp, #24
    d2cc:	4604      	mov	r4, r0
    d2ce:	4608      	mov	r0, r1
    d2d0:	4611      	mov	r1, r2
    d2d2:	461a      	mov	r2, r3
    d2d4:	4623      	mov	r3, r4
    d2d6:	f88d 3007 	strb.w	r3, [sp, #7]
    d2da:	4603      	mov	r3, r0
    d2dc:	f88d 3006 	strb.w	r3, [sp, #6]
    d2e0:	460b      	mov	r3, r1
    d2e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    d2e6:	4613      	mov	r3, r2
    d2e8:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d2ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2f0:	4a3d      	ldr	r2, [pc, #244]	; (d3e8 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    d2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f6:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    d2f8:	2300      	movs	r3, #0
    d2fa:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    d2fc:	2300      	movs	r3, #0
    d2fe:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    d302:	2300      	movs	r3, #0
    d304:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    d308:	2300      	movs	r3, #0
    d30a:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    d30e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d312:	085b      	lsrs	r3, r3, #1
    d314:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    d318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d31c:	4a33      	ldr	r2, [pc, #204]	; (d3ec <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    d31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d322:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    d326:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d32a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d32e:	429a      	cmp	r2, r3
    d330:	d805      	bhi.n	d33e <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    d332:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d336:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d33a:	429a      	cmp	r2, r3
    d33c:	d903      	bls.n	d346 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    d33e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d342:	2b00      	cmp	r3, #0
    d344:	d108      	bne.n	d358 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    d346:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d34a:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    d34e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    d352:	f8ad 3010 	strh.w	r3, [sp, #16]
    d356:	e001      	b.n	d35c <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d358:	2301      	movs	r3, #1
    d35a:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    d35c:	9b05      	ldr	r3, [sp, #20]
    d35e:	2b00      	cmp	r3, #0
    d360:	d13e      	bne.n	d3e0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    d362:	f89d 3009 	ldrb.w	r3, [sp, #9]
    d366:	4619      	mov	r1, r3
    d368:	9803      	ldr	r0, [sp, #12]
    d36a:	f7fe f8d5 	bl	b518 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    d36e:	4603      	mov	r3, r0
    d370:	2b00      	cmp	r3, #0
    d372:	d016      	beq.n	d3a2 <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    d374:	f89d 3009 	ldrb.w	r3, [sp, #9]
    d378:	005b      	lsls	r3, r3, #1
    d37a:	b2db      	uxtb	r3, r3
    d37c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    d380:	4619      	mov	r1, r3
    d382:	9803      	ldr	r0, [sp, #12]
    d384:	f7fd ff70 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    d388:	f89d 3009 	ldrb.w	r3, [sp, #9]
    d38c:	005b      	lsls	r3, r3, #1
    d38e:	b2db      	uxtb	r3, r3
    d390:	3301      	adds	r3, #1
    d392:	b2db      	uxtb	r3, r3
    d394:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    d398:	4619      	mov	r1, r3
    d39a:	9803      	ldr	r0, [sp, #12]
    d39c:	f7fd ff64 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>
    d3a0:	e018      	b.n	d3d4 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    d3a2:	9803      	ldr	r0, [sp, #12]
    d3a4:	f7fd fde9 	bl	af7a <Ftm_Pwm_Ip_GetCpwms>
    d3a8:	4603      	mov	r3, r0
    d3aa:	2b01      	cmp	r3, #1
    d3ac:	d10a      	bne.n	d3c4 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    d3ae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    d3b2:	085b      	lsrs	r3, r3, #1
    d3b4:	b29a      	uxth	r2, r3
    d3b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d3ba:	4619      	mov	r1, r3
    d3bc:	9803      	ldr	r0, [sp, #12]
    d3be:	f7fd ff53 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>
    d3c2:	e007      	b.n	d3d4 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    d3c4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    d3c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d3cc:	4619      	mov	r1, r3
    d3ce:	9803      	ldr	r0, [sp, #12]
    d3d0:	f7fd ff4a 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d3d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d3d8:	4619      	mov	r1, r3
    d3da:	9803      	ldr	r0, [sp, #12]
    d3dc:	f7fd fffc 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    d3e0:	9b05      	ldr	r3, [sp, #20]
}
    d3e2:	4618      	mov	r0, r3
    d3e4:	b006      	add	sp, #24
    d3e6:	bd10      	pop	{r4, pc}
    d3e8:	000156b4 	.word	0x000156b4
    d3ec:	1fff8e04 	.word	0x1fff8e04

0000d3f0 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    d3f0:	b500      	push	{lr}
    d3f2:	b085      	sub	sp, #20
    d3f4:	4603      	mov	r3, r0
    d3f6:	9100      	str	r1, [sp, #0]
    d3f8:	f88d 3007 	strb.w	r3, [sp, #7]
    d3fc:	4613      	mov	r3, r2
    d3fe:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d402:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d406:	4a16      	ldr	r2, [pc, #88]	; (d460 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    d408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d40c:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    d40e:	2300      	movs	r3, #0
    d410:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    d412:	9b00      	ldr	r3, [sp, #0]
    d414:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    d416:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d41a:	9a00      	ldr	r2, [sp, #0]
    d41c:	b291      	uxth	r1, r2
    d41e:	4a11      	ldr	r2, [pc, #68]	; (d464 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    d420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    d424:	9802      	ldr	r0, [sp, #8]
    d426:	f7fd fda8 	bl	af7a <Ftm_Pwm_Ip_GetCpwms>
    d42a:	4603      	mov	r3, r0
    d42c:	2b01      	cmp	r3, #1
    d42e:	d103      	bne.n	d438 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    d430:	9b03      	ldr	r3, [sp, #12]
    d432:	085b      	lsrs	r3, r3, #1
    d434:	9303      	str	r3, [sp, #12]
    d436:	e002      	b.n	d43e <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    d438:	9b03      	ldr	r3, [sp, #12]
    d43a:	3b01      	subs	r3, #1
    d43c:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    d43e:	9b03      	ldr	r3, [sp, #12]
    d440:	b29b      	uxth	r3, r3
    d442:	4619      	mov	r1, r3
    d444:	9802      	ldr	r0, [sp, #8]
    d446:	f7fd fdeb 	bl	b020 <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d44a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d44e:	4619      	mov	r1, r3
    d450:	9802      	ldr	r0, [sp, #8]
    d452:	f7fd ffc1 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    d456:	2300      	movs	r3, #0
}
    d458:	4618      	mov	r0, r3
    d45a:	b005      	add	sp, #20
    d45c:	f85d fb04 	ldr.w	pc, [sp], #4
    d460:	000156b4 	.word	0x000156b4
    d464:	1fff8e04 	.word	0x1fff8e04

0000d468 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    d468:	b500      	push	{lr}
    d46a:	b085      	sub	sp, #20
    d46c:	4603      	mov	r3, r0
    d46e:	460a      	mov	r2, r1
    d470:	f88d 3007 	strb.w	r3, [sp, #7]
    d474:	4613      	mov	r3, r2
    d476:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d47a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d47e:	4a0d      	ldr	r2, [pc, #52]	; (d4b4 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    d480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d484:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    d486:	f006 fa43 	bl	13910 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    d48a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d48e:	4619      	mov	r1, r3
    d490:	9802      	ldr	r0, [sp, #8]
    d492:	f7fd fed3 	bl	b23c <Ftm_Pwm_Ip_GetChOutputValue>
    d496:	4603      	mov	r3, r0
    d498:	2b00      	cmp	r3, #0
    d49a:	d002      	beq.n	d4a2 <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    d49c:	2301      	movs	r3, #1
    d49e:	9303      	str	r3, [sp, #12]
    d4a0:	e001      	b.n	d4a6 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    d4a2:	2300      	movs	r3, #0
    d4a4:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    d4a6:	f006 fa5f 	bl	13968 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    d4aa:	9b03      	ldr	r3, [sp, #12]
}
    d4ac:	4618      	mov	r0, r3
    d4ae:	b005      	add	sp, #20
    d4b0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4b4:	000156b4 	.word	0x000156b4

0000d4b8 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    d4b8:	b500      	push	{lr}
    d4ba:	b087      	sub	sp, #28
    d4bc:	4603      	mov	r3, r0
    d4be:	9100      	str	r1, [sp, #0]
    d4c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d4c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4c8:	4a38      	ldr	r2, [pc, #224]	; (d5ac <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    d4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4ce:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    d4d0:	9b00      	ldr	r3, [sp, #0]
    d4d2:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    d4d6:	f006 fa6d 	bl	139b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    d4da:	9b00      	ldr	r3, [sp, #0]
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d014      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
    d4e0:	9b00      	ldr	r3, [sp, #0]
    d4e2:	2b01      	cmp	r3, #1
    d4e4:	d011      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    d4e6:	9b00      	ldr	r3, [sp, #0]
    d4e8:	2b02      	cmp	r3, #2
    d4ea:	d00e      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    d4ec:	9b00      	ldr	r3, [sp, #0]
    d4ee:	2b03      	cmp	r3, #3
    d4f0:	d00b      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    d4f2:	9b00      	ldr	r3, [sp, #0]
    d4f4:	2b04      	cmp	r3, #4
    d4f6:	d008      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    d4f8:	9b00      	ldr	r3, [sp, #0]
    d4fa:	2b05      	cmp	r3, #5
    d4fc:	d005      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    d4fe:	9b00      	ldr	r3, [sp, #0]
    d500:	2b06      	cmp	r3, #6
    d502:	d002      	beq.n	d50a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    d504:	9b00      	ldr	r3, [sp, #0]
    d506:	2b07      	cmp	r3, #7
    d508:	d136      	bne.n	d578 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    d50a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d50e:	085b      	lsrs	r3, r3, #1
    d510:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    d514:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d518:	4619      	mov	r1, r3
    d51a:	9805      	ldr	r0, [sp, #20]
    d51c:	f7fe fbbc 	bl	bc98 <Ftm_Pwm_Ip_GetChannelMode>
    d520:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    d522:	f89d 2013 	ldrb.w	r2, [sp, #19]
    d526:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d52a:	4611      	mov	r1, r2
    d52c:	4618      	mov	r0, r3
    d52e:	f7fe ff47 	bl	c3c0 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d532:	9b03      	ldr	r3, [sp, #12]
    d534:	2b22      	cmp	r3, #34	; 0x22
    d536:	d008      	beq.n	d54a <Ftm_Pwm_Ip_DisableNotification+0x92>
    d538:	9b03      	ldr	r3, [sp, #12]
    d53a:	2b62      	cmp	r3, #98	; 0x62
    d53c:	d005      	beq.n	d54a <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    d53e:	9b03      	ldr	r3, [sp, #12]
    d540:	2b61      	cmp	r3, #97	; 0x61
    d542:	d002      	beq.n	d54a <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    d544:	9b03      	ldr	r3, [sp, #12]
    d546:	2b21      	cmp	r3, #33	; 0x21
    d548:	d129      	bne.n	d59e <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    d54a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    d54e:	005b      	lsls	r3, r3, #1
    d550:	b2da      	uxtb	r2, r3
    d552:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d556:	4611      	mov	r1, r2
    d558:	4618      	mov	r0, r3
    d55a:	f7fe ff31 	bl	c3c0 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    d55e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    d562:	005b      	lsls	r3, r3, #1
    d564:	b2db      	uxtb	r3, r3
    d566:	3301      	adds	r3, #1
    d568:	b2da      	uxtb	r2, r3
    d56a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d56e:	4611      	mov	r1, r2
    d570:	4618      	mov	r0, r3
    d572:	f7fe ff25 	bl	c3c0 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d576:	e012      	b.n	d59e <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    d578:	9b00      	ldr	r3, [sp, #0]
    d57a:	2b0a      	cmp	r3, #10
    d57c:	d107      	bne.n	d58e <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    d57e:	2100      	movs	r1, #0
    d580:	9805      	ldr	r0, [sp, #20]
    d582:	f7fe fd88 	bl	c096 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    d586:	9805      	ldr	r0, [sp, #20]
    d588:	f7fe fd9b 	bl	c0c2 <Ftm_Pwm_Ip_ClearFaultFlag>
    d58c:	e008      	b.n	d5a0 <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d58e:	9805      	ldr	r0, [sp, #20]
    d590:	f7fd fd18 	bl	afc4 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    d594:	2100      	movs	r1, #0
    d596:	9805      	ldr	r0, [sp, #20]
    d598:	f7fd fcfd 	bl	af96 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    d59c:	e000      	b.n	d5a0 <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d59e:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    d5a0:	f006 fa34 	bl	13a0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    d5a4:	bf00      	nop
    d5a6:	b007      	add	sp, #28
    d5a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ac:	000156b4 	.word	0x000156b4

0000d5b0 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    d5b0:	b500      	push	{lr}
    d5b2:	b087      	sub	sp, #28
    d5b4:	4603      	mov	r3, r0
    d5b6:	460a      	mov	r2, r1
    d5b8:	f88d 3007 	strb.w	r3, [sp, #7]
    d5bc:	4613      	mov	r3, r2
    d5be:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d5c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5c6:	4a22      	ldr	r2, [pc, #136]	; (d650 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    d5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5cc:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    d5ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d5d2:	085b      	lsrs	r3, r3, #1
    d5d4:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    d5d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d5dc:	4619      	mov	r1, r3
    d5de:	9805      	ldr	r0, [sp, #20]
    d5e0:	f7fe fb5a 	bl	bc98 <Ftm_Pwm_Ip_GetChannelMode>
    d5e4:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    d5e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d5ea:	2201      	movs	r2, #1
    d5ec:	4619      	mov	r1, r3
    d5ee:	9805      	ldr	r0, [sp, #20]
    d5f0:	f7fd fde9 	bl	b1c6 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d5f4:	9b03      	ldr	r3, [sp, #12]
    d5f6:	2b22      	cmp	r3, #34	; 0x22
    d5f8:	d008      	beq.n	d60c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    d5fa:	9b03      	ldr	r3, [sp, #12]
    d5fc:	2b62      	cmp	r3, #98	; 0x62
    d5fe:	d005      	beq.n	d60c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    d600:	9b03      	ldr	r3, [sp, #12]
    d602:	2b61      	cmp	r3, #97	; 0x61
    d604:	d002      	beq.n	d60c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    d606:	9b03      	ldr	r3, [sp, #12]
    d608:	2b21      	cmp	r3, #33	; 0x21
    d60a:	d11d      	bne.n	d648 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    d60c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d610:	005b      	lsls	r3, r3, #1
    d612:	b2db      	uxtb	r3, r3
    d614:	3301      	adds	r3, #1
    d616:	b2db      	uxtb	r3, r3
    d618:	4619      	mov	r1, r3
    d61a:	9805      	ldr	r0, [sp, #20]
    d61c:	f7fd fdf6 	bl	b20c <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    d620:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d624:	005b      	lsls	r3, r3, #1
    d626:	b2db      	uxtb	r3, r3
    d628:	2201      	movs	r2, #1
    d62a:	4619      	mov	r1, r3
    d62c:	9805      	ldr	r0, [sp, #20]
    d62e:	f7fd fdca 	bl	b1c6 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    d632:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d636:	005b      	lsls	r3, r3, #1
    d638:	b2db      	uxtb	r3, r3
    d63a:	3301      	adds	r3, #1
    d63c:	b2db      	uxtb	r3, r3
    d63e:	2201      	movs	r2, #1
    d640:	4619      	mov	r1, r3
    d642:	9805      	ldr	r0, [sp, #20]
    d644:	f7fd fdbf 	bl	b1c6 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    d648:	bf00      	nop
    d64a:	b007      	add	sp, #28
    d64c:	f85d fb04 	ldr.w	pc, [sp], #4
    d650:	000156b4 	.word	0x000156b4

0000d654 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    d654:	b500      	push	{lr}
    d656:	b085      	sub	sp, #20
    d658:	4603      	mov	r3, r0
    d65a:	9100      	str	r1, [sp, #0]
    d65c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d664:	4a23      	ldr	r2, [pc, #140]	; (d6f4 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    d666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d66a:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    d66c:	9b00      	ldr	r3, [sp, #0]
    d66e:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    d672:	f006 f9f1 	bl	13a58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    d676:	9b00      	ldr	r3, [sp, #0]
    d678:	2b00      	cmp	r3, #0
    d67a:	d014      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
    d67c:	9b00      	ldr	r3, [sp, #0]
    d67e:	2b01      	cmp	r3, #1
    d680:	d011      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    d682:	9b00      	ldr	r3, [sp, #0]
    d684:	2b02      	cmp	r3, #2
    d686:	d00e      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    d688:	9b00      	ldr	r3, [sp, #0]
    d68a:	2b03      	cmp	r3, #3
    d68c:	d00b      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    d68e:	9b00      	ldr	r3, [sp, #0]
    d690:	2b04      	cmp	r3, #4
    d692:	d008      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    d694:	9b00      	ldr	r3, [sp, #0]
    d696:	2b05      	cmp	r3, #5
    d698:	d005      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    d69a:	9b00      	ldr	r3, [sp, #0]
    d69c:	2b06      	cmp	r3, #6
    d69e:	d002      	beq.n	d6a6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    d6a0:	9b00      	ldr	r3, [sp, #0]
    d6a2:	2b07      	cmp	r3, #7
    d6a4:	d10e      	bne.n	d6c4 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    d6a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6aa:	4619      	mov	r1, r3
    d6ac:	9803      	ldr	r0, [sp, #12]
    d6ae:	f7fd fdad 	bl	b20c <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    d6b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d6b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6ba:	4611      	mov	r1, r2
    d6bc:	4618      	mov	r0, r3
    d6be:	f7ff ff77 	bl	d5b0 <Ftm_Pwm_Ip_SetNormalNotificationCase>
    d6c2:	e011      	b.n	d6e8 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    d6c4:	9b00      	ldr	r3, [sp, #0]
    d6c6:	2b0a      	cmp	r3, #10
    d6c8:	d107      	bne.n	d6da <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    d6ca:	9803      	ldr	r0, [sp, #12]
    d6cc:	f7fe fcf9 	bl	c0c2 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    d6d0:	2101      	movs	r1, #1
    d6d2:	9803      	ldr	r0, [sp, #12]
    d6d4:	f7fe fcdf 	bl	c096 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    d6d8:	e006      	b.n	d6e8 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d6da:	9803      	ldr	r0, [sp, #12]
    d6dc:	f7fd fc72 	bl	afc4 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    d6e0:	2101      	movs	r1, #1
    d6e2:	9803      	ldr	r0, [sp, #12]
    d6e4:	f7fd fc57 	bl	af96 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    d6e8:	f006 f9e2 	bl	13ab0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    d6ec:	bf00      	nop
    d6ee:	b005      	add	sp, #20
    d6f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d6f4:	000156b4 	.word	0x000156b4

0000d6f8 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    d6f8:	b500      	push	{lr}
    d6fa:	b085      	sub	sp, #20
    d6fc:	4603      	mov	r3, r0
    d6fe:	9100      	str	r1, [sp, #0]
    d700:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d704:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d708:	4a0c      	ldr	r2, [pc, #48]	; (d73c <Ftm_Pwm_Ip_SetPowerState+0x44>)
    d70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d70e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    d710:	9b00      	ldr	r3, [sp, #0]
    d712:	2b01      	cmp	r3, #1
    d714:	d104      	bne.n	d720 <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d716:	2100      	movs	r1, #0
    d718:	9803      	ldr	r0, [sp, #12]
    d71a:	f7fd fc07 	bl	af2c <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    d71e:	e008      	b.n	d732 <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    d720:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d724:	4a06      	ldr	r2, [pc, #24]	; (d740 <Ftm_Pwm_Ip_SetPowerState+0x48>)
    d726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d72a:	4619      	mov	r1, r3
    d72c:	9803      	ldr	r0, [sp, #12]
    d72e:	f7fd fbfd 	bl	af2c <Ftm_Pwm_Ip_SetClockSource>
}
    d732:	bf00      	nop
    d734:	b005      	add	sp, #20
    d736:	f85d fb04 	ldr.w	pc, [sp], #4
    d73a:	bf00      	nop
    d73c:	000156b4 	.word	0x000156b4
    d740:	1fff90fc 	.word	0x1fff90fc

0000d744 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    d744:	b500      	push	{lr}
    d746:	b085      	sub	sp, #20
    d748:	4603      	mov	r3, r0
    d74a:	9100      	str	r1, [sp, #0]
    d74c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d750:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d754:	4a0e      	ldr	r2, [pc, #56]	; (d790 <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    d756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d75a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    d75c:	9b00      	ldr	r3, [sp, #0]
    d75e:	2b01      	cmp	r3, #1
    d760:	d109      	bne.n	d776 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    d762:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d766:	4a0b      	ldr	r2, [pc, #44]	; (d794 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    d768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d76c:	4619      	mov	r1, r3
    d76e:	9803      	ldr	r0, [sp, #12]
    d770:	f7fd fbcc 	bl	af0c <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    d774:	e008      	b.n	d788 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    d776:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d77a:	4a07      	ldr	r2, [pc, #28]	; (d798 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    d77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d780:	4619      	mov	r1, r3
    d782:	9803      	ldr	r0, [sp, #12]
    d784:	f7fd fbc2 	bl	af0c <Ftm_Pwm_Ip_SetClockPs>
}
    d788:	bf00      	nop
    d78a:	b005      	add	sp, #20
    d78c:	f85d fb04 	ldr.w	pc, [sp], #4
    d790:	000156b4 	.word	0x000156b4
    d794:	1fff911c 	.word	0x1fff911c
    d798:	1fff910c 	.word	0x1fff910c

0000d79c <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    d79c:	b500      	push	{lr}
    d79e:	b085      	sub	sp, #20
    d7a0:	4603      	mov	r3, r0
    d7a2:	460a      	mov	r2, r1
    d7a4:	f88d 3007 	strb.w	r3, [sp, #7]
    d7a8:	4613      	mov	r3, r2
    d7aa:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d7ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7b2:	4a07      	ldr	r2, [pc, #28]	; (d7d0 <Ftm_Pwm_Ip_ResetCounter+0x34>)
    d7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b8:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    d7ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d7be:	4619      	mov	r1, r3
    d7c0:	9803      	ldr	r0, [sp, #12]
    d7c2:	f7fe f8ae 	bl	b922 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    d7c6:	bf00      	nop
    d7c8:	b005      	add	sp, #20
    d7ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d7ce:	bf00      	nop
    d7d0:	000156b4 	.word	0x000156b4

0000d7d4 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    d7d4:	b084      	sub	sp, #16
    d7d6:	4603      	mov	r3, r0
    d7d8:	460a      	mov	r2, r1
    d7da:	f88d 3007 	strb.w	r3, [sp, #7]
    d7de:	4613      	mov	r3, r2
    d7e0:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    d7e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d7e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d7ec:	4905      	ldr	r1, [pc, #20]	; (d804 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    d7ee:	00d2      	lsls	r2, r2, #3
    d7f0:	4413      	add	r3, r2
    d7f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    d7f6:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    d7fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    d7fe:	4618      	mov	r0, r3
    d800:	b004      	add	sp, #16
    d802:	4770      	bx	lr
    d804:	1fff8e0c 	.word	0x1fff8e0c

0000d808 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    d808:	b500      	push	{lr}
    d80a:	b087      	sub	sp, #28
    d80c:	9202      	str	r2, [sp, #8]
    d80e:	9301      	str	r3, [sp, #4]
    d810:	4603      	mov	r3, r0
    d812:	f88d 300f 	strb.w	r3, [sp, #15]
    d816:	460b      	mov	r3, r1
    d818:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d81c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d820:	4a1f      	ldr	r2, [pc, #124]	; (d8a0 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    d822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d826:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    d828:	2300      	movs	r3, #0
    d82a:	f88d 3017 	strb.w	r3, [sp, #23]
    d82e:	e026      	b.n	d87e <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    d830:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d834:	9a02      	ldr	r2, [sp, #8]
    d836:	4413      	add	r3, r2
    d838:	7819      	ldrb	r1, [r3, #0]
    d83a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d83e:	005b      	lsls	r3, r3, #1
    d840:	9a01      	ldr	r2, [sp, #4]
    d842:	4413      	add	r3, r2
    d844:	881b      	ldrh	r3, [r3, #0]
    d846:	461a      	mov	r2, r3
    d848:	9804      	ldr	r0, [sp, #16]
    d84a:	f7fd fd0d 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    d84e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d852:	005b      	lsls	r3, r3, #1
    d854:	9a01      	ldr	r2, [sp, #4]
    d856:	441a      	add	r2, r3
    d858:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d85c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    d860:	9802      	ldr	r0, [sp, #8]
    d862:	4401      	add	r1, r0
    d864:	7809      	ldrb	r1, [r1, #0]
    d866:	4608      	mov	r0, r1
    d868:	8811      	ldrh	r1, [r2, #0]
    d86a:	4a0e      	ldr	r2, [pc, #56]	; (d8a4 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    d86c:	00db      	lsls	r3, r3, #3
    d86e:	4403      	add	r3, r0
    d870:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    d874:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d878:	3301      	adds	r3, #1
    d87a:	f88d 3017 	strb.w	r3, [sp, #23]
    d87e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d882:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d886:	429a      	cmp	r2, r3
    d888:	d3d2      	bcc.n	d830 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d88a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d88e:	4619      	mov	r1, r3
    d890:	9804      	ldr	r0, [sp, #16]
    d892:	f7fd fda1 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d896:	bf00      	nop
    d898:	b007      	add	sp, #28
    d89a:	f85d fb04 	ldr.w	pc, [sp], #4
    d89e:	bf00      	nop
    d8a0:	000156b4 	.word	0x000156b4
    d8a4:	1fff8e0c 	.word	0x1fff8e0c

0000d8a8 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    d8a8:	b500      	push	{lr}
    d8aa:	b085      	sub	sp, #20
    d8ac:	4603      	mov	r3, r0
    d8ae:	9100      	str	r1, [sp, #0]
    d8b0:	f88d 3007 	strb.w	r3, [sp, #7]
    d8b4:	4613      	mov	r3, r2
    d8b6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d8ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8be:	4a0b      	ldr	r2, [pc, #44]	; (d8ec <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    d8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c4:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    d8c6:	f006 f96b 	bl	13ba0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    d8ca:	9900      	ldr	r1, [sp, #0]
    d8cc:	9803      	ldr	r0, [sp, #12]
    d8ce:	f7fd fde0 	bl	b492 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d8d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8d6:	4619      	mov	r1, r3
    d8d8:	9803      	ldr	r0, [sp, #12]
    d8da:	f7fd fd7d 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    d8de:	f006 f98b 	bl	13bf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    d8e2:	bf00      	nop
    d8e4:	b005      	add	sp, #20
    d8e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ea:	bf00      	nop
    d8ec:	000156b4 	.word	0x000156b4

0000d8f0 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    d8f0:	b500      	push	{lr}
    d8f2:	b085      	sub	sp, #20
    d8f4:	4603      	mov	r3, r0
    d8f6:	9100      	str	r1, [sp, #0]
    d8f8:	f88d 3007 	strb.w	r3, [sp, #7]
    d8fc:	4613      	mov	r3, r2
    d8fe:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d902:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d906:	4a0b      	ldr	r2, [pc, #44]	; (d934 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    d908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d90c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    d90e:	f006 f999 	bl	13c44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    d912:	9900      	ldr	r1, [sp, #0]
    d914:	9803      	ldr	r0, [sp, #12]
    d916:	f7fd fdcb 	bl	b4b0 <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d91a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d91e:	4619      	mov	r1, r3
    d920:	9803      	ldr	r0, [sp, #12]
    d922:	f7fd fd59 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    d926:	f006 f9b9 	bl	13c9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    d92a:	bf00      	nop
    d92c:	b005      	add	sp, #20
    d92e:	f85d fb04 	ldr.w	pc, [sp], #4
    d932:	bf00      	nop
    d934:	000156b4 	.word	0x000156b4

0000d938 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    d938:	b510      	push	{r4, lr}
    d93a:	b084      	sub	sp, #16
    d93c:	4604      	mov	r4, r0
    d93e:	4608      	mov	r0, r1
    d940:	4611      	mov	r1, r2
    d942:	461a      	mov	r2, r3
    d944:	4623      	mov	r3, r4
    d946:	f88d 3007 	strb.w	r3, [sp, #7]
    d94a:	4603      	mov	r3, r0
    d94c:	f88d 3006 	strb.w	r3, [sp, #6]
    d950:	460b      	mov	r3, r1
    d952:	f8ad 3004 	strh.w	r3, [sp, #4]
    d956:	4613      	mov	r3, r2
    d958:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d95c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d960:	4a2e      	ldr	r2, [pc, #184]	; (da1c <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    d962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d966:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    d968:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d96c:	085b      	lsrs	r3, r3, #1
    d96e:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    d972:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d976:	492a      	ldr	r1, [pc, #168]	; (da20 <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    d978:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d97c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    d980:	f006 f9b2 	bl	13ce8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    d984:	9803      	ldr	r0, [sp, #12]
    d986:	f7fd faf8 	bl	af7a <Ftm_Pwm_Ip_GetCpwms>
    d98a:	4603      	mov	r3, r0
    d98c:	2b01      	cmp	r3, #1
    d98e:	d108      	bne.n	d9a2 <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    d990:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d994:	085b      	lsrs	r3, r3, #1
    d996:	b29b      	uxth	r3, r3
    d998:	4619      	mov	r1, r3
    d99a:	9803      	ldr	r0, [sp, #12]
    d99c:	f7fd fb40 	bl	b020 <Ftm_Pwm_Ip_SetMod>
    d9a0:	e007      	b.n	d9b2 <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    d9a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d9a6:	3b01      	subs	r3, #1
    d9a8:	b29b      	uxth	r3, r3
    d9aa:	4619      	mov	r1, r3
    d9ac:	9803      	ldr	r0, [sp, #12]
    d9ae:	f7fd fb37 	bl	b020 <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    d9b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d9b6:	005b      	lsls	r3, r3, #1
    d9b8:	b2db      	uxtb	r3, r3
    d9ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d9be:	4619      	mov	r1, r3
    d9c0:	9803      	ldr	r0, [sp, #12]
    d9c2:	f7fd fc51 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    d9c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d9ca:	085b      	lsrs	r3, r3, #1
    d9cc:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    d9d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d9d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9d8:	4912      	ldr	r1, [pc, #72]	; (da24 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    d9da:	00d2      	lsls	r2, r2, #3
    d9dc:	4413      	add	r3, r2
    d9de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    d9e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    d9e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d9ea:	005b      	lsls	r3, r3, #1
    d9ec:	b2db      	uxtb	r3, r3
    d9ee:	3301      	adds	r3, #1
    d9f0:	b2d9      	uxtb	r1, r3
    d9f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d9f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    d9fa:	4413      	add	r3, r2
    d9fc:	b29b      	uxth	r3, r3
    d9fe:	461a      	mov	r2, r3
    da00:	9803      	ldr	r0, [sp, #12]
    da02:	f7fd fc31 	bl	b268 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    da06:	f89d 3018 	ldrb.w	r3, [sp, #24]
    da0a:	4619      	mov	r1, r3
    da0c:	9803      	ldr	r0, [sp, #12]
    da0e:	f7fd fce3 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    da12:	f006 f995 	bl	13d40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    da16:	bf00      	nop
    da18:	b004      	add	sp, #16
    da1a:	bd10      	pop	{r4, pc}
    da1c:	000156b4 	.word	0x000156b4
    da20:	1fff8e04 	.word	0x1fff8e04
    da24:	1fff8e0c 	.word	0x1fff8e0c

0000da28 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    da28:	b510      	push	{r4, lr}
    da2a:	b086      	sub	sp, #24
    da2c:	4604      	mov	r4, r0
    da2e:	4608      	mov	r0, r1
    da30:	4611      	mov	r1, r2
    da32:	461a      	mov	r2, r3
    da34:	4623      	mov	r3, r4
    da36:	f88d 300f 	strb.w	r3, [sp, #15]
    da3a:	4603      	mov	r3, r0
    da3c:	f88d 300e 	strb.w	r3, [sp, #14]
    da40:	460b      	mov	r3, r1
    da42:	f8ad 300c 	strh.w	r3, [sp, #12]
    da46:	4613      	mov	r3, r2
    da48:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    da4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da50:	085b      	lsrs	r3, r3, #1
    da52:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    da56:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da5a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    da5e:	492d      	ldr	r1, [pc, #180]	; (db14 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    da60:	0092      	lsls	r2, r2, #2
    da62:	4413      	add	r3, r2
    da64:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    da68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    da6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da70:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da74:	4928      	ldr	r1, [pc, #160]	; (db18 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    da76:	00d2      	lsls	r2, r2, #3
    da78:	4413      	add	r3, r2
    da7a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    da7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    da82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    da86:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    da8a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    da8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    da92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    da96:	4618      	mov	r0, r3
    da98:	f7fe fbc4 	bl	c224 <Ftm_Pwm_Ip_CalculatePhaseShift>
    da9c:	4603      	mov	r3, r0
    da9e:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    daa2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    daa6:	2b00      	cmp	r3, #0
    daa8:	d003      	beq.n	dab2 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    daaa:	2300      	movs	r3, #0
    daac:	f88d 3017 	strb.w	r3, [sp, #23]
    dab0:	e002      	b.n	dab8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    dab2:	2301      	movs	r3, #1
    dab4:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dab8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dabc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dac0:	4916      	ldr	r1, [pc, #88]	; (db1c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    dac2:	00d2      	lsls	r2, r2, #3
    dac4:	4413      	add	r3, r2
    dac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    daca:	2b02      	cmp	r3, #2
    dacc:	d111      	bne.n	daf2 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dace:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dad2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dad6:	4911      	ldr	r1, [pc, #68]	; (db1c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    dad8:	00d2      	lsls	r2, r2, #3
    dada:	4413      	add	r3, r2
    dadc:	2201      	movs	r2, #1
    dade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    dae2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dae6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    daea:	2300      	movs	r3, #0
    daec:	2200      	movs	r2, #0
    daee:	f7ff fb25 	bl	d13c <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    daf2:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    daf6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dafa:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dafe:	f89d 000f 	ldrb.w	r0, [sp, #15]
    db02:	f89d 3017 	ldrb.w	r3, [sp, #23]
    db06:	9300      	str	r3, [sp, #0]
    db08:	4623      	mov	r3, r4
    db0a:	f7ff fbdd 	bl	d2c8 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    db0e:	bf00      	nop
    db10:	b006      	add	sp, #24
    db12:	bd10      	pop	{r4, pc}
    db14:	1fff8e4c 	.word	0x1fff8e4c
    db18:	1fff8e0c 	.word	0x1fff8e0c
    db1c:	1fff8fdc 	.word	0x1fff8fdc

0000db20 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    db20:	b500      	push	{lr}
    db22:	b085      	sub	sp, #20
    db24:	4603      	mov	r3, r0
    db26:	9100      	str	r1, [sp, #0]
    db28:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    db2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db30:	4a07      	ldr	r2, [pc, #28]	; (db50 <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    db32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db36:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    db38:	f006 f928 	bl	13d8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    db3c:	9900      	ldr	r1, [sp, #0]
    db3e:	9803      	ldr	r0, [sp, #12]
    db40:	f7fd fdea 	bl	b718 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    db44:	f006 f94e 	bl	13de4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    db48:	bf00      	nop
    db4a:	b005      	add	sp, #20
    db4c:	f85d fb04 	ldr.w	pc, [sp], #4
    db50:	000156b4 	.word	0x000156b4

0000db54 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    db54:	b500      	push	{lr}
    db56:	b085      	sub	sp, #20
    db58:	4603      	mov	r3, r0
    db5a:	9100      	str	r1, [sp, #0]
    db5c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    db60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db64:	4a07      	ldr	r2, [pc, #28]	; (db84 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    db66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db6a:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    db6c:	f006 f960 	bl	13e30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    db70:	9900      	ldr	r1, [sp, #0]
    db72:	9803      	ldr	r0, [sp, #12]
    db74:	f7fd fddd 	bl	b732 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    db78:	f006 f986 	bl	13e88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    db7c:	bf00      	nop
    db7e:	b005      	add	sp, #20
    db80:	f85d fb04 	ldr.w	pc, [sp], #4
    db84:	000156b4 	.word	0x000156b4

0000db88 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    db88:	b500      	push	{lr}
    db8a:	b085      	sub	sp, #20
    db8c:	4603      	mov	r3, r0
    db8e:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    db92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db96:	4a08      	ldr	r2, [pc, #32]	; (dbb8 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    db98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db9c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    db9e:	f006 f999 	bl	13ed4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    dba2:	2101      	movs	r1, #1
    dba4:	9803      	ldr	r0, [sp, #12]
    dba6:	f7fd fc17 	bl	b3d8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    dbaa:	f006 f9bf 	bl	13f2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    dbae:	bf00      	nop
    dbb0:	b005      	add	sp, #20
    dbb2:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb6:	bf00      	nop
    dbb8:	000156b4 	.word	0x000156b4

0000dbbc <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    dbbc:	b500      	push	{lr}
    dbbe:	b085      	sub	sp, #20
    dbc0:	4603      	mov	r3, r0
    dbc2:	f88d 3007 	strb.w	r3, [sp, #7]
    dbc6:	460b      	mov	r3, r1
    dbc8:	f88d 3006 	strb.w	r3, [sp, #6]
    dbcc:	4613      	mov	r3, r2
    dbce:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dbd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbd6:	4a17      	ldr	r2, [pc, #92]	; (dc34 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    dbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbdc:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    dbde:	f006 f9cb 	bl	13f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    dbe2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dbe6:	2b3f      	cmp	r3, #63	; 0x3f
    dbe8:	d80b      	bhi.n	dc02 <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    dbea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dbee:	b2db      	uxtb	r3, r3
    dbf0:	4619      	mov	r1, r3
    dbf2:	9803      	ldr	r0, [sp, #12]
    dbf4:	f7fd fd42 	bl	b67c <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    dbf8:	2100      	movs	r1, #0
    dbfa:	9803      	ldr	r0, [sp, #12]
    dbfc:	f7fd fd62 	bl	b6c4 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    dc00:	e012      	b.n	dc28 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    dc02:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dc06:	b2db      	uxtb	r3, r3
    dc08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dc0c:	b2db      	uxtb	r3, r3
    dc0e:	4619      	mov	r1, r3
    dc10:	9803      	ldr	r0, [sp, #12]
    dc12:	f7fd fd33 	bl	b67c <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    dc16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dc1a:	099b      	lsrs	r3, r3, #6
    dc1c:	b29b      	uxth	r3, r3
    dc1e:	b2db      	uxtb	r3, r3
    dc20:	4619      	mov	r1, r3
    dc22:	9803      	ldr	r0, [sp, #12]
    dc24:	f7fd fd4e 	bl	b6c4 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    dc28:	f006 f9d2 	bl	13fd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    dc2c:	bf00      	nop
    dc2e:	b005      	add	sp, #20
    dc30:	f85d fb04 	ldr.w	pc, [sp], #4
    dc34:	000156b4 	.word	0x000156b4

0000dc38 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    dc38:	b082      	sub	sp, #8
    dc3a:	9001      	str	r0, [sp, #4]
    dc3c:	460b      	mov	r3, r1
    dc3e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    dc42:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    dc46:	4618      	mov	r0, r3
    dc48:	b002      	add	sp, #8
    dc4a:	4770      	bx	lr

0000dc4c <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    dc4c:	b510      	push	{r4, lr}
    dc4e:	b084      	sub	sp, #16
    dc50:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    dc52:	2300      	movs	r3, #0
    dc54:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    dc56:	493e      	ldr	r1, [pc, #248]	; (dd50 <Pwm_Init+0x104>)
    dc58:	9a02      	ldr	r2, [sp, #8]
    dc5a:	4613      	mov	r3, r2
    dc5c:	009b      	lsls	r3, r3, #2
    dc5e:	4413      	add	r3, r2
    dc60:	009b      	lsls	r3, r3, #2
    dc62:	440b      	add	r3, r1
    dc64:	9a01      	ldr	r2, [sp, #4]
    dc66:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    dc68:	2300      	movs	r3, #0
    dc6a:	f88d 300f 	strb.w	r3, [sp, #15]
    dc6e:	e017      	b.n	dca0 <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    dc70:	4937      	ldr	r1, [pc, #220]	; (dd50 <Pwm_Init+0x104>)
    dc72:	9a02      	ldr	r2, [sp, #8]
    dc74:	4613      	mov	r3, r2
    dc76:	009b      	lsls	r3, r3, #2
    dc78:	4413      	add	r3, r2
    dc7a:	009b      	lsls	r3, r3, #2
    dc7c:	440b      	add	r3, r1
    dc7e:	681b      	ldr	r3, [r3, #0]
    dc80:	68d9      	ldr	r1, [r3, #12]
    dc82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc86:	4613      	mov	r3, r2
    dc88:	005b      	lsls	r3, r3, #1
    dc8a:	4413      	add	r3, r2
    dc8c:	009b      	lsls	r3, r3, #2
    dc8e:	440b      	add	r3, r1
    dc90:	4618      	mov	r0, r3
    dc92:	f000 f9cd 	bl	e030 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    dc96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc9a:	3301      	adds	r3, #1
    dc9c:	f88d 300f 	strb.w	r3, [sp, #15]
    dca0:	492b      	ldr	r1, [pc, #172]	; (dd50 <Pwm_Init+0x104>)
    dca2:	9a02      	ldr	r2, [sp, #8]
    dca4:	4613      	mov	r3, r2
    dca6:	009b      	lsls	r3, r3, #2
    dca8:	4413      	add	r3, r2
    dcaa:	009b      	lsls	r3, r3, #2
    dcac:	440b      	add	r3, r1
    dcae:	681b      	ldr	r3, [r3, #0]
    dcb0:	7a1b      	ldrb	r3, [r3, #8]
    dcb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dcb6:	429a      	cmp	r2, r3
    dcb8:	d3da      	bcc.n	dc70 <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    dcba:	2300      	movs	r3, #0
    dcbc:	f88d 300f 	strb.w	r3, [sp, #15]
    dcc0:	e034      	b.n	dd2c <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    dcc2:	4923      	ldr	r1, [pc, #140]	; (dd50 <Pwm_Init+0x104>)
    dcc4:	9a02      	ldr	r2, [sp, #8]
    dcc6:	4613      	mov	r3, r2
    dcc8:	009b      	lsls	r3, r3, #2
    dcca:	4413      	add	r3, r2
    dccc:	009b      	lsls	r3, r3, #2
    dcce:	440b      	add	r3, r1
    dcd0:	681b      	ldr	r3, [r3, #0]
    dcd2:	6859      	ldr	r1, [r3, #4]
    dcd4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dcd8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dcdc:	4613      	mov	r3, r2
    dcde:	005b      	lsls	r3, r3, #1
    dce0:	4413      	add	r3, r2
    dce2:	00db      	lsls	r3, r3, #3
    dce4:	4419      	add	r1, r3
    dce6:	4c1a      	ldr	r4, [pc, #104]	; (dd50 <Pwm_Init+0x104>)
    dce8:	9a02      	ldr	r2, [sp, #8]
    dcea:	4613      	mov	r3, r2
    dcec:	009b      	lsls	r3, r3, #2
    dcee:	4413      	add	r3, r2
    dcf0:	4403      	add	r3, r0
    dcf2:	3302      	adds	r3, #2
    dcf4:	009b      	lsls	r3, r3, #2
    dcf6:	4423      	add	r3, r4
    dcf8:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    dcfa:	4915      	ldr	r1, [pc, #84]	; (dd50 <Pwm_Init+0x104>)
    dcfc:	9a02      	ldr	r2, [sp, #8]
    dcfe:	4613      	mov	r3, r2
    dd00:	009b      	lsls	r3, r3, #2
    dd02:	4413      	add	r3, r2
    dd04:	009b      	lsls	r3, r3, #2
    dd06:	440b      	add	r3, r1
    dd08:	681b      	ldr	r3, [r3, #0]
    dd0a:	6859      	ldr	r1, [r3, #4]
    dd0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd10:	4613      	mov	r3, r2
    dd12:	005b      	lsls	r3, r3, #1
    dd14:	4413      	add	r3, r2
    dd16:	00db      	lsls	r3, r3, #3
    dd18:	3308      	adds	r3, #8
    dd1a:	440b      	add	r3, r1
    dd1c:	4618      	mov	r0, r3
    dd1e:	f000 f965 	bl	dfec <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    dd22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd26:	3301      	adds	r3, #1
    dd28:	f88d 300f 	strb.w	r3, [sp, #15]
    dd2c:	4908      	ldr	r1, [pc, #32]	; (dd50 <Pwm_Init+0x104>)
    dd2e:	9a02      	ldr	r2, [sp, #8]
    dd30:	4613      	mov	r3, r2
    dd32:	009b      	lsls	r3, r3, #2
    dd34:	4413      	add	r3, r2
    dd36:	009b      	lsls	r3, r3, #2
    dd38:	440b      	add	r3, r1
    dd3a:	681b      	ldr	r3, [r3, #0]
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd42:	429a      	cmp	r2, r3
    dd44:	d3bd      	bcc.n	dcc2 <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    dd46:	bf00      	nop
    dd48:	bf00      	nop
    dd4a:	b004      	add	sp, #16
    dd4c:	bd10      	pop	{r4, pc}
    dd4e:	bf00      	nop
    dd50:	1fff8b38 	.word	0x1fff8b38

0000dd54 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    dd54:	b500      	push	{lr}
    dd56:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    dd58:	2300      	movs	r3, #0
    dd5a:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    dd5c:	2300      	movs	r3, #0
    dd5e:	f88d 300f 	strb.w	r3, [sp, #15]
    dd62:	e02a      	b.n	ddba <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    dd64:	4945      	ldr	r1, [pc, #276]	; (de7c <Pwm_DeInit+0x128>)
    dd66:	9a02      	ldr	r2, [sp, #8]
    dd68:	4613      	mov	r3, r2
    dd6a:	009b      	lsls	r3, r3, #2
    dd6c:	4413      	add	r3, r2
    dd6e:	009b      	lsls	r3, r3, #2
    dd70:	440b      	add	r3, r1
    dd72:	330c      	adds	r3, #12
    dd74:	6819      	ldr	r1, [r3, #0]
    dd76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd7a:	4613      	mov	r3, r2
    dd7c:	005b      	lsls	r3, r3, #1
    dd7e:	4413      	add	r3, r2
    dd80:	00db      	lsls	r3, r3, #3
    dd82:	440b      	add	r3, r1
    dd84:	f103 0008 	add.w	r0, r3, #8
    dd88:	493c      	ldr	r1, [pc, #240]	; (de7c <Pwm_DeInit+0x128>)
    dd8a:	9a02      	ldr	r2, [sp, #8]
    dd8c:	4613      	mov	r3, r2
    dd8e:	009b      	lsls	r3, r3, #2
    dd90:	4413      	add	r3, r2
    dd92:	009b      	lsls	r3, r3, #2
    dd94:	440b      	add	r3, r1
    dd96:	330c      	adds	r3, #12
    dd98:	6819      	ldr	r1, [r3, #0]
    dd9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd9e:	4613      	mov	r3, r2
    dda0:	005b      	lsls	r3, r3, #1
    dda2:	4413      	add	r3, r2
    dda4:	00db      	lsls	r3, r3, #3
    dda6:	440b      	add	r3, r1
    dda8:	695b      	ldr	r3, [r3, #20]
    ddaa:	4619      	mov	r1, r3
    ddac:	f000 f996 	bl	e0dc <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ddb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ddb4:	3301      	adds	r3, #1
    ddb6:	f88d 300f 	strb.w	r3, [sp, #15]
    ddba:	4930      	ldr	r1, [pc, #192]	; (de7c <Pwm_DeInit+0x128>)
    ddbc:	9a02      	ldr	r2, [sp, #8]
    ddbe:	4613      	mov	r3, r2
    ddc0:	009b      	lsls	r3, r3, #2
    ddc2:	4413      	add	r3, r2
    ddc4:	009b      	lsls	r3, r3, #2
    ddc6:	440b      	add	r3, r1
    ddc8:	681b      	ldr	r3, [r3, #0]
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ddd0:	429a      	cmp	r2, r3
    ddd2:	d3c7      	bcc.n	dd64 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    ddd4:	4929      	ldr	r1, [pc, #164]	; (de7c <Pwm_DeInit+0x128>)
    ddd6:	9a02      	ldr	r2, [sp, #8]
    ddd8:	4613      	mov	r3, r2
    ddda:	009b      	lsls	r3, r3, #2
    dddc:	4413      	add	r3, r2
    ddde:	009b      	lsls	r3, r3, #2
    dde0:	440b      	add	r3, r1
    dde2:	681b      	ldr	r3, [r3, #0]
    dde4:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    dde6:	2300      	movs	r3, #0
    dde8:	f88d 300f 	strb.w	r3, [sp, #15]
    ddec:	e010      	b.n	de10 <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    ddee:	9b01      	ldr	r3, [sp, #4]
    ddf0:	68d9      	ldr	r1, [r3, #12]
    ddf2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ddf6:	4613      	mov	r3, r2
    ddf8:	005b      	lsls	r3, r3, #1
    ddfa:	4413      	add	r3, r2
    ddfc:	009b      	lsls	r3, r3, #2
    ddfe:	440b      	add	r3, r1
    de00:	4618      	mov	r0, r3
    de02:	f000 f98b 	bl	e11c <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    de06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    de0a:	3301      	adds	r3, #1
    de0c:	f88d 300f 	strb.w	r3, [sp, #15]
    de10:	491a      	ldr	r1, [pc, #104]	; (de7c <Pwm_DeInit+0x128>)
    de12:	9a02      	ldr	r2, [sp, #8]
    de14:	4613      	mov	r3, r2
    de16:	009b      	lsls	r3, r3, #2
    de18:	4413      	add	r3, r2
    de1a:	009b      	lsls	r3, r3, #2
    de1c:	440b      	add	r3, r1
    de1e:	681b      	ldr	r3, [r3, #0]
    de20:	7a1b      	ldrb	r3, [r3, #8]
    de22:	f89d 200f 	ldrb.w	r2, [sp, #15]
    de26:	429a      	cmp	r2, r3
    de28:	d3e1      	bcc.n	ddee <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    de2a:	4914      	ldr	r1, [pc, #80]	; (de7c <Pwm_DeInit+0x128>)
    de2c:	9a02      	ldr	r2, [sp, #8]
    de2e:	4613      	mov	r3, r2
    de30:	009b      	lsls	r3, r3, #2
    de32:	4413      	add	r3, r2
    de34:	009b      	lsls	r3, r3, #2
    de36:	440b      	add	r3, r1
    de38:	2200      	movs	r2, #0
    de3a:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    de3c:	2300      	movs	r3, #0
    de3e:	f88d 300f 	strb.w	r3, [sp, #15]
    de42:	e011      	b.n	de68 <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    de44:	f89d 100f 	ldrb.w	r1, [sp, #15]
    de48:	480c      	ldr	r0, [pc, #48]	; (de7c <Pwm_DeInit+0x128>)
    de4a:	9a02      	ldr	r2, [sp, #8]
    de4c:	4613      	mov	r3, r2
    de4e:	009b      	lsls	r3, r3, #2
    de50:	4413      	add	r3, r2
    de52:	440b      	add	r3, r1
    de54:	3302      	adds	r3, #2
    de56:	009b      	lsls	r3, r3, #2
    de58:	4403      	add	r3, r0
    de5a:	2200      	movs	r2, #0
    de5c:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    de5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    de62:	3301      	adds	r3, #1
    de64:	f88d 300f 	strb.w	r3, [sp, #15]
    de68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    de6c:	2b00      	cmp	r3, #0
    de6e:	d0e9      	beq.n	de44 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    de70:	bf00      	nop
    de72:	bf00      	nop
    de74:	b005      	add	sp, #20
    de76:	f85d fb04 	ldr.w	pc, [sp], #4
    de7a:	bf00      	nop
    de7c:	1fff8b38 	.word	0x1fff8b38

0000de80 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    de80:	b500      	push	{lr}
    de82:	b087      	sub	sp, #28
    de84:	4603      	mov	r3, r0
    de86:	460a      	mov	r2, r1
    de88:	f88d 3007 	strb.w	r3, [sp, #7]
    de8c:	4613      	mov	r3, r2
    de8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    de92:	2300      	movs	r3, #0
    de94:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    de98:	2300      	movs	r3, #0
    de9a:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    de9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dea0:	4619      	mov	r1, r3
    dea2:	9804      	ldr	r0, [sp, #16]
    dea4:	f7ff fec8 	bl	dc38 <Pwm_GetPartitionChannelIdx>
    dea8:	4603      	mov	r3, r0
    deaa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    deae:	490f      	ldr	r1, [pc, #60]	; (deec <Pwm_SetDutyCycle+0x6c>)
    deb0:	9a04      	ldr	r2, [sp, #16]
    deb2:	4613      	mov	r3, r2
    deb4:	009b      	lsls	r3, r3, #2
    deb6:	4413      	add	r3, r2
    deb8:	009b      	lsls	r3, r3, #2
    deba:	440b      	add	r3, r1
    debc:	330c      	adds	r3, #12
    debe:	6819      	ldr	r1, [r3, #0]
    dec0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dec4:	4613      	mov	r3, r2
    dec6:	005b      	lsls	r3, r3, #1
    dec8:	4413      	add	r3, r2
    deca:	00db      	lsls	r3, r3, #3
    decc:	440b      	add	r3, r1
    dece:	f103 0208 	add.w	r2, r3, #8
    ded2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ded6:	4611      	mov	r1, r2
    ded8:	4618      	mov	r0, r3
    deda:	f000 f93b 	bl	e154 <Pwm_Ipw_SetDutyCycle>
    dede:	4603      	mov	r3, r0
    dee0:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    dee4:	bf00      	nop
    dee6:	b007      	add	sp, #28
    dee8:	f85d fb04 	ldr.w	pc, [sp], #4
    deec:	1fff8b38 	.word	0x1fff8b38

0000def0 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    def0:	b500      	push	{lr}
    def2:	b085      	sub	sp, #20
    def4:	4603      	mov	r3, r0
    def6:	f88d 3007 	strb.w	r3, [sp, #7]
    defa:	460b      	mov	r3, r1
    defc:	f8ad 3004 	strh.w	r3, [sp, #4]
    df00:	4613      	mov	r3, r2
    df02:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    df06:	2300      	movs	r3, #0
    df08:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    df0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df0e:	4619      	mov	r1, r3
    df10:	9803      	ldr	r0, [sp, #12]
    df12:	f7ff fe91 	bl	dc38 <Pwm_GetPartitionChannelIdx>
    df16:	4603      	mov	r3, r0
    df18:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    df1c:	490e      	ldr	r1, [pc, #56]	; (df58 <Pwm_SetPeriodAndDuty+0x68>)
    df1e:	9a03      	ldr	r2, [sp, #12]
    df20:	4613      	mov	r3, r2
    df22:	009b      	lsls	r3, r3, #2
    df24:	4413      	add	r3, r2
    df26:	009b      	lsls	r3, r3, #2
    df28:	440b      	add	r3, r1
    df2a:	330c      	adds	r3, #12
    df2c:	6819      	ldr	r1, [r3, #0]
    df2e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    df32:	4613      	mov	r3, r2
    df34:	005b      	lsls	r3, r3, #1
    df36:	4413      	add	r3, r2
    df38:	00db      	lsls	r3, r3, #3
    df3a:	440b      	add	r3, r1
    df3c:	f103 0208 	add.w	r2, r3, #8
    df40:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    df44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    df48:	4618      	mov	r0, r3
    df4a:	f000 f94f 	bl	e1ec <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    df4e:	bf00      	nop
    df50:	b005      	add	sp, #20
    df52:	f85d fb04 	ldr.w	pc, [sp], #4
    df56:	bf00      	nop
    df58:	1fff8b38 	.word	0x1fff8b38

0000df5c <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
    df5c:	b500      	push	{lr}
    df5e:	b085      	sub	sp, #20
    df60:	4603      	mov	r3, r0
    df62:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    df66:	2300      	movs	r3, #0
    df68:	9303      	str	r3, [sp, #12]
#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    df6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df6e:	4619      	mov	r1, r3
    df70:	9803      	ldr	r0, [sp, #12]
    df72:	f7ff fe61 	bl	dc38 <Pwm_GetPartitionChannelIdx>
    df76:	4603      	mov	r3, r0
    df78:	f88d 300b 	strb.w	r3, [sp, #11]
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    df7c:	491a      	ldr	r1, [pc, #104]	; (dfe8 <Pwm_SetOutputToIdle+0x8c>)
    df7e:	9a03      	ldr	r2, [sp, #12]
    df80:	4613      	mov	r3, r2
    df82:	009b      	lsls	r3, r3, #2
    df84:	4413      	add	r3, r2
    df86:	009b      	lsls	r3, r3, #2
    df88:	440b      	add	r3, r1
    df8a:	330c      	adds	r3, #12
    df8c:	6819      	ldr	r1, [r3, #0]
    df8e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    df92:	4613      	mov	r3, r2
    df94:	005b      	lsls	r3, r3, #1
    df96:	4413      	add	r3, r2
    df98:	00db      	lsls	r3, r3, #3
    df9a:	440b      	add	r3, r1
    df9c:	6958      	ldr	r0, [r3, #20]
    df9e:	4912      	ldr	r1, [pc, #72]	; (dfe8 <Pwm_SetOutputToIdle+0x8c>)
    dfa0:	9a03      	ldr	r2, [sp, #12]
    dfa2:	4613      	mov	r3, r2
    dfa4:	009b      	lsls	r3, r3, #2
    dfa6:	4413      	add	r3, r2
    dfa8:	009b      	lsls	r3, r3, #2
    dfaa:	440b      	add	r3, r1
    dfac:	330c      	adds	r3, #12
    dfae:	6819      	ldr	r1, [r3, #0]
    dfb0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    dfb4:	4613      	mov	r3, r2
    dfb6:	005b      	lsls	r3, r3, #1
    dfb8:	4413      	add	r3, r2
    dfba:	00db      	lsls	r3, r3, #3
    dfbc:	440b      	add	r3, r1
    dfbe:	3308      	adds	r3, #8
    dfc0:	4619      	mov	r1, r3
    dfc2:	f000 f959 	bl	e278 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
    dfc6:	f89d 100b 	ldrb.w	r1, [sp, #11]
    dfca:	4807      	ldr	r0, [pc, #28]	; (dfe8 <Pwm_SetOutputToIdle+0x8c>)
    dfcc:	9a03      	ldr	r2, [sp, #12]
    dfce:	4613      	mov	r3, r2
    dfd0:	009b      	lsls	r3, r3, #2
    dfd2:	4413      	add	r3, r2
    dfd4:	009b      	lsls	r3, r3, #2
    dfd6:	4403      	add	r3, r0
    dfd8:	440b      	add	r3, r1
    dfda:	3310      	adds	r3, #16
    dfdc:	2201      	movs	r2, #1
    dfde:	701a      	strb	r2, [r3, #0]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    dfe0:	bf00      	nop
    dfe2:	b005      	add	sp, #20
    dfe4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfe8:	1fff8b38 	.word	0x1fff8b38

0000dfec <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    dfec:	b410      	push	{r4}
    dfee:	b083      	sub	sp, #12
    dff0:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    dff2:	9b01      	ldr	r3, [sp, #4]
    dff4:	681b      	ldr	r3, [r3, #0]
    dff6:	2b00      	cmp	r3, #0
    dff8:	d010      	beq.n	e01c <Pwm_Ipw_Init+0x30>
    dffa:	2b01      	cmp	r3, #1
    dffc:	d110      	bne.n	e020 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    dffe:	9b01      	ldr	r3, [sp, #4]
    e000:	7a1b      	ldrb	r3, [r3, #8]
    e002:	461c      	mov	r4, r3
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	685b      	ldr	r3, [r3, #4]
    e008:	781b      	ldrb	r3, [r3, #0]
    e00a:	4618      	mov	r0, r3
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	8959      	ldrh	r1, [r3, #10]
    e010:	4a06      	ldr	r2, [pc, #24]	; (e02c <Pwm_Ipw_Init+0x40>)
    e012:	00e3      	lsls	r3, r4, #3
    e014:	4403      	add	r3, r0
    e016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    e01a:	e002      	b.n	e022 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    e01c:	bf00      	nop
    e01e:	e000      	b.n	e022 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    e020:	bf00      	nop
    }
}
    e022:	bf00      	nop
    e024:	b003      	add	sp, #12
    e026:	f85d 4b04 	ldr.w	r4, [sp], #4
    e02a:	4770      	bx	lr
    e02c:	1fff91ac 	.word	0x1fff91ac

0000e030 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    e030:	b500      	push	{lr}
    e032:	b085      	sub	sp, #20
    e034:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    e036:	2300      	movs	r3, #0
    e038:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    e03c:	2300      	movs	r3, #0
    e03e:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    e042:	9b01      	ldr	r3, [sp, #4]
    e044:	685b      	ldr	r3, [r3, #4]
    e046:	2b00      	cmp	r3, #0
    e048:	d03c      	beq.n	e0c4 <Pwm_Ipw_InitInstance+0x94>
    e04a:	2b01      	cmp	r3, #1
    e04c:	d13c      	bne.n	e0c8 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    e04e:	9b01      	ldr	r3, [sp, #4]
    e050:	689b      	ldr	r3, [r3, #8]
    e052:	2b00      	cmp	r3, #0
    e054:	d03a      	beq.n	e0cc <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    e056:	9b01      	ldr	r3, [sp, #4]
    e058:	781a      	ldrb	r2, [r3, #0]
    e05a:	9b01      	ldr	r3, [sp, #4]
    e05c:	689b      	ldr	r3, [r3, #8]
    e05e:	4619      	mov	r1, r3
    e060:	4610      	mov	r0, r2
    e062:	f7fe fe8f 	bl	cd84 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    e066:	2300      	movs	r3, #0
    e068:	f88d 300f 	strb.w	r3, [sp, #15]
    e06c:	e022      	b.n	e0b4 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    e06e:	9b01      	ldr	r3, [sp, #4]
    e070:	689b      	ldr	r3, [r3, #8]
    e072:	685a      	ldr	r2, [r3, #4]
    e074:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e078:	009b      	lsls	r3, r3, #2
    e07a:	4413      	add	r3, r2
    e07c:	681b      	ldr	r3, [r3, #0]
    e07e:	781b      	ldrb	r3, [r3, #0]
    e080:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    e084:	9b01      	ldr	r3, [sp, #4]
    e086:	689b      	ldr	r3, [r3, #8]
    e088:	685a      	ldr	r2, [r3, #4]
    e08a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e08e:	009b      	lsls	r3, r3, #2
    e090:	4413      	add	r3, r2
    e092:	681a      	ldr	r2, [r3, #0]
    e094:	9b01      	ldr	r3, [sp, #4]
    e096:	781b      	ldrb	r3, [r3, #0]
    e098:	4619      	mov	r1, r3
    e09a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e09e:	6a12      	ldr	r2, [r2, #32]
    e0a0:	480d      	ldr	r0, [pc, #52]	; (e0d8 <Pwm_Ipw_InitInstance+0xa8>)
    e0a2:	00c9      	lsls	r1, r1, #3
    e0a4:	440b      	add	r3, r1
    e0a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    e0aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e0ae:	3301      	adds	r3, #1
    e0b0:	f88d 300f 	strb.w	r3, [sp, #15]
    e0b4:	9b01      	ldr	r3, [sp, #4]
    e0b6:	689b      	ldr	r3, [r3, #8]
    e0b8:	7a1b      	ldrb	r3, [r3, #8]
    e0ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e0be:	429a      	cmp	r2, r3
    e0c0:	d3d5      	bcc.n	e06e <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    e0c2:	e003      	b.n	e0cc <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    e0c4:	bf00      	nop
    e0c6:	e002      	b.n	e0ce <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    e0c8:	bf00      	nop
    e0ca:	e000      	b.n	e0ce <Pwm_Ipw_InitInstance+0x9e>
            break;
    e0cc:	bf00      	nop
    }
}
    e0ce:	bf00      	nop
    e0d0:	b005      	add	sp, #20
    e0d2:	f85d fb04 	ldr.w	pc, [sp], #4
    e0d6:	bf00      	nop
    e0d8:	1fff912c 	.word	0x1fff912c

0000e0dc <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    e0dc:	b082      	sub	sp, #8
    e0de:	9001      	str	r0, [sp, #4]
    e0e0:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    e0e2:	9b01      	ldr	r3, [sp, #4]
    e0e4:	681b      	ldr	r3, [r3, #0]
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d00f      	beq.n	e10a <Pwm_Ipw_DeInit+0x2e>
    e0ea:	2b01      	cmp	r3, #1
    e0ec:	d10f      	bne.n	e10e <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    e0ee:	9b01      	ldr	r3, [sp, #4]
    e0f0:	7a1b      	ldrb	r3, [r3, #8]
    e0f2:	4618      	mov	r0, r3
    e0f4:	9b01      	ldr	r3, [sp, #4]
    e0f6:	685b      	ldr	r3, [r3, #4]
    e0f8:	781b      	ldrb	r3, [r3, #0]
    e0fa:	4619      	mov	r1, r3
    e0fc:	4a06      	ldr	r2, [pc, #24]	; (e118 <Pwm_Ipw_DeInit+0x3c>)
    e0fe:	00c3      	lsls	r3, r0, #3
    e100:	440b      	add	r3, r1
    e102:	2100      	movs	r1, #0
    e104:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    e108:	e002      	b.n	e110 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    e10a:	bf00      	nop
    e10c:	e000      	b.n	e110 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    e10e:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    e110:	bf00      	nop
    e112:	b002      	add	sp, #8
    e114:	4770      	bx	lr
    e116:	bf00      	nop
    e118:	1fff91ac 	.word	0x1fff91ac

0000e11c <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    e11c:	b500      	push	{lr}
    e11e:	b083      	sub	sp, #12
    e120:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    e122:	9b01      	ldr	r3, [sp, #4]
    e124:	685b      	ldr	r3, [r3, #4]
    e126:	2b00      	cmp	r3, #0
    e128:	d00b      	beq.n	e142 <Pwm_Ipw_DeInitInstance+0x26>
    e12a:	2b01      	cmp	r3, #1
    e12c:	d10b      	bne.n	e146 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    e12e:	9b01      	ldr	r3, [sp, #4]
    e130:	689b      	ldr	r3, [r3, #8]
    e132:	2b00      	cmp	r3, #0
    e134:	d009      	beq.n	e14a <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    e136:	9b01      	ldr	r3, [sp, #4]
    e138:	781b      	ldrb	r3, [r3, #0]
    e13a:	4618      	mov	r0, r3
    e13c:	f7fe fe80 	bl	ce40 <Ftm_Pwm_Ip_DeInit>
            }
            break;
    e140:	e003      	b.n	e14a <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    e142:	bf00      	nop
    e144:	e002      	b.n	e14c <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    e146:	bf00      	nop
    e148:	e000      	b.n	e14c <Pwm_Ipw_DeInitInstance+0x30>
            break;
    e14a:	bf00      	nop
    }
}
    e14c:	bf00      	nop
    e14e:	b003      	add	sp, #12
    e150:	f85d fb04 	ldr.w	pc, [sp], #4

0000e154 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    e154:	b500      	push	{lr}
    e156:	b085      	sub	sp, #20
    e158:	4603      	mov	r3, r0
    e15a:	9100      	str	r1, [sp, #0]
    e15c:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    e160:	2300      	movs	r3, #0
    e162:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    e166:	2300      	movs	r3, #0
    e168:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    e16c:	9b00      	ldr	r3, [sp, #0]
    e16e:	681b      	ldr	r3, [r3, #0]
    e170:	2b00      	cmp	r3, #0
    e172:	d02c      	beq.n	e1ce <Pwm_Ipw_SetDutyCycle+0x7a>
    e174:	2b01      	cmp	r3, #1
    e176:	d12c      	bne.n	e1d2 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    e178:	9b00      	ldr	r3, [sp, #0]
    e17a:	685b      	ldr	r3, [r3, #4]
    e17c:	2b00      	cmp	r3, #0
    e17e:	d02a      	beq.n	e1d6 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    e180:	9b00      	ldr	r3, [sp, #0]
    e182:	7a1b      	ldrb	r3, [r3, #8]
    e184:	461a      	mov	r2, r3
    e186:	4b17      	ldr	r3, [pc, #92]	; (e1e4 <Pwm_Ipw_SetDutyCycle+0x90>)
    e188:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    e18c:	461a      	mov	r2, r3
    e18e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e192:	fb02 f303 	mul.w	r3, r2, r3
    e196:	0bdb      	lsrs	r3, r3, #15
    e198:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    e19c:	9b00      	ldr	r3, [sp, #0]
    e19e:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    e1a0:	9b00      	ldr	r3, [sp, #0]
    e1a2:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    e1a4:	7819      	ldrb	r1, [r3, #0]
    e1a6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e1aa:	2301      	movs	r3, #1
    e1ac:	f7fe fe90 	bl	ced0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    e1b0:	9b00      	ldr	r3, [sp, #0]
    e1b2:	7a1b      	ldrb	r3, [r3, #8]
    e1b4:	4618      	mov	r0, r3
    e1b6:	9b00      	ldr	r3, [sp, #0]
    e1b8:	685b      	ldr	r3, [r3, #4]
    e1ba:	781b      	ldrb	r3, [r3, #0]
    e1bc:	461a      	mov	r2, r3
    e1be:	490a      	ldr	r1, [pc, #40]	; (e1e8 <Pwm_Ipw_SetDutyCycle+0x94>)
    e1c0:	00c3      	lsls	r3, r0, #3
    e1c2:	4413      	add	r3, r2
    e1c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    e1c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    e1cc:	e003      	b.n	e1d6 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    e1ce:	bf00      	nop
    e1d0:	e002      	b.n	e1d8 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    e1d2:	bf00      	nop
    e1d4:	e000      	b.n	e1d8 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    e1d6:	bf00      	nop
    }

    return RetVal;
    e1d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e1dc:	4618      	mov	r0, r3
    e1de:	b005      	add	sp, #20
    e1e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1e4:	1fff8e04 	.word	0x1fff8e04
    e1e8:	1fff91ac 	.word	0x1fff91ac

0000e1ec <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    e1ec:	b510      	push	{r4, lr}
    e1ee:	b086      	sub	sp, #24
    e1f0:	4603      	mov	r3, r0
    e1f2:	9202      	str	r2, [sp, #8]
    e1f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    e1f8:	460b      	mov	r3, r1
    e1fa:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    e1fe:	2300      	movs	r3, #0
    e200:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    e204:	9b02      	ldr	r3, [sp, #8]
    e206:	681b      	ldr	r3, [r3, #0]
    e208:	2b00      	cmp	r3, #0
    e20a:	d02a      	beq.n	e262 <Pwm_Ipw_SetPeriodAndDuty+0x76>
    e20c:	2b01      	cmp	r3, #1
    e20e:	d12a      	bne.n	e266 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    e210:	9b02      	ldr	r3, [sp, #8]
    e212:	685b      	ldr	r3, [r3, #4]
    e214:	2b00      	cmp	r3, #0
    e216:	d028      	beq.n	e26a <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    e218:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e21c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e220:	fb02 f303 	mul.w	r3, r2, r3
    e224:	0bdb      	lsrs	r3, r3, #15
    e226:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    e22a:	9b02      	ldr	r3, [sp, #8]
    e22c:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    e22e:	9b02      	ldr	r3, [sp, #8]
    e230:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    e232:	7819      	ldrb	r1, [r3, #0]
    e234:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    e238:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    e23c:	2401      	movs	r4, #1
    e23e:	9400      	str	r4, [sp, #0]
    e240:	f7fe ff0c 	bl	d05c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    e244:	9b02      	ldr	r3, [sp, #8]
    e246:	7a1b      	ldrb	r3, [r3, #8]
    e248:	4618      	mov	r0, r3
    e24a:	9b02      	ldr	r3, [sp, #8]
    e24c:	685b      	ldr	r3, [r3, #4]
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	461a      	mov	r2, r3
    e252:	4908      	ldr	r1, [pc, #32]	; (e274 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    e254:	00c3      	lsls	r3, r0, #3
    e256:	4413      	add	r3, r2
    e258:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e25c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    e260:	e003      	b.n	e26a <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    e262:	bf00      	nop
    e264:	e002      	b.n	e26c <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    e266:	bf00      	nop
    e268:	e000      	b.n	e26c <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    e26a:	bf00      	nop
    }
}
    e26c:	bf00      	nop
    e26e:	b006      	add	sp, #24
    e270:	bd10      	pop	{r4, pc}
    e272:	bf00      	nop
    e274:	1fff91ac 	.word	0x1fff91ac

0000e278 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
    e278:	b500      	push	{lr}
    e27a:	b085      	sub	sp, #20
    e27c:	9001      	str	r0, [sp, #4]
    e27e:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
    e280:	9b00      	ldr	r3, [sp, #0]
    e282:	7a1b      	ldrb	r3, [r3, #8]
    e284:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
    e288:	9b00      	ldr	r3, [sp, #0]
    e28a:	685b      	ldr	r3, [r3, #4]
    e28c:	781b      	ldrb	r3, [r3, #0]
    e28e:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
    e292:	9b00      	ldr	r3, [sp, #0]
    e294:	681b      	ldr	r3, [r3, #0]
    e296:	2b00      	cmp	r3, #0
    e298:	d02e      	beq.n	e2f8 <Pwm_Ipw_SetOutputToIdle+0x80>
    e29a:	2b01      	cmp	r3, #1
    e29c:	d12e      	bne.n	e2fc <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    e29e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e2a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e2a6:	4919      	ldr	r1, [pc, #100]	; (e30c <Pwm_Ipw_SetOutputToIdle+0x94>)
    e2a8:	00d2      	lsls	r2, r2, #3
    e2aa:	4413      	add	r3, r2
    e2ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e2b0:	2b01      	cmp	r3, #1
    e2b2:	d125      	bne.n	e300 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
    e2b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e2b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e2bc:	4913      	ldr	r1, [pc, #76]	; (e30c <Pwm_Ipw_SetOutputToIdle+0x94>)
    e2be:	00d2      	lsls	r2, r2, #3
    e2c0:	4413      	add	r3, r2
    e2c2:	2202      	movs	r2, #2
    e2c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
    e2c8:	9b00      	ldr	r3, [sp, #0]
    e2ca:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
    e2cc:	69da      	ldr	r2, [r3, #28]
    e2ce:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e2d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e2d6:	2301      	movs	r3, #1
    e2d8:	f7fe ff30 	bl	d13c <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    e2dc:	9b00      	ldr	r3, [sp, #0]
    e2de:	7a1b      	ldrb	r3, [r3, #8]
    e2e0:	4618      	mov	r0, r3
    e2e2:	9b00      	ldr	r3, [sp, #0]
    e2e4:	685b      	ldr	r3, [r3, #4]
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	4619      	mov	r1, r3
    e2ea:	4a09      	ldr	r2, [pc, #36]	; (e310 <Pwm_Ipw_SetOutputToIdle+0x98>)
    e2ec:	00c3      	lsls	r3, r0, #3
    e2ee:	440b      	add	r3, r1
    e2f0:	2100      	movs	r1, #0
    e2f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
    e2f6:	e003      	b.n	e300 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    e2f8:	bf00      	nop
    e2fa:	e002      	b.n	e302 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
    e2fc:	bf00      	nop
    e2fe:	e000      	b.n	e302 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
    e300:	bf00      	nop
    }

    (void) IdleState;

}
    e302:	bf00      	nop
    e304:	b005      	add	sp, #20
    e306:	f85d fb04 	ldr.w	pc, [sp], #4
    e30a:	bf00      	nop
    e30c:	1fff8fdc 	.word	0x1fff8fdc
    e310:	1fff91ac 	.word	0x1fff91ac

0000e314 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    e314:	b084      	sub	sp, #16
    e316:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    e318:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e31c:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    e31e:	9b01      	ldr	r3, [sp, #4]
    e320:	681b      	ldr	r3, [r3, #0]
    e322:	2b01      	cmp	r3, #1
    e324:	d103      	bne.n	e32e <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    e326:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    e32a:	9303      	str	r3, [sp, #12]
            break;
    e32c:	e000      	b.n	e330 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    e32e:	bf00      	nop
    }

    return RetVal;
    e330:	9b03      	ldr	r3, [sp, #12]
}
    e332:	4618      	mov	r0, r3
    e334:	b004      	add	sp, #16
    e336:	4770      	bx	lr

0000e338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    e338:	b500      	push	{lr}
    e33a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e33c:	f7f3 f8a6 	bl	148c <Sys_GetCoreID>
    e340:	4603      	mov	r3, r0
    e342:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    e344:	4a10      	ldr	r2, [pc, #64]	; (e388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    e346:	9b01      	ldr	r3, [sp, #4]
    e348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e34c:	2b00      	cmp	r3, #0
    e34e:	d10d      	bne.n	e36c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e350:	f7f2 fabc 	bl	8cc <Adc_schm_read_msr>
    e354:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e356:	9b00      	ldr	r3, [sp, #0]
    e358:	f003 0301 	and.w	r3, r3, #1
    e35c:	2b00      	cmp	r3, #0
    e35e:	d100      	bne.n	e362 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e360:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e362:	490a      	ldr	r1, [pc, #40]	; (e38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    e364:	9b01      	ldr	r3, [sp, #4]
    e366:	9a00      	ldr	r2, [sp, #0]
    e368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    e36c:	4a06      	ldr	r2, [pc, #24]	; (e388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    e36e:	9b01      	ldr	r3, [sp, #4]
    e370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e374:	1c5a      	adds	r2, r3, #1
    e376:	4904      	ldr	r1, [pc, #16]	; (e388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    e378:	9b01      	ldr	r3, [sp, #4]
    e37a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e37e:	bf00      	nop
    e380:	b003      	add	sp, #12
    e382:	f85d fb04 	ldr.w	pc, [sp], #4
    e386:	bf00      	nop
    e388:	1fff91f0 	.word	0x1fff91f0
    e38c:	1fff91ec 	.word	0x1fff91ec

0000e390 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    e390:	b500      	push	{lr}
    e392:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e394:	f7f3 f87a 	bl	148c <Sys_GetCoreID>
    e398:	4603      	mov	r3, r0
    e39a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    e39c:	4a0d      	ldr	r2, [pc, #52]	; (e3d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    e39e:	9b01      	ldr	r3, [sp, #4]
    e3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a4:	1e5a      	subs	r2, r3, #1
    e3a6:	490b      	ldr	r1, [pc, #44]	; (e3d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    e3a8:	9b01      	ldr	r3, [sp, #4]
    e3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e3ae:	4a0a      	ldr	r2, [pc, #40]	; (e3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    e3b0:	9b01      	ldr	r3, [sp, #4]
    e3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3b6:	f003 0301 	and.w	r3, r3, #1
    e3ba:	2b00      	cmp	r3, #0
    e3bc:	d106      	bne.n	e3cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    e3be:	4a05      	ldr	r2, [pc, #20]	; (e3d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    e3c0:	9b01      	ldr	r3, [sp, #4]
    e3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3c6:	2b00      	cmp	r3, #0
    e3c8:	d100      	bne.n	e3cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3cc:	bf00      	nop
    e3ce:	b003      	add	sp, #12
    e3d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3d4:	1fff91f0 	.word	0x1fff91f0
    e3d8:	1fff91ec 	.word	0x1fff91ec

0000e3dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    e3dc:	b500      	push	{lr}
    e3de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3e0:	f7f3 f854 	bl	148c <Sys_GetCoreID>
    e3e4:	4603      	mov	r3, r0
    e3e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    e3e8:	4a10      	ldr	r2, [pc, #64]	; (e42c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    e3ea:	9b01      	ldr	r3, [sp, #4]
    e3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d10d      	bne.n	e410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3f4:	f7f2 fa6a 	bl	8cc <Adc_schm_read_msr>
    e3f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3fa:	9b00      	ldr	r3, [sp, #0]
    e3fc:	f003 0301 	and.w	r3, r3, #1
    e400:	2b00      	cmp	r3, #0
    e402:	d100      	bne.n	e406 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e404:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e406:	490a      	ldr	r1, [pc, #40]	; (e430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    e408:	9b01      	ldr	r3, [sp, #4]
    e40a:	9a00      	ldr	r2, [sp, #0]
    e40c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    e410:	4a06      	ldr	r2, [pc, #24]	; (e42c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    e412:	9b01      	ldr	r3, [sp, #4]
    e414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e418:	1c5a      	adds	r2, r3, #1
    e41a:	4904      	ldr	r1, [pc, #16]	; (e42c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    e41c:	9b01      	ldr	r3, [sp, #4]
    e41e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e422:	bf00      	nop
    e424:	b003      	add	sp, #12
    e426:	f85d fb04 	ldr.w	pc, [sp], #4
    e42a:	bf00      	nop
    e42c:	1fff91f8 	.word	0x1fff91f8
    e430:	1fff91f4 	.word	0x1fff91f4

0000e434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    e434:	b500      	push	{lr}
    e436:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e438:	f7f3 f828 	bl	148c <Sys_GetCoreID>
    e43c:	4603      	mov	r3, r0
    e43e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    e440:	4a0d      	ldr	r2, [pc, #52]	; (e478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    e442:	9b01      	ldr	r3, [sp, #4]
    e444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e448:	1e5a      	subs	r2, r3, #1
    e44a:	490b      	ldr	r1, [pc, #44]	; (e478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    e44c:	9b01      	ldr	r3, [sp, #4]
    e44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e452:	4a0a      	ldr	r2, [pc, #40]	; (e47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    e454:	9b01      	ldr	r3, [sp, #4]
    e456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e45a:	f003 0301 	and.w	r3, r3, #1
    e45e:	2b00      	cmp	r3, #0
    e460:	d106      	bne.n	e470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    e462:	4a05      	ldr	r2, [pc, #20]	; (e478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    e464:	9b01      	ldr	r3, [sp, #4]
    e466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e46a:	2b00      	cmp	r3, #0
    e46c:	d100      	bne.n	e470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e46e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e470:	bf00      	nop
    e472:	b003      	add	sp, #12
    e474:	f85d fb04 	ldr.w	pc, [sp], #4
    e478:	1fff91f8 	.word	0x1fff91f8
    e47c:	1fff91f4 	.word	0x1fff91f4

0000e480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    e480:	b500      	push	{lr}
    e482:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e484:	f7f3 f802 	bl	148c <Sys_GetCoreID>
    e488:	4603      	mov	r3, r0
    e48a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    e48c:	4a10      	ldr	r2, [pc, #64]	; (e4d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    e48e:	9b01      	ldr	r3, [sp, #4]
    e490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e494:	2b00      	cmp	r3, #0
    e496:	d10d      	bne.n	e4b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e498:	f7f2 fa18 	bl	8cc <Adc_schm_read_msr>
    e49c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e49e:	9b00      	ldr	r3, [sp, #0]
    e4a0:	f003 0301 	and.w	r3, r3, #1
    e4a4:	2b00      	cmp	r3, #0
    e4a6:	d100      	bne.n	e4aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e4aa:	490a      	ldr	r1, [pc, #40]	; (e4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    e4ac:	9b01      	ldr	r3, [sp, #4]
    e4ae:	9a00      	ldr	r2, [sp, #0]
    e4b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    e4b4:	4a06      	ldr	r2, [pc, #24]	; (e4d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    e4b6:	9b01      	ldr	r3, [sp, #4]
    e4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4bc:	1c5a      	adds	r2, r3, #1
    e4be:	4904      	ldr	r1, [pc, #16]	; (e4d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    e4c0:	9b01      	ldr	r3, [sp, #4]
    e4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4c6:	bf00      	nop
    e4c8:	b003      	add	sp, #12
    e4ca:	f85d fb04 	ldr.w	pc, [sp], #4
    e4ce:	bf00      	nop
    e4d0:	1fff9200 	.word	0x1fff9200
    e4d4:	1fff91fc 	.word	0x1fff91fc

0000e4d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    e4d8:	b500      	push	{lr}
    e4da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4dc:	f7f2 ffd6 	bl	148c <Sys_GetCoreID>
    e4e0:	4603      	mov	r3, r0
    e4e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    e4e4:	4a0d      	ldr	r2, [pc, #52]	; (e51c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    e4e6:	9b01      	ldr	r3, [sp, #4]
    e4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ec:	1e5a      	subs	r2, r3, #1
    e4ee:	490b      	ldr	r1, [pc, #44]	; (e51c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    e4f0:	9b01      	ldr	r3, [sp, #4]
    e4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e4f6:	4a0a      	ldr	r2, [pc, #40]	; (e520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    e4f8:	9b01      	ldr	r3, [sp, #4]
    e4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4fe:	f003 0301 	and.w	r3, r3, #1
    e502:	2b00      	cmp	r3, #0
    e504:	d106      	bne.n	e514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    e506:	4a05      	ldr	r2, [pc, #20]	; (e51c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    e508:	9b01      	ldr	r3, [sp, #4]
    e50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e50e:	2b00      	cmp	r3, #0
    e510:	d100      	bne.n	e514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e512:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e514:	bf00      	nop
    e516:	b003      	add	sp, #12
    e518:	f85d fb04 	ldr.w	pc, [sp], #4
    e51c:	1fff9200 	.word	0x1fff9200
    e520:	1fff91fc 	.word	0x1fff91fc

0000e524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    e524:	b500      	push	{lr}
    e526:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e528:	f7f2 ffb0 	bl	148c <Sys_GetCoreID>
    e52c:	4603      	mov	r3, r0
    e52e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    e530:	4a10      	ldr	r2, [pc, #64]	; (e574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    e532:	9b01      	ldr	r3, [sp, #4]
    e534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e538:	2b00      	cmp	r3, #0
    e53a:	d10d      	bne.n	e558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e53c:	f7f2 f9c6 	bl	8cc <Adc_schm_read_msr>
    e540:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e542:	9b00      	ldr	r3, [sp, #0]
    e544:	f003 0301 	and.w	r3, r3, #1
    e548:	2b00      	cmp	r3, #0
    e54a:	d100      	bne.n	e54e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e54c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    e54e:	490a      	ldr	r1, [pc, #40]	; (e578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    e550:	9b01      	ldr	r3, [sp, #4]
    e552:	9a00      	ldr	r2, [sp, #0]
    e554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    e558:	4a06      	ldr	r2, [pc, #24]	; (e574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    e55a:	9b01      	ldr	r3, [sp, #4]
    e55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e560:	1c5a      	adds	r2, r3, #1
    e562:	4904      	ldr	r1, [pc, #16]	; (e574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    e564:	9b01      	ldr	r3, [sp, #4]
    e566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e56a:	bf00      	nop
    e56c:	b003      	add	sp, #12
    e56e:	f85d fb04 	ldr.w	pc, [sp], #4
    e572:	bf00      	nop
    e574:	1fff9208 	.word	0x1fff9208
    e578:	1fff9204 	.word	0x1fff9204

0000e57c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    e57c:	b500      	push	{lr}
    e57e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e580:	f7f2 ff84 	bl	148c <Sys_GetCoreID>
    e584:	4603      	mov	r3, r0
    e586:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    e588:	4a0d      	ldr	r2, [pc, #52]	; (e5c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    e58a:	9b01      	ldr	r3, [sp, #4]
    e58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e590:	1e5a      	subs	r2, r3, #1
    e592:	490b      	ldr	r1, [pc, #44]	; (e5c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    e594:	9b01      	ldr	r3, [sp, #4]
    e596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    e59a:	4a0a      	ldr	r2, [pc, #40]	; (e5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    e59c:	9b01      	ldr	r3, [sp, #4]
    e59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5a2:	f003 0301 	and.w	r3, r3, #1
    e5a6:	2b00      	cmp	r3, #0
    e5a8:	d106      	bne.n	e5b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    e5aa:	4a05      	ldr	r2, [pc, #20]	; (e5c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    e5ac:	9b01      	ldr	r3, [sp, #4]
    e5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5b2:	2b00      	cmp	r3, #0
    e5b4:	d100      	bne.n	e5b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5b8:	bf00      	nop
    e5ba:	b003      	add	sp, #12
    e5bc:	f85d fb04 	ldr.w	pc, [sp], #4
    e5c0:	1fff9208 	.word	0x1fff9208
    e5c4:	1fff9204 	.word	0x1fff9204

0000e5c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    e5c8:	b500      	push	{lr}
    e5ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5cc:	f7f2 ff5e 	bl	148c <Sys_GetCoreID>
    e5d0:	4603      	mov	r3, r0
    e5d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    e5d4:	4a10      	ldr	r2, [pc, #64]	; (e618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    e5d6:	9b01      	ldr	r3, [sp, #4]
    e5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d10d      	bne.n	e5fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5e0:	f7f2 f974 	bl	8cc <Adc_schm_read_msr>
    e5e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5e6:	9b00      	ldr	r3, [sp, #0]
    e5e8:	f003 0301 	and.w	r3, r3, #1
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	d100      	bne.n	e5f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    e5f2:	490a      	ldr	r1, [pc, #40]	; (e61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    e5f4:	9b01      	ldr	r3, [sp, #4]
    e5f6:	9a00      	ldr	r2, [sp, #0]
    e5f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    e5fc:	4a06      	ldr	r2, [pc, #24]	; (e618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    e5fe:	9b01      	ldr	r3, [sp, #4]
    e600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e604:	1c5a      	adds	r2, r3, #1
    e606:	4904      	ldr	r1, [pc, #16]	; (e618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    e608:	9b01      	ldr	r3, [sp, #4]
    e60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e60e:	bf00      	nop
    e610:	b003      	add	sp, #12
    e612:	f85d fb04 	ldr.w	pc, [sp], #4
    e616:	bf00      	nop
    e618:	1fff9210 	.word	0x1fff9210
    e61c:	1fff920c 	.word	0x1fff920c

0000e620 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    e620:	b500      	push	{lr}
    e622:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e624:	f7f2 ff32 	bl	148c <Sys_GetCoreID>
    e628:	4603      	mov	r3, r0
    e62a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    e62c:	4a0d      	ldr	r2, [pc, #52]	; (e664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    e62e:	9b01      	ldr	r3, [sp, #4]
    e630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e634:	1e5a      	subs	r2, r3, #1
    e636:	490b      	ldr	r1, [pc, #44]	; (e664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    e63e:	4a0a      	ldr	r2, [pc, #40]	; (e668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    e640:	9b01      	ldr	r3, [sp, #4]
    e642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e646:	f003 0301 	and.w	r3, r3, #1
    e64a:	2b00      	cmp	r3, #0
    e64c:	d106      	bne.n	e65c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    e64e:	4a05      	ldr	r2, [pc, #20]	; (e664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    e650:	9b01      	ldr	r3, [sp, #4]
    e652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e656:	2b00      	cmp	r3, #0
    e658:	d100      	bne.n	e65c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e65a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e65c:	bf00      	nop
    e65e:	b003      	add	sp, #12
    e660:	f85d fb04 	ldr.w	pc, [sp], #4
    e664:	1fff9210 	.word	0x1fff9210
    e668:	1fff920c 	.word	0x1fff920c

0000e66c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    e66c:	b500      	push	{lr}
    e66e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e670:	f7f2 ff0c 	bl	148c <Sys_GetCoreID>
    e674:	4603      	mov	r3, r0
    e676:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    e678:	4a10      	ldr	r2, [pc, #64]	; (e6bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    e67a:	9b01      	ldr	r3, [sp, #4]
    e67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e680:	2b00      	cmp	r3, #0
    e682:	d10d      	bne.n	e6a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e684:	f7f2 f922 	bl	8cc <Adc_schm_read_msr>
    e688:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e68a:	9b00      	ldr	r3, [sp, #0]
    e68c:	f003 0301 	and.w	r3, r3, #1
    e690:	2b00      	cmp	r3, #0
    e692:	d100      	bne.n	e696 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e694:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    e696:	490a      	ldr	r1, [pc, #40]	; (e6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    e698:	9b01      	ldr	r3, [sp, #4]
    e69a:	9a00      	ldr	r2, [sp, #0]
    e69c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    e6a0:	4a06      	ldr	r2, [pc, #24]	; (e6bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    e6a2:	9b01      	ldr	r3, [sp, #4]
    e6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6a8:	1c5a      	adds	r2, r3, #1
    e6aa:	4904      	ldr	r1, [pc, #16]	; (e6bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    e6ac:	9b01      	ldr	r3, [sp, #4]
    e6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6b2:	bf00      	nop
    e6b4:	b003      	add	sp, #12
    e6b6:	f85d fb04 	ldr.w	pc, [sp], #4
    e6ba:	bf00      	nop
    e6bc:	1fff9218 	.word	0x1fff9218
    e6c0:	1fff9214 	.word	0x1fff9214

0000e6c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    e6c4:	b500      	push	{lr}
    e6c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6c8:	f7f2 fee0 	bl	148c <Sys_GetCoreID>
    e6cc:	4603      	mov	r3, r0
    e6ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    e6d0:	4a0d      	ldr	r2, [pc, #52]	; (e708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    e6d2:	9b01      	ldr	r3, [sp, #4]
    e6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d8:	1e5a      	subs	r2, r3, #1
    e6da:	490b      	ldr	r1, [pc, #44]	; (e708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    e6e2:	4a0a      	ldr	r2, [pc, #40]	; (e70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    e6e4:	9b01      	ldr	r3, [sp, #4]
    e6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6ea:	f003 0301 	and.w	r3, r3, #1
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d106      	bne.n	e700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    e6f2:	4a05      	ldr	r2, [pc, #20]	; (e708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    e6f4:	9b01      	ldr	r3, [sp, #4]
    e6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6fa:	2b00      	cmp	r3, #0
    e6fc:	d100      	bne.n	e700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e700:	bf00      	nop
    e702:	b003      	add	sp, #12
    e704:	f85d fb04 	ldr.w	pc, [sp], #4
    e708:	1fff9218 	.word	0x1fff9218
    e70c:	1fff9214 	.word	0x1fff9214

0000e710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    e710:	b500      	push	{lr}
    e712:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e714:	f7f2 feba 	bl	148c <Sys_GetCoreID>
    e718:	4603      	mov	r3, r0
    e71a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    e71c:	4a10      	ldr	r2, [pc, #64]	; (e760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    e71e:	9b01      	ldr	r3, [sp, #4]
    e720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e724:	2b00      	cmp	r3, #0
    e726:	d10d      	bne.n	e744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e728:	f7f2 f8d0 	bl	8cc <Adc_schm_read_msr>
    e72c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e72e:	9b00      	ldr	r3, [sp, #0]
    e730:	f003 0301 	and.w	r3, r3, #1
    e734:	2b00      	cmp	r3, #0
    e736:	d100      	bne.n	e73a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e738:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    e73a:	490a      	ldr	r1, [pc, #40]	; (e764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    e73c:	9b01      	ldr	r3, [sp, #4]
    e73e:	9a00      	ldr	r2, [sp, #0]
    e740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    e744:	4a06      	ldr	r2, [pc, #24]	; (e760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    e746:	9b01      	ldr	r3, [sp, #4]
    e748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e74c:	1c5a      	adds	r2, r3, #1
    e74e:	4904      	ldr	r1, [pc, #16]	; (e760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    e750:	9b01      	ldr	r3, [sp, #4]
    e752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e756:	bf00      	nop
    e758:	b003      	add	sp, #12
    e75a:	f85d fb04 	ldr.w	pc, [sp], #4
    e75e:	bf00      	nop
    e760:	1fff9220 	.word	0x1fff9220
    e764:	1fff921c 	.word	0x1fff921c

0000e768 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    e768:	b500      	push	{lr}
    e76a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e76c:	f7f2 fe8e 	bl	148c <Sys_GetCoreID>
    e770:	4603      	mov	r3, r0
    e772:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    e774:	4a0d      	ldr	r2, [pc, #52]	; (e7ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    e776:	9b01      	ldr	r3, [sp, #4]
    e778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77c:	1e5a      	subs	r2, r3, #1
    e77e:	490b      	ldr	r1, [pc, #44]	; (e7ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    e780:	9b01      	ldr	r3, [sp, #4]
    e782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    e786:	4a0a      	ldr	r2, [pc, #40]	; (e7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    e788:	9b01      	ldr	r3, [sp, #4]
    e78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e78e:	f003 0301 	and.w	r3, r3, #1
    e792:	2b00      	cmp	r3, #0
    e794:	d106      	bne.n	e7a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    e796:	4a05      	ldr	r2, [pc, #20]	; (e7ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    e798:	9b01      	ldr	r3, [sp, #4]
    e79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e79e:	2b00      	cmp	r3, #0
    e7a0:	d100      	bne.n	e7a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7a4:	bf00      	nop
    e7a6:	b003      	add	sp, #12
    e7a8:	f85d fb04 	ldr.w	pc, [sp], #4
    e7ac:	1fff9220 	.word	0x1fff9220
    e7b0:	1fff921c 	.word	0x1fff921c

0000e7b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    e7b4:	b500      	push	{lr}
    e7b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7b8:	f7f2 fe68 	bl	148c <Sys_GetCoreID>
    e7bc:	4603      	mov	r3, r0
    e7be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    e7c0:	4a10      	ldr	r2, [pc, #64]	; (e804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    e7c2:	9b01      	ldr	r3, [sp, #4]
    e7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d10d      	bne.n	e7e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7cc:	f7f2 f87e 	bl	8cc <Adc_schm_read_msr>
    e7d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7d2:	9b00      	ldr	r3, [sp, #0]
    e7d4:	f003 0301 	and.w	r3, r3, #1
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d100      	bne.n	e7de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    e7de:	490a      	ldr	r1, [pc, #40]	; (e808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    e7e0:	9b01      	ldr	r3, [sp, #4]
    e7e2:	9a00      	ldr	r2, [sp, #0]
    e7e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    e7e8:	4a06      	ldr	r2, [pc, #24]	; (e804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    e7ea:	9b01      	ldr	r3, [sp, #4]
    e7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7f0:	1c5a      	adds	r2, r3, #1
    e7f2:	4904      	ldr	r1, [pc, #16]	; (e804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    e7f4:	9b01      	ldr	r3, [sp, #4]
    e7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7fa:	bf00      	nop
    e7fc:	b003      	add	sp, #12
    e7fe:	f85d fb04 	ldr.w	pc, [sp], #4
    e802:	bf00      	nop
    e804:	1fff9228 	.word	0x1fff9228
    e808:	1fff9224 	.word	0x1fff9224

0000e80c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    e80c:	b500      	push	{lr}
    e80e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e810:	f7f2 fe3c 	bl	148c <Sys_GetCoreID>
    e814:	4603      	mov	r3, r0
    e816:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    e818:	4a0d      	ldr	r2, [pc, #52]	; (e850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    e81a:	9b01      	ldr	r3, [sp, #4]
    e81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e820:	1e5a      	subs	r2, r3, #1
    e822:	490b      	ldr	r1, [pc, #44]	; (e850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    e824:	9b01      	ldr	r3, [sp, #4]
    e826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    e82a:	4a0a      	ldr	r2, [pc, #40]	; (e854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    e82c:	9b01      	ldr	r3, [sp, #4]
    e82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e832:	f003 0301 	and.w	r3, r3, #1
    e836:	2b00      	cmp	r3, #0
    e838:	d106      	bne.n	e848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    e83a:	4a05      	ldr	r2, [pc, #20]	; (e850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    e83c:	9b01      	ldr	r3, [sp, #4]
    e83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e842:	2b00      	cmp	r3, #0
    e844:	d100      	bne.n	e848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e846:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e848:	bf00      	nop
    e84a:	b003      	add	sp, #12
    e84c:	f85d fb04 	ldr.w	pc, [sp], #4
    e850:	1fff9228 	.word	0x1fff9228
    e854:	1fff9224 	.word	0x1fff9224

0000e858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    e858:	b500      	push	{lr}
    e85a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e85c:	f7f2 fe16 	bl	148c <Sys_GetCoreID>
    e860:	4603      	mov	r3, r0
    e862:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    e864:	4a10      	ldr	r2, [pc, #64]	; (e8a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    e866:	9b01      	ldr	r3, [sp, #4]
    e868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e86c:	2b00      	cmp	r3, #0
    e86e:	d10d      	bne.n	e88c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e870:	f7f2 f82c 	bl	8cc <Adc_schm_read_msr>
    e874:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e876:	9b00      	ldr	r3, [sp, #0]
    e878:	f003 0301 	and.w	r3, r3, #1
    e87c:	2b00      	cmp	r3, #0
    e87e:	d100      	bne.n	e882 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e880:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    e882:	490a      	ldr	r1, [pc, #40]	; (e8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    e884:	9b01      	ldr	r3, [sp, #4]
    e886:	9a00      	ldr	r2, [sp, #0]
    e888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    e88c:	4a06      	ldr	r2, [pc, #24]	; (e8a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    e88e:	9b01      	ldr	r3, [sp, #4]
    e890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e894:	1c5a      	adds	r2, r3, #1
    e896:	4904      	ldr	r1, [pc, #16]	; (e8a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    e898:	9b01      	ldr	r3, [sp, #4]
    e89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e89e:	bf00      	nop
    e8a0:	b003      	add	sp, #12
    e8a2:	f85d fb04 	ldr.w	pc, [sp], #4
    e8a6:	bf00      	nop
    e8a8:	1fff9230 	.word	0x1fff9230
    e8ac:	1fff922c 	.word	0x1fff922c

0000e8b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    e8b0:	b500      	push	{lr}
    e8b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8b4:	f7f2 fdea 	bl	148c <Sys_GetCoreID>
    e8b8:	4603      	mov	r3, r0
    e8ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    e8bc:	4a0d      	ldr	r2, [pc, #52]	; (e8f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    e8be:	9b01      	ldr	r3, [sp, #4]
    e8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c4:	1e5a      	subs	r2, r3, #1
    e8c6:	490b      	ldr	r1, [pc, #44]	; (e8f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    e8c8:	9b01      	ldr	r3, [sp, #4]
    e8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    e8ce:	4a0a      	ldr	r2, [pc, #40]	; (e8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    e8d0:	9b01      	ldr	r3, [sp, #4]
    e8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d6:	f003 0301 	and.w	r3, r3, #1
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d106      	bne.n	e8ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    e8de:	4a05      	ldr	r2, [pc, #20]	; (e8f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    e8e0:	9b01      	ldr	r3, [sp, #4]
    e8e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	d100      	bne.n	e8ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8ec:	bf00      	nop
    e8ee:	b003      	add	sp, #12
    e8f0:	f85d fb04 	ldr.w	pc, [sp], #4
    e8f4:	1fff9230 	.word	0x1fff9230
    e8f8:	1fff922c 	.word	0x1fff922c

0000e8fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    e8fc:	b500      	push	{lr}
    e8fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e900:	f7f2 fdc4 	bl	148c <Sys_GetCoreID>
    e904:	4603      	mov	r3, r0
    e906:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    e908:	4a10      	ldr	r2, [pc, #64]	; (e94c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    e90a:	9b01      	ldr	r3, [sp, #4]
    e90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e910:	2b00      	cmp	r3, #0
    e912:	d10d      	bne.n	e930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e914:	f7f1 ffda 	bl	8cc <Adc_schm_read_msr>
    e918:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e91a:	9b00      	ldr	r3, [sp, #0]
    e91c:	f003 0301 	and.w	r3, r3, #1
    e920:	2b00      	cmp	r3, #0
    e922:	d100      	bne.n	e926 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e924:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    e926:	490a      	ldr	r1, [pc, #40]	; (e950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    e928:	9b01      	ldr	r3, [sp, #4]
    e92a:	9a00      	ldr	r2, [sp, #0]
    e92c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    e930:	4a06      	ldr	r2, [pc, #24]	; (e94c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    e932:	9b01      	ldr	r3, [sp, #4]
    e934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e938:	1c5a      	adds	r2, r3, #1
    e93a:	4904      	ldr	r1, [pc, #16]	; (e94c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    e93c:	9b01      	ldr	r3, [sp, #4]
    e93e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e942:	bf00      	nop
    e944:	b003      	add	sp, #12
    e946:	f85d fb04 	ldr.w	pc, [sp], #4
    e94a:	bf00      	nop
    e94c:	1fff9238 	.word	0x1fff9238
    e950:	1fff9234 	.word	0x1fff9234

0000e954 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    e954:	b500      	push	{lr}
    e956:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e958:	f7f2 fd98 	bl	148c <Sys_GetCoreID>
    e95c:	4603      	mov	r3, r0
    e95e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    e960:	4a0d      	ldr	r2, [pc, #52]	; (e998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    e962:	9b01      	ldr	r3, [sp, #4]
    e964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e968:	1e5a      	subs	r2, r3, #1
    e96a:	490b      	ldr	r1, [pc, #44]	; (e998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    e96c:	9b01      	ldr	r3, [sp, #4]
    e96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    e972:	4a0a      	ldr	r2, [pc, #40]	; (e99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    e974:	9b01      	ldr	r3, [sp, #4]
    e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e97a:	f003 0301 	and.w	r3, r3, #1
    e97e:	2b00      	cmp	r3, #0
    e980:	d106      	bne.n	e990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    e982:	4a05      	ldr	r2, [pc, #20]	; (e998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    e984:	9b01      	ldr	r3, [sp, #4]
    e986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e98a:	2b00      	cmp	r3, #0
    e98c:	d100      	bne.n	e990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e98e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e990:	bf00      	nop
    e992:	b003      	add	sp, #12
    e994:	f85d fb04 	ldr.w	pc, [sp], #4
    e998:	1fff9238 	.word	0x1fff9238
    e99c:	1fff9234 	.word	0x1fff9234

0000e9a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    e9a0:	b500      	push	{lr}
    e9a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9a4:	f7f2 fd72 	bl	148c <Sys_GetCoreID>
    e9a8:	4603      	mov	r3, r0
    e9aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    e9ac:	4a10      	ldr	r2, [pc, #64]	; (e9f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    e9ae:	9b01      	ldr	r3, [sp, #4]
    e9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d10d      	bne.n	e9d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9b8:	f7f1 ff88 	bl	8cc <Adc_schm_read_msr>
    e9bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9be:	9b00      	ldr	r3, [sp, #0]
    e9c0:	f003 0301 	and.w	r3, r3, #1
    e9c4:	2b00      	cmp	r3, #0
    e9c6:	d100      	bne.n	e9ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    e9ca:	490a      	ldr	r1, [pc, #40]	; (e9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    e9cc:	9b01      	ldr	r3, [sp, #4]
    e9ce:	9a00      	ldr	r2, [sp, #0]
    e9d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    e9d4:	4a06      	ldr	r2, [pc, #24]	; (e9f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    e9d6:	9b01      	ldr	r3, [sp, #4]
    e9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9dc:	1c5a      	adds	r2, r3, #1
    e9de:	4904      	ldr	r1, [pc, #16]	; (e9f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    e9e0:	9b01      	ldr	r3, [sp, #4]
    e9e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9e6:	bf00      	nop
    e9e8:	b003      	add	sp, #12
    e9ea:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ee:	bf00      	nop
    e9f0:	1fff9240 	.word	0x1fff9240
    e9f4:	1fff923c 	.word	0x1fff923c

0000e9f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    e9f8:	b500      	push	{lr}
    e9fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9fc:	f7f2 fd46 	bl	148c <Sys_GetCoreID>
    ea00:	4603      	mov	r3, r0
    ea02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    ea04:	4a0d      	ldr	r2, [pc, #52]	; (ea3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    ea06:	9b01      	ldr	r3, [sp, #4]
    ea08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0c:	1e5a      	subs	r2, r3, #1
    ea0e:	490b      	ldr	r1, [pc, #44]	; (ea3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    ea10:	9b01      	ldr	r3, [sp, #4]
    ea12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    ea16:	4a0a      	ldr	r2, [pc, #40]	; (ea40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    ea18:	9b01      	ldr	r3, [sp, #4]
    ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea1e:	f003 0301 	and.w	r3, r3, #1
    ea22:	2b00      	cmp	r3, #0
    ea24:	d106      	bne.n	ea34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    ea26:	4a05      	ldr	r2, [pc, #20]	; (ea3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    ea28:	9b01      	ldr	r3, [sp, #4]
    ea2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea2e:	2b00      	cmp	r3, #0
    ea30:	d100      	bne.n	ea34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea34:	bf00      	nop
    ea36:	b003      	add	sp, #12
    ea38:	f85d fb04 	ldr.w	pc, [sp], #4
    ea3c:	1fff9240 	.word	0x1fff9240
    ea40:	1fff923c 	.word	0x1fff923c

0000ea44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    ea44:	b500      	push	{lr}
    ea46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea48:	f7f2 fd20 	bl	148c <Sys_GetCoreID>
    ea4c:	4603      	mov	r3, r0
    ea4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    ea50:	4a10      	ldr	r2, [pc, #64]	; (ea94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    ea52:	9b01      	ldr	r3, [sp, #4]
    ea54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea58:	2b00      	cmp	r3, #0
    ea5a:	d10d      	bne.n	ea78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea5c:	f7f1 ff36 	bl	8cc <Adc_schm_read_msr>
    ea60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea62:	9b00      	ldr	r3, [sp, #0]
    ea64:	f003 0301 	and.w	r3, r3, #1
    ea68:	2b00      	cmp	r3, #0
    ea6a:	d100      	bne.n	ea6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    ea6e:	490a      	ldr	r1, [pc, #40]	; (ea98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    ea70:	9b01      	ldr	r3, [sp, #4]
    ea72:	9a00      	ldr	r2, [sp, #0]
    ea74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    ea78:	4a06      	ldr	r2, [pc, #24]	; (ea94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    ea7a:	9b01      	ldr	r3, [sp, #4]
    ea7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea80:	1c5a      	adds	r2, r3, #1
    ea82:	4904      	ldr	r1, [pc, #16]	; (ea94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    ea84:	9b01      	ldr	r3, [sp, #4]
    ea86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea8a:	bf00      	nop
    ea8c:	b003      	add	sp, #12
    ea8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea92:	bf00      	nop
    ea94:	1fff9248 	.word	0x1fff9248
    ea98:	1fff9244 	.word	0x1fff9244

0000ea9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    ea9c:	b500      	push	{lr}
    ea9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eaa0:	f7f2 fcf4 	bl	148c <Sys_GetCoreID>
    eaa4:	4603      	mov	r3, r0
    eaa6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    eaa8:	4a0d      	ldr	r2, [pc, #52]	; (eae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    eaaa:	9b01      	ldr	r3, [sp, #4]
    eaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eab0:	1e5a      	subs	r2, r3, #1
    eab2:	490b      	ldr	r1, [pc, #44]	; (eae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    eab4:	9b01      	ldr	r3, [sp, #4]
    eab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    eaba:	4a0a      	ldr	r2, [pc, #40]	; (eae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    eabc:	9b01      	ldr	r3, [sp, #4]
    eabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eac2:	f003 0301 	and.w	r3, r3, #1
    eac6:	2b00      	cmp	r3, #0
    eac8:	d106      	bne.n	ead8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    eaca:	4a05      	ldr	r2, [pc, #20]	; (eae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    eacc:	9b01      	ldr	r3, [sp, #4]
    eace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ead2:	2b00      	cmp	r3, #0
    ead4:	d100      	bne.n	ead8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ead6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ead8:	bf00      	nop
    eada:	b003      	add	sp, #12
    eadc:	f85d fb04 	ldr.w	pc, [sp], #4
    eae0:	1fff9248 	.word	0x1fff9248
    eae4:	1fff9244 	.word	0x1fff9244

0000eae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    eae8:	b500      	push	{lr}
    eaea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eaec:	f7f2 fcce 	bl	148c <Sys_GetCoreID>
    eaf0:	4603      	mov	r3, r0
    eaf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    eaf4:	4a10      	ldr	r2, [pc, #64]	; (eb38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    eaf6:	9b01      	ldr	r3, [sp, #4]
    eaf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eafc:	2b00      	cmp	r3, #0
    eafe:	d10d      	bne.n	eb1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb00:	f7f1 fee4 	bl	8cc <Adc_schm_read_msr>
    eb04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb06:	9b00      	ldr	r3, [sp, #0]
    eb08:	f003 0301 	and.w	r3, r3, #1
    eb0c:	2b00      	cmp	r3, #0
    eb0e:	d100      	bne.n	eb12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    eb12:	490a      	ldr	r1, [pc, #40]	; (eb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    eb14:	9b01      	ldr	r3, [sp, #4]
    eb16:	9a00      	ldr	r2, [sp, #0]
    eb18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    eb1c:	4a06      	ldr	r2, [pc, #24]	; (eb38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    eb1e:	9b01      	ldr	r3, [sp, #4]
    eb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb24:	1c5a      	adds	r2, r3, #1
    eb26:	4904      	ldr	r1, [pc, #16]	; (eb38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    eb28:	9b01      	ldr	r3, [sp, #4]
    eb2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb2e:	bf00      	nop
    eb30:	b003      	add	sp, #12
    eb32:	f85d fb04 	ldr.w	pc, [sp], #4
    eb36:	bf00      	nop
    eb38:	1fff9250 	.word	0x1fff9250
    eb3c:	1fff924c 	.word	0x1fff924c

0000eb40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    eb40:	b500      	push	{lr}
    eb42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb44:	f7f2 fca2 	bl	148c <Sys_GetCoreID>
    eb48:	4603      	mov	r3, r0
    eb4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    eb4c:	4a0d      	ldr	r2, [pc, #52]	; (eb84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    eb4e:	9b01      	ldr	r3, [sp, #4]
    eb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb54:	1e5a      	subs	r2, r3, #1
    eb56:	490b      	ldr	r1, [pc, #44]	; (eb84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    eb58:	9b01      	ldr	r3, [sp, #4]
    eb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    eb5e:	4a0a      	ldr	r2, [pc, #40]	; (eb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    eb60:	9b01      	ldr	r3, [sp, #4]
    eb62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb66:	f003 0301 	and.w	r3, r3, #1
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d106      	bne.n	eb7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    eb6e:	4a05      	ldr	r2, [pc, #20]	; (eb84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    eb70:	9b01      	ldr	r3, [sp, #4]
    eb72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb76:	2b00      	cmp	r3, #0
    eb78:	d100      	bne.n	eb7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb7c:	bf00      	nop
    eb7e:	b003      	add	sp, #12
    eb80:	f85d fb04 	ldr.w	pc, [sp], #4
    eb84:	1fff9250 	.word	0x1fff9250
    eb88:	1fff924c 	.word	0x1fff924c

0000eb8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    eb8c:	b500      	push	{lr}
    eb8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb90:	f7f2 fc7c 	bl	148c <Sys_GetCoreID>
    eb94:	4603      	mov	r3, r0
    eb96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    eb98:	4a10      	ldr	r2, [pc, #64]	; (ebdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    eb9a:	9b01      	ldr	r3, [sp, #4]
    eb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d10d      	bne.n	ebc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eba4:	f7f1 fe92 	bl	8cc <Adc_schm_read_msr>
    eba8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebaa:	9b00      	ldr	r3, [sp, #0]
    ebac:	f003 0301 	and.w	r3, r3, #1
    ebb0:	2b00      	cmp	r3, #0
    ebb2:	d100      	bne.n	ebb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    ebb6:	490a      	ldr	r1, [pc, #40]	; (ebe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    ebb8:	9b01      	ldr	r3, [sp, #4]
    ebba:	9a00      	ldr	r2, [sp, #0]
    ebbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    ebc0:	4a06      	ldr	r2, [pc, #24]	; (ebdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    ebc2:	9b01      	ldr	r3, [sp, #4]
    ebc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebc8:	1c5a      	adds	r2, r3, #1
    ebca:	4904      	ldr	r1, [pc, #16]	; (ebdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    ebcc:	9b01      	ldr	r3, [sp, #4]
    ebce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebd2:	bf00      	nop
    ebd4:	b003      	add	sp, #12
    ebd6:	f85d fb04 	ldr.w	pc, [sp], #4
    ebda:	bf00      	nop
    ebdc:	1fff9258 	.word	0x1fff9258
    ebe0:	1fff9254 	.word	0x1fff9254

0000ebe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    ebe4:	b500      	push	{lr}
    ebe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebe8:	f7f2 fc50 	bl	148c <Sys_GetCoreID>
    ebec:	4603      	mov	r3, r0
    ebee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    ebf0:	4a0d      	ldr	r2, [pc, #52]	; (ec28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    ebf2:	9b01      	ldr	r3, [sp, #4]
    ebf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf8:	1e5a      	subs	r2, r3, #1
    ebfa:	490b      	ldr	r1, [pc, #44]	; (ec28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    ebfc:	9b01      	ldr	r3, [sp, #4]
    ebfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    ec02:	4a0a      	ldr	r2, [pc, #40]	; (ec2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    ec04:	9b01      	ldr	r3, [sp, #4]
    ec06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec0a:	f003 0301 	and.w	r3, r3, #1
    ec0e:	2b00      	cmp	r3, #0
    ec10:	d106      	bne.n	ec20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    ec12:	4a05      	ldr	r2, [pc, #20]	; (ec28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    ec14:	9b01      	ldr	r3, [sp, #4]
    ec16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	d100      	bne.n	ec20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec20:	bf00      	nop
    ec22:	b003      	add	sp, #12
    ec24:	f85d fb04 	ldr.w	pc, [sp], #4
    ec28:	1fff9258 	.word	0x1fff9258
    ec2c:	1fff9254 	.word	0x1fff9254

0000ec30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    ec30:	b500      	push	{lr}
    ec32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec34:	f7f2 fc2a 	bl	148c <Sys_GetCoreID>
    ec38:	4603      	mov	r3, r0
    ec3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    ec3c:	4a10      	ldr	r2, [pc, #64]	; (ec80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    ec3e:	9b01      	ldr	r3, [sp, #4]
    ec40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec44:	2b00      	cmp	r3, #0
    ec46:	d10d      	bne.n	ec64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec48:	f7f1 fe40 	bl	8cc <Adc_schm_read_msr>
    ec4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec4e:	9b00      	ldr	r3, [sp, #0]
    ec50:	f003 0301 	and.w	r3, r3, #1
    ec54:	2b00      	cmp	r3, #0
    ec56:	d100      	bne.n	ec5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    ec5a:	490a      	ldr	r1, [pc, #40]	; (ec84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    ec5c:	9b01      	ldr	r3, [sp, #4]
    ec5e:	9a00      	ldr	r2, [sp, #0]
    ec60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    ec64:	4a06      	ldr	r2, [pc, #24]	; (ec80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    ec66:	9b01      	ldr	r3, [sp, #4]
    ec68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec6c:	1c5a      	adds	r2, r3, #1
    ec6e:	4904      	ldr	r1, [pc, #16]	; (ec80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    ec70:	9b01      	ldr	r3, [sp, #4]
    ec72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec76:	bf00      	nop
    ec78:	b003      	add	sp, #12
    ec7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ec7e:	bf00      	nop
    ec80:	1fff9260 	.word	0x1fff9260
    ec84:	1fff925c 	.word	0x1fff925c

0000ec88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    ec88:	b500      	push	{lr}
    ec8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec8c:	f7f2 fbfe 	bl	148c <Sys_GetCoreID>
    ec90:	4603      	mov	r3, r0
    ec92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    ec94:	4a0d      	ldr	r2, [pc, #52]	; (eccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    ec96:	9b01      	ldr	r3, [sp, #4]
    ec98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9c:	1e5a      	subs	r2, r3, #1
    ec9e:	490b      	ldr	r1, [pc, #44]	; (eccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    eca0:	9b01      	ldr	r3, [sp, #4]
    eca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    eca6:	4a0a      	ldr	r2, [pc, #40]	; (ecd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    eca8:	9b01      	ldr	r3, [sp, #4]
    ecaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecae:	f003 0301 	and.w	r3, r3, #1
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	d106      	bne.n	ecc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    ecb6:	4a05      	ldr	r2, [pc, #20]	; (eccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    ecb8:	9b01      	ldr	r3, [sp, #4]
    ecba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d100      	bne.n	ecc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecc4:	bf00      	nop
    ecc6:	b003      	add	sp, #12
    ecc8:	f85d fb04 	ldr.w	pc, [sp], #4
    eccc:	1fff9260 	.word	0x1fff9260
    ecd0:	1fff925c 	.word	0x1fff925c

0000ecd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    ecd4:	b500      	push	{lr}
    ecd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecd8:	f7f2 fbd8 	bl	148c <Sys_GetCoreID>
    ecdc:	4603      	mov	r3, r0
    ecde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    ece0:	4a10      	ldr	r2, [pc, #64]	; (ed24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    ece2:	9b01      	ldr	r3, [sp, #4]
    ece4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ece8:	2b00      	cmp	r3, #0
    ecea:	d10d      	bne.n	ed08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecec:	f7f1 fdee 	bl	8cc <Adc_schm_read_msr>
    ecf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ecf2:	9b00      	ldr	r3, [sp, #0]
    ecf4:	f003 0301 	and.w	r3, r3, #1
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	d100      	bne.n	ecfe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ecfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    ecfe:	490a      	ldr	r1, [pc, #40]	; (ed28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    ed00:	9b01      	ldr	r3, [sp, #4]
    ed02:	9a00      	ldr	r2, [sp, #0]
    ed04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    ed08:	4a06      	ldr	r2, [pc, #24]	; (ed24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    ed0a:	9b01      	ldr	r3, [sp, #4]
    ed0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed10:	1c5a      	adds	r2, r3, #1
    ed12:	4904      	ldr	r1, [pc, #16]	; (ed24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    ed14:	9b01      	ldr	r3, [sp, #4]
    ed16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed1a:	bf00      	nop
    ed1c:	b003      	add	sp, #12
    ed1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed22:	bf00      	nop
    ed24:	1fff9268 	.word	0x1fff9268
    ed28:	1fff9264 	.word	0x1fff9264

0000ed2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    ed2c:	b500      	push	{lr}
    ed2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed30:	f7f2 fbac 	bl	148c <Sys_GetCoreID>
    ed34:	4603      	mov	r3, r0
    ed36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    ed38:	4a0d      	ldr	r2, [pc, #52]	; (ed70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    ed3a:	9b01      	ldr	r3, [sp, #4]
    ed3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed40:	1e5a      	subs	r2, r3, #1
    ed42:	490b      	ldr	r1, [pc, #44]	; (ed70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    ed44:	9b01      	ldr	r3, [sp, #4]
    ed46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ed4a:	4a0a      	ldr	r2, [pc, #40]	; (ed74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    ed4c:	9b01      	ldr	r3, [sp, #4]
    ed4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed52:	f003 0301 	and.w	r3, r3, #1
    ed56:	2b00      	cmp	r3, #0
    ed58:	d106      	bne.n	ed68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    ed5a:	4a05      	ldr	r2, [pc, #20]	; (ed70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    ed5c:	9b01      	ldr	r3, [sp, #4]
    ed5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed62:	2b00      	cmp	r3, #0
    ed64:	d100      	bne.n	ed68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed68:	bf00      	nop
    ed6a:	b003      	add	sp, #12
    ed6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ed70:	1fff9268 	.word	0x1fff9268
    ed74:	1fff9264 	.word	0x1fff9264

0000ed78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    ed78:	b500      	push	{lr}
    ed7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed7c:	f7f2 fb86 	bl	148c <Sys_GetCoreID>
    ed80:	4603      	mov	r3, r0
    ed82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    ed84:	4a10      	ldr	r2, [pc, #64]	; (edc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    ed86:	9b01      	ldr	r3, [sp, #4]
    ed88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed8c:	2b00      	cmp	r3, #0
    ed8e:	d10d      	bne.n	edac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed90:	f7f1 fd9c 	bl	8cc <Adc_schm_read_msr>
    ed94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed96:	9b00      	ldr	r3, [sp, #0]
    ed98:	f003 0301 	and.w	r3, r3, #1
    ed9c:	2b00      	cmp	r3, #0
    ed9e:	d100      	bne.n	eda2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eda0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    eda2:	490a      	ldr	r1, [pc, #40]	; (edcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    eda4:	9b01      	ldr	r3, [sp, #4]
    eda6:	9a00      	ldr	r2, [sp, #0]
    eda8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    edac:	4a06      	ldr	r2, [pc, #24]	; (edc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    edae:	9b01      	ldr	r3, [sp, #4]
    edb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb4:	1c5a      	adds	r2, r3, #1
    edb6:	4904      	ldr	r1, [pc, #16]	; (edc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    edb8:	9b01      	ldr	r3, [sp, #4]
    edba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edbe:	bf00      	nop
    edc0:	b003      	add	sp, #12
    edc2:	f85d fb04 	ldr.w	pc, [sp], #4
    edc6:	bf00      	nop
    edc8:	1fff9270 	.word	0x1fff9270
    edcc:	1fff926c 	.word	0x1fff926c

0000edd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    edd0:	b500      	push	{lr}
    edd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edd4:	f7f2 fb5a 	bl	148c <Sys_GetCoreID>
    edd8:	4603      	mov	r3, r0
    edda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    eddc:	4a0d      	ldr	r2, [pc, #52]	; (ee14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    edde:	9b01      	ldr	r3, [sp, #4]
    ede0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede4:	1e5a      	subs	r2, r3, #1
    ede6:	490b      	ldr	r1, [pc, #44]	; (ee14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    ede8:	9b01      	ldr	r3, [sp, #4]
    edea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    edee:	4a0a      	ldr	r2, [pc, #40]	; (ee18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    edf0:	9b01      	ldr	r3, [sp, #4]
    edf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edf6:	f003 0301 	and.w	r3, r3, #1
    edfa:	2b00      	cmp	r3, #0
    edfc:	d106      	bne.n	ee0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    edfe:	4a05      	ldr	r2, [pc, #20]	; (ee14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    ee00:	9b01      	ldr	r3, [sp, #4]
    ee02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee06:	2b00      	cmp	r3, #0
    ee08:	d100      	bne.n	ee0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee0c:	bf00      	nop
    ee0e:	b003      	add	sp, #12
    ee10:	f85d fb04 	ldr.w	pc, [sp], #4
    ee14:	1fff9270 	.word	0x1fff9270
    ee18:	1fff926c 	.word	0x1fff926c

0000ee1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    ee1c:	b500      	push	{lr}
    ee1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee20:	f7f2 fb34 	bl	148c <Sys_GetCoreID>
    ee24:	4603      	mov	r3, r0
    ee26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    ee28:	4a10      	ldr	r2, [pc, #64]	; (ee6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ee2a:	9b01      	ldr	r3, [sp, #4]
    ee2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee30:	2b00      	cmp	r3, #0
    ee32:	d10d      	bne.n	ee50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee34:	f7f1 fd4a 	bl	8cc <Adc_schm_read_msr>
    ee38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee3a:	9b00      	ldr	r3, [sp, #0]
    ee3c:	f003 0301 	and.w	r3, r3, #1
    ee40:	2b00      	cmp	r3, #0
    ee42:	d100      	bne.n	ee46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    ee46:	490a      	ldr	r1, [pc, #40]	; (ee70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    ee48:	9b01      	ldr	r3, [sp, #4]
    ee4a:	9a00      	ldr	r2, [sp, #0]
    ee4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    ee50:	4a06      	ldr	r2, [pc, #24]	; (ee6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ee52:	9b01      	ldr	r3, [sp, #4]
    ee54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee58:	1c5a      	adds	r2, r3, #1
    ee5a:	4904      	ldr	r1, [pc, #16]	; (ee6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ee5c:	9b01      	ldr	r3, [sp, #4]
    ee5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee62:	bf00      	nop
    ee64:	b003      	add	sp, #12
    ee66:	f85d fb04 	ldr.w	pc, [sp], #4
    ee6a:	bf00      	nop
    ee6c:	1fff9278 	.word	0x1fff9278
    ee70:	1fff9274 	.word	0x1fff9274

0000ee74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    ee74:	b500      	push	{lr}
    ee76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee78:	f7f2 fb08 	bl	148c <Sys_GetCoreID>
    ee7c:	4603      	mov	r3, r0
    ee7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    ee80:	4a0d      	ldr	r2, [pc, #52]	; (eeb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    ee82:	9b01      	ldr	r3, [sp, #4]
    ee84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee88:	1e5a      	subs	r2, r3, #1
    ee8a:	490b      	ldr	r1, [pc, #44]	; (eeb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    ee8c:	9b01      	ldr	r3, [sp, #4]
    ee8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    ee92:	4a0a      	ldr	r2, [pc, #40]	; (eebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    ee94:	9b01      	ldr	r3, [sp, #4]
    ee96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee9a:	f003 0301 	and.w	r3, r3, #1
    ee9e:	2b00      	cmp	r3, #0
    eea0:	d106      	bne.n	eeb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    eea2:	4a05      	ldr	r2, [pc, #20]	; (eeb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    eea4:	9b01      	ldr	r3, [sp, #4]
    eea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeaa:	2b00      	cmp	r3, #0
    eeac:	d100      	bne.n	eeb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eeae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eeb0:	bf00      	nop
    eeb2:	b003      	add	sp, #12
    eeb4:	f85d fb04 	ldr.w	pc, [sp], #4
    eeb8:	1fff9278 	.word	0x1fff9278
    eebc:	1fff9274 	.word	0x1fff9274

0000eec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    eec0:	b500      	push	{lr}
    eec2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eec4:	f7f2 fae2 	bl	148c <Sys_GetCoreID>
    eec8:	4603      	mov	r3, r0
    eeca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    eecc:	4a10      	ldr	r2, [pc, #64]	; (ef10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    eece:	9b01      	ldr	r3, [sp, #4]
    eed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed4:	2b00      	cmp	r3, #0
    eed6:	d10d      	bne.n	eef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eed8:	f7f1 fcf8 	bl	8cc <Adc_schm_read_msr>
    eedc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eede:	9b00      	ldr	r3, [sp, #0]
    eee0:	f003 0301 	and.w	r3, r3, #1
    eee4:	2b00      	cmp	r3, #0
    eee6:	d100      	bne.n	eeea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eee8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    eeea:	490a      	ldr	r1, [pc, #40]	; (ef14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    eeec:	9b01      	ldr	r3, [sp, #4]
    eeee:	9a00      	ldr	r2, [sp, #0]
    eef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    eef4:	4a06      	ldr	r2, [pc, #24]	; (ef10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    eef6:	9b01      	ldr	r3, [sp, #4]
    eef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eefc:	1c5a      	adds	r2, r3, #1
    eefe:	4904      	ldr	r1, [pc, #16]	; (ef10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    ef00:	9b01      	ldr	r3, [sp, #4]
    ef02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef06:	bf00      	nop
    ef08:	b003      	add	sp, #12
    ef0a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef0e:	bf00      	nop
    ef10:	1fff9280 	.word	0x1fff9280
    ef14:	1fff927c 	.word	0x1fff927c

0000ef18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    ef18:	b500      	push	{lr}
    ef1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef1c:	f7f2 fab6 	bl	148c <Sys_GetCoreID>
    ef20:	4603      	mov	r3, r0
    ef22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    ef24:	4a0d      	ldr	r2, [pc, #52]	; (ef5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    ef26:	9b01      	ldr	r3, [sp, #4]
    ef28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2c:	1e5a      	subs	r2, r3, #1
    ef2e:	490b      	ldr	r1, [pc, #44]	; (ef5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    ef30:	9b01      	ldr	r3, [sp, #4]
    ef32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    ef36:	4a0a      	ldr	r2, [pc, #40]	; (ef60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    ef38:	9b01      	ldr	r3, [sp, #4]
    ef3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef3e:	f003 0301 	and.w	r3, r3, #1
    ef42:	2b00      	cmp	r3, #0
    ef44:	d106      	bne.n	ef54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    ef46:	4a05      	ldr	r2, [pc, #20]	; (ef5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    ef48:	9b01      	ldr	r3, [sp, #4]
    ef4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef4e:	2b00      	cmp	r3, #0
    ef50:	d100      	bne.n	ef54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef54:	bf00      	nop
    ef56:	b003      	add	sp, #12
    ef58:	f85d fb04 	ldr.w	pc, [sp], #4
    ef5c:	1fff9280 	.word	0x1fff9280
    ef60:	1fff927c 	.word	0x1fff927c

0000ef64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    ef64:	b500      	push	{lr}
    ef66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef68:	f7f2 fa90 	bl	148c <Sys_GetCoreID>
    ef6c:	4603      	mov	r3, r0
    ef6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    ef70:	4a10      	ldr	r2, [pc, #64]	; (efb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ef72:	9b01      	ldr	r3, [sp, #4]
    ef74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d10d      	bne.n	ef98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef7c:	f7f1 fca6 	bl	8cc <Adc_schm_read_msr>
    ef80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef82:	9b00      	ldr	r3, [sp, #0]
    ef84:	f003 0301 	and.w	r3, r3, #1
    ef88:	2b00      	cmp	r3, #0
    ef8a:	d100      	bne.n	ef8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    ef8e:	490a      	ldr	r1, [pc, #40]	; (efb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    ef90:	9b01      	ldr	r3, [sp, #4]
    ef92:	9a00      	ldr	r2, [sp, #0]
    ef94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    ef98:	4a06      	ldr	r2, [pc, #24]	; (efb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ef9a:	9b01      	ldr	r3, [sp, #4]
    ef9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efa0:	1c5a      	adds	r2, r3, #1
    efa2:	4904      	ldr	r1, [pc, #16]	; (efb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    efa4:	9b01      	ldr	r3, [sp, #4]
    efa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efaa:	bf00      	nop
    efac:	b003      	add	sp, #12
    efae:	f85d fb04 	ldr.w	pc, [sp], #4
    efb2:	bf00      	nop
    efb4:	1fff9288 	.word	0x1fff9288
    efb8:	1fff9284 	.word	0x1fff9284

0000efbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    efbc:	b500      	push	{lr}
    efbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efc0:	f7f2 fa64 	bl	148c <Sys_GetCoreID>
    efc4:	4603      	mov	r3, r0
    efc6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    efc8:	4a0d      	ldr	r2, [pc, #52]	; (f000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    efca:	9b01      	ldr	r3, [sp, #4]
    efcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efd0:	1e5a      	subs	r2, r3, #1
    efd2:	490b      	ldr	r1, [pc, #44]	; (f000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    efd4:	9b01      	ldr	r3, [sp, #4]
    efd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    efda:	4a0a      	ldr	r2, [pc, #40]	; (f004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    efdc:	9b01      	ldr	r3, [sp, #4]
    efde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efe2:	f003 0301 	and.w	r3, r3, #1
    efe6:	2b00      	cmp	r3, #0
    efe8:	d106      	bne.n	eff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    efea:	4a05      	ldr	r2, [pc, #20]	; (f000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    efec:	9b01      	ldr	r3, [sp, #4]
    efee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff2:	2b00      	cmp	r3, #0
    eff4:	d100      	bne.n	eff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eff6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eff8:	bf00      	nop
    effa:	b003      	add	sp, #12
    effc:	f85d fb04 	ldr.w	pc, [sp], #4
    f000:	1fff9288 	.word	0x1fff9288
    f004:	1fff9284 	.word	0x1fff9284

0000f008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    f008:	b500      	push	{lr}
    f00a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f00c:	f7f2 fa3e 	bl	148c <Sys_GetCoreID>
    f010:	4603      	mov	r3, r0
    f012:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    f014:	4a10      	ldr	r2, [pc, #64]	; (f058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    f016:	9b01      	ldr	r3, [sp, #4]
    f018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f01c:	2b00      	cmp	r3, #0
    f01e:	d10d      	bne.n	f03c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f020:	f7f1 fc54 	bl	8cc <Adc_schm_read_msr>
    f024:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f026:	9b00      	ldr	r3, [sp, #0]
    f028:	f003 0301 	and.w	r3, r3, #1
    f02c:	2b00      	cmp	r3, #0
    f02e:	d100      	bne.n	f032 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f030:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    f032:	490a      	ldr	r1, [pc, #40]	; (f05c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    f034:	9b01      	ldr	r3, [sp, #4]
    f036:	9a00      	ldr	r2, [sp, #0]
    f038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    f03c:	4a06      	ldr	r2, [pc, #24]	; (f058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    f03e:	9b01      	ldr	r3, [sp, #4]
    f040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f044:	1c5a      	adds	r2, r3, #1
    f046:	4904      	ldr	r1, [pc, #16]	; (f058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    f048:	9b01      	ldr	r3, [sp, #4]
    f04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f04e:	bf00      	nop
    f050:	b003      	add	sp, #12
    f052:	f85d fb04 	ldr.w	pc, [sp], #4
    f056:	bf00      	nop
    f058:	1fff9290 	.word	0x1fff9290
    f05c:	1fff928c 	.word	0x1fff928c

0000f060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    f060:	b500      	push	{lr}
    f062:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f064:	f7f2 fa12 	bl	148c <Sys_GetCoreID>
    f068:	4603      	mov	r3, r0
    f06a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    f06c:	4a0d      	ldr	r2, [pc, #52]	; (f0a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    f06e:	9b01      	ldr	r3, [sp, #4]
    f070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f074:	1e5a      	subs	r2, r3, #1
    f076:	490b      	ldr	r1, [pc, #44]	; (f0a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    f078:	9b01      	ldr	r3, [sp, #4]
    f07a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    f07e:	4a0a      	ldr	r2, [pc, #40]	; (f0a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    f080:	9b01      	ldr	r3, [sp, #4]
    f082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f086:	f003 0301 	and.w	r3, r3, #1
    f08a:	2b00      	cmp	r3, #0
    f08c:	d106      	bne.n	f09c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    f08e:	4a05      	ldr	r2, [pc, #20]	; (f0a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    f090:	9b01      	ldr	r3, [sp, #4]
    f092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f096:	2b00      	cmp	r3, #0
    f098:	d100      	bne.n	f09c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f09a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f09c:	bf00      	nop
    f09e:	b003      	add	sp, #12
    f0a0:	f85d fb04 	ldr.w	pc, [sp], #4
    f0a4:	1fff9290 	.word	0x1fff9290
    f0a8:	1fff928c 	.word	0x1fff928c

0000f0ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    f0ac:	b500      	push	{lr}
    f0ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0b0:	f7f2 f9ec 	bl	148c <Sys_GetCoreID>
    f0b4:	4603      	mov	r3, r0
    f0b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    f0b8:	4a10      	ldr	r2, [pc, #64]	; (f0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    f0ba:	9b01      	ldr	r3, [sp, #4]
    f0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c0:	2b00      	cmp	r3, #0
    f0c2:	d10d      	bne.n	f0e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0c4:	f7f1 fc02 	bl	8cc <Adc_schm_read_msr>
    f0c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0ca:	9b00      	ldr	r3, [sp, #0]
    f0cc:	f003 0301 	and.w	r3, r3, #1
    f0d0:	2b00      	cmp	r3, #0
    f0d2:	d100      	bne.n	f0d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    f0d6:	490a      	ldr	r1, [pc, #40]	; (f100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    f0d8:	9b01      	ldr	r3, [sp, #4]
    f0da:	9a00      	ldr	r2, [sp, #0]
    f0dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    f0e0:	4a06      	ldr	r2, [pc, #24]	; (f0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    f0e2:	9b01      	ldr	r3, [sp, #4]
    f0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e8:	1c5a      	adds	r2, r3, #1
    f0ea:	4904      	ldr	r1, [pc, #16]	; (f0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    f0ec:	9b01      	ldr	r3, [sp, #4]
    f0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0f2:	bf00      	nop
    f0f4:	b003      	add	sp, #12
    f0f6:	f85d fb04 	ldr.w	pc, [sp], #4
    f0fa:	bf00      	nop
    f0fc:	1fff9298 	.word	0x1fff9298
    f100:	1fff9294 	.word	0x1fff9294

0000f104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    f104:	b500      	push	{lr}
    f106:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f108:	f7f2 f9c0 	bl	148c <Sys_GetCoreID>
    f10c:	4603      	mov	r3, r0
    f10e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    f110:	4a0d      	ldr	r2, [pc, #52]	; (f148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    f112:	9b01      	ldr	r3, [sp, #4]
    f114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f118:	1e5a      	subs	r2, r3, #1
    f11a:	490b      	ldr	r1, [pc, #44]	; (f148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    f11c:	9b01      	ldr	r3, [sp, #4]
    f11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    f122:	4a0a      	ldr	r2, [pc, #40]	; (f14c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    f124:	9b01      	ldr	r3, [sp, #4]
    f126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f12a:	f003 0301 	and.w	r3, r3, #1
    f12e:	2b00      	cmp	r3, #0
    f130:	d106      	bne.n	f140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    f132:	4a05      	ldr	r2, [pc, #20]	; (f148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    f134:	9b01      	ldr	r3, [sp, #4]
    f136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f13a:	2b00      	cmp	r3, #0
    f13c:	d100      	bne.n	f140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f13e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f140:	bf00      	nop
    f142:	b003      	add	sp, #12
    f144:	f85d fb04 	ldr.w	pc, [sp], #4
    f148:	1fff9298 	.word	0x1fff9298
    f14c:	1fff9294 	.word	0x1fff9294

0000f150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    f150:	b500      	push	{lr}
    f152:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f154:	f7f2 f99a 	bl	148c <Sys_GetCoreID>
    f158:	4603      	mov	r3, r0
    f15a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    f15c:	4a10      	ldr	r2, [pc, #64]	; (f1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    f15e:	9b01      	ldr	r3, [sp, #4]
    f160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f164:	2b00      	cmp	r3, #0
    f166:	d10d      	bne.n	f184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f168:	f7f1 fbb0 	bl	8cc <Adc_schm_read_msr>
    f16c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f16e:	9b00      	ldr	r3, [sp, #0]
    f170:	f003 0301 	and.w	r3, r3, #1
    f174:	2b00      	cmp	r3, #0
    f176:	d100      	bne.n	f17a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f178:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    f17a:	490a      	ldr	r1, [pc, #40]	; (f1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    f17c:	9b01      	ldr	r3, [sp, #4]
    f17e:	9a00      	ldr	r2, [sp, #0]
    f180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    f184:	4a06      	ldr	r2, [pc, #24]	; (f1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    f186:	9b01      	ldr	r3, [sp, #4]
    f188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f18c:	1c5a      	adds	r2, r3, #1
    f18e:	4904      	ldr	r1, [pc, #16]	; (f1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    f190:	9b01      	ldr	r3, [sp, #4]
    f192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f196:	bf00      	nop
    f198:	b003      	add	sp, #12
    f19a:	f85d fb04 	ldr.w	pc, [sp], #4
    f19e:	bf00      	nop
    f1a0:	1fff92a0 	.word	0x1fff92a0
    f1a4:	1fff929c 	.word	0x1fff929c

0000f1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    f1a8:	b500      	push	{lr}
    f1aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1ac:	f7f2 f96e 	bl	148c <Sys_GetCoreID>
    f1b0:	4603      	mov	r3, r0
    f1b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    f1b4:	4a0d      	ldr	r2, [pc, #52]	; (f1ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    f1b6:	9b01      	ldr	r3, [sp, #4]
    f1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1bc:	1e5a      	subs	r2, r3, #1
    f1be:	490b      	ldr	r1, [pc, #44]	; (f1ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    f1c0:	9b01      	ldr	r3, [sp, #4]
    f1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    f1c6:	4a0a      	ldr	r2, [pc, #40]	; (f1f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    f1c8:	9b01      	ldr	r3, [sp, #4]
    f1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ce:	f003 0301 	and.w	r3, r3, #1
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d106      	bne.n	f1e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    f1d6:	4a05      	ldr	r2, [pc, #20]	; (f1ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    f1d8:	9b01      	ldr	r3, [sp, #4]
    f1da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d100      	bne.n	f1e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1e4:	bf00      	nop
    f1e6:	b003      	add	sp, #12
    f1e8:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ec:	1fff92a0 	.word	0x1fff92a0
    f1f0:	1fff929c 	.word	0x1fff929c

0000f1f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    f1f4:	b500      	push	{lr}
    f1f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1f8:	f7f2 f948 	bl	148c <Sys_GetCoreID>
    f1fc:	4603      	mov	r3, r0
    f1fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    f200:	4a10      	ldr	r2, [pc, #64]	; (f244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    f202:	9b01      	ldr	r3, [sp, #4]
    f204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f208:	2b00      	cmp	r3, #0
    f20a:	d10d      	bne.n	f228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f20c:	f7f1 fb5e 	bl	8cc <Adc_schm_read_msr>
    f210:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f212:	9b00      	ldr	r3, [sp, #0]
    f214:	f003 0301 	and.w	r3, r3, #1
    f218:	2b00      	cmp	r3, #0
    f21a:	d100      	bne.n	f21e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f21c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    f21e:	490a      	ldr	r1, [pc, #40]	; (f248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    f220:	9b01      	ldr	r3, [sp, #4]
    f222:	9a00      	ldr	r2, [sp, #0]
    f224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    f228:	4a06      	ldr	r2, [pc, #24]	; (f244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    f22a:	9b01      	ldr	r3, [sp, #4]
    f22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f230:	1c5a      	adds	r2, r3, #1
    f232:	4904      	ldr	r1, [pc, #16]	; (f244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    f234:	9b01      	ldr	r3, [sp, #4]
    f236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f23a:	bf00      	nop
    f23c:	b003      	add	sp, #12
    f23e:	f85d fb04 	ldr.w	pc, [sp], #4
    f242:	bf00      	nop
    f244:	1fff92a8 	.word	0x1fff92a8
    f248:	1fff92a4 	.word	0x1fff92a4

0000f24c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    f24c:	b500      	push	{lr}
    f24e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f250:	f7f2 f91c 	bl	148c <Sys_GetCoreID>
    f254:	4603      	mov	r3, r0
    f256:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    f258:	4a0d      	ldr	r2, [pc, #52]	; (f290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    f25a:	9b01      	ldr	r3, [sp, #4]
    f25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f260:	1e5a      	subs	r2, r3, #1
    f262:	490b      	ldr	r1, [pc, #44]	; (f290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    f264:	9b01      	ldr	r3, [sp, #4]
    f266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    f26a:	4a0a      	ldr	r2, [pc, #40]	; (f294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    f26c:	9b01      	ldr	r3, [sp, #4]
    f26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f272:	f003 0301 	and.w	r3, r3, #1
    f276:	2b00      	cmp	r3, #0
    f278:	d106      	bne.n	f288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    f27a:	4a05      	ldr	r2, [pc, #20]	; (f290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    f27c:	9b01      	ldr	r3, [sp, #4]
    f27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f282:	2b00      	cmp	r3, #0
    f284:	d100      	bne.n	f288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f286:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f288:	bf00      	nop
    f28a:	b003      	add	sp, #12
    f28c:	f85d fb04 	ldr.w	pc, [sp], #4
    f290:	1fff92a8 	.word	0x1fff92a8
    f294:	1fff92a4 	.word	0x1fff92a4

0000f298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    f298:	b500      	push	{lr}
    f29a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f29c:	f7f2 f8f6 	bl	148c <Sys_GetCoreID>
    f2a0:	4603      	mov	r3, r0
    f2a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    f2a4:	4a10      	ldr	r2, [pc, #64]	; (f2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    f2a6:	9b01      	ldr	r3, [sp, #4]
    f2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d10d      	bne.n	f2cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2b0:	f7f1 fb0c 	bl	8cc <Adc_schm_read_msr>
    f2b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2b6:	9b00      	ldr	r3, [sp, #0]
    f2b8:	f003 0301 	and.w	r3, r3, #1
    f2bc:	2b00      	cmp	r3, #0
    f2be:	d100      	bne.n	f2c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    f2c2:	490a      	ldr	r1, [pc, #40]	; (f2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    f2c4:	9b01      	ldr	r3, [sp, #4]
    f2c6:	9a00      	ldr	r2, [sp, #0]
    f2c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    f2cc:	4a06      	ldr	r2, [pc, #24]	; (f2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    f2ce:	9b01      	ldr	r3, [sp, #4]
    f2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d4:	1c5a      	adds	r2, r3, #1
    f2d6:	4904      	ldr	r1, [pc, #16]	; (f2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    f2d8:	9b01      	ldr	r3, [sp, #4]
    f2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2de:	bf00      	nop
    f2e0:	b003      	add	sp, #12
    f2e2:	f85d fb04 	ldr.w	pc, [sp], #4
    f2e6:	bf00      	nop
    f2e8:	1fff92b0 	.word	0x1fff92b0
    f2ec:	1fff92ac 	.word	0x1fff92ac

0000f2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    f2f0:	b500      	push	{lr}
    f2f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2f4:	f7f2 f8ca 	bl	148c <Sys_GetCoreID>
    f2f8:	4603      	mov	r3, r0
    f2fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    f2fc:	4a0d      	ldr	r2, [pc, #52]	; (f334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    f2fe:	9b01      	ldr	r3, [sp, #4]
    f300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f304:	1e5a      	subs	r2, r3, #1
    f306:	490b      	ldr	r1, [pc, #44]	; (f334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    f308:	9b01      	ldr	r3, [sp, #4]
    f30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    f30e:	4a0a      	ldr	r2, [pc, #40]	; (f338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f316:	f003 0301 	and.w	r3, r3, #1
    f31a:	2b00      	cmp	r3, #0
    f31c:	d106      	bne.n	f32c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    f31e:	4a05      	ldr	r2, [pc, #20]	; (f334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    f320:	9b01      	ldr	r3, [sp, #4]
    f322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f326:	2b00      	cmp	r3, #0
    f328:	d100      	bne.n	f32c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f32a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f32c:	bf00      	nop
    f32e:	b003      	add	sp, #12
    f330:	f85d fb04 	ldr.w	pc, [sp], #4
    f334:	1fff92b0 	.word	0x1fff92b0
    f338:	1fff92ac 	.word	0x1fff92ac

0000f33c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    f33c:	b500      	push	{lr}
    f33e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f340:	f7f2 f8a4 	bl	148c <Sys_GetCoreID>
    f344:	4603      	mov	r3, r0
    f346:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    f348:	4a10      	ldr	r2, [pc, #64]	; (f38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    f34a:	9b01      	ldr	r3, [sp, #4]
    f34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f350:	2b00      	cmp	r3, #0
    f352:	d10d      	bne.n	f370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f354:	f7f1 faba 	bl	8cc <Adc_schm_read_msr>
    f358:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f35a:	9b00      	ldr	r3, [sp, #0]
    f35c:	f003 0301 	and.w	r3, r3, #1
    f360:	2b00      	cmp	r3, #0
    f362:	d100      	bne.n	f366 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f364:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    f366:	490a      	ldr	r1, [pc, #40]	; (f390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    f368:	9b01      	ldr	r3, [sp, #4]
    f36a:	9a00      	ldr	r2, [sp, #0]
    f36c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    f370:	4a06      	ldr	r2, [pc, #24]	; (f38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    f372:	9b01      	ldr	r3, [sp, #4]
    f374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f378:	1c5a      	adds	r2, r3, #1
    f37a:	4904      	ldr	r1, [pc, #16]	; (f38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    f37c:	9b01      	ldr	r3, [sp, #4]
    f37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f382:	bf00      	nop
    f384:	b003      	add	sp, #12
    f386:	f85d fb04 	ldr.w	pc, [sp], #4
    f38a:	bf00      	nop
    f38c:	1fff92b8 	.word	0x1fff92b8
    f390:	1fff92b4 	.word	0x1fff92b4

0000f394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    f394:	b500      	push	{lr}
    f396:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f398:	f7f2 f878 	bl	148c <Sys_GetCoreID>
    f39c:	4603      	mov	r3, r0
    f39e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    f3a0:	4a0d      	ldr	r2, [pc, #52]	; (f3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    f3a2:	9b01      	ldr	r3, [sp, #4]
    f3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a8:	1e5a      	subs	r2, r3, #1
    f3aa:	490b      	ldr	r1, [pc, #44]	; (f3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    f3ac:	9b01      	ldr	r3, [sp, #4]
    f3ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    f3b2:	4a0a      	ldr	r2, [pc, #40]	; (f3dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    f3b4:	9b01      	ldr	r3, [sp, #4]
    f3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ba:	f003 0301 	and.w	r3, r3, #1
    f3be:	2b00      	cmp	r3, #0
    f3c0:	d106      	bne.n	f3d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    f3c2:	4a05      	ldr	r2, [pc, #20]	; (f3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    f3c4:	9b01      	ldr	r3, [sp, #4]
    f3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ca:	2b00      	cmp	r3, #0
    f3cc:	d100      	bne.n	f3d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3d0:	bf00      	nop
    f3d2:	b003      	add	sp, #12
    f3d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f3d8:	1fff92b8 	.word	0x1fff92b8
    f3dc:	1fff92b4 	.word	0x1fff92b4

0000f3e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    f3e0:	b500      	push	{lr}
    f3e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3e4:	f7f2 f852 	bl	148c <Sys_GetCoreID>
    f3e8:	4603      	mov	r3, r0
    f3ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    f3ec:	4a10      	ldr	r2, [pc, #64]	; (f430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    f3ee:	9b01      	ldr	r3, [sp, #4]
    f3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d10d      	bne.n	f414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3f8:	f7f1 fa68 	bl	8cc <Adc_schm_read_msr>
    f3fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3fe:	9b00      	ldr	r3, [sp, #0]
    f400:	f003 0301 	and.w	r3, r3, #1
    f404:	2b00      	cmp	r3, #0
    f406:	d100      	bne.n	f40a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f408:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    f40a:	490a      	ldr	r1, [pc, #40]	; (f434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    f40c:	9b01      	ldr	r3, [sp, #4]
    f40e:	9a00      	ldr	r2, [sp, #0]
    f410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    f414:	4a06      	ldr	r2, [pc, #24]	; (f430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    f416:	9b01      	ldr	r3, [sp, #4]
    f418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f41c:	1c5a      	adds	r2, r3, #1
    f41e:	4904      	ldr	r1, [pc, #16]	; (f430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    f420:	9b01      	ldr	r3, [sp, #4]
    f422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f426:	bf00      	nop
    f428:	b003      	add	sp, #12
    f42a:	f85d fb04 	ldr.w	pc, [sp], #4
    f42e:	bf00      	nop
    f430:	1fff92c0 	.word	0x1fff92c0
    f434:	1fff92bc 	.word	0x1fff92bc

0000f438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    f438:	b500      	push	{lr}
    f43a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f43c:	f7f2 f826 	bl	148c <Sys_GetCoreID>
    f440:	4603      	mov	r3, r0
    f442:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    f444:	4a0d      	ldr	r2, [pc, #52]	; (f47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    f446:	9b01      	ldr	r3, [sp, #4]
    f448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44c:	1e5a      	subs	r2, r3, #1
    f44e:	490b      	ldr	r1, [pc, #44]	; (f47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    f450:	9b01      	ldr	r3, [sp, #4]
    f452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    f456:	4a0a      	ldr	r2, [pc, #40]	; (f480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    f458:	9b01      	ldr	r3, [sp, #4]
    f45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f45e:	f003 0301 	and.w	r3, r3, #1
    f462:	2b00      	cmp	r3, #0
    f464:	d106      	bne.n	f474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    f466:	4a05      	ldr	r2, [pc, #20]	; (f47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    f468:	9b01      	ldr	r3, [sp, #4]
    f46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f46e:	2b00      	cmp	r3, #0
    f470:	d100      	bne.n	f474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f472:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f474:	bf00      	nop
    f476:	b003      	add	sp, #12
    f478:	f85d fb04 	ldr.w	pc, [sp], #4
    f47c:	1fff92c0 	.word	0x1fff92c0
    f480:	1fff92bc 	.word	0x1fff92bc

0000f484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    f484:	b500      	push	{lr}
    f486:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f488:	f7f2 f800 	bl	148c <Sys_GetCoreID>
    f48c:	4603      	mov	r3, r0
    f48e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    f490:	4a10      	ldr	r2, [pc, #64]	; (f4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    f492:	9b01      	ldr	r3, [sp, #4]
    f494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f498:	2b00      	cmp	r3, #0
    f49a:	d10d      	bne.n	f4b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f49c:	f7f1 fa16 	bl	8cc <Adc_schm_read_msr>
    f4a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4a2:	9b00      	ldr	r3, [sp, #0]
    f4a4:	f003 0301 	and.w	r3, r3, #1
    f4a8:	2b00      	cmp	r3, #0
    f4aa:	d100      	bne.n	f4ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    f4ae:	490a      	ldr	r1, [pc, #40]	; (f4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    f4b0:	9b01      	ldr	r3, [sp, #4]
    f4b2:	9a00      	ldr	r2, [sp, #0]
    f4b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    f4b8:	4a06      	ldr	r2, [pc, #24]	; (f4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    f4ba:	9b01      	ldr	r3, [sp, #4]
    f4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c0:	1c5a      	adds	r2, r3, #1
    f4c2:	4904      	ldr	r1, [pc, #16]	; (f4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    f4c4:	9b01      	ldr	r3, [sp, #4]
    f4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4ca:	bf00      	nop
    f4cc:	b003      	add	sp, #12
    f4ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f4d2:	bf00      	nop
    f4d4:	1fff92c8 	.word	0x1fff92c8
    f4d8:	1fff92c4 	.word	0x1fff92c4

0000f4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    f4dc:	b500      	push	{lr}
    f4de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4e0:	f7f1 ffd4 	bl	148c <Sys_GetCoreID>
    f4e4:	4603      	mov	r3, r0
    f4e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    f4e8:	4a0d      	ldr	r2, [pc, #52]	; (f520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    f4ea:	9b01      	ldr	r3, [sp, #4]
    f4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f0:	1e5a      	subs	r2, r3, #1
    f4f2:	490b      	ldr	r1, [pc, #44]	; (f520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    f4f4:	9b01      	ldr	r3, [sp, #4]
    f4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    f4fa:	4a0a      	ldr	r2, [pc, #40]	; (f524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f502:	f003 0301 	and.w	r3, r3, #1
    f506:	2b00      	cmp	r3, #0
    f508:	d106      	bne.n	f518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    f50a:	4a05      	ldr	r2, [pc, #20]	; (f520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    f50c:	9b01      	ldr	r3, [sp, #4]
    f50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f512:	2b00      	cmp	r3, #0
    f514:	d100      	bne.n	f518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f516:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f518:	bf00      	nop
    f51a:	b003      	add	sp, #12
    f51c:	f85d fb04 	ldr.w	pc, [sp], #4
    f520:	1fff92c8 	.word	0x1fff92c8
    f524:	1fff92c4 	.word	0x1fff92c4

0000f528 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    f528:	b500      	push	{lr}
    f52a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f52c:	f7f1 ffae 	bl	148c <Sys_GetCoreID>
    f530:	4603      	mov	r3, r0
    f532:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    f534:	4a10      	ldr	r2, [pc, #64]	; (f578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    f536:	9b01      	ldr	r3, [sp, #4]
    f538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d10d      	bne.n	f55c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f540:	f7f1 f9c4 	bl	8cc <Adc_schm_read_msr>
    f544:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f546:	9b00      	ldr	r3, [sp, #0]
    f548:	f003 0301 	and.w	r3, r3, #1
    f54c:	2b00      	cmp	r3, #0
    f54e:	d100      	bne.n	f552 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f550:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    f552:	490a      	ldr	r1, [pc, #40]	; (f57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    f554:	9b01      	ldr	r3, [sp, #4]
    f556:	9a00      	ldr	r2, [sp, #0]
    f558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    f55c:	4a06      	ldr	r2, [pc, #24]	; (f578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    f55e:	9b01      	ldr	r3, [sp, #4]
    f560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f564:	1c5a      	adds	r2, r3, #1
    f566:	4904      	ldr	r1, [pc, #16]	; (f578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    f568:	9b01      	ldr	r3, [sp, #4]
    f56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f56e:	bf00      	nop
    f570:	b003      	add	sp, #12
    f572:	f85d fb04 	ldr.w	pc, [sp], #4
    f576:	bf00      	nop
    f578:	1fff92d0 	.word	0x1fff92d0
    f57c:	1fff92cc 	.word	0x1fff92cc

0000f580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    f580:	b500      	push	{lr}
    f582:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f584:	f7f1 ff82 	bl	148c <Sys_GetCoreID>
    f588:	4603      	mov	r3, r0
    f58a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    f58c:	4a0d      	ldr	r2, [pc, #52]	; (f5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    f58e:	9b01      	ldr	r3, [sp, #4]
    f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f594:	1e5a      	subs	r2, r3, #1
    f596:	490b      	ldr	r1, [pc, #44]	; (f5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    f598:	9b01      	ldr	r3, [sp, #4]
    f59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    f59e:	4a0a      	ldr	r2, [pc, #40]	; (f5c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    f5a0:	9b01      	ldr	r3, [sp, #4]
    f5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5a6:	f003 0301 	and.w	r3, r3, #1
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	d106      	bne.n	f5bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    f5ae:	4a05      	ldr	r2, [pc, #20]	; (f5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    f5b0:	9b01      	ldr	r3, [sp, #4]
    f5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5b6:	2b00      	cmp	r3, #0
    f5b8:	d100      	bne.n	f5bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5bc:	bf00      	nop
    f5be:	b003      	add	sp, #12
    f5c0:	f85d fb04 	ldr.w	pc, [sp], #4
    f5c4:	1fff92d0 	.word	0x1fff92d0
    f5c8:	1fff92cc 	.word	0x1fff92cc

0000f5cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    f5cc:	b500      	push	{lr}
    f5ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5d0:	f7f1 ff5c 	bl	148c <Sys_GetCoreID>
    f5d4:	4603      	mov	r3, r0
    f5d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    f5d8:	4a10      	ldr	r2, [pc, #64]	; (f61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    f5da:	9b01      	ldr	r3, [sp, #4]
    f5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d10d      	bne.n	f600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5e4:	f7f1 f972 	bl	8cc <Adc_schm_read_msr>
    f5e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5ea:	9b00      	ldr	r3, [sp, #0]
    f5ec:	f003 0301 	and.w	r3, r3, #1
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d100      	bne.n	f5f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    f5f6:	490a      	ldr	r1, [pc, #40]	; (f620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    f5f8:	9b01      	ldr	r3, [sp, #4]
    f5fa:	9a00      	ldr	r2, [sp, #0]
    f5fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    f600:	4a06      	ldr	r2, [pc, #24]	; (f61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    f602:	9b01      	ldr	r3, [sp, #4]
    f604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f608:	1c5a      	adds	r2, r3, #1
    f60a:	4904      	ldr	r1, [pc, #16]	; (f61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    f60c:	9b01      	ldr	r3, [sp, #4]
    f60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f612:	bf00      	nop
    f614:	b003      	add	sp, #12
    f616:	f85d fb04 	ldr.w	pc, [sp], #4
    f61a:	bf00      	nop
    f61c:	1fff92d8 	.word	0x1fff92d8
    f620:	1fff92d4 	.word	0x1fff92d4

0000f624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    f624:	b500      	push	{lr}
    f626:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f628:	f7f1 ff30 	bl	148c <Sys_GetCoreID>
    f62c:	4603      	mov	r3, r0
    f62e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    f630:	4a0d      	ldr	r2, [pc, #52]	; (f668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    f632:	9b01      	ldr	r3, [sp, #4]
    f634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f638:	1e5a      	subs	r2, r3, #1
    f63a:	490b      	ldr	r1, [pc, #44]	; (f668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    f63c:	9b01      	ldr	r3, [sp, #4]
    f63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    f642:	4a0a      	ldr	r2, [pc, #40]	; (f66c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    f644:	9b01      	ldr	r3, [sp, #4]
    f646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f64a:	f003 0301 	and.w	r3, r3, #1
    f64e:	2b00      	cmp	r3, #0
    f650:	d106      	bne.n	f660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    f652:	4a05      	ldr	r2, [pc, #20]	; (f668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    f654:	9b01      	ldr	r3, [sp, #4]
    f656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d100      	bne.n	f660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f65e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f660:	bf00      	nop
    f662:	b003      	add	sp, #12
    f664:	f85d fb04 	ldr.w	pc, [sp], #4
    f668:	1fff92d8 	.word	0x1fff92d8
    f66c:	1fff92d4 	.word	0x1fff92d4

0000f670 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    f670:	b500      	push	{lr}
    f672:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f674:	f7f1 ff0a 	bl	148c <Sys_GetCoreID>
    f678:	4603      	mov	r3, r0
    f67a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    f67c:	4a10      	ldr	r2, [pc, #64]	; (f6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    f67e:	9b01      	ldr	r3, [sp, #4]
    f680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f684:	2b00      	cmp	r3, #0
    f686:	d10d      	bne.n	f6a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f688:	f7f1 f920 	bl	8cc <Adc_schm_read_msr>
    f68c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f68e:	9b00      	ldr	r3, [sp, #0]
    f690:	f003 0301 	and.w	r3, r3, #1
    f694:	2b00      	cmp	r3, #0
    f696:	d100      	bne.n	f69a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f698:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    f69a:	490a      	ldr	r1, [pc, #40]	; (f6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    f69c:	9b01      	ldr	r3, [sp, #4]
    f69e:	9a00      	ldr	r2, [sp, #0]
    f6a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    f6a4:	4a06      	ldr	r2, [pc, #24]	; (f6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    f6a6:	9b01      	ldr	r3, [sp, #4]
    f6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ac:	1c5a      	adds	r2, r3, #1
    f6ae:	4904      	ldr	r1, [pc, #16]	; (f6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    f6b0:	9b01      	ldr	r3, [sp, #4]
    f6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6b6:	bf00      	nop
    f6b8:	b003      	add	sp, #12
    f6ba:	f85d fb04 	ldr.w	pc, [sp], #4
    f6be:	bf00      	nop
    f6c0:	1fff92e0 	.word	0x1fff92e0
    f6c4:	1fff92dc 	.word	0x1fff92dc

0000f6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    f6c8:	b500      	push	{lr}
    f6ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6cc:	f7f1 fede 	bl	148c <Sys_GetCoreID>
    f6d0:	4603      	mov	r3, r0
    f6d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    f6d4:	4a0d      	ldr	r2, [pc, #52]	; (f70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    f6d6:	9b01      	ldr	r3, [sp, #4]
    f6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6dc:	1e5a      	subs	r2, r3, #1
    f6de:	490b      	ldr	r1, [pc, #44]	; (f70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    f6e0:	9b01      	ldr	r3, [sp, #4]
    f6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    f6e6:	4a0a      	ldr	r2, [pc, #40]	; (f710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    f6e8:	9b01      	ldr	r3, [sp, #4]
    f6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ee:	f003 0301 	and.w	r3, r3, #1
    f6f2:	2b00      	cmp	r3, #0
    f6f4:	d106      	bne.n	f704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    f6f6:	4a05      	ldr	r2, [pc, #20]	; (f70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    f6f8:	9b01      	ldr	r3, [sp, #4]
    f6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d100      	bne.n	f704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f702:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f704:	bf00      	nop
    f706:	b003      	add	sp, #12
    f708:	f85d fb04 	ldr.w	pc, [sp], #4
    f70c:	1fff92e0 	.word	0x1fff92e0
    f710:	1fff92dc 	.word	0x1fff92dc

0000f714 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    f714:	b500      	push	{lr}
    f716:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f718:	f7f1 feb8 	bl	148c <Sys_GetCoreID>
    f71c:	4603      	mov	r3, r0
    f71e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    f720:	4a10      	ldr	r2, [pc, #64]	; (f764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    f722:	9b01      	ldr	r3, [sp, #4]
    f724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f728:	2b00      	cmp	r3, #0
    f72a:	d10d      	bne.n	f748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f72c:	f7f1 f8ce 	bl	8cc <Adc_schm_read_msr>
    f730:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f732:	9b00      	ldr	r3, [sp, #0]
    f734:	f003 0301 	and.w	r3, r3, #1
    f738:	2b00      	cmp	r3, #0
    f73a:	d100      	bne.n	f73e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f73c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    f73e:	490a      	ldr	r1, [pc, #40]	; (f768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    f740:	9b01      	ldr	r3, [sp, #4]
    f742:	9a00      	ldr	r2, [sp, #0]
    f744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    f748:	4a06      	ldr	r2, [pc, #24]	; (f764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    f74a:	9b01      	ldr	r3, [sp, #4]
    f74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f750:	1c5a      	adds	r2, r3, #1
    f752:	4904      	ldr	r1, [pc, #16]	; (f764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    f754:	9b01      	ldr	r3, [sp, #4]
    f756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f75a:	bf00      	nop
    f75c:	b003      	add	sp, #12
    f75e:	f85d fb04 	ldr.w	pc, [sp], #4
    f762:	bf00      	nop
    f764:	1fff92e8 	.word	0x1fff92e8
    f768:	1fff92e4 	.word	0x1fff92e4

0000f76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    f76c:	b500      	push	{lr}
    f76e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f770:	f7f1 fe8c 	bl	148c <Sys_GetCoreID>
    f774:	4603      	mov	r3, r0
    f776:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    f778:	4a0d      	ldr	r2, [pc, #52]	; (f7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    f77a:	9b01      	ldr	r3, [sp, #4]
    f77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f780:	1e5a      	subs	r2, r3, #1
    f782:	490b      	ldr	r1, [pc, #44]	; (f7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    f784:	9b01      	ldr	r3, [sp, #4]
    f786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    f78a:	4a0a      	ldr	r2, [pc, #40]	; (f7b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    f78c:	9b01      	ldr	r3, [sp, #4]
    f78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f792:	f003 0301 	and.w	r3, r3, #1
    f796:	2b00      	cmp	r3, #0
    f798:	d106      	bne.n	f7a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    f79a:	4a05      	ldr	r2, [pc, #20]	; (f7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    f79c:	9b01      	ldr	r3, [sp, #4]
    f79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	d100      	bne.n	f7a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7a8:	bf00      	nop
    f7aa:	b003      	add	sp, #12
    f7ac:	f85d fb04 	ldr.w	pc, [sp], #4
    f7b0:	1fff92e8 	.word	0x1fff92e8
    f7b4:	1fff92e4 	.word	0x1fff92e4

0000f7b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    f7b8:	b500      	push	{lr}
    f7ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7bc:	f7f1 fe66 	bl	148c <Sys_GetCoreID>
    f7c0:	4603      	mov	r3, r0
    f7c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    f7c4:	4a10      	ldr	r2, [pc, #64]	; (f808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    f7c6:	9b01      	ldr	r3, [sp, #4]
    f7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d10d      	bne.n	f7ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7d0:	f7f1 f87c 	bl	8cc <Adc_schm_read_msr>
    f7d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7d6:	9b00      	ldr	r3, [sp, #0]
    f7d8:	f003 0301 	and.w	r3, r3, #1
    f7dc:	2b00      	cmp	r3, #0
    f7de:	d100      	bne.n	f7e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    f7e2:	490a      	ldr	r1, [pc, #40]	; (f80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    f7e4:	9b01      	ldr	r3, [sp, #4]
    f7e6:	9a00      	ldr	r2, [sp, #0]
    f7e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    f7ec:	4a06      	ldr	r2, [pc, #24]	; (f808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    f7ee:	9b01      	ldr	r3, [sp, #4]
    f7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f4:	1c5a      	adds	r2, r3, #1
    f7f6:	4904      	ldr	r1, [pc, #16]	; (f808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    f7f8:	9b01      	ldr	r3, [sp, #4]
    f7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7fe:	bf00      	nop
    f800:	b003      	add	sp, #12
    f802:	f85d fb04 	ldr.w	pc, [sp], #4
    f806:	bf00      	nop
    f808:	1fff92f0 	.word	0x1fff92f0
    f80c:	1fff92ec 	.word	0x1fff92ec

0000f810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    f810:	b500      	push	{lr}
    f812:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f814:	f7f1 fe3a 	bl	148c <Sys_GetCoreID>
    f818:	4603      	mov	r3, r0
    f81a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    f81c:	4a0d      	ldr	r2, [pc, #52]	; (f854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    f81e:	9b01      	ldr	r3, [sp, #4]
    f820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f824:	1e5a      	subs	r2, r3, #1
    f826:	490b      	ldr	r1, [pc, #44]	; (f854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    f828:	9b01      	ldr	r3, [sp, #4]
    f82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    f82e:	4a0a      	ldr	r2, [pc, #40]	; (f858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    f830:	9b01      	ldr	r3, [sp, #4]
    f832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f836:	f003 0301 	and.w	r3, r3, #1
    f83a:	2b00      	cmp	r3, #0
    f83c:	d106      	bne.n	f84c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    f83e:	4a05      	ldr	r2, [pc, #20]	; (f854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    f840:	9b01      	ldr	r3, [sp, #4]
    f842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f846:	2b00      	cmp	r3, #0
    f848:	d100      	bne.n	f84c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f84a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f84c:	bf00      	nop
    f84e:	b003      	add	sp, #12
    f850:	f85d fb04 	ldr.w	pc, [sp], #4
    f854:	1fff92f0 	.word	0x1fff92f0
    f858:	1fff92ec 	.word	0x1fff92ec

0000f85c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    f85c:	b500      	push	{lr}
    f85e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f860:	f7f1 fe14 	bl	148c <Sys_GetCoreID>
    f864:	4603      	mov	r3, r0
    f866:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    f868:	4a10      	ldr	r2, [pc, #64]	; (f8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    f86a:	9b01      	ldr	r3, [sp, #4]
    f86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f870:	2b00      	cmp	r3, #0
    f872:	d10d      	bne.n	f890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f874:	f7f1 f82a 	bl	8cc <Adc_schm_read_msr>
    f878:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f87a:	9b00      	ldr	r3, [sp, #0]
    f87c:	f003 0301 	and.w	r3, r3, #1
    f880:	2b00      	cmp	r3, #0
    f882:	d100      	bne.n	f886 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f884:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    f886:	490a      	ldr	r1, [pc, #40]	; (f8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    f888:	9b01      	ldr	r3, [sp, #4]
    f88a:	9a00      	ldr	r2, [sp, #0]
    f88c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    f890:	4a06      	ldr	r2, [pc, #24]	; (f8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    f892:	9b01      	ldr	r3, [sp, #4]
    f894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f898:	1c5a      	adds	r2, r3, #1
    f89a:	4904      	ldr	r1, [pc, #16]	; (f8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    f89c:	9b01      	ldr	r3, [sp, #4]
    f89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8a2:	bf00      	nop
    f8a4:	b003      	add	sp, #12
    f8a6:	f85d fb04 	ldr.w	pc, [sp], #4
    f8aa:	bf00      	nop
    f8ac:	1fff92f8 	.word	0x1fff92f8
    f8b0:	1fff92f4 	.word	0x1fff92f4

0000f8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    f8b4:	b500      	push	{lr}
    f8b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8b8:	f7f1 fde8 	bl	148c <Sys_GetCoreID>
    f8bc:	4603      	mov	r3, r0
    f8be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    f8c0:	4a0d      	ldr	r2, [pc, #52]	; (f8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    f8c2:	9b01      	ldr	r3, [sp, #4]
    f8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8c8:	1e5a      	subs	r2, r3, #1
    f8ca:	490b      	ldr	r1, [pc, #44]	; (f8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    f8cc:	9b01      	ldr	r3, [sp, #4]
    f8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    f8d2:	4a0a      	ldr	r2, [pc, #40]	; (f8fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    f8d4:	9b01      	ldr	r3, [sp, #4]
    f8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8da:	f003 0301 	and.w	r3, r3, #1
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d106      	bne.n	f8f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    f8e2:	4a05      	ldr	r2, [pc, #20]	; (f8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    f8e4:	9b01      	ldr	r3, [sp, #4]
    f8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d100      	bne.n	f8f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8f0:	bf00      	nop
    f8f2:	b003      	add	sp, #12
    f8f4:	f85d fb04 	ldr.w	pc, [sp], #4
    f8f8:	1fff92f8 	.word	0x1fff92f8
    f8fc:	1fff92f4 	.word	0x1fff92f4

0000f900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    f900:	b500      	push	{lr}
    f902:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f904:	f7f1 fdc2 	bl	148c <Sys_GetCoreID>
    f908:	4603      	mov	r3, r0
    f90a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    f90c:	4a10      	ldr	r2, [pc, #64]	; (f950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    f90e:	9b01      	ldr	r3, [sp, #4]
    f910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f914:	2b00      	cmp	r3, #0
    f916:	d10d      	bne.n	f934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f918:	f7f0 ffd8 	bl	8cc <Adc_schm_read_msr>
    f91c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f91e:	9b00      	ldr	r3, [sp, #0]
    f920:	f003 0301 	and.w	r3, r3, #1
    f924:	2b00      	cmp	r3, #0
    f926:	d100      	bne.n	f92a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f928:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    f92a:	490a      	ldr	r1, [pc, #40]	; (f954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    f92c:	9b01      	ldr	r3, [sp, #4]
    f92e:	9a00      	ldr	r2, [sp, #0]
    f930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    f934:	4a06      	ldr	r2, [pc, #24]	; (f950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    f936:	9b01      	ldr	r3, [sp, #4]
    f938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f93c:	1c5a      	adds	r2, r3, #1
    f93e:	4904      	ldr	r1, [pc, #16]	; (f950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    f940:	9b01      	ldr	r3, [sp, #4]
    f942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f946:	bf00      	nop
    f948:	b003      	add	sp, #12
    f94a:	f85d fb04 	ldr.w	pc, [sp], #4
    f94e:	bf00      	nop
    f950:	1fff9300 	.word	0x1fff9300
    f954:	1fff92fc 	.word	0x1fff92fc

0000f958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    f958:	b500      	push	{lr}
    f95a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f95c:	f7f1 fd96 	bl	148c <Sys_GetCoreID>
    f960:	4603      	mov	r3, r0
    f962:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    f964:	4a0d      	ldr	r2, [pc, #52]	; (f99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    f966:	9b01      	ldr	r3, [sp, #4]
    f968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f96c:	1e5a      	subs	r2, r3, #1
    f96e:	490b      	ldr	r1, [pc, #44]	; (f99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    f970:	9b01      	ldr	r3, [sp, #4]
    f972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    f976:	4a0a      	ldr	r2, [pc, #40]	; (f9a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    f978:	9b01      	ldr	r3, [sp, #4]
    f97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f97e:	f003 0301 	and.w	r3, r3, #1
    f982:	2b00      	cmp	r3, #0
    f984:	d106      	bne.n	f994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    f986:	4a05      	ldr	r2, [pc, #20]	; (f99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    f988:	9b01      	ldr	r3, [sp, #4]
    f98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f98e:	2b00      	cmp	r3, #0
    f990:	d100      	bne.n	f994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f992:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f994:	bf00      	nop
    f996:	b003      	add	sp, #12
    f998:	f85d fb04 	ldr.w	pc, [sp], #4
    f99c:	1fff9300 	.word	0x1fff9300
    f9a0:	1fff92fc 	.word	0x1fff92fc

0000f9a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    f9a4:	b500      	push	{lr}
    f9a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9a8:	f7f1 fd70 	bl	148c <Sys_GetCoreID>
    f9ac:	4603      	mov	r3, r0
    f9ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    f9b0:	4a10      	ldr	r2, [pc, #64]	; (f9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    f9b2:	9b01      	ldr	r3, [sp, #4]
    f9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d10d      	bne.n	f9d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9bc:	f7f0 ff86 	bl	8cc <Adc_schm_read_msr>
    f9c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9c2:	9b00      	ldr	r3, [sp, #0]
    f9c4:	f003 0301 	and.w	r3, r3, #1
    f9c8:	2b00      	cmp	r3, #0
    f9ca:	d100      	bne.n	f9ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    f9ce:	490a      	ldr	r1, [pc, #40]	; (f9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    f9d0:	9b01      	ldr	r3, [sp, #4]
    f9d2:	9a00      	ldr	r2, [sp, #0]
    f9d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    f9d8:	4a06      	ldr	r2, [pc, #24]	; (f9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    f9da:	9b01      	ldr	r3, [sp, #4]
    f9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9e0:	1c5a      	adds	r2, r3, #1
    f9e2:	4904      	ldr	r1, [pc, #16]	; (f9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    f9e4:	9b01      	ldr	r3, [sp, #4]
    f9e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9ea:	bf00      	nop
    f9ec:	b003      	add	sp, #12
    f9ee:	f85d fb04 	ldr.w	pc, [sp], #4
    f9f2:	bf00      	nop
    f9f4:	1fff9308 	.word	0x1fff9308
    f9f8:	1fff9304 	.word	0x1fff9304

0000f9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    f9fc:	b500      	push	{lr}
    f9fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa00:	f7f1 fd44 	bl	148c <Sys_GetCoreID>
    fa04:	4603      	mov	r3, r0
    fa06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    fa08:	4a0d      	ldr	r2, [pc, #52]	; (fa40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    fa0a:	9b01      	ldr	r3, [sp, #4]
    fa0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa10:	1e5a      	subs	r2, r3, #1
    fa12:	490b      	ldr	r1, [pc, #44]	; (fa40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    fa14:	9b01      	ldr	r3, [sp, #4]
    fa16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    fa1a:	4a0a      	ldr	r2, [pc, #40]	; (fa44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    fa1c:	9b01      	ldr	r3, [sp, #4]
    fa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa22:	f003 0301 	and.w	r3, r3, #1
    fa26:	2b00      	cmp	r3, #0
    fa28:	d106      	bne.n	fa38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    fa2a:	4a05      	ldr	r2, [pc, #20]	; (fa40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    fa2c:	9b01      	ldr	r3, [sp, #4]
    fa2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa32:	2b00      	cmp	r3, #0
    fa34:	d100      	bne.n	fa38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa38:	bf00      	nop
    fa3a:	b003      	add	sp, #12
    fa3c:	f85d fb04 	ldr.w	pc, [sp], #4
    fa40:	1fff9308 	.word	0x1fff9308
    fa44:	1fff9304 	.word	0x1fff9304

0000fa48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    fa48:	b500      	push	{lr}
    fa4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa4c:	f7f1 fd1e 	bl	148c <Sys_GetCoreID>
    fa50:	4603      	mov	r3, r0
    fa52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    fa54:	4a10      	ldr	r2, [pc, #64]	; (fa98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    fa56:	9b01      	ldr	r3, [sp, #4]
    fa58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d10d      	bne.n	fa7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa60:	f7f0 ff34 	bl	8cc <Adc_schm_read_msr>
    fa64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa66:	9b00      	ldr	r3, [sp, #0]
    fa68:	f003 0301 	and.w	r3, r3, #1
    fa6c:	2b00      	cmp	r3, #0
    fa6e:	d100      	bne.n	fa72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    fa72:	490a      	ldr	r1, [pc, #40]	; (fa9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    fa74:	9b01      	ldr	r3, [sp, #4]
    fa76:	9a00      	ldr	r2, [sp, #0]
    fa78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    fa7c:	4a06      	ldr	r2, [pc, #24]	; (fa98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    fa7e:	9b01      	ldr	r3, [sp, #4]
    fa80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa84:	1c5a      	adds	r2, r3, #1
    fa86:	4904      	ldr	r1, [pc, #16]	; (fa98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    fa88:	9b01      	ldr	r3, [sp, #4]
    fa8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa8e:	bf00      	nop
    fa90:	b003      	add	sp, #12
    fa92:	f85d fb04 	ldr.w	pc, [sp], #4
    fa96:	bf00      	nop
    fa98:	1fff9310 	.word	0x1fff9310
    fa9c:	1fff930c 	.word	0x1fff930c

0000faa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    faa0:	b500      	push	{lr}
    faa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    faa4:	f7f1 fcf2 	bl	148c <Sys_GetCoreID>
    faa8:	4603      	mov	r3, r0
    faaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    faac:	4a0d      	ldr	r2, [pc, #52]	; (fae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    faae:	9b01      	ldr	r3, [sp, #4]
    fab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab4:	1e5a      	subs	r2, r3, #1
    fab6:	490b      	ldr	r1, [pc, #44]	; (fae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    fab8:	9b01      	ldr	r3, [sp, #4]
    faba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    fabe:	4a0a      	ldr	r2, [pc, #40]	; (fae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    fac0:	9b01      	ldr	r3, [sp, #4]
    fac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fac6:	f003 0301 	and.w	r3, r3, #1
    faca:	2b00      	cmp	r3, #0
    facc:	d106      	bne.n	fadc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    face:	4a05      	ldr	r2, [pc, #20]	; (fae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    fad0:	9b01      	ldr	r3, [sp, #4]
    fad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fad6:	2b00      	cmp	r3, #0
    fad8:	d100      	bne.n	fadc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fada:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fadc:	bf00      	nop
    fade:	b003      	add	sp, #12
    fae0:	f85d fb04 	ldr.w	pc, [sp], #4
    fae4:	1fff9310 	.word	0x1fff9310
    fae8:	1fff930c 	.word	0x1fff930c

0000faec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    faec:	b500      	push	{lr}
    faee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    faf0:	f7f1 fccc 	bl	148c <Sys_GetCoreID>
    faf4:	4603      	mov	r3, r0
    faf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    faf8:	4a10      	ldr	r2, [pc, #64]	; (fb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    fafa:	9b01      	ldr	r3, [sp, #4]
    fafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb00:	2b00      	cmp	r3, #0
    fb02:	d10d      	bne.n	fb20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb04:	f7f0 fee2 	bl	8cc <Adc_schm_read_msr>
    fb08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb0a:	9b00      	ldr	r3, [sp, #0]
    fb0c:	f003 0301 	and.w	r3, r3, #1
    fb10:	2b00      	cmp	r3, #0
    fb12:	d100      	bne.n	fb16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    fb16:	490a      	ldr	r1, [pc, #40]	; (fb40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    fb18:	9b01      	ldr	r3, [sp, #4]
    fb1a:	9a00      	ldr	r2, [sp, #0]
    fb1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    fb20:	4a06      	ldr	r2, [pc, #24]	; (fb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    fb22:	9b01      	ldr	r3, [sp, #4]
    fb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb28:	1c5a      	adds	r2, r3, #1
    fb2a:	4904      	ldr	r1, [pc, #16]	; (fb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    fb2c:	9b01      	ldr	r3, [sp, #4]
    fb2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb32:	bf00      	nop
    fb34:	b003      	add	sp, #12
    fb36:	f85d fb04 	ldr.w	pc, [sp], #4
    fb3a:	bf00      	nop
    fb3c:	1fff9318 	.word	0x1fff9318
    fb40:	1fff9314 	.word	0x1fff9314

0000fb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    fb44:	b500      	push	{lr}
    fb46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb48:	f7f1 fca0 	bl	148c <Sys_GetCoreID>
    fb4c:	4603      	mov	r3, r0
    fb4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    fb50:	4a0d      	ldr	r2, [pc, #52]	; (fb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    fb52:	9b01      	ldr	r3, [sp, #4]
    fb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb58:	1e5a      	subs	r2, r3, #1
    fb5a:	490b      	ldr	r1, [pc, #44]	; (fb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    fb5c:	9b01      	ldr	r3, [sp, #4]
    fb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    fb62:	4a0a      	ldr	r2, [pc, #40]	; (fb8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    fb64:	9b01      	ldr	r3, [sp, #4]
    fb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb6a:	f003 0301 	and.w	r3, r3, #1
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d106      	bne.n	fb80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    fb72:	4a05      	ldr	r2, [pc, #20]	; (fb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    fb74:	9b01      	ldr	r3, [sp, #4]
    fb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	d100      	bne.n	fb80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb80:	bf00      	nop
    fb82:	b003      	add	sp, #12
    fb84:	f85d fb04 	ldr.w	pc, [sp], #4
    fb88:	1fff9318 	.word	0x1fff9318
    fb8c:	1fff9314 	.word	0x1fff9314

0000fb90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    fb90:	b500      	push	{lr}
    fb92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb94:	f7f1 fc7a 	bl	148c <Sys_GetCoreID>
    fb98:	4603      	mov	r3, r0
    fb9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    fb9c:	4a10      	ldr	r2, [pc, #64]	; (fbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    fb9e:	9b01      	ldr	r3, [sp, #4]
    fba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fba4:	2b00      	cmp	r3, #0
    fba6:	d10d      	bne.n	fbc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fba8:	f7f0 fe90 	bl	8cc <Adc_schm_read_msr>
    fbac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbae:	9b00      	ldr	r3, [sp, #0]
    fbb0:	f003 0301 	and.w	r3, r3, #1
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	d100      	bne.n	fbba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    fbba:	490a      	ldr	r1, [pc, #40]	; (fbe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    fbbc:	9b01      	ldr	r3, [sp, #4]
    fbbe:	9a00      	ldr	r2, [sp, #0]
    fbc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    fbc4:	4a06      	ldr	r2, [pc, #24]	; (fbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    fbc6:	9b01      	ldr	r3, [sp, #4]
    fbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbcc:	1c5a      	adds	r2, r3, #1
    fbce:	4904      	ldr	r1, [pc, #16]	; (fbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    fbd0:	9b01      	ldr	r3, [sp, #4]
    fbd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbd6:	bf00      	nop
    fbd8:	b003      	add	sp, #12
    fbda:	f85d fb04 	ldr.w	pc, [sp], #4
    fbde:	bf00      	nop
    fbe0:	1fff9320 	.word	0x1fff9320
    fbe4:	1fff931c 	.word	0x1fff931c

0000fbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    fbe8:	b500      	push	{lr}
    fbea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbec:	f7f1 fc4e 	bl	148c <Sys_GetCoreID>
    fbf0:	4603      	mov	r3, r0
    fbf2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    fbf4:	4a0d      	ldr	r2, [pc, #52]	; (fc2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    fbf6:	9b01      	ldr	r3, [sp, #4]
    fbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbfc:	1e5a      	subs	r2, r3, #1
    fbfe:	490b      	ldr	r1, [pc, #44]	; (fc2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    fc00:	9b01      	ldr	r3, [sp, #4]
    fc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    fc06:	4a0a      	ldr	r2, [pc, #40]	; (fc30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    fc08:	9b01      	ldr	r3, [sp, #4]
    fc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc0e:	f003 0301 	and.w	r3, r3, #1
    fc12:	2b00      	cmp	r3, #0
    fc14:	d106      	bne.n	fc24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    fc16:	4a05      	ldr	r2, [pc, #20]	; (fc2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    fc18:	9b01      	ldr	r3, [sp, #4]
    fc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc1e:	2b00      	cmp	r3, #0
    fc20:	d100      	bne.n	fc24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc24:	bf00      	nop
    fc26:	b003      	add	sp, #12
    fc28:	f85d fb04 	ldr.w	pc, [sp], #4
    fc2c:	1fff9320 	.word	0x1fff9320
    fc30:	1fff931c 	.word	0x1fff931c

0000fc34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    fc34:	b500      	push	{lr}
    fc36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc38:	f7f1 fc28 	bl	148c <Sys_GetCoreID>
    fc3c:	4603      	mov	r3, r0
    fc3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    fc40:	4a10      	ldr	r2, [pc, #64]	; (fc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    fc42:	9b01      	ldr	r3, [sp, #4]
    fc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d10d      	bne.n	fc68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc4c:	f7f0 fe3e 	bl	8cc <Adc_schm_read_msr>
    fc50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc52:	9b00      	ldr	r3, [sp, #0]
    fc54:	f003 0301 	and.w	r3, r3, #1
    fc58:	2b00      	cmp	r3, #0
    fc5a:	d100      	bne.n	fc5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    fc5e:	490a      	ldr	r1, [pc, #40]	; (fc88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    fc60:	9b01      	ldr	r3, [sp, #4]
    fc62:	9a00      	ldr	r2, [sp, #0]
    fc64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    fc68:	4a06      	ldr	r2, [pc, #24]	; (fc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    fc6a:	9b01      	ldr	r3, [sp, #4]
    fc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc70:	1c5a      	adds	r2, r3, #1
    fc72:	4904      	ldr	r1, [pc, #16]	; (fc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    fc74:	9b01      	ldr	r3, [sp, #4]
    fc76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc7a:	bf00      	nop
    fc7c:	b003      	add	sp, #12
    fc7e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc82:	bf00      	nop
    fc84:	1fff9328 	.word	0x1fff9328
    fc88:	1fff9324 	.word	0x1fff9324

0000fc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    fc8c:	b500      	push	{lr}
    fc8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc90:	f7f1 fbfc 	bl	148c <Sys_GetCoreID>
    fc94:	4603      	mov	r3, r0
    fc96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    fc98:	4a0d      	ldr	r2, [pc, #52]	; (fcd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    fc9a:	9b01      	ldr	r3, [sp, #4]
    fc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca0:	1e5a      	subs	r2, r3, #1
    fca2:	490b      	ldr	r1, [pc, #44]	; (fcd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    fca4:	9b01      	ldr	r3, [sp, #4]
    fca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    fcaa:	4a0a      	ldr	r2, [pc, #40]	; (fcd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    fcac:	9b01      	ldr	r3, [sp, #4]
    fcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcb2:	f003 0301 	and.w	r3, r3, #1
    fcb6:	2b00      	cmp	r3, #0
    fcb8:	d106      	bne.n	fcc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    fcba:	4a05      	ldr	r2, [pc, #20]	; (fcd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    fcbc:	9b01      	ldr	r3, [sp, #4]
    fcbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d100      	bne.n	fcc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcc8:	bf00      	nop
    fcca:	b003      	add	sp, #12
    fccc:	f85d fb04 	ldr.w	pc, [sp], #4
    fcd0:	1fff9328 	.word	0x1fff9328
    fcd4:	1fff9324 	.word	0x1fff9324

0000fcd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    fcd8:	b500      	push	{lr}
    fcda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcdc:	f7f1 fbd6 	bl	148c <Sys_GetCoreID>
    fce0:	4603      	mov	r3, r0
    fce2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    fce4:	4a10      	ldr	r2, [pc, #64]	; (fd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    fce6:	9b01      	ldr	r3, [sp, #4]
    fce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcec:	2b00      	cmp	r3, #0
    fcee:	d10d      	bne.n	fd0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fcf0:	f7f0 fdec 	bl	8cc <Adc_schm_read_msr>
    fcf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fcf6:	9b00      	ldr	r3, [sp, #0]
    fcf8:	f003 0301 	and.w	r3, r3, #1
    fcfc:	2b00      	cmp	r3, #0
    fcfe:	d100      	bne.n	fd02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    fd02:	490a      	ldr	r1, [pc, #40]	; (fd2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    fd04:	9b01      	ldr	r3, [sp, #4]
    fd06:	9a00      	ldr	r2, [sp, #0]
    fd08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    fd0c:	4a06      	ldr	r2, [pc, #24]	; (fd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    fd0e:	9b01      	ldr	r3, [sp, #4]
    fd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd14:	1c5a      	adds	r2, r3, #1
    fd16:	4904      	ldr	r1, [pc, #16]	; (fd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    fd18:	9b01      	ldr	r3, [sp, #4]
    fd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd1e:	bf00      	nop
    fd20:	b003      	add	sp, #12
    fd22:	f85d fb04 	ldr.w	pc, [sp], #4
    fd26:	bf00      	nop
    fd28:	1fff9330 	.word	0x1fff9330
    fd2c:	1fff932c 	.word	0x1fff932c

0000fd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    fd30:	b500      	push	{lr}
    fd32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd34:	f7f1 fbaa 	bl	148c <Sys_GetCoreID>
    fd38:	4603      	mov	r3, r0
    fd3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    fd3c:	4a0d      	ldr	r2, [pc, #52]	; (fd74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    fd3e:	9b01      	ldr	r3, [sp, #4]
    fd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd44:	1e5a      	subs	r2, r3, #1
    fd46:	490b      	ldr	r1, [pc, #44]	; (fd74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    fd48:	9b01      	ldr	r3, [sp, #4]
    fd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    fd4e:	4a0a      	ldr	r2, [pc, #40]	; (fd78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    fd50:	9b01      	ldr	r3, [sp, #4]
    fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd56:	f003 0301 	and.w	r3, r3, #1
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d106      	bne.n	fd6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    fd5e:	4a05      	ldr	r2, [pc, #20]	; (fd74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    fd60:	9b01      	ldr	r3, [sp, #4]
    fd62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd66:	2b00      	cmp	r3, #0
    fd68:	d100      	bne.n	fd6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd6c:	bf00      	nop
    fd6e:	b003      	add	sp, #12
    fd70:	f85d fb04 	ldr.w	pc, [sp], #4
    fd74:	1fff9330 	.word	0x1fff9330
    fd78:	1fff932c 	.word	0x1fff932c

0000fd7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    fd7c:	b500      	push	{lr}
    fd7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd80:	f7f1 fb84 	bl	148c <Sys_GetCoreID>
    fd84:	4603      	mov	r3, r0
    fd86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    fd88:	4a10      	ldr	r2, [pc, #64]	; (fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    fd8a:	9b01      	ldr	r3, [sp, #4]
    fd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd90:	2b00      	cmp	r3, #0
    fd92:	d10d      	bne.n	fdb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd94:	f7f0 fd9a 	bl	8cc <Adc_schm_read_msr>
    fd98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd9a:	9b00      	ldr	r3, [sp, #0]
    fd9c:	f003 0301 	and.w	r3, r3, #1
    fda0:	2b00      	cmp	r3, #0
    fda2:	d100      	bne.n	fda6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fda4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    fda6:	490a      	ldr	r1, [pc, #40]	; (fdd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    fda8:	9b01      	ldr	r3, [sp, #4]
    fdaa:	9a00      	ldr	r2, [sp, #0]
    fdac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    fdb0:	4a06      	ldr	r2, [pc, #24]	; (fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    fdb2:	9b01      	ldr	r3, [sp, #4]
    fdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb8:	1c5a      	adds	r2, r3, #1
    fdba:	4904      	ldr	r1, [pc, #16]	; (fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    fdbc:	9b01      	ldr	r3, [sp, #4]
    fdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdc2:	bf00      	nop
    fdc4:	b003      	add	sp, #12
    fdc6:	f85d fb04 	ldr.w	pc, [sp], #4
    fdca:	bf00      	nop
    fdcc:	1fff9338 	.word	0x1fff9338
    fdd0:	1fff9334 	.word	0x1fff9334

0000fdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    fdd4:	b500      	push	{lr}
    fdd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdd8:	f7f1 fb58 	bl	148c <Sys_GetCoreID>
    fddc:	4603      	mov	r3, r0
    fdde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    fde0:	4a0d      	ldr	r2, [pc, #52]	; (fe18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    fde2:	9b01      	ldr	r3, [sp, #4]
    fde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fde8:	1e5a      	subs	r2, r3, #1
    fdea:	490b      	ldr	r1, [pc, #44]	; (fe18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    fdec:	9b01      	ldr	r3, [sp, #4]
    fdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    fdf2:	4a0a      	ldr	r2, [pc, #40]	; (fe1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    fdf4:	9b01      	ldr	r3, [sp, #4]
    fdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdfa:	f003 0301 	and.w	r3, r3, #1
    fdfe:	2b00      	cmp	r3, #0
    fe00:	d106      	bne.n	fe10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    fe02:	4a05      	ldr	r2, [pc, #20]	; (fe18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    fe04:	9b01      	ldr	r3, [sp, #4]
    fe06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe0a:	2b00      	cmp	r3, #0
    fe0c:	d100      	bne.n	fe10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe10:	bf00      	nop
    fe12:	b003      	add	sp, #12
    fe14:	f85d fb04 	ldr.w	pc, [sp], #4
    fe18:	1fff9338 	.word	0x1fff9338
    fe1c:	1fff9334 	.word	0x1fff9334

0000fe20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    fe20:	b500      	push	{lr}
    fe22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe24:	f7f1 fb32 	bl	148c <Sys_GetCoreID>
    fe28:	4603      	mov	r3, r0
    fe2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    fe2c:	4a10      	ldr	r2, [pc, #64]	; (fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    fe2e:	9b01      	ldr	r3, [sp, #4]
    fe30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe34:	2b00      	cmp	r3, #0
    fe36:	d10d      	bne.n	fe54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe38:	f7f0 fd48 	bl	8cc <Adc_schm_read_msr>
    fe3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe3e:	9b00      	ldr	r3, [sp, #0]
    fe40:	f003 0301 	and.w	r3, r3, #1
    fe44:	2b00      	cmp	r3, #0
    fe46:	d100      	bne.n	fe4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    fe4a:	490a      	ldr	r1, [pc, #40]	; (fe74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    fe4c:	9b01      	ldr	r3, [sp, #4]
    fe4e:	9a00      	ldr	r2, [sp, #0]
    fe50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    fe54:	4a06      	ldr	r2, [pc, #24]	; (fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    fe56:	9b01      	ldr	r3, [sp, #4]
    fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe5c:	1c5a      	adds	r2, r3, #1
    fe5e:	4904      	ldr	r1, [pc, #16]	; (fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    fe60:	9b01      	ldr	r3, [sp, #4]
    fe62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe66:	bf00      	nop
    fe68:	b003      	add	sp, #12
    fe6a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe6e:	bf00      	nop
    fe70:	1fff9340 	.word	0x1fff9340
    fe74:	1fff933c 	.word	0x1fff933c

0000fe78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    fe78:	b500      	push	{lr}
    fe7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe7c:	f7f1 fb06 	bl	148c <Sys_GetCoreID>
    fe80:	4603      	mov	r3, r0
    fe82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    fe84:	4a0d      	ldr	r2, [pc, #52]	; (febc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    fe86:	9b01      	ldr	r3, [sp, #4]
    fe88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8c:	1e5a      	subs	r2, r3, #1
    fe8e:	490b      	ldr	r1, [pc, #44]	; (febc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    fe90:	9b01      	ldr	r3, [sp, #4]
    fe92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    fe96:	4a0a      	ldr	r2, [pc, #40]	; (fec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    fe98:	9b01      	ldr	r3, [sp, #4]
    fe9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe9e:	f003 0301 	and.w	r3, r3, #1
    fea2:	2b00      	cmp	r3, #0
    fea4:	d106      	bne.n	feb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    fea6:	4a05      	ldr	r2, [pc, #20]	; (febc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    fea8:	9b01      	ldr	r3, [sp, #4]
    feaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feae:	2b00      	cmp	r3, #0
    feb0:	d100      	bne.n	feb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    feb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    feb4:	bf00      	nop
    feb6:	b003      	add	sp, #12
    feb8:	f85d fb04 	ldr.w	pc, [sp], #4
    febc:	1fff9340 	.word	0x1fff9340
    fec0:	1fff933c 	.word	0x1fff933c

0000fec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    fec4:	b500      	push	{lr}
    fec6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fec8:	f7f1 fae0 	bl	148c <Sys_GetCoreID>
    fecc:	4603      	mov	r3, r0
    fece:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    fed0:	4a10      	ldr	r2, [pc, #64]	; (ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    fed2:	9b01      	ldr	r3, [sp, #4]
    fed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fed8:	2b00      	cmp	r3, #0
    feda:	d10d      	bne.n	fef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fedc:	f7f0 fcf6 	bl	8cc <Adc_schm_read_msr>
    fee0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fee2:	9b00      	ldr	r3, [sp, #0]
    fee4:	f003 0301 	and.w	r3, r3, #1
    fee8:	2b00      	cmp	r3, #0
    feea:	d100      	bne.n	feee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    feec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    feee:	490a      	ldr	r1, [pc, #40]	; (ff18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    fef0:	9b01      	ldr	r3, [sp, #4]
    fef2:	9a00      	ldr	r2, [sp, #0]
    fef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    fef8:	4a06      	ldr	r2, [pc, #24]	; (ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    fefa:	9b01      	ldr	r3, [sp, #4]
    fefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff00:	1c5a      	adds	r2, r3, #1
    ff02:	4904      	ldr	r1, [pc, #16]	; (ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff0a:	bf00      	nop
    ff0c:	b003      	add	sp, #12
    ff0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff12:	bf00      	nop
    ff14:	1fff9348 	.word	0x1fff9348
    ff18:	1fff9344 	.word	0x1fff9344

0000ff1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    ff1c:	b500      	push	{lr}
    ff1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff20:	f7f1 fab4 	bl	148c <Sys_GetCoreID>
    ff24:	4603      	mov	r3, r0
    ff26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    ff28:	4a0d      	ldr	r2, [pc, #52]	; (ff60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ff2a:	9b01      	ldr	r3, [sp, #4]
    ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff30:	1e5a      	subs	r2, r3, #1
    ff32:	490b      	ldr	r1, [pc, #44]	; (ff60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    ff3a:	4a0a      	ldr	r2, [pc, #40]	; (ff64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    ff3c:	9b01      	ldr	r3, [sp, #4]
    ff3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff42:	f003 0301 	and.w	r3, r3, #1
    ff46:	2b00      	cmp	r3, #0
    ff48:	d106      	bne.n	ff58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    ff4a:	4a05      	ldr	r2, [pc, #20]	; (ff60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ff4c:	9b01      	ldr	r3, [sp, #4]
    ff4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff52:	2b00      	cmp	r3, #0
    ff54:	d100      	bne.n	ff58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff58:	bf00      	nop
    ff5a:	b003      	add	sp, #12
    ff5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff60:	1fff9348 	.word	0x1fff9348
    ff64:	1fff9344 	.word	0x1fff9344

0000ff68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    ff68:	b500      	push	{lr}
    ff6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff6c:	f7f1 fa8e 	bl	148c <Sys_GetCoreID>
    ff70:	4603      	mov	r3, r0
    ff72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    ff74:	4a10      	ldr	r2, [pc, #64]	; (ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ff76:	9b01      	ldr	r3, [sp, #4]
    ff78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d10d      	bne.n	ff9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff80:	f7f0 fca4 	bl	8cc <Adc_schm_read_msr>
    ff84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff86:	9b00      	ldr	r3, [sp, #0]
    ff88:	f003 0301 	and.w	r3, r3, #1
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	d100      	bne.n	ff92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    ff92:	490a      	ldr	r1, [pc, #40]	; (ffbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    ff94:	9b01      	ldr	r3, [sp, #4]
    ff96:	9a00      	ldr	r2, [sp, #0]
    ff98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    ff9c:	4a06      	ldr	r2, [pc, #24]	; (ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ff9e:	9b01      	ldr	r3, [sp, #4]
    ffa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa4:	1c5a      	adds	r2, r3, #1
    ffa6:	4904      	ldr	r1, [pc, #16]	; (ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ffa8:	9b01      	ldr	r3, [sp, #4]
    ffaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffae:	bf00      	nop
    ffb0:	b003      	add	sp, #12
    ffb2:	f85d fb04 	ldr.w	pc, [sp], #4
    ffb6:	bf00      	nop
    ffb8:	1fff9350 	.word	0x1fff9350
    ffbc:	1fff934c 	.word	0x1fff934c

0000ffc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    ffc0:	b500      	push	{lr}
    ffc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffc4:	f7f1 fa62 	bl	148c <Sys_GetCoreID>
    ffc8:	4603      	mov	r3, r0
    ffca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    ffcc:	4a0d      	ldr	r2, [pc, #52]	; (10004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    ffce:	9b01      	ldr	r3, [sp, #4]
    ffd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd4:	1e5a      	subs	r2, r3, #1
    ffd6:	490b      	ldr	r1, [pc, #44]	; (10004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    ffd8:	9b01      	ldr	r3, [sp, #4]
    ffda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    ffde:	4a0a      	ldr	r2, [pc, #40]	; (10008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    ffe0:	9b01      	ldr	r3, [sp, #4]
    ffe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe6:	f003 0301 	and.w	r3, r3, #1
    ffea:	2b00      	cmp	r3, #0
    ffec:	d106      	bne.n	fffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    ffee:	4a05      	ldr	r2, [pc, #20]	; (10004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    fff0:	9b01      	ldr	r3, [sp, #4]
    fff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fff6:	2b00      	cmp	r3, #0
    fff8:	d100      	bne.n	fffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fffa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fffc:	bf00      	nop
    fffe:	b003      	add	sp, #12
   10000:	f85d fb04 	ldr.w	pc, [sp], #4
   10004:	1fff9350 	.word	0x1fff9350
   10008:	1fff934c 	.word	0x1fff934c

0001000c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   1000c:	b500      	push	{lr}
   1000e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10010:	f7f1 fa3c 	bl	148c <Sys_GetCoreID>
   10014:	4603      	mov	r3, r0
   10016:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   10018:	4a10      	ldr	r2, [pc, #64]	; (1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   1001a:	9b01      	ldr	r3, [sp, #4]
   1001c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10020:	2b00      	cmp	r3, #0
   10022:	d10d      	bne.n	10040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10024:	f7f0 fc52 	bl	8cc <Adc_schm_read_msr>
   10028:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1002a:	9b00      	ldr	r3, [sp, #0]
   1002c:	f003 0301 	and.w	r3, r3, #1
   10030:	2b00      	cmp	r3, #0
   10032:	d100      	bne.n	10036 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10034:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   10036:	490a      	ldr	r1, [pc, #40]	; (10060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   10038:	9b01      	ldr	r3, [sp, #4]
   1003a:	9a00      	ldr	r2, [sp, #0]
   1003c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   10040:	4a06      	ldr	r2, [pc, #24]	; (1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10042:	9b01      	ldr	r3, [sp, #4]
   10044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10048:	1c5a      	adds	r2, r3, #1
   1004a:	4904      	ldr	r1, [pc, #16]	; (1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   1004c:	9b01      	ldr	r3, [sp, #4]
   1004e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10052:	bf00      	nop
   10054:	b003      	add	sp, #12
   10056:	f85d fb04 	ldr.w	pc, [sp], #4
   1005a:	bf00      	nop
   1005c:	1fff9358 	.word	0x1fff9358
   10060:	1fff9354 	.word	0x1fff9354

00010064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10064:	b500      	push	{lr}
   10066:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10068:	f7f1 fa10 	bl	148c <Sys_GetCoreID>
   1006c:	4603      	mov	r3, r0
   1006e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   10070:	4a0d      	ldr	r2, [pc, #52]	; (100a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10072:	9b01      	ldr	r3, [sp, #4]
   10074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10078:	1e5a      	subs	r2, r3, #1
   1007a:	490b      	ldr	r1, [pc, #44]	; (100a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   1007c:	9b01      	ldr	r3, [sp, #4]
   1007e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   10082:	4a0a      	ldr	r2, [pc, #40]	; (100ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   10084:	9b01      	ldr	r3, [sp, #4]
   10086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1008a:	f003 0301 	and.w	r3, r3, #1
   1008e:	2b00      	cmp	r3, #0
   10090:	d106      	bne.n	100a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   10092:	4a05      	ldr	r2, [pc, #20]	; (100a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10094:	9b01      	ldr	r3, [sp, #4]
   10096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1009a:	2b00      	cmp	r3, #0
   1009c:	d100      	bne.n	100a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1009e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100a0:	bf00      	nop
   100a2:	b003      	add	sp, #12
   100a4:	f85d fb04 	ldr.w	pc, [sp], #4
   100a8:	1fff9358 	.word	0x1fff9358
   100ac:	1fff9354 	.word	0x1fff9354

000100b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   100b0:	b500      	push	{lr}
   100b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100b4:	f7f1 f9ea 	bl	148c <Sys_GetCoreID>
   100b8:	4603      	mov	r3, r0
   100ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   100bc:	4a10      	ldr	r2, [pc, #64]	; (10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   100be:	9b01      	ldr	r3, [sp, #4]
   100c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100c4:	2b00      	cmp	r3, #0
   100c6:	d10d      	bne.n	100e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100c8:	f7f0 fc00 	bl	8cc <Adc_schm_read_msr>
   100cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100ce:	9b00      	ldr	r3, [sp, #0]
   100d0:	f003 0301 	and.w	r3, r3, #1
   100d4:	2b00      	cmp	r3, #0
   100d6:	d100      	bne.n	100da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   100da:	490a      	ldr	r1, [pc, #40]	; (10104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   100dc:	9b01      	ldr	r3, [sp, #4]
   100de:	9a00      	ldr	r2, [sp, #0]
   100e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   100e4:	4a06      	ldr	r2, [pc, #24]	; (10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   100e6:	9b01      	ldr	r3, [sp, #4]
   100e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ec:	1c5a      	adds	r2, r3, #1
   100ee:	4904      	ldr	r1, [pc, #16]	; (10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   100f0:	9b01      	ldr	r3, [sp, #4]
   100f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100f6:	bf00      	nop
   100f8:	b003      	add	sp, #12
   100fa:	f85d fb04 	ldr.w	pc, [sp], #4
   100fe:	bf00      	nop
   10100:	1fff9360 	.word	0x1fff9360
   10104:	1fff935c 	.word	0x1fff935c

00010108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10108:	b500      	push	{lr}
   1010a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1010c:	f7f1 f9be 	bl	148c <Sys_GetCoreID>
   10110:	4603      	mov	r3, r0
   10112:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   10114:	4a0d      	ldr	r2, [pc, #52]	; (1014c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10116:	9b01      	ldr	r3, [sp, #4]
   10118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1011c:	1e5a      	subs	r2, r3, #1
   1011e:	490b      	ldr	r1, [pc, #44]	; (1014c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10120:	9b01      	ldr	r3, [sp, #4]
   10122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   10126:	4a0a      	ldr	r2, [pc, #40]	; (10150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   10128:	9b01      	ldr	r3, [sp, #4]
   1012a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1012e:	f003 0301 	and.w	r3, r3, #1
   10132:	2b00      	cmp	r3, #0
   10134:	d106      	bne.n	10144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   10136:	4a05      	ldr	r2, [pc, #20]	; (1014c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10138:	9b01      	ldr	r3, [sp, #4]
   1013a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1013e:	2b00      	cmp	r3, #0
   10140:	d100      	bne.n	10144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10144:	bf00      	nop
   10146:	b003      	add	sp, #12
   10148:	f85d fb04 	ldr.w	pc, [sp], #4
   1014c:	1fff9360 	.word	0x1fff9360
   10150:	1fff935c 	.word	0x1fff935c

00010154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10154:	b500      	push	{lr}
   10156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10158:	f7f1 f998 	bl	148c <Sys_GetCoreID>
   1015c:	4603      	mov	r3, r0
   1015e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   10160:	4a10      	ldr	r2, [pc, #64]	; (101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10162:	9b01      	ldr	r3, [sp, #4]
   10164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10168:	2b00      	cmp	r3, #0
   1016a:	d10d      	bne.n	10188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1016c:	f7f0 fbae 	bl	8cc <Adc_schm_read_msr>
   10170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10172:	9b00      	ldr	r3, [sp, #0]
   10174:	f003 0301 	and.w	r3, r3, #1
   10178:	2b00      	cmp	r3, #0
   1017a:	d100      	bne.n	1017e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1017c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   1017e:	490a      	ldr	r1, [pc, #40]	; (101a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   10180:	9b01      	ldr	r3, [sp, #4]
   10182:	9a00      	ldr	r2, [sp, #0]
   10184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   10188:	4a06      	ldr	r2, [pc, #24]	; (101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   1018a:	9b01      	ldr	r3, [sp, #4]
   1018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10190:	1c5a      	adds	r2, r3, #1
   10192:	4904      	ldr	r1, [pc, #16]	; (101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10194:	9b01      	ldr	r3, [sp, #4]
   10196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1019a:	bf00      	nop
   1019c:	b003      	add	sp, #12
   1019e:	f85d fb04 	ldr.w	pc, [sp], #4
   101a2:	bf00      	nop
   101a4:	1fff9368 	.word	0x1fff9368
   101a8:	1fff9364 	.word	0x1fff9364

000101ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   101ac:	b500      	push	{lr}
   101ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101b0:	f7f1 f96c 	bl	148c <Sys_GetCoreID>
   101b4:	4603      	mov	r3, r0
   101b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   101b8:	4a0d      	ldr	r2, [pc, #52]	; (101f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   101ba:	9b01      	ldr	r3, [sp, #4]
   101bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101c0:	1e5a      	subs	r2, r3, #1
   101c2:	490b      	ldr	r1, [pc, #44]	; (101f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   101c4:	9b01      	ldr	r3, [sp, #4]
   101c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   101ca:	4a0a      	ldr	r2, [pc, #40]	; (101f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   101cc:	9b01      	ldr	r3, [sp, #4]
   101ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101d2:	f003 0301 	and.w	r3, r3, #1
   101d6:	2b00      	cmp	r3, #0
   101d8:	d106      	bne.n	101e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   101da:	4a05      	ldr	r2, [pc, #20]	; (101f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   101dc:	9b01      	ldr	r3, [sp, #4]
   101de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101e2:	2b00      	cmp	r3, #0
   101e4:	d100      	bne.n	101e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101e8:	bf00      	nop
   101ea:	b003      	add	sp, #12
   101ec:	f85d fb04 	ldr.w	pc, [sp], #4
   101f0:	1fff9368 	.word	0x1fff9368
   101f4:	1fff9364 	.word	0x1fff9364

000101f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   101f8:	b500      	push	{lr}
   101fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101fc:	f7f1 f946 	bl	148c <Sys_GetCoreID>
   10200:	4603      	mov	r3, r0
   10202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   10204:	4a10      	ldr	r2, [pc, #64]	; (10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10206:	9b01      	ldr	r3, [sp, #4]
   10208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1020c:	2b00      	cmp	r3, #0
   1020e:	d10d      	bne.n	1022c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10210:	f7f0 fb5c 	bl	8cc <Adc_schm_read_msr>
   10214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10216:	9b00      	ldr	r3, [sp, #0]
   10218:	f003 0301 	and.w	r3, r3, #1
   1021c:	2b00      	cmp	r3, #0
   1021e:	d100      	bne.n	10222 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   10222:	490a      	ldr	r1, [pc, #40]	; (1024c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   10224:	9b01      	ldr	r3, [sp, #4]
   10226:	9a00      	ldr	r2, [sp, #0]
   10228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   1022c:	4a06      	ldr	r2, [pc, #24]	; (10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   1022e:	9b01      	ldr	r3, [sp, #4]
   10230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10234:	1c5a      	adds	r2, r3, #1
   10236:	4904      	ldr	r1, [pc, #16]	; (10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10238:	9b01      	ldr	r3, [sp, #4]
   1023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1023e:	bf00      	nop
   10240:	b003      	add	sp, #12
   10242:	f85d fb04 	ldr.w	pc, [sp], #4
   10246:	bf00      	nop
   10248:	1fff9370 	.word	0x1fff9370
   1024c:	1fff936c 	.word	0x1fff936c

00010250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10250:	b500      	push	{lr}
   10252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10254:	f7f1 f91a 	bl	148c <Sys_GetCoreID>
   10258:	4603      	mov	r3, r0
   1025a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   1025c:	4a0d      	ldr	r2, [pc, #52]	; (10294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   1025e:	9b01      	ldr	r3, [sp, #4]
   10260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10264:	1e5a      	subs	r2, r3, #1
   10266:	490b      	ldr	r1, [pc, #44]	; (10294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10268:	9b01      	ldr	r3, [sp, #4]
   1026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   1026e:	4a0a      	ldr	r2, [pc, #40]	; (10298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   10270:	9b01      	ldr	r3, [sp, #4]
   10272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10276:	f003 0301 	and.w	r3, r3, #1
   1027a:	2b00      	cmp	r3, #0
   1027c:	d106      	bne.n	1028c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   1027e:	4a05      	ldr	r2, [pc, #20]	; (10294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10280:	9b01      	ldr	r3, [sp, #4]
   10282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10286:	2b00      	cmp	r3, #0
   10288:	d100      	bne.n	1028c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1028a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1028c:	bf00      	nop
   1028e:	b003      	add	sp, #12
   10290:	f85d fb04 	ldr.w	pc, [sp], #4
   10294:	1fff9370 	.word	0x1fff9370
   10298:	1fff936c 	.word	0x1fff936c

0001029c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   1029c:	b500      	push	{lr}
   1029e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102a0:	f7f1 f8f4 	bl	148c <Sys_GetCoreID>
   102a4:	4603      	mov	r3, r0
   102a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   102a8:	4a10      	ldr	r2, [pc, #64]	; (102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   102aa:	9b01      	ldr	r3, [sp, #4]
   102ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b0:	2b00      	cmp	r3, #0
   102b2:	d10d      	bne.n	102d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102b4:	f7f0 fb0a 	bl	8cc <Adc_schm_read_msr>
   102b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102ba:	9b00      	ldr	r3, [sp, #0]
   102bc:	f003 0301 	and.w	r3, r3, #1
   102c0:	2b00      	cmp	r3, #0
   102c2:	d100      	bne.n	102c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   102c6:	490a      	ldr	r1, [pc, #40]	; (102f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   102c8:	9b01      	ldr	r3, [sp, #4]
   102ca:	9a00      	ldr	r2, [sp, #0]
   102cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   102d0:	4a06      	ldr	r2, [pc, #24]	; (102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   102d2:	9b01      	ldr	r3, [sp, #4]
   102d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102d8:	1c5a      	adds	r2, r3, #1
   102da:	4904      	ldr	r1, [pc, #16]	; (102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   102dc:	9b01      	ldr	r3, [sp, #4]
   102de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102e2:	bf00      	nop
   102e4:	b003      	add	sp, #12
   102e6:	f85d fb04 	ldr.w	pc, [sp], #4
   102ea:	bf00      	nop
   102ec:	1fff9378 	.word	0x1fff9378
   102f0:	1fff9374 	.word	0x1fff9374

000102f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   102f4:	b500      	push	{lr}
   102f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102f8:	f7f1 f8c8 	bl	148c <Sys_GetCoreID>
   102fc:	4603      	mov	r3, r0
   102fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   10300:	4a0d      	ldr	r2, [pc, #52]	; (10338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   10302:	9b01      	ldr	r3, [sp, #4]
   10304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10308:	1e5a      	subs	r2, r3, #1
   1030a:	490b      	ldr	r1, [pc, #44]	; (10338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   1030c:	9b01      	ldr	r3, [sp, #4]
   1030e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   10312:	4a0a      	ldr	r2, [pc, #40]	; (1033c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   10314:	9b01      	ldr	r3, [sp, #4]
   10316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1031a:	f003 0301 	and.w	r3, r3, #1
   1031e:	2b00      	cmp	r3, #0
   10320:	d106      	bne.n	10330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   10322:	4a05      	ldr	r2, [pc, #20]	; (10338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   10324:	9b01      	ldr	r3, [sp, #4]
   10326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1032a:	2b00      	cmp	r3, #0
   1032c:	d100      	bne.n	10330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1032e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10330:	bf00      	nop
   10332:	b003      	add	sp, #12
   10334:	f85d fb04 	ldr.w	pc, [sp], #4
   10338:	1fff9378 	.word	0x1fff9378
   1033c:	1fff9374 	.word	0x1fff9374

00010340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   10340:	b500      	push	{lr}
   10342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10344:	f7f1 f8a2 	bl	148c <Sys_GetCoreID>
   10348:	4603      	mov	r3, r0
   1034a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   1034c:	4a10      	ldr	r2, [pc, #64]	; (10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   1034e:	9b01      	ldr	r3, [sp, #4]
   10350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10354:	2b00      	cmp	r3, #0
   10356:	d10d      	bne.n	10374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10358:	f7f0 fab8 	bl	8cc <Adc_schm_read_msr>
   1035c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1035e:	9b00      	ldr	r3, [sp, #0]
   10360:	f003 0301 	and.w	r3, r3, #1
   10364:	2b00      	cmp	r3, #0
   10366:	d100      	bne.n	1036a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   1036a:	490a      	ldr	r1, [pc, #40]	; (10394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   1036c:	9b01      	ldr	r3, [sp, #4]
   1036e:	9a00      	ldr	r2, [sp, #0]
   10370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   10374:	4a06      	ldr	r2, [pc, #24]	; (10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   10376:	9b01      	ldr	r3, [sp, #4]
   10378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1037c:	1c5a      	adds	r2, r3, #1
   1037e:	4904      	ldr	r1, [pc, #16]	; (10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   10380:	9b01      	ldr	r3, [sp, #4]
   10382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10386:	bf00      	nop
   10388:	b003      	add	sp, #12
   1038a:	f85d fb04 	ldr.w	pc, [sp], #4
   1038e:	bf00      	nop
   10390:	1fff9380 	.word	0x1fff9380
   10394:	1fff937c 	.word	0x1fff937c

00010398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   10398:	b500      	push	{lr}
   1039a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1039c:	f7f1 f876 	bl	148c <Sys_GetCoreID>
   103a0:	4603      	mov	r3, r0
   103a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   103a4:	4a0d      	ldr	r2, [pc, #52]	; (103dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   103a6:	9b01      	ldr	r3, [sp, #4]
   103a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ac:	1e5a      	subs	r2, r3, #1
   103ae:	490b      	ldr	r1, [pc, #44]	; (103dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   103b0:	9b01      	ldr	r3, [sp, #4]
   103b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   103b6:	4a0a      	ldr	r2, [pc, #40]	; (103e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   103b8:	9b01      	ldr	r3, [sp, #4]
   103ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103be:	f003 0301 	and.w	r3, r3, #1
   103c2:	2b00      	cmp	r3, #0
   103c4:	d106      	bne.n	103d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   103c6:	4a05      	ldr	r2, [pc, #20]	; (103dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   103c8:	9b01      	ldr	r3, [sp, #4]
   103ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ce:	2b00      	cmp	r3, #0
   103d0:	d100      	bne.n	103d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103d4:	bf00      	nop
   103d6:	b003      	add	sp, #12
   103d8:	f85d fb04 	ldr.w	pc, [sp], #4
   103dc:	1fff9380 	.word	0x1fff9380
   103e0:	1fff937c 	.word	0x1fff937c

000103e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   103e4:	b500      	push	{lr}
   103e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103e8:	f7f1 f850 	bl	148c <Sys_GetCoreID>
   103ec:	4603      	mov	r3, r0
   103ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   103f0:	4a10      	ldr	r2, [pc, #64]	; (10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   103f2:	9b01      	ldr	r3, [sp, #4]
   103f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103f8:	2b00      	cmp	r3, #0
   103fa:	d10d      	bne.n	10418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103fc:	f7f0 fa66 	bl	8cc <Adc_schm_read_msr>
   10400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10402:	9b00      	ldr	r3, [sp, #0]
   10404:	f003 0301 	and.w	r3, r3, #1
   10408:	2b00      	cmp	r3, #0
   1040a:	d100      	bne.n	1040e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1040c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   1040e:	490a      	ldr	r1, [pc, #40]	; (10438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   10410:	9b01      	ldr	r3, [sp, #4]
   10412:	9a00      	ldr	r2, [sp, #0]
   10414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   10418:	4a06      	ldr	r2, [pc, #24]	; (10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1041a:	9b01      	ldr	r3, [sp, #4]
   1041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10420:	1c5a      	adds	r2, r3, #1
   10422:	4904      	ldr	r1, [pc, #16]	; (10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   10424:	9b01      	ldr	r3, [sp, #4]
   10426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1042a:	bf00      	nop
   1042c:	b003      	add	sp, #12
   1042e:	f85d fb04 	ldr.w	pc, [sp], #4
   10432:	bf00      	nop
   10434:	1fff9388 	.word	0x1fff9388
   10438:	1fff9384 	.word	0x1fff9384

0001043c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   1043c:	b500      	push	{lr}
   1043e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10440:	f7f1 f824 	bl	148c <Sys_GetCoreID>
   10444:	4603      	mov	r3, r0
   10446:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   10448:	4a0d      	ldr	r2, [pc, #52]	; (10480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   1044a:	9b01      	ldr	r3, [sp, #4]
   1044c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10450:	1e5a      	subs	r2, r3, #1
   10452:	490b      	ldr	r1, [pc, #44]	; (10480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   10454:	9b01      	ldr	r3, [sp, #4]
   10456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   1045a:	4a0a      	ldr	r2, [pc, #40]	; (10484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   1045c:	9b01      	ldr	r3, [sp, #4]
   1045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10462:	f003 0301 	and.w	r3, r3, #1
   10466:	2b00      	cmp	r3, #0
   10468:	d106      	bne.n	10478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   1046a:	4a05      	ldr	r2, [pc, #20]	; (10480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   1046c:	9b01      	ldr	r3, [sp, #4]
   1046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10472:	2b00      	cmp	r3, #0
   10474:	d100      	bne.n	10478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10478:	bf00      	nop
   1047a:	b003      	add	sp, #12
   1047c:	f85d fb04 	ldr.w	pc, [sp], #4
   10480:	1fff9388 	.word	0x1fff9388
   10484:	1fff9384 	.word	0x1fff9384

00010488 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   10488:	b500      	push	{lr}
   1048a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1048c:	f7f0 fffe 	bl	148c <Sys_GetCoreID>
   10490:	4603      	mov	r3, r0
   10492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   10494:	4a10      	ldr	r2, [pc, #64]	; (104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   10496:	9b01      	ldr	r3, [sp, #4]
   10498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1049c:	2b00      	cmp	r3, #0
   1049e:	d10d      	bne.n	104bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104a0:	f7f0 fa14 	bl	8cc <Adc_schm_read_msr>
   104a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104a6:	9b00      	ldr	r3, [sp, #0]
   104a8:	f003 0301 	and.w	r3, r3, #1
   104ac:	2b00      	cmp	r3, #0
   104ae:	d100      	bne.n	104b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   104b2:	490a      	ldr	r1, [pc, #40]	; (104dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   104b4:	9b01      	ldr	r3, [sp, #4]
   104b6:	9a00      	ldr	r2, [sp, #0]
   104b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   104bc:	4a06      	ldr	r2, [pc, #24]	; (104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   104be:	9b01      	ldr	r3, [sp, #4]
   104c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c4:	1c5a      	adds	r2, r3, #1
   104c6:	4904      	ldr	r1, [pc, #16]	; (104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   104c8:	9b01      	ldr	r3, [sp, #4]
   104ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104ce:	bf00      	nop
   104d0:	b003      	add	sp, #12
   104d2:	f85d fb04 	ldr.w	pc, [sp], #4
   104d6:	bf00      	nop
   104d8:	1fff9390 	.word	0x1fff9390
   104dc:	1fff938c 	.word	0x1fff938c

000104e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   104e0:	b500      	push	{lr}
   104e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104e4:	f7f0 ffd2 	bl	148c <Sys_GetCoreID>
   104e8:	4603      	mov	r3, r0
   104ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   104ec:	4a0d      	ldr	r2, [pc, #52]	; (10524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104f4:	1e5a      	subs	r2, r3, #1
   104f6:	490b      	ldr	r1, [pc, #44]	; (10524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   104fe:	4a0a      	ldr	r2, [pc, #40]	; (10528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10506:	f003 0301 	and.w	r3, r3, #1
   1050a:	2b00      	cmp	r3, #0
   1050c:	d106      	bne.n	1051c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1050e:	4a05      	ldr	r2, [pc, #20]	; (10524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   10510:	9b01      	ldr	r3, [sp, #4]
   10512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10516:	2b00      	cmp	r3, #0
   10518:	d100      	bne.n	1051c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1051a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1051c:	bf00      	nop
   1051e:	b003      	add	sp, #12
   10520:	f85d fb04 	ldr.w	pc, [sp], #4
   10524:	1fff9390 	.word	0x1fff9390
   10528:	1fff938c 	.word	0x1fff938c

0001052c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   1052c:	b500      	push	{lr}
   1052e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10530:	f7f0 ffac 	bl	148c <Sys_GetCoreID>
   10534:	4603      	mov	r3, r0
   10536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   10538:	4a10      	ldr	r2, [pc, #64]	; (1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1053a:	9b01      	ldr	r3, [sp, #4]
   1053c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10540:	2b00      	cmp	r3, #0
   10542:	d10d      	bne.n	10560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10544:	f7f0 f9c2 	bl	8cc <Adc_schm_read_msr>
   10548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1054a:	9b00      	ldr	r3, [sp, #0]
   1054c:	f003 0301 	and.w	r3, r3, #1
   10550:	2b00      	cmp	r3, #0
   10552:	d100      	bne.n	10556 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   10556:	490a      	ldr	r1, [pc, #40]	; (10580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   10558:	9b01      	ldr	r3, [sp, #4]
   1055a:	9a00      	ldr	r2, [sp, #0]
   1055c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   10560:	4a06      	ldr	r2, [pc, #24]	; (1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   10562:	9b01      	ldr	r3, [sp, #4]
   10564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10568:	1c5a      	adds	r2, r3, #1
   1056a:	4904      	ldr	r1, [pc, #16]	; (1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1056c:	9b01      	ldr	r3, [sp, #4]
   1056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10572:	bf00      	nop
   10574:	b003      	add	sp, #12
   10576:	f85d fb04 	ldr.w	pc, [sp], #4
   1057a:	bf00      	nop
   1057c:	1fff9398 	.word	0x1fff9398
   10580:	1fff9394 	.word	0x1fff9394

00010584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   10584:	b500      	push	{lr}
   10586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10588:	f7f0 ff80 	bl	148c <Sys_GetCoreID>
   1058c:	4603      	mov	r3, r0
   1058e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   10590:	4a0d      	ldr	r2, [pc, #52]	; (105c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   10592:	9b01      	ldr	r3, [sp, #4]
   10594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10598:	1e5a      	subs	r2, r3, #1
   1059a:	490b      	ldr	r1, [pc, #44]	; (105c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   1059c:	9b01      	ldr	r3, [sp, #4]
   1059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   105a2:	4a0a      	ldr	r2, [pc, #40]	; (105cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   105a4:	9b01      	ldr	r3, [sp, #4]
   105a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105aa:	f003 0301 	and.w	r3, r3, #1
   105ae:	2b00      	cmp	r3, #0
   105b0:	d106      	bne.n	105c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   105b2:	4a05      	ldr	r2, [pc, #20]	; (105c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   105b4:	9b01      	ldr	r3, [sp, #4]
   105b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105ba:	2b00      	cmp	r3, #0
   105bc:	d100      	bne.n	105c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105c0:	bf00      	nop
   105c2:	b003      	add	sp, #12
   105c4:	f85d fb04 	ldr.w	pc, [sp], #4
   105c8:	1fff9398 	.word	0x1fff9398
   105cc:	1fff9394 	.word	0x1fff9394

000105d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   105d0:	b500      	push	{lr}
   105d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105d4:	f7f0 ff5a 	bl	148c <Sys_GetCoreID>
   105d8:	4603      	mov	r3, r0
   105da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   105dc:	4a10      	ldr	r2, [pc, #64]	; (10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   105de:	9b01      	ldr	r3, [sp, #4]
   105e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105e4:	2b00      	cmp	r3, #0
   105e6:	d10d      	bne.n	10604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105e8:	f7f0 f970 	bl	8cc <Adc_schm_read_msr>
   105ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105ee:	9b00      	ldr	r3, [sp, #0]
   105f0:	f003 0301 	and.w	r3, r3, #1
   105f4:	2b00      	cmp	r3, #0
   105f6:	d100      	bne.n	105fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   105fa:	490a      	ldr	r1, [pc, #40]	; (10624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   105fc:	9b01      	ldr	r3, [sp, #4]
   105fe:	9a00      	ldr	r2, [sp, #0]
   10600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   10604:	4a06      	ldr	r2, [pc, #24]	; (10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   10606:	9b01      	ldr	r3, [sp, #4]
   10608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1060c:	1c5a      	adds	r2, r3, #1
   1060e:	4904      	ldr	r1, [pc, #16]	; (10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   10610:	9b01      	ldr	r3, [sp, #4]
   10612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10616:	bf00      	nop
   10618:	b003      	add	sp, #12
   1061a:	f85d fb04 	ldr.w	pc, [sp], #4
   1061e:	bf00      	nop
   10620:	1fff93a0 	.word	0x1fff93a0
   10624:	1fff939c 	.word	0x1fff939c

00010628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   10628:	b500      	push	{lr}
   1062a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1062c:	f7f0 ff2e 	bl	148c <Sys_GetCoreID>
   10630:	4603      	mov	r3, r0
   10632:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   10634:	4a0d      	ldr	r2, [pc, #52]	; (1066c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   10636:	9b01      	ldr	r3, [sp, #4]
   10638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1063c:	1e5a      	subs	r2, r3, #1
   1063e:	490b      	ldr	r1, [pc, #44]	; (1066c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   10640:	9b01      	ldr	r3, [sp, #4]
   10642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   10646:	4a0a      	ldr	r2, [pc, #40]	; (10670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   10648:	9b01      	ldr	r3, [sp, #4]
   1064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1064e:	f003 0301 	and.w	r3, r3, #1
   10652:	2b00      	cmp	r3, #0
   10654:	d106      	bne.n	10664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   10656:	4a05      	ldr	r2, [pc, #20]	; (1066c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   10658:	9b01      	ldr	r3, [sp, #4]
   1065a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1065e:	2b00      	cmp	r3, #0
   10660:	d100      	bne.n	10664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10664:	bf00      	nop
   10666:	b003      	add	sp, #12
   10668:	f85d fb04 	ldr.w	pc, [sp], #4
   1066c:	1fff93a0 	.word	0x1fff93a0
   10670:	1fff939c 	.word	0x1fff939c

00010674 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   10674:	b500      	push	{lr}
   10676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10678:	f7f0 ff08 	bl	148c <Sys_GetCoreID>
   1067c:	4603      	mov	r3, r0
   1067e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   10680:	4a10      	ldr	r2, [pc, #64]	; (106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   10682:	9b01      	ldr	r3, [sp, #4]
   10684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10688:	2b00      	cmp	r3, #0
   1068a:	d10d      	bne.n	106a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1068c:	f7f0 f91e 	bl	8cc <Adc_schm_read_msr>
   10690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10692:	9b00      	ldr	r3, [sp, #0]
   10694:	f003 0301 	and.w	r3, r3, #1
   10698:	2b00      	cmp	r3, #0
   1069a:	d100      	bne.n	1069e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1069c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   1069e:	490a      	ldr	r1, [pc, #40]	; (106c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   106a0:	9b01      	ldr	r3, [sp, #4]
   106a2:	9a00      	ldr	r2, [sp, #0]
   106a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   106a8:	4a06      	ldr	r2, [pc, #24]	; (106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   106aa:	9b01      	ldr	r3, [sp, #4]
   106ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106b0:	1c5a      	adds	r2, r3, #1
   106b2:	4904      	ldr	r1, [pc, #16]	; (106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   106b4:	9b01      	ldr	r3, [sp, #4]
   106b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106ba:	bf00      	nop
   106bc:	b003      	add	sp, #12
   106be:	f85d fb04 	ldr.w	pc, [sp], #4
   106c2:	bf00      	nop
   106c4:	1fff93a8 	.word	0x1fff93a8
   106c8:	1fff93a4 	.word	0x1fff93a4

000106cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   106cc:	b500      	push	{lr}
   106ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106d0:	f7f0 fedc 	bl	148c <Sys_GetCoreID>
   106d4:	4603      	mov	r3, r0
   106d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   106d8:	4a0d      	ldr	r2, [pc, #52]	; (10710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   106da:	9b01      	ldr	r3, [sp, #4]
   106dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106e0:	1e5a      	subs	r2, r3, #1
   106e2:	490b      	ldr	r1, [pc, #44]	; (10710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   106e4:	9b01      	ldr	r3, [sp, #4]
   106e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   106ea:	4a0a      	ldr	r2, [pc, #40]	; (10714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   106ec:	9b01      	ldr	r3, [sp, #4]
   106ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106f2:	f003 0301 	and.w	r3, r3, #1
   106f6:	2b00      	cmp	r3, #0
   106f8:	d106      	bne.n	10708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   106fa:	4a05      	ldr	r2, [pc, #20]	; (10710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   106fc:	9b01      	ldr	r3, [sp, #4]
   106fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10702:	2b00      	cmp	r3, #0
   10704:	d100      	bne.n	10708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10708:	bf00      	nop
   1070a:	b003      	add	sp, #12
   1070c:	f85d fb04 	ldr.w	pc, [sp], #4
   10710:	1fff93a8 	.word	0x1fff93a8
   10714:	1fff93a4 	.word	0x1fff93a4

00010718 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   10718:	b500      	push	{lr}
   1071a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1071c:	f7f0 feb6 	bl	148c <Sys_GetCoreID>
   10720:	4603      	mov	r3, r0
   10722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   10724:	4a10      	ldr	r2, [pc, #64]	; (10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   10726:	9b01      	ldr	r3, [sp, #4]
   10728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1072c:	2b00      	cmp	r3, #0
   1072e:	d10d      	bne.n	1074c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10730:	f7f0 f8cc 	bl	8cc <Adc_schm_read_msr>
   10734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10736:	9b00      	ldr	r3, [sp, #0]
   10738:	f003 0301 	and.w	r3, r3, #1
   1073c:	2b00      	cmp	r3, #0
   1073e:	d100      	bne.n	10742 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   10742:	490a      	ldr	r1, [pc, #40]	; (1076c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   10744:	9b01      	ldr	r3, [sp, #4]
   10746:	9a00      	ldr	r2, [sp, #0]
   10748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   1074c:	4a06      	ldr	r2, [pc, #24]	; (10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1074e:	9b01      	ldr	r3, [sp, #4]
   10750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10754:	1c5a      	adds	r2, r3, #1
   10756:	4904      	ldr	r1, [pc, #16]	; (10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   10758:	9b01      	ldr	r3, [sp, #4]
   1075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1075e:	bf00      	nop
   10760:	b003      	add	sp, #12
   10762:	f85d fb04 	ldr.w	pc, [sp], #4
   10766:	bf00      	nop
   10768:	1fff93b0 	.word	0x1fff93b0
   1076c:	1fff93ac 	.word	0x1fff93ac

00010770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   10770:	b500      	push	{lr}
   10772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10774:	f7f0 fe8a 	bl	148c <Sys_GetCoreID>
   10778:	4603      	mov	r3, r0
   1077a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   1077c:	4a0d      	ldr	r2, [pc, #52]	; (107b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1077e:	9b01      	ldr	r3, [sp, #4]
   10780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10784:	1e5a      	subs	r2, r3, #1
   10786:	490b      	ldr	r1, [pc, #44]	; (107b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   10788:	9b01      	ldr	r3, [sp, #4]
   1078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   1078e:	4a0a      	ldr	r2, [pc, #40]	; (107b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   10790:	9b01      	ldr	r3, [sp, #4]
   10792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10796:	f003 0301 	and.w	r3, r3, #1
   1079a:	2b00      	cmp	r3, #0
   1079c:	d106      	bne.n	107ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   1079e:	4a05      	ldr	r2, [pc, #20]	; (107b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   107a0:	9b01      	ldr	r3, [sp, #4]
   107a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107a6:	2b00      	cmp	r3, #0
   107a8:	d100      	bne.n	107ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   107aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   107ac:	bf00      	nop
   107ae:	b003      	add	sp, #12
   107b0:	f85d fb04 	ldr.w	pc, [sp], #4
   107b4:	1fff93b0 	.word	0x1fff93b0
   107b8:	1fff93ac 	.word	0x1fff93ac

000107bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   107bc:	b500      	push	{lr}
   107be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107c0:	f7f0 fe64 	bl	148c <Sys_GetCoreID>
   107c4:	4603      	mov	r3, r0
   107c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   107c8:	4a10      	ldr	r2, [pc, #64]	; (1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   107ca:	9b01      	ldr	r3, [sp, #4]
   107cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107d0:	2b00      	cmp	r3, #0
   107d2:	d10d      	bne.n	107f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107d4:	f7f0 f87a 	bl	8cc <Adc_schm_read_msr>
   107d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107da:	9b00      	ldr	r3, [sp, #0]
   107dc:	f003 0301 	and.w	r3, r3, #1
   107e0:	2b00      	cmp	r3, #0
   107e2:	d100      	bne.n	107e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   107e6:	490a      	ldr	r1, [pc, #40]	; (10810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   107e8:	9b01      	ldr	r3, [sp, #4]
   107ea:	9a00      	ldr	r2, [sp, #0]
   107ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   107f0:	4a06      	ldr	r2, [pc, #24]	; (1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   107f2:	9b01      	ldr	r3, [sp, #4]
   107f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107f8:	1c5a      	adds	r2, r3, #1
   107fa:	4904      	ldr	r1, [pc, #16]	; (1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   107fc:	9b01      	ldr	r3, [sp, #4]
   107fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10802:	bf00      	nop
   10804:	b003      	add	sp, #12
   10806:	f85d fb04 	ldr.w	pc, [sp], #4
   1080a:	bf00      	nop
   1080c:	1fff93b8 	.word	0x1fff93b8
   10810:	1fff93b4 	.word	0x1fff93b4

00010814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   10814:	b500      	push	{lr}
   10816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10818:	f7f0 fe38 	bl	148c <Sys_GetCoreID>
   1081c:	4603      	mov	r3, r0
   1081e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   10820:	4a0d      	ldr	r2, [pc, #52]	; (10858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   10822:	9b01      	ldr	r3, [sp, #4]
   10824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10828:	1e5a      	subs	r2, r3, #1
   1082a:	490b      	ldr	r1, [pc, #44]	; (10858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1082c:	9b01      	ldr	r3, [sp, #4]
   1082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   10832:	4a0a      	ldr	r2, [pc, #40]	; (1085c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   10834:	9b01      	ldr	r3, [sp, #4]
   10836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1083a:	f003 0301 	and.w	r3, r3, #1
   1083e:	2b00      	cmp	r3, #0
   10840:	d106      	bne.n	10850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   10842:	4a05      	ldr	r2, [pc, #20]	; (10858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   10844:	9b01      	ldr	r3, [sp, #4]
   10846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1084a:	2b00      	cmp	r3, #0
   1084c:	d100      	bne.n	10850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1084e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10850:	bf00      	nop
   10852:	b003      	add	sp, #12
   10854:	f85d fb04 	ldr.w	pc, [sp], #4
   10858:	1fff93b8 	.word	0x1fff93b8
   1085c:	1fff93b4 	.word	0x1fff93b4

00010860 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   10860:	b500      	push	{lr}
   10862:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10864:	f7f0 fe12 	bl	148c <Sys_GetCoreID>
   10868:	4603      	mov	r3, r0
   1086a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   1086c:	4a10      	ldr	r2, [pc, #64]	; (108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   1086e:	9b01      	ldr	r3, [sp, #4]
   10870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10874:	2b00      	cmp	r3, #0
   10876:	d10d      	bne.n	10894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10878:	f7f0 f828 	bl	8cc <Adc_schm_read_msr>
   1087c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1087e:	9b00      	ldr	r3, [sp, #0]
   10880:	f003 0301 	and.w	r3, r3, #1
   10884:	2b00      	cmp	r3, #0
   10886:	d100      	bne.n	1088a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10888:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   1088a:	490a      	ldr	r1, [pc, #40]	; (108b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   1088c:	9b01      	ldr	r3, [sp, #4]
   1088e:	9a00      	ldr	r2, [sp, #0]
   10890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   10894:	4a06      	ldr	r2, [pc, #24]	; (108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   10896:	9b01      	ldr	r3, [sp, #4]
   10898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1089c:	1c5a      	adds	r2, r3, #1
   1089e:	4904      	ldr	r1, [pc, #16]	; (108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   108a0:	9b01      	ldr	r3, [sp, #4]
   108a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   108a6:	bf00      	nop
   108a8:	b003      	add	sp, #12
   108aa:	f85d fb04 	ldr.w	pc, [sp], #4
   108ae:	bf00      	nop
   108b0:	1fff93c0 	.word	0x1fff93c0
   108b4:	1fff93bc 	.word	0x1fff93bc

000108b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   108b8:	b500      	push	{lr}
   108ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108bc:	f7f0 fde6 	bl	148c <Sys_GetCoreID>
   108c0:	4603      	mov	r3, r0
   108c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   108c4:	4a0d      	ldr	r2, [pc, #52]	; (108fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   108c6:	9b01      	ldr	r3, [sp, #4]
   108c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108cc:	1e5a      	subs	r2, r3, #1
   108ce:	490b      	ldr	r1, [pc, #44]	; (108fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   108d0:	9b01      	ldr	r3, [sp, #4]
   108d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   108d6:	4a0a      	ldr	r2, [pc, #40]	; (10900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   108d8:	9b01      	ldr	r3, [sp, #4]
   108da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108de:	f003 0301 	and.w	r3, r3, #1
   108e2:	2b00      	cmp	r3, #0
   108e4:	d106      	bne.n	108f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   108e6:	4a05      	ldr	r2, [pc, #20]	; (108fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   108e8:	9b01      	ldr	r3, [sp, #4]
   108ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d100      	bne.n	108f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108f4:	bf00      	nop
   108f6:	b003      	add	sp, #12
   108f8:	f85d fb04 	ldr.w	pc, [sp], #4
   108fc:	1fff93c0 	.word	0x1fff93c0
   10900:	1fff93bc 	.word	0x1fff93bc

00010904 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   10904:	b500      	push	{lr}
   10906:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10908:	f7f0 fdc0 	bl	148c <Sys_GetCoreID>
   1090c:	4603      	mov	r3, r0
   1090e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   10910:	4a10      	ldr	r2, [pc, #64]	; (10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   10912:	9b01      	ldr	r3, [sp, #4]
   10914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10918:	2b00      	cmp	r3, #0
   1091a:	d10d      	bne.n	10938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1091c:	f7ef ffd6 	bl	8cc <Adc_schm_read_msr>
   10920:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10922:	9b00      	ldr	r3, [sp, #0]
   10924:	f003 0301 	and.w	r3, r3, #1
   10928:	2b00      	cmp	r3, #0
   1092a:	d100      	bne.n	1092e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1092c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   1092e:	490a      	ldr	r1, [pc, #40]	; (10958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   10930:	9b01      	ldr	r3, [sp, #4]
   10932:	9a00      	ldr	r2, [sp, #0]
   10934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   10938:	4a06      	ldr	r2, [pc, #24]	; (10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1093a:	9b01      	ldr	r3, [sp, #4]
   1093c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10940:	1c5a      	adds	r2, r3, #1
   10942:	4904      	ldr	r1, [pc, #16]	; (10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   10944:	9b01      	ldr	r3, [sp, #4]
   10946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1094a:	bf00      	nop
   1094c:	b003      	add	sp, #12
   1094e:	f85d fb04 	ldr.w	pc, [sp], #4
   10952:	bf00      	nop
   10954:	1fff93c8 	.word	0x1fff93c8
   10958:	1fff93c4 	.word	0x1fff93c4

0001095c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   1095c:	b500      	push	{lr}
   1095e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10960:	f7f0 fd94 	bl	148c <Sys_GetCoreID>
   10964:	4603      	mov	r3, r0
   10966:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   10968:	4a0d      	ldr	r2, [pc, #52]	; (109a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1096a:	9b01      	ldr	r3, [sp, #4]
   1096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10970:	1e5a      	subs	r2, r3, #1
   10972:	490b      	ldr	r1, [pc, #44]	; (109a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   10974:	9b01      	ldr	r3, [sp, #4]
   10976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   1097a:	4a0a      	ldr	r2, [pc, #40]	; (109a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   1097c:	9b01      	ldr	r3, [sp, #4]
   1097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10982:	f003 0301 	and.w	r3, r3, #1
   10986:	2b00      	cmp	r3, #0
   10988:	d106      	bne.n	10998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   1098a:	4a05      	ldr	r2, [pc, #20]	; (109a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1098c:	9b01      	ldr	r3, [sp, #4]
   1098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10992:	2b00      	cmp	r3, #0
   10994:	d100      	bne.n	10998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10996:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10998:	bf00      	nop
   1099a:	b003      	add	sp, #12
   1099c:	f85d fb04 	ldr.w	pc, [sp], #4
   109a0:	1fff93c8 	.word	0x1fff93c8
   109a4:	1fff93c4 	.word	0x1fff93c4

000109a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   109a8:	b500      	push	{lr}
   109aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109ac:	f7f0 fd6e 	bl	148c <Sys_GetCoreID>
   109b0:	4603      	mov	r3, r0
   109b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   109b4:	4a10      	ldr	r2, [pc, #64]	; (109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   109b6:	9b01      	ldr	r3, [sp, #4]
   109b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109bc:	2b00      	cmp	r3, #0
   109be:	d10d      	bne.n	109dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109c0:	f7ef ff84 	bl	8cc <Adc_schm_read_msr>
   109c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109c6:	9b00      	ldr	r3, [sp, #0]
   109c8:	f003 0301 	and.w	r3, r3, #1
   109cc:	2b00      	cmp	r3, #0
   109ce:	d100      	bne.n	109d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   109d2:	490a      	ldr	r1, [pc, #40]	; (109fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   109d4:	9b01      	ldr	r3, [sp, #4]
   109d6:	9a00      	ldr	r2, [sp, #0]
   109d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   109dc:	4a06      	ldr	r2, [pc, #24]	; (109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   109de:	9b01      	ldr	r3, [sp, #4]
   109e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109e4:	1c5a      	adds	r2, r3, #1
   109e6:	4904      	ldr	r1, [pc, #16]	; (109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   109e8:	9b01      	ldr	r3, [sp, #4]
   109ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109ee:	bf00      	nop
   109f0:	b003      	add	sp, #12
   109f2:	f85d fb04 	ldr.w	pc, [sp], #4
   109f6:	bf00      	nop
   109f8:	1fff93d0 	.word	0x1fff93d0
   109fc:	1fff93cc 	.word	0x1fff93cc

00010a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   10a00:	b500      	push	{lr}
   10a02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a04:	f7f0 fd42 	bl	148c <Sys_GetCoreID>
   10a08:	4603      	mov	r3, r0
   10a0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   10a0c:	4a0d      	ldr	r2, [pc, #52]	; (10a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   10a0e:	9b01      	ldr	r3, [sp, #4]
   10a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a14:	1e5a      	subs	r2, r3, #1
   10a16:	490b      	ldr	r1, [pc, #44]	; (10a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   10a18:	9b01      	ldr	r3, [sp, #4]
   10a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   10a1e:	4a0a      	ldr	r2, [pc, #40]	; (10a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   10a20:	9b01      	ldr	r3, [sp, #4]
   10a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a26:	f003 0301 	and.w	r3, r3, #1
   10a2a:	2b00      	cmp	r3, #0
   10a2c:	d106      	bne.n	10a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   10a2e:	4a05      	ldr	r2, [pc, #20]	; (10a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   10a30:	9b01      	ldr	r3, [sp, #4]
   10a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d100      	bne.n	10a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a3c:	bf00      	nop
   10a3e:	b003      	add	sp, #12
   10a40:	f85d fb04 	ldr.w	pc, [sp], #4
   10a44:	1fff93d0 	.word	0x1fff93d0
   10a48:	1fff93cc 	.word	0x1fff93cc

00010a4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   10a4c:	b500      	push	{lr}
   10a4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a50:	f7f0 fd1c 	bl	148c <Sys_GetCoreID>
   10a54:	4603      	mov	r3, r0
   10a56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   10a58:	4a10      	ldr	r2, [pc, #64]	; (10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   10a5a:	9b01      	ldr	r3, [sp, #4]
   10a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d10d      	bne.n	10a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a64:	f7ef ff32 	bl	8cc <Adc_schm_read_msr>
   10a68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a6a:	9b00      	ldr	r3, [sp, #0]
   10a6c:	f003 0301 	and.w	r3, r3, #1
   10a70:	2b00      	cmp	r3, #0
   10a72:	d100      	bne.n	10a76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   10a76:	490a      	ldr	r1, [pc, #40]	; (10aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   10a78:	9b01      	ldr	r3, [sp, #4]
   10a7a:	9a00      	ldr	r2, [sp, #0]
   10a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   10a80:	4a06      	ldr	r2, [pc, #24]	; (10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   10a82:	9b01      	ldr	r3, [sp, #4]
   10a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a88:	1c5a      	adds	r2, r3, #1
   10a8a:	4904      	ldr	r1, [pc, #16]	; (10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   10a8c:	9b01      	ldr	r3, [sp, #4]
   10a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a92:	bf00      	nop
   10a94:	b003      	add	sp, #12
   10a96:	f85d fb04 	ldr.w	pc, [sp], #4
   10a9a:	bf00      	nop
   10a9c:	1fff93d8 	.word	0x1fff93d8
   10aa0:	1fff93d4 	.word	0x1fff93d4

00010aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   10aa4:	b500      	push	{lr}
   10aa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10aa8:	f7f0 fcf0 	bl	148c <Sys_GetCoreID>
   10aac:	4603      	mov	r3, r0
   10aae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   10ab0:	4a0d      	ldr	r2, [pc, #52]	; (10ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   10ab2:	9b01      	ldr	r3, [sp, #4]
   10ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ab8:	1e5a      	subs	r2, r3, #1
   10aba:	490b      	ldr	r1, [pc, #44]	; (10ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   10abc:	9b01      	ldr	r3, [sp, #4]
   10abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   10ac2:	4a0a      	ldr	r2, [pc, #40]	; (10aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   10ac4:	9b01      	ldr	r3, [sp, #4]
   10ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aca:	f003 0301 	and.w	r3, r3, #1
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d106      	bne.n	10ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   10ad2:	4a05      	ldr	r2, [pc, #20]	; (10ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   10ad4:	9b01      	ldr	r3, [sp, #4]
   10ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ada:	2b00      	cmp	r3, #0
   10adc:	d100      	bne.n	10ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ade:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ae0:	bf00      	nop
   10ae2:	b003      	add	sp, #12
   10ae4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ae8:	1fff93d8 	.word	0x1fff93d8
   10aec:	1fff93d4 	.word	0x1fff93d4

00010af0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   10af0:	b500      	push	{lr}
   10af2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10af4:	f7f0 fcca 	bl	148c <Sys_GetCoreID>
   10af8:	4603      	mov	r3, r0
   10afa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   10afc:	4a10      	ldr	r2, [pc, #64]	; (10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   10afe:	9b01      	ldr	r3, [sp, #4]
   10b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b04:	2b00      	cmp	r3, #0
   10b06:	d10d      	bne.n	10b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b08:	f7ef fee0 	bl	8cc <Adc_schm_read_msr>
   10b0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b0e:	9b00      	ldr	r3, [sp, #0]
   10b10:	f003 0301 	and.w	r3, r3, #1
   10b14:	2b00      	cmp	r3, #0
   10b16:	d100      	bne.n	10b1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   10b1a:	490a      	ldr	r1, [pc, #40]	; (10b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   10b1c:	9b01      	ldr	r3, [sp, #4]
   10b1e:	9a00      	ldr	r2, [sp, #0]
   10b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   10b24:	4a06      	ldr	r2, [pc, #24]	; (10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   10b26:	9b01      	ldr	r3, [sp, #4]
   10b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b2c:	1c5a      	adds	r2, r3, #1
   10b2e:	4904      	ldr	r1, [pc, #16]	; (10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   10b30:	9b01      	ldr	r3, [sp, #4]
   10b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b36:	bf00      	nop
   10b38:	b003      	add	sp, #12
   10b3a:	f85d fb04 	ldr.w	pc, [sp], #4
   10b3e:	bf00      	nop
   10b40:	1fff93e0 	.word	0x1fff93e0
   10b44:	1fff93dc 	.word	0x1fff93dc

00010b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   10b48:	b500      	push	{lr}
   10b4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b4c:	f7f0 fc9e 	bl	148c <Sys_GetCoreID>
   10b50:	4603      	mov	r3, r0
   10b52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   10b54:	4a0d      	ldr	r2, [pc, #52]	; (10b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   10b56:	9b01      	ldr	r3, [sp, #4]
   10b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b5c:	1e5a      	subs	r2, r3, #1
   10b5e:	490b      	ldr	r1, [pc, #44]	; (10b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   10b60:	9b01      	ldr	r3, [sp, #4]
   10b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   10b66:	4a0a      	ldr	r2, [pc, #40]	; (10b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   10b68:	9b01      	ldr	r3, [sp, #4]
   10b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b6e:	f003 0301 	and.w	r3, r3, #1
   10b72:	2b00      	cmp	r3, #0
   10b74:	d106      	bne.n	10b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   10b76:	4a05      	ldr	r2, [pc, #20]	; (10b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   10b78:	9b01      	ldr	r3, [sp, #4]
   10b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b7e:	2b00      	cmp	r3, #0
   10b80:	d100      	bne.n	10b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b84:	bf00      	nop
   10b86:	b003      	add	sp, #12
   10b88:	f85d fb04 	ldr.w	pc, [sp], #4
   10b8c:	1fff93e0 	.word	0x1fff93e0
   10b90:	1fff93dc 	.word	0x1fff93dc

00010b94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   10b94:	b500      	push	{lr}
   10b96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b98:	f7f0 fc78 	bl	148c <Sys_GetCoreID>
   10b9c:	4603      	mov	r3, r0
   10b9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   10ba0:	4a10      	ldr	r2, [pc, #64]	; (10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   10ba2:	9b01      	ldr	r3, [sp, #4]
   10ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d10d      	bne.n	10bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10bac:	f7ef fe8e 	bl	8cc <Adc_schm_read_msr>
   10bb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10bb2:	9b00      	ldr	r3, [sp, #0]
   10bb4:	f003 0301 	and.w	r3, r3, #1
   10bb8:	2b00      	cmp	r3, #0
   10bba:	d100      	bne.n	10bbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   10bbe:	490a      	ldr	r1, [pc, #40]	; (10be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   10bc0:	9b01      	ldr	r3, [sp, #4]
   10bc2:	9a00      	ldr	r2, [sp, #0]
   10bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   10bc8:	4a06      	ldr	r2, [pc, #24]	; (10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   10bca:	9b01      	ldr	r3, [sp, #4]
   10bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bd0:	1c5a      	adds	r2, r3, #1
   10bd2:	4904      	ldr	r1, [pc, #16]	; (10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   10bd4:	9b01      	ldr	r3, [sp, #4]
   10bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10bda:	bf00      	nop
   10bdc:	b003      	add	sp, #12
   10bde:	f85d fb04 	ldr.w	pc, [sp], #4
   10be2:	bf00      	nop
   10be4:	1fff93e8 	.word	0x1fff93e8
   10be8:	1fff93e4 	.word	0x1fff93e4

00010bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   10bec:	b500      	push	{lr}
   10bee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bf0:	f7f0 fc4c 	bl	148c <Sys_GetCoreID>
   10bf4:	4603      	mov	r3, r0
   10bf6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   10bf8:	4a0d      	ldr	r2, [pc, #52]	; (10c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   10bfa:	9b01      	ldr	r3, [sp, #4]
   10bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c00:	1e5a      	subs	r2, r3, #1
   10c02:	490b      	ldr	r1, [pc, #44]	; (10c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   10c04:	9b01      	ldr	r3, [sp, #4]
   10c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   10c0a:	4a0a      	ldr	r2, [pc, #40]	; (10c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   10c0c:	9b01      	ldr	r3, [sp, #4]
   10c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c12:	f003 0301 	and.w	r3, r3, #1
   10c16:	2b00      	cmp	r3, #0
   10c18:	d106      	bne.n	10c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   10c1a:	4a05      	ldr	r2, [pc, #20]	; (10c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   10c1c:	9b01      	ldr	r3, [sp, #4]
   10c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c22:	2b00      	cmp	r3, #0
   10c24:	d100      	bne.n	10c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c28:	bf00      	nop
   10c2a:	b003      	add	sp, #12
   10c2c:	f85d fb04 	ldr.w	pc, [sp], #4
   10c30:	1fff93e8 	.word	0x1fff93e8
   10c34:	1fff93e4 	.word	0x1fff93e4

00010c38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   10c38:	b500      	push	{lr}
   10c3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c3c:	f7f0 fc26 	bl	148c <Sys_GetCoreID>
   10c40:	4603      	mov	r3, r0
   10c42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   10c44:	4a10      	ldr	r2, [pc, #64]	; (10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   10c46:	9b01      	ldr	r3, [sp, #4]
   10c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d10d      	bne.n	10c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c50:	f7ef fe3c 	bl	8cc <Adc_schm_read_msr>
   10c54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c56:	9b00      	ldr	r3, [sp, #0]
   10c58:	f003 0301 	and.w	r3, r3, #1
   10c5c:	2b00      	cmp	r3, #0
   10c5e:	d100      	bne.n	10c62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   10c62:	490a      	ldr	r1, [pc, #40]	; (10c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   10c64:	9b01      	ldr	r3, [sp, #4]
   10c66:	9a00      	ldr	r2, [sp, #0]
   10c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   10c6c:	4a06      	ldr	r2, [pc, #24]	; (10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   10c6e:	9b01      	ldr	r3, [sp, #4]
   10c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c74:	1c5a      	adds	r2, r3, #1
   10c76:	4904      	ldr	r1, [pc, #16]	; (10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   10c78:	9b01      	ldr	r3, [sp, #4]
   10c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c7e:	bf00      	nop
   10c80:	b003      	add	sp, #12
   10c82:	f85d fb04 	ldr.w	pc, [sp], #4
   10c86:	bf00      	nop
   10c88:	1fff93f0 	.word	0x1fff93f0
   10c8c:	1fff93ec 	.word	0x1fff93ec

00010c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   10c90:	b500      	push	{lr}
   10c92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c94:	f7f0 fbfa 	bl	148c <Sys_GetCoreID>
   10c98:	4603      	mov	r3, r0
   10c9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   10c9c:	4a0d      	ldr	r2, [pc, #52]	; (10cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   10c9e:	9b01      	ldr	r3, [sp, #4]
   10ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ca4:	1e5a      	subs	r2, r3, #1
   10ca6:	490b      	ldr	r1, [pc, #44]	; (10cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   10ca8:	9b01      	ldr	r3, [sp, #4]
   10caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   10cae:	4a0a      	ldr	r2, [pc, #40]	; (10cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   10cb0:	9b01      	ldr	r3, [sp, #4]
   10cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb6:	f003 0301 	and.w	r3, r3, #1
   10cba:	2b00      	cmp	r3, #0
   10cbc:	d106      	bne.n	10ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   10cbe:	4a05      	ldr	r2, [pc, #20]	; (10cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   10cc0:	9b01      	ldr	r3, [sp, #4]
   10cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cc6:	2b00      	cmp	r3, #0
   10cc8:	d100      	bne.n	10ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10cca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ccc:	bf00      	nop
   10cce:	b003      	add	sp, #12
   10cd0:	f85d fb04 	ldr.w	pc, [sp], #4
   10cd4:	1fff93f0 	.word	0x1fff93f0
   10cd8:	1fff93ec 	.word	0x1fff93ec

00010cdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   10cdc:	b500      	push	{lr}
   10cde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ce0:	f7f0 fbd4 	bl	148c <Sys_GetCoreID>
   10ce4:	4603      	mov	r3, r0
   10ce6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   10ce8:	4a10      	ldr	r2, [pc, #64]	; (10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   10cea:	9b01      	ldr	r3, [sp, #4]
   10cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cf0:	2b00      	cmp	r3, #0
   10cf2:	d10d      	bne.n	10d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cf4:	f7ef fdea 	bl	8cc <Adc_schm_read_msr>
   10cf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cfa:	9b00      	ldr	r3, [sp, #0]
   10cfc:	f003 0301 	and.w	r3, r3, #1
   10d00:	2b00      	cmp	r3, #0
   10d02:	d100      	bne.n	10d06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   10d06:	490a      	ldr	r1, [pc, #40]	; (10d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   10d08:	9b01      	ldr	r3, [sp, #4]
   10d0a:	9a00      	ldr	r2, [sp, #0]
   10d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   10d10:	4a06      	ldr	r2, [pc, #24]	; (10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   10d12:	9b01      	ldr	r3, [sp, #4]
   10d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d18:	1c5a      	adds	r2, r3, #1
   10d1a:	4904      	ldr	r1, [pc, #16]	; (10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   10d1c:	9b01      	ldr	r3, [sp, #4]
   10d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d22:	bf00      	nop
   10d24:	b003      	add	sp, #12
   10d26:	f85d fb04 	ldr.w	pc, [sp], #4
   10d2a:	bf00      	nop
   10d2c:	1fff93f8 	.word	0x1fff93f8
   10d30:	1fff93f4 	.word	0x1fff93f4

00010d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   10d34:	b500      	push	{lr}
   10d36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d38:	f7f0 fba8 	bl	148c <Sys_GetCoreID>
   10d3c:	4603      	mov	r3, r0
   10d3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   10d40:	4a0d      	ldr	r2, [pc, #52]	; (10d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   10d42:	9b01      	ldr	r3, [sp, #4]
   10d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d48:	1e5a      	subs	r2, r3, #1
   10d4a:	490b      	ldr	r1, [pc, #44]	; (10d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   10d4c:	9b01      	ldr	r3, [sp, #4]
   10d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   10d52:	4a0a      	ldr	r2, [pc, #40]	; (10d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   10d54:	9b01      	ldr	r3, [sp, #4]
   10d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d5a:	f003 0301 	and.w	r3, r3, #1
   10d5e:	2b00      	cmp	r3, #0
   10d60:	d106      	bne.n	10d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   10d62:	4a05      	ldr	r2, [pc, #20]	; (10d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   10d64:	9b01      	ldr	r3, [sp, #4]
   10d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d6a:	2b00      	cmp	r3, #0
   10d6c:	d100      	bne.n	10d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d70:	bf00      	nop
   10d72:	b003      	add	sp, #12
   10d74:	f85d fb04 	ldr.w	pc, [sp], #4
   10d78:	1fff93f8 	.word	0x1fff93f8
   10d7c:	1fff93f4 	.word	0x1fff93f4

00010d80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   10d80:	b500      	push	{lr}
   10d82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d84:	f7f0 fb82 	bl	148c <Sys_GetCoreID>
   10d88:	4603      	mov	r3, r0
   10d8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   10d8c:	4a10      	ldr	r2, [pc, #64]	; (10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   10d8e:	9b01      	ldr	r3, [sp, #4]
   10d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d94:	2b00      	cmp	r3, #0
   10d96:	d10d      	bne.n	10db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d98:	f7ef fd98 	bl	8cc <Adc_schm_read_msr>
   10d9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d9e:	9b00      	ldr	r3, [sp, #0]
   10da0:	f003 0301 	and.w	r3, r3, #1
   10da4:	2b00      	cmp	r3, #0
   10da6:	d100      	bne.n	10daa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10da8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   10daa:	490a      	ldr	r1, [pc, #40]	; (10dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   10dac:	9b01      	ldr	r3, [sp, #4]
   10dae:	9a00      	ldr	r2, [sp, #0]
   10db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   10db4:	4a06      	ldr	r2, [pc, #24]	; (10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   10db6:	9b01      	ldr	r3, [sp, #4]
   10db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dbc:	1c5a      	adds	r2, r3, #1
   10dbe:	4904      	ldr	r1, [pc, #16]	; (10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   10dc0:	9b01      	ldr	r3, [sp, #4]
   10dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10dc6:	bf00      	nop
   10dc8:	b003      	add	sp, #12
   10dca:	f85d fb04 	ldr.w	pc, [sp], #4
   10dce:	bf00      	nop
   10dd0:	1fff9400 	.word	0x1fff9400
   10dd4:	1fff93fc 	.word	0x1fff93fc

00010dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   10dd8:	b500      	push	{lr}
   10dda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ddc:	f7f0 fb56 	bl	148c <Sys_GetCoreID>
   10de0:	4603      	mov	r3, r0
   10de2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   10de4:	4a0d      	ldr	r2, [pc, #52]	; (10e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   10de6:	9b01      	ldr	r3, [sp, #4]
   10de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dec:	1e5a      	subs	r2, r3, #1
   10dee:	490b      	ldr	r1, [pc, #44]	; (10e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   10df0:	9b01      	ldr	r3, [sp, #4]
   10df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   10df6:	4a0a      	ldr	r2, [pc, #40]	; (10e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   10df8:	9b01      	ldr	r3, [sp, #4]
   10dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dfe:	f003 0301 	and.w	r3, r3, #1
   10e02:	2b00      	cmp	r3, #0
   10e04:	d106      	bne.n	10e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   10e06:	4a05      	ldr	r2, [pc, #20]	; (10e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   10e08:	9b01      	ldr	r3, [sp, #4]
   10e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e0e:	2b00      	cmp	r3, #0
   10e10:	d100      	bne.n	10e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e14:	bf00      	nop
   10e16:	b003      	add	sp, #12
   10e18:	f85d fb04 	ldr.w	pc, [sp], #4
   10e1c:	1fff9400 	.word	0x1fff9400
   10e20:	1fff93fc 	.word	0x1fff93fc

00010e24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   10e24:	b500      	push	{lr}
   10e26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e28:	f7f0 fb30 	bl	148c <Sys_GetCoreID>
   10e2c:	4603      	mov	r3, r0
   10e2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   10e30:	4a10      	ldr	r2, [pc, #64]	; (10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   10e32:	9b01      	ldr	r3, [sp, #4]
   10e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e38:	2b00      	cmp	r3, #0
   10e3a:	d10d      	bne.n	10e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e3c:	f7ef fd46 	bl	8cc <Adc_schm_read_msr>
   10e40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e42:	9b00      	ldr	r3, [sp, #0]
   10e44:	f003 0301 	and.w	r3, r3, #1
   10e48:	2b00      	cmp	r3, #0
   10e4a:	d100      	bne.n	10e4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   10e4e:	490a      	ldr	r1, [pc, #40]	; (10e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   10e50:	9b01      	ldr	r3, [sp, #4]
   10e52:	9a00      	ldr	r2, [sp, #0]
   10e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   10e58:	4a06      	ldr	r2, [pc, #24]	; (10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   10e5a:	9b01      	ldr	r3, [sp, #4]
   10e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e60:	1c5a      	adds	r2, r3, #1
   10e62:	4904      	ldr	r1, [pc, #16]	; (10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   10e64:	9b01      	ldr	r3, [sp, #4]
   10e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e6a:	bf00      	nop
   10e6c:	b003      	add	sp, #12
   10e6e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e72:	bf00      	nop
   10e74:	1fff9408 	.word	0x1fff9408
   10e78:	1fff9404 	.word	0x1fff9404

00010e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   10e7c:	b500      	push	{lr}
   10e7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e80:	f7f0 fb04 	bl	148c <Sys_GetCoreID>
   10e84:	4603      	mov	r3, r0
   10e86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   10e88:	4a0d      	ldr	r2, [pc, #52]	; (10ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   10e8a:	9b01      	ldr	r3, [sp, #4]
   10e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e90:	1e5a      	subs	r2, r3, #1
   10e92:	490b      	ldr	r1, [pc, #44]	; (10ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   10e94:	9b01      	ldr	r3, [sp, #4]
   10e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   10e9a:	4a0a      	ldr	r2, [pc, #40]	; (10ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   10e9c:	9b01      	ldr	r3, [sp, #4]
   10e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ea2:	f003 0301 	and.w	r3, r3, #1
   10ea6:	2b00      	cmp	r3, #0
   10ea8:	d106      	bne.n	10eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   10eaa:	4a05      	ldr	r2, [pc, #20]	; (10ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   10eac:	9b01      	ldr	r3, [sp, #4]
   10eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eb2:	2b00      	cmp	r3, #0
   10eb4:	d100      	bne.n	10eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10eb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10eb8:	bf00      	nop
   10eba:	b003      	add	sp, #12
   10ebc:	f85d fb04 	ldr.w	pc, [sp], #4
   10ec0:	1fff9408 	.word	0x1fff9408
   10ec4:	1fff9404 	.word	0x1fff9404

00010ec8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   10ec8:	b500      	push	{lr}
   10eca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ecc:	f7f0 fade 	bl	148c <Sys_GetCoreID>
   10ed0:	4603      	mov	r3, r0
   10ed2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   10ed4:	4a10      	ldr	r2, [pc, #64]	; (10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   10ed6:	9b01      	ldr	r3, [sp, #4]
   10ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10edc:	2b00      	cmp	r3, #0
   10ede:	d10d      	bne.n	10efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ee0:	f7ef fcf4 	bl	8cc <Adc_schm_read_msr>
   10ee4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ee6:	9b00      	ldr	r3, [sp, #0]
   10ee8:	f003 0301 	and.w	r3, r3, #1
   10eec:	2b00      	cmp	r3, #0
   10eee:	d100      	bne.n	10ef2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ef0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   10ef2:	490a      	ldr	r1, [pc, #40]	; (10f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   10ef4:	9b01      	ldr	r3, [sp, #4]
   10ef6:	9a00      	ldr	r2, [sp, #0]
   10ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   10efc:	4a06      	ldr	r2, [pc, #24]	; (10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   10efe:	9b01      	ldr	r3, [sp, #4]
   10f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f04:	1c5a      	adds	r2, r3, #1
   10f06:	4904      	ldr	r1, [pc, #16]	; (10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   10f08:	9b01      	ldr	r3, [sp, #4]
   10f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f0e:	bf00      	nop
   10f10:	b003      	add	sp, #12
   10f12:	f85d fb04 	ldr.w	pc, [sp], #4
   10f16:	bf00      	nop
   10f18:	1fff9410 	.word	0x1fff9410
   10f1c:	1fff940c 	.word	0x1fff940c

00010f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   10f20:	b500      	push	{lr}
   10f22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f24:	f7f0 fab2 	bl	148c <Sys_GetCoreID>
   10f28:	4603      	mov	r3, r0
   10f2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   10f2c:	4a0d      	ldr	r2, [pc, #52]	; (10f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   10f2e:	9b01      	ldr	r3, [sp, #4]
   10f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f34:	1e5a      	subs	r2, r3, #1
   10f36:	490b      	ldr	r1, [pc, #44]	; (10f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   10f38:	9b01      	ldr	r3, [sp, #4]
   10f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   10f3e:	4a0a      	ldr	r2, [pc, #40]	; (10f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   10f40:	9b01      	ldr	r3, [sp, #4]
   10f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f46:	f003 0301 	and.w	r3, r3, #1
   10f4a:	2b00      	cmp	r3, #0
   10f4c:	d106      	bne.n	10f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   10f4e:	4a05      	ldr	r2, [pc, #20]	; (10f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   10f50:	9b01      	ldr	r3, [sp, #4]
   10f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f56:	2b00      	cmp	r3, #0
   10f58:	d100      	bne.n	10f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f5c:	bf00      	nop
   10f5e:	b003      	add	sp, #12
   10f60:	f85d fb04 	ldr.w	pc, [sp], #4
   10f64:	1fff9410 	.word	0x1fff9410
   10f68:	1fff940c 	.word	0x1fff940c

00010f6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   10f6c:	b500      	push	{lr}
   10f6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f70:	f7f0 fa8c 	bl	148c <Sys_GetCoreID>
   10f74:	4603      	mov	r3, r0
   10f76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   10f78:	4a10      	ldr	r2, [pc, #64]	; (10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   10f7a:	9b01      	ldr	r3, [sp, #4]
   10f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f80:	2b00      	cmp	r3, #0
   10f82:	d10d      	bne.n	10fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f84:	f7ef fca2 	bl	8cc <Adc_schm_read_msr>
   10f88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f8a:	9b00      	ldr	r3, [sp, #0]
   10f8c:	f003 0301 	and.w	r3, r3, #1
   10f90:	2b00      	cmp	r3, #0
   10f92:	d100      	bne.n	10f96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   10f96:	490a      	ldr	r1, [pc, #40]	; (10fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   10f98:	9b01      	ldr	r3, [sp, #4]
   10f9a:	9a00      	ldr	r2, [sp, #0]
   10f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   10fa0:	4a06      	ldr	r2, [pc, #24]	; (10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   10fa2:	9b01      	ldr	r3, [sp, #4]
   10fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fa8:	1c5a      	adds	r2, r3, #1
   10faa:	4904      	ldr	r1, [pc, #16]	; (10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fb2:	bf00      	nop
   10fb4:	b003      	add	sp, #12
   10fb6:	f85d fb04 	ldr.w	pc, [sp], #4
   10fba:	bf00      	nop
   10fbc:	1fff9418 	.word	0x1fff9418
   10fc0:	1fff9414 	.word	0x1fff9414

00010fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   10fc4:	b500      	push	{lr}
   10fc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fc8:	f7f0 fa60 	bl	148c <Sys_GetCoreID>
   10fcc:	4603      	mov	r3, r0
   10fce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   10fd0:	4a0d      	ldr	r2, [pc, #52]	; (11008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   10fd2:	9b01      	ldr	r3, [sp, #4]
   10fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fd8:	1e5a      	subs	r2, r3, #1
   10fda:	490b      	ldr	r1, [pc, #44]	; (11008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   10fdc:	9b01      	ldr	r3, [sp, #4]
   10fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   10fe2:	4a0a      	ldr	r2, [pc, #40]	; (1100c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   10fe4:	9b01      	ldr	r3, [sp, #4]
   10fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fea:	f003 0301 	and.w	r3, r3, #1
   10fee:	2b00      	cmp	r3, #0
   10ff0:	d106      	bne.n	11000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   10ff2:	4a05      	ldr	r2, [pc, #20]	; (11008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   10ff4:	9b01      	ldr	r3, [sp, #4]
   10ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ffa:	2b00      	cmp	r3, #0
   10ffc:	d100      	bne.n	11000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ffe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11000:	bf00      	nop
   11002:	b003      	add	sp, #12
   11004:	f85d fb04 	ldr.w	pc, [sp], #4
   11008:	1fff9418 	.word	0x1fff9418
   1100c:	1fff9414 	.word	0x1fff9414

00011010 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11010:	b500      	push	{lr}
   11012:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11014:	f7f0 fa3a 	bl	148c <Sys_GetCoreID>
   11018:	4603      	mov	r3, r0
   1101a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   1101c:	4a10      	ldr	r2, [pc, #64]	; (11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   1101e:	9b01      	ldr	r3, [sp, #4]
   11020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11024:	2b00      	cmp	r3, #0
   11026:	d10d      	bne.n	11044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11028:	f7ef fc50 	bl	8cc <Adc_schm_read_msr>
   1102c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1102e:	9b00      	ldr	r3, [sp, #0]
   11030:	f003 0301 	and.w	r3, r3, #1
   11034:	2b00      	cmp	r3, #0
   11036:	d100      	bne.n	1103a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11038:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   1103a:	490a      	ldr	r1, [pc, #40]	; (11064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   1103c:	9b01      	ldr	r3, [sp, #4]
   1103e:	9a00      	ldr	r2, [sp, #0]
   11040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   11044:	4a06      	ldr	r2, [pc, #24]	; (11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11046:	9b01      	ldr	r3, [sp, #4]
   11048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1104c:	1c5a      	adds	r2, r3, #1
   1104e:	4904      	ldr	r1, [pc, #16]	; (11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11056:	bf00      	nop
   11058:	b003      	add	sp, #12
   1105a:	f85d fb04 	ldr.w	pc, [sp], #4
   1105e:	bf00      	nop
   11060:	1fff9420 	.word	0x1fff9420
   11064:	1fff941c 	.word	0x1fff941c

00011068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11068:	b500      	push	{lr}
   1106a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1106c:	f7f0 fa0e 	bl	148c <Sys_GetCoreID>
   11070:	4603      	mov	r3, r0
   11072:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   11074:	4a0d      	ldr	r2, [pc, #52]	; (110ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11076:	9b01      	ldr	r3, [sp, #4]
   11078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1107c:	1e5a      	subs	r2, r3, #1
   1107e:	490b      	ldr	r1, [pc, #44]	; (110ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11080:	9b01      	ldr	r3, [sp, #4]
   11082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   11086:	4a0a      	ldr	r2, [pc, #40]	; (110b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   11088:	9b01      	ldr	r3, [sp, #4]
   1108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1108e:	f003 0301 	and.w	r3, r3, #1
   11092:	2b00      	cmp	r3, #0
   11094:	d106      	bne.n	110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   11096:	4a05      	ldr	r2, [pc, #20]	; (110ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11098:	9b01      	ldr	r3, [sp, #4]
   1109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1109e:	2b00      	cmp	r3, #0
   110a0:	d100      	bne.n	110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   110a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   110a4:	bf00      	nop
   110a6:	b003      	add	sp, #12
   110a8:	f85d fb04 	ldr.w	pc, [sp], #4
   110ac:	1fff9420 	.word	0x1fff9420
   110b0:	1fff941c 	.word	0x1fff941c

000110b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   110b4:	b500      	push	{lr}
   110b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110b8:	f7f0 f9e8 	bl	148c <Sys_GetCoreID>
   110bc:	4603      	mov	r3, r0
   110be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   110c0:	4a10      	ldr	r2, [pc, #64]	; (11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   110c2:	9b01      	ldr	r3, [sp, #4]
   110c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110c8:	2b00      	cmp	r3, #0
   110ca:	d10d      	bne.n	110e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   110cc:	f7ef fbfe 	bl	8cc <Adc_schm_read_msr>
   110d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   110d2:	9b00      	ldr	r3, [sp, #0]
   110d4:	f003 0301 	and.w	r3, r3, #1
   110d8:	2b00      	cmp	r3, #0
   110da:	d100      	bne.n	110de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   110de:	490a      	ldr	r1, [pc, #40]	; (11108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   110e0:	9b01      	ldr	r3, [sp, #4]
   110e2:	9a00      	ldr	r2, [sp, #0]
   110e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   110e8:	4a06      	ldr	r2, [pc, #24]	; (11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   110ea:	9b01      	ldr	r3, [sp, #4]
   110ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110f0:	1c5a      	adds	r2, r3, #1
   110f2:	4904      	ldr	r1, [pc, #16]	; (11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   110f4:	9b01      	ldr	r3, [sp, #4]
   110f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110fa:	bf00      	nop
   110fc:	b003      	add	sp, #12
   110fe:	f85d fb04 	ldr.w	pc, [sp], #4
   11102:	bf00      	nop
   11104:	1fff9428 	.word	0x1fff9428
   11108:	1fff9424 	.word	0x1fff9424

0001110c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   1110c:	b500      	push	{lr}
   1110e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11110:	f7f0 f9bc 	bl	148c <Sys_GetCoreID>
   11114:	4603      	mov	r3, r0
   11116:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   11118:	4a0d      	ldr	r2, [pc, #52]	; (11150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   1111a:	9b01      	ldr	r3, [sp, #4]
   1111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11120:	1e5a      	subs	r2, r3, #1
   11122:	490b      	ldr	r1, [pc, #44]	; (11150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11124:	9b01      	ldr	r3, [sp, #4]
   11126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   1112a:	4a0a      	ldr	r2, [pc, #40]	; (11154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   1112c:	9b01      	ldr	r3, [sp, #4]
   1112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11132:	f003 0301 	and.w	r3, r3, #1
   11136:	2b00      	cmp	r3, #0
   11138:	d106      	bne.n	11148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   1113a:	4a05      	ldr	r2, [pc, #20]	; (11150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   1113c:	9b01      	ldr	r3, [sp, #4]
   1113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11142:	2b00      	cmp	r3, #0
   11144:	d100      	bne.n	11148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11146:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11148:	bf00      	nop
   1114a:	b003      	add	sp, #12
   1114c:	f85d fb04 	ldr.w	pc, [sp], #4
   11150:	1fff9428 	.word	0x1fff9428
   11154:	1fff9424 	.word	0x1fff9424

00011158 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11158:	b500      	push	{lr}
   1115a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1115c:	f7f0 f996 	bl	148c <Sys_GetCoreID>
   11160:	4603      	mov	r3, r0
   11162:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   11164:	4a10      	ldr	r2, [pc, #64]	; (111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11166:	9b01      	ldr	r3, [sp, #4]
   11168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1116c:	2b00      	cmp	r3, #0
   1116e:	d10d      	bne.n	1118c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11170:	f7ef fbac 	bl	8cc <Adc_schm_read_msr>
   11174:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11176:	9b00      	ldr	r3, [sp, #0]
   11178:	f003 0301 	and.w	r3, r3, #1
   1117c:	2b00      	cmp	r3, #0
   1117e:	d100      	bne.n	11182 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11180:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   11182:	490a      	ldr	r1, [pc, #40]	; (111ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   11184:	9b01      	ldr	r3, [sp, #4]
   11186:	9a00      	ldr	r2, [sp, #0]
   11188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   1118c:	4a06      	ldr	r2, [pc, #24]	; (111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   1118e:	9b01      	ldr	r3, [sp, #4]
   11190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11194:	1c5a      	adds	r2, r3, #1
   11196:	4904      	ldr	r1, [pc, #16]	; (111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11198:	9b01      	ldr	r3, [sp, #4]
   1119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1119e:	bf00      	nop
   111a0:	b003      	add	sp, #12
   111a2:	f85d fb04 	ldr.w	pc, [sp], #4
   111a6:	bf00      	nop
   111a8:	1fff9430 	.word	0x1fff9430
   111ac:	1fff942c 	.word	0x1fff942c

000111b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   111b0:	b500      	push	{lr}
   111b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111b4:	f7f0 f96a 	bl	148c <Sys_GetCoreID>
   111b8:	4603      	mov	r3, r0
   111ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   111bc:	4a0d      	ldr	r2, [pc, #52]	; (111f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   111be:	9b01      	ldr	r3, [sp, #4]
   111c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111c4:	1e5a      	subs	r2, r3, #1
   111c6:	490b      	ldr	r1, [pc, #44]	; (111f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   111c8:	9b01      	ldr	r3, [sp, #4]
   111ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   111ce:	4a0a      	ldr	r2, [pc, #40]	; (111f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   111d0:	9b01      	ldr	r3, [sp, #4]
   111d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d6:	f003 0301 	and.w	r3, r3, #1
   111da:	2b00      	cmp	r3, #0
   111dc:	d106      	bne.n	111ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   111de:	4a05      	ldr	r2, [pc, #20]	; (111f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   111e0:	9b01      	ldr	r3, [sp, #4]
   111e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111e6:	2b00      	cmp	r3, #0
   111e8:	d100      	bne.n	111ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111ec:	bf00      	nop
   111ee:	b003      	add	sp, #12
   111f0:	f85d fb04 	ldr.w	pc, [sp], #4
   111f4:	1fff9430 	.word	0x1fff9430
   111f8:	1fff942c 	.word	0x1fff942c

000111fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   111fc:	b500      	push	{lr}
   111fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11200:	f7f0 f944 	bl	148c <Sys_GetCoreID>
   11204:	4603      	mov	r3, r0
   11206:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   11208:	4a10      	ldr	r2, [pc, #64]	; (1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   1120a:	9b01      	ldr	r3, [sp, #4]
   1120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11210:	2b00      	cmp	r3, #0
   11212:	d10d      	bne.n	11230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11214:	f7ef fb5a 	bl	8cc <Adc_schm_read_msr>
   11218:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1121a:	9b00      	ldr	r3, [sp, #0]
   1121c:	f003 0301 	and.w	r3, r3, #1
   11220:	2b00      	cmp	r3, #0
   11222:	d100      	bne.n	11226 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11224:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   11226:	490a      	ldr	r1, [pc, #40]	; (11250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   11228:	9b01      	ldr	r3, [sp, #4]
   1122a:	9a00      	ldr	r2, [sp, #0]
   1122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   11230:	4a06      	ldr	r2, [pc, #24]	; (1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11232:	9b01      	ldr	r3, [sp, #4]
   11234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11238:	1c5a      	adds	r2, r3, #1
   1123a:	4904      	ldr	r1, [pc, #16]	; (1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   1123c:	9b01      	ldr	r3, [sp, #4]
   1123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11242:	bf00      	nop
   11244:	b003      	add	sp, #12
   11246:	f85d fb04 	ldr.w	pc, [sp], #4
   1124a:	bf00      	nop
   1124c:	1fff9438 	.word	0x1fff9438
   11250:	1fff9434 	.word	0x1fff9434

00011254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11254:	b500      	push	{lr}
   11256:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11258:	f7f0 f918 	bl	148c <Sys_GetCoreID>
   1125c:	4603      	mov	r3, r0
   1125e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   11260:	4a0d      	ldr	r2, [pc, #52]	; (11298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11262:	9b01      	ldr	r3, [sp, #4]
   11264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11268:	1e5a      	subs	r2, r3, #1
   1126a:	490b      	ldr	r1, [pc, #44]	; (11298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   1126c:	9b01      	ldr	r3, [sp, #4]
   1126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   11272:	4a0a      	ldr	r2, [pc, #40]	; (1129c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   11274:	9b01      	ldr	r3, [sp, #4]
   11276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1127a:	f003 0301 	and.w	r3, r3, #1
   1127e:	2b00      	cmp	r3, #0
   11280:	d106      	bne.n	11290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   11282:	4a05      	ldr	r2, [pc, #20]	; (11298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11284:	9b01      	ldr	r3, [sp, #4]
   11286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1128a:	2b00      	cmp	r3, #0
   1128c:	d100      	bne.n	11290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1128e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11290:	bf00      	nop
   11292:	b003      	add	sp, #12
   11294:	f85d fb04 	ldr.w	pc, [sp], #4
   11298:	1fff9438 	.word	0x1fff9438
   1129c:	1fff9434 	.word	0x1fff9434

000112a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   112a0:	b500      	push	{lr}
   112a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112a4:	f7f0 f8f2 	bl	148c <Sys_GetCoreID>
   112a8:	4603      	mov	r3, r0
   112aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   112ac:	4a10      	ldr	r2, [pc, #64]	; (112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   112ae:	9b01      	ldr	r3, [sp, #4]
   112b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112b4:	2b00      	cmp	r3, #0
   112b6:	d10d      	bne.n	112d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112b8:	f7ef fb08 	bl	8cc <Adc_schm_read_msr>
   112bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112be:	9b00      	ldr	r3, [sp, #0]
   112c0:	f003 0301 	and.w	r3, r3, #1
   112c4:	2b00      	cmp	r3, #0
   112c6:	d100      	bne.n	112ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   112c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   112ca:	490a      	ldr	r1, [pc, #40]	; (112f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   112cc:	9b01      	ldr	r3, [sp, #4]
   112ce:	9a00      	ldr	r2, [sp, #0]
   112d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   112d4:	4a06      	ldr	r2, [pc, #24]	; (112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   112d6:	9b01      	ldr	r3, [sp, #4]
   112d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112dc:	1c5a      	adds	r2, r3, #1
   112de:	4904      	ldr	r1, [pc, #16]	; (112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   112e0:	9b01      	ldr	r3, [sp, #4]
   112e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112e6:	bf00      	nop
   112e8:	b003      	add	sp, #12
   112ea:	f85d fb04 	ldr.w	pc, [sp], #4
   112ee:	bf00      	nop
   112f0:	1fff9440 	.word	0x1fff9440
   112f4:	1fff943c 	.word	0x1fff943c

000112f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   112f8:	b500      	push	{lr}
   112fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112fc:	f7f0 f8c6 	bl	148c <Sys_GetCoreID>
   11300:	4603      	mov	r3, r0
   11302:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   11304:	4a0d      	ldr	r2, [pc, #52]	; (1133c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   11306:	9b01      	ldr	r3, [sp, #4]
   11308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1130c:	1e5a      	subs	r2, r3, #1
   1130e:	490b      	ldr	r1, [pc, #44]	; (1133c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   11316:	4a0a      	ldr	r2, [pc, #40]	; (11340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   11318:	9b01      	ldr	r3, [sp, #4]
   1131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1131e:	f003 0301 	and.w	r3, r3, #1
   11322:	2b00      	cmp	r3, #0
   11324:	d106      	bne.n	11334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   11326:	4a05      	ldr	r2, [pc, #20]	; (1133c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   11328:	9b01      	ldr	r3, [sp, #4]
   1132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1132e:	2b00      	cmp	r3, #0
   11330:	d100      	bne.n	11334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11332:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11334:	bf00      	nop
   11336:	b003      	add	sp, #12
   11338:	f85d fb04 	ldr.w	pc, [sp], #4
   1133c:	1fff9440 	.word	0x1fff9440
   11340:	1fff943c 	.word	0x1fff943c

00011344 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   11344:	b500      	push	{lr}
   11346:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11348:	f7f0 f8a0 	bl	148c <Sys_GetCoreID>
   1134c:	4603      	mov	r3, r0
   1134e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   11350:	4a10      	ldr	r2, [pc, #64]	; (11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   11352:	9b01      	ldr	r3, [sp, #4]
   11354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11358:	2b00      	cmp	r3, #0
   1135a:	d10d      	bne.n	11378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1135c:	f7ef fab6 	bl	8cc <Adc_schm_read_msr>
   11360:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11362:	9b00      	ldr	r3, [sp, #0]
   11364:	f003 0301 	and.w	r3, r3, #1
   11368:	2b00      	cmp	r3, #0
   1136a:	d100      	bne.n	1136e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1136c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   1136e:	490a      	ldr	r1, [pc, #40]	; (11398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   11370:	9b01      	ldr	r3, [sp, #4]
   11372:	9a00      	ldr	r2, [sp, #0]
   11374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   11378:	4a06      	ldr	r2, [pc, #24]	; (11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   1137a:	9b01      	ldr	r3, [sp, #4]
   1137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11380:	1c5a      	adds	r2, r3, #1
   11382:	4904      	ldr	r1, [pc, #16]	; (11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   11384:	9b01      	ldr	r3, [sp, #4]
   11386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1138a:	bf00      	nop
   1138c:	b003      	add	sp, #12
   1138e:	f85d fb04 	ldr.w	pc, [sp], #4
   11392:	bf00      	nop
   11394:	1fff9448 	.word	0x1fff9448
   11398:	1fff9444 	.word	0x1fff9444

0001139c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   1139c:	b500      	push	{lr}
   1139e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113a0:	f7f0 f874 	bl	148c <Sys_GetCoreID>
   113a4:	4603      	mov	r3, r0
   113a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   113a8:	4a0d      	ldr	r2, [pc, #52]	; (113e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   113aa:	9b01      	ldr	r3, [sp, #4]
   113ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113b0:	1e5a      	subs	r2, r3, #1
   113b2:	490b      	ldr	r1, [pc, #44]	; (113e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   113b4:	9b01      	ldr	r3, [sp, #4]
   113b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   113ba:	4a0a      	ldr	r2, [pc, #40]	; (113e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   113bc:	9b01      	ldr	r3, [sp, #4]
   113be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113c2:	f003 0301 	and.w	r3, r3, #1
   113c6:	2b00      	cmp	r3, #0
   113c8:	d106      	bne.n	113d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   113ca:	4a05      	ldr	r2, [pc, #20]	; (113e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   113cc:	9b01      	ldr	r3, [sp, #4]
   113ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113d2:	2b00      	cmp	r3, #0
   113d4:	d100      	bne.n	113d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   113d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113d8:	bf00      	nop
   113da:	b003      	add	sp, #12
   113dc:	f85d fb04 	ldr.w	pc, [sp], #4
   113e0:	1fff9448 	.word	0x1fff9448
   113e4:	1fff9444 	.word	0x1fff9444

000113e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   113e8:	b500      	push	{lr}
   113ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113ec:	f7f0 f84e 	bl	148c <Sys_GetCoreID>
   113f0:	4603      	mov	r3, r0
   113f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   113f4:	4a10      	ldr	r2, [pc, #64]	; (11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   113f6:	9b01      	ldr	r3, [sp, #4]
   113f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113fc:	2b00      	cmp	r3, #0
   113fe:	d10d      	bne.n	1141c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11400:	f7ef fa64 	bl	8cc <Adc_schm_read_msr>
   11404:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11406:	9b00      	ldr	r3, [sp, #0]
   11408:	f003 0301 	and.w	r3, r3, #1
   1140c:	2b00      	cmp	r3, #0
   1140e:	d100      	bne.n	11412 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11410:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   11412:	490a      	ldr	r1, [pc, #40]	; (1143c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   11414:	9b01      	ldr	r3, [sp, #4]
   11416:	9a00      	ldr	r2, [sp, #0]
   11418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   1141c:	4a06      	ldr	r2, [pc, #24]	; (11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11424:	1c5a      	adds	r2, r3, #1
   11426:	4904      	ldr	r1, [pc, #16]	; (11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   11428:	9b01      	ldr	r3, [sp, #4]
   1142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1142e:	bf00      	nop
   11430:	b003      	add	sp, #12
   11432:	f85d fb04 	ldr.w	pc, [sp], #4
   11436:	bf00      	nop
   11438:	1fff9450 	.word	0x1fff9450
   1143c:	1fff944c 	.word	0x1fff944c

00011440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   11440:	b500      	push	{lr}
   11442:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11444:	f7f0 f822 	bl	148c <Sys_GetCoreID>
   11448:	4603      	mov	r3, r0
   1144a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   1144c:	4a0d      	ldr	r2, [pc, #52]	; (11484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   1144e:	9b01      	ldr	r3, [sp, #4]
   11450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11454:	1e5a      	subs	r2, r3, #1
   11456:	490b      	ldr	r1, [pc, #44]	; (11484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11458:	9b01      	ldr	r3, [sp, #4]
   1145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   1145e:	4a0a      	ldr	r2, [pc, #40]	; (11488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   11460:	9b01      	ldr	r3, [sp, #4]
   11462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11466:	f003 0301 	and.w	r3, r3, #1
   1146a:	2b00      	cmp	r3, #0
   1146c:	d106      	bne.n	1147c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   1146e:	4a05      	ldr	r2, [pc, #20]	; (11484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11470:	9b01      	ldr	r3, [sp, #4]
   11472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11476:	2b00      	cmp	r3, #0
   11478:	d100      	bne.n	1147c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1147a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1147c:	bf00      	nop
   1147e:	b003      	add	sp, #12
   11480:	f85d fb04 	ldr.w	pc, [sp], #4
   11484:	1fff9450 	.word	0x1fff9450
   11488:	1fff944c 	.word	0x1fff944c

0001148c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   1148c:	b500      	push	{lr}
   1148e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11490:	f7ef fffc 	bl	148c <Sys_GetCoreID>
   11494:	4603      	mov	r3, r0
   11496:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   11498:	4a10      	ldr	r2, [pc, #64]	; (114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1149a:	9b01      	ldr	r3, [sp, #4]
   1149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114a0:	2b00      	cmp	r3, #0
   114a2:	d10d      	bne.n	114c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114a4:	f7ef fa12 	bl	8cc <Adc_schm_read_msr>
   114a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114aa:	9b00      	ldr	r3, [sp, #0]
   114ac:	f003 0301 	and.w	r3, r3, #1
   114b0:	2b00      	cmp	r3, #0
   114b2:	d100      	bne.n	114b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   114b6:	490a      	ldr	r1, [pc, #40]	; (114e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   114b8:	9b01      	ldr	r3, [sp, #4]
   114ba:	9a00      	ldr	r2, [sp, #0]
   114bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   114c0:	4a06      	ldr	r2, [pc, #24]	; (114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114c8:	1c5a      	adds	r2, r3, #1
   114ca:	4904      	ldr	r1, [pc, #16]	; (114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   114d2:	bf00      	nop
   114d4:	b003      	add	sp, #12
   114d6:	f85d fb04 	ldr.w	pc, [sp], #4
   114da:	bf00      	nop
   114dc:	1fff9458 	.word	0x1fff9458
   114e0:	1fff9454 	.word	0x1fff9454

000114e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   114e4:	b500      	push	{lr}
   114e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114e8:	f7ef ffd0 	bl	148c <Sys_GetCoreID>
   114ec:	4603      	mov	r3, r0
   114ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   114f0:	4a0d      	ldr	r2, [pc, #52]	; (11528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   114f2:	9b01      	ldr	r3, [sp, #4]
   114f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114f8:	1e5a      	subs	r2, r3, #1
   114fa:	490b      	ldr	r1, [pc, #44]	; (11528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   114fc:	9b01      	ldr	r3, [sp, #4]
   114fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   11502:	4a0a      	ldr	r2, [pc, #40]	; (1152c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   11504:	9b01      	ldr	r3, [sp, #4]
   11506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1150a:	f003 0301 	and.w	r3, r3, #1
   1150e:	2b00      	cmp	r3, #0
   11510:	d106      	bne.n	11520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   11512:	4a05      	ldr	r2, [pc, #20]	; (11528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   11514:	9b01      	ldr	r3, [sp, #4]
   11516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1151a:	2b00      	cmp	r3, #0
   1151c:	d100      	bne.n	11520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1151e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11520:	bf00      	nop
   11522:	b003      	add	sp, #12
   11524:	f85d fb04 	ldr.w	pc, [sp], #4
   11528:	1fff9458 	.word	0x1fff9458
   1152c:	1fff9454 	.word	0x1fff9454

00011530 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   11530:	b500      	push	{lr}
   11532:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11534:	f7ef ffaa 	bl	148c <Sys_GetCoreID>
   11538:	4603      	mov	r3, r0
   1153a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   1153c:	4a10      	ldr	r2, [pc, #64]	; (11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1153e:	9b01      	ldr	r3, [sp, #4]
   11540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11544:	2b00      	cmp	r3, #0
   11546:	d10d      	bne.n	11564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11548:	f7ef f9c0 	bl	8cc <Adc_schm_read_msr>
   1154c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1154e:	9b00      	ldr	r3, [sp, #0]
   11550:	f003 0301 	and.w	r3, r3, #1
   11554:	2b00      	cmp	r3, #0
   11556:	d100      	bne.n	1155a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11558:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   1155a:	490a      	ldr	r1, [pc, #40]	; (11584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   1155c:	9b01      	ldr	r3, [sp, #4]
   1155e:	9a00      	ldr	r2, [sp, #0]
   11560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   11564:	4a06      	ldr	r2, [pc, #24]	; (11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   11566:	9b01      	ldr	r3, [sp, #4]
   11568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1156c:	1c5a      	adds	r2, r3, #1
   1156e:	4904      	ldr	r1, [pc, #16]	; (11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   11570:	9b01      	ldr	r3, [sp, #4]
   11572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11576:	bf00      	nop
   11578:	b003      	add	sp, #12
   1157a:	f85d fb04 	ldr.w	pc, [sp], #4
   1157e:	bf00      	nop
   11580:	1fff9460 	.word	0x1fff9460
   11584:	1fff945c 	.word	0x1fff945c

00011588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   11588:	b500      	push	{lr}
   1158a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1158c:	f7ef ff7e 	bl	148c <Sys_GetCoreID>
   11590:	4603      	mov	r3, r0
   11592:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   11594:	4a0d      	ldr	r2, [pc, #52]	; (115cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   11596:	9b01      	ldr	r3, [sp, #4]
   11598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1159c:	1e5a      	subs	r2, r3, #1
   1159e:	490b      	ldr	r1, [pc, #44]	; (115cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   115a0:	9b01      	ldr	r3, [sp, #4]
   115a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   115a6:	4a0a      	ldr	r2, [pc, #40]	; (115d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   115a8:	9b01      	ldr	r3, [sp, #4]
   115aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115ae:	f003 0301 	and.w	r3, r3, #1
   115b2:	2b00      	cmp	r3, #0
   115b4:	d106      	bne.n	115c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   115b6:	4a05      	ldr	r2, [pc, #20]	; (115cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   115b8:	9b01      	ldr	r3, [sp, #4]
   115ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115be:	2b00      	cmp	r3, #0
   115c0:	d100      	bne.n	115c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115c4:	bf00      	nop
   115c6:	b003      	add	sp, #12
   115c8:	f85d fb04 	ldr.w	pc, [sp], #4
   115cc:	1fff9460 	.word	0x1fff9460
   115d0:	1fff945c 	.word	0x1fff945c

000115d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   115d4:	b500      	push	{lr}
   115d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115d8:	f7ef ff58 	bl	148c <Sys_GetCoreID>
   115dc:	4603      	mov	r3, r0
   115de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   115e0:	4a10      	ldr	r2, [pc, #64]	; (11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   115e2:	9b01      	ldr	r3, [sp, #4]
   115e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e8:	2b00      	cmp	r3, #0
   115ea:	d10d      	bne.n	11608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115ec:	f7ef f96e 	bl	8cc <Adc_schm_read_msr>
   115f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115f2:	9b00      	ldr	r3, [sp, #0]
   115f4:	f003 0301 	and.w	r3, r3, #1
   115f8:	2b00      	cmp	r3, #0
   115fa:	d100      	bne.n	115fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   115fe:	490a      	ldr	r1, [pc, #40]	; (11628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   11600:	9b01      	ldr	r3, [sp, #4]
   11602:	9a00      	ldr	r2, [sp, #0]
   11604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   11608:	4a06      	ldr	r2, [pc, #24]	; (11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1160a:	9b01      	ldr	r3, [sp, #4]
   1160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11610:	1c5a      	adds	r2, r3, #1
   11612:	4904      	ldr	r1, [pc, #16]	; (11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   11614:	9b01      	ldr	r3, [sp, #4]
   11616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1161a:	bf00      	nop
   1161c:	b003      	add	sp, #12
   1161e:	f85d fb04 	ldr.w	pc, [sp], #4
   11622:	bf00      	nop
   11624:	1fff9468 	.word	0x1fff9468
   11628:	1fff9464 	.word	0x1fff9464

0001162c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   1162c:	b500      	push	{lr}
   1162e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11630:	f7ef ff2c 	bl	148c <Sys_GetCoreID>
   11634:	4603      	mov	r3, r0
   11636:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   11638:	4a0d      	ldr	r2, [pc, #52]	; (11670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1163a:	9b01      	ldr	r3, [sp, #4]
   1163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11640:	1e5a      	subs	r2, r3, #1
   11642:	490b      	ldr	r1, [pc, #44]	; (11670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   1164a:	4a0a      	ldr	r2, [pc, #40]	; (11674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   1164c:	9b01      	ldr	r3, [sp, #4]
   1164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11652:	f003 0301 	and.w	r3, r3, #1
   11656:	2b00      	cmp	r3, #0
   11658:	d106      	bne.n	11668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   1165a:	4a05      	ldr	r2, [pc, #20]	; (11670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1165c:	9b01      	ldr	r3, [sp, #4]
   1165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11662:	2b00      	cmp	r3, #0
   11664:	d100      	bne.n	11668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11666:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11668:	bf00      	nop
   1166a:	b003      	add	sp, #12
   1166c:	f85d fb04 	ldr.w	pc, [sp], #4
   11670:	1fff9468 	.word	0x1fff9468
   11674:	1fff9464 	.word	0x1fff9464

00011678 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   11678:	b500      	push	{lr}
   1167a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1167c:	f7ef ff06 	bl	148c <Sys_GetCoreID>
   11680:	4603      	mov	r3, r0
   11682:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   11684:	4a10      	ldr	r2, [pc, #64]	; (116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   11686:	9b01      	ldr	r3, [sp, #4]
   11688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1168c:	2b00      	cmp	r3, #0
   1168e:	d10d      	bne.n	116ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11690:	f7ef f91c 	bl	8cc <Adc_schm_read_msr>
   11694:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11696:	9b00      	ldr	r3, [sp, #0]
   11698:	f003 0301 	and.w	r3, r3, #1
   1169c:	2b00      	cmp	r3, #0
   1169e:	d100      	bne.n	116a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   116a2:	490a      	ldr	r1, [pc, #40]	; (116cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   116a4:	9b01      	ldr	r3, [sp, #4]
   116a6:	9a00      	ldr	r2, [sp, #0]
   116a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   116ac:	4a06      	ldr	r2, [pc, #24]	; (116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   116ae:	9b01      	ldr	r3, [sp, #4]
   116b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116b4:	1c5a      	adds	r2, r3, #1
   116b6:	4904      	ldr	r1, [pc, #16]	; (116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   116b8:	9b01      	ldr	r3, [sp, #4]
   116ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116be:	bf00      	nop
   116c0:	b003      	add	sp, #12
   116c2:	f85d fb04 	ldr.w	pc, [sp], #4
   116c6:	bf00      	nop
   116c8:	1fff9470 	.word	0x1fff9470
   116cc:	1fff946c 	.word	0x1fff946c

000116d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   116d0:	b500      	push	{lr}
   116d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116d4:	f7ef feda 	bl	148c <Sys_GetCoreID>
   116d8:	4603      	mov	r3, r0
   116da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   116dc:	4a0d      	ldr	r2, [pc, #52]	; (11714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   116de:	9b01      	ldr	r3, [sp, #4]
   116e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116e4:	1e5a      	subs	r2, r3, #1
   116e6:	490b      	ldr	r1, [pc, #44]	; (11714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   116e8:	9b01      	ldr	r3, [sp, #4]
   116ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   116ee:	4a0a      	ldr	r2, [pc, #40]	; (11718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f6:	f003 0301 	and.w	r3, r3, #1
   116fa:	2b00      	cmp	r3, #0
   116fc:	d106      	bne.n	1170c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   116fe:	4a05      	ldr	r2, [pc, #20]	; (11714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   11700:	9b01      	ldr	r3, [sp, #4]
   11702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11706:	2b00      	cmp	r3, #0
   11708:	d100      	bne.n	1170c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1170a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1170c:	bf00      	nop
   1170e:	b003      	add	sp, #12
   11710:	f85d fb04 	ldr.w	pc, [sp], #4
   11714:	1fff9470 	.word	0x1fff9470
   11718:	1fff946c 	.word	0x1fff946c

0001171c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   1171c:	b500      	push	{lr}
   1171e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11720:	f7ef feb4 	bl	148c <Sys_GetCoreID>
   11724:	4603      	mov	r3, r0
   11726:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   11728:	4a10      	ldr	r2, [pc, #64]	; (1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1172a:	9b01      	ldr	r3, [sp, #4]
   1172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11730:	2b00      	cmp	r3, #0
   11732:	d10d      	bne.n	11750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11734:	f7ef f8ca 	bl	8cc <Adc_schm_read_msr>
   11738:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1173a:	9b00      	ldr	r3, [sp, #0]
   1173c:	f003 0301 	and.w	r3, r3, #1
   11740:	2b00      	cmp	r3, #0
   11742:	d100      	bne.n	11746 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11744:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   11746:	490a      	ldr	r1, [pc, #40]	; (11770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   11748:	9b01      	ldr	r3, [sp, #4]
   1174a:	9a00      	ldr	r2, [sp, #0]
   1174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   11750:	4a06      	ldr	r2, [pc, #24]	; (1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11758:	1c5a      	adds	r2, r3, #1
   1175a:	4904      	ldr	r1, [pc, #16]	; (1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1175c:	9b01      	ldr	r3, [sp, #4]
   1175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11762:	bf00      	nop
   11764:	b003      	add	sp, #12
   11766:	f85d fb04 	ldr.w	pc, [sp], #4
   1176a:	bf00      	nop
   1176c:	1fff9478 	.word	0x1fff9478
   11770:	1fff9474 	.word	0x1fff9474

00011774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   11774:	b500      	push	{lr}
   11776:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11778:	f7ef fe88 	bl	148c <Sys_GetCoreID>
   1177c:	4603      	mov	r3, r0
   1177e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   11780:	4a0d      	ldr	r2, [pc, #52]	; (117b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   11782:	9b01      	ldr	r3, [sp, #4]
   11784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11788:	1e5a      	subs	r2, r3, #1
   1178a:	490b      	ldr	r1, [pc, #44]	; (117b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1178c:	9b01      	ldr	r3, [sp, #4]
   1178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   11792:	4a0a      	ldr	r2, [pc, #40]	; (117bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   11794:	9b01      	ldr	r3, [sp, #4]
   11796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1179a:	f003 0301 	and.w	r3, r3, #1
   1179e:	2b00      	cmp	r3, #0
   117a0:	d106      	bne.n	117b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   117a2:	4a05      	ldr	r2, [pc, #20]	; (117b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   117a4:	9b01      	ldr	r3, [sp, #4]
   117a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117aa:	2b00      	cmp	r3, #0
   117ac:	d100      	bne.n	117b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117b0:	bf00      	nop
   117b2:	b003      	add	sp, #12
   117b4:	f85d fb04 	ldr.w	pc, [sp], #4
   117b8:	1fff9478 	.word	0x1fff9478
   117bc:	1fff9474 	.word	0x1fff9474

000117c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   117c0:	b500      	push	{lr}
   117c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117c4:	f7ef fe62 	bl	148c <Sys_GetCoreID>
   117c8:	4603      	mov	r3, r0
   117ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   117cc:	4a10      	ldr	r2, [pc, #64]	; (11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   117ce:	9b01      	ldr	r3, [sp, #4]
   117d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117d4:	2b00      	cmp	r3, #0
   117d6:	d10d      	bne.n	117f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117d8:	f7ef f878 	bl	8cc <Adc_schm_read_msr>
   117dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117de:	9b00      	ldr	r3, [sp, #0]
   117e0:	f003 0301 	and.w	r3, r3, #1
   117e4:	2b00      	cmp	r3, #0
   117e6:	d100      	bne.n	117ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   117ea:	490a      	ldr	r1, [pc, #40]	; (11814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   117ec:	9b01      	ldr	r3, [sp, #4]
   117ee:	9a00      	ldr	r2, [sp, #0]
   117f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   117f4:	4a06      	ldr	r2, [pc, #24]	; (11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   117f6:	9b01      	ldr	r3, [sp, #4]
   117f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117fc:	1c5a      	adds	r2, r3, #1
   117fe:	4904      	ldr	r1, [pc, #16]	; (11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   11800:	9b01      	ldr	r3, [sp, #4]
   11802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11806:	bf00      	nop
   11808:	b003      	add	sp, #12
   1180a:	f85d fb04 	ldr.w	pc, [sp], #4
   1180e:	bf00      	nop
   11810:	1fff9480 	.word	0x1fff9480
   11814:	1fff947c 	.word	0x1fff947c

00011818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   11818:	b500      	push	{lr}
   1181a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1181c:	f7ef fe36 	bl	148c <Sys_GetCoreID>
   11820:	4603      	mov	r3, r0
   11822:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   11824:	4a0d      	ldr	r2, [pc, #52]	; (1185c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   11826:	9b01      	ldr	r3, [sp, #4]
   11828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1182c:	1e5a      	subs	r2, r3, #1
   1182e:	490b      	ldr	r1, [pc, #44]	; (1185c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   11830:	9b01      	ldr	r3, [sp, #4]
   11832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   11836:	4a0a      	ldr	r2, [pc, #40]	; (11860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   11838:	9b01      	ldr	r3, [sp, #4]
   1183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1183e:	f003 0301 	and.w	r3, r3, #1
   11842:	2b00      	cmp	r3, #0
   11844:	d106      	bne.n	11854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   11846:	4a05      	ldr	r2, [pc, #20]	; (1185c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   11848:	9b01      	ldr	r3, [sp, #4]
   1184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1184e:	2b00      	cmp	r3, #0
   11850:	d100      	bne.n	11854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11852:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11854:	bf00      	nop
   11856:	b003      	add	sp, #12
   11858:	f85d fb04 	ldr.w	pc, [sp], #4
   1185c:	1fff9480 	.word	0x1fff9480
   11860:	1fff947c 	.word	0x1fff947c

00011864 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   11864:	b500      	push	{lr}
   11866:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11868:	f7ef fe10 	bl	148c <Sys_GetCoreID>
   1186c:	4603      	mov	r3, r0
   1186e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   11870:	4a10      	ldr	r2, [pc, #64]	; (118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   11872:	9b01      	ldr	r3, [sp, #4]
   11874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11878:	2b00      	cmp	r3, #0
   1187a:	d10d      	bne.n	11898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1187c:	f7ef f826 	bl	8cc <Adc_schm_read_msr>
   11880:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11882:	9b00      	ldr	r3, [sp, #0]
   11884:	f003 0301 	and.w	r3, r3, #1
   11888:	2b00      	cmp	r3, #0
   1188a:	d100      	bne.n	1188e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1188c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   1188e:	490a      	ldr	r1, [pc, #40]	; (118b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   11890:	9b01      	ldr	r3, [sp, #4]
   11892:	9a00      	ldr	r2, [sp, #0]
   11894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   11898:	4a06      	ldr	r2, [pc, #24]	; (118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1189a:	9b01      	ldr	r3, [sp, #4]
   1189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a0:	1c5a      	adds	r2, r3, #1
   118a2:	4904      	ldr	r1, [pc, #16]	; (118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   118a4:	9b01      	ldr	r3, [sp, #4]
   118a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118aa:	bf00      	nop
   118ac:	b003      	add	sp, #12
   118ae:	f85d fb04 	ldr.w	pc, [sp], #4
   118b2:	bf00      	nop
   118b4:	1fff9488 	.word	0x1fff9488
   118b8:	1fff9484 	.word	0x1fff9484

000118bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   118bc:	b500      	push	{lr}
   118be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118c0:	f7ef fde4 	bl	148c <Sys_GetCoreID>
   118c4:	4603      	mov	r3, r0
   118c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   118c8:	4a0d      	ldr	r2, [pc, #52]	; (11900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   118ca:	9b01      	ldr	r3, [sp, #4]
   118cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118d0:	1e5a      	subs	r2, r3, #1
   118d2:	490b      	ldr	r1, [pc, #44]	; (11900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   118d4:	9b01      	ldr	r3, [sp, #4]
   118d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   118da:	4a0a      	ldr	r2, [pc, #40]	; (11904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   118dc:	9b01      	ldr	r3, [sp, #4]
   118de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118e2:	f003 0301 	and.w	r3, r3, #1
   118e6:	2b00      	cmp	r3, #0
   118e8:	d106      	bne.n	118f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   118ea:	4a05      	ldr	r2, [pc, #20]	; (11900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   118ec:	9b01      	ldr	r3, [sp, #4]
   118ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118f2:	2b00      	cmp	r3, #0
   118f4:	d100      	bne.n	118f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118f8:	bf00      	nop
   118fa:	b003      	add	sp, #12
   118fc:	f85d fb04 	ldr.w	pc, [sp], #4
   11900:	1fff9488 	.word	0x1fff9488
   11904:	1fff9484 	.word	0x1fff9484

00011908 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   11908:	b500      	push	{lr}
   1190a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1190c:	f7ef fdbe 	bl	148c <Sys_GetCoreID>
   11910:	4603      	mov	r3, r0
   11912:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   11914:	4a10      	ldr	r2, [pc, #64]	; (11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   11916:	9b01      	ldr	r3, [sp, #4]
   11918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1191c:	2b00      	cmp	r3, #0
   1191e:	d10d      	bne.n	1193c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11920:	f7ee ffd4 	bl	8cc <Adc_schm_read_msr>
   11924:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11926:	9b00      	ldr	r3, [sp, #0]
   11928:	f003 0301 	and.w	r3, r3, #1
   1192c:	2b00      	cmp	r3, #0
   1192e:	d100      	bne.n	11932 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11930:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   11932:	490a      	ldr	r1, [pc, #40]	; (1195c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   11934:	9b01      	ldr	r3, [sp, #4]
   11936:	9a00      	ldr	r2, [sp, #0]
   11938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   1193c:	4a06      	ldr	r2, [pc, #24]	; (11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1193e:	9b01      	ldr	r3, [sp, #4]
   11940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11944:	1c5a      	adds	r2, r3, #1
   11946:	4904      	ldr	r1, [pc, #16]	; (11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   11948:	9b01      	ldr	r3, [sp, #4]
   1194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1194e:	bf00      	nop
   11950:	b003      	add	sp, #12
   11952:	f85d fb04 	ldr.w	pc, [sp], #4
   11956:	bf00      	nop
   11958:	1fff9490 	.word	0x1fff9490
   1195c:	1fff948c 	.word	0x1fff948c

00011960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   11960:	b500      	push	{lr}
   11962:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11964:	f7ef fd92 	bl	148c <Sys_GetCoreID>
   11968:	4603      	mov	r3, r0
   1196a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   1196c:	4a0d      	ldr	r2, [pc, #52]	; (119a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   1196e:	9b01      	ldr	r3, [sp, #4]
   11970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11974:	1e5a      	subs	r2, r3, #1
   11976:	490b      	ldr	r1, [pc, #44]	; (119a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   11978:	9b01      	ldr	r3, [sp, #4]
   1197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   1197e:	4a0a      	ldr	r2, [pc, #40]	; (119a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   11980:	9b01      	ldr	r3, [sp, #4]
   11982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11986:	f003 0301 	and.w	r3, r3, #1
   1198a:	2b00      	cmp	r3, #0
   1198c:	d106      	bne.n	1199c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   1198e:	4a05      	ldr	r2, [pc, #20]	; (119a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   11990:	9b01      	ldr	r3, [sp, #4]
   11992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11996:	2b00      	cmp	r3, #0
   11998:	d100      	bne.n	1199c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1199a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1199c:	bf00      	nop
   1199e:	b003      	add	sp, #12
   119a0:	f85d fb04 	ldr.w	pc, [sp], #4
   119a4:	1fff9490 	.word	0x1fff9490
   119a8:	1fff948c 	.word	0x1fff948c

000119ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   119ac:	b500      	push	{lr}
   119ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119b0:	f7ef fd6c 	bl	148c <Sys_GetCoreID>
   119b4:	4603      	mov	r3, r0
   119b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   119b8:	4a10      	ldr	r2, [pc, #64]	; (119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   119ba:	9b01      	ldr	r3, [sp, #4]
   119bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119c0:	2b00      	cmp	r3, #0
   119c2:	d10d      	bne.n	119e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119c4:	f7ee ff82 	bl	8cc <Adc_schm_read_msr>
   119c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119ca:	9b00      	ldr	r3, [sp, #0]
   119cc:	f003 0301 	and.w	r3, r3, #1
   119d0:	2b00      	cmp	r3, #0
   119d2:	d100      	bne.n	119d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   119d6:	490a      	ldr	r1, [pc, #40]	; (11a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   119d8:	9b01      	ldr	r3, [sp, #4]
   119da:	9a00      	ldr	r2, [sp, #0]
   119dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   119e0:	4a06      	ldr	r2, [pc, #24]	; (119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   119e2:	9b01      	ldr	r3, [sp, #4]
   119e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119e8:	1c5a      	adds	r2, r3, #1
   119ea:	4904      	ldr	r1, [pc, #16]	; (119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   119ec:	9b01      	ldr	r3, [sp, #4]
   119ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119f2:	bf00      	nop
   119f4:	b003      	add	sp, #12
   119f6:	f85d fb04 	ldr.w	pc, [sp], #4
   119fa:	bf00      	nop
   119fc:	1fff9498 	.word	0x1fff9498
   11a00:	1fff9494 	.word	0x1fff9494

00011a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   11a04:	b500      	push	{lr}
   11a06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a08:	f7ef fd40 	bl	148c <Sys_GetCoreID>
   11a0c:	4603      	mov	r3, r0
   11a0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   11a10:	4a0d      	ldr	r2, [pc, #52]	; (11a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   11a12:	9b01      	ldr	r3, [sp, #4]
   11a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a18:	1e5a      	subs	r2, r3, #1
   11a1a:	490b      	ldr	r1, [pc, #44]	; (11a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   11a1c:	9b01      	ldr	r3, [sp, #4]
   11a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   11a22:	4a0a      	ldr	r2, [pc, #40]	; (11a4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   11a24:	9b01      	ldr	r3, [sp, #4]
   11a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a2a:	f003 0301 	and.w	r3, r3, #1
   11a2e:	2b00      	cmp	r3, #0
   11a30:	d106      	bne.n	11a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   11a32:	4a05      	ldr	r2, [pc, #20]	; (11a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   11a34:	9b01      	ldr	r3, [sp, #4]
   11a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	d100      	bne.n	11a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a40:	bf00      	nop
   11a42:	b003      	add	sp, #12
   11a44:	f85d fb04 	ldr.w	pc, [sp], #4
   11a48:	1fff9498 	.word	0x1fff9498
   11a4c:	1fff9494 	.word	0x1fff9494

00011a50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   11a50:	b500      	push	{lr}
   11a52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a54:	f7ef fd1a 	bl	148c <Sys_GetCoreID>
   11a58:	4603      	mov	r3, r0
   11a5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   11a5c:	4a10      	ldr	r2, [pc, #64]	; (11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   11a5e:	9b01      	ldr	r3, [sp, #4]
   11a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a64:	2b00      	cmp	r3, #0
   11a66:	d10d      	bne.n	11a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a68:	f7ee ff30 	bl	8cc <Adc_schm_read_msr>
   11a6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a6e:	9b00      	ldr	r3, [sp, #0]
   11a70:	f003 0301 	and.w	r3, r3, #1
   11a74:	2b00      	cmp	r3, #0
   11a76:	d100      	bne.n	11a7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   11a7a:	490a      	ldr	r1, [pc, #40]	; (11aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   11a7c:	9b01      	ldr	r3, [sp, #4]
   11a7e:	9a00      	ldr	r2, [sp, #0]
   11a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   11a84:	4a06      	ldr	r2, [pc, #24]	; (11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   11a86:	9b01      	ldr	r3, [sp, #4]
   11a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a8c:	1c5a      	adds	r2, r3, #1
   11a8e:	4904      	ldr	r1, [pc, #16]	; (11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a96:	bf00      	nop
   11a98:	b003      	add	sp, #12
   11a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a9e:	bf00      	nop
   11aa0:	1fff94a0 	.word	0x1fff94a0
   11aa4:	1fff949c 	.word	0x1fff949c

00011aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   11aa8:	b500      	push	{lr}
   11aaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11aac:	f7ef fcee 	bl	148c <Sys_GetCoreID>
   11ab0:	4603      	mov	r3, r0
   11ab2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   11ab4:	4a0d      	ldr	r2, [pc, #52]	; (11aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   11ab6:	9b01      	ldr	r3, [sp, #4]
   11ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11abc:	1e5a      	subs	r2, r3, #1
   11abe:	490b      	ldr	r1, [pc, #44]	; (11aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   11ac0:	9b01      	ldr	r3, [sp, #4]
   11ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   11ac6:	4a0a      	ldr	r2, [pc, #40]	; (11af0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   11ac8:	9b01      	ldr	r3, [sp, #4]
   11aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ace:	f003 0301 	and.w	r3, r3, #1
   11ad2:	2b00      	cmp	r3, #0
   11ad4:	d106      	bne.n	11ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   11ad6:	4a05      	ldr	r2, [pc, #20]	; (11aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   11ad8:	9b01      	ldr	r3, [sp, #4]
   11ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ade:	2b00      	cmp	r3, #0
   11ae0:	d100      	bne.n	11ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ae2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ae4:	bf00      	nop
   11ae6:	b003      	add	sp, #12
   11ae8:	f85d fb04 	ldr.w	pc, [sp], #4
   11aec:	1fff94a0 	.word	0x1fff94a0
   11af0:	1fff949c 	.word	0x1fff949c

00011af4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   11af4:	b500      	push	{lr}
   11af6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11af8:	f7ef fcc8 	bl	148c <Sys_GetCoreID>
   11afc:	4603      	mov	r3, r0
   11afe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   11b00:	4a10      	ldr	r2, [pc, #64]	; (11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   11b02:	9b01      	ldr	r3, [sp, #4]
   11b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d10d      	bne.n	11b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b0c:	f7ee fede 	bl	8cc <Adc_schm_read_msr>
   11b10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b12:	9b00      	ldr	r3, [sp, #0]
   11b14:	f003 0301 	and.w	r3, r3, #1
   11b18:	2b00      	cmp	r3, #0
   11b1a:	d100      	bne.n	11b1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   11b1e:	490a      	ldr	r1, [pc, #40]	; (11b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   11b20:	9b01      	ldr	r3, [sp, #4]
   11b22:	9a00      	ldr	r2, [sp, #0]
   11b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   11b28:	4a06      	ldr	r2, [pc, #24]	; (11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b30:	1c5a      	adds	r2, r3, #1
   11b32:	4904      	ldr	r1, [pc, #16]	; (11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   11b34:	9b01      	ldr	r3, [sp, #4]
   11b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b3a:	bf00      	nop
   11b3c:	b003      	add	sp, #12
   11b3e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b42:	bf00      	nop
   11b44:	1fff94a8 	.word	0x1fff94a8
   11b48:	1fff94a4 	.word	0x1fff94a4

00011b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   11b4c:	b500      	push	{lr}
   11b4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b50:	f7ef fc9c 	bl	148c <Sys_GetCoreID>
   11b54:	4603      	mov	r3, r0
   11b56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   11b58:	4a0d      	ldr	r2, [pc, #52]	; (11b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   11b5a:	9b01      	ldr	r3, [sp, #4]
   11b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b60:	1e5a      	subs	r2, r3, #1
   11b62:	490b      	ldr	r1, [pc, #44]	; (11b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   11b64:	9b01      	ldr	r3, [sp, #4]
   11b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   11b6a:	4a0a      	ldr	r2, [pc, #40]	; (11b94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   11b6c:	9b01      	ldr	r3, [sp, #4]
   11b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b72:	f003 0301 	and.w	r3, r3, #1
   11b76:	2b00      	cmp	r3, #0
   11b78:	d106      	bne.n	11b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   11b7a:	4a05      	ldr	r2, [pc, #20]	; (11b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   11b7c:	9b01      	ldr	r3, [sp, #4]
   11b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b82:	2b00      	cmp	r3, #0
   11b84:	d100      	bne.n	11b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b88:	bf00      	nop
   11b8a:	b003      	add	sp, #12
   11b8c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b90:	1fff94a8 	.word	0x1fff94a8
   11b94:	1fff94a4 	.word	0x1fff94a4

00011b98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   11b98:	b500      	push	{lr}
   11b9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b9c:	f7ef fc76 	bl	148c <Sys_GetCoreID>
   11ba0:	4603      	mov	r3, r0
   11ba2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   11ba4:	4a10      	ldr	r2, [pc, #64]	; (11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   11ba6:	9b01      	ldr	r3, [sp, #4]
   11ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bac:	2b00      	cmp	r3, #0
   11bae:	d10d      	bne.n	11bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11bb0:	f7ee fe8c 	bl	8cc <Adc_schm_read_msr>
   11bb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bb6:	9b00      	ldr	r3, [sp, #0]
   11bb8:	f003 0301 	and.w	r3, r3, #1
   11bbc:	2b00      	cmp	r3, #0
   11bbe:	d100      	bne.n	11bc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   11bc2:	490a      	ldr	r1, [pc, #40]	; (11bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   11bc4:	9b01      	ldr	r3, [sp, #4]
   11bc6:	9a00      	ldr	r2, [sp, #0]
   11bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   11bcc:	4a06      	ldr	r2, [pc, #24]	; (11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   11bce:	9b01      	ldr	r3, [sp, #4]
   11bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bd4:	1c5a      	adds	r2, r3, #1
   11bd6:	4904      	ldr	r1, [pc, #16]	; (11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   11bd8:	9b01      	ldr	r3, [sp, #4]
   11bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bde:	bf00      	nop
   11be0:	b003      	add	sp, #12
   11be2:	f85d fb04 	ldr.w	pc, [sp], #4
   11be6:	bf00      	nop
   11be8:	1fff94b0 	.word	0x1fff94b0
   11bec:	1fff94ac 	.word	0x1fff94ac

00011bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   11bf0:	b500      	push	{lr}
   11bf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bf4:	f7ef fc4a 	bl	148c <Sys_GetCoreID>
   11bf8:	4603      	mov	r3, r0
   11bfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   11bfc:	4a0d      	ldr	r2, [pc, #52]	; (11c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   11bfe:	9b01      	ldr	r3, [sp, #4]
   11c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c04:	1e5a      	subs	r2, r3, #1
   11c06:	490b      	ldr	r1, [pc, #44]	; (11c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   11c08:	9b01      	ldr	r3, [sp, #4]
   11c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   11c0e:	4a0a      	ldr	r2, [pc, #40]	; (11c38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   11c10:	9b01      	ldr	r3, [sp, #4]
   11c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c16:	f003 0301 	and.w	r3, r3, #1
   11c1a:	2b00      	cmp	r3, #0
   11c1c:	d106      	bne.n	11c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   11c1e:	4a05      	ldr	r2, [pc, #20]	; (11c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   11c20:	9b01      	ldr	r3, [sp, #4]
   11c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c26:	2b00      	cmp	r3, #0
   11c28:	d100      	bne.n	11c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c2c:	bf00      	nop
   11c2e:	b003      	add	sp, #12
   11c30:	f85d fb04 	ldr.w	pc, [sp], #4
   11c34:	1fff94b0 	.word	0x1fff94b0
   11c38:	1fff94ac 	.word	0x1fff94ac

00011c3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   11c3c:	b500      	push	{lr}
   11c3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c40:	f7ef fc24 	bl	148c <Sys_GetCoreID>
   11c44:	4603      	mov	r3, r0
   11c46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   11c48:	4a10      	ldr	r2, [pc, #64]	; (11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   11c4a:	9b01      	ldr	r3, [sp, #4]
   11c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c50:	2b00      	cmp	r3, #0
   11c52:	d10d      	bne.n	11c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c54:	f7ee fe3a 	bl	8cc <Adc_schm_read_msr>
   11c58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c5a:	9b00      	ldr	r3, [sp, #0]
   11c5c:	f003 0301 	and.w	r3, r3, #1
   11c60:	2b00      	cmp	r3, #0
   11c62:	d100      	bne.n	11c66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   11c66:	490a      	ldr	r1, [pc, #40]	; (11c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   11c68:	9b01      	ldr	r3, [sp, #4]
   11c6a:	9a00      	ldr	r2, [sp, #0]
   11c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   11c70:	4a06      	ldr	r2, [pc, #24]	; (11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   11c72:	9b01      	ldr	r3, [sp, #4]
   11c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c78:	1c5a      	adds	r2, r3, #1
   11c7a:	4904      	ldr	r1, [pc, #16]	; (11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c82:	bf00      	nop
   11c84:	b003      	add	sp, #12
   11c86:	f85d fb04 	ldr.w	pc, [sp], #4
   11c8a:	bf00      	nop
   11c8c:	1fff94b8 	.word	0x1fff94b8
   11c90:	1fff94b4 	.word	0x1fff94b4

00011c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   11c94:	b500      	push	{lr}
   11c96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c98:	f7ef fbf8 	bl	148c <Sys_GetCoreID>
   11c9c:	4603      	mov	r3, r0
   11c9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   11ca0:	4a0d      	ldr	r2, [pc, #52]	; (11cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   11ca2:	9b01      	ldr	r3, [sp, #4]
   11ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ca8:	1e5a      	subs	r2, r3, #1
   11caa:	490b      	ldr	r1, [pc, #44]	; (11cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   11cac:	9b01      	ldr	r3, [sp, #4]
   11cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   11cb2:	4a0a      	ldr	r2, [pc, #40]	; (11cdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   11cb4:	9b01      	ldr	r3, [sp, #4]
   11cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cba:	f003 0301 	and.w	r3, r3, #1
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d106      	bne.n	11cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   11cc2:	4a05      	ldr	r2, [pc, #20]	; (11cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   11cc4:	9b01      	ldr	r3, [sp, #4]
   11cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d100      	bne.n	11cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11cce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11cd0:	bf00      	nop
   11cd2:	b003      	add	sp, #12
   11cd4:	f85d fb04 	ldr.w	pc, [sp], #4
   11cd8:	1fff94b8 	.word	0x1fff94b8
   11cdc:	1fff94b4 	.word	0x1fff94b4

00011ce0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   11ce0:	b500      	push	{lr}
   11ce2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ce4:	f7ef fbd2 	bl	148c <Sys_GetCoreID>
   11ce8:	4603      	mov	r3, r0
   11cea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   11cec:	4a10      	ldr	r2, [pc, #64]	; (11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   11cee:	9b01      	ldr	r3, [sp, #4]
   11cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d10d      	bne.n	11d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cf8:	f7ee fde8 	bl	8cc <Adc_schm_read_msr>
   11cfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cfe:	9b00      	ldr	r3, [sp, #0]
   11d00:	f003 0301 	and.w	r3, r3, #1
   11d04:	2b00      	cmp	r3, #0
   11d06:	d100      	bne.n	11d0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   11d0a:	490a      	ldr	r1, [pc, #40]	; (11d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   11d0c:	9b01      	ldr	r3, [sp, #4]
   11d0e:	9a00      	ldr	r2, [sp, #0]
   11d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   11d14:	4a06      	ldr	r2, [pc, #24]	; (11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   11d16:	9b01      	ldr	r3, [sp, #4]
   11d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d1c:	1c5a      	adds	r2, r3, #1
   11d1e:	4904      	ldr	r1, [pc, #16]	; (11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   11d20:	9b01      	ldr	r3, [sp, #4]
   11d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d26:	bf00      	nop
   11d28:	b003      	add	sp, #12
   11d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   11d2e:	bf00      	nop
   11d30:	1fff94c0 	.word	0x1fff94c0
   11d34:	1fff94bc 	.word	0x1fff94bc

00011d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   11d38:	b500      	push	{lr}
   11d3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d3c:	f7ef fba6 	bl	148c <Sys_GetCoreID>
   11d40:	4603      	mov	r3, r0
   11d42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   11d44:	4a0d      	ldr	r2, [pc, #52]	; (11d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   11d46:	9b01      	ldr	r3, [sp, #4]
   11d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d4c:	1e5a      	subs	r2, r3, #1
   11d4e:	490b      	ldr	r1, [pc, #44]	; (11d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   11d50:	9b01      	ldr	r3, [sp, #4]
   11d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   11d56:	4a0a      	ldr	r2, [pc, #40]	; (11d80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   11d58:	9b01      	ldr	r3, [sp, #4]
   11d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d5e:	f003 0301 	and.w	r3, r3, #1
   11d62:	2b00      	cmp	r3, #0
   11d64:	d106      	bne.n	11d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   11d66:	4a05      	ldr	r2, [pc, #20]	; (11d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   11d68:	9b01      	ldr	r3, [sp, #4]
   11d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d6e:	2b00      	cmp	r3, #0
   11d70:	d100      	bne.n	11d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d74:	bf00      	nop
   11d76:	b003      	add	sp, #12
   11d78:	f85d fb04 	ldr.w	pc, [sp], #4
   11d7c:	1fff94c0 	.word	0x1fff94c0
   11d80:	1fff94bc 	.word	0x1fff94bc

00011d84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   11d84:	b500      	push	{lr}
   11d86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d88:	f7ef fb80 	bl	148c <Sys_GetCoreID>
   11d8c:	4603      	mov	r3, r0
   11d8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   11d90:	4a10      	ldr	r2, [pc, #64]	; (11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   11d92:	9b01      	ldr	r3, [sp, #4]
   11d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d98:	2b00      	cmp	r3, #0
   11d9a:	d10d      	bne.n	11db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d9c:	f7ee fd96 	bl	8cc <Adc_schm_read_msr>
   11da0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11da2:	9b00      	ldr	r3, [sp, #0]
   11da4:	f003 0301 	and.w	r3, r3, #1
   11da8:	2b00      	cmp	r3, #0
   11daa:	d100      	bne.n	11dae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11dac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   11dae:	490a      	ldr	r1, [pc, #40]	; (11dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   11db0:	9b01      	ldr	r3, [sp, #4]
   11db2:	9a00      	ldr	r2, [sp, #0]
   11db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   11db8:	4a06      	ldr	r2, [pc, #24]	; (11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   11dba:	9b01      	ldr	r3, [sp, #4]
   11dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc0:	1c5a      	adds	r2, r3, #1
   11dc2:	4904      	ldr	r1, [pc, #16]	; (11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   11dc4:	9b01      	ldr	r3, [sp, #4]
   11dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11dca:	bf00      	nop
   11dcc:	b003      	add	sp, #12
   11dce:	f85d fb04 	ldr.w	pc, [sp], #4
   11dd2:	bf00      	nop
   11dd4:	1fff94c8 	.word	0x1fff94c8
   11dd8:	1fff94c4 	.word	0x1fff94c4

00011ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   11ddc:	b500      	push	{lr}
   11dde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11de0:	f7ef fb54 	bl	148c <Sys_GetCoreID>
   11de4:	4603      	mov	r3, r0
   11de6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   11de8:	4a0d      	ldr	r2, [pc, #52]	; (11e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   11dea:	9b01      	ldr	r3, [sp, #4]
   11dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11df0:	1e5a      	subs	r2, r3, #1
   11df2:	490b      	ldr	r1, [pc, #44]	; (11e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   11df4:	9b01      	ldr	r3, [sp, #4]
   11df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   11dfa:	4a0a      	ldr	r2, [pc, #40]	; (11e24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   11dfc:	9b01      	ldr	r3, [sp, #4]
   11dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e02:	f003 0301 	and.w	r3, r3, #1
   11e06:	2b00      	cmp	r3, #0
   11e08:	d106      	bne.n	11e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   11e0a:	4a05      	ldr	r2, [pc, #20]	; (11e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   11e0c:	9b01      	ldr	r3, [sp, #4]
   11e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e12:	2b00      	cmp	r3, #0
   11e14:	d100      	bne.n	11e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e18:	bf00      	nop
   11e1a:	b003      	add	sp, #12
   11e1c:	f85d fb04 	ldr.w	pc, [sp], #4
   11e20:	1fff94c8 	.word	0x1fff94c8
   11e24:	1fff94c4 	.word	0x1fff94c4

00011e28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   11e28:	b500      	push	{lr}
   11e2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e2c:	f7ef fb2e 	bl	148c <Sys_GetCoreID>
   11e30:	4603      	mov	r3, r0
   11e32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   11e34:	4a10      	ldr	r2, [pc, #64]	; (11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   11e36:	9b01      	ldr	r3, [sp, #4]
   11e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	d10d      	bne.n	11e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e40:	f7ee fd44 	bl	8cc <Adc_schm_read_msr>
   11e44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e46:	9b00      	ldr	r3, [sp, #0]
   11e48:	f003 0301 	and.w	r3, r3, #1
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d100      	bne.n	11e52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   11e52:	490a      	ldr	r1, [pc, #40]	; (11e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   11e54:	9b01      	ldr	r3, [sp, #4]
   11e56:	9a00      	ldr	r2, [sp, #0]
   11e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   11e5c:	4a06      	ldr	r2, [pc, #24]	; (11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   11e5e:	9b01      	ldr	r3, [sp, #4]
   11e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e64:	1c5a      	adds	r2, r3, #1
   11e66:	4904      	ldr	r1, [pc, #16]	; (11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   11e68:	9b01      	ldr	r3, [sp, #4]
   11e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e6e:	bf00      	nop
   11e70:	b003      	add	sp, #12
   11e72:	f85d fb04 	ldr.w	pc, [sp], #4
   11e76:	bf00      	nop
   11e78:	1fff94d0 	.word	0x1fff94d0
   11e7c:	1fff94cc 	.word	0x1fff94cc

00011e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   11e80:	b500      	push	{lr}
   11e82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e84:	f7ef fb02 	bl	148c <Sys_GetCoreID>
   11e88:	4603      	mov	r3, r0
   11e8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   11e8c:	4a0d      	ldr	r2, [pc, #52]	; (11ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   11e8e:	9b01      	ldr	r3, [sp, #4]
   11e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e94:	1e5a      	subs	r2, r3, #1
   11e96:	490b      	ldr	r1, [pc, #44]	; (11ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   11e98:	9b01      	ldr	r3, [sp, #4]
   11e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   11e9e:	4a0a      	ldr	r2, [pc, #40]	; (11ec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea6:	f003 0301 	and.w	r3, r3, #1
   11eaa:	2b00      	cmp	r3, #0
   11eac:	d106      	bne.n	11ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   11eae:	4a05      	ldr	r2, [pc, #20]	; (11ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   11eb0:	9b01      	ldr	r3, [sp, #4]
   11eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	d100      	bne.n	11ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11eba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ebc:	bf00      	nop
   11ebe:	b003      	add	sp, #12
   11ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ec4:	1fff94d0 	.word	0x1fff94d0
   11ec8:	1fff94cc 	.word	0x1fff94cc

00011ecc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   11ecc:	b500      	push	{lr}
   11ece:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ed0:	f7ef fadc 	bl	148c <Sys_GetCoreID>
   11ed4:	4603      	mov	r3, r0
   11ed6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   11ed8:	4a10      	ldr	r2, [pc, #64]	; (11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   11eda:	9b01      	ldr	r3, [sp, #4]
   11edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ee0:	2b00      	cmp	r3, #0
   11ee2:	d10d      	bne.n	11f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ee4:	f7ee fcf2 	bl	8cc <Adc_schm_read_msr>
   11ee8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eea:	9b00      	ldr	r3, [sp, #0]
   11eec:	f003 0301 	and.w	r3, r3, #1
   11ef0:	2b00      	cmp	r3, #0
   11ef2:	d100      	bne.n	11ef6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ef4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   11ef6:	490a      	ldr	r1, [pc, #40]	; (11f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   11ef8:	9b01      	ldr	r3, [sp, #4]
   11efa:	9a00      	ldr	r2, [sp, #0]
   11efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   11f00:	4a06      	ldr	r2, [pc, #24]	; (11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   11f02:	9b01      	ldr	r3, [sp, #4]
   11f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f08:	1c5a      	adds	r2, r3, #1
   11f0a:	4904      	ldr	r1, [pc, #16]	; (11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f12:	bf00      	nop
   11f14:	b003      	add	sp, #12
   11f16:	f85d fb04 	ldr.w	pc, [sp], #4
   11f1a:	bf00      	nop
   11f1c:	1fff94d8 	.word	0x1fff94d8
   11f20:	1fff94d4 	.word	0x1fff94d4

00011f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   11f24:	b500      	push	{lr}
   11f26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f28:	f7ef fab0 	bl	148c <Sys_GetCoreID>
   11f2c:	4603      	mov	r3, r0
   11f2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   11f30:	4a0d      	ldr	r2, [pc, #52]	; (11f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   11f32:	9b01      	ldr	r3, [sp, #4]
   11f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f38:	1e5a      	subs	r2, r3, #1
   11f3a:	490b      	ldr	r1, [pc, #44]	; (11f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   11f42:	4a0a      	ldr	r2, [pc, #40]	; (11f6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f4a:	f003 0301 	and.w	r3, r3, #1
   11f4e:	2b00      	cmp	r3, #0
   11f50:	d106      	bne.n	11f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   11f52:	4a05      	ldr	r2, [pc, #20]	; (11f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   11f54:	9b01      	ldr	r3, [sp, #4]
   11f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d100      	bne.n	11f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f60:	bf00      	nop
   11f62:	b003      	add	sp, #12
   11f64:	f85d fb04 	ldr.w	pc, [sp], #4
   11f68:	1fff94d8 	.word	0x1fff94d8
   11f6c:	1fff94d4 	.word	0x1fff94d4

00011f70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   11f70:	b500      	push	{lr}
   11f72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f74:	f7ef fa8a 	bl	148c <Sys_GetCoreID>
   11f78:	4603      	mov	r3, r0
   11f7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   11f7c:	4a10      	ldr	r2, [pc, #64]	; (11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   11f7e:	9b01      	ldr	r3, [sp, #4]
   11f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f84:	2b00      	cmp	r3, #0
   11f86:	d10d      	bne.n	11fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f88:	f7ee fca0 	bl	8cc <Adc_schm_read_msr>
   11f8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f8e:	9b00      	ldr	r3, [sp, #0]
   11f90:	f003 0301 	and.w	r3, r3, #1
   11f94:	2b00      	cmp	r3, #0
   11f96:	d100      	bne.n	11f9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   11f9a:	490a      	ldr	r1, [pc, #40]	; (11fc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   11f9c:	9b01      	ldr	r3, [sp, #4]
   11f9e:	9a00      	ldr	r2, [sp, #0]
   11fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   11fa4:	4a06      	ldr	r2, [pc, #24]	; (11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   11fa6:	9b01      	ldr	r3, [sp, #4]
   11fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fac:	1c5a      	adds	r2, r3, #1
   11fae:	4904      	ldr	r1, [pc, #16]	; (11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   11fb0:	9b01      	ldr	r3, [sp, #4]
   11fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fb6:	bf00      	nop
   11fb8:	b003      	add	sp, #12
   11fba:	f85d fb04 	ldr.w	pc, [sp], #4
   11fbe:	bf00      	nop
   11fc0:	1fff94e0 	.word	0x1fff94e0
   11fc4:	1fff94dc 	.word	0x1fff94dc

00011fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   11fc8:	b500      	push	{lr}
   11fca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fcc:	f7ef fa5e 	bl	148c <Sys_GetCoreID>
   11fd0:	4603      	mov	r3, r0
   11fd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   11fd4:	4a0d      	ldr	r2, [pc, #52]	; (1200c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   11fd6:	9b01      	ldr	r3, [sp, #4]
   11fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fdc:	1e5a      	subs	r2, r3, #1
   11fde:	490b      	ldr	r1, [pc, #44]	; (1200c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   11fe0:	9b01      	ldr	r3, [sp, #4]
   11fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   11fe6:	4a0a      	ldr	r2, [pc, #40]	; (12010 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   11fe8:	9b01      	ldr	r3, [sp, #4]
   11fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fee:	f003 0301 	and.w	r3, r3, #1
   11ff2:	2b00      	cmp	r3, #0
   11ff4:	d106      	bne.n	12004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   11ff6:	4a05      	ldr	r2, [pc, #20]	; (1200c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   11ff8:	9b01      	ldr	r3, [sp, #4]
   11ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ffe:	2b00      	cmp	r3, #0
   12000:	d100      	bne.n	12004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12002:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12004:	bf00      	nop
   12006:	b003      	add	sp, #12
   12008:	f85d fb04 	ldr.w	pc, [sp], #4
   1200c:	1fff94e0 	.word	0x1fff94e0
   12010:	1fff94dc 	.word	0x1fff94dc

00012014 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12014:	b500      	push	{lr}
   12016:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12018:	f7ef fa38 	bl	148c <Sys_GetCoreID>
   1201c:	4603      	mov	r3, r0
   1201e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   12020:	4a10      	ldr	r2, [pc, #64]	; (12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12022:	9b01      	ldr	r3, [sp, #4]
   12024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12028:	2b00      	cmp	r3, #0
   1202a:	d10d      	bne.n	12048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1202c:	f7ee fc4e 	bl	8cc <Adc_schm_read_msr>
   12030:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12032:	9b00      	ldr	r3, [sp, #0]
   12034:	f003 0301 	and.w	r3, r3, #1
   12038:	2b00      	cmp	r3, #0
   1203a:	d100      	bne.n	1203e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1203c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   1203e:	490a      	ldr	r1, [pc, #40]	; (12068 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   12040:	9b01      	ldr	r3, [sp, #4]
   12042:	9a00      	ldr	r2, [sp, #0]
   12044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   12048:	4a06      	ldr	r2, [pc, #24]	; (12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   1204a:	9b01      	ldr	r3, [sp, #4]
   1204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12050:	1c5a      	adds	r2, r3, #1
   12052:	4904      	ldr	r1, [pc, #16]	; (12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12054:	9b01      	ldr	r3, [sp, #4]
   12056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1205a:	bf00      	nop
   1205c:	b003      	add	sp, #12
   1205e:	f85d fb04 	ldr.w	pc, [sp], #4
   12062:	bf00      	nop
   12064:	1fff94e8 	.word	0x1fff94e8
   12068:	1fff94e4 	.word	0x1fff94e4

0001206c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   1206c:	b500      	push	{lr}
   1206e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12070:	f7ef fa0c 	bl	148c <Sys_GetCoreID>
   12074:	4603      	mov	r3, r0
   12076:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   12078:	4a0d      	ldr	r2, [pc, #52]	; (120b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   1207a:	9b01      	ldr	r3, [sp, #4]
   1207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12080:	1e5a      	subs	r2, r3, #1
   12082:	490b      	ldr	r1, [pc, #44]	; (120b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12084:	9b01      	ldr	r3, [sp, #4]
   12086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   1208a:	4a0a      	ldr	r2, [pc, #40]	; (120b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   1208c:	9b01      	ldr	r3, [sp, #4]
   1208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12092:	f003 0301 	and.w	r3, r3, #1
   12096:	2b00      	cmp	r3, #0
   12098:	d106      	bne.n	120a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   1209a:	4a05      	ldr	r2, [pc, #20]	; (120b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   1209c:	9b01      	ldr	r3, [sp, #4]
   1209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120a2:	2b00      	cmp	r3, #0
   120a4:	d100      	bne.n	120a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120a8:	bf00      	nop
   120aa:	b003      	add	sp, #12
   120ac:	f85d fb04 	ldr.w	pc, [sp], #4
   120b0:	1fff94e8 	.word	0x1fff94e8
   120b4:	1fff94e4 	.word	0x1fff94e4

000120b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   120b8:	b500      	push	{lr}
   120ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120bc:	f7ef f9e6 	bl	148c <Sys_GetCoreID>
   120c0:	4603      	mov	r3, r0
   120c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   120c4:	4a10      	ldr	r2, [pc, #64]	; (12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   120c6:	9b01      	ldr	r3, [sp, #4]
   120c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120cc:	2b00      	cmp	r3, #0
   120ce:	d10d      	bne.n	120ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120d0:	f7ee fbfc 	bl	8cc <Adc_schm_read_msr>
   120d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120d6:	9b00      	ldr	r3, [sp, #0]
   120d8:	f003 0301 	and.w	r3, r3, #1
   120dc:	2b00      	cmp	r3, #0
   120de:	d100      	bne.n	120e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   120e2:	490a      	ldr	r1, [pc, #40]	; (1210c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   120e4:	9b01      	ldr	r3, [sp, #4]
   120e6:	9a00      	ldr	r2, [sp, #0]
   120e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   120ec:	4a06      	ldr	r2, [pc, #24]	; (12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   120ee:	9b01      	ldr	r3, [sp, #4]
   120f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120f4:	1c5a      	adds	r2, r3, #1
   120f6:	4904      	ldr	r1, [pc, #16]	; (12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   120f8:	9b01      	ldr	r3, [sp, #4]
   120fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120fe:	bf00      	nop
   12100:	b003      	add	sp, #12
   12102:	f85d fb04 	ldr.w	pc, [sp], #4
   12106:	bf00      	nop
   12108:	1fff94f0 	.word	0x1fff94f0
   1210c:	1fff94ec 	.word	0x1fff94ec

00012110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12110:	b500      	push	{lr}
   12112:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12114:	f7ef f9ba 	bl	148c <Sys_GetCoreID>
   12118:	4603      	mov	r3, r0
   1211a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   1211c:	4a0d      	ldr	r2, [pc, #52]	; (12154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   1211e:	9b01      	ldr	r3, [sp, #4]
   12120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12124:	1e5a      	subs	r2, r3, #1
   12126:	490b      	ldr	r1, [pc, #44]	; (12154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12128:	9b01      	ldr	r3, [sp, #4]
   1212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   1212e:	4a0a      	ldr	r2, [pc, #40]	; (12158 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   12130:	9b01      	ldr	r3, [sp, #4]
   12132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12136:	f003 0301 	and.w	r3, r3, #1
   1213a:	2b00      	cmp	r3, #0
   1213c:	d106      	bne.n	1214c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   1213e:	4a05      	ldr	r2, [pc, #20]	; (12154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12140:	9b01      	ldr	r3, [sp, #4]
   12142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12146:	2b00      	cmp	r3, #0
   12148:	d100      	bne.n	1214c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1214a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1214c:	bf00      	nop
   1214e:	b003      	add	sp, #12
   12150:	f85d fb04 	ldr.w	pc, [sp], #4
   12154:	1fff94f0 	.word	0x1fff94f0
   12158:	1fff94ec 	.word	0x1fff94ec

0001215c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   1215c:	b500      	push	{lr}
   1215e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12160:	f7ef f994 	bl	148c <Sys_GetCoreID>
   12164:	4603      	mov	r3, r0
   12166:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   12168:	4a10      	ldr	r2, [pc, #64]	; (121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   1216a:	9b01      	ldr	r3, [sp, #4]
   1216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12170:	2b00      	cmp	r3, #0
   12172:	d10d      	bne.n	12190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12174:	f7ee fbaa 	bl	8cc <Adc_schm_read_msr>
   12178:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1217a:	9b00      	ldr	r3, [sp, #0]
   1217c:	f003 0301 	and.w	r3, r3, #1
   12180:	2b00      	cmp	r3, #0
   12182:	d100      	bne.n	12186 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12184:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   12186:	490a      	ldr	r1, [pc, #40]	; (121b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   12188:	9b01      	ldr	r3, [sp, #4]
   1218a:	9a00      	ldr	r2, [sp, #0]
   1218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   12190:	4a06      	ldr	r2, [pc, #24]	; (121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12192:	9b01      	ldr	r3, [sp, #4]
   12194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12198:	1c5a      	adds	r2, r3, #1
   1219a:	4904      	ldr	r1, [pc, #16]	; (121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   1219c:	9b01      	ldr	r3, [sp, #4]
   1219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121a2:	bf00      	nop
   121a4:	b003      	add	sp, #12
   121a6:	f85d fb04 	ldr.w	pc, [sp], #4
   121aa:	bf00      	nop
   121ac:	1fff94f8 	.word	0x1fff94f8
   121b0:	1fff94f4 	.word	0x1fff94f4

000121b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   121b4:	b500      	push	{lr}
   121b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121b8:	f7ef f968 	bl	148c <Sys_GetCoreID>
   121bc:	4603      	mov	r3, r0
   121be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   121c0:	4a0d      	ldr	r2, [pc, #52]	; (121f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   121c2:	9b01      	ldr	r3, [sp, #4]
   121c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121c8:	1e5a      	subs	r2, r3, #1
   121ca:	490b      	ldr	r1, [pc, #44]	; (121f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   121cc:	9b01      	ldr	r3, [sp, #4]
   121ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   121d2:	4a0a      	ldr	r2, [pc, #40]	; (121fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   121d4:	9b01      	ldr	r3, [sp, #4]
   121d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121da:	f003 0301 	and.w	r3, r3, #1
   121de:	2b00      	cmp	r3, #0
   121e0:	d106      	bne.n	121f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   121e2:	4a05      	ldr	r2, [pc, #20]	; (121f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   121e4:	9b01      	ldr	r3, [sp, #4]
   121e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ea:	2b00      	cmp	r3, #0
   121ec:	d100      	bne.n	121f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121f0:	bf00      	nop
   121f2:	b003      	add	sp, #12
   121f4:	f85d fb04 	ldr.w	pc, [sp], #4
   121f8:	1fff94f8 	.word	0x1fff94f8
   121fc:	1fff94f4 	.word	0x1fff94f4

00012200 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12200:	b500      	push	{lr}
   12202:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12204:	f7ef f942 	bl	148c <Sys_GetCoreID>
   12208:	4603      	mov	r3, r0
   1220a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   1220c:	4a10      	ldr	r2, [pc, #64]	; (12250 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   1220e:	9b01      	ldr	r3, [sp, #4]
   12210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12214:	2b00      	cmp	r3, #0
   12216:	d10d      	bne.n	12234 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12218:	f7ee fb61 	bl	8de <Dio_schm_read_msr>
   1221c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1221e:	9b00      	ldr	r3, [sp, #0]
   12220:	f003 0301 	and.w	r3, r3, #1
   12224:	2b00      	cmp	r3, #0
   12226:	d100      	bne.n	1222a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12228:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1222a:	490a      	ldr	r1, [pc, #40]	; (12254 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   1222c:	9b01      	ldr	r3, [sp, #4]
   1222e:	9a00      	ldr	r2, [sp, #0]
   12230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   12234:	4a06      	ldr	r2, [pc, #24]	; (12250 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12236:	9b01      	ldr	r3, [sp, #4]
   12238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1223c:	1c5a      	adds	r2, r3, #1
   1223e:	4904      	ldr	r1, [pc, #16]	; (12250 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12240:	9b01      	ldr	r3, [sp, #4]
   12242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12246:	bf00      	nop
   12248:	b003      	add	sp, #12
   1224a:	f85d fb04 	ldr.w	pc, [sp], #4
   1224e:	bf00      	nop
   12250:	1fff9500 	.word	0x1fff9500
   12254:	1fff94fc 	.word	0x1fff94fc

00012258 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12258:	b500      	push	{lr}
   1225a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1225c:	f7ef f916 	bl	148c <Sys_GetCoreID>
   12260:	4603      	mov	r3, r0
   12262:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   12264:	4a0d      	ldr	r2, [pc, #52]	; (1229c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12266:	9b01      	ldr	r3, [sp, #4]
   12268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1226c:	1e5a      	subs	r2, r3, #1
   1226e:	490b      	ldr	r1, [pc, #44]	; (1229c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12270:	9b01      	ldr	r3, [sp, #4]
   12272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   12276:	4a0a      	ldr	r2, [pc, #40]	; (122a0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   12278:	9b01      	ldr	r3, [sp, #4]
   1227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1227e:	f003 0301 	and.w	r3, r3, #1
   12282:	2b00      	cmp	r3, #0
   12284:	d106      	bne.n	12294 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   12286:	4a05      	ldr	r2, [pc, #20]	; (1229c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12288:	9b01      	ldr	r3, [sp, #4]
   1228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1228e:	2b00      	cmp	r3, #0
   12290:	d100      	bne.n	12294 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12292:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12294:	bf00      	nop
   12296:	b003      	add	sp, #12
   12298:	f85d fb04 	ldr.w	pc, [sp], #4
   1229c:	1fff9500 	.word	0x1fff9500
   122a0:	1fff94fc 	.word	0x1fff94fc

000122a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   122a4:	b500      	push	{lr}
   122a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122a8:	f7ef f8f0 	bl	148c <Sys_GetCoreID>
   122ac:	4603      	mov	r3, r0
   122ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   122b0:	4a10      	ldr	r2, [pc, #64]	; (122f4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   122b2:	9b01      	ldr	r3, [sp, #4]
   122b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b8:	2b00      	cmp	r3, #0
   122ba:	d10d      	bne.n	122d8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122bc:	f7ee fb0f 	bl	8de <Dio_schm_read_msr>
   122c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122c2:	9b00      	ldr	r3, [sp, #0]
   122c4:	f003 0301 	and.w	r3, r3, #1
   122c8:	2b00      	cmp	r3, #0
   122ca:	d100      	bne.n	122ce <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   122ce:	490a      	ldr	r1, [pc, #40]	; (122f8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   122d0:	9b01      	ldr	r3, [sp, #4]
   122d2:	9a00      	ldr	r2, [sp, #0]
   122d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   122d8:	4a06      	ldr	r2, [pc, #24]	; (122f4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   122da:	9b01      	ldr	r3, [sp, #4]
   122dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e0:	1c5a      	adds	r2, r3, #1
   122e2:	4904      	ldr	r1, [pc, #16]	; (122f4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122ea:	bf00      	nop
   122ec:	b003      	add	sp, #12
   122ee:	f85d fb04 	ldr.w	pc, [sp], #4
   122f2:	bf00      	nop
   122f4:	1fff9508 	.word	0x1fff9508
   122f8:	1fff9504 	.word	0x1fff9504

000122fc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   122fc:	b500      	push	{lr}
   122fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12300:	f7ef f8c4 	bl	148c <Sys_GetCoreID>
   12304:	4603      	mov	r3, r0
   12306:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   12308:	4a0d      	ldr	r2, [pc, #52]	; (12340 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   1230a:	9b01      	ldr	r3, [sp, #4]
   1230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12310:	1e5a      	subs	r2, r3, #1
   12312:	490b      	ldr	r1, [pc, #44]	; (12340 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   12314:	9b01      	ldr	r3, [sp, #4]
   12316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1231a:	4a0a      	ldr	r2, [pc, #40]	; (12344 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12322:	f003 0301 	and.w	r3, r3, #1
   12326:	2b00      	cmp	r3, #0
   12328:	d106      	bne.n	12338 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   1232a:	4a05      	ldr	r2, [pc, #20]	; (12340 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   1232c:	9b01      	ldr	r3, [sp, #4]
   1232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12332:	2b00      	cmp	r3, #0
   12334:	d100      	bne.n	12338 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12336:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12338:	bf00      	nop
   1233a:	b003      	add	sp, #12
   1233c:	f85d fb04 	ldr.w	pc, [sp], #4
   12340:	1fff9508 	.word	0x1fff9508
   12344:	1fff9504 	.word	0x1fff9504

00012348 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   12348:	b500      	push	{lr}
   1234a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1234c:	f7ef f89e 	bl	148c <Sys_GetCoreID>
   12350:	4603      	mov	r3, r0
   12352:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   12354:	4a10      	ldr	r2, [pc, #64]	; (12398 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   12356:	9b01      	ldr	r3, [sp, #4]
   12358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1235c:	2b00      	cmp	r3, #0
   1235e:	d10d      	bne.n	1237c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12360:	f7ee fac6 	bl	8f0 <Mcu_schm_read_msr>
   12364:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12366:	9b00      	ldr	r3, [sp, #0]
   12368:	f003 0301 	and.w	r3, r3, #1
   1236c:	2b00      	cmp	r3, #0
   1236e:	d100      	bne.n	12372 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12370:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   12372:	490a      	ldr	r1, [pc, #40]	; (1239c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   12374:	9b01      	ldr	r3, [sp, #4]
   12376:	9a00      	ldr	r2, [sp, #0]
   12378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   1237c:	4a06      	ldr	r2, [pc, #24]	; (12398 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   1237e:	9b01      	ldr	r3, [sp, #4]
   12380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12384:	1c5a      	adds	r2, r3, #1
   12386:	4904      	ldr	r1, [pc, #16]	; (12398 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1238e:	bf00      	nop
   12390:	b003      	add	sp, #12
   12392:	f85d fb04 	ldr.w	pc, [sp], #4
   12396:	bf00      	nop
   12398:	1fff9510 	.word	0x1fff9510
   1239c:	1fff950c 	.word	0x1fff950c

000123a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   123a0:	b500      	push	{lr}
   123a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123a4:	f7ef f872 	bl	148c <Sys_GetCoreID>
   123a8:	4603      	mov	r3, r0
   123aa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   123ac:	4a0d      	ldr	r2, [pc, #52]	; (123e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   123ae:	9b01      	ldr	r3, [sp, #4]
   123b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123b4:	1e5a      	subs	r2, r3, #1
   123b6:	490b      	ldr	r1, [pc, #44]	; (123e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   123b8:	9b01      	ldr	r3, [sp, #4]
   123ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   123be:	4a0a      	ldr	r2, [pc, #40]	; (123e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c6:	f003 0301 	and.w	r3, r3, #1
   123ca:	2b00      	cmp	r3, #0
   123cc:	d106      	bne.n	123dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   123ce:	4a05      	ldr	r2, [pc, #20]	; (123e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   123d0:	9b01      	ldr	r3, [sp, #4]
   123d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123d6:	2b00      	cmp	r3, #0
   123d8:	d100      	bne.n	123dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123dc:	bf00      	nop
   123de:	b003      	add	sp, #12
   123e0:	f85d fb04 	ldr.w	pc, [sp], #4
   123e4:	1fff9510 	.word	0x1fff9510
   123e8:	1fff950c 	.word	0x1fff950c

000123ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   123ec:	b500      	push	{lr}
   123ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123f0:	f7ef f84c 	bl	148c <Sys_GetCoreID>
   123f4:	4603      	mov	r3, r0
   123f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   123f8:	4a10      	ldr	r2, [pc, #64]	; (1243c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   123fa:	9b01      	ldr	r3, [sp, #4]
   123fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12400:	2b00      	cmp	r3, #0
   12402:	d10d      	bne.n	12420 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12404:	f7ee fa74 	bl	8f0 <Mcu_schm_read_msr>
   12408:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1240a:	9b00      	ldr	r3, [sp, #0]
   1240c:	f003 0301 	and.w	r3, r3, #1
   12410:	2b00      	cmp	r3, #0
   12412:	d100      	bne.n	12416 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12414:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   12416:	490a      	ldr	r1, [pc, #40]	; (12440 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   12418:	9b01      	ldr	r3, [sp, #4]
   1241a:	9a00      	ldr	r2, [sp, #0]
   1241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   12420:	4a06      	ldr	r2, [pc, #24]	; (1243c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   12422:	9b01      	ldr	r3, [sp, #4]
   12424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12428:	1c5a      	adds	r2, r3, #1
   1242a:	4904      	ldr	r1, [pc, #16]	; (1243c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   1242c:	9b01      	ldr	r3, [sp, #4]
   1242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12432:	bf00      	nop
   12434:	b003      	add	sp, #12
   12436:	f85d fb04 	ldr.w	pc, [sp], #4
   1243a:	bf00      	nop
   1243c:	1fff9518 	.word	0x1fff9518
   12440:	1fff9514 	.word	0x1fff9514

00012444 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   12444:	b500      	push	{lr}
   12446:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12448:	f7ef f820 	bl	148c <Sys_GetCoreID>
   1244c:	4603      	mov	r3, r0
   1244e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   12450:	4a0d      	ldr	r2, [pc, #52]	; (12488 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   12452:	9b01      	ldr	r3, [sp, #4]
   12454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12458:	1e5a      	subs	r2, r3, #1
   1245a:	490b      	ldr	r1, [pc, #44]	; (12488 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   1245c:	9b01      	ldr	r3, [sp, #4]
   1245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   12462:	4a0a      	ldr	r2, [pc, #40]	; (1248c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1246a:	f003 0301 	and.w	r3, r3, #1
   1246e:	2b00      	cmp	r3, #0
   12470:	d106      	bne.n	12480 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   12472:	4a05      	ldr	r2, [pc, #20]	; (12488 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   12474:	9b01      	ldr	r3, [sp, #4]
   12476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1247a:	2b00      	cmp	r3, #0
   1247c:	d100      	bne.n	12480 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1247e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12480:	bf00      	nop
   12482:	b003      	add	sp, #12
   12484:	f85d fb04 	ldr.w	pc, [sp], #4
   12488:	1fff9518 	.word	0x1fff9518
   1248c:	1fff9514 	.word	0x1fff9514

00012490 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   12490:	b500      	push	{lr}
   12492:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12494:	f7ee fffa 	bl	148c <Sys_GetCoreID>
   12498:	4603      	mov	r3, r0
   1249a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   1249c:	4a10      	ldr	r2, [pc, #64]	; (124e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1249e:	9b01      	ldr	r3, [sp, #4]
   124a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124a4:	2b00      	cmp	r3, #0
   124a6:	d10d      	bne.n	124c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124a8:	f7ee fa22 	bl	8f0 <Mcu_schm_read_msr>
   124ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124ae:	9b00      	ldr	r3, [sp, #0]
   124b0:	f003 0301 	and.w	r3, r3, #1
   124b4:	2b00      	cmp	r3, #0
   124b6:	d100      	bne.n	124ba <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   124ba:	490a      	ldr	r1, [pc, #40]	; (124e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   124bc:	9b01      	ldr	r3, [sp, #4]
   124be:	9a00      	ldr	r2, [sp, #0]
   124c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   124c4:	4a06      	ldr	r2, [pc, #24]	; (124e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   124c6:	9b01      	ldr	r3, [sp, #4]
   124c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124cc:	1c5a      	adds	r2, r3, #1
   124ce:	4904      	ldr	r1, [pc, #16]	; (124e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   124d0:	9b01      	ldr	r3, [sp, #4]
   124d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124d6:	bf00      	nop
   124d8:	b003      	add	sp, #12
   124da:	f85d fb04 	ldr.w	pc, [sp], #4
   124de:	bf00      	nop
   124e0:	1fff9520 	.word	0x1fff9520
   124e4:	1fff951c 	.word	0x1fff951c

000124e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   124e8:	b500      	push	{lr}
   124ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124ec:	f7ee ffce 	bl	148c <Sys_GetCoreID>
   124f0:	4603      	mov	r3, r0
   124f2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   124f4:	4a0d      	ldr	r2, [pc, #52]	; (1252c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   124f6:	9b01      	ldr	r3, [sp, #4]
   124f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124fc:	1e5a      	subs	r2, r3, #1
   124fe:	490b      	ldr	r1, [pc, #44]	; (1252c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   12500:	9b01      	ldr	r3, [sp, #4]
   12502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   12506:	4a0a      	ldr	r2, [pc, #40]	; (12530 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   12508:	9b01      	ldr	r3, [sp, #4]
   1250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1250e:	f003 0301 	and.w	r3, r3, #1
   12512:	2b00      	cmp	r3, #0
   12514:	d106      	bne.n	12524 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   12516:	4a05      	ldr	r2, [pc, #20]	; (1252c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   12518:	9b01      	ldr	r3, [sp, #4]
   1251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1251e:	2b00      	cmp	r3, #0
   12520:	d100      	bne.n	12524 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12522:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12524:	bf00      	nop
   12526:	b003      	add	sp, #12
   12528:	f85d fb04 	ldr.w	pc, [sp], #4
   1252c:	1fff9520 	.word	0x1fff9520
   12530:	1fff951c 	.word	0x1fff951c

00012534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   12534:	b500      	push	{lr}
   12536:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12538:	f7ee ffa8 	bl	148c <Sys_GetCoreID>
   1253c:	4603      	mov	r3, r0
   1253e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   12540:	4a10      	ldr	r2, [pc, #64]	; (12584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   12542:	9b01      	ldr	r3, [sp, #4]
   12544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12548:	2b00      	cmp	r3, #0
   1254a:	d10d      	bne.n	12568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1254c:	f7ee f9d9 	bl	902 <Port_schm_read_msr>
   12550:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12552:	9b00      	ldr	r3, [sp, #0]
   12554:	f003 0301 	and.w	r3, r3, #1
   12558:	2b00      	cmp	r3, #0
   1255a:	d100      	bne.n	1255e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1255c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1255e:	490a      	ldr	r1, [pc, #40]	; (12588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   12560:	9b01      	ldr	r3, [sp, #4]
   12562:	9a00      	ldr	r2, [sp, #0]
   12564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   12568:	4a06      	ldr	r2, [pc, #24]	; (12584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1256a:	9b01      	ldr	r3, [sp, #4]
   1256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12570:	1c5a      	adds	r2, r3, #1
   12572:	4904      	ldr	r1, [pc, #16]	; (12584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   12574:	9b01      	ldr	r3, [sp, #4]
   12576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1257a:	bf00      	nop
   1257c:	b003      	add	sp, #12
   1257e:	f85d fb04 	ldr.w	pc, [sp], #4
   12582:	bf00      	nop
   12584:	1fff9528 	.word	0x1fff9528
   12588:	1fff9524 	.word	0x1fff9524

0001258c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   1258c:	b500      	push	{lr}
   1258e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12590:	f7ee ff7c 	bl	148c <Sys_GetCoreID>
   12594:	4603      	mov	r3, r0
   12596:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   12598:	4a0d      	ldr	r2, [pc, #52]	; (125d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a0:	1e5a      	subs	r2, r3, #1
   125a2:	490b      	ldr	r1, [pc, #44]	; (125d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   125a4:	9b01      	ldr	r3, [sp, #4]
   125a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   125aa:	4a0a      	ldr	r2, [pc, #40]	; (125d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   125ac:	9b01      	ldr	r3, [sp, #4]
   125ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125b2:	f003 0301 	and.w	r3, r3, #1
   125b6:	2b00      	cmp	r3, #0
   125b8:	d106      	bne.n	125c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   125ba:	4a05      	ldr	r2, [pc, #20]	; (125d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   125bc:	9b01      	ldr	r3, [sp, #4]
   125be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d100      	bne.n	125c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125c8:	bf00      	nop
   125ca:	b003      	add	sp, #12
   125cc:	f85d fb04 	ldr.w	pc, [sp], #4
   125d0:	1fff9528 	.word	0x1fff9528
   125d4:	1fff9524 	.word	0x1fff9524

000125d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   125d8:	b500      	push	{lr}
   125da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125dc:	f7ee ff56 	bl	148c <Sys_GetCoreID>
   125e0:	4603      	mov	r3, r0
   125e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   125e4:	4a10      	ldr	r2, [pc, #64]	; (12628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   125e6:	9b01      	ldr	r3, [sp, #4]
   125e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ec:	2b00      	cmp	r3, #0
   125ee:	d10d      	bne.n	1260c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125f0:	f7ee f987 	bl	902 <Port_schm_read_msr>
   125f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125f6:	9b00      	ldr	r3, [sp, #0]
   125f8:	f003 0301 	and.w	r3, r3, #1
   125fc:	2b00      	cmp	r3, #0
   125fe:	d100      	bne.n	12602 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12600:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   12602:	490a      	ldr	r1, [pc, #40]	; (1262c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   12604:	9b01      	ldr	r3, [sp, #4]
   12606:	9a00      	ldr	r2, [sp, #0]
   12608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   1260c:	4a06      	ldr	r2, [pc, #24]	; (12628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1260e:	9b01      	ldr	r3, [sp, #4]
   12610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12614:	1c5a      	adds	r2, r3, #1
   12616:	4904      	ldr	r1, [pc, #16]	; (12628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   12618:	9b01      	ldr	r3, [sp, #4]
   1261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1261e:	bf00      	nop
   12620:	b003      	add	sp, #12
   12622:	f85d fb04 	ldr.w	pc, [sp], #4
   12626:	bf00      	nop
   12628:	1fff9530 	.word	0x1fff9530
   1262c:	1fff952c 	.word	0x1fff952c

00012630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   12630:	b500      	push	{lr}
   12632:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12634:	f7ee ff2a 	bl	148c <Sys_GetCoreID>
   12638:	4603      	mov	r3, r0
   1263a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   1263c:	4a0d      	ldr	r2, [pc, #52]	; (12674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1263e:	9b01      	ldr	r3, [sp, #4]
   12640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12644:	1e5a      	subs	r2, r3, #1
   12646:	490b      	ldr	r1, [pc, #44]	; (12674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   12648:	9b01      	ldr	r3, [sp, #4]
   1264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1264e:	4a0a      	ldr	r2, [pc, #40]	; (12678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   12650:	9b01      	ldr	r3, [sp, #4]
   12652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12656:	f003 0301 	and.w	r3, r3, #1
   1265a:	2b00      	cmp	r3, #0
   1265c:	d106      	bne.n	1266c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   1265e:	4a05      	ldr	r2, [pc, #20]	; (12674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   12660:	9b01      	ldr	r3, [sp, #4]
   12662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12666:	2b00      	cmp	r3, #0
   12668:	d100      	bne.n	1266c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1266a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1266c:	bf00      	nop
   1266e:	b003      	add	sp, #12
   12670:	f85d fb04 	ldr.w	pc, [sp], #4
   12674:	1fff9530 	.word	0x1fff9530
   12678:	1fff952c 	.word	0x1fff952c

0001267c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   1267c:	b500      	push	{lr}
   1267e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12680:	f7ee ff04 	bl	148c <Sys_GetCoreID>
   12684:	4603      	mov	r3, r0
   12686:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   12688:	4a10      	ldr	r2, [pc, #64]	; (126cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1268a:	9b01      	ldr	r3, [sp, #4]
   1268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12690:	2b00      	cmp	r3, #0
   12692:	d10d      	bne.n	126b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12694:	f7ee f935 	bl	902 <Port_schm_read_msr>
   12698:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1269a:	9b00      	ldr	r3, [sp, #0]
   1269c:	f003 0301 	and.w	r3, r3, #1
   126a0:	2b00      	cmp	r3, #0
   126a2:	d100      	bne.n	126a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   126a6:	490a      	ldr	r1, [pc, #40]	; (126d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   126a8:	9b01      	ldr	r3, [sp, #4]
   126aa:	9a00      	ldr	r2, [sp, #0]
   126ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   126b0:	4a06      	ldr	r2, [pc, #24]	; (126cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   126b2:	9b01      	ldr	r3, [sp, #4]
   126b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126b8:	1c5a      	adds	r2, r3, #1
   126ba:	4904      	ldr	r1, [pc, #16]	; (126cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126c2:	bf00      	nop
   126c4:	b003      	add	sp, #12
   126c6:	f85d fb04 	ldr.w	pc, [sp], #4
   126ca:	bf00      	nop
   126cc:	1fff9538 	.word	0x1fff9538
   126d0:	1fff9534 	.word	0x1fff9534

000126d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   126d4:	b500      	push	{lr}
   126d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126d8:	f7ee fed8 	bl	148c <Sys_GetCoreID>
   126dc:	4603      	mov	r3, r0
   126de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   126e0:	4a0d      	ldr	r2, [pc, #52]	; (12718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   126e2:	9b01      	ldr	r3, [sp, #4]
   126e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126e8:	1e5a      	subs	r2, r3, #1
   126ea:	490b      	ldr	r1, [pc, #44]	; (12718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   126ec:	9b01      	ldr	r3, [sp, #4]
   126ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   126f2:	4a0a      	ldr	r2, [pc, #40]	; (1271c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126fa:	f003 0301 	and.w	r3, r3, #1
   126fe:	2b00      	cmp	r3, #0
   12700:	d106      	bne.n	12710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   12702:	4a05      	ldr	r2, [pc, #20]	; (12718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   12704:	9b01      	ldr	r3, [sp, #4]
   12706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1270a:	2b00      	cmp	r3, #0
   1270c:	d100      	bne.n	12710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1270e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12710:	bf00      	nop
   12712:	b003      	add	sp, #12
   12714:	f85d fb04 	ldr.w	pc, [sp], #4
   12718:	1fff9538 	.word	0x1fff9538
   1271c:	1fff9534 	.word	0x1fff9534

00012720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   12720:	b500      	push	{lr}
   12722:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12724:	f7ee feb2 	bl	148c <Sys_GetCoreID>
   12728:	4603      	mov	r3, r0
   1272a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   1272c:	4a10      	ldr	r2, [pc, #64]	; (12770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1272e:	9b01      	ldr	r3, [sp, #4]
   12730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12734:	2b00      	cmp	r3, #0
   12736:	d10d      	bne.n	12754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12738:	f7ee f8e3 	bl	902 <Port_schm_read_msr>
   1273c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1273e:	9b00      	ldr	r3, [sp, #0]
   12740:	f003 0301 	and.w	r3, r3, #1
   12744:	2b00      	cmp	r3, #0
   12746:	d100      	bne.n	1274a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12748:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1274a:	490a      	ldr	r1, [pc, #40]	; (12774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   1274c:	9b01      	ldr	r3, [sp, #4]
   1274e:	9a00      	ldr	r2, [sp, #0]
   12750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   12754:	4a06      	ldr	r2, [pc, #24]	; (12770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   12756:	9b01      	ldr	r3, [sp, #4]
   12758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1275c:	1c5a      	adds	r2, r3, #1
   1275e:	4904      	ldr	r1, [pc, #16]	; (12770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   12760:	9b01      	ldr	r3, [sp, #4]
   12762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12766:	bf00      	nop
   12768:	b003      	add	sp, #12
   1276a:	f85d fb04 	ldr.w	pc, [sp], #4
   1276e:	bf00      	nop
   12770:	1fff9540 	.word	0x1fff9540
   12774:	1fff953c 	.word	0x1fff953c

00012778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   12778:	b500      	push	{lr}
   1277a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1277c:	f7ee fe86 	bl	148c <Sys_GetCoreID>
   12780:	4603      	mov	r3, r0
   12782:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   12784:	4a0d      	ldr	r2, [pc, #52]	; (127bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   12786:	9b01      	ldr	r3, [sp, #4]
   12788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1278c:	1e5a      	subs	r2, r3, #1
   1278e:	490b      	ldr	r1, [pc, #44]	; (127bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   12790:	9b01      	ldr	r3, [sp, #4]
   12792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   12796:	4a0a      	ldr	r2, [pc, #40]	; (127c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   12798:	9b01      	ldr	r3, [sp, #4]
   1279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1279e:	f003 0301 	and.w	r3, r3, #1
   127a2:	2b00      	cmp	r3, #0
   127a4:	d106      	bne.n	127b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   127a6:	4a05      	ldr	r2, [pc, #20]	; (127bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   127a8:	9b01      	ldr	r3, [sp, #4]
   127aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ae:	2b00      	cmp	r3, #0
   127b0:	d100      	bne.n	127b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127b4:	bf00      	nop
   127b6:	b003      	add	sp, #12
   127b8:	f85d fb04 	ldr.w	pc, [sp], #4
   127bc:	1fff9540 	.word	0x1fff9540
   127c0:	1fff953c 	.word	0x1fff953c

000127c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   127c4:	b500      	push	{lr}
   127c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127c8:	f7ee fe60 	bl	148c <Sys_GetCoreID>
   127cc:	4603      	mov	r3, r0
   127ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   127d0:	4a10      	ldr	r2, [pc, #64]	; (12814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   127d2:	9b01      	ldr	r3, [sp, #4]
   127d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d8:	2b00      	cmp	r3, #0
   127da:	d10d      	bne.n	127f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127dc:	f7ee f891 	bl	902 <Port_schm_read_msr>
   127e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127e2:	9b00      	ldr	r3, [sp, #0]
   127e4:	f003 0301 	and.w	r3, r3, #1
   127e8:	2b00      	cmp	r3, #0
   127ea:	d100      	bne.n	127ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   127ee:	490a      	ldr	r1, [pc, #40]	; (12818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   127f0:	9b01      	ldr	r3, [sp, #4]
   127f2:	9a00      	ldr	r2, [sp, #0]
   127f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   127f8:	4a06      	ldr	r2, [pc, #24]	; (12814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   127fa:	9b01      	ldr	r3, [sp, #4]
   127fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12800:	1c5a      	adds	r2, r3, #1
   12802:	4904      	ldr	r1, [pc, #16]	; (12814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   12804:	9b01      	ldr	r3, [sp, #4]
   12806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1280a:	bf00      	nop
   1280c:	b003      	add	sp, #12
   1280e:	f85d fb04 	ldr.w	pc, [sp], #4
   12812:	bf00      	nop
   12814:	1fff9548 	.word	0x1fff9548
   12818:	1fff9544 	.word	0x1fff9544

0001281c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   1281c:	b500      	push	{lr}
   1281e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12820:	f7ee fe34 	bl	148c <Sys_GetCoreID>
   12824:	4603      	mov	r3, r0
   12826:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   12828:	4a0d      	ldr	r2, [pc, #52]	; (12860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   1282a:	9b01      	ldr	r3, [sp, #4]
   1282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12830:	1e5a      	subs	r2, r3, #1
   12832:	490b      	ldr	r1, [pc, #44]	; (12860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   12834:	9b01      	ldr	r3, [sp, #4]
   12836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1283a:	4a0a      	ldr	r2, [pc, #40]	; (12864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   1283c:	9b01      	ldr	r3, [sp, #4]
   1283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12842:	f003 0301 	and.w	r3, r3, #1
   12846:	2b00      	cmp	r3, #0
   12848:	d106      	bne.n	12858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   1284a:	4a05      	ldr	r2, [pc, #20]	; (12860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   1284c:	9b01      	ldr	r3, [sp, #4]
   1284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12852:	2b00      	cmp	r3, #0
   12854:	d100      	bne.n	12858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12856:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12858:	bf00      	nop
   1285a:	b003      	add	sp, #12
   1285c:	f85d fb04 	ldr.w	pc, [sp], #4
   12860:	1fff9548 	.word	0x1fff9548
   12864:	1fff9544 	.word	0x1fff9544

00012868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   12868:	b500      	push	{lr}
   1286a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1286c:	f7ee fe0e 	bl	148c <Sys_GetCoreID>
   12870:	4603      	mov	r3, r0
   12872:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   12874:	4a10      	ldr	r2, [pc, #64]	; (128b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   12876:	9b01      	ldr	r3, [sp, #4]
   12878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287c:	2b00      	cmp	r3, #0
   1287e:	d10d      	bne.n	1289c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12880:	f7ee f83f 	bl	902 <Port_schm_read_msr>
   12884:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12886:	9b00      	ldr	r3, [sp, #0]
   12888:	f003 0301 	and.w	r3, r3, #1
   1288c:	2b00      	cmp	r3, #0
   1288e:	d100      	bne.n	12892 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12890:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   12892:	490a      	ldr	r1, [pc, #40]	; (128bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   12894:	9b01      	ldr	r3, [sp, #4]
   12896:	9a00      	ldr	r2, [sp, #0]
   12898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   1289c:	4a06      	ldr	r2, [pc, #24]	; (128b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   1289e:	9b01      	ldr	r3, [sp, #4]
   128a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a4:	1c5a      	adds	r2, r3, #1
   128a6:	4904      	ldr	r1, [pc, #16]	; (128b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   128a8:	9b01      	ldr	r3, [sp, #4]
   128aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128ae:	bf00      	nop
   128b0:	b003      	add	sp, #12
   128b2:	f85d fb04 	ldr.w	pc, [sp], #4
   128b6:	bf00      	nop
   128b8:	1fff9550 	.word	0x1fff9550
   128bc:	1fff954c 	.word	0x1fff954c

000128c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   128c0:	b500      	push	{lr}
   128c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128c4:	f7ee fde2 	bl	148c <Sys_GetCoreID>
   128c8:	4603      	mov	r3, r0
   128ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   128cc:	4a0d      	ldr	r2, [pc, #52]	; (12904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   128ce:	9b01      	ldr	r3, [sp, #4]
   128d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128d4:	1e5a      	subs	r2, r3, #1
   128d6:	490b      	ldr	r1, [pc, #44]	; (12904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   128d8:	9b01      	ldr	r3, [sp, #4]
   128da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   128de:	4a0a      	ldr	r2, [pc, #40]	; (12908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   128e0:	9b01      	ldr	r3, [sp, #4]
   128e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e6:	f003 0301 	and.w	r3, r3, #1
   128ea:	2b00      	cmp	r3, #0
   128ec:	d106      	bne.n	128fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   128ee:	4a05      	ldr	r2, [pc, #20]	; (12904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   128f0:	9b01      	ldr	r3, [sp, #4]
   128f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f6:	2b00      	cmp	r3, #0
   128f8:	d100      	bne.n	128fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128fc:	bf00      	nop
   128fe:	b003      	add	sp, #12
   12900:	f85d fb04 	ldr.w	pc, [sp], #4
   12904:	1fff9550 	.word	0x1fff9550
   12908:	1fff954c 	.word	0x1fff954c

0001290c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   1290c:	b500      	push	{lr}
   1290e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12910:	f7ee fdbc 	bl	148c <Sys_GetCoreID>
   12914:	4603      	mov	r3, r0
   12916:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   12918:	4a10      	ldr	r2, [pc, #64]	; (1295c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1291a:	9b01      	ldr	r3, [sp, #4]
   1291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12920:	2b00      	cmp	r3, #0
   12922:	d10d      	bne.n	12940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12924:	f7ed ffed 	bl	902 <Port_schm_read_msr>
   12928:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1292a:	9b00      	ldr	r3, [sp, #0]
   1292c:	f003 0301 	and.w	r3, r3, #1
   12930:	2b00      	cmp	r3, #0
   12932:	d100      	bne.n	12936 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12934:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   12936:	490a      	ldr	r1, [pc, #40]	; (12960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   12938:	9b01      	ldr	r3, [sp, #4]
   1293a:	9a00      	ldr	r2, [sp, #0]
   1293c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   12940:	4a06      	ldr	r2, [pc, #24]	; (1295c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   12942:	9b01      	ldr	r3, [sp, #4]
   12944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12948:	1c5a      	adds	r2, r3, #1
   1294a:	4904      	ldr	r1, [pc, #16]	; (1295c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1294c:	9b01      	ldr	r3, [sp, #4]
   1294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12952:	bf00      	nop
   12954:	b003      	add	sp, #12
   12956:	f85d fb04 	ldr.w	pc, [sp], #4
   1295a:	bf00      	nop
   1295c:	1fff9558 	.word	0x1fff9558
   12960:	1fff9554 	.word	0x1fff9554

00012964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   12964:	b500      	push	{lr}
   12966:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12968:	f7ee fd90 	bl	148c <Sys_GetCoreID>
   1296c:	4603      	mov	r3, r0
   1296e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   12970:	4a0d      	ldr	r2, [pc, #52]	; (129a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   12972:	9b01      	ldr	r3, [sp, #4]
   12974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12978:	1e5a      	subs	r2, r3, #1
   1297a:	490b      	ldr	r1, [pc, #44]	; (129a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   1297c:	9b01      	ldr	r3, [sp, #4]
   1297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   12982:	4a0a      	ldr	r2, [pc, #40]	; (129ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   12984:	9b01      	ldr	r3, [sp, #4]
   12986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1298a:	f003 0301 	and.w	r3, r3, #1
   1298e:	2b00      	cmp	r3, #0
   12990:	d106      	bne.n	129a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   12992:	4a05      	ldr	r2, [pc, #20]	; (129a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   12994:	9b01      	ldr	r3, [sp, #4]
   12996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d100      	bne.n	129a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1299e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129a0:	bf00      	nop
   129a2:	b003      	add	sp, #12
   129a4:	f85d fb04 	ldr.w	pc, [sp], #4
   129a8:	1fff9558 	.word	0x1fff9558
   129ac:	1fff9554 	.word	0x1fff9554

000129b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   129b0:	b500      	push	{lr}
   129b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129b4:	f7ee fd6a 	bl	148c <Sys_GetCoreID>
   129b8:	4603      	mov	r3, r0
   129ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   129bc:	4a10      	ldr	r2, [pc, #64]	; (12a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   129be:	9b01      	ldr	r3, [sp, #4]
   129c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c4:	2b00      	cmp	r3, #0
   129c6:	d10d      	bne.n	129e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129c8:	f7ed ff9b 	bl	902 <Port_schm_read_msr>
   129cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129ce:	9b00      	ldr	r3, [sp, #0]
   129d0:	f003 0301 	and.w	r3, r3, #1
   129d4:	2b00      	cmp	r3, #0
   129d6:	d100      	bne.n	129da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   129da:	490a      	ldr	r1, [pc, #40]	; (12a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   129dc:	9b01      	ldr	r3, [sp, #4]
   129de:	9a00      	ldr	r2, [sp, #0]
   129e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   129e4:	4a06      	ldr	r2, [pc, #24]	; (12a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   129e6:	9b01      	ldr	r3, [sp, #4]
   129e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ec:	1c5a      	adds	r2, r3, #1
   129ee:	4904      	ldr	r1, [pc, #16]	; (12a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   129f0:	9b01      	ldr	r3, [sp, #4]
   129f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129f6:	bf00      	nop
   129f8:	b003      	add	sp, #12
   129fa:	f85d fb04 	ldr.w	pc, [sp], #4
   129fe:	bf00      	nop
   12a00:	1fff9560 	.word	0x1fff9560
   12a04:	1fff955c 	.word	0x1fff955c

00012a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   12a08:	b500      	push	{lr}
   12a0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a0c:	f7ee fd3e 	bl	148c <Sys_GetCoreID>
   12a10:	4603      	mov	r3, r0
   12a12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   12a14:	4a0d      	ldr	r2, [pc, #52]	; (12a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   12a16:	9b01      	ldr	r3, [sp, #4]
   12a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a1c:	1e5a      	subs	r2, r3, #1
   12a1e:	490b      	ldr	r1, [pc, #44]	; (12a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   12a20:	9b01      	ldr	r3, [sp, #4]
   12a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   12a26:	4a0a      	ldr	r2, [pc, #40]	; (12a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   12a28:	9b01      	ldr	r3, [sp, #4]
   12a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a2e:	f003 0301 	and.w	r3, r3, #1
   12a32:	2b00      	cmp	r3, #0
   12a34:	d106      	bne.n	12a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   12a36:	4a05      	ldr	r2, [pc, #20]	; (12a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   12a38:	9b01      	ldr	r3, [sp, #4]
   12a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a3e:	2b00      	cmp	r3, #0
   12a40:	d100      	bne.n	12a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a44:	bf00      	nop
   12a46:	b003      	add	sp, #12
   12a48:	f85d fb04 	ldr.w	pc, [sp], #4
   12a4c:	1fff9560 	.word	0x1fff9560
   12a50:	1fff955c 	.word	0x1fff955c

00012a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   12a54:	b500      	push	{lr}
   12a56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a58:	f7ee fd18 	bl	148c <Sys_GetCoreID>
   12a5c:	4603      	mov	r3, r0
   12a5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   12a60:	4a10      	ldr	r2, [pc, #64]	; (12aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   12a62:	9b01      	ldr	r3, [sp, #4]
   12a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d10d      	bne.n	12a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a6c:	f7ed ff49 	bl	902 <Port_schm_read_msr>
   12a70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a72:	9b00      	ldr	r3, [sp, #0]
   12a74:	f003 0301 	and.w	r3, r3, #1
   12a78:	2b00      	cmp	r3, #0
   12a7a:	d100      	bne.n	12a7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   12a7e:	490a      	ldr	r1, [pc, #40]	; (12aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   12a80:	9b01      	ldr	r3, [sp, #4]
   12a82:	9a00      	ldr	r2, [sp, #0]
   12a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   12a88:	4a06      	ldr	r2, [pc, #24]	; (12aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   12a8a:	9b01      	ldr	r3, [sp, #4]
   12a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a90:	1c5a      	adds	r2, r3, #1
   12a92:	4904      	ldr	r1, [pc, #16]	; (12aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   12a94:	9b01      	ldr	r3, [sp, #4]
   12a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a9a:	bf00      	nop
   12a9c:	b003      	add	sp, #12
   12a9e:	f85d fb04 	ldr.w	pc, [sp], #4
   12aa2:	bf00      	nop
   12aa4:	1fff9568 	.word	0x1fff9568
   12aa8:	1fff9564 	.word	0x1fff9564

00012aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   12aac:	b500      	push	{lr}
   12aae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ab0:	f7ee fcec 	bl	148c <Sys_GetCoreID>
   12ab4:	4603      	mov	r3, r0
   12ab6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   12ab8:	4a0d      	ldr	r2, [pc, #52]	; (12af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   12aba:	9b01      	ldr	r3, [sp, #4]
   12abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac0:	1e5a      	subs	r2, r3, #1
   12ac2:	490b      	ldr	r1, [pc, #44]	; (12af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   12ac4:	9b01      	ldr	r3, [sp, #4]
   12ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   12aca:	4a0a      	ldr	r2, [pc, #40]	; (12af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   12acc:	9b01      	ldr	r3, [sp, #4]
   12ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ad2:	f003 0301 	and.w	r3, r3, #1
   12ad6:	2b00      	cmp	r3, #0
   12ad8:	d106      	bne.n	12ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   12ada:	4a05      	ldr	r2, [pc, #20]	; (12af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   12adc:	9b01      	ldr	r3, [sp, #4]
   12ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ae2:	2b00      	cmp	r3, #0
   12ae4:	d100      	bne.n	12ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ae6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ae8:	bf00      	nop
   12aea:	b003      	add	sp, #12
   12aec:	f85d fb04 	ldr.w	pc, [sp], #4
   12af0:	1fff9568 	.word	0x1fff9568
   12af4:	1fff9564 	.word	0x1fff9564

00012af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   12af8:	b500      	push	{lr}
   12afa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12afc:	f7ee fcc6 	bl	148c <Sys_GetCoreID>
   12b00:	4603      	mov	r3, r0
   12b02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   12b04:	4a10      	ldr	r2, [pc, #64]	; (12b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   12b06:	9b01      	ldr	r3, [sp, #4]
   12b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b0c:	2b00      	cmp	r3, #0
   12b0e:	d10d      	bne.n	12b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b10:	f7ed fef7 	bl	902 <Port_schm_read_msr>
   12b14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b16:	9b00      	ldr	r3, [sp, #0]
   12b18:	f003 0301 	and.w	r3, r3, #1
   12b1c:	2b00      	cmp	r3, #0
   12b1e:	d100      	bne.n	12b22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   12b22:	490a      	ldr	r1, [pc, #40]	; (12b4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   12b24:	9b01      	ldr	r3, [sp, #4]
   12b26:	9a00      	ldr	r2, [sp, #0]
   12b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   12b2c:	4a06      	ldr	r2, [pc, #24]	; (12b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   12b2e:	9b01      	ldr	r3, [sp, #4]
   12b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b34:	1c5a      	adds	r2, r3, #1
   12b36:	4904      	ldr	r1, [pc, #16]	; (12b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   12b38:	9b01      	ldr	r3, [sp, #4]
   12b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b3e:	bf00      	nop
   12b40:	b003      	add	sp, #12
   12b42:	f85d fb04 	ldr.w	pc, [sp], #4
   12b46:	bf00      	nop
   12b48:	1fff9570 	.word	0x1fff9570
   12b4c:	1fff956c 	.word	0x1fff956c

00012b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   12b50:	b500      	push	{lr}
   12b52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b54:	f7ee fc9a 	bl	148c <Sys_GetCoreID>
   12b58:	4603      	mov	r3, r0
   12b5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   12b5c:	4a0d      	ldr	r2, [pc, #52]	; (12b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   12b5e:	9b01      	ldr	r3, [sp, #4]
   12b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b64:	1e5a      	subs	r2, r3, #1
   12b66:	490b      	ldr	r1, [pc, #44]	; (12b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   12b68:	9b01      	ldr	r3, [sp, #4]
   12b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   12b6e:	4a0a      	ldr	r2, [pc, #40]	; (12b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   12b70:	9b01      	ldr	r3, [sp, #4]
   12b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b76:	f003 0301 	and.w	r3, r3, #1
   12b7a:	2b00      	cmp	r3, #0
   12b7c:	d106      	bne.n	12b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   12b7e:	4a05      	ldr	r2, [pc, #20]	; (12b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   12b80:	9b01      	ldr	r3, [sp, #4]
   12b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b86:	2b00      	cmp	r3, #0
   12b88:	d100      	bne.n	12b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b8c:	bf00      	nop
   12b8e:	b003      	add	sp, #12
   12b90:	f85d fb04 	ldr.w	pc, [sp], #4
   12b94:	1fff9570 	.word	0x1fff9570
   12b98:	1fff956c 	.word	0x1fff956c

00012b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   12b9c:	b500      	push	{lr}
   12b9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ba0:	f7ee fc74 	bl	148c <Sys_GetCoreID>
   12ba4:	4603      	mov	r3, r0
   12ba6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   12ba8:	4a10      	ldr	r2, [pc, #64]	; (12bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   12baa:	9b01      	ldr	r3, [sp, #4]
   12bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bb0:	2b00      	cmp	r3, #0
   12bb2:	d10d      	bne.n	12bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bb4:	f7ed fea5 	bl	902 <Port_schm_read_msr>
   12bb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bba:	9b00      	ldr	r3, [sp, #0]
   12bbc:	f003 0301 	and.w	r3, r3, #1
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d100      	bne.n	12bc6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   12bc6:	490a      	ldr	r1, [pc, #40]	; (12bf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   12bc8:	9b01      	ldr	r3, [sp, #4]
   12bca:	9a00      	ldr	r2, [sp, #0]
   12bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   12bd0:	4a06      	ldr	r2, [pc, #24]	; (12bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   12bd2:	9b01      	ldr	r3, [sp, #4]
   12bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd8:	1c5a      	adds	r2, r3, #1
   12bda:	4904      	ldr	r1, [pc, #16]	; (12bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   12bdc:	9b01      	ldr	r3, [sp, #4]
   12bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12be2:	bf00      	nop
   12be4:	b003      	add	sp, #12
   12be6:	f85d fb04 	ldr.w	pc, [sp], #4
   12bea:	bf00      	nop
   12bec:	1fff9578 	.word	0x1fff9578
   12bf0:	1fff9574 	.word	0x1fff9574

00012bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   12bf4:	b500      	push	{lr}
   12bf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bf8:	f7ee fc48 	bl	148c <Sys_GetCoreID>
   12bfc:	4603      	mov	r3, r0
   12bfe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   12c00:	4a0d      	ldr	r2, [pc, #52]	; (12c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   12c02:	9b01      	ldr	r3, [sp, #4]
   12c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c08:	1e5a      	subs	r2, r3, #1
   12c0a:	490b      	ldr	r1, [pc, #44]	; (12c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   12c0c:	9b01      	ldr	r3, [sp, #4]
   12c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   12c12:	4a0a      	ldr	r2, [pc, #40]	; (12c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   12c14:	9b01      	ldr	r3, [sp, #4]
   12c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c1a:	f003 0301 	and.w	r3, r3, #1
   12c1e:	2b00      	cmp	r3, #0
   12c20:	d106      	bne.n	12c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   12c22:	4a05      	ldr	r2, [pc, #20]	; (12c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   12c24:	9b01      	ldr	r3, [sp, #4]
   12c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	d100      	bne.n	12c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c30:	bf00      	nop
   12c32:	b003      	add	sp, #12
   12c34:	f85d fb04 	ldr.w	pc, [sp], #4
   12c38:	1fff9578 	.word	0x1fff9578
   12c3c:	1fff9574 	.word	0x1fff9574

00012c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   12c40:	b500      	push	{lr}
   12c42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c44:	f7ee fc22 	bl	148c <Sys_GetCoreID>
   12c48:	4603      	mov	r3, r0
   12c4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   12c4c:	4a10      	ldr	r2, [pc, #64]	; (12c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   12c4e:	9b01      	ldr	r3, [sp, #4]
   12c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c54:	2b00      	cmp	r3, #0
   12c56:	d10d      	bne.n	12c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c58:	f7ed fe53 	bl	902 <Port_schm_read_msr>
   12c5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c5e:	9b00      	ldr	r3, [sp, #0]
   12c60:	f003 0301 	and.w	r3, r3, #1
   12c64:	2b00      	cmp	r3, #0
   12c66:	d100      	bne.n	12c6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   12c6a:	490a      	ldr	r1, [pc, #40]	; (12c94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   12c6c:	9b01      	ldr	r3, [sp, #4]
   12c6e:	9a00      	ldr	r2, [sp, #0]
   12c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   12c74:	4a06      	ldr	r2, [pc, #24]	; (12c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   12c76:	9b01      	ldr	r3, [sp, #4]
   12c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c7c:	1c5a      	adds	r2, r3, #1
   12c7e:	4904      	ldr	r1, [pc, #16]	; (12c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c86:	bf00      	nop
   12c88:	b003      	add	sp, #12
   12c8a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c8e:	bf00      	nop
   12c90:	1fff9580 	.word	0x1fff9580
   12c94:	1fff957c 	.word	0x1fff957c

00012c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   12c98:	b500      	push	{lr}
   12c9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c9c:	f7ee fbf6 	bl	148c <Sys_GetCoreID>
   12ca0:	4603      	mov	r3, r0
   12ca2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   12ca4:	4a0d      	ldr	r2, [pc, #52]	; (12cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   12ca6:	9b01      	ldr	r3, [sp, #4]
   12ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cac:	1e5a      	subs	r2, r3, #1
   12cae:	490b      	ldr	r1, [pc, #44]	; (12cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   12cb0:	9b01      	ldr	r3, [sp, #4]
   12cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   12cb6:	4a0a      	ldr	r2, [pc, #40]	; (12ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   12cb8:	9b01      	ldr	r3, [sp, #4]
   12cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cbe:	f003 0301 	and.w	r3, r3, #1
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	d106      	bne.n	12cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   12cc6:	4a05      	ldr	r2, [pc, #20]	; (12cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   12cc8:	9b01      	ldr	r3, [sp, #4]
   12cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d100      	bne.n	12cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12cd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cd4:	bf00      	nop
   12cd6:	b003      	add	sp, #12
   12cd8:	f85d fb04 	ldr.w	pc, [sp], #4
   12cdc:	1fff9580 	.word	0x1fff9580
   12ce0:	1fff957c 	.word	0x1fff957c

00012ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   12ce4:	b500      	push	{lr}
   12ce6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ce8:	f7ee fbd0 	bl	148c <Sys_GetCoreID>
   12cec:	4603      	mov	r3, r0
   12cee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   12cf0:	4a10      	ldr	r2, [pc, #64]	; (12d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   12cf2:	9b01      	ldr	r3, [sp, #4]
   12cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf8:	2b00      	cmp	r3, #0
   12cfa:	d10d      	bne.n	12d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cfc:	f7ed fe01 	bl	902 <Port_schm_read_msr>
   12d00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d02:	9b00      	ldr	r3, [sp, #0]
   12d04:	f003 0301 	and.w	r3, r3, #1
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d100      	bne.n	12d0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   12d0e:	490a      	ldr	r1, [pc, #40]	; (12d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   12d10:	9b01      	ldr	r3, [sp, #4]
   12d12:	9a00      	ldr	r2, [sp, #0]
   12d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   12d18:	4a06      	ldr	r2, [pc, #24]	; (12d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   12d1a:	9b01      	ldr	r3, [sp, #4]
   12d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d20:	1c5a      	adds	r2, r3, #1
   12d22:	4904      	ldr	r1, [pc, #16]	; (12d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   12d24:	9b01      	ldr	r3, [sp, #4]
   12d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d2a:	bf00      	nop
   12d2c:	b003      	add	sp, #12
   12d2e:	f85d fb04 	ldr.w	pc, [sp], #4
   12d32:	bf00      	nop
   12d34:	1fff9588 	.word	0x1fff9588
   12d38:	1fff9584 	.word	0x1fff9584

00012d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   12d3c:	b500      	push	{lr}
   12d3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d40:	f7ee fba4 	bl	148c <Sys_GetCoreID>
   12d44:	4603      	mov	r3, r0
   12d46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   12d48:	4a0d      	ldr	r2, [pc, #52]	; (12d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   12d4a:	9b01      	ldr	r3, [sp, #4]
   12d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d50:	1e5a      	subs	r2, r3, #1
   12d52:	490b      	ldr	r1, [pc, #44]	; (12d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   12d54:	9b01      	ldr	r3, [sp, #4]
   12d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   12d5a:	4a0a      	ldr	r2, [pc, #40]	; (12d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   12d5c:	9b01      	ldr	r3, [sp, #4]
   12d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d62:	f003 0301 	and.w	r3, r3, #1
   12d66:	2b00      	cmp	r3, #0
   12d68:	d106      	bne.n	12d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   12d6a:	4a05      	ldr	r2, [pc, #20]	; (12d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   12d6c:	9b01      	ldr	r3, [sp, #4]
   12d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d72:	2b00      	cmp	r3, #0
   12d74:	d100      	bne.n	12d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d78:	bf00      	nop
   12d7a:	b003      	add	sp, #12
   12d7c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d80:	1fff9588 	.word	0x1fff9588
   12d84:	1fff9584 	.word	0x1fff9584

00012d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   12d88:	b500      	push	{lr}
   12d8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d8c:	f7ee fb7e 	bl	148c <Sys_GetCoreID>
   12d90:	4603      	mov	r3, r0
   12d92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   12d94:	4a10      	ldr	r2, [pc, #64]	; (12dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   12d96:	9b01      	ldr	r3, [sp, #4]
   12d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	d10d      	bne.n	12dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12da0:	f7ed fdaf 	bl	902 <Port_schm_read_msr>
   12da4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12da6:	9b00      	ldr	r3, [sp, #0]
   12da8:	f003 0301 	and.w	r3, r3, #1
   12dac:	2b00      	cmp	r3, #0
   12dae:	d100      	bne.n	12db2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12db0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   12db2:	490a      	ldr	r1, [pc, #40]	; (12ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   12db4:	9b01      	ldr	r3, [sp, #4]
   12db6:	9a00      	ldr	r2, [sp, #0]
   12db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   12dbc:	4a06      	ldr	r2, [pc, #24]	; (12dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   12dbe:	9b01      	ldr	r3, [sp, #4]
   12dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dc4:	1c5a      	adds	r2, r3, #1
   12dc6:	4904      	ldr	r1, [pc, #16]	; (12dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   12dc8:	9b01      	ldr	r3, [sp, #4]
   12dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12dce:	bf00      	nop
   12dd0:	b003      	add	sp, #12
   12dd2:	f85d fb04 	ldr.w	pc, [sp], #4
   12dd6:	bf00      	nop
   12dd8:	1fff9590 	.word	0x1fff9590
   12ddc:	1fff958c 	.word	0x1fff958c

00012de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   12de0:	b500      	push	{lr}
   12de2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12de4:	f7ee fb52 	bl	148c <Sys_GetCoreID>
   12de8:	4603      	mov	r3, r0
   12dea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   12dec:	4a0d      	ldr	r2, [pc, #52]	; (12e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   12dee:	9b01      	ldr	r3, [sp, #4]
   12df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12df4:	1e5a      	subs	r2, r3, #1
   12df6:	490b      	ldr	r1, [pc, #44]	; (12e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   12df8:	9b01      	ldr	r3, [sp, #4]
   12dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   12dfe:	4a0a      	ldr	r2, [pc, #40]	; (12e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   12e00:	9b01      	ldr	r3, [sp, #4]
   12e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e06:	f003 0301 	and.w	r3, r3, #1
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	d106      	bne.n	12e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   12e0e:	4a05      	ldr	r2, [pc, #20]	; (12e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   12e10:	9b01      	ldr	r3, [sp, #4]
   12e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e16:	2b00      	cmp	r3, #0
   12e18:	d100      	bne.n	12e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e1c:	bf00      	nop
   12e1e:	b003      	add	sp, #12
   12e20:	f85d fb04 	ldr.w	pc, [sp], #4
   12e24:	1fff9590 	.word	0x1fff9590
   12e28:	1fff958c 	.word	0x1fff958c

00012e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   12e2c:	b500      	push	{lr}
   12e2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e30:	f7ee fb2c 	bl	148c <Sys_GetCoreID>
   12e34:	4603      	mov	r3, r0
   12e36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   12e38:	4a10      	ldr	r2, [pc, #64]	; (12e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   12e3a:	9b01      	ldr	r3, [sp, #4]
   12e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e40:	2b00      	cmp	r3, #0
   12e42:	d10d      	bne.n	12e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e44:	f7ed fd5d 	bl	902 <Port_schm_read_msr>
   12e48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e4a:	9b00      	ldr	r3, [sp, #0]
   12e4c:	f003 0301 	and.w	r3, r3, #1
   12e50:	2b00      	cmp	r3, #0
   12e52:	d100      	bne.n	12e56 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   12e56:	490a      	ldr	r1, [pc, #40]	; (12e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   12e58:	9b01      	ldr	r3, [sp, #4]
   12e5a:	9a00      	ldr	r2, [sp, #0]
   12e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   12e60:	4a06      	ldr	r2, [pc, #24]	; (12e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   12e62:	9b01      	ldr	r3, [sp, #4]
   12e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e68:	1c5a      	adds	r2, r3, #1
   12e6a:	4904      	ldr	r1, [pc, #16]	; (12e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   12e6c:	9b01      	ldr	r3, [sp, #4]
   12e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e72:	bf00      	nop
   12e74:	b003      	add	sp, #12
   12e76:	f85d fb04 	ldr.w	pc, [sp], #4
   12e7a:	bf00      	nop
   12e7c:	1fff9598 	.word	0x1fff9598
   12e80:	1fff9594 	.word	0x1fff9594

00012e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   12e84:	b500      	push	{lr}
   12e86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e88:	f7ee fb00 	bl	148c <Sys_GetCoreID>
   12e8c:	4603      	mov	r3, r0
   12e8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   12e90:	4a0d      	ldr	r2, [pc, #52]	; (12ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   12e92:	9b01      	ldr	r3, [sp, #4]
   12e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e98:	1e5a      	subs	r2, r3, #1
   12e9a:	490b      	ldr	r1, [pc, #44]	; (12ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   12e9c:	9b01      	ldr	r3, [sp, #4]
   12e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   12ea2:	4a0a      	ldr	r2, [pc, #40]	; (12ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eaa:	f003 0301 	and.w	r3, r3, #1
   12eae:	2b00      	cmp	r3, #0
   12eb0:	d106      	bne.n	12ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   12eb2:	4a05      	ldr	r2, [pc, #20]	; (12ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   12eb4:	9b01      	ldr	r3, [sp, #4]
   12eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eba:	2b00      	cmp	r3, #0
   12ebc:	d100      	bne.n	12ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ebe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ec0:	bf00      	nop
   12ec2:	b003      	add	sp, #12
   12ec4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ec8:	1fff9598 	.word	0x1fff9598
   12ecc:	1fff9594 	.word	0x1fff9594

00012ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   12ed0:	b500      	push	{lr}
   12ed2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ed4:	f7ee fada 	bl	148c <Sys_GetCoreID>
   12ed8:	4603      	mov	r3, r0
   12eda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   12edc:	4a10      	ldr	r2, [pc, #64]	; (12f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   12ede:	9b01      	ldr	r3, [sp, #4]
   12ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d10d      	bne.n	12f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ee8:	f7ed fd0b 	bl	902 <Port_schm_read_msr>
   12eec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12eee:	9b00      	ldr	r3, [sp, #0]
   12ef0:	f003 0301 	and.w	r3, r3, #1
   12ef4:	2b00      	cmp	r3, #0
   12ef6:	d100      	bne.n	12efa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ef8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   12efa:	490a      	ldr	r1, [pc, #40]	; (12f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   12efc:	9b01      	ldr	r3, [sp, #4]
   12efe:	9a00      	ldr	r2, [sp, #0]
   12f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   12f04:	4a06      	ldr	r2, [pc, #24]	; (12f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   12f06:	9b01      	ldr	r3, [sp, #4]
   12f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f0c:	1c5a      	adds	r2, r3, #1
   12f0e:	4904      	ldr	r1, [pc, #16]	; (12f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   12f10:	9b01      	ldr	r3, [sp, #4]
   12f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f16:	bf00      	nop
   12f18:	b003      	add	sp, #12
   12f1a:	f85d fb04 	ldr.w	pc, [sp], #4
   12f1e:	bf00      	nop
   12f20:	1fff95a0 	.word	0x1fff95a0
   12f24:	1fff959c 	.word	0x1fff959c

00012f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   12f28:	b500      	push	{lr}
   12f2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f2c:	f7ee faae 	bl	148c <Sys_GetCoreID>
   12f30:	4603      	mov	r3, r0
   12f32:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   12f34:	4a0d      	ldr	r2, [pc, #52]	; (12f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   12f36:	9b01      	ldr	r3, [sp, #4]
   12f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f3c:	1e5a      	subs	r2, r3, #1
   12f3e:	490b      	ldr	r1, [pc, #44]	; (12f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   12f40:	9b01      	ldr	r3, [sp, #4]
   12f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   12f46:	4a0a      	ldr	r2, [pc, #40]	; (12f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   12f48:	9b01      	ldr	r3, [sp, #4]
   12f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f4e:	f003 0301 	and.w	r3, r3, #1
   12f52:	2b00      	cmp	r3, #0
   12f54:	d106      	bne.n	12f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   12f56:	4a05      	ldr	r2, [pc, #20]	; (12f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   12f58:	9b01      	ldr	r3, [sp, #4]
   12f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f5e:	2b00      	cmp	r3, #0
   12f60:	d100      	bne.n	12f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f64:	bf00      	nop
   12f66:	b003      	add	sp, #12
   12f68:	f85d fb04 	ldr.w	pc, [sp], #4
   12f6c:	1fff95a0 	.word	0x1fff95a0
   12f70:	1fff959c 	.word	0x1fff959c

00012f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   12f74:	b500      	push	{lr}
   12f76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f78:	f7ee fa88 	bl	148c <Sys_GetCoreID>
   12f7c:	4603      	mov	r3, r0
   12f7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   12f80:	4a10      	ldr	r2, [pc, #64]	; (12fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   12f82:	9b01      	ldr	r3, [sp, #4]
   12f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d10d      	bne.n	12fa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f8c:	f7ed fcb9 	bl	902 <Port_schm_read_msr>
   12f90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f92:	9b00      	ldr	r3, [sp, #0]
   12f94:	f003 0301 	and.w	r3, r3, #1
   12f98:	2b00      	cmp	r3, #0
   12f9a:	d100      	bne.n	12f9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   12f9e:	490a      	ldr	r1, [pc, #40]	; (12fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   12fa0:	9b01      	ldr	r3, [sp, #4]
   12fa2:	9a00      	ldr	r2, [sp, #0]
   12fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   12fa8:	4a06      	ldr	r2, [pc, #24]	; (12fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb0:	1c5a      	adds	r2, r3, #1
   12fb2:	4904      	ldr	r1, [pc, #16]	; (12fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   12fb4:	9b01      	ldr	r3, [sp, #4]
   12fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12fba:	bf00      	nop
   12fbc:	b003      	add	sp, #12
   12fbe:	f85d fb04 	ldr.w	pc, [sp], #4
   12fc2:	bf00      	nop
   12fc4:	1fff95a8 	.word	0x1fff95a8
   12fc8:	1fff95a4 	.word	0x1fff95a4

00012fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   12fcc:	b500      	push	{lr}
   12fce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fd0:	f7ee fa5c 	bl	148c <Sys_GetCoreID>
   12fd4:	4603      	mov	r3, r0
   12fd6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   12fd8:	4a0d      	ldr	r2, [pc, #52]	; (13010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   12fda:	9b01      	ldr	r3, [sp, #4]
   12fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fe0:	1e5a      	subs	r2, r3, #1
   12fe2:	490b      	ldr	r1, [pc, #44]	; (13010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   12fe4:	9b01      	ldr	r3, [sp, #4]
   12fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   12fea:	4a0a      	ldr	r2, [pc, #40]	; (13014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   12fec:	9b01      	ldr	r3, [sp, #4]
   12fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ff2:	f003 0301 	and.w	r3, r3, #1
   12ff6:	2b00      	cmp	r3, #0
   12ff8:	d106      	bne.n	13008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   12ffa:	4a05      	ldr	r2, [pc, #20]	; (13010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   12ffc:	9b01      	ldr	r3, [sp, #4]
   12ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13002:	2b00      	cmp	r3, #0
   13004:	d100      	bne.n	13008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13006:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13008:	bf00      	nop
   1300a:	b003      	add	sp, #12
   1300c:	f85d fb04 	ldr.w	pc, [sp], #4
   13010:	1fff95a8 	.word	0x1fff95a8
   13014:	1fff95a4 	.word	0x1fff95a4

00013018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13018:	b500      	push	{lr}
   1301a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1301c:	f7ee fa36 	bl	148c <Sys_GetCoreID>
   13020:	4603      	mov	r3, r0
   13022:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   13024:	4a10      	ldr	r2, [pc, #64]	; (13068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13026:	9b01      	ldr	r3, [sp, #4]
   13028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1302c:	2b00      	cmp	r3, #0
   1302e:	d10d      	bne.n	1304c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13030:	f7ed fc67 	bl	902 <Port_schm_read_msr>
   13034:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13036:	9b00      	ldr	r3, [sp, #0]
   13038:	f003 0301 	and.w	r3, r3, #1
   1303c:	2b00      	cmp	r3, #0
   1303e:	d100      	bne.n	13042 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13040:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   13042:	490a      	ldr	r1, [pc, #40]	; (1306c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   13044:	9b01      	ldr	r3, [sp, #4]
   13046:	9a00      	ldr	r2, [sp, #0]
   13048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   1304c:	4a06      	ldr	r2, [pc, #24]	; (13068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1304e:	9b01      	ldr	r3, [sp, #4]
   13050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13054:	1c5a      	adds	r2, r3, #1
   13056:	4904      	ldr	r1, [pc, #16]	; (13068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13058:	9b01      	ldr	r3, [sp, #4]
   1305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1305e:	bf00      	nop
   13060:	b003      	add	sp, #12
   13062:	f85d fb04 	ldr.w	pc, [sp], #4
   13066:	bf00      	nop
   13068:	1fff95b0 	.word	0x1fff95b0
   1306c:	1fff95ac 	.word	0x1fff95ac

00013070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13070:	b500      	push	{lr}
   13072:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13074:	f7ee fa0a 	bl	148c <Sys_GetCoreID>
   13078:	4603      	mov	r3, r0
   1307a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   1307c:	4a0d      	ldr	r2, [pc, #52]	; (130b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1307e:	9b01      	ldr	r3, [sp, #4]
   13080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13084:	1e5a      	subs	r2, r3, #1
   13086:	490b      	ldr	r1, [pc, #44]	; (130b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13088:	9b01      	ldr	r3, [sp, #4]
   1308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1308e:	4a0a      	ldr	r2, [pc, #40]	; (130b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   13090:	9b01      	ldr	r3, [sp, #4]
   13092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13096:	f003 0301 	and.w	r3, r3, #1
   1309a:	2b00      	cmp	r3, #0
   1309c:	d106      	bne.n	130ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1309e:	4a05      	ldr	r2, [pc, #20]	; (130b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   130a0:	9b01      	ldr	r3, [sp, #4]
   130a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130a6:	2b00      	cmp	r3, #0
   130a8:	d100      	bne.n	130ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130ac:	bf00      	nop
   130ae:	b003      	add	sp, #12
   130b0:	f85d fb04 	ldr.w	pc, [sp], #4
   130b4:	1fff95b0 	.word	0x1fff95b0
   130b8:	1fff95ac 	.word	0x1fff95ac

000130bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   130bc:	b500      	push	{lr}
   130be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130c0:	f7ee f9e4 	bl	148c <Sys_GetCoreID>
   130c4:	4603      	mov	r3, r0
   130c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   130c8:	4a10      	ldr	r2, [pc, #64]	; (1310c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   130ca:	9b01      	ldr	r3, [sp, #4]
   130cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130d0:	2b00      	cmp	r3, #0
   130d2:	d10d      	bne.n	130f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130d4:	f7ed fc15 	bl	902 <Port_schm_read_msr>
   130d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130da:	9b00      	ldr	r3, [sp, #0]
   130dc:	f003 0301 	and.w	r3, r3, #1
   130e0:	2b00      	cmp	r3, #0
   130e2:	d100      	bne.n	130e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   130e6:	490a      	ldr	r1, [pc, #40]	; (13110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   130e8:	9b01      	ldr	r3, [sp, #4]
   130ea:	9a00      	ldr	r2, [sp, #0]
   130ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   130f0:	4a06      	ldr	r2, [pc, #24]	; (1310c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   130f2:	9b01      	ldr	r3, [sp, #4]
   130f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130f8:	1c5a      	adds	r2, r3, #1
   130fa:	4904      	ldr	r1, [pc, #16]	; (1310c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   130fc:	9b01      	ldr	r3, [sp, #4]
   130fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13102:	bf00      	nop
   13104:	b003      	add	sp, #12
   13106:	f85d fb04 	ldr.w	pc, [sp], #4
   1310a:	bf00      	nop
   1310c:	1fff95b8 	.word	0x1fff95b8
   13110:	1fff95b4 	.word	0x1fff95b4

00013114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13114:	b500      	push	{lr}
   13116:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13118:	f7ee f9b8 	bl	148c <Sys_GetCoreID>
   1311c:	4603      	mov	r3, r0
   1311e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   13120:	4a0d      	ldr	r2, [pc, #52]	; (13158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13122:	9b01      	ldr	r3, [sp, #4]
   13124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13128:	1e5a      	subs	r2, r3, #1
   1312a:	490b      	ldr	r1, [pc, #44]	; (13158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1312c:	9b01      	ldr	r3, [sp, #4]
   1312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   13132:	4a0a      	ldr	r2, [pc, #40]	; (1315c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   13134:	9b01      	ldr	r3, [sp, #4]
   13136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1313a:	f003 0301 	and.w	r3, r3, #1
   1313e:	2b00      	cmp	r3, #0
   13140:	d106      	bne.n	13150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   13142:	4a05      	ldr	r2, [pc, #20]	; (13158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13144:	9b01      	ldr	r3, [sp, #4]
   13146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1314a:	2b00      	cmp	r3, #0
   1314c:	d100      	bne.n	13150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1314e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13150:	bf00      	nop
   13152:	b003      	add	sp, #12
   13154:	f85d fb04 	ldr.w	pc, [sp], #4
   13158:	1fff95b8 	.word	0x1fff95b8
   1315c:	1fff95b4 	.word	0x1fff95b4

00013160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13160:	b500      	push	{lr}
   13162:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13164:	f7ee f992 	bl	148c <Sys_GetCoreID>
   13168:	4603      	mov	r3, r0
   1316a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   1316c:	4a10      	ldr	r2, [pc, #64]	; (131b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1316e:	9b01      	ldr	r3, [sp, #4]
   13170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13174:	2b00      	cmp	r3, #0
   13176:	d10d      	bne.n	13194 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13178:	f7ed fbc3 	bl	902 <Port_schm_read_msr>
   1317c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1317e:	9b00      	ldr	r3, [sp, #0]
   13180:	f003 0301 	and.w	r3, r3, #1
   13184:	2b00      	cmp	r3, #0
   13186:	d100      	bne.n	1318a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13188:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1318a:	490a      	ldr	r1, [pc, #40]	; (131b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   1318c:	9b01      	ldr	r3, [sp, #4]
   1318e:	9a00      	ldr	r2, [sp, #0]
   13190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   13194:	4a06      	ldr	r2, [pc, #24]	; (131b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13196:	9b01      	ldr	r3, [sp, #4]
   13198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1319c:	1c5a      	adds	r2, r3, #1
   1319e:	4904      	ldr	r1, [pc, #16]	; (131b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131a6:	bf00      	nop
   131a8:	b003      	add	sp, #12
   131aa:	f85d fb04 	ldr.w	pc, [sp], #4
   131ae:	bf00      	nop
   131b0:	1fff95c0 	.word	0x1fff95c0
   131b4:	1fff95bc 	.word	0x1fff95bc

000131b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   131b8:	b500      	push	{lr}
   131ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131bc:	f7ee f966 	bl	148c <Sys_GetCoreID>
   131c0:	4603      	mov	r3, r0
   131c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   131c4:	4a0d      	ldr	r2, [pc, #52]	; (131fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   131c6:	9b01      	ldr	r3, [sp, #4]
   131c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131cc:	1e5a      	subs	r2, r3, #1
   131ce:	490b      	ldr	r1, [pc, #44]	; (131fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   131d0:	9b01      	ldr	r3, [sp, #4]
   131d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   131d6:	4a0a      	ldr	r2, [pc, #40]	; (13200 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   131d8:	9b01      	ldr	r3, [sp, #4]
   131da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131de:	f003 0301 	and.w	r3, r3, #1
   131e2:	2b00      	cmp	r3, #0
   131e4:	d106      	bne.n	131f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   131e6:	4a05      	ldr	r2, [pc, #20]	; (131fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   131e8:	9b01      	ldr	r3, [sp, #4]
   131ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ee:	2b00      	cmp	r3, #0
   131f0:	d100      	bne.n	131f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131f4:	bf00      	nop
   131f6:	b003      	add	sp, #12
   131f8:	f85d fb04 	ldr.w	pc, [sp], #4
   131fc:	1fff95c0 	.word	0x1fff95c0
   13200:	1fff95bc 	.word	0x1fff95bc

00013204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13204:	b500      	push	{lr}
   13206:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13208:	f7ee f940 	bl	148c <Sys_GetCoreID>
   1320c:	4603      	mov	r3, r0
   1320e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   13210:	4a10      	ldr	r2, [pc, #64]	; (13254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13212:	9b01      	ldr	r3, [sp, #4]
   13214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13218:	2b00      	cmp	r3, #0
   1321a:	d10d      	bne.n	13238 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1321c:	f7ed fb71 	bl	902 <Port_schm_read_msr>
   13220:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13222:	9b00      	ldr	r3, [sp, #0]
   13224:	f003 0301 	and.w	r3, r3, #1
   13228:	2b00      	cmp	r3, #0
   1322a:	d100      	bne.n	1322e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1322c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1322e:	490a      	ldr	r1, [pc, #40]	; (13258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   13230:	9b01      	ldr	r3, [sp, #4]
   13232:	9a00      	ldr	r2, [sp, #0]
   13234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   13238:	4a06      	ldr	r2, [pc, #24]	; (13254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1323a:	9b01      	ldr	r3, [sp, #4]
   1323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13240:	1c5a      	adds	r2, r3, #1
   13242:	4904      	ldr	r1, [pc, #16]	; (13254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13244:	9b01      	ldr	r3, [sp, #4]
   13246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1324a:	bf00      	nop
   1324c:	b003      	add	sp, #12
   1324e:	f85d fb04 	ldr.w	pc, [sp], #4
   13252:	bf00      	nop
   13254:	1fff95c8 	.word	0x1fff95c8
   13258:	1fff95c4 	.word	0x1fff95c4

0001325c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   1325c:	b500      	push	{lr}
   1325e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13260:	f7ee f914 	bl	148c <Sys_GetCoreID>
   13264:	4603      	mov	r3, r0
   13266:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   13268:	4a0d      	ldr	r2, [pc, #52]	; (132a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   1326a:	9b01      	ldr	r3, [sp, #4]
   1326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13270:	1e5a      	subs	r2, r3, #1
   13272:	490b      	ldr	r1, [pc, #44]	; (132a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13274:	9b01      	ldr	r3, [sp, #4]
   13276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1327a:	4a0a      	ldr	r2, [pc, #40]	; (132a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   1327c:	9b01      	ldr	r3, [sp, #4]
   1327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13282:	f003 0301 	and.w	r3, r3, #1
   13286:	2b00      	cmp	r3, #0
   13288:	d106      	bne.n	13298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   1328a:	4a05      	ldr	r2, [pc, #20]	; (132a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   1328c:	9b01      	ldr	r3, [sp, #4]
   1328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13292:	2b00      	cmp	r3, #0
   13294:	d100      	bne.n	13298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13296:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13298:	bf00      	nop
   1329a:	b003      	add	sp, #12
   1329c:	f85d fb04 	ldr.w	pc, [sp], #4
   132a0:	1fff95c8 	.word	0x1fff95c8
   132a4:	1fff95c4 	.word	0x1fff95c4

000132a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   132a8:	b500      	push	{lr}
   132aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132ac:	f7ee f8ee 	bl	148c <Sys_GetCoreID>
   132b0:	4603      	mov	r3, r0
   132b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   132b4:	4a10      	ldr	r2, [pc, #64]	; (132f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   132b6:	9b01      	ldr	r3, [sp, #4]
   132b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132bc:	2b00      	cmp	r3, #0
   132be:	d10d      	bne.n	132dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132c0:	f7ed fb1f 	bl	902 <Port_schm_read_msr>
   132c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132c6:	9b00      	ldr	r3, [sp, #0]
   132c8:	f003 0301 	and.w	r3, r3, #1
   132cc:	2b00      	cmp	r3, #0
   132ce:	d100      	bne.n	132d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   132d2:	490a      	ldr	r1, [pc, #40]	; (132fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   132d4:	9b01      	ldr	r3, [sp, #4]
   132d6:	9a00      	ldr	r2, [sp, #0]
   132d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   132dc:	4a06      	ldr	r2, [pc, #24]	; (132f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   132de:	9b01      	ldr	r3, [sp, #4]
   132e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132e4:	1c5a      	adds	r2, r3, #1
   132e6:	4904      	ldr	r1, [pc, #16]	; (132f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   132e8:	9b01      	ldr	r3, [sp, #4]
   132ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132ee:	bf00      	nop
   132f0:	b003      	add	sp, #12
   132f2:	f85d fb04 	ldr.w	pc, [sp], #4
   132f6:	bf00      	nop
   132f8:	1fff95d0 	.word	0x1fff95d0
   132fc:	1fff95cc 	.word	0x1fff95cc

00013300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   13300:	b500      	push	{lr}
   13302:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13304:	f7ee f8c2 	bl	148c <Sys_GetCoreID>
   13308:	4603      	mov	r3, r0
   1330a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   1330c:	4a0d      	ldr	r2, [pc, #52]	; (13344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1330e:	9b01      	ldr	r3, [sp, #4]
   13310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13314:	1e5a      	subs	r2, r3, #1
   13316:	490b      	ldr	r1, [pc, #44]	; (13344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   13318:	9b01      	ldr	r3, [sp, #4]
   1331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1331e:	4a0a      	ldr	r2, [pc, #40]	; (13348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   13320:	9b01      	ldr	r3, [sp, #4]
   13322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13326:	f003 0301 	and.w	r3, r3, #1
   1332a:	2b00      	cmp	r3, #0
   1332c:	d106      	bne.n	1333c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1332e:	4a05      	ldr	r2, [pc, #20]	; (13344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   13330:	9b01      	ldr	r3, [sp, #4]
   13332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13336:	2b00      	cmp	r3, #0
   13338:	d100      	bne.n	1333c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1333a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1333c:	bf00      	nop
   1333e:	b003      	add	sp, #12
   13340:	f85d fb04 	ldr.w	pc, [sp], #4
   13344:	1fff95d0 	.word	0x1fff95d0
   13348:	1fff95cc 	.word	0x1fff95cc

0001334c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   1334c:	b500      	push	{lr}
   1334e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13350:	f7ee f89c 	bl	148c <Sys_GetCoreID>
   13354:	4603      	mov	r3, r0
   13356:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   13358:	4a10      	ldr	r2, [pc, #64]	; (1339c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1335a:	9b01      	ldr	r3, [sp, #4]
   1335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13364:	f7ed facd 	bl	902 <Port_schm_read_msr>
   13368:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1336a:	9b00      	ldr	r3, [sp, #0]
   1336c:	f003 0301 	and.w	r3, r3, #1
   13370:	2b00      	cmp	r3, #0
   13372:	d100      	bne.n	13376 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13374:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   13376:	490a      	ldr	r1, [pc, #40]	; (133a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   13378:	9b01      	ldr	r3, [sp, #4]
   1337a:	9a00      	ldr	r2, [sp, #0]
   1337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   13380:	4a06      	ldr	r2, [pc, #24]	; (1339c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   13382:	9b01      	ldr	r3, [sp, #4]
   13384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13388:	1c5a      	adds	r2, r3, #1
   1338a:	4904      	ldr	r1, [pc, #16]	; (1339c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1338c:	9b01      	ldr	r3, [sp, #4]
   1338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13392:	bf00      	nop
   13394:	b003      	add	sp, #12
   13396:	f85d fb04 	ldr.w	pc, [sp], #4
   1339a:	bf00      	nop
   1339c:	1fff95d8 	.word	0x1fff95d8
   133a0:	1fff95d4 	.word	0x1fff95d4

000133a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   133a4:	b500      	push	{lr}
   133a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133a8:	f7ee f870 	bl	148c <Sys_GetCoreID>
   133ac:	4603      	mov	r3, r0
   133ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   133b0:	4a0d      	ldr	r2, [pc, #52]	; (133e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   133b2:	9b01      	ldr	r3, [sp, #4]
   133b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133b8:	1e5a      	subs	r2, r3, #1
   133ba:	490b      	ldr	r1, [pc, #44]	; (133e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   133bc:	9b01      	ldr	r3, [sp, #4]
   133be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   133c2:	4a0a      	ldr	r2, [pc, #40]	; (133ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ca:	f003 0301 	and.w	r3, r3, #1
   133ce:	2b00      	cmp	r3, #0
   133d0:	d106      	bne.n	133e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   133d2:	4a05      	ldr	r2, [pc, #20]	; (133e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   133d4:	9b01      	ldr	r3, [sp, #4]
   133d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133da:	2b00      	cmp	r3, #0
   133dc:	d100      	bne.n	133e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133e0:	bf00      	nop
   133e2:	b003      	add	sp, #12
   133e4:	f85d fb04 	ldr.w	pc, [sp], #4
   133e8:	1fff95d8 	.word	0x1fff95d8
   133ec:	1fff95d4 	.word	0x1fff95d4

000133f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   133f0:	b500      	push	{lr}
   133f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133f4:	f7ee f84a 	bl	148c <Sys_GetCoreID>
   133f8:	4603      	mov	r3, r0
   133fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   133fc:	4a10      	ldr	r2, [pc, #64]	; (13440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   133fe:	9b01      	ldr	r3, [sp, #4]
   13400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13404:	2b00      	cmp	r3, #0
   13406:	d10d      	bne.n	13424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13408:	f7ed fa7b 	bl	902 <Port_schm_read_msr>
   1340c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1340e:	9b00      	ldr	r3, [sp, #0]
   13410:	f003 0301 	and.w	r3, r3, #1
   13414:	2b00      	cmp	r3, #0
   13416:	d100      	bne.n	1341a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13418:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1341a:	490a      	ldr	r1, [pc, #40]	; (13444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   1341c:	9b01      	ldr	r3, [sp, #4]
   1341e:	9a00      	ldr	r2, [sp, #0]
   13420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   13424:	4a06      	ldr	r2, [pc, #24]	; (13440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   13426:	9b01      	ldr	r3, [sp, #4]
   13428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1342c:	1c5a      	adds	r2, r3, #1
   1342e:	4904      	ldr	r1, [pc, #16]	; (13440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   13430:	9b01      	ldr	r3, [sp, #4]
   13432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13436:	bf00      	nop
   13438:	b003      	add	sp, #12
   1343a:	f85d fb04 	ldr.w	pc, [sp], #4
   1343e:	bf00      	nop
   13440:	1fff95e0 	.word	0x1fff95e0
   13444:	1fff95dc 	.word	0x1fff95dc

00013448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   13448:	b500      	push	{lr}
   1344a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1344c:	f7ee f81e 	bl	148c <Sys_GetCoreID>
   13450:	4603      	mov	r3, r0
   13452:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   13454:	4a0d      	ldr	r2, [pc, #52]	; (1348c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   13456:	9b01      	ldr	r3, [sp, #4]
   13458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1345c:	1e5a      	subs	r2, r3, #1
   1345e:	490b      	ldr	r1, [pc, #44]	; (1348c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   13460:	9b01      	ldr	r3, [sp, #4]
   13462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   13466:	4a0a      	ldr	r2, [pc, #40]	; (13490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   13468:	9b01      	ldr	r3, [sp, #4]
   1346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1346e:	f003 0301 	and.w	r3, r3, #1
   13472:	2b00      	cmp	r3, #0
   13474:	d106      	bne.n	13484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   13476:	4a05      	ldr	r2, [pc, #20]	; (1348c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   13478:	9b01      	ldr	r3, [sp, #4]
   1347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1347e:	2b00      	cmp	r3, #0
   13480:	d100      	bne.n	13484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13482:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13484:	bf00      	nop
   13486:	b003      	add	sp, #12
   13488:	f85d fb04 	ldr.w	pc, [sp], #4
   1348c:	1fff95e0 	.word	0x1fff95e0
   13490:	1fff95dc 	.word	0x1fff95dc

00013494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   13494:	b500      	push	{lr}
   13496:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13498:	f7ed fff8 	bl	148c <Sys_GetCoreID>
   1349c:	4603      	mov	r3, r0
   1349e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   134a0:	4a10      	ldr	r2, [pc, #64]	; (134e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   134a2:	9b01      	ldr	r3, [sp, #4]
   134a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a8:	2b00      	cmp	r3, #0
   134aa:	d10d      	bne.n	134c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134ac:	f7ed fa29 	bl	902 <Port_schm_read_msr>
   134b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134b2:	9b00      	ldr	r3, [sp, #0]
   134b4:	f003 0301 	and.w	r3, r3, #1
   134b8:	2b00      	cmp	r3, #0
   134ba:	d100      	bne.n	134be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   134be:	490a      	ldr	r1, [pc, #40]	; (134e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   134c0:	9b01      	ldr	r3, [sp, #4]
   134c2:	9a00      	ldr	r2, [sp, #0]
   134c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   134c8:	4a06      	ldr	r2, [pc, #24]	; (134e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   134ca:	9b01      	ldr	r3, [sp, #4]
   134cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d0:	1c5a      	adds	r2, r3, #1
   134d2:	4904      	ldr	r1, [pc, #16]	; (134e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   134d4:	9b01      	ldr	r3, [sp, #4]
   134d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134da:	bf00      	nop
   134dc:	b003      	add	sp, #12
   134de:	f85d fb04 	ldr.w	pc, [sp], #4
   134e2:	bf00      	nop
   134e4:	1fff95e8 	.word	0x1fff95e8
   134e8:	1fff95e4 	.word	0x1fff95e4

000134ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   134ec:	b500      	push	{lr}
   134ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134f0:	f7ed ffcc 	bl	148c <Sys_GetCoreID>
   134f4:	4603      	mov	r3, r0
   134f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   134f8:	4a0d      	ldr	r2, [pc, #52]	; (13530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   134fa:	9b01      	ldr	r3, [sp, #4]
   134fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13500:	1e5a      	subs	r2, r3, #1
   13502:	490b      	ldr	r1, [pc, #44]	; (13530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   13504:	9b01      	ldr	r3, [sp, #4]
   13506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1350a:	4a0a      	ldr	r2, [pc, #40]	; (13534 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   1350c:	9b01      	ldr	r3, [sp, #4]
   1350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13512:	f003 0301 	and.w	r3, r3, #1
   13516:	2b00      	cmp	r3, #0
   13518:	d106      	bne.n	13528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   1351a:	4a05      	ldr	r2, [pc, #20]	; (13530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   1351c:	9b01      	ldr	r3, [sp, #4]
   1351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13522:	2b00      	cmp	r3, #0
   13524:	d100      	bne.n	13528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13526:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13528:	bf00      	nop
   1352a:	b003      	add	sp, #12
   1352c:	f85d fb04 	ldr.w	pc, [sp], #4
   13530:	1fff95e8 	.word	0x1fff95e8
   13534:	1fff95e4 	.word	0x1fff95e4

00013538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   13538:	b500      	push	{lr}
   1353a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1353c:	f7ed ffa6 	bl	148c <Sys_GetCoreID>
   13540:	4603      	mov	r3, r0
   13542:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   13544:	4a10      	ldr	r2, [pc, #64]	; (13588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   13546:	9b01      	ldr	r3, [sp, #4]
   13548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1354c:	2b00      	cmp	r3, #0
   1354e:	d10d      	bne.n	1356c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13550:	f7ed f9d7 	bl	902 <Port_schm_read_msr>
   13554:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13556:	9b00      	ldr	r3, [sp, #0]
   13558:	f003 0301 	and.w	r3, r3, #1
   1355c:	2b00      	cmp	r3, #0
   1355e:	d100      	bne.n	13562 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13560:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   13562:	490a      	ldr	r1, [pc, #40]	; (1358c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   13564:	9b01      	ldr	r3, [sp, #4]
   13566:	9a00      	ldr	r2, [sp, #0]
   13568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   1356c:	4a06      	ldr	r2, [pc, #24]	; (13588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1356e:	9b01      	ldr	r3, [sp, #4]
   13570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13574:	1c5a      	adds	r2, r3, #1
   13576:	4904      	ldr	r1, [pc, #16]	; (13588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   13578:	9b01      	ldr	r3, [sp, #4]
   1357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1357e:	bf00      	nop
   13580:	b003      	add	sp, #12
   13582:	f85d fb04 	ldr.w	pc, [sp], #4
   13586:	bf00      	nop
   13588:	1fff95f0 	.word	0x1fff95f0
   1358c:	1fff95ec 	.word	0x1fff95ec

00013590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   13590:	b500      	push	{lr}
   13592:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13594:	f7ed ff7a 	bl	148c <Sys_GetCoreID>
   13598:	4603      	mov	r3, r0
   1359a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   1359c:	4a0d      	ldr	r2, [pc, #52]	; (135d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1359e:	9b01      	ldr	r3, [sp, #4]
   135a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135a4:	1e5a      	subs	r2, r3, #1
   135a6:	490b      	ldr	r1, [pc, #44]	; (135d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   135a8:	9b01      	ldr	r3, [sp, #4]
   135aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   135ae:	4a0a      	ldr	r2, [pc, #40]	; (135d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   135b0:	9b01      	ldr	r3, [sp, #4]
   135b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b6:	f003 0301 	and.w	r3, r3, #1
   135ba:	2b00      	cmp	r3, #0
   135bc:	d106      	bne.n	135cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   135be:	4a05      	ldr	r2, [pc, #20]	; (135d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   135c0:	9b01      	ldr	r3, [sp, #4]
   135c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135c6:	2b00      	cmp	r3, #0
   135c8:	d100      	bne.n	135cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135cc:	bf00      	nop
   135ce:	b003      	add	sp, #12
   135d0:	f85d fb04 	ldr.w	pc, [sp], #4
   135d4:	1fff95f0 	.word	0x1fff95f0
   135d8:	1fff95ec 	.word	0x1fff95ec

000135dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   135dc:	b500      	push	{lr}
   135de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135e0:	f7ed ff54 	bl	148c <Sys_GetCoreID>
   135e4:	4603      	mov	r3, r0
   135e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   135e8:	4a10      	ldr	r2, [pc, #64]	; (1362c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   135ea:	9b01      	ldr	r3, [sp, #4]
   135ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135f0:	2b00      	cmp	r3, #0
   135f2:	d10d      	bne.n	13610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135f4:	f7ed f985 	bl	902 <Port_schm_read_msr>
   135f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135fa:	9b00      	ldr	r3, [sp, #0]
   135fc:	f003 0301 	and.w	r3, r3, #1
   13600:	2b00      	cmp	r3, #0
   13602:	d100      	bne.n	13606 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13604:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   13606:	490a      	ldr	r1, [pc, #40]	; (13630 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   13608:	9b01      	ldr	r3, [sp, #4]
   1360a:	9a00      	ldr	r2, [sp, #0]
   1360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   13610:	4a06      	ldr	r2, [pc, #24]	; (1362c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   13612:	9b01      	ldr	r3, [sp, #4]
   13614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13618:	1c5a      	adds	r2, r3, #1
   1361a:	4904      	ldr	r1, [pc, #16]	; (1362c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1361c:	9b01      	ldr	r3, [sp, #4]
   1361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13622:	bf00      	nop
   13624:	b003      	add	sp, #12
   13626:	f85d fb04 	ldr.w	pc, [sp], #4
   1362a:	bf00      	nop
   1362c:	1fff95f8 	.word	0x1fff95f8
   13630:	1fff95f4 	.word	0x1fff95f4

00013634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   13634:	b500      	push	{lr}
   13636:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13638:	f7ed ff28 	bl	148c <Sys_GetCoreID>
   1363c:	4603      	mov	r3, r0
   1363e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   13640:	4a0d      	ldr	r2, [pc, #52]	; (13678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   13642:	9b01      	ldr	r3, [sp, #4]
   13644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13648:	1e5a      	subs	r2, r3, #1
   1364a:	490b      	ldr	r1, [pc, #44]	; (13678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1364c:	9b01      	ldr	r3, [sp, #4]
   1364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   13652:	4a0a      	ldr	r2, [pc, #40]	; (1367c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   13654:	9b01      	ldr	r3, [sp, #4]
   13656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1365a:	f003 0301 	and.w	r3, r3, #1
   1365e:	2b00      	cmp	r3, #0
   13660:	d106      	bne.n	13670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   13662:	4a05      	ldr	r2, [pc, #20]	; (13678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   13664:	9b01      	ldr	r3, [sp, #4]
   13666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1366a:	2b00      	cmp	r3, #0
   1366c:	d100      	bne.n	13670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1366e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13670:	bf00      	nop
   13672:	b003      	add	sp, #12
   13674:	f85d fb04 	ldr.w	pc, [sp], #4
   13678:	1fff95f8 	.word	0x1fff95f8
   1367c:	1fff95f4 	.word	0x1fff95f4

00013680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   13680:	b500      	push	{lr}
   13682:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13684:	f7ed ff02 	bl	148c <Sys_GetCoreID>
   13688:	4603      	mov	r3, r0
   1368a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   1368c:	4a10      	ldr	r2, [pc, #64]	; (136d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1368e:	9b01      	ldr	r3, [sp, #4]
   13690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13694:	2b00      	cmp	r3, #0
   13696:	d10d      	bne.n	136b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13698:	f7ed f933 	bl	902 <Port_schm_read_msr>
   1369c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1369e:	9b00      	ldr	r3, [sp, #0]
   136a0:	f003 0301 	and.w	r3, r3, #1
   136a4:	2b00      	cmp	r3, #0
   136a6:	d100      	bne.n	136aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   136aa:	490a      	ldr	r1, [pc, #40]	; (136d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   136ac:	9b01      	ldr	r3, [sp, #4]
   136ae:	9a00      	ldr	r2, [sp, #0]
   136b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   136b4:	4a06      	ldr	r2, [pc, #24]	; (136d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   136b6:	9b01      	ldr	r3, [sp, #4]
   136b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136bc:	1c5a      	adds	r2, r3, #1
   136be:	4904      	ldr	r1, [pc, #16]	; (136d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   136c0:	9b01      	ldr	r3, [sp, #4]
   136c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136c6:	bf00      	nop
   136c8:	b003      	add	sp, #12
   136ca:	f85d fb04 	ldr.w	pc, [sp], #4
   136ce:	bf00      	nop
   136d0:	1fff9600 	.word	0x1fff9600
   136d4:	1fff95fc 	.word	0x1fff95fc

000136d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   136d8:	b500      	push	{lr}
   136da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136dc:	f7ed fed6 	bl	148c <Sys_GetCoreID>
   136e0:	4603      	mov	r3, r0
   136e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   136e4:	4a0d      	ldr	r2, [pc, #52]	; (1371c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   136e6:	9b01      	ldr	r3, [sp, #4]
   136e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ec:	1e5a      	subs	r2, r3, #1
   136ee:	490b      	ldr	r1, [pc, #44]	; (1371c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   136f0:	9b01      	ldr	r3, [sp, #4]
   136f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   136f6:	4a0a      	ldr	r2, [pc, #40]	; (13720 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   136f8:	9b01      	ldr	r3, [sp, #4]
   136fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136fe:	f003 0301 	and.w	r3, r3, #1
   13702:	2b00      	cmp	r3, #0
   13704:	d106      	bne.n	13714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   13706:	4a05      	ldr	r2, [pc, #20]	; (1371c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   13708:	9b01      	ldr	r3, [sp, #4]
   1370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1370e:	2b00      	cmp	r3, #0
   13710:	d100      	bne.n	13714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13712:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13714:	bf00      	nop
   13716:	b003      	add	sp, #12
   13718:	f85d fb04 	ldr.w	pc, [sp], #4
   1371c:	1fff9600 	.word	0x1fff9600
   13720:	1fff95fc 	.word	0x1fff95fc

00013724 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   13724:	b500      	push	{lr}
   13726:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13728:	f7ed feb0 	bl	148c <Sys_GetCoreID>
   1372c:	4603      	mov	r3, r0
   1372e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   13730:	4a10      	ldr	r2, [pc, #64]	; (13774 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   13732:	9b01      	ldr	r3, [sp, #4]
   13734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13738:	2b00      	cmp	r3, #0
   1373a:	d10d      	bne.n	13758 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1373c:	f7ed f8ea 	bl	914 <Pwm_schm_read_msr>
   13740:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13742:	9b00      	ldr	r3, [sp, #0]
   13744:	f003 0301 	and.w	r3, r3, #1
   13748:	2b00      	cmp	r3, #0
   1374a:	d100      	bne.n	1374e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1374c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1374e:	490a      	ldr	r1, [pc, #40]	; (13778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   13750:	9b01      	ldr	r3, [sp, #4]
   13752:	9a00      	ldr	r2, [sp, #0]
   13754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   13758:	4a06      	ldr	r2, [pc, #24]	; (13774 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1375a:	9b01      	ldr	r3, [sp, #4]
   1375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13760:	1c5a      	adds	r2, r3, #1
   13762:	4904      	ldr	r1, [pc, #16]	; (13774 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1376a:	bf00      	nop
   1376c:	b003      	add	sp, #12
   1376e:	f85d fb04 	ldr.w	pc, [sp], #4
   13772:	bf00      	nop
   13774:	1fff9608 	.word	0x1fff9608
   13778:	1fff9604 	.word	0x1fff9604

0001377c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   1377c:	b500      	push	{lr}
   1377e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13780:	f7ed fe84 	bl	148c <Sys_GetCoreID>
   13784:	4603      	mov	r3, r0
   13786:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   13788:	4a0d      	ldr	r2, [pc, #52]	; (137c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   1378a:	9b01      	ldr	r3, [sp, #4]
   1378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13790:	1e5a      	subs	r2, r3, #1
   13792:	490b      	ldr	r1, [pc, #44]	; (137c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   13794:	9b01      	ldr	r3, [sp, #4]
   13796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1379a:	4a0a      	ldr	r2, [pc, #40]	; (137c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   1379c:	9b01      	ldr	r3, [sp, #4]
   1379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137a2:	f003 0301 	and.w	r3, r3, #1
   137a6:	2b00      	cmp	r3, #0
   137a8:	d106      	bne.n	137b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   137aa:	4a05      	ldr	r2, [pc, #20]	; (137c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   137ac:	9b01      	ldr	r3, [sp, #4]
   137ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137b2:	2b00      	cmp	r3, #0
   137b4:	d100      	bne.n	137b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137b8:	bf00      	nop
   137ba:	b003      	add	sp, #12
   137bc:	f85d fb04 	ldr.w	pc, [sp], #4
   137c0:	1fff9608 	.word	0x1fff9608
   137c4:	1fff9604 	.word	0x1fff9604

000137c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   137c8:	b500      	push	{lr}
   137ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137cc:	f7ed fe5e 	bl	148c <Sys_GetCoreID>
   137d0:	4603      	mov	r3, r0
   137d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   137d4:	4a10      	ldr	r2, [pc, #64]	; (13818 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   137d6:	9b01      	ldr	r3, [sp, #4]
   137d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137dc:	2b00      	cmp	r3, #0
   137de:	d10d      	bne.n	137fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137e0:	f7ed f898 	bl	914 <Pwm_schm_read_msr>
   137e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137e6:	9b00      	ldr	r3, [sp, #0]
   137e8:	f003 0301 	and.w	r3, r3, #1
   137ec:	2b00      	cmp	r3, #0
   137ee:	d100      	bne.n	137f2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   137f2:	490a      	ldr	r1, [pc, #40]	; (1381c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   137f4:	9b01      	ldr	r3, [sp, #4]
   137f6:	9a00      	ldr	r2, [sp, #0]
   137f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   137fc:	4a06      	ldr	r2, [pc, #24]	; (13818 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   137fe:	9b01      	ldr	r3, [sp, #4]
   13800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13804:	1c5a      	adds	r2, r3, #1
   13806:	4904      	ldr	r1, [pc, #16]	; (13818 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   13808:	9b01      	ldr	r3, [sp, #4]
   1380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1380e:	bf00      	nop
   13810:	b003      	add	sp, #12
   13812:	f85d fb04 	ldr.w	pc, [sp], #4
   13816:	bf00      	nop
   13818:	1fff9610 	.word	0x1fff9610
   1381c:	1fff960c 	.word	0x1fff960c

00013820 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   13820:	b500      	push	{lr}
   13822:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13824:	f7ed fe32 	bl	148c <Sys_GetCoreID>
   13828:	4603      	mov	r3, r0
   1382a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   1382c:	4a0d      	ldr	r2, [pc, #52]	; (13864 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   1382e:	9b01      	ldr	r3, [sp, #4]
   13830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13834:	1e5a      	subs	r2, r3, #1
   13836:	490b      	ldr	r1, [pc, #44]	; (13864 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   13838:	9b01      	ldr	r3, [sp, #4]
   1383a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1383e:	4a0a      	ldr	r2, [pc, #40]	; (13868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   13840:	9b01      	ldr	r3, [sp, #4]
   13842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13846:	f003 0301 	and.w	r3, r3, #1
   1384a:	2b00      	cmp	r3, #0
   1384c:	d106      	bne.n	1385c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   1384e:	4a05      	ldr	r2, [pc, #20]	; (13864 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   13850:	9b01      	ldr	r3, [sp, #4]
   13852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13856:	2b00      	cmp	r3, #0
   13858:	d100      	bne.n	1385c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1385a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1385c:	bf00      	nop
   1385e:	b003      	add	sp, #12
   13860:	f85d fb04 	ldr.w	pc, [sp], #4
   13864:	1fff9610 	.word	0x1fff9610
   13868:	1fff960c 	.word	0x1fff960c

0001386c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   1386c:	b500      	push	{lr}
   1386e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13870:	f7ed fe0c 	bl	148c <Sys_GetCoreID>
   13874:	4603      	mov	r3, r0
   13876:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   13878:	4a10      	ldr	r2, [pc, #64]	; (138bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   1387a:	9b01      	ldr	r3, [sp, #4]
   1387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13880:	2b00      	cmp	r3, #0
   13882:	d10d      	bne.n	138a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13884:	f7ed f846 	bl	914 <Pwm_schm_read_msr>
   13888:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1388a:	9b00      	ldr	r3, [sp, #0]
   1388c:	f003 0301 	and.w	r3, r3, #1
   13890:	2b00      	cmp	r3, #0
   13892:	d100      	bne.n	13896 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13894:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13896:	490a      	ldr	r1, [pc, #40]	; (138c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   13898:	9b01      	ldr	r3, [sp, #4]
   1389a:	9a00      	ldr	r2, [sp, #0]
   1389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   138a0:	4a06      	ldr	r2, [pc, #24]	; (138bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   138a2:	9b01      	ldr	r3, [sp, #4]
   138a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138a8:	1c5a      	adds	r2, r3, #1
   138aa:	4904      	ldr	r1, [pc, #16]	; (138bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   138ac:	9b01      	ldr	r3, [sp, #4]
   138ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138b2:	bf00      	nop
   138b4:	b003      	add	sp, #12
   138b6:	f85d fb04 	ldr.w	pc, [sp], #4
   138ba:	bf00      	nop
   138bc:	1fff9618 	.word	0x1fff9618
   138c0:	1fff9614 	.word	0x1fff9614

000138c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   138c4:	b500      	push	{lr}
   138c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138c8:	f7ed fde0 	bl	148c <Sys_GetCoreID>
   138cc:	4603      	mov	r3, r0
   138ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   138d0:	4a0d      	ldr	r2, [pc, #52]	; (13908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   138d2:	9b01      	ldr	r3, [sp, #4]
   138d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138d8:	1e5a      	subs	r2, r3, #1
   138da:	490b      	ldr	r1, [pc, #44]	; (13908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   138dc:	9b01      	ldr	r3, [sp, #4]
   138de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   138e2:	4a0a      	ldr	r2, [pc, #40]	; (1390c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   138e4:	9b01      	ldr	r3, [sp, #4]
   138e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ea:	f003 0301 	and.w	r3, r3, #1
   138ee:	2b00      	cmp	r3, #0
   138f0:	d106      	bne.n	13900 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   138f2:	4a05      	ldr	r2, [pc, #20]	; (13908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   138f4:	9b01      	ldr	r3, [sp, #4]
   138f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138fa:	2b00      	cmp	r3, #0
   138fc:	d100      	bne.n	13900 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13900:	bf00      	nop
   13902:	b003      	add	sp, #12
   13904:	f85d fb04 	ldr.w	pc, [sp], #4
   13908:	1fff9618 	.word	0x1fff9618
   1390c:	1fff9614 	.word	0x1fff9614

00013910 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   13910:	b500      	push	{lr}
   13912:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13914:	f7ed fdba 	bl	148c <Sys_GetCoreID>
   13918:	4603      	mov	r3, r0
   1391a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   1391c:	4a10      	ldr	r2, [pc, #64]	; (13960 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   1391e:	9b01      	ldr	r3, [sp, #4]
   13920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13924:	2b00      	cmp	r3, #0
   13926:	d10d      	bne.n	13944 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13928:	f7ec fff4 	bl	914 <Pwm_schm_read_msr>
   1392c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1392e:	9b00      	ldr	r3, [sp, #0]
   13930:	f003 0301 	and.w	r3, r3, #1
   13934:	2b00      	cmp	r3, #0
   13936:	d100      	bne.n	1393a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13938:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1393a:	490a      	ldr	r1, [pc, #40]	; (13964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   1393c:	9b01      	ldr	r3, [sp, #4]
   1393e:	9a00      	ldr	r2, [sp, #0]
   13940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   13944:	4a06      	ldr	r2, [pc, #24]	; (13960 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   13946:	9b01      	ldr	r3, [sp, #4]
   13948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1394c:	1c5a      	adds	r2, r3, #1
   1394e:	4904      	ldr	r1, [pc, #16]	; (13960 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   13950:	9b01      	ldr	r3, [sp, #4]
   13952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13956:	bf00      	nop
   13958:	b003      	add	sp, #12
   1395a:	f85d fb04 	ldr.w	pc, [sp], #4
   1395e:	bf00      	nop
   13960:	1fff9620 	.word	0x1fff9620
   13964:	1fff961c 	.word	0x1fff961c

00013968 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   13968:	b500      	push	{lr}
   1396a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1396c:	f7ed fd8e 	bl	148c <Sys_GetCoreID>
   13970:	4603      	mov	r3, r0
   13972:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   13974:	4a0d      	ldr	r2, [pc, #52]	; (139ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   13976:	9b01      	ldr	r3, [sp, #4]
   13978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1397c:	1e5a      	subs	r2, r3, #1
   1397e:	490b      	ldr	r1, [pc, #44]	; (139ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   13980:	9b01      	ldr	r3, [sp, #4]
   13982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13986:	4a0a      	ldr	r2, [pc, #40]	; (139b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   13988:	9b01      	ldr	r3, [sp, #4]
   1398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1398e:	f003 0301 	and.w	r3, r3, #1
   13992:	2b00      	cmp	r3, #0
   13994:	d106      	bne.n	139a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   13996:	4a05      	ldr	r2, [pc, #20]	; (139ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   13998:	9b01      	ldr	r3, [sp, #4]
   1399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1399e:	2b00      	cmp	r3, #0
   139a0:	d100      	bne.n	139a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139a4:	bf00      	nop
   139a6:	b003      	add	sp, #12
   139a8:	f85d fb04 	ldr.w	pc, [sp], #4
   139ac:	1fff9620 	.word	0x1fff9620
   139b0:	1fff961c 	.word	0x1fff961c

000139b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   139b4:	b500      	push	{lr}
   139b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139b8:	f7ed fd68 	bl	148c <Sys_GetCoreID>
   139bc:	4603      	mov	r3, r0
   139be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   139c0:	4a10      	ldr	r2, [pc, #64]	; (13a04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   139c2:	9b01      	ldr	r3, [sp, #4]
   139c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c8:	2b00      	cmp	r3, #0
   139ca:	d10d      	bne.n	139e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139cc:	f7ec ffa2 	bl	914 <Pwm_schm_read_msr>
   139d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139d2:	9b00      	ldr	r3, [sp, #0]
   139d4:	f003 0301 	and.w	r3, r3, #1
   139d8:	2b00      	cmp	r3, #0
   139da:	d100      	bne.n	139de <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   139de:	490a      	ldr	r1, [pc, #40]	; (13a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   139e0:	9b01      	ldr	r3, [sp, #4]
   139e2:	9a00      	ldr	r2, [sp, #0]
   139e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   139e8:	4a06      	ldr	r2, [pc, #24]	; (13a04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   139ea:	9b01      	ldr	r3, [sp, #4]
   139ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f0:	1c5a      	adds	r2, r3, #1
   139f2:	4904      	ldr	r1, [pc, #16]	; (13a04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   139f4:	9b01      	ldr	r3, [sp, #4]
   139f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139fa:	bf00      	nop
   139fc:	b003      	add	sp, #12
   139fe:	f85d fb04 	ldr.w	pc, [sp], #4
   13a02:	bf00      	nop
   13a04:	1fff9628 	.word	0x1fff9628
   13a08:	1fff9624 	.word	0x1fff9624

00013a0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   13a0c:	b500      	push	{lr}
   13a0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a10:	f7ed fd3c 	bl	148c <Sys_GetCoreID>
   13a14:	4603      	mov	r3, r0
   13a16:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   13a18:	4a0d      	ldr	r2, [pc, #52]	; (13a50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   13a1a:	9b01      	ldr	r3, [sp, #4]
   13a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a20:	1e5a      	subs	r2, r3, #1
   13a22:	490b      	ldr	r1, [pc, #44]	; (13a50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   13a24:	9b01      	ldr	r3, [sp, #4]
   13a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13a2a:	4a0a      	ldr	r2, [pc, #40]	; (13a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   13a2c:	9b01      	ldr	r3, [sp, #4]
   13a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a32:	f003 0301 	and.w	r3, r3, #1
   13a36:	2b00      	cmp	r3, #0
   13a38:	d106      	bne.n	13a48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   13a3a:	4a05      	ldr	r2, [pc, #20]	; (13a50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   13a3c:	9b01      	ldr	r3, [sp, #4]
   13a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a42:	2b00      	cmp	r3, #0
   13a44:	d100      	bne.n	13a48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a48:	bf00      	nop
   13a4a:	b003      	add	sp, #12
   13a4c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a50:	1fff9628 	.word	0x1fff9628
   13a54:	1fff9624 	.word	0x1fff9624

00013a58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   13a58:	b500      	push	{lr}
   13a5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a5c:	f7ed fd16 	bl	148c <Sys_GetCoreID>
   13a60:	4603      	mov	r3, r0
   13a62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   13a64:	4a10      	ldr	r2, [pc, #64]	; (13aa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   13a66:	9b01      	ldr	r3, [sp, #4]
   13a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a6c:	2b00      	cmp	r3, #0
   13a6e:	d10d      	bne.n	13a8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a70:	f7ec ff50 	bl	914 <Pwm_schm_read_msr>
   13a74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a76:	9b00      	ldr	r3, [sp, #0]
   13a78:	f003 0301 	and.w	r3, r3, #1
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d100      	bne.n	13a82 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   13a82:	490a      	ldr	r1, [pc, #40]	; (13aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   13a84:	9b01      	ldr	r3, [sp, #4]
   13a86:	9a00      	ldr	r2, [sp, #0]
   13a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   13a8c:	4a06      	ldr	r2, [pc, #24]	; (13aa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   13a8e:	9b01      	ldr	r3, [sp, #4]
   13a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a94:	1c5a      	adds	r2, r3, #1
   13a96:	4904      	ldr	r1, [pc, #16]	; (13aa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   13a98:	9b01      	ldr	r3, [sp, #4]
   13a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a9e:	bf00      	nop
   13aa0:	b003      	add	sp, #12
   13aa2:	f85d fb04 	ldr.w	pc, [sp], #4
   13aa6:	bf00      	nop
   13aa8:	1fff9630 	.word	0x1fff9630
   13aac:	1fff962c 	.word	0x1fff962c

00013ab0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   13ab0:	b500      	push	{lr}
   13ab2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ab4:	f7ed fcea 	bl	148c <Sys_GetCoreID>
   13ab8:	4603      	mov	r3, r0
   13aba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   13abc:	4a0d      	ldr	r2, [pc, #52]	; (13af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   13abe:	9b01      	ldr	r3, [sp, #4]
   13ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ac4:	1e5a      	subs	r2, r3, #1
   13ac6:	490b      	ldr	r1, [pc, #44]	; (13af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   13ac8:	9b01      	ldr	r3, [sp, #4]
   13aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   13ace:	4a0a      	ldr	r2, [pc, #40]	; (13af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   13ad0:	9b01      	ldr	r3, [sp, #4]
   13ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad6:	f003 0301 	and.w	r3, r3, #1
   13ada:	2b00      	cmp	r3, #0
   13adc:	d106      	bne.n	13aec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   13ade:	4a05      	ldr	r2, [pc, #20]	; (13af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   13ae0:	9b01      	ldr	r3, [sp, #4]
   13ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	d100      	bne.n	13aec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13aea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13aec:	bf00      	nop
   13aee:	b003      	add	sp, #12
   13af0:	f85d fb04 	ldr.w	pc, [sp], #4
   13af4:	1fff9630 	.word	0x1fff9630
   13af8:	1fff962c 	.word	0x1fff962c

00013afc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   13afc:	b500      	push	{lr}
   13afe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b00:	f7ed fcc4 	bl	148c <Sys_GetCoreID>
   13b04:	4603      	mov	r3, r0
   13b06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   13b08:	4a10      	ldr	r2, [pc, #64]	; (13b4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   13b0a:	9b01      	ldr	r3, [sp, #4]
   13b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b10:	2b00      	cmp	r3, #0
   13b12:	d10d      	bne.n	13b30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b14:	f7ec fefe 	bl	914 <Pwm_schm_read_msr>
   13b18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b1a:	9b00      	ldr	r3, [sp, #0]
   13b1c:	f003 0301 	and.w	r3, r3, #1
   13b20:	2b00      	cmp	r3, #0
   13b22:	d100      	bne.n	13b26 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   13b26:	490a      	ldr	r1, [pc, #40]	; (13b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   13b28:	9b01      	ldr	r3, [sp, #4]
   13b2a:	9a00      	ldr	r2, [sp, #0]
   13b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   13b30:	4a06      	ldr	r2, [pc, #24]	; (13b4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   13b32:	9b01      	ldr	r3, [sp, #4]
   13b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b38:	1c5a      	adds	r2, r3, #1
   13b3a:	4904      	ldr	r1, [pc, #16]	; (13b4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   13b3c:	9b01      	ldr	r3, [sp, #4]
   13b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b42:	bf00      	nop
   13b44:	b003      	add	sp, #12
   13b46:	f85d fb04 	ldr.w	pc, [sp], #4
   13b4a:	bf00      	nop
   13b4c:	1fff9638 	.word	0x1fff9638
   13b50:	1fff9634 	.word	0x1fff9634

00013b54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   13b54:	b500      	push	{lr}
   13b56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b58:	f7ed fc98 	bl	148c <Sys_GetCoreID>
   13b5c:	4603      	mov	r3, r0
   13b5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   13b60:	4a0d      	ldr	r2, [pc, #52]	; (13b98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   13b62:	9b01      	ldr	r3, [sp, #4]
   13b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b68:	1e5a      	subs	r2, r3, #1
   13b6a:	490b      	ldr	r1, [pc, #44]	; (13b98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   13b6c:	9b01      	ldr	r3, [sp, #4]
   13b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   13b72:	4a0a      	ldr	r2, [pc, #40]	; (13b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   13b74:	9b01      	ldr	r3, [sp, #4]
   13b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b7a:	f003 0301 	and.w	r3, r3, #1
   13b7e:	2b00      	cmp	r3, #0
   13b80:	d106      	bne.n	13b90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   13b82:	4a05      	ldr	r2, [pc, #20]	; (13b98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   13b84:	9b01      	ldr	r3, [sp, #4]
   13b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b8a:	2b00      	cmp	r3, #0
   13b8c:	d100      	bne.n	13b90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b90:	bf00      	nop
   13b92:	b003      	add	sp, #12
   13b94:	f85d fb04 	ldr.w	pc, [sp], #4
   13b98:	1fff9638 	.word	0x1fff9638
   13b9c:	1fff9634 	.word	0x1fff9634

00013ba0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   13ba0:	b500      	push	{lr}
   13ba2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ba4:	f7ed fc72 	bl	148c <Sys_GetCoreID>
   13ba8:	4603      	mov	r3, r0
   13baa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   13bac:	4a10      	ldr	r2, [pc, #64]	; (13bf0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   13bae:	9b01      	ldr	r3, [sp, #4]
   13bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d10d      	bne.n	13bd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bb8:	f7ec feac 	bl	914 <Pwm_schm_read_msr>
   13bbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bbe:	9b00      	ldr	r3, [sp, #0]
   13bc0:	f003 0301 	and.w	r3, r3, #1
   13bc4:	2b00      	cmp	r3, #0
   13bc6:	d100      	bne.n	13bca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13bc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   13bca:	490a      	ldr	r1, [pc, #40]	; (13bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   13bcc:	9b01      	ldr	r3, [sp, #4]
   13bce:	9a00      	ldr	r2, [sp, #0]
   13bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   13bd4:	4a06      	ldr	r2, [pc, #24]	; (13bf0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   13bd6:	9b01      	ldr	r3, [sp, #4]
   13bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bdc:	1c5a      	adds	r2, r3, #1
   13bde:	4904      	ldr	r1, [pc, #16]	; (13bf0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   13be0:	9b01      	ldr	r3, [sp, #4]
   13be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13be6:	bf00      	nop
   13be8:	b003      	add	sp, #12
   13bea:	f85d fb04 	ldr.w	pc, [sp], #4
   13bee:	bf00      	nop
   13bf0:	1fff9640 	.word	0x1fff9640
   13bf4:	1fff963c 	.word	0x1fff963c

00013bf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   13bf8:	b500      	push	{lr}
   13bfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bfc:	f7ed fc46 	bl	148c <Sys_GetCoreID>
   13c00:	4603      	mov	r3, r0
   13c02:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   13c04:	4a0d      	ldr	r2, [pc, #52]	; (13c3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   13c06:	9b01      	ldr	r3, [sp, #4]
   13c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c0c:	1e5a      	subs	r2, r3, #1
   13c0e:	490b      	ldr	r1, [pc, #44]	; (13c3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   13c10:	9b01      	ldr	r3, [sp, #4]
   13c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   13c16:	4a0a      	ldr	r2, [pc, #40]	; (13c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   13c18:	9b01      	ldr	r3, [sp, #4]
   13c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c1e:	f003 0301 	and.w	r3, r3, #1
   13c22:	2b00      	cmp	r3, #0
   13c24:	d106      	bne.n	13c34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   13c26:	4a05      	ldr	r2, [pc, #20]	; (13c3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   13c28:	9b01      	ldr	r3, [sp, #4]
   13c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d100      	bne.n	13c34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c34:	bf00      	nop
   13c36:	b003      	add	sp, #12
   13c38:	f85d fb04 	ldr.w	pc, [sp], #4
   13c3c:	1fff9640 	.word	0x1fff9640
   13c40:	1fff963c 	.word	0x1fff963c

00013c44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   13c44:	b500      	push	{lr}
   13c46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c48:	f7ed fc20 	bl	148c <Sys_GetCoreID>
   13c4c:	4603      	mov	r3, r0
   13c4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   13c50:	4a10      	ldr	r2, [pc, #64]	; (13c94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   13c52:	9b01      	ldr	r3, [sp, #4]
   13c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c58:	2b00      	cmp	r3, #0
   13c5a:	d10d      	bne.n	13c78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c5c:	f7ec fe5a 	bl	914 <Pwm_schm_read_msr>
   13c60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c62:	9b00      	ldr	r3, [sp, #0]
   13c64:	f003 0301 	and.w	r3, r3, #1
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d100      	bne.n	13c6e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   13c6e:	490a      	ldr	r1, [pc, #40]	; (13c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   13c70:	9b01      	ldr	r3, [sp, #4]
   13c72:	9a00      	ldr	r2, [sp, #0]
   13c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   13c78:	4a06      	ldr	r2, [pc, #24]	; (13c94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   13c7a:	9b01      	ldr	r3, [sp, #4]
   13c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c80:	1c5a      	adds	r2, r3, #1
   13c82:	4904      	ldr	r1, [pc, #16]	; (13c94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   13c84:	9b01      	ldr	r3, [sp, #4]
   13c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c8a:	bf00      	nop
   13c8c:	b003      	add	sp, #12
   13c8e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c92:	bf00      	nop
   13c94:	1fff9648 	.word	0x1fff9648
   13c98:	1fff9644 	.word	0x1fff9644

00013c9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   13c9c:	b500      	push	{lr}
   13c9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ca0:	f7ed fbf4 	bl	148c <Sys_GetCoreID>
   13ca4:	4603      	mov	r3, r0
   13ca6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   13ca8:	4a0d      	ldr	r2, [pc, #52]	; (13ce0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   13caa:	9b01      	ldr	r3, [sp, #4]
   13cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cb0:	1e5a      	subs	r2, r3, #1
   13cb2:	490b      	ldr	r1, [pc, #44]	; (13ce0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   13cb4:	9b01      	ldr	r3, [sp, #4]
   13cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   13cba:	4a0a      	ldr	r2, [pc, #40]	; (13ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   13cbc:	9b01      	ldr	r3, [sp, #4]
   13cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cc2:	f003 0301 	and.w	r3, r3, #1
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	d106      	bne.n	13cd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   13cca:	4a05      	ldr	r2, [pc, #20]	; (13ce0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   13ccc:	9b01      	ldr	r3, [sp, #4]
   13cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d100      	bne.n	13cd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cd8:	bf00      	nop
   13cda:	b003      	add	sp, #12
   13cdc:	f85d fb04 	ldr.w	pc, [sp], #4
   13ce0:	1fff9648 	.word	0x1fff9648
   13ce4:	1fff9644 	.word	0x1fff9644

00013ce8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   13ce8:	b500      	push	{lr}
   13cea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cec:	f7ed fbce 	bl	148c <Sys_GetCoreID>
   13cf0:	4603      	mov	r3, r0
   13cf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   13cf4:	4a10      	ldr	r2, [pc, #64]	; (13d38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   13cf6:	9b01      	ldr	r3, [sp, #4]
   13cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cfc:	2b00      	cmp	r3, #0
   13cfe:	d10d      	bne.n	13d1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d00:	f7ec fe08 	bl	914 <Pwm_schm_read_msr>
   13d04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d06:	9b00      	ldr	r3, [sp, #0]
   13d08:	f003 0301 	and.w	r3, r3, #1
   13d0c:	2b00      	cmp	r3, #0
   13d0e:	d100      	bne.n	13d12 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   13d12:	490a      	ldr	r1, [pc, #40]	; (13d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   13d14:	9b01      	ldr	r3, [sp, #4]
   13d16:	9a00      	ldr	r2, [sp, #0]
   13d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   13d1c:	4a06      	ldr	r2, [pc, #24]	; (13d38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   13d1e:	9b01      	ldr	r3, [sp, #4]
   13d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d24:	1c5a      	adds	r2, r3, #1
   13d26:	4904      	ldr	r1, [pc, #16]	; (13d38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   13d28:	9b01      	ldr	r3, [sp, #4]
   13d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d2e:	bf00      	nop
   13d30:	b003      	add	sp, #12
   13d32:	f85d fb04 	ldr.w	pc, [sp], #4
   13d36:	bf00      	nop
   13d38:	1fff9650 	.word	0x1fff9650
   13d3c:	1fff964c 	.word	0x1fff964c

00013d40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   13d40:	b500      	push	{lr}
   13d42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d44:	f7ed fba2 	bl	148c <Sys_GetCoreID>
   13d48:	4603      	mov	r3, r0
   13d4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   13d4c:	4a0d      	ldr	r2, [pc, #52]	; (13d84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   13d4e:	9b01      	ldr	r3, [sp, #4]
   13d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d54:	1e5a      	subs	r2, r3, #1
   13d56:	490b      	ldr	r1, [pc, #44]	; (13d84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   13d58:	9b01      	ldr	r3, [sp, #4]
   13d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   13d5e:	4a0a      	ldr	r2, [pc, #40]	; (13d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   13d60:	9b01      	ldr	r3, [sp, #4]
   13d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d66:	f003 0301 	and.w	r3, r3, #1
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	d106      	bne.n	13d7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   13d6e:	4a05      	ldr	r2, [pc, #20]	; (13d84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   13d70:	9b01      	ldr	r3, [sp, #4]
   13d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d76:	2b00      	cmp	r3, #0
   13d78:	d100      	bne.n	13d7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d7c:	bf00      	nop
   13d7e:	b003      	add	sp, #12
   13d80:	f85d fb04 	ldr.w	pc, [sp], #4
   13d84:	1fff9650 	.word	0x1fff9650
   13d88:	1fff964c 	.word	0x1fff964c

00013d8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   13d8c:	b500      	push	{lr}
   13d8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d90:	f7ed fb7c 	bl	148c <Sys_GetCoreID>
   13d94:	4603      	mov	r3, r0
   13d96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   13d98:	4a10      	ldr	r2, [pc, #64]	; (13ddc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   13d9a:	9b01      	ldr	r3, [sp, #4]
   13d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13da0:	2b00      	cmp	r3, #0
   13da2:	d10d      	bne.n	13dc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13da4:	f7ec fdb6 	bl	914 <Pwm_schm_read_msr>
   13da8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13daa:	9b00      	ldr	r3, [sp, #0]
   13dac:	f003 0301 	and.w	r3, r3, #1
   13db0:	2b00      	cmp	r3, #0
   13db2:	d100      	bne.n	13db6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13db4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   13db6:	490a      	ldr	r1, [pc, #40]	; (13de0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   13db8:	9b01      	ldr	r3, [sp, #4]
   13dba:	9a00      	ldr	r2, [sp, #0]
   13dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   13dc0:	4a06      	ldr	r2, [pc, #24]	; (13ddc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   13dc2:	9b01      	ldr	r3, [sp, #4]
   13dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dc8:	1c5a      	adds	r2, r3, #1
   13dca:	4904      	ldr	r1, [pc, #16]	; (13ddc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   13dcc:	9b01      	ldr	r3, [sp, #4]
   13dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13dd2:	bf00      	nop
   13dd4:	b003      	add	sp, #12
   13dd6:	f85d fb04 	ldr.w	pc, [sp], #4
   13dda:	bf00      	nop
   13ddc:	1fff9658 	.word	0x1fff9658
   13de0:	1fff9654 	.word	0x1fff9654

00013de4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   13de4:	b500      	push	{lr}
   13de6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13de8:	f7ed fb50 	bl	148c <Sys_GetCoreID>
   13dec:	4603      	mov	r3, r0
   13dee:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   13df0:	4a0d      	ldr	r2, [pc, #52]	; (13e28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   13df2:	9b01      	ldr	r3, [sp, #4]
   13df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13df8:	1e5a      	subs	r2, r3, #1
   13dfa:	490b      	ldr	r1, [pc, #44]	; (13e28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   13dfc:	9b01      	ldr	r3, [sp, #4]
   13dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   13e02:	4a0a      	ldr	r2, [pc, #40]	; (13e2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   13e04:	9b01      	ldr	r3, [sp, #4]
   13e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e0a:	f003 0301 	and.w	r3, r3, #1
   13e0e:	2b00      	cmp	r3, #0
   13e10:	d106      	bne.n	13e20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   13e12:	4a05      	ldr	r2, [pc, #20]	; (13e28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   13e14:	9b01      	ldr	r3, [sp, #4]
   13e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	d100      	bne.n	13e20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e20:	bf00      	nop
   13e22:	b003      	add	sp, #12
   13e24:	f85d fb04 	ldr.w	pc, [sp], #4
   13e28:	1fff9658 	.word	0x1fff9658
   13e2c:	1fff9654 	.word	0x1fff9654

00013e30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   13e30:	b500      	push	{lr}
   13e32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e34:	f7ed fb2a 	bl	148c <Sys_GetCoreID>
   13e38:	4603      	mov	r3, r0
   13e3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   13e3c:	4a10      	ldr	r2, [pc, #64]	; (13e80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   13e3e:	9b01      	ldr	r3, [sp, #4]
   13e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e44:	2b00      	cmp	r3, #0
   13e46:	d10d      	bne.n	13e64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e48:	f7ec fd64 	bl	914 <Pwm_schm_read_msr>
   13e4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e4e:	9b00      	ldr	r3, [sp, #0]
   13e50:	f003 0301 	and.w	r3, r3, #1
   13e54:	2b00      	cmp	r3, #0
   13e56:	d100      	bne.n	13e5a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   13e5a:	490a      	ldr	r1, [pc, #40]	; (13e84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   13e5c:	9b01      	ldr	r3, [sp, #4]
   13e5e:	9a00      	ldr	r2, [sp, #0]
   13e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   13e64:	4a06      	ldr	r2, [pc, #24]	; (13e80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   13e66:	9b01      	ldr	r3, [sp, #4]
   13e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e6c:	1c5a      	adds	r2, r3, #1
   13e6e:	4904      	ldr	r1, [pc, #16]	; (13e80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   13e70:	9b01      	ldr	r3, [sp, #4]
   13e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e76:	bf00      	nop
   13e78:	b003      	add	sp, #12
   13e7a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e7e:	bf00      	nop
   13e80:	1fff9660 	.word	0x1fff9660
   13e84:	1fff965c 	.word	0x1fff965c

00013e88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   13e88:	b500      	push	{lr}
   13e8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e8c:	f7ed fafe 	bl	148c <Sys_GetCoreID>
   13e90:	4603      	mov	r3, r0
   13e92:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   13e94:	4a0d      	ldr	r2, [pc, #52]	; (13ecc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   13e96:	9b01      	ldr	r3, [sp, #4]
   13e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e9c:	1e5a      	subs	r2, r3, #1
   13e9e:	490b      	ldr	r1, [pc, #44]	; (13ecc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   13ea0:	9b01      	ldr	r3, [sp, #4]
   13ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   13ea6:	4a0a      	ldr	r2, [pc, #40]	; (13ed0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   13ea8:	9b01      	ldr	r3, [sp, #4]
   13eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eae:	f003 0301 	and.w	r3, r3, #1
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d106      	bne.n	13ec4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   13eb6:	4a05      	ldr	r2, [pc, #20]	; (13ecc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   13eb8:	9b01      	ldr	r3, [sp, #4]
   13eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d100      	bne.n	13ec4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ec2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ec4:	bf00      	nop
   13ec6:	b003      	add	sp, #12
   13ec8:	f85d fb04 	ldr.w	pc, [sp], #4
   13ecc:	1fff9660 	.word	0x1fff9660
   13ed0:	1fff965c 	.word	0x1fff965c

00013ed4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   13ed4:	b500      	push	{lr}
   13ed6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ed8:	f7ed fad8 	bl	148c <Sys_GetCoreID>
   13edc:	4603      	mov	r3, r0
   13ede:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   13ee0:	4a10      	ldr	r2, [pc, #64]	; (13f24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   13ee2:	9b01      	ldr	r3, [sp, #4]
   13ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee8:	2b00      	cmp	r3, #0
   13eea:	d10d      	bne.n	13f08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13eec:	f7ec fd12 	bl	914 <Pwm_schm_read_msr>
   13ef0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ef2:	9b00      	ldr	r3, [sp, #0]
   13ef4:	f003 0301 	and.w	r3, r3, #1
   13ef8:	2b00      	cmp	r3, #0
   13efa:	d100      	bne.n	13efe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13efc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   13efe:	490a      	ldr	r1, [pc, #40]	; (13f28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   13f00:	9b01      	ldr	r3, [sp, #4]
   13f02:	9a00      	ldr	r2, [sp, #0]
   13f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   13f08:	4a06      	ldr	r2, [pc, #24]	; (13f24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   13f0a:	9b01      	ldr	r3, [sp, #4]
   13f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f10:	1c5a      	adds	r2, r3, #1
   13f12:	4904      	ldr	r1, [pc, #16]	; (13f24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   13f14:	9b01      	ldr	r3, [sp, #4]
   13f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f1a:	bf00      	nop
   13f1c:	b003      	add	sp, #12
   13f1e:	f85d fb04 	ldr.w	pc, [sp], #4
   13f22:	bf00      	nop
   13f24:	1fff9668 	.word	0x1fff9668
   13f28:	1fff9664 	.word	0x1fff9664

00013f2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   13f2c:	b500      	push	{lr}
   13f2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f30:	f7ed faac 	bl	148c <Sys_GetCoreID>
   13f34:	4603      	mov	r3, r0
   13f36:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   13f38:	4a0d      	ldr	r2, [pc, #52]	; (13f70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   13f3a:	9b01      	ldr	r3, [sp, #4]
   13f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f40:	1e5a      	subs	r2, r3, #1
   13f42:	490b      	ldr	r1, [pc, #44]	; (13f70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   13f44:	9b01      	ldr	r3, [sp, #4]
   13f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   13f4a:	4a0a      	ldr	r2, [pc, #40]	; (13f74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   13f4c:	9b01      	ldr	r3, [sp, #4]
   13f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f52:	f003 0301 	and.w	r3, r3, #1
   13f56:	2b00      	cmp	r3, #0
   13f58:	d106      	bne.n	13f68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   13f5a:	4a05      	ldr	r2, [pc, #20]	; (13f70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   13f5c:	9b01      	ldr	r3, [sp, #4]
   13f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f62:	2b00      	cmp	r3, #0
   13f64:	d100      	bne.n	13f68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f68:	bf00      	nop
   13f6a:	b003      	add	sp, #12
   13f6c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f70:	1fff9668 	.word	0x1fff9668
   13f74:	1fff9664 	.word	0x1fff9664

00013f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   13f78:	b500      	push	{lr}
   13f7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f7c:	f7ed fa86 	bl	148c <Sys_GetCoreID>
   13f80:	4603      	mov	r3, r0
   13f82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   13f84:	4a10      	ldr	r2, [pc, #64]	; (13fc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   13f86:	9b01      	ldr	r3, [sp, #4]
   13f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d10d      	bne.n	13fac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f90:	f7ec fcc0 	bl	914 <Pwm_schm_read_msr>
   13f94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f96:	9b00      	ldr	r3, [sp, #0]
   13f98:	f003 0301 	and.w	r3, r3, #1
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d100      	bne.n	13fa2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   13fa2:	490a      	ldr	r1, [pc, #40]	; (13fcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   13fa4:	9b01      	ldr	r3, [sp, #4]
   13fa6:	9a00      	ldr	r2, [sp, #0]
   13fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   13fac:	4a06      	ldr	r2, [pc, #24]	; (13fc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   13fae:	9b01      	ldr	r3, [sp, #4]
   13fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fb4:	1c5a      	adds	r2, r3, #1
   13fb6:	4904      	ldr	r1, [pc, #16]	; (13fc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   13fb8:	9b01      	ldr	r3, [sp, #4]
   13fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fbe:	bf00      	nop
   13fc0:	b003      	add	sp, #12
   13fc2:	f85d fb04 	ldr.w	pc, [sp], #4
   13fc6:	bf00      	nop
   13fc8:	1fff9670 	.word	0x1fff9670
   13fcc:	1fff966c 	.word	0x1fff966c

00013fd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   13fd0:	b500      	push	{lr}
   13fd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fd4:	f7ed fa5a 	bl	148c <Sys_GetCoreID>
   13fd8:	4603      	mov	r3, r0
   13fda:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   13fdc:	4a0d      	ldr	r2, [pc, #52]	; (14014 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   13fde:	9b01      	ldr	r3, [sp, #4]
   13fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fe4:	1e5a      	subs	r2, r3, #1
   13fe6:	490b      	ldr	r1, [pc, #44]	; (14014 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   13fe8:	9b01      	ldr	r3, [sp, #4]
   13fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   13fee:	4a0a      	ldr	r2, [pc, #40]	; (14018 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   13ff0:	9b01      	ldr	r3, [sp, #4]
   13ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff6:	f003 0301 	and.w	r3, r3, #1
   13ffa:	2b00      	cmp	r3, #0
   13ffc:	d106      	bne.n	1400c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   13ffe:	4a05      	ldr	r2, [pc, #20]	; (14014 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14000:	9b01      	ldr	r3, [sp, #4]
   14002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14006:	2b00      	cmp	r3, #0
   14008:	d100      	bne.n	1400c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1400a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1400c:	bf00      	nop
   1400e:	b003      	add	sp, #12
   14010:	f85d fb04 	ldr.w	pc, [sp], #4
   14014:	1fff9670 	.word	0x1fff9670
   14018:	1fff966c 	.word	0x1fff966c

0001401c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   1401c:	b500      	push	{lr}
   1401e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14020:	f7ed fa34 	bl	148c <Sys_GetCoreID>
   14024:	4603      	mov	r3, r0
   14026:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   14028:	4a10      	ldr	r2, [pc, #64]	; (1406c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   1402a:	9b01      	ldr	r3, [sp, #4]
   1402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14030:	2b00      	cmp	r3, #0
   14032:	d10d      	bne.n	14050 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14034:	f7ec fc6e 	bl	914 <Pwm_schm_read_msr>
   14038:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1403a:	9b00      	ldr	r3, [sp, #0]
   1403c:	f003 0301 	and.w	r3, r3, #1
   14040:	2b00      	cmp	r3, #0
   14042:	d100      	bne.n	14046 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14044:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14046:	490a      	ldr	r1, [pc, #40]	; (14070 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   14048:	9b01      	ldr	r3, [sp, #4]
   1404a:	9a00      	ldr	r2, [sp, #0]
   1404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   14050:	4a06      	ldr	r2, [pc, #24]	; (1406c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14052:	9b01      	ldr	r3, [sp, #4]
   14054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14058:	1c5a      	adds	r2, r3, #1
   1405a:	4904      	ldr	r1, [pc, #16]	; (1406c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14062:	bf00      	nop
   14064:	b003      	add	sp, #12
   14066:	f85d fb04 	ldr.w	pc, [sp], #4
   1406a:	bf00      	nop
   1406c:	1fff9678 	.word	0x1fff9678
   14070:	1fff9674 	.word	0x1fff9674

00014074 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14074:	b500      	push	{lr}
   14076:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14078:	f7ed fa08 	bl	148c <Sys_GetCoreID>
   1407c:	4603      	mov	r3, r0
   1407e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   14080:	4a0d      	ldr	r2, [pc, #52]	; (140b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14082:	9b01      	ldr	r3, [sp, #4]
   14084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14088:	1e5a      	subs	r2, r3, #1
   1408a:	490b      	ldr	r1, [pc, #44]	; (140b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   1408c:	9b01      	ldr	r3, [sp, #4]
   1408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14092:	4a0a      	ldr	r2, [pc, #40]	; (140bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   14094:	9b01      	ldr	r3, [sp, #4]
   14096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1409a:	f003 0301 	and.w	r3, r3, #1
   1409e:	2b00      	cmp	r3, #0
   140a0:	d106      	bne.n	140b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   140a2:	4a05      	ldr	r2, [pc, #20]	; (140b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   140a4:	9b01      	ldr	r3, [sp, #4]
   140a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140aa:	2b00      	cmp	r3, #0
   140ac:	d100      	bne.n	140b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140b0:	bf00      	nop
   140b2:	b003      	add	sp, #12
   140b4:	f85d fb04 	ldr.w	pc, [sp], #4
   140b8:	1fff9678 	.word	0x1fff9678
   140bc:	1fff9674 	.word	0x1fff9674

000140c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   140c0:	b500      	push	{lr}
   140c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140c4:	f7ed f9e2 	bl	148c <Sys_GetCoreID>
   140c8:	4603      	mov	r3, r0
   140ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   140cc:	4a10      	ldr	r2, [pc, #64]	; (14110 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   140ce:	9b01      	ldr	r3, [sp, #4]
   140d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140d4:	2b00      	cmp	r3, #0
   140d6:	d10d      	bne.n	140f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140d8:	f7ec fc1c 	bl	914 <Pwm_schm_read_msr>
   140dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140de:	9b00      	ldr	r3, [sp, #0]
   140e0:	f003 0301 	and.w	r3, r3, #1
   140e4:	2b00      	cmp	r3, #0
   140e6:	d100      	bne.n	140ea <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   140ea:	490a      	ldr	r1, [pc, #40]	; (14114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   140ec:	9b01      	ldr	r3, [sp, #4]
   140ee:	9a00      	ldr	r2, [sp, #0]
   140f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   140f4:	4a06      	ldr	r2, [pc, #24]	; (14110 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   140f6:	9b01      	ldr	r3, [sp, #4]
   140f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140fc:	1c5a      	adds	r2, r3, #1
   140fe:	4904      	ldr	r1, [pc, #16]	; (14110 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14100:	9b01      	ldr	r3, [sp, #4]
   14102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14106:	bf00      	nop
   14108:	b003      	add	sp, #12
   1410a:	f85d fb04 	ldr.w	pc, [sp], #4
   1410e:	bf00      	nop
   14110:	1fff9680 	.word	0x1fff9680
   14114:	1fff967c 	.word	0x1fff967c

00014118 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14118:	b500      	push	{lr}
   1411a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1411c:	f7ed f9b6 	bl	148c <Sys_GetCoreID>
   14120:	4603      	mov	r3, r0
   14122:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   14124:	4a0d      	ldr	r2, [pc, #52]	; (1415c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14126:	9b01      	ldr	r3, [sp, #4]
   14128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1412c:	1e5a      	subs	r2, r3, #1
   1412e:	490b      	ldr	r1, [pc, #44]	; (1415c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14130:	9b01      	ldr	r3, [sp, #4]
   14132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14136:	4a0a      	ldr	r2, [pc, #40]	; (14160 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   14138:	9b01      	ldr	r3, [sp, #4]
   1413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1413e:	f003 0301 	and.w	r3, r3, #1
   14142:	2b00      	cmp	r3, #0
   14144:	d106      	bne.n	14154 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   14146:	4a05      	ldr	r2, [pc, #20]	; (1415c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14148:	9b01      	ldr	r3, [sp, #4]
   1414a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1414e:	2b00      	cmp	r3, #0
   14150:	d100      	bne.n	14154 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14152:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14154:	bf00      	nop
   14156:	b003      	add	sp, #12
   14158:	f85d fb04 	ldr.w	pc, [sp], #4
   1415c:	1fff9680 	.word	0x1fff9680
   14160:	1fff967c 	.word	0x1fff967c

00014164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14164:	b500      	push	{lr}
   14166:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14168:	f7ed f990 	bl	148c <Sys_GetCoreID>
   1416c:	4603      	mov	r3, r0
   1416e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   14170:	4a10      	ldr	r2, [pc, #64]	; (141b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14172:	9b01      	ldr	r3, [sp, #4]
   14174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14178:	2b00      	cmp	r3, #0
   1417a:	d10d      	bne.n	14198 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1417c:	f7ec fbca 	bl	914 <Pwm_schm_read_msr>
   14180:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14182:	9b00      	ldr	r3, [sp, #0]
   14184:	f003 0301 	and.w	r3, r3, #1
   14188:	2b00      	cmp	r3, #0
   1418a:	d100      	bne.n	1418e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1418c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1418e:	490a      	ldr	r1, [pc, #40]	; (141b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   14190:	9b01      	ldr	r3, [sp, #4]
   14192:	9a00      	ldr	r2, [sp, #0]
   14194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   14198:	4a06      	ldr	r2, [pc, #24]	; (141b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   1419a:	9b01      	ldr	r3, [sp, #4]
   1419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a0:	1c5a      	adds	r2, r3, #1
   141a2:	4904      	ldr	r1, [pc, #16]	; (141b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   141a4:	9b01      	ldr	r3, [sp, #4]
   141a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141aa:	bf00      	nop
   141ac:	b003      	add	sp, #12
   141ae:	f85d fb04 	ldr.w	pc, [sp], #4
   141b2:	bf00      	nop
   141b4:	1fff9688 	.word	0x1fff9688
   141b8:	1fff9684 	.word	0x1fff9684

000141bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   141bc:	b500      	push	{lr}
   141be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141c0:	f7ed f964 	bl	148c <Sys_GetCoreID>
   141c4:	4603      	mov	r3, r0
   141c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   141c8:	4a0d      	ldr	r2, [pc, #52]	; (14200 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   141ca:	9b01      	ldr	r3, [sp, #4]
   141cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141d0:	1e5a      	subs	r2, r3, #1
   141d2:	490b      	ldr	r1, [pc, #44]	; (14200 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   141d4:	9b01      	ldr	r3, [sp, #4]
   141d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   141da:	4a0a      	ldr	r2, [pc, #40]	; (14204 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   141dc:	9b01      	ldr	r3, [sp, #4]
   141de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141e2:	f003 0301 	and.w	r3, r3, #1
   141e6:	2b00      	cmp	r3, #0
   141e8:	d106      	bne.n	141f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   141ea:	4a05      	ldr	r2, [pc, #20]	; (14200 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   141ec:	9b01      	ldr	r3, [sp, #4]
   141ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141f2:	2b00      	cmp	r3, #0
   141f4:	d100      	bne.n	141f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141f8:	bf00      	nop
   141fa:	b003      	add	sp, #12
   141fc:	f85d fb04 	ldr.w	pc, [sp], #4
   14200:	1fff9688 	.word	0x1fff9688
   14204:	1fff9684 	.word	0x1fff9684

00014208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14208:	b500      	push	{lr}
   1420a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1420c:	f7ed f93e 	bl	148c <Sys_GetCoreID>
   14210:	4603      	mov	r3, r0
   14212:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   14214:	4a10      	ldr	r2, [pc, #64]	; (14258 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14216:	9b01      	ldr	r3, [sp, #4]
   14218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1421c:	2b00      	cmp	r3, #0
   1421e:	d10d      	bne.n	1423c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14220:	f7ec fb78 	bl	914 <Pwm_schm_read_msr>
   14224:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14226:	9b00      	ldr	r3, [sp, #0]
   14228:	f003 0301 	and.w	r3, r3, #1
   1422c:	2b00      	cmp	r3, #0
   1422e:	d100      	bne.n	14232 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14230:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14232:	490a      	ldr	r1, [pc, #40]	; (1425c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   14234:	9b01      	ldr	r3, [sp, #4]
   14236:	9a00      	ldr	r2, [sp, #0]
   14238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   1423c:	4a06      	ldr	r2, [pc, #24]	; (14258 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   1423e:	9b01      	ldr	r3, [sp, #4]
   14240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14244:	1c5a      	adds	r2, r3, #1
   14246:	4904      	ldr	r1, [pc, #16]	; (14258 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1424e:	bf00      	nop
   14250:	b003      	add	sp, #12
   14252:	f85d fb04 	ldr.w	pc, [sp], #4
   14256:	bf00      	nop
   14258:	1fff9690 	.word	0x1fff9690
   1425c:	1fff968c 	.word	0x1fff968c

00014260 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14260:	b500      	push	{lr}
   14262:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14264:	f7ed f912 	bl	148c <Sys_GetCoreID>
   14268:	4603      	mov	r3, r0
   1426a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   1426c:	4a0d      	ldr	r2, [pc, #52]	; (142a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   1426e:	9b01      	ldr	r3, [sp, #4]
   14270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14274:	1e5a      	subs	r2, r3, #1
   14276:	490b      	ldr	r1, [pc, #44]	; (142a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14278:	9b01      	ldr	r3, [sp, #4]
   1427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1427e:	4a0a      	ldr	r2, [pc, #40]	; (142a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   14280:	9b01      	ldr	r3, [sp, #4]
   14282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14286:	f003 0301 	and.w	r3, r3, #1
   1428a:	2b00      	cmp	r3, #0
   1428c:	d106      	bne.n	1429c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   1428e:	4a05      	ldr	r2, [pc, #20]	; (142a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14290:	9b01      	ldr	r3, [sp, #4]
   14292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14296:	2b00      	cmp	r3, #0
   14298:	d100      	bne.n	1429c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1429a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1429c:	bf00      	nop
   1429e:	b003      	add	sp, #12
   142a0:	f85d fb04 	ldr.w	pc, [sp], #4
   142a4:	1fff9690 	.word	0x1fff9690
   142a8:	1fff968c 	.word	0x1fff968c

000142ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   142ac:	b500      	push	{lr}
   142ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142b0:	f7ed f8ec 	bl	148c <Sys_GetCoreID>
   142b4:	4603      	mov	r3, r0
   142b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   142b8:	4a10      	ldr	r2, [pc, #64]	; (142fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   142ba:	9b01      	ldr	r3, [sp, #4]
   142bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142c0:	2b00      	cmp	r3, #0
   142c2:	d10d      	bne.n	142e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142c4:	f7ec fb26 	bl	914 <Pwm_schm_read_msr>
   142c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142ca:	9b00      	ldr	r3, [sp, #0]
   142cc:	f003 0301 	and.w	r3, r3, #1
   142d0:	2b00      	cmp	r3, #0
   142d2:	d100      	bne.n	142d6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   142d6:	490a      	ldr	r1, [pc, #40]	; (14300 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   142d8:	9b01      	ldr	r3, [sp, #4]
   142da:	9a00      	ldr	r2, [sp, #0]
   142dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   142e0:	4a06      	ldr	r2, [pc, #24]	; (142fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   142e2:	9b01      	ldr	r3, [sp, #4]
   142e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142e8:	1c5a      	adds	r2, r3, #1
   142ea:	4904      	ldr	r1, [pc, #16]	; (142fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   142ec:	9b01      	ldr	r3, [sp, #4]
   142ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142f2:	bf00      	nop
   142f4:	b003      	add	sp, #12
   142f6:	f85d fb04 	ldr.w	pc, [sp], #4
   142fa:	bf00      	nop
   142fc:	1fff9698 	.word	0x1fff9698
   14300:	1fff9694 	.word	0x1fff9694

00014304 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   14304:	b500      	push	{lr}
   14306:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14308:	f7ed f8c0 	bl	148c <Sys_GetCoreID>
   1430c:	4603      	mov	r3, r0
   1430e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   14310:	4a0d      	ldr	r2, [pc, #52]	; (14348 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   14312:	9b01      	ldr	r3, [sp, #4]
   14314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14318:	1e5a      	subs	r2, r3, #1
   1431a:	490b      	ldr	r1, [pc, #44]	; (14348 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   1431c:	9b01      	ldr	r3, [sp, #4]
   1431e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   14322:	4a0a      	ldr	r2, [pc, #40]	; (1434c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1432a:	f003 0301 	and.w	r3, r3, #1
   1432e:	2b00      	cmp	r3, #0
   14330:	d106      	bne.n	14340 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   14332:	4a05      	ldr	r2, [pc, #20]	; (14348 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   14334:	9b01      	ldr	r3, [sp, #4]
   14336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1433a:	2b00      	cmp	r3, #0
   1433c:	d100      	bne.n	14340 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1433e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14340:	bf00      	nop
   14342:	b003      	add	sp, #12
   14344:	f85d fb04 	ldr.w	pc, [sp], #4
   14348:	1fff9698 	.word	0x1fff9698
   1434c:	1fff9694 	.word	0x1fff9694

00014350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   14350:	b500      	push	{lr}
   14352:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14354:	f7ed f89a 	bl	148c <Sys_GetCoreID>
   14358:	4603      	mov	r3, r0
   1435a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   1435c:	4a10      	ldr	r2, [pc, #64]	; (143a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   1435e:	9b01      	ldr	r3, [sp, #4]
   14360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14364:	2b00      	cmp	r3, #0
   14366:	d10d      	bne.n	14384 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14368:	f7ec fad4 	bl	914 <Pwm_schm_read_msr>
   1436c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1436e:	9b00      	ldr	r3, [sp, #0]
   14370:	f003 0301 	and.w	r3, r3, #1
   14374:	2b00      	cmp	r3, #0
   14376:	d100      	bne.n	1437a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14378:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1437a:	490a      	ldr	r1, [pc, #40]	; (143a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   1437c:	9b01      	ldr	r3, [sp, #4]
   1437e:	9a00      	ldr	r2, [sp, #0]
   14380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   14384:	4a06      	ldr	r2, [pc, #24]	; (143a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   14386:	9b01      	ldr	r3, [sp, #4]
   14388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1438c:	1c5a      	adds	r2, r3, #1
   1438e:	4904      	ldr	r1, [pc, #16]	; (143a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   14390:	9b01      	ldr	r3, [sp, #4]
   14392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14396:	bf00      	nop
   14398:	b003      	add	sp, #12
   1439a:	f85d fb04 	ldr.w	pc, [sp], #4
   1439e:	bf00      	nop
   143a0:	1fff96a0 	.word	0x1fff96a0
   143a4:	1fff969c 	.word	0x1fff969c

000143a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   143a8:	b500      	push	{lr}
   143aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143ac:	f7ed f86e 	bl	148c <Sys_GetCoreID>
   143b0:	4603      	mov	r3, r0
   143b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   143b4:	4a0d      	ldr	r2, [pc, #52]	; (143ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   143b6:	9b01      	ldr	r3, [sp, #4]
   143b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143bc:	1e5a      	subs	r2, r3, #1
   143be:	490b      	ldr	r1, [pc, #44]	; (143ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   143c0:	9b01      	ldr	r3, [sp, #4]
   143c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   143c6:	4a0a      	ldr	r2, [pc, #40]	; (143f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   143c8:	9b01      	ldr	r3, [sp, #4]
   143ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ce:	f003 0301 	and.w	r3, r3, #1
   143d2:	2b00      	cmp	r3, #0
   143d4:	d106      	bne.n	143e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   143d6:	4a05      	ldr	r2, [pc, #20]	; (143ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   143d8:	9b01      	ldr	r3, [sp, #4]
   143da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143de:	2b00      	cmp	r3, #0
   143e0:	d100      	bne.n	143e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143e4:	bf00      	nop
   143e6:	b003      	add	sp, #12
   143e8:	f85d fb04 	ldr.w	pc, [sp], #4
   143ec:	1fff96a0 	.word	0x1fff96a0
   143f0:	1fff969c 	.word	0x1fff969c

000143f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   143f4:	b500      	push	{lr}
   143f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143f8:	f7ed f848 	bl	148c <Sys_GetCoreID>
   143fc:	4603      	mov	r3, r0
   143fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   14400:	4a10      	ldr	r2, [pc, #64]	; (14444 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   14402:	9b01      	ldr	r3, [sp, #4]
   14404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14408:	2b00      	cmp	r3, #0
   1440a:	d10d      	bne.n	14428 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1440c:	f7ec fa82 	bl	914 <Pwm_schm_read_msr>
   14410:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14412:	9b00      	ldr	r3, [sp, #0]
   14414:	f003 0301 	and.w	r3, r3, #1
   14418:	2b00      	cmp	r3, #0
   1441a:	d100      	bne.n	1441e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1441c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1441e:	490a      	ldr	r1, [pc, #40]	; (14448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   14420:	9b01      	ldr	r3, [sp, #4]
   14422:	9a00      	ldr	r2, [sp, #0]
   14424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   14428:	4a06      	ldr	r2, [pc, #24]	; (14444 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   1442a:	9b01      	ldr	r3, [sp, #4]
   1442c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14430:	1c5a      	adds	r2, r3, #1
   14432:	4904      	ldr	r1, [pc, #16]	; (14444 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   14434:	9b01      	ldr	r3, [sp, #4]
   14436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1443a:	bf00      	nop
   1443c:	b003      	add	sp, #12
   1443e:	f85d fb04 	ldr.w	pc, [sp], #4
   14442:	bf00      	nop
   14444:	1fff96a8 	.word	0x1fff96a8
   14448:	1fff96a4 	.word	0x1fff96a4

0001444c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   1444c:	b500      	push	{lr}
   1444e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14450:	f7ed f81c 	bl	148c <Sys_GetCoreID>
   14454:	4603      	mov	r3, r0
   14456:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   14458:	4a0d      	ldr	r2, [pc, #52]	; (14490 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   1445a:	9b01      	ldr	r3, [sp, #4]
   1445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14460:	1e5a      	subs	r2, r3, #1
   14462:	490b      	ldr	r1, [pc, #44]	; (14490 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   14464:	9b01      	ldr	r3, [sp, #4]
   14466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1446a:	4a0a      	ldr	r2, [pc, #40]	; (14494 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14472:	f003 0301 	and.w	r3, r3, #1
   14476:	2b00      	cmp	r3, #0
   14478:	d106      	bne.n	14488 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   1447a:	4a05      	ldr	r2, [pc, #20]	; (14490 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   1447c:	9b01      	ldr	r3, [sp, #4]
   1447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14482:	2b00      	cmp	r3, #0
   14484:	d100      	bne.n	14488 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14486:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14488:	bf00      	nop
   1448a:	b003      	add	sp, #12
   1448c:	f85d fb04 	ldr.w	pc, [sp], #4
   14490:	1fff96a8 	.word	0x1fff96a8
   14494:	1fff96a4 	.word	0x1fff96a4

00014498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   14498:	b500      	push	{lr}
   1449a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1449c:	f7ec fff6 	bl	148c <Sys_GetCoreID>
   144a0:	4603      	mov	r3, r0
   144a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   144a4:	4a10      	ldr	r2, [pc, #64]	; (144e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   144a6:	9b01      	ldr	r3, [sp, #4]
   144a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ac:	2b00      	cmp	r3, #0
   144ae:	d10d      	bne.n	144cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144b0:	f7ec fa30 	bl	914 <Pwm_schm_read_msr>
   144b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144b6:	9b00      	ldr	r3, [sp, #0]
   144b8:	f003 0301 	and.w	r3, r3, #1
   144bc:	2b00      	cmp	r3, #0
   144be:	d100      	bne.n	144c2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   144c2:	490a      	ldr	r1, [pc, #40]	; (144ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   144c4:	9b01      	ldr	r3, [sp, #4]
   144c6:	9a00      	ldr	r2, [sp, #0]
   144c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   144cc:	4a06      	ldr	r2, [pc, #24]	; (144e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   144ce:	9b01      	ldr	r3, [sp, #4]
   144d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144d4:	1c5a      	adds	r2, r3, #1
   144d6:	4904      	ldr	r1, [pc, #16]	; (144e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   144d8:	9b01      	ldr	r3, [sp, #4]
   144da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144de:	bf00      	nop
   144e0:	b003      	add	sp, #12
   144e2:	f85d fb04 	ldr.w	pc, [sp], #4
   144e6:	bf00      	nop
   144e8:	1fff96b0 	.word	0x1fff96b0
   144ec:	1fff96ac 	.word	0x1fff96ac

000144f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   144f0:	b500      	push	{lr}
   144f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144f4:	f7ec ffca 	bl	148c <Sys_GetCoreID>
   144f8:	4603      	mov	r3, r0
   144fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   144fc:	4a0d      	ldr	r2, [pc, #52]	; (14534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   144fe:	9b01      	ldr	r3, [sp, #4]
   14500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14504:	1e5a      	subs	r2, r3, #1
   14506:	490b      	ldr	r1, [pc, #44]	; (14534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1450e:	4a0a      	ldr	r2, [pc, #40]	; (14538 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   14510:	9b01      	ldr	r3, [sp, #4]
   14512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14516:	f003 0301 	and.w	r3, r3, #1
   1451a:	2b00      	cmp	r3, #0
   1451c:	d106      	bne.n	1452c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   1451e:	4a05      	ldr	r2, [pc, #20]	; (14534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   14520:	9b01      	ldr	r3, [sp, #4]
   14522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14526:	2b00      	cmp	r3, #0
   14528:	d100      	bne.n	1452c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1452a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1452c:	bf00      	nop
   1452e:	b003      	add	sp, #12
   14530:	f85d fb04 	ldr.w	pc, [sp], #4
   14534:	1fff96b0 	.word	0x1fff96b0
   14538:	1fff96ac 	.word	0x1fff96ac

0001453c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   1453c:	b500      	push	{lr}
   1453e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14540:	f7ec ffa4 	bl	148c <Sys_GetCoreID>
   14544:	4603      	mov	r3, r0
   14546:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   14548:	4a10      	ldr	r2, [pc, #64]	; (1458c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1454a:	9b01      	ldr	r3, [sp, #4]
   1454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14550:	2b00      	cmp	r3, #0
   14552:	d10d      	bne.n	14570 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14554:	f7ec f9de 	bl	914 <Pwm_schm_read_msr>
   14558:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1455a:	9b00      	ldr	r3, [sp, #0]
   1455c:	f003 0301 	and.w	r3, r3, #1
   14560:	2b00      	cmp	r3, #0
   14562:	d100      	bne.n	14566 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14564:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   14566:	490a      	ldr	r1, [pc, #40]	; (14590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   14568:	9b01      	ldr	r3, [sp, #4]
   1456a:	9a00      	ldr	r2, [sp, #0]
   1456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   14570:	4a06      	ldr	r2, [pc, #24]	; (1458c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   14572:	9b01      	ldr	r3, [sp, #4]
   14574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14578:	1c5a      	adds	r2, r3, #1
   1457a:	4904      	ldr	r1, [pc, #16]	; (1458c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1457c:	9b01      	ldr	r3, [sp, #4]
   1457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14582:	bf00      	nop
   14584:	b003      	add	sp, #12
   14586:	f85d fb04 	ldr.w	pc, [sp], #4
   1458a:	bf00      	nop
   1458c:	1fff96b8 	.word	0x1fff96b8
   14590:	1fff96b4 	.word	0x1fff96b4

00014594 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   14594:	b500      	push	{lr}
   14596:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14598:	f7ec ff78 	bl	148c <Sys_GetCoreID>
   1459c:	4603      	mov	r3, r0
   1459e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   145a0:	4a0d      	ldr	r2, [pc, #52]	; (145d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   145a2:	9b01      	ldr	r3, [sp, #4]
   145a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145a8:	1e5a      	subs	r2, r3, #1
   145aa:	490b      	ldr	r1, [pc, #44]	; (145d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   145ac:	9b01      	ldr	r3, [sp, #4]
   145ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   145b2:	4a0a      	ldr	r2, [pc, #40]	; (145dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ba:	f003 0301 	and.w	r3, r3, #1
   145be:	2b00      	cmp	r3, #0
   145c0:	d106      	bne.n	145d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   145c2:	4a05      	ldr	r2, [pc, #20]	; (145d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   145c4:	9b01      	ldr	r3, [sp, #4]
   145c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ca:	2b00      	cmp	r3, #0
   145cc:	d100      	bne.n	145d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145d0:	bf00      	nop
   145d2:	b003      	add	sp, #12
   145d4:	f85d fb04 	ldr.w	pc, [sp], #4
   145d8:	1fff96b8 	.word	0x1fff96b8
   145dc:	1fff96b4 	.word	0x1fff96b4

000145e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   145e0:	b500      	push	{lr}
   145e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145e4:	f7ec ff52 	bl	148c <Sys_GetCoreID>
   145e8:	4603      	mov	r3, r0
   145ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   145ec:	4a10      	ldr	r2, [pc, #64]	; (14630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   145ee:	9b01      	ldr	r3, [sp, #4]
   145f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145f4:	2b00      	cmp	r3, #0
   145f6:	d10d      	bne.n	14614 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145f8:	f7ec f98c 	bl	914 <Pwm_schm_read_msr>
   145fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145fe:	9b00      	ldr	r3, [sp, #0]
   14600:	f003 0301 	and.w	r3, r3, #1
   14604:	2b00      	cmp	r3, #0
   14606:	d100      	bne.n	1460a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14608:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1460a:	490a      	ldr	r1, [pc, #40]	; (14634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   1460c:	9b01      	ldr	r3, [sp, #4]
   1460e:	9a00      	ldr	r2, [sp, #0]
   14610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   14614:	4a06      	ldr	r2, [pc, #24]	; (14630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   14616:	9b01      	ldr	r3, [sp, #4]
   14618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1461c:	1c5a      	adds	r2, r3, #1
   1461e:	4904      	ldr	r1, [pc, #16]	; (14630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   14620:	9b01      	ldr	r3, [sp, #4]
   14622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14626:	bf00      	nop
   14628:	b003      	add	sp, #12
   1462a:	f85d fb04 	ldr.w	pc, [sp], #4
   1462e:	bf00      	nop
   14630:	1fff96c0 	.word	0x1fff96c0
   14634:	1fff96bc 	.word	0x1fff96bc

00014638 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   14638:	b500      	push	{lr}
   1463a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1463c:	f7ec ff26 	bl	148c <Sys_GetCoreID>
   14640:	4603      	mov	r3, r0
   14642:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   14644:	4a0d      	ldr	r2, [pc, #52]	; (1467c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   14646:	9b01      	ldr	r3, [sp, #4]
   14648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1464c:	1e5a      	subs	r2, r3, #1
   1464e:	490b      	ldr	r1, [pc, #44]	; (1467c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   14650:	9b01      	ldr	r3, [sp, #4]
   14652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   14656:	4a0a      	ldr	r2, [pc, #40]	; (14680 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1465e:	f003 0301 	and.w	r3, r3, #1
   14662:	2b00      	cmp	r3, #0
   14664:	d106      	bne.n	14674 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   14666:	4a05      	ldr	r2, [pc, #20]	; (1467c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   14668:	9b01      	ldr	r3, [sp, #4]
   1466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1466e:	2b00      	cmp	r3, #0
   14670:	d100      	bne.n	14674 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14672:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14674:	bf00      	nop
   14676:	b003      	add	sp, #12
   14678:	f85d fb04 	ldr.w	pc, [sp], #4
   1467c:	1fff96c0 	.word	0x1fff96c0
   14680:	1fff96bc 	.word	0x1fff96bc

00014684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   14684:	b500      	push	{lr}
   14686:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14688:	f7ec ff00 	bl	148c <Sys_GetCoreID>
   1468c:	4603      	mov	r3, r0
   1468e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   14690:	4a10      	ldr	r2, [pc, #64]	; (146d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   14692:	9b01      	ldr	r3, [sp, #4]
   14694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14698:	2b00      	cmp	r3, #0
   1469a:	d10d      	bne.n	146b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1469c:	f7ec f93a 	bl	914 <Pwm_schm_read_msr>
   146a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146a2:	9b00      	ldr	r3, [sp, #0]
   146a4:	f003 0301 	and.w	r3, r3, #1
   146a8:	2b00      	cmp	r3, #0
   146aa:	d100      	bne.n	146ae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   146ae:	490a      	ldr	r1, [pc, #40]	; (146d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   146b0:	9b01      	ldr	r3, [sp, #4]
   146b2:	9a00      	ldr	r2, [sp, #0]
   146b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   146b8:	4a06      	ldr	r2, [pc, #24]	; (146d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   146ba:	9b01      	ldr	r3, [sp, #4]
   146bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c0:	1c5a      	adds	r2, r3, #1
   146c2:	4904      	ldr	r1, [pc, #16]	; (146d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   146c4:	9b01      	ldr	r3, [sp, #4]
   146c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146ca:	bf00      	nop
   146cc:	b003      	add	sp, #12
   146ce:	f85d fb04 	ldr.w	pc, [sp], #4
   146d2:	bf00      	nop
   146d4:	1fff96c8 	.word	0x1fff96c8
   146d8:	1fff96c4 	.word	0x1fff96c4

000146dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   146dc:	b500      	push	{lr}
   146de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146e0:	f7ec fed4 	bl	148c <Sys_GetCoreID>
   146e4:	4603      	mov	r3, r0
   146e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   146e8:	4a0d      	ldr	r2, [pc, #52]	; (14720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   146ea:	9b01      	ldr	r3, [sp, #4]
   146ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146f0:	1e5a      	subs	r2, r3, #1
   146f2:	490b      	ldr	r1, [pc, #44]	; (14720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   146f4:	9b01      	ldr	r3, [sp, #4]
   146f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   146fa:	4a0a      	ldr	r2, [pc, #40]	; (14724 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14702:	f003 0301 	and.w	r3, r3, #1
   14706:	2b00      	cmp	r3, #0
   14708:	d106      	bne.n	14718 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   1470a:	4a05      	ldr	r2, [pc, #20]	; (14720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   1470c:	9b01      	ldr	r3, [sp, #4]
   1470e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14712:	2b00      	cmp	r3, #0
   14714:	d100      	bne.n	14718 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14716:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14718:	bf00      	nop
   1471a:	b003      	add	sp, #12
   1471c:	f85d fb04 	ldr.w	pc, [sp], #4
   14720:	1fff96c8 	.word	0x1fff96c8
   14724:	1fff96c4 	.word	0x1fff96c4

00014728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   14728:	b500      	push	{lr}
   1472a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1472c:	f7ec feae 	bl	148c <Sys_GetCoreID>
   14730:	4603      	mov	r3, r0
   14732:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   14734:	4a10      	ldr	r2, [pc, #64]	; (14778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   14736:	9b01      	ldr	r3, [sp, #4]
   14738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1473c:	2b00      	cmp	r3, #0
   1473e:	d10d      	bne.n	1475c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14740:	f7ec f8e8 	bl	914 <Pwm_schm_read_msr>
   14744:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14746:	9b00      	ldr	r3, [sp, #0]
   14748:	f003 0301 	and.w	r3, r3, #1
   1474c:	2b00      	cmp	r3, #0
   1474e:	d100      	bne.n	14752 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14750:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   14752:	490a      	ldr	r1, [pc, #40]	; (1477c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   14754:	9b01      	ldr	r3, [sp, #4]
   14756:	9a00      	ldr	r2, [sp, #0]
   14758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   1475c:	4a06      	ldr	r2, [pc, #24]	; (14778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1475e:	9b01      	ldr	r3, [sp, #4]
   14760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14764:	1c5a      	adds	r2, r3, #1
   14766:	4904      	ldr	r1, [pc, #16]	; (14778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   14768:	9b01      	ldr	r3, [sp, #4]
   1476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1476e:	bf00      	nop
   14770:	b003      	add	sp, #12
   14772:	f85d fb04 	ldr.w	pc, [sp], #4
   14776:	bf00      	nop
   14778:	1fff96d0 	.word	0x1fff96d0
   1477c:	1fff96cc 	.word	0x1fff96cc

00014780 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   14780:	b500      	push	{lr}
   14782:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14784:	f7ec fe82 	bl	148c <Sys_GetCoreID>
   14788:	4603      	mov	r3, r0
   1478a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   1478c:	4a0d      	ldr	r2, [pc, #52]	; (147c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   1478e:	9b01      	ldr	r3, [sp, #4]
   14790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14794:	1e5a      	subs	r2, r3, #1
   14796:	490b      	ldr	r1, [pc, #44]	; (147c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   14798:	9b01      	ldr	r3, [sp, #4]
   1479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1479e:	4a0a      	ldr	r2, [pc, #40]	; (147c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a6:	f003 0301 	and.w	r3, r3, #1
   147aa:	2b00      	cmp	r3, #0
   147ac:	d106      	bne.n	147bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   147ae:	4a05      	ldr	r2, [pc, #20]	; (147c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   147b0:	9b01      	ldr	r3, [sp, #4]
   147b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147b6:	2b00      	cmp	r3, #0
   147b8:	d100      	bne.n	147bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147bc:	bf00      	nop
   147be:	b003      	add	sp, #12
   147c0:	f85d fb04 	ldr.w	pc, [sp], #4
   147c4:	1fff96d0 	.word	0x1fff96d0
   147c8:	1fff96cc 	.word	0x1fff96cc

000147cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   147cc:	b500      	push	{lr}
   147ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147d0:	f7ec fe5c 	bl	148c <Sys_GetCoreID>
   147d4:	4603      	mov	r3, r0
   147d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   147d8:	4a10      	ldr	r2, [pc, #64]	; (1481c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   147da:	9b01      	ldr	r3, [sp, #4]
   147dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147e0:	2b00      	cmp	r3, #0
   147e2:	d10d      	bne.n	14800 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147e4:	f7ec f896 	bl	914 <Pwm_schm_read_msr>
   147e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147ea:	9b00      	ldr	r3, [sp, #0]
   147ec:	f003 0301 	and.w	r3, r3, #1
   147f0:	2b00      	cmp	r3, #0
   147f2:	d100      	bne.n	147f6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   147f6:	490a      	ldr	r1, [pc, #40]	; (14820 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   147f8:	9b01      	ldr	r3, [sp, #4]
   147fa:	9a00      	ldr	r2, [sp, #0]
   147fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   14800:	4a06      	ldr	r2, [pc, #24]	; (1481c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   14802:	9b01      	ldr	r3, [sp, #4]
   14804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14808:	1c5a      	adds	r2, r3, #1
   1480a:	4904      	ldr	r1, [pc, #16]	; (1481c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   1480c:	9b01      	ldr	r3, [sp, #4]
   1480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14812:	bf00      	nop
   14814:	b003      	add	sp, #12
   14816:	f85d fb04 	ldr.w	pc, [sp], #4
   1481a:	bf00      	nop
   1481c:	1fff96d8 	.word	0x1fff96d8
   14820:	1fff96d4 	.word	0x1fff96d4

00014824 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   14824:	b500      	push	{lr}
   14826:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14828:	f7ec fe30 	bl	148c <Sys_GetCoreID>
   1482c:	4603      	mov	r3, r0
   1482e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   14830:	4a0d      	ldr	r2, [pc, #52]	; (14868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   14832:	9b01      	ldr	r3, [sp, #4]
   14834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14838:	1e5a      	subs	r2, r3, #1
   1483a:	490b      	ldr	r1, [pc, #44]	; (14868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   1483c:	9b01      	ldr	r3, [sp, #4]
   1483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   14842:	4a0a      	ldr	r2, [pc, #40]	; (1486c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1484a:	f003 0301 	and.w	r3, r3, #1
   1484e:	2b00      	cmp	r3, #0
   14850:	d106      	bne.n	14860 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   14852:	4a05      	ldr	r2, [pc, #20]	; (14868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   14854:	9b01      	ldr	r3, [sp, #4]
   14856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1485a:	2b00      	cmp	r3, #0
   1485c:	d100      	bne.n	14860 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1485e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14860:	bf00      	nop
   14862:	b003      	add	sp, #12
   14864:	f85d fb04 	ldr.w	pc, [sp], #4
   14868:	1fff96d8 	.word	0x1fff96d8
   1486c:	1fff96d4 	.word	0x1fff96d4

00014870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   14870:	b500      	push	{lr}
   14872:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14874:	f7ec fe0a 	bl	148c <Sys_GetCoreID>
   14878:	4603      	mov	r3, r0
   1487a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   1487c:	4a10      	ldr	r2, [pc, #64]	; (148c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   1487e:	9b01      	ldr	r3, [sp, #4]
   14880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14884:	2b00      	cmp	r3, #0
   14886:	d10d      	bne.n	148a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14888:	f7ec f844 	bl	914 <Pwm_schm_read_msr>
   1488c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1488e:	9b00      	ldr	r3, [sp, #0]
   14890:	f003 0301 	and.w	r3, r3, #1
   14894:	2b00      	cmp	r3, #0
   14896:	d100      	bne.n	1489a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14898:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1489a:	490a      	ldr	r1, [pc, #40]	; (148c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   1489c:	9b01      	ldr	r3, [sp, #4]
   1489e:	9a00      	ldr	r2, [sp, #0]
   148a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   148a4:	4a06      	ldr	r2, [pc, #24]	; (148c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   148a6:	9b01      	ldr	r3, [sp, #4]
   148a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ac:	1c5a      	adds	r2, r3, #1
   148ae:	4904      	ldr	r1, [pc, #16]	; (148c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148b6:	bf00      	nop
   148b8:	b003      	add	sp, #12
   148ba:	f85d fb04 	ldr.w	pc, [sp], #4
   148be:	bf00      	nop
   148c0:	1fff96e0 	.word	0x1fff96e0
   148c4:	1fff96dc 	.word	0x1fff96dc

000148c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   148c8:	b500      	push	{lr}
   148ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148cc:	f7ec fdde 	bl	148c <Sys_GetCoreID>
   148d0:	4603      	mov	r3, r0
   148d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   148d4:	4a0d      	ldr	r2, [pc, #52]	; (1490c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   148d6:	9b01      	ldr	r3, [sp, #4]
   148d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148dc:	1e5a      	subs	r2, r3, #1
   148de:	490b      	ldr	r1, [pc, #44]	; (1490c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   148e0:	9b01      	ldr	r3, [sp, #4]
   148e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   148e6:	4a0a      	ldr	r2, [pc, #40]	; (14910 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   148e8:	9b01      	ldr	r3, [sp, #4]
   148ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ee:	f003 0301 	and.w	r3, r3, #1
   148f2:	2b00      	cmp	r3, #0
   148f4:	d106      	bne.n	14904 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   148f6:	4a05      	ldr	r2, [pc, #20]	; (1490c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   148f8:	9b01      	ldr	r3, [sp, #4]
   148fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148fe:	2b00      	cmp	r3, #0
   14900:	d100      	bne.n	14904 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14902:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14904:	bf00      	nop
   14906:	b003      	add	sp, #12
   14908:	f85d fb04 	ldr.w	pc, [sp], #4
   1490c:	1fff96e0 	.word	0x1fff96e0
   14910:	1fff96dc 	.word	0x1fff96dc

00014914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   14914:	b500      	push	{lr}
   14916:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14918:	f7ec fdb8 	bl	148c <Sys_GetCoreID>
   1491c:	4603      	mov	r3, r0
   1491e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   14920:	4a10      	ldr	r2, [pc, #64]	; (14964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   14922:	9b01      	ldr	r3, [sp, #4]
   14924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14928:	2b00      	cmp	r3, #0
   1492a:	d10d      	bne.n	14948 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1492c:	f7eb fff2 	bl	914 <Pwm_schm_read_msr>
   14930:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14932:	9b00      	ldr	r3, [sp, #0]
   14934:	f003 0301 	and.w	r3, r3, #1
   14938:	2b00      	cmp	r3, #0
   1493a:	d100      	bne.n	1493e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1493c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1493e:	490a      	ldr	r1, [pc, #40]	; (14968 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   14940:	9b01      	ldr	r3, [sp, #4]
   14942:	9a00      	ldr	r2, [sp, #0]
   14944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   14948:	4a06      	ldr	r2, [pc, #24]	; (14964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   1494a:	9b01      	ldr	r3, [sp, #4]
   1494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14950:	1c5a      	adds	r2, r3, #1
   14952:	4904      	ldr	r1, [pc, #16]	; (14964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   14954:	9b01      	ldr	r3, [sp, #4]
   14956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1495a:	bf00      	nop
   1495c:	b003      	add	sp, #12
   1495e:	f85d fb04 	ldr.w	pc, [sp], #4
   14962:	bf00      	nop
   14964:	1fff96e8 	.word	0x1fff96e8
   14968:	1fff96e4 	.word	0x1fff96e4

0001496c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   1496c:	b500      	push	{lr}
   1496e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14970:	f7ec fd8c 	bl	148c <Sys_GetCoreID>
   14974:	4603      	mov	r3, r0
   14976:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   14978:	4a0d      	ldr	r2, [pc, #52]	; (149b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   1497a:	9b01      	ldr	r3, [sp, #4]
   1497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14980:	1e5a      	subs	r2, r3, #1
   14982:	490b      	ldr	r1, [pc, #44]	; (149b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   14984:	9b01      	ldr	r3, [sp, #4]
   14986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1498a:	4a0a      	ldr	r2, [pc, #40]	; (149b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   1498c:	9b01      	ldr	r3, [sp, #4]
   1498e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14992:	f003 0301 	and.w	r3, r3, #1
   14996:	2b00      	cmp	r3, #0
   14998:	d106      	bne.n	149a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   1499a:	4a05      	ldr	r2, [pc, #20]	; (149b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   1499c:	9b01      	ldr	r3, [sp, #4]
   1499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149a2:	2b00      	cmp	r3, #0
   149a4:	d100      	bne.n	149a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149a8:	bf00      	nop
   149aa:	b003      	add	sp, #12
   149ac:	f85d fb04 	ldr.w	pc, [sp], #4
   149b0:	1fff96e8 	.word	0x1fff96e8
   149b4:	1fff96e4 	.word	0x1fff96e4

000149b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   149b8:	b500      	push	{lr}
   149ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149bc:	f7ec fd66 	bl	148c <Sys_GetCoreID>
   149c0:	4603      	mov	r3, r0
   149c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   149c4:	4a10      	ldr	r2, [pc, #64]	; (14a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   149c6:	9b01      	ldr	r3, [sp, #4]
   149c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149cc:	2b00      	cmp	r3, #0
   149ce:	d10d      	bne.n	149ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149d0:	f7eb ffa0 	bl	914 <Pwm_schm_read_msr>
   149d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149d6:	9b00      	ldr	r3, [sp, #0]
   149d8:	f003 0301 	and.w	r3, r3, #1
   149dc:	2b00      	cmp	r3, #0
   149de:	d100      	bne.n	149e2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   149e2:	490a      	ldr	r1, [pc, #40]	; (14a0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   149e4:	9b01      	ldr	r3, [sp, #4]
   149e6:	9a00      	ldr	r2, [sp, #0]
   149e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   149ec:	4a06      	ldr	r2, [pc, #24]	; (14a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   149ee:	9b01      	ldr	r3, [sp, #4]
   149f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149f4:	1c5a      	adds	r2, r3, #1
   149f6:	4904      	ldr	r1, [pc, #16]	; (14a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   149f8:	9b01      	ldr	r3, [sp, #4]
   149fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149fe:	bf00      	nop
   14a00:	b003      	add	sp, #12
   14a02:	f85d fb04 	ldr.w	pc, [sp], #4
   14a06:	bf00      	nop
   14a08:	1fff96f0 	.word	0x1fff96f0
   14a0c:	1fff96ec 	.word	0x1fff96ec

00014a10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   14a10:	b500      	push	{lr}
   14a12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a14:	f7ec fd3a 	bl	148c <Sys_GetCoreID>
   14a18:	4603      	mov	r3, r0
   14a1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   14a1c:	4a0d      	ldr	r2, [pc, #52]	; (14a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   14a1e:	9b01      	ldr	r3, [sp, #4]
   14a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a24:	1e5a      	subs	r2, r3, #1
   14a26:	490b      	ldr	r1, [pc, #44]	; (14a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   14a28:	9b01      	ldr	r3, [sp, #4]
   14a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   14a2e:	4a0a      	ldr	r2, [pc, #40]	; (14a58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   14a30:	9b01      	ldr	r3, [sp, #4]
   14a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a36:	f003 0301 	and.w	r3, r3, #1
   14a3a:	2b00      	cmp	r3, #0
   14a3c:	d106      	bne.n	14a4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   14a3e:	4a05      	ldr	r2, [pc, #20]	; (14a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   14a40:	9b01      	ldr	r3, [sp, #4]
   14a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a46:	2b00      	cmp	r3, #0
   14a48:	d100      	bne.n	14a4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a4c:	bf00      	nop
   14a4e:	b003      	add	sp, #12
   14a50:	f85d fb04 	ldr.w	pc, [sp], #4
   14a54:	1fff96f0 	.word	0x1fff96f0
   14a58:	1fff96ec 	.word	0x1fff96ec

00014a5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   14a5c:	b500      	push	{lr}
   14a5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a60:	f7ec fd14 	bl	148c <Sys_GetCoreID>
   14a64:	4603      	mov	r3, r0
   14a66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   14a68:	4a10      	ldr	r2, [pc, #64]	; (14aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   14a6a:	9b01      	ldr	r3, [sp, #4]
   14a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a70:	2b00      	cmp	r3, #0
   14a72:	d10d      	bne.n	14a90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a74:	f7eb ff4e 	bl	914 <Pwm_schm_read_msr>
   14a78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a7a:	9b00      	ldr	r3, [sp, #0]
   14a7c:	f003 0301 	and.w	r3, r3, #1
   14a80:	2b00      	cmp	r3, #0
   14a82:	d100      	bne.n	14a86 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   14a86:	490a      	ldr	r1, [pc, #40]	; (14ab0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   14a88:	9b01      	ldr	r3, [sp, #4]
   14a8a:	9a00      	ldr	r2, [sp, #0]
   14a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   14a90:	4a06      	ldr	r2, [pc, #24]	; (14aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   14a92:	9b01      	ldr	r3, [sp, #4]
   14a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a98:	1c5a      	adds	r2, r3, #1
   14a9a:	4904      	ldr	r1, [pc, #16]	; (14aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14aa2:	bf00      	nop
   14aa4:	b003      	add	sp, #12
   14aa6:	f85d fb04 	ldr.w	pc, [sp], #4
   14aaa:	bf00      	nop
   14aac:	1fff96f8 	.word	0x1fff96f8
   14ab0:	1fff96f4 	.word	0x1fff96f4

00014ab4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   14ab4:	b500      	push	{lr}
   14ab6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ab8:	f7ec fce8 	bl	148c <Sys_GetCoreID>
   14abc:	4603      	mov	r3, r0
   14abe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   14ac0:	4a0d      	ldr	r2, [pc, #52]	; (14af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   14ac2:	9b01      	ldr	r3, [sp, #4]
   14ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ac8:	1e5a      	subs	r2, r3, #1
   14aca:	490b      	ldr	r1, [pc, #44]	; (14af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   14acc:	9b01      	ldr	r3, [sp, #4]
   14ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   14ad2:	4a0a      	ldr	r2, [pc, #40]	; (14afc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   14ad4:	9b01      	ldr	r3, [sp, #4]
   14ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ada:	f003 0301 	and.w	r3, r3, #1
   14ade:	2b00      	cmp	r3, #0
   14ae0:	d106      	bne.n	14af0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   14ae2:	4a05      	ldr	r2, [pc, #20]	; (14af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   14ae4:	9b01      	ldr	r3, [sp, #4]
   14ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d100      	bne.n	14af0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14aee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14af0:	bf00      	nop
   14af2:	b003      	add	sp, #12
   14af4:	f85d fb04 	ldr.w	pc, [sp], #4
   14af8:	1fff96f8 	.word	0x1fff96f8
   14afc:	1fff96f4 	.word	0x1fff96f4

00014b00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   14b00:	b500      	push	{lr}
   14b02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b04:	f7ec fcc2 	bl	148c <Sys_GetCoreID>
   14b08:	4603      	mov	r3, r0
   14b0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   14b0c:	4a10      	ldr	r2, [pc, #64]	; (14b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   14b0e:	9b01      	ldr	r3, [sp, #4]
   14b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b14:	2b00      	cmp	r3, #0
   14b16:	d10d      	bne.n	14b34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b18:	f7eb fefc 	bl	914 <Pwm_schm_read_msr>
   14b1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b1e:	9b00      	ldr	r3, [sp, #0]
   14b20:	f003 0301 	and.w	r3, r3, #1
   14b24:	2b00      	cmp	r3, #0
   14b26:	d100      	bne.n	14b2a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   14b2a:	490a      	ldr	r1, [pc, #40]	; (14b54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   14b2c:	9b01      	ldr	r3, [sp, #4]
   14b2e:	9a00      	ldr	r2, [sp, #0]
   14b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   14b34:	4a06      	ldr	r2, [pc, #24]	; (14b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   14b36:	9b01      	ldr	r3, [sp, #4]
   14b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b3c:	1c5a      	adds	r2, r3, #1
   14b3e:	4904      	ldr	r1, [pc, #16]	; (14b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   14b40:	9b01      	ldr	r3, [sp, #4]
   14b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b46:	bf00      	nop
   14b48:	b003      	add	sp, #12
   14b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b4e:	bf00      	nop
   14b50:	1fff9700 	.word	0x1fff9700
   14b54:	1fff96fc 	.word	0x1fff96fc

00014b58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   14b58:	b500      	push	{lr}
   14b5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b5c:	f7ec fc96 	bl	148c <Sys_GetCoreID>
   14b60:	4603      	mov	r3, r0
   14b62:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   14b64:	4a0d      	ldr	r2, [pc, #52]	; (14b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   14b66:	9b01      	ldr	r3, [sp, #4]
   14b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b6c:	1e5a      	subs	r2, r3, #1
   14b6e:	490b      	ldr	r1, [pc, #44]	; (14b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   14b70:	9b01      	ldr	r3, [sp, #4]
   14b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   14b76:	4a0a      	ldr	r2, [pc, #40]	; (14ba0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   14b78:	9b01      	ldr	r3, [sp, #4]
   14b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b7e:	f003 0301 	and.w	r3, r3, #1
   14b82:	2b00      	cmp	r3, #0
   14b84:	d106      	bne.n	14b94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   14b86:	4a05      	ldr	r2, [pc, #20]	; (14b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   14b88:	9b01      	ldr	r3, [sp, #4]
   14b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b8e:	2b00      	cmp	r3, #0
   14b90:	d100      	bne.n	14b94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b94:	bf00      	nop
   14b96:	b003      	add	sp, #12
   14b98:	f85d fb04 	ldr.w	pc, [sp], #4
   14b9c:	1fff9700 	.word	0x1fff9700
   14ba0:	1fff96fc 	.word	0x1fff96fc

00014ba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   14ba4:	b500      	push	{lr}
   14ba6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ba8:	f7ec fc70 	bl	148c <Sys_GetCoreID>
   14bac:	4603      	mov	r3, r0
   14bae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   14bb0:	4a10      	ldr	r2, [pc, #64]	; (14bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   14bb2:	9b01      	ldr	r3, [sp, #4]
   14bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb8:	2b00      	cmp	r3, #0
   14bba:	d10d      	bne.n	14bd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bbc:	f7eb feaa 	bl	914 <Pwm_schm_read_msr>
   14bc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bc2:	9b00      	ldr	r3, [sp, #0]
   14bc4:	f003 0301 	and.w	r3, r3, #1
   14bc8:	2b00      	cmp	r3, #0
   14bca:	d100      	bne.n	14bce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14bcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   14bce:	490a      	ldr	r1, [pc, #40]	; (14bf8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   14bd0:	9b01      	ldr	r3, [sp, #4]
   14bd2:	9a00      	ldr	r2, [sp, #0]
   14bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   14bd8:	4a06      	ldr	r2, [pc, #24]	; (14bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be0:	1c5a      	adds	r2, r3, #1
   14be2:	4904      	ldr	r1, [pc, #16]	; (14bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   14be4:	9b01      	ldr	r3, [sp, #4]
   14be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bea:	bf00      	nop
   14bec:	b003      	add	sp, #12
   14bee:	f85d fb04 	ldr.w	pc, [sp], #4
   14bf2:	bf00      	nop
   14bf4:	1fff9708 	.word	0x1fff9708
   14bf8:	1fff9704 	.word	0x1fff9704

00014bfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   14bfc:	b500      	push	{lr}
   14bfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c00:	f7ec fc44 	bl	148c <Sys_GetCoreID>
   14c04:	4603      	mov	r3, r0
   14c06:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   14c08:	4a0d      	ldr	r2, [pc, #52]	; (14c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   14c0a:	9b01      	ldr	r3, [sp, #4]
   14c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c10:	1e5a      	subs	r2, r3, #1
   14c12:	490b      	ldr	r1, [pc, #44]	; (14c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   14c14:	9b01      	ldr	r3, [sp, #4]
   14c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   14c1a:	4a0a      	ldr	r2, [pc, #40]	; (14c44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   14c1c:	9b01      	ldr	r3, [sp, #4]
   14c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c22:	f003 0301 	and.w	r3, r3, #1
   14c26:	2b00      	cmp	r3, #0
   14c28:	d106      	bne.n	14c38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   14c2a:	4a05      	ldr	r2, [pc, #20]	; (14c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   14c2c:	9b01      	ldr	r3, [sp, #4]
   14c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c32:	2b00      	cmp	r3, #0
   14c34:	d100      	bne.n	14c38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c38:	bf00      	nop
   14c3a:	b003      	add	sp, #12
   14c3c:	f85d fb04 	ldr.w	pc, [sp], #4
   14c40:	1fff9708 	.word	0x1fff9708
   14c44:	1fff9704 	.word	0x1fff9704

00014c48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   14c48:	b500      	push	{lr}
   14c4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c4c:	f7ec fc1e 	bl	148c <Sys_GetCoreID>
   14c50:	4603      	mov	r3, r0
   14c52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   14c54:	4a10      	ldr	r2, [pc, #64]	; (14c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   14c56:	9b01      	ldr	r3, [sp, #4]
   14c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d10d      	bne.n	14c7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c60:	f7eb fe58 	bl	914 <Pwm_schm_read_msr>
   14c64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c66:	9b00      	ldr	r3, [sp, #0]
   14c68:	f003 0301 	and.w	r3, r3, #1
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d100      	bne.n	14c72 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   14c72:	490a      	ldr	r1, [pc, #40]	; (14c9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   14c74:	9b01      	ldr	r3, [sp, #4]
   14c76:	9a00      	ldr	r2, [sp, #0]
   14c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   14c7c:	4a06      	ldr	r2, [pc, #24]	; (14c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   14c7e:	9b01      	ldr	r3, [sp, #4]
   14c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c84:	1c5a      	adds	r2, r3, #1
   14c86:	4904      	ldr	r1, [pc, #16]	; (14c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   14c88:	9b01      	ldr	r3, [sp, #4]
   14c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c8e:	bf00      	nop
   14c90:	b003      	add	sp, #12
   14c92:	f85d fb04 	ldr.w	pc, [sp], #4
   14c96:	bf00      	nop
   14c98:	1fff9710 	.word	0x1fff9710
   14c9c:	1fff970c 	.word	0x1fff970c

00014ca0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   14ca0:	b500      	push	{lr}
   14ca2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ca4:	f7ec fbf2 	bl	148c <Sys_GetCoreID>
   14ca8:	4603      	mov	r3, r0
   14caa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   14cac:	4a0d      	ldr	r2, [pc, #52]	; (14ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   14cae:	9b01      	ldr	r3, [sp, #4]
   14cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cb4:	1e5a      	subs	r2, r3, #1
   14cb6:	490b      	ldr	r1, [pc, #44]	; (14ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   14cb8:	9b01      	ldr	r3, [sp, #4]
   14cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   14cbe:	4a0a      	ldr	r2, [pc, #40]	; (14ce8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   14cc0:	9b01      	ldr	r3, [sp, #4]
   14cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cc6:	f003 0301 	and.w	r3, r3, #1
   14cca:	2b00      	cmp	r3, #0
   14ccc:	d106      	bne.n	14cdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   14cce:	4a05      	ldr	r2, [pc, #20]	; (14ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   14cd0:	9b01      	ldr	r3, [sp, #4]
   14cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	d100      	bne.n	14cdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14cda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cdc:	bf00      	nop
   14cde:	b003      	add	sp, #12
   14ce0:	f85d fb04 	ldr.w	pc, [sp], #4
   14ce4:	1fff9710 	.word	0x1fff9710
   14ce8:	1fff970c 	.word	0x1fff970c

00014cec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   14cec:	b500      	push	{lr}
   14cee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cf0:	f7ec fbcc 	bl	148c <Sys_GetCoreID>
   14cf4:	4603      	mov	r3, r0
   14cf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   14cf8:	4a10      	ldr	r2, [pc, #64]	; (14d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   14cfa:	9b01      	ldr	r3, [sp, #4]
   14cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d00:	2b00      	cmp	r3, #0
   14d02:	d10d      	bne.n	14d20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d04:	f7eb fe06 	bl	914 <Pwm_schm_read_msr>
   14d08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d0a:	9b00      	ldr	r3, [sp, #0]
   14d0c:	f003 0301 	and.w	r3, r3, #1
   14d10:	2b00      	cmp	r3, #0
   14d12:	d100      	bne.n	14d16 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   14d16:	490a      	ldr	r1, [pc, #40]	; (14d40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   14d18:	9b01      	ldr	r3, [sp, #4]
   14d1a:	9a00      	ldr	r2, [sp, #0]
   14d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   14d20:	4a06      	ldr	r2, [pc, #24]	; (14d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   14d22:	9b01      	ldr	r3, [sp, #4]
   14d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d28:	1c5a      	adds	r2, r3, #1
   14d2a:	4904      	ldr	r1, [pc, #16]	; (14d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   14d2c:	9b01      	ldr	r3, [sp, #4]
   14d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d32:	bf00      	nop
   14d34:	b003      	add	sp, #12
   14d36:	f85d fb04 	ldr.w	pc, [sp], #4
   14d3a:	bf00      	nop
   14d3c:	1fff9718 	.word	0x1fff9718
   14d40:	1fff9714 	.word	0x1fff9714

00014d44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   14d44:	b500      	push	{lr}
   14d46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d48:	f7ec fba0 	bl	148c <Sys_GetCoreID>
   14d4c:	4603      	mov	r3, r0
   14d4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   14d50:	4a0d      	ldr	r2, [pc, #52]	; (14d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   14d52:	9b01      	ldr	r3, [sp, #4]
   14d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d58:	1e5a      	subs	r2, r3, #1
   14d5a:	490b      	ldr	r1, [pc, #44]	; (14d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   14d5c:	9b01      	ldr	r3, [sp, #4]
   14d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   14d62:	4a0a      	ldr	r2, [pc, #40]	; (14d8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d6a:	f003 0301 	and.w	r3, r3, #1
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d106      	bne.n	14d80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   14d72:	4a05      	ldr	r2, [pc, #20]	; (14d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   14d74:	9b01      	ldr	r3, [sp, #4]
   14d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	d100      	bne.n	14d80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d80:	bf00      	nop
   14d82:	b003      	add	sp, #12
   14d84:	f85d fb04 	ldr.w	pc, [sp], #4
   14d88:	1fff9718 	.word	0x1fff9718
   14d8c:	1fff9714 	.word	0x1fff9714

00014d90 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   14d90:	bf00      	nop
   14d92:	4770      	bx	lr

00014d94 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   14d94:	b510      	push	{r4, lr}
   14d96:	b084      	sub	sp, #16
   14d98:	4604      	mov	r4, r0
   14d9a:	4608      	mov	r0, r1
   14d9c:	4611      	mov	r1, r2
   14d9e:	461a      	mov	r2, r3
   14da0:	4623      	mov	r3, r4
   14da2:	f8ad 3006 	strh.w	r3, [sp, #6]
   14da6:	4603      	mov	r3, r0
   14da8:	f88d 3005 	strb.w	r3, [sp, #5]
   14dac:	460b      	mov	r3, r1
   14dae:	f88d 3004 	strb.w	r3, [sp, #4]
   14db2:	4613      	mov	r3, r2
   14db4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14db8:	f7ec fb68 	bl	148c <Sys_GetCoreID>
   14dbc:	4603      	mov	r3, r0
   14dbe:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   14dc0:	490d      	ldr	r1, [pc, #52]	; (14df8 <Det_ReportError+0x64>)
   14dc2:	9b03      	ldr	r3, [sp, #12]
   14dc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14dc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   14dcc:	4a0b      	ldr	r2, [pc, #44]	; (14dfc <Det_ReportError+0x68>)
   14dce:	9b03      	ldr	r3, [sp, #12]
   14dd0:	4413      	add	r3, r2
   14dd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14dd6:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   14dd8:	4a09      	ldr	r2, [pc, #36]	; (14e00 <Det_ReportError+0x6c>)
   14dda:	9b03      	ldr	r3, [sp, #12]
   14ddc:	4413      	add	r3, r2
   14dde:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14de2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   14de4:	4a07      	ldr	r2, [pc, #28]	; (14e04 <Det_ReportError+0x70>)
   14de6:	9b03      	ldr	r3, [sp, #12]
   14de8:	4413      	add	r3, r2
   14dea:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14dee:	701a      	strb	r2, [r3, #0]

    return E_OK;
   14df0:	2300      	movs	r3, #0
}
   14df2:	4618      	mov	r0, r3
   14df4:	b004      	add	sp, #16
   14df6:	bd10      	pop	{r4, pc}
   14df8:	1fff9744 	.word	0x1fff9744
   14dfc:	1fff971c 	.word	0x1fff971c
   14e00:	1fff9720 	.word	0x1fff9720
   14e04:	1fff9724 	.word	0x1fff9724

00014e08 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   14e08:	b510      	push	{r4, lr}
   14e0a:	b084      	sub	sp, #16
   14e0c:	4604      	mov	r4, r0
   14e0e:	4608      	mov	r0, r1
   14e10:	4611      	mov	r1, r2
   14e12:	461a      	mov	r2, r3
   14e14:	4623      	mov	r3, r4
   14e16:	f8ad 3006 	strh.w	r3, [sp, #6]
   14e1a:	4603      	mov	r3, r0
   14e1c:	f88d 3005 	strb.w	r3, [sp, #5]
   14e20:	460b      	mov	r3, r1
   14e22:	f88d 3004 	strb.w	r3, [sp, #4]
   14e26:	4613      	mov	r3, r2
   14e28:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e2c:	f7ec fb2e 	bl	148c <Sys_GetCoreID>
   14e30:	4603      	mov	r3, r0
   14e32:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   14e34:	490d      	ldr	r1, [pc, #52]	; (14e6c <Det_ReportRuntimeError+0x64>)
   14e36:	9b03      	ldr	r3, [sp, #12]
   14e38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14e3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   14e40:	4a0b      	ldr	r2, [pc, #44]	; (14e70 <Det_ReportRuntimeError+0x68>)
   14e42:	9b03      	ldr	r3, [sp, #12]
   14e44:	4413      	add	r3, r2
   14e46:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14e4a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   14e4c:	4a09      	ldr	r2, [pc, #36]	; (14e74 <Det_ReportRuntimeError+0x6c>)
   14e4e:	9b03      	ldr	r3, [sp, #12]
   14e50:	4413      	add	r3, r2
   14e52:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14e56:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   14e58:	4a07      	ldr	r2, [pc, #28]	; (14e78 <Det_ReportRuntimeError+0x70>)
   14e5a:	9b03      	ldr	r3, [sp, #12]
   14e5c:	4413      	add	r3, r2
   14e5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14e62:	701a      	strb	r2, [r3, #0]

    return E_OK;
   14e64:	2300      	movs	r3, #0
}
   14e66:	4618      	mov	r0, r3
   14e68:	b004      	add	sp, #16
   14e6a:	bd10      	pop	{r4, pc}
   14e6c:	1fff9748 	.word	0x1fff9748
   14e70:	1fff9728 	.word	0x1fff9728
   14e74:	1fff972c 	.word	0x1fff972c
   14e78:	1fff9730 	.word	0x1fff9730

00014e7c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   14e7c:	b510      	push	{r4, lr}
   14e7e:	b084      	sub	sp, #16
   14e80:	4604      	mov	r4, r0
   14e82:	4608      	mov	r0, r1
   14e84:	4611      	mov	r1, r2
   14e86:	461a      	mov	r2, r3
   14e88:	4623      	mov	r3, r4
   14e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
   14e8e:	4603      	mov	r3, r0
   14e90:	f88d 3005 	strb.w	r3, [sp, #5]
   14e94:	460b      	mov	r3, r1
   14e96:	f88d 3004 	strb.w	r3, [sp, #4]
   14e9a:	4613      	mov	r3, r2
   14e9c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ea0:	f7ec faf4 	bl	148c <Sys_GetCoreID>
   14ea4:	4603      	mov	r3, r0
   14ea6:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   14ea8:	490d      	ldr	r1, [pc, #52]	; (14ee0 <Det_ReportTransientFault+0x64>)
   14eaa:	9b03      	ldr	r3, [sp, #12]
   14eac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14eb0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   14eb4:	4a0b      	ldr	r2, [pc, #44]	; (14ee4 <Det_ReportTransientFault+0x68>)
   14eb6:	9b03      	ldr	r3, [sp, #12]
   14eb8:	4413      	add	r3, r2
   14eba:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14ebe:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   14ec0:	4a09      	ldr	r2, [pc, #36]	; (14ee8 <Det_ReportTransientFault+0x6c>)
   14ec2:	9b03      	ldr	r3, [sp, #12]
   14ec4:	4413      	add	r3, r2
   14ec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14eca:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   14ecc:	4a07      	ldr	r2, [pc, #28]	; (14eec <Det_ReportTransientFault+0x70>)
   14ece:	9b03      	ldr	r3, [sp, #12]
   14ed0:	4413      	add	r3, r2
   14ed2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14ed6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   14ed8:	2300      	movs	r3, #0
}
   14eda:	4618      	mov	r0, r3
   14edc:	b004      	add	sp, #16
   14ede:	bd10      	pop	{r4, pc}
   14ee0:	1fff9740 	.word	0x1fff9740
   14ee4:	1fff9734 	.word	0x1fff9734
   14ee8:	1fff9738 	.word	0x1fff9738
   14eec:	1fff973c 	.word	0x1fff973c

00014ef0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   14ef0:	bf00      	nop
   14ef2:	4770      	bx	lr

00014ef4 <Clock_Ip_au8DividerCallbackIndex>:
   14ef4:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

00014f04 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00014f14 <Clock_Ip_au8XoscCallbackIndex>:
   14f14:	0100 0000 0000 0000 0000 0000 0000 0000     ................

00014f24 <Clock_Ip_au8IrcoscCallbackIndex>:
   14f24:	0100 0302 0004 0000 0000 0000 0000 0000     ................

00014f34 <Clock_Ip_au8GateCallbackIndex>:
   14f34:	0200 0601 0301 0104 0500 0000 0000 0000     ................

00014f44 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00014f54 <Clock_Ip_au8PllCallbackIndex>:
   14f54:	0100 0000 0000 0000 0000 0000 0000 0000     ................

00014f64 <Clock_Ip_au8SelectorCallbackIndex>:
   14f64:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

00014f74 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00014f84 <Clock_Ip_au8CmuCallbackIndex>:
	...

00014f94 <Clock_Ip_au8ClockFeatures>:
	...
   14fa4:	0000 0100 0000 0000 0000 0000 0002 0000     ................
   14fb4:	0000 0000 0300 0000 0000 0000 0000 0004     ................
   14fc4:	0000 0000 0000 0500 0000 0000 0000 0000     ................
   14fd4:	0006 0000 0000 0000 0100 0000 0000 0000     ................
   14fe4:	0000 0001 0000 0000 0000 0400 0000 0000     ................
   14ff4:	0000 0000 0005 0000 0001 0000 0401 0000     ................
   15004:	0200 0000 0100 0005 0000 0003 0000 0402     ................
   15014:	0000 0400 0000 0200 0005 0000 0005 0000     ................
   15024:	0403 0000 0600 0000 0300 0005 0000 0007     ................
   15034:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
   15074:	0000 0005 0000 0000 0000 0600 0100 0000     ................
   15084:	0000 0000 0007 0003 0000 0000 0000 0000     ................
   15094:	0000 0000 0000 0006 0000 0000 0000 0700     ................
   150a4:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
   150bc:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
   150cc:	0000 0000 000b 0003 0000 0000 0000 0000     ................
   150dc:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
   150ec:	0100 0000 0000 0000 000e 0003 0000 0000     ................
   150fc:	0800 0000 0000 0000 0000 0009 0000 0000     ................
   1510c:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
   1511c:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
   1512c:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
   15144:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
   15154:	0000 0100 0000 0000 0000 0000 0007 0000     ................
   15164:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
   15174:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
   15184:	0009 0000 0400 0000 0900 0000 0000 0003     ................
   15194:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
   151a4:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
   151b4:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
   151c4:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
   151d4:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
   151e4:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
   151f4:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
   15204:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
   15214:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
   15224:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
   15234:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
   15244:	0000 0001 0000 0009 0000 0000 0000 0700     ................
   15254:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
   15264:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
   15274:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
   15284:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
   15294:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

000152a4 <Clock_Ip_au16SelectorEntryHardwareValue>:
   152a4:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
   152b4:	0810 0001 0100 0202 0000 0000 0007 0000     ................
   152c4:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

000152fc <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   152fc:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0001532c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   1532c:	0700 0000 0000 0000 0000 0202 0303 0101     ................
   1533c:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0001535c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   1535c:	0001 0000 0000 0000 0000 0202 0303 0101     ................
   1536c:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0001538c <Clock_Ip_au8DividerValueHardwareValue>:
   1538c:	0100 0002 0003 0000 0004 0000 0000 0000     ................
   1539c:	0005 0000 0000 0000 0000 0000 0000 0000     ................
   153ac:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
   153cc:	0007 0000                                   ....

000153d0 <Clock_Ip_apxScgPeriphAsyncDivs>:
   153d0:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

000153e0 <Clock_Ip_aeSourceTypeClockName>:
   153e0:	0000 0000 0001 0000 0001 0000 0001 0000     ................
   153f0:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   15400:	0002 0000 0003 0000 0001 0000 0001 0000     ................
   15410:	0001 0000 0001 0000 0002 0000 0002 0000     ................
   15420:	0003 0000 0003 0000 0001 0000 0001 0000     ................
   15430:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0001549c <Clock_Ip_aeHwPllName>:
   1549c:	0009 0000                                   ....

000154a0 <Clock_Ip_aeHwDfsName>:
   154a0:	0057 0000                                   W...

000154a4 <Clock_Ip_axDividerCallbacks>:
   154a4:	2b15 0000 2b1f 0000 2b39 0000 2b53 0000     .+...+..9+..S+..
   154b4:	2b6d 0000 2b87 0000 2ba1 0000 2bbb 0000     m+...+...+...+..
   154c4:	2bd5 0000 2bef 0000 2c09 0000 2c23 0000     .+...+...,..#,..
   154d4:	2c3d 0000 2c57 0000 2c71 0000               =,..W,..q,..

000154e0 <Clock_Ip_axDividerTriggerCallbacks>:
   154e0:	2fe5 0000 2fe5 0000                         ./.../..

000154e8 <Clock_Ip_axExtOscCallbacks>:
   154e8:	2ff1 0000 2ff1 0000 2ff1 0000 2ffb 0000     ./.../.../.../..
   154f8:	2ff1 0000 3005 0000 301f 0000 3039 0000     ./...0...0..90..
   15508:	30bd 0000 30d1 0000                         .0...0..

00015510 <Clock_Ip_axFracDivCallbacks>:
   15510:	3291 0000 3291 0000 329b 0000               .2...2...2..

0001551c <Clock_Ip_axGateCallbacks>:
   1551c:	32b5 0000 32bf 0000 33bf 0000 33d9 0000     .2...2...3...3..
   1552c:	336f 0000 3389 0000 331f 0000 3339 0000     o3...3...3..93..
   1553c:	32cf 0000 32e9 0000 340f 0000 3429 0000     .2...2...4..)4..
   1554c:	345f 0000 3479 0000                         _4..y4..

00015554 <Clock_Ip_axIntOscCallbacks>:
   15554:	3625 0000 3625 0000 362f 0000 3639 0000     %6..%6../6..96..
   15564:	3653 0000 366d 0000 3681 0000 369b 0000     S6..m6...6...6..
   15574:	36b5 0000 36c9 0000 36e3 0000 36fd 0000     .6...6...6...6..
   15584:	37a5 0000 37bf 0000 37d9 0000               .7...7...7..

00015590 <Clock_Ip_axCmuCallbacks>:
   15590:	3d75 0000 3d7f 0000 3d8b 0000 3d75 0000     u=...=...=..u=..

000155a0 <Clock_Ip_axPllCallbacks>:
   155a0:	3d95 0000 3d95 0000 3d9f 0000 3d95 0000     .=...=...=...=..
   155b0:	3dab 0000 3db5 0000 3dcf 0000 3de9 0000     .=...=...=...=..
   155c0:	3e8d 0000 3e79 0000                         .>..y>..

000155c8 <Clock_Ip_axPcfsCallbacks>:
   155c8:	3fe9 0000                                   .?..

000155cc <Clock_Ip_axSelectorCallbacks>:
   155cc:	3ff5 0000 3ff5 0000 3fff 0000 4019 0000     .?...?...?...@..
   155dc:	3ff5 0000 4033 0000 404d 0000 4067 0000     .?..3@..M@..g@..
   155ec:	4081 0000 409b 0000 40b5 0000 40cf 0000     .@...@...@...@..
   155fc:	40e9 0000 4103 0000 411d 0000 4137 0000     .@...A...A..7A..
   1560c:	4151 0000 416b 0000 4185 0000 419f 0000     QA..kA...A...A..
   1561c:	41b9 0000 41d3 0000                         .A...A..

00015624 <ClockSource>:
   15624:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
   1563c:	0009 0000                                   ....

00015640 <ResetReasonArray>:
   15640:	0000 0000 0001 0000 0002 0000 0003 0000     ................
   15650:	0004 0000 0005 0000 0006 0000 0007 0000     ................
   15660:	0008 0000 0009 0000 000a 0000 000b 0000     ................
   15670:	000c 0000 000d 0000 000e 0000               ............

0001567c <Port_au32PortCiPortBaseAddr>:
   1567c:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
   1568c:	d000 4004                                   ...@

00015690 <Port_au32PortCiGpioBaseAddr>:
   15690:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
   156a0:	f100 400f                                   ...@

000156a4 <Adc_Ip_apxBase>:
   156a4:	b000 4003 7000 4002                         ...@.p.@

000156ac <Pdb_Adc_Ip_apxBase>:
   156ac:	6000 4003 1000 4003                         .`.@...@

000156b4 <Ftm_Pwm_Ip_aFtmBase>:
   156b4:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

000156c4 <Queue_Config>:
   156c4:	0002 0000 0001 0000 8b60 1fff               ........`...

000156d0 <Task_Config>:
   156d0:	0032 0000 0001 0000 0d65 0000 0064 0000     2.......e...d...
   156e0:	0001 0000 0d71 0000                         ....q...

000156e8 <Timer_Config>:
   156e8:	0064 0000 0000 0000 0e91 0000               d...........

000156f4 <Scheduler_Config>:
   156f4:	000a 0000 0002 0000 56d0 0001 0001 0000     .........V......
   15704:	56e8 0001 0001 0000 56c4 0001               .V.......V..

00015710 <ButtonsCfg>:
   15710:	008c 0000 012c 0000 0071 0000 012c 0000     ....,...q...,...
   15720:	000c 0000 012c 0000                         ....,...

00015728 <LedsCfg>:
   15728:	0048 0001 0049 0001 004a 0001 004b 0001     H...I...J...K...
   15738:	004d 0001 004e 0001                         M...N...

00015740 <AdcIpChansConfig_0>:
   15740:	0000 0000 0005 0000 0000 0000 0001 0000     ................
   15750:	0008 0000 0000 0000                         ........

00015758 <AdcIpChansConfig_1>:
   15758:	0000 0000 000f 0000 0000 0000 0001 0000     ................
   15768:	0008 0000 0000 0000                         ........

00015770 <AdcIpConfig_0>:
   15770:	0000 0000 0003 0000 0000 0000 000c 0000     ................
   15780:	0000 0000 0001 0000 0001 0000 0000 0000     ................
	...
   15798:	0000 00ff 0000 0000 0000 0000 5740 0001     ............@W..
   157a8:	a525 0000                                   %...

000157ac <AdcIpConfig_1>:
   157ac:	0000 0000 0003 0000 0000 0000 000c 0000     ................
   157bc:	0000 0000 0001 0000 0001 0000 0000 0000     ................
	...
   157d4:	0000 00ff 0000 0000 0000 0000 5758 0001     ............XW..
   157e4:	a547 0000                                   G...

000157e8 <AdcIpwCfg>:
   157e8:	5770 0001 57ac 0001 5db8 0001 5dd8 0001     pW...W...]...]..
   157f8:	0100 0101 0001 0001 0002 0002 ffff 0101     ................
   15808:	0100 0000                                   ....

0001580c <AdcIpwGroupConfig_0>:
   1580c:	0001 0000 0000 0000 00c8 0000 0000 0001     ................
   1581c:	0000 0000                                   ....

00015820 <AdcIpwGroupConfig_1>:
   15820:	0001 0000 0000 0000 00c8 0000 0000 0001     ................
   15830:	0000 0000                                   ....

00015834 <Adc_Group0_Assignment_0>:
   15834:	0000 0001                                   ....

00015838 <Adc_Group1_Assignment_1>:
   15838:	0000 0001                                   ....

0001583c <Adc_GroupsCfg>:
	...
   15858:	0001 0000 5834 0001 0002 0008 0005 0000     ....4X..........
   15868:	0000 0000 580c 0001 0001 0001 0000 0000     .....X..........
	...
   1588c:	0001 0000 5838 0001 0002 000f 0008 0000     ....8X..........
   1589c:	0000 0000 5820 0001                         .... X..

000158a4 <Adc_au16GroupIdToIndexMap>:
   158a4:	0000 0001                                   ....

000158a8 <Adc_Partition_Assignment>:
   158a8:	0000 0000                                   ....

000158ac <Adc_Config>:
   158ac:	57e8 0001 583c 0001 0002 0000 58a4 0001     .W..<X.......X..
   158bc:	0000 0000 58a8 0001 0001 0000               .....X......

000158c8 <Mcu_aClockConfigPB>:
	...
   158d0:	0002 1400 000e 0400 0020 0100 0002 0000     ........ .......
   158e0:	0001 0100 0001 0000 0005 0000 0001 0000     ................
   158f0:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
	...
   15908:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
	...
   15930:	0019 0000 0005 0000 001a 0000 0002 0000     ................
   15940:	001b 0000 0005 0000 002a 0000 0002 0000     ........*.......
   15950:	003f 0000 000a 0000 0040 0000 000a 0000     ?.......@.......
   15960:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
   15970:	0031 0000 000b 0000 0045 0000 0000 0000     1.......E.......
   15980:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
   15990:	0044 0000 0000 0000 0030 0000 000b 0000     D.......0.......
   159a0:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
   159b0:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
   159c0:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
   159d0:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   159e0:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   159f0:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   15a00:	0057 0000 0057 0000 0057 0000 0057 0000     W...W...W...W...
   15a10:	000a 0000 0001 0000 0000 0000 000b 0000     ................
   15a20:	0001 0000 0000 0000 000c 0000 0001 0000     ................
   15a30:	0000 0000 000d 0000 0002 0000 0000 0000     ................
   15a40:	001d 0000 0001 0000 0000 0000 001e 0000     ................
   15a50:	0002 0000 0000 0000 001f 0000 0001 0000     ................
   15a60:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
   15a70:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
   15a80:	0001 0000 0000 0000 0025 0000 0002 0000     ........%.......
   15a90:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
   15aa0:	0027 0000 0002 0000 0000 0000 0048 0000     '...........H...
   15ab0:	0001 0000 0001 0000 0057 0000 0000 0000     ........W.......
   15ac0:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
   15ad0:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
   15ae8:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
   15b00:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
   15b1c:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
   15b2c:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
   15b3c:	0030 0000 0001 0000 0031 0000 0001 0000     0.......1.......
   15b4c:	0033 0000 0000 0000 0034 0000 0000 0000     3.......4.......
   15b5c:	0036 0000 0000 0000 0039 0000 0000 0000     6.......9.......
   15b6c:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
   15b7c:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
   15b8c:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
   15b9c:	0040 0000 0001 0000 0041 0000 0000 0000     @.......A.......
   15bac:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
   15bbc:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
   15bcc:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
   15bdc:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
   15bec:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
   15bfc:	004e 0000 0001 0000 004f 0000 0001 0000     N.......O.......
   15c0c:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
   15c1c:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
   15c2c:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
   15c3c:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   15c4c:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   15c5c:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   15c6c:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   15c7c:	0057 0000 0000 0000 0057 0000 0000 0000     W.......W.......
   15c8c:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

00015cc0 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   15cdc:	0003 0000 0003 0000                         ........

00015ce4 <Ftm_Pwm_Ip_InstCfg1>:
   15ce4:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   15d18:	14d5 0000 0001 0000 0000 0000 0000 0000     ................
   15d28:	0000 0000 5cc0 0001                         .....\..

00015d30 <Ftm_Pwm_Ip_I1_Ch7>:
   15d30:	0007 0000 000a 0000 0000 0000 0000 0000     ................
   15d40:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...

00015d58 <Ftm_Pwm_Ip_I1_ChArray>:
   15d58:	5d30 0001                                   0]..

00015d5c <Ftm_Pwm_Ip_UserCfg1>:
   15d5c:	5ce4 0001 5d58 0001 0001 0000 0000 0000     .\..X]..........
   15d6c:	0000 0000                                   ....

00015d70 <aIrqConfiguration>:
   15d70:	0027 0000 0001 0000 8e69 0000 0028 0000     '.......i...(...
   15d80:	0001 0000 8e79 0000                         ....y...

00015d88 <intCtrlConfig>:
   15d88:	0002 0000 5d70 0001                         ....p]..

00015d90 <Mcu_Config>:
   15d90:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
   15da0:	61dc 0001 58c8 0001 61e8 0001               .a...X...a..

00015dac <OsIf_xPredefinedConfig>:
   15dac:	0000 0000 6c00 02dc                         .....l..

00015db4 <OsIf_apxPredefinedConfig>:
   15db4:	5dac 0001                                   .]..

00015db8 <PdbAdcIpConfig_0>:
	...
   15dc4:	000f 0000 0000 ffff 0000 0000 0000 0000     ................
   15dd4:	0000 0000                                   ....

00015dd8 <PdbAdcIpConfig_1>:
	...
   15de4:	000f 0000 0000 ffff 0000 0000 0000 0000     ................
   15df4:	0000 0000                                   ....

00015df8 <Platform_uConfiguration>:
   15df8:	5e00 0001                                   .^..

00015dfc <Platform_Config>:
   15dfc:	5df8 0001                                   .]..

00015e00 <ipwConfig>:
   15e00:	5d88 0001 0000 0000                         .]......

00015e08 <g_pin_mux_InitConfigArr>:
   15e08:	b000 4004 f080 400f 0008 0000 0002 0000     ...@...@........
   15e18:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15e30:	b000 4004 f080 400f 0009 0000 0002 0000     ...@...@........
   15e40:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15e58:	b000 4004 f080 400f 000a 0000 0002 0000     ...@...@........
   15e68:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15e80:	b000 4004 f080 400f 000b 0000 0002 0000     ...@...@........
   15e90:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15ea8:	b000 4004 f080 400f 000d 0000 0002 0000     ...@...@........
   15eb8:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15ed0:	b000 4004 f080 400f 000e 0000 0002 0000     ...@...@........
   15ee0:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15ef8:	d000 4004 f100 400f 000c 0000 0002 0000     ...@...@........
   15f08:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...
   15f20:	c000 4004 f0c0 400f 0011 0000 0002 0000     ...@...@........
   15f30:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...
   15f48:	9000 4004 f000 400f 000c 0000 0002 0000     ...@...@........
   15f58:	0001 0000 0001 0000 0000 0000 0000 0000     ................
	...
   15f70:	9000 4004 0000 0000 000d 0000 0002 0000     ...@............
   15f80:	0002 0000 0002 0000 0000 0000 0000 0000     ................
	...
   15f98:	a000 4004 0000 0000 0001 0000 0002 0000     ...@............
   15fa8:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...
   15fc0:	a000 4004 0000 0000 000d 0000 0002 0000     ...@............
   15fd0:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...

00015fe8 <au8Port_PartitionList>:
   15fe8:	0001 0000                                   ....

00015fec <au32Port_PinToPartitionMap>:
   15fec:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   15ffc:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   1600c:	0001 0000 0001 0000 0001 0000 0001 0000     ................

0001601c <Port_au16NoUnUsedPadsArrayDefault>:
   1601c:	0000 0001 0002 0003 0006 0007 0008 0009     ................
   1602c:	000b 000e 000f 0010 0011 0020 0022 0023     .......... .".#.
   1603c:	0024 0025 0026 0027 0028 0029 002a 002b     $.%.&.'.(.).*.+.
   1604c:	002c 002e 002f 0030 0031 0040 0041 0042     ,.../.0.1.@.A.B.
   1605c:	0043 0046 0047 004c 004f 0050 0051 0060     C.F.G.L.O.P.Q.`.
   1606c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   1607c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   1608c:	0080 0081 0082 0083 0084 0085 0086 0087     ................
   1609c:	0088 0089 008a 008b 008d 008e 008f 0090     ................

000160ac <Port_UnUsedPin>:
   160ac:	0000 0000 0001 0000 0000 0000               ............

000160b8 <Port_aPinConfigDefault>:
   160b8:	0048 0000 0100 0000 0000 0000 0002 0000     H...............
   160c8:	0001 0001 0049 0000 0100 0000 0000 0000     ....I...........
   160d8:	0002 0000 0101 0001 004a 0000 0100 0000     ........J.......
   160e8:	0000 0000 0002 0000 0101 0001 008c 0000     ................
   160f8:	0100 0000 0000 0000 0001 0000 0101 0001     ................
   16108:	004b 0000 0100 0000 0000 0000 0002 0000     K...............
   16118:	0101 0001 004d 0000 0100 0000 0000 0000     ....M...........
   16128:	0002 0000 0101 0001 004e 0000 0100 0000     ........N.......
   16138:	0000 0000 0002 0000 0101 0001 0071 0000     ............q...
   16148:	0100 0000 0000 0000 0001 0000 0101 0001     ................
   16158:	000c 0000 0100 0000 0000 0000 0001 0000     ................
   16168:	0101 0001 0021 0000 0000 0000 0002 0000     ....!...........
   16178:	0000 0000 0000 0001 002d 0000 0000 0000     ........-.......
   16188:	0002 0000 0000 0000 0000 0001 000d 0000     ................
   16198:	0200 0000 0000 0000 0002 0000 0000 0001     ................

000161a8 <Port_Config>:
   161a8:	000c 0048 601c 0001 60ac 0001 60b8 0001     ..H..`...`...`..
	...
   161c0:	5fec 0001 5fe8 0001 5e08 0001               ._..._...^..

000161cc <Power_Ip_RCM_ConfigPB>:
	...

000161d4 <Power_Ip_PMC_ConfigPB>:
   161d4:	0000 0000                                   ....

000161d8 <Power_Ip_SMC_ConfigPB>:
   161d8:	0000 0000                                   ....

000161dc <Power_Ip_aModeConfigPB>:
	...

000161e8 <Power_Ip_HwIPsConfigPB>:
   161e8:	61cc 0001 61d4 0001 61d8 0001               .a...a...a..

000161f4 <Pwm_Channels_PB>:
   161f4:	0000 0000 0001 0000 0001 0000 5d30 0001     ............0]..
   16204:	0001 0000 0001 0000                         ........

0001620c <Pwm_Instances_PB>:
   1620c:	0001 0000 0001 0000 5d5c 0001               ........\]..

00016218 <Pwm_Config>:
   16218:	0001 0000 61f4 0001 0001 0000 620c 0001     .....a.......b..

00016228 <__INIT_TABLE>:
   16228:	00000002 	.word	0x00000002
   1622c:	1fff8b10 	.word	0x1fff8b10
   16230:	00016250 	.word	0x00016250
   16234:	000162a0 	.word	0x000162a0
   16238:	1fff8800 	.word	0x1fff8800
   1623c:	00000000 	.word	0x00000000
   16240:	00000310 	.word	0x00000310

00016244 <__ZERO_TABLE>:
   16244:	00000001 	.word	0x00000001
   16248:	1fff8b60 	.word	0x1fff8b60
   1624c:	1fff97c0 	.word	0x1fff97c0
